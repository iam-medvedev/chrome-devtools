{"version":3,"file":"DynamicTheming.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/legacy/utils/DynamicTheming.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,4BAA4B,CAAC;AAEnD,6FAA6F;AAC7F,MAAM,OAAO,cAAc;IACzB,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,QAA4B;QACnD,IAAI,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,CAAC,YAAY,EAAE,EAAE;YAC3E,OAAO;SACR;QACD,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;SACR;QACD,MAAM,gBAAgB,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACxD,gBAAgB,CAAC,YAAY,CACzB,MAAM,EAAE,sDAAsD,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QACvG,gBAAgB,CAAC,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QACnD,gBAAgB,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAClD,MAAM,eAAe,GAAG,IAAI,OAAO,CAAU,OAAO,CAAC,EAAE;YACrD,gBAAgB,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACnD,gBAAgB,CAAC,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QACH,MAAM,mBAAmB,GAAG,oCAAoC,CAAC;QACjE,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QACjE,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAC5C,IAAI,YAAY,IAAI,MAAM,eAAe,EAAE;YACzC,YAAY,CAAC,MAAM,EAAE,CAAC;SACvB;IACH,CAAC;CACF","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\n\n// export class instead of function to make sinon spying possible (it cannot mock ES modules)\nexport class DynamicTheming {\n  static async fetchColors(document: Document|undefined): Promise<void> {\n    if (Host.InspectorFrontendHost.InspectorFrontendHostInstance.isHostedMode()) {\n      return;\n    }\n    if (!document) {\n      return;\n    }\n    const newColorsCssLink = document.createElement('link');\n    newColorsCssLink.setAttribute(\n        'href', `devtools://theme/colors.css?sets=ui,chrome&version=${(new Date()).getTime().toString()}`);\n    newColorsCssLink.setAttribute('rel', 'stylesheet');\n    newColorsCssLink.setAttribute('type', 'text/css');\n    const newColorsLoaded = new Promise<boolean>(resolve => {\n      newColorsCssLink.onload = resolve.bind(this, true);\n      newColorsCssLink.onerror = resolve.bind(this, false);\n    });\n    const COLORS_CSS_SELECTOR = 'link[href*=\\'//theme/colors.css\\']';\n    const colorCssNode = document.querySelector(COLORS_CSS_SELECTOR);\n    document.body.appendChild(newColorsCssLink);\n    if (colorCssNode && await newColorsLoaded) {\n      colorCssNode.remove();\n    }\n  }\n}\n"]}