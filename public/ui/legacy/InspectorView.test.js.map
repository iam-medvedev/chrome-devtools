{"version":3,"file":"InspectorView.test.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/InspectorView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {MockStore} from '../../testing/MockSettingStorage.js';\n\nimport * as LegacyUI from './legacy.js';\n\nconst InspectorView = LegacyUI.InspectorView.InspectorView;\nconst Settings = Common.Settings.Settings;\nconst DrawerOrientation = LegacyUI.InspectorView.DrawerOrientation;\nconst DRAWER_ORIENTATION_SETTING_NAME = 'inspector.drawer-orientation';\n\ndescribeWithEnvironment('InspectorView', () => {\n  function createVisibleInspector(): LegacyUI.InspectorView.InspectorView {\n    const inspectorView = InspectorView.instance({forceNew: true});\n    inspectorView.markAsRoot();\n    inspectorView.show(document.createElement('div'), null);\n    return inspectorView;\n  }\n\n  beforeEach(() => {\n    // Register settings required for InspectorView to instantiate\n    Common.Settings.registerSettingsForTest([\n      {\n        category: Common.Settings.SettingCategory.GLOBAL,\n        settingName: 'language',\n        settingType: Common.Settings.SettingType.ENUM,\n        defaultValue: 'en-US',\n      },\n      {\n        category: Common.Settings.SettingCategory.GLOBAL,\n        settingName: 'shortcut-panel-switch',\n        settingType: Common.Settings.SettingType.BOOLEAN,\n        defaultValue: false,\n      },\n      {\n        category: Common.Settings.SettingCategory.GLOBAL,\n        settingName: 'currentDockState',\n        settingType: Common.Settings.SettingType.ENUM,\n        defaultValue: 'undocked',\n        options: [\n          {\n            value: 'right',\n            text: (): Platform.UIString.LocalizedString => 'right' as Platform.UIString.LocalizedString,\n            title: (): Platform.UIString.LocalizedString => 'Dock to right' as Platform.UIString.LocalizedString,\n            raw: false,\n          },\n          {\n            value: 'bottom',\n            text: (): Platform.UIString.LocalizedString => 'bottom' as Platform.UIString.LocalizedString,\n            title: (): Platform.UIString.LocalizedString => 'Dock to bottom' as Platform.UIString.LocalizedString,\n            raw: false,\n          },\n          {\n            value: 'left',\n            text: (): Platform.UIString.LocalizedString => 'left' as Platform.UIString.LocalizedString,\n            title: (): Platform.UIString.LocalizedString => 'Dock to left' as Platform.UIString.LocalizedString,\n            raw: false,\n          },\n          {\n            value: 'undocked',\n            text: (): Platform.UIString.LocalizedString => 'undocked' as Platform.UIString.LocalizedString,\n            title: (): Platform.UIString.LocalizedString => 'Undock' as Platform.UIString.LocalizedString,\n            raw: false,\n          },\n        ],\n      },\n    ]);\n\n    // Reset settings for each test\n    const mockStore = new MockStore();\n    const syncedStorage = new Common.Settings.SettingsStorage({}, mockStore);\n    const globalStorage = new Common.Settings.SettingsStorage({}, mockStore);\n    const localStorage = new Common.Settings.SettingsStorage({}, mockStore);\n\n    Common.Settings.Settings.instance({forceNew: true, syncedStorage, globalStorage, localStorage});\n  });\n\n  describe('toggleDrawerOrientation', () => {\n    it('drawer orientation setting default to unset and that translates to horizontal', () => {\n      const inspectorView = createVisibleInspector();\n      assert.isFalse(inspectorView.isDrawerOrientationVertical(), 'drawer did not start horizontal');\n      const setting = Settings.instance().settingForTest(DRAWER_ORIENTATION_SETTING_NAME);\n      assert.strictEqual(setting.get(), DrawerOrientation.UNSET, 'drawer orientation setting did not start unset');\n    });\n\n    it('drawer orientation and setting updates after each toggle', () => {\n      const inspectorView = createVisibleInspector();\n      inspectorView.showDrawer({focus: true, hasTargetDrawer: false});\n      assert.isTrue(inspectorView.drawerVisible());\n\n      const setting = Settings.instance().settingForTest(DRAWER_ORIENTATION_SETTING_NAME);\n      assert.strictEqual(setting.get(), DrawerOrientation.UNSET);\n\n      inspectorView.toggleDrawerOrientation();\n      assert.strictEqual(setting.get(), DrawerOrientation.VERTICAL, 'did not correctly toggle unset to vertical');\n      assert.isTrue(inspectorView.isDrawerOrientationVertical());\n\n      inspectorView.toggleDrawerOrientation();\n      assert.strictEqual(\n          setting.get(), DrawerOrientation.HORIZONTAL, 'did not correctly toggle vertical to horizontal');\n      assert.isFalse(inspectorView.isDrawerOrientationVertical());\n\n      inspectorView.toggleDrawerOrientation();\n      assert.strictEqual(setting.get(), DrawerOrientation.VERTICAL, 'did not correctly toggle horizontal to vertical');\n      assert.isTrue(inspectorView.isDrawerOrientationVertical());\n    });\n\n    for (const settingValue of [DrawerOrientation.UNSET, DrawerOrientation.VERTICAL, DrawerOrientation.HORIZONTAL]) {\n      it(`drawer orientation stays ${settingValue} when toggled while drawer is hidden`, () => {\n        const setting = Settings.instance().createSetting(DRAWER_ORIENTATION_SETTING_NAME, settingValue);\n        const inspectorView = createVisibleInspector();\n        assert.isFalse(inspectorView.drawerVisible());\n        assert.strictEqual(setting.get(), settingValue);\n        const drawerOrientation = inspectorView.isDrawerOrientationVertical();\n\n        inspectorView.toggleDrawerOrientation();\n        assert.strictEqual(setting.get(), settingValue, 'setting value should not change');\n        assert.strictEqual(\n            inspectorView.isDrawerOrientationVertical(), drawerOrientation, 'drawer orientation should not change');\n\n        inspectorView.toggleDrawerOrientation({force: DrawerOrientation.HORIZONTAL});\n        assert.strictEqual(setting.get(), settingValue, 'setting value should not change when forced horizontal');\n        assert.strictEqual(\n            inspectorView.isDrawerOrientationVertical(), drawerOrientation,\n            'drawer orientation should not change when forced horizontal');\n\n        inspectorView.toggleDrawerOrientation({force: DrawerOrientation.VERTICAL});\n        assert.strictEqual(setting.get(), settingValue, 'setting value should not change when forced vertical');\n        assert.strictEqual(\n            inspectorView.isDrawerOrientationVertical(), drawerOrientation,\n            'drawer orientation should not change when forced vertical');\n      });\n    }\n\n    for (const settingValue of [DrawerOrientation.VERTICAL, DrawerOrientation.HORIZONTAL]) {\n      it(`drawer starts ${settingValue} if setting is ${settingValue}`, () => {\n        Settings.instance().createSetting(DRAWER_ORIENTATION_SETTING_NAME, settingValue);\n        const inspectorView = createVisibleInspector();\n        assert.strictEqual(inspectorView.isDrawerOrientationVertical(), settingValue === DrawerOrientation.VERTICAL);\n      });\n    }\n\n    for (const {force, isVertical} of\n             [{force: DrawerOrientation.HORIZONTAL, isVertical: false},\n              {force: DrawerOrientation.VERTICAL, isVertical: true},\n    ]) {\n      it(`toggleDrawerOrientation can force ${force} orientation`, () => {\n        const inspectorView = createVisibleInspector();\n        inspectorView.showDrawer({focus: true, hasTargetDrawer: false});\n        const orientationSetting = Settings.instance().settingForTest(DRAWER_ORIENTATION_SETTING_NAME);\n        assert.isFalse(inspectorView.isDrawerOrientationVertical());\n        assert.strictEqual(orientationSetting.get(), DrawerOrientation.UNSET);\n\n        // from unset\n        inspectorView.toggleDrawerOrientation({force});\n\n        assert.strictEqual(inspectorView.isDrawerOrientationVertical(), isVertical);\n        assert.strictEqual(orientationSetting.get(), force);\n\n        // from same orientation\n        inspectorView.toggleDrawerOrientation({force});\n\n        assert.strictEqual(inspectorView.isDrawerOrientationVertical(), isVertical);\n        assert.strictEqual(orientationSetting.get(), force);\n\n        // from the other orientation\n        inspectorView.toggleDrawerOrientation();\n        inspectorView.toggleDrawerOrientation({force});\n\n        assert.strictEqual(inspectorView.isDrawerOrientationVertical(), isVertical);\n        assert.strictEqual(orientationSetting.get(), force);\n      });\n    }\n  });\n\n  describe('isUserExplicitlyUpdatedDrawerOrientation', () => {\n    it('isUserExplicitlyUpdatedDrawerOrientation returns false by default', () => {\n      const inspectorView = createVisibleInspector();\n\n      assert.isFalse(inspectorView.isUserExplicitlyUpdatedDrawerOrientation());\n    });\n\n    it('isUserExplicitlyUpdatedDrawerOrientation returns true when orientation is toggled', () => {\n      const inspectorView = createVisibleInspector();\n\n      inspectorView.showDrawer({focus: true, hasTargetDrawer: false});\n      inspectorView.toggleDrawerOrientation();\n\n      assert.isTrue(inspectorView.isUserExplicitlyUpdatedDrawerOrientation());\n    });\n  });\n});\n"]}