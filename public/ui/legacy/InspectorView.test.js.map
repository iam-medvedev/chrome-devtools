{"version":3,"file":"InspectorView.test.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/InspectorView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport {renderElementIntoDOM} from '../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {expectCall} from '../../testing/ExpectStubCall.js';\n\nimport * as LegacyUI from './legacy.js';\n\nconst InspectorView = LegacyUI.InspectorView.InspectorView;\nconst Settings = Common.Settings.Settings;\nconst DrawerOrientation = LegacyUI.InspectorView.DrawerOrientation;\nconst {DockState} = LegacyUI.DockController;\nconst {DockMode} = LegacyUI.InspectorView;\nconst DRAWER_ORIENTATION_SETTING_NAME = 'inspector.drawer-orientation-by-dock-mode';\n\nfunction getDrawerOrientationSettingByDock(dockMode: LegacyUI.InspectorView.DockMode):\n    LegacyUI.InspectorView.DrawerOrientation {\n  const setting = Settings.instance().settingForTest(DRAWER_ORIENTATION_SETTING_NAME);\n  return (setting.get() as LegacyUI.InspectorView.DrawerOrientationByDockMode)[dockMode];\n}\n\ndescribeWithEnvironment('InspectorView', () => {\n  function createInspectorViewWithDockState(dockState: LegacyUI.DockController.DockState): {\n    inspectorView: LegacyUI.InspectorView.InspectorView,\n    dockController: LegacyUI.DockController.DockController,\n  } {\n    const dockController = LegacyUI.DockController.DockController.instance({forceNew: true, canDock: true});\n    dockController.setDockSide(dockState);\n\n    const inspectorView = InspectorView.instance({forceNew: true});\n    inspectorView.markAsRoot();\n    renderElementIntoDOM(inspectorView);\n\n    return {inspectorView, dockController};\n  }\n\n  beforeEach(() => {\n    const storage = new Common.Settings.SettingsStorage({}, Common.Settings.NOOP_STORAGE, 'test');\n    Common.Settings.Settings.instance(\n        {forceNew: true, syncedStorage: storage, globalStorage: storage, localStorage: storage});\n    // `setIsDocked` resolves async and leaves elements in the body after the test is finished.\n    sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'setIsDocked');\n  });\n\n  describe('toggleDrawerOrientation', () => {\n    it('drawer orientation and setting updates after each toggle for current dock mode', () => {\n      const {inspectorView} = createInspectorViewWithDockState(DockState.BOTTOM);\n      inspectorView.showDrawer({focus: true, hasTargetDrawer: false});\n\n      assert.strictEqual(getDrawerOrientationSettingByDock(DockMode.BOTTOM), DrawerOrientation.UNSET);\n      inspectorView.toggleDrawerOrientation();\n\n      assert.strictEqual(getDrawerOrientationSettingByDock(DockMode.BOTTOM), DrawerOrientation.HORIZONTAL);\n      assert.isFalse(inspectorView.isDrawerOrientationVertical());\n\n      inspectorView.toggleDrawerOrientation();\n      assert.strictEqual(getDrawerOrientationSettingByDock(DockMode.BOTTOM), DrawerOrientation.VERTICAL);\n      assert.isTrue(inspectorView.isDrawerOrientationVertical());\n    });\n\n    for (const settingValue of [DrawerOrientation.UNSET, DrawerOrientation.VERTICAL, DrawerOrientation.HORIZONTAL]) {\n      it(`drawer orientation stays ${settingValue} when toggled while drawer is hidden`, () => {\n        const dockSpecificValue = {\n          [DockMode.BOTTOM]: settingValue,\n          [DockMode.SIDE]: DrawerOrientation.UNSET,\n          [DockMode.UNDOCKED]: DrawerOrientation.UNSET,\n        };\n        const setting = Settings.instance().createSetting(DRAWER_ORIENTATION_SETTING_NAME, dockSpecificValue);\n        const {inspectorView} = createInspectorViewWithDockState(DockState.BOTTOM);\n        assert.isFalse(inspectorView.drawerVisible());\n        assert.deepEqual(setting.get(), dockSpecificValue);\n        const drawerOrientation = inspectorView.isDrawerOrientationVertical();\n\n        inspectorView.toggleDrawerOrientation();\n        assert.deepEqual(setting.get(), dockSpecificValue, 'setting value should not change');\n        assert.strictEqual(\n            inspectorView.isDrawerOrientationVertical(), drawerOrientation, 'drawer orientation should not change');\n\n        inspectorView.toggleDrawerOrientation({force: DrawerOrientation.HORIZONTAL});\n        assert.deepEqual(setting.get(), dockSpecificValue, 'setting value should not change when forced horizontal');\n        assert.strictEqual(\n            inspectorView.isDrawerOrientationVertical(), drawerOrientation,\n            'drawer orientation should not change when forced horizontal');\n\n        inspectorView.toggleDrawerOrientation({force: DrawerOrientation.VERTICAL});\n        assert.deepEqual(setting.get(), dockSpecificValue, 'setting value should not change when forced vertical');\n        assert.strictEqual(\n            inspectorView.isDrawerOrientationVertical(), drawerOrientation,\n            'drawer orientation should not change when forced vertical');\n      });\n    }\n\n    for (const settingValue of [DrawerOrientation.VERTICAL, DrawerOrientation.HORIZONTAL]) {\n      it(`drawer starts ${settingValue} if setting is ${settingValue}`, () => {\n        const dockSpecificValue = {\n          [DockMode.BOTTOM]: settingValue,\n          [DockMode.SIDE]: DrawerOrientation.UNSET,\n          [DockMode.UNDOCKED]: DrawerOrientation.UNSET,\n        };\n        Settings.instance().createSetting(DRAWER_ORIENTATION_SETTING_NAME, dockSpecificValue);\n        const {inspectorView} = createInspectorViewWithDockState(DockState.BOTTOM);\n        assert.strictEqual(inspectorView.isDrawerOrientationVertical(), settingValue === DrawerOrientation.VERTICAL);\n      });\n    }\n\n    for (const {force, isVertical} of\n             [{force: DrawerOrientation.HORIZONTAL, isVertical: false},\n              {force: DrawerOrientation.VERTICAL, isVertical: true},\n    ]) {\n      it(`toggleDrawerOrientation can force ${force} orientation`, () => {\n        const {inspectorView} = createInspectorViewWithDockState(DockState.BOTTOM);\n        inspectorView.showDrawer({focus: true, hasTargetDrawer: false});\n        assert.isTrue(inspectorView.isDrawerOrientationVertical());\n        assert.strictEqual(getDrawerOrientationSettingByDock(DockMode.BOTTOM), DrawerOrientation.UNSET);\n\n        // from unset\n        inspectorView.toggleDrawerOrientation({force});\n\n        assert.strictEqual(inspectorView.isDrawerOrientationVertical(), isVertical);\n        assert.strictEqual(getDrawerOrientationSettingByDock(DockMode.BOTTOM), force);\n\n        // from same orientation\n        inspectorView.toggleDrawerOrientation({force});\n\n        assert.strictEqual(inspectorView.isDrawerOrientationVertical(), isVertical);\n        assert.strictEqual(getDrawerOrientationSettingByDock(DockMode.BOTTOM), force);\n\n        // from the other orientation\n        inspectorView.toggleDrawerOrientation();\n        inspectorView.toggleDrawerOrientation({force});\n\n        assert.strictEqual(inspectorView.isDrawerOrientationVertical(), isVertical);\n        assert.strictEqual(getDrawerOrientationSettingByDock(DockMode.BOTTOM), force);\n      });\n    }\n  });\n\n  describe('isUserExplicitlyUpdatedDrawerOrientation', () => {\n    it('isUserExplicitlyUpdatedDrawerOrientation returns false by default', () => {\n      const {inspectorView} = createInspectorViewWithDockState(DockState.BOTTOM);\n\n      assert.isFalse(inspectorView.isUserExplicitlyUpdatedDrawerOrientation());\n    });\n\n    it('isUserExplicitlyUpdatedDrawerOrientation returns true when orientation is toggled', () => {\n      const {inspectorView} = createInspectorViewWithDockState(DockState.BOTTOM);\n\n      inspectorView.showDrawer({focus: true, hasTargetDrawer: false});\n      inspectorView.toggleDrawerOrientation();\n\n      assert.isTrue(inspectorView.isUserExplicitlyUpdatedDrawerOrientation());\n    });\n\n    it('returns true only for current dock mode', async () => {\n      const {inspectorView, dockController} = createInspectorViewWithDockState(DockState.BOTTOM);\n      const onDockSideChangeHandledForTestStub =\n          sinon.stub(LegacyUI.InspectorView.InspectorView.instance(), 'applyDrawerOrientationForDockSideForTest');\n      inspectorView.showDrawer({focus: true, hasTargetDrawer: false});\n\n      // Set bottom preference\n      inspectorView.toggleDrawerOrientation();\n      assert.isTrue(inspectorView.isUserExplicitlyUpdatedDrawerOrientation());\n\n      // Switch to side dock - should be false (no preference set)\n      const waitForFirstDockSideChangeHandled = expectCall(onDockSideChangeHandledForTestStub);\n      dockController.setDockSide(DockState.RIGHT);\n      await waitForFirstDockSideChangeHandled;\n      assert.isFalse(inspectorView.isUserExplicitlyUpdatedDrawerOrientation());\n\n      // Set side preference\n      inspectorView.toggleDrawerOrientation();\n      assert.isTrue(inspectorView.isUserExplicitlyUpdatedDrawerOrientation());\n\n      // Switch to undocked dock - should be false (no preference set)\n      const waitForSecondDockSideChangeHandled = expectCall(onDockSideChangeHandledForTestStub);\n      dockController.setDockSide(DockState.UNDOCKED);\n      await waitForSecondDockSideChangeHandled;\n      assert.isFalse(inspectorView.isUserExplicitlyUpdatedDrawerOrientation());\n\n      // Set undocked preference\n      inspectorView.toggleDrawerOrientation();\n      assert.isTrue(inspectorView.isUserExplicitlyUpdatedDrawerOrientation());\n    });\n  });\n\n  describe('dock-specific drawer orientation', () => {\n    describe('default orientations by dock state', () => {\n      it('defaults to horizontal orientation for RIGHT dock position', () => {\n        const {inspectorView} = createInspectorViewWithDockState(DockState.RIGHT);\n        assert.isFalse(inspectorView.isDrawerOrientationVertical());\n      });\n\n      it('defaults to horizontal orientation for LEFT dock position', () => {\n        const {inspectorView} = createInspectorViewWithDockState(DockState.LEFT);\n        assert.isFalse(inspectorView.isDrawerOrientationVertical());\n      });\n\n      it('defaults to horizontal orientation for UNDOCKED dock position', () => {\n        const {inspectorView} = createInspectorViewWithDockState(DockState.UNDOCKED);\n        assert.isFalse(inspectorView.isDrawerOrientationVertical());\n      });\n\n      it('defaults to vertical orientation for BOTTOM dock position', () => {\n        const {inspectorView} = createInspectorViewWithDockState(DockState.BOTTOM);\n        assert.isTrue(inspectorView.isDrawerOrientationVertical());\n      });\n    });\n\n    describe('automatic dock state change handling', () => {\n      it('automatically updates drawer orientation when switching from bottom to side dock', async () => {\n        const {inspectorView, dockController} = createInspectorViewWithDockState(DockState.BOTTOM);\n        const waitForDockSideChangeHandled = expectCall(\n            sinon.stub(LegacyUI.InspectorView.InspectorView.instance(), 'applyDrawerOrientationForDockSideForTest'));\n        inspectorView.showDrawer({focus: true, hasTargetDrawer: false});\n\n        assert.isTrue(inspectorView.isDrawerOrientationVertical());\n        dockController.setDockSide(DockState.RIGHT);\n        await waitForDockSideChangeHandled;\n\n        assert.isFalse(inspectorView.isDrawerOrientationVertical());\n      });\n\n      it('automatically updates drawer orientation when switching from side to bottom dock', async () => {\n        const {inspectorView, dockController} = createInspectorViewWithDockState(DockState.RIGHT);\n        const waitForDockSideChangeHandled = expectCall(\n            sinon.stub(LegacyUI.InspectorView.InspectorView.instance(), 'applyDrawerOrientationForDockSideForTest'));\n        inspectorView.showDrawer({focus: true, hasTargetDrawer: false});\n\n        assert.isFalse(inspectorView.isDrawerOrientationVertical());\n        dockController.setDockSide(DockState.BOTTOM);\n        await waitForDockSideChangeHandled;\n\n        assert.isTrue(inspectorView.isDrawerOrientationVertical());\n      });\n\n      it('respects saved preferences when switching dock positions', async () => {\n        const {inspectorView, dockController} = createInspectorViewWithDockState(DockState.BOTTOM);\n        const onDockSideChangeHandledForTestStub =\n            sinon.stub(LegacyUI.InspectorView.InspectorView.instance(), 'applyDrawerOrientationForDockSideForTest');\n        const waitForFirstDockSideChangeHandled = expectCall(onDockSideChangeHandledForTestStub);\n        inspectorView.showDrawer({focus: true, hasTargetDrawer: false});\n\n        // Set bottom preference to horizontal\n        inspectorView.toggleDrawerOrientation({force: DrawerOrientation.HORIZONTAL});\n        assert.isFalse(inspectorView.isDrawerOrientationVertical());\n\n        // Switch to side dock and set side preference to vertical\n        dockController.setDockSide(DockState.RIGHT);\n        await waitForFirstDockSideChangeHandled;\n        inspectorView.toggleDrawerOrientation({force: DrawerOrientation.VERTICAL});\n        assert.isTrue(inspectorView.isDrawerOrientationVertical());\n\n        // Switch to undocked and set preference to horizontal\n        const waitForSecondDockSideChangeHandled = expectCall(onDockSideChangeHandledForTestStub);\n        dockController.setDockSide(DockState.UNDOCKED);\n        await waitForSecondDockSideChangeHandled;\n        inspectorView.toggleDrawerOrientation({force: DrawerOrientation.HORIZONTAL});\n        assert.isFalse(inspectorView.isDrawerOrientationVertical());\n\n        // Switch back to bottom - should use saved bottom preference\n        const waitForThirdDockSideChangeHandled = expectCall(onDockSideChangeHandledForTestStub);\n        dockController.setDockSide(DockState.BOTTOM);\n        await waitForThirdDockSideChangeHandled;\n        assert.isFalse(inspectorView.isDrawerOrientationVertical());\n\n        // Switch back to side - should use saved side preference\n        const waitForFourthDockSideChangeHandled = expectCall(onDockSideChangeHandledForTestStub);\n        dockController.setDockSide(DockState.LEFT);\n        await waitForFourthDockSideChangeHandled;\n        assert.isTrue(inspectorView.isDrawerOrientationVertical());\n\n        // Switch back to undocked - should use saved undocked preference\n        const waitForFifthDockSideChangeHandled = expectCall(onDockSideChangeHandledForTestStub);\n        dockController.setDockSide(DockState.UNDOCKED);\n        await waitForFifthDockSideChangeHandled;\n        assert.isFalse(inspectorView.isDrawerOrientationVertical());\n      });\n\n      it('does not change orientation when drawer is closed during dock switch', async () => {\n        const {inspectorView, dockController} = createInspectorViewWithDockState(DockState.BOTTOM);\n        const waitForDockSideChangeHandled = expectCall(\n            sinon.stub(LegacyUI.InspectorView.InspectorView.instance(), 'applyDrawerOrientationForDockSideForTest'));\n\n        // Drawer is closed by default\n        assert.isFalse(inspectorView.drawerVisible());\n        const initialOrientation = inspectorView.isDrawerOrientationVertical();\n\n        dockController.setDockSide(DockState.RIGHT);\n        await waitForDockSideChangeHandled;\n\n        assert.strictEqual(inspectorView.isDrawerOrientationVertical(), initialOrientation);\n      });\n\n      it('updates orientation correctly when showing the drawer for the first time after a dock switch', async () => {\n        const {inspectorView, dockController} = createInspectorViewWithDockState(DockState.BOTTOM);\n        const waitForDockSideChangeHandled = expectCall(\n            sinon.stub(LegacyUI.InspectorView.InspectorView.instance(), 'applyDrawerOrientationForDockSideForTest'));\n\n        // Start with drawer closed and docked to the bottom.\n        assert.isFalse(inspectorView.drawerVisible());\n        assert.isTrue(\n            inspectorView.isDrawerOrientationVertical(), 'Drawer should be vertical when docked at the bottom');\n\n        // Switch dock to the right side while the drawer is closed.\n        dockController.setDockSide(DockState.RIGHT);\n        await waitForDockSideChangeHandled;\n\n        // Show the drawer.\n        inspectorView.showDrawer({focus: true, hasTargetDrawer: false});\n\n        // The orientation should now be horizontal, reflecting the new dock position.\n        assert.isFalse(\n            inspectorView.isDrawerOrientationVertical(), 'Drawer should become horizontal when docked to the right');\n      });\n    });\n  });\n});\n"]}