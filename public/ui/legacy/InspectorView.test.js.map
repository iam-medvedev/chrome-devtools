{"version":3,"file":"InspectorView.test.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/InspectorView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {MockStore} from '../../testing/MockSettingStorage.js';\n\nimport * as LegacyUI from './legacy.js';\n\nconst InspectorView = LegacyUI.InspectorView.InspectorView;\nconst Settings = Common.Settings.Settings;\nconst DrawerOrientation = LegacyUI.InspectorView.DrawerOrientation;\nconst DRAWER_ORIENTATION_SETTING_NAME = 'inspector.drawer-orientation';\n\ndescribeWithEnvironment('InspectorView', () => {\n  beforeEach(() => {\n    // Register settings required for InspectorView to instantiate\n    Common.Settings.registerSettingsForTest([\n      {\n        category: Common.Settings.SettingCategory.GLOBAL,\n        settingName: 'language',\n        settingType: Common.Settings.SettingType.ENUM,\n        defaultValue: 'en-US',\n      },\n      {\n        category: Common.Settings.SettingCategory.GLOBAL,\n        settingName: 'shortcut-panel-switch',\n        settingType: Common.Settings.SettingType.BOOLEAN,\n        defaultValue: false,\n      },\n      {\n        category: Common.Settings.SettingCategory.GLOBAL,\n        settingName: 'currentDockState',\n        settingType: Common.Settings.SettingType.ENUM,\n        defaultValue: 'undocked',\n        options: [\n          {\n            value: 'right',\n            text: (): Platform.UIString.LocalizedString => 'right' as Platform.UIString.LocalizedString,\n            title: (): Platform.UIString.LocalizedString => 'Dock to right' as Platform.UIString.LocalizedString,\n            raw: false,\n          },\n          {\n            value: 'bottom',\n            text: (): Platform.UIString.LocalizedString => 'bottom' as Platform.UIString.LocalizedString,\n            title: (): Platform.UIString.LocalizedString => 'Dock to bottom' as Platform.UIString.LocalizedString,\n            raw: false,\n          },\n          {\n            value: 'left',\n            text: (): Platform.UIString.LocalizedString => 'left' as Platform.UIString.LocalizedString,\n            title: (): Platform.UIString.LocalizedString => 'Dock to left' as Platform.UIString.LocalizedString,\n            raw: false,\n          },\n          {\n            value: 'undocked',\n            text: (): Platform.UIString.LocalizedString => 'undocked' as Platform.UIString.LocalizedString,\n            title: (): Platform.UIString.LocalizedString => 'Undock' as Platform.UIString.LocalizedString,\n            raw: false,\n          },\n        ],\n      },\n    ]);\n\n    // Reset settings for each test\n    const mockStore = new MockStore();\n    const syncedStorage = new Common.Settings.SettingsStorage({}, mockStore);\n    const globalStorage = new Common.Settings.SettingsStorage({}, mockStore);\n    const localStorage = new Common.Settings.SettingsStorage({}, mockStore);\n\n    Common.Settings.Settings.instance({forceNew: true, syncedStorage, globalStorage, localStorage});\n  });\n\n  it('drawer orientation and setting default to unset', () => {\n    const inspectorView = InspectorView.instance({forceNew: true});\n    assert.isFalse(inspectorView.isDrawerOrientationVertical());\n    const setting = Settings.instance().settingForTest(DRAWER_ORIENTATION_SETTING_NAME);\n    assert.strictEqual(setting.get(), DrawerOrientation.UNSET);\n  });\n\n  it('drawer orientation setting updates after each toggle', () => {\n    const inspectorView = InspectorView.instance({forceNew: true});\n    const setting = Settings.instance().settingForTest(DRAWER_ORIENTATION_SETTING_NAME);\n    assert.strictEqual(setting.get(), DrawerOrientation.UNSET);\n\n    inspectorView.toggleDrawerOrientation();\n    assert.strictEqual(setting.get(), DrawerOrientation.VERTICAL);\n\n    inspectorView.toggleDrawerOrientation();\n    assert.strictEqual(setting.get(), DrawerOrientation.HORIZONTAL);\n  });\n\n  it('drawer starts vertical if setting is vertical', () => {\n    Settings.instance().createSetting(DRAWER_ORIENTATION_SETTING_NAME, DrawerOrientation.VERTICAL);\n    const inspectorView = InspectorView.instance({forceNew: true});\n    assert.isTrue(inspectorView.isDrawerOrientationVertical());\n  });\n\n  it('isUserExplicitlyUpdatedDrawerOrientation returns false by default', () => {\n    const inspectorView = InspectorView.instance({forceNew: true});\n    assert.isFalse(inspectorView.isUserExplicitlyUpdatedDrawerOrientation());\n  });\n\n  it('isUserExplicitlyUpdatedDrawerOrientation returns true when orientation is toggled', () => {\n    const inspectorView = InspectorView.instance({forceNew: true});\n\n    inspectorView.toggleDrawerOrientation();\n\n    assert.isTrue(inspectorView.isUserExplicitlyUpdatedDrawerOrientation());\n  });\n\n  it('toggleDrawerOrientation can force vertical orientation', () => {\n    const inspectorView = InspectorView.instance({forceNew: true});\n    const orientationSetting = Settings.instance().settingForTest(DRAWER_ORIENTATION_SETTING_NAME);\n    const updatedSetting = Settings.instance().settingForTest(DRAWER_ORIENTATION_SETTING_NAME);\n\n    assert.isFalse(inspectorView.isDrawerOrientationVertical());\n\n    inspectorView.toggleDrawerOrientation({force: 'vertical'});\n\n    assert.isTrue(inspectorView.isDrawerOrientationVertical());\n    assert.strictEqual(orientationSetting.get(), DrawerOrientation.VERTICAL);\n    assert.strictEqual(updatedSetting.get(), DrawerOrientation.VERTICAL);\n  });\n\n  it('toggleDrawerOrientation can force horizontal orientation', () => {\n    Settings.instance().createSetting(DRAWER_ORIENTATION_SETTING_NAME, DrawerOrientation.VERTICAL);\n    const inspectorView = InspectorView.instance({forceNew: true});\n    const orientationSetting = Settings.instance().settingForTest(DRAWER_ORIENTATION_SETTING_NAME);\n\n    assert.isTrue(inspectorView.isDrawerOrientationVertical());\n\n    inspectorView.toggleDrawerOrientation({force: 'horizontal'});\n\n    assert.isFalse(inspectorView.isDrawerOrientationVertical());\n    assert.strictEqual(orientationSetting.get(), DrawerOrientation.HORIZONTAL);\n  });\n});\n"]}