{"version":3,"file":"RemoteDebuggingTerminatedScreen.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/RemoteDebuggingTerminatedScreen.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAEhD,OAAO,EAAC,MAAM,EAAC,MAAM,aAAa,CAAC;AAEnC,OAAO,qCAAqC,MAAM,0CAA0C,CAAC;AAC7F,OAAO,EAAC,gBAAgB,EAAC,MAAM,cAAc,CAAC;AAC9C,OAAO,EAAC,IAAI,EAAC,MAAM,aAAa,CAAC;AAEjC,MAAM,SAAS,GAAG;IAChB;;;;OAIG;IACH,4BAA4B,EAAE,iCAAiC;IAC/D;;;OAGG;IACH,sBAAsB,EAAE,gBAAgB;IACxC;;;;;;OAMG;IACH,6BAA6B,EAAE,6CAA6C;IAC5E;;;;OAIG;IACH,iBAAiB,EAAE,sBAAsB;CACjC,CAAC;AACX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,8CAA8C,EAAE,SAAS,CAAC,CAAC;AACpG,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACtE,MAAM,OAAO,+BAAgC,SAAQ,IAAI;IACvD,YAAY,MAAc;QACxB,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,mBAAmB,CAAC,qCAAqC,CAAC,CAAC;QAChE,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,4BAA4B,CAAC,CAAC;QAClH,MAAM,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QAC3E,gBAAgB,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,WAAW;YACrD,UAAU,CAAC,SAAS,CAAC,sBAAsB,EAAE,EAAC,GAAG,EAAE,MAAM,EAAC,CAAC,CAAC;QAChE,gBAAgB,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,6BAA6B,CAAC,CAAC;QACjH,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;QACnF,MAAM,MAAM,GAAG,gBAAgB,CAC3B,UAAU,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,EAAC,YAAY,EAAE,WAAW,EAAC,CAAC,CAAC;QAC1G,eAAe,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACnE,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,MAAc;QACxB,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,8BAA8B,CAAC,CAAC;QAC1D,MAAM,CAAC,eAAe,qDAA8B,CAAC;QACrD,MAAM,CAAC,cAAc,EAAE,CAAC;QACxB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,+BAA+B,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QACxE,MAAM,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;CACF","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\n\nimport {Dialog} from './Dialog.js';\nimport {SizeBehavior} from './GlassPane.js';\nimport remoteDebuggingTerminatedScreenStyles from './remoteDebuggingTerminatedScreen.css.js';\nimport {createTextButton} from './UIUtils.js';\nimport {VBox} from './Widget.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in a dialog box in DevTools stating that remote debugging has been terminated.\n   * \"Remote debugging\" here means that DevTools on a PC is inspecting a website running on an actual mobile device\n   * (see https://developer.chrome.com/docs/devtools/remote-debugging/).\n   */\n  debuggingConnectionWasClosed: 'Debugging connection was closed',\n  /**\n   *@description Text in a dialog box in DevTools stating the reason for remote debugging being terminated.\n   *@example {target_closed} PH1\n   */\n  connectionClosedReason: 'Reason: {PH1}.',\n  /**\n   * @description Text in a dialog box showing how to reconnect to DevTools when remote debugging has been terminated.\n   * \"Remote debugging\" here means that DevTools on a PC is inspecting a website running on an actual mobile device\n   * (see https://developer.chrome.com/docs/devtools/remote-debugging/).\n   * \"Reconnect when ready\", refers to the state of the mobile device. The developer first has to put the mobile\n   * device back in a state where it can be inspected, before DevTools can reconnect to it.\n   */\n  reconnectWhenReadyByReopening: 'Reconnect when ready by reopening DevTools.',\n  /**\n   * @description Text on a button to reconnect Devtools when remote debugging terminated.\n   * \"Remote debugging\" here means that DevTools on a PC is inspecting a website running on an actual mobile device\n   * (see https://developer.chrome.com/docs/devtools/remote-debugging/).\n   */\n  reconnectDevtools: 'Reconnect `DevTools`',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/RemoteDebuggingTerminatedScreen.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class RemoteDebuggingTerminatedScreen extends VBox {\n  constructor(reason: string) {\n    super(true);\n    this.registerRequiredCSS(remoteDebuggingTerminatedScreenStyles);\n    this.contentElement.createChild('div', 'header').textContent = i18nString(UIStrings.debuggingConnectionWasClosed);\n    const contentContainer = this.contentElement.createChild('div', 'content');\n    contentContainer.createChild('div', 'reason').textContent =\n        i18nString(UIStrings.connectionClosedReason, {PH1: reason});\n    contentContainer.createChild('div', 'message').textContent = i18nString(UIStrings.reconnectWhenReadyByReopening);\n    const buttonContainer = this.contentElement.createChild('div', 'button-container');\n    const button = createTextButton(\n        i18nString(UIStrings.reconnectDevtools), () => window.location.reload(), {jslogContext: 'reconnect'});\n    buttonContainer.createChild('div', 'button').appendChild(button);\n  }\n\n  static show(reason: string): void {\n    const dialog = new Dialog('remote-debnugging-terminated');\n    dialog.setSizeBehavior(SizeBehavior.MEASURE_CONTENT);\n    dialog.addCloseButton();\n    dialog.setDimmed(true);\n    new RemoteDebuggingTerminatedScreen(reason).show(dialog.contentElement);\n    dialog.show();\n  }\n}\n"]}