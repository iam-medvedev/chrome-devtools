{"version":3,"file":"Treeoutline.test.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/Treeoutline.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport {dispatchKeyDownEvent, renderElementIntoDOM} from '../../testing/DOMHelpers.js';\nimport * as Lit from '../../ui/lit/lit.js';\n\nimport * as UI from './legacy.js';\n\ndescribe('TreeOutline', () => {\n  describe('correctly reacts to Enter key', () => {\n    it('by expanding collapsed parent nodes', () => {\n      const tree = new UI.TreeOutline.TreeOutlineInShadow();\n      renderElementIntoDOM(tree.element);\n\n      const parent = new UI.TreeOutline.TreeElement('parent', true);\n      parent.appendChild(new UI.TreeOutline.TreeElement('child', false));\n      tree.appendChild(parent);\n      parent.select();\n\n      dispatchKeyDownEvent(tree.contentElement, {bubbles: true, key: 'Enter'});\n      assert.isTrue(parent.expanded, 'Enter key was supposed to expand the parent node');\n    });\n\n    it('by collapsing expanded parent nodes', () => {\n      const tree = new UI.TreeOutline.TreeOutlineInShadow();\n      renderElementIntoDOM(tree.element);\n\n      const parent = new UI.TreeOutline.TreeElement('parent', true);\n      parent.appendChild(new UI.TreeOutline.TreeElement('child', false));\n      tree.appendChild(parent);\n      parent.select();\n      parent.expand();\n\n      dispatchKeyDownEvent(tree.contentElement, {bubbles: true, key: 'Enter'});\n      assert.isFalse(parent.expanded, 'Enter key was supposed to collapse the parent node');\n    });\n  });\n\n  it('responds correctly to navigation keys', () => {\n    const treeOutline = new UI.TreeOutline.TreeOutlineInShadow();\n    renderElementIntoDOM(treeOutline.element);\n\n    for (let i = 0; i < 10; i++) {\n      const treeElement = new UI.TreeOutline.TreeElement(String(i), true);\n      treeElement.appendChild(new UI.TreeOutline.TreeElement(String(i) + ' child'));\n      treeOutline.appendChild(treeElement);\n    }\n\n    let selectedTitles: string[] = [];\n    treeOutline.addEventListener(UI.TreeOutline.Events.ElementSelected, event => {\n      selectedTitles.push(String(event.data.title));\n    });\n\n    treeOutline.firstChild()!.select(false, true);\n\n    const distance = 25;\n\n    assert.deepEqual(selectedTitles, ['0']);\n    selectedTitles = [];\n\n    function sendKeyMultipleTimes(key: string, n: number) {\n      for (let i = 0; i < n; i++) {\n        sendKey(key);\n      }\n    }\n\n    sendKeyMultipleTimes('ArrowDown', distance);\n    assert.deepEqual(selectedTitles, ['1', '2', '3', '4', '5', '6', '7', '8', '9']);\n    selectedTitles = [];\n\n    sendKeyMultipleTimes('ArrowUp', distance);\n    assert.deepEqual(selectedTitles, ['8', '7', '6', '5', '4', '3', '2', '1', '0']);\n    selectedTitles = [];\n\n    sendKey('End');\n    assert.deepEqual(selectedTitles, ['9']);\n    selectedTitles = [];\n\n    sendKey('Home');\n    assert.deepEqual(selectedTitles, ['0']);\n    selectedTitles = [];\n\n    sendKeyMultipleTimes('ArrowRight', distance);\n    assert.deepEqual(selectedTitles, ['0 child']);\n    selectedTitles = [];\n\n    sendKeyMultipleTimes('ArrowLeft', distance);\n    assert.deepEqual(selectedTitles, ['0']);\n    selectedTitles = [];\n\n    const innerTreeOutline = new UI.TreeOutline.TreeOutlineInShadow();\n    const firstInnerChild = new UI.TreeOutline.TreeElement('First inner child');\n    const firstInnerGrandChild = new UI.TreeOutline.TreeElement('First inner grandchild');\n    innerTreeOutline.appendChild(firstInnerChild);\n    firstInnerChild.appendChild(firstInnerGrandChild);\n\n    const treeElementForNestedTree = new UI.TreeOutline.TreeElement(innerTreeOutline.element);\n    treeOutline.appendChild(treeElementForNestedTree);\n\n    innerTreeOutline.firstChild()!.select(false, true);\n\n    sendKey('ArrowRight');\n\n    assert.isTrue(innerTreeOutline.firstChild()!.expanded, 'child is not expanded');\n\n    function sendKey(key: string) {\n      const deepActiveElement = Platform.DOMUtilities.deepActiveElement(document);\n      deepActiveElement!.dispatchEvent(new KeyboardEvent('keydown', {bubbles: true, cancelable: true, key}));\n    }\n  });\n});\n\ndescribe('TreeViewElement', () => {\n  const {html, render} = Lit;\n  async function makeTree(template: Lit.LitTemplate) {\n    const container = document.createElement('div');\n    renderElementIntoDOM(container);\n\n    render(template, container);\n    const component = container.querySelector('devtools-tree');\n    assert.isNotNull(component);\n\n    // Tick to let mutation observers fire\n    await new Promise(resolve => setTimeout(resolve, 0));\n    return component;\n  }\n\n  it('renders the tree structure based on the template', async () => {\n    const component = await makeTree(html`<devtools-tree .template=${html`\n      <ul role=\"tree\">\n         <li role=\"treeitem\">\n           Tree Node Text\n           <ul role=\"group\">\n             <li role=\"treeitem\">\n               Node with subtree\n               <ul role=\"group\">\n                 <li role=\"treeitem\">Tree Node Text in collapsed subtree 1</li>\n                 <li role=\"treeitem\">Tree Node Text in collapsed subtree 2</li>\n               </ul>\n            </li>\n            <li role=\"treeitem\">Tree Node Text in a selected-by-default node</li>\n          </ul>\n        </li>\n      </ul>\n    `}></devtools-tree>`);\n    const treeOutline = component.getInternalTreeOutlineForTest();\n    const rootChildren = treeOutline.rootElement().children();\n    assert.lengthOf(rootChildren, 1);\n    assert.strictEqual(rootChildren[0].titleElement.textContent?.trim(), 'Tree Node Text');\n\n    const firstLevel = rootChildren[0].children();\n    assert.lengthOf(firstLevel, 2);\n    assert.strictEqual(firstLevel[0].titleElement.textContent?.trim(), 'Node with subtree');\n    assert.strictEqual(firstLevel[1].titleElement.textContent?.trim(), 'Tree Node Text in a selected-by-default node');\n\n    const secondLevel = firstLevel[0].children();\n    assert.lengthOf(secondLevel, 2);\n    assert.strictEqual(secondLevel[0].titleElement.textContent?.trim(), 'Tree Node Text in collapsed subtree 1');\n    assert.strictEqual(secondLevel[1].titleElement.textContent?.trim(), 'Tree Node Text in collapsed subtree 2');\n  });\n\n  it('selects `selected` config elements', async () => {\n    const component = await makeTree(html`<devtools-tree .template=${html`\n      <ul role=\"tree\">\n        <li role=\"treeitem\">first node</li>\n        <li role=\"treeitem\" selected>second node</li>\n      </ul>`}></devtools-tree>`);\n\n    const nodes = component.getInternalTreeOutlineForTest().rootElement().children();\n    assert.lengthOf(nodes, 2);\n    assert.isFalse(nodes[0].selected);\n    assert.isTrue(nodes[1].selected);\n  });\n\n  it('expands subtrees based on the `hidden` attribute', async () => {\n    const component = await makeTree(html`<devtools-tree .template=${html`\n      <ul role=\"tree\">\n        <li role=\"treeitem\">first subtree\n          <ul role=\"group\" hidden>\n            <li role=\"treeitem\">in first subtree</li>\n          </ul>\n        </li>\n        <li role=\"treeitem\">second subtree\n          <ul role=\"group\">\n            <li role=\"treeitem\">in second subtree</li>\n          </ul>\n        </li>\n      </ul>`}></devtools-tree>`);\n\n    const nodes = component.getInternalTreeOutlineForTest().rootElement().children();\n    assert.lengthOf(nodes, 2);\n    assert.isFalse(nodes[0].expanded);\n    assert.isTrue(nodes[1].expanded);\n  });\n\n  it('sends a `select` event when a node is selected', async () => {\n    const onSelect = sinon.stub<[UI.TreeOutline.TreeViewElement.SelectEvent]>();\n    let firstConfigElement, secondConfigElement;\n    const component = await makeTree(\n        html`<devtools-tree @select=${onSelect as (e: UI.TreeOutline.TreeViewElement.SelectEvent) => void} .template=${\n            html`\n      <ul role=\"tree\">\n        <li ${Lit.Directives.ref(e => {\n              firstConfigElement = e;\n            })} role=\"treeitem\">first node</li>\n        <li ${Lit.Directives.ref(e => {\n              secondConfigElement = e;\n            })} role=\"treeitem\">second node</li>\n      </ul>`}></devtools-tree>`);\n\n    assert.exists(firstConfigElement);\n    assert.exists(secondConfigElement);\n    component.getInternalTreeOutlineForTest().rootElement().lastChild()?.select();\n\n    sinon.assert.calledOnce(onSelect);\n    assert.strictEqual(onSelect.args[0][0].detail, secondConfigElement);\n  });\n\n  it('sends an `expand` event when a node is expanded or collapsed', async () => {\n    const onExpand1 = sinon.stub<[UI.TreeOutline.TreeViewElement.ExpandEvent]>();\n    const onExpand2 = sinon.stub<[UI.TreeOutline.TreeViewElement.ExpandEvent]>();\n    const component = await makeTree(html`\n     <devtools-tree\n       .template=${html`\n         <ul role=\"tree\">\n           <li @expand=${onExpand1} role=\"treeitem\">first subtree\n             <ul role=\"group\" hidden>\n               <li role=\"treeitem\">in first subtree</li>\n             </ul>\n           </li>\n           <li @expand=${onExpand2} role=\"treeitem\">second subtree\n             <ul role=\"group\" hidden>\n               <li role=\"treeitem\">in second subtree</li>\n             </ul>\n           </li>\n         </ul>`}></devtools-tree>`);\n\n    component.getInternalTreeOutlineForTest().rootElement().lastChild()?.expand();\n    sinon.assert.calledOnce(onExpand2);\n    assert.deepEqual(onExpand2.args[0][0].detail, {expanded: true});\n\n    component.getInternalTreeOutlineForTest().rootElement().lastChild()?.collapse();\n    sinon.assert.calledTwice(onExpand2);\n    assert.deepEqual(onExpand2.args[1][0].detail, {expanded: false});\n    sinon.assert.notCalled(onExpand1);\n  });\n\n  it('applies jslog contexts to tree elements', async () => {\n    const component = await makeTree(html`\n      <devtools-tree\n        .template=${html`\n          <ul role=\"tree\">\n            <li role=\"treeitem\" jslog-context=\"first\">first node</li>\n            <li role=\"treeitem\" jslog-context=\"second\">second node</li>\n          </ul>\n        `}></devtools-tree>`);\n    assert.deepEqual(\n        component.getInternalTreeOutlineForTest().rootElement().children().map(\n            element => element.listItemElement.getAttribute('jslog')),\n        [\n          'TreeItem; parent: parentTreeItem; context: first; track: click, keydown: ArrowUp|ArrowDown|ArrowLeft|ArrowRight|Backspace|Delete|Enter|Space|Home|End',\n          'TreeItem; parent: parentTreeItem; context: second; track: click, keydown: ArrowUp|ArrowDown|ArrowLeft|ArrowRight|Backspace|Delete|Enter|Space|Home|End'\n        ]);\n  });\n\n  it('applies aria attributes to tree eleemnts', async () => {\n    function attributes(element: UI.TreeOutline.TreeElement): Record<string, string> {\n      const attributes: Record<string, string> = {};\n      for (let i = 0; i < element.listItemElement.attributes.length; ++i) {\n        const attributeNode = element.listItemElement.attributes.item(i);\n        if (attributeNode && attributeNode.name !== 'jslog') {\n          attributes[attributeNode.name] = attributeNode.value;\n        }\n      }\n      return attributes;\n    }\n    const component = await makeTree(html`\n      <devtools-tree\n        .template=${html`\n          <ul role=\"tree\">\n            <li role=\"treeitem\" aria-checked=\"true\" aria-live=\"off\" aria-bogus=\"false\">first node</li>\n            <li role=\"treeitem\" aria-modal=\"true\" aria-unknown=\"true\">second node</li>\n          </ul>\n        `}></devtools-tree>`);\n    assert.deepEqual(component.getInternalTreeOutlineForTest().rootElement().children().map(attributes), [\n      {\n        'aria-checked': 'true',\n        'aria-live': 'off',\n        role: 'treeitem',\n      },\n      {\n        'aria-modal': 'true',\n        role: 'treeitem',\n      }\n    ]);\n  });\n\n  it('applies classes to tree elements', async () => {\n    const component = await makeTree(html`\n      <devtools-tree\n        .template=${html`\n          <ul role=\"tree\">\n            <li role=\"treeitem\" class=\"first\">first node</li>\n            <li role=\"treeitem\" class=\"second\">second node</li>\n          </ul>\n        `}></devtools-tree>`);\n    assert.deepEqual(\n        component.getInternalTreeOutlineForTest().rootElement().children().map(\n            element => [...element.listItemElement.classList]),\n        [\n          ['first'],\n          ['second'],\n        ]);\n  });\n\n  it('applies event listeners to tree elements', async () => {\n    const onClick = sinon.stub();\n    const component = await makeTree(html`\n      <devtools-tree\n        .template=${html`\n          <ul role=\"tree\">\n            <li role=\"treeitem\">\n              <button @click=${onClick}>click me</button>\n            </li>\n          </ul>\n        `}></devtools-tree>`);\n    component.getInternalTreeOutlineForTest()\n        .rootElement()\n        .children()[0]\n        .listItemElement.querySelector('button')\n        ?.click();\n    sinon.assert.calledOnce(onClick);\n  });\n\n  it('handles adding tree elements in the moddile', async () => {\n    const makeTemplate = (items: string[]): Lit.TemplateResult => {\n      return html`\n        <ul role=\"tree\">\n          <li role=\"treeitem\">node\n            <ul role=\"group\">\n              ${items.map(item => html`<li role=\"treeitem\">${item}</li>`)}\n              <li role=\"treeitem\">extra node</li>\n            </ul>\n          </li>\n        </ul>\n      `;\n    };\n    const component = await makeTree(html`<devtools-tree .template=${makeTemplate(['second child'])}></devtools-tree>`);\n    component.template = makeTemplate(['first child', 'second child']);\n    await new Promise(resolve => setTimeout(resolve, 0));\n    const treeOutline = component.getInternalTreeOutlineForTest();\n    const children = treeOutline.rootElement().childAt(0)!.children();\n    assert.lengthOf(children, 3);\n    assert.strictEqual(children[0].titleElement.textContent?.trim(), 'first child');\n    assert.strictEqual(children[1].titleElement.textContent?.trim(), 'second child');\n    assert.strictEqual(children[2].titleElement.textContent?.trim(), 'extra node');\n  });\n\n  it('marks a node as expandable even if it has empty subtree', async () => {\n    const component = await makeTree(html`<devtools-tree .template=${html`\n      <ul role=\"tree\">\n        <li role=\"treeitem\">node\n          <ul role=\"group\">\n          </ul>\n        </li>\n      </ul>\n    `}></devtools-tree>`);\n    const treeOutline = component.getInternalTreeOutlineForTest();\n    assert.isTrue(treeOutline.rootElement().childAt(0)!.isExpandable());\n  });\n});\n\ntype NodeSpec = {\n  [key: string]: NodeSpec,\n}|string;\n\nclass TestTreeNode {\n  #children: TestTreeNode[] = [];\n\n  constructor(readonly contents: string, private readonly contentsMap: Map<string, TestTreeNode>) {\n    assert.isUndefined(contentsMap.get(contents), 'Test expects contents to be unique');\n    contentsMap.set(contents, this);\n  }\n\n  get(contents: string): TestTreeNode|undefined {\n    return this.contentsMap.get(contents);\n  }\n\n  static make(spec: NodeSpec, root = new TestTreeNode('', new Map())): TestTreeNode {\n    if (typeof spec === 'string') {\n      root.children().push(new TestTreeNode(spec, root.contentsMap));\n      return root;\n    }\n    for (const key of Object.keys(spec)) {\n      const child = new TestTreeNode(key, root.contentsMap);\n      root.children().push(child);\n      TestTreeNode.make(spec[key], child);\n    }\n    return root;\n  }\n\n  children() {\n    return this.#children;\n  }\n\n  match(regex: RegExp) {\n    const matches = this.contents.matchAll(regex);\n    return matches\n        .map((match, matchIndexInNode) => ({\n               node: this,\n               matchIndexInNode,\n               isPostOrderMatch: false,\n             }))\n        .toArray();\n  }\n}\n\ndescribe('TreeSearch', () => {\n  const tree = TestTreeNode.make({\n    level1_child1: {\n      level2_child1_1: 'foo bar baz',\n      level2_child1_2: 'match 0',\n    },\n    level1_child2: {\n      'match 1': 'level2_child2_1',\n      level2_child2_2: 'bar',\n    },\n    level1_child3: 'match 2',\n  });\n\n  it('collects search results', () => {\n    const search = new UI.TreeOutline.TreeSearch<TestTreeNode>();\n    assert.isNotOk(search.currentMatch());\n    search.search(tree, false, (node, isPostOrder) => (isPostOrder && []) || node.match(/match/gi));\n\n    const viewStub = sinon.createStubInstance(UI.SearchableView.SearchableView);\n    search.updateSearchableView(viewStub);\n    sinon.assert.calledOnceWithExactly(viewStub.updateSearchMatchesCount, 3);\n    sinon.assert.calledOnceWithExactly(viewStub.updateCurrentMatchIndex, 0);\n    assert.strictEqual(search.currentMatch()?.node?.contents, 'match 0');\n\n    search.reset();\n    search.updateSearchableView(viewStub);\n    sinon.assert.calledTwice(viewStub.updateSearchMatchesCount);\n    sinon.assert.calledTwice(viewStub.updateCurrentMatchIndex);\n    assert.deepEqual(viewStub.updateSearchMatchesCount.args, [[3], [0]]);\n    assert.deepEqual(viewStub.updateCurrentMatchIndex.args, [[0], [0]]);\n    assert.notExists(search.currentMatch());\n  });\n\n  it('supports multiple matches per node', () => {\n    const search = new UI.TreeOutline.TreeSearch<TestTreeNode>();\n    search.search(tree, false, (node, isPostOrder) => (isPostOrder && []) || node.match(/ba/gi));\n\n    const viewStub = sinon.createStubInstance(UI.SearchableView.SearchableView);\n    search.updateSearchableView(viewStub);\n    sinon.assert.calledOnceWithExactly(viewStub.updateSearchMatchesCount, 3);\n    sinon.assert.calledOnceWithExactly(viewStub.updateCurrentMatchIndex, 0);\n\n    assert.strictEqual(search.currentMatch()?.node?.contents, 'foo bar baz');\n  });\n\n  it('supports forward and backward iteration which wraps around', () => {\n    const search = new UI.TreeOutline.TreeSearch<TestTreeNode>();\n\n    search.search(tree, false, (node, isPostOrder) => (isPostOrder && []) || node.match(/match/gi));\n\n    assert.strictEqual(search.currentMatch()?.node?.contents, 'match 0');\n    search.next();\n    assert.strictEqual(search.currentMatch()?.node?.contents, 'match 1');\n    search.next();\n    assert.strictEqual(search.currentMatch()?.node?.contents, 'match 2');\n    search.next();\n    assert.strictEqual(search.currentMatch()?.node?.contents, 'match 0');\n\n    search.next();\n    assert.strictEqual(search.currentMatch()?.node?.contents, 'match 1');\n    search.prev();\n    assert.strictEqual(search.currentMatch()?.node?.contents, 'match 0');\n    search.prev();\n    assert.strictEqual(search.currentMatch()?.node?.contents, 'match 2');\n    search.prev();\n    assert.strictEqual(search.currentMatch()?.node?.contents, 'match 1');\n    search.prev();\n    assert.strictEqual(search.currentMatch()?.node?.contents, 'match 0');\n  });\n\n  it('groups results by node', () => {\n    const search = new UI.TreeOutline.TreeSearch<TestTreeNode>();\n    search.search(tree, false, (node, isPostOrder) => (isPostOrder && []) || node.match(/ba/gi));\n\n    const node = tree.get('foo bar baz');\n    assert.exists(node);\n    const results = search.getResults(node);\n    assert.deepEqual(\n        results,\n        [{node, isPostOrderMatch: false, matchIndexInNode: 0}, {node, isPostOrderMatch: false, matchIndexInNode: 1}]);\n  });\n\n  it('correctly maintains the cursor position when updating the search', () => {\n    const search = new UI.TreeOutline.TreeSearch<TestTreeNode>();\n    search.search(tree, false, (node, isPostOrder) => (isPostOrder && []) || node.match(/ba/gi));\n\n    const firstNode = tree.get('foo bar baz');\n    assert.exists(firstNode);\n    const secondNode = tree.get('bar');\n    assert.exists(secondNode);\n\n    // If the current result still matches, cursor stays\n    assert.deepEqual(search.currentMatch(), {node: firstNode, isPostOrderMatch: false, matchIndexInNode: 0});\n    search.search(tree, false, (node, isPostOrder) => (isPostOrder && []) || node.match(/bar/gi));\n    assert.deepEqual(search.currentMatch(), {node: firstNode, isPostOrderMatch: false, matchIndexInNode: 0});\n    search.next();\n    assert.deepEqual(search.currentMatch(), {node: secondNode, isPostOrderMatch: false, matchIndexInNode: 0});\n    search.search(tree, false, (node, isPostOrder) => (isPostOrder && []) || node.match(/ba/gi));\n    assert.deepEqual(search.currentMatch(), {node: secondNode, isPostOrderMatch: false, matchIndexInNode: 0});\n\n    // If the current result does not match, cursor moves forward\n    search.reset();\n    search.search(tree, false, (node, isPostOrder) => (isPostOrder && []) || node.match(/ba/gi));\n    search.next();\n    assert.deepEqual(search.currentMatch(), {node: firstNode, isPostOrderMatch: false, matchIndexInNode: 1});\n    search.search(tree, false, (node, isPostOrder) => (isPostOrder && []) || node.match(/bar/gi));\n    assert.deepEqual(search.currentMatch(), {node: secondNode, isPostOrderMatch: false, matchIndexInNode: 0});\n\n    // If the current result does not match, cursor moves backward if moveBackward is passed\n    search.reset();\n    search.search(tree, false, (node, isPostOrder) => (isPostOrder && []) || node.match(/ba/gi));\n    search.next();\n    assert.deepEqual(search.currentMatch(), {node: firstNode, isPostOrderMatch: false, matchIndexInNode: 1});\n    search.search(tree, true, (node, isPostOrder) => (isPostOrder && []) || node.match(/bar/gi));\n    assert.deepEqual(search.currentMatch(), {node: firstNode, isPostOrderMatch: false, matchIndexInNode: 0});\n  });\n});\n"]}