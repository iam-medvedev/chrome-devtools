{"version":3,"file":"XMLView.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/source_frame/XMLView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as TextUtils from '../../../../models/text_utils/text_utils.js';\nimport * as Lit from '../../../lit/lit.js';\nimport * as UI from '../../legacy.js';\n\nimport xmlTreeStyles from './xmlTree.css.js';\nimport xmlViewStyles from './xmlView.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Text to find an item\n   */\n  find: 'Find',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/source_frame/XMLView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst {render, html} = Lit;\nfunction* attributes(element: Element): Generator<Attr> {\n  for (let i = 0; i < element.attributes.length; ++i) {\n    const attributeNode = element.attributes.item(i);\n    if (attributeNode) {\n      yield attributeNode;\n    }\n  }\n}\n\nfunction hasNonTextChildren(node: Node): boolean {\n  return node.childNodes.length !== node.childTextNodes.length;\n}\n\nfunction textView(treeNode: XMLTreeViewNode, closeTag: boolean): string {\n  const {node} = treeNode;\n\n  switch (node.nodeType) {\n    case Node.ELEMENT_NODE:\n      if (node instanceof Element) {\n        const tag = node.tagName;\n        return closeTag ?\n            hasNonTextChildren(node) || node.textContent ? '</' + tag + '>' : '' :\n            `${'<' + tag}${\n                attributes(node)\n                    .map(attributeNode => `${'\\xA0'}${attributeNode.name}${'=\"'}${attributeNode.value}${'\"'}`)\n                    .toArray()\n                    .join('')}${\n                hasNonTextChildren(node) ? '' :\n                    node.textContent     ? `${'>'}${node.textContent}${'</' + tag}` :\n                                           `${' /'}`}${'>'}`;\n      }\n      return '';\n    case Node.TEXT_NODE:\n      return node.nodeValue && !closeTag ? `${node.nodeValue}` : '';\n    case Node.CDATA_SECTION_NODE:\n      return node.nodeValue && !closeTag ? `${'<![CDATA['}${node.nodeValue}${']]>'}` : '';\n    case Node.PROCESSING_INSTRUCTION_NODE:\n      return node.nodeValue && !closeTag ? `${'<?' + node.nodeName + ' ' + node.nodeValue + '?>'}` : '';\n    case Node.COMMENT_NODE:\n      return !closeTag ? `${'<!--' + node.nodeValue + '-->'}` : '';\n  }\n  return '';\n}\n\nfunction htmlView(treeNode: XMLTreeViewNode): Lit.LitTemplate {\n  const {node} = treeNode;\n\n  switch (node.nodeType) {\n    case Node.ELEMENT_NODE:\n      if (node instanceof Element) {\n        const tag = node.tagName;\n        return html`<span part='shadow-xml-view-tag'>${'<' + tag}</span>${\n            attributes(node).map(attributeNode => html`<span part='shadow-xml-view-tag'>${'\\xA0'}</span>\n                <span part='shadow-xml-view-attribute-name'>${attributeNode.name}</span>\n                <span part='shadow-xml-view-tag'>${'=\"'}</span>\n                <span part='shadow-xml-view-attribute-value'>${attributeNode.value}</span>\n                <span part='shadow-xml-view-tag'>${'\"'}</span>`)}\n                <span ?hidden=${treeNode.expanded}>${\n            hasNonTextChildren(node) ? html`<span part='shadow-xml-view-tag'>${'>'}</span>\n                  <span part='shadow-xml-view-comment'>${'…'}</span>\n                  <span part='shadow-xml-view-tag'>${'</' + tag}</span>` :\n                node.textContent ? html`<span part='shadow-xml-view-tag'>${'>'}</span>\n                  <span part='shadow-xml-view-text'>${node.textContent}</span>\n                  <span part='shadow-xml-view-tag'>${'</' + tag}</span>` :\n                                   html`<span part='shadow-xml-view-tag'>${' /'}</span>`}</span>\n                <span part='shadow-xml-view-tag'>${'>'}</span>`;\n      }\n      return Lit.nothing;\n    case Node.TEXT_NODE:\n      return node.nodeValue ? html`<span part='shadow-xml-view-text'>${node.nodeValue}</span>` : Lit.nothing;\n    case Node.CDATA_SECTION_NODE:\n      return node.nodeValue ? html`<span part='shadow-xml-view-cdata'>${'<![CDATA['}</span>\n          <span part='shadow-xml-view-text'>${node.nodeValue}</span>\n          <span part='shadow-xml-view-cdata'>${']]>'}</span>` :\n                              Lit.nothing;\n    case Node.PROCESSING_INSTRUCTION_NODE:\n      return node.nodeValue ? html`<span part='shadow-xml-view-processing-instruction'>${\n                                  '<?' + node.nodeName + ' ' + node.nodeValue + '?>'}</span>` :\n                              Lit.nothing;\n    case Node.COMMENT_NODE:\n      return html`<span part='shadow-xml-view-comment'>${'<!--' + node.nodeValue + '-->'}</span>`;\n  }\n  return Lit.nothing;\n}\n\ninterface ViewInput {\n  onExpand(node: XMLTreeViewNode, expanded: boolean): void;\n  xml: XMLTreeViewNode;\n  search: UI.TreeOutline.TreeSearch<XMLTreeViewNode, SearchResult>|undefined;\n  jumpToNextSearchResult: SearchResult|undefined;\n}\nexport type View = (input: ViewInput, output: object, target: HTMLElement) => void;\nexport const DEFAULT_VIEW: View = (input, output, target) => {\n  function highlight(node: XMLTreeViewNode, closeTag: boolean): ReturnType<typeof Lit.Directives.ref> {\n    if (!input.search) {\n      return Lit.nothing;\n    }\n    const entries = input.search.getResults(node);\n    const highlights = [];\n    let selected = undefined;\n    for (const entry of entries ?? []) {\n      if (entry.isPostOrderMatch === closeTag) {\n        const range = new TextUtils.TextRange.SourceRange(entry.match.index, entry.match[0].length);\n        if (entry === input.jumpToNextSearchResult) {\n          selected = range;\n        } else {\n          highlights.push(range);\n        }\n      }\n    }\n    return UI.TreeOutline.TreeSearch.highlight(highlights, selected);\n  }\n\n  function layOutNode(node: XMLTreeViewNode, populateSubtrees = false): Lit.LitTemplate {\n    const onExpand = (event: UI.TreeOutline.TreeViewElement.ExpandEvent): void =>\n        input.onExpand(node, event.detail.expanded);\n\n    // clang-format off\n    return html`\n      <li ${highlight(node, /* closeTag=*/ false)} role=\"treeitem\"\n          ?selected=${input.jumpToNextSearchResult?.node === node}\n          @expand=${onExpand}>\n        ${htmlView(node)}\n        ${node.children().length ? html`\n          <ul role=\"group\" ?hidden=${!node.expanded}>\n            ${populateSubtrees || input.search ? subtree(node) : Lit.nothing}\n          </ul>` : Lit.nothing}\n      </li>`;\n    // clang-format on\n  }\n\n  function subtree(treeNode: XMLTreeViewNode): Lit.LitTemplate {\n    const children = treeNode.children();\n    if (children.length === 0) {\n      return Lit.nothing;\n    }\n    // clang-format off\n    return html`\n      ${children.map(child => layOutNode(child, treeNode.expanded))}\n      ${treeNode.node instanceof Element\n          ? html`<li\n                  ${highlight(treeNode, /* closeTag=*/ true)}\n                  role=\"treeitem\"><span part='shadow-xml-view-close-tag'>${'</' + treeNode.node.tagName + '>'}</span\n                 ></li>`\n          : Lit.nothing}`;\n    // clang-format on\n  }\n\n  // clang-format off\n  render(\n      html`\n    <style>${xmlViewStyles}</style>\n    <style>${xmlTreeStyles}</style>\n    <devtools-tree\n      class=\"shadow-xml-view source-code\"\n      .template=${html`\n        <ul role=\"tree\">\n          ${input.xml.children().map(node => layOutNode(node, /* populateSubtrees=*/ true))}\n        </ul>`}\n      ></devtools-tree>`,\n      // clang-format on\n      target);\n};\n\nfunction* children(xmlNode: Node|ParentNode|undefined): Generator<Node> {\n  if (!xmlNode || !hasNonTextChildren(xmlNode)) {\n    return;\n  }\n  let node: (ChildNode|null) = xmlNode?.firstChild;\n  while (node) {\n    const currentNode = node;\n    node = node.nextSibling;\n    const nodeType = currentNode.nodeType;\n    // ignore empty TEXT\n    if (nodeType === Node.TEXT_NODE && currentNode.nodeValue?.match(/\\s+/)) {\n      continue;\n    }\n    // ignore ATTRIBUTE, ENTITY_REFERENCE, ENTITY, DOCUMENT, DOCUMENT_TYPE, DOCUMENT_FRAGMENT, NOTATION\n    if ((nodeType !== Node.ELEMENT_NODE) && (nodeType !== Node.TEXT_NODE) && (nodeType !== Node.CDATA_SECTION_NODE) &&\n        (nodeType !== Node.PROCESSING_INSTRUCTION_NODE) && (nodeType !== Node.COMMENT_NODE)) {\n      continue;\n    }\n    yield currentNode;\n  }\n}\n\nexport class XMLTreeViewNode {\n  readonly node: Node|ParentNode;\n  expanded = false;\n  #children?: XMLTreeViewNode[];\n\n  constructor(node: Node|ParentNode) {\n    this.node = node;\n  }\n\n  children(): XMLTreeViewNode[] {\n    if (!this.#children) {\n      this.#children = children(this.node).map(node => new XMLTreeViewNode(node)).toArray();\n    }\n    return this.#children;\n  }\n\n  match(regex: RegExp, closeTag: boolean): RegExpStringIterator<RegExpExecArray> {\n    return textView(this, closeTag).matchAll(regex);\n  }\n}\n\nexport class XMLTreeViewModel {\n  readonly xmlDocument: Document;\n  readonly root: XMLTreeViewNode;\n\n  constructor(parsedXML: Document) {\n    this.xmlDocument = parsedXML;\n    this.root = new XMLTreeViewNode(parsedXML);\n    this.root.expanded = true;\n  }\n}\n\ninterface SearchResult extends UI.TreeOutline.TreeSearchResult<XMLTreeViewNode> {\n  match: RegExpExecArray;\n}\n\nexport class XMLView extends UI.Widget.Widget implements UI.SearchableView.Searchable {\n  private searchableView: UI.SearchableView.SearchableView|null = null;\n  #search: UI.TreeOutline.TreeSearch<XMLTreeViewNode, SearchResult>|undefined;\n  #treeViewModel: XMLTreeViewModel|undefined;\n  readonly #view: View;\n  #nextJump: SearchResult|undefined;\n\n  constructor(target?: HTMLElement, view: View = DEFAULT_VIEW) {\n    super(target, {jslog: 'xml-view', classes: ['shadow-xml-view', 'source-code']});\n    this.#view = view;\n  }\n\n  set parsedXML(parsedXML: Document) {\n    if (this.#treeViewModel?.xmlDocument !== parsedXML) {\n      this.#treeViewModel = new XMLTreeViewModel(parsedXML);\n      this.requestUpdate();\n    }\n  }\n\n  override performUpdate(): void {\n    if (this.#treeViewModel) {\n      const onExpand = (node: XMLTreeViewNode, expanded: boolean): void => {\n        node.expanded = expanded;\n        this.requestUpdate();\n      };\n      this.#view(\n          {xml: this.#treeViewModel.root, onExpand, search: this.#search, jumpToNextSearchResult: this.#nextJump}, {},\n          this.contentElement);\n    }\n  }\n\n  static createSearchableView(parsedXML: Document): UI.SearchableView.SearchableView {\n    const xmlView = new XMLView();\n    xmlView.parsedXML = parsedXML;\n    const searchableView = new UI.SearchableView.SearchableView(xmlView, null);\n    searchableView.setPlaceholder(i18nString(UIStrings.find));\n    xmlView.searchableView = searchableView;\n    xmlView.show(searchableView.element);\n    return searchableView;\n  }\n\n  static parseXML(text: string, mimeType: string): Document|null {\n    let parsedXML;\n    try {\n      switch (mimeType) {\n        case 'application/xhtml+xml':\n        case 'application/xml':\n        case 'image/svg+xml':\n        case 'text/html':\n        case 'text/xml':\n          parsedXML = (new DOMParser()).parseFromString(text, mimeType);\n      }\n    } catch {\n      return null;\n    }\n    if (!parsedXML || parsedXML.body) {\n      return null;\n    }\n    return parsedXML;\n  }\n\n  onSearchCanceled(): void {\n    this.#search = undefined;\n    this.searchableView?.updateSearchMatchesCount(0);\n    this.searchableView?.updateCurrentMatchIndex(0);\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void {\n    if (!this.#treeViewModel || !this.searchableView) {\n      return;\n    }\n    const {regex} = searchConfig.toSearchRegex(true);\n    if (!this.#search) {\n      this.#search = new UI.TreeOutline.TreeSearch();\n    }\n    this.#search.search(\n        this.#treeViewModel.root, jumpBackwards ?? false,\n        (node, closeTag) =>\n            node.match(regex, closeTag)\n                .map((match, matchIndexInNode) => ({node, matchIndexInNode, isPostOrderMatch: closeTag, match}))\n                .toArray());\n    this.#nextJump = shouldJump ? this.#search.currentMatch() : undefined;\n    this.#search.updateSearchableView(this.searchableView);\n    this.requestUpdate();\n  }\n\n  jumpToNextSearchResult(): void {\n    this.#nextJump = this.#search?.next();\n    this.searchableView && this.#search?.updateSearchableView(this.searchableView);\n    this.requestUpdate();\n  }\n\n  jumpToPreviousSearchResult(): void {\n    this.#nextJump = this.#search?.prev();\n    this.searchableView && this.#search?.updateSearchableView(this.searchableView);\n    this.requestUpdate();\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsWholeWordSearch(): boolean {\n    return true;\n  }\n\n  supportsRegexSearch(): boolean {\n    return true;\n  }\n}\n"]}