{"version":3,"file":"PreviewFactory.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/source_frame/PreviewFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as TextUtils from '../../../../models/text_utils/text_utils.js';\nimport * as UI from '../../legacy.js';\n\nimport {FontView} from './FontView.js';\nimport {ImageView} from './ImageView.js';\nimport {JSONView} from './JSONView.js';\nimport {ResourceSourceFrame} from './ResourceSourceFrame.js';\nimport {XMLView} from './XMLView.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Preview Factory of the Sources panel if the data to preview can't be shown due to an error\n   */\n  failedToLoadData: 'Failed to load data',\n  /**\n   *@description Text in Preview Factory of the Sources panel if there's no data to preview\n   */\n  nothingToPreview: 'Nothing to preview',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/source_frame/PreviewFactory.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class PreviewFactory {\n  static async createPreview(provider: TextUtils.ContentProvider.ContentProvider, mimeType: string):\n      Promise<UI.Widget.Widget|null> {\n    let resourceType = Common.ResourceType.ResourceType.fromMimeType(mimeType);\n    if (resourceType === Common.ResourceType.resourceTypes.Other) {\n      resourceType = provider.contentType();\n    }\n\n    switch (resourceType) {\n      case Common.ResourceType.resourceTypes.Image:\n        return new ImageView(mimeType, provider);\n      case Common.ResourceType.resourceTypes.Font:\n        return new FontView(mimeType, provider);\n    }\n\n    const contentData = await provider.requestContentData();\n    if (TextUtils.ContentData.ContentData.isError(contentData)) {\n      return new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.failedToLoadData), contentData.error);\n    }\n    if (!contentData.isTextContent) {\n      return null;\n    }\n\n    if (!contentData.text) {\n      return new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.nothingToPreview), '');\n    }\n\n    const parsedXML = XMLView.parseXML(contentData.text, contentData.mimeType);\n    if (parsedXML) {\n      return XMLView.createSearchableView(parsedXML);\n    }\n\n    const jsonView = await JSONView.createView(contentData.text);\n    if (jsonView) {\n      return jsonView;\n    }\n\n    const highlighterType =\n        mimeType.replace(/;.*/, '') /* remove charset */ || provider.contentType().canonicalMimeType();\n    return ResourceSourceFrame.createSearchableView(provider, highlighterType);\n  }\n}\n"]}