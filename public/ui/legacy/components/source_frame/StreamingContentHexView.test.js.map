{"version":3,"file":"StreamingContentHexView.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/source_frame/StreamingContentHexView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from '../../../../models/text_utils/text_utils.js';\nimport * as LinearMemoryInspectorComponents from '../../../../panels/linear_memory_inspector/components/components.js';\nimport {raf} from '../../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../../testing/EnvironmentHelpers.js';\n\nimport * as SourceFrame from './source_frame.js';\n\ndescribeWithEnvironment('StreamingContentHexView', () => {\n  function getMemoryViewer(view: SourceFrame.StreamingContentHexView.StreamingContentHexView):\n      LinearMemoryInspectorComponents.LinearMemoryViewer.LinearMemoryViewer {\n    const inspector = view.contentElement.firstChild as HTMLElement;\n    assert.isNotNull(inspector.shadowRoot);\n\n    const viewer = inspector.shadowRoot.querySelector('devtools-linear-memory-inspector-viewer');\n    assert.instanceOf(viewer, LinearMemoryInspectorComponents.LinearMemoryViewer.LinearMemoryViewer);\n    return viewer;\n  }\n\n  function getAllByteCells(view: SourceFrame.StreamingContentHexView.StreamingContentHexView): string {\n    const viewer = getMemoryViewer(view);\n    assert.isNotNull(viewer.shadowRoot);\n\n    const byteCells = [...viewer.shadowRoot.querySelectorAll('.byte-cell')];\n    return byteCells.map(c => c.textContent).join('');\n  }\n\n  function getAllTextCells(view: SourceFrame.StreamingContentHexView.StreamingContentHexView): string {\n    const viewer = getMemoryViewer(view);\n    assert.isNotNull(viewer.shadowRoot);\n\n    const textCells = [...viewer.shadowRoot.querySelectorAll('.text-cell')];\n    return textCells.map(c => c.textContent).join('');\n  }\n\n  it('shows the initial content of a StreamingContentData', async () => {\n    const streamingContentData = TextUtils.StreamingContentData.StreamingContentData.from(\n        new TextUtils.ContentData.ContentData(window.btoa('abc'), /* isBase64 */ true, 'application/octet-stream'));\n    const view = new SourceFrame.StreamingContentHexView.StreamingContentHexView(streamingContentData);\n    view.markAsRoot();\n    view.show(document.body);\n    await raf();\n\n    assert.strictEqual(getAllByteCells(view), '616263');\n    assert.strictEqual(getAllTextCells(view), 'abc');\n\n    view.detach();\n  });\n\n  it('shows the updated content of a StreamingContentData', async () => {\n    const streamingContentData = TextUtils.StreamingContentData.StreamingContentData.from(\n        new TextUtils.ContentData.ContentData(window.btoa('abc'), /* isBase64 */ true, 'application/octet-stream'));\n    const view = new SourceFrame.StreamingContentHexView.StreamingContentHexView(streamingContentData);\n    view.markAsRoot();\n    view.show(document.body);\n    await raf();\n\n    streamingContentData.addChunk(window.btoa('def'));\n    await raf();\n\n    assert.strictEqual(getAllByteCells(view), '616263646566');\n    assert.strictEqual(getAllTextCells(view), 'abcdef');\n\n    view.detach();\n  });\n});\n"]}