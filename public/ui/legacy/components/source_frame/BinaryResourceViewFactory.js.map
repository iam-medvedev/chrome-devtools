{"version":3,"file":"BinaryResourceViewFactory.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/source_frame/BinaryResourceViewFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../../core/common/common.js';\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport * as TextUtils from '../../../../models/text_utils/text_utils.js';\n\nimport {ResourceSourceFrame} from './ResourceSourceFrame.js';\nimport {StreamingContentHexView} from './StreamingContentHexView.js';\n\nexport class BinaryResourceViewFactory {\n  private streamingContent: TextUtils.StreamingContentData.StreamingContentData;\n  private readonly contentUrl: Platform.DevToolsPath.UrlString;\n  private readonly resourceType: Common.ResourceType.ResourceType;\n\n  constructor(\n      content: TextUtils.StreamingContentData.StreamingContentData, contentUrl: Platform.DevToolsPath.UrlString,\n      resourceType: Common.ResourceType.ResourceType) {\n    this.streamingContent = content;\n    this.contentUrl = contentUrl;\n    this.resourceType = resourceType;\n  }\n\n  hex(): string {\n    const binaryString = window.atob(this.base64());\n    const array = Uint8Array.from(binaryString, m => m.codePointAt(0) as number);\n    return BinaryResourceViewFactory.#uint8ArrayToHexString(array);\n  }\n\n  base64(): string {\n    return this.streamingContent.content().base64;\n  }\n\n  utf8(): string {\n    return new TextUtils.ContentData.ContentData(this.base64(), /* isBase64 */ true, 'text/plain', 'utf-8').text;\n  }\n\n  createBase64View(): ResourceSourceFrame {\n    const resourceFrame = new ResourceSourceFrame(\n        TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n            this.contentUrl, this.resourceType, this.streamingContent.content().base64),\n        this.resourceType.canonicalMimeType(), {lineNumbers: false, lineWrapping: true});\n    this.streamingContent.addEventListener(TextUtils.StreamingContentData.Events.CHUNK_ADDED, () => {\n      void resourceFrame.setContent(this.base64());\n    });\n    return resourceFrame;\n  }\n\n  createHexView(): StreamingContentHexView {\n    return new StreamingContentHexView(this.streamingContent);\n  }\n\n  createUtf8View(): ResourceSourceFrame {\n    const resourceFrame = new ResourceSourceFrame(\n        TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n            this.contentUrl, this.resourceType, this.utf8()),\n        this.resourceType.canonicalMimeType(), {lineNumbers: true, lineWrapping: true});\n    this.streamingContent.addEventListener(TextUtils.StreamingContentData.Events.CHUNK_ADDED, () => {\n      void resourceFrame.setContent(this.utf8());\n    });\n    return resourceFrame;\n  }\n\n  static #uint8ArrayToHexString(uint8Array: Uint8Array): string {\n    let output = '';\n    for (let i = 0; i < uint8Array.length; i++) {\n      output += BinaryResourceViewFactory.#numberToHex(uint8Array[i], 2);\n    }\n    return output;\n  }\n\n  static #numberToHex(number: number, padding: number): string {\n    let hex = number.toString(16);\n    while (hex.length < padding) {\n      hex = '0' + hex;\n    }\n    return hex;\n  }\n}\n"]}