{"version":3,"file":"BinaryResourceViewFactory.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/source_frame/BinaryResourceViewFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../../core/common/common.js';\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport * as TextUtils from '../../../../models/text_utils/text_utils.js';\n\nimport {ResourceSourceFrame} from './ResourceSourceFrame.js';\nimport {StreamingContentHexView} from './StreamingContentHexView.js';\n\nexport class BinaryResourceViewFactory {\n  private streamingContent: TextUtils.StreamingContentData.StreamingContentData;\n  private readonly contentUrl: Platform.DevToolsPath.UrlString;\n  private readonly resourceType: Common.ResourceType.ResourceType;\n  private arrayPromise: Promise<Uint8Array>|null;\n  private hexPromise: Promise<string>|null;\n  private utf8Promise: Promise<string>|null;\n  constructor(\n      content: TextUtils.StreamingContentData.StreamingContentData, contentUrl: Platform.DevToolsPath.UrlString,\n      resourceType: Common.ResourceType.ResourceType) {\n    this.streamingContent = content;\n    this.contentUrl = contentUrl;\n    this.resourceType = resourceType;\n    this.arrayPromise = null;\n    this.hexPromise = null;\n    this.utf8Promise = null;\n  }\n\n  private async fetchContentAsArray(): Promise<Uint8Array> {\n    if (!this.arrayPromise) {\n      this.arrayPromise = new Promise(async resolve => {\n        const fetchResponse = await fetch('data:;base64,' + this.streamingContent.content().base64);\n        resolve(new Uint8Array(await fetchResponse.arrayBuffer()));\n      });\n    }\n    return await this.arrayPromise;\n  }\n\n  async hex(): Promise<string> {\n    if (!this.hexPromise) {\n      this.hexPromise = new Promise(async resolve => {\n        const content = await this.fetchContentAsArray();\n        const hexString = BinaryResourceViewFactory.uint8ArrayToHexString(content);\n        resolve(hexString);\n      });\n    }\n\n    return this.hexPromise;\n  }\n\n  base64(): string {\n    return this.streamingContent.content().base64;\n  }\n\n  async utf8(): Promise<string> {\n    if (!this.utf8Promise) {\n      this.utf8Promise = new Promise(async resolve => {\n        const content = await this.fetchContentAsArray();\n        const utf8String = new TextDecoder('utf8').decode(content);\n        resolve(utf8String);\n      });\n    }\n\n    return this.utf8Promise;\n  }\n\n  createBase64View(): ResourceSourceFrame {\n    return new ResourceSourceFrame(\n        TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n            this.contentUrl, this.resourceType, this.streamingContent.content().base64),\n        this.resourceType.canonicalMimeType(), {lineNumbers: false, lineWrapping: true});\n  }\n\n  createHexView(): StreamingContentHexView {\n    return new StreamingContentHexView(this.streamingContent);\n  }\n\n  createUtf8View(): ResourceSourceFrame {\n    const utf8fn = (): Promise<TextUtils.ContentData.ContentData> =>\n        this.utf8().then(str => new TextUtils.ContentData.ContentData(str, /* isBase64 */ false, 'text/plain'));\n    const utf8ContentProvider =\n        new TextUtils.StaticContentProvider.StaticContentProvider(this.contentUrl, this.resourceType, utf8fn);\n    return new ResourceSourceFrame(\n        utf8ContentProvider, this.resourceType.canonicalMimeType(), {lineNumbers: true, lineWrapping: true});\n  }\n\n  static uint8ArrayToHexString(uint8Array: Uint8Array): string {\n    let output = '';\n    for (let i = 0; i < uint8Array.length; i++) {\n      output += BinaryResourceViewFactory.numberToHex(uint8Array[i], 2);\n    }\n    return output;\n  }\n\n  static numberToHex(number: number, padding: number): string {\n    let hex = number.toString(16);\n    while (hex.length < padding) {\n      hex = '0' + hex;\n    }\n    return hex;\n  }\n}\n"]}