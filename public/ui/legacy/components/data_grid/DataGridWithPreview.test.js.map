{"version":3,"file":"DataGridWithPreview.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/data_grid/DataGridWithPreview.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  raf,\n  renderElementIntoDOM,\n} from '../../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../../testing/EnvironmentHelpers.js';\nimport {expectCalled} from '../../../../testing/ExpectStubCall.js';\nimport {\n  selectNodeByKey,\n} from '../../../../testing/StorageItemsViewHelpers.js';\nimport * as UI from '../../legacy.js';\n\nimport * as DataGrid from './data_grid.js';\n\ndescribeWithEnvironment('DataGridWithPreview', () => {\n  let dataGridWithPreview: DataGrid.DataGridWithPreview.DataGridWithPreview;\n\n  const COLUMNS = [\n    {id: 'key', title: 'Key', sortable: true},\n    {id: 'value', title: 'Value', sortable: true},\n  ] as DataGrid.DataGrid.ColumnDescriptor[];\n\n  const MOCK_ITEMS = [\n    ['foo', 'value1'],\n    ['bar', 'value2'],\n  ];\n\n  const createPreviewFunc = sinon.stub<[string, string]>();\n\n  const expectCreatePreviewCalled = async (expectedKey: string, expectedValue: string) => {\n    createPreviewFunc.resetHistory();\n    await expectCalled(createPreviewFunc, {\n      fakeFn: async (key: string, value: string) => {\n        assert.strictEqual(key, expectedKey);\n        assert.strictEqual(value, expectedValue);\n        return new UI.EmptyWidget.EmptyWidget(`${key}:${value}`, '');\n      },\n    });\n  };\n\n  beforeEach(() => {\n    const container = new UI.Widget.VBox();\n    const div = document.createElement('div');\n    renderElementIntoDOM(div);\n    container.markAsRoot();\n    container.show(div);\n\n    dataGridWithPreview = new DataGrid.DataGridWithPreview.DataGridWithPreview(\n        '', container.element, COLUMNS, {\n          refreshItems: () => {},\n          edit: {\n            removeItem: () => {},\n            setItem: () => {},\n          },\n          createPreview: createPreviewFunc,\n          setCanDeleteSelected: () => {},\n        },\n        {\n          title: 'Items',\n          itemDeleted: 'Item deleted',\n          itemsCleared: 'Items cleared',\n        });\n\n    dataGridWithPreview.showItems(MOCK_ITEMS);\n  });\n\n  afterEach(() => {\n    dataGridWithPreview.detach();\n  });\n\n  it('updates preview when key selected', async () => {\n    const [key, value] = MOCK_ITEMS[0];\n\n    const createPreviewPromise = expectCreatePreviewCalled(key, value);\n\n    // Select the first item by key.\n    const node = selectNodeByKey(dataGridWithPreview.dataGridForTesting, key);\n    assert.isNotNull(node);\n\n    // Check createPreview function was called.\n    await createPreviewPromise;\n\n    // Check preview was updated.\n    await raf();\n    assert.strictEqual(dataGridWithPreview.previewPanelForTesting.element.innerText, `${key}:${value}`);\n  });\n\n  it('shows empty preview when no row is selected', async () => {\n    // Select the first item by key.\n    const node = selectNodeByKey(dataGridWithPreview.dataGridForTesting, MOCK_ITEMS[0][0]);\n    assert.isNotNull(node);\n\n    await raf();\n\n    // Deselect node.\n    node.deselect();\n\n    await raf();\n\n    // Check preview was updated.\n    assert.strictEqual(\n        dataGridWithPreview.previewPanelForTesting.element.innerText, 'No value selected\\nSelect a value to preview');\n  });\n\n  it('preview changed when value changes', async () => {\n    const [key, value] = MOCK_ITEMS[0];\n\n    let createPreviewPromise = expectCreatePreviewCalled(key, value);\n\n    // Select the first item.\n    const node = selectNodeByKey(dataGridWithPreview.dataGridForTesting, key);\n    assert.isNotNull(node);\n\n    // Check createPreview function was called.\n    await createPreviewPromise;\n\n    // Update the item data (in reality, this would happen since a user edit\n    // would trigger the refreshItems callback - which would fetch new data and\n    // call showItems again).\n    const updatedItems = structuredClone(MOCK_ITEMS);\n    updatedItems[0][1] = 'newValue';\n\n    createPreviewPromise = expectCreatePreviewCalled(key, 'newValue');\n    dataGridWithPreview.showItems(updatedItems);\n\n    // Check createPreview function was called.\n    await createPreviewPromise;\n\n    // Check preview was updated.\n    await raf();\n    assert.strictEqual(dataGridWithPreview.previewPanelForTesting.element.innerText, `${key}:newValue`);\n  });\n});\n"]}