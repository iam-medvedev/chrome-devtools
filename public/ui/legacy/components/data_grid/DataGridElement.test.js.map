{"version":3,"file":"DataGridElement.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/data_grid/DataGridElement.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,gBAAgB,CAAC;AAExB,OAAO,EAAC,oBAAoB,EAAC,MAAM,mCAAmC,CAAC;AACvE,OAAO,EAAC,uBAAuB,EAAC,MAAM,2CAA2C,CAAC;AAClF,OAAO,KAAK,iBAAiB,MAAM,oEAAoE,CAAC;AACxG,OAAO,KAAK,OAAO,MAAM,qCAAqC,CAAC;AAC/D,OAAO,KAAK,EAAE,MAAM,iBAAiB,CAAC;AAEtC,MAAM,EAAC,MAAM,EAAE,IAAI,EAAC,GAAG,OAAO,CAAC;AAE/B,SAAS,iBAAiB,CAAC,OAAoB;IAC7C,OAAO,CAAC,IAAI,EAAE,CAAC;IACf,OAAO,CAAC,KAAK,EAAE,CAAC;IAChB,MAAM,aAAa,GAAG,EAAE,CAAC,SAAS,CAAC,wBAAwB,EAAE,CAAC;IAC9D,MAAM,YAAY,GAAG,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC;IACvF,OAAO,YAAY,CAAC,WAAW,IAAI,EAAE,CAAC;AACxC,CAAC;AAED,SAAS,iBAAiB;IACxB,IAAI,IAAI,GAAwB,QAAQ,CAAC;IACzC,OAAO,IAAI,CAAC,aAAa,EAAE,UAAU,EAAE,aAAa,EAAE,CAAC;QACrD,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC;IACvC,CAAC;IACD,OAAO,IAAI,CAAC,aAA4B,CAAC;AAC3C,CAAC;AAED,SAAS,WAAW,CAAC,OAAoB,EAAE,GAAW;IACpD,OAAO,CAAC,KAAK,EAAE,CAAC;IAChB,iBAAiB,EAAG,CAAC,aAAa,CAC9B,IAAI,aAAa,CAAC,SAAS,EAAE;QAC3B,GAAG;QACH,OAAO,EAAE,IAAI;QACb,QAAQ,EAAE,IAAI;KACf,CAAC,CACL,CAAC;AACJ,CAAC;AAED,uBAAuB,CAAC,UAAU,EAAE,GAAG,EAAE;IACvC,IAAI,SAAuB,CAAC;IAC5B,UAAU,CAAC,GAAG,EAAE;QACd,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC1C,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QACjC,SAAS,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;QAChC,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC;QACjC,oBAAoB,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,KAAK,UAAU,cAAc,CAAC,QAAgC;QAC5D,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QACjC,SAAS,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;QAChC,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC;QACjC,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC,CAAC,CAAE,kDAAkD;QAC5F,MAAM,iBAAiB,CAAC,IAAI,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC,CAAC;QAClD,OAAO,SAAS,CAAC,aAAa,CAAC,wBAAwB,CAAgB,CAAC;IAC1E,CAAC;IAED,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,IAAI,CAAA;2CACF,IAAI,iBAAiB,cAAc;kCAC5C,CAAC,CAAC;QAChC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC;IAC/E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,IAAI,CAAA;+CACE,cAAc;;;;;;;;;;;kCAW3B,CAAC,CAAC;QAChC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAClC,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,wDAAwD,CAAC,CAAC;IAC3G,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,cAAc,CAAC,IAAI,CAAA;+CACkB,cAAc;;;;;;;;;;;kCAW3B,CAAC,CAAC;QAChC,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,IAAI,CAAA;+CACE,cAAc;;;;;;;;;;;kCAW3B,CAAC,CAAC;QAChC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAClC,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,wDAAwD,CAAC,CAAC;IAC3G,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC/B,MAAM,cAAc,CAAC,IAAI,CAAA;+CACkB,cAAc;;;;;;;;;;;;;;;kCAe3B,CAAC,CAAC;QAChC,mBAAmB;QACnB,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,IAAI,CAAA;;2BAElB,cAAc;uBAClB,CAAC,EAAC,GAAG,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAG,QAAQ,EAAE,KAAK,EAAC,CAAC;;;;;;;;;;;;;;;kCAerC,CAAC,CAAC;QAChC,kBAAkB;QAClB,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC;QAC7E,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAClC,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,wDAAwD,CAAC,CAAC;IAC3G,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './data_grid.js';\n\nimport {renderElementIntoDOM} from '../../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../../testing/EnvironmentHelpers.js';\nimport * as RenderCoordinator from '../../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport * as UI from '../../legacy.js';\n\nconst {render, html} = LitHtml;\n\nfunction getAccessibleText(element: HTMLElement): string {\n  element.blur();\n  element.focus();\n  const alertElements = UI.ARIAUtils.getOrCreateAlertElements();\n  const alertElement = alertElements.alertToggle ? alertElements.one : alertElements.two;\n  return alertElement.textContent || '';\n}\n\nfunction getFocusedElement(): HTMLElement {\n  let root: Document|ShadowRoot = document;\n  while (root.activeElement?.shadowRoot?.activeElement) {\n    root = root.activeElement.shadowRoot;\n  }\n  return root.activeElement as HTMLElement;\n}\n\nfunction sendKeydown(element: HTMLElement, key: string): void {\n  element.focus();\n  getFocusedElement()!.dispatchEvent(\n      new KeyboardEvent('keydown', {\n        key,\n        bubbles: true,\n        composed: true,\n      }),\n  );\n}\n\ndescribeWithEnvironment('DataGrid', () => {\n  let container!: HTMLElement;\n  beforeEach(() => {\n    container = document.createElement('div');\n    container.style.display = 'flex';\n    container.style.width = '640px';\n    container.style.height = '480px';\n    renderElementIntoDOM(container);\n  });\n\n  async function renderDataGrid(template: LitHtml.TemplateResult): Promise<HTMLElement> {\n    container.style.display = 'flex';\n    container.style.width = '640px';\n    container.style.height = '480px';\n    render(template, container, {host: {}});  // eslint-disable-line rulesdir/lit-html-host-this\n    await RenderCoordinator.done({waitForWork: true});\n    return container.querySelector('devtools-new-data-grid') as HTMLElement;\n  }\n\n  it('can be configured from template', async () => {\n    const element = await renderDataGrid(html`\n        <devtools-new-data-grid .striped=${true} .displayName=${'Display Name'}>\n        </devtools-new-data-grid>`);\n    assert.isTrue(getAccessibleText(element).startsWith('Display Name Rows: 0'));\n  });\n\n  it('can initialize data from template', async () => {\n    const element = await renderDataGrid(html`\n        <devtools-new-data-grid striped name=${'Display Name'}>\n          <table>\n            <tr>\n              <th id=\"column-1\">Column 1</th>\n              <th id=\"column-2\">Column 2</th>\n            </tr>\n            <tr>\n              <td>Value 1</td>\n              <td>Value 2</td>\n            </tr>\n          </table>\n        </devtools-new-data-grid>`);\n    sendKeydown(element, 'ArrowDown');\n    assert.strictEqual(getAccessibleText(element), 'Display Name Row  Column 1: Value 1, Column 2: Value 2');\n  });\n\n  it('can update data from template', async () => {\n    await renderDataGrid(html`\n        <devtools-new-data-grid striped name=${'Display Name'}>\n          <table>\n            <tr>\n              <th id=\"column-1\">Column 1</th>\n              <th id=\"column-2\">Column 2</th>\n            </tr>\n            <tr>\n              <td>Value 1</td>\n              <td>Value 2</td>\n            </tr>\n          </table>\n        </devtools-new-data-grid>`);\n    const element = await renderDataGrid(html`\n        <devtools-new-data-grid striped name=${'Display Name'}>\n          <table>\n            <tr>\n              <th id=\"column-3\">Column 3</th>\n              <th id=\"column-4\">Column 4</th>\n            </tr>\n            <tr>\n              <td>Value 3</td>\n              <td>Value 4</td>\n            </tr>\n          </table>\n        </devtools-new-data-grid>`);\n    sendKeydown(element, 'ArrowDown');\n    assert.strictEqual(getAccessibleText(element), 'Display Name Row  Column 3: Value 3, Column 4: Value 4');\n  });\n\n  it('can filter data', async () => {\n    await renderDataGrid(html`\n        <devtools-new-data-grid striped name=${'Display Name'}>\n          <table>\n            <tr>\n              <th id=\"column-1\">Column 1</th>\n              <th id=\"column-2\">Column 2</th>\n            </tr>\n            <tr>\n              <td>Value 1</td>\n              <td>Value 2</td>\n            </tr>\n            <tr>\n              <td>Value 3</td>\n              <td>Value 4</td>\n            </tr>\n          </table>\n        </devtools-new-data-grid>`);\n    // clang-format off\n    const element = await renderDataGrid(html`\n        <devtools-new-data-grid\n            striped name=${'Display Name'}\n            .filters=${[{key: 'column-1', text: '3',  negative: false}]}>\n          <table>\n            <tr>\n              <th id=\"column-1\">Column 1</th>\n              <th id=\"column-2\">Column 2</th>\n            </tr>\n            <tr>\n              <td>Value 1</td>\n              <td>Value 2</td>\n            </tr>\n            <tr>\n              <td>Value 3</td>\n              <td>Value 4</td>\n            </tr>\n          </table>\n        </devtools-new-data-grid>`);\n    // clang-format on\n    assert.isTrue(getAccessibleText(element).startsWith('Display Name Rows: 1'));\n    sendKeydown(element, 'ArrowDown');\n    assert.strictEqual(getAccessibleText(element), 'Display Name Row  Column 1: Value 3, Column 2: Value 4');\n  });\n});\n"]}