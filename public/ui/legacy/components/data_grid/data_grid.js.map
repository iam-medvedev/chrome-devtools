{
  "version": 3,
  "sources": ["../../../../../../../../front_end/ui/legacy/components/data_grid/DataGrid.ts", "dataGrid.css.js", "../../../../../../../../front_end/ui/legacy/components/data_grid/ViewportDataGrid.ts", "../../../../../../../../front_end/ui/legacy/components/data_grid/SortableDataGrid.ts", "../../../../../../../../front_end/ui/legacy/components/data_grid/ShowMoreDataGridNode.ts", "../../../../../../../../front_end/ui/legacy/components/data_grid/DataGridElement.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *        notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *        notice, this list of conditions and the following disclaimer in the\n *        documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.         IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable rulesdir/check-license-header */\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as Host from '../../../../core/host/host.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as VisualLogging from '../../../visual_logging/visual_logging.js';\nimport * as UI from '../../legacy.js';\n\nimport dataGridStyles from './dataGrid.css.js';\nimport type {DataGridInternalToken} from './DataGridElement.js';\n\nconst UIStrings = {\n  /**\n   *@description Accessible text label for expandible nodes in datagrids\n   */\n  expanded: 'expanded',\n  /**\n   *@description accessible name for expandible nodes in datagrids\n   */\n  collapsed: 'collapsed',\n  /**\n   *@description Accessible text for datagrid\n   *@example {Coverage grid} PH1\n   *@example {expanded} PH2\n   */\n  sRowS: '{PH1} Row {PH2}',\n  /**\n   *@description Number of rows in a grid\n   *@example {1} PH1\n   */\n  rowsS: 'Rows: {PH1}',\n  /**\n   * @description Default Accessible Text for a Datagrid. This text is read to the user by a\n   * screenreader when they navigate to a table structure. The placeholders tell the user something\n   * brief about the table contents i.e. the topic and how much data is in it.\n   * @example {Network} PH1\n   * @example {Rows: 27} PH2\n   */\n  sSUseTheUpAndDownArrowKeysTo:\n      '{PH1} {PH2}, use the up and down arrow keys to navigate and interact with the rows of the table; Use browse mode to read cell by cell.',\n  /**\n   *@description A context menu item in the Data Grid of a data grid\n   */\n  sortByString: 'Sort By',\n  /**\n   *@description A context menu item in data grids to reset the columns to their default weight\n   */\n  resetColumns: 'Reset Columns',\n  /**\n   *@description A context menu item in data grids to list header options.\n   */\n  headerOptions: 'Header Options',\n  /**\n   *@description Text to refresh the page\n   */\n  refresh: 'Refresh',\n  /**\n   *@description A context menu item in the Data Grid of a data grid\n   */\n  addNew: 'Add new',\n  /**\n   *@description A context menu item in the Data Grid of a data grid\n   *@example {pattern} PH1\n   */\n  editS: 'Edit \"{PH1}\"',\n  /**\n   *@description Text to delete something\n   */\n  delete: 'Delete',\n  /**\n   *@description Depth of a node in the datagrid\n   *@example {1} PH1\n   */\n  levelS: 'level {PH1}',\n  /**\n   *@description Text exposed to screen readers on checked items.\n   */\n  checked: 'checked',\n  /**\n   *@description Accessible text indicating an empty row is created.\n   */\n  emptyRowCreated: 'An empty table row has been created. You may double click or use context menu to edit.',\n  /**\n   *@description Text for screen reader to announce when focusing on a sortable column in data grid.\n   *@example {ascending} PH1\n   */\n  enterToSort: 'Column sort state: {PH1}. Press enter to apply sorting filter',\n  /**\n   *@description Label for sortable column headers.\n   */\n  sortableColumn: 'Sortable column. Press enter to apply sorting filter',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/data_grid/DataGrid.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst elementToLongTextMap = new WeakMap<Element, string>();\n\nconst nodeToColumnIdMap = new WeakMap<Node, string>();\n\nconst elementToPreferedWidthMap = new WeakMap<Element, number>();\n\nconst elementToPositionMap = new WeakMap<Element, number>();\n\nconst elementToIndexMap = new WeakMap<Element, number>();\n\nexport class DataGridImpl<T> extends Common.ObjectWrapper.ObjectWrapper<EventTypes<T>> {\n  element: HTMLDivElement;\n  displayName: string;\n  private editCallback:\n      ((node: any, columnId: string, valueBeforeEditing: any, newText: any, moveDirection?: string) => void)|undefined;\n  deleteCallback: ((arg0: any) => void)|undefined;\n  refreshCallback: (() => void)|undefined;\n  private dataTableHeaders: Record<string, Element>;\n  scrollContainerInternal: Element;\n  private dataContainerInternal: Element;\n  private readonly dataTable: Element;\n  protected inline: boolean;\n  private columnsArray: ColumnDescriptor[];\n  columns: Record<string, ColumnDescriptor>;\n  visibleColumnsArray: ColumnDescriptor[];\n  cellClass: string|null;\n  private dataTableHeadInternal: HTMLTableSectionElement;\n  private readonly headerRow: Element;\n  private readonly dataTableColumnGroup: Element;\n  dataTableBody: Element;\n  topFillerRow: HTMLElement;\n  private bottomFillerRow: HTMLElement;\n  private editing: boolean;\n  selectedNode: DataGridNode<T>|null;\n  expandNodesWhenArrowing: boolean;\n  indentWidth: number;\n  private resizers: HTMLElement[];\n  private columnWidthsInitialized: boolean;\n  private cornerWidth: number;\n  private resizeMethod: ResizeMethod;\n  private headerContextMenuCallback: ((arg0: UI.ContextMenu.SubMenu) => void)|null;\n  private rowContextMenuCallback: ((arg0: UI.ContextMenu.ContextMenu, arg1: DataGridNode<T>) => void)|null;\n  elementToDataGridNode: WeakMap<Node, DataGridNode<T>>;\n  disclosureColumnId?: string;\n  private sortColumnCell?: Element;\n  private rootNodeInternal?: DataGridNode<T>;\n  private editingNode?: DataGridNode<T>|null;\n  private columnWeightsSetting?: Common.Settings.Setting<any>;\n  creationNode?: DataGridNode<any>;\n  private currentResizer?: EventTarget|null;\n  private dataGridWidget?: any;\n\n  constructor(dataGridParameters: Parameters) {\n    super();\n    const {displayName, columns: columnsArray, deleteCallback, refreshCallback} = dataGridParameters;\n    this.element = document.createElement('div');\n    this.element.classList.add('data-grid');\n    this.element.tabIndex = 0;\n    this.element.addEventListener('keydown', this.keyDown.bind(this), false);\n    this.element.addEventListener('contextmenu', this.contextMenu.bind(this), true);\n    this.element.addEventListener('focusin', event => {\n      this.updateGridAccessibleNameOnFocus();\n      event.consume(true);\n    });\n    this.element.addEventListener('focusout', event => {\n      event.consume(true);\n    });\n\n    UI.ARIAUtils.markAsApplication(this.element);\n    this.displayName = displayName;\n\n    this.deleteCallback = deleteCallback;\n    this.refreshCallback = refreshCallback;\n\n    this.dataTableHeaders = {};\n\n    this.dataContainerInternal = this.element.createChild('div', 'data-container');\n    this.dataTable = this.dataContainerInternal.createChild('table', 'data');\n    this.scrollContainerInternal = this.dataContainerInternal;\n\n    // FIXME: Add a createCallback which is different from editCallback and has different\n    // behavior when creating a new node.\n    this.dataTable.addEventListener('dblclick', this.ondblclick.bind(this), false);\n    this.dataTable.addEventListener('mousedown', this.mouseDownInDataTable.bind(this));\n    this.dataTable.addEventListener('click', this.clickInDataTable.bind(this), true);\n\n    this.inline = false;\n\n    this.columnsArray = [];\n    this.columns = {};\n    this.visibleColumnsArray = columnsArray;\n\n    columnsArray.forEach(column => this.innerAddColumn(column));\n\n    this.cellClass = null;\n\n    this.dataTableColumnGroup = this.dataTable.createChild('colgroup');\n\n    this.dataTableHeadInternal = this.dataTable.createChild('thead');\n    this.headerRow = this.dataTableHeadInternal.createChild('tr');\n\n    this.dataTableBody = this.dataTable.createChild('tbody');\n    this.topFillerRow = this.dataTableBody.createChild('tr', 'data-grid-filler-row revealed');\n    UI.ARIAUtils.setHidden(this.topFillerRow, true);\n    this.bottomFillerRow = this.dataTableBody.createChild('tr', 'data-grid-filler-row revealed');\n    UI.ARIAUtils.setHidden(this.bottomFillerRow, true);\n\n    this.setVerticalPadding(0, 0, true);\n    this.refreshHeader();\n\n    this.editing = false;\n    this.selectedNode = null;\n    /** Currently by default this is true to expand nodes when arrowing with keyboard. */\n    this.expandNodesWhenArrowing = true;\n    this.setRootNode(new DataGridNode<T>());\n\n    this.setHasSelection(false);\n\n    this.indentWidth = 15;\n    this.resizers = [];\n    this.columnWidthsInitialized = false;\n    this.cornerWidth = CornerWidth;\n    this.resizeMethod = ResizeMethod.NEAREST;\n\n    this.headerContextMenuCallback = null;\n    this.rowContextMenuCallback = null;\n\n    this.elementToDataGridNode = new WeakMap();\n  }\n\n  setEditCallback(\n      editCallback:\n          ((node: any, columnId: string, valueBeforeEditing: any, newText: any, moveDirection?: string) => void)|\n      undefined,\n      _internalToken: DataGridInternalToken): void {\n    this.editCallback = editCallback;\n  }\n\n  private firstSelectableNode(): DataGridNode<T>|null|undefined {\n    let firstSelectableNode: (DataGridNode<T>|undefined) = this.rootNodeInternal;\n    while (firstSelectableNode && !firstSelectableNode.selectable) {\n      firstSelectableNode = firstSelectableNode.traverseNextNode(true) || undefined;\n    }\n    return firstSelectableNode;\n  }\n\n  private lastSelectableNode(): DataGridNode<T>|undefined {\n    let lastSelectableNode: DataGridNode<T>|(DataGridNode<T>| undefined) = this.rootNodeInternal;\n    let iterator: (DataGridNode<T>|undefined) = this.rootNodeInternal;\n    while (iterator) {\n      if (iterator.selectable) {\n        lastSelectableNode = iterator;\n      }\n      iterator = iterator.traverseNextNode(true) || undefined;\n    }\n    return lastSelectableNode;\n  }\n\n  setElementContent(element: Element, value: string): void {\n    const columnId = this.columnIdFromNode(element);\n    if (!columnId) {\n      return;\n    }\n    const column = this.columns[columnId];\n    const parentElement = element.parentElement;\n    let gridNode;\n    if (parentElement) {\n      gridNode = this.elementToDataGridNode.get(parentElement);\n    }\n    if (column.dataType === DataType.BOOLEAN) {\n      DataGridImpl.setElementBoolean(element, Boolean(value), gridNode);\n    } else if (value !== null) {\n      DataGridImpl.setElementText(element, value, Boolean(column.longText), gridNode);\n    }\n  }\n\n  static setElementText(element: Element, newText: string, longText: boolean, gridNode?: DataGridNode<string>): void {\n    if (longText && newText.length > 1000) {\n      element.textContent = Platform.StringUtilities.trimEndWithMaxLength(newText, 1000);\n      UI.Tooltip.Tooltip.install(element as HTMLElement, newText);\n      elementToLongTextMap.set(element, newText);\n    } else {\n      element.textContent = newText;\n      UI.Tooltip.Tooltip.install(element as HTMLElement, '');\n      elementToLongTextMap.delete(element);\n    }\n    if (gridNode) {\n      DataGridImpl.updateNodeAccessibleText(gridNode);\n    }\n  }\n\n  static setElementBoolean(element: Element, value: boolean, gridNode?: DataGridNode<string>): void {\n    element.textContent = value ? '\\u2713' : '';\n    UI.Tooltip.Tooltip.install(element as HTMLElement, '');\n    if (gridNode) {\n      DataGridImpl.updateNodeAccessibleText(gridNode);\n    }\n  }\n\n  static updateNodeAccessibleText(gridNode: DataGridNode<string>): void {\n    let accessibleText = '';\n    let colElement: Element|null = gridNode.elementInternal?.children[0] || null;\n    if (!colElement) {\n      return;\n    }\n\n    while (colElement && !colElement.classList.contains('corner')) {\n      let columnClass = null;\n      for (const cssClass of colElement.classList) {\n        if (cssClass.includes('-column')) {\n          columnClass = cssClass.substring(0, cssClass.indexOf('-column'));\n          break;\n        }\n      }\n      if (columnClass && gridNode.dataGrid) {\n        const colName = gridNode.dataGrid.columns[columnClass];\n        if (colName) {\n          accessibleText += `${colName.title}: ${colElement.textContent}, `;\n        }\n      }\n      colElement = colElement.nextElementSibling;\n    }\n\n    if (accessibleText.length > 0) {\n      // Trim off comma and space at the end.\n      accessibleText = accessibleText.substring(0, accessibleText.length - 2);\n    }\n    gridNode.nodeAccessibleText = accessibleText;\n  }\n\n  setStriped(isStriped: boolean): void {\n    this.element.classList.toggle('striped-data-grid', isStriped);\n  }\n\n  setFocusable(focusable: boolean): void {\n    this.element.tabIndex = focusable ? 0 : -1;\n    if (focusable === false) {\n      UI.ARIAUtils.removeRole(this.element);\n    }\n  }\n\n  setHasSelection(hasSelected: boolean): void {\n    // 'no-selection' class causes datagrid to have a focus-indicator border\n    this.element.classList.toggle('no-selection', !hasSelected);\n  }\n\n  announceSelectedGridNode(): void {\n    // Only alert if the datagrid has focus\n    if (this.element === Platform.DOMUtilities.deepActiveElement(this.element.ownerDocument) &&\n        this.selectedNode?.existingElement()) {\n      // Update the expand/collapse state for the current selected node\n      let expandText;\n      if (this.selectedNode.hasChildren()) {\n        expandText = this.selectedNode.expanded ? i18nString(UIStrings.expanded) : i18nString(UIStrings.collapsed);\n      }\n      const accessibleText =\n          expandText ? `${this.selectedNode.nodeAccessibleText}, ${expandText}` : this.selectedNode.nodeAccessibleText;\n      UI.ARIAUtils.LiveAnnouncer.alert(accessibleText);\n    }\n  }\n\n  protected getNumberOfRows(): number {\n    return this.rootNodeInternal ? this.enumerateChildren(this.rootNodeInternal, [], 1).length : 0;\n  }\n\n  updateGridAccessibleNameOnFocus(): void {\n    // When a grid gets focus\n    // 1) If an item is selected - Read the content of the row\n    let accessibleText;\n    if (this.selectedNode?.existingElement()) {\n      // TODO(l10n): Don't concatenate strings.\n      let expandText = '';\n      if (this.selectedNode.hasChildren()) {\n        expandText = this.selectedNode.expanded ? i18nString(UIStrings.expanded) : i18nString(UIStrings.collapsed);\n      }\n      const rowHeader = i18nString(UIStrings.sRowS, {PH1: this.displayName, PH2: expandText});\n      accessibleText = `${rowHeader} ${this.selectedNode.nodeAccessibleText}`;\n    } else {\n      // 2) If there is no selected item - Read the name of the grid and give instructions\n      if (!this.rootNodeInternal) {\n        return;\n      }\n      const numberOfRows = this.getNumberOfRows();\n      const items = i18nString(UIStrings.rowsS, {PH1: numberOfRows});\n      accessibleText = i18nString(UIStrings.sSUseTheUpAndDownArrowKeysTo, {PH1: this.displayName, PH2: items});\n    }\n    UI.ARIAUtils.LiveAnnouncer.alert(accessibleText);\n  }\n\n  private innerAddColumn(column: ColumnDescriptor, position?: number): void {\n    column.defaultWeight = column.weight;\n\n    const columnId = column.id;\n    if (columnId in this.columns) {\n      this.innerRemoveColumn(columnId);\n    }\n\n    if (position === undefined) {\n      position = this.columnsArray.length;\n    }\n\n    this.columnsArray.splice(position, 0, column);\n    this.columns[columnId] = column;\n    if (column.disclosure) {\n      this.disclosureColumnId = columnId;\n    }\n\n    const cell = document.createElement('th');\n    cell.setAttribute(\n        'jslog',\n        `${\n            VisualLogging.tableHeader()\n                .track({click: column.sortable, resize: true})\n                .context(Platform.StringUtilities.toKebabCase(columnId))}`);\n    cell.className = columnId + '-column';\n    cell.setAttribute('tabindex', '0');\n    cell.setAttribute('role', 'columnheader');\n    nodeToColumnIdMap.set(cell, columnId);\n    this.dataTableHeaders[columnId] = cell;\n\n    const div = document.createElement('div');\n    if (column.titleDOMFragment) {\n      div.appendChild(column.titleDOMFragment);\n    } else {\n      div.textContent = column.title || null;\n    }\n    cell.appendChild(div);\n\n    if (column.sort) {\n      cell.classList.add(column.sort);\n      this.sortColumnCell = cell;\n    }\n\n    if (column.sortable) {\n      cell.addEventListener('click', this.clickInHeaderCell.bind(this), false);\n      /**\n       * For a11y reasons to allow for keyboard navigation through the table headers\n       * we additionally have a keydown event listener.\n       */\n      cell.addEventListener('keydown', this.keydownHeaderCell.bind(this), false);\n      cell.classList.add('sortable');\n      const icon = document.createElement('span');\n      icon.className = 'sort-order-icon';\n      cell.createChild('div', 'sort-order-icon-container').appendChild(icon);\n\n      if (column.title) {\n        UI.ARIAUtils.setLabel(cell, i18nString(UIStrings.sortableColumn));\n      }\n    }\n  }\n\n  addColumn(column: ColumnDescriptor, position?: number): void {\n    this.innerAddColumn(column, position);\n  }\n\n  private innerRemoveColumn(columnId: string): void {\n    const column = this.columns[columnId];\n    if (!column) {\n      return;\n    }\n    delete this.columns[columnId];\n    const index = this.columnsArray.findIndex(columnConfig => columnConfig.id === columnId);\n    this.columnsArray.splice(index, 1);\n    const cell = this.dataTableHeaders[columnId];\n    if (cell.parentElement) {\n      cell.parentElement.removeChild(cell);\n    }\n    delete this.dataTableHeaders[columnId];\n  }\n\n  removeColumn(columnId: string): void {\n    this.innerRemoveColumn(columnId);\n  }\n\n  setCellClass(cellClass: string): void {\n    this.cellClass = cellClass;\n  }\n\n  private refreshHeader(): void {\n    this.dataTableColumnGroup.removeChildren();\n    this.headerRow.removeChildren();\n    this.topFillerRow.removeChildren();\n    this.bottomFillerRow.removeChildren();\n\n    for (let i = 0; i < this.visibleColumnsArray.length; ++i) {\n      const column = this.visibleColumnsArray[i];\n      const columnId = column.id;\n      const dataColumn = this.dataTableColumnGroup.createChild('col');\n      if (column.width) {\n        dataColumn.style.width = column.width;\n      }\n      this.headerRow.appendChild(this.dataTableHeaders[columnId]);\n      const topFillerRowCell = this.topFillerRow.createChild('th', 'top-filler-td');\n      topFillerRowCell.textContent = column.title || null;\n      topFillerRowCell.scope = 'col';\n      const bottomFillerRowChild = this.bottomFillerRow.createChild('td', 'bottom-filler-td');\n      nodeToColumnIdMap.set(bottomFillerRowChild, columnId);\n    }\n\n    const headerCorner = this.headerRow.createChild('th', 'corner');\n    UI.ARIAUtils.setHidden(headerCorner, true);\n\n    const topFillerRowCornerCell = this.topFillerRow.createChild('th', 'corner');\n    topFillerRowCornerCell.classList.add('top-filler-td');\n    topFillerRowCornerCell.scope = 'col';\n\n    this.bottomFillerRow.createChild('td', 'corner').classList.add('bottom-filler-td');\n\n    this.dataTableColumnGroup.createChild('col', 'corner');\n  }\n\n  protected setVerticalPadding(top: number, bottom: number, isConstructorTime = false): void {\n    const topPx = top + 'px';\n    const bottomPx = (top || bottom) ? bottom + 'px' : 'auto';\n    if (this.topFillerRow.style.height === topPx && this.bottomFillerRow.style.height === bottomPx) {\n      return;\n    }\n    this.topFillerRow.style.height = topPx;\n    this.bottomFillerRow.style.height = bottomPx;\n    if (!isConstructorTime) {\n      this.dispatchEventToListeners(Events.PADDING_CHANGED);\n    }\n  }\n\n  protected setRootNode(rootNode: DataGridNode<T>): void {\n    if (this.rootNodeInternal) {\n      this.rootNodeInternal.removeChildren();\n      this.rootNodeInternal.dataGrid = null;\n      this.rootNodeInternal.isRoot = false;\n    }\n    this.rootNodeInternal = rootNode;\n    rootNode.isRoot = true;\n    rootNode.setHasChildren(false);\n    rootNode.expandedInternal = true;\n    rootNode.revealedInternal = true;\n    rootNode.selectable = false;\n    rootNode.dataGrid = this;\n  }\n\n  rootNode(): DataGridNode<T> {\n    let rootNode: DataGridNode<T>|(DataGridNode<T>| undefined) = this.rootNodeInternal;\n    if (!rootNode) {\n      rootNode = new DataGridNode();\n      this.setRootNode(rootNode);\n    }\n    return rootNode;\n  }\n\n  isColumnEditable(columnId: string): boolean {\n    const column = this.columns[columnId];\n    return Boolean(column && column.editable && this.editCallback);\n  }\n\n  private ondblclick(event: Event): void {\n    if (!this.editCallback || this.editing || this.editingNode) {\n      return;\n    }\n\n    const columnId = this.columnIdFromNode((event.target as Node));\n    if (!columnId || !this.isColumnEditable(columnId)) {\n      return;\n    }\n    this.startEditing((event.target as Node));\n  }\n\n  private startEditingColumnOfDataGridNode(node: DataGridNode<T>, cellIndex: number): void {\n    this.editing = true;\n    this.editingNode = node;\n    this.editingNode.select();\n\n    const editingNodeElement = this.editingNode.element();\n    if (!editingNodeElement) {\n      return;\n    }\n    const element = editingNodeElement.children[cellIndex];\n    const elementLongText = elementToLongTextMap.get(element);\n    if (elementLongText) {\n      element.textContent = elementLongText;\n    }\n    const column = this.visibleColumnsArray[cellIndex];\n    if (column.dataType === DataType.BOOLEAN) {\n      const checkboxElement = UI.UIUtils.CheckboxLabel.create(undefined, (node.data[column.id] as boolean));\n      UI.ARIAUtils.setLabel(checkboxElement, column.title || '');\n\n      let hasChanged = false;\n      checkboxElement.style.height = '100%';\n      checkboxElement.classList.add('inside-datagrid');\n      const initialValue = checkboxElement.checked;\n\n      checkboxElement.addEventListener('change', () => {\n        hasChanged = true;\n        this.editingCommitted(element, checkboxElement.checked, initialValue, undefined, 'forward');\n      }, false);\n\n      checkboxElement.addEventListener('keydown', event => {\n        if (event.key === 'Tab') {\n          event.consume(true);\n          hasChanged = true;\n          return this.editingCommitted(\n              element, checkboxElement.checked, initialValue, undefined, event.shiftKey ? 'backward' : 'forward');\n        }\n        if (event.key === ' ') {\n          event.consume(true);\n          checkboxElement.checked = !checkboxElement.checked;\n        } else if (event.key === 'Enter') {\n          event.consume(true);\n          hasChanged = true;\n          this.editingCommitted(element, checkboxElement.checked, initialValue, undefined, 'forward');\n        }\n      }, false);\n\n      checkboxElement.addEventListener('blur', () => {\n        if (hasChanged) {\n          return;\n        }\n        this.editingCommitted(element, checkboxElement.checked, checkboxElement.checked, undefined, 'next');\n      }, false);\n\n      element.innerHTML = '';\n      element.appendChild(checkboxElement);\n      checkboxElement.focus();\n    } else {\n      UI.InplaceEditor.InplaceEditor.startEditing(element, this.startEditingConfig(element));\n      const componentSelection = element.getComponentSelection();\n      if (componentSelection) {\n        componentSelection.selectAllChildren(element);\n      }\n    }\n  }\n\n  startEditingNextEditableColumnOfDataGridNode(node: DataGridNode<T>, columnIdentifier: string, inclusive?: boolean):\n      void {\n    const column = this.columns[columnIdentifier];\n    const cellIndex = this.visibleColumnsArray.indexOf(column);\n    const nextEditableColumn = this.nextEditableColumn(cellIndex, false, inclusive);\n    if (nextEditableColumn !== -1) {\n      this.startEditingColumnOfDataGridNode(node, nextEditableColumn);\n    }\n  }\n\n  private startEditing(target: Node): void {\n    const element = (UI.UIUtils.enclosingNodeOrSelfWithNodeName(target, 'td') as Element | null);\n    if (!element) {\n      return;\n    }\n\n    this.editingNode = this.dataGridNodeFromNode(target);\n    if (!this.editingNode) {\n      if (!this.creationNode) {\n        return;\n      }\n      this.editingNode = this.creationNode;\n    }\n\n    // Force editing the 1st column when editing the creation node\n    if (this.editingNode instanceof CreationDataGridNode && this.editingNode.isCreationNode) {\n      this.startEditingColumnOfDataGridNode(this.editingNode, this.nextEditableColumn(-1));\n      return;\n    }\n\n    const columnId = this.columnIdFromNode(target);\n    if (!columnId) {\n      return;\n    }\n    const column = this.columns[columnId];\n    const cellIndex = this.visibleColumnsArray.indexOf(column);\n    if (this.editingNode) {\n      this.startEditingColumnOfDataGridNode(this.editingNode, cellIndex);\n    }\n  }\n\n  renderInline(): void {\n    this.element.classList.add('inline');\n    this.cornerWidth = 0;\n    this.inline = true;\n    this.updateWidths();\n  }\n\n  private startEditingConfig(_element: Element): UI.InplaceEditor.Config<any> {\n    return new UI.InplaceEditor.Config(this.editingCommitted.bind(this), this.editingCancelled.bind(this), undefined);\n  }\n\n  private editingCommitted(\n      element: Element,\n      newText: any,\n      _oldText: string|boolean|null,\n      _context: string|undefined,\n      moveDirection: string,\n      ): void {\n    const columnId = this.columnIdFromNode(element);\n    if (!columnId) {\n      this.editingCancelled(element);\n      return;\n    }\n    const column = this.columns[columnId];\n    const cellIndex = this.visibleColumnsArray.indexOf(column);\n    if (!this.editingNode) {\n      return;\n    }\n    const valueBeforeEditing = this.editingNode.data[columnId];\n    const currentEditingNode = this.editingNode;\n\n    function moveToNextIfNeeded(this: DataGridImpl<T>, wasChange: boolean): void {\n      if (!moveDirection) {\n        return;\n      }\n\n      if (moveDirection === 'forward') {\n        const firstEditableColumn = this.nextEditableColumn(-1);\n        const isCreationNode = currentEditingNode instanceof CreationDataGridNode && currentEditingNode.isCreationNode;\n        if (isCreationNode && cellIndex === firstEditableColumn && !wasChange) {\n          return;\n        }\n\n        const nextEditableColumn = this.nextEditableColumn(cellIndex);\n        if (nextEditableColumn !== -1) {\n          this.startEditingColumnOfDataGridNode(currentEditingNode, nextEditableColumn);\n          return;\n        }\n\n        const nextDataGridNode = currentEditingNode.traverseNextNode(true, null, true);\n        if (nextDataGridNode) {\n          this.startEditingColumnOfDataGridNode(nextDataGridNode, firstEditableColumn);\n          return;\n        }\n        if (isCreationNode && wasChange && this.creationNode) {\n          this.addCreationNode(false);\n          this.startEditingColumnOfDataGridNode(this.creationNode, firstEditableColumn);\n          return;\n        }\n        return;\n      }\n\n      if (moveDirection === 'backward') {\n        const prevEditableColumn = this.nextEditableColumn(cellIndex, true);\n        if (prevEditableColumn !== -1) {\n          this.startEditingColumnOfDataGridNode(currentEditingNode, prevEditableColumn);\n          return;\n        }\n\n        const lastEditableColumn = this.nextEditableColumn(this.visibleColumnsArray.length, true);\n        const nextDataGridNode = currentEditingNode.traversePreviousNode(true, true);\n        if (nextDataGridNode) {\n          this.startEditingColumnOfDataGridNode(nextDataGridNode, lastEditableColumn);\n        }\n        return;\n      }\n    }\n\n    // Show trimmed text after editing.\n    this.setElementContent(element, newText);\n\n    if (valueBeforeEditing === newText) {\n      this.editingCancelled(element);\n      moveToNextIfNeeded.call(this, false);\n      return;\n    }\n\n    // Update the text in the datagrid that we typed\n    this.editingNode.data[columnId] = newText;\n    if (!this.editCallback) {\n      return;\n    }\n    // Make the callback - expects an editing node (table row), the column number that is being edited,\n    // the text that used to be there, and the new text.\n    this.editCallback(this.editingNode, columnId, valueBeforeEditing, newText, moveDirection);\n\n    if (this.editingNode instanceof CreationDataGridNode && this.editingNode.isCreationNode) {\n      this.addCreationNode(false);\n    }\n\n    this.editingCancelled(element);\n    moveToNextIfNeeded.call(this, true);\n  }\n\n  private editingCancelled(_element: Element): void {\n    this.editing = false;\n    this.editingNode = null;\n  }\n\n  private nextEditableColumn(cellIndex: number, moveBackward?: boolean, inclusive?: boolean): number {\n    const increment = moveBackward ? -1 : 1;\n    const start = inclusive ? cellIndex : cellIndex + increment;\n    const columns = this.visibleColumnsArray;\n    for (let i = start; (i >= 0) && (i < columns.length); i += increment) {\n      if (this.isColumnEditable(columns[i].id)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  sortColumnId(): string|null {\n    if (!this.sortColumnCell) {\n      return null;\n    }\n    return nodeToColumnIdMap.get(this.sortColumnCell) || null;\n  }\n\n  sortOrder(): string|null {\n    if (!this.sortColumnCell || this.sortColumnCell.classList.contains(Order.Ascending)) {\n      return Order.Ascending;\n    }\n    if (this.sortColumnCell.classList.contains(Order.Descending)) {\n      return Order.Descending;\n    }\n    return null;\n  }\n\n  isSortOrderAscending(): boolean {\n    return !this.sortColumnCell || this.sortColumnCell.classList.contains(Order.Ascending);\n  }\n\n  private autoSizeWidths(widths: number[], minPercent: number, maxPercent?: number): number[] {\n    if (minPercent) {\n      minPercent = Math.min(minPercent, Math.floor(100 / widths.length));\n    }\n    let totalWidth = 0;\n    for (let i = 0; i < widths.length; ++i) {\n      totalWidth += widths[i];\n    }\n    let totalPercentWidth = 0;\n    for (let i = 0; i < widths.length; ++i) {\n      let width = Math.round(100 * widths[i] / totalWidth);\n      if (minPercent && width < minPercent) {\n        width = minPercent;\n      } else if (maxPercent && width > maxPercent) {\n        width = maxPercent;\n      }\n      totalPercentWidth += width;\n      widths[i] = width;\n    }\n    let recoupPercent = totalPercentWidth - 100;\n\n    while (minPercent && recoupPercent > 0) {\n      for (let i = 0; i < widths.length; ++i) {\n        if (widths[i] > minPercent) {\n          --widths[i];\n          --recoupPercent;\n          if (!recoupPercent) {\n            break;\n          }\n        }\n      }\n    }\n\n    while (maxPercent && recoupPercent < 0) {\n      for (let i = 0; i < widths.length; ++i) {\n        if (widths[i] < maxPercent) {\n          ++widths[i];\n          ++recoupPercent;\n          if (!recoupPercent) {\n            break;\n          }\n        }\n      }\n    }\n\n    return widths;\n  }\n\n  /**\n   * The range of |minPercent| and |maxPercent| is [0, 100].\n   *\n   * FYI: Only used in test: chromium/src/third_party/blink/web_tests/http/tests/devtools/components/datagrid.js\n   */\n  autoSizeColumns(minPercent: number, maxPercent?: number, maxDescentLevel?: number): void {\n    let widths: number[] = [];\n    for (let i = 0; i < this.columnsArray.length; ++i) {\n      widths.push((this.columnsArray[i].title || '').length);\n    }\n\n    maxDescentLevel = maxDescentLevel || 0;\n    if (!this.rootNodeInternal) {\n      return;\n    }\n    const children = this.enumerateChildren(this.rootNodeInternal, [], maxDescentLevel + 1);\n    for (let i = 0; i < children.length; ++i) {\n      const node = children[i];\n      for (let j = 0; j < this.columnsArray.length; ++j) {\n        const text = String(node.data[this.columnsArray[j].id]);\n        if (text.length > widths[j]) {\n          widths[j] = text.length;\n        }\n      }\n    }\n\n    widths = this.autoSizeWidths(widths, minPercent, maxPercent);\n\n    for (let i = 0; i < this.columnsArray.length; ++i) {\n      this.columnsArray[i].weight = widths[i];\n    }\n    this.columnWidthsInitialized = false;\n    this.updateWidths();\n  }\n\n  private enumerateChildren(rootNode: DataGridNode<T>, result: Array<DataGridNode<T>>, maxLevel: number):\n      Array<DataGridNode<T>> {\n    if (!rootNode.isRoot) {\n      result.push(rootNode);\n    }\n    if (!maxLevel) {\n      return [];\n    }\n    for (let i = 0; i < rootNode.children.length; ++i) {\n      this.enumerateChildren(rootNode.children[i], result, maxLevel - 1);\n    }\n    return result;\n  }\n\n  onResize(): void {\n    this.updateWidths();\n  }\n\n  // Updates the widths of the table, including the positions of the column\n  // resizers.\n  //\n  // IMPORTANT: This function MUST be called once after the element of the\n  // DataGrid is attached to its parent element and every subsequent time the\n  // width of the parent element is changed in order to make it possible to\n  // resize the columns.\n  //\n  // If this function is not called after the DataGrid is attached to its\n  // parent element, then the DataGrid's columns will not be resizable.\n  updateWidths(): void {\n    // Do not attempt to use offsetes if we're not attached to the document tree yet.\n    if (!this.columnWidthsInitialized && this.element.offsetWidth) {\n      // Give all the columns initial widths now so that during a resize,\n      // when the two columns that get resized get a percent value for\n      // their widths, all the other columns already have percent values\n      // for their widths.\n\n      // Use container size to avoid changes of table width caused by change of column widths.\n      const tableWidth = this.element.offsetWidth - this.cornerWidth;\n      const cells = this.dataTableHeadInternal.rows[0].cells;\n      const numColumns = cells.length - 1;  // Do not process corner column.\n      for (let i = 0; i < numColumns; i++) {\n        const column = this.visibleColumnsArray[i];\n        if (!column.weight) {\n          column.weight = 100 * this.getPreferredWidth(i) / tableWidth || 10;\n        }\n      }\n      this.columnWidthsInitialized = true;\n    }\n    this.applyColumnWeights();\n  }\n\n  indexOfVisibleColumn(columnId: string): number {\n    return this.visibleColumnsArray.findIndex(column => column.id === columnId);\n  }\n\n  setName(name: string): void {\n    this.columnWeightsSetting =\n        Common.Settings.Settings.instance().createSetting('data-grid-' + name + '-column-weights', {});\n    this.loadColumnWeights();\n  }\n\n  private resetColumnWeights(): void {\n    for (const column of this.columnsArray) {\n      if (!column.defaultWeight) {\n        continue;\n      }\n      column.weight = column.defaultWeight;\n    }\n    this.applyColumnWeights();\n    this.saveColumnWeights();\n  }\n\n  private loadColumnWeights(): void {\n    if (!this.columnWeightsSetting) {\n      return;\n    }\n    const weights = this.columnWeightsSetting.get();\n    for (let i = 0; i < this.columnsArray.length; ++i) {\n      const column = this.columnsArray[i];\n      const weight = weights[column.id];\n      if (weight) {\n        column.weight = weight;\n      }\n    }\n    this.applyColumnWeights();\n  }\n\n  private saveColumnWeights(): void {\n    if (!this.columnWeightsSetting) {\n      return;\n    }\n    const weights: Record<string, any> = {};\n    for (let i = 0; i < this.columnsArray.length; ++i) {\n      const column = this.columnsArray[i];\n      weights[column.id] = column.weight;\n    }\n    this.columnWeightsSetting.set(weights);\n  }\n\n  wasShown(): void {\n    this.loadColumnWeights();\n  }\n\n  willHide(): void {\n  }\n\n  private getPreferredWidth(columnIndex: number): number {\n    return elementToPreferedWidthMap.get(this.dataTableColumnGroup.children[columnIndex]) ||\n        this.dataTableHeadInternal.rows[0].cells[columnIndex].offsetWidth;\n  }\n\n  private applyColumnWeights(): void {\n    // Subtract 1 to prevent unnecessary overflow in x-axis\n    let tableWidth = this.element.offsetWidth - this.cornerWidth - 1;\n    if (tableWidth <= 0) {\n      return;\n    }\n\n    let sumOfWeights = 0.0;\n    const fixedColumnWidths = [];\n    for (let i = 0; i < this.visibleColumnsArray.length; ++i) {\n      const column = this.visibleColumnsArray[i];\n      if (column.fixedWidth) {\n        const width = this.getPreferredWidth(i);\n        fixedColumnWidths[i] = width;\n        tableWidth -= width;\n      } else {\n        sumOfWeights += (this.visibleColumnsArray[i].weight || 0);\n      }\n    }\n    let sum = 0;\n    let lastOffset = 0;\n    const minColumnWidth = ColumnResizePadding;  // px\n\n    for (let i = 0; i < this.visibleColumnsArray.length; ++i) {\n      const column = this.visibleColumnsArray[i];\n      let width;\n      if (column.fixedWidth) {\n        width = fixedColumnWidths[i];\n      } else {\n        sum += (column.weight || 0);\n        const offset = (sum * tableWidth / sumOfWeights) | 0;\n        width = Math.max(offset - lastOffset, minColumnWidth);\n        lastOffset = offset;\n      }\n      this.setPreferredWidth(i, width);\n    }\n\n    this.positionResizers();\n  }\n\n  setColumnsVisibility(columnsVisibility: Set<string>): void {\n    this.visibleColumnsArray = [];\n    for (const column of this.columnsArray) {\n      if (columnsVisibility.has(column.id)) {\n        this.visibleColumnsArray.push(column);\n      }\n    }\n    this.refreshHeader();\n    this.applyColumnWeights();\n    const nodes = this.enumerateChildren(this.rootNode(), [], -1);\n    for (const node of nodes) {\n      node.refresh();\n    }\n  }\n\n  get scrollContainer(): HTMLElement {\n    return this.scrollContainerInternal as HTMLElement;\n  }\n\n  private positionResizers(): void {\n    const headerTableColumns = this.dataTableColumnGroup.children;\n    const numColumns = headerTableColumns.length - 1;  // Do not process corner column.\n    const left: number[] = [];\n    const resizers = this.resizers;\n\n    while (resizers.length > numColumns - 1) {\n      const resizer = resizers.pop();\n      if (resizer) {\n        resizer.remove();\n      }\n    }\n\n    for (let i = 0; i < numColumns - 1; i++) {\n      // Get the width of the cell in the first (and only) row of the\n      // header table in order to determine the width of the column, since\n      // it is not possible to query a column for its width.\n      left[i] = (left[i - 1] || 0) + this.dataTableHeadInternal.rows[0].cells[i].offsetWidth;\n    }\n\n    // Make n - 1 resizers for n columns.\n    for (let i = 0; i < numColumns - 1; i++) {\n      let resizer: HTMLDivElement|HTMLElement = resizers[i];\n      if (!resizer) {\n        // This is the first call to updateWidth, so the resizers need\n        // to be created.\n        resizer = document.createElement('div');\n        elementToIndexMap.set(resizer, i);\n        resizer.classList.add('data-grid-resizer');\n        // This resizer is associated with the column to its right.\n        UI.UIUtils.installDragHandle(\n            resizer, this.startResizerDragging.bind(this), this.resizerDragging.bind(this),\n            this.endResizerDragging.bind(this), 'col-resize');\n        this.element.appendChild(resizer);\n        resizers.push((resizer as HTMLElement));\n      }\n      if (elementToPositionMap.get(resizer) !== left[i]) {\n        elementToPositionMap.set(resizer, left[i]);\n        resizer.style.left = left[i] + 'px';\n      }\n    }\n  }\n\n  addCreationNode(hasChildren?: boolean): void {\n    if (this.creationNode) {\n      this.creationNode.isCreationNode = false;\n    }\n    const emptyData: Record<string, any> = {};\n    for (const column in this.columns) {\n      emptyData[column] = null;\n    }\n    this.creationNode = new CreationDataGridNode(emptyData, hasChildren);\n    UI.ARIAUtils.LiveAnnouncer.alert(i18nString(UIStrings.emptyRowCreated));\n    this.rootNode().appendChild(this.creationNode);\n  }\n\n  private keyDown(event: Event): void {\n    if (!(event instanceof KeyboardEvent)) {\n      return;\n    }\n    if (this.selectedNode) {\n      if ((this.selectedNode.element() as HTMLElement).tabIndex < 0) {\n        void VisualLogging.logKeyDown(this.selectedNode.element(), event);\n      }\n    }\n\n    if (event.shiftKey || event.metaKey || event.ctrlKey || this.editing || UI.UIUtils.isEditing()) {\n      return;\n    }\n\n    let handled = false;\n    let nextSelectedNode;\n    if (!this.selectedNode) {\n      // Select the first or last node based on the arrow key direction\n      if (event.key === 'ArrowUp' && !event.altKey) {\n        nextSelectedNode = this.lastSelectableNode();\n      } else if (event.key === 'ArrowDown' && !event.altKey) {\n        nextSelectedNode = this.firstSelectableNode();\n      }\n      handled = nextSelectedNode ? true : false;\n    } else if (event.key === 'ArrowUp' && !event.altKey) {\n      nextSelectedNode = this.selectedNode.traversePreviousNode(true);\n      while (nextSelectedNode && !nextSelectedNode.selectable) {\n        nextSelectedNode = nextSelectedNode.traversePreviousNode(true);\n      }\n      handled = nextSelectedNode ? true : false;\n    } else if (event.key === 'ArrowDown' && !event.altKey) {\n      nextSelectedNode = this.selectedNode.traverseNextNode(true);\n      while (nextSelectedNode && !nextSelectedNode.selectable) {\n        nextSelectedNode = nextSelectedNode.traverseNextNode(true);\n      }\n      handled = nextSelectedNode ? true : false;\n    } else if (event.key === 'ArrowLeft') {\n      if (this.selectedNode.expanded) {\n        if (event.altKey) {\n          this.selectedNode.collapseRecursively();\n        } else {\n          this.selectedNode.collapse();\n        }\n        handled = true;\n      } else if (this.selectedNode.parent && !this.selectedNode.parent.isRoot) {\n        handled = true;\n        if (this.selectedNode.parent.selectable) {\n          nextSelectedNode = this.selectedNode.parent;\n          handled = nextSelectedNode ? true : false;\n        } else if (this.selectedNode.parent) {\n          this.selectedNode.parent.collapse();\n        }\n      }\n    } else if (event.key === 'ArrowRight') {\n      /** We do not want to expand if this setting is disabled. */\n      if (!this.expandNodesWhenArrowing) {\n        return;\n      }\n      if (!this.selectedNode.revealed) {\n        this.selectedNode.reveal();\n        handled = true;\n      } else if (this.selectedNode.hasChildren()) {\n        handled = true;\n        if (this.selectedNode.expanded) {\n          nextSelectedNode = this.selectedNode.children[0];\n          handled = nextSelectedNode ? true : false;\n        } else if (event.altKey) {\n          this.selectedNode.expandRecursively();\n        } else {\n          this.selectedNode.expand();\n        }\n      }\n    } else if (event.keyCode === 8 || event.keyCode === 46) {\n      if (this.deleteCallback) {\n        handled = true;\n        this.deleteCallback(this.selectedNode);\n      }\n    } else if (event.key === 'Enter') {\n      if (this.editCallback) {\n        handled = true;\n        const selectedNodeElement = this.selectedNode.element();\n        if (!selectedNodeElement) {\n          return;\n        }\n        this.startEditing(selectedNodeElement.children[this.nextEditableColumn(-1)]);\n      } else {\n        this.dispatchEventToListeners(Events.OPENED_NODE, this.selectedNode);\n      }\n    }\n\n    if (nextSelectedNode) {\n      nextSelectedNode.reveal();\n      nextSelectedNode.select();\n    }\n\n    const activeElement = (Platform.DOMUtilities.deepActiveElement(this.element.ownerDocument) as HTMLElement | null);\n    if (handled && this.element !== activeElement && !this.element.contains(activeElement)) {\n      // crbug.com/1005449, crbug.com/1329956\n      // navigational or delete keys pressed but current DataGrid panel has lost focus;\n      // re-focus to ensure subsequent keydowns can be registered within this DataGrid\n      this.element.focus();\n    }\n\n    if (handled) {\n      event.consume(true);\n    }\n  }\n\n  updateSelectionBeforeRemoval(root: DataGridNode<T>|null, _onlyAffectsSubtree: boolean): void {\n    let ancestor: (DataGridNode<T>|null) = this.selectedNode;\n    while (ancestor && ancestor !== root) {\n      ancestor = ancestor.parent;\n    }\n    // Selection is not in the subtree being deleted.\n    if (!ancestor) {\n      return;\n    }\n\n    let nextSelectedNode;\n    // Skip subtree being deleted when looking for the next selectable node.\n    ancestor = root;\n    while (ancestor && !ancestor.nextSibling) {\n      ancestor = ancestor.parent;\n    }\n    if (ancestor) {\n      nextSelectedNode = ancestor.nextSibling;\n    }\n    while (nextSelectedNode && !nextSelectedNode.selectable) {\n      nextSelectedNode = nextSelectedNode.traverseNextNode(true);\n    }\n    if (!nextSelectedNode || nextSelectedNode.isCreationNode) {\n      if (!root) {\n        return;\n      }\n      nextSelectedNode = root.traversePreviousNode(true);\n      while (nextSelectedNode && !nextSelectedNode.selectable) {\n        nextSelectedNode = nextSelectedNode.traversePreviousNode(true);\n      }\n    }\n    if (nextSelectedNode) {\n      nextSelectedNode.reveal();\n      nextSelectedNode.select();\n    } else if (this.selectedNode) {\n      this.selectedNode.deselect();\n    }\n  }\n\n  dataGridNodeFromNode(target: Node): DataGridNode<T>|null {\n    const rowElement = UI.UIUtils.enclosingNodeOrSelfWithNodeName(target, 'tr');\n    return (rowElement && this.elementToDataGridNode.get(rowElement)) || null;\n  }\n\n  columnIdFromNode(target: Node): string|null {\n    const cellElement = UI.UIUtils.enclosingNodeOrSelfWithNodeName(target, 'td');\n    return (cellElement && nodeToColumnIdMap.get(cellElement)) || null;\n  }\n\n  /**\n   * Mark the data-grid as inert, meaning that it will not capture any user interactions.\n   * Useful in some panels where the empty state is actually an absolutely\n   * positioned div put over the panel, and in that case we need to ensure the\n   * hidden, empty data grid, does not capture any user interaction - in particular if they tab through the UI.\n   */\n  setInert(isInert: boolean): void {\n    if (isInert) {\n      this.element.setAttribute('inert', 'inert');\n    } else {\n      this.element.removeAttribute('inert');\n    }\n  }\n\n  private clickInHeaderCell(event: Event): void {\n    const cell = UI.UIUtils.enclosingNodeOrSelfWithNodeName((event.target as Node), 'th');\n    if (!cell) {\n      return;\n    }\n    this.sortByColumnHeaderCell((cell as HTMLElement));\n  }\n\n  private keydownHeaderCell(event: KeyboardEvent): void {\n    if (event.key === 'Enter' || event.key === ' ') {\n      this.clickInHeaderCell(event);\n    }\n  }\n\n  /**\n   * Sorts by column header cell.\n   * Additionally applies the aria-sort label to a column's th.\n   * Guidance on values of attribute taken from\n   * https://www.w3.org/TR/wai-aria-practices/examples/grid/dataGrids.html.\n   */\n  private sortByColumnHeaderCell(cell: Element): void {\n    if (!nodeToColumnIdMap.has(cell) || !cell.classList.contains('sortable')) {\n      return;\n    }\n\n    let sortOrder = Order.Ascending;\n    if ((cell === this.sortColumnCell) && this.isSortOrderAscending()) {\n      sortOrder = Order.Descending;\n    }\n\n    if (this.sortColumnCell) {\n      this.sortColumnCell.classList.remove(Order.Ascending, Order.Descending);\n      this.sortColumnCell.removeAttribute('aria-sort');\n    }\n    this.sortColumnCell = cell;\n\n    cell.classList.add(sortOrder);\n    const ariaLabel = this.isSortOrderAscending() ? 'ascending' : 'descending';\n    cell.setAttribute('aria-sort', ariaLabel);\n    UI.ARIAUtils.LiveAnnouncer.alert(i18nString(UIStrings.enterToSort, {PH1: ariaLabel || ''}));\n\n    this.dispatchEventToListeners(Events.SORTING_CHANGED);\n  }\n\n  markColumnAsSortedBy(columnId: string, sortOrder: Order): void {\n    if (this.sortColumnCell) {\n      this.sortColumnCell.classList.remove(Order.Ascending, Order.Descending);\n    }\n    this.sortColumnCell = this.dataTableHeaders[columnId];\n    this.sortColumnCell.classList.add(sortOrder);\n  }\n\n  headerTableHeader(columnId: string): Element {\n    return this.dataTableHeaders[columnId];\n  }\n\n  private mouseDownInDataTable(event: Event): void {\n    const target = (event.target as Node);\n    const gridNode = this.dataGridNodeFromNode(target);\n    if (!gridNode || !gridNode.selectable || gridNode.isEventWithinDisclosureTriangle((event as MouseEvent))) {\n      return;\n    }\n\n    const columnId = this.columnIdFromNode(target);\n    if (columnId && this.columns[columnId].nonSelectable) {\n      return;\n    }\n\n    /**\n     * Support Meta-Click (Cmd/Alt) or Ctrl-Click to toggle; if the row is\n     * selected we will then deselect it. You might think: why do we even gate\n     * this behind an additional key?\n     * Well, we tried to change that, but there are instances where we have\n     * multiple click handlers on a row, and so we cannot rely on select() only\n     * being called once. Sometimes by the time this event listener gets called,\n     * another click() handler has already marked this node as selected, so if\n     * we deselect it here, we are making the user unable to actually select a\n     * node. See crbug.com/409474445 for some cotext\n     */\n    const mouseEvent = event as MouseEvent;\n    const modifier = Host.Platform.platform() === 'mac' ? mouseEvent.metaKey : mouseEvent.ctrlKey;\n    if (modifier) {\n      if (gridNode.selected) {\n        gridNode.deselect();\n      } else {\n        gridNode.select();\n      }\n    } else {\n      gridNode.select();\n      this.dispatchEventToListeners(Events.OPENED_NODE, gridNode);\n    }\n  }\n\n  setHeaderContextMenuCallback(callback: ((arg0: UI.ContextMenu.SubMenu) => void)|null): void {\n    this.headerContextMenuCallback = callback;\n  }\n\n  setRowContextMenuCallback(callback: ((arg0: UI.ContextMenu.ContextMenu, arg1: DataGridNode<T>) => void)|null): void {\n    this.rowContextMenuCallback = callback;\n  }\n\n  private contextMenu(event: Event): void {\n    if (!(event instanceof MouseEvent)) {\n      return;\n    }\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    const target = (event.target as Node);\n\n    const sortableVisibleColumns = this.visibleColumnsArray.filter(column => {\n      return (column.sortable && column.title);\n    });\n\n    const sortableHiddenColumns = this.columnsArray.filter(\n        column => sortableVisibleColumns.indexOf(column) === -1 && column.allowInSortByEvenWhenHidden);\n\n    const sortableColumns = [...sortableVisibleColumns, ...sortableHiddenColumns];\n    if (sortableColumns.length > 0) {\n      const sortMenu =\n          contextMenu.defaultSection().appendSubMenuItem(i18nString(UIStrings.sortByString), false, 'sort-by');\n      for (const column of sortableColumns) {\n        const headerCell = this.dataTableHeaders[column.id];\n        sortMenu.defaultSection().appendItem(\n            (column.title as string), this.sortByColumnHeaderCell.bind(this, headerCell), {\n              jslogContext: Platform.StringUtilities.toKebabCase(column.id),\n            });\n      }\n    }\n\n    if (target.isSelfOrDescendant(this.dataTableHeadInternal)) {\n      if (this.headerContextMenuCallback) {\n        this.headerContextMenuCallback(contextMenu);\n      }\n      contextMenu.defaultSection().appendItem(\n          i18nString(UIStrings.resetColumns), this.resetColumnWeights.bind(this), {jslogContext: 'reset-columns'});\n      void contextMenu.show();\n      return;\n    }\n\n    // Add header context menu to a subsection available from the body\n    const headerSubMenu =\n        contextMenu.defaultSection().appendSubMenuItem(i18nString(UIStrings.headerOptions), false, 'header-options');\n    if (this.headerContextMenuCallback) {\n      this.headerContextMenuCallback(headerSubMenu);\n    }\n    headerSubMenu.defaultSection().appendItem(\n        i18nString(UIStrings.resetColumns), this.resetColumnWeights.bind(this), {jslogContext: 'reset-columns'});\n\n    const isContextMenuKey = (event.button === 0);\n    const gridNode = isContextMenuKey ? this.selectedNode : this.dataGridNodeFromNode(target);\n    const selectedNodeElement = this.selectedNode?.existingElement();\n    if (isContextMenuKey && selectedNodeElement) {\n      const boundingRowRect = selectedNodeElement.getBoundingClientRect();\n      if (boundingRowRect) {\n        const x = (boundingRowRect.right + boundingRowRect.left) / 2;\n        const y = (boundingRowRect.bottom + boundingRowRect.top) / 2;\n        contextMenu.setX(x);\n        contextMenu.setY(y);\n      }\n    }\n    if (this.refreshCallback && (!gridNode || gridNode !== this.creationNode)) {\n      contextMenu.defaultSection().appendItem(\n          i18nString(UIStrings.refresh), this.refreshCallback.bind(this), {jslogContext: 'refresh'});\n    }\n\n    if (gridNode && gridNode.selectable && !gridNode.isEventWithinDisclosureTriangle(event)) {\n      if (this.editCallback) {\n        if (gridNode === this.creationNode) {\n          const firstEditColumnIndex = this.nextEditableColumn(-1);\n          const tableCellElement = gridNode.element().children[firstEditColumnIndex];\n          contextMenu.defaultSection().appendItem(\n              i18nString(UIStrings.addNew), this.startEditing.bind(this, tableCellElement), {jslogContext: 'add-new'});\n        } else if (isContextMenuKey) {\n          const firstEditColumnIndex = this.nextEditableColumn(-1);\n          if (firstEditColumnIndex > -1) {\n            const firstColumn = this.visibleColumnsArray[firstEditColumnIndex];\n            if (firstColumn && this.isColumnEditable(firstColumn.id)) {\n              contextMenu.defaultSection().appendItem(\n                  i18nString(UIStrings.editS, {PH1: String(firstColumn.title)}),\n                  this.startEditingColumnOfDataGridNode.bind(this, gridNode, firstEditColumnIndex),\n                  {jslogContext: 'edit'});\n            }\n          }\n        } else {\n          const columnId = this.columnIdFromNode(target);\n          if (columnId && this.isColumnEditable(columnId)) {\n            contextMenu.defaultSection().appendItem(\n                i18nString(UIStrings.editS, {PH1: String(this.columns[columnId].title)}),\n                this.startEditing.bind(this, target), {jslogContext: 'edit'});\n          }\n        }\n      }\n      if (this.deleteCallback && gridNode !== this.creationNode) {\n        contextMenu.defaultSection().appendItem(\n            i18nString(UIStrings.delete), this.deleteCallback.bind(this, gridNode), {jslogContext: 'delete'});\n      }\n      if (this.rowContextMenuCallback) {\n        this.rowContextMenuCallback(contextMenu, gridNode);\n      }\n    }\n\n    void contextMenu.show();\n  }\n\n  private clickInDataTable(event: Event): void {\n    const gridNode = this.dataGridNodeFromNode((event.target as Node));\n    if (!gridNode || !gridNode.hasChildren() || !gridNode.isEventWithinDisclosureTriangle((event as MouseEvent))) {\n      return;\n    }\n\n    if (gridNode.expanded) {\n      if ((event as MouseEvent).altKey) {\n        gridNode.collapseRecursively();\n      } else {\n        gridNode.collapse();\n      }\n    } else if ((event as MouseEvent).altKey) {\n      gridNode.expandRecursively();\n    } else {\n      gridNode.expand();\n    }\n  }\n\n  setResizeMethod(method: ResizeMethod): void {\n    this.resizeMethod = method;\n  }\n\n  private startResizerDragging(event: Event): boolean {\n    this.currentResizer = event.target;\n    return true;\n  }\n\n  private endResizerDragging(): void {\n    this.currentResizer = null;\n    this.saveColumnWeights();\n  }\n\n  private resizerDragging(event: MouseEvent): void {\n    const resizer = (this.currentResizer as HTMLElement);\n    if (!resizer) {\n      return;\n    }\n\n    // Constrain the dragpoint to be within the containing div of the\n    // datagrid.\n    let dragPoint: number = event.clientX - this.element.getBoundingClientRect().left;\n    let leftEdgeOfPreviousColumn = 0;\n    // Constrain the dragpoint to be within the space made up by the\n    // column directly to the left and the column directly to the right.\n    let leftCellIndex = elementToIndexMap.get(resizer);\n    if (leftCellIndex === undefined) {\n      return;\n    }\n    let rightCellIndex: number = leftCellIndex + 1;\n    for (let i = 0; i < leftCellIndex; i++) {\n      leftEdgeOfPreviousColumn += this.getPreferredWidth(i);\n    }\n\n    // Differences for other resize methods\n    if (this.resizeMethod === ResizeMethod.LAST) {\n      rightCellIndex = this.resizers.length;\n    } else if (this.resizeMethod === ResizeMethod.FIRST) {\n      leftEdgeOfPreviousColumn += this.getPreferredWidth(leftCellIndex) - this.getPreferredWidth(0);\n      leftCellIndex = 0;\n    }\n\n    const rightEdgeOfNextColumn =\n        leftEdgeOfPreviousColumn + this.getPreferredWidth(leftCellIndex) + this.getPreferredWidth(rightCellIndex);\n\n    // Give each column some padding so that they don't disappear.\n    const leftMinimum = leftEdgeOfPreviousColumn + ColumnResizePadding;\n    const rightMaximum = rightEdgeOfNextColumn - ColumnResizePadding;\n    if (leftMinimum > rightMaximum) {\n      return;\n    }\n\n    dragPoint = Platform.NumberUtilities.clamp(dragPoint, leftMinimum, rightMaximum);\n\n    const position = (dragPoint - CenterResizerOverBorderAdjustment);\n    elementToPositionMap.set(resizer, position);\n    resizer.style.left = position + 'px';\n\n    this.setPreferredWidth(leftCellIndex, dragPoint - leftEdgeOfPreviousColumn);\n    this.setPreferredWidth(rightCellIndex, rightEdgeOfNextColumn - dragPoint);\n\n    const leftColumn = this.visibleColumnsArray[leftCellIndex];\n    const rightColumn = this.visibleColumnsArray[rightCellIndex];\n    if (leftColumn.weight && rightColumn.weight) {\n      const sumOfWeights = leftColumn.weight + rightColumn.weight;\n      const delta = rightEdgeOfNextColumn - leftEdgeOfPreviousColumn;\n      leftColumn.weight = (dragPoint - leftEdgeOfPreviousColumn) * sumOfWeights / delta;\n      rightColumn.weight = (rightEdgeOfNextColumn - dragPoint) * sumOfWeights / delta;\n    }\n\n    this.positionResizers();\n    this.updateWidths();\n    event.preventDefault();\n  }\n\n  private setPreferredWidth(columnIndex: number, width: number): void {\n    const dataTableChildElement = (this.dataTableColumnGroup.children[columnIndex] as HTMLElement);\n    elementToPreferedWidthMap.set(dataTableChildElement, width);\n    dataTableChildElement.style.width = width + 'px';\n  }\n\n  columnOffset(columnId: string): number {\n    if (!this.element.offsetWidth) {\n      return 0;\n    }\n    for (let i = 1; i < this.visibleColumnsArray.length; ++i) {\n      if (columnId === this.visibleColumnsArray[i].id) {\n        if (this.resizers[i - 1]) {\n          return elementToPositionMap.get(this.resizers[i - 1]) || 0;\n        }\n      }\n    }\n    return 0;\n  }\n\n  asWidget(element?: HTMLElement): DataGridWidget<T> {\n    if (!this.dataGridWidget) {\n      this.dataGridWidget = new DataGridWidget(this, element);\n    }\n    return this.dataGridWidget;\n  }\n\n  topFillerRowElement(): HTMLElement {\n    return this.topFillerRow;\n  }\n\n  // Note on the following methods:\n  // The header row is a child of the scrollable container, and uses position: sticky\n  // so it can visually obscure other elements below it in the grid. We need to manually\n  // subtract the header's height when calculating the actual client area in which\n  // data rows are visible. However, if a caller has set a different scroll container\n  // then we report 0 height and the caller is expected to ensure their chosen scroll\n  // container's height matches the visible scrollable data area as seen by the user.\n\n  protected headerHeightInScroller(): number {\n    return this.scrollContainer === this.dataContainerInternal ? this.headerHeight() : 0;\n  }\n\n  headerHeight(): number {\n    return this.dataTableHeadInternal.offsetHeight;\n  }\n\n  revealNode(element: HTMLElement): void {\n    element.scrollIntoViewIfNeeded(false);\n    // The header row is a child of the scrollable container, and uses position: sticky\n    // so scrollIntoViewIfNeeded may place the element behind it. If the element is\n    // obscured by the header, adjust the scrollTop so that the element is fully revealed.\n    if (element.offsetTop - this.scrollContainer.scrollTop < this.headerHeight()) {\n      this.scrollContainer.scrollTop = element.offsetTop - this.headerHeight();\n    }\n  }\n}\n\n// Keep in sync with .data-grid col.corner style rule.\nexport const CornerWidth = 14;\n\nexport const enum Events {\n  SELECTED_NODE = 'SelectedNode',\n  DESELECTED_NODE = 'DeselectedNode',\n  OPENED_NODE = 'OpenedNode',\n  SORTING_CHANGED = 'SortingChanged',\n  PADDING_CHANGED = 'PaddingChanged',\n}\n\nexport interface EventTypes<T> {\n  [Events.SELECTED_NODE]: DataGridNode<T>;\n  [Events.DESELECTED_NODE]: void;\n  [Events.OPENED_NODE]: DataGridNode<T>;\n  [Events.SORTING_CHANGED]: void;\n  [Events.PADDING_CHANGED]: void;\n}\n\nexport enum Order {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  Ascending = 'sort-ascending',\n  Descending = 'sort-descending',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport const enum Align {\n  CENTER = 'center',\n  RIGHT = 'right',\n}\n\nexport const enum DataType {\n  STRING = 'String',\n  BOOLEAN = 'Boolean',\n}\n\nexport const ColumnResizePadding = 30;\nexport const CenterResizerOverBorderAdjustment = 3;\n\nexport const enum ResizeMethod {\n  NEAREST = 'nearest',\n  FIRST = 'first',\n  LAST = 'last',\n}\n\nexport type DataGridData = Record<string, any>;\n\nexport class DataGridNode<T> {\n  elementInternal: HTMLElement|null = null;\n  expandedInternal = false;\n  private selectedInternal = false;\n  private dirty = false;\n  private inactive = false;\n  private highlighted = false;\n  private depthInternal: number|undefined;\n  revealedInternal: boolean|undefined;\n  protected attachedInternal = false;\n  private savedPosition: {\n    parent: DataGridNode<T>,\n    index: number,\n  }|null = null;\n  private shouldRefreshChildrenInternal = true;\n\n  children: Array<DataGridNode<T>> = [];\n  dataGrid: DataGridImpl<T>|null = null;\n  parent: DataGridNode<T>|null = null;\n  previousSibling: DataGridNode<T>|null = null;\n  nextSibling: DataGridNode<T>|null = null;\n  #disclosureToggleHitBoxWidth = 20;\n  selectable = true;\n  isRoot = false;\n  nodeAccessibleText = '';\n  cellAccessibleTextMap = new Map<string, string>();\n  isCreationNode = false;\n  private dataInternal: DataGridData;\n  private hasChildrenInternal: boolean;\n\n  constructor(data?: DataGridData|null, hasChildren?: boolean) {\n    this.dataInternal = data || {};\n    this.hasChildrenInternal = hasChildren || false;\n  }\n\n  element(): Element {\n    if (!this.elementInternal) {\n      const element = this.createElement();\n      this.createCells(element);\n    }\n    return this.elementInternal as Element;\n  }\n\n  protected createElement(): HTMLElement {\n    this.elementInternal = document.createElement('tr');\n    this.elementInternal.setAttribute(\n        'jslog', `${VisualLogging.tableRow().track({keydown: 'ArrowUp|ArrowDown|ArrowLeft|ArrowRight|Enter|Space'})}`);\n    this.elementInternal.classList.add('data-grid-data-grid-node');\n    if (this.dataGrid) {\n      this.dataGrid.elementToDataGridNode.set(this.elementInternal, this);\n    }\n\n    if (this.hasChildrenInternal) {\n      this.elementInternal.classList.add('parent');\n    }\n    if (this.expanded) {\n      this.elementInternal.classList.add('expanded');\n    }\n    if (this.selected) {\n      this.elementInternal.classList.add('selected');\n    }\n    if (this.revealed) {\n      this.elementInternal.classList.add('revealed');\n    }\n    if (this.dirty) {\n      this.elementInternal.classList.add('dirty');\n    }\n    if (this.inactive) {\n      this.elementInternal.classList.add('inactive');\n    }\n    if (this.highlighted) {\n      this.elementInternal.classList.add('highlighted');\n    }\n    if (this.isCreationNode) {\n      this.elementInternal.classList.add('creation-node');\n    }\n    return this.elementInternal;\n  }\n\n  existingElement(): HTMLElement|null {\n    return this.elementInternal || null;\n  }\n\n  protected resetElement(): void {\n    this.elementInternal = null;\n  }\n\n  protected createCells(element: Element): void {\n    element.removeChildren();\n    if (!this.dataGrid || !this.parent) {\n      return;\n    }\n    const columnsArray = this.dataGrid.visibleColumnsArray;\n    const accessibleTextArray = [];\n    // Add depth if node is part of a tree\n    if (this.hasChildrenInternal || !this.parent.isRoot) {\n      accessibleTextArray.push(i18nString(UIStrings.levelS, {PH1: this.depth + 1}));\n    }\n    for (let i = 0; i < columnsArray.length; ++i) {\n      const column = columnsArray[i];\n      const cell = element.appendChild(this.createCell(column.id));\n      // Add each visibile cell to the node's accessible text by gathering 'Column Title: content'\n\n      if (column.dataType === DataType.BOOLEAN && this.data[column.id] === true) {\n        this.setCellAccessibleName(i18nString(UIStrings.checked), cell, column.id);\n      }\n\n      accessibleTextArray.push(`${column.title}: ${this.cellAccessibleTextMap.get(column.id) || cell.textContent}`);\n    }\n    this.nodeAccessibleText = accessibleTextArray.join(', ');\n\n    const cornerCell = this.createTDWithClass('corner');\n    UI.ARIAUtils.setHidden(cornerCell, true);\n    element.appendChild(cornerCell);\n  }\n\n  get data(): DataGridData {\n    return this.dataInternal;\n  }\n\n  set data(x: DataGridData) {\n    this.dataInternal = x || {};\n    this.refresh();\n  }\n\n  get revealed(): boolean {\n    if (this.revealedInternal !== undefined) {\n      return this.revealedInternal;\n    }\n\n    let currentAncestor: (DataGridNode<T>|null) = this.parent;\n    while (currentAncestor && !currentAncestor.isRoot) {\n      if (!currentAncestor.expanded) {\n        this.revealedInternal = false;\n        return false;\n      }\n\n      currentAncestor = currentAncestor.parent;\n    }\n\n    this.revealed = true;\n    return true;\n  }\n\n  set revealed(x: boolean) {\n    if (this.revealedInternal === x) {\n      return;\n    }\n\n    this.revealedInternal = x;\n\n    if (this.elementInternal) {\n      this.elementInternal.classList.toggle('revealed', this.revealedInternal);\n    }\n\n    for (let i = 0; i < this.children.length; ++i) {\n      this.children[i].revealed = x && this.expanded;\n    }\n  }\n\n  isDirty(): boolean {\n    return this.dirty;\n  }\n\n  setDirty(dirty: boolean): void {\n    if (this.dirty === dirty) {\n      return;\n    }\n    this.dirty = dirty;\n    if (!this.elementInternal) {\n      return;\n    }\n    if (dirty) {\n      this.elementInternal.classList.add('dirty');\n    } else {\n      this.elementInternal.classList.remove('dirty');\n    }\n  }\n\n  setInactive(inactive: boolean): void {\n    if (this.inactive === inactive) {\n      return;\n    }\n    this.inactive = inactive;\n    if (!this.elementInternal) {\n      return;\n    }\n    if (inactive) {\n      this.elementInternal.classList.add('inactive');\n    } else {\n      this.elementInternal.classList.remove('inactive');\n    }\n  }\n\n  setHighlighted(highlighted: boolean): void {\n    if (this.highlighted === highlighted) {\n      return;\n    }\n    this.highlighted = highlighted;\n    if (!this.elementInternal) {\n      return;\n    }\n    if (highlighted) {\n      this.elementInternal.classList.add('highlighted');\n    } else {\n      this.elementInternal.classList.remove('highlighted');\n    }\n  }\n\n  hasChildren(): boolean {\n    return this.hasChildrenInternal;\n  }\n\n  setHasChildren(x: boolean): void {\n    if (this.hasChildrenInternal === x) {\n      return;\n    }\n\n    this.hasChildrenInternal = x;\n\n    if (!this.elementInternal) {\n      return;\n    }\n\n    this.elementInternal.classList.toggle('parent', this.hasChildrenInternal);\n    this.elementInternal.classList.toggle('expanded', this.hasChildrenInternal && this.expanded);\n  }\n\n  get depth(): number {\n    if (this.depthInternal !== undefined) {\n      return this.depthInternal;\n    }\n    if (this.parent && !this.parent.isRoot) {\n      this.depthInternal = this.parent.depth + 1;\n    } else {\n      this.depthInternal = 0;\n    }\n    return this.depthInternal;\n  }\n\n  get leftPadding(): number {\n    return this.depth * (this.dataGrid ? this.dataGrid.indentWidth : 1);\n  }\n\n  get shouldRefreshChildren(): boolean {\n    return this.shouldRefreshChildrenInternal;\n  }\n\n  set shouldRefreshChildren(x: boolean) {\n    this.shouldRefreshChildrenInternal = x;\n    if (x && this.expanded) {\n      this.expand();\n    }\n  }\n\n  get selected(): boolean {\n    return this.selectedInternal;\n  }\n\n  set selected(x: boolean) {\n    if (x) {\n      this.select();\n    } else {\n      this.deselect();\n    }\n  }\n\n  get expanded(): boolean {\n    return this.expandedInternal;\n  }\n\n  set expanded(x: boolean) {\n    if (x) {\n      this.expand();\n    } else {\n      this.collapse();\n    }\n  }\n\n  refresh(): void {\n    if (!this.dataGrid) {\n      this.elementInternal = null;\n    }\n    if (!this.elementInternal) {\n      return;\n    }\n    this.createCells(this.elementInternal);\n  }\n\n  createTDWithClass(className: string): HTMLElement {\n    const cell = document.createElement('td');\n    if (className) {\n      cell.className = className;\n    }\n    const cellClass = this.dataGrid ? this.dataGrid.cellClass : null;\n    if (cellClass) {\n      cell.classList.add(cellClass);\n    }\n    return cell;\n  }\n\n  createTD(columnId: string): HTMLElement {\n    const cell = this.createTDWithClass(columnId + '-column');\n    nodeToColumnIdMap.set(cell, columnId);\n\n    if (this.dataGrid) {\n      const editableCell = this.dataGrid.isColumnEditable(columnId);\n\n      cell.setAttribute(\n          'jslog',\n          `${\n              VisualLogging.tableCell()\n                  .track({\n                    click: true,\n                    keydown: editableCell ? 'Enter|Space|Escape' : false,\n                    dblclick: editableCell,\n                    change: editableCell,\n                  })\n                  .context(Platform.StringUtilities.toKebabCase(columnId))}`);\n      const alignment = this.dataGrid.columns[columnId].align;\n      if (alignment) {\n        cell.classList.add(alignment);\n      }\n\n      if (columnId === this.dataGrid.disclosureColumnId) {\n        cell.classList.add('disclosure');\n        if (this.leftPadding) {\n          cell.style.setProperty('padding-left', this.leftPadding + 'px');\n        }\n      }\n\n      // Allow accessibility tool to identify the editable cell and display context menu\n      if (editableCell) {\n        cell.tabIndex = 0;\n        cell.ariaHasPopup = 'true';\n      }\n    }\n\n    return cell;\n  }\n\n  createCell(columnId: string): HTMLElement {\n    const cell = this.createTD(columnId);\n    const data = this.data[columnId];\n    if (data instanceof Node) {\n      cell.appendChild(data);\n    } else if (data !== null && this.dataGrid) {\n      this.dataGrid.setElementContent(cell, (data as string));\n    }\n\n    return cell;\n  }\n\n  setCellAccessibleName(name: string, cell: Element, columnId: string): void {\n    this.cellAccessibleTextMap.set(columnId, name);\n    // Mark all direct children of cell as hidden so cell name is properly announced\n    for (let i = 0; i < cell.children.length; i++) {\n      UI.ARIAUtils.setHidden(cell.children[i], true);\n    }\n    UI.ARIAUtils.setLabel(cell, name);\n  }\n\n  nodeSelfHeight(): number {\n    return 20;\n  }\n\n  appendChild(child: DataGridNode<T>): void {\n    this.insertChild(child, this.children.length);\n  }\n\n  resetNode(onlyCaches?: boolean): void {\n    // @TODO(allada) This is a hack to make sure ViewportDataGrid can clean up these caches. Try Not To Use.\n    delete this.depthInternal;\n    delete this.revealedInternal;\n    if (onlyCaches) {\n      return;\n    }\n    if (this.previousSibling) {\n      this.previousSibling.nextSibling = this.nextSibling;\n    }\n    if (this.nextSibling) {\n      this.nextSibling.previousSibling = this.previousSibling;\n    }\n    this.dataGrid = null;\n    this.parent = null;\n    this.nextSibling = null;\n    this.previousSibling = null;\n    this.attachedInternal = false;\n  }\n\n  insertChild(child: DataGridNode<T>, index: number): void {\n    if (!child) {\n      throw new Error('insertChild: Node can\\'t be undefined or null.');\n    }\n    if (child.parent === this) {\n      const currentIndex = this.children.indexOf(child);\n      if (currentIndex < 0) {\n        console.assert(false, 'Inconsistent DataGrid state');\n      }\n      if (currentIndex === index) {\n        return;\n      }\n      if (currentIndex < index) {\n        --index;\n      }\n    }\n\n    child.remove();\n\n    this.children.splice(index, 0, child);\n    this.setHasChildren(true);\n\n    child.parent = this;\n    child.dataGrid = this.dataGrid;\n    child.recalculateSiblings(index);\n\n    child.shouldRefreshChildrenInternal = true;\n\n    let current: (DataGridNode<T>|null)|DataGridNode<T> = child.children[0];\n    while (current) {\n      current.resetNode(true);\n      current.dataGrid = this.dataGrid;\n      current.attachedInternal = false;\n      current.shouldRefreshChildrenInternal = true;\n      current = current.traverseNextNode(false, child, true);\n    }\n\n    if (this.expanded) {\n      child.attach();\n    }\n    if (!this.revealed) {\n      child.revealed = false;\n    }\n  }\n\n  remove(): void {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n  }\n\n  removeChild(child: DataGridNode<T>): void {\n    if (!child) {\n      throw new Error('removeChild: Node can\\'t be undefined or null.');\n    }\n    if (child.parent !== this) {\n      throw new Error('removeChild: Node is not a child of this node.');\n    }\n\n    if (this.dataGrid) {\n      this.dataGrid.updateSelectionBeforeRemoval(child, false);\n    }\n\n    child.detach();\n    child.resetNode();\n    Platform.ArrayUtilities.removeElement(this.children, child, true);\n\n    if (this.children.length <= 0) {\n      this.setHasChildren(false);\n    }\n  }\n\n  removeChildren(): void {\n    if (this.dataGrid) {\n      this.dataGrid.updateSelectionBeforeRemoval(this, true);\n    }\n    for (let i = 0; i < this.children.length; ++i) {\n      const child = this.children[i];\n      child.detach();\n      child.resetNode();\n    }\n\n    this.children = [];\n    this.setHasChildren(false);\n  }\n\n  recalculateSiblings(myIndex: number): void {\n    if (!this.parent) {\n      return;\n    }\n\n    const previousChild = this.parent.children[myIndex - 1] || null;\n    if (previousChild) {\n      previousChild.nextSibling = this;\n    }\n    this.previousSibling = previousChild;\n\n    const nextChild = this.parent.children[myIndex + 1] || null;\n    if (nextChild) {\n      nextChild.previousSibling = this;\n    }\n    this.nextSibling = nextChild;\n  }\n\n  collapse(): void {\n    if (this.isRoot) {\n      return;\n    }\n    if (this.elementInternal) {\n      this.elementInternal.classList.remove('expanded');\n    }\n\n    this.expandedInternal = false;\n    if (this.selected && this.dataGrid) {\n      this.dataGrid.announceSelectedGridNode();\n    }\n\n    for (let i = 0; i < this.children.length; ++i) {\n      this.children[i].revealed = false;\n    }\n  }\n\n  collapseRecursively(): void {\n    let item: (DataGridNode<T>|null)|this = this;\n    while (item) {\n      if (item.expanded) {\n        item.collapse();\n      }\n      item = item.traverseNextNode(false, this, true);\n    }\n  }\n\n  populate(): void {\n  }\n\n  expand(): void {\n    if (!this.hasChildrenInternal || this.expandedInternal) {\n      return;\n    }\n    if (this.isRoot) {\n      return;\n    }\n\n    if (this.revealed && !this.shouldRefreshChildrenInternal) {\n      for (let i = 0; i < this.children.length; ++i) {\n        this.children[i].revealed = true;\n      }\n    }\n\n    if (this.shouldRefreshChildrenInternal) {\n      for (let i = 0; i < this.children.length; ++i) {\n        this.children[i].detach();\n      }\n\n      this.populate();\n\n      if (this.attachedInternal) {\n        for (let i = 0; i < this.children.length; ++i) {\n          const child = this.children[i];\n          if (this.revealed) {\n            child.revealed = true;\n          }\n          child.attach();\n        }\n      }\n\n      this.shouldRefreshChildrenInternal = false;\n    }\n\n    if (this.elementInternal) {\n      this.elementInternal.classList.add('expanded');\n    }\n    if (this.selected && this.dataGrid) {\n      this.dataGrid.announceSelectedGridNode();\n    }\n\n    this.expandedInternal = true;\n  }\n\n  expandRecursively(): void {\n    let item: (DataGridNode<T>|null)|this = this;\n    while (item) {\n      item.expand();\n      item = item.traverseNextNode(false, this);\n    }\n  }\n\n  reveal(): void {\n    if (this.isRoot || !this.dataGrid) {\n      return;\n    }\n    let currentAncestor: (DataGridNode<T>|null) = this.parent;\n    while (currentAncestor && !currentAncestor.isRoot) {\n      if (!currentAncestor.expanded) {\n        currentAncestor.expand();\n      }\n      currentAncestor = currentAncestor.parent;\n    }\n\n    this.dataGrid.revealNode(this.element() as HTMLElement);\n  }\n\n  select(supressSelectedEvent?: boolean): void {\n    if (!this.dataGrid || !this.selectable || this.selected) {\n      return;\n    }\n\n    if (this.dataGrid.selectedNode) {\n      this.dataGrid.selectedNode.deselect();\n    }\n\n    this.selectedInternal = true;\n    this.dataGrid.selectedNode = this;\n\n    if (this.elementInternal) {\n      this.elementInternal.classList.add('selected');\n      this.elementInternal.focus();\n      this.dataGrid.setHasSelection(true);\n      this.dataGrid.announceSelectedGridNode();\n    }\n\n    if (!supressSelectedEvent) {\n      this.dataGrid.dispatchEventToListeners(Events.SELECTED_NODE, this);\n    }\n  }\n\n  revealAndSelect(): void {\n    if (this.isRoot) {\n      return;\n    }\n    this.reveal();\n    this.select();\n  }\n\n  deselect(supressDeselectedEvent?: boolean): void {\n    if (!this.dataGrid || this.dataGrid.selectedNode !== this || !this.selected) {\n      return;\n    }\n\n    this.selectedInternal = false;\n    this.dataGrid.selectedNode = null;\n\n    if (this.elementInternal) {\n      this.elementInternal.classList.remove('selected');\n      this.dataGrid.setHasSelection(false);\n    }\n\n    if (!supressDeselectedEvent) {\n      this.dataGrid.dispatchEventToListeners(Events.DESELECTED_NODE);\n    }\n  }\n\n  traverseNextNode(skipHidden: boolean, stayWithin?: DataGridNode<T>|null, dontPopulate?: boolean, info?: {\n    depthChange: number,\n  }): DataGridNode<T>|null {\n    if (!dontPopulate && this.hasChildrenInternal) {\n      this.populate();\n    }\n\n    if (info) {\n      info.depthChange = 0;\n    }\n\n    let node: (DataGridNode<T>|null)|this = (!skipHidden || this.revealed) ? this.children[0] : null;\n    if (node && (!skipHidden || this.expanded)) {\n      if (info) {\n        info.depthChange = 1;\n      }\n      return node;\n    }\n\n    if (this === stayWithin) {\n      return null;\n    }\n\n    node = (!skipHidden || this.revealed) ? this.nextSibling : null;\n    if (node) {\n      return node;\n    }\n\n    node = this;\n    while (node && !node.isRoot && !((!skipHidden || node.revealed) ? node.nextSibling : null) &&\n           node.parent !== stayWithin) {\n      if (info) {\n        info.depthChange -= 1;\n      }\n      node = node.parent;\n    }\n\n    if (!node) {\n      return null;\n    }\n\n    return (!skipHidden || node.revealed) ? node.nextSibling : null;\n  }\n\n  traversePreviousNode(skipHidden: boolean, dontPopulate?: boolean): DataGridNode<T>|null {\n    let node: (DataGridNode<T>|null) = (!skipHidden || this.revealed) ? this.previousSibling : null;\n    if (!dontPopulate && node?.hasChildrenInternal) {\n      node.populate();\n    }\n\n    while (node &&\n           ((!skipHidden || (node.revealed && node.expanded)) ? node.children[node.children.length - 1] : null)) {\n      if (!dontPopulate && node.hasChildrenInternal) {\n        node.populate();\n      }\n      node = ((!skipHidden || (node.revealed && node.expanded)) ? node.children[node.children.length - 1] : null);\n    }\n\n    if (node) {\n      return node;\n    }\n\n    if (!this.parent || this.parent.isRoot) {\n      return null;\n    }\n\n    return this.parent;\n  }\n\n  isEventWithinDisclosureTriangle(event: MouseEvent): boolean {\n    if (!this.hasChildrenInternal) {\n      return false;\n    }\n    const cell = UI.UIUtils.enclosingNodeOrSelfWithNodeName((event.target as Node), 'td');\n    if (!cell || !(cell instanceof HTMLElement) || !cell.classList.contains('disclosure')) {\n      return false;\n    }\n\n    const left = cell.getBoundingClientRect().left + this.leftPadding;\n    return event.pageX >= left && event.pageX <= left + this.#disclosureToggleHitBoxWidth;\n  }\n\n  private attach(): void {\n    if (!this.dataGrid || this.attachedInternal) {\n      return;\n    }\n\n    this.attachedInternal = true;\n\n    const previousNode = this.traversePreviousNode(true, true);\n    const previousElement = previousNode ? previousNode.element() : this.dataGrid.topFillerRow;\n    this.dataGrid.dataTableBody.insertBefore(this.element(), previousElement.nextSibling);\n\n    if (this.expandedInternal) {\n      for (let i = 0; i < this.children.length; ++i) {\n        this.children[i].attach();\n      }\n    }\n  }\n\n  private detach(): void {\n    if (!this.attachedInternal) {\n      return;\n    }\n\n    this.attachedInternal = false;\n\n    if (this.elementInternal) {\n      this.elementInternal.remove();\n    }\n\n    for (let i = 0; i < this.children.length; ++i) {\n      this.children[i].detach();\n    }\n  }\n\n  savePosition(): void {\n    if (this.savedPosition) {\n      return;\n    }\n\n    if (!this.parent) {\n      throw new Error('savePosition: Node must have a parent.');\n    }\n    this.savedPosition = {parent: this.parent, index: this.parent.children.indexOf(this)};\n  }\n\n  restorePosition(): void {\n    if (!this.savedPosition) {\n      return;\n    }\n\n    if (this.parent !== this.savedPosition.parent) {\n      this.savedPosition.parent.insertChild(this, this.savedPosition.index);\n    }\n\n    this.savedPosition = null;\n  }\n}\n\nexport class CreationDataGridNode<T> extends DataGridNode<T> {\n  override isCreationNode: boolean;\n  constructor(data?: Record<string, any>|null, hasChildren?: boolean) {\n    super(data, hasChildren);\n    this.isCreationNode = true;\n  }\n}\n\nexport class DataGridWidget<T> extends UI.Widget.VBox {\n  readonly dataGrid: DataGridImpl<T>;\n  constructor(dataGrid: DataGridImpl<T>, element?: HTMLElement) {\n    super(undefined, undefined, element);\n    this.dataGrid = dataGrid;\n    this.element.appendChild(dataGrid.element);\n    this.setDefaultFocusedElement(dataGrid.element);\n    this.registerRequiredCSS(dataGridStyles);\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.dataGrid.wasShown();\n  }\n\n  override willHide(): void {\n    this.dataGrid.willHide();\n    super.willHide();\n  }\n\n  override onResize(): void {\n    super.onResize();\n    this.dataGrid.onResize();\n  }\n\n  override elementsToRestoreScrollPositionsFor(): Element[] {\n    return [this.dataGrid.scrollContainer];\n  }\n}\n\nexport interface Parameters {\n  displayName: string;\n  columns: ColumnDescriptor[];\n  deleteCallback?: ((arg0: any) => void);\n  refreshCallback?: (() => void);\n}\nexport interface ColumnDescriptor {\n  id: Lowercase<string>;\n  title?: Common.UIString.LocalizedString;\n  titleDOMFragment?: DocumentFragment|null;\n  sortable: boolean;\n  sort?: Order|null;\n  align?: Align|null;\n  width?: string;\n  fixedWidth?: boolean;\n  editable?: boolean;\n  nonSelectable?: boolean;\n  longText?: boolean;\n  disclosure?: boolean;\n  weight?: number;\n  allowInSortByEvenWhenHidden?: boolean;\n  dataType?: DataType|null;\n  defaultWeight?: number;\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2021 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.data-grid {\n  position: relative;\n  border: 1px solid var(--sys-color-divider) !important; /* stylelint-disable-line declaration-no-important */\n  /* See: crbug.com/1152736 for color variable migration. */\n  line-height: 120%;\n}\n\n.data-grid table {\n  table-layout: fixed;\n  border-spacing: 0;\n  border-collapse: separate;\n  height: 100%;\n  width: 100%;\n}\n\n.data-grid .data-container {\n  position: absolute;\n  inset: 0;\n  overflow: hidden auto;\n  transform: translateZ(0);\n  background-color: var(--sys-color-cdt-base-container);\n}\n\n.data-grid thead {\n  position: sticky;\n  top: 0;\n  height: 21px;\n  z-index: 1;\n}\n\n.data-grid .aria-live-label {\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n}\n\n.data-grid.inline .data-container {\n  position: static;\n}\n\n.data-grid .corner {\n  width: 14px;\n  padding-right: 0;\n  padding-left: 0;\n  border-left: 0 none transparent !important; /* stylelint-disable-line declaration-no-important */\n}\n\n.data-grid.inline .corner {\n  display: none;\n}\n\n.data-grid.data-grid-fits-viewport .corner {\n  display: none;\n}\n\n.data-grid .top-filler-td,\n.data-grid .bottom-filler-td {\n  height: auto !important; /* stylelint-disable-line declaration-no-important */\n  padding: 0 !important; /* stylelint-disable-line declaration-no-important */\n}\n\n.data-grid table.data {\n  position: absolute;\n  inset: 0;\n  border-top: 0 none transparent;\n  table-layout: fixed;\n}\n\n.data-grid.inline table.data {\n  position: static;\n}\n\n.data-grid tbody tr {\n  display: none;\n  height: 20px;\n\n  &:has(td.show-more) {\n    height: var(--sys-size-13);\n  }\n}\n\n.data-grid tbody tr.revealed {\n  display: table-row;\n}\n\n.striped-data-grid .revealed.data-grid-data-grid-node:nth-child(odd):not(.dirty, .selected),\n.striped-data-grid-starts-with-odd .revealed.data-grid-data-grid-node:nth-child(even):not(.dirty, .selected) {\n  background-color: var(--sys-color-surface1);\n}\n\n.data-grid td,\n.data-grid th {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  line-height: 18px;\n  height: 18px;\n  border-left: 1px solid var(--sys-color-divider);\n  padding: 1px 4px;\n}\n\n.data-grid td {\n  vertical-align: top;\n  user-select: text;\n}\n\n.data-grid tr {\n  background-color: var(--sys-color-surface);\n\n  &:has(th) {\n    background-color: var(--sys-color-surface1);\n  }\n}\n\n.data-grid th {\n  border-bottom: 1px solid var(--sys-color-divider);\n  text-align: left;\n  font-weight: normal;\n  vertical-align: middle;\n}\n\n.data-grid th:first-child,\n.data-grid td:first-child {\n  border-left-width: 0;\n}\n\n.data-grid:focus-within tr.selected td,\n.data-grid:focus-within tr.selected th {\n  border-left-color: var(--sys-color-divider-on-tonal-container);\n}\n\n.data-grid td > div,\n.data-grid th > div {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 8px;\n}\n\n.data-grid td.editing > div {\n  text-overflow: clip;\n}\n\n.data-grid .center {\n  text-align: center;\n}\n\n.data-grid .right {\n  text-align: right;\n}\n\n.data-grid th.sortable {\n  position: relative;\n}\n\n.data-grid th .sort-order-icon-container {\n  min-width: 0;\n  position: absolute;\n  top: 1px;\n  right: 0;\n  bottom: 1px;\n  display: flex;\n  align-items: center;\n}\n\n.data-grid th .sort-order-icon {\n  margin-right: 4px;\n  margin-bottom: -2px;\n  width: 14px;\n  height: 14px;\n  display: none;\n  background-color: var(--icon-default);\n}\n\n.data-grid th.sort-ascending .sort-order-icon {\n  display: inline-block;\n  mask-image: var(--image-file-triangle-up);\n}\n\n.data-grid th.sort-descending .sort-order-icon {\n  display: inline-block;\n  mask-image: var(--image-file-triangle-down);\n}\n\n.data-grid th.sort-ascending,\n.data-grid th.sort-descending {\n  padding-right: 14px;\n}\n\n.data-grid th.sortable:hover,\n.data-grid th.sortable:focus-within {\n  background-color: var(--sys-color-state-hover-on-subtle);\n}\n\n.data-grid .top-filler-td {\n  border-bottom: 0 none transparent;\n  line-height: 0;\n}\n\n.data-grid button {\n  line-height: 18px;\n  color: inherit;\n}\n\n.data-grid td.disclosure::before {\n  user-select: none;\n  mask-image: var(--image-file-triangle-right);\n  float: left;\n  width: 14px;\n  height: 14px;\n  margin-right: 2px;\n  content: \"\";\n  position: relative;\n  top: 3px;\n  background-color: var(--icon-default);\n  transition: transform 200ms;\n}\n\n.data-grid tr:not(.parent) td.disclosure::before {\n  background-color: transparent;\n}\n\n.data-grid tr.expanded td.disclosure::before {\n  transform: rotate(90deg);\n}\n\n.data-grid tbody tr.revealed.selected {\n  background-color: var(--sys-color-neutral-container);\n  color: inherit;\n\n  & ::selection {\n    background-color: var(--sys-color-state-focus-select);\n    color: currentcolor;\n  }\n}\n\n.data-grid:focus-within tbody tr.revealed.selected {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.data-grid tbody tr.revealed:not(.data-grid-filler-row, .selected):hover {\n  background-color: var(--sys-color-state-hover-on-subtle);\n}\n\n.data-grid tbody tr.revealed.selected.dirty {\n  color: var(--sys-color-on-tonal-container);\n}\n\n.data-grid.no-selection:focus-visible {\n  border: 1px solid var(--sys-color-state-focus-ring) !important; /* stylelint-disable-line declaration-no-important */\n}\n\n.data-grid:focus tbody tr.selected {\n  background-color: var(--sys-color-tonal-container);\n  color: var(--sys-color-on-tonal-container);\n}\n\n.data-grid tbody tr.selected.dirty {\n  --override-data-grid-dirty-background-color: var(--sys-color-error);\n\n  background-color: var(--override-data-grid-dirty-background-color);\n}\n\n.data-grid:focus tr.selected.dirty {\n  --override-data-grid-dirty-background-color: var(--sys-color-error-container);\n}\n\n.data-grid:focus tr.selected .devtools-link {\n  color: var(--sys-color-on-tonal-container);\n}\n\n.data-grid:focus tr.parent.selected td.disclosure::before {\n  background-color: var(--sys-color-on-tonal-container);\n}\n\n.data-grid tr.inactive {\n  color: var(--sys-color-state-disabled);\n  font-style: italic;\n}\n\n.data-grid tr.dirty {\n  --override-data-grid-dirty-background-color: var(--sys-color-surface-error);\n\n  background-color: var(--override-data-grid-dirty-background-color);\n  color: var(--sys-color-error);\n  font-style: normal;\n}\n\n.data-grid tr.highlighted:not(.selected) {\n  background-color: var(--sys-color-surface-yellow);\n}\n\n.striped-data-grid .revealed.data-grid-data-grid-node.highlighted:nth-child(odd):not(.dirty, .selected),\n.striped-data-grid-starts-with-odd .revealed.data-grid-data-grid-node.highlighted:nth-child(even):not(.dirty, .selected) {\n  background-color: var(--sys-color-surface-yellow-high);\n}\n\n.data-grid td.show-more {\n  white-space: normal;\n  gap: var(--sys-size-3);\n\n  devtools-button {\n    margin-right: var(--sys-size-6);\n    position: relative;\n    margin-top: 3px;\n    margin-bottom: 3px;\n  }\n}\n\n.data-grid td.show-more::before {\n  display: none;\n}\n\n.data-grid-resizer {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 5px;\n  z-index: 500;\n}\n\n@media (forced-colors: active) {\n  .sort-order-icon-container .sort-order-icon {\n    forced-color-adjust: none;\n    background-color: ButtonText;\n  }\n\n  .data-grid td.disclosure::before {\n    forced-color-adjust: none;\n    color: ButtonText;\n  }\n\n  .data-grid.no-selection:focus-visible * {\n    color: ButtonText;\n  }\n\n  .data-grid th.sortable:hover *,\n  .data-grid tr.parent.selected td.disclosure::before,\n  .data-grid:focus tr.parent.selected td.disclosure::before,\n  .data-grid tbody tr.parent.revealed:hover td.disclosure::before {\n    color: HighlightText;\n  }\n\n  .data-grid th.sortable:hover .sort-order-icon-container .sort-order-icon {\n    background-color: HighlightText;\n  }\n\n  .striped-data-grid .revealed.data-grid-data-grid-node:nth-child(odd):not(.dirty, .selected),\n  .striped-data-grid-starts-with-odd .revealed.data-grid-data-grid-node:nth-child(even):not(.dirty, .selected),\n  .request-cookies-view tr.revealed.data-grid-data-grid-node.flagged-cookie-attribute-row:not(.selected):nth-child(2n),\n  .cookies-table tr.revealed.data-grid-data-grid-node.flagged-cookie-attribute-row:not(.selected):nth-child(odd) {\n    background-color: canvas;\n  }\n\n  .data-grid.no-selection:focus-visible {\n    forced-color-adjust: none;\n    border-color: Highlight;\n  }\n\n  .data-grid th.sortable:hover,\n  .data-grid tbody tr.revealed:hover,\n  .data-grid tbody tr.revealed.selected,\n  .striped-data-grid .revealed:hover.data-grid-data-grid-node:nth-child(odd):not(.dirty, .selected),\n  .striped-data-grid-starts-with-odd .revealed:hover.data-grid-data-grid-node:nth-child(even):not(.dirty, .selected),\n  .request-cookies-view tr.revealed:hover.data-grid-data-grid-node.flagged-cookie-attribute-row:not(.selected):nth-child(2n),\n  .cookies-table tr.revealed:hover.data-grid-data-grid-node.flagged-cookie-attribute-row:not(.selected):nth-child(odd) {\n    forced-color-adjust: none;\n    background-color: Highlight;\n  }\n\n  .data-grid tbody tr.revealed:hover *,\n  .data-grid tbody tr.revealed.selected *,\n  .data-grid tbody tr.revealed:focus *,\n  .data-grid tbody tr.revealed:hover .heap-object-tag {\n    color: HighlightText;\n  }\n\n  .data-grid th {\n    background-color: canvas;\n    border-color: Highlight;\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./dataGrid.css')} */`;", "// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport type * as TextUtils from '../../../../models/text_utils/text_utils.js';\nimport * as RenderCoordinator from '../../../components/render_coordinator/render_coordinator.js';\n\nimport {type DataGridData, DataGridImpl, DataGridNode, type Parameters} from './DataGrid.js';\n\nlet nextId = 0;\n\nexport class ViewportDataGrid<T> extends Common.ObjectWrapper.eventMixin<EventTypes, typeof DataGridImpl>(\n    DataGridImpl)<ViewportDataGridNode<T>> {\n  private readonly onScrollBound: (event: Event|null) => void;\n  private visibleNodes: Array<ViewportDataGridNode<T>>;\n  /** A datagrid preference to express that the grid represents an updating log of rows (eg Network panel request log, websocket messages).\n   * If `true`, the datagrid will mostly keep the scroll at the bottom, so new items are visible.\n   * If the data is sorted descending (eg Performance Call Tree, heap snapshot), keep the default of `false`.\n   */\n  enableAutoScrollToBottom = false;\n  /** When true, the datagrid will manipulate the scrollTop to focus on the bottom, mostly so new additions are visible.\n   * Some actions will unset this, like revealing or expanding a particular node.\n   * Only matters if enableAutoScrollToBottom is true. */\n  keepScrollingToBottom = false;\n  private updateIsFromUser: boolean;\n  private lastScrollTop: number;\n  private firstVisibleIsStriped: boolean;\n  private isStriped: boolean;\n  private filters: readonly TextUtils.TextUtils.ParsedFilter[] = [];\n  private id = nextId++;\n\n  constructor(dataGridParameters: Parameters) {\n    super(dataGridParameters);\n\n    this.onScrollBound = this.onScroll.bind(this);\n    this.scrollContainer.addEventListener('scroll', this.onScrollBound, true);\n\n    this.visibleNodes = [];\n    this.inline = false;\n\n    this.updateIsFromUser = false;\n    this.lastScrollTop = 0;\n    this.firstVisibleIsStriped = false;\n    this.isStriped = false;\n\n    this.setRootNode(new ViewportDataGridNode());\n  }\n\n  override setStriped(striped: boolean): void {\n    this.isStriped = striped;\n    let startsWithOdd = true;\n    if (this.visibleNodes.length) {\n      const allChildren = this.filteredNodes();\n      startsWithOdd = Boolean(allChildren.indexOf(this.visibleNodes[0]));\n    }\n    this.updateStripesClass(startsWithOdd);\n  }\n\n  setFilters(filters: readonly TextUtils.TextUtils.ParsedFilter[]): void {\n    if (this.filters === filters) {\n      return;\n    }\n    this.filters = filters;\n    this.scheduleUpdate();\n  }\n\n  private updateStripesClass(startsWithOdd: boolean): void {\n    this.element.classList.toggle('striped-data-grid', !startsWithOdd && this.isStriped);\n    this.element.classList.toggle('striped-data-grid-starts-with-odd', startsWithOdd && this.isStriped);\n  }\n\n  setScrollContainer(scrollContainer: HTMLElement): void {\n    this.scrollContainer.removeEventListener('scroll', this.onScrollBound, true);\n    this.scrollContainerInternal = scrollContainer;\n    this.scrollContainer.addEventListener('scroll', this.onScrollBound, true);\n  }\n\n  override onResize(): void {\n    if (this.keepScrollingToBottom) {\n      this.scrollContainer.scrollTop = this.scrollContainer.scrollHeight - this.scrollContainer.clientHeight;\n    }\n    this.scheduleUpdate();\n    super.onResize();\n  }\n\n  setEnableAutoScrollToBottom(stick: boolean): void {\n    this.keepScrollingToBottom = this.enableAutoScrollToBottom = stick;\n  }\n\n  private onScroll(_event: Event|null): void {\n    if (this.lastScrollTop !== this.scrollContainer.scrollTop) {\n      this.scheduleUpdate(true);\n    }\n  }\n\n  scheduleUpdateStructure(): void {\n    this.scheduleUpdate();\n  }\n\n  scheduleUpdate(isFromUser?: boolean): void {\n    this.updateIsFromUser = this.updateIsFromUser || Boolean(isFromUser);\n    void RenderCoordinator.write(`ViewportDataGrid.render ${this.id}`, this.update.bind(this));\n  }\n\n  // TODO(allada) This should be fixed to never be needed. It is needed right now for network because removing\n  // elements happens followed by a scheduleRefresh() which causes white space to be visible, but the waterfall\n  // updates instantly.\n  updateInstantly(): void {\n    this.update();\n  }\n\n  override renderInline(): void {\n    this.inline = true;\n    super.renderInline();\n    this.update();\n  }\n\n  private getStringifiedCellValues(data: DataGridData, columns: Set<string>): string {\n    return JSON\n        .stringify(Object.entries(data).filter(([key]) => columns.has(key)).map(([, value]) => {\n          if (value instanceof Node) {\n            return value.textContent;\n          }\n          return String(value);\n        }))\n        .toLowerCase();\n  }\n\n  private testNodeWithFilter(node: ViewportDataGridNode<T>, filter: TextUtils.TextUtils.ParsedFilter): boolean {\n    let rowMatchesFilter = false;\n\n    const {key, text, negative, regex} = filter;\n\n    const dataToTest = this.getStringifiedCellValues(\n        node.data, key ? new Set(key.split(',')) : new Set(this.visibleColumnsArray.map(column => column.id)));\n\n    if (regex) {\n      rowMatchesFilter = regex.test(dataToTest);\n    } else if (text) {\n      rowMatchesFilter = dataToTest.includes(text.toLowerCase());\n    }\n\n    // If `negative` is set to `true`, that means we have to flip the final\n    // result, because the filter is matching anything that doesn't match. e.g.\n    // {text: 'foo', negative: false} matches rows that contain the text `foo`\n    // but {text: 'foo', negative: true} matches rows that do NOT contain the\n    // text `foo` so if a filter is marked as negative, we first match against\n    // that filter, and then we flip it here.\n    return negative ? !rowMatchesFilter : rowMatchesFilter;\n  }\n\n  testNodeWithFilters(node: ViewportDataGridNode<T>): boolean {\n    for (const filter of this.filters) {\n      const nodeMatchesFilter = this.testNodeWithFilter(node, filter);\n      if (!nodeMatchesFilter) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private calculateVisibleNodes(clientHeight: number, scrollTop: number): {\n    topPadding: number,\n    bottomPadding: number,\n    contentHeight: number,\n    visibleNodes: Array<ViewportDataGridNode<T>>,\n    offset: number,\n  } {\n    const nodes = this.filteredNodes();\n\n    if (this.inline) {\n      return {topPadding: 0, bottomPadding: 0, contentHeight: 0, visibleNodes: nodes, offset: 0};\n    }\n\n    const size = nodes.length;\n    let i = 0;\n    let y = 0;\n\n    for (; i < size && y + nodes[i].nodeSelfHeight() < scrollTop; ++i) {\n      y += nodes[i].nodeSelfHeight();\n    }\n    const start = i;\n    const topPadding = y;\n\n    for (; i < size && y < scrollTop + clientHeight; ++i) {\n      y += nodes[i].nodeSelfHeight();\n    }\n    const end = i;\n\n    let bottomPadding = 0;\n    for (; i < size; ++i) {\n      bottomPadding += nodes[i].nodeSelfHeight();\n    }\n\n    if (this.enableAutoScrollToBottom) {\n      // If we're scrolled to the very end, keep the scroll viewport focused to the end (as new items arrive)\n      this.keepScrollingToBottom = end === nodes.length;\n    }\n\n    return {\n      topPadding,\n      bottomPadding,\n      contentHeight: y - topPadding,\n      visibleNodes: nodes.slice(start, end),\n      offset: start,\n    };\n  }\n\n  override getNumberOfRows(): number {\n    return this.filteredNodes().length;\n  }\n\n  private contentHeight(): number {\n    const nodes = this.filteredNodes();\n    let result = 0;\n    for (let i = 0, size = nodes.length; i < size; ++i) {\n      result += nodes[i].nodeSelfHeight();\n    }\n    return result;\n  }\n\n  // The datagrids assume a fixed height of rows, typically 20px. see nodeSelfHeight() and calculateVisibleNodes().\n  private update(): void {\n    // Visual height of visible data rows\n    const clientHeight = this.scrollContainer.clientHeight - this.headerHeightInScroller();\n    // The hypothetical height of all data rows summed.\n    const contentHeight = this.contentHeight();\n    const currentScrollTop = this.scrollContainer.scrollTop;\n    // Scrolltop if scrolled to the very bottom\n    const maxScrollTop = Math.max(0, contentHeight - clientHeight);\n    let nextScrollTop = currentScrollTop;\n    if (!this.updateIsFromUser && this.keepScrollingToBottom) {\n      nextScrollTop = maxScrollTop;\n    }\n    this.updateIsFromUser = false;\n    nextScrollTop = Math.min(maxScrollTop, nextScrollTop);\n\n    const viewportState = this.calculateVisibleNodes(clientHeight, nextScrollTop);\n    const visibleNodes = viewportState.visibleNodes;\n    const visibleNodesSet = new Set<ViewportDataGridNode<T>>(visibleNodes);\n\n    for (let i = 0; i < this.visibleNodes.length; ++i) {\n      const oldNode = this.visibleNodes[i];\n      if (!visibleNodesSet.has(oldNode) && oldNode.attached()) {\n        const element = oldNode.existingElement();\n        if (element) {\n          element.remove();\n        }\n      }\n    }\n\n    let previousElement = this.topFillerRowElement();\n    const tBody = this.dataTableBody;\n    let offset = viewportState.offset;\n\n    if (visibleNodes.length) {\n      const nodes = this.filteredNodes();\n      const index = nodes.indexOf(visibleNodes[0]);\n      this.updateStripesClass(Boolean(index % 2));\n      if (this.keepScrollingToBottom && index !== -1 && Boolean(index % 2) !== this.firstVisibleIsStriped) {\n        offset += 1;\n      }\n    }\n\n    this.firstVisibleIsStriped = Boolean(offset % 2);\n\n    for (let i = 0; i < visibleNodes.length; ++i) {\n      const node = visibleNodes[i];\n      const element = (node.element());\n      node.setStriped((offset + i) % 2 === 0);\n      if (element !== previousElement.nextSibling) {\n        tBody.insertBefore(element, previousElement.nextSibling);\n      }\n      node.revealed = true;\n      previousElement = element;\n    }\n\n    this.setVerticalPadding(viewportState.topPadding, viewportState.bottomPadding);\n    this.lastScrollTop = nextScrollTop;\n    if (nextScrollTop !== currentScrollTop) {\n      this.scrollContainer.scrollTop = nextScrollTop;\n    }\n    const contentFits =\n        viewportState.contentHeight <= clientHeight && viewportState.topPadding + viewportState.bottomPadding === 0;\n    if (contentFits !== this.element.classList.contains('data-grid-fits-viewport')) {\n      this.element.classList.toggle('data-grid-fits-viewport', contentFits);\n      this.updateWidths();\n    }\n    this.visibleNodes = visibleNodes;\n    this.dispatchEventToListeners(Events.VIEWPORT_CALCULATED);\n  }\n\n  revealViewportNode(node: ViewportDataGridNode<T>): void {\n    const nodes = this.filteredNodes();\n    const index = nodes.indexOf(node);\n    if (index === -1) {\n      return;\n    }\n    let fromY = 0;\n    for (let i = 0; i < index; ++i) {\n      fromY += nodes[i].nodeSelfHeight();\n    }\n    const toY = fromY + node.nodeSelfHeight();\n    let scrollTop: number = this.scrollContainer.scrollTop;\n    const visibleHeight = this.scrollContainer.offsetHeight - this.headerHeightInScroller();\n    if (scrollTop > fromY) {\n      scrollTop = fromY;\n      this.keepScrollingToBottom = false;\n    } else if (scrollTop + visibleHeight < toY) {\n      scrollTop = toY - visibleHeight;\n    }\n    this.scrollContainer.scrollTop = scrollTop;\n  }\n\n  private filteredNodes(): Array<ViewportDataGridNode<T>> {\n    return (this.rootNode() as ViewportDataGridNode<T>).flatChildren().filter(this.testNodeWithFilters.bind(this));\n  }\n}\n\nexport const enum Events {\n  VIEWPORT_CALCULATED = 'ViewportCalculated',\n}\n\nexport interface EventTypes {\n  [Events.VIEWPORT_CALCULATED]: void;\n}\n\nexport class ViewportDataGridNode<T> extends DataGridNode<ViewportDataGridNode<T>> {\n  private stale: boolean;\n  private flatNodes: Array<ViewportDataGridNode<T>>|null;\n  private isStripedInternal: boolean;\n\n  constructor(data?: DataGridData|null, hasChildren?: boolean) {\n    super(data, hasChildren);\n    this.stale = false;\n    this.flatNodes = null;\n    this.isStripedInternal = false;\n  }\n\n  override element(): HTMLElement {\n    const existingElement = this.existingElement();\n    const element = existingElement || this.createElement();\n    if (!existingElement || this.stale) {\n      this.createCells(element);\n      this.stale = false;\n    }\n    return element;\n  }\n\n  override nodeSelfHeight(): number {\n    // Use the height of the first non-filler row.\n    const firstVisibleRow = this.dataGrid?.topFillerRow?.nextElementSibling;\n    const height = firstVisibleRow?.classList.contains('data-grid-data-grid-node') && firstVisibleRow.clientHeight;\n    return height || super.nodeSelfHeight();\n  }\n\n  setStriped(isStriped: boolean): void {\n    this.isStripedInternal = isStriped;\n    this.element().classList.toggle('odd', isStriped);\n  }\n\n  isStriped(): boolean {\n    return this.isStripedInternal;\n  }\n\n  clearFlatNodes(): void {\n    this.flatNodes = null;\n    const parent = (this.parent as ViewportDataGridNode<T>);\n    if (parent) {\n      parent.clearFlatNodes();\n    }\n  }\n\n  flatChildren(): Array<ViewportDataGridNode<T>> {\n    if (this.flatNodes) {\n      return this.flatNodes;\n    }\n    const flatNodes: Array<ViewportDataGridNode<T>> = [];\n    const children = ([this.children] as Array<Array<ViewportDataGridNode<T>>>);\n    const counters: number[] = [0];\n    let depth = 0;\n    while (depth >= 0) {\n      if (children[depth].length <= counters[depth]) {\n        depth--;\n        continue;\n      }\n      const node = children[depth][counters[depth]++];\n      flatNodes.push(node);\n      if (node.expanded && node.children.length) {\n        depth++;\n        children[depth] = (node.children as Array<ViewportDataGridNode<T>>);\n        counters[depth] = 0;\n      }\n    }\n\n    this.flatNodes = flatNodes;\n    return flatNodes;\n  }\n\n  override insertChild(child: DataGridNode<ViewportDataGridNode<T>>, index: number): void {\n    this.clearFlatNodes();\n    if (child.parent === this) {\n      const currentIndex = this.children.indexOf(child);\n      if (currentIndex < 0) {\n        console.assert(false, 'Inconsistent DataGrid state');\n      }\n      if (currentIndex === index) {\n        return;\n      }\n      if (currentIndex < index) {\n        --index;\n      }\n    }\n    child.remove();\n    child.parent = this;\n    child.dataGrid = this.dataGrid;\n    if (!this.children.length) {\n      this.setHasChildren(true);\n    }\n    this.children.splice(index, 0, child);\n    child.recalculateSiblings(index);\n    if (this.expanded && this.dataGrid) {\n      (this.dataGrid as ViewportDataGrid<T>).scheduleUpdateStructure();\n    }\n  }\n\n  override removeChild(child: DataGridNode<ViewportDataGridNode<T>>): void {\n    if (this.dataGrid) {\n      this.dataGrid.updateSelectionBeforeRemoval(child, false);\n    }\n    this.clearFlatNodes();\n    if (child.previousSibling) {\n      child.previousSibling.nextSibling = child.nextSibling;\n    }\n    if (child.nextSibling) {\n      child.nextSibling.previousSibling = child.previousSibling;\n    }\n    if (child.parent !== this) {\n      throw new Error('removeChild: Node is not a child of this node.');\n    }\n\n    Platform.ArrayUtilities.removeElement(this.children, child, true);\n    (child as ViewportDataGridNode<T>).unlink();\n\n    if (!this.children.length) {\n      this.setHasChildren(false);\n    }\n    if (this.expanded && this.dataGrid) {\n      (this.dataGrid as ViewportDataGrid<T>).scheduleUpdateStructure();\n    }\n  }\n\n  override removeChildren(): void {\n    if (this.dataGrid) {\n      this.dataGrid.updateSelectionBeforeRemoval(this, true);\n    }\n    this.clearFlatNodes();\n    for (let i = 0; i < this.children.length; ++i) {\n      (this.children[i] as ViewportDataGridNode<T>).unlink();\n    }\n    this.children = ([] as Array<ViewportDataGridNode<T>>);\n\n    if (this.expanded && this.dataGrid) {\n      (this.dataGrid as ViewportDataGrid<T>).scheduleUpdateStructure();\n    }\n  }\n\n  private unlink(): void {\n    const existingElement = this.existingElement();\n    if (this.attached() && existingElement) {\n      existingElement.remove();\n    }\n    this.resetNode();\n  }\n\n  override collapse(): void {\n    if (!this.expanded) {\n      return;\n    }\n    this.clearFlatNodes();\n    this.expandedInternal = false;\n    const existingElement = this.existingElement();\n    if (existingElement) {\n      existingElement.classList.remove('expanded');\n    }\n    if (this.selected) {\n      (this.dataGrid as ViewportDataGrid<T>).announceSelectedGridNode();\n    }\n    (this.dataGrid as ViewportDataGrid<T>).scheduleUpdateStructure();\n  }\n\n  override expand(): void {\n    if (this.expanded) {\n      return;\n    }\n    (this.dataGrid as ViewportDataGrid<T>).keepScrollingToBottom = false;\n    this.clearFlatNodes();\n    super.expand();\n    (this.dataGrid as ViewportDataGrid<T>).scheduleUpdateStructure();\n  }\n\n  override traverseNextNode(skipHidden: boolean, stayWithin?: DataGridNode<T>|null, dontPopulate?: boolean, info?: {\n    depthChange: number,\n  }): DataGridNode<T>|null {\n    const result = super.traverseNextNode(skipHidden, stayWithin, dontPopulate, info);\n    if (result && skipHidden &&\n        !(this.dataGrid as ViewportDataGrid<T>).testNodeWithFilters(result as ViewportDataGridNode<T>)) {\n      return result.traverseNextNode(skipHidden, stayWithin, dontPopulate, info);\n    }\n    return result;\n  }\n\n  override traversePreviousNode(skipHidden: boolean, dontPopulate?: boolean): DataGridNode<T>|null {\n    const result = super.traversePreviousNode(skipHidden, dontPopulate);\n    if (result && skipHidden &&\n        !(this.dataGrid as ViewportDataGrid<T>).testNodeWithFilters(result as ViewportDataGridNode<T>)) {\n      return result.traversePreviousNode(skipHidden, dontPopulate);\n    }\n    return result;\n  }\n\n  attached(): boolean {\n    const existingElement = this.existingElement();\n    return Boolean(this.dataGrid && existingElement?.parentElement);\n  }\n\n  override refresh(): void {\n    if (this.attached()) {\n      this.stale = true;\n      (this.dataGrid as ViewportDataGrid<T>).scheduleUpdate();\n    } else {\n      this.resetElement();\n    }\n  }\n\n  override reveal(): void {\n    (this.dataGrid as ViewportDataGrid<T>).revealViewportNode(this);\n  }\n\n  override recalculateSiblings(index: number): void {\n    this.clearFlatNodes();\n    super.recalculateSiblings(index);\n  }\n}\n", "// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport * as Platform from '../../../../core/platform/platform.js';\n\nimport {type ColumnDescriptor, type DataGridData, Events, type Parameters} from './DataGrid.js';\nimport {ViewportDataGrid, ViewportDataGridNode} from './ViewportDataGrid.js';\n\nexport class SortableDataGrid<T> extends ViewportDataGrid<SortableDataGridNode<T>> {\n  sortingFunction: <T>(a: SortableDataGridNode<T>, b: SortableDataGridNode<T>) => number;\n  constructor(dataGridParameters: Parameters) {\n    super(dataGridParameters);\n    this.sortingFunction = SortableDataGrid.TrivialComparator;\n    this.setRootNode((new SortableDataGridNode()));\n  }\n\n  static TrivialComparator<T>(_a: SortableDataGridNode<T>, _b: SortableDataGridNode<T>): number {\n    return 0;\n  }\n\n  static NumericComparator<T>(columnId: string, a: SortableDataGridNode<T>, b: SortableDataGridNode<T>): number {\n    const aValue = a.data[columnId];\n    const bValue = b.data[columnId];\n    const aNumber = Number(aValue instanceof Node ? aValue.textContent : aValue);\n    const bNumber = Number(bValue instanceof Node ? bValue.textContent : bValue);\n    return aNumber < bNumber ? -1 : (aNumber > bNumber ? 1 : 0);\n  }\n\n  static StringComparator<T>(columnId: string, a: SortableDataGridNode<T>, b: SortableDataGridNode<T>): number {\n    const aValue = a.data[columnId];\n    const bValue = b.data[columnId];\n    const aString = aValue instanceof Node ? aValue.textContent : String(aValue);\n    const bString = bValue instanceof Node ? bValue.textContent : String(bValue);\n    if (!aString || !bString) {\n      return 0;\n    }\n    return aString < bString ? -1 : (aString > bString ? 1 : 0);\n  }\n\n  static Comparator<T>(\n      comparator: (arg0: SortableDataGridNode<T>, arg1: SortableDataGridNode<T>) => number, reverseMode: boolean,\n      a: SortableDataGridNode<T>, b: SortableDataGridNode<T>): number {\n    if (a.isCreationNode && !b.isCreationNode) {\n      return 1;\n    }\n    if (!a.isCreationNode && b.isCreationNode) {\n      return -1;\n    }\n    return reverseMode ? comparator(b, a) : comparator(a, b);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static create<T>(columnNames: string[], values: any[], displayName: string):\n      SortableDataGrid<SortableDataGridNode<T>>|null {\n    const numColumns = columnNames.length;\n    if (!numColumns) {\n      return null;\n    }\n\n    const columns: ColumnDescriptor[] = [];\n    for (let i = 0; i < columnNames.length; ++i) {\n      const id = String(i);\n      columns.push(({id, title: columnNames[i], sortable: true} as ColumnDescriptor));\n    }\n\n    const nodes = [];\n    for (let i = 0; i < values.length / numColumns; ++i) {\n      const data: DataGridData = {};\n      for (let j = 0; j < columnNames.length; ++j) {\n        data[j] = values[numColumns * i + j];\n      }\n\n      const node = new SortableDataGridNode(data);\n      node.selectable = false;\n      nodes.push(node);\n    }\n\n    const dataGrid = new SortableDataGrid({displayName, columns});\n    const length = nodes.length;\n    const rootNode = dataGrid.rootNode();\n    for (let i = 0; i < length; ++i) {\n      rootNode.appendChild(nodes[i]);\n    }\n\n    dataGrid.addEventListener(Events.SORTING_CHANGED, sortDataGrid);\n\n    function sortDataGrid(): void {\n      const nodes = dataGrid.rootNode().children;\n      const sortColumnId = dataGrid.sortColumnId();\n      if (!sortColumnId) {\n        return;\n      }\n\n      let columnIsNumeric = true;\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].isCreationNode) {\n          continue;\n        }\n        const value = nodes[i].data[sortColumnId];\n        if (isNaN(value instanceof Node ? value.textContent : value)) {\n          columnIsNumeric = false;\n          break;\n        }\n      }\n\n      const comparator = columnIsNumeric ? SortableDataGrid.NumericComparator : SortableDataGrid.StringComparator;\n      dataGrid.sortNodes(comparator.bind(null, sortColumnId), !dataGrid.isSortOrderAscending());\n    }\n    return dataGrid;\n  }\n\n  insertChild(node: SortableDataGridNode<T>): void {\n    const root = (this.rootNode() as SortableDataGridNode<T>);\n    root.insertChildOrdered(node);\n  }\n\n  sortNodes(comparator: (arg0: SortableDataGridNode<T>, arg1: SortableDataGridNode<T>) => number, reverseMode: boolean):\n      void {\n    this.sortingFunction = SortableDataGrid.Comparator.bind(null, comparator, reverseMode);\n    this.rootNode().recalculateSiblings(0);\n    (this.rootNode() as SortableDataGridNode<T>).sortChildren();\n    this.scheduleUpdateStructure();\n  }\n}\n\nexport class SortableDataGridNode<T> extends ViewportDataGridNode<SortableDataGridNode<T>> {\n  insertChildOrdered(node: SortableDataGridNode<T>): void {\n    const dataGrid = (this.dataGrid as SortableDataGrid<T>| null);\n    if (dataGrid) {\n      this.insertChild(\n          node,\n          Platform.ArrayUtilities.upperBound(\n              (this.children as Array<SortableDataGridNode<T>>), node, dataGrid.sortingFunction));\n    }\n  }\n\n  sortChildren(): void {\n    const dataGrid = (this.dataGrid as SortableDataGrid<T>| null);\n    if (!dataGrid) {\n      return;\n    }\n    (this.children as Array<SortableDataGridNode<T>>).sort(dataGrid.sortingFunction);\n    for (let i = 0; i < this.children.length; ++i) {\n      const child = (this.children[i] as SortableDataGridNode<T>);\n      child.recalculateSiblings(i);\n    }\n    for (let i = 0; i < this.children.length; ++i) {\n      const child = (this.children[i] as SortableDataGridNode<T>);\n      child.sortChildren();\n    }\n  }\n}\n", "/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type * as Buttons from '../../../components/buttons/buttons.js';\nimport * as UI from '../../legacy.js';\n\nimport {DataGridNode} from './DataGrid.js';\n\nconst UIStrings = {\n  /**\n   * @description Shown in a table when there are too many results to show directly. The user can\n   * click this button to show more results. This will result in the UI showing X more results before\n   * the current position.\n   * @example {5} PH1\n   */\n  showDBefore: 'Show {PH1} before',\n  /**\n   * @description Shown in a table when there are too many results to show directly. The user can\n   * click this button to show more results. This will result in the UI showing X more results after\n   * the current position.\n   * @example {5} PH1\n   */\n  showDAfter: 'Show {PH1} after',\n  /**\n   *@description In a data grid, for a list of items with omitted items, display all omitted items\n   *@example {50} PH1\n   */\n  showAllD: 'Show all {PH1}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/data_grid/ShowMoreDataGridNode.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ntype ShowMoreDataGridNodeCallback = (arg0: number, arg1: number) => Promise<void>;\nexport class ShowMoreDataGridNode extends DataGridNode<ShowMoreDataGridNode> {\n  private readonly callback: ShowMoreDataGridNodeCallback;\n  private startPosition: number;\n  private endPosition: number;\n  private readonly chunkSize: number;\n  showNext: Buttons.Button.Button;\n  showAll: Buttons.Button.Button;\n  showLast: Buttons.Button.Button;\n  override selectable: boolean;\n  private hasCells?: boolean;\n\n  constructor(callback: ShowMoreDataGridNodeCallback, startPosition: number, endPosition: number, chunkSize: number) {\n    super({summaryRow: true}, false);\n    this.callback = callback;\n    this.startPosition = startPosition;\n    this.endPosition = endPosition;\n    this.chunkSize = chunkSize;\n\n    this.showNext = UI.UIUtils.createTextButton(i18nString(UIStrings.showDBefore, {PH1: this.chunkSize}));\n    this.showNext.addEventListener('click', this.showNextChunk.bind(this), false);\n\n    this.showAll = UI.UIUtils.createTextButton('');\n    this.showAll.addEventListener('click', this.showAllInternal.bind(this), false);\n\n    this.showLast = UI.UIUtils.createTextButton(i18nString(UIStrings.showDAfter, {PH1: this.chunkSize}));\n    this.showLast.addEventListener('click', this.showLastChunk.bind(this), false);\n\n    this.updateLabels();\n    this.selectable = false;\n  }\n\n  private showNextChunk(): void {\n    void this.callback(this.startPosition, this.startPosition + this.chunkSize);\n  }\n\n  private showAllInternal(): void {\n    void this.callback(this.startPosition, this.endPosition);\n  }\n\n  private showLastChunk(): void {\n    void this.callback(this.endPosition - this.chunkSize, this.endPosition);\n  }\n\n  private updateLabels(): void {\n    const totalSize = this.endPosition - this.startPosition;\n    if (totalSize > this.chunkSize) {\n      this.showNext.classList.remove('hidden');\n      this.showLast.classList.remove('hidden');\n    } else {\n      this.showNext.classList.add('hidden');\n      this.showLast.classList.add('hidden');\n    }\n    this.showAll.textContent = i18nString(UIStrings.showAllD, {PH1: totalSize});\n  }\n\n  override createCells(element: Element): void {\n    this.hasCells = false;\n    super.createCells(element);\n  }\n\n  override createCell(columnIdentifier: string): HTMLElement {\n    const cell = this.createTD(columnIdentifier);\n    cell.classList.add('show-more');\n    if (!this.hasCells) {\n      this.hasCells = true;\n      if (this.depth && this.dataGrid) {\n        cell.style.setProperty('padding-left', (this.depth * this.dataGrid.indentWidth) + 'px');\n      }\n      cell.appendChild(this.showNext);\n      cell.appendChild(this.showAll);\n      cell.appendChild(this.showLast);\n    }\n    return cell;\n  }\n\n  setStartPosition(from: number): void {\n    this.startPosition = from;\n    this.updateLabels();\n  }\n\n  setEndPosition(to: number): void {\n    this.endPosition = to;\n    this.updateLabels();\n  }\n\n  override nodeSelfHeight(): number {\n    return 40;\n  }\n\n  dispose(): void {\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport type * as TextUtils from '../../../../models/text_utils/text_utils.js';\nimport * as UI from '../../../../ui/legacy/legacy.js';\n\nimport dataGridStyles from './dataGrid.css.js';\nimport {Align, type ColumnDescriptor, DataType, Events as DataGridEvents} from './DataGrid.js';\nimport {SortableDataGrid, SortableDataGridNode} from './SortableDataGrid.js';\n\nconst DUMMY_COLUMN_ID = 'dummy';  // SortableDataGrid.create requires at least one column.\n\n/**\n * A data grid (table) element that can be used as progressive enhancement over a <table> element.\n *\n * It can be used as\n * ```\n * <devtools-data-grid striped name=${'Display Name'}>\n *   <table>\n *     <tr>\n *       <th id=\"column-1\">Column 1</th>\n *       <th id=\"column-2\">Column 2</th>\n *     </tr>\n *     <tr>\n *       <td>Value 1</td>\n *       <td>Value 2</td>\n *     </tr>\n *   </table>\n * </devtools-data-grid>\n * ```\n * where a row with <th> configures the columns and rows with <td> provide the data.\n *\n * Under the hood it uses SortableDataGrid, which extends ViewportDataGrid so only\n * visible rows are layed out and sorting is provided out of the box.\n *\n * @attr striped\n * @attr displayName\n * @prop filters\n */\nclass DataGridElement extends HTMLElement {\n  static readonly observedAttributes = ['striped', 'name', 'inline'];\n\n  #dataGrid = SortableDataGrid.create([DUMMY_COLUMN_ID], [], '') as SortableDataGrid<DataGridElementNode>;\n  #mutationObserver = new MutationObserver(this.#onChange.bind(this));\n  #resizeObserver = new ResizeObserver(() => {\n    if (!this.inline) {\n      this.#dataGrid.onResize();\n    }\n  });\n  #shadowRoot: ShadowRoot;\n  #columns: ColumnDescriptor[] = [];\n  #hideableColumns = new Set<string>();\n  #hiddenColumns = new Set<string>();\n  #usedCreationNode: DataGridElementNode|null = null;\n\n  constructor() {\n    super();\n    // TODO(dsv): Move this to the data_grid.css once all the data grid usage is migrated to this web component.\n    this.style.display = 'flex';\n    this.#dataGrid.element.style.flex = 'auto';\n\n    this.#shadowRoot = UI.UIUtils.createShadowRootWithCoreStyles(this, {delegatesFocus: true, cssFile: dataGridStyles});\n    this.#shadowRoot.appendChild(this.#dataGrid.element);\n\n    this.#dataGrid.addEventListener(\n        DataGridEvents.SELECTED_NODE,\n        e => this.dispatchEvent(new CustomEvent('select', {detail: (e.data as DataGridElementNode).configElement})));\n    this.#dataGrid.addEventListener(\n        DataGridEvents.DESELECTED_NODE, () => this.dispatchEvent(new CustomEvent('select', {detail: null})));\n    this.#dataGrid.addEventListener(DataGridEvents.SORTING_CHANGED, () => this.dispatchEvent(new CustomEvent('sort', {\n      detail: {columnId: this.#dataGrid.sortColumnId(), ascending: this.#dataGrid.isSortOrderAscending()}\n    })));\n    this.#dataGrid.setRowContextMenuCallback((menu, node) => {\n      this.dispatchEvent(\n          new CustomEvent('contextmenu', {detail: {menu, element: (node as DataGridElementNode).configElement}}));\n    });\n    this.#dataGrid.setHeaderContextMenuCallback(menu => {\n      for (const column of this.#columns) {\n        if (this.#hideableColumns.has(column.id)) {\n          menu.defaultSection().appendCheckboxItem(\n              this.#dataGrid.columns[column.id].title as Platform.UIString.LocalizedString, () => {\n                if (this.#hiddenColumns.has(column.id)) {\n                  this.#hiddenColumns.delete(column.id);\n                } else {\n                  this.#hiddenColumns.add(column.id);\n                }\n                this.#dataGrid.setColumnsVisibility(\n                    new Set(this.#columns.map(({id}) => id).filter(column => !this.#hiddenColumns.has(column))));\n              }, {checked: !this.#hiddenColumns.has(column.id)});\n        }\n      }\n    });\n\n    this.#mutationObserver.observe(this, {childList: true, attributes: true, subtree: true, characterData: true});\n    this.#resizeObserver.observe(this);\n    this.#updateColumns();\n    this.#addNodes(this.querySelectorAll('tr'));\n  }\n\n  attributeChangedCallback(name: string, oldValue: string|null, newValue: string|null): void {\n    if (oldValue === newValue) {\n      return;\n    }\n    switch (name) {\n      case 'striped':\n        this.#dataGrid.setStriped(newValue !== 'true');\n        break;\n      case 'name':\n        this.#dataGrid.displayName = newValue ?? '';\n        break;\n      case 'inline':\n        this.#dataGrid.renderInline();\n        break;\n    }\n  }\n\n  set striped(striped: boolean) {\n    this.toggleAttribute('striped', striped);\n  }\n\n  get striped(): boolean {\n    return hasBooleanAttribute(this, 'striped');\n  }\n\n  set inline(striped: boolean) {\n    this.toggleAttribute('inline', striped);\n  }\n\n  get inline(): boolean {\n    return hasBooleanAttribute(this, 'inline');\n  }\n\n  set displayName(displayName: string) {\n    this.setAttribute('name', displayName);\n  }\n\n  get displayName(): string|null {\n    return this.getAttribute('name');\n  }\n\n  set filters(filters: TextUtils.TextUtils.ParsedFilter[]) {\n    this.#dataGrid.setFilters(filters);\n    this.#dataGrid.element.setAttribute('aria-rowcount', String(this.#dataGrid.getNumberOfRows()));\n  }\n\n  get columns(): ColumnDescriptor[] {\n    return this.#columns;\n  }\n\n  #updateColumns(): void {\n    for (const column of Object.keys(this.#dataGrid.columns)) {\n      this.#dataGrid.removeColumn(column);\n    }\n    this.#hideableColumns.clear();\n    this.#columns = [];\n    let hasEditableColumn = false;\n    for (const column of this.querySelectorAll('th[id]') || []) {\n      const id = column.id as Lowercase<string>;\n      let title = column.textContent?.trim() || '';\n      const titleDOMFragment = column.firstElementChild ? document.createDocumentFragment() : undefined;\n      if (titleDOMFragment) {\n        title = '';\n        for (const child of column.children) {\n          titleDOMFragment.appendChild(child.cloneNode(true));\n          title += child.shadowRoot ? child.shadowRoot.textContent : child.textContent;\n        }\n      }\n      const sortable = hasBooleanAttribute(column, 'sortable');\n      const width = column.getAttribute('width') ?? undefined;\n      const fixedWidth = column.hasAttribute('fixed');\n      let align = column.getAttribute('align') ?? undefined;\n      if (align !== Align.CENTER && align !== Align.RIGHT) {\n        align = undefined;\n      }\n      const dataType = column.getAttribute('type') === 'boolean' ? DataType.BOOLEAN : DataType.STRING;\n      const weight = parseFloat(column.getAttribute('weight') || '') ?? undefined;\n      const editable = column.hasAttribute('editable');\n      if (editable) {\n        hasEditableColumn = true;\n      }\n      const columnDescriptor = {\n        id,\n        title: title as Platform.UIString.LocalizedString,\n        titleDOMFragment,\n        sortable,\n        fixedWidth,\n        width,\n        align,\n        weight,\n        editable,\n        dataType,\n      };\n      this.#dataGrid.addColumn(columnDescriptor);\n      this.#columns.push(columnDescriptor);\n      if (hasBooleanAttribute(column, 'hideable')) {\n        this.#hideableColumns.add(id);\n      }\n    }\n    const visibleColumns = new Set(this.#columns.map(({id}) => id).filter(id => !this.#hiddenColumns.has(id)));\n    if (visibleColumns.size) {\n      this.#dataGrid.setColumnsVisibility(visibleColumns);\n    }\n    this.#dataGrid.setEditCallback(hasEditableColumn ? this.#editCallback.bind(this) : undefined, INTERNAL_TOKEN);\n    this.#dataGrid.deleteCallback = hasEditableColumn ? this.#deleteCallback.bind(this) : undefined;\n  }\n\n  #needUpdateColumns(mutationList: MutationRecord[]): boolean {\n    for (const mutation of mutationList) {\n      for (const element of [...mutation.removedNodes, ...mutation.addedNodes]) {\n        if (!(element instanceof HTMLElement)) {\n          continue;\n        }\n        if (element.nodeName === 'TH' || element.querySelector('th')) {\n          return true;\n        }\n      }\n      if (mutation.target instanceof HTMLElement && mutation.target.closest('th')) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  #getDataRows(nodes: NodeList): HTMLElement[] {\n    return [...nodes]\n        .flatMap(node => {\n          if (node instanceof HTMLTableRowElement) {\n            return [node];\n          }\n          if (node instanceof HTMLElement) {\n            return [...node.querySelectorAll('tr')];\n          }\n          return [] as HTMLElement[];\n        })\n        .filter(node => node.querySelector('td') && !hasBooleanAttribute(node, 'placeholder'));\n  }\n\n  #findNextExistingNode(element: Element): DataGridElementNode|null {\n    for (let e = element.nextElementSibling; e; e = e.nextElementSibling) {\n      const nextNode = DataGridElementNode.get(e);\n      if (nextNode) {\n        return nextNode;\n      }\n    }\n    return null;\n  }\n\n  #addNodes(nodes: NodeList): void {\n    for (const element of this.#getDataRows(nodes)) {\n      const parentNode = this.#dataGrid.rootNode();  // TODO(dsv): support nested nodes\n      const nextNode = this.#findNextExistingNode(element);\n      const index = nextNode ? parentNode.children.indexOf(nextNode) : parentNode.children.length;\n      const node = new DataGridElementNode(element, this);\n      parentNode.insertChild(node, index);\n      if (hasBooleanAttribute(element, 'selected')) {\n        node.select();\n      }\n      if (hasBooleanAttribute(element, 'dirty')) {\n        node.setDirty(true);\n      }\n      if (hasBooleanAttribute(element, 'inactive')) {\n        node.setInactive(true);\n      }\n      if (hasBooleanAttribute(element, 'highlighted')) {\n        node.setHighlighted(true);\n      }\n    }\n  }\n\n  #removeNodes(nodes: NodeList): void {\n    for (const element of this.#getDataRows(nodes)) {\n      const node = DataGridElementNode.get(element);\n      if (node) {\n        node.remove();\n      }\n    }\n  }\n\n  #updateNode(node: Node, attributeName: string|null): void {\n    while (node?.parentNode && !(node instanceof HTMLElement)) {\n      node = node.parentNode;\n    }\n    const dataRow = node instanceof HTMLElement ? node.closest('tr') : null;\n    const dataGridNode = dataRow ? DataGridElementNode.get(dataRow) : null;\n    if (dataGridNode && dataRow) {\n      if (attributeName === 'selected') {\n        if (hasBooleanAttribute(dataRow, 'selected')) {\n          dataGridNode.select();\n        } else {\n          dataGridNode.deselect();\n        }\n      } else if (attributeName === 'dirty') {\n        dataGridNode.setDirty(hasBooleanAttribute(dataRow, 'dirty'));\n      } else if (attributeName === 'inactive') {\n        dataGridNode.setInactive(hasBooleanAttribute(dataRow, 'inactive'));\n      } else if (attributeName === 'highlighted') {\n        dataGridNode.setHighlighted(hasBooleanAttribute(dataRow, 'highlighted'));\n      } else {\n        dataGridNode.refresh();\n      }\n    }\n  }\n\n  #updateCreationNode(): void {\n    if (this.#usedCreationNode) {\n      DataGridElementNode.remove(this.#usedCreationNode);\n      this.#usedCreationNode = null;\n      this.#dataGrid.creationNode = undefined;\n    }\n    const placeholder = this.querySelector('tr[placeholder]');\n    if (!placeholder) {\n      this.#dataGrid.creationNode?.remove();\n      this.#dataGrid.creationNode = undefined;\n    } else if (!DataGridElementNode.get(placeholder)) {\n      this.#dataGrid.creationNode?.remove();\n      const node = new DataGridElementNode(placeholder, this);\n      this.#dataGrid.creationNode = node;\n      this.#dataGrid.rootNode().appendChild(node);\n    }\n  }\n\n  #onChange(mutationList: MutationRecord[]): void {\n    if (this.#needUpdateColumns(mutationList)) {\n      this.#updateColumns();\n    }\n    this.#updateCreationNode();\n\n    for (const mutation of mutationList) {\n      this.#removeNodes(mutation.removedNodes);\n      this.#addNodes(mutation.addedNodes);\n      this.#updateNode(mutation.target, mutation.attributeName);\n    }\n  }\n\n  #editCallback(\n      node: DataGridElementNode, columnId: string, valueBeforeEditing: string, newText: string,\n      moveDirection?: string): void {\n    if (node.isCreationNode) {\n      this.#usedCreationNode = node;\n      let hasNextEditableColumn = false;\n      if (moveDirection) {\n        const index = this.#columns.findIndex(({id}) => id === columnId);\n        const nextColumns =\n            moveDirection === 'forward' ? this.#columns.slice(index + 1) : this.#columns.slice(0, index);\n        hasNextEditableColumn = nextColumns.some(({editable}) => editable);\n      }\n      if (!hasNextEditableColumn) {\n        node.deselect();\n      }\n      return;\n    }\n\n    this.dispatchEvent(\n        new CustomEvent('edit', {detail: {node: node.configElement, columnId, valueBeforeEditing, newText}}));\n  }\n\n  #deleteCallback(node: DataGridElementNode): void {\n    this.dispatchEvent(new CustomEvent('delete', {detail: node.configElement}));\n  }\n\n  override addEventListener<K extends keyof HTMLElementEventMap>(\n      type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => void,\n      options?: boolean|AddEventListenerOptions|undefined): void;\n  override addEventListener(\n      type: string, listener: EventListenerOrEventListenerObject,\n      options?: boolean|AddEventListenerOptions|undefined): void;\n  override addEventListener(...args: Parameters<HTMLElement['addEventListener']>): void {\n    super.addEventListener(...args);\n    if (args[0] === 'refresh') {\n      this.#dataGrid.refreshCallback = this.#refreshCallback.bind(this);\n    }\n  }\n\n  #refreshCallback(): void {\n    this.dispatchEvent(new CustomEvent('refresh'));\n  }\n}\n\nclass DataGridElementNode extends SortableDataGridNode<DataGridElementNode> {\n  static #elementToNode = new WeakMap<Element, DataGridElementNode>();\n  #configElement: Element;\n  #dataGridElement: DataGridElement;\n  #addedClasses = new Set<string>();\n  constructor(configElement: Element, dataGridElement: DataGridElement) {\n    super();\n    this.#configElement = configElement;\n    DataGridElementNode.#elementToNode.set(configElement, this);\n    this.#dataGridElement = dataGridElement;\n    this.#updateData();\n    this.isCreationNode = hasBooleanAttribute(this.#configElement, 'placeholder');\n  }\n\n  static get(configElement: Element|undefined): DataGridElementNode|undefined {\n    return configElement && DataGridElementNode.#elementToNode.get(configElement);\n  }\n\n  get configElement(): Element {\n    return this.#configElement;\n  }\n\n  #updateData(): void {\n    const cells = this.#configElement.querySelectorAll('td');\n    for (let i = 0; i < cells.length; ++i) {\n      const cell = cells[i];\n      const column = this.#dataGridElement.columns[i];\n      if (column.dataType === DataType.BOOLEAN) {\n        this.data[column.id] = hasBooleanAttribute(cell, 'data-value');\n      } else {\n        this.data[column.id] = cell.dataset.value ?? cell.textContent ?? '';\n      }\n    }\n  }\n\n  override createElement(): HTMLElement {\n    const element = super.createElement();\n    element.addEventListener('click', this.#onRowMouseEvent.bind(this));\n    element.addEventListener('mouseenter', this.#onRowMouseEvent.bind(this));\n    element.addEventListener('mouseleave', this.#onRowMouseEvent.bind(this));\n    if (this.#configElement.hasAttribute('style')) {\n      element.setAttribute('style', this.#configElement.getAttribute('style') || '');\n    }\n    for (const classToAdd of this.#configElement.classList) {\n      element.classList.add(classToAdd);\n    }\n    return element;\n  }\n\n  override refresh(): void {\n    this.#updateData();\n    super.refresh();\n    const existingElement = this.existingElement();\n    if (!existingElement) {\n      return;\n    }\n    if (this.#configElement.hasAttribute('style')) {\n      existingElement.setAttribute('style', this.#configElement.getAttribute('style') || '');\n    }\n    for (const addedClass of this.#addedClasses) {\n      existingElement.classList.remove(addedClass);\n    }\n    for (const classToAdd of this.#configElement.classList) {\n      existingElement.classList.add(classToAdd);\n    }\n  }\n\n  #onRowMouseEvent(event: MouseEvent): void {\n    let currentElement = event.target as HTMLElement;\n    const childIndexesOnPathToRoot: number[] = [];\n    while (currentElement?.parentElement && currentElement !== event.currentTarget) {\n      childIndexesOnPathToRoot.push([...currentElement.parentElement.children].indexOf(currentElement));\n      currentElement = currentElement.parentElement;\n    }\n    if (!currentElement) {\n      throw new Error('Cell click event target not found in the data grid');\n    }\n    let targetInConfigRow = this.#configElement;\n    for (const index of childIndexesOnPathToRoot.reverse()) {\n      targetInConfigRow = targetInConfigRow.children[index];\n    }\n    if (targetInConfigRow instanceof HTMLElement) {\n      targetInConfigRow?.dispatchEvent(new MouseEvent(event.type, {bubbles: true, composed: true}));\n    }\n  }\n\n  override createCells(element: Element): void {\n    const configCells = [...this.#configElement.querySelectorAll('td')];\n    const hasCollspan = configCells.some(cell => cell.hasAttribute('colspan'));\n    if (!hasCollspan) {\n      super.createCells(element);\n    } else {\n      for (const cell of configCells) {\n        element.appendChild(cell.cloneNode(true));\n      }\n    }\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    const index = this.#dataGridElement.columns.findIndex(({id}) => id === columnId);\n    if (this.#dataGridElement.columns[index].dataType === DataType.BOOLEAN) {\n      return super.createCell(columnId);\n    }\n    const cell = this.createTD(columnId);\n    cell.setAttribute('part', `${columnId}-column`);\n    if (this.isCreationNode) {\n      return cell;\n    }\n    const configCell = this.#configElement.querySelectorAll('td')[index];\n    if (!configCell) {\n      throw new Error(`Column ${columnId} not found in the data grid`);\n    }\n    for (const child of configCell.childNodes) {\n      cell.appendChild(child.cloneNode(true));\n    }\n    for (const cssClass of configCell.classList) {\n      cell.classList.add(cssClass);\n    }\n    cell.title = configCell.title;\n    if (configCell.hasAttribute('aria-label')) {\n      this.setCellAccessibleName(configCell.getAttribute('aria-label') || '', cell, columnId);\n    }\n    const style = configCell.getAttribute('style');\n    if (style !== null) {\n      cell.setAttribute('style', style);\n    }\n\n    return cell;\n  }\n\n  static remove(node: DataGridElementNode): void {\n    DataGridElementNode.#elementToNode.delete(node.#configElement);\n    node.remove();\n  }\n\n  override deselect(): void {\n    super.deselect();\n    if (this.isCreationNode) {\n      this.#dataGridElement.dispatchEvent(new CustomEvent('create', {detail: this.data}));\n    }\n  }\n}\n\ncustomElements.define('devtools-data-grid', DataGridElement);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-data-grid': DataGridElement;\n  }\n}\n\nfunction hasBooleanAttribute(element: Element, name: string): boolean {\n  return element.hasAttribute(name) && element.getAttribute(name) !== 'false';\n}\n\nexport interface DataGridInternalToken {\n  token: 'DataGridInternalToken';\n}\n\nconst INTERNAL_TOKEN: DataGridInternalToken = {\n  token: 'DataGridInternalToken'\n};\n"],
  "mappings": "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",
  "names": ["Platform", "Order", "Common", "Platform", "Platform", "nodes", "i18n", "UI", "UIStrings", "str_", "i18nString", "UI", "column"]
}
