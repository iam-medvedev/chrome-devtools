{"version":3,"file":"ViewportDataGrid.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/data_grid/ViewportDataGrid.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport type * as TextUtils from '../../../../models/text_utils/text_utils.js';\nimport * as RenderCoordinator from '../../../components/render_coordinator/render_coordinator.js';\n\nimport {type DataGridData, DataGridImpl, DataGridNode, type Parameters} from './DataGrid.js';\n\nlet nextId = 0;\n\nexport class ViewportDataGrid<T> extends Common.ObjectWrapper.eventMixin<EventTypes, typeof DataGridImpl>(\n    DataGridImpl)<ViewportDataGridNode<T>> {\n  private readonly onScrollBound: (event: Event|null) => void;\n  private visibleNodes: Array<ViewportDataGridNode<T>>;\n  /** A datagrid preference to express that the grid represents an updating log of rows (eg Network panel request log, websocket messages).\n   * If `true`, the datagrid will mostly keep the scroll at the bottom, so new items are visible.\n   * If the data is sorted descending (eg Performance Call Tree, heap snapshot), keep the default of `false`.\n   */\n  enableAutoScrollToBottom = false;\n  /** When true, the datagrid will manipulate the scrollTop to focus on the bottom, mostly so new additions are visible.\n   * Some actions will unset this, like revealing or expanding a particular node.\n   * Only matters if enableAutoScrollToBottom is true. */\n  keepScrollingToBottom = false;\n  private updateIsFromUser: boolean;\n  private lastScrollTop: number;\n  private firstVisibleIsStriped: boolean;\n  private isStriped: boolean;\n  private filters: readonly TextUtils.TextUtils.ParsedFilter[] = [];\n  private id = nextId++;\n\n  constructor(dataGridParameters: Parameters) {\n    super(dataGridParameters);\n\n    this.onScrollBound = this.onScroll.bind(this);\n    this.scrollContainer.addEventListener('scroll', this.onScrollBound, true);\n\n    this.visibleNodes = [];\n    this.inline = false;\n\n    this.updateIsFromUser = false;\n    this.lastScrollTop = 0;\n    this.firstVisibleIsStriped = false;\n    this.isStriped = false;\n\n    this.setRootNode(new ViewportDataGridNode());\n  }\n\n  override setStriped(striped: boolean): void {\n    this.isStriped = striped;\n    let startsWithOdd = true;\n    if (this.visibleNodes.length) {\n      const allChildren = (this.rootNode() as ViewportDataGridNode<T>).flatChildren();\n      startsWithOdd = Boolean(allChildren.indexOf(this.visibleNodes[0]));\n    }\n    this.updateStripesClass(startsWithOdd);\n  }\n\n  setFilters(filters: readonly TextUtils.TextUtils.ParsedFilter[]): void {\n    if (this.filters === filters) {\n      return;\n    }\n    this.filters = filters;\n    this.scheduleUpdate();\n  }\n\n  private updateStripesClass(startsWithOdd: boolean): void {\n    this.element.classList.toggle('striped-data-grid', !startsWithOdd && this.isStriped);\n    this.element.classList.toggle('striped-data-grid-starts-with-odd', startsWithOdd && this.isStriped);\n  }\n\n  setScrollContainer(scrollContainer: HTMLElement): void {\n    this.scrollContainer.removeEventListener('scroll', this.onScrollBound, true);\n    this.scrollContainerInternal = scrollContainer;\n    this.scrollContainer.addEventListener('scroll', this.onScrollBound, true);\n  }\n\n  override onResize(): void {\n    if (this.keepScrollingToBottom) {\n      this.scrollContainer.scrollTop = this.scrollContainer.scrollHeight - this.scrollContainer.clientHeight;\n    }\n    this.scheduleUpdate();\n    super.onResize();\n  }\n\n  setEnableAutoScrollToBottom(stick: boolean): void {\n    this.keepScrollingToBottom = this.enableAutoScrollToBottom = stick;\n  }\n\n  private onScroll(_event: Event|null): void {\n    if (this.lastScrollTop !== this.scrollContainer.scrollTop) {\n      this.scheduleUpdate(true);\n    }\n  }\n\n  scheduleUpdateStructure(): void {\n    this.scheduleUpdate();\n  }\n\n  scheduleUpdate(isFromUser?: boolean): void {\n    this.updateIsFromUser = this.updateIsFromUser || Boolean(isFromUser);\n    void RenderCoordinator.write(`ViewportDataGrid.render ${this.id}`, this.update.bind(this));\n  }\n\n  // TODO(allada) This should be fixed to never be needed. It is needed right now for network because removing\n  // elements happens followed by a scheduleRefresh() which causes white space to be visible, but the waterfall\n  // updates instantly.\n  updateInstantly(): void {\n    this.update();\n  }\n\n  override renderInline(): void {\n    this.inline = true;\n    super.renderInline();\n    this.update();\n  }\n\n  private getStringifiedCellValues(data: DataGridData, columns: Set<string>): string {\n    return JSON\n        .stringify(Object.entries(data).filter(([key]) => columns.has(key)).map(([, value]) => {\n          if (value instanceof Node) {\n            return value.textContent;\n          }\n          return String(value);\n        }))\n        .toLowerCase();\n  }\n\n  private testNodeWithFilter(node: ViewportDataGridNode<T>, filter: TextUtils.TextUtils.ParsedFilter): boolean {\n    let rowMatchesFilter = false;\n\n    const {key, text, negative, regex} = filter;\n\n    const dataToTest = this.getStringifiedCellValues(\n        node.data, key ? new Set(key.split(',')) : new Set(this.visibleColumnsArray.map(column => column.id)));\n\n    if (regex) {\n      rowMatchesFilter = regex.test(dataToTest);\n    } else if (text) {\n      rowMatchesFilter = dataToTest.includes(text.toLowerCase());\n    }\n\n    // If `negative` is set to `true`, that means we have to flip the final\n    // result, because the filter is matching anything that doesn't match. e.g.\n    // {text: 'foo', negative: false} matches rows that contain the text `foo`\n    // but {text: 'foo', negative: true} matches rows that do NOT contain the\n    // text `foo` so if a filter is marked as negative, we first match against\n    // that filter, and then we flip it here.\n    return negative ? !rowMatchesFilter : rowMatchesFilter;\n  }\n\n  testNodeWithFilters(node: ViewportDataGridNode<T>): boolean {\n    for (const filter of this.filters) {\n      const nodeMatchesFilter = this.testNodeWithFilter(node, filter);\n      if (!nodeMatchesFilter) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private calculateVisibleNodes(clientHeight: number, scrollTop: number): {\n    topPadding: number,\n    bottomPadding: number,\n    contentHeight: number,\n    visibleNodes: Array<ViewportDataGridNode<T>>,\n    offset: number,\n  } {\n    const nodes =\n        (this.rootNode() as ViewportDataGridNode<T>).flatChildren().filter(this.testNodeWithFilters.bind(this));\n\n    if (this.inline) {\n      return {topPadding: 0, bottomPadding: 0, contentHeight: 0, visibleNodes: nodes, offset: 0};\n    }\n\n    const size = nodes.length;\n    let i = 0;\n    let y = 0;\n\n    for (; i < size && y + nodes[i].nodeSelfHeight() < scrollTop; ++i) {\n      y += nodes[i].nodeSelfHeight();\n    }\n    const start = i;\n    const topPadding = y;\n\n    for (; i < size && y < scrollTop + clientHeight; ++i) {\n      y += nodes[i].nodeSelfHeight();\n    }\n    const end = i;\n\n    let bottomPadding = 0;\n    for (; i < size; ++i) {\n      bottomPadding += nodes[i].nodeSelfHeight();\n    }\n\n    if (this.enableAutoScrollToBottom) {\n      // If we're scrolled to the very end, keep the scroll viewport focused to the end (as new items arrive)\n      this.keepScrollingToBottom = end === nodes.length;\n    }\n\n    return {\n      topPadding,\n      bottomPadding,\n      contentHeight: y - topPadding,\n      visibleNodes: nodes.slice(start, end),\n      offset: start,\n    };\n  }\n\n  override getNumberOfRows(): number {\n    return (this.rootNode() as ViewportDataGridNode<T>)\n        .flatChildren()\n        .filter(this.testNodeWithFilters.bind(this))\n        .length;\n  }\n\n  private contentHeight(): number {\n    const nodes = (this.rootNode() as ViewportDataGridNode<T>).flatChildren();\n    let result = 0;\n    for (let i = 0, size = nodes.length; i < size; ++i) {\n      result += nodes[i].nodeSelfHeight();\n    }\n    return result;\n  }\n\n  // The datagrids assume a fixed height of rows, typically 20px. see nodeSelfHeight() and calculateVisibleNodes().\n  private update(): void {\n    // Visual height of visible data rows\n    const clientHeight = this.scrollContainer.clientHeight - this.headerHeightInScroller();\n    // The hypothetical height of all data rows summed.\n    const contentHeight = this.contentHeight();\n    const currentScrollTop = this.scrollContainer.scrollTop;\n    // Scrolltop if scrolled to the very bottom\n    const maxScrollTop = Math.max(0, contentHeight - clientHeight);\n    let nextScrollTop = currentScrollTop;\n    if (!this.updateIsFromUser && this.keepScrollingToBottom) {\n      nextScrollTop = maxScrollTop;\n    }\n    this.updateIsFromUser = false;\n    nextScrollTop = Math.min(maxScrollTop, nextScrollTop);\n\n    const viewportState = this.calculateVisibleNodes(clientHeight, nextScrollTop);\n    const visibleNodes = viewportState.visibleNodes;\n    const visibleNodesSet = new Set<ViewportDataGridNode<T>>(visibleNodes);\n\n    for (let i = 0; i < this.visibleNodes.length; ++i) {\n      const oldNode = this.visibleNodes[i];\n      if (!visibleNodesSet.has(oldNode) && oldNode.attached()) {\n        const element = oldNode.existingElement();\n        if (element) {\n          element.remove();\n        }\n      }\n    }\n\n    let previousElement = this.topFillerRowElement();\n    const tBody = this.dataTableBody;\n    let offset = viewportState.offset;\n\n    if (visibleNodes.length) {\n      const nodes = (this.rootNode() as ViewportDataGridNode<T>).flatChildren();\n      const index = nodes.indexOf(visibleNodes[0]);\n      this.updateStripesClass(Boolean(index % 2));\n      if (this.keepScrollingToBottom && index !== -1 && Boolean(index % 2) !== this.firstVisibleIsStriped) {\n        offset += 1;\n      }\n    }\n\n    this.firstVisibleIsStriped = Boolean(offset % 2);\n\n    for (let i = 0; i < visibleNodes.length; ++i) {\n      const node = visibleNodes[i];\n      const element = (node.element());\n      node.setStriped((offset + i) % 2 === 0);\n      if (element !== previousElement.nextSibling) {\n        tBody.insertBefore(element, previousElement.nextSibling);\n      }\n      node.revealed = true;\n      previousElement = element;\n    }\n\n    this.setVerticalPadding(viewportState.topPadding, viewportState.bottomPadding);\n    this.lastScrollTop = nextScrollTop;\n    if (nextScrollTop !== currentScrollTop) {\n      this.scrollContainer.scrollTop = nextScrollTop;\n    }\n    const contentFits =\n        viewportState.contentHeight <= clientHeight && viewportState.topPadding + viewportState.bottomPadding === 0;\n    if (contentFits !== this.element.classList.contains('data-grid-fits-viewport')) {\n      this.element.classList.toggle('data-grid-fits-viewport', contentFits);\n      this.updateWidths();\n    }\n    this.visibleNodes = visibleNodes;\n    this.dispatchEventToListeners(Events.VIEWPORT_CALCULATED);\n  }\n\n  revealViewportNode(node: ViewportDataGridNode<T>): void {\n    const nodes = (this.rootNode() as ViewportDataGridNode<T>).flatChildren();\n    const index = nodes.indexOf(node);\n    if (index === -1) {\n      return;\n    }\n    let fromY = 0;\n    for (let i = 0; i < index; ++i) {\n      fromY += nodes[i].nodeSelfHeight();\n    }\n    const toY = fromY + node.nodeSelfHeight();\n    let scrollTop: number = this.scrollContainer.scrollTop;\n    const visibleHeight = this.scrollContainer.offsetHeight - this.headerHeightInScroller();\n    if (scrollTop > fromY) {\n      scrollTop = fromY;\n      this.keepScrollingToBottom = false;\n    } else if (scrollTop + visibleHeight < toY) {\n      scrollTop = toY - visibleHeight;\n    }\n    this.scrollContainer.scrollTop = scrollTop;\n  }\n}\n\nexport const enum Events {\n  VIEWPORT_CALCULATED = 'ViewportCalculated',\n}\n\nexport interface EventTypes {\n  [Events.VIEWPORT_CALCULATED]: void;\n}\n\nexport class ViewportDataGridNode<T> extends DataGridNode<ViewportDataGridNode<T>> {\n  private stale: boolean;\n  private flatNodes: Array<ViewportDataGridNode<T>>|null;\n  private isStripedInternal: boolean;\n\n  constructor(data?: DataGridData|null, hasChildren?: boolean) {\n    super(data, hasChildren);\n    this.stale = false;\n    this.flatNodes = null;\n    this.isStripedInternal = false;\n  }\n\n  override element(): HTMLElement {\n    const existingElement = this.existingElement();\n    const element = existingElement || this.createElement();\n    if (!existingElement || this.stale) {\n      this.createCells(element);\n      this.stale = false;\n    }\n    return element;\n  }\n\n  override nodeSelfHeight(): number {\n    // Use the height of the first non-filler row.\n    const firstVisibleRow = this.dataGrid?.topFillerRow?.nextElementSibling;\n    const height = firstVisibleRow?.classList.contains('data-grid-data-grid-node') && firstVisibleRow.clientHeight;\n    return height || super.nodeSelfHeight();\n  }\n\n  setStriped(isStriped: boolean): void {\n    this.isStripedInternal = isStriped;\n    this.element().classList.toggle('odd', isStriped);\n  }\n\n  isStriped(): boolean {\n    return this.isStripedInternal;\n  }\n\n  clearFlatNodes(): void {\n    this.flatNodes = null;\n    const parent = (this.parent as ViewportDataGridNode<T>);\n    if (parent) {\n      parent.clearFlatNodes();\n    }\n  }\n\n  flatChildren(): Array<ViewportDataGridNode<T>> {\n    if (this.flatNodes) {\n      return this.flatNodes;\n    }\n    const flatNodes: Array<ViewportDataGridNode<T>> = [];\n    const children = ([this.children] as Array<Array<ViewportDataGridNode<T>>>);\n    const counters: number[] = [0];\n    let depth = 0;\n    while (depth >= 0) {\n      if (children[depth].length <= counters[depth]) {\n        depth--;\n        continue;\n      }\n      const node = children[depth][counters[depth]++];\n      flatNodes.push(node);\n      if (node.expanded && node.children.length) {\n        depth++;\n        children[depth] = (node.children as Array<ViewportDataGridNode<T>>);\n        counters[depth] = 0;\n      }\n    }\n\n    this.flatNodes = flatNodes;\n    return flatNodes;\n  }\n\n  override insertChild(child: DataGridNode<ViewportDataGridNode<T>>, index: number): void {\n    this.clearFlatNodes();\n    if (child.parent === this) {\n      const currentIndex = this.children.indexOf(child);\n      if (currentIndex < 0) {\n        console.assert(false, 'Inconsistent DataGrid state');\n      }\n      if (currentIndex === index) {\n        return;\n      }\n      if (currentIndex < index) {\n        --index;\n      }\n    }\n    child.remove();\n    child.parent = this;\n    child.dataGrid = this.dataGrid;\n    if (!this.children.length) {\n      this.setHasChildren(true);\n    }\n    this.children.splice(index, 0, child);\n    child.recalculateSiblings(index);\n    if (this.expanded && this.dataGrid) {\n      (this.dataGrid as ViewportDataGrid<T>).scheduleUpdateStructure();\n    }\n  }\n\n  override removeChild(child: DataGridNode<ViewportDataGridNode<T>>): void {\n    if (this.dataGrid) {\n      this.dataGrid.updateSelectionBeforeRemoval(child, false);\n    }\n    this.clearFlatNodes();\n    if (child.previousSibling) {\n      child.previousSibling.nextSibling = child.nextSibling;\n    }\n    if (child.nextSibling) {\n      child.nextSibling.previousSibling = child.previousSibling;\n    }\n    if (child.parent !== this) {\n      throw new Error('removeChild: Node is not a child of this node.');\n    }\n\n    Platform.ArrayUtilities.removeElement(this.children, child, true);\n    (child as ViewportDataGridNode<T>).unlink();\n\n    if (!this.children.length) {\n      this.setHasChildren(false);\n    }\n    if (this.expanded && this.dataGrid) {\n      (this.dataGrid as ViewportDataGrid<T>).scheduleUpdateStructure();\n    }\n  }\n\n  override removeChildren(): void {\n    if (this.dataGrid) {\n      this.dataGrid.updateSelectionBeforeRemoval(this, true);\n    }\n    this.clearFlatNodes();\n    for (let i = 0; i < this.children.length; ++i) {\n      (this.children[i] as ViewportDataGridNode<T>).unlink();\n    }\n    this.children = ([] as Array<ViewportDataGridNode<T>>);\n\n    if (this.expanded && this.dataGrid) {\n      (this.dataGrid as ViewportDataGrid<T>).scheduleUpdateStructure();\n    }\n  }\n\n  private unlink(): void {\n    const existingElement = this.existingElement();\n    if (this.attached() && existingElement) {\n      existingElement.remove();\n    }\n    this.resetNode();\n  }\n\n  override collapse(): void {\n    if (!this.expanded) {\n      return;\n    }\n    this.clearFlatNodes();\n    this.expandedInternal = false;\n    const existingElement = this.existingElement();\n    if (existingElement) {\n      existingElement.classList.remove('expanded');\n    }\n    if (this.selected) {\n      (this.dataGrid as ViewportDataGrid<T>).announceSelectedGridNode();\n    }\n    (this.dataGrid as ViewportDataGrid<T>).scheduleUpdateStructure();\n  }\n\n  override expand(): void {\n    if (this.expanded) {\n      return;\n    }\n    (this.dataGrid as ViewportDataGrid<T>).keepScrollingToBottom = false;\n    this.clearFlatNodes();\n    super.expand();\n    (this.dataGrid as ViewportDataGrid<T>).scheduleUpdateStructure();\n  }\n\n  override traverseNextNode(skipHidden: boolean, stayWithin?: DataGridNode<T>|null, dontPopulate?: boolean, info?: {\n    depthChange: number,\n  }): DataGridNode<T>|null {\n    const result = super.traverseNextNode(skipHidden, stayWithin, dontPopulate, info);\n    if (result && skipHidden &&\n        !(this.dataGrid as ViewportDataGrid<T>).testNodeWithFilters(result as ViewportDataGridNode<T>)) {\n      return result.traverseNextNode(skipHidden, stayWithin, dontPopulate, info);\n    }\n    return result;\n  }\n\n  override traversePreviousNode(skipHidden: boolean, dontPopulate?: boolean): DataGridNode<T>|null {\n    const result = super.traversePreviousNode(skipHidden, dontPopulate);\n    if (result && skipHidden &&\n        !(this.dataGrid as ViewportDataGrid<T>).testNodeWithFilters(result as ViewportDataGridNode<T>)) {\n      return result.traversePreviousNode(skipHidden, dontPopulate);\n    }\n    return result;\n  }\n\n  attached(): boolean {\n    const existingElement = this.existingElement();\n    return Boolean(this.dataGrid && existingElement?.parentElement);\n  }\n\n  override refresh(): void {\n    if (this.attached()) {\n      this.stale = true;\n      (this.dataGrid as ViewportDataGrid<T>).scheduleUpdate();\n    } else {\n      this.resetElement();\n    }\n  }\n\n  override reveal(): void {\n    (this.dataGrid as ViewportDataGrid<T>).revealViewportNode(this);\n  }\n\n  override recalculateSiblings(index: number): void {\n    this.clearFlatNodes();\n    super.recalculateSiblings(index);\n  }\n}\n"]}