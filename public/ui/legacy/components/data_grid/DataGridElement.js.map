{"version":3,"file":"DataGridElement.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/data_grid/DataGridElement.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport type * as TextUtils from '../../../../models/text_utils/text_utils.js';\n\nimport dataGridStyles from './dataGrid.css.js';\nimport {Align, Events as DataGridEvents} from './DataGrid.js';\nimport {SortableDataGrid, SortableDataGridNode} from './SortableDataGrid.js';\n\nconst DUMMY_COLUMN_ID = 'dummy';  // SortableDataGrid.create requires at least one column.\n\n/**\n * A data grid (table) element that can be used as progressive enhancement over a <table> element.\n *\n * It can be used as\n * ```\n * <devtools-new-data-grid striped name=${'Display Name'}>\n *   <table>\n *     <tr>\n *       <th id=\"column-1\">Column 1</th>\n *       <th id=\"column-2\">Column 2</th>\n *     </tr>\n *     <tr>\n *       <td>Value 1</td>\n *       <td>Value 2</td>\n *     </tr>\n *   </table>\n * </devtools-new-data-grid>\n * ```\n * where a row with <th> configures the columns and rows with <td> provide the data.\n *\n * Under the hood it uses SortableDataGrid, which extends ViewportDataGrid so only\n * visible rows are layed out and sorting is provided out of the box.\n *\n * @attr striped\n * @attr displayName\n * @prop columnsOrder\n * @prop filters\n */\nclass DataGridElement extends HTMLElement {\n  static readonly observedAttributes = ['striped', 'name'];\n\n  #dataGrid = SortableDataGrid.create([DUMMY_COLUMN_ID], [], '') as SortableDataGrid<DataGridElementNode>;\n  #mutationObserver = new MutationObserver(this.#onChange.bind(this));\n  #shadowRoot: ShadowRoot;\n  #columnsOrder: string[] = [];\n\n  constructor() {\n    super();\n    // TODO(dsv): Move this to the data_grid.css once all the data grid usage is migrated to this web component.\n    this.style.display = 'flex';\n    this.#dataGrid.element.style.flex = 'auto';\n\n    this.#shadowRoot = this.attachShadow({mode: 'open', delegatesFocus: true});\n    this.#shadowRoot.appendChild(this.#dataGrid.element);\n    this.#shadowRoot.adoptedStyleSheets = [dataGridStyles];\n\n    this.#dataGrid.addEventListener(\n        DataGridEvents.SELECTED_NODE,\n        e => this.dispatchEvent(new CustomEvent('select', {detail: (e.data as DataGridElementNode).configElement})));\n    this.#dataGrid.addEventListener(\n        DataGridEvents.DESELECTED_NODE, () => this.dispatchEvent(new CustomEvent('select', {detail: null})));\n    this.#dataGrid.setRowContextMenuCallback((menu, node) => {\n      this.dispatchEvent(\n          new CustomEvent('contextmenu', {detail: {menu, element: (node as DataGridElementNode).configElement}}));\n    });\n\n    this.#mutationObserver.observe(this, {childList: true, attributes: true, subtree: true, characterData: true});\n    this.#updateColumns();\n    this.#addNodes(this.querySelectorAll('tr'));\n  }\n\n  attributeChangedCallback(name: string, oldValue: string|null, newValue: string|null): void {\n    if (oldValue === newValue) {\n      return;\n    }\n    switch (name) {\n      case 'striped':\n        this.#dataGrid.setStriped(newValue !== 'true');\n        break;\n      case 'name':\n        this.#dataGrid.displayName = newValue ?? '';\n        break;\n    }\n  }\n\n  set striped(striped: boolean) {\n    this.toggleAttribute('striped', striped);\n  }\n\n  get striped(): boolean {\n    return this.hasAttribute('striped');\n  }\n\n  set displayName(displayName: string) {\n    this.setAttribute('name', displayName);\n  }\n\n  get displayName(): string|null {\n    return this.getAttribute('name');\n  }\n\n  set filters(filters: TextUtils.TextUtils.ParsedFilter[]) {\n    this.#dataGrid.setFilters(filters);\n    this.#dataGrid.element.setAttribute('aria-rowcount', String(this.#dataGrid.getNumberOfRows()));\n  }\n\n  get columnsOrder(): string[] {\n    return this.#columnsOrder;\n  }\n\n  #updateColumns(): void {\n    for (const column of Object.keys(this.#dataGrid.columns)) {\n      this.#dataGrid.removeColumn(column);\n    }\n    this.#columnsOrder = [];\n    for (const column of this.querySelectorAll('th[id]') || []) {\n      const id = column.id as Lowercase<string>;\n      this.#columnsOrder.push(id);\n      const title = (column.textContent?.trim() || '') as Platform.UIString.LocalizedString;\n      const sortable = column.hasAttribute('sortable');\n      const width = column.getAttribute('width') ?? undefined;\n      const fixedWidth = column.hasAttribute('fixed');\n      let align = column.getAttribute('align') ?? undefined;\n      if (align !== Align.CENTER && align !== Align.RIGHT) {\n        align = undefined;\n      }\n      this.#dataGrid.addColumn({id, title, sortable, fixedWidth, width, align});\n    }\n    if (this.#columnsOrder.length) {\n      this.#dataGrid.setColumnsVisibility(new Set(this.#columnsOrder));\n    }\n  }\n\n  #needUpdateColumns(mutationList: MutationRecord[]): boolean {\n    for (const mutation of mutationList) {\n      for (const element of [...mutation.removedNodes, ...mutation.addedNodes]) {\n        if (element.nodeName === 'TH') {\n          return true;\n        }\n      }\n      if (mutation.target instanceof HTMLElement && mutation.target.closest('th')) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  #addNodes(nodes: NodeList): void {\n    for (const element of nodes) {\n      if (element instanceof HTMLTableRowElement && element.querySelector('td')) {\n        const parentNode = this.#dataGrid.rootNode();  // TODO(dsv): support nested nodes\n        const nextNode = element.nextElementSibling ? DataGridElementNode.get(element.nextElementSibling) : null;\n        const index = nextNode ? parentNode.children.indexOf(nextNode) : parentNode.children.length;\n        const node = new DataGridElementNode(element, this);\n        parentNode.insertChild(node, index);\n        if (element.hasAttribute('selected')) {\n          node.select();\n        }\n      }\n    }\n  }\n\n  #removeNodes(nodes: NodeList): void {\n    for (const element of nodes) {\n      if (element instanceof HTMLTableRowElement && element.querySelector('td')) {\n        const node = DataGridElementNode.get(element);\n        if (node) {\n          node.remove();\n        }\n      }\n    }\n  }\n\n  #updateNode(node: Node): void {\n    const dataRow = node instanceof HTMLElement ? node.closest('tr') : null;\n    const dataGridNode = dataRow ? DataGridElementNode.get(dataRow) : null;\n    if (dataGridNode) {\n      dataGridNode.refresh();\n    }\n  }\n\n  #onChange(mutationList: MutationRecord[]): void {\n    if (this.#needUpdateColumns(mutationList)) {\n      this.#updateColumns();\n    }\n\n    for (const mutation of mutationList) {\n      this.#removeNodes(mutation.removedNodes);\n      this.#addNodes(mutation.addedNodes);\n      this.#updateNode(mutation.target);\n    }\n  }\n}\n\nclass DataGridElementNode extends SortableDataGridNode<DataGridElementNode> {\n  static #elementToNode = new WeakMap<Element, DataGridElementNode>();\n  #configElement: Element;\n  #dataGridElement: DataGridElement;\n  constructor(configElement: Element, dataGridElement: DataGridElement) {\n    super();\n    this.#configElement = configElement;\n    DataGridElementNode.#elementToNode.set(configElement, this);\n    this.#dataGridElement = dataGridElement;\n    this.#updateData();\n  }\n\n  static get(configElement: Element|undefined): DataGridElementNode|undefined {\n    return configElement && DataGridElementNode.#elementToNode.get(configElement);\n  }\n\n  get configElement(): Element {\n    return this.#configElement;\n  }\n\n  #updateData(): void {\n    const cells = this.#configElement.querySelectorAll('td');\n    for (let i = 0; i < cells.length; ++i) {\n      const cell = cells[i];\n      const columnId = this.#dataGridElement.columnsOrder[i];\n      this.data[columnId] = cell.dataset.value ?? cell.textContent ?? '';\n    }\n  }\n\n  override refresh(): void {\n    this.#updateData();\n    if (this.#configElement.hasAttribute('selected')) {\n      this.select();\n    }\n    super.refresh();\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    const cell = this.createTD(columnId);\n    const index = this.#dataGridElement.columnsOrder.indexOf(columnId);\n    const configCell = this.#configElement.querySelectorAll('td')[index];\n    if (!configCell) {\n      throw new Error(`Column ${columnId} not found in the data grid`);\n    }\n    for (const child of configCell.childNodes) {\n      cell.appendChild(child.cloneNode(true));\n    }\n    for (const cssClass of configCell.classList) {\n      cell.classList.add(cssClass);\n    }\n    cell.title = configCell.title;\n    if (configCell.hasAttribute('aria-label')) {\n      this.setCellAccessibleName(configCell.getAttribute('aria-label') || '', cell, columnId);\n    }\n\n    return cell;\n  }\n}\n\n// TODO(dsv): Rename to devtools-data-grid once the other one is removed.\ncustomElements.define('devtools-new-data-grid', DataGridElement);\n"]}