{"version":3,"file":"FormatPickerContextMenu.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/color_picker/FormatPickerContextMenu.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as IconButton from '../../../components/icon_button/icon_button.js';\nimport * as UI from '../../legacy.js';\n\nconst UIStrings = {\n  /**\n   *@description Tooltip text describing that a color was clipped after conversion to match the target gamut\n   *@example {rgb(255 255 255)} PH1\n   */\n  colorClippedTooltipText: 'This color was clipped to match the format\\'s gamut. The actual result was {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/legacy/components/color_picker/FormatPickerContextMenu.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ntype OnSelectFn = (color: Common.Color.Color) => void;\n\nexport class FormatPickerContextMenu {\n  #color: Common.Color.Color;\n\n  constructor(color: Common.Color.Color) {\n    this.#color = color;\n  }\n\n  async show(e: Event, onSelect: OnSelectFn): Promise<void> {\n    let resolveShowPromise: (() => void)|undefined = undefined;\n    const showPromise = new Promise<void>(resolve => {\n      resolveShowPromise = resolve;\n    });\n\n    const legacyFormats = [\n      Common.Color.Format.HEX,\n      Common.Color.Format.HEXA,\n      Common.Color.Format.RGB,\n      Common.Color.Format.RGBA,\n      Common.Color.Format.HSL,\n      Common.Color.Format.HWB,\n    ];\n    const modernFormats = [\n      Common.Color.Format.LCH,\n      Common.Color.Format.OKLCH,\n      Common.Color.Format.LAB,\n      Common.Color.Format.OKLAB,\n      Common.Color.Format.SRGB,\n      Common.Color.Format.SRGB_LINEAR,\n      Common.Color.Format.DISPLAY_P3,\n      Common.Color.Format.A98_RGB,\n      Common.Color.Format.PROPHOTO_RGB,\n      Common.Color.Format.REC_2020,\n      Common.Color.Format.XYZ,\n      Common.Color.Format.XYZ_D50,\n      Common.Color.Format.XYZ_D65,\n    ];\n    const menu = new UI.ContextMenu.ContextMenu(e, {onSoftMenuClosed: () => resolveShowPromise?.()});\n    const legacySection = menu.section('legacy');\n    const wideSection = menu.section('wide');\n    const colorFunctionSection = menu.section('color-function').appendSubMenuItem('color()', false, 'color').section();\n\n    if (!(this.#color instanceof Common.Color.Nickname)) {\n      const nickname = this.#color.asLegacyColor().nickname();\n      if (nickname) {\n        this.addColorToSection(nickname, legacySection, onSelect);\n      }\n    }\n\n    if (!(this.#color instanceof Common.Color.ShortHex)) {\n      const shortHex =\n          this.#color.as((this.#color.alpha ?? 1) === 1 ? Common.Color.Format.HEX : Common.Color.Format.HEXA)\n                            .shortHex();\n      if (shortHex) {\n        this.addColorToSection(shortHex, legacySection, onSelect);\n      }\n    }\n\n    for (const format of [...legacyFormats, ...modernFormats]) {\n      if (format === this.#color.format()) {\n        continue;\n      }\n      const newColor = this.#color.as(format);\n      const section = legacyFormats.includes(format)     ? legacySection :\n          newColor instanceof Common.Color.ColorFunction ? colorFunctionSection :\n                                                           wideSection;\n      this.addColorToSection(newColor, section, onSelect);\n    }\n\n    await menu.show();\n    await showPromise;\n  }\n\n  addColorToSection(newColor: Common.Color.Color, section: UI.ContextMenu.Section, onSelect: OnSelectFn): void {\n    if (newColor instanceof Common.Color.Legacy) {\n      const originalHasAlpha = (this.#color.alpha ?? 1) !== 1;\n      const isAlphaFormat = newColor.alpha !== null;\n\n      // When the original color has alpha, only print alpha legacy formats. Otherwise, only print non-alpha legacy\n      // formats.\n      if (isAlphaFormat !== originalHasAlpha) {\n        return;\n      }\n    }\n    const label = newColor.asString();\n    if (!label) {\n      return;\n    }\n    let icon = undefined;\n    if (newColor.isGamutClipped()) {\n      icon = new IconButton.Icon.Icon();\n      icon.data = {\n        iconName: 'warning',\n        color: 'var(--icon-default)',\n        width: '16px',\n        height: '16px',\n      };\n      icon.style.marginLeft = '1px';\n      icon.style.marginTop = '-1px';\n      icon.style.minWidth = '16px';\n      icon.style.minHeight = '16px';\n    }\n    const tooltip =\n        icon ? i18nString(UIStrings.colorClippedTooltipText, {PH1: newColor.getAsRawString() ?? 'none'}) : undefined;\n\n    const handler = (): void => onSelect(newColor);\n\n    section.appendItem(\n        label, handler,\n        {additionalElement: icon, tooltip, jslogContext: newColor.isGamutClipped() ? 'color' : 'clipped-color'});\n  }\n}\n"]}