{"version":3,"file":"ContrastInfo.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/color_picker/ContrastInfo.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\n\nexport class ContrastInfo extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #isNull: boolean;\n  #contrastRatio: number|null;\n  #contrastRatioAPCA: number|null;\n  private contrastRatioThresholds: Record<string, number>|null;\n  readonly #contrastRatioAPCAThreshold: number|null;\n  private fgColor: Common.Color.Legacy|null;\n  #bgColor: Common.Color.Legacy|null;\n  #colorFormat: Common.Color.Format|undefined;\n  constructor(contrastInfo: ContrastInfoType|null) {\n    super();\n    this.#isNull = true;\n    this.#contrastRatio = null;\n    this.#contrastRatioAPCA = null;\n    this.contrastRatioThresholds = null;\n    this.#contrastRatioAPCAThreshold = 0;\n    this.fgColor = null;\n    this.#bgColor = null;\n\n    if (!contrastInfo) {\n      return;\n    }\n\n    if (!contrastInfo.computedFontSize || !contrastInfo.computedFontWeight) {\n      return;\n    }\n\n    this.#isNull = false;\n    this.contrastRatioThresholds =\n        Common.ColorUtils.getContrastThreshold(contrastInfo.computedFontSize, contrastInfo.computedFontWeight);\n    this.#contrastRatioAPCAThreshold =\n        Common.ColorUtils.getAPCAThreshold(contrastInfo.computedFontSize, contrastInfo.computedFontWeight);\n\n    if (!contrastInfo.backgroundColors || contrastInfo.backgroundColors.length !== 1) {\n      return;\n    }\n    const bgColorText = contrastInfo.backgroundColors[0];\n    const bgColor = Common.Color.parse(bgColorText)?.asLegacyColor();\n    if (bgColor) {\n      this.#setBgColor(bgColor);\n    }\n  }\n\n  isNull(): boolean {\n    return this.#isNull;\n  }\n\n  setColor(fgColor: Common.Color.Legacy, colorFormat?: Common.Color.Format): void {\n    this.fgColor = fgColor;\n    this.#colorFormat = colorFormat;\n    this.updateContrastRatio();\n    this.dispatchEventToListeners(Events.CONTRAST_INFO_UPDATED);\n  }\n\n  colorFormat(): Common.Color.Format|undefined {\n    return this.#colorFormat;\n  }\n\n  color(): Common.Color.Legacy|null {\n    return this.fgColor;\n  }\n\n  contrastRatio(): number|null {\n    return this.#contrastRatio;\n  }\n\n  contrastRatioAPCA(): number|null {\n    return this.#contrastRatioAPCA;\n  }\n\n  contrastRatioAPCAThreshold(): number|null {\n    return this.#contrastRatioAPCAThreshold;\n  }\n\n  setBgColor(bgColor: Common.Color.Legacy): void {\n    this.#setBgColor(bgColor);\n    this.dispatchEventToListeners(Events.CONTRAST_INFO_UPDATED);\n  }\n\n  #setBgColor(bgColor: Common.Color.Legacy): void {\n    this.#bgColor = bgColor;\n\n    if (!this.fgColor) {\n      return;\n    }\n\n    const fgRGBA = this.fgColor.rgba();\n\n    // If we have a semi-transparent background color over an unknown\n    // background, draw the line for the \"worst case\" scenario: where\n    // the unknown background is the same color as the text.\n    if (bgColor.hasAlpha()) {\n      const blendedRGBA = Common.ColorUtils.blendColors(bgColor.rgba(), fgRGBA);\n      this.#bgColor = new Common.Color.Legacy(blendedRGBA, Common.Color.Format.RGBA);\n    }\n\n    this.#contrastRatio = Common.ColorUtils.contrastRatio(fgRGBA, this.#bgColor.rgba());\n    this.#contrastRatioAPCA = Common.ColorUtils.contrastRatioAPCA(this.fgColor.rgba(), this.#bgColor.rgba());\n  }\n\n  bgColor(): Common.Color.Legacy|null {\n    return this.#bgColor;\n  }\n\n  private updateContrastRatio(): void {\n    if (!this.#bgColor || !this.fgColor) {\n      return;\n    }\n    this.#contrastRatio = Common.ColorUtils.contrastRatio(this.fgColor.rgba(), this.#bgColor.rgba());\n    this.#contrastRatioAPCA = Common.ColorUtils.contrastRatioAPCA(this.fgColor.rgba(), this.#bgColor.rgba());\n  }\n\n  contrastRatioThreshold(level: string): number|null {\n    if (!this.contrastRatioThresholds) {\n      return null;\n    }\n    return this.contrastRatioThresholds[level];\n  }\n}\n\nexport const enum Events {\n  CONTRAST_INFO_UPDATED = 'ContrastInfoUpdated',\n}\n\nexport interface EventTypes {\n  [Events.CONTRAST_INFO_UPDATED]: void;\n}\n\nexport interface ContrastInfoType {\n  backgroundColors: string[]|null;\n  computedFontSize: string;\n  computedFontWeight: string;\n}\n"]}