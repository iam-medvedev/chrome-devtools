{"version":3,"file":"Spectrum.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/color_picker/Spectrum.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,mCAAmC,CAAC;AAC5D,OAAO,EACL,sBAAsB,EACtB,oBAAoB,GACrB,MAAM,2CAA2C,CAAC;AACnD,OAAO,KAAK,EAAE,MAAM,iBAAiB,CAAC;AAEtC,OAAO,KAAK,WAAW,MAAM,mBAAmB,CAAC;AAEjD,MAAM,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,yBAAyB,CAAuB,CAAC;AAC3F,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,cAAc,CAAuB,CAAC;AAE1E,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,oBAAoB,EAAE,CAAC;QAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC;QACtB,MAAM,cAAc,GAAG,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAC,CAAC,CAAC;QAC7E,EAAE,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,cAAc,EAAC,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,sBAAsB,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,qEAAqE,EAAE,GAAG,EAAE;YAC7E,MAAM,QAAQ,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YAErD,QAAQ,CAAC,QAAQ,CAAC,cAAc,oDAAiC,CAAC;YAElE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,gCAAgC,CAAC,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iFAAiF,EAAE,GAAG,EAAE;YACzF,MAAM,QAAQ,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YAErD,QAAQ,CAAC,QAAQ,CAAC,QAAQ,sCAA0B,CAAC;YAErD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,gCAAgC,CAAC,CAAC,CAAC;QACzF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport {\n  deinitializeGlobalVars,\n  initializeGlobalVars,\n} from '../../../../testing/EnvironmentHelpers.js';\nimport * as UI from '../../legacy.js';\n\nimport * as ColorPicker from './color_picker.js';\n\nconst displayP3Color = Common.Color.parse('color(display-p3 1 1 1)') as Common.Color.Color;\nconst rgbColor = Common.Color.parse('rgb(255 0 0)') as Common.Color.Color;\n\ndescribe('ColorPicker aka Spectrum', () => {\n  beforeEach(async () => {\n    await initializeGlobalVars();\n    const forceNew = true;\n    const actionRegistry = UI.ActionRegistry.ActionRegistry.instance({forceNew});\n    UI.ShortcutRegistry.ShortcutRegistry.instance({forceNew, actionRegistry});\n  });\n\n  afterEach(async () => {\n    await deinitializeGlobalVars();\n  });\n\n  describe('sRGB overlay', () => {\n    it('should show sRGB overlay when the format supports display-p3 colors', () => {\n      const spectrum = new ColorPicker.Spectrum.Spectrum();\n\n      spectrum.setColor(displayP3Color, Common.Color.Format.DISPLAY_P3);\n\n      assert.isNotNull(spectrum.contentElement.querySelector('devtools-spectrum-srgb-overlay'));\n    });\n\n    it('should not show sRGB overlay when the format doesn\\'t support display-p3 colors', () => {\n      const spectrum = new ColorPicker.Spectrum.Spectrum();\n\n      spectrum.setColor(rgbColor, Common.Color.Format.RGB);\n\n      assert.isNull(spectrum.contentElement.querySelector('devtools-spectrum-srgb-overlay'));\n    });\n  });\n});\n"]}