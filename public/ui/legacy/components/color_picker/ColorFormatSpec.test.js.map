{"version":3,"file":"ColorFormatSpec.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/color_picker/ColorFormatSpec.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport {assertNotNullOrUndefined} from '../../../../core/platform/platform.js';\n\nimport * as ColorPicker from './color_picker.js';\n\ndescribe('ColorFormatSpec for inputs', () => {\n  describe('rgb/rgba() format', () => {\n    it('should return rounded numbers between 0 - 255 as input values and rounded alpha', () => {\n      const color = Common.Color.parse('rgb(224.21 255 157 / 0.324)');\n      assertNotNullOrUndefined(color);\n\n      const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[Common.Color.Format.RGB];\n      const values = spec.toValues(color);\n\n      assert.deepEqual(values, ['224', '255', '157', '0.32']);\n    });\n\n    it('should create the color from the input values', () => {\n      const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[Common.Color.Format.RGB];\n\n      const color = spec.fromValues(['224', '211', '155', '1']);\n      assertNotNullOrUndefined(color);\n\n      const expectedColor = Common.Color.parse('rgb(224 211 155 / 1)');\n      assertNotNullOrUndefined(expectedColor);\n      assert.isTrue(color.equal(expectedColor));\n    });\n  });\n\n  describe('hsl/hsla() format', () => {\n    it('should return rounded numbers with percentages', () => {\n      const color = Common.Color.parse('hsl(225deg 6% 13% / 0.324)');\n      assertNotNullOrUndefined(color);\n\n      const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[Common.Color.Format.HSL];\n      const values = spec.toValues(color);\n\n      assert.deepEqual(values, ['225', '6%', '13%', '0.32']);\n    });\n\n    it('should create the color from the input values', () => {\n      const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[Common.Color.Format.HSL];\n\n      const color = spec.fromValues(['225', '6%', '13%', '0.32']);\n      assertNotNullOrUndefined(color);\n\n      const expectedColor = Common.Color.parse('hsl(225deg 6% 13% / 0.32)');\n      assertNotNullOrUndefined(expectedColor);\n\n      assert.isTrue(color.equal(expectedColor));\n    });\n  });\n\n  describe('hwb() format', () => {\n    it('should return rounded numbers with percentages', () => {\n      const color = Common.Color.parse('hwb(225deg 13% 86% / 0.32)');\n      assertNotNullOrUndefined(color);\n\n      const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[Common.Color.Format.HWB];\n      const values = spec.toValues(color);\n\n      assert.deepEqual(values, ['225', '13%', '86%', '0.32']);\n    });\n\n    it('should create the color from the input values', () => {\n      const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[Common.Color.Format.HWB];\n\n      const color = spec.fromValues(['225', '13%', '86%', '0.32']);\n      assertNotNullOrUndefined(color);\n\n      const expectedColor = Common.Color.parse('hwb(225deg 13% 86% / 0.32)');\n      assertNotNullOrUndefined(expectedColor);\n\n      assert.isTrue(color.equal(expectedColor));\n    });\n  });\n\n  describe('lch() format', () => {\n    it('should return values', () => {\n      const color = Common.Color.parse('lch(21 98 0)');\n      assertNotNullOrUndefined(color);\n\n      const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[Common.Color.Format.LCH];\n      const values = spec.toValues(color);\n\n      assert.deepEqual(values, ['21', '98', '0', '1']);\n    });\n\n    it('should create the color from the input values', () => {\n      const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[Common.Color.Format.LCH];\n\n      const color = spec.fromValues(['55', '98', '0', '0.32']);\n      assertNotNullOrUndefined(color);\n\n      const expectedColor = Common.Color.parse('lch(55% 98 0 / 0.32)');\n      assertNotNullOrUndefined(expectedColor);\n\n      assert.isTrue(color.equal(expectedColor));\n    });\n  });\n\n  describe('oklch() format', () => {\n    it('should return values', () => {\n      const color = Common.Color.parse('oklch(65% 0.26 20deg)');\n      assertNotNullOrUndefined(color);\n\n      const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[Common.Color.Format.OKLCH];\n      const values = spec.toValues(color);\n\n      assert.deepEqual(values, ['0.65', '0.26', '20', '1']);\n    });\n\n    it('should create the color from the input values', () => {\n      const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[Common.Color.Format.OKLCH];\n\n      const color = spec.fromValues(['0.65', '0.26', '20', '1']);\n      assertNotNullOrUndefined(color);\n\n      const expectedColor = Common.Color.parse('oklch(65% 0.26 20 / 1)');\n      assertNotNullOrUndefined(expectedColor);\n      assert.isTrue(color.equal(expectedColor));\n    });\n  });\n\n  describe('lab() format', () => {\n    it('should return values', () => {\n      const color = Common.Color.parse('lab(21 98 0)');\n      assertNotNullOrUndefined(color);\n\n      const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[Common.Color.Format.LAB];\n      const values = spec.toValues(color);\n\n      assert.deepEqual(values, ['21', '98', '0', '1']);\n    });\n\n    it('should create the color from the input values', () => {\n      const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[Common.Color.Format.LAB];\n\n      const color = spec.fromValues(['0.21', '98', '0', '1']);\n      assertNotNullOrUndefined(color);\n\n      const expectedColor = Common.Color.parse('lab(0.21 98 0 / 1)');\n      assertNotNullOrUndefined(expectedColor);\n      assert.isTrue(color.equal(expectedColor));\n    });\n  });\n\n  describe('oklab() format', () => {\n    it('should return values', () => {\n      const color = Common.Color.parse('oklab(0.12 0.47 -0.03)');\n      assertNotNullOrUndefined(color);\n\n      const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[Common.Color.Format.OKLAB];\n      const values = spec.toValues(color);\n\n      assert.deepEqual(values, ['0.12', '0.47', '-0.03', '1']);\n    });\n\n    it('should create the color from the input values', () => {\n      const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[Common.Color.Format.OKLAB];\n\n      const color = spec.fromValues(['0.12', '0.47', '-0.03', '1']);\n      assertNotNullOrUndefined(color);\n\n      const expectedColor = Common.Color.parse('oklab(0.12 0.47 -0.03 / 1)');\n      assertNotNullOrUndefined(expectedColor);\n      assert.isTrue(color.equal(expectedColor));\n    });\n  });\n\n  describe('color() function formats', () => {\n    it('should return values', () => {\n      for (const colorSpace\n               of [Common.Color.Format.SRGB, Common.Color.Format.SRGB_LINEAR, Common.Color.Format.DISPLAY_P3,\n                   Common.Color.Format.A98_RGB, Common.Color.Format.PROPHOTO_RGB, Common.Color.Format.REC_2020] as\n           const) {\n        const color = Common.Color.parse(`color(${colorSpace} 0.12 0.47 -0.03)`);\n        assertNotNullOrUndefined(color);\n\n        const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[colorSpace];\n        const values = spec.toValues(color);\n\n        assert.deepEqual(values, ['0.12', '0.47', '0', '1'], colorSpace);\n      }\n\n      for (const colorSpace of [Common.Color.Format.XYZ, Common.Color.Format.XYZ_D50, Common.Color.Format.XYZ_D65] as\n           const) {\n        const color = Common.Color.parse(`color(${colorSpace} 0.12 0.47 -0.03)`);\n        assertNotNullOrUndefined(color);\n\n        const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[colorSpace];\n        const values = spec.toValues(color);\n\n        assert.deepEqual(values, ['0.12', '0.47', '-0.03', '1'], colorSpace);\n      }\n    });\n\n    it('should create the color from the input values', () => {\n      for (const colorSpace\n               of [Common.Color.Format.SRGB, Common.Color.Format.SRGB_LINEAR, Common.Color.Format.DISPLAY_P3,\n                   Common.Color.Format.A98_RGB, Common.Color.Format.PROPHOTO_RGB, Common.Color.Format.REC_2020,\n                   Common.Color.Format.XYZ, Common.Color.Format.XYZ_D50, Common.Color.Format.XYZ_D65] as const) {\n        const spec = ColorPicker.ColorFormatSpec.colorFormatSpec[colorSpace];\n\n        const color = spec.fromValues(['0.12', '0.47', '0.1', '1']);\n        assertNotNullOrUndefined(color);\n\n        const expectedColor = Common.Color.parse(`color(${colorSpace} 0.12 0.47 0.1 / 1)`);\n        assertNotNullOrUndefined(expectedColor);\n        assert.isTrue(color.equal(expectedColor), `Colors were not equal for color format ${colorSpace}`);\n      }\n    });\n  });\n});\n"]}