{"version":3,"file":"ColorMixSwatch.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/inline_editor/ColorMixSwatch.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as Lit from '../../../lit/lit.js';\nimport * as VisualLogging from '../../../visual_logging/visual_logging.js';\n\nimport colorMixSwatchStylesRaw from './colorMixSwatch.css.js';\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst colorMixSwatchStyles = new CSSStyleSheet();\ncolorMixSwatchStyles.replaceSync(colorMixSwatchStylesRaw.cssContent);\n\nconst {html, render, Directives: {ref}} = Lit;\n\nexport class ColorMixChangedEvent extends Event {\n  static readonly eventName = 'colormixchanged';\n\n  data: {text: string};\n\n  constructor(text: string) {\n    super(ColorMixChangedEvent.eventName, {});\n    this.data = {text};\n  }\n}\n\nexport class ColorMixSwatch extends HTMLElement {\n  private readonly shadow = this.attachShadow({mode: 'open'});\n  private colorMixText = '';     // color-mix(in srgb, hotpink, white)\n  private firstColorText = '';   // hotpink\n  private secondColorText = '';  // white\n  #icon: HTMLElement|null = null;\n\n  constructor() {\n    super();\n    this.shadow.adoptedStyleSheets = [\n      colorMixSwatchStyles,\n    ];\n  }\n\n  mixedColor(): Common.Color.Color|null {\n    const colorText = this.#icon?.computedStyleMap().get('color')?.toString() ?? null;\n    return colorText ? Common.Color.parse(colorText) : null;\n  }\n\n  setFirstColor(text: string): void {\n    // We need to replace `colorMixText` because it is the CSS for the\n    // the middle section where we actually show the mixed colors.\n    // So, when a color changed, we need to update colorMixText to\n    // reflect the new color (not the old one).\n    if (this.firstColorText) {\n      this.colorMixText = this.colorMixText.replace(this.firstColorText, text);\n    }\n    this.firstColorText = text;\n    this.dispatchEvent(new ColorMixChangedEvent(this.colorMixText));\n    this.#render();\n  }\n\n  setSecondColor(text: string): void {\n    // We need to replace from the last to handle the same colors case\n    // i.e. replacing the second color of `color-mix(in srgb, red 50%, red 10%)`\n    // to `blue` should result in `color-mix(in srgb, red 50%, blue 10%)`.\n    if (this.secondColorText) {\n      this.colorMixText = Platform.StringUtilities.replaceLast(this.colorMixText, this.secondColorText, text);\n    }\n    this.secondColorText = text;\n    this.dispatchEvent(new ColorMixChangedEvent(this.colorMixText));\n    this.#render();\n  }\n\n  setColorMixText(text: string): void {\n    this.colorMixText = text;\n    this.dispatchEvent(new ColorMixChangedEvent(this.colorMixText));\n    this.#render();\n  }\n\n  getText(): string {\n    return this.colorMixText;\n  }\n\n  #render(): void {\n    if (!this.colorMixText || !this.firstColorText || !this.secondColorText) {\n      render(this.colorMixText, this.shadow, {host: this});\n      return;\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n\n    // Note that we use a <slot> with a default value here to display the color text. Consumers of this component are\n    // free to append any content to replace what is being shown here.\n    // Note also that whitespace between nodes is removed on purpose to avoid pushing these elements apart. Do not\n    // re-format the HTML code.\n    render(\n      html`<div class=\"swatch-icon\"\n      ${ref(e => {this.#icon = e as HTMLElement; })}\n      jslog=${VisualLogging.cssColorMix()}\n      style=\"--color: ${this.colorMixText}\">\n        <span class=\"swatch swatch-left\" id=\"swatch-1\" style=\"--color: ${this.firstColorText}\"></span>\n        <span class=\"swatch swatch-right\" id=\"swatch-2\" style=\"--color: ${this.secondColorText}\"></span>\n        <span class=\"swatch swatch-mix\" id=\"mix-result\" style=\"--color: ${this.colorMixText}\"></span></div>`,\n      this.shadow, {host: this});\n    // clang-format on\n  }\n}\n\ncustomElements.define('devtools-color-mix-swatch', ColorMixSwatch);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-color-mix-swatch': ColorMixSwatch;\n  }\n\n  interface HTMLElementEventMap {\n    [ColorMixChangedEvent.eventName]: ColorMixChangedEvent;\n  }\n}\n"]}