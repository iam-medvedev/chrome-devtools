{"version":3,"file":"CSSAnimationModel.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/inline_editor/CSSAnimationModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as InlineEditor from './inline_editor.js';\n\nconst {assert} = chai;\n\ndescribe('CSSAnimationModel', () => {\n  describe('with fill mode keywords', () => {\n    it('should parse a case with non-animation-name keywords from fill mode as longhand part and none as the animation name',\n       () => {\n         const cssAnimationModel =\n             InlineEditor.CSSAnimationModel.CSSAnimationModel.parse('3s backwards none', ['none']);\n\n         assert.deepEqual(cssAnimationModel.parts, [\n           {\n             type: InlineEditor.CSSAnimationModel.PartType.Text,\n             value: '3s',\n           },\n           {\n             type: InlineEditor.CSSAnimationModel.PartType.Text,\n             value: 'backwards',\n           },\n           {\n             type: InlineEditor.CSSAnimationModel.PartType.AnimationName,\n             value: 'none',\n           },\n         ]);\n       });\n\n    it('should parse a case with non-animation-name keywords from fill mode as longhand part and backwards as the animation name',\n       () => {\n         const cssAnimationModel =\n             InlineEditor.CSSAnimationModel.CSSAnimationModel.parse('3s none backwards', ['backwards']);\n\n         assert.deepEqual(cssAnimationModel.parts, [\n           {\n             type: InlineEditor.CSSAnimationModel.PartType.Text,\n             value: '3s',\n           },\n           {\n             type: InlineEditor.CSSAnimationModel.PartType.Text,\n             value: 'none',\n           },\n           {\n             type: InlineEditor.CSSAnimationModel.PartType.AnimationName,\n             value: 'backwards',\n           },\n         ]);\n       });\n\n    it('should parse a case with non-animation-name keywords from fill mode as longhand part and backwards as the animation name',\n       () => {\n         const cssAnimationModel = InlineEditor.CSSAnimationModel.CSSAnimationModel.parse('3s backwards', []);\n\n         assert.deepEqual(cssAnimationModel.parts, [\n           {\n             type: InlineEditor.CSSAnimationModel.PartType.Text,\n             value: '3s',\n           },\n           {\n             type: InlineEditor.CSSAnimationModel.PartType.Text,\n             value: 'backwards',\n           },\n         ]);\n       });\n  });\n\n  it('should parse a case with only time and animation name', () => {\n    const cssAnimationModel = InlineEditor.CSSAnimationModel.CSSAnimationModel.parse('3s slide-in', ['slide-in']);\n\n    assert.deepEqual(cssAnimationModel.parts, [\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: '3s',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.AnimationName,\n        value: 'slide-in',\n      },\n    ]);\n  });\n\n  it('should parse a case with non-animation-name keywords as corresponding longhand parts', () => {\n    const cssAnimationModel = InlineEditor.CSSAnimationModel.CSSAnimationModel.parse('3s linear none', []);\n\n    assert.deepEqual(cssAnimationModel.parts, [\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: '3s',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.EasingFunction,\n        value: 'linear',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: 'none',\n      },\n    ]);\n  });\n\n  it('should parse a case with variable and animation name', () => {\n    const cssAnimationModel =\n        InlineEditor.CSSAnimationModel.CSSAnimationModel.parse('3s var(--this-is-var) slide-in', ['slide-in']);\n\n    assert.deepEqual(cssAnimationModel.parts, [\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: '3s',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Variable,\n        value: 'var(--this-is-var)',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.AnimationName,\n        value: 'slide-in',\n      },\n    ]);\n  });\n\n  it('should parse a case with non-animation-name keywords as corresponding longhand parts', () => {\n    const cssAnimationModel = InlineEditor.CSSAnimationModel.CSSAnimationModel.parse('3s none linear', []);\n\n    assert.deepEqual(cssAnimationModel.parts, [\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: '3s',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: 'none',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.EasingFunction,\n        value: 'linear',\n      },\n    ]);\n  });\n\n  it('should parse a case with multiple single animations', () => {\n    const cssAnimationModel =\n        InlineEditor.CSSAnimationModel.CSSAnimationModel.parse('3s slide-in, 1s slide-out', ['slide-in', 'slide-out']);\n\n    assert.deepEqual(cssAnimationModel.parts, [\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: '3s',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.AnimationName,\n        value: 'slide-in',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: ',',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: '1s',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.AnimationName,\n        value: 'slide-out',\n      },\n    ]);\n  });\n\n  it('should parse a case with multiple single animations and keyword in the second animation', () => {\n    const cssAnimationModel =\n        InlineEditor.CSSAnimationModel.CSSAnimationModel.parse('3s linear linear, 1s linear', ['linear']);\n\n    assert.deepEqual(cssAnimationModel.parts, [\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: '3s',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.EasingFunction,\n        value: 'linear',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.AnimationName,\n        value: 'linear',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: ',',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: '1s',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.EasingFunction,\n        value: 'linear',\n      },\n    ]);\n  });\n\n  it('should parse a case with animation name as a keyword', () => {\n    const cssAnimationModel = InlineEditor.CSSAnimationModel.CSSAnimationModel.parse('3s linear linear', ['linear']);\n\n    assert.deepEqual(cssAnimationModel.parts, [\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: '3s',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.EasingFunction,\n        value: 'linear',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.AnimationName,\n        value: 'linear',\n      },\n    ]);\n  });\n\n  it('should parse a case without animation name (only keywords)', () => {\n    const cssAnimationModel = InlineEditor.CSSAnimationModel.CSSAnimationModel.parse('3s linear alternate', []);\n\n    assert.deepEqual(cssAnimationModel.parts, [\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: '3s',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.EasingFunction,\n        value: 'linear',\n      },\n      {\n        type: InlineEditor.CSSAnimationModel.PartType.Text,\n        value: 'alternate',\n      },\n    ]);\n  });\n\n  describe('easing function parsing', () => {\n    it('should parse a case with easing function keyword', () => {\n      const cssAnimationModel = InlineEditor.CSSAnimationModel.CSSAnimationModel.parse('3s linear', []);\n\n      assert.deepEqual(cssAnimationModel.parts, [\n        {\n          type: InlineEditor.CSSAnimationModel.PartType.Text,\n          value: '3s',\n        },\n        {\n          type: InlineEditor.CSSAnimationModel.PartType.EasingFunction,\n          value: 'linear',\n        },\n      ]);\n    });\n\n    it('should parse a case with easing function cubic-bezier', () => {\n      const cssAnimationModel =\n          InlineEditor.CSSAnimationModel.CSSAnimationModel.parse('3s cubic-bezier(0.25, 0.1, 0.25, 1)', []);\n\n      assert.deepEqual(cssAnimationModel.parts, [\n        {\n          type: InlineEditor.CSSAnimationModel.PartType.Text,\n          value: '3s',\n        },\n        {\n          type: InlineEditor.CSSAnimationModel.PartType.EasingFunction,\n          value: 'cubic-bezier(0.25, 0.1, 0.25, 1)',\n        },\n      ]);\n    });\n  });\n});\n"]}