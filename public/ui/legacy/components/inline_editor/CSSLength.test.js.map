{"version":3,"file":"CSSLength.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/inline_editor/CSSLength.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,oBAAoB,EAAC,MAAM,mCAAmC,CAAC;AAEvE,OAAO,KAAK,YAAY,MAAM,oBAAoB,CAAC;AAEnD,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,MAAM,EAAC,SAAS,EAAC,GAAG,YAAY,CAAC,SAAS,CAAC;IAE3C,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;QAClC,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAChC,SAAS,CAAC,IAAI,GAAG,EAAC,UAAU,EAAE,OAAO,EAAC,CAAC;QAEvC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,UAAW,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;QACvE,MAAM,YAAY,GAAG,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACnE,MAAM,CAAC,WAAW,CAAC,YAAa,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,MAAM,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;QAClC,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAChC,SAAS,CAAC,IAAI,GAAG,EAAC,UAAU,EAAE,YAAY,EAAC,CAAC;QAE5C,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,UAAW,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,YAAY,CAAC,CAAC;QAC5E,MAAM,YAAY,GAAG,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACnE,MAAM,CAAC,WAAW,CAAC,YAAa,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,MAAM,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;QAClC,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAChC,SAAS,CAAC,IAAI,GAAG,EAAC,UAAU,EAAE,QAAQ,EAAC,CAAC;QAExC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,UAAW,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,QAAQ,CAAC,CAAC;QACxE,MAAM,YAAY,GAAG,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACnE,MAAM,CAAC,WAAW,CAAC,YAAa,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,MAAM,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;QAClC,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAChC,SAAS,CAAC,IAAI,GAAG,EAAC,UAAU,EAAE,MAAM,EAAC,CAAC;QAEtC,MAAM,YAAY,GAAG,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACnE,YAAa,CAAC,aAAa,CAAC,IAAI,UAAU,CAAC,WAAW,EAAE,EAAC,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC;QACvE,wDAAwD;QACxD,MAAM,IAAI,OAAO,CAAO,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;QAE7D,QAAQ,CAAC,aAAa,CAAC,IAAI,UAAU,CAAC,WAAW,EAAE,EAAC,SAAS,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC;QACpE,MAAM,CAAC,WAAW,CAAC,YAAa,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAEpD,QAAQ,CAAC,aAAa,CAAC,IAAI,UAAU,CAAC,WAAW,EAAE,EAAC,SAAS,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;QACrF,MAAM,CAAC,WAAW,CAAC,YAAa,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAEpD,QAAQ,CAAC,aAAa,CAAC,IAAI,UAAU,CAAC,WAAW,EAAE,EAAC,SAAS,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;QAClF,MAAM,CAAC,WAAW,CAAC,YAAa,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;QAClC,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAChC,SAAS,CAAC,IAAI,GAAG,EAAC,UAAU,EAAE,OAAO,EAAC,CAAC;QAEvC,MAAM,YAAY,GAAG,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACnE,YAAa,CAAC,aAAa,CAAC,IAAI,UAAU,CAAC,WAAW,EAAE,EAAC,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC;QACvE,wDAAwD;QACxD,MAAM,IAAI,OAAO,CAAO,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;QAE7D,QAAQ,CAAC,aAAa,CAAC,IAAI,UAAU,CAAC,WAAW,EAAE,EAAC,SAAS,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;QAClF,MAAM,CAAC,WAAW,CAAC,YAAa,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {renderElementIntoDOM} from '../../../../testing/DOMHelpers.js';\n\nimport * as InlineEditor from './inline_editor.js';\n\ndescribe('CSSLength', () => {\n  const {CSSLength} = InlineEditor.CSSLength;\n\n  it('can render CSSLength component correctly', () => {\n    const component = new CSSLength();\n    renderElementIntoDOM(component);\n    component.data = {lengthText: '42rem'};\n\n    assert.strictEqual(component.shadowRoot!.textContent?.trim(), '42rem');\n    const valueElement = component.shadowRoot!.querySelector('.value');\n    assert.strictEqual(valueElement!.textContent, '42');\n  });\n\n  it('correctly preserves lengths in decimal notation', () => {\n    const component = new CSSLength();\n    renderElementIntoDOM(component);\n    component.data = {lengthText: '.0000001px'};\n\n    assert.strictEqual(component.shadowRoot!.textContent?.trim(), '.0000001px');\n    const valueElement = component.shadowRoot!.querySelector('.value');\n    assert.strictEqual(valueElement!.textContent, '.0000001');\n  });\n\n  it('correctly preserves lengths in exponential notation', () => {\n    const component = new CSSLength();\n    renderElementIntoDOM(component);\n    component.data = {lengthText: '1e-7vw'};\n\n    assert.strictEqual(component.shadowRoot!.textContent?.trim(), '1e-7vw');\n    const valueElement = component.shadowRoot!.querySelector('.value');\n    assert.strictEqual(valueElement!.textContent, '1e-7');\n  });\n\n  it('correctly increments and decrements lengths via dragging', async () => {\n    const component = new CSSLength();\n    renderElementIntoDOM(component);\n    component.data = {lengthText: '42px'};\n\n    const valueElement = component.shadowRoot!.querySelector('.value');\n    valueElement!.dispatchEvent(new MouseEvent('mousedown', {clientX: 1}));\n    // Wait enough to let CSSLength think it is not a click.\n    await new Promise<void>(res => setTimeout(() => res(), 400));\n\n    document.dispatchEvent(new MouseEvent('mousemove', {movementX: 1}));\n    assert.strictEqual(valueElement!.textContent, '43');\n\n    document.dispatchEvent(new MouseEvent('mousemove', {movementX: -1, shiftKey: true}));\n    assert.strictEqual(valueElement!.textContent, '33');\n\n    document.dispatchEvent(new MouseEvent('mousemove', {movementX: 1, altKey: true}));\n    assert.strictEqual(valueElement!.textContent, '33.1');\n  });\n\n  it('correctly increments by 0.1 with Alt key held', async () => {\n    const component = new CSSLength();\n    renderElementIntoDOM(component);\n    component.data = {lengthText: '100px'};\n\n    const valueElement = component.shadowRoot!.querySelector('.value');\n    valueElement!.dispatchEvent(new MouseEvent('mousedown', {clientX: 1}));\n    // Wait enough to let CSSLength think it is not a click.\n    await new Promise<void>(res => setTimeout(() => res(), 400));\n\n    document.dispatchEvent(new MouseEvent('mousemove', {movementX: 1, altKey: true}));\n    assert.strictEqual(valueElement!.textContent, '100.1');\n  });\n});\n"]}