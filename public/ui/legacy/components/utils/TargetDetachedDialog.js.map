{"version":3,"file":"TargetDetachedDialog.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/utils/TargetDetachedDialog.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,GAAG,MAAM,6BAA6B,CAAC;AAGnD,OAAO,KAAK,EAAE,MAAM,iBAAiB,CAAC;AAEtC,MAAM,OAAO,oBAAqB,SAAQ,GAAG,CAAC,QAAQ,CAAC,QAAc;IAC3D,MAAM,CAAC,iBAAiB,CAAoB;IACpD,YAAY,MAAyB;QACnC,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,MAAM,CAAC,2BAA2B,CAAC,IAAI,CAAC,CAAC;QACzC,KAAK,MAAM,CAAC,cAAc,EAAE,CAAC,aAAa,EAAE,CAAC;QAC7C,yDAAyD;QACzD,IAAI,MAAM,CAAC,YAAY,EAAE,EAAE,IAAI,EAAE,KAAK,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,IAAI,oBAAoB,CAAC,iBAAiB,EAAE,CAAC;YACxG,oBAAoB,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClD,oBAAoB,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAChD,CAAC;IACH,CAAC;IAED,QAAQ,CAAC,EAAC,MAAM,EAAmC;QACjD,EAAE,CAAC,+BAA+B,CAAC,+BAA+B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClF,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,OAA0C;QAC9D,EAAE,CAAC,+BAA+B,CAAC,+BAA+B,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACnF,CAAC;IAED,aAAa;QACX,sFAAsF;QACtF,sFAAsF;QACtF,mCAAmC;QACnC,IAAI,oBAAoB,CAAC,iBAAiB,EAAE,CAAC;YAC3C,OAAO;QACT,CAAC;QACD,mCAAmC;QACnC,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,YAAY,EAAE,CAAC;QAClD,IAAI,YAAY,IAAI,YAAY,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YACpE,OAAO;QACT,CAAC;QACD,MAAM,MAAM,GAAG,IAAI,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QACtD,MAAM,CAAC,eAAe,kEAA2C,CAAC;QAClE,MAAM,CAAC,cAAc,EAAE,CAAC;QACxB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACvB,oBAAoB,CAAC,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClE,IAAI,EAAE,CAAC,mBAAmB;aACrB,mBAAmB,CAAC,GAAG,EAAE;YACxB,oBAAoB,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAChD,CAAC,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAEjC,MAAM,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAED;OACG;IACH,wBAAwB;QACtB,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC,YAAY,EAAE,CAAC,8BAA8B,EAAE,CAAC;QACnE,IAAI,oBAAoB,CAAC,iBAAiB,EAAE,CAAC;YAC3C,oBAAoB,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClD,oBAAoB,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAChD,CAAC;IACH,CAAC;CACF;AAED,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,oBAAoB,EAAE,EAAC,YAAY,4CAAiC,EAAE,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport type * as ProtocolProxyApi from '../../../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../../../generated/protocol.js';\nimport * as UI from '../../legacy.js';\n\nexport class TargetDetachedDialog extends SDK.SDKModel.SDKModel<void> implements ProtocolProxyApi.InspectorDispatcher {\n  private static hideCrashedDialog: (() => void)|null;\n  constructor(target: SDK.Target.Target) {\n    super(target);\n    target.registerInspectorDispatcher(this);\n    void target.inspectorAgent().invoke_enable();\n    // Hide all dialogs if a new top-level target is created.\n    if (target.parentTarget()?.type() === SDK.Target.Type.BROWSER && TargetDetachedDialog.hideCrashedDialog) {\n      TargetDetachedDialog.hideCrashedDialog.call(null);\n      TargetDetachedDialog.hideCrashedDialog = null;\n    }\n  }\n\n  detached({reason}: Protocol.Inspector.DetachedEvent): void {\n    UI.RemoteDebuggingTerminatedScreen.RemoteDebuggingTerminatedScreen.show(reason);\n  }\n\n  static connectionLost(message: Platform.UIString.LocalizedString): void {\n    UI.RemoteDebuggingTerminatedScreen.RemoteDebuggingTerminatedScreen.show(message);\n  }\n\n  targetCrashed(): void {\n    // In case of service workers targetCrashed usually signals that the worker is stopped\n    // and in any case it is restarted automatically (in which case front-end will receive\n    // targetReloadedAfterCrash event).\n    if (TargetDetachedDialog.hideCrashedDialog) {\n      return;\n    }\n    // Ignore child targets altogether.\n    const parentTarget = this.target().parentTarget();\n    if (parentTarget && parentTarget.type() !== SDK.Target.Type.BROWSER) {\n      return;\n    }\n    const dialog = new UI.Dialog.Dialog('target-crashed');\n    dialog.setSizeBehavior(UI.GlassPane.SizeBehavior.MEASURE_CONTENT);\n    dialog.addCloseButton();\n    dialog.setDimmed(true);\n    TargetDetachedDialog.hideCrashedDialog = dialog.hide.bind(dialog);\n    new UI.TargetCrashedScreen\n        .TargetCrashedScreen(() => {\n          TargetDetachedDialog.hideCrashedDialog = null;\n        })\n        .show(dialog.contentElement);\n\n    dialog.show();\n  }\n\n  /** ;\n   */\n  targetReloadedAfterCrash(): void {\n    void this.target().runtimeAgent().invoke_runIfWaitingForDebugger();\n    if (TargetDetachedDialog.hideCrashedDialog) {\n      TargetDetachedDialog.hideCrashedDialog.call(null);\n      TargetDetachedDialog.hideCrashedDialog = null;\n    }\n  }\n}\n\nSDK.SDKModel.SDKModel.register(TargetDetachedDialog, {capabilities: SDK.Target.Capability.INSPECTOR, autostart: true});\n"]}