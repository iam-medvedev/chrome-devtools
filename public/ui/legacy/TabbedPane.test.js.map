{"version":3,"file":"TabbedPane.test.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/TabbedPane.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport {doubleRaf, raf, renderElementIntoDOM} from '../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\n\nimport * as UI from './legacy.js';\n\ndescribeWithEnvironment('TabbedPane', () => {\n  let tabbedPane: UI.TabbedPane.TabbedPane;\n\n  /**\n   * A simple widget class that can receive focus.\n   */\n  class FocusableWidget extends UI.Widget.Widget {\n    constructor(name: string) {\n      super();\n      this.element.tabIndex = -1;  // Make it focusable\n      this.element.textContent = name;\n      this.setDefaultFocusedElement(this.element);\n    }\n  }\n\n  /**\n   * This hook runs before each test case (`it(...)`).\n   * It sets up a new TabbedPane and populates it with 10 tabs.\n   */\n  beforeEach(async () => {\n    tabbedPane = new UI.TabbedPane.TabbedPane();\n    tabbedPane.markAsRoot();\n\n    for (let i = 0; i < 10; i++) {\n      tabbedPane.appendTab(i.toString(), `Tab ${i}`, new FocusableWidget(`Widget ${i}`));\n    }\n    renderElementIntoDOM(tabbedPane);\n    await doubleRaf();\n  });\n\n  const dispatchKeyEvent = (key: string) => {\n    const activeElement = Platform.DOMUtilities.deepActiveElement(document);\n    if (activeElement) {\n      activeElement.dispatchEvent(new KeyboardEvent('keydown', {key, bubbles: true, cancelable: true}));\n    }\n  };\n\n  const getFocusedElementText = () => {\n    const activeElement = Platform.DOMUtilities.deepActiveElement(document);\n    return activeElement ? activeElement.textContent : null;\n  };\n\n  it('should navigate between tabs using arrow keys and wrap around', async () => {\n    // Focus the first tab to start the test.\n    tabbedPane.selectTab('0');\n    tabbedPane.focusSelectedTabHeader();\n    await raf();\n\n    assert.strictEqual(getFocusedElementText(), 'Tab 0', 'Initial focus should be on Tab 0');\n\n    // Move right to the next tab.\n    dispatchKeyEvent('ArrowRight');\n    assert.strictEqual(getFocusedElementText(), 'Tab 1', 'Focus should move to Tab 1');\n\n    // Move to the last tab.\n    for (let i = 2; i <= 9; i++) {\n      dispatchKeyEvent('ArrowRight');\n    }\n    assert.strictEqual(getFocusedElementText(), 'Tab 9', 'Focus should be on the last tab');\n\n    // Wrap around to the first tab when moving right from the last tab.\n    dispatchKeyEvent('ArrowRight');\n    assert.strictEqual(getFocusedElementText(), 'Tab 0', 'Focus should wrap around to Tab 0');\n\n    // Wrap around to the last tab when moving left from the first tab.\n    dispatchKeyEvent('ArrowLeft');\n    assert.strictEqual(getFocusedElementText(), 'Tab 9', 'Focus should wrap around to Tab 9 on left arrow');\n  });\n\n  it('should focus the widget content when Enter is pressed on a tab', () => {\n    // Start with the second tab focused.\n    tabbedPane.selectTab('1');\n    tabbedPane.focusSelectedTabHeader();\n    assert.strictEqual(getFocusedElementText(), 'Tab 1', 'Initial focus should be on Tab 1');\n\n    // Press 'Enter' to focus the widget inside the tab's view.\n    dispatchKeyEvent('Enter');\n    assert.strictEqual(getFocusedElementText(), 'Widget 1', 'Focus should move to Widget 1');\n\n    // For the next step, manually re-focus the tab element, as the user would via Shift+Tab.\n    tabbedPane.focusSelectedTabHeader();\n    assert.strictEqual(getFocusedElementText(), 'Tab 1', 'Focus returned to Tab 1');\n\n    // Move left to Tab 0.\n    dispatchKeyEvent('ArrowLeft');\n    assert.strictEqual(getFocusedElementText(), 'Tab 0', 'Focus should move to Tab 0');\n\n    // Press 'Enter' to focus the widget in the first tab.\n    dispatchKeyEvent('Enter');\n    assert.strictEqual(getFocusedElementText(), 'Widget 0', 'Focus should move to Widget 0');\n  });\n});\n"]}