{
  "version": 3,
  "sources": ["../../../../../../../front_end/ui/components/legacy_wrapper/LegacyWrapper.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport type * as Platform from '../../../core/platform/platform.js';\nimport type * as UI from '../../legacy/legacy.js';\nimport * as VisualLogging from '../../visual_logging/visual_logging.js';\n\nexport abstract class WrappableComponent<T extends UI.Widget.Widget = UI.Widget.Widget> extends HTMLElement {\n  wrapper: T|null = null;\n  async render(): Promise<void> {\n  }\n  wasShown(): void {\n  }\n  willHide(): void {\n  }\n}\n\nexport type LegacyWrapper<T extends UI.Widget.Widget, Component extends WrappableComponent<T>> = {\n  getComponent(): Component,\n}&T;\n\nexport function legacyWrapper<T extends Platform.Constructor.Constructor<UI.Widget.Widget>,\n                                        Component extends WrappableComponent<InstanceType<T>>>(\n    base: T, component: Component, jsLogContext?: string): LegacyWrapper<InstanceType<T>, Component> {\n  return new class extends base {\n    #component: Component;\n\n    constructor(..._args: any[]) {\n      super(/* useShadowDom=*/ true);\n      this.#component = component;\n      this.#component.wrapper = this as InstanceType<T>;\n      void this.#component.render();\n      this.contentElement.appendChild(this.#component);\n      if (jsLogContext) {\n        this.element.setAttribute('jslog', `${VisualLogging.pane().context(jsLogContext)}`);\n      }\n    }\n\n    override wasShown(): void {\n      this.#component.wasShown();\n      void this.#component.render();\n    }\n\n    override willHide(): void {\n      this.#component.willHide();\n    }\n\n    override async performUpdate(): Promise<void> {\n      await this.#component.render();\n    }\n\n    getComponent(): Component {\n      return this.#component;\n    }\n    // clang-format off\n  }() as unknown as LegacyWrapper<InstanceType<T>, Component>;\n  // clang-format on\n}\n"],
  "mappings": ";;;;;;;AAAA;;;;;AAOA,YAAY,mBAAmB;AAEzB,IAAgB,qBAAhB,cAA0F,YAAW;EACzG,UAAkB;EAClB,MAAM,SAAM;EACZ;EACA,WAAQ;EACR;EACA,WAAQ;EACR;;AAOI,SAAU,cAEZ,MAAS,WAAsB,cAAqB;AACtD,SAAO,IAAI,cAAc,KAAI;IAC3B;IAEA,eAAe,OAAY;AACzB;;QAAyB;MAAI;AAC7B,WAAK,aAAa;AAClB,WAAK,WAAW,UAAU;AAC1B,WAAK,KAAK,WAAW,OAAM;AAC3B,WAAK,eAAe,YAAY,KAAK,UAAU;AAC/C,UAAI,cAAc;AAChB,aAAK,QAAQ,aAAa,SAAS,GAAiB,mBAAI,EAAG,QAAQ,YAAY,CAAC,EAAE;MACpF;IACF;IAES,WAAQ;AACf,WAAK,WAAW,SAAQ;AACxB,WAAK,KAAK,WAAW,OAAM;IAC7B;IAES,WAAQ;AACf,WAAK,WAAW,SAAQ;IAC1B;IAES,MAAM,gBAAa;AAC1B,YAAM,KAAK,WAAW,OAAM;IAC9B;IAEA,eAAY;AACV,aAAO,KAAK;IACd;IAED;AAEH;",
  "names": []
}
