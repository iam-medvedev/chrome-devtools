{"version":3,"file":"FloatingButton.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/buttons/FloatingButton.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAC7B,2DAA2D;AAE3D,OAAO,+BAA+B,CAAC;AAEvC,OAAO,KAAK,GAAG,MAAM,kBAAkB,CAAC;AAExC,OAAO,oBAAoB,MAAM,yBAAyB,CAAC;AAE3D,MAAM,EAAC,IAAI,EAAC,GAAG,GAAG,CAAC;AAEnB;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,MAAM,OAAO,cAAe,SAAQ,WAAW;IAC7C,MAAM,CAAU,kBAAkB,GAAG,CAAC,WAAW,CAAC,CAAC;IAE1C,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAErD;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC;QAC3B,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED;;;OAGG;IACH,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;OAMG;IACH,IAAI,QAAQ,CAAC,QAAqB;QAChC,IAAI,QAAQ,KAAK,IAAI,EAAE,CAAC;YACtB,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QACpC,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC;IAED,wBAAwB,CAAC,IAAY,EAAE,QAAqB,EAAE,QAAqB;QACjF,IAAI,QAAQ,KAAK,QAAQ,EAAE,CAAC;YAC1B,OAAO;QACT,CAAC;QACD,IAAI,IAAI,KAAK,WAAW,EAAE,CAAC;YACzB,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;IACH,CAAC;IAED,OAAO;QACL,mBAAmB;QACnB,GAAG,CAAC,MAAM,CAAC,IAAI,CAAA;iBACF,oBAAoB;uCACE,IAAI,CAAC,QAAQ,4BAA4B,EACxE,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;QAChC,kBAAkB;IACpB,CAAC;;AAGH;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,QAAgB,EAAE,KAAa,EAAkB,EAAE;IACxE,MAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;IAC5C,cAAc,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACnC,cAAc,CAAC,KAAK,GAAG,KAAK,CAAC;IAC7B,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AAEF,cAAc,CAAC,MAAM,CAAC,0BAA0B,EAAE,cAAc,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport '../icon_button/icon_button.js';\n\nimport * as Lit from '../../lit/lit.js';\n\nimport floatingButtonStyles from './floatingButton.css.js';\n\nconst {html} = Lit;\n\n/**\n * A simple floating button component, primarily used to display the 'Ask AI!'\n * teaser when hovering over specific UI elements.\n *\n * Usage is simple:\n *\n * ```js\n * // Instantiate programmatically via the `create()` helper:\n * const button = Buttons.FloatingButton.create('smart-assistant', 'Ask AI!');\n *\n * // Use within a template:\n * html`\n * <devtools-floating-button icon-name=\"smart-assistant\"\n *                           title=\"Ask AI!\">\n * </devtools-floating-button>\n * `;\n * ```\n *\n * @attr icon-name - The basename of the icon file (not including the `.svg`\n *                   suffix).\n * @prop {String} iconName - The `\"icon-name\"` attribute is reflected as property.\n */\nexport class FloatingButton extends HTMLElement {\n  static readonly observedAttributes = ['icon-name'];\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  constructor() {\n    super();\n    this.role = 'presentation';\n    this.#render();\n  }\n\n  /**\n   * Yields the value of the `\"icon-name\"` attribute of this `FloatingButton`\n   * (`null` in case there's no `\"icon-name\"` on this element).\n   */\n  get iconName(): string|null {\n    return this.getAttribute('icon-name');\n  }\n\n  /**\n   * Changes the value of the `\"icon-name\"` attribute of this `FloatingButton`.\n   * If you pass `null`, the `\"icon-name\"` attribute will be removed from this\n   * element.\n   *\n   * @param the new icon name or `null` to unset.\n   */\n  set iconName(iconName: string|null) {\n    if (iconName === null) {\n      this.removeAttribute('icon-name');\n    } else {\n      this.setAttribute('icon-name', iconName);\n    }\n  }\n\n  attributeChangedCallback(name: string, oldValue: string|null, newValue: string|null): void {\n    if (oldValue === newValue) {\n      return;\n    }\n    if (name === 'icon-name') {\n      this.#render();\n    }\n  }\n\n  #render(): void {\n    // clang-format off\n    Lit.render(html`\n        <style>${floatingButtonStyles}</style>\n        <button><devtools-icon .name=${this.iconName}></devtools-icon></button>`,\n        this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\n/**\n * Helper function to programmatically create a `FloatingButton` instance with a\n * given `iconName` and `title`.\n *\n * @param iconName the name of the icon to use.\n * @param title the tooltip for the `FloatingButton`\n * @returns the newly created `FloatingButton` instance.\n */\nexport const create = (iconName: string, title: string): FloatingButton => {\n  const floatingButton = new FloatingButton();\n  floatingButton.iconName = iconName;\n  floatingButton.title = title;\n  return floatingButton;\n};\n\ncustomElements.define('devtools-floating-button', FloatingButton);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-floating-button': FloatingButton;\n  }\n}\n"]}