{"version":3,"file":"render_coordinator.test.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/render_coordinator/render_coordinator.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as RenderCoordinator from './render_coordinator.js';\n\ndescribe('RenderCoordinator', () => {\n  async function validateRecords(expected: string[]) {\n    await RenderCoordinator.done();\n    const records = RenderCoordinator.takeLoggingRecords();\n    assert.deepEqual(records.map(r => r.value), expected, 'render coordinator messages are out of order');\n  }\n\n  beforeEach(() => {\n    RenderCoordinator.setLoggingEnabled(true);\n  });\n\n  afterEach(() => {\n    RenderCoordinator.setLoggingEnabled(false);\n  });\n\n  it('groups interleaved reads and writes', async () => {\n    const expected = [\n      '[New frame]',\n      '[Read]: Read 1',\n      '[Read]: Read 2',\n      '[Read]: Read 3',\n      '[Write]: Write 1',\n      '[Write]: Write 2',\n      '[Queue empty]',\n    ];\n\n    void RenderCoordinator.write('Write 1', () => {});\n    void RenderCoordinator.read('Read 1', () => {});\n    void RenderCoordinator.read('Read 2', () => {});\n    void RenderCoordinator.write('Write 2', () => {});\n    void RenderCoordinator.read('Read 3', () => {});\n\n    await validateRecords(expected);\n  });\n\n  it('deduplicates named tasks', async () => {\n    const expected = [\n      '[New frame]',\n      '[Read]: Named Read',\n      '[Write]: Unnamed write',\n      '[Write]: Named Write',\n      '[Write]: Unnamed write',\n      '[Queue empty]',\n    ];\n\n    void RenderCoordinator.read('Named Read', () => {});\n    void RenderCoordinator.write(() => {});\n    void RenderCoordinator.write('Named Write', () => {});\n    void RenderCoordinator.write(() => {});\n    void RenderCoordinator.write('Named Write', () => {});\n\n    await validateRecords(expected);\n  });\n\n  it('handles nested reads and writes', async () => {\n    const expected = [\n      '[New frame]',\n      '[Read]: Read 1',\n      '[Read]: Read 2',\n      '[New frame]',\n      '[Read]: Read 3',\n      '[Write]: Write 1',\n      '[Write]: Write 2',\n      '[New frame]',\n      '[Write]: Write 3',\n      '[Queue empty]',\n    ];\n\n    void RenderCoordinator.read('Read 1', () => {\n      void RenderCoordinator.write('Write 1', () => {});\n    });\n\n    void RenderCoordinator.read('Read 2', () => {\n      void RenderCoordinator.write('Write 2', () => {\n        void RenderCoordinator.write('Write 3', () => {});\n      });\n      void RenderCoordinator.read('Read 3', () => {});\n    });\n\n    await validateRecords(expected);\n  });\n\n  it('completes work added while evaluating the last item in the queue', async () => {\n    const expected = [\n      '[New frame]',\n      '[Read]: Read',\n      '[New frame]',\n      '[Write]: Write at end',\n      '[Queue empty]',\n    ];\n    void RenderCoordinator.read('Read', () => {\n      // This write is added when we are evaluating the last item in the queue,\n      // and it should be enqueued correctly for the test to pass.\n      void RenderCoordinator.write('Write at end', () => {});\n    });\n\n    await RenderCoordinator.done();\n\n    const records = RenderCoordinator.takeLoggingRecords();\n    assert.deepEqual(records.map(r => r.value), expected);\n  });\n\n  it('returns values', async () => {\n    const element = document.createElement('div');\n    element.style.height = '800px';\n    document.body.appendChild(element);\n\n    const height = await RenderCoordinator.read(() => element.clientHeight);\n    await RenderCoordinator.done();\n\n    element.remove();\n    assert.strictEqual(height, 800);\n  });\n\n  it('awaits async callbacks', async () => {\n    const expected = 100;\n    let targetValue = 0;\n    const delayedSet = (value: number, timeout: number): Promise<void> => {\n      return new Promise(resolve => setTimeout(() => {\n                           targetValue = value;\n                           resolve();\n                         }, timeout));\n    };\n\n    void RenderCoordinator.write(async () => await delayedSet(expected, 100));\n    await RenderCoordinator.done();\n\n    assert.strictEqual(targetValue, expected);\n  });\n\n  it('throws if there is a read-write deadlock (blocked on read)', async () => {\n    const read = () => {};\n    try {\n      await RenderCoordinator.write(async () => {\n        // Awaiting a read block within a write should block because\n        // this write can't proceed until the read has completed, but\n        // the read won't start until this write has completed.\n        await RenderCoordinator.read(read);\n      });\n    } catch (err) {\n      assert.strictEqual(err.toString(), new Error('Writers took over 1500ms. Possible deadlock?').toString());\n    }\n    RenderCoordinator.cancelPending();\n  });\n\n  it('throws if there is a write deadlock (blocked on write)', async () => {\n    const write = () => {};\n    try {\n      await RenderCoordinator.read(async () => {\n        // Awaiting a write block within a read should block because\n        // this read can't proceed until the write has completed, but\n        // the write won't start until this read has completed.\n        await RenderCoordinator.write(write);\n      });\n    } catch (err) {\n      assert.strictEqual(err.toString(), new Error('Readers took over 1500ms. Possible deadlock?').toString());\n    }\n    RenderCoordinator.cancelPending();\n  });\n\n  it('exposes the presence of pending work', async () => {\n    const readDonePromise = RenderCoordinator.read('Named Read', () => {});\n    assert.isTrue(RenderCoordinator.hasPendingWork());\n    await readDonePromise;\n    assert.isFalse(RenderCoordinator.hasPendingWork());\n  });\n\n  it('exposes the pending work count globally for interaction/e2e tests', async () => {\n    const readDonePromise = RenderCoordinator.read('Named Read', () => {});\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    assert.strictEqual((globalThis as any).__getRenderCoordinatorPendingFrames(), 1);\n    await readDonePromise;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    assert.strictEqual((globalThis as any).__getRenderCoordinatorPendingFrames(), 0);\n  });\n\n  describe('Logger', () => {\n    it('only logs by default when provided with names', async () => {\n      RenderCoordinator.setLoggingEnabled(true, {onlyNamed: true});\n      const expected = [\n        '[New frame]',\n        '[Read]: Named Read',\n        '[Queue empty]',\n      ];\n\n      void RenderCoordinator.read('Named Read', () => {});\n      void RenderCoordinator.write(() => {});\n\n      await validateRecords(expected);\n    });\n\n    it('allow logging of unnamed tasks', async () => {\n      const expected = [\n        '[New frame]',\n        '[Read]: Named Read',\n        '[Write]: Unnamed write',\n        '[Queue empty]',\n      ];\n\n      void RenderCoordinator.read('Named Read', () => {});\n      void RenderCoordinator.write(() => {});\n\n      await validateRecords(expected);\n    });\n\n    it('tracks only the last 100 items', async () => {\n      const expected = [];\n      for (let i = 51; i < 150; i++) {\n        expected.push(`[Read]: Named read ${i}`);\n      }\n      expected.push('[Queue empty]');\n\n      for (let i = 0; i < 150; i++) {\n        void RenderCoordinator.read(`Named read ${i}`, () => {});\n      }\n\n      await validateRecords(expected);\n    });\n\n    it('supports different log sizes', async () => {\n      RenderCoordinator.setLoggingEnabled(true, {storageLimit: 10});\n      const expected = [];\n      for (let i = 41; i < 50; i++) {\n        expected.push(`[Write]: Named write ${i}`);\n      }\n      expected.push('[Queue empty]');\n\n      for (let i = 0; i < 50; i++) {\n        void RenderCoordinator.write(`Named write ${i}`, () => {});\n      }\n\n      await validateRecords(expected);\n    });\n  });\n});\n"]}