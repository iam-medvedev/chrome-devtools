{"version":3,"file":"ReportView.test.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/report_view/ReportView.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,yBAAyB,EAAE,oBAAoB,EAAC,MAAM,gCAAgC,CAAC;AAC/F,OAAO,EAAC,IAAI,EAAE,MAAM,EAAC,MAAM,kBAAkB,CAAC;AAE9C,OAAO,KAAK,UAAU,MAAM,kBAAkB,CAAC;AAE/C,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;YAClD,MAAM,CAAC,IAAI,GAAG,EAAC,WAAW,EAAE,uBAAuB,EAAC,CAAC;YACrD,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAE7B,uFAAuF;YACvF,MAAM,MAAM,GAAG,yBAAyB,CAAC,MAAM,EAAE,kBAAkB,EAAE,WAAW,CAAC,CAAC;YAClF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,EAAE,uBAAuB,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE;QACnB,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;YACtE,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;YAClD,mBAAmB;YACnB,MAAM,CACF,IAAI,CAAA;;;OAGP,EACG,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;YAC1B,kBAAkB;YAClB,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAE7B,MAAM,IAAI,GAAG,yBAAyB,CAAC,MAAM,EAAE,MAAM,EAAE,eAAe,CAAC,CAAC;YACxE,MAAM,UAAU,GAAG,MAAM,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;YAC/D,MAAM,YAAY,GAAG,MAAM,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC;YAEnE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {getElementWithinComponent, renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {html, render} from '../../lit/lit.js';\n\nimport * as ReportView from './report_view.js';\n\ndescribe('ReportView', () => {\n  describe('header', () => {\n    it('shows the provided report title', () => {\n      const report = new ReportView.ReportView.Report();\n      report.data = {reportTitle: 'Title for test report'};\n      renderElementIntoDOM(report);\n\n      // TODO(szuend): Replace this with an aria selector once we can use them in unit tests.\n      const header = getElementWithinComponent(report, 'div.report-title', HTMLElement);\n      assert.strictEqual(header.textContent, 'Title for test report');\n    });\n  });\n\n  describe('row', () => {\n    it('renders the elements provided for the \"key\" and \"value\" slot', () => {\n      const report = new ReportView.ReportView.Report();\n      // clang-format off\n      render(\n          html`\n        <devtools-report-key>This is the key</devtools-report-key>\n        <devtools-report-value>This is the value</devtools-report-value>\n      `,\n          report, {host: this});\n      // clang-format on\n      renderElementIntoDOM(report);\n\n      const slot = getElementWithinComponent(report, 'slot', HTMLSlotElement);\n      const keyElement = report.querySelector('devtools-report-key');\n      const valueElement = report.querySelector('devtools-report-value');\n\n      assert.strictEqual(slot.assignedElements()[0], keyElement);\n      assert.strictEqual(slot.assignedElements()[1], valueElement);\n    });\n  });\n});\n"]}