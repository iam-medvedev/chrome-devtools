{"version":3,"file":"Card.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/cards/Card.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,IAAI,EAAE,OAAO,EAAE,MAAM,EAAC,MAAM,kBAAkB,CAAC;AAEvD,OAAO,UAAU,MAAM,eAAe,CAAC;AAEvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AACH,MAAM,OAAO,IAAK,SAAQ,WAAW;IACnC,MAAM,CAAU,kBAAkB,GAAG,CAAC,SAAS,CAAC,CAAC;IAExC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAErD;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED;;;;;OAKG;IACH,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC;IAED;;;;;OAKG;IACH,IAAI,OAAO,CAAC,OAAoB;QAC9B,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACxC,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAED,wBAAwB,CAAC,KAAa,EAAE,QAAqB,EAAE,QAAqB;QAClF,IAAI,QAAQ,KAAK,QAAQ,EAAE,CAAC;YAC1B,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;IACH,CAAC;IAED,OAAO;QACL,MAAM,CACF,IAAI,CAAA;iBACK,UAAU,CAAC,UAAU;;;;iDAIW,IAAI,CAAC,OAAO,IAAI,OAAO;;;;eAIzD,EACP,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;IAClC,CAAC;;AAGH,cAAc,CAAC,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {html, nothing, render} from '../../lit/lit.js';\n\nimport cardStyles from './card.css.js';\n\n/**\n * A simple card component to display a Material card with a heading and content.\n *\n * Usage is simple:\n *\n * ```\n * // Instantiate programmatically:\n * const card = document.createElement('devtools-card');\n * card.heading = 'My awesome card';\n * card.append(content1, content2);\n *\n * // Use within a template:\n * html`\n *   <devtools-card heading=\"My awesome card\">\n *     <div>content1</div>\n *     <div>content2</div>\n *   </devtools-card>\n * `;\n * ```\n *\n * The heading can be further customized with a prefix and a suffix if needed.\n * These are arbitrary children that can be slotted into the `\"heading-prefix\"`\n * and `\"heading-suffix\"` slots if required. Example:\n *\n * ```\n * html`\n *   <devtools-card heading=\"Rich heading\">\n *     <devtools-icon name=\"folder\" slot=\"heading-prefix\"></devtools-icon>\n *     <devtools-button slot=\"heading-suffix\">Remove</devtools-button>\n *   </devtools-card>\n * `;\n * ```\n *\n * @attr heading - The heading text.\n * @prop {String} heading - The `\"heading\"` attribute is reflect as property.\n */\nexport class Card extends HTMLElement {\n  static readonly observedAttributes = ['heading'];\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  constructor() {\n    super();\n    this.#render();\n  }\n\n  /**\n   * Yields the value of the `\"heading\"` attribute of this `Card`.\n   *\n   * @returns the value of the `\"heading\"` attribute or `null` if the attribute\n   *          is absent.\n   */\n  get heading(): string|null {\n    return this.getAttribute('heading');\n  }\n\n  /**\n   * Changes the value of the `\"heading\"` attribute of this `Card`. If you pass\n   * `null`, the `\"heading\"` attribute will be removed from this element.\n   *\n   * @param heading the new heading of `null` to unset.\n   */\n  set heading(heading: string|null) {\n    if (heading) {\n      this.setAttribute('heading', heading);\n    } else {\n      this.removeAttribute('heading');\n    }\n  }\n\n  attributeChangedCallback(_name: string, oldValue: string|null, newValue: string|null): void {\n    if (oldValue !== newValue) {\n      this.#render();\n    }\n  }\n\n  #render(): void {\n    render(\n        html`\n        <style>${cardStyles.cssContent}</style>\n        <div id=\"card\">\n          <div id=\"heading\">\n            <slot name=\"heading-prefix\"></slot>\n            <div role=\"heading\" aria-level=\"2\">${this.heading ?? nothing}</div>\n            <slot name=\"heading-suffix\"></slot>\n          </div>\n          <slot id=\"content\"></slot>\n        </div>`,\n        this.#shadow, {host: this});\n  }\n}\n\ncustomElements.define('devtools-card', Card);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-card': Card;\n  }\n}\n"]}