{"version":3,"file":"SwitchImpl.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/switch/SwitchImpl.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,OAAO,MAAM,4BAA4B,CAAC;AAEtD,OAAO,YAAY,MAAM,iBAAiB,CAAC;AAE3C,MAAM,OAAO,iBAAkB,SAAQ,KAAK;IAGrB;IAFrB,MAAM,CAAU,SAAS,GAAG,cAAc,CAAC;IAE3C,YAAqB,OAAgB;QACnC,KAAK,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QADhB,YAAO,GAAP,OAAO,CAAS;IAErC,CAAC;;AAGH,MAAM,OAAO,MAAO,SAAQ,WAAW;IACrC,MAAM,CAAU,UAAU,GAAG,OAAO,CAAC,OAAO,CAAA,iBAAiB,CAAC;IACrD,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IACrD,QAAQ,GAAG,KAAK,CAAC;IACjB,SAAS,GAAG,KAAK,CAAC;IAElB,iBAAiB;QACf,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,CAAC,YAAY,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,IAAI,OAAO,CAAC,SAAkB;QAC5B,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC1B,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,IAAI,QAAQ,CAAC,UAAmB;QAC9B,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC;QAC5B,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,aAAa,GAAG,CAAC,EAAS,EAAQ,EAAE;QAClC,IAAI,CAAC,QAAQ,GAAI,EAAE,CAAC,MAA2B,CAAC,OAAO,CAAC;QACxD,IAAI,CAAC,aAAa,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3D,CAAC,CAAC;IAEF,OAAO;QACL,oDAAoD;QACpD,mBAAmB;QACnB,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAA;;;kBAGb,IAAI,CAAC,aAAa;oBAChB,IAAI,CAAC,SAAS;mBACf,IAAI,CAAC,QAAQ;;;KAG3B,EAAE,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/B,kBAAkB;QAClB,mDAAmD;IACrD,CAAC;;AAGH,cAAc,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as LitHtml from '../../lit-html/lit-html.js';\n\nimport switchStyles from './switch.css.js';\n\nexport class SwitchChangeEvent extends Event {\n  static readonly eventName = 'switchchange';\n\n  constructor(readonly checked: boolean) {\n    super(SwitchChangeEvent.eventName);\n  }\n}\n\nexport class Switch extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-switch`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #checked = false;\n  #disabled = false;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [switchStyles];\n    this.#render();\n  }\n\n  set checked(isChecked: boolean) {\n    this.#checked = isChecked;\n    this.#render();\n  }\n\n  get checked(): boolean {\n    return this.#checked;\n  }\n\n  set disabled(isDisabled: boolean) {\n    this.#disabled = isDisabled;\n    this.#render();\n  }\n\n  get disabled(): boolean {\n    return this.#disabled;\n  }\n\n  #handleChange = (ev: Event): void => {\n    this.#checked = (ev.target as HTMLInputElement).checked;\n    this.dispatchEvent(new SwitchChangeEvent(this.#checked));\n  };\n\n  #render(): void {\n    /* eslint-disable rulesdir/inject_checkbox_styles */\n    // clang-format off\n    LitHtml.render(LitHtml.html`\n    <label role=\"button\">\n      <input type=\"checkbox\"\n        @change=${this.#handleChange}\n        ?disabled=${this.#disabled}\n        ?checked=${this.#checked}>\n      <span class=\"slider\"></span>\n    </label>\n    `, this.#shadow, {host: this});\n    // clang-format on\n    /* eslint-enable rulesdir/inject_checkbox_styles */\n  }\n}\n\ncustomElements.define('devtools-switch', Switch);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-switch': Switch;\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    [SwitchChangeEvent.eventName]: SwitchChangeEvent;\n  }\n}\n"]}