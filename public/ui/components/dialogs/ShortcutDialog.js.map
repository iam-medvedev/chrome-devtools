{"version":3,"file":"ShortcutDialog.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/dialogs/ShortcutDialog.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport './ButtonDialog.js';\n\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport {html, nothing, render, type TemplateResult} from '../../../ui/lit/lit.js';\n\nimport type {ButtonDialogData} from './ButtonDialog.js';\nimport shortcutDialogStyles from './shortcutDialog.css.js';\n\nconst UIStrings = {\n\n  /**\n   * @description Title of question mark button for the shortcuts dialog.\n   */\n  showShortcutTitle: 'Show shortcuts',\n  /**\n   * @description Title of the keyboard shortcuts help menu.\n   */\n  dialogTitle: 'Keyboard shortcuts',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('ui/components/dialogs/ShortcutDialog.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-shortcut-dialog': ShortcutDialog;\n  }\n}\n\nexport type ShortcutPart = {\n  key: string,\n}|{joinText: string};\n\nexport type ShortcutRow = ShortcutPart[]|{footnote: string};\n\nexport interface Shortcut {\n  title: string|Platform.UIString.LocalizedString;\n  rows: readonly ShortcutRow[];\n}\nexport interface ShortcutDialogData {\n  shortcuts: Shortcut[];\n  open?: boolean;\n  customTitle?: Platform.UIString.LocalizedString;\n}\n\nexport class ShortcutDialog extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #shortcuts: Shortcut[] = [];\n  #openOnRender = false;\n  #customTitle?: Platform.UIString.LocalizedString;\n  #prependedElement: HTMLElement|null = null;\n\n  get data(): ShortcutDialogData {\n    return {\n      shortcuts: this.#shortcuts,\n      open: this.#openOnRender,\n      customTitle: this.#customTitle,\n    };\n  }\n\n  set data(data: ShortcutDialogData) {\n    this.#shortcuts = data.shortcuts;\n    if (data.open) {\n      this.#openOnRender = data.open;\n    }\n    if (data.customTitle) {\n      this.#customTitle = data.customTitle;\n    }\n\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  prependElement(element: HTMLElement): void {\n    this.#prependedElement = element;\n  }\n\n  #renderRow(row: ShortcutRow): TemplateResult {\n    if (!Array.isArray(row)) {\n      // If it's not an array it's a footnote, which is the easier case, so\n      // render that and return.\n      return html`<span class=\"footnote\">${row.footnote}</span>`;\n    }\n\n    return html`${row.map(part => {\n      if ('key' in part) {\n        return html`<span class=\"keybinds-key\">${part.key}</span>`;\n      }\n      return html`<span class=\"keybinds-join-text\">${part.joinText}</span>`;\n    })}\n    `;\n  }\n\n  #render(): void {\n    if (!ComponentHelpers.ScheduledRender.isScheduledRender(this)) {\n      throw new Error('Shortcut dialog render was not scheduled');\n    }\n\n    // clang-format off\n    render(\n      html`\n      <style>${shortcutDialogStyles}</style>\n      <devtools-button-dialog .data=${{\n          openOnRender: this.#openOnRender,\n          closeButton: true,\n          dialogTitle: this.#customTitle ?? i18nString(UIStrings.dialogTitle),\n          variant: Buttons.Button.Variant.TOOLBAR,\n          iconName: 'help',\n          iconTitle: i18nString(UIStrings.showShortcutTitle),\n        } as ButtonDialogData}>\n        <ul class=\"keybinds-list\">\n          ${(this.#prependedElement) ? html`${this.#prependedElement}` : nothing}\n          ${this.#shortcuts.map(shortcut =>\n            html`\n              <li class=\"keybinds-list-item\">\n                <div class=\"keybinds-list-title\">${shortcut.title}</div>\n                <div class=\"shortcuts-for-actions\">\n                  ${shortcut.rows.map(row => {\n                    return html`<div class=\"row-container\">${this.#renderRow(row)}</div>\n                  `;\n                  })}\n                </div>\n              </li>`,\n          )}\n        </ul>\n      </devtools-button-dialog>\n      `,\n      this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\ncustomElements.define('devtools-shortcut-dialog', ShortcutDialog);\n"]}