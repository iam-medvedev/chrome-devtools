{"version":3,"file":"timeline_history_manager.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/components/docs/performance_panel/timeline_history_manager.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,eAAe,MAAM,uEAAuE,CAAC;AACzG,OAAO,KAAK,WAAW,MAAM,gEAAgE,CAAC;AAC9F,OAAO,KAAK,WAAW,MAAM,mCAAmC,CAAC;AACjE,OAAO,KAAK,QAAQ,MAAM,yCAAyC,CAAC;AACpE,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAChD,OAAO,KAAK,cAAc,MAAM,0BAA0B,CAAC;AAE3D,MAAM,eAAe,CAAC,oBAAoB,EAAE,CAAC;AAC7C,MAAM,cAAc,CAAC,oBAAoB,CAAC,KAAK,EAAE,CAAC;AAElD,EAAE,CAAC,kBAAkB,CAAC,uBAAuB,CAAC;IAC5C,QAAQ,EAAE,uBAAuB;IACjC,QAAQ,sEAAkD;IAC1D,YAAY;QACV,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;IAChD,CAAC;IACD,KAAK,CAAC,kBAAkB;QACtB,OAAO,IAAI,QAAQ,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;IACrD,CAAC;CACF,CAAC,CAAC;AAEH,sEAAsE;AACtE,0DAA0D;AAC1D,0BAA0B;AAE1B,yGAAyG;AACzG,MAAM,EAAC,gBAAgB,EAAE,iBAAiB,EAAE,eAAe,EAAE,gBAAgB,EAAC,GAC1E,MAAM,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,8BAA8B,CAAC,CAAC;AAElF,IAAI,QAAQ,CAAC,sBAAsB,CAAC,sBAAsB,EAAE,CAAC,YAAY,CAAC;IACxE,IAAI,EAAE;QACJ,WAAW,EAAE,iBAAiB;QAC9B,mBAAmB,EAAE,CAAC;KACvB;IACD,mBAAmB,EAAE,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,gBAAgB,CAAC;IACjF,eAAe,EAAE,gBAAgB;IACjC,SAAS,EAAE,IAAI;CAChB,CAAC,CAAC;AAEH,MAAM,EAAC,gBAAgB,EAAE,iBAAiB,EAAE,eAAe,EAAE,gBAAgB,EAAC,GAC1E,MAAM,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;AACrE,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;AACvD,IAAI,CAAC,SAAS,EAAE;IACd,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;CAC7C;AAED,IAAI,QAAQ,CAAC,sBAAsB,CAAC,sBAAsB,EAAE,CAAC,YAAY,CAAC;IACxE,IAAI,EAAE;QACJ,WAAW,EAAE,iBAAiB;QAC9B,mBAAmB,EAAE,CAAC;KACvB;IACD,mBAAmB,EAAE,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,gBAAgB,CAAC;IACjF,eAAe,EAAE,gBAAgB;IACjC,SAAS,EAAE,IAAI;CAChB,CAAC,CAAC;AACH,MAAM,QAAQ,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as FrontendHelpers from '../../../../../test/unittests/front_end/helpers/EnvironmentHelpers.js';\nimport * as TraceLoader from '../../../../../test/unittests/front_end/helpers/TraceLoader.js';\nimport * as TraceEngine from '../../../../models/trace/trace.js';\nimport * as Timeline from '../../../../panels/timeline/timeline.js';\nimport * as UI from '../../../legacy/legacy.js';\nimport * as ComponentSetup from '../../helpers/helpers.js';\n\nawait FrontendHelpers.initializeGlobalVars();\nawait ComponentSetup.ComponentServerSetup.setup();\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'timeline.show-history',\n  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,\n  contextTypes() {\n    return [Timeline.TimelinePanel.TimelinePanel];\n  },\n  async loadActionDelegate() {\n    return new Timeline.TimelinePanel.ActionDelegate();\n  },\n});\n\n// Adding the recording right after the profile is parsed is needed as\n// the recording relies on the trace bounds initialized in\n// |TraceLoader.allModels|\n\n// By default we run both engines in the dev server, but this can be overridden by passing the parameter.\nconst {performanceModel: performanceModel1, traceParsedData: traceParsedData1} =\n    await TraceLoader.TraceLoader.allModels(null, 'multiple-navigations.json.gz');\n\nnew Timeline.TimelineHistoryManager.TimelineHistoryManager().addRecording({\n  data: {\n    legacyModel: performanceModel1,\n    traceParseDataIndex: 0,\n  },\n  filmStripForPreview: TraceEngine.Extras.FilmStrip.fromTraceData(traceParsedData1),\n  traceParsedData: traceParsedData1,\n  startTime: null,\n});\n\nconst {performanceModel: performanceModel2, traceParsedData: traceParsedData2} =\n    await TraceLoader.TraceLoader.allModels(null, 'web-dev.json.gz');\nconst container = document.querySelector('.container');\nif (!container) {\n  throw new Error('could not find container');\n}\n\nnew Timeline.TimelineHistoryManager.TimelineHistoryManager().addRecording({\n  data: {\n    legacyModel: performanceModel2,\n    traceParseDataIndex: 1,\n  },\n  filmStripForPreview: TraceEngine.Extras.FilmStrip.fromTraceData(traceParsedData2),\n  traceParsedData: traceParsedData2,\n  startTime: null,\n});\nawait Timeline.TimelineHistoryManager.DropDown.show([0, 1], 1, container);\n"]}