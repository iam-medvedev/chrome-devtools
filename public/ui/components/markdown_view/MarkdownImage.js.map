{"version":3,"file":"MarkdownImage.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/markdown_view/MarkdownImage.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,6CAA6C,CAAC;AAGrD,OAAO,KAAK,GAAG,MAAM,kBAAkB,CAAC;AAExC,OAAO,sBAAsB,MAAM,wBAAwB,CAAC;AAC5D,OAAO,EAAC,gBAAgB,EAAiB,MAAM,wBAAwB,CAAC;AAExE,4EAA4E;AAC5E,MAAM,mBAAmB,GAAG,IAAI,aAAa,EAAE,CAAC;AAChD,mBAAmB,CAAC,WAAW,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;AAEnE,MAAM,EAAC,IAAI,EAAE,UAAU,EAAE,EAAC,SAAS,EAAC,EAAC,GAAG,GAAG,CAAC;AAO5C;;;;GAIG;AACH,MAAM,OAAO,aAAc,SAAQ,WAAW;IAEnC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IACrD,UAAU,CAAa;IACvB,WAAW,CAAU;IAErB,iBAAiB;QACf,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,CAAC,mBAAmB,CAAC,CAAC;IAC1D,CAAC;IAED,IAAI,IAAI,CAAC,IAAuB;QAC9B,MAAM,EAAC,GAAG,EAAE,KAAK,EAAC,GAAG,IAAI,CAAC;QAC1B,MAAM,aAAa,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACrB,OAAO,IAAI,CAAA,EAAE,CAAC;QAChB,CAAC;QACD,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,KAAK,GAAG,MAAM,EAAE,MAAM,GAAG,MAAM,EAAC,GAAG,IAAI,CAAC,UAAU,CAAC;QACtE,OAAO,IAAI,CAAA;6BACc,EAAC,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAA6B;KACzF,CAAC;IACJ,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACrB,OAAO,IAAI,CAAA,EAAE,CAAC;QAChB,CAAC;QACD,MAAM,EAAC,GAAG,EAAE,KAAK,GAAG,MAAM,EAAE,MAAM,GAAG,MAAM,EAAC,GAAG,IAAI,CAAC,UAAU,CAAC;QAC/D,OAAO,IAAI,CAAA;wCACyB,GAAG,QAAQ,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,KAAK,WAAW,MAAM;KACzG,CAAC;IACJ,CAAC;IAED,OAAO;QACL,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACrB,OAAO;QACT,CAAC;QACD,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC,UAAU,CAAC;QACjC,MAAM,cAAc,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACrF,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;IACzD,CAAC;CACF;AAED,cAAc,CAAC,MAAM,CAAC,yBAAyB,EAAE,aAAa,CAAC,CAAC","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../components/icon_button/icon_button.js';\n\nimport type * as IconButton from '../../components/icon_button/icon_button.js';\nimport * as Lit from '../../lit/lit.js';\n\nimport markdownImageStylesRaw from './markdownImage.css.js';\nimport {getMarkdownImage, type ImageData} from './MarkdownImagesMap.js';\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst markdownImageStyles = new CSSStyleSheet();\nmarkdownImageStyles.replaceSync(markdownImageStylesRaw.cssContent);\n\nconst {html, Directives: {ifDefined}} = Lit;\n\nexport interface MarkdownImageData {\n  key: string;\n  title: string;\n}\n\n/**\n * Component to render images from parsed markdown.\n * Parsed images from markdown are not directly rendered, instead they have to be added to the MarkdownImagesMap.ts.\n * This makes sure that all icons/images are accounted for in markdown.\n */\nexport class MarkdownImage extends HTMLElement {\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #imageData?: ImageData;\n  #imageTitle?: string;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [markdownImageStyles];\n  }\n\n  set data(data: MarkdownImageData) {\n    const {key, title} = data;\n    const markdownImage = getMarkdownImage(key);\n    this.#imageData = markdownImage;\n    this.#imageTitle = title;\n    this.#render();\n  }\n\n  #getIconComponent(): Lit.TemplateResult {\n    if (!this.#imageData) {\n      return html``;\n    }\n    const {src, color, width = '100%', height = '100%'} = this.#imageData;\n    return html`\n      <devtools-icon .data=${{iconPath: src, color, width, height} as IconButton.Icon.IconData}></devtools-icon>\n    `;\n  }\n\n  #getImageComponent(): Lit.TemplateResult {\n    if (!this.#imageData) {\n      return html``;\n    }\n    const {src, width = '100%', height = '100%'} = this.#imageData;\n    return html`\n      <img class=\"markdown-image\" src=${src} alt=${ifDefined(this.#imageTitle)} width=${width} height=${height} />\n    `;\n  }\n\n  #render(): void {\n    if (!this.#imageData) {\n      return;\n    }\n    const {isIcon} = this.#imageData;\n    const imageComponent = isIcon ? this.#getIconComponent() : this.#getImageComponent();\n    Lit.render(imageComponent, this.#shadow, {host: this});\n  }\n}\n\ncustomElements.define('devtools-markdown-image', MarkdownImage);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-markdown-image': MarkdownImage;\n  }\n}\n"]}