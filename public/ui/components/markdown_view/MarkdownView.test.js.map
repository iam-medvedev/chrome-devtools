{"version":3,"file":"MarkdownView.test.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/markdown_view/MarkdownView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport * as Marked from '../../../third_party/marked/marked.js';\nimport * as Lit from '../../lit/lit.js';\n\nimport * as MarkdownView from './markdown_view.js';\n\nconst {html} = Lit;\n\ninterface TestToken {\n  type: string;\n  tokens?: Marked.Marked.Token[];\n  text?: string;\n  href?: string;\n  items?: Object[];\n  depth?: number;\n}\n\nfunction getFakeToken(token: TestToken): Marked.Marked.Token {\n  return token as unknown as Marked.Marked.Token;\n}\n\nfunction renderTemplateResult(templateResult: Lit.TemplateResult): HTMLElement {\n  const container = document.createElement('container');\n  Lit.render(templateResult, container);\n  return container;\n}\n\ndescribeWithEnvironment('MarkdownView', () => {\n  describe('tokenizer', () => {\n    it('tokenizers links in single quotes', () => {\n      assert.deepEqual(Marked.Marked.lexer('\\'https://example.test\\''), [\n        {\n          raw: '\\'https://example.test\\'',\n          text: '\\'https://example.test\\'',\n          tokens: [\n            {\n              raw: '\\'',\n              text: '&#39;',\n              type: 'text',\n            },\n            {\n              href: 'https://example.test',\n              raw: 'https://example.test',\n              text: 'https://example.test',\n              tokens: [\n                {\n                  raw: 'https://example.test',\n                  text: 'https://example.test',\n                  type: 'text',\n                },\n              ],\n              type: 'link',\n            },\n            {\n              raw: '\\'',\n              text: '&#39;',\n              type: 'text',\n            },\n          ],\n          type: 'paragraph',\n        },\n      ] as unknown as Marked.Marked.TokensList);\n    });\n  });\n  describe('MarkdownLitRenderer renderToken', () => {\n    const renderer = new MarkdownView.MarkdownView.MarkdownLitRenderer();\n\n    it('wraps paragraph tokens in <p> tags', () => {\n      const container = renderTemplateResult(renderer.renderToken(getFakeToken({type: 'paragraph', tokens: []})));\n\n      assert.exists(container.querySelector('p'));\n    });\n\n    it('wraps an unordered list token in <ul> tags', () => {\n      const container = renderTemplateResult(renderer.renderToken(getFakeToken({type: 'list', items: []})));\n\n      assert.exists(container.querySelector('ul'));\n    });\n\n    it('wraps list items in <li> tags', () => {\n      const container = renderTemplateResult(renderer.renderToken(getFakeToken({type: 'list_item', tokens: []})));\n      assert.exists(container.querySelector('li'));\n    });\n\n    it('wraps a codespan token in <code> tags', () => {\n      const container =\n          renderTemplateResult(renderer.renderToken(getFakeToken({type: 'codespan', text: 'const foo = 42;'})));\n\n      const code = container.querySelector('code');\n      assert.exists(code);\n      assert.deepEqual(code.textContent, 'const foo = 42;');\n    });\n\n    it('renders childless text tokens as-is', () => {\n      const container =\n          renderTemplateResult(renderer.renderToken(getFakeToken({type: 'text', text: 'Simple text token'})));\n\n      assert.lengthOf(container.childTextNodes(), 1);\n      assert.deepEqual(container.childTextNodes()[0].textContent, 'Simple text token');\n    });\n\n    it('renders nested text tokens correctly', () => {\n      const container = renderTemplateResult(renderer.renderToken(getFakeToken({\n        type: 'text',\n        text: 'This text should not be rendered. Only the subtokens!',\n        tokens: [\n          getFakeToken({type: 'text', text: 'Nested raw text'}),\n          getFakeToken({type: 'codespan', text: 'and a nested codespan to boot'}),\n        ],\n      })));\n\n      assert.notInclude(container.textContent, 'This text should not be rendered. Only the subtokens!');\n      assert.include(container.textContent, 'Nested raw text');\n      assert.exists(container.querySelector('code'));\n      assert.deepEqual(container.querySelector('code')?.textContent, 'and a nested codespan to boot');\n    });\n\n    it('throws an error for invalid or unsupported token types', () => {\n      assert.throws(() => renderer.renderToken(getFakeToken({type: 'no_way_this_is_a_valid_markdown_token'})));\n    });\n\n    it('renders link with valid key', () => {\n      MarkdownView.MarkdownLinksMap.markdownLinks.set('exampleLink', 'https://web.dev/');\n      const renderResult =\n          renderer.renderToken(getFakeToken({type: 'link', text: 'learn more', href: 'exampleLink'})).strings.join('');\n\n      assert.isTrue(renderResult.includes('<devtools-markdown-link'));\n    });\n\n    it('throws an error if invalid link key is provided', () => {\n      assert.throws(() => MarkdownView.MarkdownLinksMap.getMarkdownLink('testErrorLink'));\n    });\n\n    it('renders icon with valid key', () => {\n      MarkdownView.MarkdownImagesMap.markdownImages.set('testExampleImage', {\n        src: 'devices',\n        isIcon: true,\n      });\n      const renderResult =\n          renderer.renderToken(getFakeToken({type: 'image', text: 'phone', href: 'testExampleImage'})).strings.join('');\n      assert.isTrue(renderResult.includes('<devtools-markdown-image'));\n    });\n\n    it('renders image with valid key', () => {\n      MarkdownView.MarkdownImagesMap.markdownImages.set('exampleImage', {\n        src: 'Images/phone-logo.png',\n        isIcon: false,\n      });\n      const renderResult =\n          renderer.renderToken(getFakeToken({type: 'image', text: 'phone', href: 'exampleImage'})).strings.join('');\n      assert.isTrue(renderResult.includes('<devtools-markdown-image'));\n    });\n\n    it('throws an error if invalid image key is provided', () => {\n      assert.throws(() => MarkdownView.MarkdownImagesMap.getMarkdownImage('testErrorImageLink'));\n    });\n    it('renders a heading correctly', () => {\n      const renderResult =\n          renderer.renderToken(getFakeToken({type: 'heading', text: 'a heading text', depth: 3})).strings.join('');\n\n      assert.isTrue(renderResult.includes('<h3'));\n    });\n    it('renders strong correctly', () => {\n      const renderResult = renderer.renderToken(getFakeToken({type: 'strong', text: 'a strong text'})).strings.join('');\n\n      assert.isTrue(renderResult.includes('<strong'));\n    });\n    it('renders em correctly', () => {\n      const renderResult = renderer.renderToken(getFakeToken({type: 'em', text: 'em text'})).strings.join('');\n\n      assert.isTrue(renderResult.includes('<em'));\n    });\n    it('sets custom classes on the token types', () => {\n      renderer.addCustomClasses({em: 'custom-class'});\n\n      const renderResult = renderer.renderToken(getFakeToken({type: 'em', text: 'em text'}));\n      const container = renderTemplateResult(renderResult);\n      assert.isTrue(\n          container.querySelector('em')?.classList.contains('custom-class'), 'Expected custom-class to be applied');\n    });\n  });\n\n  describe('MarkdownInsightRenderer renderToken', () => {\n    const renderer = new MarkdownView.MarkdownView.MarkdownInsightRenderer();\n    it('renders link as texts', () => {\n      const result =\n          renderer.renderToken({type: 'link', text: 'learn more', href: 'https://example.test'} as Marked.Marked.Token);\n      assert(result.values[0] === 'learn more');\n    });\n    it('renders link urls as texts', () => {\n      const result = renderer.renderToken({type: 'link', href: 'https://example.test'} as Marked.Marked.Token);\n      assert(result.values[0] === 'https://example.test');\n    });\n    it('does not render URLs with \"javascript:\"', () => {\n      const result = renderer.renderToken(\n          {type: 'link', text: 'learn more', href: 'javascript:alert(\"test\")'} as Marked.Marked.Token);\n      assert(result.values[0] === undefined);\n    });\n    it('does not render chrome:// URLs', () => {\n      const result =\n          renderer.renderToken({type: 'link', text: 'learn more', href: 'chrome://settings'} as Marked.Marked.Token);\n      assert(result.values[0] === undefined);\n    });\n    it('does not render invalid URLs', () => {\n      const result = renderer.renderToken({type: 'link', text: 'learn more', href: '123'} as Marked.Marked.Token);\n      assert(result.values[0] === undefined);\n    });\n    it('renders images as text', () => {\n      const result = renderer.renderToken(\n          {type: 'image', text: 'learn more', href: 'https://example.test'} as Marked.Marked.Token);\n      assert(result.values[0] === 'learn more');\n    });\n    it('renders image urls as text', () => {\n      const result = renderer.renderToken({type: 'image', href: 'https://example.test'} as Marked.Marked.Token);\n      assert(result.values[0] === 'https://example.test');\n    });\n    it('renders headings as headings with the `insight` class', () => {\n      const renderResult = renderer.renderToken(getFakeToken({type: 'heading', text: 'a heading text', depth: 3}));\n      const container = renderTemplateResult(renderResult);\n      assert.isTrue(\n          container.querySelector('h3')?.classList.contains('insight'), 'Expected `insight`-class to be applied');\n    });\n    it('renders unsupported tokens', () => {\n      const result = renderer.renderToken({type: 'html', raw: '<!DOCTYPE html>'} as Marked.Marked.Token);\n      assert(result.values.join('').includes('<!DOCTYPE html>'));\n    });\n    it('detects language but default to provided', () => {\n      let result =\n          renderer.detectCodeLanguage({text: 'const int foo = \"bar\"', lang: 'cpp'} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, 'cpp');\n      result = renderer.detectCodeLanguage({text: '', lang: 'cpp'} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, 'cpp');\n    });\n    it('detects JavaScript language', () => {\n      let result = renderer.detectCodeLanguage({text: 'const t = 2', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, 'js');\n      result = renderer.detectCodeLanguage({text: 'let t = 2', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, 'js');\n      result = renderer.detectCodeLanguage({text: 'var t = 2', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, 'js');\n      result = renderer.detectCodeLanguage({text: 'function t(){}', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, 'js');\n      result = renderer.detectCodeLanguage({text: 'async function t(){}', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, 'js');\n      result = renderer.detectCodeLanguage(\n          {text: 'import puppeteer from \"puppeteer-core\"', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, 'js');\n    });\n    it('doesn`t detect JavaScript language', () => {\n      let result = renderer.detectCodeLanguage({text: 'constant F', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, '');\n      result = renderer.detectCodeLanguage({text: 'variable', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, '');\n      result = renderer.detectCodeLanguage(\n          {text: 'functions are better then classes', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, '');\n      result = renderer.detectCodeLanguage(\n          {text: 'asynchronous code it hard to understand', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, '');\n    });\n    it('detects CSS language', () => {\n      let result = renderer.detectCodeLanguage({text: '.myClass {}', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, 'css');\n      result = renderer.detectCodeLanguage({text: '.myClass{}', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, 'css');\n      result = renderer.detectCodeLanguage({text: 'my-component {}', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, 'css');\n      result = renderer.detectCodeLanguage({text: 'my-component::after {}', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, 'css');\n      result = renderer.detectCodeLanguage({text: '.foo::[name=\"bar\"] {}', lang: ''} as Marked.Marked.Tokens.Code);\n      assert.strictEqual(result, 'css');\n    });\n  });\n\n  const paragraphText =\n      'Single paragraph with a sentence of text and some list items to test that the component works end-to-end.';\n  const listItemTexts = ['Simple unordered list item 1', 'Simple unordered list item 2'];\n  const markdownString = `\n${paragraphText}\n\n* ${listItemTexts[0]}\n* ${listItemTexts[1]}\n`;\n\n  const renderString =\n      (string: string, selector: 'p'|'code'|'devtools-code-block',\n       renderer?: MarkdownView.MarkdownView.MarkdownLitRenderer) => {\n        const component = new MarkdownView.MarkdownView.MarkdownView();\n        renderElementIntoDOM(component);\n        component.data = {tokens: Marked.Marked.lexer(string), renderer};\n        assert.isNotNull(component.shadowRoot);\n        const element = component.shadowRoot.querySelector(selector);\n        return element ? element : document.createElement('span');\n      };\n\n  describe('component', () => {\n    it('renders basic markdown correctly', () => {\n      const component = new MarkdownView.MarkdownView.MarkdownView();\n      renderElementIntoDOM(component);\n\n      component.data = {tokens: Marked.Marked.lexer(markdownString)};\n\n      assert.isNotNull(component.shadowRoot);\n\n      const paragraphs = Array.from(component.shadowRoot.querySelectorAll('p'));\n      assert.lengthOf(paragraphs, 1);\n      assert.strictEqual(paragraphs[0].innerText, paragraphText);\n\n      const listItems = Array.from(component.shadowRoot.querySelectorAll('li'));\n      assert.lengthOf(listItems, 2);\n      assert.deepEqual(listItems.map(item => item.textContent), listItemTexts);\n    });\n\n    it('renders a codeblock', () => {\n      const codeBlock = renderString(\n          `\\`\\`\\`\nconsole.log('test')\n\\`\\`\\``,\n          'devtools-code-block');\n      assert.strictEqual((codeBlock as MarkdownView.CodeBlock.CodeBlock).code, 'console.log(\\'test\\')');\n    });\n\n    it('renders using a custom renderer', () => {\n      const codeBlock =\n          renderString('`console.log()`', 'code', new class extends MarkdownView.MarkdownView.MarkdownLitRenderer {\n            override templateForToken(token: Marked.Marked.Token): Lit.TemplateResult|null {\n              if (token.type === 'codespan') {\n                return html`<code>overriden</code>`;\n              }\n              return super.templateForToken(token as Marked.Marked.MarkedToken);\n            }\n          }());\n      assert.strictEqual(codeBlock.innerText, 'overriden');\n    });\n  });\n\n  describe('escaping', () => {\n    it('renders basic escaped non-html tag', () => {\n      const paragraph = renderString('<123>', 'p');\n      assert.strictEqual(paragraph.innerText, '<123>');\n    });\n\n    it('renders all unescaped chars', () => {\n      const paragraph = renderString('<>&\\'\"', 'p');\n      assert.strictEqual(paragraph.innerText, '<>&\\'\"');\n    });\n\n    it('renders all escaped chars', () => {\n      const paragraph = renderString('&lt;&gt;&amp;&#39;&quot;', 'p');\n      assert.strictEqual(paragraph.innerText, '<>&\\'\"');\n    });\n\n    it('renders basic escaped tag inside codespan', () => {\n      const codeBlock = renderString('`<123>`', 'code');\n      assert.strictEqual(codeBlock.innerText, '<123>');\n    });\n  });\n});\n"]}