{"version":3,"file":"LoggingState.js","sourceRoot":"","sources":["../../../../../../front_end/ui/visual_logging/LoggingState.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport {type Loggable} from './Loggable.js';\nimport {type LoggingConfig} from './LoggingConfig.js';\n\nexport interface LoggingState {\n  impressionLogged: boolean;\n  processed: boolean;\n  config: LoggingConfig;\n  context: ContextProvider;\n  veid: number;\n  parent: LoggingState|null;\n  processedForDebugging?: boolean;\n}\n\nconst state = new WeakMap<Loggable, LoggingState>();\n\nlet nextVeId = 0;\n\nexport function getOrCreateLoggingState(loggable: Loggable, config: LoggingConfig, parent?: Loggable): LoggingState {\n  if (state.has(loggable)) {\n    return state.get(loggable) as LoggingState;\n  }\n  if (config.parent && parentProviders.has(config.parent) && loggable instanceof Element) {\n    parent = parentProviders.get(config.parent)?.(loggable);\n  }\n\n  const loggableState = {\n    impressionLogged: false,\n    processed: false,\n    config,\n    context: resolveContext(config.context),\n    veid: ++nextVeId,\n    parent: parent ? getLoggingState(parent) : null,\n  };\n  state.set(loggable, loggableState);\n  return loggableState;\n}\n\nexport function getLoggingState(loggable: Loggable): LoggingState|null {\n  return state.get(loggable) || null;\n}\n\nexport type ContextProvider = (e: Loggable|Event) => Promise<number|undefined>;\nconst contextProviders = new Map<string, ContextProvider>();\n\nexport function registerContextProvider(name: string, provider: ContextProvider): void {\n  if (contextProviders.has(name)) {\n    throw new Error(`Context provider with the name '${name} is already registered'`);\n  }\n  contextProviders.set(name, provider);\n}\n\nconst resolveContext = (context?: string): ContextProvider => {\n  if (!context) {\n    return () => Promise.resolve(undefined);\n  }\n  const contextProvider = contextProviders.get(context);\n  if (contextProvider) {\n    return contextProvider;\n  }\n  const number = parseInt(context, 10);\n  if (!isNaN(number)) {\n    return () => Promise.resolve(number);\n  }\n  const encoder = new TextEncoder();\n  const data = encoder.encode(context);\n  const hash = crypto.subtle ? crypto.subtle.digest('SHA-1', data).then(x => (new DataView(x)).getUint32(0, true)) :\n                               // Layout tests run in an insecure context where crypto.subtle is not available.\n                               Promise.resolve(0xDEADBEEF);\n  return () => hash;\n};\n\ntype ParentProvider = (e: Element) => Element|undefined;\nconst parentProviders = new Map<string, ParentProvider>();\n\nexport function registerParentProvider(name: string, provider: ParentProvider): void {\n  if (parentProviders.has(name)) {\n    throw new Error(`Parent provider with the name '${name} is already registered'`);\n  }\n  parentProviders.set(name, provider);\n}\n"]}