{"version":3,"file":"strip-whitespace.test.js","sourceRoot":"","sources":["../../../../../../front_end/ui/lit/strip-whitespace.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {html} from './lit.js';\n\ndescribe('html', () => {\n  it('should return the same string if there are no newlines', () => {\n    assert.deepEqual(html`<div>Hello</div>`, html`<div>Hello</div>`);\n  });\n\n  it('should return the same instance for the same string', () => {\n    const set = new Set<TemplateStringsArray>();\n    for (let i = 0; i < 10; i++) {\n      set.add(html`\n        <div>\n          Hello\n        </div>`.strings);\n    }\n    assert.strictEqual(set.size, 1);\n  });\n\n  it('should remove newlines outside of tags', () => {\n    const result = html`\n      <div>\n        Hello\n      </div>\n    `;\n    assert.deepEqual(result, html`<div>Hello</div>`);\n  });\n\n  it('should not remove newlines inside tags', () => {\n    const result = html`<div\n        >Hello</div\n      >`.strings as unknown as string[];\n    assert.deepEqual(result, ['<div\\n        >Hello</div\\n      >']);\n  });\n\n  it('should handle mixed newlines and tags', () => {\n    const result = html`\n      <p>\n        Hello,\n        <span> World</span>\n      </p>\n    `.strings as unknown as string[];\n    assert.deepEqual(result, ['<p>Hello,<span> World</span></p>']);\n  });\n\n  it('should handle multiple newlines', () => {\n    const result = html`\n            <div>\n\n\n                Hello\n            </div>\n        `.strings as unknown as string[];\n    assert.deepEqual(result, ['<div>Hello</div>']);\n  });\n\n  it('should handle a simple string interpolation', () => {\n    const name = 'World';\n    const result = html`<div>Hello, ${name}!</div>`;\n    assert.deepEqual(result.strings as unknown as string[], ['<div>Hello, ', '!</div>']);\n    assert.deepEqual(result.values, [name]);\n  });\n\n  it('should handle multiple string interpolations', () => {\n    const firstName = 'Hello';\n    const lastName = 'World';\n    const result = html`<div>${firstName} ${lastName}!</div>`;\n    assert.deepEqual(result.strings as unknown as string[], ['<div>', ' ', '!</div>']);\n    assert.deepEqual(result.values, [firstName, lastName]);\n  });\n\n  it('should handle string interpolation at the beginning', () => {\n    const greeting = 'Hello';\n    const result = html`${greeting} World`;\n    assert.deepEqual(result.strings as unknown as string[], ['', ' World']);\n    assert.deepEqual(result.values, [greeting]);\n  });\n\n  it('should handle string interpolation at the end', () => {\n    const punctuation = '!';\n    const result = html`Hello${punctuation}`;\n    assert.deepEqual(result.strings as unknown as string[], ['Hello', '']);\n    assert.deepEqual(result.values, [punctuation]);\n  });\n\n  it('should handle string interpolation with newlines', () => {\n    const name = 'World';\n    const result = html`\n      <div>\n        Hello, ${name}\n      </div>\n    `;\n    assert.deepEqual(result.strings as unknown as string[], ['<div>Hello, ', '</div>']);\n    assert.deepEqual(result.values, [name]);\n  });\n\n  it('should remove whitespace around string interpolations outside of tags only', () => {\n    const className = 'class-name';\n    const name = 'World';\n    const result = html`\n      <div class=${className} id=\"foo\">\n        ${name}\n      </div>\n    `;\n    assert.deepEqual(result.strings as unknown as string[], ['<div class=', ' id=\"foo\">', '</div>']);\n  });\n});\n"]}