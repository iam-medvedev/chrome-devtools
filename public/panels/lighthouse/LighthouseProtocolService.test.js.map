{"version":3,"file":"LighthouseProtocolService.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/lighthouse/LighthouseProtocolService.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assertNotNullOrUndefined} from '../../core/platform/platform.js';\nimport type * as ProtocolClient from '../../core/protocol_client/protocol_client.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection, dispatchEvent} from '../../testing/MockConnection.js';\n\nimport type * as LighthouseModule from './lighthouse.js';\n\nconst {assert} = chai;\n\ndescribeWithMockConnection('LighthouseProtocolService', () => {\n  const attachDetach = (targetFactory: () => {rootTarget: SDK.Target.Target, primaryTarget: SDK.Target.Target}) => {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    let Lighthouse: typeof LighthouseModule;\n    let primaryTarget: SDK.Target.Target;\n    let rootTarget: SDK.Target.Target;\n    let suspendAllTargets: sinon.SinonStub;\n    let resumeAllTargets: sinon.SinonStub;\n    let createParallelConnection: sinon.SinonStub;\n    const FRAME = {\n      id: 'main',\n      loaderId: 'test',\n      url: 'http://example.com',\n      securityOrigin: 'http://example.com',\n      mimeType: 'text/html',\n    };\n\n    beforeEach(async () => {\n      Lighthouse = await import('./lighthouse.js');\n      const targets = targetFactory();\n      primaryTarget = targets.primaryTarget;\n      rootTarget = targets.rootTarget;\n\n      const targetManager = SDK.TargetManager.TargetManager.instance();\n\n      suspendAllTargets = sinon.stub(targetManager, 'suspendAllTargets').resolves();\n      resumeAllTargets = sinon.stub(targetManager, 'resumeAllTargets').resolves();\n      SDK.ChildTargetManager.ChildTargetManager.install();\n      const childTargetManager = primaryTarget.model(SDK.ChildTargetManager.ChildTargetManager);\n      assertNotNullOrUndefined(childTargetManager);\n\n      sinon.stub(childTargetManager, 'getParentTargetId').resolves(primaryTarget.targetInfo()?.targetId);\n      if (rootTarget === primaryTarget) {\n        createParallelConnection = sinon.stub(childTargetManager, 'createParallelConnection').resolves({\n          connection: {disconnect: () => {}} as ProtocolClient.InspectorBackend.Connection,\n          sessionId: 'foo',\n        });\n      } else {\n        const rootChildTargetManager = rootTarget.model(SDK.ChildTargetManager.ChildTargetManager);\n        assertNotNullOrUndefined(rootChildTargetManager);\n        sinon.stub(rootChildTargetManager, 'getParentTargetId').resolves(rootTarget.targetInfo()?.targetId);\n        createParallelConnection = sinon.stub(rootChildTargetManager, 'createParallelConnection').resolves({\n          connection: {disconnect: () => {}} as ProtocolClient.InspectorBackend.Connection,\n          sessionId: 'foo',\n        });\n      }\n      dispatchEvent(primaryTarget, 'Page.frameNavigated', {frame: FRAME});\n    });\n\n    it('suspends all targets', async () => {\n      const service = new Lighthouse.LighthouseProtocolService.ProtocolService();\n      await service.attach();\n      assert.isTrue(suspendAllTargets.calledOnce);\n    });\n\n    it('creates a parallel connection', async () => {\n      const service = new Lighthouse.LighthouseProtocolService.ProtocolService();\n      await service.attach();\n      assert.isTrue(createParallelConnection.calledOnce);\n    });\n\n    it('resumes all targets', async () => {\n      const service = new Lighthouse.LighthouseProtocolService.ProtocolService();\n      await service.attach();\n      await service.detach();\n      assert.isTrue(resumeAllTargets.calledOnce);\n    });\n  };\n\n  describe('attach/detach without tab taget', () => attachDetach(() => {\n                                                const target = createTarget();\n                                                return {\n                                                  rootTarget: target,\n                                                  primaryTarget: target,\n                                                };\n                                              }));\n  describe('attach/detach with tab taget', () => attachDetach(() => {\n                                             const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n                                             createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n                                             return {\n                                               rootTarget: tabTarget,\n                                               primaryTarget: createTarget({parentTarget: tabTarget}),\n                                             };\n                                           }));\n});\n"]}