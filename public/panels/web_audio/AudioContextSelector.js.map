{"version":3,"file":"AudioContextSelector.js","sourceRoot":"","sources":["../../../../../../front_end/panels/web_audio/AudioContextSelector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n   *@description Text that shows there is no recording\n   */\n  noRecordings: '(no recordings)',\n  /**\n   *@description Label prefix for an audio context selection\n   *@example {realtime (1e03ec)} PH1\n   */\n  audioContextS: 'Audio context: {PH1}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/web_audio/AudioContextSelector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class AudioContextSelector extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly placeholderText: Platform.UIString.LocalizedString;\n  private readonly selectElement: HTMLSelectElement;\n  private readonly items: UI.ListModel.ListModel<Protocol.WebAudio.BaseAudioContext>;\n  private readonly toolbarItemInternal: UI.Toolbar.ToolbarItem;\n\n  constructor() {\n    super();\n\n    this.placeholderText = i18nString(UIStrings.noRecordings);\n    this.items = new UI.ListModel.ListModel();\n    this.selectElement = document.createElement('select');\n    this.toolbarItemInternal = new UI.Toolbar.ToolbarItem(this.selectElement);\n    this.toolbarItemInternal.setTitle(i18nString(UIStrings.audioContextS, {PH1: this.placeholderText}));\n    this.selectElement.addEventListener('change', this.onSelectionChanged.bind(this));\n    this.selectElement.disabled = true;\n    this.addPlaceholderOption();\n\n    this.items.addEventListener(UI.ListModel.Events.ITEMS_REPLACED, this.onListItemReplaced, this);\n  }\n\n  private addPlaceholderOption(): void {\n    const placeholderOption = UI.Fragment.html`\n    <option value=\"\" hidden>${this.placeholderText}</option>`;\n    this.selectElement.appendChild(placeholderOption);\n  }\n\n  private onListItemReplaced(): void {\n    this.selectElement.removeChildren();\n\n    if (this.items.length === 0) {\n      this.addPlaceholderOption();\n      this.selectElement.disabled = true;\n      this.onSelectionChanged();\n      return;\n    }\n\n    for (const context of this.items) {\n      const option = UI.Fragment.html`\n    <option value=${context.contextId}>${this.titleFor(context)}</option>`;\n      this.selectElement.appendChild(option);\n    }\n    this.selectElement.disabled = false;\n    this.onSelectionChanged();\n  }\n\n  contextCreated({data: context}: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.BaseAudioContext>): void {\n    this.items.insert(this.items.length, context);\n    this.onListItemReplaced();\n  }\n\n  contextDestroyed({data: contextId}: Common.EventTarget.EventTargetEvent<string>): void {\n    const index = this.items.findIndex(context => context.contextId === contextId);\n    if (index !== -1) {\n      this.items.remove(index);\n      this.onListItemReplaced();\n    }\n  }\n\n  contextChanged({data: changedContext}: Common.EventTarget.EventTargetEvent<Protocol.WebAudio.BaseAudioContext>):\n      void {\n    const index = this.items.findIndex(context => context.contextId === changedContext.contextId);\n    if (index !== -1) {\n      this.items.replace(index, changedContext);\n      this.onListItemReplaced();\n    }\n  }\n\n  selectedContext(): Protocol.WebAudio.BaseAudioContext|null {\n    const selectedValue = this.selectElement.value;\n    if (!selectedValue) {\n      return null;\n    }\n    return this.items.find(context => context.contextId === selectedValue) || null;\n  }\n\n  onSelectionChanged(): void {\n    const selectedContext = this.selectedContext();\n    if (selectedContext) {\n      this.toolbarItemInternal.setTitle(i18nString(UIStrings.audioContextS, {PH1: this.titleFor(selectedContext)}));\n    } else {\n      this.toolbarItemInternal.setTitle(i18nString(UIStrings.audioContextS, {PH1: this.placeholderText}));\n    }\n    this.dispatchEventToListeners(Events.CONTEXT_SELECTED, selectedContext);\n  }\n\n  itemSelected(item: Protocol.WebAudio.BaseAudioContext|null): void {\n    if (!item) {\n      return;\n    }\n    this.selectElement.value = item.contextId;\n    this.onSelectionChanged();\n  }\n\n  reset(): void {\n    this.items.replaceAll([]);\n    this.onListItemReplaced();\n  }\n\n  titleFor(context: Protocol.WebAudio.BaseAudioContext): string {\n    return `${context.contextType} (${context.contextId.substr(-6)})`;\n  }\n\n  toolbarItem(): UI.Toolbar.ToolbarItem {\n    return this.toolbarItemInternal;\n  }\n}\n\nexport const enum Events {\n  CONTEXT_SELECTED = 'ContextSelected',\n}\n\nexport interface EventTypes {\n  [Events.CONTEXT_SELECTED]: Protocol.WebAudio.BaseAudioContext|null;\n}\n"]}