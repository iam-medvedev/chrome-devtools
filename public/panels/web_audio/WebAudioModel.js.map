{"version":3,"file":"WebAudioModel.js","sourceRoot":"","sources":["../../../../../../front_end/panels/web_audio/WebAudioModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nexport class WebAudioModel extends SDK.SDKModel.SDKModel<EventTypes> implements ProtocolProxyApi.WebAudioDispatcher {\n  private enabled: boolean;\n  private readonly agent: ProtocolProxyApi.WebAudioApi;\n  constructor(target: SDK.Target.Target) {\n    super(target);\n\n    this.enabled = false;\n\n    this.agent = target.webAudioAgent();\n    target.registerWebAudioDispatcher(this);\n\n    // TODO(crbug.com/963510): Some OfflineAudioContexts are not uninitialized\n    // properly because LifeCycleObserver::ContextDestroyed() is not fired for\n    // unknown reasons. This creates inconsistency in AudioGraphTracer\n    // and AudioContextSelector in DevTools.\n    //\n    // To resolve this inconsistency, we flush the leftover from the previous\n    // frame when the current page is loaded. This call can be omitted when the\n    // bug is fixed.\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.FrameNavigated, this.flushContexts, this);\n  }\n\n  private flushContexts(): void {\n    this.dispatchEventToListeners(Events.MODEL_RESET);\n  }\n\n  override async suspendModel(): Promise<void> {\n    this.dispatchEventToListeners(Events.MODEL_SUSPEND);\n    await this.agent.invoke_disable();\n  }\n\n  override async resumeModel(): Promise<void> {\n    if (!this.enabled) {\n      return await Promise.resolve();\n    }\n    await this.agent.invoke_enable();\n  }\n\n  ensureEnabled(): void {\n    if (this.enabled) {\n      return;\n    }\n    void this.agent.invoke_enable();\n    this.enabled = true;\n  }\n\n  contextCreated({context}: Protocol.WebAudio.ContextCreatedEvent): void {\n    this.dispatchEventToListeners(Events.CONTEXT_CREATED, context);\n  }\n\n  contextWillBeDestroyed({contextId}: Protocol.WebAudio.ContextWillBeDestroyedEvent): void {\n    this.dispatchEventToListeners(Events.CONTEXT_DESTROYED, contextId);\n  }\n\n  contextChanged({context}: Protocol.WebAudio.ContextChangedEvent): void {\n    this.dispatchEventToListeners(Events.CONTEXT_CHANGED, context);\n  }\n\n  audioListenerCreated({listener}: Protocol.WebAudio.AudioListenerCreatedEvent): void {\n    this.dispatchEventToListeners(Events.AUDIO_LISTENER_CREATED, listener);\n  }\n\n  audioListenerWillBeDestroyed({listenerId, contextId}: Protocol.WebAudio.AudioListenerWillBeDestroyedEvent): void {\n    this.dispatchEventToListeners(Events.AUDIO_LISTENER_WILL_BE_DESTROYED, {listenerId, contextId});\n  }\n\n  audioNodeCreated({node}: Protocol.WebAudio.AudioNodeCreatedEvent): void {\n    this.dispatchEventToListeners(Events.AUDIO_NODE_CREATED, node);\n  }\n\n  audioNodeWillBeDestroyed({contextId, nodeId}: Protocol.WebAudio.AudioNodeWillBeDestroyedEvent): void {\n    this.dispatchEventToListeners(Events.AUDIO_NODE_WILL_BE_DESTROYED, {contextId, nodeId});\n  }\n\n  audioParamCreated({param}: Protocol.WebAudio.AudioParamCreatedEvent): void {\n    this.dispatchEventToListeners(Events.AUDIO_PARAM_CREATED, param);\n  }\n\n  audioParamWillBeDestroyed({contextId, nodeId, paramId}: Protocol.WebAudio.AudioParamWillBeDestroyedEvent): void {\n    this.dispatchEventToListeners(Events.AUDIO_PARAM_WILL_BE_DESTROYED, {contextId, nodeId, paramId});\n  }\n\n  nodesConnected({contextId, sourceId, destinationId, sourceOutputIndex, destinationInputIndex}:\n                     Protocol.WebAudio.NodesConnectedEvent): void {\n    this.dispatchEventToListeners(\n        Events.NODES_CONNECTED, {contextId, sourceId, destinationId, sourceOutputIndex, destinationInputIndex});\n  }\n\n  nodesDisconnected({contextId, sourceId, destinationId, sourceOutputIndex, destinationInputIndex}:\n                        Protocol.WebAudio.NodesDisconnectedEvent): void {\n    this.dispatchEventToListeners(\n        Events.NODES_DISCONNECTED, {contextId, sourceId, destinationId, sourceOutputIndex, destinationInputIndex});\n  }\n\n  nodeParamConnected({contextId, sourceId, destinationId, sourceOutputIndex}:\n                         Protocol.WebAudio.NodeParamConnectedEvent): void {\n    this.dispatchEventToListeners(Events.NODE_PARAM_CONNECTED, {contextId, sourceId, destinationId, sourceOutputIndex});\n  }\n\n  nodeParamDisconnected({contextId, sourceId, destinationId, sourceOutputIndex}:\n                            Protocol.WebAudio.NodeParamDisconnectedEvent): void {\n    this.dispatchEventToListeners(\n        Events.NODE_PARAM_DISCONNECTED, {contextId, sourceId, destinationId, sourceOutputIndex});\n  }\n\n  async requestRealtimeData(contextId: Protocol.WebAudio.GraphObjectId):\n      Promise<Protocol.WebAudio.ContextRealtimeData|null> {\n    const realtimeResponse = await this.agent.invoke_getRealtimeData({contextId});\n    return realtimeResponse.realtimeData;\n  }\n}\n\nSDK.SDKModel.SDKModel.register(WebAudioModel, {capabilities: SDK.Target.Capability.DOM, autostart: false});\n\nexport const enum Events {\n  CONTEXT_CREATED = 'ContextCreated',\n  CONTEXT_DESTROYED = 'ContextDestroyed',\n  CONTEXT_CHANGED = 'ContextChanged',\n  MODEL_RESET = 'ModelReset',\n  MODEL_SUSPEND = 'ModelSuspend',\n  AUDIO_LISTENER_CREATED = 'AudioListenerCreated',\n  AUDIO_LISTENER_WILL_BE_DESTROYED = 'AudioListenerWillBeDestroyed',\n  AUDIO_NODE_CREATED = 'AudioNodeCreated',\n  AUDIO_NODE_WILL_BE_DESTROYED = 'AudioNodeWillBeDestroyed',\n  AUDIO_PARAM_CREATED = 'AudioParamCreated',\n  AUDIO_PARAM_WILL_BE_DESTROYED = 'AudioParamWillBeDestroyed',\n  NODES_CONNECTED = 'NodesConnected',\n  NODES_DISCONNECTED = 'NodesDisconnected',\n  NODE_PARAM_CONNECTED = 'NodeParamConnected',\n  NODE_PARAM_DISCONNECTED = 'NodeParamDisconnected',\n}\n\nexport interface EventTypes {\n  [Events.CONTEXT_CREATED]: Protocol.WebAudio.BaseAudioContext;\n  [Events.CONTEXT_DESTROYED]: Protocol.WebAudio.GraphObjectId;\n  [Events.CONTEXT_CHANGED]: Protocol.WebAudio.BaseAudioContext;\n  [Events.MODEL_RESET]: void;\n  [Events.MODEL_SUSPEND]: void;\n  [Events.AUDIO_LISTENER_CREATED]: Protocol.WebAudio.AudioListener;\n  [Events.AUDIO_LISTENER_WILL_BE_DESTROYED]: Protocol.WebAudio.AudioListenerWillBeDestroyedEvent;\n  [Events.AUDIO_NODE_CREATED]: Protocol.WebAudio.AudioNode;\n  [Events.AUDIO_NODE_WILL_BE_DESTROYED]: Protocol.WebAudio.AudioNodeWillBeDestroyedEvent;\n  [Events.AUDIO_PARAM_CREATED]: Protocol.WebAudio.AudioParam;\n  [Events.AUDIO_PARAM_WILL_BE_DESTROYED]: Protocol.WebAudio.AudioParamWillBeDestroyedEvent;\n  [Events.NODES_CONNECTED]: Protocol.WebAudio.NodesConnectedEvent;\n  [Events.NODES_DISCONNECTED]: Protocol.WebAudio.NodesDisconnectedEvent;\n  [Events.NODE_PARAM_CONNECTED]: Protocol.WebAudio.NodeParamConnectedEvent;\n  [Events.NODE_PARAM_DISCONNECTED]: Protocol.WebAudio.NodeParamDisconnectedEvent;\n}\n"]}