{"version":3,"file":"ElementsTreeOutline.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/ElementsTreeOutline.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n} from '../../testing/MockConnection.js';\nimport {MockIssuesModel} from '../../testing/MockIssuesModel.js';\n\nimport * as Elements from './elements.js';\n\ndescribeWithMockConnection('ElementsTreeOutline', () => {\n  let target: SDK.Target.Target;\n  let model: SDK.DOMModel.DOMModel;\n  let treeOutline: Elements.ElementsTreeOutline.ElementsTreeOutline;\n\n  beforeEach(() => {\n    target = createTarget();\n\n    Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.HIGHLIGHT_ERRORS_ELEMENTS_PANEL);\n    treeOutline = new Elements.ElementsTreeOutline.ElementsTreeOutline(/* omitRootDOMNode */ true);\n    treeOutline.wireToDOMModel(target.model(SDK.DOMModel.DOMModel) as SDK.DOMModel.DOMModel);\n\n    const modelBeforeAssertion = target.model(SDK.DOMModel.DOMModel);\n    assert.exists(modelBeforeAssertion);\n    model = modelBeforeAssertion;\n  });\n\n  afterEach(() => {\n    target.dispose('NO_REASON');\n  });\n\n  it('should include the ::checkmark pseudo element', () => {\n    const optionNode = SDK.DOMModel.DOMNode.create(model, null, false, {\n      nodeId: 1 as Protocol.DOM.NodeId,\n      backendNodeId: 1 as Protocol.DOM.BackendNodeId,\n      nodeType: Node.ELEMENT_NODE,\n      nodeName: 'option',\n      localName: 'option',\n      nodeValue: 'An Option',\n      childNodeCount: 1,\n      pseudoElements: [{\n        parentId: 1 as Protocol.DOM.NodeId,\n        nodeId: 2 as Protocol.DOM.NodeId,\n        backendNodeId: 2 as Protocol.DOM.BackendNodeId,\n        nodeType: Node.ELEMENT_NODE,\n        pseudoType: Protocol.DOM.PseudoType.Checkmark,\n        pseudoIdentifier: '::checkmark',\n        nodeName: '::checkmark',\n        localName: '::checkmark',\n        nodeValue: '*',\n      }],\n    });\n    assert.isNotNull(optionNode);\n\n    const checkmarkNode = optionNode.checkmarkPseudoElement();\n    assert.isNotNull(checkmarkNode);\n\n    treeOutline.rootDOMNode = optionNode;\n    assert.isNotNull(treeOutline.findTreeElement(checkmarkNode!));\n  });\n\n  it('should include the ::picker-icon pseudo element', () => {\n    const selectNode = SDK.DOMModel.DOMNode.create(model, null, false, {\n      nodeId: 1 as Protocol.DOM.NodeId,\n      backendNodeId: 1 as Protocol.DOM.BackendNodeId,\n      nodeType: Node.ELEMENT_NODE,\n      nodeName: 'select',\n      localName: 'select',\n      nodeValue: 'A Select',\n      childNodeCount: 1,\n      pseudoElements: [{\n        parentId: 1 as Protocol.DOM.NodeId,\n        nodeId: 2 as Protocol.DOM.NodeId,\n        backendNodeId: 2 as Protocol.DOM.BackendNodeId,\n        nodeType: Node.ELEMENT_NODE,\n        pseudoType: Protocol.DOM.PseudoType.PickerIcon,\n        pseudoIdentifier: '::picker-icon',\n        nodeName: '::picker-icon',\n        localName: '::picker-icon',\n        nodeValue: '^',\n      }],\n    });\n    assert.isNotNull(selectNode);\n\n    const pickerIconNode = selectNode.pickerIconPseudoElement();\n    assert.isNotNull(pickerIconNode);\n\n    treeOutline.rootDOMNode = selectNode;\n    assert.isNotNull(treeOutline.findTreeElement(pickerIconNode!));\n  });\n\n  it('should add an element-related issue to the relevant tree element', async () => {\n    const divNodePayload = {\n      nodeId: 2 as Protocol.DOM.NodeId,\n      parentId: 1 as Protocol.DOM.NodeId,\n      backendNodeId: 2 as Protocol.DOM.BackendNodeId,\n      nodeType: Node.ELEMENT_NODE,\n      nodeName: 'DIV',\n      childNodeCount: 0,\n      localName: 'div',\n      nodeValue: 'A div',\n    };\n    const rootNode = SDK.DOMModel.DOMNode.create(model, null, false, {\n      nodeId: 1 as Protocol.DOM.NodeId,\n      backendNodeId: 1 as Protocol.DOM.BackendNodeId,\n      nodeType: Node.ELEMENT_NODE,\n      nodeName: 'BODY',\n      localName: 'body',\n      nodeValue: 'Body',\n      childNodeCount: 1,\n      children: [divNodePayload],\n    });\n    assert.isNotNull(rootNode);\n    treeOutline.rootDOMNode = rootNode;\n    const divNode = rootNode.children()![0];\n    assert.isNotNull(divNode);\n    const treeElement = treeOutline.findTreeElement(divNode);\n    assert.isNotNull(treeElement);\n    const deferredDOMNodeStub = sinon.stub(SDK.DOMModel.DeferredDOMNode.prototype, 'resolvePromise').resolves(divNode);\n\n    const issuesManager = IssuesManager.IssuesManager.IssuesManager.instance();\n    const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n\n    // Test that generic issue can be added to the tree element.\n    {\n      const inspectorIssue = {\n        code: Protocol.Audits.InspectorIssueCode.GenericIssue,\n        details: {\n          genericIssueDetails: {\n            errorType: Protocol.Audits.GenericIssueErrorType.FormLabelForNameError,\n            frameId: 'main' as Protocol.Page.FrameId,\n            violatingNodeId: 2 as Protocol.DOM.BackendNodeId,\n          },\n        },\n      };\n      const issue = IssuesManager.GenericIssue.GenericIssue.fromInspectorIssue(mockModel, inspectorIssue)[0];\n      issuesManager.dispatchEventToListeners(\n          IssuesManager.IssuesManager.Events.ISSUE_ADDED, {issuesModel: mockModel, issue});\n      await deferredDOMNodeStub();\n      const tagElement = treeElement.listItemElement.getElementsByClassName('webkit-html-tag-name')[0];\n      assert.isTrue(tagElement.classList.contains('violating-element'));\n      // Reset tag to prepare for subsequent tests.\n      tagElement.classList.remove('violating-element');\n    }\n\n    // Test that <select> issue can be added to the tree element.\n    {\n      const inspectorIssue = {\n        code: Protocol.Audits.InspectorIssueCode.SelectElementAccessibilityIssue,\n        details: {\n          selectElementAccessibilityIssueDetails: {\n            nodeId: 2 as Protocol.DOM.BackendNodeId,\n            selectElementAccessibilityIssueReason:\n                Protocol.Audits.SelectElementAccessibilityIssueReason.DisallowedSelectChild,\n            hasDisallowedAttributes: false,\n          },\n        },\n      };\n      const issue = IssuesManager.SelectElementAccessibilityIssue.SelectElementAccessibilityIssue.fromInspectorIssue(\n          mockModel, inspectorIssue)[0];\n      issuesManager.dispatchEventToListeners(\n          IssuesManager.IssuesManager.Events.ISSUE_ADDED, {issuesModel: mockModel, issue});\n      await deferredDOMNodeStub();\n      const tagElement = treeElement.listItemElement.getElementsByClassName('webkit-html-tag-name')[0];\n      assert.isTrue(tagElement.classList.contains('violating-element'));\n      // Reset tag to prepare for subsequent tests.\n      tagElement.classList.remove('violating-element');\n    }\n\n    // Test that non-supported issue won't be added to the tree element.\n    {\n      const inspectorIssue = {\n        code: Protocol.Audits.InspectorIssueCode.ContentSecurityPolicyIssue,\n        details: {},\n      };\n      const issue = IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue.fromInspectorIssue(\n          mockModel, inspectorIssue)[0];\n      issuesManager.dispatchEventToListeners(\n          IssuesManager.IssuesManager.Events.ISSUE_ADDED, {issuesModel: mockModel, issue});\n      await deferredDOMNodeStub();\n      const tagElement = treeElement.listItemElement.getElementsByClassName('webkit-html-tag-name')[0];\n      assert.isFalse(tagElement.classList.contains('violating-element'));\n    }\n  });\n});\n"]}