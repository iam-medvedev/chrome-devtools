{"version":3,"file":"PlatformFontsWidget.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/PlatformFontsWidget.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {html, render} from '../../ui/lit/lit.js';\n\nimport {type ComputedStyleModel, Events as ComputedStyleModelEvents} from './ComputedStyleModel.js';\nimport platformFontsWidgetStyles from './platformFontsWidget.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Section title text content in Platform Fonts Widget of the Elements panel\n   */\n  renderedFonts: 'Rendered Fonts',\n  /**\n   * @description Font property title text content in Platform Fonts Widget of the Elements panel\n   */\n  familyName: 'Family name',\n  /**\n   * @description Font property title text content in Platform Fonts Widget of the Elements panel\n   */\n  postScriptName: 'PostScript name',\n  /**\n   * @description Font property title text content in Platform Fonts Widget of the Elements panel\n   */\n  fontOrigin: 'Font origin',\n  /**\n   * @description Text in Platform Fonts Widget of the Elements panel\n   */\n  networkResource: 'Network resource',\n  /**\n   * @description Text in Platform Fonts Widget of the Elements panel\n   */\n  localFile: 'Local file',\n  /**\n   * @description Text in Platform Fonts Widget of the Elements panel. Indicates a number of glyphs (characters) .\n   */\n  dGlyphs: '{n, plural, =1 {(# glyph)} other {(# glyphs)}}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/PlatformFontsWidget.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface PlatformFontsWidgetInput {\n  platformFonts: Protocol.CSS.PlatformFontUsage[]|null;\n}\n\ntype View = (input: PlatformFontsWidgetInput, output: object, target: HTMLElement) => void;\n\nexport const DEFAULT_VIEW: View = (input, _output, target) => {\n  const isEmptySection = !input.platformFonts?.length;\n\n  // clang-format off\n  render(html`\n    <style>${platformFontsWidgetStyles}</style>\n    <div class=\"platform-fonts\">\n      ${isEmptySection ? '' : html`\n        <div class=\"title\">${i18nString(UIStrings.renderedFonts)}</div>\n        <div class=\"stats-section\">\n          ${input.platformFonts?.map(platformFont => {\n            const fontOrigin = platformFont.isCustomFont ? i18nString(UIStrings.networkResource) : i18nString(UIStrings.localFile);\n            const usage = platformFont.glyphCount;\n            return html`\n              <div class=\"font-stats-item\">\n                <div><span class=\"font-property-name\">${i18nString(UIStrings.familyName)}</span>: ${platformFont.familyName}</div>\n                <div><span class=\"font-property-name\">${i18nString(UIStrings.postScriptName)}</span>: ${platformFont.postScriptName}</div>\n                <div><span class=\"font-property-name\">${i18nString(UIStrings.fontOrigin)}</span>: ${fontOrigin}<span class=\"font-usage\">${i18nString(UIStrings.dGlyphs, {n: usage})}</span></div>\n              </div>\n            `;\n          })}\n        </div>\n      `}\n    </div>`,\n    target);\n  // clang-format on\n};\n\nexport class PlatformFontsWidget extends UI.ThrottledWidget.ThrottledWidget {\n  private readonly sharedModel: ComputedStyleModel;\n  readonly #view: View;\n\n  constructor(sharedModel: ComputedStyleModel, view: View = DEFAULT_VIEW) {\n    super(true);\n    this.#view = view;\n    this.registerRequiredCSS(platformFontsWidgetStyles);\n\n    this.sharedModel = sharedModel;\n    this.sharedModel.addEventListener(ComputedStyleModelEvents.CSS_MODEL_CHANGED, this.update, this);\n    this.sharedModel.addEventListener(ComputedStyleModelEvents.COMPUTED_STYLE_CHANGED, this.update, this);\n  }\n\n  override async doUpdate(): Promise<void> {\n    const cssModel = this.sharedModel.cssModel();\n    const node = this.sharedModel.node();\n    if (!node || !cssModel) {\n      this.#view({platformFonts: null}, {}, this.contentElement);\n      return;\n    }\n\n    const platformFonts = await cssModel.getPlatformFonts(node.id);\n    const sortedPlatformFonts = platformFonts?.sort((a, b) => b.glyphCount - a.glyphCount) || null;\n    this.#view({platformFonts: sortedPlatformFonts}, {}, this.contentElement);\n  }\n}\n"]}