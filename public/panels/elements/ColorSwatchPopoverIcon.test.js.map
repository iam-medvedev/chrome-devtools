{"version":3,"file":"ColorSwatchPopoverIcon.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/ColorSwatchPopoverIcon.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport {describeWithEnvironment, setupActionRegistry} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {getMatchedStyles} from '../../testing/StyleHelpers.js';\nimport * as ColorPicker from '../../ui/legacy/components/color_picker/color_picker.js';\nimport * as InlineEditor from '../../ui/legacy/components/inline_editor/inline_editor.js';\n\nimport * as Elements from './elements.js';\n\ndescribeWithMockConnection('ColorSwatchPopoverIcon', () => {\n  describeWithEnvironment('', () => {\n    setupActionRegistry();\n    beforeEach(() => {\n      const workspace = Workspace.Workspace.WorkspaceImpl.instance({forceNew: true});\n      const resourceMapping =\n          new Bindings.ResourceMapping.ResourceMapping(SDK.TargetManager.TargetManager.instance(), workspace);\n      Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding.instance(\n          {forceNew: true, resourceMapping, targetManager: SDK.TargetManager.TargetManager.instance()});\n    });\n    it('correctly reports changed colors with custom property color names', async () => {\n      const property = new SDK.CSSProperty.CSSProperty(\n          sinon.createStubInstance(SDK.CSSStyleDeclaration.CSSStyleDeclaration), 0, 'color', 'red', true, false, true,\n          false, '', undefined, []);\n      const treeElement = new Elements.StylePropertyTreeElement.StylePropertyTreeElement({\n        stylesPane:\n            new Elements.StylesSidebarPane.StylesSidebarPane(new Elements.ComputedStyleModel.ComputedStyleModel()),\n        section: sinon.createStubInstance(Elements.StylePropertiesSection.StylePropertiesSection),\n        matchedStyles: await getMatchedStyles(),\n        property,\n        isShorthand: false,\n        inherited: false,\n        overloaded: false,\n        newProperty: true,\n      });\n\n      const helper = new InlineEditor.SwatchPopoverHelper.SwatchPopoverHelper();\n      const swatch = new InlineEditor.ColorSwatch.ColorSwatch();\n      swatch.setColor(Common.Color.parse('red')!);\n      const showPopoverStub = sinon.stub(helper, 'show');\n      const icon = new Elements.ColorSwatchPopoverIcon.ColorSwatchPopoverIcon(treeElement, helper, swatch);\n      const iconColorChanged = sinon.stub<[Common.EventTarget.EventTargetEvent<\n          Common.Color.Color, Elements.ColorSwatchPopoverIcon.ColorSwatchPopoverIconEventTypes>]>();\n      icon.addEventListener(\n          Elements.ColorSwatchPopoverIcon.ColorSwatchPopoverIconEvents.COLOR_CHANGED, iconColorChanged);\n      icon.showPopover();\n      assert.isTrue(showPopoverStub.calledOnce);\n      const spectrum = showPopoverStub.args[0][0];\n      assert.instanceOf(spectrum, ColorPicker.Spectrum.Spectrum);\n      sinon.stub(spectrum, 'colorName').returns('--yellow');\n      spectrum.dispatchEventToListeners(ColorPicker.Spectrum.Events.COLOR_CHANGED, 'yellow');\n      assert.isTrue(iconColorChanged.calledOnce);\n      assert.strictEqual(iconColorChanged.args[0][0].data.asString(), '#ffff00');\n      assert.strictEqual(iconColorChanged.args[0][0].data.getAuthoredText(), 'var(--yellow)');\n    });\n  });\n});\n"]}