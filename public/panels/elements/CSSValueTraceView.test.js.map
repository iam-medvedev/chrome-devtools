{"version":3,"file":"CSSValueTraceView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/CSSValueTraceView.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;QACrB,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,CAAC;QAChE,IAAI,CAAC,SAAS,CACV,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,EACxE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACpH,MAAM,EAAC,aAAa,EAAC,GAAG,IAAI,CAAC;QAC7B,MAAM,oBAAoB,GAAG,OAAO,CAAC,aAAa,EAAQ,CAAC;QAC3D,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC,SAAS,CAAC;YAC1C,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzB,oBAAoB,CAAC,OAAO,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;QACH,MAAM,oBAAoB,CAAC,OAAO,CAAC;QACnC,MAAM,CAAC,SAAS,CACZ,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAC9E,CAAC,wBAAwB,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Elements from './elements.js';\n\ndescribe('CSSValueTraceView', () => {\n  it('works', async () => {\n    const view = new Elements.CSSValueTraceView.CSSValueTraceView();\n    view.showTrace(\n        [[document.createTextNode('sub 1')], [document.createTextNode('sub 2')]],\n        [[document.createTextNode('eval 1')], [document.createTextNode('eval 2')]], [document.createTextNode('final')]);\n    const {performUpdate} = view;\n    const performUpdatePromise = Promise.withResolvers<void>();\n    sinon.stub(view, 'performUpdate').callsFake(function(this: unknown) {\n      performUpdate.call(this);\n      performUpdatePromise.resolve();\n    });\n    await performUpdatePromise.promise;\n    assert.deepEqual(\n        view.contentElement.textContent?.split('\\n').map(l => l.trim()).filter(l => l),\n        ['\\u21B3sub 1\\u21B3sub 2', '=eval 1', '=eval 2', '=final']);\n  });\n});\n"]}