{"version":3,"file":"ElementsTreeElement.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/ElementsTreeElement.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,SAAS,MAAM,uCAAuC,CAAC;AAEnE,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;QACjD,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,KAAK,GAAG,oFAAoF,CAAC;YACnG,MAAM,QAAQ,GAAG;gBACf,IAAI,EAAE,4FAA4F;gBAClG,YAAY,EAAE;oBACZ,IAAI,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;oBACzC,IAAI,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;oBACzC,IAAI,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;oBAC1C,IAAI,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;oBAC1C,IAAI,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;oBAC1C,IAAI,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;iBAC3C;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,QAAQ,CAAC,mBAAmB,CAAC,iCAAiC,CAAC,KAAK,CAAC,CAAC;YACrF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;YAC1E,MAAM,KAAK,GAAG,2BAA2B,CAAC;YAC1C,MAAM,QAAQ,GAAG;gBACf,IAAI,EAAE,2BAA2B;gBACjC,YAAY,EAAE,EAAE;aACjB,CAAC;YAEF,MAAM,MAAM,GAAG,QAAQ,CAAC,mBAAmB,CAAC,iCAAiC,CAAC,KAAK,CAAC,CAAC;YACrF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\n\nimport * as Elements from './elements.js';\n\ndescribe('ElementsTreeElement', () => {\n  describe('convertUnicodeCharsToHTMLEntities', () => {\n    it('converts unicode characters to HTML entities', () => {\n      const input = '\\u2002\\u2002This string has spaces\\xA0\\xA0and other\\u202Aunicode characters\\u200A.';\n      const expected = {\n        text: '&ensp;&ensp;This string has spaces&nbsp;&nbsp;and other&#x202A;unicode characters&hairsp;.',\n        entityRanges: [\n          new TextUtils.TextRange.SourceRange(0, 6),\n          new TextUtils.TextRange.SourceRange(6, 6),\n          new TextUtils.TextRange.SourceRange(34, 6),\n          new TextUtils.TextRange.SourceRange(40, 6),\n          new TextUtils.TextRange.SourceRange(55, 8),\n          new TextUtils.TextRange.SourceRange(81, 8),\n        ],\n      };\n\n      const result = Elements.ElementsTreeElement.convertUnicodeCharsToHTMLEntities(input);\n      assert.strictEqual(result.text, expected.text);\n      assert.deepEqual(result.entityRanges, expected.entityRanges);\n    });\n\n    it('returns the original string if no unicode characters are present', () => {\n      const input = 'ThisStringHasNoWhitespace';\n      const expected = {\n        text: 'ThisStringHasNoWhitespace',\n        entityRanges: [],\n      };\n\n      const result = Elements.ElementsTreeElement.convertUnicodeCharsToHTMLEntities(input);\n      assert.strictEqual(result.text, expected.text);\n      assert.deepEqual(result.entityRanges, expected.entityRanges);\n    });\n  });\n});\n"]}