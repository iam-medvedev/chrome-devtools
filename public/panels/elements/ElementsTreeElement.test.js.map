{"version":3,"file":"ElementsTreeElement.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/ElementsTreeElement.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport {createTarget, updateHostConfig} from '../../testing/EnvironmentHelpers.js';\nimport {spyCall} from '../../testing/ExpectStubCall.js';\nimport {describeWithMockConnection, setMockConnectionResponseHandler} from '../../testing/MockConnection.js';\n\nimport * as Elements from './elements.js';\n\ndescribe('ElementsTreeElement', () => {\n  describe('convertUnicodeCharsToHTMLEntities', () => {\n    it('converts unicode characters to HTML entities', () => {\n      const input = '\\u2002\\u2002This string has spaces\\xA0\\xA0and other\\u202Aunicode characters\\u200A.';\n      const expected = {\n        text: '&ensp;&ensp;This string has spaces&nbsp;&nbsp;and other&#x202A;unicode characters&hairsp;.',\n        entityRanges: [\n          new TextUtils.TextRange.SourceRange(0, 6),\n          new TextUtils.TextRange.SourceRange(6, 6),\n          new TextUtils.TextRange.SourceRange(34, 6),\n          new TextUtils.TextRange.SourceRange(40, 6),\n          new TextUtils.TextRange.SourceRange(55, 8),\n          new TextUtils.TextRange.SourceRange(81, 8),\n        ],\n      };\n\n      const result = Elements.ElementsTreeElement.convertUnicodeCharsToHTMLEntities(input);\n      assert.strictEqual(result.text, expected.text);\n      assert.deepEqual(result.entityRanges, expected.entityRanges);\n    });\n\n    it('returns the original string if no unicode characters are present', () => {\n      const input = 'ThisStringHasNoWhitespace';\n      const expected = {\n        text: 'ThisStringHasNoWhitespace',\n        entityRanges: [],\n      };\n\n      const result = Elements.ElementsTreeElement.convertUnicodeCharsToHTMLEntities(input);\n      assert.strictEqual(result.text, expected.text);\n      assert.deepEqual(result.entityRanges, expected.entityRanges);\n    });\n  });\n});\n\ndescribeWithMockConnection('ElementsTreeElement', () => {\n  let nodeIdCounter = 0;\n  function getTreeElement(model: SDK.DOMModel.DOMModel, treeOutline: Elements.ElementsTreeOutline.ElementsTreeOutline) {\n    const node = new SDK.DOMModel.DOMNode(model);\n    node.id = nodeIdCounter++ as Protocol.DOM.NodeId;\n    model.registerNode(node);\n    const treeElement = new Elements.ElementsTreeElement.ElementsTreeElement(node);\n    node.setAttributesPayload(['popover', 'manual']);\n    treeOutline.bindTreeElement(treeElement);\n    return treeElement;\n  }\n\n  async function getAdorner(treeElement: Elements.ElementsTreeElement.ElementsTreeElement) {\n    await treeElement.updateStyleAdorners();\n    const {tagTypeContext} = treeElement;\n    const adorners = 'adorners' in tagTypeContext ? tagTypeContext.adorners : undefined;\n    assert.exists(adorners);\n    assert.lengthOf(adorners, 1);\n    const {value} = adorners.values().next();\n    assert.exists(value);\n    assert.strictEqual(value.name, 'popover');\n    return value;\n  }\n\n  beforeEach(() => {\n    updateHostConfig({devToolsAllowPopoverForcing: {enabled: true}});\n    setMockConnectionResponseHandler('CSS.enable', () => ({}));\n    setMockConnectionResponseHandler('CSS.getComputedStyleForNode', () => ({}));\n  });\n  it('popoverAdorner supports force-opening popovers', async () => {\n    const model = new SDK.DOMModel.DOMModel(createTarget());\n\n    const responseHandlerStub = sinon.stub<[Protocol.DOM.ForceShowPopoverRequest]>();\n    setMockConnectionResponseHandler('DOM.forceShowPopover', responseHandlerStub);\n\n    const treeElement = getTreeElement(model, new Elements.ElementsTreeOutline.ElementsTreeOutline());\n    const adorner = await getAdorner(treeElement);\n    adorner.dispatchEvent(new MouseEvent('click'));\n    sinon.assert.calledOnce(responseHandlerStub);\n    assert.isTrue(responseHandlerStub.args[0][0].enable);\n    assert.strictEqual(responseHandlerStub.args[0][0].nodeId, treeElement.node().id);\n\n    adorner.dispatchEvent(new MouseEvent('click'));\n    sinon.assert.calledTwice(responseHandlerStub);\n    assert.isFalse(responseHandlerStub.args[1][0].enable);\n    assert.strictEqual(responseHandlerStub.args[1][0].nodeId, treeElement.node().id);\n  });\n\n  it('popoverAdorner gets toggled off when a popover is force-closed by another forceShowPopover call', async () => {\n    const model = new SDK.DOMModel.DOMModel(createTarget());\n    const treeOutline = new Elements.ElementsTreeOutline.ElementsTreeOutline();\n    const treeElement1 = getTreeElement(model, treeOutline);\n    const treeElement2 = getTreeElement(model, treeOutline);\n\n    const adorner1 = await getAdorner(treeElement1);\n    const adorner2 = await getAdorner(treeElement2);\n\n    setMockConnectionResponseHandler(\n        'DOM.forceShowPopover', () => ({nodeIds: adorner2.isActive() ? [treeElement2.node().id] : []}));\n\n    adorner2.dispatchEvent(new MouseEvent('click'));\n    assert.isTrue(adorner2.isActive());\n\n    const toggleStub = spyCall(adorner2, 'toggle');\n\n    adorner1.dispatchEvent(new MouseEvent('click'));\n    await toggleStub;\n    assert.isTrue(adorner1.isActive());\n    assert.isFalse(adorner2.isActive());\n  });\n});\n"]}