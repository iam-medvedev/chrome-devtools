{"version":3,"file":"DOMTreeWidget.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/DOMTreeWidget.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,EAAC,YAAY,EAAE,gBAAgB,EAAC,MAAM,qCAAqC,CAAC;AACnF,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAC3E,OAAO,EAAC,sBAAsB,EAAC,MAAM,sCAAsC,CAAC;AAE5E,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,0BAA0B,CAAC,eAAe,EAAE,GAAG,EAAE;IAC/C,IAAI,MAAyB,CAAC;IAE9B,UAAU,CAAC,GAAG,EAAE;QACd,gBAAgB,EAAE,CAAC;QACnB,MAAM,GAAG,YAAY,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,SAAS,aAAa;YACpB,MAAM,mBAAmB,GAAG,IAAI,QAAQ,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,CAAC;YACnF,MAAM,IAAI,GAAG,sBAAsB,CAAC,QAAQ,CAAC,mBAAmB,CAAC,aAAa,EAAE;gBAC9E,mBAAmB;gBACnB,gCAAgC,EAAE,IAAI;gBACtC,sBAAsB,EAAE,IAAI;aAC7B,CAAC,CAAC;YACH,MAAM,OAAO,GAAG,IAAI,QAAQ,CAAC,mBAAmB,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAChF,OAAO,CAAC,aAAa,EAAE,CAAC;YACxB,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAA0B,CAAC,CAAC;YACjF,OAAO,EAAC,IAAI,EAAC,CAAC;QAChB,CAAC;QAED,MAAM,4BAA4B,GAAG,CAAC,OAAgB,EAAE,EAAE,CAAC,KAAK,IAAI,EAAE;YACpE,MAAM,EAAC,IAAI,EAAC,GAAG,aAAa,EAAE,CAAC;YAC/B,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAEnF,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YAC1D,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAA0B,CAAC,CAAC;YAEpG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;YACjD,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;YACrC,KAAK,CAAC,wBAAwB,kFAAmD,IAAI,CAAC,CAAC;YACvF,IAAI,OAAO,EAAE,CAAC;gBACZ,MAAM,IAAI,CAAC,SAAS,CAAC;gBACrB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;gBAC5D,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,aAAa,GAAG,CAAC,CAAC,CAAC;YAClD,CAAC;iBAAM,CAAC;gBACN,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBACjD,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC,CAAC;QAEF,EAAE,CAAC,2CAA2C,EAAE,4BAA4B,CAAC,IAAI,CAAC,CAAC,CAAC;QACpF,EAAE,CAAC,uDAAuD,EAAE,4BAA4B,CAAC,KAAK,CAAC,CAAC,CAAC;IACnG,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {createTarget, stubNoopSettings} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {createViewFunctionStub} from '../../testing/ViewFunctionHelpers.js';\n\nimport * as Elements from './elements.js';\n\ndescribeWithMockConnection('DOMTreeWidget', () => {\n  let target: SDK.Target.Target;\n\n  beforeEach(() => {\n    stubNoopSettings();\n    target = createTarget();\n  });\n\n  describe('node highlighting', () => {\n    function createDomTree() {\n      const elementsTreeOutline = new Elements.ElementsTreeOutline.ElementsTreeOutline();\n      const view = createViewFunctionStub(Elements.ElementsTreeOutline.DOMTreeWidget, {\n        elementsTreeOutline,\n        alreadyExpandedParentTreeElement: null,\n        highlightedTreeElement: null,\n      });\n      const domTree = new Elements.ElementsTreeOutline.DOMTreeWidget(undefined, view);\n      domTree.performUpdate();\n      domTree.modelAdded(target.model(SDK.DOMModel.DOMModel) as SDK.DOMModel.DOMModel);\n      return {view};\n    }\n\n    const highlightsNodeOnRequestEvent = (inScope: boolean) => async () => {\n      const {view} = createDomTree();\n      SDK.TargetManager.TargetManager.instance().setScopeTarget(inScope ? target : null);\n\n      const model = target.model(SDK.OverlayModel.OverlayModel);\n      assert.exists(model);\n      const node = new SDK.DOMModel.DOMNode(target.model(SDK.DOMModel.DOMModel) as SDK.DOMModel.DOMModel);\n\n      assert.isNull(view.input.currentHighlightedNode);\n      const viewCallCount = view.callCount;\n      model.dispatchEventToListeners(SDK.OverlayModel.Events.HIGHLIGHT_NODE_REQUESTED, node);\n      if (inScope) {\n        await view.nextInput;\n        assert.strictEqual(view.input.currentHighlightedNode, node);\n        sinon.assert.callCount(view, viewCallCount + 1);\n      } else {\n        assert.isNull(view.input.currentHighlightedNode);\n        sinon.assert.callCount(view, viewCallCount);\n      }\n    };\n\n    it('highlights node on in scope request event', highlightsNodeOnRequestEvent(true));\n    it('does not highlight node on out of scope request event', highlightsNodeOnRequestEvent(false));\n  });\n});\n"]}