{"version":3,"file":"PropertyParser.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/PropertyParser.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\n\nimport * as Elements from './elements.js';\n\nconst cssParser = CodeMirror.css.cssLanguage.parser;\n\nexport class Printer extends Elements.PropertyParser.TreeWalker {\n  #printedText: string[] = [];\n  #indent = 0;\n\n  protected override enter({node}: Elements.PropertyParser.SyntaxNodeRef): boolean {\n    const text = this.ast.text(node);\n    this.#printedText.push(`${'|'.repeat(this.#indent)} ${node.name}${text !== node.name ? `: ${text}` : ''}`);\n    this.#indent++;\n    return true;\n  }\n  protected override leave(): void {\n    this.#indent--;\n  }\n\n  get(): string {\n    return this.#printedText.join('\\n');\n  }\n\n  static log(ast: Elements.PropertyParser.SyntaxTree): void {\n    /* eslint-disable-next-line no-console */\n    console.log(Printer.walk(ast).get());\n  }\n\n  static rule(rule: string): string {\n    const ast = new Elements.PropertyParser.SyntaxTree('', rule, cssParser.parse(rule).topNode);\n    return Printer.walk(ast).get();\n  }\n}\n\nclass TreeSearch extends Elements.PropertyParser.TreeWalker {\n  #found: CodeMirror.SyntaxNode|null = null;\n  #predicate: (node: CodeMirror.SyntaxNode) => boolean;\n\n  constructor(ast: Elements.PropertyParser.SyntaxTree, predicate: (node: CodeMirror.SyntaxNode) => boolean) {\n    super(ast);\n    this.#predicate = predicate;\n  }\n\n  protected override enter({node}: Elements.PropertyParser.SyntaxNodeRef): boolean {\n    if (this.#found) {\n      return false;\n    }\n    if (this.#predicate(node)) {\n      this.#found = node;\n      return false;\n    }\n    return true;\n  }\n\n  static find(ast: Elements.PropertyParser.SyntaxTree, predicate: (node: CodeMirror.SyntaxNode) => boolean):\n      CodeMirror.SyntaxNode|null {\n    return TreeSearch.walk(ast, predicate).#found;\n  }\n}\n\nfunction textFragments(nodes: Node[]): Array<string|null> {\n  return nodes.map(n => n.textContent);\n}\n\nfunction matchSingleValue<T extends Elements.PropertyParser.Match, ArgTs extends unknown[]>(\n    name: string|undefined, value: string, matchType: abstract new (...args: ArgTs) => T,\n    matcher: Elements.PropertyParser.Matcher):\n    {ast: Elements.PropertyParser.SyntaxTree|null, match: T|null, text: string} {\n  const ast = Elements.PropertyParser.tokenizePropertyValue(value, name);\n  if (!ast) {\n    return {ast, match: null, text: value};\n  }\n\n  const matchedResult = Elements.PropertyParser.BottomUpTreeMatching.walk(ast, [matcher]);\n  const match = matchedResult.getMatch(ast.tree);\n\n  return {\n    ast,\n    match: match instanceof matchType ? match : null,\n    text: Printer.walk(ast).get(),\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Constructor = (new (...args: any[]) => any)|(abstract new (...args: any[]) => any);\nfunction nilRenderer<Base extends Constructor>(base: Base): Elements.PropertyParser.MatchFactory<Base> {\n  return (...args: unknown[]) => {\n    class Renderer extends base {\n      constructor(...args: unknown[]) {\n        super(...args);\n      }\n      render(): Node[] {\n        return [];\n      }\n    }\n    return new Renderer(...args);\n  };\n}\n\nfunction tokenizePropertyValue(value: string, name?: string): Elements.PropertyParser.SyntaxTree {\n  const ast = Elements.PropertyParser.tokenizePropertyValue(value, name);\n  Platform.assertNotNullOrUndefined(ast, Printer.rule(`*{${name}: ${value};}`));\n  return ast;\n}\n\nfunction injectVariableSubstitutions(variables: Record<string, string>) {\n  const {getComputedText} = Elements.PropertyParser.BottomUpTreeMatching.prototype;\n  sinon.stub(Elements.PropertyParser.BottomUpTreeMatching.prototype, 'getComputedText')\n      .callsFake(function(this: Elements.PropertyParser.BottomUpTreeMatching, node: CodeMirror.SyntaxNode): string {\n        if (this.computedText.chunkCount === 0) {\n          for (const [varName, value] of Object.entries(variables)) {\n            const varText = `var(${varName})`;\n            for (let offset = this.ast.propertyValue.indexOf(varText); offset >= 0;\n                 offset = this.ast.propertyValue.indexOf(varText, offset + 1)) {\n              this.computedText.push({text: varText, type: 'var', render: () => [], computedText: () => value}, offset);\n            }\n          }\n        }\n        return getComputedText.call(this, node);\n      });\n}\n\ndescribe('PropertyParser', () => {\n  it('parses text', () => {\n    assert.deepStrictEqual(\n        textFragments(Elements.PropertyParser.renderPropertyValue('var(--v)', [])), ['var', '(', '--v', ')']);\n\n    assert.deepStrictEqual(\n        textFragments(Elements.PropertyParser.renderPropertyValue('/* comments are text */ 1px solid 4', [])),\n        ['/* comments are text */', ' ', '1px', ' ', 'solid', ' ', '4']);\n    assert.deepStrictEqual(\n        textFragments(Elements.PropertyParser.renderPropertyValue(\n            '2px var(--double, var(--fallback, black)) #32a1ce rgb(124 125 21 0)', [])),\n        [\n          '2px', ' ', 'var',     '(', '--double', ',', ' ',   'var', '(',   '--fallback', ',',  ' ', 'black', ')',\n          ')',   ' ', '#32a1ce', ' ', 'rgb',      '(', '124', ' ',   '125', ' ',          '21', ' ', '0',     ')',\n        ]);\n  });\n\n  it('reproduces the input if nothing matched', () => {\n    const property = '2px var(--double, var(--fallback, black)) #32a1ce rgb(124 125 21 0)';\n    const rule = `*{--property: ${property};}`;\n    const tree = cssParser.parse(rule).topNode;\n    const ast = new Elements.PropertyParser.SyntaxTree(property, rule, tree);\n    const matchedResult = Elements.PropertyParser.BottomUpTreeMatching.walk(ast, []);\n    const context = new Elements.PropertyParser.RenderingContext(ast, matchedResult);\n    assert.deepStrictEqual(\n        textFragments(Elements.PropertyParser.Renderer.render(tree, context).nodes).join(''), rule,\n        Printer.walk(ast).get());\n  });\n\n  it('correctly identifies spacing', () => {\n    const requiresSpace = (a: string, b: string) =>\n        Elements.PropertyParser.requiresSpace([document.createTextNode(a)], [document.createTextNode(b)]);\n\n    assert.isTrue(requiresSpace('a', 'b'));\n    assert.isFalse(requiresSpace('', 'text'));\n    assert.isFalse(requiresSpace('(', 'text'));\n    assert.isFalse(requiresSpace(' ', 'text'));\n    assert.isFalse(requiresSpace('{', 'text'));\n    assert.isFalse(requiresSpace('}', 'text'));\n    assert.isFalse(requiresSpace(';', 'text'));\n    assert.isFalse(requiresSpace('text(', 'text'));\n    assert.isFalse(requiresSpace('text ', 'text'));\n    assert.isFalse(requiresSpace('text{', 'text'));\n    assert.isFalse(requiresSpace('text}', 'text'));\n    assert.isFalse(requiresSpace('text;', 'text'));\n\n    assert.isFalse(requiresSpace('text', ''));\n    assert.isFalse(requiresSpace('text', '('));\n    assert.isFalse(requiresSpace('text', ')'));\n    assert.isFalse(requiresSpace('text', ','));\n    assert.isFalse(requiresSpace('text', ':'));\n    assert.isFalse(requiresSpace('text', ' '));\n    assert.isFalse(requiresSpace('text', '*'));\n    assert.isFalse(requiresSpace('text', '{'));\n    assert.isFalse(requiresSpace('text', ';'));\n    assert.isFalse(requiresSpace('text', '( text'));\n    assert.isFalse(requiresSpace('text', ') text'));\n    assert.isFalse(requiresSpace('text', ', text'));\n    assert.isFalse(requiresSpace('text', ': text'));\n    assert.isFalse(requiresSpace('text', ' text'));\n    assert.isFalse(requiresSpace('text', '* text'));\n    assert.isFalse(requiresSpace('text', '{ text'));\n    assert.isFalse(requiresSpace('text', '; text'));\n\n    assert.isTrue(Elements.PropertyParser.requiresSpace(\n        [document.createTextNode('text'), document.createElement('div')], [document.createTextNode('text')]));\n    assert.isTrue(Elements.PropertyParser.requiresSpace(\n        [document.createTextNode('text')], [document.createElement('div'), document.createTextNode('text')]));\n    assert.isTrue(Elements.PropertyParser.requiresSpace(\n        [document.createTextNode('text'), document.createElement('div')],\n        [document.createElement('div'), document.createTextNode('text')]));\n    assert.isFalse(Elements.PropertyParser.requiresSpace(\n        [document.createTextNode('text'), document.createElement('div')], [document.createTextNode(' text')]));\n    assert.isFalse(Elements.PropertyParser.requiresSpace(\n        [document.createTextNode('text')], [document.createElement('div'), document.createTextNode(' text')]));\n    assert.isFalse(Elements.PropertyParser.requiresSpace(\n        [document.createTextNode('text'), document.createElement('div')],\n        [document.createElement('div'), document.createTextNode(' text')]));\n  });\n\n  it('correctly renders subtrees', () => {\n    const property = '2px var(--double, var(--fallback, black)) #32a1ce rgb(124 125 21 0)';\n    const rule = `*{--property: ${property};}`;\n    const tree = cssParser.parse(rule).topNode.firstChild?.firstChild?.nextSibling?.firstChild?.nextSibling;\n    Platform.assertNotNullOrUndefined(tree);\n    const ast = new Elements.PropertyParser.SyntaxTree(property, rule, tree);\n    const matchedResult = Elements.PropertyParser.BottomUpTreeMatching.walk(ast, []);\n    const context = new Elements.PropertyParser.RenderingContext(ast, matchedResult);\n    assert.deepStrictEqual(\n        textFragments(Elements.PropertyParser.Renderer.render(tree, context).nodes).join(''), `--property: ${property}`,\n        Printer.walk(ast).get());\n  });\n\n  it('parses comments', () => {\n    const property = '/* color: red */blue/* color: red */';\n    const ast = tokenizePropertyValue(property);\n    const topNode = ast.tree.parent?.parent?.parent?.parent;\n    Platform.assertNotNullOrUndefined(topNode);\n    assert.strictEqual(\n        Printer.walk(ast.subtree(topNode)).get(), ` StyleSheet: *{--property: /* color: red */blue/* color: red */;}\n| RuleSet: *{--property: /* color: red */blue/* color: red */;}\n|| UniversalSelector: *\n|| Block: {--property: /* color: red */blue/* color: red */;}\n||| {\n||| Declaration: --property: /* color: red */blue\n|||| VariableName: --property\n|||| :\n|||| Comment: /* color: red */\n|||| ValueName: blue\n||| Comment: /* color: red */\n||| ;\n||| }`);\n  });\n\n  it('renders trailing comments', () => {\n    const property = '/* color: red */ blue /* color: red */';\n    assert.strictEqual(textFragments(Elements.PropertyParser.renderPropertyValue(property, [])).join(''), property);\n  });\n\n  it('renders malformed comments', () => {\n    const property = 'red /* foo: bar';\n    assert.strictEqual(textFragments(Elements.PropertyParser.renderPropertyValue(property, [])).join(''), property);\n  });\n\n  it('correctly tokenizes invalid text', () => {\n    assert.isNull(Elements.PropertyParser.tokenizePropertyValue(''));\n    assert.isNull(Elements.PropertyParser.tokenizePropertyValue('/*'));\n    assert.isNull(Elements.PropertyParser.tokenizePropertyValue('}'));\n  });\n\n  it('correctly parses property names', () => {\n    assert.strictEqual(tokenizePropertyValue('red', 'color /*comment*/')?.propertyName, 'color');\n    assert.strictEqual(tokenizePropertyValue('red', '/*comment*/color/*comment*/')?.propertyName, 'color');\n    assert.strictEqual(tokenizePropertyValue('red', ' /*comment*/color')?.propertyName, 'color');\n    assert.strictEqual(tokenizePropertyValue('red', 'co/*comment*/lor')?.propertyName, 'lor');\n    assert.strictEqual(tokenizePropertyValue('red', 'co:lor')?.propertyName, undefined);\n  });\n\n  it('parses colors', () => {\n    for (const fail of ['red-blue', '#f', '#foobar', '', 'rgbz(1 2 2)', 'tan(45deg)']) {\n      const {match, text} = matchSingleValue(\n          'color', fail, Elements.PropertyParser.ColorMatch,\n          new Elements.PropertyParser.ColorMatcher(nilRenderer(Elements.PropertyParser.ColorMatch)));\n      assert.isNull(match, text);\n    }\n    for (const succeed\n             of ['rgb(/* R */155, /* G */51, /* B */255)', 'red', 'rgb(0 0 0)', 'rgba(0 0 0)', '#fff', '#ffff',\n                 '#ffffff', '#ffffffff']) {\n      const {match, text} = matchSingleValue(\n          'color', succeed, Elements.PropertyParser.ColorMatch,\n          new Elements.PropertyParser.ColorMatcher(nilRenderer(Elements.PropertyParser.ColorMatch)));\n      Platform.assertNotNullOrUndefined(match, text);\n      assert.strictEqual(match.text, succeed);\n    }\n    // The property name matters:\n    for (const fail\n             of ['rgb(/* R */155, /* G */51, /* B */255)', 'red', 'rgb(0 0 0)', 'rgba(0 0 0)', '#fff', '#ffff',\n                 '#ffffff', '#ffffffff']) {\n      const {match, text} = matchSingleValue(\n          'width', fail, Elements.PropertyParser.ColorMatch,\n          new Elements.PropertyParser.ColorMatcher(nilRenderer(Elements.PropertyParser.ColorMatch)));\n      assert.isNull(match, text);\n    }\n  });\n\n  it('parses colors in masks', () => {\n    for (const succeed of ['mask', 'mask-image', 'mask-border', 'mask-border-source']) {\n      const ast = Elements.PropertyParser.tokenizePropertyValue('linear-gradient(to top, red, var(--other))', succeed);\n      Platform.assertNotNullOrUndefined(ast, succeed);\n      const matching = Elements.PropertyParser.BottomUpTreeMatching.walk(\n          ast, [new Elements.PropertyParser.ColorMatcher(nilRenderer(Elements.PropertyParser.ColorMatch))]);\n      const colorNode = TreeSearch.find(ast, node => ast.text(node) === 'red');\n      Platform.assertNotNullOrUndefined(colorNode);\n      const match = matching.getMatch(colorNode);\n      Platform.assertNotNullOrUndefined(match);\n      assert.instanceOf(match, Elements.PropertyParser.ColorMatch);\n      assert.strictEqual(match.text, 'red');\n    }\n  });\n\n  class ComputedTextMatch implements Elements.PropertyParser.Match {\n    type: string = 'computed-text-test';\n    constructor(readonly text: string, readonly constructedText: string) {\n    }\n    render(): Node[] {\n      return [];\n    }\n    computedText?(): string {\n      return this.constructedText;\n    }\n  }\n\n  it('computes ComputedText', () => {\n    const originalText = 'abcdefghijklmnopqrstuvwxyz';\n    // computed text:    '        +++--     ------  '\n    // Where + means a replacement, - means a deletion, i.e., computed texts are shorter than the corresponding\n    // original snippet.\n\n    const computedText = new Elements.PropertyParser.ComputedText(originalText);\n\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |----|\n    assert.strictEqual(computedText.get(2, 8), 'cdefgh');\n\n    computedText.push(new ComputedTextMatch('ijklm', '012'), originalText.indexOf('i'));\n    computedText.push(new ComputedTextMatch('stuvwx', ''), originalText.indexOf('s'));\n\n    // Range starts in original text before the first chunk, ends in original text before the first chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |----|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('h')), 'cdefg');\n\n    // Range ends in original text after the first chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |-----------|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('o')), 'cdefgh 012 n');\n\n    // Range ends in original text ends on the beginning of a chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |-----|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('i')), 'cdefgh');\n\n    // Range ends in original text ends on the end of a chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |----------|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('n')), 'cdefgh 012');\n\n    // Range ends in original text after the second chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |----------------------|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('z')), 'cdefgh 012 nopqr y');\n\n    // Range ends in original text after the second chunk containing no chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //                          ||\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('y'), originalText.indexOf('z') + 1), 'yz');\n\n    // Range ends in original text on the end of the second chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |---------------------|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('y')), 'cdefgh 012 nopqr');\n\n    // range starts in original text after the chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //                |-|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('o'), originalText.indexOf('q')), 'op');\n\n    // range starts on the first chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //          |-------|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('i'), originalText.indexOf('q')), '012 nop');\n\n    // range starts on the second chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //                    |------|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('s'), originalText.indexOf('z')), 'y');\n\n    // range starts in the middle of a chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //           |-----|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('j'), originalText.indexOf('p')), 'jklmno');\n\n    // range ends in the middle of a chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //       |-----|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('f'), originalText.indexOf('l')), 'fghijk');\n  });\n\n  it('computes ComputedText with overlapping ranges', () => {\n    const originalText = 'abcdefghijklmnopqrstuvwxyz';\n    const computedText = new Elements.PropertyParser.ComputedText(originalText);\n\n    const push = (from: string, to: string) => {\n      const text = originalText.substring(originalText.indexOf(from), originalText.indexOf(to) + 1);\n      assert.isAbove(text.length, 1);\n      // This means computed and authored test have identical length, but we're testing the computed text stitching\n      // sufficiently above.\n      computedText.push(new ComputedTextMatch(text, text.toUpperCase()), originalText.indexOf(text[0]));\n    };\n\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |-----------|\n    //    |----|\n    //   ++++++++++++++++          (requested ranges)\n    //    +++++++++++++++\n    //   ++++++++\n    //   +++++++\n    //    +++++++\n    //    ++++++\n    computedText.clear();\n    push('c', 'o');\n    push('c', 'h');\n    assert.strictEqual(\n        computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('q') + 1), 'CDEFGHIJKLMNO pq');\n    assert.strictEqual(computedText.get(originalText.indexOf('b'), originalText.indexOf('i') + 1), 'b CDEFGH i');\n    assert.strictEqual(computedText.get(originalText.indexOf('b'), originalText.indexOf('h') + 1), 'b CDEFGH');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('i') + 1), 'CDEFGH i');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('h') + 1), 'CDEFGH');\n\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |-----------|\n    //         |----|\n    //   ++++++++++++++++\n    //         +++++++\n    //        ++++++++\n    //   ++++++++++++\n    //    +++++++++++\n    computedText.clear();\n    push('c', 'o');\n    push('h', 'm');\n    assert.strictEqual(\n        computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n    assert.strictEqual(computedText.get(originalText.indexOf('h'), originalText.indexOf('n') + 1), 'HIJKLM n');\n    assert.strictEqual(computedText.get(originalText.indexOf('g'), originalText.indexOf('n') + 1), 'g HIJKLM n');\n    assert.strictEqual(computedText.get(originalText.indexOf('b'), originalText.indexOf('m') + 1), 'bcdefg HIJKLM');\n    assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('m') + 1), 'defg HIJKLM');\n\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |-----------|\n    //           |----|\n    //   ++++++++++++++++\n    //           ++++++\n    //          +++++++\n    computedText.clear();\n    // Swap the insertion order around to test sorting behavior.\n    push('j', 'o');\n    push('c', 'o');\n    assert.strictEqual(\n        computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n    assert.strictEqual(computedText.get(originalText.indexOf('j'), originalText.indexOf('o') + 1), 'JKLMNO');\n    assert.strictEqual(computedText.get(originalText.indexOf('i'), originalText.indexOf('o') + 1), 'i JKLMNO');\n\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |-----------|\n    //    |----| |--|\n    //   ++++++++++++++++\n    //    +++++++++++\n    //    ++++++++++++\n    //    +++++++\n    //    ++++++\n    //          +++++\n    //          ++++++\n    computedText.clear();\n    push('c', 'o');\n    push('c', 'h');\n    push('j', 'm');\n    assert.strictEqual(\n        computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('n') + 1), 'CDEFGH i JKLM n');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('m') + 1), 'CDEFGH i JKLM');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('i') + 1), 'CDEFGH i');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('h') + 1), 'CDEFGH');\n    assert.strictEqual(computedText.get(originalText.indexOf('i'), originalText.indexOf('m') + 1), 'i JKLM');\n    assert.strictEqual(computedText.get(originalText.indexOf('i'), originalText.indexOf('n') + 1), 'i JKLM n');\n\n    // 'abcdefghijklmnopqrstuvwxyz';\n    //    |-----------|\n    //     |----| |--|\n    //   ++++++++++++++++\n    //    ++++++++++++\n    //    +++++++++++++\n    //     +++++++++++\n    //     ++++++++++++\n    // 'abcdefghijklmnopqrstuvwxyz';\n    //    +++++++\n    //    ++++++++\n    //     ++++++\n    //     +++++++\n    // 'abcdefghijklmnopqrstuvwxyz';\n    //           +++++\n    //            ++++\n    //           ++++++\n    //            +++++\n    // 'abcdefghijklmnopqrstuvwxyz';\n    computedText.clear();\n    // Swap the insertion order around to test sorting behavior.\n    push('k', 'n');\n    push('c', 'o');\n    push('d', 'i');\n    assert.strictEqual(\n        computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('n') + 1), 'c DEFGHI j KLMN');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('o') + 1), 'CDEFGHIJKLMNO');\n    assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('n') + 1), 'DEFGHI j KLMN');\n    assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('o') + 1), 'DEFGHI j KLMN o');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('i') + 1), 'c DEFGHI');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('j') + 1), 'c DEFGHI j');\n    assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('i') + 1), 'DEFGHI');\n    assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('j') + 1), 'DEFGHI j');\n    assert.strictEqual(computedText.get(originalText.indexOf('j'), originalText.indexOf('n') + 1), 'j KLMN');\n    assert.strictEqual(computedText.get(originalText.indexOf('k'), originalText.indexOf('n') + 1), 'KLMN');\n    assert.strictEqual(computedText.get(originalText.indexOf('j'), originalText.indexOf('o') + 1), 'j KLMN o');\n    assert.strictEqual(computedText.get(originalText.indexOf('k'), originalText.indexOf('o') + 1), 'KLMN o');\n  });\n\n  it('computes ComputedText with back-to-back chunks', () => {\n    const computedText = new Elements.PropertyParser.ComputedText('abcdefgh');\n    computedText.push(new ComputedTextMatch('abcd', '01234'), 0);\n    computedText.push(new ComputedTextMatch('efgh', '56789'), 4);\n    assert.strictEqual(computedText.get(0, 8), '01234 56789');\n  });\n\n  it('correctly produces the computed text during matching', () => {\n    const ast = tokenizePropertyValue('1px /* red */ solid');\n    const width = ast.tree.parent?.getChild('NumberLiteral');\n    Platform.assertNotNullOrUndefined(width);\n    const style = ast.tree.parent?.getChild('ValueName');\n    Platform.assertNotNullOrUndefined(style);\n    const matching = Elements.PropertyParser.BottomUpTreeMatching.walk(ast, []);\n    assert.strictEqual(matching.computedText.get(0, ast.propertyValue.length), '1px  solid');\n    assert.strictEqual(matching.getComputedText(width), '1px');\n    assert.strictEqual(matching.getComputedText(style), 'solid');\n  });\n\n  it('retains tokenization in the computed text', () => {\n    const ast = tokenizePropertyValue('dark/**/gray');\n    const matching = Elements.PropertyParser.BottomUpTreeMatching.walk(ast, []);\n    assert.strictEqual(matching.computedText.get(0, ast.propertyValue.length), 'dark gray');\n  });\n\n  it('parses color-mix with vars', () => {\n    injectVariableSubstitutions({\n      '--interpolation': 'shorter',\n      '--color1': 'red',\n      '--percentage': '13%',\n      '--rgb': 'shorter',\n      '--space': 'in srgb',\n      '--color2': '25% blue',\n      '--multiple-colors': 'red, blue',\n    });\n    {\n      const {ast, match, text} = matchSingleValue(\n          'color', 'color-mix(in srgb var(--interpolation) hue, red var(--percentage), rgb(var(--rgb)))',\n          Elements.PropertyParser.ColorMixMatch,\n          new Elements.PropertyParser.ColorMixMatcher(nilRenderer(Elements.PropertyParser.ColorMixMatch)));\n      Platform.assertNotNullOrUndefined(ast, text);\n      Platform.assertNotNullOrUndefined(match, text);\n      assert.deepStrictEqual(match.space.map(n => ast.text(n)), ['in', 'srgb', 'var(--interpolation)', 'hue']);\n      assert.strictEqual(match.color1.map(n => ast.text(n)).join(), 'red,var(--percentage)');\n      assert.strictEqual(match.color2.map(n => ast.text(n)).join(), 'rgb(var(--rgb))');\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'color', 'color-mix(var(--space), var(--color1), var(--color2))', Elements.PropertyParser.ColorMixMatch,\n          new Elements.PropertyParser.ColorMixMatcher(nilRenderer(Elements.PropertyParser.ColorMixMatch)));\n      Platform.assertNotNullOrUndefined(ast, text);\n      Platform.assertNotNullOrUndefined(match, text);\n      assert.strictEqual(match.space.map(n => ast.text(n)).join(), 'var(--space)');\n      assert.strictEqual(match.color1.map(n => ast.text(n)).join(), 'var(--color1)');\n      assert.strictEqual(match.color2.map(n => ast.text(n)).join(), 'var(--color2)');\n    }\n\n    for (const fail\n             of ['color-mix(var(--color1), var(--color1), var(--color2))',\n                 'color-mix(var(--space), var(--color1) var(--percentage) var(--percentage), var(--color2))',\n                 'color-mix(var(--space), var(--color1) 10% var(--percentage), var(--color2))',\n                 'color-mix(var(--space), var(--color1), var(--color2) 15%)',\n                 'color-mix(var(--space), var(--color1), var(--color2) var(--percentage))',\n                 'color-mix(var(--space), var(--multiple-colors))',\n    ]) {\n      const {ast, match, text} = matchSingleValue(\n          'color', fail, Elements.PropertyParser.ColorMixMatch,\n          new Elements.PropertyParser.ColorMixMatcher(nilRenderer(Elements.PropertyParser.ColorMixMatch)));\n      Platform.assertNotNullOrUndefined(ast, text);\n      assert.isNull(match, text);\n    }\n  });\n\n  it('parses color-mix', () => {\n    function check(space: string, color1: string, color2: string): void {\n      const {ast, match, text} = matchSingleValue(\n          'color', `color-mix(${space}, ${color1}, ${color2})`, Elements.PropertyParser.ColorMixMatch,\n          new Elements.PropertyParser.ColorMixMatcher(nilRenderer(Elements.PropertyParser.ColorMixMatch)));\n      Platform.assertNotNullOrUndefined(ast, text);\n      Platform.assertNotNullOrUndefined(match, text);\n\n      assert.deepStrictEqual(match.space.map(n => ast.text(n)).join(' '), space, text);\n      assert.strictEqual(match.color1.map(n => ast.text(n)).join(' '), color1, text);\n      assert.strictEqual(match.color2.map(n => ast.text(n)).join(' '), color2, text);\n    }\n\n    function checkFailure(space: string, color1: string, color2: string): void {\n      const {match, text} = matchSingleValue(\n          'color', `color-mix(${space}, ${color1}, ${color2})`, Elements.PropertyParser.ColorMixMatch,\n          new Elements.PropertyParser.ColorMixMatcher(nilRenderer(Elements.PropertyParser.ColorMixMatch)));\n      assert.isNull(match, text);\n    }\n\n    check('in srgb shorter hue', 'red 35%', 'blue');\n    check('in /*asd*/ srgb shorter hue', 'red 35%', 'blue');\n    check('in srgb', 'red 35%', 'blue');\n    check('in srgb', '35% red', 'blue 16%');\n    check('in srgb', '/*a*/ 35% /*b*/ red /*c*/', '/*a*/ blue /*b*/ 16% /*c*/');\n    checkFailure('insrgb shorter hue', 'red 35%', 'blue');\n    checkFailure('/*asd*/srgb in', 'red 35%', 'blue');\n    checkFailure('in srgb', '0% red', 'blue 0%');\n  });\n\n  it('parses vars correctly', () => {\n    for (const succeed\n             of ['var(--a)', 'var(--a, 123)', 'var(--a, calc(1+1))', 'var(--a, var(--b))', 'var(--a, var(--b, 123))',\n                 'var(--a, a b c)']) {\n      const {ast, match, text} = matchSingleValue(\n          'width', succeed, Elements.PropertyParser.VariableMatch,\n          new Elements.PropertyParser.VariableMatcher(nilRenderer(Elements.PropertyParser.VariableMatch)));\n\n      Platform.assertNotNullOrUndefined(ast, succeed);\n      Platform.assertNotNullOrUndefined(match, text);\n      assert.strictEqual(match.text, succeed);\n      assert.strictEqual(match.name, '--a');\n      const [name, ...fallback] = succeed.substring(4, succeed.length - 1).split(', ');\n      assert.strictEqual(match.name, name);\n      assert.strictEqual(match.fallback.map(n => ast.text(n)).join(' '), fallback.join(', '));\n    }\n    for (const fail of ['var', 'var(--a, 123, 123)', 'var(a)', 'var(--a']) {\n      const {match, text} = matchSingleValue(\n          'width', fail, Elements.PropertyParser.VariableMatch,\n          new Elements.PropertyParser.VariableMatcher(nilRenderer(Elements.PropertyParser.VariableMatch)));\n\n      assert.isNull(match, text);\n    }\n  });\n\n  it('parses URLs', () => {\n    const url = 'http://example.com';\n    {\n      const {match, text} = matchSingleValue(\n          'background-image', `url(${url})`, Elements.PropertyParser.URLMatch,\n          new Elements.PropertyParser.URLMatcher(nilRenderer(Elements.PropertyParser.URLMatch)));\n      Platform.assertNotNullOrUndefined(match);\n      assert.strictEqual(match.url, url, text);\n    }\n    {\n      const {match, text} = matchSingleValue(\n          'background-image', `url(\"${url}\")`, Elements.PropertyParser.URLMatch,\n          new Elements.PropertyParser.URLMatcher(nilRenderer(Elements.PropertyParser.URLMatch)));\n      Platform.assertNotNullOrUndefined(match);\n      assert.strictEqual(match.url, url, text);\n    }\n  });\n\n  it('parses angles correctly', () => {\n    for (const succeed of ['45deg', '1.3rad', '-25grad', '2.3turn']) {\n      const {ast, match, text} = matchSingleValue(\n          'transform', succeed, Elements.PropertyParser.AngleMatch,\n          new Elements.PropertyParser.AngleMatcher(nilRenderer(Elements.PropertyParser.AngleMatch)));\n      Platform.assertNotNullOrUndefined(ast, succeed);\n      Platform.assertNotNullOrUndefined(match, text);\n      assert.strictEqual(match.text, succeed);\n    }\n    for (const fail of ['0DEG', '0', '123', '2em']) {\n      const {match, text} = matchSingleValue(\n          'transform', fail, Elements.PropertyParser.AngleMatch,\n          new Elements.PropertyParser.AngleMatcher(nilRenderer(Elements.PropertyParser.AngleMatch)));\n      assert.isNull(match, text);\n    }\n  });\n\n  it('parses linkable names correctly', () => {\n    function match(name: string, value: string) {\n      const ast = Elements.PropertyParser.tokenizePropertyValue(value, name);\n      Platform.assertNotNullOrUndefined(ast);\n      const matchedResult = Elements.PropertyParser.BottomUpTreeMatching.walk(\n          ast,\n          [new Elements.PropertyParser.LinkableNameMatcher(nilRenderer(Elements.PropertyParser.LinkableNameMatch))]);\n\n      const matches = Elements.PropertyParser.siblings(ast.tree)\n                          .map(n => matchedResult.getMatch(n))\n                          .filter(\n                              (n): n is Elements.PropertyParser.LinkableNameMatch =>\n                                  n instanceof Elements.PropertyParser.LinkableNameMatch);\n      return matches.map(m => m.text);\n    }\n\n    assert.deepStrictEqual(match('animation-name', 'first, second, -moz-third'), ['first', 'second', '-moz-third']);\n    assert.deepStrictEqual(match('animation-name', 'first'), ['first']);\n    assert.deepStrictEqual(match('font-palette', 'first'), ['first']);\n    assert.deepStrictEqual(match('position-fallback', 'first'), ['first']);\n  });\n\n  it('parses easing functions properly', () => {\n    for (const succeed\n             of ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear(0 0%, 1 100%)',\n                 'cubic-bezier(0.3, 0.3, 0.3, 0.3)']) {\n      const {ast, match, text} = matchSingleValue(\n          'animation-timing-function', succeed, Elements.PropertyParser.BezierMatch,\n          new Elements.PropertyParser.BezierMatcher(nilRenderer(Elements.PropertyParser.BezierMatch)));\n      Platform.assertNotNullOrUndefined(ast, succeed);\n      Platform.assertNotNullOrUndefined(match, text);\n      assert.strictEqual(match.text, succeed);\n    }\n\n    const {ast, match, text} = matchSingleValue(\n        'border', 'ease-in', Elements.PropertyParser.BezierMatch,\n        new Elements.PropertyParser.BezierMatcher(nilRenderer(Elements.PropertyParser.BezierMatch)));\n    Platform.assertNotNullOrUndefined(ast, 'border');\n    assert.isNull(match, text);\n  });\n\n  it('parses strings correctly', () => {\n    function match(property: string, value: string) {\n      const ast = Elements.PropertyParser.tokenizePropertyValue(value, property);\n      Platform.assertNotNullOrUndefined(ast);\n      const matchedResult = Elements.PropertyParser.BottomUpTreeMatching.walk(\n          ast, [new Elements.PropertyParser.StringMatcher(nilRenderer(Elements.PropertyParser.StringMatch))]);\n      Platform.assertNotNullOrUndefined(matchedResult);\n\n      const match =\n          TreeSearch.find(ast, node => matchedResult.getMatch(node) instanceof Elements.PropertyParser.StringMatch);\n      Platform.assertNotNullOrUndefined(match);\n    }\n    match('quotes', '\"\\'\" \"\\'\"');\n    match('content', '\"foobar\"');\n    match('--image-file-accelerometer-back', 'url(\"devtools\\:\\/\\/devtools\\/bundled\\/Images\\/accelerometer-back\\.svg\")');\n  });\n});\n"]}