{"version":3,"file":"PropertyParser.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/PropertyParser.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,OAAO,EAAC,MAAM,iCAAiC,CAAC;AAGxD,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,MAAM,UAAW,SAAQ,QAAQ,CAAC,cAAc,CAAC,UAAU;IACzD,MAAM,GAA+B,IAAI,CAAC;IAC1C,UAAU,CAA2C;IAErD,YAAY,GAAuC,EAAE,SAAmD;QACtG,KAAK,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAEkB,KAAK,CAAC,EAAC,IAAI,EAAwC;QACpE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,OAAO,KAAK,CAAC;QACf,CAAC;QAED,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;YAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;YAClC,OAAO,KAAK,CAAC;QACf,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,GAAuC,EAAE,SAAmD;QAEtG,OAAO,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,MAAM,CAAC;IAChD,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,GAAuC,EAAE,SAAmD;QAEzG,MAAM,UAAU,GAA4B,EAAE,CAAC;QAC/C,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAA2B,EAAE,EAAE;YACnD,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;gBACpB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC;YAED,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;QACH,OAAO,UAAU,CAAC;IACpB,CAAC;CACF;AAED,SAAS,gBAAgB,CACrB,IAAY,EAAE,KAAa,EAAE,OAA2C;IAE1E,MAAM,GAAG,GAAG,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACrE,IAAI,CAAC,GAAG,EAAE,CAAC;QACT,OAAO,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC;IACzC,CAAC;IAED,MAAM,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACxF,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,YAAY,OAAO,CAAC,SAAS,CAAC,CAAC;IACtG,MAAM,KAAK,GAAG,WAAW,IAAI,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IAEjE,OAAO;QACL,GAAG;QACH,KAAK,EAAE,KAAK,YAAY,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;QACxD,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE;KAC9B,CAAC;AACJ,CAAC;AAED,SAAS,mBAAmB,CAAC,IAAY,EAAE,KAAa;IACtD,MAAM,GAAG,GAAG,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACrE,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;IAC1D,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAS,2BAA2B,CAAC,SAAiC;IACpE,MAAM,EAAC,eAAe,EAAE,oBAAoB,EAAE,QAAQ,EAAC,GAAG,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,SAAS,CAAC;IACjH,MAAM,aAAa,GAAG,IAAI,GAAG,EAA4C,CAAC;IAC1E,SAAS,WAAW,CAAC,QAAsD;QACzE,IAAI,QAAQ,CAAC,YAAY,CAAC,UAAU,KAAK,CAAC,EAAE,CAAC;YAC3C,MAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC;YACpF,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;YAClC,KAAK,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;gBACzD,MAAM,OAAO,GAAG,OAAO,OAAO,GAAG,CAAC;gBAClC,KAAK,IAAI,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,IAAI,CAAC,EAC5D,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;oBAC7D,QAAQ,CAAC,YAAY,CAAC,IAAI,CACtB,EAAC,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,EAA2B,EAAC,EAAE,MAAM,GAAG,cAAc,CAAC,CAAC;gBAC9G,CAAC;gBACD,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,EAAC,OAAO,EAAE,KAAK,EAAC,CAAC,CAAC;YAC/C,CAAC;QACH,CAAC;IACH,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,SAAS,EAAE,iBAAiB,CAAC;SAChF,SAAS,CAAC,UAA6D,IAA2B;QACjG,WAAW,CAAC,IAAI,CAAC,CAAC;QAClB,OAAO,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IACP,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,SAAS,EAAE,sBAAsB,CAAC;SACrF,SAAS,CAAC,UAC6C,IAA2B,EAC/E,EAAyB;QAC3B,WAAW,CAAC,IAAI,CAAC,CAAC;QAClB,OAAO,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IACP,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,SAAS,EAAE,UAAU,CAAC;SACzE,SAAS,CAAC,UAA6D,IAA2B;QAElF,WAAW,CAAC,IAAI,CAAC,CAAC;QAClB,MAAM,aAAa,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACnC,CAAC;QACD,OAAO,IAAI,QAAQ,CAAC,cAAc,CAAC,aAAa,CAC5C,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC7F,CAAC,CAAC,CAAC;AACxB,CAAC;AAED,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;QACtC,MAAM,aAAa,GAAG,CAAC,CAAS,EAAE,CAAS,EAAE,EAAE,CAC3C,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEtG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;QAE/C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QAEhD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAC/C,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1G,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAC/C,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1G,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAC/C,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAChE,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACvE,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAChD,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3G,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAChD,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3G,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAChD,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAChE,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;QACzB,MAAM,QAAQ,GAAG,sCAAsC,CAAC;QACxD,MAAM,GAAG,GAAG,mBAAmB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QACxD,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;QAChD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACvB,MAAM,CAAC,WAAW,CACd,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE;;;;;;;;;;;;MAY5C,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;QACtE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;QACxE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,KAAK,CAAC,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;QAC3F,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,6BAA6B,EAAE,KAAK,CAAC,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;QACrG,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,KAAK,CAAC,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;QAC3F,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,KAAK,CAAC,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;QACxF,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE,GAAG,EAAE;QACvB,KAAK,MAAM,IAAI,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,aAAa,EAAE,YAAY,CAAC,EAAE,CAAC;YAClF,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,CAAC;YAClG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;QACD,KAAK,MAAM,OAAO,IACN,CAAC,wCAAwC,EAAE,KAAK,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,EAAE,OAAO;YAC7F,SAAS,EAAE,WAAW,CAAC,EAAE,CAAC;YACrC,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,CAAC;YACrG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,CAAC;QACD,6BAA6B;QAC7B,KAAK,MAAM,IAAI,IACH,CAAC,wCAAwC,EAAE,KAAK,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,EAAE,OAAO;YAC7F,SAAS,EAAE,WAAW,CAAC,EAAE,CAAC;YACrC,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,CAAC;YAClG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,KAAK,MAAM,OAAO,IAAI,CAAC,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,oBAAoB,CAAC,EAAE,CAAC;YAClF,MAAM,GAAG,GAAG,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,OAAO,EAAE,4CAA4C,CAAC,CAAC;YAC/G,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC5B,MAAM,QAAQ,GACV,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,QAAQ,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACzG,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC;YACzE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACzB,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAC7D,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,iBAAiB;QAEA;QAAuB;QAD5C,IAAI,CAAwB;QAC5B,YAAqB,IAAY,EAAW,eAAuB;YAA9C,SAAI,GAAJ,IAAI,CAAQ;YAAW,oBAAe,GAAf,eAAe,CAAQ;YACjE,IAAI,CAAC,IAAI,GAAG,EAA2B,CAAC;QAC1C,CAAC;QACD,YAAY;YACV,OAAO,IAAI,CAAC,eAAe,CAAC;QAC9B,CAAC;KACF;IAED,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC/B,MAAM,YAAY,GAAG,4BAA4B,CAAC;QAClD,iDAAiD;QACjD,2GAA2G;QAC3G,oBAAoB;QAEpB,MAAM,YAAY,GAAG,IAAI,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAE5E,+BAA+B;QAC/B,YAAY;QACZ,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QAErD,YAAY,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QACpF,YAAY,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QAElF,qGAAqG;QACrG,+BAA+B;QAC/B,YAAY;QACZ,+BAA+B;QAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QAEpG,oDAAoD;QACpD,+BAA+B;QAC/B,mBAAmB;QACnB,+BAA+B;QAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;QAE3G,+DAA+D;QAC/D,+BAA+B;QAC/B,aAAa;QACb,+BAA+B;QAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QAErG,yDAAyD;QACzD,+BAA+B;QAC/B,kBAAkB;QAClB,+BAA+B;QAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QAEzG,qDAAqD;QACrD,+BAA+B;QAC/B,8BAA8B;QAC9B,+BAA+B;QAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;QAEjH,yEAAyE;QACzE,+BAA+B;QAC/B,8BAA8B;QAC9B,+BAA+B;QAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAErG,6DAA6D;QAC7D,+BAA+B;QAC/B,6BAA6B;QAC7B,+BAA+B;QAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;QAE/G,gDAAgD;QAChD,+BAA+B;QAC/B,qBAAqB;QACrB,+BAA+B;QAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAEjG,kCAAkC;QAClC,+BAA+B;QAC/B,qBAAqB;QACrB,+BAA+B;QAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;QAEtG,mCAAmC;QACnC,+BAA+B;QAC/B,8BAA8B;QAC9B,+BAA+B;QAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAEhG,wCAAwC;QACxC,+BAA+B;QAC/B,oBAAoB;QACpB,+BAA+B;QAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QAErG,sCAAsC;QACtC,+BAA+B;QAC/B,gBAAgB;QAChB,+BAA+B;QAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACvG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,YAAY,GAAG,4BAA4B,CAAC;QAClD,MAAM,YAAY,GAAG,IAAI,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAE5E,MAAM,IAAI,GAAG,CAAC,IAAY,EAAE,EAAU,EAAE,EAAE;YACxC,MAAM,IAAI,GAAG,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAC9F,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/B,6GAA6G;YAC7G,sBAAsB;YACtB,YAAY,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpG,CAAC,CAAC;QAEF,+BAA+B;QAC/B,mBAAmB;QACnB,YAAY;QACZ,iDAAiD;QACjD,qBAAqB;QACrB,aAAa;QACb,YAAY;QACZ,aAAa;QACb,YAAY;QACZ,YAAY,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACf,MAAM,CAAC,WAAW,CACd,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;QACtG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;QACnH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QAC7G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAC3G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAC3G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QAEzG,+BAA+B;QAC/B,mBAAmB;QACnB,iBAAiB;QACjB,qBAAqB;QACrB,kBAAkB;QAClB,kBAAkB;QAClB,iBAAiB;QACjB,iBAAiB;QACjB,YAAY,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACf,MAAM,CAAC,WAAW,CACd,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;QACtG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAC3G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QAC7G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;QAChH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QAE9G,+BAA+B;QAC/B,mBAAmB;QACnB,mBAAmB;QACnB,qBAAqB;QACrB,mBAAmB;QACnB,mBAAmB;QACnB,YAAY,CAAC,KAAK,EAAE,CAAC;QACrB,4DAA4D;QAC5D,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACf,MAAM,CAAC,WAAW,CACd,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;QACtG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QACzG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAE3G,+BAA+B;QAC/B,mBAAmB;QACnB,iBAAiB;QACjB,qBAAqB;QACrB,iBAAiB;QACjB,kBAAkB;QAClB,aAAa;QACb,YAAY;QACZ,iBAAiB;QACjB,kBAAkB;QAClB,YAAY,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACf,MAAM,CAAC,WAAW,CACd,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;QACtG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;QAClH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;QAChH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAC3G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QACzG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QACzG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAE3G,gCAAgC;QAChC,mBAAmB;QACnB,kBAAkB;QAClB,qBAAqB;QACrB,kBAAkB;QAClB,mBAAmB;QACnB,kBAAkB;QAClB,mBAAmB;QACnB,gCAAgC;QAChC,aAAa;QACb,cAAc;QACd,aAAa;QACb,cAAc;QACd,gCAAgC;QAChC,kBAAkB;QAClB,kBAAkB;QAClB,mBAAmB;QACnB,mBAAmB;QACnB,gCAAgC;QAChC,YAAY,CAAC,KAAK,EAAE,CAAC;QACrB,4DAA4D;QAC5D,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACf,MAAM,CAAC,WAAW,CACd,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;QACtG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;QAClH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;QAChH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;QAChH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;QAClH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAC3G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QAC7G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QACzG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAC3G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QACzG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QACvG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAC3G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC3G,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,YAAY,GAAG,IAAI,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAC1E,YAAY,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7D,YAAY,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,GAAG,GAAG,mBAAmB,CAAC,YAAY,EAAE,qBAAqB,CAAC,CAAC;QACrE,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACrB,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC7C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACrB,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAC5E,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,wBAAwB,CAAC,CAAC;QACjF,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;QAC3D,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,GAAG,GAAG,mBAAmB,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;QAC9D,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAC5E,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,uBAAuB,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,2BAA2B,CAAC;YAC1B,iBAAiB,EAAE,SAAS;YAC5B,UAAU,EAAE,KAAK;YACjB,cAAc,EAAE,KAAK;YACrB,OAAO,EAAE,SAAS;YAClB,SAAS,EAAE,SAAS;YACpB,UAAU,EAAE,UAAU;YACtB,mBAAmB,EAAE,WAAW;SACjC,CAAC,CAAC;QACH,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,OAAO,EAAE,qFAAqF,EAC9F,IAAI,QAAQ,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,sBAAsB,EAAE,KAAK,CAAC,CAAC,CAAC;YACzG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,uBAAuB,CAAC,CAAC;YACvF,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,iBAAiB,CAAC,CAAC;QACnF,CAAC;QACD,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,OAAO,EAAE,uDAAuD,EAChE,IAAI,QAAQ,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC,CAAC;YACnD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,cAAc,CAAC,CAAC;YAC7E,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,eAAe,CAAC,CAAC;YAC/E,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,eAAe,CAAC,CAAC;QACjF,CAAC;QAED,KAAK,MAAM,IAAI,IACH,CAAC,wDAAwD;YACxD,2FAA2F;YAC3F,6EAA6E;YAC7E,2DAA2D;YAC3D,yEAAyE;YACzE,iDAAiD;SAC7D,EAAE,CAAC;YACF,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC,CAAC;YAC1G,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,SAAS,KAAK,CAAC,KAAa,EAAE,MAAc,EAAE,MAAc;YAC1D,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,OAAO,EAAE,aAAa,KAAK,KAAK,MAAM,KAAK,MAAM,GAAG,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC,CAAC;YACzG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAE3B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YACjF,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAC/E,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QACjF,CAAC;QAED,SAAS,YAAY,CAAC,KAAa,EAAE,MAAc,EAAE,MAAc;YACjE,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAClC,OAAO,EAAE,aAAa,KAAK,KAAK,MAAM,KAAK,MAAM,GAAG,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC,CAAC;YACzG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;QAED,KAAK,CAAC,qBAAqB,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAChD,KAAK,CAAC,6BAA6B,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QACxD,KAAK,CAAC,SAAS,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QACpC,KAAK,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;QACxC,KAAK,CAAC,SAAS,EAAE,2BAA2B,EAAE,4BAA4B,CAAC,CAAC;QAC5E,YAAY,CAAC,oBAAoB,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QACtD,YAAY,CAAC,gBAAgB,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAClD,YAAY,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC/B,KAAK,MAAM,OAAO,IACN,CAAC,UAAU,EAAE,eAAe,EAAE,qBAAqB,EAAE,oBAAoB,EAAE,yBAAyB;YACnG,iBAAiB,CAAC,EAAE,CAAC;YAChC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GACpB,gBAAgB,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAE9F,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC5B,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,EAAE,GAAG,QAAQ,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACjF,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACrC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1F,CAAC;QACD,KAAK,MAAM,IAAI,IAAI,CAAC,KAAK,EAAE,oBAAoB,EAAE,QAAQ,EAAE,SAAS,CAAC,EAAE,CAAC;YACtE,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAE7G,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;QACrB,MAAM,GAAG,GAAG,oBAAoB,CAAC;QACjC,CAAC;YACC,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GACf,gBAAgB,CAAC,kBAAkB,EAAE,OAAO,GAAG,GAAG,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC,CAAC;YAClG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAC3C,CAAC;QACD,CAAC;YACC,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GACf,gBAAgB,CAAC,kBAAkB,EAAE,QAAQ,GAAG,IAAI,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC,CAAC;YACpG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,KAAK,MAAM,OAAO,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE,CAAC;YAChE,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,WAAW,EAAE,OAAO,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,CAAC;YAC9G,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC5B,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,CAAC;QACD,KAAK,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC;YAC/C,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,CAAC;YACtG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,SAAS,KAAK,CAAC,IAAY,EAAE,KAAa;YACxC,MAAM,GAAG,GAAG,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACrE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACnB,MAAM,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE;gBAC3E,IAAI,QAAQ,CAAC,cAAc,CAAC,mBAAmB,EAAE;aAClD,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAC9B,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,QAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YACpG,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3D,CAAC;QAED,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,gBAAgB,EAAE,2BAA2B,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;QAChH,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,gBAAgB,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QACpE,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,cAAc,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QAClE,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,mBAAmB,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QACvE,CAAC;YACC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,sBAAsB,EAAE,YAAY,CAAC,EAAE,EAAE,CAAC,CAAC;YACxE,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,sBAAsB,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;YAC1E,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,sBAAsB,EAAE,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;QAC5F,CAAC;QACD,CAAC;YACC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,cAAc,EAAE,YAAY,CAAC,EAAE,EAAE,CAAC,CAAC;YAChE,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,cAAc,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;YAClE,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;QACpF,CAAC;QACD,CAAC;YACC,2BAA2B,CAAC;gBAC1B,uBAAuB,EAAE,WAAW;aACrC,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,WAAW,EAAE,4BAA4B,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC/F,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,WAAW,EAAE,kBAAkB,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC,eAAe,CAClB,KAAK,CAAC,WAAW,EAAE,kDAAkD,CAAC,EAAE,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC,CAAC;YAC/G,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,WAAW,EAAE,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;YAC5D,+GAA+G;YAC/G,MAAM,CAAC,eAAe,CAClB,KAAK,CAAC,WAAW,EAAE,mCAAmC,CAAC,EAAE,CAAC,uBAAuB,EAAE,QAAQ,CAAC,CAAC,CAAC;YAClG,MAAM,CAAC,eAAe,CAClB,KAAK,CAAC,WAAW,EAAE,iDAAiD,CAAC,EACrE,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,KAAK,MAAM,OAAO,IACN,CAAC,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,aAAa,EAAE,sBAAsB;YAC9E,kCAAkC,CAAC,EAAE,CAAC;YACjD,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GACpB,gBAAgB,CAAC,2BAA2B,EAAE,OAAO,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC,CAAC;YACxG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC5B,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,CAAC;QAED,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,QAAQ,EAAE,SAAS,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC,CAAC;QAC9G,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QAC7B,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,SAAS,KAAK,CAAC,IAAY,EAAE,KAAa;YACxC,MAAM,GAAG,GAAG,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACrE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACnB,MAAM,aAAa,GACf,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,QAAQ,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YAC1G,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAE7B,MAAM,KAAK,GACP,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAC9G,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC;QACD,KAAK,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC7B,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QAC7B,KAAK,CAAC,iCAAiC,EAAE,yEAAyE,CAAC,CAAC;IACtH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAClC,YAAY,EAAE,iDAAiD,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC,CAAC;QAClH,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,2CAA2C,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,KAAK,MAAM,QAAQ,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,mBAAmB,CAAC,EAAE,CAAC;YACxE,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,CAAC;YAE9G,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC3C,CAAC;QAED,CAAC;YACC,MAAM,GAAG,GAAG,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,aAAa,EAAE,yBAAyB,CAAC,CAAC;YAClG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACnB,MAAM,aAAa,GACf,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,QAAQ,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACxG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAE7B,MAAM,OAAO,GACT,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YAC/G,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC,CAAC;QAC3G,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,2BAA2B,CAAC;YAC1B,OAAO,EAAE,SAAS;YAClB,kBAAkB,EAAE,uBAAuB;YAC3C,aAAa,EAAE,SAAS;YACxB,cAAc,EAAE,aAAa;SAC9B,CAAC,CAAC;QAEH,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAChH,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;QACxG,CAAC;QACD,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,qBAAqB,EAAE,yBAAyB,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC,CAAC;YACzG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,eAAe,CAClB,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QACxG,CAAC;QACD,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,eAAe,EAAE,oCAAoC,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAC9G,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,eAAe,CAClB,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,SAAS,EAAE,4BAA4B,CAAC,CAAC,CAAC;QAChH,CAAC;QACD,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,MAAM,EAAE,gGAAgG,EAExG,IAAI,QAAQ,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,eAAe,CAClB,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAC7D,CAAC,0CAA0C,EAAE,sDAAsD,CAAC,CAAC,CAAC;QAC5G,CAAC;QACD,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,MAAM,EAAE,oEAAoE,EAE5E,IAAI,QAAQ,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,eAAe,CAClB,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAC7D,CAAC,oBAAoB,EAAE,0BAA0B,EAAE,uBAAuB,CAAC,CAAC,CAAC;QACnF,CAAC;QACD,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,MAAM,EAAE,gEAAgE,EAExE,IAAI,QAAQ,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,eAAe,CAClB,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAC7D,CAAC,uBAAuB,EAAE,mBAAmB,EAAE,uBAAuB,CAAC,CAAC,CAAC;QAC/E,CAAC;QACD,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,MAAM,EAAE,0CAA0C,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAC3G,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,eAAe,CAClB,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,yCAAyC,CAAC,CAAC,CAAC;QAClH,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,KAAK,MAAM,IAAI,IAAI,CAAC,cAAc,EAAE,iBAAiB,EAAE,wBAAwB,CAAC,EAAE,CAAC;YACjF,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,qBAAqB,EAAE,CAAC,CAAC;YAC3G,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;QAED,KAAK,MAAM,OAAO,IACN,CAAC,uBAAuB,EAAE,6BAA6B,EAAE,6BAA6B;YACrF,oCAAoC,CAAC,EAAE,CAAC;YACnD,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GACpB,gBAAgB,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,qBAAqB,EAAE,CAAC,CAAC;YAC5F,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAE3B,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC1E,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACpD,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QACpD,CAAC;QAED,8CAA8C;QAC9C,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GACf,gBAAgB,CAAC,OAAO,EAAE,uBAAuB,EAAE,IAAI,QAAQ,CAAC,cAAc,CAAC,qBAAqB,EAAE,CAAC,CAAC;QAC5G,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {Printer} from '../../testing/PropertyParser.js';\nimport type * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\n\nimport * as Elements from './elements.js';\n\nclass TreeSearch extends Elements.PropertyParser.TreeWalker {\n  #found: CodeMirror.SyntaxNode|null = null;\n  #predicate: (node: CodeMirror.SyntaxNode) => boolean;\n\n  constructor(ast: Elements.PropertyParser.SyntaxTree, predicate: (node: CodeMirror.SyntaxNode) => boolean) {\n    super(ast);\n    this.#predicate = predicate;\n  }\n\n  protected override enter({node}: Elements.PropertyParser.SyntaxNodeRef): boolean {\n    if (this.#found) {\n      return false;\n    }\n\n    if (this.#predicate(node)) {\n      this.#found = this.#found ?? node;\n      return false;\n    }\n    return true;\n  }\n\n  static find(ast: Elements.PropertyParser.SyntaxTree, predicate: (node: CodeMirror.SyntaxNode) => boolean):\n      CodeMirror.SyntaxNode|null {\n    return TreeSearch.walk(ast, predicate).#found;\n  }\n\n  static findAll(ast: Elements.PropertyParser.SyntaxTree, predicate: (node: CodeMirror.SyntaxNode) => boolean):\n      CodeMirror.SyntaxNode[] {\n    const foundNodes: CodeMirror.SyntaxNode[] = [];\n    TreeSearch.walk(ast, (node: CodeMirror.SyntaxNode) => {\n      if (predicate(node)) {\n        foundNodes.push(node);\n      }\n\n      return false;\n    });\n    return foundNodes;\n  }\n}\n\nfunction matchSingleValue<T extends Elements.PropertyParser.Match>(\n    name: string, value: string, matcher: Elements.PropertyParser.Matcher<T>):\n    {ast: Elements.PropertyParser.SyntaxTree|null, match: T|null, text: string} {\n  const ast = Elements.PropertyParser.tokenizeDeclaration(name, value);\n  if (!ast) {\n    return {ast, match: null, text: value};\n  }\n\n  const matchedResult = Elements.PropertyParser.BottomUpTreeMatching.walk(ast, [matcher]);\n  const matchedNode = TreeSearch.find(ast, n => matchedResult.getMatch(n) instanceof matcher.matchType);\n  const match = matchedNode && matchedResult.getMatch(matchedNode);\n\n  return {\n    ast,\n    match: match instanceof matcher.matchType ? match : null,\n    text: Printer.walk(ast).get(),\n  };\n}\n\nfunction tokenizeDeclaration(name: string, value: string): Elements.PropertyParser.SyntaxTree {\n  const ast = Elements.PropertyParser.tokenizeDeclaration(name, value);\n  assert.exists(ast, Printer.rule(`*{${name}: ${value};}`));\n  return ast;\n}\n\nfunction injectVariableSubstitutions(variables: Record<string, string>) {\n  const {getComputedText, getComputedTextRange, getMatch} = Elements.PropertyParser.BottomUpTreeMatching.prototype;\n  const variableNames = new Map<string, {varName: string, value: string}>();\n  function injectChunk(matching: Elements.PropertyParser.BottomUpTreeMatching): void {\n    if (matching.computedText.chunkCount === 0) {\n      const propertyOffset = matching.ast.rule.indexOf(matching.ast.propertyName ?? '--');\n      assert.isAbove(propertyOffset, 0);\n      for (const [varName, value] of Object.entries(variables)) {\n        const varText = `var(${varName})`;\n        for (let offset = matching.ast.rule.indexOf(varText); offset >= 0;\n             offset = matching.ast.rule.indexOf(varText, offset + 1)) {\n          matching.computedText.push(\n              {text: varText, computedText: () => value, node: {} as CodeMirror.SyntaxNode}, offset - propertyOffset);\n        }\n        variableNames.set(varText, {varName, value});\n      }\n    }\n  }\n\n  sinon.stub(Elements.PropertyParser.BottomUpTreeMatching.prototype, 'getComputedText')\n      .callsFake(function(this: Elements.PropertyParser.BottomUpTreeMatching, node: CodeMirror.SyntaxNode): string {\n        injectChunk(this);\n        return getComputedText.call(this, node);\n      });\n  sinon.stub(Elements.PropertyParser.BottomUpTreeMatching.prototype, 'getComputedTextRange')\n      .callsFake(function(\n          this: Elements.PropertyParser.BottomUpTreeMatching, from: CodeMirror.SyntaxNode,\n          to: CodeMirror.SyntaxNode): string {\n        injectChunk(this);\n        return getComputedTextRange.call(this, from, to);\n      });\n  sinon.stub(Elements.PropertyParser.BottomUpTreeMatching.prototype, 'getMatch')\n      .callsFake(function(this: Elements.PropertyParser.BottomUpTreeMatching, node: CodeMirror.SyntaxNode):\n                     Elements.PropertyParser.Match|undefined {\n                       injectChunk(this);\n                       const resolvedValue = variableNames.get(this.ast.text(node));\n                       if (!resolvedValue) {\n                         return getMatch.call(this, node);\n                       }\n                       return new Elements.PropertyParser.VariableMatch(\n                           this.ast.text(node), node, resolvedValue.varName, [], this, () => resolvedValue.value);\n                     });\n}\n\ndescribe('PropertyParser', () => {\n  it('correctly identifies spacing', () => {\n    const requiresSpace = (a: string, b: string) =>\n        Elements.PropertyParser.requiresSpace([document.createTextNode(a)], [document.createTextNode(b)]);\n\n    assert.isTrue(requiresSpace('a', 'b'));\n    assert.isFalse(requiresSpace('', 'text'));\n    assert.isFalse(requiresSpace('(', 'text'));\n    assert.isFalse(requiresSpace(' ', 'text'));\n    assert.isFalse(requiresSpace('{', 'text'));\n    assert.isFalse(requiresSpace('}', 'text'));\n    assert.isFalse(requiresSpace(';', 'text'));\n    assert.isFalse(requiresSpace('text(', 'text'));\n    assert.isFalse(requiresSpace('text ', 'text'));\n    assert.isFalse(requiresSpace('text{', 'text'));\n    assert.isFalse(requiresSpace('text}', 'text'));\n    assert.isFalse(requiresSpace('text;', 'text'));\n\n    assert.isFalse(requiresSpace('text', ''));\n    assert.isFalse(requiresSpace('text', '('));\n    assert.isFalse(requiresSpace('text', ')'));\n    assert.isFalse(requiresSpace('text', ','));\n    assert.isFalse(requiresSpace('text', ':'));\n    assert.isFalse(requiresSpace('text', ' '));\n    assert.isFalse(requiresSpace('text', '*'));\n    assert.isFalse(requiresSpace('text', '{'));\n    assert.isFalse(requiresSpace('text', ';'));\n    assert.isFalse(requiresSpace('text', '( text'));\n    assert.isFalse(requiresSpace('text', ') text'));\n    assert.isFalse(requiresSpace('text', ', text'));\n    assert.isFalse(requiresSpace('text', ': text'));\n    assert.isFalse(requiresSpace('text', ' text'));\n    assert.isFalse(requiresSpace('text', '* text'));\n    assert.isFalse(requiresSpace('text', '{ text'));\n    assert.isFalse(requiresSpace('text', '; text'));\n\n    assert.isTrue(Elements.PropertyParser.requiresSpace(\n        [document.createTextNode('text'), document.createElement('div')], [document.createTextNode('text')]));\n    assert.isTrue(Elements.PropertyParser.requiresSpace(\n        [document.createTextNode('text')], [document.createElement('div'), document.createTextNode('text')]));\n    assert.isTrue(Elements.PropertyParser.requiresSpace(\n        [document.createTextNode('text'), document.createElement('div')],\n        [document.createElement('div'), document.createTextNode('text')]));\n    assert.isFalse(Elements.PropertyParser.requiresSpace(\n        [document.createTextNode('text'), document.createElement('div')], [document.createTextNode(' text')]));\n    assert.isFalse(Elements.PropertyParser.requiresSpace(\n        [document.createTextNode('text')], [document.createElement('div'), document.createTextNode(' text')]));\n    assert.isFalse(Elements.PropertyParser.requiresSpace(\n        [document.createTextNode('text'), document.createElement('div')],\n        [document.createElement('div'), document.createTextNode(' text')]));\n  });\n\n  it('parses comments', () => {\n    const property = '/* color: red */blue/* color: red */';\n    const ast = tokenizeDeclaration('--property', property);\n    const topNode = ast.tree.parent?.parent?.parent;\n    assert.exists(topNode);\n    assert.strictEqual(\n        Printer.walk(ast.subtree(topNode)).get(), ` StyleSheet: *{--property: /* color: red */blue/* color: red */;}\n| RuleSet: *{--property: /* color: red */blue/* color: red */;}\n|| UniversalSelector: *\n|| Block: {--property: /* color: red */blue/* color: red */;}\n||| {\n||| Declaration: --property: /* color: red */blue\n|||| VariableName: --property\n|||| :\n|||| Comment: /* color: red */\n|||| ValueName: blue\n||| Comment: /* color: red */\n||| ;\n||| }`);\n  });\n\n  it('correctly tokenizes invalid text', () => {\n    assert.isNull(Elements.PropertyParser.tokenizeDeclaration('--p', ''));\n    assert.isNull(Elements.PropertyParser.tokenizeDeclaration('--p', '/*'));\n    assert.isNull(Elements.PropertyParser.tokenizeDeclaration('--p', '}'));\n  });\n\n  it('correctly parses property names', () => {\n    assert.strictEqual(tokenizeDeclaration('color /*comment*/', 'red')?.propertyName, 'color');\n    assert.strictEqual(tokenizeDeclaration('/*comment*/color/*comment*/', 'red')?.propertyName, 'color');\n    assert.strictEqual(tokenizeDeclaration(' /*comment*/color', 'red')?.propertyName, 'color');\n    assert.strictEqual(tokenizeDeclaration('co/*comment*/lor', 'red')?.propertyName, 'lor');\n    assert.isNull(Elements.PropertyParser.tokenizeDeclaration('co:lor', 'red'));\n  });\n\n  it('parses colors', () => {\n    for (const fail of ['red-blue', '#f', '#foobar', '', 'rgbz(1 2 2)', 'tan(45deg)']) {\n      const {match, text} = matchSingleValue('color', fail, new Elements.PropertyParser.ColorMatcher());\n      assert.isNull(match, text);\n    }\n    for (const succeed\n             of ['rgb(/* R */155, /* G */51, /* B */255)', 'red', 'rgb(0 0 0)', 'rgba(0 0 0)', '#fff', '#ffff',\n                 '#ffffff', '#ffffffff']) {\n      const {match, text} = matchSingleValue('color', succeed, new Elements.PropertyParser.ColorMatcher());\n      assert.exists(match, text);\n      assert.strictEqual(match.text, succeed);\n    }\n    // The property name matters:\n    for (const fail\n             of ['rgb(/* R */155, /* G */51, /* B */255)', 'red', 'rgb(0 0 0)', 'rgba(0 0 0)', '#fff', '#ffff',\n                 '#ffffff', '#ffffffff']) {\n      const {match, text} = matchSingleValue('width', fail, new Elements.PropertyParser.ColorMatcher());\n      assert.isNull(match, text);\n    }\n  });\n\n  it('parses colors in masks', () => {\n    for (const succeed of ['mask', 'mask-image', 'mask-border', 'mask-border-source']) {\n      const ast = Elements.PropertyParser.tokenizeDeclaration(succeed, 'linear-gradient(to top, red, var(--other))');\n      assert.exists(ast, succeed);\n      const matching =\n          Elements.PropertyParser.BottomUpTreeMatching.walk(ast, [new Elements.PropertyParser.ColorMatcher()]);\n      const colorNode = TreeSearch.find(ast, node => ast.text(node) === 'red');\n      assert.exists(colorNode);\n      const match = matching.getMatch(colorNode);\n      assert.exists(match);\n      assert.instanceOf(match, Elements.PropertyParser.ColorMatch);\n      assert.strictEqual(match.text, 'red');\n    }\n  });\n\n  class ComputedTextMatch implements Elements.PropertyParser.Match {\n    node: CodeMirror.SyntaxNode;\n    constructor(readonly text: string, readonly constructedText: string) {\n      this.node = {} as CodeMirror.SyntaxNode;\n    }\n    computedText?(): string {\n      return this.constructedText;\n    }\n  }\n\n  it('computes ComputedText', () => {\n    const originalText = 'abcdefghijklmnopqrstuvwxyz';\n    // computed text:    '        +++--     ------  '\n    // Where + means a replacement, - means a deletion, i.e., computed texts are shorter than the corresponding\n    // original snippet.\n\n    const computedText = new Elements.PropertyParser.ComputedText(originalText);\n\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |----|\n    assert.strictEqual(computedText.get(2, 8), 'cdefgh');\n\n    computedText.push(new ComputedTextMatch('ijklm', '012'), originalText.indexOf('i'));\n    computedText.push(new ComputedTextMatch('stuvwx', ''), originalText.indexOf('s'));\n\n    // Range starts in original text before the first chunk, ends in original text before the first chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |----|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('h')), 'cdefg');\n\n    // Range ends in original text after the first chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |-----------|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('o')), 'cdefgh 012 n');\n\n    // Range ends in original text ends on the beginning of a chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |-----|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('i')), 'cdefgh');\n\n    // Range ends in original text ends on the end of a chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |----------|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('n')), 'cdefgh 012');\n\n    // Range ends in original text after the second chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |----------------------|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('z')), 'cdefgh 012 nopqr y');\n\n    // Range ends in original text after the second chunk containing no chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //                          ||\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('y'), originalText.indexOf('z') + 1), 'yz');\n\n    // Range ends in original text on the end of the second chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |---------------------|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('y')), 'cdefgh 012 nopqr');\n\n    // range starts in original text after the chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //                |-|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('o'), originalText.indexOf('q')), 'op');\n\n    // range starts on the first chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //          |-------|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('i'), originalText.indexOf('q')), '012 nop');\n\n    // range starts on the second chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //                    |------|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('s'), originalText.indexOf('z')), 'y');\n\n    // range starts in the middle of a chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //           |-----|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('j'), originalText.indexOf('p')), 'jklmno');\n\n    // range ends in the middle of a chunk\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //       |-----|\n    // 'abcdefgh012  nopqr      yz'\n    assert.strictEqual(computedText.get(originalText.indexOf('f'), originalText.indexOf('l')), 'fghijk');\n  });\n\n  it('computes ComputedText with overlapping ranges', () => {\n    const originalText = 'abcdefghijklmnopqrstuvwxyz';\n    const computedText = new Elements.PropertyParser.ComputedText(originalText);\n\n    const push = (from: string, to: string) => {\n      const text = originalText.substring(originalText.indexOf(from), originalText.indexOf(to) + 1);\n      assert.isAbove(text.length, 1);\n      // This means computed and authored test have identical length, but we're testing the computed text stitching\n      // sufficiently above.\n      computedText.push(new ComputedTextMatch(text, text.toUpperCase()), originalText.indexOf(text[0]));\n    };\n\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |-----------|\n    //    |----|\n    //   ++++++++++++++++          (requested ranges)\n    //    +++++++++++++++\n    //   ++++++++\n    //   +++++++\n    //    +++++++\n    //    ++++++\n    computedText.clear();\n    push('c', 'o');\n    push('c', 'h');\n    assert.strictEqual(\n        computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('q') + 1), 'CDEFGHIJKLMNO pq');\n    assert.strictEqual(computedText.get(originalText.indexOf('b'), originalText.indexOf('i') + 1), 'b CDEFGH i');\n    assert.strictEqual(computedText.get(originalText.indexOf('b'), originalText.indexOf('h') + 1), 'b CDEFGH');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('i') + 1), 'CDEFGH i');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('h') + 1), 'CDEFGH');\n\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |-----------|\n    //         |----|\n    //   ++++++++++++++++\n    //         +++++++\n    //        ++++++++\n    //   ++++++++++++\n    //    +++++++++++\n    computedText.clear();\n    push('c', 'o');\n    push('h', 'm');\n    assert.strictEqual(\n        computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n    assert.strictEqual(computedText.get(originalText.indexOf('h'), originalText.indexOf('n') + 1), 'HIJKLM n');\n    assert.strictEqual(computedText.get(originalText.indexOf('g'), originalText.indexOf('n') + 1), 'g HIJKLM n');\n    assert.strictEqual(computedText.get(originalText.indexOf('b'), originalText.indexOf('m') + 1), 'bcdefg HIJKLM');\n    assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('m') + 1), 'defg HIJKLM');\n\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |-----------|\n    //           |----|\n    //   ++++++++++++++++\n    //           ++++++\n    //          +++++++\n    computedText.clear();\n    // Swap the insertion order around to test sorting behavior.\n    push('j', 'o');\n    push('c', 'o');\n    assert.strictEqual(\n        computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n    assert.strictEqual(computedText.get(originalText.indexOf('j'), originalText.indexOf('o') + 1), 'JKLMNO');\n    assert.strictEqual(computedText.get(originalText.indexOf('i'), originalText.indexOf('o') + 1), 'i JKLMNO');\n\n    // 'abcdefghijklmnopqrstuvwxyz'\n    //    |-----------|\n    //    |----| |--|\n    //   ++++++++++++++++\n    //    +++++++++++\n    //    ++++++++++++\n    //    +++++++\n    //    ++++++\n    //          +++++\n    //          ++++++\n    computedText.clear();\n    push('c', 'o');\n    push('c', 'h');\n    push('j', 'm');\n    assert.strictEqual(\n        computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('n') + 1), 'CDEFGH i JKLM n');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('m') + 1), 'CDEFGH i JKLM');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('i') + 1), 'CDEFGH i');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('h') + 1), 'CDEFGH');\n    assert.strictEqual(computedText.get(originalText.indexOf('i'), originalText.indexOf('m') + 1), 'i JKLM');\n    assert.strictEqual(computedText.get(originalText.indexOf('i'), originalText.indexOf('n') + 1), 'i JKLM n');\n\n    // 'abcdefghijklmnopqrstuvwxyz';\n    //    |-----------|\n    //     |----| |--|\n    //   ++++++++++++++++\n    //    ++++++++++++\n    //    +++++++++++++\n    //     +++++++++++\n    //     ++++++++++++\n    // 'abcdefghijklmnopqrstuvwxyz';\n    //    +++++++\n    //    ++++++++\n    //     ++++++\n    //     +++++++\n    // 'abcdefghijklmnopqrstuvwxyz';\n    //           +++++\n    //            ++++\n    //           ++++++\n    //            +++++\n    // 'abcdefghijklmnopqrstuvwxyz';\n    computedText.clear();\n    // Swap the insertion order around to test sorting behavior.\n    push('k', 'n');\n    push('c', 'o');\n    push('d', 'i');\n    assert.strictEqual(\n        computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('n') + 1), 'c DEFGHI j KLMN');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('o') + 1), 'CDEFGHIJKLMNO');\n    assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('n') + 1), 'DEFGHI j KLMN');\n    assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('o') + 1), 'DEFGHI j KLMN o');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('i') + 1), 'c DEFGHI');\n    assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('j') + 1), 'c DEFGHI j');\n    assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('i') + 1), 'DEFGHI');\n    assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('j') + 1), 'DEFGHI j');\n    assert.strictEqual(computedText.get(originalText.indexOf('j'), originalText.indexOf('n') + 1), 'j KLMN');\n    assert.strictEqual(computedText.get(originalText.indexOf('k'), originalText.indexOf('n') + 1), 'KLMN');\n    assert.strictEqual(computedText.get(originalText.indexOf('j'), originalText.indexOf('o') + 1), 'j KLMN o');\n    assert.strictEqual(computedText.get(originalText.indexOf('k'), originalText.indexOf('o') + 1), 'KLMN o');\n  });\n\n  it('computes ComputedText with back-to-back chunks', () => {\n    const computedText = new Elements.PropertyParser.ComputedText('abcdefgh');\n    computedText.push(new ComputedTextMatch('abcd', '01234'), 0);\n    computedText.push(new ComputedTextMatch('efgh', '56789'), 4);\n    assert.strictEqual(computedText.get(0, 8), '01234 56789');\n  });\n\n  it('correctly produces the computed text during matching', () => {\n    const ast = tokenizeDeclaration('--property', '1px /* red */ solid');\n    const width = ast.tree.getChild('NumberLiteral');\n    assert.exists(width);\n    const style = ast.tree.getChild('ValueName');\n    assert.exists(style);\n    const matching = Elements.PropertyParser.BottomUpTreeMatching.walk(ast, []);\n    assert.strictEqual(matching.getComputedText(ast.tree), '--property: 1px  solid');\n    assert.strictEqual(matching.getComputedText(width), '1px');\n    assert.strictEqual(matching.getComputedText(style), 'solid');\n  });\n\n  it('retains tokenization in the computed text', () => {\n    const ast = tokenizeDeclaration('--property', 'dark/**/gray');\n    const matching = Elements.PropertyParser.BottomUpTreeMatching.walk(ast, []);\n    assert.strictEqual(matching.getComputedText(ast.tree), '--property: dark gray');\n  });\n\n  it('parses color-mix with vars', () => {\n    injectVariableSubstitutions({\n      '--interpolation': 'shorter',\n      '--color1': 'red',\n      '--percentage': '13%',\n      '--rgb': 'shorter',\n      '--space': 'in srgb',\n      '--color2': '25% blue',\n      '--multiple-colors': 'red, blue',\n    });\n    {\n      const {ast, match, text} = matchSingleValue(\n          'color', 'color-mix(in srgb var(--interpolation) hue, red var(--percentage), rgb(var(--rgb)))',\n          new Elements.PropertyParser.ColorMixMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.deepStrictEqual(match.space.map(n => ast.text(n)), ['in', 'srgb', 'var(--interpolation)', 'hue']);\n      assert.strictEqual(match.color1.map(n => ast.text(n)).join(), 'red,var(--percentage)');\n      assert.strictEqual(match.color2.map(n => ast.text(n)).join(), 'rgb(var(--rgb))');\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'color', 'color-mix(var(--space), var(--color1), var(--color2))',\n          new Elements.PropertyParser.ColorMixMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.strictEqual(match.space.map(n => ast.text(n)).join(), 'var(--space)');\n      assert.strictEqual(match.color1.map(n => ast.text(n)).join(), 'var(--color1)');\n      assert.strictEqual(match.color2.map(n => ast.text(n)).join(), 'var(--color2)');\n    }\n\n    for (const fail\n             of ['color-mix(var(--color1), var(--color1), var(--color2))',\n                 'color-mix(var(--space), var(--color1) var(--percentage) var(--percentage), var(--color2))',\n                 'color-mix(var(--space), var(--color1) 10% var(--percentage), var(--color2))',\n                 'color-mix(var(--space), var(--color1), var(--color2) 15%)',\n                 'color-mix(var(--space), var(--color1), var(--color2) var(--percentage))',\n                 'color-mix(var(--space), var(--multiple-colors))',\n    ]) {\n      const {ast, match, text} = matchSingleValue('color', fail, new Elements.PropertyParser.ColorMixMatcher());\n      assert.exists(ast, text);\n      assert.isNull(match, text);\n    }\n  });\n\n  it('parses color-mix', () => {\n    function check(space: string, color1: string, color2: string): void {\n      const {ast, match, text} = matchSingleValue(\n          'color', `color-mix(${space}, ${color1}, ${color2})`, new Elements.PropertyParser.ColorMixMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n\n      assert.deepStrictEqual(match.space.map(n => ast.text(n)).join(' '), space, text);\n      assert.strictEqual(match.color1.map(n => ast.text(n)).join(' '), color1, text);\n      assert.strictEqual(match.color2.map(n => ast.text(n)).join(' '), color2, text);\n    }\n\n    function checkFailure(space: string, color1: string, color2: string): void {\n      const {match, text} = matchSingleValue(\n          'color', `color-mix(${space}, ${color1}, ${color2})`, new Elements.PropertyParser.ColorMixMatcher());\n      assert.isNull(match, text);\n    }\n\n    check('in srgb shorter hue', 'red 35%', 'blue');\n    check('in /*asd*/ srgb shorter hue', 'red 35%', 'blue');\n    check('in srgb', 'red 35%', 'blue');\n    check('in srgb', '35% red', 'blue 16%');\n    check('in srgb', '/*a*/ 35% /*b*/ red /*c*/', '/*a*/ blue /*b*/ 16% /*c*/');\n    checkFailure('insrgb shorter hue', 'red 35%', 'blue');\n    checkFailure('/*asd*/srgb in', 'red 35%', 'blue');\n    checkFailure('in srgb', '0% red', 'blue 0%');\n  });\n\n  it('parses vars correctly', () => {\n    for (const succeed\n             of ['var(--a)', 'var(--a, 123)', 'var(--a, calc(1+1))', 'var(--a, var(--b))', 'var(--a, var(--b, 123))',\n                 'var(--a, a b c)']) {\n      const {ast, match, text} =\n          matchSingleValue('width', succeed, new Elements.PropertyParser.VariableMatcher(() => ''));\n\n      assert.exists(ast, succeed);\n      assert.exists(match, text);\n      assert.strictEqual(match.text, succeed);\n      assert.strictEqual(match.name, '--a');\n      const [name, ...fallback] = succeed.substring(4, succeed.length - 1).split(', ');\n      assert.strictEqual(match.name, name);\n      assert.strictEqual(match.fallback.map(n => ast.text(n)).join(' '), fallback.join(', '));\n    }\n    for (const fail of ['var', 'var(--a, 123, 123)', 'var(a)', 'var(--a']) {\n      const {match, text} = matchSingleValue('width', fail, new Elements.PropertyParser.VariableMatcher(() => ''));\n\n      assert.isNull(match, text);\n    }\n  });\n\n  it('parses URLs', () => {\n    const url = 'http://example.com';\n    {\n      const {match, text} =\n          matchSingleValue('background-image', `url(${url})`, new Elements.PropertyParser.URLMatcher());\n      assert.exists(match);\n      assert.strictEqual(match.url, url, text);\n    }\n    {\n      const {match, text} =\n          matchSingleValue('background-image', `url(\"${url}\")`, new Elements.PropertyParser.URLMatcher());\n      assert.exists(match);\n      assert.strictEqual(match.url, url, text);\n    }\n  });\n\n  it('parses angles correctly', () => {\n    for (const succeed of ['45deg', '1.3rad', '-25grad', '2.3turn']) {\n      const {ast, match, text} = matchSingleValue('transform', succeed, new Elements.PropertyParser.AngleMatcher());\n      assert.exists(ast, succeed);\n      assert.exists(match, text);\n      assert.strictEqual(match.text, succeed);\n    }\n    for (const fail of ['0DEG', '0', '123', '2em']) {\n      const {match, text} = matchSingleValue('transform', fail, new Elements.PropertyParser.AngleMatcher());\n      assert.isNull(match, text);\n    }\n  });\n\n  it('parses linkable names correctly', () => {\n    function match(name: string, value: string) {\n      const ast = Elements.PropertyParser.tokenizeDeclaration(name, value);\n      assert.exists(ast);\n      const matchedResult = Elements.PropertyParser.BottomUpTreeMatching.walk(ast, [\n        new Elements.PropertyParser.LinkableNameMatcher(),\n      ]);\n\n      const matches = TreeSearch.findAll(\n          ast, node => matchedResult.getMatch(node) instanceof Elements.PropertyParser.LinkableNameMatch);\n      return matches.map(m => matchedResult.getMatch(m)?.text);\n    }\n\n    assert.deepStrictEqual(match('animation-name', 'first, second, -moz-third'), ['first', 'second', '-moz-third']);\n    assert.deepStrictEqual(match('animation-name', 'first'), ['first']);\n    assert.deepStrictEqual(match('font-palette', 'first'), ['first']);\n    assert.deepStrictEqual(match('position-fallback', 'first'), ['first']);\n    {\n      assert.deepStrictEqual(match('position-try-options', 'flip-block'), []);\n      assert.deepStrictEqual(match('position-try-options', '--one'), ['--one']);\n      assert.deepStrictEqual(match('position-try-options', '--one, --two'), ['--one', '--two']);\n    }\n    {\n      assert.deepStrictEqual(match('position-try', 'flip-block'), []);\n      assert.deepStrictEqual(match('position-try', '--one'), ['--one']);\n      assert.deepStrictEqual(match('position-try', '--one, --two'), ['--one', '--two']);\n    }\n    {\n      injectVariableSubstitutions({\n        '--duration-and-easing': '1s linear',\n      });\n      assert.deepStrictEqual(match('animation', '1s linear --animation-name'), ['--animation-name']);\n      assert.deepStrictEqual(match('animation', '1s linear linear'), ['linear']);\n      assert.deepStrictEqual(\n          match('animation', '1s linear --first-name, 1s ease-in --second-name'), ['--first-name', '--second-name']);\n      assert.deepStrictEqual(match('animation', '1s linear'), []);\n      // Matching to variable names inside `var()` functions are fine as it is handled by variable renderer in usage.\n      assert.deepStrictEqual(\n          match('animation', 'var(--duration-and-easing) linear'), ['--duration-and-easing', 'linear']);\n      assert.deepStrictEqual(\n          match('animation', '1s linear var(--non-existent, --animation-name)'),\n          ['--non-existent', '--animation-name']);\n    }\n  });\n\n  it('parses easing functions properly', () => {\n    for (const succeed\n             of ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear(0 0%, 1 100%)',\n                 'cubic-bezier(0.3, 0.3, 0.3, 0.3)']) {\n      const {ast, match, text} =\n          matchSingleValue('animation-timing-function', succeed, new Elements.PropertyParser.BezierMatcher());\n      assert.exists(ast, succeed);\n      assert.exists(match, text);\n      assert.strictEqual(match.text, succeed);\n    }\n\n    const {ast, match, text} = matchSingleValue('border', 'ease-in', new Elements.PropertyParser.BezierMatcher());\n    assert.exists(ast, 'border');\n    assert.isNull(match, text);\n  });\n\n  it('parses strings correctly', () => {\n    function match(name: string, value: string) {\n      const ast = Elements.PropertyParser.tokenizeDeclaration(name, value);\n      assert.exists(ast);\n      const matchedResult =\n          Elements.PropertyParser.BottomUpTreeMatching.walk(ast, [new Elements.PropertyParser.StringMatcher()]);\n      assert.exists(matchedResult);\n\n      const match =\n          TreeSearch.find(ast, node => matchedResult.getMatch(node) instanceof Elements.PropertyParser.StringMatch);\n      assert.exists(match);\n    }\n    match('quotes', '\"\\'\" \"\\'\"');\n    match('content', '\"foobar\"');\n    match('--image-file-accelerometer-back', 'url(\"devtools\\:\\/\\/devtools\\/bundled\\/Images\\/accelerometer-back\\.svg\")');\n  });\n\n  it('parses shadows correctly', () => {\n    const {match, text} = matchSingleValue(\n        'box-shadow', '/*0*/3px 3px red, -1em 0 .4em /*a*/ olive /*b*/', new Elements.PropertyParser.ShadowMatcher());\n    assert.exists(match, text);\n    assert.strictEqual(match.text, '/*0*/3px 3px red, -1em 0 .4em /*a*/ olive');\n  });\n\n  it('parses fonts correctly', () => {\n    for (const fontSize of ['-.23', 'smaller', '17px', 'calc(17px + 17px)']) {\n      const {ast, match, text} = matchSingleValue('font-size', fontSize, new Elements.PropertyParser.FontMatcher());\n\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.strictEqual(match.text, fontSize);\n    }\n\n    {\n      const ast = Elements.PropertyParser.tokenizeDeclaration('font-family', '\"Gill Sans\", sans-serif');\n      assert.exists(ast);\n      const matchedResult =\n          Elements.PropertyParser.BottomUpTreeMatching.walk(ast, [new Elements.PropertyParser.FontMatcher()]);\n      assert.exists(matchedResult);\n\n      const matches =\n          TreeSearch.findAll(ast, node => matchedResult.getMatch(node) instanceof Elements.PropertyParser.FontMatch);\n      assert.deepStrictEqual(matches.map(m => matchedResult.getMatch(m)?.text), ['\"Gill Sans\"', 'sans-serif']);\n    }\n  });\n\n  it('parses grid templates correctly', () => {\n    injectVariableSubstitutions({\n      '--row': '\"a a b\"',\n      '--row-with-names': '[name1] \"a a\" [name2]',\n      '--line-name': '[name1]',\n      '--double-row': '\"a b\" \"b c\"',\n    });\n\n    {\n      const {ast, match, text} = matchSingleValue('grid', '\"a a\"', new Elements.PropertyParser.GridTemplateMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.strictEqual(match.lines.map(line => line.map(n => ast.text(n)).join(' ')).join('\\n'), '\"a a\"');\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'grid-template-areas', '\"a a a\" \"b b b\" \"c c c\"', new Elements.PropertyParser.GridTemplateMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.deepStrictEqual(\n          match.lines.map(line => line.map(n => ast.text(n)).join(' ')), ['\"a a a\"', '\"b b b\"', '\"c c c\"']);\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'grid-template', '\"a a a\" var(--row) / auto 1fr auto', new Elements.PropertyParser.GridTemplateMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.deepStrictEqual(\n          match.lines.map(line => line.map(n => ast.text(n)).join(' ')), ['\"a a a\"', 'var(--row) / auto 1fr auto']);\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'grid', '[header-top] \"a a\" var(--row-with-names) [main-top] \"b b b\" 1fr [main-bottom] / auto 1fr auto;',\n\n          new Elements.PropertyParser.GridTemplateMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.deepStrictEqual(\n          match.lines.map(line => line.map(n => ast.text(n)).join(' ')),\n          ['[header-top] \"a a\" var(--row-with-names)', '[main-top] \"b b b\" 1fr [main-bottom] / auto 1fr auto']);\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'grid', '[header-top] \"a a\" \"b b b\" var(--line-name) \"c c\" / auto 1fr auto;',\n\n          new Elements.PropertyParser.GridTemplateMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.deepStrictEqual(\n          match.lines.map(line => line.map(n => ast.text(n)).join(' ')),\n          ['[header-top] \"a a\"', '\"b b b\" var(--line-name)', '\"c c\" / auto 1fr auto']);\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'grid', '[line1] \"a a\" [line2] var(--double-row) \"b b\" / auto 1fr auto;',\n\n          new Elements.PropertyParser.GridTemplateMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.deepStrictEqual(\n          match.lines.map(line => line.map(n => ast.text(n)).join(' ')),\n          ['[line1] \"a a\" [line2]', 'var(--double-row)', '\"b b\" / auto 1fr auto']);\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'grid', '\"a a\" var(--unresolved) / auto 1fr auto;', new Elements.PropertyParser.GridTemplateMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.deepStrictEqual(\n          match.lines.map(line => line.map(n => ast.text(n)).join(' ')), ['\"a a\" var(--unresolved) / auto 1fr auto']);\n    }\n  });\n\n  it('parses light-dark correctly', () => {\n    for (const fail of ['light-dark()', 'light-dark(red)', 'light-dark(var(--foo))']) {\n      const {match, text} = matchSingleValue('color', fail, new Elements.PropertyParser.LightDarkColorMatcher());\n      assert.isNull(match, text);\n    }\n\n    for (const succeed\n             of ['light-dark(red, blue)', 'light-dark(var(--foo), red)', 'light-dark(red, var(--foo))',\n                 'light-dark(var(--foo), var(--bar))']) {\n      const {ast, match, text} =\n          matchSingleValue('color', succeed, new Elements.PropertyParser.LightDarkColorMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n\n      const [light, dark] = succeed.slice('light-dark('.length, -1).split(', ');\n      assert.lengthOf(match.light, 1);\n      assert.lengthOf(match.dark, 1);\n      assert.strictEqual(ast.text(match.light[0]), light);\n      assert.strictEqual(ast.text(match.dark[0]), dark);\n    }\n\n    // light-dark only applies to color properties\n    const {match, text} =\n        matchSingleValue('width', 'light-dark(red, blue)', new Elements.PropertyParser.LightDarkColorMatcher());\n    assert.isNull(match, text);\n  });\n});\n"]}