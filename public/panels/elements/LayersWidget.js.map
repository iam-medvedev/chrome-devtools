{"version":3,"file":"LayersWidget.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/LayersWidget.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Lit from '../../third_party/lit/lit.js';\nimport * as TreeOutline from '../../ui/components/tree_outline/tree_outline.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {ElementsPanel} from './ElementsPanel.js';\nimport layersWidgetStyles from './layersWidget.css.js';\n\nconst {render, html, Directives: {ref}} = Lit;\n\nconst UIStrings = {\n  /**\n   * @description Title of a section in the Element State Pane Widget of the Elements panel.\n   * The widget shows the layers present in the context of the currently selected node.\n   * */\n  cssLayersTitle: 'CSS layers',\n  /**\n   * @description Tooltip text in Element State Pane Widget of the Elements panel.\n   * For a button that opens a tool that shows the layers present in the current document.\n   */\n  toggleCSSLayers: 'Toggle CSS Layers view',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/LayersWidget.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface ViewInput {\n  rootLayer: Protocol.CSS.CSSLayerData;\n}\n\ninterface ViewOutput {\n  treeOutline: TreeOutline.TreeOutline.TreeOutline<string>|undefined;\n}\n\ntype View = (input: ViewInput, output: ViewOutput, target: HTMLElement) => void;\n\nconst DEFAULT_VIEW: View = (input: ViewInput, output: ViewOutput, target: HTMLElement) => {\n  const makeTreeNode = (parentId: string) => (layer: Protocol.CSS.CSSLayerData) => {\n    const subLayers = layer.subLayers;\n    const name = SDK.CSSModel.CSSModel.readableLayerName(layer.name);\n    const treeNodeData = layer.order + ': ' + name;\n    const id = parentId ? parentId + '.' + name : name;\n    if (!subLayers) {\n      return {treeNodeData, id};\n    }\n    return {\n      treeNodeData,\n      id,\n      children: async () => subLayers.sort((layer1, layer2) => layer1.order - layer2.order).map(makeTreeNode(id)),\n    };\n  };\n  const {defaultRenderer} = TreeOutline.TreeOutline;\n  const tree = [makeTreeNode('')(input.rootLayer)];\n  const data: TreeOutline.TreeOutline.TreeOutlineData<string> = {\n    defaultRenderer,\n    tree,\n  };\n  const captureTreeOutline = (e?: Element): void => {\n    output.treeOutline = e as typeof output.treeOutline;\n  };\n  const template = html`\n  <style>${layersWidgetStyles}</style>\n  <div class=\"layers-widget\">\n    <div class=\"layers-widget-title\">${UIStrings.cssLayersTitle}</div>\n    <devtools-tree-outline ${ref(captureTreeOutline)}\n                           .data=${data}></devtools-tree-outline>\n  </div>\n  `;\n  render(template, target);\n};\n\nlet layersWidgetInstance: LayersWidget;\n\nexport class LayersWidget extends UI.Widget.Widget {\n  #node: SDK.DOMModel.DOMNode|null = null;\n  #view: View;\n  #layerToReveal: string|null = null;\n\n  constructor(view: View = DEFAULT_VIEW) {\n    super({jslog: `${VisualLogging.pane('css-layers')}`});\n    this.#view = view;\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.DOMModel.DOMNode, this.#onDOMNodeChanged, this);\n    this.#onDOMNodeChanged({data: UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode)});\n  }\n\n  override wasHidden(): void {\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.DOMModel.DOMNode, this.#onDOMNodeChanged, this);\n    this.#onDOMNodeChanged({data: null});\n    super.wasHidden();\n  }\n\n  #onDOMNodeChanged(event: Common.EventTarget.EventTargetEvent<SDK.DOMModel.DOMNode|null>): void {\n    const node = event.data?.enclosingElementOrSelf();\n    if (this.#node === node) {\n      return;\n    }\n    if (this.#node) {\n      this.#node.domModel().cssModel().removeEventListener(\n          SDK.CSSModel.Events.StyleSheetChanged, this.requestUpdate, this);\n    }\n    this.#node = event.data;\n    if (this.#node) {\n      this.#node.domModel().cssModel().addEventListener(\n          SDK.CSSModel.Events.StyleSheetChanged, this.requestUpdate, this);\n    }\n    if (this.isShowing()) {\n      this.requestUpdate();\n    }\n  }\n\n  override async performUpdate(): Promise<void> {\n    if (!this.#node) {\n      return;\n    }\n\n    const rootLayer = await this.#node.domModel().cssModel().getRootLayer(this.#node.id);\n    const input = {rootLayer};\n    const output: ViewOutput = {treeOutline: undefined};\n    this.#view(input, output, this.contentElement);\n\n    if (output.treeOutline) {\n      // We only expand the first 5 user-defined layers to not make the\n      // view too overwhelming.\n      await output.treeOutline.expandRecursively(5);\n      if (this.#layerToReveal) {\n        await output.treeOutline.expandToAndSelectTreeNodeId(this.#layerToReveal);\n        this.#layerToReveal = null;\n      }\n    }\n  }\n\n  async revealLayer(layerName: string): Promise<void> {\n    if (!this.isShowing()) {\n      ElementsPanel.instance().showToolbarPane(this, ButtonProvider.instance().item());\n    }\n    this.#layerToReveal = `implicit outer layer.${layerName}`;\n    this.requestUpdate();\n    await this.updateComplete;\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): LayersWidget {\n    const {forceNew} = opts;\n    if (!layersWidgetInstance || forceNew) {\n      layersWidgetInstance = new LayersWidget();\n    }\n\n    return layersWidgetInstance;\n  }\n}\n\nlet buttonProviderInstance: ButtonProvider;\n\nexport class ButtonProvider implements UI.Toolbar.Provider {\n  private readonly button: UI.Toolbar.ToolbarToggle;\n  private constructor() {\n    this.button = new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.toggleCSSLayers), 'layers', 'layers-filled');\n    this.button.setVisible(false);\n    this.button.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, this.clicked, this);\n    this.button.element.classList.add('monospace');\n    this.button.element.setAttribute('jslog', `${VisualLogging.toggleSubpane('css-layers').track({click: true})}`);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ButtonProvider {\n    const {forceNew} = opts;\n    if (!buttonProviderInstance || forceNew) {\n      buttonProviderInstance = new ButtonProvider();\n    }\n\n    return buttonProviderInstance;\n  }\n\n  private clicked(): void {\n    const view = LayersWidget.instance();\n    ElementsPanel.instance().showToolbarPane(!view.isShowing() ? view : null, this.button);\n  }\n\n  item(): UI.Toolbar.ToolbarToggle {\n    return this.button;\n  }\n}\n"]}