{"version":3,"file":"StylesSidebarPane.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/StylesSidebarPane.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {renderElementIntoDOM} from '../../testing/DOMHelpers.js';\nimport {\n  createTarget,\n  describeWithEnvironment,\n  describeWithLocale,\n  updateHostConfig,\n} from '../../testing/EnvironmentHelpers.js';\nimport {expectCall} from '../../testing/ExpectStubCall.js';\nimport {describeWithMockConnection, setMockConnectionResponseHandler} from '../../testing/MockConnection.js';\nimport {getMatchedStyles} from '../../testing/StyleHelpers.js';\nimport * as InlineEditor from '../../ui/legacy/components/inline_editor/inline_editor.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Elements from './elements.js';\n\ndescribe('StylesSidebarPane', () => {\n  let node: SDK.DOMModel.DOMNode;\n  beforeEach(() => {\n    node = sinon.createStubInstance(SDK.DOMModel.DOMNode);\n    node.id = 1 as Protocol.DOM.NodeId;\n    UI.Context.Context.instance().setFlavor(SDK.DOMModel.DOMNode, node);\n  });\n\n  describeWithMockConnection('StylesSidebarPane', () => {\n    beforeEach(() => {\n      const target = createTarget();\n      const cssModel = target.model(SDK.CSSModel.CSSModel);\n      sinon.stub(Elements.ComputedStyleModel.ComputedStyleModel.prototype, 'cssModel').returns(cssModel);\n    });\n\n    it('unescapes CSS strings', () => {\n      assert.strictEqual(\n          Elements.StylesSidebarPane.unescapeCssString(\n              String.raw`\"I\\F1 t\\EB rn\\E2 ti\\F4 n\\E0 liz\\E6 ti\\F8 n\\2603 \\1F308  can be \\t\\r\\ic\\k\\y\"`),\n          '\"I\\xF1t\\xEBrn\\xE2ti\\xF4n\\xE0liz\\xE6ti\\xF8n\\u2603\\u{1F308} can be tricky\"');\n      assert.strictEqual(\n          Elements.StylesSidebarPane.unescapeCssString(String.raw`\"_\\DBFF_\\\\DBFF_\\\\\\DBFF_\\\\\\\\DBFF_\\\\\\\\\\DBFF_\"`),\n          '\"_\\uFFFD_\\\\DBFF_\\\\\\\\DBFF_\\\\\\\\\\\\DBFF_\\\\\\\\\\\\\\\\DBFF_\"');\n      assert.strictEqual(\n          Elements.StylesSidebarPane.unescapeCssString(String.raw`\"\\0_\\DBFF_\\DFFF_\\110000\"`),\n          '\"\\uFFFD_\\uFFFD_\\uFFFD_\\uFFFD\"', 'U+0000, lone surrogates, and values above U+10FFFF should become U+FFFD');\n      assert.strictEqual(\n          Elements.StylesSidebarPane.unescapeCssString(String.raw`\"_\\D83C\\DF08_\"`), '\"_\\uFFFD\\uFFFD_\"',\n          'surrogates should not be combined');\n      assert.strictEqual(\n          Elements.StylesSidebarPane.unescapeCssString('\"_\\\\41\\n_\\\\41\\t_\\\\41\\x20_\"'), '\"_A_A_A_\"',\n          'certain trailing whitespace characters should be consumed as part of the escape sequence');\n    });\n\n    it('escapes URL as CSS comments', () => {\n      assert.strictEqual(Elements.StylesSidebarPane.escapeUrlAsCssComment('https://abc.com/'), 'https://abc.com/');\n      assert.strictEqual(Elements.StylesSidebarPane.escapeUrlAsCssComment('https://abc.com/*/'), 'https://abc.com/*/');\n      assert.strictEqual(\n          Elements.StylesSidebarPane.escapeUrlAsCssComment('https://abc.com/*/?q=*'), 'https://abc.com/*/?q=*');\n      assert.strictEqual(\n          Elements.StylesSidebarPane.escapeUrlAsCssComment('https://abc.com/*/?q=*/'), 'https://abc.com/*/?q=*%2F');\n      assert.strictEqual(\n          Elements.StylesSidebarPane.escapeUrlAsCssComment('https://abc.com/*/?q=*/#hash'),\n          'https://abc.com/*/?q=*%2F#hash');\n    });\n\n    describe('rebuildSectionsForMatchedStyleRulesForTest', () => {\n      it('should add @position-try section', async () => {\n        const stylesSidebarPane =\n            new Elements.StylesSidebarPane.StylesSidebarPane(new Elements.ComputedStyleModel.ComputedStyleModel());\n        const matchedStyles = await getMatchedStyles({\n          cssModel: stylesSidebarPane.cssModel() as SDK.CSSModel.CSSModel,\n          node: sinon.createStubInstance(SDK.DOMModel.DOMNode),\n          positionTryRules: [{\n            name: {text: '--try-one'},\n            origin: Protocol.CSS.StyleSheetOrigin.Regular,\n            style: {\n              cssProperties: [{name: 'bottom', value: 'anchor(--anchor-name bottom)'}],\n              shorthandEntries: [],\n            },\n            active: false,\n          }],\n        });\n\n        const sectionBlocks =\n            await stylesSidebarPane.rebuildSectionsForMatchedStyleRulesForTest(matchedStyles, new Map(), new Map());\n\n        assert.lengthOf(sectionBlocks, 2);\n        assert.strictEqual(sectionBlocks[1].titleElement()?.textContent, '@position-try --try-one');\n        assert.lengthOf(sectionBlocks[1].sections, 1);\n        assert.instanceOf(sectionBlocks[1].sections[0], Elements.StylePropertiesSection.PositionTryRuleSection);\n      });\n    });\n\n    it('should add @font-palette-values section to the end', async () => {\n      const stylesSidebarPane =\n          new Elements.StylesSidebarPane.StylesSidebarPane(new Elements.ComputedStyleModel.ComputedStyleModel());\n      const matchedStyles = await getMatchedStyles({\n        cssModel: stylesSidebarPane.cssModel() as SDK.CSSModel.CSSModel,\n        node: sinon.createStubInstance(SDK.DOMModel.DOMNode),\n        fontPaletteValuesRule: {\n          fontPaletteName: {text: '--palette'},\n          origin: Protocol.CSS.StyleSheetOrigin.Regular,\n          style: {\n            cssProperties: [{name: 'font-family', value: 'Bixa'}, {name: 'override-colors', value: '0 red'}],\n            shorthandEntries: [],\n\n          },\n        },\n      });\n\n      const sectionBlocks =\n          await stylesSidebarPane.rebuildSectionsForMatchedStyleRulesForTest(matchedStyles, new Map(), new Map());\n\n      assert.lengthOf(sectionBlocks, 2);\n      assert.strictEqual(sectionBlocks[1].titleElement()?.textContent, '@font-palette-values --palette');\n      assert.lengthOf(sectionBlocks[1].sections, 1);\n      assert.instanceOf(sectionBlocks[1].sections[0], Elements.StylePropertiesSection.FontPaletteValuesRuleSection);\n    });\n\n    describe('Animation styles', () => {\n      function mockGetAnimatedComputedStyles(response: Partial<Protocol.CSS.GetAnimatedStylesForNodeResponse>) {\n        setMockConnectionResponseHandler('CSS.getAnimatedStylesForNode', () => response);\n      }\n\n      beforeEach(() => {\n        sinon.stub(Common.Linkifier.Linkifier, 'linkify').returns(Promise.resolve(document.createTextNode('link')));\n        updateHostConfig({\n          devToolsAnimationStylesInStylesTab: {\n            enabled: true,\n          },\n        });\n      });\n\n      it('should render transition & animation styles in the styles tab', async () => {\n        const stylesSidebarPane =\n            new Elements.StylesSidebarPane.StylesSidebarPane(new Elements.ComputedStyleModel.ComputedStyleModel());\n        const matchedStyles = await getMatchedStyles({\n          cssModel: stylesSidebarPane.cssModel() as SDK.CSSModel.CSSModel,\n          node: sinon.createStubInstance(SDK.DOMModel.DOMNode),\n          animationStylesPayload: [\n            {\n              name: '--animation-name',\n              style: {\n                cssProperties: [{\n                  name: 'background-color',\n                  value: 'blue',\n                }],\n                shorthandEntries: [],\n              },\n            },\n            {\n              style: {\n                cssProperties: [{\n                  name: 'color',\n                  value: 'blue',\n                }],\n                shorthandEntries: [],\n              },\n            },\n          ],\n          transitionsStylePayload: {\n            cssProperties: [{\n              name: 'color',\n              value: 'red',\n            }],\n            shorthandEntries: [],\n          },\n          inheritedAnimatedPayload: [],\n        });\n\n        const sectionBlocks =\n            await stylesSidebarPane.rebuildSectionsForMatchedStyleRulesForTest(matchedStyles, new Map(), new Map());\n        assert.lengthOf(sectionBlocks[0].sections, 3);\n        assert.strictEqual(sectionBlocks[0].sections[0].headerText(), 'transitions style');\n        assert.strictEqual(sectionBlocks[0].sections[1].headerText(), '--animation-name animation');\n        assert.strictEqual(sectionBlocks[0].sections[2].headerText(), 'animation style');\n      });\n\n      describe('should auto update animated style sections when onComputedStyleChanged called', () => {\n        describe('transition styles', () => {\n          it('should trigger re-render when there was no transition style before', async () => {\n            mockGetAnimatedComputedStyles({\n              transitionsStyle: {\n                cssProperties: [{\n                  name: 'color',\n                  value: 'red',\n                }],\n                shorthandEntries: [],\n              },\n            });\n            const node = sinon.createStubInstance(SDK.DOMModel.DOMNode);\n            node.id = 1 as Protocol.DOM.NodeId;\n\n            const stylesSidebarPane =\n                new Elements.StylesSidebarPane.StylesSidebarPane(new Elements.ComputedStyleModel.ComputedStyleModel());\n            const resetUpdateSpy = sinon.spy(stylesSidebarPane, 'scheduleResetUpdateIfNotEditingCalledForTest');\n            const matchedStyles = await getMatchedStyles({\n              cssModel: stylesSidebarPane.cssModel() as SDK.CSSModel.CSSModel,\n              node,\n              transitionsStylePayload: null,\n            });\n            stylesSidebarPane.setMatchedStylesForTest(matchedStyles);\n            const sectionBlocks =\n                await stylesSidebarPane.rebuildSectionsForMatchedStyleRulesForTest(matchedStyles, new Map(), new Map());\n            assert.lengthOf(sectionBlocks[0].sections, 0);\n\n            const handledComputedStyleChanged =\n                expectCall(sinon.stub(stylesSidebarPane, 'handledComputedStyleChangedForTest'));\n            stylesSidebarPane.onComputedStyleChanged();\n            await handledComputedStyleChanged;\n\n            sinon.assert.called(resetUpdateSpy);\n          });\n\n          it('should update value only when there was a transition style before', async () => {\n            mockGetAnimatedComputedStyles({\n              transitionsStyle: {\n                cssProperties: [{\n                  name: 'color',\n                  value: 'red',\n                }],\n                shorthandEntries: [],\n              },\n            });\n            const node = sinon.createStubInstance(SDK.DOMModel.DOMNode);\n            node.id = 1 as Protocol.DOM.NodeId;\n\n            const stylesSidebarPane =\n                new Elements.StylesSidebarPane.StylesSidebarPane(new Elements.ComputedStyleModel.ComputedStyleModel());\n            const resetUpdateSpy = sinon.spy(stylesSidebarPane, 'scheduleResetUpdateIfNotEditingCalledForTest');\n            const matchedStyles = await getMatchedStyles({\n              cssModel: stylesSidebarPane.cssModel() as SDK.CSSModel.CSSModel,\n              node,\n              transitionsStylePayload: {\n                cssProperties: [{\n                  name: 'color',\n                  value: 'blue',\n                }],\n                shorthandEntries: [],\n              },\n            });\n            stylesSidebarPane.setMatchedStylesForTest(matchedStyles);\n            const sectionBlocks =\n                await stylesSidebarPane.rebuildSectionsForMatchedStyleRulesForTest(matchedStyles, new Map(), new Map());\n            assert.lengthOf(sectionBlocks[0].sections, 1);\n            assert.include(\n                sectionBlocks[0].sections[0].propertiesTreeOutline.contentElement.textContent, 'color: blue;');\n\n            const handledComputedStyleChanged =\n                expectCall(sinon.stub(stylesSidebarPane, 'handledComputedStyleChangedForTest'));\n            stylesSidebarPane.onComputedStyleChanged();\n            await handledComputedStyleChanged;\n\n            assert.include(\n                sectionBlocks[0].sections[0].propertiesTreeOutline.contentElement.textContent, 'color: red;');\n            sinon.assert.notCalled(resetUpdateSpy);\n          });\n        });\n\n        describe('animation styles', () => {\n          it('should trigger re-render when there was no animation style before', async () => {\n            mockGetAnimatedComputedStyles({\n              animationStyles: [{\n                name: '--animation',\n                style: {\n                  cssProperties: [{\n                    name: 'color',\n                    value: 'red',\n                  }],\n                  shorthandEntries: [],\n                },\n              }],\n            });\n            const node = sinon.createStubInstance(SDK.DOMModel.DOMNode);\n            node.id = 1 as Protocol.DOM.NodeId;\n\n            const stylesSidebarPane =\n                new Elements.StylesSidebarPane.StylesSidebarPane(new Elements.ComputedStyleModel.ComputedStyleModel());\n            const resetUpdateSpy = sinon.spy(stylesSidebarPane, 'scheduleResetUpdateIfNotEditingCalledForTest');\n            const matchedStyles = await getMatchedStyles({\n              cssModel: stylesSidebarPane.cssModel() as SDK.CSSModel.CSSModel,\n              node,\n              animationStylesPayload: [],\n            });\n            stylesSidebarPane.setMatchedStylesForTest(matchedStyles);\n            const sectionBlocks =\n                await stylesSidebarPane.rebuildSectionsForMatchedStyleRulesForTest(matchedStyles, new Map(), new Map());\n            assert.lengthOf(sectionBlocks[0].sections, 0);\n\n            const handledComputedStyleChanged =\n                expectCall(sinon.stub(stylesSidebarPane, 'handledComputedStyleChangedForTest'));\n            stylesSidebarPane.onComputedStyleChanged();\n            await handledComputedStyleChanged;\n\n            sinon.assert.called(resetUpdateSpy);\n          });\n\n          it('should trigger re-render when there is no animation style after', async () => {\n            mockGetAnimatedComputedStyles({\n              animationStyles: [],\n            });\n            const node = sinon.createStubInstance(SDK.DOMModel.DOMNode);\n            node.id = 1 as Protocol.DOM.NodeId;\n\n            const stylesSidebarPane =\n                new Elements.StylesSidebarPane.StylesSidebarPane(new Elements.ComputedStyleModel.ComputedStyleModel());\n            const resetUpdateSpy = sinon.spy(stylesSidebarPane, 'scheduleResetUpdateIfNotEditingCalledForTest');\n            const matchedStyles = await getMatchedStyles({\n              cssModel: stylesSidebarPane.cssModel() as SDK.CSSModel.CSSModel,\n              node,\n              animationStylesPayload: [{\n                style: {\n                  cssProperties: [{\n                    name: 'color',\n                    value: 'blue',\n                  }],\n                  shorthandEntries: [],\n                },\n              }],\n            });\n            stylesSidebarPane.setMatchedStylesForTest(matchedStyles);\n            const sectionBlocks =\n                await stylesSidebarPane.rebuildSectionsForMatchedStyleRulesForTest(matchedStyles, new Map(), new Map());\n            assert.lengthOf(sectionBlocks[0].sections, 1);\n\n            const handledComputedStyleChanged =\n                expectCall(sinon.stub(stylesSidebarPane, 'handledComputedStyleChangedForTest'));\n            stylesSidebarPane.onComputedStyleChanged();\n            await handledComputedStyleChanged;\n\n            sinon.assert.called(resetUpdateSpy);\n          });\n\n          it('should update value only when there was the animation style before', async () => {\n            mockGetAnimatedComputedStyles({\n              animationStyles: [{\n                style: {\n                  cssProperties: [{\n                    name: 'color',\n                    value: 'red',\n                  }],\n                  shorthandEntries: [],\n                },\n              }],\n            });\n            const node = sinon.createStubInstance(SDK.DOMModel.DOMNode);\n            node.id = 1 as Protocol.DOM.NodeId;\n\n            const stylesSidebarPane =\n                new Elements.StylesSidebarPane.StylesSidebarPane(new Elements.ComputedStyleModel.ComputedStyleModel());\n            const resetUpdateSpy = sinon.spy(stylesSidebarPane, 'scheduleResetUpdateIfNotEditingCalledForTest');\n            const matchedStyles = await getMatchedStyles({\n              cssModel: stylesSidebarPane.cssModel() as SDK.CSSModel.CSSModel,\n              node,\n              animationStylesPayload: [{\n                style: {\n                  cssProperties: [{\n                    name: 'color',\n                    value: 'blue',\n                  }],\n                  shorthandEntries: [],\n                },\n              }],\n            });\n            stylesSidebarPane.setMatchedStylesForTest(matchedStyles);\n            const sectionBlocks =\n                await stylesSidebarPane.rebuildSectionsForMatchedStyleRulesForTest(matchedStyles, new Map(), new Map());\n            assert.lengthOf(sectionBlocks[0].sections, 1);\n            assert.include(\n                sectionBlocks[0].sections[0].propertiesTreeOutline.contentElement.textContent, 'color: blue;');\n\n            const handledComputedStyleChanged =\n                expectCall(sinon.stub(stylesSidebarPane, 'handledComputedStyleChangedForTest'));\n            stylesSidebarPane.onComputedStyleChanged();\n            await handledComputedStyleChanged;\n\n            assert.include(\n                sectionBlocks[0].sections[0].propertiesTreeOutline.contentElement.textContent, 'color: red;');\n            sinon.assert.notCalled(resetUpdateSpy);\n          });\n        });\n\n        describe('inherited animated styles', () => {\n          describe('transition styles', () => {\n            it('should trigger re-render when there was no inherited transition style but there is a new one now',\n               async () => {\n                 mockGetAnimatedComputedStyles({\n                   inherited: [{\n                     transitionsStyle: {\n                       cssProperties: [{\n                         name: 'color',\n                         value: 'red',\n                       }],\n                       shorthandEntries: [],\n                     },\n                   }],\n                 });\n                 const node = sinon.createStubInstance(SDK.DOMModel.DOMNode);\n                 node.id = 1 as Protocol.DOM.NodeId;\n                 node.parentNode = sinon.createStubInstance(SDK.DOMModel.DOMNode);\n\n                 const stylesSidebarPane = new Elements.StylesSidebarPane.StylesSidebarPane(\n                     new Elements.ComputedStyleModel.ComputedStyleModel());\n                 const resetUpdateSpy = sinon.spy(stylesSidebarPane, 'scheduleResetUpdateIfNotEditingCalledForTest');\n                 const matchedStyles = await getMatchedStyles({\n                   cssModel: stylesSidebarPane.cssModel() as SDK.CSSModel.CSSModel,\n                   node,\n                 });\n                 stylesSidebarPane.setMatchedStylesForTest(matchedStyles);\n                 const sectionBlocks = await stylesSidebarPane.rebuildSectionsForMatchedStyleRulesForTest(\n                     matchedStyles, new Map(), new Map());\n                 assert.lengthOf(sectionBlocks[0].sections, 0);\n\n                 const handledComputedStyleChanged =\n                     expectCall(sinon.stub(stylesSidebarPane, 'handledComputedStyleChangedForTest'));\n                 stylesSidebarPane.onComputedStyleChanged();\n                 await handledComputedStyleChanged;\n\n                 sinon.assert.called(resetUpdateSpy);\n               });\n\n            it('should not trigger re-render when there was no inherited transition style and the new one does not contain inherited property',\n               async () => {\n                 mockGetAnimatedComputedStyles({\n                   inherited: [{\n                     transitionsStyle: {\n                       cssProperties: [{\n                         name: 'background-color',\n                         value: 'red',\n                       }],\n                       shorthandEntries: [],\n                     },\n                   }],\n                 });\n                 const node = sinon.createStubInstance(SDK.DOMModel.DOMNode);\n                 node.id = 1 as Protocol.DOM.NodeId;\n                 node.parentNode = sinon.createStubInstance(SDK.DOMModel.DOMNode);\n\n                 const stylesSidebarPane = new Elements.StylesSidebarPane.StylesSidebarPane(\n                     new Elements.ComputedStyleModel.ComputedStyleModel());\n                 const resetUpdateSpy = sinon.spy(stylesSidebarPane, 'scheduleResetUpdateIfNotEditingCalledForTest');\n                 const matchedStyles = await getMatchedStyles({\n                   cssModel: stylesSidebarPane.cssModel() as SDK.CSSModel.CSSModel,\n                   node,\n                 });\n                 stylesSidebarPane.setMatchedStylesForTest(matchedStyles);\n                 const sectionBlocks = await stylesSidebarPane.rebuildSectionsForMatchedStyleRulesForTest(\n                     matchedStyles, new Map(), new Map());\n                 assert.lengthOf(sectionBlocks[0].sections, 0);\n\n                 const handledComputedStyleChanged =\n                     expectCall(sinon.stub(stylesSidebarPane, 'handledComputedStyleChangedForTest'));\n                 stylesSidebarPane.onComputedStyleChanged();\n                 await handledComputedStyleChanged;\n\n                 sinon.assert.notCalled(resetUpdateSpy);\n               });\n\n            it('should update value only when there is no new inherited transition style and the value is updated',\n               async () => {\n                 mockGetAnimatedComputedStyles({\n                   inherited: [{\n                     transitionsStyle: {\n                       cssProperties: [{\n                         name: 'color',\n                         value: 'red',\n                       }],\n                       shorthandEntries: [],\n                     },\n                   }],\n                 });\n                 const node = sinon.createStubInstance(SDK.DOMModel.DOMNode);\n                 node.id = 1 as Protocol.DOM.NodeId;\n                 node.parentNode = sinon.createStubInstance(SDK.DOMModel.DOMNode);\n\n                 const stylesSidebarPane = new Elements.StylesSidebarPane.StylesSidebarPane(\n                     new Elements.ComputedStyleModel.ComputedStyleModel());\n                 const resetUpdateSpy = sinon.spy(stylesSidebarPane, 'scheduleResetUpdateIfNotEditingCalledForTest');\n                 const matchedStyles = await getMatchedStyles({\n                   cssModel: stylesSidebarPane.cssModel() as SDK.CSSModel.CSSModel,\n                   node,\n                   inheritedPayload: [{\n                     matchedCSSRules: [],\n                   }],\n                   inheritedAnimatedPayload: [{\n                     transitionsStyle: {\n                       cssProperties: [{\n                         name: 'color',\n                         value: 'blue',\n                       }],\n                       shorthandEntries: [],\n                     },\n                   }],\n                 });\n                 stylesSidebarPane.setMatchedStylesForTest(matchedStyles);\n                 const sectionBlocks = await stylesSidebarPane.rebuildSectionsForMatchedStyleRulesForTest(\n                     matchedStyles, new Map(), new Map());\n                 assert.lengthOf(sectionBlocks[1].sections, 1);\n                 assert.include(\n                     sectionBlocks[1].sections[0].propertiesTreeOutline.contentElement.textContent, 'color: blue;');\n\n                 const handledComputedStyleChanged =\n                     expectCall(sinon.stub(stylesSidebarPane, 'handledComputedStyleChangedForTest'));\n                 stylesSidebarPane.onComputedStyleChanged();\n                 await handledComputedStyleChanged;\n\n                 assert.include(\n                     sectionBlocks[1].sections[0].propertiesTreeOutline.contentElement.textContent, 'color: red;');\n                 sinon.assert.notCalled(resetUpdateSpy);\n               });\n          });\n        });\n      });\n    });\n  });\n\n  describe('IdleCallbackManager', () => {\n    // IdleCallbackManager delegates work using requestIdleCallback, which does not generally execute requested callbacks\n    // in order. This test verifies that callbacks do happen in order even if timeouts are run out.\n    it('schedules callbacks in order', async () => {\n      // Override the default timeout with a very short one\n      class QuickIdleCallbackManager extends Elements.StylesSidebarPane.IdleCallbackManager {\n        protected override scheduleIdleCallback(_: number): void {\n          super.scheduleIdleCallback(1);\n        }\n      }\n\n      const timeout = (time: number) => new Promise<void>(resolve => setTimeout(resolve, time));\n\n      const elements: number[] = [];\n\n      const callbacks = new QuickIdleCallbackManager();\n      callbacks.schedule(() => elements.push(0));\n      callbacks.schedule(() => elements.push(1));\n      callbacks.schedule(() => elements.push(2));\n      callbacks.schedule(() => elements.push(3));\n      await timeout(10);\n      callbacks.schedule(() => elements.push(4));\n      callbacks.schedule(() => elements.push(5));\n      callbacks.schedule(() => elements.push(6));\n      callbacks.schedule(() => elements.push(7));\n      await timeout(10);\n\n      await callbacks.awaitDone();\n\n      assert.deepEqual(elements, [0, 1, 2, 3, 4, 5, 6, 7]);\n    });\n  });\n\n  describeWithLocale('CSSPropertyPrompt', () => {\n    const CSSPropertyPrompt = Elements.StylesSidebarPane.CSSPropertyPrompt;\n\n    const CSS_VARIABLES_FOR_TEST: Record<string, string> = {\n      '--rgb-color': 'rgb(0 0 0)',\n      '--wide-gamut-color': 'lch(0 0 0)',\n    };\n\n    const mockTreeItem = {\n      property: {\n        name: 'color',\n      },\n      node() {\n        return {\n          isSVGNode() {\n            return false;\n          },\n          domModel() {\n            return {\n              cssModel() {\n                return {\n                  getComputedStyle() {\n                    return new Map<string, string>();\n                  },\n                };\n              },\n            };\n          },\n        };\n      },\n      matchedStyles() {\n        return {\n          availableCSSVariables(): string[] {\n            return ['--rgb-color', '--wide-gamut-color'];\n          },\n          computeCSSVariable(_: unknown, completion: string): {value: string, declaration: null} |\n              undefined {\n                return {value: CSS_VARIABLES_FOR_TEST[completion], declaration: null};\n              },\n        };\n      },\n    } as unknown as Elements.StylePropertyTreeElement.StylePropertyTreeElement;\n\n    const noop = () => {};\n\n    describeWithEnvironment('value autocompletion', () => {\n      it('shows autocomplete item with color swatch for CSS variables with RGB color', async () => {\n        const attachedElement = document.createElement('div');\n        renderElementIntoDOM(attachedElement);\n        const cssPropertyPrompt = new CSSPropertyPrompt(mockTreeItem, false);\n\n        cssPropertyPrompt.attachAndStartEditing(attachedElement, noop);\n        const spyObj = sinon.spy(cssPropertyPrompt.suggestBoxForTest());\n        cssPropertyPrompt.setText('var(--rgb');\n        await cssPropertyPrompt.complete(true);\n\n        const colorCompletions = spyObj?.updateSuggestions.firstCall.args[1];\n        const renderedElement = colorCompletions?.[0].subtitleRenderer?.();\n        assert.instanceOf(renderedElement, InlineEditor.ColorSwatch.ColorSwatch);\n      });\n\n      it('shows autocomplete item with color swatch for CSS variables with wide gamut color', async () => {\n        const attachedElement = document.createElement('div');\n        renderElementIntoDOM(attachedElement);\n        const cssPropertyPrompt = new CSSPropertyPrompt(mockTreeItem, false);\n\n        cssPropertyPrompt.attachAndStartEditing(attachedElement, noop);\n        const spyObj = sinon.spy(cssPropertyPrompt.suggestBoxForTest());\n        cssPropertyPrompt.setText('var(--wide');\n        await cssPropertyPrompt.complete(true);\n\n        const colorCompletions = spyObj?.updateSuggestions.firstCall.args[1];\n        const renderedElement = colorCompletions?.[0].subtitleRenderer?.();\n        assert.instanceOf(renderedElement, InlineEditor.ColorSwatch.ColorSwatch);\n      });\n\n      it('shows autocomplete property names for CSS aliases', async () => {\n        const attachedElement = document.createElement('div');\n        renderElementIntoDOM(attachedElement);\n        const cssPropertyPrompt = new CSSPropertyPrompt(mockTreeItem, true);\n\n        cssPropertyPrompt.attachAndStartEditing(attachedElement, noop);\n        const spyObj = sinon.spy(cssPropertyPrompt.suggestBoxForTest());\n        cssPropertyPrompt.setText('word-wra');\n        await cssPropertyPrompt.complete(true);\n        const completions = spyObj?.updateSuggestions.firstCall.args[1];\n        assert.strictEqual(completions?.[0].text, 'word-wrap');\n        assert.strictEqual(completions?.[1].text, 'overflow-wrap');\n        assert.strictEqual(completions?.[1].subtitle, '= word-wrap');\n      });\n    });\n  });\n});\n"]}