{"version":3,"file":"InspectElementModeController.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/InspectElementModeController.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport {\n  createTarget,\n  registerNoopActions,\n  stubNoopSettings,\n} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n  setMockConnectionResponseHandler,\n} from '../../testing/MockConnection.js';\nimport {\n  setMockResourceTree,\n} from '../../testing/ResourceTreeHelpers.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Elements from './elements.js';\n\nconst NODE_ID = 1 as Protocol.DOM.NodeId;\n\ndescribeWithMockConnection('InspectElementModeController', () => {\n  let inScopeTarget: SDK.Target.Target;\n  let inScopeSubTarget: SDK.Target.Target;\n  let outOfScopeTarget: SDK.Target.Target;\n  let outOfScopeSubTarget: SDK.Target.Target;\n  let modeController: Elements.InspectElementModeController.InspectElementModeController;\n\n  function onModeToggle(target: SDK.Target.Target) {\n    const model = target.model(SDK.OverlayModel.OverlayModel);\n    return model!.once(SDK.OverlayModel.Events.INSPECT_MODE_WILL_BE_TOGGLED);\n  }\n\n  function failOnModeToggle(target: SDK.Target.Target) {\n    const model = target.model(SDK.OverlayModel.OverlayModel);\n    model!.addEventListener(\n        SDK.OverlayModel.Events.INSPECT_MODE_WILL_BE_TOGGLED,\n        () => assert.fail('Unexpected mode toggle on out of scope target'));\n  }\n\n  beforeEach(() => {\n    setMockResourceTree(false);\n    stubNoopSettings();\n    registerNoopActions(['elements.toggle-element-search']);\n    const tabTarget = createTarget({type: SDK.Target.Type.TAB});\n    inScopeTarget = createTarget({parentTarget: tabTarget});\n    inScopeSubTarget = createTarget({parentTarget: inScopeTarget});\n    outOfScopeTarget = createTarget({parentTarget: tabTarget});\n    outOfScopeSubTarget = createTarget({parentTarget: outOfScopeTarget});\n    failOnModeToggle(outOfScopeTarget);\n    failOnModeToggle(outOfScopeSubTarget);\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(inScopeTarget);\n    modeController = new Elements.InspectElementModeController.InspectElementModeController();\n    setMockConnectionResponseHandler('DOM.getDocument', () => ({root: {nodeId: NODE_ID}}));\n  });\n\n  it('synchronises mode for in scope models', async () => {\n    for (const target of SDK.TargetManager.TargetManager.instance().targets()) {\n      assert.isFalse(Boolean(target.model(SDK.OverlayModel.OverlayModel)?.inspectModeEnabled()));\n    }\n\n    modeController.toggleInspectMode();\n    await Promise.all([onModeToggle(inScopeTarget), onModeToggle(inScopeSubTarget)]);\n\n    const anotherInScopeSubTarget = createTarget({parentTarget: inScopeTarget});\n    await onModeToggle(anotherInScopeSubTarget);\n\n    const anotherOutOfScopeSubTarget = createTarget({parentTarget: inScopeTarget});\n    failOnModeToggle(anotherOutOfScopeSubTarget);\n\n    let expectToggle = false;\n    const modeToggles =\n        Promise.all([inScopeTarget, inScopeSubTarget, anotherInScopeSubTarget].map(t => onModeToggle(t).then(() => {\n          assert.isTrue(expectToggle);\n        })));\n    outOfScopeTarget.model(SDK.OverlayModel.OverlayModel)\n        ?.dispatchEventToListeners(SDK.OverlayModel.Events.EXITED_INSPECT_MODE);\n\n    await new Promise<void>(resolve => queueMicrotask(resolve));\n\n    expectToggle = true;\n    inScopeTarget.model(SDK.OverlayModel.OverlayModel)\n        ?.dispatchEventToListeners(SDK.OverlayModel.Events.EXITED_INSPECT_MODE);\n    await modeToggles;\n  });\n});\n\ndescribeWithMockConnection('InspectElementModeController panel interactions', () => {\n  let elementsPanel: sinon.SinonStubbedInstance<Elements.ElementsPanel.ElementsPanel>;\n  let node: SDK.DOMModel.DOMNode;\n  let viewManager: sinon.SinonStubbedInstance<UI.ViewManager.ViewManager>;\n\n  beforeEach(() => {\n    stubNoopSettings();\n    registerNoopActions(['elements.toggle-element-search']);\n    setMockConnectionResponseHandler('DOM.getDocument', () => ({root: {nodeId: NODE_ID}}));\n    setMockConnectionResponseHandler('DOM.pushNodeByPathToFrontend', () => ({nodeId: NODE_ID}));\n\n    viewManager = sinon.createStubInstance(UI.ViewManager.ViewManager, {\n      showView: Promise.resolve(),\n    });\n    sinon.stub(UI.ViewManager.ViewManager, 'instance').returns(viewManager);\n\n    Elements.InspectElementModeController.InspectElementModeController.instance({forceNew: true});\n    elementsPanel =\n        sinon.createStubInstance(Elements.ElementsPanel.ElementsPanel, {revealAndSelectNode: Promise.resolve()});\n    sinon.stub(Elements.ElementsPanel.ElementsPanel, 'instance').returns(elementsPanel);\n    node = sinon.createStubInstance(SDK.DOMModel.DOMNode);\n  });\n\n  it('node is selected and element panel shown when no return to panel flavor is present', async () => {\n    UI.Context.Context.instance().setFlavor(Common.ReturnToPanel.ReturnToPanelFlavor, null);\n\n    await SDK.OverlayModel.OverlayModel.inspectNodeHandler!(node);\n\n    sinon.assert.calledOnce(elementsPanel.revealAndSelectNode);\n    sinon.assert.calledWith(elementsPanel.revealAndSelectNode.firstCall, node, sinon.match({\n      showPanel: true,\n      focusNode: true,\n      highlightInOverlay: false,\n    }));\n    sinon.assert.notCalled(viewManager.showView);\n  });\n\n  it('node is selected and triggering panel is shown when return to panel flavor is present', async () => {\n    UI.Context.Context.instance().setFlavor(\n        Common.ReturnToPanel.ReturnToPanelFlavor, new Common.ReturnToPanel.ReturnToPanelFlavor('freestyler'));\n\n    await SDK.OverlayModel.OverlayModel.inspectNodeHandler!(node);\n\n    sinon.assert.calledOnce(elementsPanel.revealAndSelectNode);\n    sinon.assert.calledWith(elementsPanel.revealAndSelectNode.firstCall, node, sinon.match({\n      showPanel: false,\n      highlightInOverlay: false,\n    }));\n    sinon.assert.calledOnceWithExactly(viewManager.showView, 'freestyler', false, false);\n  });\n\n  it('elements panel is shown on second inspection if no flavor is set after the first inspection', async () => {\n    UI.Context.Context.instance().setFlavor(\n        Common.ReturnToPanel.ReturnToPanelFlavor, new Common.ReturnToPanel.ReturnToPanelFlavor('freestyler'));\n\n    await SDK.OverlayModel.OverlayModel.inspectNodeHandler!(node);\n\n    sinon.assert.calledOnce(elementsPanel.revealAndSelectNode);\n    sinon.assert.calledWith(elementsPanel.revealAndSelectNode.firstCall, node, sinon.match({\n      showPanel: false,\n      highlightInOverlay: false,\n    }));\n\n    await SDK.OverlayModel.OverlayModel.inspectNodeHandler!(node);\n\n    sinon.assert.calledTwice(elementsPanel.revealAndSelectNode);\n    sinon.assert.calledWith(elementsPanel.revealAndSelectNode.secondCall, node, sinon.match({\n      showPanel: true,\n      focusNode: true,\n      highlightInOverlay: false,\n    }));\n  });\n});\n"]}