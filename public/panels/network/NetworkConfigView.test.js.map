{"version":3,"file":"NetworkConfigView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/network/NetworkConfigView.test.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EAAC,YAAY,EAAC,MAAM,qCAAqC,CAAC;AACjE,OAAO,EAAC,0BAA0B,EAAE,gCAAgC,EAAC,MAAM,iCAAiC,CAAC;AAE7G,OAAO,KAAK,OAAO,MAAM,cAAc,CAAC;AAExC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,EAAC,eAAe,EAAC,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACpD,MAAM,SAAS,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;QACtG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QACvC,uGAAuG;QACvG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,0BAA0B,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACnD,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACtD,YAAY,EAAE,CAAC;QACf,MAAM,WAAW,GAAG,OAAO,CAAC,aAAa,EAAkD,CAAC;QAC5F,gCAAgC,CAAC,gCAAgC,EAAE,OAAO,CAAC,EAAE;YAC3E,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC7B,MAAM,EAAC,OAAO,EAAE,OAAO,EAAC,GAAG,OAAO,CAAC,aAAa,EAAkD,CAAC;YACnG,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC;YAC9B,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC;YAC9B,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;QAEH,MAAM,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;QACjF,MAAM,cAAc,GAAG,iBAAiB,CAAC,cAAc,CAAC,aAAa,CACjE,+FAA+F,CAAC,CAAC;QACrG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAC9B,MAAM,CAAC,UAAU,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAC;QAErD,MAAM,MAAM,GAAG,CAAC,KAAa,EAA2D,EAAE;YACxF,MAAM,EAAC,OAAO,EAAC,GAAG,WAAW,CAAC;YAC9B,cAAc,CAAC,aAAa,GAAG,KAAK,CAAC;YACrC,cAAc,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClD,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC;QAEF,MAAM,CAAC,SAAS,CAAC,MAAM,MAAM,CAAC,CAAC,CAAC,EAAE,EAAC,gBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;QAC5D,MAAM,CAAC,SAAS,CAAC,MAAM,MAAM,CAAC,CAAC,CAAC,EAAE,EAAC,gBAAgB,EAAE,KAAK,EAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,SAAS,CAAC,MAAM,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection, setMockConnectionResponseHandler} from '../../testing/MockConnection.js';\n\nimport * as Network from './network.js';\n\ndescribe('userAgentGroups', () => {\n  it('Chrome UAs all have placeholder for major version patching', () => {\n    const {userAgentGroups} = Network.NetworkConfigView;\n    const chromeUAs = userAgentGroups.map(g => g.values).flat().filter(v => v.value.includes(' Chrome/'));\n    assert.isAtLeast(chromeUAs.length, 10);\n    // We should not add any new UAs without the %s that gets patched via `patchUserAgentWithChromeVersion`\n    assert.isTrue(chromeUAs.every(v => v.value.includes('Chrome/%s')));\n  });\n});\n\ndescribeWithMockConnection('NetworkConfigView', () => {\n  it('supports enabling data saver emulation', async () => {\n    createTarget();\n    const saveDataSpy = Promise.withResolvers<Protocol.Emulation.SetDataSaverOverrideRequest>();\n    setMockConnectionResponseHandler('Emulation.setDataSaverOverride', request => {\n      saveDataSpy.resolve(request);\n      const {promise, resolve} = Promise.withResolvers<Protocol.Emulation.SetDataSaverOverrideRequest>();\n      saveDataSpy.promise = promise;\n      saveDataSpy.resolve = resolve;\n      return {};\n    });\n\n    const networkConfigView = Network.NetworkConfigView.NetworkConfigView.instance();\n    const saveDataSelect = networkConfigView.contentElement.querySelector(\n        'select[aria-label=\"Override the value reported by navigator.connection.saveData on the page\"]');\n    assert.exists(saveDataSelect);\n    assert.instanceOf(saveDataSelect, HTMLSelectElement);\n\n    const select = (index: number): Promise<Protocol.Emulation.SetDataSaverOverrideRequest> => {\n      const {promise} = saveDataSpy;\n      saveDataSelect.selectedIndex = index;\n      saveDataSelect.dispatchEvent(new Event('change'));\n      return promise;\n    };\n\n    assert.deepEqual(await select(1), {dataSaverEnabled: true});\n    assert.deepEqual(await select(2), {dataSaverEnabled: false});\n    assert.deepEqual(await select(0), {});\n  });\n});\n"]}