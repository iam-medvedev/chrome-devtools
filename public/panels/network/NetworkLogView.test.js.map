{"version":3,"file":"NetworkLogView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/network/NetworkLogView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport {assertNotNullOrUndefined} from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as HAR from '../../models/har/har.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport {\n  findMenuItemWithLabel,\n  getContextMenuForElement,\n  getMenu,\n  getMenuItemLabels,\n} from '../../testing/ContextMenuHelpers.js';\nimport {dispatchClickEvent, raf} from '../../testing/DOMHelpers.js';\nimport {\n  createTarget,\n  describeWithEnvironment,\n  registerNoopActions,\n  stubNoopSettings\n} from '../../testing/EnvironmentHelpers.js';\nimport {expectCalled} from '../../testing/ExpectStubCall.js';\nimport {stubFileManager} from '../../testing/FileManagerHelpers.js';\nimport {describeWithMockConnection, dispatchEvent} from '../../testing/MockConnection.js';\nimport {activate} from '../../testing/ResourceTreeHelpers.js';\nimport * as RenderCoordinator from '../../ui/components/render_coordinator/render_coordinator.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Network from './network.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\ndescribeWithMockConnection('NetworkLogView', () => {\n  let target: SDK.Target.Target;\n  let networkLogView: Network.NetworkLogView.NetworkLogView;\n  let networkLog: Logs.NetworkLog.NetworkLog;\n\n  beforeEach(() => {\n    const dummyStorage = new Common.Settings.SettingsStorage({});\n\n    for (const settingName of ['network-color-code-resource-types', 'network.group-by-frame']) {\n      Common.Settings.registerSettingExtension({\n        settingName,\n        settingType: Common.Settings.SettingType.BOOLEAN,\n        defaultValue: false,\n      });\n    }\n    Common.Settings.Settings.instance({\n      forceNew: true,\n      syncedStorage: dummyStorage,\n      globalStorage: dummyStorage,\n      localStorage: dummyStorage,\n    });\n    registerNoopActions(['network.toggle-recording', 'inspector-main.reload']);\n\n    sinon.stub(UI.ShortcutRegistry.ShortcutRegistry, 'instance').returns({\n      shortcutTitleForAction: () => {},\n      shortcutsForAction: () => [],\n    } as unknown as UI.ShortcutRegistry.ShortcutRegistry);\n    networkLog = Logs.NetworkLog.NetworkLog.instance();\n    const tabTarget = createTarget({type: SDK.Target.Type.TAB});\n    createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n    target = createTarget({parentTarget: tabTarget});\n  });\n\n  afterEach(() => {\n    if (networkLogView) {\n      networkLogView.detach();\n    }\n  });\n\n  let nextId = 0;\n  function createNetworkRequest(\n      url: string,\n      options: {requestHeaders?: SDK.NetworkRequest.NameValue[], finished?: boolean, target?: SDK.Target.Target}):\n      SDK.NetworkRequest.NetworkRequest {\n    const effectiveTarget = options.target || target;\n    const networkManager = effectiveTarget.model(SDK.NetworkManager.NetworkManager);\n    assert.exists(networkManager);\n    let request: SDK.NetworkRequest.NetworkRequest|undefined;\n    const onRequestStarted = (event: Common.EventTarget.EventTargetEvent<SDK.NetworkManager.RequestStartedEvent>) => {\n      request = event.data.request;\n    };\n    networkManager.addEventListener(SDK.NetworkManager.Events.RequestStarted, onRequestStarted);\n    dispatchEvent(\n        effectiveTarget, 'Network.requestWillBeSent',\n        {requestId: `request${++nextId}`, loaderId: 'loaderId', request: {url}} as unknown as\n            Protocol.Network.RequestWillBeSentEvent);\n    networkManager.removeEventListener(SDK.NetworkManager.Events.RequestStarted, onRequestStarted);\n    assert.exists(request);\n    request.requestMethod = 'GET';\n    if (options.requestHeaders) {\n      request.setRequestHeaders(options.requestHeaders);\n    }\n    if (options.finished) {\n      request.finished = true;\n    }\n    return request;\n  }\n\n  function createEnvironment() {\n    const filterBar = new UI.FilterBar.FilterBar('network-panel', true);\n    networkLogView = createNetworkLogView(filterBar);\n    networkLogView.markAsRoot();\n    networkLogView.show(document.body);\n    const rootNode = networkLogView.columns().dataGrid().rootNode();\n\n    return {rootNode, filterBar, networkLogView};\n  }\n\n  it('generates a valid curl command when some headers don\\'t have values', async () => {\n    const request = createNetworkRequest(urlString`http://localhost`, {\n      requestHeaders: [\n        {name: 'header-with-value', value: 'some value'},\n        {name: 'no-value-header', value: ''},\n      ],\n    });\n    const actual = await Network.NetworkLogView.NetworkLogView.generateCurlCommand(request, 'unix');\n    const expected =\n        'curl \\'http://localhost\\' \\\\\\n  -H \\'header-with-value: some value\\' \\\\\\n  -H \\'no-value-header;\\'';\n    assert.strictEqual(actual, expected);\n  });\n\n  // Note this isn't an ideal test as the internal headers are generated rather than explicitly added,\n  // are only added on HTTP/2 and HTTP/3, have a preceeding colon like `:authority` but it still tests\n  // the stripping function.\n  it('generates a valid curl command while stripping internal headers', async () => {\n    const request = createNetworkRequest(urlString`http://localhost`, {\n      requestHeaders: [\n        {name: 'authority', value: 'www.example.com'},\n      ],\n    });\n    const actual = await Network.NetworkLogView.NetworkLogView.generateCurlCommand(request, 'unix');\n    const expected = 'curl \\'http://localhost\\'';\n    assert.strictEqual(actual, expected);\n  });\n\n  it('generates a valid curl command when header values contain double quotes', async () => {\n    const request = createNetworkRequest(urlString`http://localhost`, {\n      requestHeaders: [{name: 'cookie', value: 'eva=\"Sg4=\"'}],\n    });\n    assert.strictEqual(\n        await Network.NetworkLogView.NetworkLogView.generateCurlCommand(request, 'unix'),\n        'curl \\'http://localhost\\' -b \\'eva=\\\"Sg4=\\\"\\'',\n    );\n    assert.strictEqual(\n        await Network.NetworkLogView.NetworkLogView.generateCurlCommand(request, 'win'),\n        'curl ^\"http://localhost^\" -b ^\"eva=^\\\\^\"Sg4=^\\\\^\"^\"',\n    );\n  });\n\n  it('generates a valid curl command when header values contain percentages', async () => {\n    const request = createNetworkRequest(urlString`http://localhost`, {\n      requestHeaders: [{name: 'cookie', value: 'eva=%22Sg4%3D%22'}],\n    });\n    assert.strictEqual(\n        await Network.NetworkLogView.NetworkLogView.generateCurlCommand(request, 'unix'),\n        'curl \\'http://localhost\\' -b \\'eva=%22Sg4%3D%22\\'',\n    );\n    assert.strictEqual(\n        await Network.NetworkLogView.NetworkLogView.generateCurlCommand(request, 'win'),\n        'curl ^\"http://localhost^\" -b ^\"eva=^%^22Sg4^%^3D^%^22^\"',\n    );\n  });\n\n  it('generates a valid curl command when header values contain newline and ampersand', async () => {\n    const request = createNetworkRequest(urlString`http://localhost`, {\n      requestHeaders: [{name: 'cookie', value: 'query=evil\\n\\n & cmd /c calc.exe \\n\\n'}],\n    });\n    assert.strictEqual(\n        await Network.NetworkLogView.NetworkLogView.generateCurlCommand(request, 'unix'),\n        'curl \\'http://localhost\\' -b $\\'query=evil\\\\n\\\\n & cmd /c calc.exe \\\\n\\\\n\\'',\n    );\n    assert.strictEqual(\n        await Network.NetworkLogView.NetworkLogView.generateCurlCommand(request, 'win'),\n        'curl ^\\\"http://localhost^\\\" -b ^\\\"query=evil^\\n\\n^\\n\\n ^& cmd /c calc.exe ^\\n\\n^\\n\\n^\\\"',\n    );\n  });\n\n  const tests = (inScope: boolean) => () => {\n    beforeEach(() => {\n      networkLogView = createNetworkLogView();\n      SDK.TargetManager.TargetManager.instance().setScopeTarget(inScope ? target : null);\n    });\n\n    it('adds dividers on main frame load events', async () => {\n      const addEventDividers = sinon.spy(networkLogView.columns(), 'addEventDividers');\n\n      networkLogView.setRecording(true);\n\n      const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n      assert.exists(resourceTreeModel);\n      resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.Load, {resourceTreeModel, loadTime: 5});\n      resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.DOMContentLoaded, 6);\n      if (inScope) {\n        assert.isTrue(addEventDividers.calledTwice);\n        assert.isTrue(addEventDividers.getCall(0).calledWith([5], 'network-load-divider'));\n        assert.isTrue(addEventDividers.getCall(1).calledWith([6], 'network-dcl-divider'));\n      } else {\n        assert.isFalse(addEventDividers.called);\n      }\n    });\n\n    it('can export all as HAR', async () => {\n      SDK.TargetManager.TargetManager.instance().setScopeTarget(inScope ? target : null);\n      const harWriterWrite = sinon.stub(HAR.Writer.Writer, 'write').resolves();\n      const URL_HOST = 'example.com';\n      target.setInspectedURL(urlString`${`http://${URL_HOST}/foo`}`);\n      const fileManager = stubFileManager();\n\n      const FINISHED_REQUEST_1 = createNetworkRequest('http://example.com/', {finished: true});\n      const FINISHED_REQUEST_2 = createNetworkRequest('http://example.com/favicon.ico', {finished: true});\n      const UNFINISHED_REQUEST = createNetworkRequest('http://example.com/background.bmp', {finished: false});\n      sinon.stub(Logs.NetworkLog.NetworkLog.instance(), 'requests').returns([\n        FINISHED_REQUEST_1,\n        FINISHED_REQUEST_2,\n        UNFINISHED_REQUEST,\n      ]);\n      await networkLogView.exportAll({sanitize: false});\n\n      if (inScope) {\n        assert.isTrue(\n            harWriterWrite.calledOnceWith(sinon.match.any, [FINISHED_REQUEST_1, FINISHED_REQUEST_2], sinon.match.any));\n        assert.isTrue(fileManager.save.calledOnce);\n        assert.isTrue(fileManager.close.calledOnce);\n      } else {\n        assert.isFalse(harWriterWrite.called);\n        assert.isFalse(fileManager.save.called);\n        assert.isFalse(fileManager.close.called);\n      }\n    });\n\n    it('can import and filter from HAR', async () => {\n      const URL_1 = urlString`http://example.com/`;\n      const URL_2 = urlString`http://example.com/favicon.ico`;\n      function makeHarEntry(url: Platform.DevToolsPath.UrlString) {\n        return {\n          request: {method: 'GET', url, headersSize: -1, bodySize: 0},\n          response: {status: 0, content: {size: 0, mimeType: 'x-unknown'}, headersSize: -1, bodySize: -1},\n          startedDateTime: null,\n          time: null,\n          timings: {blocked: null, dns: -1, ssl: -1, connect: -1, send: 0, wait: 0, receive: 0},\n        };\n      }\n      const har = {\n        log: {\n          version: '1.2',\n          creator: {name: 'WebInspector', version: '537.36'},\n          entries: [makeHarEntry(URL_1), makeHarEntry(URL_2)],\n        },\n      };\n      networkLogView.markAsRoot();\n      networkLogView.show(document.body);\n      const blob = new Blob([JSON.stringify(har)], {type: 'text/plain'});\n      const file = new File([blob], 'log.har');\n      await networkLogView.onLoadFromFile(file);\n      await RenderCoordinator.done({waitForWork: true});\n\n      const rootNode = networkLogView.columns().dataGrid().rootNode();\n      assert.deepEqual(\n          rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url()), [URL_1, URL_2]);\n\n      networkLogView.setTextFilterValue('favicon');\n      assert.deepEqual(\n          rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url()), [URL_2]);\n    });\n\n    it('shows summary toolbar with content', () => {\n      target.setInspectedURL(urlString`http://example.com/`);\n      const request = createNetworkRequest('http://example.com/', {finished: true});\n      request.endTime = 0.669414;\n      request.setIssueTime(0.435136, 0.435136);\n      request.setResourceType(Common.ResourceType.resourceTypes.Document);\n\n      networkLogView.setRecording(true);\n      const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n      assert.exists(resourceTreeModel);\n      resourceTreeModel.dispatchEventToListeners(\n          SDK.ResourceTreeModel.Events.Load, {resourceTreeModel, loadTime: 0.686191});\n      resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.DOMContentLoaded, 0.683709);\n      networkLogView.markAsRoot();\n      networkLogView.show(document.body);\n\n      const toolbar = networkLogView.summaryToolbar();\n      const textElements = toolbar.querySelectorAll('.toolbar-text');\n      assert.exists(textElements);\n      const textContents = [...textElements].map(item => item.textContent);\n      if (inScope) {\n        assert.deepEqual(textContents, [\n          '1 requests',\n          '0\\u00a0B transferred',\n          '0\\u00a0B resources',\n          'Finish: 234\\u00a0ms',\n          'DOMContentLoaded: 249\\u00a0ms',\n          'Load: 251\\u00a0ms',\n        ]);\n      } else {\n        assert.lengthOf(textElements, 0);\n      }\n    });\n  };\n  describe('in scope', tests(true));\n  describe('out of scope', tests(false));\n\n  const handlesSwitchingScope = (preserveLog: boolean) => async () => {\n    Common.Settings.Settings.instance().moduleSetting('network-log.preserve-log').set(preserveLog);\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(target);\n    const anotherTarget = createTarget();\n    const networkManager = target.model(SDK.NetworkManager.NetworkManager);\n    assert.exists(networkManager);\n    const request1 = createNetworkRequest('url1', {target});\n    const request2 = createNetworkRequest('url2', {target});\n    const request3 = createNetworkRequest('url3', {target: anotherTarget});\n    networkLogView = createNetworkLogView();\n    networkLogView.markAsRoot();\n    networkLogView.show(document.body);\n    await RenderCoordinator.done();\n\n    const rootNode = networkLogView.columns().dataGrid().rootNode();\n    assert.deepEqual(\n        rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()), [request1, request2]);\n\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(anotherTarget);\n    await RenderCoordinator.done();\n    assert.deepEqual(\n        rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()),\n        preserveLog ? [request1, request2, request3] : [request3]);\n  };\n\n  it('replaces requests when switching scope with preserve log off', handlesSwitchingScope(false));\n  it('appends requests when switching scope with preserve log on', handlesSwitchingScope(true));\n\n  it('appends requests on prerender activation with preserve log on', async () => {\n    Common.Settings.Settings.instance().moduleSetting('network-log.preserve-log').set(true);\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(target);\n    const anotherTarget = createTarget();\n    const networkManager = target.model(SDK.NetworkManager.NetworkManager);\n    assert.exists(networkManager);\n    const request1 = createNetworkRequest('url1', {target});\n    const request2 = createNetworkRequest('url2', {target});\n    const request3 = createNetworkRequest('url3', {target: anotherTarget});\n    networkLogView = createNetworkLogView();\n    networkLogView.markAsRoot();\n    networkLogView.show(document.body);\n    await RenderCoordinator.done();\n\n    const rootNode = networkLogView.columns().dataGrid().rootNode();\n    assert.deepEqual(\n        rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()), [request1, request2]);\n\n    activate(target);\n    await RenderCoordinator.done();\n    assert.deepEqual(\n        rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()),\n        [request1, request2, request3]);\n  });\n\n  it('hide Chrome extension requests from checkbox', async () => {\n    createNetworkRequest('chrome-extension://url1', {target});\n    createNetworkRequest('url2', {target});\n    let rootNode;\n    let filterBar;\n    ({rootNode, filterBar, networkLogView} = createEnvironment());\n    const hideExtCheckbox = getCheckbox(filterBar, 'Hide \\'chrome-extension://\\' URLs');\n\n    assert.deepEqual(\n        rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url()),\n        [urlString`chrome-extension://url1`, urlString`url2`]);\n\n    clickCheckbox(hideExtCheckbox);\n    assert.deepEqual(\n        rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url()), [urlString`url2`]);\n  });\n\n  it('can hide Chrome extension requests from dropdown', async () => {\n    Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.NETWORK_PANEL_FILTER_BAR_REDESIGN);\n    createNetworkRequest('chrome-extension://url1', {target});\n    createNetworkRequest('url2', {target});\n    let rootNode;\n    let filterBar;\n    ({rootNode, filterBar, networkLogView} = createEnvironment());\n\n    assert.deepEqual(\n        rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url()),\n        [urlString`chrome-extension://url1`, urlString`url2`]);\n\n    const dropdown = await getMoreTypesDropdown(filterBar);\n    if (!dropdown) {\n      return;\n    }\n    let softMenu = getMenu(() => dropdown.click());\n    let hideExtensionURL = getDropdownItem(softMenu, 'Hide extension URLs');\n    assert.isFalse(hideExtensionURL.buildDescriptor().checked);\n    softMenu.invokeHandler(hideExtensionURL.id());\n    softMenu.discard();\n\n    softMenu = getMenu(() => dropdown.click());\n    hideExtensionURL = getDropdownItem(softMenu, 'Hide extension URLs');\n    assert.isTrue(hideExtensionURL.buildDescriptor().checked);\n\n    assert.deepEqual(\n        rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url()), [urlString`url2`]);\n\n    softMenu.discard();\n  });\n\n  it('displays correct count for more filters', async () => {\n    Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.NETWORK_PANEL_FILTER_BAR_REDESIGN);\n    let filterBar;\n    ({filterBar, networkLogView} = createEnvironment());\n    const dropdown = await getMoreTypesDropdown(filterBar);\n    if (!dropdown) {\n      return;\n    }\n\n    assert.strictEqual(getMoreFiltersActiveCount(filterBar), '0');\n    assert.isTrue(getCountAdorner(filterBar)?.classList.contains('hidden'));\n\n    const softMenu = getMenu(() => dropdown.click());\n    await selectMoreFiltersOption(softMenu, 'Hide extension URLs');\n\n    assert.strictEqual(getMoreFiltersActiveCount(filterBar), '1');\n    assert.isFalse(getCountAdorner(filterBar)?.classList.contains('hidden'));\n\n    softMenu.discard();\n  });\n\n  it('can filter requests with blocked response cookies from checkbox', async () => {\n    const request1 = createNetworkRequest('url1', {target});\n    request1.blockedResponseCookies = () => [{\n      blockedReasons: [Protocol.Network.SetCookieBlockedReason.SameSiteNoneInsecure],\n      cookie: null,\n      cookieLine: 'foo=bar; SameSite=None',\n    }];\n    createNetworkRequest('url2', {target});\n    let rootNode;\n    let filterBar;\n    ({rootNode, filterBar, networkLogView} = createEnvironment());\n    const blockedCookiesCheckbox = getCheckbox(filterBar, 'Show only requests with blocked response cookies');\n    clickCheckbox(blockedCookiesCheckbox);\n    assert.deepEqual(rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url()), [\n      urlString`url1`,\n    ]);\n  });\n\n  it('can filter requests with blocked response cookies from dropdown', async () => {\n    Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.NETWORK_PANEL_FILTER_BAR_REDESIGN);\n\n    const request1 = createNetworkRequest('url1', {target});\n    request1.blockedResponseCookies = () => [{\n      blockedReasons: [Protocol.Network.SetCookieBlockedReason.SameSiteNoneInsecure],\n      cookie: null,\n      cookieLine: 'foo=bar; SameSite=None',\n    }];\n    createNetworkRequest('url2', {target});\n    let rootNode;\n    let filterBar;\n    ({rootNode, filterBar, networkLogView} = createEnvironment());\n\n    assert.deepEqual(\n        rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url()),\n        [urlString`url1`, urlString`url2`]);\n\n    const dropdown = await getMoreTypesDropdown(filterBar);\n    if (!dropdown) {\n      return;\n    }\n    let softMenu = getMenu(() => dropdown.click());\n    let blockedResponseCookies = getDropdownItem(softMenu, 'Blocked response cookies');\n    assert.isFalse(blockedResponseCookies.buildDescriptor().checked);\n    softMenu.invokeHandler(blockedResponseCookies.id());\n    softMenu.discard();\n\n    softMenu = getMenu(() => dropdown.click());\n    blockedResponseCookies = getDropdownItem(softMenu, 'Blocked response cookies');\n    assert.isTrue(blockedResponseCookies.buildDescriptor().checked);\n\n    assert.deepEqual(rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url()), [\n      urlString`url1`,\n    ]);\n\n    softMenu.discard();\n  });\n\n  it('lists selected options in more filters tooltip', async () => {\n    Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.NETWORK_PANEL_FILTER_BAR_REDESIGN);\n    let filterBar;\n    ({filterBar, networkLogView} = createEnvironment());\n\n    const dropdown = await getMoreTypesDropdown(filterBar);\n    assert.exists(dropdown);\n\n    assert.strictEqual(dropdown.title, 'Show only/hide requests');\n\n    const softMenu = getMenu(() => dropdown.click());\n    await selectMoreFiltersOption(softMenu, 'Blocked response cookies');\n    await selectMoreFiltersOption(softMenu, 'Hide extension URLs');\n\n    assert.strictEqual(dropdown.title, 'Hide extension URLs, Blocked response cookies');\n\n    softMenu.discard();\n  });\n\n  it('updates tooltip to default when more filters option deselected', async () => {\n    Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.NETWORK_PANEL_FILTER_BAR_REDESIGN);\n    let filterBar;\n    ({filterBar, networkLogView} = createEnvironment());\n\n    const dropdown = await getMoreTypesDropdown(filterBar);\n    assert.exists(dropdown);\n\n    assert.strictEqual(dropdown.title, 'Show only/hide requests');\n\n    const softMenu = getMenu(() => dropdown.click());\n    await selectMoreFiltersOption(softMenu, 'Blocked response cookies');\n\n    assert.strictEqual(dropdown.title, 'Blocked response cookies');\n\n    await selectMoreFiltersOption(softMenu, 'Blocked response cookies');\n\n    assert.strictEqual(dropdown.title, 'Show only/hide requests');\n\n    softMenu.discard();\n  });\n\n  it('can remove requests', async () => {\n    networkLogView = createNetworkLogView();\n    const request = createNetworkRequest('url1', {target});\n    networkLogView.markAsRoot();\n    networkLogView.show(document.body);\n\n    const rootNode = networkLogView.columns().dataGrid().rootNode();\n    assert.lengthOf(rootNode.children, 1);\n\n    networkLog.dispatchEventToListeners(Logs.NetworkLog.Events.RequestRemoved, {request});\n    assert.lengthOf(rootNode.children, 0);\n  });\n\n  it('correctly shows/hides \"Copy all as HAR (with sensitive data)\" menu item', async () => {\n    const networkShowOptionsToGenerateHarWithSensitiveDataSetting = Common.Settings.Settings.instance().createSetting(\n        'network.show-options-to-generate-har-with-sensitive-data', false);\n    createNetworkRequest('url1', {target});\n    networkLogView = createNetworkLogView(new UI.FilterBar.FilterBar('network-panel', true));\n    networkLogView.markAsRoot();\n    networkLogView.show(document.body);\n    networkLogView.columns().dataGrid().rootNode().children[0].select();\n    const {element} = networkLogView.columns().dataGrid();\n\n    {\n      // Setting is disabled (default), menu item must be hidden.\n      networkShowOptionsToGenerateHarWithSensitiveDataSetting.set(false);\n      const contextMenu = getContextMenuForElement(element);\n      const clipboardSection = contextMenu.clipboardSection();\n      const copyMenu = findMenuItemWithLabel(clipboardSection, 'Copy') as UI.ContextMenu.SubMenu;\n      assert.isUndefined(findMenuItemWithLabel(copyMenu.footerSection(), 'Copy all as HAR (with sensitive data)'));\n    }\n\n    {\n      // Setting is enabled, menu item must be shown.\n      networkShowOptionsToGenerateHarWithSensitiveDataSetting.set(true);\n      const contextMenu = getContextMenuForElement(element);\n      const clipboardSection = contextMenu.clipboardSection();\n      const copyMenu = findMenuItemWithLabel(clipboardSection, 'Copy') as UI.ContextMenu.SubMenu;\n      assert.isDefined(findMenuItemWithLabel(copyMenu.footerSection(), 'Copy all as HAR (with sensitive data)'));\n    }\n  });\n\n  it('correctly shows and hides waterfall column', async () => {\n    const columnSettings = Common.Settings.Settings.instance().createSetting('network-log-columns', {});\n    columnSettings.set({\n      waterfall: {visible: false, title: 'waterfall'},\n    });\n    networkLogView = createNetworkLogView();\n    let columns = networkLogView.columns();\n    let networkColumnWidget = columns.dataGrid().asWidget().parentWidget();\n    assert.instanceOf(networkColumnWidget, UI.SplitWidget.SplitWidget);\n    assert.strictEqual((networkColumnWidget).showMode(), UI.SplitWidget.ShowMode.ONLY_MAIN);\n\n    columnSettings.set({\n      waterfall: {visible: true, title: 'waterfall'},\n    });\n    networkLogView = createNetworkLogView();\n    columns = networkLogView.columns();\n    columns.switchViewMode(true);\n    networkColumnWidget = columns.dataGrid().asWidget().parentWidget();\n    assert.instanceOf(networkColumnWidget, UI.SplitWidget.SplitWidget);\n    assert.strictEqual((networkColumnWidget).showMode(), UI.SplitWidget.ShowMode.BOTH);\n  });\n\n  function createOverrideRequests() {\n    const urlNotOverridden = urlString`url-not-overridden`;\n    const urlHeaderOverridden = urlString`url-header-overridden`;\n    const urlContentOverridden = urlString`url-content-overridden`;\n    const urlHeaderAndContentOverridden = urlString`url-header-und-content-overridden`;\n\n    createNetworkRequest(urlNotOverridden, {target});\n    const r2 = createNetworkRequest(urlHeaderOverridden, {target});\n    const r3 = createNetworkRequest(urlContentOverridden, {target});\n    const r4 = createNetworkRequest(urlHeaderAndContentOverridden, {target});\n\n    // set up overrides\n    r2.originalResponseHeaders = [{name: 'content-type', value: 'x'}];\n    r2.responseHeaders = [{name: 'content-type', value: 'overriden'}];\n    r3.hasOverriddenContent = true;\n    r4.originalResponseHeaders = [{name: 'age', value: 'x'}];\n    r4.responseHeaders = [{name: 'age', value: 'overriden'}];\n    r4.hasOverriddenContent = true;\n\n    return {urlNotOverridden, urlHeaderOverridden, urlContentOverridden, urlHeaderAndContentOverridden};\n  }\n\n  it('can apply filter - has-overrides:yes', async () => {\n    const {urlHeaderOverridden, urlContentOverridden, urlHeaderAndContentOverridden} = createOverrideRequests();\n\n    const filterBar = new UI.FilterBar.FilterBar('network-panel', true);\n    networkLogView = createNetworkLogView(filterBar);\n    networkLogView.setTextFilterValue('has-overrides:yes');\n\n    networkLogView.markAsRoot();\n    networkLogView.show(document.body);\n    const rootNode = networkLogView.columns().dataGrid().rootNode();\n\n    assert.deepEqual(rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url()), [\n      urlHeaderOverridden,\n      urlContentOverridden,\n      urlHeaderAndContentOverridden,\n    ]);\n  });\n\n  it('can apply filter - has-overrides:no', async () => {\n    const {urlNotOverridden} = createOverrideRequests();\n\n    const filterBar = new UI.FilterBar.FilterBar('network-panel', true);\n    networkLogView = createNetworkLogView(filterBar);\n    networkLogView.setTextFilterValue('has-overrides:no');\n\n    networkLogView.markAsRoot();\n    networkLogView.show(document.body);\n    const rootNode = networkLogView.columns().dataGrid().rootNode();\n\n    assert.deepEqual(rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url()), [\n      urlNotOverridden,\n    ]);\n  });\n\n  it('can apply filter - has-overrides:headers', async () => {\n    const {urlHeaderOverridden, urlHeaderAndContentOverridden} = createOverrideRequests();\n\n    const filterBar = new UI.FilterBar.FilterBar('network-panel', true);\n    networkLogView = createNetworkLogView(filterBar);\n    networkLogView.setTextFilterValue('has-overrides:headers');\n\n    networkLogView.markAsRoot();\n    networkLogView.show(document.body);\n    const rootNode = networkLogView.columns().dataGrid().rootNode();\n\n    assert.deepEqual(rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url()), [\n      urlHeaderOverridden,\n      urlHeaderAndContentOverridden,\n    ]);\n  });\n\n  it('can apply filter - has-overrides:content', async () => {\n    const {urlContentOverridden, urlHeaderAndContentOverridden} = createOverrideRequests();\n\n    const filterBar = new UI.FilterBar.FilterBar('network-panel', true);\n    networkLogView = createNetworkLogView(filterBar);\n    networkLogView.setTextFilterValue('has-overrides:content');\n\n    networkLogView.markAsRoot();\n    networkLogView.show(document.body);\n    const rootNode = networkLogView.columns().dataGrid().rootNode();\n\n    assert.deepEqual(rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url()), [\n      urlContentOverridden,\n      urlHeaderAndContentOverridden,\n    ]);\n  });\n\n  it('can apply filter - has-overrides:tent', async () => {\n    const {urlHeaderAndContentOverridden, urlContentOverridden} = createOverrideRequests();\n\n    const filterBar = new UI.FilterBar.FilterBar('network-panel', true);\n    networkLogView = createNetworkLogView(filterBar);\n    networkLogView.setTextFilterValue('has-overrides:tent');  // partial text\n\n    networkLogView.markAsRoot();\n    networkLogView.show(document.body);\n    const rootNode = networkLogView.columns().dataGrid().rootNode();\n\n    assert.deepEqual(rootNode.children.map(n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url()), [\n      urlContentOverridden,\n      urlHeaderAndContentOverridden,\n    ]);\n  });\n\n  it('filters localized resource categories', async () => {\n    // \"simulate\" other locale by stubbing out resource categories with a different text\n    sinon.stub(Common.ResourceType.resourceCategories.Document, 'title')\n        .returns(i18n.i18n.lockedString('<localized document>'));\n    sinon.stub(Common.ResourceType.resourceCategories.XHR, 'title').returns(i18n.i18n.lockedString('<localized xhr>'));\n\n    const documentRequest = createNetworkRequest('urlDocument', {finished: true});\n    documentRequest.setResourceType(Common.ResourceType.resourceTypes.Document);\n    const fetchRequest = createNetworkRequest('urlFetch', {finished: true});\n    fetchRequest.setResourceType(Common.ResourceType.resourceTypes.Fetch);\n\n    const filterBar = new UI.FilterBar.FilterBar('network-panel', true);\n    networkLogView = createNetworkLogView(filterBar);\n\n    networkLogView.markAsRoot();\n    networkLogView.show(document.body);\n    const rootNode = networkLogView.columns().dataGrid().rootNode();\n    const shownRequestUrls = () => rootNode.children.map(\n        n => (n as Network.NetworkDataGridNode.NetworkNode).request()?.url() as string | undefined);\n\n    const setting = Common.Settings.Settings.instance().createSetting('network-resource-type-filters', {});\n    setting.set({all: true});\n    assert.deepEqual(shownRequestUrls(), ['urlDocument', 'urlFetch']);\n\n    setting.set({[Common.ResourceType.resourceCategories.Document.name]: true});\n    assert.deepEqual(shownRequestUrls(), ['urlDocument']);\n\n    setting.set({[Common.ResourceType.resourceCategories.XHR.name]: true});\n    assert.deepEqual(shownRequestUrls(), ['urlFetch']);\n  });\n\n  it('\"Copy all\" commands respects filters', async () => {\n    createOverrideRequests();\n\n    const filterBar = new UI.FilterBar.FilterBar('network-panel', true);\n    networkLogView = createNetworkLogView(filterBar);\n    networkLogView.markAsRoot();\n    networkLogView.show(document.body);\n    const copyText = sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'copyText').resolves();\n\n    // Set network filter\n    networkLogView.setTextFilterValue('has-overrides:headers');\n\n    // Get DataGrid\n    const dataGrid = networkLogView.columns().dataGrid().element;\n    assert.isDefined(dataGrid);\n    // Select first element\n    networkLogView.columns().dataGrid().rootNode().children[0].select();\n    // Get context menu, clipboard section\n    const contextMenu = getContextMenuForElement(dataGrid);\n    const clipboardSection = contextMenu.clipboardSection();\n    // Assert that there is only one entry (for 'Copy') in the clipboard section\n    assert.deepEqual(['Copy'], getMenuItemLabels(clipboardSection));\n    const copyItem = clipboardSection.items[0];\n    // Use the 'Copy' sub-menu, get menu items from the footer section\n    const footerSection = (copyItem as UI.ContextMenu.SubMenu).footerSection();\n\n    const copyAllURLs = findMenuItemWithLabel(footerSection, 'Copy all listed URLs');\n    assert.isDefined(copyAllURLs);\n    contextMenu.invokeHandler(copyAllURLs.id());\n    await expectCalled(copyText);\n    assert.strictEqual(copyText.callCount, 1);\n    assert.deepEqual(copyText.lastCall.args, [`url-header-overridden\nurl-header-und-content-overridden`]);\n    copyText.resetHistory();\n\n    const copyAllCurlComnmands = findMenuItemWithLabel(\n        footerSection, Host.Platform.isWin() ? 'Copy all listed as cURL (bash)' : 'Copy all listed as cURL');\n    assert.isDefined(copyAllCurlComnmands);\n    contextMenu.invokeHandler(copyAllCurlComnmands.id());\n    await expectCalled(copyText);\n    assert.strictEqual(copyText.callCount, 1);\n    assert.deepEqual(copyText.lastCall.args, [`curl 'url-header-overridden' ;\ncurl 'url-header-und-content-overridden'`]);\n    copyText.resetHistory();\n\n    const copyAllFetchCall = findMenuItemWithLabel(footerSection, 'Copy all listed as fetch');\n    assert.isDefined(copyAllFetchCall);\n    contextMenu.invokeHandler(copyAllFetchCall.id());\n    await expectCalled(copyText);\n    assert.strictEqual(copyText.callCount, 1);\n    assert.deepEqual(copyText.lastCall.args, [`fetch(\"url-header-overridden\", {\n  \"body\": null,\n  \"method\": \"GET\",\n  \"mode\": \"cors\",\n  \"credentials\": \"omit\"\n}); ;\nfetch(\"url-header-und-content-overridden\", {\n  \"body\": null,\n  \"method\": \"GET\",\n  \"mode\": \"cors\",\n  \"credentials\": \"omit\"\n});`]);\n    copyText.resetHistory();\n\n    const copyAllPowerShell = findMenuItemWithLabel(footerSection, 'Copy all listed as PowerShell');\n    assert.isDefined(copyAllPowerShell);\n    contextMenu.invokeHandler(copyAllPowerShell.id());\n    await expectCalled(copyText);\n    assert.strictEqual(copyText.callCount, 1);\n    assert.deepEqual(copyText.lastCall.args, [`Invoke-WebRequest -UseBasicParsing -Uri \"url-header-overridden\";\\r\nInvoke-WebRequest -UseBasicParsing -Uri \"url-header-und-content-overridden\"`]);\n    // Clear network filter\n    networkLogView.setTextFilterValue('');\n    copyText.resetHistory();\n\n    contextMenu.invokeHandler(copyAllURLs.id());\n    await expectCalled(copyText);\n    assert.strictEqual(copyText.callCount, 1);\n    assert.deepEqual(copyText.lastCall.args, [`url-not-overridden\nurl-header-overridden\nurl-content-overridden\nurl-header-und-content-overridden`]);\n    copyText.resetHistory();\n\n    contextMenu.invokeHandler(copyAllCurlComnmands.id());\n    await expectCalled(copyText);\n    assert.strictEqual(copyText.callCount, 1);\n    assert.deepEqual(copyText.lastCall.args, [`curl 'url-not-overridden' ;\ncurl 'url-header-overridden' ;\ncurl 'url-content-overridden' ;\ncurl 'url-header-und-content-overridden'`]);\n    copyText.resetHistory();\n\n    contextMenu.invokeHandler(copyAllFetchCall.id());\n    await expectCalled(copyText);\n    assert.strictEqual(copyText.callCount, 1);\n    assert.deepEqual(copyText.lastCall.args, [`fetch(\"url-not-overridden\", {\n  \"body\": null,\n  \"method\": \"GET\",\n  \"mode\": \"cors\",\n  \"credentials\": \"omit\"\n}); ;\nfetch(\"url-header-overridden\", {\n  \"body\": null,\n  \"method\": \"GET\",\n  \"mode\": \"cors\",\n  \"credentials\": \"omit\"\n}); ;\nfetch(\"url-content-overridden\", {\n  \"body\": null,\n  \"method\": \"GET\",\n  \"mode\": \"cors\",\n  \"credentials\": \"omit\"\n}); ;\nfetch(\"url-header-und-content-overridden\", {\n  \"body\": null,\n  \"method\": \"GET\",\n  \"mode\": \"cors\",\n  \"credentials\": \"omit\"\n});`]);\n    copyText.resetHistory();\n\n    contextMenu.invokeHandler(copyAllPowerShell.id());\n    await expectCalled(copyText);\n    assert.strictEqual(copyText.callCount, 1);\n    assert.deepEqual(copyText.lastCall.args, [`Invoke-WebRequest -UseBasicParsing -Uri \"url-not-overridden\";\\r\nInvoke-WebRequest -UseBasicParsing -Uri \"url-header-overridden\";\\r\nInvoke-WebRequest -UseBasicParsing -Uri \"url-content-overridden\";\\r\nInvoke-WebRequest -UseBasicParsing -Uri \"url-header-und-content-overridden\"`]);\n    copyText.resetHistory();\n  });\n\n  it('skips unknown columns without title in persistence setting', async () => {\n    const columnSettings = Common.Settings.Settings.instance().createSetting('network-log-columns', {});\n    columnSettings.set({\n      '--this-does-not-exist-for-sure': {visible: false},\n    });\n    networkLogView = createNetworkLogView();\n    const columns = networkLogView.columns().dataGrid().columns;\n    assert.notExists(columns['--this-does-not-exist-for-sure']);\n  });\n\n  it('treats unknown columns with title in persistence setting as custom header', async () => {\n    const columnSettings = Common.Settings.Settings.instance().createSetting('network-log-columns', {});\n    columnSettings.set({\n      'custom-header-for-test': {visible: false, title: 'Custom-Header'},\n    });\n    networkLogView = createNetworkLogView();\n    const dataGrid = networkLogView.columns().dataGrid();\n    const columns = dataGrid.columns;\n    assert.exists(columns['custom-header-for-test']);\n\n    const contextMenuShow = sinon.stub(UI.ContextMenu.ContextMenu.prototype, 'show').resolves();\n    const header = dataGrid.element.querySelector('thead');\n    const event = new MouseEvent('contextmenu');\n    sinon.stub(event, 'target').value(header);\n    dataGrid.element.dispatchEvent(event);\n\n    assert.isTrue(contextMenuShow.calledOnce);\n    const responseHeadersSubMenu = contextMenuShow.thisValues[0].footerSection().items.find(\n        (item: UI.ContextMenu.Item) => item.buildDescriptor().label === 'Response Headers');\n    assert.exists(responseHeadersSubMenu);\n    assert.instanceOf(responseHeadersSubMenu, UI.ContextMenu.SubMenu);\n    const customHeaderItem = responseHeadersSubMenu.defaultSection().items.find(\n        (item: UI.ContextMenu.Item) => item.buildDescriptor().label === 'Custom-Header');\n    assert.exists(customHeaderItem);\n  });\n});\n\ndescribeWithMockConnection('NetworkLogView placeholder', () => {\n  const START_RECORDING_ID = 'network.toggle-recording';\n  const RELOAD_ID = 'inspector-main.reload';\n\n  beforeEach(() => {\n    stubNoopSettings();\n    UI.ActionRegistration.registerActionExtension({\n      actionId: START_RECORDING_ID,\n      category: UI.ActionRegistration.ActionCategory.NETWORK,\n      title: () => 'mock' as Platform.UIString.LocalizedString,\n      toggleable: true,\n    });\n    UI.ActionRegistration.registerActionExtension({\n      actionId: RELOAD_ID,\n      category: UI.ActionRegistration.ActionCategory.NETWORK,\n      title: () => 'mock' as Platform.UIString.LocalizedString,\n      toggleable: true,\n    });\n    sinon.stub(UI.ShortcutRegistry.ShortcutRegistry, 'instance').returns({\n      shortcutTitleForAction: () => 'Ctrl',\n      shortcutsForAction: () => [new UI.KeyboardShortcut.KeyboardShortcut(\n          [{key: UI.KeyboardShortcut.Keys.Ctrl.code, name: 'Ctrl'}], '', UI.KeyboardShortcut.Type.DEFAULT_SHORTCUT)],\n    } as unknown as UI.ShortcutRegistry.ShortcutRegistry);\n  });\n\n  it('shows instruction to start recording', async () => {\n    const networkLogView = createNetworkLogView();\n    testPlaceholderText(\n        networkLogView, 'No network activity recorded',\n        'Record network log to display network activity by using the \\\"Start recording\\\" button or by hitting Ctrl.');\n    testPlaceholderButton(networkLogView, 'Start recording', START_RECORDING_ID);\n  });\n\n  it('shows placeholder with instruction to reload page if already recording', async () => {\n    const networkLogView = createNetworkLogView();\n    networkLogView.setRecording(true);\n\n    testPlaceholderText(\n        networkLogView, 'Currently recording network activity',\n        'Perform a request or reload the page by using the \\\"Reload page\\\" button or by hitting Ctrl.');\n    testPlaceholderButton(networkLogView, 'Reload page', RELOAD_ID);\n  });\n});\n\ndescribeWithEnvironment('NetworkLogView', () => {\n  it('renders when actions aren\\'t registered', async () => {\n    stubNoopSettings();\n    sinon.stub(UI.ShortcutRegistry.ShortcutRegistry, 'instance').returns({\n      shortcutTitleForAction: () => 'Ctrl',\n      shortcutsForAction: () => [new UI.KeyboardShortcut.KeyboardShortcut(\n          [{key: UI.KeyboardShortcut.Keys.Ctrl.code, name: 'Ctrl'}], '', UI.KeyboardShortcut.Type.DEFAULT_SHORTCUT)],\n    } as unknown as UI.ShortcutRegistry.ShortcutRegistry);\n    try {\n      createNetworkLogView();\n    } catch {\n      assert.fail('Creating the network view without registring the actions shouldn\\'t fail.');\n    }\n  });\n});\n\nfunction testPlaceholderText(\n    networkLogView: Network.NetworkLogView.NetworkLogView, expectedHeaderText: string,\n    expectedDescriptionText: string) {\n  const emptyWidget = networkLogView.element.querySelector('.empty-state');\n\n  const header = emptyWidget?.querySelector('.empty-state-header')?.textContent;\n  const description = emptyWidget?.querySelector('.empty-state-description > span')?.textContent;\n\n  assert.deepEqual(header, expectedHeaderText);\n  assert.deepEqual(description, expectedDescriptionText);\n}\n\nfunction testPlaceholderButton(\n    networkLogView: Network.NetworkLogView.NetworkLogView, expectedButtonText: string, actionId: string) {\n  const button = networkLogView.element.querySelector('.empty-state devtools-button');\n  assert.exists(button);\n  assert.deepEqual(button.textContent, expectedButtonText);\n\n  const action = UI.ActionRegistry.ActionRegistry.instance().getAction(actionId);\n  const spy = sinon.spy(action, 'execute');\n\n  assert.isTrue(spy.notCalled);\n  dispatchClickEvent(button);\n  assert.isTrue(spy.calledOnce);\n}\n\nfunction clickCheckbox(checkbox: HTMLInputElement) {\n  checkbox.checked = true;\n  const event = new Event('change');\n  checkbox.dispatchEvent(event);\n}\n\nfunction getCheckbox(filterBar: UI.FilterBar.FilterBar, title: string) {\n  const checkbox =\n      filterBar.element.querySelector(`[title=\"${title}\"] dt-checkbox`)?.shadowRoot?.querySelector('input') || null;\n  assert.instanceOf(checkbox, HTMLInputElement);\n  return checkbox;\n}\n\nasync function getMoreTypesDropdown(filterBar: UI.FilterBar.FilterBar): Promise<HTMLElement> {\n  return filterBar.element.querySelector('[aria-label=\"Show only/hide requests dropdown\"]')\n             ?.querySelector('.toolbar-button') as HTMLElement;\n}\n\nfunction getCountAdorner(filterBar: UI.FilterBar.FilterBar): HTMLElement|null {\n  const button = filterBar.element.querySelector('[aria-label=\"Show only/hide requests dropdown\"]')\n                     ?.querySelector('.toolbar-button');\n  return button?.querySelector('.active-filters-count') ?? null;\n}\n\nfunction getMoreFiltersActiveCount(filterBar: UI.FilterBar.FilterBar): string {\n  const countAdorner = getCountAdorner(filterBar);\n  const count = countAdorner?.querySelector('[slot=\"content\"]')?.textContent ?? '';\n  return count;\n}\n\nfunction getDropdownItem(softMenu: UI.ContextMenu.ContextMenu, label: string) {\n  const item = findMenuItemWithLabel(softMenu.defaultSection(), label);\n  assertNotNullOrUndefined(item);\n  return item;\n}\n\nasync function selectMoreFiltersOption(softMenu: UI.ContextMenu.ContextMenu, option: string) {\n  const item = getDropdownItem(softMenu, option);\n  softMenu.invokeHandler(item.id());\n  await raf();\n}\n\nfunction createNetworkLogView(filterBar?: UI.FilterBar.FilterBar): Network.NetworkLogView.NetworkLogView {\n  if (!filterBar) {\n    filterBar = {addFilter: () => {}, filterButton: () => ({addEventListener: () => {}}), addDivider: () => {}} as\n        unknown as UI.FilterBar.FilterBar;\n  }\n  return new Network.NetworkLogView.NetworkLogView(\n      filterBar, document.createElement('div'),\n      Common.Settings.Settings.instance().createSetting('network-log-large-rows', false));\n}\n"]}