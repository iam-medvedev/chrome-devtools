{"version":3,"file":"BlockedURLsPane.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/network/BlockedURLsPane.test.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,QAAQ,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,KAAK,IAAI,MAAM,2BAA2B,CAAC;AAClD,OAAO,EAAC,gBAAgB,EAAE,kBAAkB,EAAE,oBAAoB,EAAC,MAAM,6BAA6B,CAAC;AACvG,OAAO,EAAC,YAAY,EAAE,mBAAmB,EAAC,MAAM,qCAAqC,CAAC;AACtF,OAAO,EAAC,0BAA0B,EAAE,gCAAgC,EAAC,MAAM,iCAAiC,CAAC;AAE7G,OAAO,KAAK,OAAO,MAAM,cAAc,CAAC;AAExC,MAAM,EAAC,SAAS,EAAC,GAAG,QAAQ,CAAC,YAAY,CAAC;AAE1C,0BAA0B,CAAC,iBAAiB,EAAE,GAAG,EAAE;IACjD,UAAU,CAAC,GAAG,EAAE;QACd,gCAAgC,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChE,gCAAgC,CAAC,+BAA+B,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9E,mBAAmB,CAAC;YAClB,8CAA8C;YAC9C,sDAAsD;SACvD,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACnC,MAAM,eAAe,GAAG,IAAI,OAAO,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;QACtE,oBAAoB,CAAC,eAAe,CAAC,CAAC;QACtC,MAAM,cAAc,GAAG,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QACrF,MAAM,WAAW,GAAG,cAAc,EAAE,UAAU,EAAE,aAAa,CAAC,cAAc,CAAC,CAAC;QAC9E,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAC3B,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,qBAAqB,CAAC,EAAE,WAAW,EAAE,6BAA6B,CAAC,CAAC;QAC/G,MAAM,CAAC,SAAS,CACZ,WAAW,CAAC,aAAa,CAAC,iCAAiC,CAAC,EAAE,WAAW,EACzE,oFAAoF,CAAC,CAAC;QAE1F,MAAM,gBAAgB,CAAC,oCAAoC,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACnE,MAAM,eAAe,GAAG,IAAI,OAAO,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;QACtE,oBAAoB,CAAC,eAAe,CAAC,CAAC;QACtC,MAAM,cAAc,GAAG,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QACrF,MAAM,IAAI,GAAG,cAAc,EAAE,UAAU,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;QAChE,MAAM,WAAW,GAAG,IAAI,EAAE,aAAa,CAAC,cAAc,CAAC,CAAC;QAExD,MAAM,MAAM,GAAG,WAAW,EAAE,aAAa,CAAC,iBAAiB,CAAC,CAAC;QAC7D,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAEtB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACtD,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC3B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAEtD,MAAM,gBAAgB,CAAC,+BAA+B,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,MAAM,6BAA6B,GAAG,CAAC,OAAgB,EAAE,EAAE,CAAC,KAAK,IAAI,EAAE;YACrE,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;YAC9B,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACnF,MAAM,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YACvE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,yBAAyB,CAAC,QAAQ,EAAE,EAAE,iBAAiB,CAAC,CAAC,OAAO,CAAC;gBAC7F,EAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,EAAC;aAC1B,CAAC,CAAC;YACH,MAAM,eAAe,GAAG,IAAI,OAAO,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;YACtE,oBAAoB,CAAC,eAAe,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAC9B,MAAM,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;YAExD,MAAM,OAAO,GAAG,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,cAAc,CAAC,cAAc,EAAE;gBAC1E,UAAU,EAAE,IAAI;gBAChB,GAAG,EAAE,SAAS,CAAA,oBAAoB;aACnC,CAAC,CAAC;YACH,cAAc,CAAC,wBAAwB,CAAC,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;YAE5F,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YACnD,IAAI,OAAO,EAAE,CAAC;gBACZ,MAAM,gBAAgB,CAAC,wCAAwC,CAAC,CAAC;YACnE,CAAC;iBAAM,CAAC;gBACN,MAAM,gBAAgB,CAAC,4CAA4C,CAAC,CAAC;YACvE,CAAC;QACH,CAAC,CAAC;QAEF,EAAE,CAAC,gEAAgE,EAAE,6BAA6B,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1G,EAAE,CAAC,oEAAoE,EAAE,6BAA6B,CAAC,KAAK,CAAC,CAAC,CAAC;QAE/G,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACpC,MAAM,eAAe,GAAG,IAAI,OAAO,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;YACtE,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;YAEzD,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,wBAAwB,CAC1D,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,EAAC,gBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;YAE5D,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport {assertScreenshot, dispatchClickEvent, renderElementIntoDOM} from '../../testing/DOMHelpers.js';\nimport {createTarget, registerNoopActions} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection, setMockConnectionResponseHandler} from '../../testing/MockConnection.js';\n\nimport * as Network from './network.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\ndescribeWithMockConnection('BlockedURLsPane', () => {\n  beforeEach(() => {\n    setMockConnectionResponseHandler('Debugger.enable', () => ({}));\n    setMockConnectionResponseHandler('Storage.getStorageKeyForFrame', () => ({}));\n    registerNoopActions([\n      'network.add-network-request-blocking-pattern',\n      'network.remove-all-network-request-blocking-patterns',\n    ]);\n  });\n\n  it('shows a placeholder', async () => {\n    const blockedURLsPane = new Network.BlockedURLsPane.BlockedURLsPane();\n    renderElementIntoDOM(blockedURLsPane);\n    const blockedElement = blockedURLsPane.contentElement.querySelector('.blocked-urls');\n    const placeholder = blockedElement?.shadowRoot?.querySelector('.empty-state');\n    assert.exists(placeholder);\n    assert.deepEqual(placeholder.querySelector('.empty-state-header')?.textContent, 'No blocked network requests');\n    assert.deepEqual(\n        placeholder.querySelector('.empty-state-description > span')?.textContent,\n        'Add a pattern to block network requests by clicking on the \\\"Add pattern\\\" button.');\n\n    await assertScreenshot('request_conditions/placeholder.png');\n  });\n\n  it('Add pattern button triggers showing the editor view', async () => {\n    const blockedURLsPane = new Network.BlockedURLsPane.BlockedURLsPane();\n    renderElementIntoDOM(blockedURLsPane);\n    const blockedElement = blockedURLsPane.contentElement.querySelector('.blocked-urls');\n    const list = blockedElement?.shadowRoot?.querySelector('.list');\n    const placeholder = list?.querySelector('.empty-state');\n\n    const button = placeholder?.querySelector('devtools-button');\n    assert.exists(button);\n\n    assert.isNull(list?.querySelector('.editor-content'));\n    dispatchClickEvent(button);\n    assert.exists(list?.querySelector('.editor-content'));\n\n    await assertScreenshot('request_conditions/editor.png');\n  });\n\n  describe('update', () => {\n    const updatesOnRequestFinishedEvent = (inScope: boolean) => async () => {\n      const target = createTarget();\n      SDK.TargetManager.TargetManager.instance().setScopeTarget(inScope ? target : null);\n      const networkManager = target.model(SDK.NetworkManager.NetworkManager);\n      sinon.stub(SDK.NetworkManager.MultitargetNetworkManager.instance(), 'blockedPatterns').returns([\n        {url: '*', enabled: true}\n      ]);\n      const blockedURLsPane = new Network.BlockedURLsPane.BlockedURLsPane();\n      renderElementIntoDOM(blockedURLsPane);\n      assert.exists(networkManager);\n      const updateStub = sinon.spy(blockedURLsPane, 'update');\n\n      const request = sinon.createStubInstance(SDK.NetworkRequest.NetworkRequest, {\n        wasBlocked: true,\n        url: urlString`http://example.com`,\n      });\n      networkManager.dispatchEventToListeners(SDK.NetworkManager.Events.RequestFinished, request);\n\n      assert.strictEqual(updateStub.calledOnce, inScope);\n      if (inScope) {\n        await assertScreenshot(`request_conditions/blocked-matched.png`);\n      } else {\n        await assertScreenshot(`request_conditions/blocked-not-matched.png`);\n      }\n    };\n\n    it('is called upon RequestFinished event (when target is in scope)', updatesOnRequestFinishedEvent(true));\n    it('is called upon RequestFinished event (when target is out of scope)', updatesOnRequestFinishedEvent(false));\n\n    it('is called upon Reset event', () => {\n      const blockedURLsPane = new Network.BlockedURLsPane.BlockedURLsPane();\n      const updateStub = sinon.stub(blockedURLsPane, 'update');\n\n      Logs.NetworkLog.NetworkLog.instance().dispatchEventToListeners(\n          Logs.NetworkLog.Events.Reset, {clearIfPreserved: true});\n\n      sinon.assert.calledOnce(updateStub);\n    });\n  });\n});\n"]}