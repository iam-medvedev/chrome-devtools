{"version":3,"file":"DirectSocketConnectionView.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/network/components/DirectSocketConnectionView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as Lit from '../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport requestHeadersViewStyles from './RequestHeadersView.css.js';\n\nconst {render, html} = Lit;\n\nconst UIStrings = {\n  /**\n   *@description Section header for a list of the main aspects of a direct socket connection\n   */\n  general: 'General',\n  /**\n   *@description Section header for a list of the main aspects of a direct socket connection\n   */\n  options: 'Options',\n  /**\n   *@description Section header for a list of the main aspects of a direct socket connection\n   */\n  openInfo: 'Open Info',\n  /**\n   *@description Text in Connection info View of the Network panel\n   */\n  type: 'DirectSocket Type',\n  /**\n   *@description Text in Connection info View of the Network panel\n   */\n  errorMessage: 'Error message',\n  /**\n   *@description Text in Connection info View of the Network panel\n   */\n  status: 'Status',\n  /**\n   *@description Text in Connection info View of the Network panel\n   */\n  directSocketTypeTcp: 'TCP',\n  /**\n   *@description Text in Connection info View of the Network panel\n   */\n  directSocketTypeUdpConnected: 'UDP (connected)',\n  /**\n   *@description Text in Connection info View of the Network panel\n   */\n  directSocketTypeUdpBound: 'UDP (bound)',\n  /**\n   *@description Text in Connection info View of the Network panel\n   */\n  directSocketStatusOpening: 'Opening',\n  /**\n   *@description Text in Connection info View of the Network panel\n   */\n  directSocketStatusOpen: 'Open',\n  /**\n   *@description Text in Connection info View of the Network panel\n   */\n  directSocketStatusClosed: 'Closed',\n  /**\n   *@description Text in Connection info View of the Network panel\n   */\n  directSocketStatusAborted: 'Aborted',\n\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/network/components/DirectSocketConnectionView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nfunction getDirectSocketTypeString(type: SDK.NetworkRequest.DirectSocketType): Platform.UIString.LocalizedString {\n  switch (type) {\n    case SDK.NetworkRequest.DirectSocketType.TCP:\n      return i18nString(UIStrings.directSocketTypeTcp);\n    case SDK.NetworkRequest.DirectSocketType.UDP_BOUND:\n      return i18nString(UIStrings.directSocketTypeUdpBound);\n    case SDK.NetworkRequest.DirectSocketType.UDP_CONNECTED:\n      return i18nString(UIStrings.directSocketTypeUdpConnected);\n  }\n}\n\nfunction getDirectSocketStatusString(status: SDK.NetworkRequest.DirectSocketStatus): Platform.UIString.LocalizedString {\n  switch (status) {\n    case SDK.NetworkRequest.DirectSocketStatus.OPENING:\n      return i18nString(UIStrings.directSocketStatusOpening);\n    case SDK.NetworkRequest.DirectSocketStatus.OPEN:\n      return i18nString(UIStrings.directSocketStatusOpen);\n    case SDK.NetworkRequest.DirectSocketStatus.CLOSED:\n      return i18nString(UIStrings.directSocketStatusClosed);\n    case SDK.NetworkRequest.DirectSocketStatus.ABORTED:\n      return i18nString(UIStrings.directSocketStatusAborted);\n  }\n}\n\nexport const CATEGORY_NAME_GENERAL = 'general';\nexport const CATEGORY_NAME_OPTIONS = 'options';\nexport const CATEGORY_NAME_OPEN_INFO = 'open-info';\n\nexport interface ViewInput {\n  socketInfo: SDK.NetworkRequest.DirectSocketInfo;\n  openCategories: string[];\n  onSummaryKeyDown: (event: KeyboardEvent, categoryName: string) => void;\n  onToggleCategory: (event: Event, categoryName: string) => void;\n  onCopyRow: () => void;\n}\n\nexport type View = (input: ViewInput, target: HTMLElement) => void;\n\nexport const DEFAULT_VIEW: View = (input, target) => {\n  function isCategoryOpen(name: string): boolean {\n    return input.openCategories.includes(name);\n  }\n\n  function renderCategory(\n      name: string, title: Common.UIString.LocalizedString, content: Lit.LitTemplate): Lit.TemplateResult {\n    // clang-format off\n      return html`\n        <details\n          class=\"direct-socket-category\"\n          ?open=${isCategoryOpen(name)}\n          @toggle=${(e: Event) => input.onToggleCategory(e, name)}\n          jslog=${VisualLogging.sectionHeader(name).track({click: true})}\n          aria-label=${title}\n        >\n          <summary\n            class=\"header\"\n            @keydown=${(e: KeyboardEvent) => input.onSummaryKeyDown(e, name)}\n          >\n            <div class=\"header-grid-container\">\n              <div>\n                ${title}\n              </div>\n              <div class=\"hide-when-closed\"></div>\n            </div>\n          </summary>\n          ${content}\n        </details>\n      `;\n    // clang-format on\n  }\n\n  function renderRow(\n      name: Common.UIString.LocalizedString, value: string|undefined, classNames?: string[]): Lit.LitTemplate {\n    if (!value) {\n      return Lit.nothing;\n    }\n    return html`\n        <div class=\"row\">\n          <div class=\"header-name\">${name}:</div>\n          <div\n            class=\"header-value ${classNames?.join(' ')}\"\n            @copy=${() => input.onCopyRow()}\n          >${value}</div>\n        </div>\n      `;\n  }\n\n  const socketInfo: SDK.NetworkRequest.DirectSocketInfo = input.socketInfo;\n  const generalContent = html`\n      <div jslog=${VisualLogging.section(CATEGORY_NAME_GENERAL)}>\n        ${renderRow(i18nString(UIStrings.type), getDirectSocketTypeString(socketInfo.type))}\n        ${renderRow(i18nString(UIStrings.status), getDirectSocketStatusString(socketInfo.status))}\n        ${renderRow(i18nString(UIStrings.errorMessage), socketInfo.errorMessage)}\n      </div>`;\n\n  const optionsContent = html`\n      <div jslog=${VisualLogging.section(CATEGORY_NAME_OPTIONS)}>\n        ${renderRow(i18n.i18n.lockedString('remoteAddress'), socketInfo.createOptions.remoteAddr)}\n        ${renderRow(i18n.i18n.lockedString('remotePort'), socketInfo.createOptions.remotePort?.toString(10))}\n        ${renderRow(i18n.i18n.lockedString('localAddress'), socketInfo.createOptions.localAddr)}\n        ${renderRow(i18n.i18n.lockedString('localPort'), socketInfo.createOptions.localPort?.toString(10))}\n        ${renderRow(i18n.i18n.lockedString('noDelay'), socketInfo.createOptions.noDelay?.toString())}\n        ${renderRow(i18n.i18n.lockedString('keepAliveDelay'), socketInfo.createOptions.keepAliveDelay?.toString(10))}\n        ${renderRow(i18n.i18n.lockedString('sendBufferSize'), socketInfo.createOptions.sendBufferSize?.toString(10))}\n        ${\n      renderRow(i18n.i18n.lockedString('receiveBufferSize'), socketInfo.createOptions.receiveBufferSize?.toString(10))}\n        ${renderRow(i18n.i18n.lockedString('dnsQueryType'), socketInfo.createOptions.dnsQueryType)}\n      </div>`;\n\n  let openInfoContent: Lit.LitTemplate = Lit.nothing;\n  if (socketInfo.openInfo) {\n    openInfoContent = html`\n          <div jslog=${VisualLogging.section(CATEGORY_NAME_OPEN_INFO)}>\n            ${renderRow(i18n.i18n.lockedString('remoteAddress'), socketInfo.openInfo.remoteAddr)}\n            ${renderRow(i18n.i18n.lockedString('remotePort'), socketInfo.openInfo?.remotePort?.toString(10))}\n            ${renderRow(i18n.i18n.lockedString('localAddress'), socketInfo.openInfo.localAddr)}\n            ${renderRow(i18n.i18n.lockedString('localPort'), socketInfo.openInfo?.localPort?.toString(10))}\n          </div>`;\n  }\n\n  // clang-format off\n  render(html`\n    <style>${UI.inspectorCommonStyles.cssText}</style>\n    <style>${requestHeadersViewStyles.cssText}</style>\n    ${renderCategory(CATEGORY_NAME_GENERAL, i18nString(UIStrings.general), generalContent)}\n    ${renderCategory(CATEGORY_NAME_OPTIONS, i18nString(UIStrings.options), optionsContent)}\n    ${socketInfo.openInfo ? renderCategory(CATEGORY_NAME_OPEN_INFO, i18nString(UIStrings.openInfo), openInfoContent) : Lit.nothing}\n  `, target, {host: input});\n  // clang-format on\n};\n\nexport class DirectSocketConnectionView extends UI.Widget.Widget {\n  #request: Readonly<SDK.NetworkRequest.NetworkRequest>;\n  #view: View;\n\n  constructor(request: SDK.NetworkRequest.NetworkRequest, view: View = DEFAULT_VIEW) {\n    super(true);\n    this.#request = request;\n    this.#view = view;\n\n    this.element.setAttribute('jslog', `${VisualLogging.pane('connection-info').track({resize: true})}`);\n    this.performUpdate();\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.#request.addEventListener(SDK.NetworkRequest.Events.TIMING_CHANGED, this.requestUpdate, this);\n  }\n\n  override willHide(): void {\n    super.willHide();\n    this.#request.removeEventListener(SDK.NetworkRequest.Events.TIMING_CHANGED, this.requestUpdate, this);\n  }\n\n  override performUpdate(): void {\n    if (!this.#request || !this.#request.directSocketInfo) {\n      return;\n    }\n\n    const openCategories = [CATEGORY_NAME_GENERAL, CATEGORY_NAME_OPTIONS, CATEGORY_NAME_OPEN_INFO].filter(value => {\n      return this.#getCategorySetting(value).get();\n    }, this);\n\n    const viewInput: ViewInput = {\n      socketInfo: this.#request.directSocketInfo,\n      openCategories,\n      onSummaryKeyDown: (event: KeyboardEvent, categoryName: string) => {\n        if (!event.target) {\n          return;\n        }\n        const summaryElement = event.target as HTMLElement;\n        const detailsElement = summaryElement.parentElement as HTMLDetailsElement;\n        if (!detailsElement) {\n          throw new Error('<details> element is not found for a <summary> element');\n        }\n        let shouldBeOpen: boolean;\n\n        switch (event.key) {\n          case 'ArrowLeft':\n            shouldBeOpen = false;\n            break;\n          case 'ArrowRight':\n            shouldBeOpen = true;\n            break;\n          default:\n            return;\n        }\n\n        if (detailsElement.open !== shouldBeOpen) {\n          this.#setIsOpen(categoryName, shouldBeOpen);\n        }\n      },\n      onToggleCategory: (event: Event, categoryName: string) => {\n        const detailsElement = event.target as HTMLDetailsElement;\n        this.#setIsOpen(categoryName, detailsElement.open);\n      },\n      onCopyRow: () => {\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.NetworkPanelCopyValue);\n      }\n    };\n    this.#view(viewInput, this.contentElement);\n  }\n\n  #setIsOpen(categoryName: string, open: boolean): void {\n    const setting = this.#getCategorySetting(categoryName);\n    setting.set(open);\n    this.requestUpdate();\n  }\n\n  #getCategorySetting(name: string): Common.Settings.Setting<boolean> {\n    return Common.Settings.Settings.instance().createSetting(\n        `connection-info-${name}-category-expanded`, /* defaultValue= */ true);\n  }\n}\n"]}