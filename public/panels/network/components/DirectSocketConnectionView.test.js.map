{"version":3,"file":"DirectSocketConnectionView.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/network/components/DirectSocketConnectionView.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,gCAAgC,CAAC;AACzD,OAAO,KAAK,QAAQ,MAAM,oCAAoC,CAAC;AAC/D,OAAO,KAAK,GAAG,MAAM,0BAA0B,CAAC;AAEhD,OAAO,EAAC,gBAAgB,EAAE,oBAAoB,EAAC,MAAM,gCAAgC,CAAC;AACtF,OAAO,EACL,uBAAuB,GACxB,MAAM,wCAAwC,CAAC;AAChD,OAAO,EACL,gBAAgB,GACjB,MAAM,sCAAsC,CAAC;AAC9C,OAAO,EAAC,sBAAsB,EAAwB,MAAM,yCAAyC,CAAC;AACtG,OAAO,KAAK,EAAE,MAAM,8BAA8B,CAAC;AAEnD,OAAO,KAAK,iBAAiB,MAAM,iBAAiB,CAAC;AAErD,MAAM,EAAC,SAAS,EAAC,GAAG,QAAQ,CAAC,YAAY,CAAC;AAE1C,SAAS,oBAAoB;IAC3B,MAAM,cAAc,GAAG,GAAG,CAAC,cAAc,CAAC,cAAc,CAAC,eAAe,CACpE,WAAyC,EAAE,SAAS,CAAA,gCAAgC,CAAC,CAAC;IAC1F,cAAc,CAAC,cAAc,GAAG,IAAI,CAAC;IACrC,cAAc,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;IACzD,cAAc,CAAC,QAAQ,GAAG,KAAK,CAAC;IAEhC,cAAc,CAAC,UAAU,GAAG,SAAS,CAAC;IACtC,cAAc,CAAC,gBAAgB,GAAG;QAChC,IAAI,EAAE,GAAG,CAAC,cAAc,CAAC,gBAAgB,CAAC,GAAG;QAC7C,MAAM,EAAE,GAAG,CAAC,cAAc,CAAC,kBAAkB,CAAC,OAAO;QACrD,aAAa,EAAE;YACb,UAAU,EAAE,2BAA2B;YACvC,UAAU,EAAE,IAAI;YAChB,OAAO,EAAE,KAAK;YACd,cAAc,EAAE,IAAI;YACpB,cAAc,EAAE,IAAI;YACpB,iBAAiB,EAAE,IAAI;YACvB,YAAY,6DAAgD;SAC7D;QACD,QAAQ,EAAE,EAAC,UAAU,EAAE,gBAAgB,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAC;KACpG,CAAC;IACF,cAAc,CAAC,eAAe,CAAC,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IAC/E,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IACpD,OAAO,cAAc,CAAC;AACxB,CAAC;AACD,IAAI,IAAsG,CAAC;AAC3G,IAAI,oBAA6F,CAAC;AAElG,uBAAuB,CAAC,4BAA4B,EAAE,GAAG,EAAE;IACzD,UAAU,CAAC,GAAG,EAAE;QACd,gBAAgB,EAAE,CAAC;QAEnB,IAAI,GAAG,sBAAsB,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,0BAA0B,CAAC,CAAC;QACvG,oBAAoB;YAChB,IAAI,iBAAiB,CAAC,0BAA0B,CAAC,0BAA0B,CAAC,oBAAoB,EAAE,EAAE,IAAI,CAAC,CAAC;QAC9G,oBAAoB,CAAC,QAAQ,EAAE,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,iBAAiB,CAAC,0BAA0B,CAAC,qBAAqB,CAAC;IAExF,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;YACrB,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,EAAuB,EAAqB,EAAE,YAAY,CAAC,CAAC;YAE5G,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;YACtB,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,KAAK,EAAuB,EAAqB,EAAE,YAAY,CAAC,CAAC;YAE7G,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;YACjC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,EAAuB,EAAqB,EAAE,YAAY,CAAC,CAAC;YAE5G,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;YACrB,8BAA8B;YAC9B,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,KAAK,EAAuB,EAAqB,EAAE,YAAY,CAAC,CAAC;YAC7G,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;YAE7E,8BAA8B;YAC9B,IAAI,CAAC,KAAK,CAAC,gBAAgB,CACvB;gBACE,MAAM,EAAE;oBACN,aAAa,EAAE;wBACb,gBAAgB;wBAChB,IAAI,EAAE,KAAK;qBACZ;iBACF;gBACD,GAAG,EAAE,YAAY;aACU,EAC7B,YAAY,CAAC,CAAC;YAElB,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;YACtB,8BAA8B;YAC9B,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,EAAuB,EAAqB,EAAE,YAAY,CAAC,CAAC;YAC5G,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;YAE5E,+BAA+B;YAC/B,IAAI,CAAC,KAAK,CAAC,gBAAgB,CACvB;gBACE,MAAM,EAAE;oBACN,aAAa,EAAE;wBACb,gBAAgB;wBAChB,IAAI,EAAE,IAAI;qBACX;iBACF;gBACD,GAAG,EAAE,WAAW;aACW,EAC7B,YAAY,CAAC,CAAC;YAElB,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,8BAA8B;YAC9B,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,EAAuB,EAAqB,EAAE,YAAY,CAAC,CAAC;YAC5G,qCAAqC;YACrC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAC,GAAG,EAAE,WAAW,EAA6B,EAAE,YAAY,CAAC,CAAC;YAE1F,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;YACpC,8BAA8B;YAC9B,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,EAAuB,EAAqB,EAAE,YAAY,CAAC,CAAC;YAC5G,IAAI,CAAC,KAAK,CAAC,gBAAgB,CACvB;gBACE,MAAM,EAAE;oBACN,aAAa,EAAE;wBACb,gBAAgB;wBAChB,IAAI,EAAE,IAAI;qBACX;iBACF;gBACD,cAAc;gBACd,GAAG,EAAE,WAAW;aACW,EAC7B,YAAY,CAAC,CAAC;YAElB,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,uBAAuB,CAAC,MAAM,EAAE,GAAG,EAAE;IACnC,IAAI,MAAoB,CAAC;IACzB,MAAM,IAAI,GAAG,iBAAiB,CAAC,0BAA0B,CAAC,YAAY,CAAC;IAEvE,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAChD,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAChC,MAAM,MAAM,GAAG,IAAI,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QACtC,MAAM,CAAC,UAAU,EAAE,CAAC;QACpB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACvB,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC;QACxB,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC,aAAa,GAAG,QAAQ,CAAC;QACtC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,SAAS,GAA2D;YACxE,UAAU,EAAE;gBACV,IAAI,EAAE,GAAG,CAAC,cAAc,CAAC,gBAAgB,CAAC,GAAG;gBAC7C,MAAM,EAAE,GAAG,CAAC,cAAc,CAAC,kBAAkB,CAAC,OAAO;gBACrD,aAAa,EAAE;oBACb,UAAU,EAAE,2BAA2B;oBACvC,UAAU,EAAE,IAAI;oBAChB,OAAO,EAAE,KAAK;oBACd,cAAc,EAAE,IAAI;oBACpB,cAAc,EAAE,IAAI;oBACpB,iBAAiB,EAAE,IAAI;oBACvB,YAAY,6DAAgD;iBAC7D;gBACD,QAAQ,EAAE,EAAC,UAAU,EAAE,gBAAgB,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAC;aACpG;YACD,cAAc,EAAE;gBACd,iBAAiB,CAAC,0BAA0B,CAAC,qBAAqB;gBAClE,iBAAiB,CAAC,0BAA0B,CAAC,uBAAuB;gBACpE,iBAAiB,CAAC,0BAA0B,CAAC,qBAAqB;aACnE;YACD,gBAAgB,EAAE,GAAG,EAAE,GAAE,CAAC;YAC1B,gBAAgB,EAAE,GAAG,EAAE,GAAE,CAAC;YAC1B,SAAS,EAAE,GAAG,EAAE,GAAE,CAAC;SACpB,CAAC;QAEF,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACxB,MAAM,gBAAgB,CAAC,uDAAuD,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;QACjE,MAAM,SAAS,GAA2D;YACxE,UAAU,EAAE;gBACV,IAAI,EAAE,GAAG,CAAC,cAAc,CAAC,gBAAgB,CAAC,GAAG;gBAC7C,MAAM,EAAE,GAAG,CAAC,cAAc,CAAC,kBAAkB,CAAC,OAAO;gBACrD,YAAY,EAAE,0EAA0E;gBACxF,aAAa,EAAE;oBACb,UAAU,EAAE,2BAA2B;oBACvC,UAAU,EAAE,IAAI;iBACjB;aACF;YACD,cAAc,EAAE;gBACd,iBAAiB,CAAC,0BAA0B,CAAC,qBAAqB;gBAClE,iBAAiB,CAAC,0BAA0B,CAAC,uBAAuB;gBACpE,iBAAiB,CAAC,0BAA0B,CAAC,qBAAqB;aACnE;YACD,gBAAgB,EAAE,GAAG,EAAE,GAAE,CAAC;YAC1B,gBAAgB,EAAE,GAAG,EAAE,GAAE,CAAC;YAC1B,SAAS,EAAE,GAAG,EAAE,GAAE,CAAC;SACpB,CAAC;QAEF,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACxB,MAAM,gBAAgB,CAAC,qEAAqE,CAAC,CAAC;IAChG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,SAAS,GAA2D;YACxE,UAAU,EAAE;gBACV,IAAI,EAAE,GAAG,CAAC,cAAc,CAAC,gBAAgB,CAAC,SAAS;gBACnD,MAAM,EAAE,GAAG,CAAC,cAAc,CAAC,kBAAkB,CAAC,MAAM;gBACpD,aAAa,EAAE;oBACb,UAAU,EAAE,2BAA2B;oBACvC,UAAU,EAAE,IAAI;oBAChB,OAAO,EAAE,KAAK;oBACd,cAAc,EAAE,IAAI;oBACpB,cAAc,EAAE,IAAI;oBACpB,iBAAiB,EAAE,IAAI;oBACvB,YAAY,6DAAgD;iBAC7D;gBACD,QAAQ,EAAE,EAAC,UAAU,EAAE,gBAAgB,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAC;aACpG;YACD,cAAc,EAAE,EAAE;YAClB,gBAAgB,EAAE,GAAG,EAAE,GAAE,CAAC;YAC1B,gBAAgB,EAAE,GAAG,EAAE,GAAE,CAAC;YAC1B,SAAS,EAAE,GAAG,EAAE,GAAE,CAAC;SACpB,CAAC;QAEF,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACxB,MAAM,gBAAgB,CAAC,yDAAyD,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as Protocol from '../../../generated/protocol.js';\nimport {assertScreenshot, renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {\n  describeWithEnvironment,\n} from '../../../testing/EnvironmentHelpers.js';\nimport {\n  setUpEnvironment,\n} from '../../../testing/OverridesHelpers.js';\nimport {createViewFunctionStub, type ViewFunctionStub} from '../../../testing/ViewFunctionHelpers.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\n\nimport * as NetworkComponents from './components.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\nfunction createNetworkRequest() {\n  const networkRequest = SDK.NetworkRequest.NetworkRequest.createForSocket(\n      'requestId' as Protocol.Network.RequestId, urlString`www.example.com/some/path:3000`);\n  networkRequest.hasNetworkData = true;\n  networkRequest.setRemoteAddress('www.example.com', 3000);\n  networkRequest.protocol = 'tcp';\n\n  networkRequest.statusText = 'Opening';\n  networkRequest.directSocketInfo = {\n    type: SDK.NetworkRequest.DirectSocketType.TCP,\n    status: SDK.NetworkRequest.DirectSocketStatus.OPENING,\n    createOptions: {\n      remoteAddr: 'www.example.com/some/path',\n      remotePort: 3000,\n      noDelay: false,\n      keepAliveDelay: 1001,\n      sendBufferSize: 1002,\n      receiveBufferSize: 1003,\n      dnsQueryType: Protocol.Network.DirectSocketDnsQueryType.Ipv4,\n    },\n    openInfo: {remoteAddr: 'www.sample.com', remotePort: 3005, localAddr: '127.0.0.1', localPort: 9472}\n  };\n  networkRequest.setResourceType(Common.ResourceType.resourceTypes.DirectSocket);\n  networkRequest.setIssueTime(Date.now(), Date.now());\n  return networkRequest;\n}\nlet view: ViewFunctionStub<typeof NetworkComponents.DirectSocketConnectionView.DirectSocketConnectionView>;\nlet socketConnectionView: NetworkComponents.DirectSocketConnectionView.DirectSocketConnectionView;\n\ndescribeWithEnvironment('DirectSocketConnectionView', () => {\n  beforeEach(() => {\n    setUpEnvironment();\n\n    view = createViewFunctionStub(NetworkComponents.DirectSocketConnectionView.DirectSocketConnectionView);\n    socketConnectionView =\n        new NetworkComponents.DirectSocketConnectionView.DirectSocketConnectionView(createNetworkRequest(), view);\n    socketConnectionView.wasShown();\n  });\n\n  const categoryName = NetworkComponents.DirectSocketConnectionView.CATEGORY_NAME_GENERAL;\n\n  describe('Category toggle', () => {\n    it('opens', async () => {\n      view.input.onToggleCategory({target: {open: true} as HTMLDetailsElement} as unknown as Event, categoryName);\n\n      assert.isTrue((await view.nextInput).openCategories.includes(categoryName));\n    });\n\n    it('closes', async () => {\n      view.input.onToggleCategory({target: {open: false} as HTMLDetailsElement} as unknown as Event, categoryName);\n\n      assert.isFalse((await view.nextInput).openCategories.includes(categoryName));\n    });\n    it('opens after close', async () => {\n      view.input.onToggleCategory({target: {open: true} as HTMLDetailsElement} as unknown as Event, categoryName);\n\n      assert.isTrue((await view.nextInput).openCategories.includes(categoryName));\n    });\n  });\n\n  describe('Handles arrow keys on category', () => {\n    it('opens', async () => {\n      // set initial state as closed\n      view.input.onToggleCategory({target: {open: false} as HTMLDetailsElement} as unknown as Event, categoryName);\n      assert.isFalse((await view.nextInput).openCategories.includes(categoryName));\n\n      // make keyboard event to open\n      view.input.onSummaryKeyDown(\n          {\n            target: {\n              parentElement: {\n                // current state\n                open: false\n              }\n            },\n            key: 'ArrowRight'\n          } as unknown as KeyboardEvent,\n          categoryName);\n\n      assert.isTrue((await view.nextInput).openCategories.includes(categoryName));\n    });\n\n    it('closes', async () => {\n      // set initial state as opened\n      view.input.onToggleCategory({target: {open: true} as HTMLDetailsElement} as unknown as Event, categoryName);\n      assert.isTrue((await view.nextInput).openCategories.includes(categoryName));\n\n      // make keyboard event to close\n      view.input.onSummaryKeyDown(\n          {\n            target: {\n              parentElement: {\n                // current state\n                open: true\n              }\n            },\n            key: 'ArrowLeft'\n          } as unknown as KeyboardEvent,\n          categoryName);\n\n      assert.isFalse((await view.nextInput).openCategories.includes(categoryName));\n    });\n\n    it('does nothing if target is absent', async () => {\n      // set initial state as opened\n      view.input.onToggleCategory({target: {open: true} as HTMLDetailsElement} as unknown as Event, categoryName);\n      // make keyboard event without target\n      view.input.onSummaryKeyDown({key: 'ArrowLeft'} as unknown as KeyboardEvent, categoryName);\n\n      assert.isTrue((await view.nextInput).openCategories.includes(categoryName));\n    });\n\n    it('ignores unknown keys', async () => {\n      // set initial state as opened\n      view.input.onToggleCategory({target: {open: true} as HTMLDetailsElement} as unknown as Event, categoryName);\n      view.input.onSummaryKeyDown(\n          {\n            target: {\n              parentElement: {\n                // current state\n                open: true\n              }\n            },\n            // unknown key\n            key: 'ArrowDown'\n          } as unknown as KeyboardEvent,\n          categoryName);\n\n      assert.isTrue((await view.nextInput).openCategories.includes(categoryName));\n    });\n  });\n});\n\ndescribeWithEnvironment('view', () => {\n  let target!: HTMLElement;\n  const view = NetworkComponents.DirectSocketConnectionView.DEFAULT_VIEW;\n\n  beforeEach(async () => {\n    const container = document.createElement('div');\n    renderElementIntoDOM(container);\n    const widget = new UI.Widget.Widget();\n    widget.markAsRoot();\n    widget.show(container);\n    target = widget.element;\n    target.style.display = 'flex';\n    target.style.flexDirection = 'column';\n    target.style.width = '500px';\n    target.style.height = '400px';\n  });\n\n  it('all categories are opened', async () => {\n    const viewInput: NetworkComponents.DirectSocketConnectionView.ViewInput = {\n      socketInfo: {\n        type: SDK.NetworkRequest.DirectSocketType.TCP,\n        status: SDK.NetworkRequest.DirectSocketStatus.OPENING,\n        createOptions: {\n          remoteAddr: 'www.example.com/some/path',\n          remotePort: 3000,\n          noDelay: false,\n          keepAliveDelay: 1001,\n          sendBufferSize: 1002,\n          receiveBufferSize: 1003,\n          dnsQueryType: Protocol.Network.DirectSocketDnsQueryType.Ipv4,\n        },\n        openInfo: {remoteAddr: 'www.sample.com', remotePort: 3005, localAddr: '127.0.0.1', localPort: 9472}\n      },\n      openCategories: [\n        NetworkComponents.DirectSocketConnectionView.CATEGORY_NAME_GENERAL,\n        NetworkComponents.DirectSocketConnectionView.CATEGORY_NAME_OPEN_INFO,\n        NetworkComponents.DirectSocketConnectionView.CATEGORY_NAME_OPTIONS\n      ],\n      onSummaryKeyDown: () => {},\n      onToggleCategory: () => {},\n      onCopyRow: () => {}\n    };\n\n    view(viewInput, target);\n    await assertScreenshot('direct_socket_connection_view/all_categories_open.png');\n  });\n\n  it('all categories are opened with some values absent', async () => {\n    const viewInput: NetworkComponents.DirectSocketConnectionView.ViewInput = {\n      socketInfo: {\n        type: SDK.NetworkRequest.DirectSocketType.TCP,\n        status: SDK.NetworkRequest.DirectSocketStatus.ABORTED,\n        errorMessage: 'Cannot resolve hostname. And long error message goes next next next next',\n        createOptions: {\n          remoteAddr: 'www.example.com/some/path',\n          remotePort: 3000,\n        },\n      },\n      openCategories: [\n        NetworkComponents.DirectSocketConnectionView.CATEGORY_NAME_GENERAL,\n        NetworkComponents.DirectSocketConnectionView.CATEGORY_NAME_OPEN_INFO,\n        NetworkComponents.DirectSocketConnectionView.CATEGORY_NAME_OPTIONS\n      ],\n      onSummaryKeyDown: () => {},\n      onToggleCategory: () => {},\n      onCopyRow: () => {}\n    };\n\n    view(viewInput, target);\n    await assertScreenshot('direct_socket_connection_view/all_categories_open_values_absent.png');\n  });\n\n  it('all categories are closed', async () => {\n    const viewInput: NetworkComponents.DirectSocketConnectionView.ViewInput = {\n      socketInfo: {\n        type: SDK.NetworkRequest.DirectSocketType.UDP_BOUND,\n        status: SDK.NetworkRequest.DirectSocketStatus.CLOSED,\n        createOptions: {\n          remoteAddr: 'www.example.com/some/path',\n          remotePort: 3000,\n          noDelay: false,\n          keepAliveDelay: 2001,\n          sendBufferSize: 2002,\n          receiveBufferSize: 2003,\n          dnsQueryType: Protocol.Network.DirectSocketDnsQueryType.Ipv4,\n        },\n        openInfo: {remoteAddr: 'www.sample.com', remotePort: 3005, localAddr: '127.0.0.1', localPort: 9472}\n      },\n      openCategories: [],\n      onSummaryKeyDown: () => {},\n      onToggleCategory: () => {},\n      onCopyRow: () => {}\n    };\n\n    view(viewInput, target);\n    await assertScreenshot('direct_socket_connection_view/all_categories_closed.png');\n  });\n});\n"]}