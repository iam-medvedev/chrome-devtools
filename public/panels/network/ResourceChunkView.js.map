{"version":3,"file":"ResourceChunkView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/network/ResourceChunkView.ts"],"names":[],"mappings":"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","sourcesContent":["\n// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {BinaryResourceView} from './BinaryResourceView.js';\nimport viewStyles from './resourceChunkView.css.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Event Source Messages View of the Network panel\n   */\n  data: 'Data',\n  /**\n   *@description Text in Messages View of the Network panel\n   */\n  length: 'Length',\n  /**\n   *@description Text that refers to the time\n   */\n  time: 'Time',\n  /**\n   *@description Text to clear everything\n   */\n  clearAll: 'Clear All',\n  /**\n   *@description Text to filter result items\n   */\n  filter: 'Filter',\n  /**\n   *@description Text in Messages View of the Network panel that shows if no message is selected for viewing its content\n   */\n  noMessageSelected: 'No message selected',\n  /**\n   *@description Text in Messages View of the Network panel\n   */\n  selectMessageToBrowseItsContent: 'Select message to browse its content.',\n  /**\n   *@description Text in Messages View of the Network panel\n   */\n  copyMessageD: 'Copy message...',\n  /**\n   *@description A context menu item in the Messages View of the Network panel\n   */\n  copyMessage: 'Copy message',\n  /**\n   *@description Text to clear everything\n   */\n  clearAllL: 'Clear all',\n  /**\n   *@description Text for everything\n   */\n  all: 'All',\n  /**\n   *@description Text in Messages View of the Network panel\n   */\n  send: 'Send',\n  /**\n   *@description Text in Messages View of the Network panel\n   */\n  receive: 'Receive',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/network/ResourceChunkView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nexport abstract class ResourceChunkView<Chunk> extends UI.Widget.VBox {\n  private readonly splitWidget: UI.SplitWidget.SplitWidget;\n  private dataGrid: DataGrid.SortableDataGrid.SortableDataGrid<unknown>;\n  private readonly timeComparator:\n      (arg0: DataGrid.SortableDataGrid.SortableDataGridNode<DataGridItem>,\n       arg1: DataGrid.SortableDataGrid.SortableDataGridNode<DataGridItem>) => number;\n  private readonly mainToolbar: UI.Toolbar.Toolbar;\n  private readonly clearAllButton: UI.Toolbar.ToolbarButton;\n  private readonly filterTypeCombobox: UI.Toolbar.ToolbarComboBox;\n  protected filterType: string|null;\n  private readonly filterTextInput: UI.Toolbar.ToolbarInput;\n  protected filterRegex: RegExp|null;\n  private readonly frameEmptyWidget: UI.EmptyWidget.EmptyWidget;\n  private currentSelectedNode?: DataGridItem|null;\n  readonly request: SDK.NetworkRequest.NetworkRequest;\n  private readonly messageFilterSetting: Common.Settings.Setting<string>;\n\n  abstract getRequestChunks(): Chunk[];\n  abstract createGridItem(chunk: Chunk): DataGridItem;\n  abstract chunkFilter(chunk: Chunk): boolean;\n\n  constructor(\n      request: SDK.NetworkRequest.NetworkRequest, messageFilterSettingKey: string, splitWidgetSettingKey: string,\n      dataGridDisplayName: Common.UIString.LocalizedString, filterUsingRegexHint: Common.UIString.LocalizedString) {\n    super();\n    this.messageFilterSetting = Common.Settings.Settings.instance().createSetting(messageFilterSettingKey, '');\n    this.registerRequiredCSS(viewStyles);\n    this.request = request;\n    this.element.classList.add('resource-chunk-view');\n\n    this.splitWidget = new UI.SplitWidget.SplitWidget(false, true, splitWidgetSettingKey);\n    this.splitWidget.show(this.element);\n\n    const columns: DataGrid.DataGrid.ColumnDescriptor[] = this.getColumns();\n\n    this.dataGrid = new DataGrid.SortableDataGrid.SortableDataGrid({\n      displayName: dataGridDisplayName,\n      columns,\n      deleteCallback: undefined,\n      refreshCallback: undefined,\n    });\n    this.dataGrid.setRowContextMenuCallback(onRowContextMenu.bind(this));\n    this.dataGrid.setEnableAutoScrollToBottom(true);\n    this.dataGrid.setCellClass('resource-chunk-view-td');\n    this.timeComparator =\n        (resourceChunkNodeTimeComparator as\n             (arg0: DataGrid.SortableDataGrid.SortableDataGridNode<DataGridItem>,\n              arg1: DataGrid.SortableDataGrid.SortableDataGridNode<DataGridItem>) => number);\n    this.dataGrid.sortNodes(this.timeComparator, false);\n    this.dataGrid.markColumnAsSortedBy('time', DataGrid.DataGrid.Order.Ascending);\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SORTING_CHANGED, this.sortItems, this);\n\n    this.dataGrid.setName(splitWidgetSettingKey + '_datagrid');\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SELECTED_NODE, event => {\n      void this.onChunkSelected(event);\n    }, this);\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.DESELECTED_NODE, this.onChunkDeselected, this);\n\n    this.mainToolbar = document.createElement('devtools-toolbar');\n\n    this.clearAllButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clearAll), 'clear');\n    this.clearAllButton.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, this.clearChunks, this);\n    this.mainToolbar.appendToolbarItem(this.clearAllButton);\n\n    this.filterTypeCombobox =\n        new UI.Toolbar.ToolbarComboBox(this.updateFilterSetting.bind(this), i18nString(UIStrings.filter));\n    for (const filterItem of FILTER_TYPES) {\n      const option = this.filterTypeCombobox.createOption(filterItem.label(), filterItem.name);\n      this.filterTypeCombobox.addOption(option);\n    }\n    this.mainToolbar.appendToolbarItem(this.filterTypeCombobox);\n    this.filterType = null;\n\n    this.filterTextInput = new UI.Toolbar.ToolbarFilter(filterUsingRegexHint, 0.4);\n    this.filterTextInput.addEventListener(UI.Toolbar.ToolbarInput.Event.TEXT_CHANGED, this.updateFilterSetting, this);\n    const filter = this.messageFilterSetting.get();\n    if (filter) {\n      this.filterTextInput.setValue(filter);\n    }\n    this.filterRegex = null;\n    this.mainToolbar.appendToolbarItem(this.filterTextInput);\n\n    const mainContainer = new UI.Widget.VBox();\n    mainContainer.element.appendChild(this.mainToolbar);\n    this.dataGrid.asWidget().show(mainContainer.element);\n    mainContainer.setMinimumSize(0, 72);\n    this.splitWidget.setMainWidget(mainContainer);\n\n    this.frameEmptyWidget = new UI.EmptyWidget.EmptyWidget(\n        i18nString(UIStrings.noMessageSelected), i18nString(UIStrings.selectMessageToBrowseItsContent));\n    this.splitWidget.setSidebarWidget(this.frameEmptyWidget);\n\n    if (filter) {\n      this.applyFilter(filter);\n    }\n\n    function onRowContextMenu(\n        this: ResourceChunkView<Chunk>, contextMenu: UI.ContextMenu.ContextMenu,\n        genericNode: DataGrid.DataGrid.DataGridNode<unknown>): void {\n      const node = (genericNode as DataGridItem);\n      const binaryView = node.binaryView();\n      if (binaryView) {\n        binaryView.addCopyToContextMenu(contextMenu, i18nString(UIStrings.copyMessageD));\n      } else {\n        contextMenu.clipboardSection().appendItem(\n            i18nString(UIStrings.copyMessage),\n            Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText.bind(\n                Host.InspectorFrontendHost.InspectorFrontendHostInstance, node.data.data),\n            {jslogContext: 'copy'});\n      }\n      contextMenu.footerSection().appendItem(\n          i18nString(UIStrings.clearAllL), this.clearChunks.bind(this), {jslogContext: 'clear-all'});\n    }\n  }\n\n  getColumns(): DataGrid.DataGrid.ColumnDescriptor[] {\n    return [\n      {id: 'data', title: i18nString(UIStrings.data), sortable: false, weight: 88},\n      {\n        id: 'length',\n        title: i18nString(UIStrings.length),\n        sortable: false,\n        align: DataGrid.DataGrid.Align.RIGHT,\n        weight: 5,\n      },\n      {id: 'time', title: i18nString(UIStrings.time), sortable: true, weight: 7},\n    ] as DataGrid.DataGrid.ColumnDescriptor[];\n  }\n\n  chunkAdded(chunk: Chunk): void {\n    if (!this.chunkFilter(chunk)) {\n      return;\n    }\n    this.dataGrid.insertChild(this.createGridItem(chunk));\n  }\n\n  private clearChunks(): void {\n    // TODO(allada): actually remove frames from request.\n    clearChunkOffsets.set(this.request, this.getRequestChunks().length);\n    this.refresh();\n  }\n\n  private updateFilterSetting(): void {\n    const text = this.filterTextInput.value();\n    this.messageFilterSetting.set(text);\n    this.applyFilter(text);\n  }\n\n  private applyFilter(text: string): void {\n    const type = (this.filterTypeCombobox.selectedOption() as HTMLOptionElement).value;\n    if (text) {\n      try {\n        this.filterRegex = new RegExp(text, 'i');\n      } catch {\n        this.filterRegex = new RegExp(Platform.StringUtilities.escapeForRegExp(text), 'i');\n      }\n    } else {\n      this.filterRegex = null;\n    }\n    this.filterType = type === 'all' ? null : type;\n    this.refresh();\n  }\n\n  private async onChunkSelected(event: Common.EventTarget.EventTargetEvent<DataGrid.DataGrid.DataGridNode<unknown>>):\n      Promise<void> {\n    this.currentSelectedNode = (event.data as DataGridItem);\n    const content = this.currentSelectedNode.dataText();\n\n    const binaryView = this.currentSelectedNode.binaryView();\n    if (binaryView) {\n      this.splitWidget.setSidebarWidget(binaryView);\n      return;\n    }\n\n    const jsonView = await SourceFrame.JSONView.JSONView.createView(content);\n    if (jsonView) {\n      this.splitWidget.setSidebarWidget(jsonView);\n      return;\n    }\n\n    this.splitWidget.setSidebarWidget(new SourceFrame.ResourceSourceFrame.ResourceSourceFrame(\n        TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n            this.request.url(), this.request.resourceType(), content),\n        ''));\n  }\n\n  private onChunkDeselected(): void {\n    this.currentSelectedNode = null;\n    this.splitWidget.setSidebarWidget(this.frameEmptyWidget);\n  }\n\n  refresh(): void {\n    this.dataGrid.rootNode().removeChildren();\n\n    let chunks = this.getRequestChunks();\n    const offset = clearChunkOffsets.get(this.request) || 0;\n    chunks = chunks.slice(offset);\n    chunks = chunks.filter(this.chunkFilter.bind(this));\n    chunks.forEach(chunk => this.dataGrid.insertChild(this.createGridItem(chunk)));\n  }\n\n  private sortItems(): void {\n    this.dataGrid.sortNodes(this.timeComparator, !this.dataGrid.isSortOrderAscending());\n  }\n}\n\nconst FILTER_TYPES: UI.FilterBar.Item[] = [\n  {name: 'all', label: i18nLazyString(UIStrings.all), jslogContext: 'all'},\n  {name: 'send', label: i18nLazyString(UIStrings.send), jslogContext: 'send'},\n  {name: 'receive', label: i18nLazyString(UIStrings.receive), jslogContext: 'receive'},\n];\n\nexport abstract class DataGridItem extends DataGrid.SortableDataGrid.SortableDataGridNode<unknown> {\n  abstract binaryView(): BinaryResourceView|null;\n  abstract getTime(): number;\n  abstract dataText(): string;\n}\n\nfunction resourceChunkNodeTimeComparator(a: DataGridItem, b: DataGridItem): number {\n  return a.getTime() - b.getTime();\n}\n\nconst clearChunkOffsets = new WeakMap<SDK.NetworkRequest.NetworkRequest, number>();\n"]}