{"version":3,"file":"RequestBinaryResponseView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/network/RequestBinaryResponseView.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,SAAS,MAAM,uCAAuC,CAAC;AACnE,OAAO,KAAK,qBAAqB,MAAM,uDAAuD,CAAC;AAE/F;;GAEG;AACH,MAAM,OAAO,yBAA0B,SACnC,qBAAqB,CAAC,yBAAyB,CAAC,yBAAyB;IAClE,qBAAqB,CAAsD;IACpF,OAAO,CAA8B;IAErC,YAAY,oBAAyE;QACnF,MAAM,OAAO,GAAG,IAAI,2BAA2B,EAAE,CAAC;QAClD,KAAK,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,EAAE,sBAAsB,EAAE,wBAAwB,CAAC,IAAI,CAAC,CAAC;QACvF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;QAClD,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEQ,QAAQ;QACf,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,uEACY,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAE/E,6EAA6E;IAC/E,CAAC;IAEQ,QAAQ;QACf,KAAK,CAAC,QAAQ,EAAE,CAAC;QACjB,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,uEACS,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IACjF,CAAC;IAEQ,WAAW;QAClB,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,CAAC,CAAC;QACzE,KAAK,CAAC,WAAW,EAAE,CAAC;IACtB,CAAC;CACF;AAED;;;;;;;GAOG;AACH,MAAM,2BAA2B;IAC/B,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE9B,qBAAqB,CAAC,WAA8C;QAClE,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACrD,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAW,CAAC,CAAC;IAChF,CAAC;IAED,QAAQ,CAAC,KAAa,EAAE,GAAW;QACjC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;IACzD,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7B,CAAC;CACF","sourcesContent":["// Copyright (c) 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as LinearMemoryInspector from '../linear_memory_inspector/linear_memory_inspector.js';\n\n/**\n * Adapter for the linear memory inspector that can show a {@link StreamingContentData}.\n */\nexport class RequestBinaryResponseView extends\n    LinearMemoryInspector.LinearMemoryInspectorPane.LinearMemoryInspectorView {\n  readonly #streamingContentData: TextUtils.StreamingContentData.StreamingContentData;\n  #memory: ContentDataLazyArrayAdapter;\n\n  constructor(streamingContentData: TextUtils.StreamingContentData.StreamingContentData) {\n    const adapter = new ContentDataLazyArrayAdapter();\n    super(adapter, /* address */ 0, 'tabId is unused here', /* hideValueInspector */ true);\n    this.#memory = adapter;\n    this.#streamingContentData = streamingContentData;\n    this.refreshData();\n  }\n\n  override wasShown(): void {\n    this.refreshData();\n    this.#streamingContentData.addEventListener(\n        TextUtils.StreamingContentData.Events.CHUNK_ADDED, this.refreshData, this);\n\n    // No need to call super.wasShown() as we call super.refreshData() ourselves.\n  }\n\n  override willHide(): void {\n    super.willHide();\n    this.#streamingContentData.removeEventListener(\n        TextUtils.StreamingContentData.Events.CHUNK_ADDED, this.refreshData, this);\n  }\n\n  override refreshData(): void {\n    this.#memory.updateWithContentData(this.#streamingContentData.content());\n    super.refreshData();\n  }\n}\n\n/**\n * A small helper class that serves as the holder for the current content of a\n * {@link StreamingContentData} in the form of a Uint8Array.\n *\n * We can't implement the {@link LazyUint8Array} interface directly on\n * {@link RequestBinaryResponseView} as we can't pass \"this\" to the \"super\" constructor.\n * So this class acts as a small container cell instead.\n */\nclass ContentDataLazyArrayAdapter implements LinearMemoryInspector.LinearMemoryInspectorController.LazyUint8Array {\n  #memory = new Uint8Array([0]);\n\n  updateWithContentData(contentData: TextUtils.ContentData.ContentData): void {\n    const binaryString = window.atob(contentData.base64);\n    this.#memory = Uint8Array.from(binaryString, m => m.codePointAt(0) as number);\n  }\n\n  getRange(start: number, end: number): Promise<Uint8Array> {\n    return Promise.resolve(this.#memory.slice(start, end));\n  }\n\n  length(): number {\n    return this.#memory.length;\n  }\n}\n"]}