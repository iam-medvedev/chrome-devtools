{"version":3,"file":"explain-meta.js","sourceRoot":"","sources":["../../../../../../front_end/panels/explain/explain-meta.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as Console from '../../panels/console/console.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n   *@description Message to offer insights for a console error message\n   */\n  explainThisError: 'Explain this error',\n  /**\n   *@description Message to offer insights for a console warning message\n   */\n  explainThisWarning: 'Explain this warning',\n  /**\n   *@description Message to offer insights for a console message\n   */\n  explainThisMessage: 'Explain this message',\n  /**\n   * @description The setting title to enable the console insights feature via\n   * the settings tab.\n   */\n  enableConsoleInsights: 'Enable Console Insights',\n  /**\n   * @description Message shown to the user if the DevTools locale is not\n   * supported.\n   */\n  wrongLocale: 'Only English locales are currently supported.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/explain/explain-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst setting = 'console-insights-enabled';\n\nconst actions = [\n  {\n    actionId: 'explain.console-message.hover',\n    title: i18nLazyString(UIStrings.explainThisMessage),\n    contextTypes(): [typeof Console.ConsoleViewMessage.ConsoleViewMessage] {\n      return [Console.ConsoleViewMessage.ConsoleViewMessage];\n    },\n  },\n  {\n    actionId: 'explain.console-message.context.error',\n    title: i18nLazyString(UIStrings.explainThisError),\n    contextTypes(): [] {\n      return [];\n    },\n  },\n  {\n    actionId: 'explain.console-message.context.warning',\n    title: i18nLazyString(UIStrings.explainThisWarning),\n    contextTypes(): [] {\n      return [];\n    },\n  },\n  {\n    actionId: 'explain.console-message.context.other',\n    title: i18nLazyString(UIStrings.explainThisMessage),\n    contextTypes(): [] {\n      return [];\n    },\n  },\n];\n\nfunction isActionAvailable(): boolean {\n  return isLocaleAllowed() === true && isSettingAvailable();\n}\n\nfunction isSettingAvailable(): boolean {\n  return isFeatureEnabled();\n}\n\n/**\n * Additional checks for the availability of the feature event if enabled via\n * the server. Returns true if locale is supported, or a string containing the\n * reason why not.\n */\nfunction isLocaleAllowed(): true|string {\n  const devtoolsLocale = i18n.DevToolsLocale.DevToolsLocale.instance();\n  if (!devtoolsLocale.locale.startsWith('en-')) {\n    return i18nString(UIStrings.wrongLocale);\n  }\n\n  return true;\n}\n\nfunction isFeatureEnabled(): boolean {\n  return Root.Runtime.Runtime.queryParam('enableAida') === 'true';\n}\n\nCommon.Settings.registerSettingExtension({\n  category: Common.Settings.SettingCategory.CONSOLE,\n  settingName: setting,\n  settingType: Common.Settings.SettingType.BOOLEAN,\n  title: i18nLazyString(UIStrings.enableConsoleInsights),\n  defaultValue: true,\n  reloadRequired: true,\n  condition: isSettingAvailable,\n  disabledCondition: () => {\n    const localeCheck = isLocaleAllowed();\n    if (localeCheck !== true) {\n      return {disabled: true, reason: localeCheck};\n    }\n    return {disabled: false};\n  },\n});\n\nfor (const action of actions) {\n  UI.ActionRegistration.registerActionExtension({\n    ...action,\n    setting,\n    category: UI.ActionRegistration.ActionCategory.CONSOLE,\n    async loadActionDelegate() {\n      const Explain = await import('./explain.js');\n      return new Explain.ActionDelegate();\n    },\n    condition: isActionAvailable,\n  });\n}\n"]}