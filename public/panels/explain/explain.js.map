{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/explain/components/ConsoleInsight.ts", "../../../../../../front_end/panels/explain/PromptBuilder.ts", "components/consoleInsight.css.js", "components/consoleInsightSourcesList.css.js", "../../../../../../front_end/panels/explain/ActionDelegate.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport '../../../ui/components/spinners/spinners.js';\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as Root from '../../../core/root/root.js';\nimport * as Marked from '../../../third_party/marked/marked.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport type * as IconButton from '../../../ui/components/icon_button/icon_button.js';\nimport * as Input from '../../../ui/components/input/input.js';\nimport * as MarkdownView from '../../../ui/components/markdown_view/markdown_view.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as Lit from '../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\nimport {type PromptBuilder, type Source, SourceType} from '../PromptBuilder.js';\n\nimport styles from './consoleInsight.css.js';\nimport listStyles from './consoleInsightSourcesList.css.js';\n\n// Note: privacy and legal notices are not localized so far.\nconst UIStrings = {\n  /**\n   * @description The title of the insight source \"Console message\".\n   */\n  consoleMessage: 'Console message',\n  /**\n   * @description The title of the insight source \"Stacktrace\".\n   */\n  stackTrace: 'Stacktrace',\n  /**\n   * @description The title of the insight source \"Network request\".\n   */\n  networkRequest: 'Network request',\n  /**\n   * @description The title of the insight source \"Related code\".\n   */\n  relatedCode: 'Related code',\n  /**\n   * @description The title that is shown while the insight is being generated.\n   */\n  generating: 'Generating explanation…',\n  /**\n   * @description The header that indicates that the content shown is a console\n   * insight.\n   */\n  insight: 'Explanation',\n  /**\n   * @description The title of the a button that closes the insight pane.\n   */\n  closeInsight: 'Close explanation',\n  /**\n   * @description The title of the list of source data that was used to generate the insight.\n   */\n  inputData: 'Data used to understand this message',\n  /**\n   * @description The title of the button that allows submitting positive\n   * feedback about the console insight.\n   */\n  goodResponse: 'Good response',\n  /**\n   * @description The title of the button that allows submitting negative\n   * feedback about the console insight.\n   */\n  badResponse: 'Bad response',\n  /**\n   * @description The title of the button that opens a page to report a legal\n   * issue with the console insight.\n   */\n  report: 'Report legal issue',\n  /**\n   * @description The text of the header inside the console insight pane when there was an error generating an insight.\n   */\n  error: 'DevTools has encountered an error',\n  /**\n   * @description The message shown when an error has been encountered.\n   */\n  errorBody: 'Something went wrong. Try again.',\n  /**\n   * @description Label for screen readers that is added to the end of the link\n   * title to indicate that the link will be opened in a new tab.\n   */\n  opensInNewTab: '(opens in a new tab)',\n  /**\n   * @description The title of a link that allows the user to learn more about\n   * the feature.\n   */\n  learnMore: 'Learn more',\n  /**\n   * @description The error message when the user is not logged in into Chrome.\n   */\n  notLoggedIn: 'This feature is only available when you sign into Chrome with your Google account.',\n  /**\n   * @description The title of a button which opens the Chrome SignIn page.\n   */\n  signIn: 'Sign in',\n  /**\n   * @description The header shown when the internet connection is not\n   * available.\n   */\n  offlineHeader: 'DevTools can’t reach the internet',\n  /**\n   * @description Message shown when the user is offline.\n   */\n  offline: 'Check your internet connection and try again.',\n  /**\n   * @description The message shown if the user is not logged in.\n   */\n  signInToUse: 'Sign in to use this feature',\n  /**\n   * @description The title of the button that searches for the console\n   * insight using a search engine instead of using console insights.\n   */\n  search: 'Use search instead',\n  /**\n   * @description Shown to the user when the network request data is not\n   * available and a page reload might populate it.\n   */\n  reloadRecommendation:\n      'Reload the page to capture related network request data for this message in order to create a better insight.',\n  /**\n   * @description Shown to the user when they need to enable the console insights feature in settings in order to use it.\n   * @example {Console insights in Settings} PH1\n   */\n  turnOnInSettings:\n      'Turn on {PH1} to receive AI assistance for understanding and addressing console warnings and errors.',\n  /**\n   * @description Text for a link to Chrome DevTools Settings.\n   */\n  settingsLink: '`Console insights` in Settings',\n  /**\n   * @description The title of the list of references/recitations that were used to generate the insight.\n   */\n  references: 'Sources and related content',\n  /**\n   * @description Sub-heading for a list of links to URLs which are related to the AI-generated response.\n   */\n  relatedContent: 'Related content',\n  /**\n   * @description Error message shown when the request to get an AI response times out.\n   */\n  timedOut: 'Generating a response took too long. Please try again.',\n  /**\n   *@description Text informing the user that AI assistance is not available in Incognito mode or Guest mode.\n   */\n  notAvailableInIncognitoMode: 'AI assistance is not available in Incognito mode or Guest mode',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/explain/components/ConsoleInsight.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nTemplate = Lit.i18nTemplate.bind(undefined, str_);\n\nconst {render, html, Directives} = Lit;\n\nexport class CloseEvent extends Event {\n  static readonly eventName = 'close';\n\n  constructor() {\n    super(CloseEvent.eventName, {composed: true, bubbles: true});\n  }\n}\n\ntype PublicPromptBuilder = Pick<PromptBuilder, 'buildPrompt'|'getSearchQuery'>;\ntype PublicAidaClient = Pick<Host.AidaClient.AidaClient, 'fetch'|'registerClientEvent'>;\n\nfunction localizeType(sourceType: SourceType): string {\n  switch (sourceType) {\n    case SourceType.MESSAGE:\n      return i18nString(UIStrings.consoleMessage);\n    case SourceType.STACKTRACE:\n      return i18nString(UIStrings.stackTrace);\n    case SourceType.NETWORK_REQUEST:\n      return i18nString(UIStrings.networkRequest);\n    case SourceType.RELATED_CODE:\n      return i18nString(UIStrings.relatedCode);\n  }\n}\n\nconst TERMS_OF_SERVICE_URL = 'https://policies.google.com/terms';\nconst PRIVACY_POLICY_URL = 'https://policies.google.com/privacy';\nconst CODE_SNIPPET_WARNING_URL = 'https://support.google.com/legal/answer/13505487';\nconst LEARN_MORE_URL = 'https://goo.gle/devtools-console-messages-ai' as Platform.DevToolsPath.UrlString;\nconst REPORT_URL = 'https://support.google.com/legal/troubleshooter/1114905?hl=en#ts=1115658%2C13380504' as\n    Platform.DevToolsPath.UrlString;\nconst SIGN_IN_URL = 'https://accounts.google.com' as Platform.DevToolsPath.UrlString;\n\nconst enum State {\n  INSIGHT = 'insight',\n  LOADING = 'loading',\n  ERROR = 'error',\n  SETTING_IS_NOT_TRUE = 'setting-is-not-true',\n  CONSENT_REMINDER = 'consent-reminder',\n  NOT_LOGGED_IN = 'not-logged-in',\n  SYNC_IS_PAUSED = 'sync-is-paused',\n  OFFLINE = 'offline',\n}\n\ntype StateData = {\n  type: State.LOADING,\n  consentOnboardingCompleted: boolean,\n}|{\n  type: State.INSIGHT,\n  tokens: MarkdownView.MarkdownView.MarkdownViewData['tokens'],\n  validMarkdown: boolean,\n  sources: Source[],\n  isPageReloadRecommended: boolean,\n  completed: boolean,\n  directCitationUrls: string[],\n  timedOut?: boolean,\n}&Host.AidaClient.AidaResponse|{\n  type: State.ERROR,\n  error: string,\n}|{\n  type: State.CONSENT_REMINDER,\n  sources: Source[],\n  isPageReloadRecommended: boolean,\n}|{\n  type: State.SETTING_IS_NOT_TRUE,\n}|{\n  type: State.NOT_LOGGED_IN,\n}|{\n  type: State.SYNC_IS_PAUSED,\n}|{\n  type: State.OFFLINE,\n};\n\nconst markedExtension = {\n  name: 'citation',\n  level: 'inline',\n  start(src: string) {\n    return src.match(/\\[\\^/)?.index;\n  },\n  tokenizer(src: string) {\n    const match = src.match(/^\\[\\^(\\d+)\\]/);\n    if (match) {\n      return {\n        type: 'citation',\n        raw: match[0],\n        linkText: Number(match[1]),\n      };\n    }\n    return false;\n  },\n  renderer: () => '',\n};\n\nexport class ConsoleInsight extends HTMLElement {\n  static async create(promptBuilder: PublicPromptBuilder, aidaClient: PublicAidaClient): Promise<ConsoleInsight> {\n    const aidaAvailability = await Host.AidaClient.AidaClient.checkAccessPreconditions();\n    return new ConsoleInsight(promptBuilder, aidaClient, aidaAvailability);\n  }\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  disableAnimations = false;\n\n  #promptBuilder: PublicPromptBuilder;\n  #aidaClient: PublicAidaClient;\n  #renderer: MarkdownView.MarkdownView.MarkdownInsightRenderer;\n\n  // Main state.\n  #state: StateData;\n  #referenceDetailsRef = Lit.Directives.createRef<HTMLDetailsElement>();\n  #areReferenceDetailsOpen = false;\n\n  // Rating sub-form state.\n  #selectedRating?: boolean;\n\n  #consoleInsightsEnabledSetting: Common.Settings.Setting<boolean>|undefined;\n  #aidaAvailability: Host.AidaClient.AidaAccessPreconditions;\n  #boundOnAidaAvailabilityChange: () => Promise<void>;\n  #marked: Marked.Marked.Marked;\n\n  constructor(\n      promptBuilder: PublicPromptBuilder, aidaClient: PublicAidaClient,\n      aidaAvailability: Host.AidaClient.AidaAccessPreconditions) {\n    super();\n    this.#promptBuilder = promptBuilder;\n    this.#aidaClient = aidaClient;\n    this.#aidaAvailability = aidaAvailability;\n    this.#consoleInsightsEnabledSetting = this.#getConsoleInsightsEnabledSetting();\n    this.#renderer = new MarkdownView.MarkdownView.MarkdownInsightRenderer(this.#citationClickHandler.bind(this));\n    this.#marked = new Marked.Marked.Marked({extensions: [markedExtension]});\n\n    this.#state = this.#getStateFromAidaAvailability();\n    this.#boundOnAidaAvailabilityChange = this.#onAidaAvailabilityChange.bind(this);\n    this.#render();\n    // Stop keyboard event propagation to avoid Console acting on the events\n    // inside the insight component.\n    this.addEventListener('keydown', e => {\n      e.stopPropagation();\n    });\n    this.addEventListener('keyup', e => {\n      e.stopPropagation();\n    });\n    this.addEventListener('keypress', e => {\n      e.stopPropagation();\n    });\n    this.addEventListener('click', e => {\n      e.stopPropagation();\n    });\n    this.focus();\n  }\n\n  #citationClickHandler(index: number): void {\n    if (this.#state.type !== State.INSIGHT || !this.#referenceDetailsRef.value) {\n      return;\n    }\n    const areDetailsAlreadyExpanded = this.#referenceDetailsRef.value.open;\n    this.#areReferenceDetailsOpen = true;\n    this.#render();\n\n    const highlightedElement =\n        this.#shadow.querySelector(`.sources-list x-link[data-index=\"${index}\"]`) as HTMLElement | null;\n    if (highlightedElement) {\n      UI.UIUtils.runCSSAnimationOnce(highlightedElement, 'highlighted');\n      if (areDetailsAlreadyExpanded) {\n        highlightedElement.scrollIntoView({behavior: 'auto'});\n        highlightedElement.focus();\n      } else {  // Wait for the details element to open before scrolling.\n        this.#referenceDetailsRef.value.addEventListener('transitionend', () => {\n          highlightedElement.scrollIntoView({behavior: 'auto'});\n          highlightedElement.focus();\n        }, {once: true});\n      }\n    }\n  }\n\n  #getStateFromAidaAvailability(): StateData {\n    switch (this.#aidaAvailability) {\n      case Host.AidaClient.AidaAccessPreconditions.AVAILABLE: {\n        // Allows skipping the consent reminder if the user enabled the feature via settings in the current session\n        const skipReminder =\n            Common.Settings.Settings.instance()\n                .createSetting('console-insights-skip-reminder', false, Common.Settings.SettingStorageType.SESSION)\n                .get();\n        return {\n          type: State.LOADING,\n          consentOnboardingCompleted: this.#getOnboardingCompletedSetting().get() || skipReminder,\n        };\n      }\n      case Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL:\n        return {\n          type: State.NOT_LOGGED_IN,\n        };\n      case Host.AidaClient.AidaAccessPreconditions.SYNC_IS_PAUSED:\n        return {\n          type: State.SYNC_IS_PAUSED,\n        };\n      case Host.AidaClient.AidaAccessPreconditions.NO_INTERNET:\n        return {\n          type: State.OFFLINE,\n        };\n    }\n  }\n\n  // off -> entrypoints are shown, and point to the AI setting panel where the setting can be turned on\n  // on -> entrypoints are shown, and console insights can be generated\n  #getConsoleInsightsEnabledSetting(): Common.Settings.Setting<boolean>|undefined {\n    try {\n      return Common.Settings.moduleSetting('console-insights-enabled') as Common.Settings.Setting<boolean>;\n    } catch {\n      return;\n    }\n  }\n\n  // off -> consent reminder is shown, unless the 'console-insights-enabled'-setting has been enabled in the current DevTools session\n  // on -> no consent reminder shown\n  #getOnboardingCompletedSetting(): Common.Settings.Setting<boolean> {\n    return Common.Settings.Settings.instance().createLocalSetting('console-insights-onboarding-finished', false);\n  }\n\n  connectedCallback(): void {\n    this.classList.add('opening');\n    this.#consoleInsightsEnabledSetting?.addChangeListener(this.#onConsoleInsightsSettingChanged, this);\n    const blockedByAge = Root.Runtime.hostConfig.aidaAvailability?.blockedByAge === true;\n    if (this.#state.type === State.LOADING && this.#consoleInsightsEnabledSetting?.getIfNotDisabled() === true &&\n        !blockedByAge && this.#state.consentOnboardingCompleted) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.GeneratingInsightWithoutDisclaimer);\n    }\n    Host.AidaClient.HostConfigTracker.instance().addEventListener(\n        Host.AidaClient.Events.AIDA_AVAILABILITY_CHANGED, this.#boundOnAidaAvailabilityChange);\n    // If AIDA availability has changed while the component was disconnected, we need to update.\n    void this.#onAidaAvailabilityChange();\n    // The setting might have been turned on/off while the component was disconnected.\n    // Update the state, unless the current state is already terminal (`INSIGHT` or `ERROR`).\n    if (this.#state.type !== State.INSIGHT && this.#state.type !== State.ERROR) {\n      this.#state = this.#getStateFromAidaAvailability();\n    }\n    void this.#generateInsightIfNeeded();\n  }\n\n  disconnectedCallback(): void {\n    this.#consoleInsightsEnabledSetting?.removeChangeListener(this.#onConsoleInsightsSettingChanged, this);\n    Host.AidaClient.HostConfigTracker.instance().removeEventListener(\n        Host.AidaClient.Events.AIDA_AVAILABILITY_CHANGED, this.#boundOnAidaAvailabilityChange);\n  }\n\n  async #onAidaAvailabilityChange(): Promise<void> {\n    const currentAidaAvailability = await Host.AidaClient.AidaClient.checkAccessPreconditions();\n    if (currentAidaAvailability !== this.#aidaAvailability) {\n      this.#aidaAvailability = currentAidaAvailability;\n      this.#state = this.#getStateFromAidaAvailability();\n      void this.#generateInsightIfNeeded();\n    }\n  }\n\n  #onConsoleInsightsSettingChanged(): void {\n    if (this.#consoleInsightsEnabledSetting?.getIfNotDisabled() === true) {\n      this.#getOnboardingCompletedSetting().set(true);\n    }\n    if (this.#state.type === State.SETTING_IS_NOT_TRUE &&\n        this.#consoleInsightsEnabledSetting?.getIfNotDisabled() === true) {\n      this.#transitionTo({\n        type: State.LOADING,\n        consentOnboardingCompleted: true,\n      });\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsOptInTeaserConfirmedInSettings);\n      void this.#generateInsightIfNeeded();\n    }\n    if (this.#state.type === State.CONSENT_REMINDER &&\n        this.#consoleInsightsEnabledSetting?.getIfNotDisabled() === false) {\n      this.#transitionTo({\n        type: State.LOADING,\n        consentOnboardingCompleted: false,\n      });\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsReminderTeaserAbortedInSettings);\n      void this.#generateInsightIfNeeded();\n    }\n  }\n\n  #transitionTo(newState: StateData): void {\n    const previousState = this.#state;\n    this.#state = newState;\n    this.#render();\n    if (newState.type !== previousState.type) {\n      this.#focusHeader();\n    }\n  }\n\n  async #generateInsightIfNeeded(): Promise<void> {\n    if (this.#state.type !== State.LOADING) {\n      return;\n    }\n    const blockedByAge = Root.Runtime.hostConfig.aidaAvailability?.blockedByAge === true;\n    if (this.#consoleInsightsEnabledSetting?.getIfNotDisabled() !== true || blockedByAge) {\n      this.#transitionTo({\n        type: State.SETTING_IS_NOT_TRUE,\n      });\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsOptInTeaserShown);\n      return;\n    }\n    if (!this.#state.consentOnboardingCompleted) {\n      const {sources, isPageReloadRecommended} = await this.#promptBuilder.buildPrompt();\n      this.#transitionTo({\n        type: State.CONSENT_REMINDER,\n        sources,\n        isPageReloadRecommended,\n      });\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsReminderTeaserShown);\n      return;\n    }\n    await this.#generateInsight();\n  }\n\n  #onClose(): void {\n    if (this.#state.type === State.CONSENT_REMINDER) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsReminderTeaserCanceled);\n    }\n    this.shadowRoot?.addEventListener('animationend', () => {\n      this.dispatchEvent(new CloseEvent());\n    }, {once: true});\n    this.classList.add('closing');\n  }\n\n  #onRating(event: Event): void {\n    if (this.#state.type !== State.INSIGHT) {\n      throw new Error('Unexpected state');\n    }\n    if (this.#state.metadata?.rpcGlobalId === undefined) {\n      throw new Error('RPC Id not in metadata');\n    }\n    // If it was rated, do not record again.\n    if (this.#selectedRating !== undefined) {\n      return;\n    }\n\n    this.#selectedRating = (event.target as HTMLElement).dataset.rating === 'true';\n    this.#render();\n    if (this.#selectedRating) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightRatedPositive);\n    } else {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightRatedNegative);\n    }\n    const disallowLogging = Root.Runtime.hostConfig.aidaAvailability?.disallowLogging ?? true;\n    void this.#aidaClient.registerClientEvent({\n      corresponding_aida_rpc_global_id: this.#state.metadata.rpcGlobalId,\n      disable_user_content_logging: disallowLogging,\n      do_conversation_client_event: {\n        user_feedback: {\n          sentiment: this.#selectedRating ? Host.AidaClient.Rating.POSITIVE : Host.AidaClient.Rating.NEGATIVE,\n        },\n      },\n    });\n  }\n\n  #onReport(): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(REPORT_URL);\n  }\n\n  #onSearch(): void {\n    const query = this.#promptBuilder.getSearchQuery();\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.openSearchResultsInNewTab(query);\n  }\n\n  async #onConsentReminderConfirmed(): Promise<void> {\n    this.#getOnboardingCompletedSetting().set(true);\n    this.#transitionTo({\n      type: State.LOADING,\n      consentOnboardingCompleted: true,\n    });\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsReminderTeaserConfirmed);\n    await this.#generateInsight();\n  }\n\n  #insertCitations(explanation: string, metadata: Host.AidaClient.AidaResponseMetadata):\n      {explanationWithCitations: string, directCitationUrls: string[]} {\n    const directCitationUrls: string[] = [];\n    if (!this.#isSearchRagResponse(metadata) || !metadata.attributionMetadata) {\n      return {explanationWithCitations: explanation, directCitationUrls};\n    }\n\n    const {attributionMetadata} = metadata;\n    const sortedCitations =\n        attributionMetadata.citations\n            .filter(citation => citation.sourceType === Host.AidaClient.CitationSourceType.WORLD_FACTS)\n            .sort((a, b) => (b.endIndex || 0) - (a.endIndex || 0));\n    let explanationWithCitations = explanation;\n    for (const [index, citation] of sortedCitations.entries()) {\n      // Matches optional punctuation mark followed by whitespace.\n      // Ensures citation is placed at the end of a word.\n      const myRegex = /[.,:;!?]*\\s/g;\n      myRegex.lastIndex = citation.endIndex || 0;\n      const result = myRegex.exec(explanationWithCitations);\n      if (result && citation.uri) {\n        explanationWithCitations = explanationWithCitations.slice(0, result.index) +\n            `[^${sortedCitations.length - index}]` + explanationWithCitations.slice(result.index);\n        directCitationUrls.push(citation.uri);\n      }\n    }\n\n    directCitationUrls.reverse();\n    return {explanationWithCitations, directCitationUrls};\n  }\n\n  #modifyTokensToHandleCitationsInCode(tokens: Marked.Marked.TokensList): void {\n    for (const token of tokens) {\n      if (token.type === 'code') {\n        // Find and remove '[^number]' from within code block\n        const matches: String[]|null = token.text.match(/\\[\\^\\d+\\]/g);\n        token.text = token.text.replace(/\\[\\^\\d+\\]/g, '');\n        // And add as a citation for the whole code block\n        if (matches?.length) {\n          const citations = matches.map(match => {\n            const index = parseInt(match.slice(2, -1), 10);\n            return {\n              index,\n              clickHandler: this.#citationClickHandler.bind(this, index),\n            };\n          });\n          (token as MarkdownView.MarkdownView.CodeTokenWithCitation).citations = citations;\n        }\n      }\n    }\n  }\n\n  async #generateInsight(): Promise<void> {\n    try {\n      for await (const {sources, isPageReloadRecommended, explanation, metadata, completed} of this.#getInsight()) {\n        const {explanationWithCitations, directCitationUrls} = this.#insertCitations(explanation, metadata);\n        const tokens = this.#validateMarkdown(explanationWithCitations);\n        const valid = tokens !== false;\n        if (valid) {\n          this.#modifyTokensToHandleCitationsInCode(tokens);\n        }\n        this.#transitionTo({\n          type: State.INSIGHT,\n          tokens: valid ? tokens : [],\n          validMarkdown: valid,\n          explanation,\n          sources,\n          metadata,\n          isPageReloadRecommended,\n          completed,\n          directCitationUrls,\n        });\n      }\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightGenerated);\n    } catch (err) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErrored);\n      if (err.message === 'doAidaConversation timed out' && this.#state.type === State.INSIGHT) {\n        this.#state.timedOut = true;\n        this.#transitionTo({...this.#state, completed: true, timedOut: true});\n      } else {\n        this.#transitionTo({\n          type: State.ERROR,\n          error: err.message,\n        });\n      }\n    }\n  }\n\n  /**\n   * Validates the markdown by trying to render it.\n   */\n  #validateMarkdown(text: string): Marked.Marked.TokensList|false {\n    try {\n      const tokens = this.#marked.lexer(text);\n      for (const token of tokens) {\n        this.#renderer.renderToken(token);\n      }\n      return tokens;\n    } catch {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredMarkdown);\n      return false;\n    }\n  }\n\n  async *\n      #getInsight(): AsyncGenerator<\n          {sources: Source[], isPageReloadRecommended: boolean}&Host.AidaClient.AidaResponse, void, void> {\n    const {prompt, sources, isPageReloadRecommended} = await this.#promptBuilder.buildPrompt();\n    try {\n      for await (\n          const response of this.#aidaClient.fetch(Host.AidaClient.AidaClient.buildConsoleInsightsRequest(prompt))) {\n        yield {sources, isPageReloadRecommended, ...response};\n      }\n    } catch (err) {\n      if (err.message === 'Server responded: permission denied') {\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredPermissionDenied);\n      } else if (err.message.startsWith('Cannot send request:')) {\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredCannotSend);\n      } else if (err.message.startsWith('Request failed:')) {\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredRequestFailed);\n      } else if (err.message.startsWith('Cannot parse chunk:')) {\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredCannotParseChunk);\n      } else if (err.message === 'Unknown chunk result') {\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredUnknownChunk);\n      } else if (err.message.startsWith('Server responded:')) {\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredApi);\n      } else {\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightErroredOther);\n      }\n      throw err;\n    }\n  }\n\n  #onGoToSignIn(): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(SIGN_IN_URL);\n  }\n\n  #focusHeader(): void {\n    this.addEventListener('animationend', () => {\n      (this.#shadow.querySelector('header h2') as HTMLElement | undefined)?.focus();\n    }, {once: true});\n  }\n\n  #renderSearchButton(): Lit.TemplateResult {\n    // clang-format off\n    return html`<devtools-button\n      @click=${this.#onSearch}\n      class=\"search-button\"\n      .data=${\n        {\n          variant: Buttons.Button.Variant.OUTLINED,\n          jslogContext: 'search',\n        } as Buttons.Button.ButtonData\n      }\n    >\n      ${i18nString(UIStrings.search)}\n    </devtools-button>`;\n    // clang-format on\n  }\n\n  #renderLearnMoreAboutInsights(): Lit.TemplateResult {\n    // clang-format off\n    return html`<x-link href=${LEARN_MORE_URL} class=\"link\" jslog=${VisualLogging.link('learn-more').track({click: true})}>\n      ${i18nString(UIStrings.learnMore)}\n    </x-link>`;\n    // clang-format on\n  }\n\n  #maybeRenderSources(): Lit.LitTemplate {\n    if (this.#state.type !== State.INSIGHT || !this.#state.directCitationUrls.length) {\n      return Lit.nothing;\n    }\n\n    // clang-format off\n    return html`\n      <ol class=\"sources-list\">\n        ${this.#state.directCitationUrls.map((url, index) => html`\n          <li>\n            <x-link\n              href=${url}\n              class=\"link\"\n              data-index=${index + 1}\n              jslog=${VisualLogging.link('references.console-insights').track({click: true})}\n            >\n              ${url}\n            </x-link>\n          </li>\n        `)}\n      </ol>\n    `;\n    // clang-format on\n  }\n\n  #maybeRenderRelatedContent(): Lit.LitTemplate {\n    if (this.#state.type !== State.INSIGHT || !this.#state.metadata.factualityMetadata?.facts.length) {\n      return Lit.nothing;\n    }\n    const directCitationUrls = this.#state.directCitationUrls;\n    const relatedUrls = this.#state.metadata.factualityMetadata.facts\n                            .filter(fact => fact.sourceUri && !directCitationUrls.includes(fact.sourceUri))\n                            .map(fact => fact.sourceUri as string);\n    const trainingDataUrls =\n        this.#state.metadata.attributionMetadata?.citations\n            .filter(\n                citation => citation.sourceType === Host.AidaClient.CitationSourceType.TRAINING_DATA &&\n                    (citation.uri || citation.repository))\n            .map(citation => citation.uri || `https://www.github.com/${citation.repository}`) ||\n        [];\n    const dedupedTrainingDataUrls =\n        [...new Set(trainingDataUrls.filter(url => !relatedUrls.includes(url) && !directCitationUrls.includes(url)))];\n    relatedUrls.push(...dedupedTrainingDataUrls);\n\n    if (relatedUrls.length === 0) {\n      return Lit.nothing;\n    }\n    // clang-format off\n    return html`\n      ${this.#state.directCitationUrls.length ? html`<h3>${i18nString(UIStrings.relatedContent)}</h3>` : Lit.nothing}\n      <ul class=\"references-list\">\n        ${relatedUrls.map(relatedUrl => html`\n          <li>\n            <x-link\n              href=${relatedUrl}\n              class=\"link\"\n              jslog=${VisualLogging.link('references.console-insights').track({click: true})}\n            >\n              ${relatedUrl}\n            </x-link>\n          </li>\n        `)}\n      </ul>\n    `;\n    // clang-format on\n  }\n\n  #isSearchRagResponse(metadata: Host.AidaClient.AidaResponseMetadata): boolean {\n    return Boolean(metadata.factualityMetadata?.facts.length);\n  }\n\n  #onToggleReferenceDetails(): void {\n    if (this.#referenceDetailsRef.value) {\n      this.#areReferenceDetailsOpen = this.#referenceDetailsRef.value.open;\n    }\n  }\n\n  #renderMain(): Lit.TemplateResult {\n    const jslog = `${VisualLogging.section(this.#state.type).track({resize: true})}`;\n    const noLogging = Root.Runtime.hostConfig.aidaAvailability?.enterprisePolicyValue ===\n        Root.Runtime.GenAiEnterprisePolicyValue.ALLOW_WITHOUT_LOGGING;\n\n    // clang-format off\n    switch (this.#state.type) {\n      case State.LOADING:\n        return html`<main jslog=${jslog}>\n            <div role=\"presentation\" aria-label=\"Loading\" class=\"loader\" style=\"clip-path: url('#clipPath');\">\n              <svg width=\"100%\" height=\"64\">\n                <clipPath id=\"clipPath\">\n                  <rect x=\"0\" y=\"0\" width=\"100%\" height=\"16\" rx=\"8\"></rect>\n                  <rect x=\"0\" y=\"24\" width=\"100%\" height=\"16\" rx=\"8\"></rect>\n                  <rect x=\"0\" y=\"48\" width=\"100%\" height=\"16\" rx=\"8\"></rect>\n                </clipPath>\n              </svg>\n            </div>\n          </main>`;\n      case State.INSIGHT:\n        return html`\n        <main jslog=${jslog}>\n          ${\n            this.#state.validMarkdown ? html`<devtools-markdown-view\n              .data=${{tokens: this.#state.tokens, renderer: this.#renderer, animationEnabled: !this.disableAnimations} as MarkdownView.MarkdownView.MarkdownViewData}>\n            </devtools-markdown-view>`: this.#state.explanation\n          }\n          ${this.#state.timedOut ? html`<p class=\"error-message\">${i18nString(UIStrings.timedOut)}</p>` : Lit.nothing}\n          ${this.#isSearchRagResponse(this.#state.metadata) ? html`\n            <details class=\"references\" ${Lit.Directives.ref(this.#referenceDetailsRef)} @toggle=${this.#onToggleReferenceDetails} jslog=${VisualLogging.expand('references').track({click: true})}>\n              <summary>${i18nString(UIStrings.references)}</summary>\n              ${this.#maybeRenderSources()}\n              ${this.#maybeRenderRelatedContent()}\n            </details>\n          ` : Lit.nothing}\n          <details jslog=${VisualLogging.expand('sources').track({click: true})}>\n            <summary>${i18nString(UIStrings.inputData)}</summary>\n            <devtools-console-insight-sources-list .sources=${this.#state.sources} .isPageReloadRecommended=${this.#state.isPageReloadRecommended}>\n            </devtools-console-insight-sources-list>\n          </details>\n          <div class=\"buttons\">\n            ${this.#renderSearchButton()}\n          </div>\n        </main>`;\n      case State.ERROR:\n        return html`\n        <main jslog=${jslog}>\n          <div class=\"error\">${i18nString(UIStrings.errorBody)}</div>\n        </main>`;\n      case State.CONSENT_REMINDER:\n        return html`\n          <main class=\"reminder-container\" jslog=${jslog}>\n            <h3>Things to consider</h3>\n            <div class=\"reminder-items\">\n              <div>\n                <devtools-icon .data=${{\n                  iconName: 'google',\n                  width: 'var(--sys-size-8)',\n                  height: 'var(--sys-size-8)',\n                } as IconButton.Icon.IconData}>\n                </devtools-icon>\n              </div>\n              <div>The console message, associated stack trace, related source code, and the associated network headers are sent to Google to generate explanations. ${noLogging\n                  ? 'The content you submit and that is generated by this feature will not be used to improve Google’s AI models.'\n                  : 'This data may be seen by human reviewers to improve this feature. Avoid sharing sensitive or personal information.'}\n              </div>\n              <div>\n                <devtools-icon .data=${{\n                  iconName: 'policy',\n                  width: 'var(--sys-size-8)',\n                  height: 'var(--sys-size-8)',\n                } as IconButton.Icon.IconData}>\n                </devtools-icon>\n              </div>\n              <div>Use of this feature is subject to the <x-link\n                  href=${TERMS_OF_SERVICE_URL}\n                  class=\"link\"\n                  jslog=${VisualLogging.link('terms-of-service.console-insights').track({click: true})}>\n                Google Terms of Service\n                </x-link> and <x-link\n                  href=${PRIVACY_POLICY_URL}\n                  class=\"link\"\n                  jslog=${VisualLogging.link('privacy-policy.console-insights').track({click: true})}>\n                Google Privacy Policy\n                </x-link>\n              </div>\n              <div>\n                <devtools-icon .data=${{\n                  iconName: 'warning',\n                  width: 'var(--sys-size-8)',\n                  height: 'var(--sys-size-8)',\n                } as IconButton.Icon.IconData}>\n                </devtools-icon>\n              </div>\n              <div>\n                <x-link\n                  href=${CODE_SNIPPET_WARNING_URL}\n                  class=\"link\"\n                  jslog=${VisualLogging.link('code-snippets-explainer.console-insights').track({click: true})}\n                >Use generated code snippets with caution</x-link>\n              </div>\n            </div>\n          </main>\n        `;\n      case State.SETTING_IS_NOT_TRUE: {\n        const settingsLink = html`<button\n            class=\"link\" role=\"link\"\n            jslog=${VisualLogging.action('open-ai-settings').track({click: true})}\n            @click=${() => {\n              Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsOptInTeaserSettingsLinkClicked);\n              void UI.ViewManager.ViewManager.instance().showView('chrome-ai');\n            }}\n          >${i18nString(UIStrings.settingsLink)}</button>`;\n\n        return html`<main class=\"opt-in-teaser\" jslog=${jslog}>\n          <div class=\"badge\">\n            <devtools-icon .data=${{\n              iconName: 'lightbulb-spark',\n              width: 'var(--sys-size-8)',\n              height: 'var(--sys-size-8)',\n            } as IconButton.Icon.IconData}>\n            </devtools-icon>\n          </div>\n          <div>\n            ${i18nTemplate(UIStrings.turnOnInSettings, {PH1: settingsLink})} ${\n            this.#renderLearnMoreAboutInsights()}\n          </div>\n        </main>`;\n      }\n      case State.NOT_LOGGED_IN:\n      case State.SYNC_IS_PAUSED:\n        return html`\n          <main jslog=${jslog}>\n            <div class=\"error\">${Root.Runtime.hostConfig.isOffTheRecord ? i18nString(UIStrings.notAvailableInIncognitoMode) : i18nString(UIStrings.notLoggedIn)}</div>\n          </main>`;\n      case State.OFFLINE:\n        return html`\n          <main jslog=${jslog}>\n            <div class=\"error\">${i18nString(UIStrings.offline)}</div>\n          </main>`;\n    }\n    // clang-format on\n  }\n\n  #renderDisclaimer(): Lit.LitTemplate {\n    const noLogging = Root.Runtime.hostConfig.aidaAvailability?.enterprisePolicyValue ===\n        Root.Runtime.GenAiEnterprisePolicyValue.ALLOW_WITHOUT_LOGGING;\n\n    // clang-format off\n    return html`<span>\n      AI tools may generate inaccurate info that doesn't represent Google's views. ${noLogging\n        ? 'The content you submit and that is generated by this feature will not be used to improve Google’s AI models.'\n        : 'Data sent to Google may be seen by human reviewers to improve this feature.'\n      } <button class=\"link\" role=\"link\" @click=${() => UI.ViewManager.ViewManager.instance().showView('chrome-ai')}\n                jslog=${VisualLogging.action('open-ai-settings').track({click: true})}>\n        Open settings\n      </button> or <x-link href=${LEARN_MORE_URL}\n          class=\"link\" jslog=${VisualLogging.link('learn-more').track({click: true})}>\n        learn more\n      </x-link>\n    </span>`;\n    // clang-format on\n  }\n\n  #renderFooter(): Lit.LitTemplate {\n    const disclaimer = this.#renderDisclaimer();\n    // clang-format off\n    switch (this.#state.type) {\n      case State.LOADING:\n      case State.SETTING_IS_NOT_TRUE:\n        return Lit.nothing;\n      case State.ERROR:\n      case State.OFFLINE:\n        return html`<footer jslog=${VisualLogging.section('footer')}>\n          <div class=\"disclaimer\">\n            ${disclaimer}\n          </div>\n        </footer>`;\n      case State.NOT_LOGGED_IN:\n      case State.SYNC_IS_PAUSED:\n        if (Root.Runtime.hostConfig.isOffTheRecord) {\n          return Lit.nothing;\n        }\n        return html`<footer jslog=${VisualLogging.section('footer')}>\n        <div class=\"filler\"></div>\n        <div>\n          <devtools-button\n            @click=${this.#onGoToSignIn}\n            .data=${\n              {\n                variant: Buttons.Button.Variant.PRIMARY,\n                jslogContext: 'update-settings',\n              } as Buttons.Button.ButtonData\n            }\n          >\n            ${UIStrings.signIn}\n          </devtools-button>\n        </div>\n      </footer>`;\n      case State.CONSENT_REMINDER:\n        return html`<footer jslog=${VisualLogging.section('footer')}>\n          <div class=\"filler\"></div>\n          <div class=\"buttons\">\n            <devtools-button\n              @click=${() => {\n                Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightsReminderTeaserSettingsLinkClicked);\n                void UI.ViewManager.ViewManager.instance().showView('chrome-ai');\n              }}\n              .data=${\n                {\n                  variant: Buttons.Button.Variant.TONAL,\n                  jslogContext: 'settings',\n                  title: 'Settings',\n                } as Buttons.Button.ButtonData\n              }\n            >\n              Settings\n            </devtools-button>\n            <devtools-button\n              class='continue-button'\n              @click=${this.#onConsentReminderConfirmed}\n              .data=${\n                {\n                  variant: Buttons.Button.Variant.PRIMARY,\n                  jslogContext: 'continue',\n                  title: 'continue',\n                } as Buttons.Button.ButtonData\n              }\n              >\n              Continue\n            </devtools-button>\n          </div>\n        </footer>`;\n      case State.INSIGHT:\n        return html`<footer jslog=${VisualLogging.section('footer')}>\n        <div class=\"disclaimer\">\n          ${disclaimer}\n        </div>\n        <div class=\"filler\"></div>\n        <div class=\"rating\">\n          <devtools-button\n            data-rating=${'true'}\n            .data=${\n              {\n                variant: Buttons.Button.Variant.ICON_TOGGLE,\n                size: Buttons.Button.Size.SMALL,\n                iconName: 'thumb-up',\n                toggledIconName: 'thumb-up',\n                toggleOnClick: false,\n                toggleType: Buttons.Button.ToggleType.PRIMARY,\n                disabled: this.#selectedRating !== undefined,\n                toggled: this.#selectedRating === true,\n                title: i18nString(UIStrings.goodResponse),\n                jslogContext: 'thumbs-up',\n              } as Buttons.Button.ButtonData\n            }\n            @click=${this.#onRating}\n          ></devtools-button>\n          <devtools-button\n            data-rating=${'false'}\n            .data=${\n              {\n                variant: Buttons.Button.Variant.ICON_TOGGLE,\n                size: Buttons.Button.Size.SMALL,\n                iconName: 'thumb-down',\n                toggledIconName: 'thumb-down',\n                toggleOnClick: false,\n                toggleType: Buttons.Button.ToggleType.PRIMARY,\n                disabled: this.#selectedRating !== undefined,\n                toggled: this.#selectedRating === false,\n                title: i18nString(UIStrings.badResponse),\n                jslogContext: 'thumbs-down',\n              } as Buttons.Button.ButtonData\n            }\n            @click=${this.#onRating}\n          ></devtools-button>\n          <devtools-button\n            .data=${\n              {\n                variant: Buttons.Button.Variant.ICON,\n                size: Buttons.Button.Size.SMALL,\n                iconName: 'report',\n                title: i18nString(UIStrings.report),\n                jslogContext: 'report',\n              } as Buttons.Button.ButtonData\n            }\n            @click=${this.#onReport}\n          ></devtools-button>\n        </div>\n\n      </footer>`;\n    }\n    // clang-format on\n  }\n\n  #getHeader(): string {\n    switch (this.#state.type) {\n      case State.NOT_LOGGED_IN:\n      case State.SYNC_IS_PAUSED:\n        return i18nString(UIStrings.signInToUse);\n      case State.OFFLINE:\n        return i18nString(UIStrings.offlineHeader);\n      case State.LOADING:\n        return i18nString(UIStrings.generating);\n      case State.INSIGHT:\n        return i18nString(UIStrings.insight);\n      case State.ERROR:\n        return i18nString(UIStrings.error);\n      case State.CONSENT_REMINDER:\n        return 'Understand console messages with AI';\n      case State.SETTING_IS_NOT_TRUE:\n        return '';  // not reached\n    }\n  }\n\n  #renderSpinner(): Lit.LitTemplate {\n    // clang-format off\n    if (this.#state.type === State.INSIGHT && !this.#state.completed) {\n      return html`<devtools-spinner></devtools-spinner>`;\n    }\n    return Lit.nothing;\n    // clang-format on\n  }\n\n  #renderHeader(): Lit.LitTemplate {\n    if (this.#state.type === State.SETTING_IS_NOT_TRUE) {\n      return Lit.nothing;\n    }\n    const hasIcon = this.#state.type === State.CONSENT_REMINDER;\n    // clang-format off\n    return html`\n      <header>\n        ${hasIcon ? html`\n          <div class=\"header-icon-container\">\n            <devtools-icon .data=${{\n              iconName: 'lightbulb-spark',\n              width: '18px',\n              height: '18px',\n            } as IconButton.Icon.IconData}>\n            </devtools-icon>\n          </div>`\n        : Lit.nothing}\n        <div class=\"filler\">\n          <h2 tabindex=\"-1\">\n            ${this.#getHeader()}\n          </h2>\n          ${this.#renderSpinner()}\n        </div>\n        <div class=\"close-button\">\n          <devtools-button\n            .data=${\n              {\n                variant: Buttons.Button.Variant.ICON,\n                size: Buttons.Button.Size.SMALL,\n                iconName: 'cross',\n                title: i18nString(UIStrings.closeInsight),\n              } as Buttons.Button.ButtonData\n            }\n            jslog=${VisualLogging.close().track({click: true})}\n            @click=${this.#onClose}\n          ></devtools-button>\n        </div>\n      </header>\n    `;\n    // clang-format on\n  }\n\n  #render(): void {\n    // clang-format off\n    render(html`\n      <style>${styles}</style>\n      <style>${Input.checkboxStyles}</style>\n      <div class=\"wrapper\" jslog=${VisualLogging.pane('console-insights').track({resize: true})}>\n        <div class=\"animation-wrapper\">\n          ${this.#renderHeader()}\n          ${this.#renderMain()}\n          ${this.#renderFooter()}\n        </div>\n      </div>\n    `, this.#shadow, {\n      host: this,\n    });\n    // clang-format on\n\n    if (this.#referenceDetailsRef.value) {\n      this.#referenceDetailsRef.value.open = this.#areReferenceDetailsOpen;\n    }\n  }\n}\n\nclass ConsoleInsightSourcesList extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #sources: Source[] = [];\n  #isPageReloadRecommended = false;\n\n  #render(): void {\n    // clang-format off\n     render(html`\n      <style>${listStyles}</style>\n      <style>${Input.checkboxStyles}</style>\n      <ul>\n        ${Directives.repeat(this.#sources, item => item.value, item => {\n          return html`<li><x-link class=\"link\" title=\"${localizeType(item.type)} ${i18nString(UIStrings.opensInNewTab)}\" href=\"data:text/plain;charset=utf-8,${encodeURIComponent(item.value)}\" jslog=${VisualLogging.link('source-' + item.type).track({click: true})}>\n            <devtools-icon name=\"open-externally\"></devtools-icon>\n            ${localizeType(item.type)}\n          </x-link></li>`;\n        })}\n        ${this.#isPageReloadRecommended ? html`<li class=\"source-disclaimer\">\n          <devtools-icon name=\"warning\"></devtools-icon>\n          ${i18nString(UIStrings.reloadRecommendation)}</li>` : Lit.nothing}\n      </ul>\n    `, this.#shadow, {\n      host: this,\n    });\n    // clang-format on\n  }\n\n  set sources(values: Source[]) {\n    this.#sources = values;\n    this.#render();\n  }\n\n  set isPageReloadRecommended(isPageReloadRecommended: boolean) {\n    this.#isPageReloadRecommended = isPageReloadRecommended;\n    this.#render();\n  }\n}\n\ncustomElements.define('devtools-console-insight', ConsoleInsight);\ncustomElements.define('devtools-console-insight-sources-list', ConsoleInsightSourcesList);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-console-insight': ConsoleInsight;\n    'devtools-console-insight-sources-list': ConsoleInsightSourcesList;\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as AiAssistanceModel from '../../models/ai_assistance/ai_assistance.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Formatter from '../../models/formatter/formatter.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport type * as Console from '../console/console.js';\n\nconst MAX_MESSAGE_SIZE = 1000;\nconst MAX_STACK_TRACE_SIZE = 1000;\nconst MAX_CODE_SIZE = 1000;\n\nexport enum SourceType {\n  MESSAGE = 'message',\n  STACKTRACE = 'stacktrace',\n  NETWORK_REQUEST = 'networkRequest',\n  RELATED_CODE = 'relatedCode',\n}\n\nexport interface Source {\n  type: SourceType;\n  value: string;\n}\n\nexport class PromptBuilder {\n  #consoleMessage: Console.ConsoleViewMessage.ConsoleViewMessage;\n\n  constructor(consoleMessage: Console.ConsoleViewMessage.ConsoleViewMessage) {\n    this.#consoleMessage = consoleMessage;\n  }\n\n  async getNetworkRequest(): Promise<SDK.NetworkRequest.NetworkRequest|undefined> {\n    const requestId = this.#consoleMessage.consoleMessage().getAffectedResources()?.requestId;\n    if (!requestId) {\n      return;\n    }\n    const log = Logs.NetworkLog.NetworkLog.instance();\n    // TODO: we might try handling redirect requests too later.\n    return log.requestsForId(requestId)[0];\n  }\n\n  /**\n   * Gets the source file associated with the top of the message's stacktrace.\n   * Returns an empty string if the source is not available for any reasons.\n   */\n  async getMessageSourceCode(): Promise<{text: string, columnNumber: number, lineNumber: number}> {\n    const callframe = this.#consoleMessage.consoleMessage().stackTrace?.callFrames[0];\n    const runtimeModel = this.#consoleMessage.consoleMessage().runtimeModel();\n    const debuggerModel = runtimeModel?.debuggerModel();\n    if (!debuggerModel || !runtimeModel || !callframe) {\n      return {text: '', columnNumber: 0, lineNumber: 0};\n    }\n    const rawLocation =\n        new SDK.DebuggerModel.Location(debuggerModel, callframe.scriptId, callframe.lineNumber, callframe.columnNumber);\n    const mappedLocation =\n        await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().rawLocationToUILocation(\n            rawLocation);\n    const content = await mappedLocation?.uiSourceCode.requestContent();\n    const text = !content?.isEncoded && content?.content ? content.content : '';\n    const firstNewline = text.indexOf('\\n');\n    if (text.length > MAX_CODE_SIZE && (firstNewline < 0 || firstNewline > MAX_CODE_SIZE)) {\n      // Use formatter\n      const {formattedContent, formattedMapping} = await Formatter.ScriptFormatter.formatScriptContent(\n          mappedLocation?.uiSourceCode.mimeType() ?? 'text/javascript', text);\n      const [lineNumber, columnNumber] =\n          formattedMapping.originalToFormatted(mappedLocation?.lineNumber ?? 0, mappedLocation?.columnNumber ?? 0);\n      return {text: formattedContent, columnNumber, lineNumber};\n    }\n    return {text, columnNumber: mappedLocation?.columnNumber ?? 0, lineNumber: mappedLocation?.lineNumber ?? 0};\n  }\n\n  async buildPrompt(sourcesTypes: SourceType[] = Object.values(SourceType)):\n      Promise<{prompt: string, sources: Source[], isPageReloadRecommended: boolean}> {\n    const [sourceCode, request] = await Promise.all([\n      sourcesTypes.includes(SourceType.RELATED_CODE) ? this.getMessageSourceCode() : undefined,\n      sourcesTypes.includes(SourceType.NETWORK_REQUEST) ? this.getNetworkRequest() : undefined,\n    ]);\n\n    const relatedCode = sourceCode?.text ? formatRelatedCode(sourceCode) : '';\n    const relatedRequest = request ? formatNetworkRequest(request) : '';\n    const stacktrace = sourcesTypes.includes(SourceType.STACKTRACE) ? formatStackTrace(this.#consoleMessage) : '';\n\n    const message = formatConsoleMessage(this.#consoleMessage);\n\n    const prompt = this.formatPrompt({\n      message: [message, stacktrace].join('\\n').trim(),\n      relatedCode,\n      relatedRequest,\n    });\n\n    const sources = [\n      {\n        type: SourceType.MESSAGE,\n        value: message,\n      },\n    ];\n\n    if (stacktrace) {\n      sources.push({\n        type: SourceType.STACKTRACE,\n        value: stacktrace,\n      });\n    }\n\n    if (relatedCode) {\n      sources.push({\n        type: SourceType.RELATED_CODE,\n        value: relatedCode,\n      });\n    }\n\n    if (relatedRequest) {\n      sources.push({\n        type: SourceType.NETWORK_REQUEST,\n        value: relatedRequest,\n      });\n    }\n\n    return {\n      prompt,\n      sources,\n      isPageReloadRecommended: sourcesTypes.includes(SourceType.NETWORK_REQUEST) &&\n          Boolean(this.#consoleMessage.consoleMessage().getAffectedResources()?.requestId) && !relatedRequest,\n    };\n  }\n\n  formatPrompt({message, relatedCode, relatedRequest}: {message: string, relatedCode: string, relatedRequest: string}):\n      string {\n    let prompt = `Please explain the following console error or warning:\n\n\\`\\`\\`\n${message}\n\\`\\`\\``;\n\n    if (relatedCode) {\n      prompt += `\nFor the following code:\n\n\\`\\`\\`\n${relatedCode}\n\\`\\`\\``;\n    }\n\n    if (relatedRequest) {\n      prompt += `\nFor the following network request:\n\n\\`\\`\\`\n${relatedRequest}\n\\`\\`\\``;\n    }\n    return prompt;\n  }\n\n  getSearchQuery(): string {\n    let message = this.#consoleMessage.toMessageTextString();\n    if (message) {\n      // If there are multiple lines, it is likely the rest of the message\n      // is a stack trace, which we don't want.\n      message = message.split('\\n')[0];\n    }\n    return message;\n  }\n}\n\nexport function allowHeader(header: SDK.NetworkRequest.NameValue): boolean {\n  const normalizedName = header.name.toLowerCase().trim();\n  // Skip custom headers.\n  if (normalizedName.startsWith('x-')) {\n    return false;\n  }\n  // Skip cookies as they might contain auth.\n  if (normalizedName === 'cookie' || normalizedName === 'set-cookie') {\n    return false;\n  }\n  if (normalizedName === 'authorization') {\n    return false;\n  }\n  return true;\n}\n\nexport function lineWhitespace(line: string): string|null {\n  const matches = /^\\s*/.exec(line);\n  if (!matches?.length) {\n    // This should not happen\n    return null;\n  }\n  const whitespace = matches[0];\n  if (whitespace === line) {\n    return null;\n  }\n  return whitespace;\n}\n\nexport function formatRelatedCode(\n    {text, columnNumber, lineNumber}: {text: string, columnNumber: number, lineNumber: number},\n    maxCodeSize = MAX_CODE_SIZE): string {\n  const lines = text.split('\\n');\n  if (lines[lineNumber].length >= maxCodeSize / 2) {\n    const start = Math.max(columnNumber - maxCodeSize / 2, 0);\n    const end = Math.min(columnNumber + maxCodeSize / 2, lines[lineNumber].length);\n    return lines[lineNumber].substring(start, end);\n  }\n  let relatedCodeSize = 0;\n  let currentLineNumber = lineNumber;\n  let currentWhitespace = lineWhitespace(lines[lineNumber]);\n  const startByPrefix = new Map<string, number>();\n  while (lines[currentLineNumber] !== undefined &&\n         (relatedCodeSize + lines[currentLineNumber].length <= maxCodeSize / 2)) {\n    const whitespace = lineWhitespace(lines[currentLineNumber]);\n    if (whitespace !== null && currentWhitespace !== null &&\n        (whitespace === currentWhitespace || !whitespace.startsWith(currentWhitespace))) {\n      // Don't start on a line that begins with a closing character\n      if (!/^\\s*[\\}\\)\\]]/.exec(lines[currentLineNumber])) {\n        // Update map of where code should start based on its indentation\n        startByPrefix.set(whitespace, currentLineNumber);\n      }\n      currentWhitespace = whitespace;\n    }\n    relatedCodeSize += lines[currentLineNumber].length + 1;\n    currentLineNumber--;\n  }\n  currentLineNumber = lineNumber + 1;\n  let startLine = lineNumber;\n  let endLine = lineNumber;\n  currentWhitespace = lineWhitespace(lines[lineNumber]);\n  while (lines[currentLineNumber] !== undefined && (relatedCodeSize + lines[currentLineNumber].length <= maxCodeSize)) {\n    relatedCodeSize += lines[currentLineNumber].length;\n    const whitespace = lineWhitespace(lines[currentLineNumber]);\n    if (whitespace !== null && currentWhitespace !== null &&\n        (whitespace === currentWhitespace || !whitespace.startsWith(currentWhitespace))) {\n      // We shouldn't end on a line if it is followed by an indented line\n      const nextLine = lines[currentLineNumber + 1];\n      const nextWhitespace = nextLine ? lineWhitespace(nextLine) : null;\n      if (!nextWhitespace || nextWhitespace === whitespace || !nextWhitespace.startsWith(whitespace)) {\n        // Look up where code should start based on its indentation\n        if (startByPrefix.has(whitespace)) {\n          startLine = startByPrefix.get(whitespace) ?? 0;\n          endLine = currentLineNumber;\n        }\n      }\n      currentWhitespace = whitespace;\n    }\n    currentLineNumber++;\n  }\n  return lines.slice(startLine, endLine + 1).join('\\n');\n}\n\nfunction formatLines(title: string, lines: string[], maxLength: number): string {\n  let result = '';\n  for (const line of lines) {\n    if (result.length + line.length > maxLength) {\n      break;\n    }\n    result += line;\n  }\n  result = result.trim();\n  return result && title ? title + '\\n' + result : result;\n}\n\nexport function formatNetworkRequest(\n    request:\n        Pick<SDK.NetworkRequest.NetworkRequest, 'url'|'requestHeaders'|'responseHeaders'|'statusCode'|'statusText'>):\n    string {\n  return `Request: ${request.url()}\n\n${AiAssistanceModel.NetworkRequestFormatter.formatHeaders('Request headers:', request.requestHeaders())}\n\n${AiAssistanceModel.NetworkRequestFormatter.formatHeaders('Response headers:', request.responseHeaders)}\n\nResponse status: ${request.statusCode} ${request.statusText}`;\n}\n\nexport function formatConsoleMessage(message: Console.ConsoleViewMessage.ConsoleViewMessage): string {\n  return message.toMessageTextString().substr(0, MAX_MESSAGE_SIZE);\n}\n\n/**\n * This formats the stacktrace from the console message which might or might not\n * match the content of stacktrace(s) in the console message arguments.\n */\nexport function formatStackTrace(message: Console.ConsoleViewMessage.ConsoleViewMessage): string {\n  const previewContainer = message.contentElement().querySelector('.stack-preview-container');\n\n  if (!previewContainer) {\n    return '';\n  }\n\n  const preview = previewContainer.shadowRoot?.querySelector('.stack-preview-container') as HTMLElement;\n\n  const nodes = preview.childTextNodes();\n  // Gets application-level source mapped stack trace taking the ignore list\n  // into account.\n  const messageContent = nodes\n                             .filter(n => {\n                               return !n.parentElement?.closest('.show-all-link,.show-less-link,.hidden-row');\n                             })\n                             .map(Components.Linkifier.Linkifier.untruncatedNodeText);\n  return formatLines('', messageContent, MAX_STACK_TRACE_SIZE);\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2023 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\n:host {\n  font-family: var(--default-font-family);\n  font-size: inherit;\n  display: block;\n}\n\n.wrapper {\n  background-color: var(--sys-color-cdt-base-container);\n  border-radius: 16px;\n  container-type: inline-size;\n  display: grid;\n  animation: expand var(--sys-motion-duration-medium2) var(--sys-motion-easing-emphasized) forwards;\n}\n\n:host-context(.closing) .wrapper {\n  animation: collapse var(--sys-motion-duration-medium2) var(--sys-motion-easing-emphasized) forwards;\n}\n\n@keyframes expand {\n  from {\n    grid-template-rows: 0fr;\n  }\n\n  to {\n    grid-template-rows: 1fr;\n  }\n}\n\n@keyframes collapse {\n  from {\n    grid-template-rows: 1fr;\n  }\n\n  to {\n    grid-template-rows: 0fr;\n    padding-top: 0;\n    padding-bottom: 0;\n  }\n}\n\n.animation-wrapper {\n  overflow: hidden;\n  padding: var(--sys-size-6) var(--sys-size-8);\n}\n\n.wrapper.top {\n  border-radius: 16px 16px 4px 4px;\n}\n\n.wrapper.bottom {\n  margin-top: 5px;\n  border-radius: 4px 4px 16px 16px;\n}\n\nheader {\n  display: flex;\n  flex-direction: row;\n  gap: 6px;\n  color: var(--sys-color-on-surface);\n  font-size: 13px;\n  font-style: normal;\n  font-weight: 500;\n  margin-bottom: var(--sys-size-6);\n  align-items: center;\n}\n\nheader:focus-visible {\n  outline: none;\n}\n\nheader > .filler {\n  display: flex;\n  flex-direction: row;\n  gap: var(--sys-size-5);\n  align-items: center;\n  flex: 1;\n}\n\n.reminder-container {\n  border-radius: var(--sys-size-5);\n  background-color: var(--sys-color-surface4);\n  padding: var(--sys-size-8);\n  font-weight: var(--ref-typeface-weight-medium);\n\n  h3 {\n    font: inherit;\n  }\n}\n\n.reminder-items {\n  display: grid;\n  grid-template-columns: var(--sys-size-8) auto;\n  gap: var(--sys-size-5) var(--sys-size-6);\n  margin-top: var(--sys-size-6);\n  line-height: var(--sys-size-8);\n  font-weight: var(--ref-typeface-weight-regular);\n}\n\nmain {\n  --override-markdown-view-message-color: var(--sys-color-on-surface);\n\n  color: var(--sys-color-on-surface);\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 20px;\n\n  p {\n    margin-block: 1em;\n  }\n\n  ul {\n    list-style-type: none;\n    list-style-position: inside;\n    padding-inline-start: 0.2em;\n\n    li {\n      display: list-item;\n      list-style-type: disc;\n      list-style-position: outside;\n      margin-inline-start: 1em;\n    }\n\n    li::marker {\n      font-size: 11px;\n      line-height: 1;\n    }\n  }\n\n  label {\n    display: inline-flex;\n    flex-direction: row;\n    gap: 0.5em;\n\n    input,\n    span {\n      vertical-align: middle;\n    }\n\n    input[type=\"checkbox\"] {\n      margin-top: 0.3em;\n    }\n  }\n}\n\n.opt-in-teaser {\n  display: flex;\n  gap: var(--sys-size-5);\n}\n\ndevtools-markdown-view {\n  margin-bottom: 12px;\n}\n\nfooter {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  color: var(--sys-color-on-surface);\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  margin-top: 14px;\n  gap: 32px;\n}\n\n@container (max-width: 600px) {\n  footer {\n    gap: 8px;\n  }\n}\n\nfooter > .filler {\n  flex: 1;\n}\n\nfooter .rating {\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n}\n\ntextarea {\n  height: 84px;\n  padding: 10px;\n  border-radius: 8px;\n  border: 1px solid var(--sys-color-neutral-outline);\n  width: 100%;\n  font-family: var(--default-font-family);\n  font-size: inherit;\n}\n\n.buttons {\n  display: flex;\n  gap: 5px;\n}\n\n@media (width <= 500px) {\n  .buttons {\n    flex-wrap: wrap;\n  }\n}\n\nmain .buttons {\n  margin-top: 12px;\n}\n\n.disclaimer {\n  display: flex;\n  gap: 2px;\n  color: var(--sys-color-on-surface-subtle);\n  font-size: 11px;\n  align-items: flex-start;\n  flex-direction: column;\n}\n\n.link {\n  color: var(--sys-color-primary);\n  text-decoration-line: underline;\n\n  devtools-icon {\n    color: var(--sys-color-primary);\n    width: 14px;\n    height: 14px;\n  }\n}\n\nbutton.link {\n  border: none;\n  background: none;\n  cursor: pointer;\n  font: inherit;\n}\n\n.loader {\n  background:\n    linear-gradient(\n      130deg,\n      transparent 0%,\n      var(--sys-color-gradient-tertiary) 20%,\n      var(--sys-color-gradient-primary) 40%,\n      transparent 60%,\n      var(--sys-color-gradient-tertiary) 80%,\n      var(--sys-color-gradient-primary) 100%\n    );\n  background-position: 0% 0%;\n  background-size: 250% 250%;\n  animation: gradient 5s infinite linear;\n}\n\n@keyframes gradient {\n  0% { background-position: 0 0; }\n  100% { background-position: 100% 100%; }\n}\n\nsummary {\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 20px;\n}\n\ndetails {\n  overflow: hidden;\n  margin-top: 10px;\n}\n\n::details-content {\n  height: 0;\n  transition:\n    height var(--sys-motion-duration-short4) var(--sys-motion-easing-emphasized),\n    content-visibility var(--sys-motion-duration-short4) var(--sys-motion-easing-emphasized) allow-discrete;\n}\n\n[open]::details-content {\n  height: auto;\n}\n\ndetails.references {\n  /* This transition is only added because there is no \\\\'transitionend\\\\' event in\n     JS for the \\\\'::details-content\\\\' transition. */\n  transition: margin-bottom var(--sys-motion-duration-short4) var(--sys-motion-easing-emphasized);\n}\n\ndetails.references[open] {\n  /* This transition does not affect the actual UI because of collapsing margins. */\n  margin-bottom: var(--sys-size-1);\n}\n\nh2 {\n  display: block;\n  font-size: var(--sys-size-7);\n  margin: 0;\n  font-weight: var(--ref-typeface-weight-medium);\n  line-height: var(--sys-size-9);\n}\n\nh2:focus-visible {\n  outline: none;\n}\n\n.info {\n  width: 20px;\n  height: 20px;\n}\n\n.badge {\n  background: linear-gradient(135deg, var(--sys-color-gradient-primary), var(--sys-color-gradient-tertiary));\n  border-radius: var(--sys-size-3);\n  height: var(--sys-size-9);\n\n  devtools-icon {\n    margin: var(--sys-size-2);\n  }\n}\n\n.header-icon-container {\n  background: linear-gradient(135deg, var(--sys-color-gradient-primary), var(--sys-color-gradient-tertiary));\n  border-radius: var(--sys-size-4);\n  height: 36px;\n  width: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.close-button {\n  align-self: flex-start;\n}\n\n.sources-list {\n  padding-left: var(--sys-size-6);\n  margin-bottom: var(--sys-size-6);\n  list-style: none;\n  counter-reset: sources;\n  display: grid;\n  grid-template-columns: var(--sys-size-9) auto;\n  list-style-position: inside;\n}\n\n.sources-list li {\n  display: contents;\n}\n\n.sources-list li::before {\n  counter-increment: sources;\n  content: \"[\" counter(sources) \"]\";\n  display: table-cell;\n}\n\n.sources-list x-link.highlighted {\n  animation: highlight-fadeout 2s;\n}\n\n@keyframes highlight-fadeout {\n  from {\n    background-color: var(--sys-color-yellow-container);\n  }\n\n  to {\n    background-color: transparent;\n  }\n}\n\n.references-list {\n  padding-left: var(--sys-size-8);\n}\n\n.references-list li {\n  padding-left: var(--sys-size-3);\n}\n\ndetails h3 {\n  font-size: 10px;\n  font-weight: var(--ref-typeface-weight-medium);\n  text-transform: uppercase;\n  color: var(--sys-color-on-surface-subtle);\n  padding-left: var(--sys-size-6);\n}\n\n.error-message {\n  font: var(--sys-typescale-body4-bold);\n}\n\n/*# sourceURL=${import.meta.resolve('././components/consoleInsight.css')} */`;", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2023 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\n:host {\n  display: block;\n}\n\nul {\n  color: var(--sys-color-primary);\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 18px;\n  margin-top: 8px;\n  padding-left: var(--sys-size-6);\n}\n\nli {\n  list-style-type: none;\n}\n\nul .link {\n  color: var(--sys-color-primary);\n  display: inline-flex !important; /* stylelint-disable-line declaration-no-important */\n  align-items: center;\n  gap: 4px;\n  text-decoration-line: underline;\n}\n\ndevtools-icon {\n  height: 16px;\n  width: 16px;\n  margin-right: var(--sys-size-1);\n}\n\ndevtools-icon[name=\"open-externally\"] {\n  color: var(--icon-link);\n}\n\n.source-disclaimer {\n  color: var(--sys-color-on-surface-subtle);\n}\n\n/*# sourceURL=${import.meta.resolve('././components/consoleInsightSourcesList.css')} */`;", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport type * as UI from '../../ui/legacy/legacy.js';\nimport * as Console from '../console/console.js';\n\nimport {ConsoleInsight} from './components/ConsoleInsight.js';\nimport {PromptBuilder} from './PromptBuilder.js';\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'explain.console-message.context':\n      case 'explain.console-message.context.error':\n      case 'explain.console-message.context.warning':\n      case 'explain.console-message.context.other':\n      case 'explain.console-message.hover': {\n        const consoleViewMessage = context.flavor(Console.ConsoleViewMessage.ConsoleViewMessage);\n        if (consoleViewMessage) {\n          if (actionId.startsWith('explain.console-message.context')) {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightRequestedViaContextMenu);\n          } else if (actionId === 'explain.console-message.hover') {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightRequestedViaHoverButton);\n          }\n          const promptBuilder = new PromptBuilder(consoleViewMessage);\n          const aidaClient = new Host.AidaClient.AidaClient();\n          void ConsoleInsight.create(promptBuilder, aidaClient).then(insight => {\n            consoleViewMessage.setInsight(insight);\n          });\n          return true;\n        }\n        return false;\n      }\n    }\n    return false;\n  }\n}\n"],
  "mappings": "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",
  "names": ["SourceType", "i18nTemplate", "Directives", "Host"]
}
