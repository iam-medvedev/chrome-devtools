{"version":3,"file":"ConsoleInsight.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/explain/components/ConsoleInsight.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport type * as Platform from '../../../core/platform/platform.js';\nimport {\n  assertScreenshot,\n  dispatchClickEvent,\n  getCleanTextContentFromElements,\n  raf,\n  renderElementIntoDOM,\n} from '../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment, updateHostConfig} from '../../../testing/EnvironmentHelpers.js';\nimport * as Explain from '../explain.js';\n\ndescribeWithEnvironment('ConsoleInsight', () => {\n  let component: Explain.ConsoleInsight|undefined;\n\n  const containerCss = `\n      box-sizing: border-box;\n      background-color: aqua;\n    `;\n\n  beforeEach(() => {\n    sinon.stub(Host.AidaClient.HostConfigTracker.instance(), 'pollAidaAvailability').callsFake(async () => {});\n  });\n\n  afterEach(() => {\n    component?.remove();\n    Common.Settings.settingForTest('console-insights-enabled').set(true);\n    Common.Settings.settingForTest('console-insights-onboarding-finished').set(true);\n  });\n\n  function getTestAidaClient() {\n    return {\n      async *\n          doConversation() {\n            yield {explanation: 'test', metadata: {rpcGlobalId: 0}, completed: true};\n          },\n      registerClientEvent: sinon.spy(),\n    };\n  }\n\n  function getTestPromptBuilder() {\n    return {\n      async buildPrompt() {\n        return {\n          prompt: '',\n          sources: [\n            {\n              type: Explain.SourceType.MESSAGE,\n              value: 'error message',\n            },\n          ],\n          isPageReloadRecommended: true,\n        };\n      },\n      getSearchQuery() {\n        return '';\n      },\n    };\n  }\n\n  async function drainMicroTasks() {\n    await new Promise(resolve => setTimeout(resolve, 0));\n  }\n\n  it('shows opt-in teaser when setting is turned off', async () => {\n    Common.Settings.settingForTest('console-insights-enabled').set(false);\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    assert.isNotNull(component.shadowRoot);\n    assert.deepEqual(\n        getCleanTextContentFromElements(component.shadowRoot, 'main'),\n        [\n          'Turn on Console insights in Settings to receive AI assistance for understanding and addressing console warnings and errors. Learn more',\n        ],\n    );\n  });\n\n  it('shows opt-in teaser when blocked by age', async () => {\n    updateHostConfig({\n      aidaAvailability: {\n        blockedByAge: true,\n      },\n      devToolsConsoleInsights: {\n        enabled: true,\n      },\n    });\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    assert.isNotNull(component.shadowRoot);\n    assert.deepEqual(\n        getCleanTextContentFromElements(component.shadowRoot, 'main'),\n        [\n          'Turn on Console insights in Settings to receive AI assistance for understanding and addressing console warnings and errors. Learn more',\n        ],\n    );\n  });\n\n  it('generates an explanation when the user logs in', async () => {\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    assert.isNotNull(component.shadowRoot);\n    assert.deepEqual(\n        getCleanTextContentFromElements(component.shadowRoot, 'main'),\n        [\n          'This feature is only available when you sign into Chrome with your Google account.',\n        ],\n    );\n\n    const stub = sinon.stub(Host.AidaClient.AidaClient, 'checkAccessPreconditions')\n                     .returns(Promise.resolve(Host.AidaClient.AidaAccessPreconditions.AVAILABLE));\n    Host.AidaClient.HostConfigTracker.instance().dispatchEventToListeners(\n        Host.AidaClient.Events.AIDA_AVAILABILITY_CHANGED);\n    await drainMicroTasks();\n    assert.deepEqual(getCleanTextContentFromElements(component.shadowRoot, 'h2'), ['Explanation']);\n    stub.restore();\n  });\n\n  it('shows opt-in teaser when setting is disabled via disabledCondition', async () => {\n    const setting = Common.Settings.settingForTest('console-insights-enabled');\n    setting.setRegistration({\n      settingName: 'console-insights-enabled',\n      settingType: Common.Settings.SettingType.BOOLEAN,\n      defaultValue: true,\n      disabledCondition: () => {\n        return {disabled: true, reasons: ['disabled for test' as Platform.UIString.LocalizedString]};\n      },\n    });\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    assert.isNotNull(component.shadowRoot);\n    assert.deepEqual(\n        getCleanTextContentFromElements(component.shadowRoot, 'main'),\n        [\n          'Turn on Console insights in Settings to receive AI assistance for understanding and addressing console warnings and errors. Learn more',\n        ],\n    );\n\n    setting.setRegistration({\n      settingName: 'console-insights-enabled',\n      settingType: Common.Settings.SettingType.BOOLEAN,\n      defaultValue: false,\n    });\n  });\n\n  it('shows reminder on first run of console insights', async () => {\n    Common.Settings.settingForTest('console-insights-onboarding-finished').set(false);\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    assert.isNotNull(component.shadowRoot);\n    assert.strictEqual(component.shadowRoot.querySelector('h2')?.innerText, 'Understand console messages with AI');\n\n    dispatchClickEvent(component.shadowRoot.querySelector('.continue-button')!, {\n      bubbles: true,\n      composed: true,\n    });\n    await drainMicroTasks();\n    // Rating buttons are shown.\n    assert(component.shadowRoot.querySelector('.rating'));\n  });\n\n  it('shows an error message on timeout', async () => {\n    function getAidaClientWithTimeout() {\n      return {\n        async *\n            doConversation() {\n              yield {\n                explanation: 'test',\n                metadata: {\n                  rpcGlobalId: 0,\n                },\n                completed: true,\n              };\n              throw new Error('doAidaConversation timed out');\n            },\n        registerClientEvent: sinon.spy(),\n      };\n    }\n\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getAidaClientWithTimeout(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    assert.isNotNull(component.shadowRoot);\n    assert.strictEqual(\n        component.shadowRoot.querySelector('.error-message')?.textContent,\n        'Generating a response took too long. Please try again.');\n  });\n\n  const reportsRating = (positive: boolean, disallowLogging: boolean) => async () => {\n    updateHostConfig({\n      aidaAvailability: {\n        disallowLogging,\n      },\n    });\n    const actionTaken = sinon.stub(Host.userMetrics, 'actionTaken');\n    const aidaClient = getTestAidaClient();\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), aidaClient, Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    dispatchClickEvent(component.shadowRoot!.querySelector(`.rating [data-rating=${positive}]`)!, {\n      bubbles: true,\n      composed: true,\n    });\n\n    sinon.assert.calledOnce(aidaClient.registerClientEvent);\n    sinon.assert.match(aidaClient.registerClientEvent.firstCall.firstArg, sinon.match({\n      corresponding_aida_rpc_global_id: 0,\n      disable_user_content_logging: disallowLogging,\n      do_conversation_client_event: {\n        user_feedback: {sentiment: positive ? 'POSITIVE' : 'NEGATIVE'},\n      },\n    }));\n    sinon.assert.calledWith(\n        actionTaken,\n        positive ? Host.UserMetrics.Action.InsightRatedPositive : Host.UserMetrics.Action.InsightRatedNegative);\n\n    dispatchClickEvent(component.shadowRoot!.querySelector(`.rating [data-rating=${positive}]`)!, {\n      bubbles: true,\n      composed: true,\n    });\n    // Can only rate once.\n    sinon.assert.calledOnce(aidaClient.registerClientEvent);\n  };\n\n  describe('without logging', () => {\n    it('reports positive rating', reportsRating(true, true));\n    it('reports negative rating', reportsRating(false, true));\n  });\n\n  describe('with logging', () => {\n    it('reports positive rating', reportsRating(true, false));\n    it('reports negative rating', reportsRating(false, false));\n  });\n\n  it('has thumbs up/down buttons if logging is disabled', async () => {\n    updateHostConfig({\n      aidaAvailability: {\n        disallowLogging: true,\n      },\n      devToolsConsoleInsights: {\n        enabled: true,\n      },\n    });\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    const thumbsUpButton = component.shadowRoot!.querySelector('.rating [data-rating=\"true\"]');\n    assert.isNotNull(thumbsUpButton);\n    const thumbsDownButton = component.shadowRoot!.querySelector('.rating [data-rating=\"false\"]');\n    assert.isNotNull(thumbsDownButton);\n  });\n\n  it('report if the user is not logged in', async () => {\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    const content = component.shadowRoot!.querySelector('main')!.innerText.trim();\n    assert.strictEqual(content, 'This feature is only available when you sign into Chrome with your Google account.');\n  });\n\n  it('report if the navigator is offline', async () => {\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.NO_INTERNET);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    const content = component.shadowRoot!.querySelector('main')!.innerText.trim();\n    assert.strictEqual(content, 'Check your internet connection and try again.');\n  });\n\n  it('displays factuality metadata as related content', async () => {\n    function getAidaClientWithMetadata() {\n      return {\n        async *\n            doConversation() {\n              yield {\n                explanation: 'test',\n                metadata: {\n                  rpcGlobalId: 0,\n                  factualityMetadata: {\n                    facts: [\n                      {sourceUri: 'https://www.firstSource.test/someInfo'},\n                      {sourceUri: 'https://www.anotherSource.test/page'},\n                    ],\n                  },\n                },\n                completed: true,\n              };\n            },\n        registerClientEvent: sinon.spy(),\n      };\n    }\n\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getAidaClientWithMetadata(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    const details = component.shadowRoot!.querySelector('details');\n    assert.strictEqual(details!.querySelector('summary')!.textContent?.trim(), 'Sources and related content');\n    const xLinks = details!.querySelectorAll('x-link');\n    assert.strictEqual(xLinks[0].textContent?.trim(), 'https://www.firstSource.test/someInfo');\n    assert.strictEqual(xLinks[0].getAttribute('href'), 'https://www.firstSource.test/someInfo');\n    assert.strictEqual(xLinks[1].textContent?.trim(), 'https://www.anotherSource.test/page');\n    assert.strictEqual(xLinks[1].getAttribute('href'), 'https://www.anotherSource.test/page');\n  });\n\n  it('displays direct citations', async () => {\n    function getAidaClientWithMetadata() {\n      return {\n        async *\n            doConversation() {\n              yield {\n                explanation: 'This is not a real answer, it is just a test.',\n                metadata: {\n                  rpcGlobalId: 0,\n                  attributionMetadata: {\n                    attributionAction: Host.AidaClient.RecitationAction.CITE,\n                    citations: [\n                      {\n                        startIndex: 0,\n                        endIndex: 10,\n                        uri: 'https://www.wiki.test/directSource',\n                        sourceType: Host.AidaClient.CitationSourceType.WORLD_FACTS,\n                      },\n                      {\n                        startIndex: 20,\n                        endIndex: 25,\n                        uri: 'https://www.world-fact.test/',\n                        sourceType: Host.AidaClient.CitationSourceType.WORLD_FACTS,\n                      },\n                    ],\n                  },\n                  factualityMetadata: {\n                    facts: [\n                      {sourceUri: 'https://www.firstSource.test/someInfo'},\n                    ],\n                  },\n                },\n                completed: true,\n              };\n            },\n        registerClientEvent: sinon.spy(),\n      };\n    }\n\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getAidaClientWithMetadata(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n\n    const markdownView = component.shadowRoot!.querySelector('devtools-markdown-view');\n    assert.strictEqual(\n        getCleanTextContentFromElements(markdownView!.shadowRoot!, '.message')[0],\n        'This is not[1] a real answer[2], it is just a test.');\n    const details = component.shadowRoot!.querySelector('details');\n    assert.strictEqual(details!.querySelector('summary')!.textContent?.trim(), 'Sources and related content');\n    const directCitations = details!.querySelectorAll('ol x-link');\n    assert.lengthOf(directCitations, 2);\n    assert.strictEqual(directCitations[0].textContent?.trim(), 'https://www.wiki.test/directSource');\n    assert.strictEqual(directCitations[0].getAttribute('href'), 'https://www.wiki.test/directSource');\n    assert.strictEqual(directCitations[1].textContent?.trim(), 'https://www.world-fact.test/');\n    assert.strictEqual(directCitations[1].getAttribute('href'), 'https://www.world-fact.test/');\n    const relatedContent = details!.querySelectorAll('ul x-link');\n    assert.lengthOf(relatedContent, 1);\n    assert.strictEqual(relatedContent[0].textContent?.trim(), 'https://www.firstSource.test/someInfo');\n    assert.strictEqual(relatedContent[0].getAttribute('href'), 'https://www.firstSource.test/someInfo');\n\n    assert.isFalse(details?.hasAttribute('open'));\n    assert.isFalse(directCitations[0].classList.contains('highlighted'));\n    const link = markdownView!.shadowRoot?.querySelector('sup button') as HTMLElement;\n    link.click();\n    assert.isTrue(details?.hasAttribute('open'));\n    assert.isTrue(directCitations[0].classList.contains('highlighted'));\n  });\n\n  it('displays direct citations in code blocks', async () => {\n    function getAidaClientWithMetadata() {\n      return {\n        async *\n            doConversation() {\n              yield {\n                explanation: `before\n\n\\`\\`\\`\\`\\`\nconst foo = document.querySelector('.some-class');\n\\`\\`\\`\\`\\`\n\nafter\n`,\n                metadata: {\n                  rpcGlobalId: 0,\n                  attributionMetadata: {\n                    attributionAction: Host.AidaClient.RecitationAction.CITE,\n                    citations: [\n                      {\n                        startIndex: 20,\n                        endIndex: 25,\n                        uri: 'https://www.wiki.test/directSource',\n                        sourceType: Host.AidaClient.CitationSourceType.WORLD_FACTS,\n                      },\n                      {\n                        startIndex: 30,\n                        endIndex: 38,\n                        uri: 'https://www.world-fact.test/',\n                        sourceType: Host.AidaClient.CitationSourceType.WORLD_FACTS,\n                      },\n                    ],\n                  },\n                  factualityMetadata: {\n                    facts: [\n                      {sourceUri: 'https://www.firstSource.test/someInfo'},\n                    ],\n                  },\n                },\n                completed: true,\n              };\n            },\n        registerClientEvent: sinon.spy(),\n      };\n    }\n\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getAidaClientWithMetadata(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n\n    const markdownView = component.shadowRoot!.querySelector('devtools-markdown-view');\n    const codeBlock = markdownView!.shadowRoot!.querySelector('devtools-code-block');\n    const citations = codeBlock!.shadowRoot!.querySelectorAll('button.citation');\n    assert.lengthOf(citations, 2);\n    assert.strictEqual(citations[0].textContent, '[1]');\n    assert.strictEqual(citations[1].textContent, '[2]');\n\n    const details = component.shadowRoot!.querySelector('details');\n    const directCitations = details!.querySelectorAll('ol x-link');\n    assert.lengthOf(directCitations, 2);\n    assert.strictEqual(directCitations[0].textContent?.trim(), 'https://www.wiki.test/directSource');\n    assert.strictEqual(directCitations[0].getAttribute('href'), 'https://www.wiki.test/directSource');\n    assert.strictEqual(directCitations[1].textContent?.trim(), 'https://www.world-fact.test/');\n    assert.strictEqual(directCitations[1].getAttribute('href'), 'https://www.world-fact.test/');\n\n    assert.isFalse(details?.hasAttribute('open'));\n    assert.isFalse(directCitations[0].classList.contains('highlighted'));\n    (citations[0] as HTMLElement).click();\n    assert.isTrue(details?.hasAttribute('open'));\n    assert.isTrue(directCitations[0].classList.contains('highlighted'));\n  });\n\n  it('displays training data citations', async () => {\n    function getAidaClientWithMetadata() {\n      return {\n        async *\n            doConversation() {\n              yield {\n                explanation: 'This is not a real answer, it is just a test.',\n                metadata: {\n                  rpcGlobalId: 0,\n                  attributionMetadata: {\n                    attributionAction: Host.AidaClient.RecitationAction.CITE,\n                    citations: [\n                      {\n                        startIndex: 5,\n                        endIndex: 9,\n                        uri: 'https://www.training.test/',\n                        sourceType: Host.AidaClient.CitationSourceType.TRAINING_DATA,\n                      },\n                      {\n                        startIndex: 15,\n                        endIndex: 22,\n                        repository: 'chromedevtools/devtools-frontend',\n                        sourceType: Host.AidaClient.CitationSourceType.TRAINING_DATA,\n                      },\n                    ],\n                  },\n                  factualityMetadata: {\n                    facts: [\n                      {sourceUri: 'https://www.firstSource.test/someInfo'},\n                    ],\n                  },\n                },\n                completed: true,\n              };\n            },\n        registerClientEvent: sinon.spy(),\n      };\n    }\n\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getAidaClientWithMetadata(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n\n    const details = component.shadowRoot!.querySelector('details');\n    assert.strictEqual(details!.querySelector('summary')!.textContent?.trim(), 'Sources and related content');\n    const xLinks = details!.querySelectorAll('x-link');\n    assert.lengthOf(xLinks, 3);\n    assert.strictEqual(xLinks[0].textContent?.trim(), 'https://www.firstSource.test/someInfo');\n    assert.strictEqual(xLinks[0].getAttribute('href'), 'https://www.firstSource.test/someInfo');\n    assert.strictEqual(xLinks[1].textContent?.trim(), 'https://www.training.test/');\n    assert.strictEqual(xLinks[1].getAttribute('href'), 'https://www.training.test/');\n    assert.strictEqual(xLinks[2].textContent?.trim(), 'https://www.github.com/chromedevtools/devtools-frontend');\n    assert.strictEqual(xLinks[2].getAttribute('href'), 'https://www.github.com/chromedevtools/devtools-frontend');\n  });\n\n  it('deduplicates citation URLs', async () => {\n    function getAidaClientWithMetadata() {\n      return {\n        async *\n            doConversation() {\n              yield {\n                explanation: 'This is not a real answer, it is just a test.',\n                metadata: {\n                  rpcGlobalId: 0,\n                  attributionMetadata: {\n                    attributionAction: Host.AidaClient.RecitationAction.CITE,\n                    citations: [\n                      {\n                        startIndex: 5,\n                        endIndex: 9,\n                        uri: 'https://www.training-and-factuality.test/',\n                        sourceType: Host.AidaClient.CitationSourceType.TRAINING_DATA,\n                      },\n                      {\n                        startIndex: 10,\n                        endIndex: 12,\n                        uri: 'https://www.all-three.test/',\n                        sourceType: Host.AidaClient.CitationSourceType.TRAINING_DATA,\n                      },\n                      {\n                        startIndex: 20,\n                        endIndex: 25,\n                        uri: 'https://www.world-fact-and-factuality.test/',\n                        sourceType: Host.AidaClient.CitationSourceType.WORLD_FACTS,\n                      },\n                      {\n                        startIndex: 26,\n                        endIndex: 30,\n                        uri: 'https://www.all-three.test/',\n                        sourceType: Host.AidaClient.CitationSourceType.WORLD_FACTS,\n                      },\n                    ],\n                  },\n                  factualityMetadata: {\n                    facts: [\n                      {sourceUri: 'https://www.training-and-factuality.test/'},\n                      {sourceUri: 'https://www.world-fact-and-factuality.test/'},\n                      {sourceUri: 'https://www.factuality.test/'},\n                      {sourceUri: 'https://www.all-three.test/'},\n                    ],\n                  },\n                },\n                completed: true,\n              };\n            },\n        registerClientEvent: sinon.spy(),\n      };\n    }\n\n    component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getAidaClientWithMetadata(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n\n    const details = component.shadowRoot!.querySelector('details');\n    assert.strictEqual(details!.querySelector('summary')!.textContent?.trim(), 'Sources and related content');\n    const xLinks = details!.querySelectorAll('x-link');\n    assert.lengthOf(xLinks, 4);\n    assert.strictEqual(xLinks[0].textContent?.trim(), 'https://www.world-fact-and-factuality.test/');\n    assert.strictEqual(xLinks[0].getAttribute('href'), 'https://www.world-fact-and-factuality.test/');\n    assert.strictEqual(xLinks[1].textContent?.trim(), 'https://www.all-three.test/');\n    assert.strictEqual(xLinks[1].getAttribute('href'), 'https://www.all-three.test/');\n    assert.strictEqual(xLinks[2].textContent?.trim(), 'https://www.training-and-factuality.test/');\n    assert.strictEqual(xLinks[2].getAttribute('href'), 'https://www.training-and-factuality.test/');\n    assert.strictEqual(xLinks[3].textContent?.trim(), 'https://www.factuality.test/');\n    assert.strictEqual(xLinks[3].getAttribute('href'), 'https://www.factuality.test/');\n  });\n\n  it('renders the opt-in teaser', async () => {\n    Common.Settings.settingForTest('console-insights-enabled').set(false);\n\n    const component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n\n    const container = document.createElement('div');\n    container.style.cssText = containerCss;\n    component.style.width = '574px';\n    component.style.height = '64px';\n    container.appendChild(component);\n    renderElementIntoDOM(container);\n\n    await drainMicroTasks();\n    await assertScreenshot('explain/console_insight_optin.png');\n  });\n\n  it('renders the consent reminder', async () => {\n    function getPromptBuilderForConsentReminder() {\n      return {\n        getSearchQuery() {\n          return '';\n        },\n        async buildPrompt() {\n          return {\n            prompt: '',\n            isPageReloadRecommended: false,\n            sources: [\n              {\n                type: Explain.SourceType.MESSAGE,\n                value: 'Something went wrong\\n\\nSomething went wrong',\n              },\n              {\n                type: Explain.SourceType.NETWORK_REQUEST,\n                value: `Request: https://example.com/data.html\n\nRequest headers:\n:authority: example.com\n:method: GET\n:path: https://example.com/data.json\n:scheme: https\naccept: */*\naccept-encoding: gzip, deflate, br\naccept-language: en-DE,en;q=0.9,de-DE;q=0.8,de;q=0.7,en-US;q=0.6\nreferer: https://example.com/demo.html\nsec-ch-ua: \"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"\nsec-ch-ua-arch: \"arm\"\nsec-ch-ua-bitness: \"64\"\nsec-ch-ua-full-version: \"121.0.6116.0\"\nsec-ch-ua-full-version-list: \"Not A(Brand\";v=\"99.0.0.0\", \"Google Chrome\";v=\"121.0.6116.0\", \"Chromium\";v=\"121.0.6116.0\"\nsec-ch-ua-mobile: ?0\nsec-ch-ua-model: \"\"\nsec-ch-ua-platform: \"macOS\"\nsec-ch-ua-platform-version: \"14.1.0\"\nsec-ch-ua-wow64: ?0\nsec-fetch-dest: empty\nsec-fetch-mode: cors\nsec-fetch-site: same-origin\nuser-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36\n\nResponse headers:\naccept-ch: Sec-CH-UA, Sec-CH-UA-Arch, Sec-CH-UA-Bitness, Sec-CH-UA-Full-Version, Sec-CH-UA-Full-Version-List, Sec-CH-UA-Mobile, Sec-CH-UA-Model, Sec-CH-UA-Platform, Sec-CH-UA-Platform-Version, Sec-CH-UA-WoW64\ncontent-length: 1646\ncontent-type: text/html; charset=UTF-8\ncross-origin-opener-policy-report-only: same-origin; report-to=\"gfe-static-content-corp\"\ndate: Fri, 10 Nov 2023 13:46:47 GMT\npermissions-policy: ch-ua=*, ch-ua-arch=*, ch-ua-bitness=*, ch-ua-full-version=*, ch-ua-full-version-list=*, ch-ua-mobile=*, ch-ua-model=*, ch-ua-platform=*, ch-ua-platform-version=*, ch-ua-wow64=*\nserver: sffe\nstrict-transport-security: max-age=31536000; includeSubdomains\nvary: Origin\n\nResponse status: 404`,\n              },\n            ]\n          };\n        }\n      };\n    }\n\n    function getAidaClientForConsentReminder() {\n      return {\n        async *\n            doConversation() {\n              await new Promise(resolve => setTimeout(resolve, 2000));\n              yield {\n                explanation: `Some text with \\`code\\`. Some code:\n\\`\\`\\`ts\nconsole.log('test');\ndocument.querySelector('test').style = 'black';\n\\`\\`\\`\nSome text with \\`code\\`. Some code:\n\\`\\`\\`ts\nconsole.log('test');\ndocument.querySelector('test').style = 'black';\n\\`\\`\\`\nSome text with \\`code\\`. Some code:\n\\`\\`\\`ts\nconsole.log('test');\ndocument.querySelector('test').style = 'black';\n\\`\\`\\`\n`,\n                metadata: {},\n                completed: true,\n              };\n            },\n        registerClientEvent: () => Promise.resolve({}),\n      };\n    }\n\n    Common.Settings.Settings.instance().createLocalSetting('console-insights-onboarding-finished', false).set(false);\n\n    const component = new Explain.ConsoleInsight(\n        getPromptBuilderForConsentReminder(), getAidaClientForConsentReminder(),\n        Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n\n    const container = document.createElement('div');\n    container.style.cssText = containerCss;\n    component.style.width = '574px';\n    component.style.height = '271px';\n    container.appendChild(component);\n    renderElementIntoDOM(container);\n\n    await drainMicroTasks();\n    await assertScreenshot('explain/console_insight_reminder.png');\n  });\n\n  it('renders the insight', async () => {\n    function getPromptBuilderForInsight() {\n      return {\n        getSearchQuery() {\n          return '';\n        },\n        async buildPrompt() {\n          return {\n            prompt: '',\n            isPageReloadRecommended: false,\n            sources: [\n              {\n                type: Explain.SourceType.MESSAGE,\n                value: 'Something went wrong\\n\\nSomething went wrong',\n              },\n              {\n                type: Explain.SourceType.STACKTRACE,\n                value: 'Stacktrace line1\\nStacketrace line2',\n              },\n              {\n                type: Explain.SourceType.RELATED_CODE,\n                value: 'RelatedCode',\n              },\n              {\n                type: Explain.SourceType.NETWORK_REQUEST,\n                value: `Request: https://example.com/data.html\n\nRequest headers:\n:authority: example.com\nuser-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36\n\nResponse headers:\nResponse status: 404`,\n              },\n            ],\n          };\n        },\n      };\n    }\n\n    function getAidaClientForInsight() {\n      return {\n        async *\n            doConversation() {\n              yield {\n                explanation: `## Result\n\nSome text with \\`code\\`. Some code:\n\\`\\`\\`ts\nconsole.log('test');\ndocument.querySelector('test').style = 'black';\n\\`\\`\\`\n\n\\`\\`\\`\n<!DOCTYPE html>\n<div>Hello world</div>\n<script>\n  console.log('Hello World');\n</script>\n\\`\\`\\`\n\nLinks: [https://example.com](https://example.com)\nImages: ![https://example.com](https://example.com)\n`,\n                metadata: {},\n                completed: true,\n              };\n            },\n        registerClientEvent: () => Promise.resolve({}),\n      };\n    }\n\n    const component = new Explain.ConsoleInsight(\n        getPromptBuilderForInsight(), getAidaClientForInsight(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    component.disableAnimations = true;\n\n    const container = document.createElement('div');\n    container.style.cssText = containerCss;\n    component.style.width = '574px';\n    component.style.height = '530px';\n    container.appendChild(component);\n    renderElementIntoDOM(container);\n\n    // Animation are hidden and started one by one so\n    // so we need multiple drains\n    await drainMicroTasks();\n    await drainMicroTasks();\n    await assertScreenshot('explain/console_insight.png');\n  });\n\n  it('renders insights with references', async () => {\n    function getPromptBuilderForInsight() {\n      return {\n        getSearchQuery() {\n          return '';\n        },\n        async buildPrompt() {\n          return {\n            prompt: '',\n            isPageReloadRecommended: false,\n            sources: [\n              {\n                type: Explain.SourceType.MESSAGE,\n                value: 'Something went wrong\\n\\nSomething went wrong',\n              },\n              {\n                type: Explain.SourceType.STACKTRACE,\n                value: 'Stacktrace line1\\nStacketrace line2',\n              },\n              {\n                type: Explain.SourceType.RELATED_CODE,\n                value: 'RelatedCode',\n              },\n              {\n                type: Explain.SourceType.NETWORK_REQUEST,\n                value: `Request: https://example.com/data.html\n\nRequest headers:\n:authority: example.com\nuser-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36\n\nResponse headers:\nResponse status: 404`,\n              },\n            ],\n          };\n        },\n      };\n    }\n\n    function getAidaClientForInsight() {\n      return {\n        async *\n            doConversation() {\n              yield {\n                explanation: `## Result\n\nHere is a text which contains both direct and indirect citations.\n\nAn indirect citation is a link to a reference which applies to the whole response.\n\nA direct citation is a link to a reference, but it only applies to a specific part of the response. Direct citations are numbered and are shown as a number within square brackets in the response text.\n`,\n                metadata: {\n                  attributionMetadata: {\n                    attributionAction: Host.AidaClient.RecitationAction.CITE,\n                    citations: [\n                      {\n                        startIndex: 20,\n                        endIndex: 50,\n                        uri: 'https://www.direct-citation.dev',\n                        sourceType: Host.AidaClient.CitationSourceType.WORLD_FACTS,\n                      },\n                      {\n                        startIndex: 170,\n                        endIndex: 176,\n                        uri: 'https://www.another-direct-citation.dev',\n                        sourceType: Host.AidaClient.CitationSourceType.WORLD_FACTS,\n                      },\n                    ],\n                  },\n                  factualityMetadata: {\n                    facts: [\n                      {\n                        sourceUri: 'https://www.indirect-citation.dev',\n                      },\n                      {\n                        sourceUri: 'https://www.the-whole-world.dev',\n                      },\n                      {\n                        sourceUri: 'https://www.even-more-content.dev',\n                      },\n                    ]\n                  }\n                },\n                completed: true,\n              };\n            },\n        registerClientEvent: () => Promise.resolve({}),\n      };\n    }\n\n    const component = new Explain.ConsoleInsight(\n        getPromptBuilderForInsight(), getAidaClientForInsight(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n\n    const container = document.createElement('div');\n    container.style.cssText = containerCss;\n    component.style.width = '576px';\n    component.style.height = '463px';\n    container.appendChild(component);\n    renderElementIntoDOM(container);\n    await raf();\n\n    const detailsElement = component.shadowRoot!.querySelector('details.references')!;\n    const transitioned = new Promise<void>(resolve => {\n      detailsElement.addEventListener('transitionend', () => {\n        resolve();\n      });\n    });\n    await raf();\n    detailsElement.querySelector('summary')!.click();\n    await transitioned;\n\n    await assertScreenshot('explain/console_insight_references.png');\n  });\n});\n"]}