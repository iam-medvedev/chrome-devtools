{"version":3,"file":"ConsoleInsight.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/explain/components/ConsoleInsight.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport {\n  dispatchClickEvent,\n  getCleanTextContentFromElements,\n  renderElementIntoDOM,\n} from '../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment, getGetHostConfigStub} from '../../../testing/EnvironmentHelpers.js';\nimport * as Explain from '../explain.js';\n\ndescribeWithEnvironment('ConsoleInsight', () => {\n  afterEach(() => {\n    Common.Settings.settingForTest('console-insights-enabled').set(true);\n    Common.Settings.settingForTest('console-insights-onboarding-finished').set(true);\n  });\n\n  function getTestAidaClient() {\n    return {\n      async *\n          fetch() {\n            yield {explanation: 'test', metadata: {rpcGlobalId: 0}, completed: true};\n          },\n      registerClientEvent: sinon.spy(),\n    };\n  }\n\n  function getTestPromptBuilder() {\n    return {\n      async buildPrompt() {\n        return {\n          prompt: '',\n          sources: [\n            {\n              type: Explain.SourceType.MESSAGE,\n              value: 'error message',\n            },\n          ],\n          isPageReloadRecommended: true,\n        };\n      },\n      getSearchQuery() {\n        return '';\n      },\n    };\n  }\n\n  async function drainMicroTasks() {\n    await new Promise(resolve => setTimeout(resolve, 0));\n  }\n\n  it('shows opt-in teaser when setting is disabled', async () => {\n    Common.Settings.settingForTest('console-insights-enabled').set(false);\n    const component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    assert.isNotNull(component.shadowRoot);\n    assert.deepEqual(\n        getCleanTextContentFromElements(component.shadowRoot, 'main'),\n        [\n          'Turn on Console insights in Settings to receive AI assistance for understanding and addressing console warnings and errors. Learn more',\n        ],\n    );\n  });\n\n  it('shows opt-in teaser when setting is disabled via disabledCondition', async () => {\n    const setting = Common.Settings.settingForTest('console-insights-enabled');\n    setting.setRegistration({\n      settingName: 'console-insights-enabled',\n      settingType: Common.Settings.SettingType.BOOLEAN,\n      defaultValue: true,\n      disabledCondition: () => {\n        return {disabled: true, reason: 'disabled for test'};\n      },\n    });\n    const component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    assert.isNotNull(component.shadowRoot);\n    assert.deepEqual(\n        getCleanTextContentFromElements(component.shadowRoot, 'main'),\n        [\n          'Turn on Console insights in Settings to receive AI assistance for understanding and addressing console warnings and errors. Learn more',\n        ],\n    );\n\n    setting.setRegistration({\n      settingName: 'console-insights-enabled',\n      settingType: Common.Settings.SettingType.BOOLEAN,\n      defaultValue: false,\n    });\n  });\n\n  it('shows reminder on first run of console insights', async () => {\n    Common.Settings.settingForTest('console-insights-onboarding-finished').set(false);\n    const component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    assert.isNotNull(component.shadowRoot);\n    assert.strictEqual(component.shadowRoot!.querySelector('h2')?.innerText, 'Understand console messages with AI');\n\n    dispatchClickEvent(component.shadowRoot!.querySelector('.continue-button')!, {\n      bubbles: true,\n      composed: true,\n    });\n    await drainMicroTasks();\n    // Rating buttons are shown.\n    assert(component.shadowRoot!.querySelector('.rating'));\n  });\n\n  const reportsRating = (positive: boolean) => async () => {\n    const stub = getGetHostConfigStub({});\n    const actionTaken = sinon.stub(Host.userMetrics, 'actionTaken');\n    const aidaClient = getTestAidaClient();\n    const component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), aidaClient, Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    dispatchClickEvent(component.shadowRoot!.querySelector(`.rating [data-rating=${positive}]`)!, {\n      bubbles: true,\n      composed: true,\n    });\n\n    assert(aidaClient.registerClientEvent.calledOnce);\n    sinon.assert.match(aidaClient.registerClientEvent.firstCall.firstArg, sinon.match({\n      corresponding_aida_rpc_global_id: 0,\n      do_conversation_client_event: {\n        user_feedback: {sentiment: positive ? 'POSITIVE' : 'NEGATIVE'},\n      },\n    }));\n    assert(actionTaken.calledWith(\n        positive ? Host.UserMetrics.Action.InsightRatedPositive : Host.UserMetrics.Action.InsightRatedNegative));\n\n    dispatchClickEvent(component.shadowRoot!.querySelector(`.rating [data-rating=${positive}]`)!, {\n      bubbles: true,\n      composed: true,\n    });\n    // Can only rate once.\n    assert(aidaClient.registerClientEvent.calledOnce);\n    stub.restore();\n  };\n\n  it('reports positive rating', reportsRating(true));\n  it('reports negative rating', reportsRating(false));\n\n  it('has no thumbs up/down buttons if logging is disabled', async () => {\n    const stub = getGetHostConfigStub({\n      aidaAvailability: {\n        disallowLogging: true,\n      },\n      devToolsConsoleInsights: {\n        enabled: true,\n      },\n    });\n    const component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    const thumbsUpButton = component.shadowRoot!.querySelector('.rating [data-rating=\"true\"]');\n    assert.isNull(thumbsUpButton);\n    const thumbsDownButton = component.shadowRoot!.querySelector('.rating [data-rating=\"false\"]');\n    assert.isNull(thumbsDownButton);\n\n    stub.restore();\n  });\n\n  it('report if the user is not logged in', async () => {\n    const component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    const content = component.shadowRoot!.querySelector('main')!.innerText.trim();\n    assert.strictEqual(content, 'This feature is only available when you sign into Chrome with your Google account.');\n  });\n\n  it('report if the navigator is offline', async () => {\n    const component = new Explain.ConsoleInsight(\n        getTestPromptBuilder(), getTestAidaClient(), Host.AidaClient.AidaAccessPreconditions.NO_INTERNET);\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    const content = component.shadowRoot!.querySelector('main')!.innerText.trim();\n    assert.strictEqual(content, 'Check your internet connection and try again.');\n  });\n});\n"]}