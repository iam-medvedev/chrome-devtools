{"version":3,"file":"InsightProvider.js","sourceRoot":"","sources":["../../../../../../front_end/panels/explain/InsightProvider.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport * as Root from '../../core/root/root.js';\n\nexport interface AidaRequest {\n  input: string;\n  client: string;\n  options?: {\n    temperature?: Number,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    model_id?: string,\n  };\n}\n\nexport class InsightProvider {\n  static buildApiRequest(input: string): AidaRequest {\n    const request: AidaRequest = {\n      input,\n      client: 'CHROME_DEVTOOLS',\n    };\n    const temperature = parseFloat(Root.Runtime.Runtime.queryParam('aidaTemperature') || '');\n    if (!isNaN(temperature)) {\n      request.options ??= {};\n      request.options.temperature = temperature;\n    }\n    const modelId = Root.Runtime.Runtime.queryParam('aidaModelId');\n    if (modelId) {\n      request.options ??= {};\n      request.options.model_id = modelId;\n    }\n    return request;\n  }\n\n  async getInsights(input: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      if (!Host.InspectorFrontendHost.InspectorFrontendHostInstance.doAidaConversation) {\n        return reject(new Error('doAidaConversation is not available'));\n      }\n      console.time('request');\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.doAidaConversation(\n          JSON.stringify(InsightProvider.buildApiRequest(input)),\n          result => {\n            console.timeEnd('request');\n            try {\n              const results = JSON.parse(result.response);\n              const text = [];\n              let inCodeChunk = false;\n              const CODE_CHUNK_SEPARATOR = '\\n`````\\n';\n              for (const result of results) {\n                if ('textChunk' in result) {\n                  if (inCodeChunk) {\n                    text.push(CODE_CHUNK_SEPARATOR);\n                    inCodeChunk = false;\n                  }\n                  text.push(result.textChunk.text);\n                } else if ('codeChunk' in result) {\n                  if (!inCodeChunk) {\n                    text.push(CODE_CHUNK_SEPARATOR);\n                    inCodeChunk = true;\n                  }\n                  text.push(result.codeChunk.code);\n                } else if ('error' in result) {\n                  if (result['detail']?.[0]?.error?.code === 403) {\n                    throw new Error('Server responded: permission denied');\n                  }\n                  throw new Error(`Server responded: ${JSON.stringify(result)}`);\n                } else {\n                  throw new Error('Unknown chunk result');\n                }\n              }\n              if (inCodeChunk) {\n                text.push(CODE_CHUNK_SEPARATOR);\n                inCodeChunk = false;\n              }\n              resolve(text.join(''));\n            } catch (err) {\n              reject(err);\n            }\n          },\n      );\n    });\n  }\n}\n"]}