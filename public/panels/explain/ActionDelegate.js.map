{"version":3,"file":"ActionDelegate.js","sourceRoot":"","sources":["../../../../../../front_end/panels/explain/ActionDelegate.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAChD,OAAO,KAAK,OAAO,MAAM,uBAAuB,CAAC;AAEjD,OAAO,EAAC,cAAc,EAAC,MAAM,gCAAgC,CAAC;AAC9D,OAAO,EAAC,eAAe,EAAC,MAAM,sBAAsB,CAAC;AACrD,OAAO,EAAC,aAAa,EAAC,MAAM,oBAAoB,CAAC;AAEjD,MAAM,OAAO,cAAc;IACzB,YAAY,CAAC,OAA2B,EAAE,QAAgB;QACxD,QAAQ,QAAQ,EAAE;YAChB,KAAK,iCAAiC,CAAC;YACvC,KAAK,uCAAuC,CAAC;YAC7C,KAAK,yCAAyC,CAAC;YAC/C,KAAK,uCAAuC,CAAC;YAC7C,KAAK,+BAA+B,CAAC,CAAC;gBACpC,MAAM,MAAM,GAAG,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;gBAC/E,MAAM,kBAAkB,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;gBACzF,IAAI,kBAAkB,EAAE;oBACtB,IAAI,QAAQ,CAAC,UAAU,CAAC,iCAAiC,CAAC,EAAE;wBAC1D,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;qBACtF;yBAAM,IAAI,QAAQ,KAAK,+BAA+B,EAAE;wBACvD,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;qBACtF;oBACD,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,kBAAkB,CAAC,CAAC;oBAC5D,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;oBAC9C,KAAK,cAAc,CAAC,MAAM,CAAC,aAAa,EAAE,eAAe,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;wBACzF,kBAAkB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;oBACzC,CAAC,CAAC,CAAC;oBACH,OAAO,IAAI,CAAC;iBACb;gBACD,OAAO,KAAK,CAAC;aACd;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Console from '../console/console.js';\n\nimport {ConsoleInsight} from './components/ConsoleInsight.js';\nimport {InsightProvider} from './InsightProvider.js';\nimport {PromptBuilder} from './PromptBuilder.js';\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'explain.console-message.context':\n      case 'explain.console-message.context.error':\n      case 'explain.console-message.context.warning':\n      case 'explain.console-message.context.other':\n      case 'explain.console-message.hover': {\n        const action = UI.ActionRegistry.ActionRegistry.instance().getAction(actionId);\n        const consoleViewMessage = context.flavor(Console.ConsoleViewMessage.ConsoleViewMessage);\n        if (consoleViewMessage) {\n          if (actionId.startsWith('explain.console-message.context')) {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightRequestedViaContextMenu);\n          } else if (actionId === 'explain.console-message.hover') {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightRequestedViaHoverButton);\n          }\n          const promptBuilder = new PromptBuilder(consoleViewMessage);\n          const insightProvider = new InsightProvider();\n          void ConsoleInsight.create(promptBuilder, insightProvider, action?.title()).then(insight => {\n            consoleViewMessage.setInsight(insight);\n          });\n          return true;\n        }\n        return false;\n      }\n    }\n    return false;\n  }\n}\n"]}