{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/browser_debugger/CategorizedBreakpointsSidebarPane.ts", "categorizedBreakpointsSidebarPane.css.js", "../../../../../../front_end/panels/browser_debugger/CSPViolationBreakpointsSidebarPane.ts", "../../../../../../front_end/panels/browser_debugger/DOMBreakpointsSidebarPane.ts", "domBreakpointsSidebarPane.css.js", "../../../../../../front_end/panels/browser_debugger/EventListenerBreakpointsSidebarPane.ts", "../../../../../../front_end/panels/browser_debugger/ObjectEventListenersSidebarPane.ts", "../../../../../../front_end/panels/browser_debugger/XHRBreakpointsSidebarPane.ts", "xhrBreakpointsSidebarPane.css.js"],
  "sourcesContent": ["// Copyright 2015 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Sources from '../../panels/sources/sources.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Lit from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport categorizedBreakpointsSidebarPaneStyles from './categorizedBreakpointsSidebarPane.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Category of breakpoints\n   */\n  auctionWorklet: 'Ad Auction Worklet',\n  /**\n   * @description Text that refers to the animation of the web page\n   */\n  animation: 'Animation',\n  /**\n   * @description Screen reader description of a hit breakpoint in the Sources panel\n   */\n  breakpointHit: 'breakpoint hit',\n  /**\n   * @description Text in DOMDebugger Model\n   */\n  canvas: 'Canvas',\n  /**\n   * @description Text in DOMDebugger Model\n   */\n  clipboard: 'Clipboard',\n  /**\n   * @description Noun. Describes a group of DOM events (such as 'select' and 'submit') in this context.\n   */\n  control: 'Control',\n  /**\n   * @description Text that refers to device such as a phone\n   */\n  device: 'Device',\n  /**\n   * @description Text in DOMDebugger Model\n   */\n  domMutation: 'DOM Mutation',\n  /**\n   * @description Text in DOMDebugger Model\n   */\n  dragDrop: 'Drag / drop',\n  /**\n   * @description Title for a group of cities\n   */\n  geolocation: 'Geolocation',\n  /**\n   * @description Text in DOMDebugger Model\n   */\n  keyboard: 'Keyboard',\n  /**\n   * @description Text to load something\n   */\n  load: 'Load',\n  /**\n   * @description Text that appears on a button for the media resource type filter.\n   */\n  media: 'Media',\n  /**\n   * @description Text in DOMDebugger Model\n   */\n  mouse: 'Mouse',\n  /**\n   * @description Text in DOMDebugger Model\n   */\n  notification: 'Notification',\n  /**\n   * @description Text to parse something\n   */\n  parse: 'Parse',\n  /**\n   * @description Text in DOMDebugger Model\n   */\n  pictureinpicture: 'Picture-in-Picture',\n  /**\n   * @description Text in DOMDebugger Model\n   */\n  pointer: 'Pointer',\n  /**\n   * @description Label for a group of JavaScript files\n   */\n  script: 'Script',\n  /**\n   * @description Category of breakpoints\n   */\n  sharedStorageWorklet: 'Shared Storage Worklet',\n  /**\n   * @description Text in DOMDebugger Model\n   */\n  timer: 'Timer',\n  /**\n   * @description Text for the touch type to simulate on a device\n   */\n  touch: 'Touch',\n  /**\n   * @description Title for a category of breakpoints on Trusted Type violations\n   */\n  trustedTypeViolations: 'Trusted Type Violations',\n  /**\n   * @description Title of the WebAudio tool\n   */\n  webaudio: 'WebAudio',\n  /**\n   * @description Text in DOMDebugger Model\n   */\n  window: 'Window',\n  /**\n   * @description Text for the service worker type.\n   */\n  worker: 'Worker',\n  /**\n   * @description Text that appears on a button for the xhr resource type filter.\n   */\n  xhr: 'XHR',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/browser_debugger/CategorizedBreakpointsSidebarPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nconst {html, render, Directives: {ref}} = Lit;\n\ninterface ViewOutput {\n  defaultFocus: Element|undefined;\n  userExpandedCategories: Set<SDK.CategorizedBreakpoint.Category>;\n}\ninterface ViewInput {\n  onFilterChanged: (filterText: string|null) => void;\n  onBreakpointChange: (breakpoint: SDK.CategorizedBreakpoint.CategorizedBreakpoint, enabled: boolean) => void;\n\n  filterText: string|null;\n  userExpandedCategories: Set<SDK.CategorizedBreakpoint.Category>;\n  highlightedItem: SDK.CategorizedBreakpoint.CategorizedBreakpoint|null;\n  categories: Map<SDK.CategorizedBreakpoint.Category, SDK.CategorizedBreakpoint.CategorizedBreakpoint[]>;\n  sortedCategoryNames: SDK.CategorizedBreakpoint.Category[];\n}\n\nexport type View = typeof DEFAULT_VIEW;\nexport const DEFAULT_VIEW = (input: ViewInput, output: ViewOutput, target: HTMLElement): void => {\n  const shouldExpandCategory = (breakpoints: SDK.CategorizedBreakpoint.CategorizedBreakpoint[]): boolean =>\n      Boolean(input.filterText) || (input.highlightedItem && breakpoints.includes(input.highlightedItem)) ||\n      breakpoints.some(breakpoint => breakpoint.enabled());\n  const filter = (breakpoint: SDK.CategorizedBreakpoint.CategorizedBreakpoint): boolean => !input.filterText ||\n      Boolean(Sources.CategorizedBreakpointL10n.getLocalizedBreakpointName(breakpoint.name).match(input.filterText)) ||\n      breakpoint === input.highlightedItem;\n  const filteredCategories =\n      input.sortedCategoryNames.values()\n          .map(category => [category, input.categories.get(category)?.filter(filter)])\n          .filter(\n              (filteredCategory): filteredCategory is\n                  [SDK.CategorizedBreakpoint.Category, SDK.CategorizedBreakpoint.CategorizedBreakpoint[]] =>\n                      Boolean(filteredCategory[1]?.length))\n          .toArray();\n\n  const onCheckboxClicked =\n      (event: Event, target: SDK.CategorizedBreakpoint.Category|SDK.CategorizedBreakpoint.CategorizedBreakpoint):\n          void => {\n            const eventTarget = event.target;\n            if (!(eventTarget instanceof UI.UIUtils.CheckboxLabel)) {\n              return;\n            }\n\n            const enabled = eventTarget.checked;\n            if (target instanceof SDK.CategorizedBreakpoint.CategorizedBreakpoint) {\n              input.onBreakpointChange(target, enabled);\n            } else {\n              input.categories.get(target)?.forEach(breakpoint => input.onBreakpointChange(breakpoint, enabled));\n            }\n          };\n\n  const classes =\n      (breakpoint: SDK.CategorizedBreakpoint.CategorizedBreakpoint): ReturnType<typeof Lit.Directives.classMap> =>\n          Lit.Directives.classMap({\n            small: true,\n            'source-code': true,\n            'breakpoint-hit': input.highlightedItem === breakpoint,\n          });\n  const categoryConfigElements = new WeakMap<HTMLLIElement, SDK.CategorizedBreakpoint.Category>();\n  const trackCategoryConfigElement = (category: SDK.CategorizedBreakpoint.Category): ReturnType<typeof ref> =>\n      ref((e: Element|undefined) => {\n        if (e instanceof HTMLLIElement) {\n          categoryConfigElements.set(e, category);\n        }\n      });\n  const onExpand = ({detail: {expanded, target}}: UI.TreeOutline.TreeViewElement.ExpandEvent): void => {\n    const category = categoryConfigElements.get(target);\n    const breakpoints = category && input.categories.get(category);\n    if (!breakpoints) {\n      return;\n    }\n    if (shouldExpandCategory(breakpoints)) {\n      // Basically ignore expand/collapse when the category is expanded by default.\n      return;\n    }\n    if (expanded) {\n      output.userExpandedCategories.add(category);\n    } else {\n      output.userExpandedCategories.delete(category);\n    }\n  };\n\n  render(\n      // clang-format off\n      html`\n    <devtools-toolbar jslog=${VisualLogging.toolbar()}>\n      <devtools-toolbar-input\n        type=\"filter\"\n        @change=${(e: CustomEvent<string>) => input.onFilterChanged(e.detail)}\n        style=\"flex: 1;\"\n        ></devtools-toolbar-input>\n    </devtools-toolbar>\n    <devtools-tree\n      ${ref(e => { output.defaultFocus = e; })}\n      @expand=${onExpand}\n      .template=${html`\n        <ul role=\"tree\">\n          ${filteredCategories.map(([category, breakpoints]) => html`\n            <li\n                role=\"treeitem\"\n                jslog-context=${category}\n                aria-checked=${breakpoints.some(breakpoint => breakpoint.enabled())\n                  ? breakpoints.some(breakpoint => !breakpoint.enabled()) ? 'mixed' : true\n                  : false}\n                ${trackCategoryConfigElement(category)}>\n              <style>${categorizedBreakpointsSidebarPaneStyles}</style>\n              <devtools-checkbox\n                class=\"small\"\n                tabIndex=-1\n                title=${getLocalizedCategory(category)}\n                ?indeterminate=${breakpoints.some(breakpoint => !breakpoint.enabled()) &&\n                                 breakpoints.some(breakpoint => breakpoint.enabled())}\n                ?checked=${!breakpoints.some(breakpoint => !breakpoint.enabled())}\n                @change=${(e: Event) => onCheckboxClicked(e, category)}\n              >${getLocalizedCategory(category)}</devtools-checkbox>\n              <ul\n                  role=\"group\"\n                  ?hidden=${!shouldExpandCategory(breakpoints) && !input.userExpandedCategories.has(category)}>\n                ${breakpoints.map(breakpoint => html`\n                <li\n                    role=\"treeitem\"\n                    aria-checked=${breakpoint.enabled()}\n                    jslog-context=${Platform.StringUtilities.toKebabCase(breakpoint.name)}>\n                  <div ?hidden=${breakpoint !== input.highlightedItem} class=\"breakpoint-hit-marker\"></div>\n                  <devtools-checkbox\n                    class=${classes(breakpoint)}\n                    tabIndex=-1\n                    title=${Sources.CategorizedBreakpointL10n.getLocalizedBreakpointName(breakpoint.name)}\n                    ?checked=${breakpoint.enabled()}\n                    aria-description=${breakpoint === input.highlightedItem ? i18nString(UIStrings.breakpointHit)\n                                                                            : Lit.nothing}\n                    @change=${(e: Event) => onCheckboxClicked(e, breakpoint)}\n                  >${Sources.CategorizedBreakpointL10n.getLocalizedBreakpointName(breakpoint.name)}</devtools-checkbox>\n                </li>`)}\n              </ul>\n            </li>`)}\n        </ul>\n      `}>\n    </devtools-tree>`,\n      // clang-format on\n      target);\n};\n\nexport abstract class CategorizedBreakpointsSidebarPane extends UI.Widget.VBox {\n  readonly #viewId: string;\n  // A layout test reaches into this\n  private readonly categories =\n      new Map<SDK.CategorizedBreakpoint.Category, SDK.CategorizedBreakpoint.CategorizedBreakpoint[]>();\n  #sortedCategories: SDK.CategorizedBreakpoint.Category[];\n  #highlightedItem: SDK.CategorizedBreakpoint.CategorizedBreakpoint|null = null;\n  #filterText: string|null = null;\n  #view: View;\n  #userExpandedCategories = new Set<SDK.CategorizedBreakpoint.Category>();\n  constructor(\n      breakpoints: SDK.CategorizedBreakpoint.CategorizedBreakpoint[], jslog: string, viewId: string,\n      view = DEFAULT_VIEW) {\n    super({useShadowDom: true, jslog});\n    this.#view = view;\n    this.#viewId = viewId;\n\n    for (const breakpoint of breakpoints) {\n      let categorizedBreakpoints = this.categories.get(breakpoint.category());\n      if (!categorizedBreakpoints) {\n        categorizedBreakpoints = [];\n        this.categories.set(breakpoint.category(), categorizedBreakpoints);\n      }\n      categorizedBreakpoints.push(breakpoint);\n    }\n    this.#sortedCategories = [...this.categories.keys()].sort((a, b) => {\n      const categoryA = getLocalizedCategory(a);\n      const categoryB = getLocalizedCategory(b);\n      return categoryA.localeCompare(categoryB, i18n.DevToolsLocale.DevToolsLocale.instance().locale);\n    });\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerPaused, this.update, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerResumed, this.update, this);\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.Target.Target, this.update, this);\n\n    this.requestUpdate();\n  }\n\n  protected getBreakpointFromPausedDetails(_details: SDK.DebuggerModel.DebuggerPausedDetails):\n      SDK.CategorizedBreakpoint.CategorizedBreakpoint|null {\n    return null;\n  }\n\n  update(): void {\n    const target = UI.Context.Context.instance().flavor(SDK.Target.Target);\n    const debuggerModel = target ? target.model(SDK.DebuggerModel.DebuggerModel) : null;\n    const details = debuggerModel ? debuggerModel.debuggerPausedDetails() : null;\n\n    const breakpoint = details && this.getBreakpointFromPausedDetails(details);\n    this.#highlightedItem = breakpoint;\n    if (!breakpoint) {\n      return;\n    }\n\n    void UI.ViewManager.ViewManager.instance().showView(this.#viewId);\n\n    this.requestUpdate();\n  }\n\n  #onFilterChanged(filterText: string|null): void {\n    this.#filterText = filterText;\n    this.requestUpdate();\n  }\n\n  protected onBreakpointChanged(breakpoint: SDK.CategorizedBreakpoint.CategorizedBreakpoint, enabled: boolean): void {\n    breakpoint.setEnabled(enabled);\n    this.requestUpdate();\n  }\n\n  override performUpdate(): void {\n    const input: ViewInput = {\n      filterText: this.#filterText,\n      onFilterChanged: this.#onFilterChanged.bind(this),\n      onBreakpointChange: this.onBreakpointChanged.bind(this),\n      sortedCategoryNames: this.#sortedCategories,\n      categories: this.categories,\n      highlightedItem: this.#highlightedItem,\n      userExpandedCategories: this.#userExpandedCategories,\n    };\n    const that = this;\n    const output: ViewOutput = {\n      set defaultFocus(e: Element|undefined) {\n        that.setDefaultFocusedElement(e ?? null);\n      },\n      userExpandedCategories: this.#userExpandedCategories,\n    };\n    this.#view(input, output, this.contentElement);\n  }\n}\n\nconst LOCALIZED_CATEGORIES: Record<SDK.CategorizedBreakpoint.Category, () => Platform.UIString.LocalizedString> = {\n  [SDK.CategorizedBreakpoint.Category.ANIMATION]: i18nLazyString(UIStrings.animation),\n  [SDK.CategorizedBreakpoint.Category.AUCTION_WORKLET]: i18nLazyString(UIStrings.auctionWorklet),\n  [SDK.CategorizedBreakpoint.Category.CANVAS]: i18nLazyString(UIStrings.canvas),\n  [SDK.CategorizedBreakpoint.Category.CLIPBOARD]: i18nLazyString(UIStrings.clipboard),\n  [SDK.CategorizedBreakpoint.Category.CONTROL]: i18nLazyString(UIStrings.control),\n  [SDK.CategorizedBreakpoint.Category.DEVICE]: i18nLazyString(UIStrings.device),\n  [SDK.CategorizedBreakpoint.Category.DOM_MUTATION]: i18nLazyString(UIStrings.domMutation),\n  [SDK.CategorizedBreakpoint.Category.DRAG_DROP]: i18nLazyString(UIStrings.dragDrop),\n  [SDK.CategorizedBreakpoint.Category.GEOLOCATION]: i18nLazyString(UIStrings.geolocation),\n  [SDK.CategorizedBreakpoint.Category.KEYBOARD]: i18nLazyString(UIStrings.keyboard),\n  [SDK.CategorizedBreakpoint.Category.LOAD]: i18nLazyString(UIStrings.load),\n  [SDK.CategorizedBreakpoint.Category.MEDIA]: i18nLazyString(UIStrings.media),\n  [SDK.CategorizedBreakpoint.Category.MOUSE]: i18nLazyString(UIStrings.mouse),\n  [SDK.CategorizedBreakpoint.Category.NOTIFICATION]: i18nLazyString(UIStrings.notification),\n  [SDK.CategorizedBreakpoint.Category.PARSE]: i18nLazyString(UIStrings.parse),\n  [SDK.CategorizedBreakpoint.Category.PICTURE_IN_PICTURE]: i18nLazyString(UIStrings.pictureinpicture),\n  [SDK.CategorizedBreakpoint.Category.POINTER]: i18nLazyString(UIStrings.pointer),\n  [SDK.CategorizedBreakpoint.Category.SCRIPT]: i18nLazyString(UIStrings.script),\n  [SDK.CategorizedBreakpoint.Category.SHARED_STORAGE_WORKLET]: i18nLazyString(UIStrings.sharedStorageWorklet),\n  [SDK.CategorizedBreakpoint.Category.TIMER]: i18nLazyString(UIStrings.timer),\n  [SDK.CategorizedBreakpoint.Category.TOUCH]: i18nLazyString(UIStrings.touch),\n  [SDK.CategorizedBreakpoint.Category.TRUSTED_TYPE_VIOLATION]: i18nLazyString(UIStrings.trustedTypeViolations),\n  [SDK.CategorizedBreakpoint.Category.WEB_AUDIO]: i18nLazyString(UIStrings.webaudio),\n  [SDK.CategorizedBreakpoint.Category.WINDOW]: i18nLazyString(UIStrings.window),\n  [SDK.CategorizedBreakpoint.Category.WORKER]: i18nLazyString(UIStrings.worker),\n  [SDK.CategorizedBreakpoint.Category.XHR]: i18nLazyString(UIStrings.xhr),\n};\n\nfunction getLocalizedCategory(category: SDK.CategorizedBreakpoint.Category): Platform.UIString.LocalizedString {\n  return LOCALIZED_CATEGORIES[category]();\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2016 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n:host {\n  margin: 0;\n  padding: 2px 4px;\n  min-height: 18px;\n}\n\n.tree-outline {\n  padding: 0;\n}\n\n.tree-outline li {\n  margin-left: 14px;\n  user-select: text;\n}\n\n.tree-outline li.parent {\n  margin-left: 1px;\n}\n\n.tree-outline li:not(.parent)::before {\n  display: none;\n}\n\n.breakpoint-hit {\n  background-color: var(--sys-color-yellow-container);\n  color: var(--sys-color-on-yellow-container);\n}\n\n.breakpoint-hit-marker {\n  background-color: var(--sys-color-yellow-container);\n  border-right: 3px solid var(--sys-color-yellow-outline);\n  color: var(--sys-color-on-yellow-container);\n  height: 100%;\n  left: 0;\n  margin-left: -30px;\n  position: absolute;\n  right: -4px;\n  z-index: -1;\n}\n\ndevtools-checkbox.source-code {\n  max-width: 100%;\n}\n\n/*# sourceURL=${import.meta.resolve('./categorizedBreakpointsSidebarPane.css')} */`;", "// Copyright 2015 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {CategorizedBreakpointsSidebarPane} from './CategorizedBreakpointsSidebarPane.js';\n\nexport class CSPViolationBreakpointsSidebarPane extends CategorizedBreakpointsSidebarPane {\n  constructor() {\n    const breakpoints: SDK.DOMDebuggerModel.CSPViolationBreakpoint[] =\n        SDK.DOMDebuggerModel.DOMDebuggerManager.instance().cspViolationBreakpoints();\n    super(\n        breakpoints, `${VisualLogging.section('sources.csp-violation-breakpoints')}`,\n        'sources.csp-violation-breakpoints');\n  }\n\n  protected override getBreakpointFromPausedDetails(details: SDK.DebuggerModel.DebuggerPausedDetails):\n      SDK.CategorizedBreakpoint.CategorizedBreakpoint|null {\n    const breakpointType = details.auxData?.['violationType'] ? details.auxData['violationType'] : '';\n    const breakpoints = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().cspViolationBreakpoints();\n    const breakpoint = breakpoints.find(x => x.type() === breakpointType);\n    return breakpoint ? breakpoint : null;\n  }\n\n  protected override onBreakpointChanged(breakpoint: SDK.CategorizedBreakpoint.CategorizedBreakpoint, enabled: boolean):\n      void {\n    super.onBreakpointChanged(breakpoint, enabled);\n    SDK.DOMDebuggerModel.DOMDebuggerManager.instance().updateCSPViolationBreakpoints();\n  }\n}\n", "// Copyright 2011 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport * as Sources from '../sources/sources.js';\n\nimport domBreakpointsSidebarPaneStyles from './domBreakpointsSidebarPane.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Header text to indicate there are no breakpoints\n   */\n  noBreakpoints: 'No DOM breakpoints',\n  /**\n   * @description DOM breakpoints description that shows if no DOM breakpoints are set\n   */\n  domBreakpointsDescription: 'DOM breakpoints pause on the code that changes a DOM node or its children.',\n  /**\n   * @description Accessibility label for the DOM breakpoints list in the Sources panel\n   */\n  domBreakpointsList: 'DOM Breakpoints list',\n  /**\n   * @description Text with two placeholders separated by a colon\n   * @example {Node removed} PH1\n   * @example {div#id1} PH2\n   */\n  sS: '{PH1}: {PH2}',\n  /**\n   * @description Text with three placeholders separated by a colon and a comma\n   * @example {Node removed} PH1\n   * @example {div#id1} PH2\n   * @example {checked} PH3\n   */\n  sSS: '{PH1}: {PH2}, {PH3}',\n  /**\n   * @description Text exposed to screen readers on checked items.\n   */\n  checked: 'checked',\n  /**\n   * @description Accessible text exposed to screen readers when the screen reader encounters an unchecked checkbox.\n   */\n  unchecked: 'unchecked',\n  /**\n   * @description Accessibility label for hit breakpoints in the Sources panel.\n   * @example {checked} PH1\n   */\n  sBreakpointHit: '{PH1} breakpoint hit',\n  /**\n   * @description Screen reader description of a hit breakpoint in the Sources panel\n   */\n  breakpointHit: 'breakpoint hit',\n  /**\n   * @description A context menu item in the DOM Breakpoints sidebar that reveals the node on which the current breakpoint is set.\n   */\n  revealDomNodeInElementsPanel: 'Reveal DOM node in Elements panel',\n  /**\n   * @description Text to remove a breakpoint\n   */\n  removeBreakpoint: 'Remove breakpoint',\n  /**\n   * @description A context menu item in the DOMBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n   */\n  removeAllDomBreakpoints: 'Remove all DOM breakpoints',\n  /**\n   * @description Text in DOMBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n   */\n  subtreeModified: 'Subtree modified',\n  /**\n   * @description Text in DOMBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n   */\n  attributeModified: 'Attribute modified',\n  /**\n   * @description Text in DOMBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n   */\n  nodeRemoved: 'Node removed',\n  /**\n   * @description Entry in context menu of the elements pane, allowing developers to select a DOM\n   * breakpoint for the element that they have right-clicked on. Short for the action 'set a\n   * breakpoint on this DOM Element'. A breakpoint pauses the website when the code reaches a\n   * specified line, or when a specific action happen (in this case, when the DOM Element is\n   * modified).\n   */\n  breakOn: 'Break on',\n  /**\n   * @description Screen reader description for removing a DOM breakpoint.\n   */\n  breakpointRemoved: 'Breakpoint removed',\n  /**\n   * @description Screen reader description for setting a DOM breakpoint.\n   */\n  breakpointSet: 'Breakpoint set',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/browser_debugger/DOMBreakpointsSidebarPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nconst DOM_BREAKPOINT_DOCUMENTATION_URL =\n    'https://developer.chrome.com/docs/devtools/javascript/breakpoints#dom' as Platform.DevToolsPath.UrlString;\n\nlet domBreakpointsSidebarPaneInstance: DOMBreakpointsSidebarPane;\n\nexport class DOMBreakpointsSidebarPane extends UI.Widget.VBox implements\n    UI.ContextFlavorListener.ContextFlavorListener, UI.ListControl.ListDelegate<SDK.DOMDebuggerModel.DOMBreakpoint> {\n  elementToCheckboxes: WeakMap<Element, UI.UIUtils.CheckboxLabel>;\n  readonly #emptyElement: HTMLElement;\n  readonly #breakpoints: UI.ListModel.ListModel<SDK.DOMDebuggerModel.DOMBreakpoint>;\n  #list: UI.ListControl.ListControl<SDK.DOMDebuggerModel.DOMBreakpoint>;\n  #highlightedBreakpoint: SDK.DOMDebuggerModel.DOMBreakpoint|null;\n\n  private constructor() {\n    super({useShadowDom: true});\n    this.registerRequiredCSS(domBreakpointsSidebarPaneStyles);\n\n    this.elementToCheckboxes = new WeakMap();\n\n    this.contentElement.setAttribute(\n        'jslog', `${VisualLogging.section('sources.dom-breakpoints').track({resize: true})}`);\n    this.contentElement.classList.add('dom-breakpoints-container');\n    this.#emptyElement = this.contentElement.createChild('div', 'placeholder');\n    this.#emptyElement.createChild('div', 'gray-info-message').textContent = i18nString(UIStrings.noBreakpoints);\n    const emptyWidget =\n        new UI.EmptyWidget.EmptyWidget(UIStrings.noBreakpoints, i18nString(UIStrings.domBreakpointsDescription));\n    emptyWidget.link = DOM_BREAKPOINT_DOCUMENTATION_URL;\n    emptyWidget.show(this.#emptyElement);\n\n    this.#breakpoints = new UI.ListModel.ListModel();\n    this.#list = new UI.ListControl.ListControl(this.#breakpoints, this, UI.ListControl.ListMode.NonViewport);\n    this.contentElement.appendChild(this.#list.element);\n    this.#list.element.classList.add('breakpoint-list', 'hidden');\n    UI.ARIAUtils.markAsList(this.#list.element);\n    UI.ARIAUtils.setLabel(this.#list.element, i18nString(UIStrings.domBreakpointsList));\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DOMDebuggerModel.DOMDebuggerModel, SDK.DOMDebuggerModel.Events.DOM_BREAKPOINT_ADDED, this.breakpointAdded,\n        this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DOMDebuggerModel.DOMDebuggerModel, SDK.DOMDebuggerModel.Events.DOM_BREAKPOINT_TOGGLED,\n        this.breakpointToggled, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DOMDebuggerModel.DOMDebuggerModel, SDK.DOMDebuggerModel.Events.DOM_BREAKPOINTS_REMOVED,\n        this.breakpointsRemoved, this);\n\n    for (const domDebuggerModel of SDK.TargetManager.TargetManager.instance().models(\n             SDK.DOMDebuggerModel.DOMDebuggerModel)) {\n      domDebuggerModel.retrieveDOMBreakpoints();\n      for (const breakpoint of domDebuggerModel.domBreakpoints()) {\n        this.addBreakpoint(breakpoint);\n      }\n    }\n\n    this.#highlightedBreakpoint = null;\n    this.update();\n  }\n\n  static instance(): DOMBreakpointsSidebarPane {\n    if (!domBreakpointsSidebarPaneInstance) {\n      domBreakpointsSidebarPaneInstance = new DOMBreakpointsSidebarPane();\n    }\n    return domBreakpointsSidebarPaneInstance;\n  }\n\n  createElementForItem(item: SDK.DOMDebuggerModel.DOMBreakpoint): Element {\n    const element = document.createElement('div');\n    element.classList.add('breakpoint-entry');\n    element.setAttribute(\n        'jslog',\n        `${VisualLogging.domBreakpoint().context(item.type).track({keydown: 'ArrowUp|ArrowDown|PageUp|PageDown'})}`);\n    element.addEventListener('contextmenu', this.contextMenu.bind(this, item), true);\n    UI.ARIAUtils.markAsListitem(element);\n    element.tabIndex = -1;\n\n    const checkbox = UI.UIUtils.CheckboxLabel.create(/* title */ undefined, item.enabled);\n    checkbox.addEventListener('click', this.checkboxClicked.bind(this, item), false);\n    checkbox.tabIndex = -1;\n    this.elementToCheckboxes.set(element, checkbox);\n    element.appendChild(checkbox);\n    element.addEventListener('keydown', event => {\n      if (event.key === ' ') {\n        checkbox.click();\n        event.consume(true);\n      }\n    });\n\n    const labelElement = document.createElement('div');\n    labelElement.classList.add('dom-breakpoint');\n    element.appendChild(labelElement);\n    const description = document.createElement('div');\n    const breakpointTypeLabel = BreakpointTypeLabels.get(item.type);\n    description.textContent = breakpointTypeLabel ? breakpointTypeLabel() : null;\n    const breakpointTypeText = breakpointTypeLabel ? breakpointTypeLabel() : '';\n    UI.ARIAUtils.setLabel(checkbox, breakpointTypeText);\n    checkbox.setAttribute('jslog', `${VisualLogging.toggle().track({click: true})}`);\n    const checkedStateText = item.enabled ? i18nString(UIStrings.checked) : i18nString(UIStrings.unchecked);\n    const linkifiedNode = document.createElement('monospace');\n    linkifiedNode.style.display = 'block';\n    labelElement.appendChild(linkifiedNode);\n    void Common.Linkifier.Linkifier.linkify(item.node, {preventKeyboardFocus: true, tooltip: undefined})\n        .then(linkified => {\n          linkifiedNode.appendChild(linkified);\n          // Give the checkbox an aria-label as it is required for all form element\n          UI.ARIAUtils.setLabel(\n              checkbox, i18nString(UIStrings.sS, {PH1: breakpointTypeText, PH2: linkified.deepTextContent()}));\n          // The parent list element is the one that actually gets focused.\n          // Assign it an aria-label with complete information for the screen reader to read out properly\n          UI.ARIAUtils.setLabel(\n              element,\n              i18nString(\n                  UIStrings.sSS, {PH1: breakpointTypeText, PH2: linkified.deepTextContent(), PH3: checkedStateText}));\n        });\n\n    labelElement.appendChild(description);\n\n    if (item === this.#highlightedBreakpoint) {\n      element.classList.add('breakpoint-hit');\n      UI.ARIAUtils.setDescription(element, i18nString(UIStrings.sBreakpointHit, {PH1: checkedStateText}));\n      UI.ARIAUtils.setDescription(checkbox, i18nString(UIStrings.breakpointHit));\n    } else {\n      UI.ARIAUtils.setDescription(element, checkedStateText);\n    }\n\n    this.#emptyElement.classList.add('hidden');\n    this.#list.element.classList.remove('hidden');\n\n    return element;\n  }\n\n  heightForItem(_item: SDK.DOMDebuggerModel.DOMBreakpoint): number {\n    return 0;\n  }\n\n  isItemSelectable(_item: SDK.DOMDebuggerModel.DOMBreakpoint): boolean {\n    return true;\n  }\n\n  updateSelectedItemARIA(_fromElement: Element|null, _toElement: Element|null): boolean {\n    return true;\n  }\n\n  selectedItemChanged(\n      _from: SDK.DOMDebuggerModel.DOMBreakpoint|null, _to: SDK.DOMDebuggerModel.DOMBreakpoint|null,\n      fromElement: HTMLElement|null, toElement: HTMLElement|null): void {\n    if (fromElement) {\n      fromElement.tabIndex = -1;\n    }\n\n    if (toElement) {\n      this.setDefaultFocusedElement(toElement);\n      toElement.tabIndex = 0;\n      if (this.hasFocus()) {\n        toElement.focus();\n      }\n    }\n  }\n\n  private breakpointAdded(event: Common.EventTarget.EventTargetEvent<SDK.DOMDebuggerModel.DOMBreakpoint>): void {\n    this.addBreakpoint(event.data);\n  }\n\n  private breakpointToggled(event: Common.EventTarget.EventTargetEvent<SDK.DOMDebuggerModel.DOMBreakpoint>): void {\n    const hadFocus = this.hasFocus();\n    const breakpoint = event.data;\n    this.#list.refreshItem(breakpoint);\n    if (hadFocus) {\n      this.focus();\n    }\n  }\n\n  private breakpointsRemoved(event: Common.EventTarget.EventTargetEvent<SDK.DOMDebuggerModel.DOMBreakpoint[]>): void {\n    const hadFocus = this.hasFocus();\n    const breakpoints = event.data;\n    let lastIndex = -1;\n    for (const breakpoint of breakpoints) {\n      const index = this.#breakpoints.indexOf(breakpoint);\n      if (index >= 0) {\n        this.#breakpoints.remove(index);\n        lastIndex = index;\n      }\n    }\n    if (this.#breakpoints.length === 0) {\n      this.#emptyElement.classList.remove('hidden');\n      this.setDefaultFocusedElement(this.#emptyElement);\n      this.#list.element.classList.add('hidden');\n    } else if (lastIndex >= 0) {\n      const breakpointToSelect = this.#breakpoints.at(lastIndex);\n      if (breakpointToSelect) {\n        this.#list.selectItem(breakpointToSelect);\n      }\n    }\n    if (hadFocus) {\n      this.focus();\n    }\n  }\n\n  private addBreakpoint(breakpoint: SDK.DOMDebuggerModel.DOMBreakpoint): void {\n    this.#breakpoints.insertWithComparator(breakpoint, (breakpointA, breakpointB) => {\n      if (breakpointA.type > breakpointB.type) {\n        return -1;\n      }\n      if (breakpointA.type < breakpointB.type) {\n        return 1;\n      }\n      return 0;\n    });\n    if (!this.#list.selectedItem() || !this.hasFocus()) {\n      this.#list.selectItem(this.#breakpoints.at(0));\n    }\n  }\n\n  private contextMenu(breakpoint: SDK.DOMDebuggerModel.DOMBreakpoint, event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.defaultSection().appendItem(\n        i18nString(UIStrings.revealDomNodeInElementsPanel), () => Common.Revealer.reveal(breakpoint.node),\n        {jslogContext: 'reveal-in-elements'});\n    contextMenu.defaultSection().appendItem(i18nString(UIStrings.removeBreakpoint), () => {\n      breakpoint.domDebuggerModel.removeDOMBreakpoint(breakpoint.node, breakpoint.type);\n    }, {jslogContext: 'remove-breakpoint'});\n    contextMenu.defaultSection().appendItem(i18nString(UIStrings.removeAllDomBreakpoints), () => {\n      breakpoint.domDebuggerModel.removeAllDOMBreakpoints();\n    }, {jslogContext: 'remove-all-dom-breakpoints'});\n    void contextMenu.show();\n  }\n\n  private checkboxClicked(breakpoint: SDK.DOMDebuggerModel.DOMBreakpoint, event: Event): void {\n    breakpoint.domDebuggerModel.toggleDOMBreakpoint(\n        breakpoint, event.target ? (event.target as HTMLInputElement).checked : false);\n  }\n\n  flavorChanged(_object: Object|null): void {\n    this.update();\n  }\n\n  update(): void {\n    const details = UI.Context.Context.instance().flavor(SDK.DebuggerModel.DebuggerPausedDetails);\n    if (this.#highlightedBreakpoint) {\n      const oldHighlightedBreakpoint = this.#highlightedBreakpoint;\n      this.#highlightedBreakpoint = null;\n      this.#list.refreshItem(oldHighlightedBreakpoint);\n    }\n    if (!details?.auxData || details.reason !== Protocol.Debugger.PausedEventReason.DOM) {\n      return;\n    }\n\n    const domDebuggerModel = details.debuggerModel.target().model(SDK.DOMDebuggerModel.DOMDebuggerModel);\n    if (!domDebuggerModel) {\n      return;\n    }\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const data = domDebuggerModel.resolveDOMBreakpointData(details.auxData as any);\n    if (!data) {\n      return;\n    }\n\n    for (const breakpoint of this.#breakpoints) {\n      if (breakpoint.node === data.node && breakpoint.type === data.type) {\n        this.#highlightedBreakpoint = breakpoint;\n      }\n    }\n    if (this.#highlightedBreakpoint) {\n      this.#list.refreshItem(this.#highlightedBreakpoint);\n    }\n    void UI.ViewManager.ViewManager.instance().showView('sources.dom-breakpoints');\n  }\n}\n\nconst BreakpointTypeLabels = new Map([\n  [Protocol.DOMDebugger.DOMBreakpointType.SubtreeModified, i18nLazyString(UIStrings.subtreeModified)],\n  [Protocol.DOMDebugger.DOMBreakpointType.AttributeModified, i18nLazyString(UIStrings.attributeModified)],\n  [Protocol.DOMDebugger.DOMBreakpointType.NodeRemoved, i18nLazyString(UIStrings.nodeRemoved)],\n]);\n\nexport class ContextMenuProvider implements UI.ContextMenu.Provider<SDK.DOMModel.DOMNode> {\n  appendApplicableItems(_event: Event, contextMenu: UI.ContextMenu.ContextMenu, node: SDK.DOMModel.DOMNode): void {\n    if (node.pseudoType()) {\n      return;\n    }\n    const domDebuggerModel = node.domModel().target().model(SDK.DOMDebuggerModel.DOMDebuggerModel);\n    if (!domDebuggerModel) {\n      return;\n    }\n\n    function toggleBreakpoint(type: Protocol.DOMDebugger.DOMBreakpointType): void {\n      if (!domDebuggerModel) {\n        return;\n      }\n      const label = Sources.DebuggerPausedMessage.BreakpointTypeNouns.get(type);\n      const labelString = label ? label() : '';\n      if (domDebuggerModel.hasDOMBreakpoint(node, type)) {\n        domDebuggerModel.removeDOMBreakpoint(node, type);\n        UI.ARIAUtils.LiveAnnouncer.alert(`${i18nString(UIStrings.breakpointRemoved)}: ${labelString}`);\n      } else {\n        domDebuggerModel.setDOMBreakpoint(node, type);\n        UI.ARIAUtils.LiveAnnouncer.alert(`${i18nString(UIStrings.breakpointSet)}: ${labelString}`);\n      }\n    }\n\n    const breakpointsMenu =\n        contextMenu.debugSection().appendSubMenuItem(i18nString(UIStrings.breakOn), false, 'break-on');\n    const allBreakpointTypes: Protocol.EnumerableEnum<typeof Protocol.DOMDebugger.DOMBreakpointType> = {\n      SubtreeModified: Protocol.DOMDebugger.DOMBreakpointType.SubtreeModified,\n      AttributeModified: Protocol.DOMDebugger.DOMBreakpointType.AttributeModified,\n      NodeRemoved: Protocol.DOMDebugger.DOMBreakpointType.NodeRemoved,\n    };\n    for (const type of Object.values(allBreakpointTypes)) {\n      const label = Sources.DebuggerPausedMessage.BreakpointTypeNouns.get(type);\n      if (label) {\n        breakpointsMenu.defaultSection().appendCheckboxItem(\n            label(), toggleBreakpoint.bind(null, type),\n            {checked: domDebuggerModel.hasDOMBreakpoint(node, type), jslogContext: type});\n      }\n    }\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2017 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.dom-breakpoints-container {\n  overflow: auto;\n}\n\n.breakpoint-list {\n  padding-bottom: 3px;\n}\n\n.breakpoint-list .dom-breakpoint > div {\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.breakpoint-entry {\n  display: flex;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  padding: 2px 0;\n}\n\n.breakpoint-entry:focus-visible {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.breakpoint-hit {\n  background-color: var(--sys-color-neutral-container);\n  color: var(--sys-color-on-surface);\n}\n\n.placeholder {\n  display: flex;\n  height: 100%;\n  justify-content: center;\n}\n\n:host-context(.sources.panel) .empty-view-scroller {\n  display: none;\n}\n\n:host-context(.elements.panel) .placeholder .gray-info-message {\n  display: none;\n}\n\n@media (forced-colors: active) {\n  .breakpoint-entry:focus-visible,\n  .breakpoint-list .breakpoint-entry:hover {\n    forced-color-adjust: none;\n    background-color: Highlight;\n  }\n\n  .breakpoint-entry:focus-visible *,\n  .breakpoint-list .breakpoint-entry:hover * {\n    color: HighlightText;\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./domBreakpointsSidebarPane.css')} */`;", "// Copyright 2015 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {CategorizedBreakpointsSidebarPane} from './CategorizedBreakpointsSidebarPane.js';\n\nlet eventListenerBreakpointsSidebarPaneInstance: EventListenerBreakpointsSidebarPane;\n\nexport class EventListenerBreakpointsSidebarPane extends CategorizedBreakpointsSidebarPane {\n  private constructor() {\n    let breakpoints: SDK.CategorizedBreakpoint.CategorizedBreakpoint[] =\n        SDK.DOMDebuggerModel.DOMDebuggerManager.instance().eventListenerBreakpoints();\n    const nonDomBreakpoints = SDK.EventBreakpointsModel.EventBreakpointsManager.instance().eventListenerBreakpoints();\n    breakpoints = breakpoints.concat(nonDomBreakpoints);\n\n    super(\n        breakpoints, `${VisualLogging.section('sources.event-listener-breakpoints')}`,\n        'sources.event-listener-breakpoints');\n  }\n\n  static instance(): EventListenerBreakpointsSidebarPane {\n    if (!eventListenerBreakpointsSidebarPaneInstance) {\n      eventListenerBreakpointsSidebarPaneInstance = new EventListenerBreakpointsSidebarPane();\n    }\n    return eventListenerBreakpointsSidebarPaneInstance;\n  }\n\n  override getBreakpointFromPausedDetails(details: SDK.DebuggerModel.DebuggerPausedDetails):\n      SDK.CategorizedBreakpoint.CategorizedBreakpoint|null {\n    const auxData = details.auxData as SDK.DebuggerModel.EventListenerPausedDetailsAuxData | undefined;\n    if (!auxData) {\n      return null;\n    }\n    const domBreakpoint =\n        auxData && SDK.DOMDebuggerModel.DOMDebuggerManager.instance().resolveEventListenerBreakpoint(auxData);\n    if (domBreakpoint) {\n      return domBreakpoint;\n    }\n    return SDK.EventBreakpointsModel.EventBreakpointsManager.instance().resolveEventListenerBreakpoint(auxData);\n  }\n}\n", "// Copyright 2015 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport * as EventListeners from '../event_listeners/event_listeners.js';\n\nexport class ObjectEventListenersSidebarPane extends UI.ThrottledWidget.ThrottledWidget implements\n    UI.Toolbar.ItemsProvider {\n  #lastRequestedContext?: SDK.RuntimeModel.ExecutionContext;\n\n  // TODO(bmeurer): This is only public for web tests.\n  readonly eventListenersView: EventListeners.EventListenersView.EventListenersView;\n\n  constructor() {\n    super();\n    this.contentElement.setAttribute('jslog', `${VisualLogging.section('sources.global-listeners')}`);\n\n    this.eventListenersView = new EventListeners.EventListenersView.EventListenersView();\n    this.eventListenersView.changeCallback = this.update.bind(this);\n    this.eventListenersView.enableDefaultTreeFocus = true;\n    this.eventListenersView.show(this.element);\n    this.setDefaultFocusedChild(this.eventListenersView);\n    this.update();\n  }\n\n  toolbarItems(): UI.Toolbar.ToolbarItem[] {\n    const refreshButton = UI.Toolbar.Toolbar.createActionButton('browser-debugger.refresh-global-event-listeners');\n    refreshButton.setSize(Buttons.Button.Size.SMALL);\n    return [refreshButton];\n  }\n\n  protected override async doUpdate(): Promise<void> {\n    if (this.#lastRequestedContext) {\n      this.#lastRequestedContext.runtimeModel.releaseObjectGroup(objectGroupName);\n      this.#lastRequestedContext = undefined;\n    }\n\n    const windowObjects: SDK.RemoteObject.RemoteObject[] = [];\n    const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    if (executionContext) {\n      this.#lastRequestedContext = executionContext;\n      const result = await executionContext.evaluate(\n          {\n            expression: 'self',\n            objectGroup: objectGroupName,\n            includeCommandLineAPI: false,\n            silent: true,\n            returnByValue: false,\n            generatePreview: false,\n          },\n          /* userGesture */ false,\n          /* awaitPromise */ false);\n      if (!('error' in result) && !result.exceptionDetails) {\n        windowObjects.push(result.object);\n      }\n    }\n    await this.eventListenersView.addObjects(windowObjects);\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this.update, this);\n    UI.Context.Context.instance().setFlavor(ObjectEventListenersSidebarPane, this);\n  }\n\n  override willHide(): void {\n    UI.Context.Context.instance().setFlavor(ObjectEventListenersSidebarPane, null);\n    UI.Context.Context.instance().removeFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this.update, this);\n    super.willHide();\n    if (this.#lastRequestedContext) {\n      this.#lastRequestedContext.runtimeModel.releaseObjectGroup(objectGroupName);\n      this.#lastRequestedContext = undefined;\n    }\n  }\n}\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'browser-debugger.refresh-global-event-listeners': {\n        const eventListenersSidebarPane = context.flavor(ObjectEventListenersSidebarPane);\n        if (eventListenersSidebarPane) {\n          eventListenersSidebarPane.update();\n          return true;\n        }\n        return false;\n      }\n    }\n    return false;\n  }\n}\n\nexport const objectGroupName = 'object-event-listeners-sidebar-pane';\n", "// Copyright 2015 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport xhrBreakpointsSidebarPaneStyles from './xhrBreakpointsSidebarPane.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Title of the 'XHR/fetch Breakpoints' tool in the bottom sidebar of the Sources tool\n   */\n  xhrfetchBreakpoints: 'XHR/fetch Breakpoints',\n  /**\n   * @description Text to indicate there are no breakpoints\n   */\n  noBreakpoints: 'No breakpoints',\n  /**\n   * @description Label for a button in the Sources panel that opens the input field to create a new XHR/fetch breakpoint.\n   */\n  addXhrfetchBreakpoint: 'Add XHR/fetch breakpoint',\n  /**\n   * @description Text to add a breakpoint\n   */\n  addBreakpoint: 'Add breakpoint',\n  /**\n   * @description Input element container text content in XHRBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n   */\n  breakWhenUrlContains: 'Break when URL contains:',\n  /**\n   * @description Accessible label for XHR/fetch breakpoint text input\n   */\n  urlBreakpoint: 'URL Breakpoint',\n  /**\n   * @description Text in XHRBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n   * @example {example.com} PH1\n   */\n  urlContainsS: 'URL contains \"{PH1}\"',\n  /**\n   * @description Text in XHRBreakpoints Sidebar Pane of the JavaScript Debugging pane in the Sources panel or the DOM Breakpoints pane in the Elements panel\n   */\n  anyXhrOrFetch: 'Any XHR or fetch',\n  /**\n   * @description Screen reader description of a hit breakpoint in the Sources panel\n   */\n  breakpointHit: 'breakpoint hit',\n  /**\n   * @description Text to remove all breakpoints\n   */\n  removeAllBreakpoints: 'Remove all breakpoints',\n  /**\n   * @description Text to remove a breakpoint\n   */\n  removeBreakpoint: 'Remove breakpoint',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/browser_debugger/XHRBreakpointsSidebarPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst containerToBreakpointEntry = new WeakMap<Element, HTMLElement>();\n\nconst breakpointEntryToCheckbox = new WeakMap<Element, UI.UIUtils.CheckboxLabel>();\n\nlet xhrBreakpointsSidebarPaneInstance: XHRBreakpointsSidebarPane;\n\nexport class XHRBreakpointsSidebarPane extends UI.Widget.VBox implements UI.ContextFlavorListener.ContextFlavorListener,\n                                                                         UI.Toolbar.ItemsProvider,\n                                                                         UI.ListControl.ListDelegate<string> {\n  readonly #breakpoints: UI.ListModel.ListModel<string>;\n  #list: UI.ListControl.ListControl<string>;\n  readonly #emptyElement: HTMLElement;\n  readonly #breakpointElements: Map<string, Element>;\n  readonly #addButton: UI.Toolbar.ToolbarButton;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  #hitBreakpoint?: any;\n\n  private constructor() {\n    super({\n      jslog: `${VisualLogging.section('source.xhr-breakpoints')}`,\n      useShadowDom: true,\n    });\n    this.registerRequiredCSS(xhrBreakpointsSidebarPaneStyles);\n\n    this.#breakpoints = new UI.ListModel.ListModel();\n    this.#list = new UI.ListControl.ListControl(this.#breakpoints, this, UI.ListControl.ListMode.NonViewport);\n    this.contentElement.appendChild(this.#list.element);\n    this.#list.element.classList.add('breakpoint-list', 'hidden');\n    UI.ARIAUtils.markAsList(this.#list.element);\n    UI.ARIAUtils.setLabel(this.#list.element, i18nString(UIStrings.xhrfetchBreakpoints));\n    this.#emptyElement = this.contentElement.createChild('div', 'gray-info-message');\n    this.#emptyElement.textContent = i18nString(UIStrings.noBreakpoints);\n\n    this.#breakpointElements = new Map();\n\n    this.#addButton = new UI.Toolbar.ToolbarButton(\n        i18nString(UIStrings.addXhrfetchBreakpoint), 'plus', undefined, 'sources.add-xhr-fetch-breakpoint');\n    this.#addButton.setSize(Buttons.Button.Size.SMALL);\n    this.#addButton.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, () => {\n      void this.addButtonClicked();\n    });\n\n    this.#emptyElement.addEventListener('contextmenu', this.emptyElementContextMenu.bind(this), true);\n    this.#emptyElement.tabIndex = -1;\n    this.restoreBreakpoints();\n    this.update();\n  }\n\n  static instance(): XHRBreakpointsSidebarPane {\n    if (!xhrBreakpointsSidebarPaneInstance) {\n      xhrBreakpointsSidebarPaneInstance = new XHRBreakpointsSidebarPane();\n    }\n    return xhrBreakpointsSidebarPaneInstance;\n  }\n\n  toolbarItems(): UI.Toolbar.ToolbarItem[] {\n    return [this.#addButton];\n  }\n\n  private emptyElementContextMenu(event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.defaultSection().appendItem(\n        i18nString(UIStrings.addBreakpoint), this.addButtonClicked.bind(this),\n        {jslogContext: 'sources.add-xhr-fetch-breakpoint'});\n    void contextMenu.show();\n  }\n\n  private async addButtonClicked(): Promise<void> {\n    await UI.ViewManager.ViewManager.instance().showView('sources.xhr-breakpoints');\n\n    const inputElementContainer = document.createElement('p');\n    inputElementContainer.classList.add('breakpoint-condition');\n    inputElementContainer.textContent = i18nString(UIStrings.breakWhenUrlContains);\n    inputElementContainer.setAttribute('jslog', `${VisualLogging.value('condition').track({change: true})}`);\n\n    const inputElement = inputElementContainer.createChild('span', 'breakpoint-condition-input');\n    UI.ARIAUtils.setLabel(inputElement, i18nString(UIStrings.urlBreakpoint));\n    this.addListElement(inputElementContainer, this.#list.element.firstChild as Element | null);\n\n    const commit = (_element: Element, newText: string): void => {\n      this.removeListElement(inputElementContainer);\n      SDK.DOMDebuggerModel.DOMDebuggerManager.instance().addXHRBreakpoint(newText, true);\n      this.setBreakpoint(newText);\n      this.update();\n    };\n\n    const cancel = (): void => {\n      this.removeListElement(inputElementContainer);\n      this.update();\n    };\n\n    const config = new UI.InplaceEditor.Config(commit, cancel, undefined);\n    UI.InplaceEditor.InplaceEditor.startEditing(inputElement, config);\n  }\n\n  heightForItem(_item: string): number {\n    return 0;\n  }\n\n  isItemSelectable(_item: string): boolean {\n    return true;\n  }\n\n  private setBreakpoint(breakKeyword: string): void {\n    if (this.#breakpoints.indexOf(breakKeyword) !== -1) {\n      this.#list.refreshItem(breakKeyword);\n    } else {\n      this.#breakpoints.insertWithComparator(breakKeyword, (a, b) => {\n        if (a > b) {\n          return 1;\n        }\n        if (a < b) {\n          return -1;\n        }\n        return 0;\n      });\n    }\n    if (!this.#list.selectedItem() || !this.hasFocus()) {\n      this.#list.selectItem(this.#breakpoints.at(0));\n    }\n  }\n\n  createElementForItem(item: string): Element {\n    const listItemElement = document.createElement('div');\n    UI.ARIAUtils.markAsListitem(listItemElement);\n    const element = listItemElement.createChild('div', 'breakpoint-entry');\n    containerToBreakpointEntry.set(listItemElement, element);\n    const enabled = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().xhrBreakpoints().get(item) || false;\n    UI.ARIAUtils.markAsCheckbox(element);\n    UI.ARIAUtils.setChecked(element, enabled);\n    element.addEventListener('contextmenu', this.contextMenu.bind(this, item), true);\n\n    const title = item ? i18nString(UIStrings.urlContainsS, {PH1: item}) : i18nString(UIStrings.anyXhrOrFetch);\n    const checkbox = UI.UIUtils.CheckboxLabel.create(title, enabled, undefined, undefined, /* small */ true);\n    UI.ARIAUtils.setHidden(checkbox, true);\n    UI.ARIAUtils.setLabel(element, title);\n    element.appendChild(checkbox);\n    checkbox.addEventListener('click', this.checkboxClicked.bind(this, item, enabled), false);\n    element.addEventListener('click', event => {\n      if (event.target === element) {\n        this.checkboxClicked(item, enabled);\n      }\n    }, false);\n    breakpointEntryToCheckbox.set(element, checkbox);\n    checkbox.tabIndex = -1;\n    element.tabIndex = -1;\n    if (item === this.#list.selectedItem()) {\n      element.tabIndex = 0;\n      this.setDefaultFocusedElement(element);\n    }\n    element.addEventListener('keydown', event => {\n      let handled = false;\n      if (event.key === ' ') {\n        this.checkboxClicked(item, enabled);\n        handled = true;\n      } else if (event.key === 'Enter') {\n        this.labelClicked(item);\n        handled = true;\n      }\n\n      if (handled) {\n        event.consume(true);\n      }\n    });\n\n    if (item === this.#hitBreakpoint) {\n      element.classList.add('breakpoint-hit');\n      UI.ARIAUtils.setDescription(element, i18nString(UIStrings.breakpointHit));\n    }\n\n    checkbox.classList.add('cursor-auto');\n    checkbox.addEventListener('dblclick', this.labelClicked.bind(this, item), false);\n    this.#breakpointElements.set(item, listItemElement);\n    listItemElement.setAttribute('jslog', `${VisualLogging.item().track({\n                                   click: true,\n                                   dblclick: true,\n                                   keydown: 'ArrowUp|ArrowDown|PageUp|PageDown|Enter|Space',\n                                 })}`);\n    return listItemElement;\n  }\n\n  selectedItemChanged(_from: string|null, _to: string|null, fromElement: HTMLElement|null, toElement: HTMLElement|null):\n      void {\n    if (fromElement) {\n      const breakpointEntryElement = containerToBreakpointEntry.get(fromElement);\n      if (!breakpointEntryElement) {\n        throw new Error('Expected breakpoint entry to be found for an element');\n      }\n      breakpointEntryElement.tabIndex = -1;\n    }\n    if (toElement) {\n      const breakpointEntryElement = containerToBreakpointEntry.get(toElement);\n      if (!breakpointEntryElement) {\n        throw new Error('Expected breakpoint entry to be found for an element');\n      }\n      this.setDefaultFocusedElement(breakpointEntryElement);\n      breakpointEntryElement.tabIndex = 0;\n      if (this.hasFocus()) {\n        breakpointEntryElement.focus();\n      }\n    }\n  }\n\n  updateSelectedItemARIA(_fromElement: Element|null, _toElement: Element|null): boolean {\n    return true;\n  }\n\n  private removeBreakpoint(breakKeyword: string): void {\n    const index = this.#breakpoints.indexOf(breakKeyword);\n    if (index >= 0) {\n      this.#breakpoints.remove(index);\n    }\n    this.#breakpointElements.delete(breakKeyword);\n    this.update();\n  }\n\n  private addListElement(element: Element, beforeNode: Node|null): void {\n    this.#list.element.insertBefore(element, beforeNode);\n    this.#emptyElement.classList.add('hidden');\n    this.#list.element.classList.remove('hidden');\n  }\n\n  private removeListElement(element: Element): void {\n    this.#list.element.removeChild(element);\n    if (!this.#list.element.firstElementChild) {\n      this.#emptyElement.classList.remove('hidden');\n      this.#list.element.classList.add('hidden');\n    }\n  }\n\n  private contextMenu(breakKeyword: string, event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n\n    function removeBreakpoint(this: XHRBreakpointsSidebarPane): void {\n      SDK.DOMDebuggerModel.DOMDebuggerManager.instance().removeXHRBreakpoint(breakKeyword);\n      this.removeBreakpoint(breakKeyword);\n    }\n\n    function removeAllBreakpoints(this: XHRBreakpointsSidebarPane): void {\n      for (const url of this.#breakpointElements.keys()) {\n        SDK.DOMDebuggerModel.DOMDebuggerManager.instance().removeXHRBreakpoint(url);\n        this.removeBreakpoint(url);\n      }\n      this.update();\n    }\n    const removeAllTitle = i18nString(UIStrings.removeAllBreakpoints);\n\n    contextMenu.defaultSection().appendItem(\n        i18nString(UIStrings.addBreakpoint), this.addButtonClicked.bind(this),\n        {jslogContext: 'sources.add-xhr-fetch-breakpoint'});\n    contextMenu.defaultSection().appendItem(\n        i18nString(UIStrings.removeBreakpoint), removeBreakpoint.bind(this),\n        {jslogContext: 'sources.remove-xhr-fetch-breakpoint'});\n    contextMenu.defaultSection().appendItem(\n        removeAllTitle, removeAllBreakpoints.bind(this), {jslogContext: 'sources.remove-all-xhr-fetch-breakpoints'});\n    void contextMenu.show();\n  }\n\n  private checkboxClicked(breakKeyword: string, checked: boolean): void {\n    const hadFocus = this.hasFocus();\n    SDK.DOMDebuggerModel.DOMDebuggerManager.instance().toggleXHRBreakpoint(breakKeyword, !checked);\n    this.#list.refreshItem(breakKeyword);\n    this.#list.selectItem(breakKeyword);\n    if (hadFocus) {\n      this.focus();\n    }\n  }\n\n  private labelClicked(breakKeyword: string): void {\n    const element = this.#breakpointElements.get(breakKeyword);\n    const inputElement = document.createElement('span');\n    inputElement.classList.add('breakpoint-condition');\n    inputElement.textContent = breakKeyword;\n    inputElement.setAttribute('jslog', `${VisualLogging.value('condition').track({change: true})}`);\n    if (element) {\n      this.#list.element.insertBefore(inputElement, element);\n      element.classList.add('hidden');\n    }\n\n    const commit = (inputElement: Element, newText: string, _oldText: string|null, element?: Element): void => {\n      this.removeListElement(inputElement);\n      SDK.DOMDebuggerModel.DOMDebuggerManager.instance().removeXHRBreakpoint(breakKeyword);\n      this.removeBreakpoint(breakKeyword);\n      let enabled = true;\n      if (element) {\n        const breakpointEntryElement = containerToBreakpointEntry.get(element);\n        const checkboxElement =\n            breakpointEntryElement ? breakpointEntryToCheckbox.get(breakpointEntryElement) : undefined;\n        if (checkboxElement) {\n          enabled = checkboxElement.checked;\n        }\n      }\n      SDK.DOMDebuggerModel.DOMDebuggerManager.instance().addXHRBreakpoint(newText, enabled);\n      this.setBreakpoint(newText);\n      this.#list.selectItem(newText);\n      this.focus();\n    };\n\n    const cancel = (inputElement: Element, element?: Element): void => {\n      this.removeListElement(inputElement);\n      if (element) {\n        element.classList.remove('hidden');\n      }\n      this.focus();\n    };\n\n    const config = new UI.InplaceEditor.Config(commit, cancel, element);\n    UI.InplaceEditor.InplaceEditor.startEditing(inputElement, config);\n  }\n\n  flavorChanged(_object: Object|null): void {\n    this.update();\n  }\n\n  update(): void {\n    const isEmpty = this.#breakpoints.length === 0;\n    this.#list.element.classList.toggle('hidden', isEmpty);\n    this.#emptyElement.classList.toggle('hidden', !isEmpty);\n\n    const details = UI.Context.Context.instance().flavor(SDK.DebuggerModel.DebuggerPausedDetails);\n    if (!details || details.reason !== Protocol.Debugger.PausedEventReason.XHR) {\n      if (this.#hitBreakpoint) {\n        const oldHitBreakpoint = this.#hitBreakpoint;\n        this.#hitBreakpoint = undefined;\n        if (this.#breakpoints.indexOf(oldHitBreakpoint) >= 0) {\n          this.#list.refreshItem(oldHitBreakpoint);\n        }\n      }\n      return;\n    }\n    const url = details.auxData?.['breakpointURL'];\n    this.#hitBreakpoint = url;\n    if (this.#breakpoints.indexOf(url) < 0) {\n      return;\n    }\n    this.#list.refreshItem(url);\n    void UI.ViewManager.ViewManager.instance().showView('sources.xhr-breakpoints');\n  }\n\n  private restoreBreakpoints(): void {\n    const breakpoints = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().xhrBreakpoints();\n    for (const url of breakpoints.keys()) {\n      this.setBreakpoint(url);\n    }\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2017 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.breakpoint-list {\n  padding-bottom: 3px;\n}\n\n.breakpoint-list .editing.being-edited {\n  overflow: hidden;\n  white-space: nowrap;\n}\n\n.breakpoint-condition {\n  display: block;\n  margin: 4px 8px 4px 23px;\n}\n\n.breakpoint-condition-input {\n  display: block;\n  margin-left: 0;\n  margin-right: 0;\n  border: 1px solid var(--sys-color-neutral-outline);\n  border-radius: 4px;\n\n  &:focus {\n    outline: 5px auto var(--sys-color-tonal-outline);\n    box-shadow: none;\n  }\n}\n\n.breakpoint-entry {\n  white-space: nowrap;\n  padding: 2px 0;\n}\n\n.breakpoint-list .breakpoint-entry:focus-visible {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.breakpoint-entry devtools-checkbox {\n  max-width: 100%;\n}\n\n.breakpoint-hit {\n  background-color: var(--sys-color-yellow-container);\n  border-right: 3px solid var(--sys-color-yellow-outline);\n  color: var(--sys-color-on-yellow-container);\n}\n\n@media (forced-colors: active) {\n  .breakpoint-list .breakpoint-entry:hover,\n  .breakpoint-list .breakpoint-entry:focus-visible {\n    forced-color-adjust: none;\n    background-color: Highlight;\n  }\n\n  .breakpoint-list .breakpoint-entry:hover *,\n  .breakpoint-list .breakpoint-entry:focus-visible * {\n    color: HighlightText;\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./xhrBreakpointsSidebarPane.css')} */`;"],
  "mappings": "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",
  "names": ["target", "SDK", "VisualLogging", "i18n", "SDK", "UI", "VisualLogging", "Sources", "UIStrings", "str_", "i18nString", "i18nLazyString", "item", "SDK", "VisualLogging", "domBreakpoint", "SDK", "UI", "VisualLogging", "i18n", "SDK", "Buttons", "UI", "VisualLogging", "UIStrings", "str_", "i18nString", "item", "inputElement", "element"]
}
