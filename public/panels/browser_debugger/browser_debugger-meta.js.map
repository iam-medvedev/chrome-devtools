{
  "version": 3,
  "sources": ["browser_debugger-meta.prebundle.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Sources from '../../panels/sources/sources.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as BrowserDebugger from './browser_debugger.js';\n\nconst UIStrings = {\n  /**\n   * @description Command for showing the 'Event Listener Breakpoints' tool\n   */\n  showEventListenerBreakpoints: 'Show Event Listener Breakpoints',\n  /**\n   * @description Title of the 'Event Listener Breakpoints' tool in the bottom sidebar of the Sources tool\n   */\n  eventListenerBreakpoints: 'Event Listener Breakpoints',\n  /**\n   * @description Title for showing the 'CSP Violation Breakpoints' tool in the Sources panel\n   */\n  showCspViolationBreakpoints: 'Show CSP Violation Breakpoints',\n  /**\n   * @description Title of the 'CSP Violation Breakpoints' tool in the bottom sidebar of the Sources tool\n   */\n  cspViolationBreakpoints: 'CSP Violation Breakpoints',\n  /**\n   * @description Command for showing the 'XHR/fetch Breakpoints' in the sources panel\n   */\n  showXhrfetchBreakpoints: 'Show XHR/fetch Breakpoints',\n  /**\n   * @description Title of the 'XHR/fetch Breakpoints' tool in the bottom sidebar of the Sources tool\n   */\n  xhrfetchBreakpoints: 'XHR/fetch Breakpoints',\n  /**\n   * @description Command for showing the 'DOM Breakpoints' tool in the Elements panel\n   */\n  showDomBreakpoints: 'Show DOM Breakpoints',\n  /**\n   * @description Title of the 'DOM Breakpoints' tool in the bottom sidebar of the Sources tool\n   */\n  domBreakpoints: 'DOM Breakpoints',\n  /**\n   * @description Command for showing the 'Global Listeners' tool in the sources panel\n   */\n  showGlobalListeners: 'Show Global Listeners',\n  /**\n   * @description Title of the 'Global Listeners' tool in the bottom sidebar of the Sources tool\n   */\n  globalListeners: 'Global Listeners',\n  /**\n   * @description Text that refers to one or a group of webpages\n   */\n  page: 'Page',\n  /**\n   * @description Command for showing the 'Page' tab in the Sources panel\n   */\n  showPage: 'Show Page',\n  /**\n   * @description Title as part of a tool to override existing configurations\n   */\n  overrides: 'Overrides',\n  /**\n   * @description Command for showing the 'Overrides' tool in the Sources panel\n   */\n  showOverrides: 'Show Overrides',\n  /**\n   * @description Title for a type of source files\n   */\n  contentScripts: 'Content scripts',\n  /**\n   * @description Command for showing the 'Content scripts' tool in the sources panel\n   */\n  showContentScripts: 'Show Content scripts',\n  /**\n   * @description Label for a button in the sources panel that refreshes the list of global event listeners.\n   */\n  refreshGlobalListeners: 'Refresh global listeners',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/browser_debugger/browser_debugger-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\nlet loadedBrowserDebuggerModule: (typeof BrowserDebugger|undefined);\n\nasync function loadBrowserDebuggerModule(): Promise<typeof BrowserDebugger> {\n  if (!loadedBrowserDebuggerModule) {\n    loadedBrowserDebuggerModule = await import('./browser_debugger.js');\n  }\n  return loadedBrowserDebuggerModule;\n}\n\nfunction maybeRetrieveContextTypes<T = unknown>(\n    getClassCallBack: (loadedBrowserDebuggerModule: typeof BrowserDebugger) => T[]): T[] {\n  if (loadedBrowserDebuggerModule === undefined) {\n    return [];\n  }\n  return getClassCallBack(loadedBrowserDebuggerModule);\n}\n\nlet loadedSourcesModule: (typeof Sources|undefined);\n\n//  The sources module is imported here because the view with id `navigator-network`\n//  is implemented by `NetworkNavigatorView` in sources. It cannot be registered\n//  in the sources module as it belongs to the shell app and thus all apps\n//  that extend from shell will have such view registered. This would cause a\n//  collision with node_app as a separate view with the same id is registered in it.\nasync function loadSourcesModule(): Promise<typeof Sources> {\n  if (!loadedSourcesModule) {\n    loadedSourcesModule = await import('../sources/sources.js');\n  }\n  return loadedSourcesModule;\n}\n\nUI.ViewManager.registerViewExtension({\n  async loadView() {\n    const BrowserDebugger = await loadBrowserDebuggerModule();\n    return BrowserDebugger.EventListenerBreakpointsSidebarPane.EventListenerBreakpointsSidebarPane.instance();\n  },\n  id: 'sources.event-listener-breakpoints',\n  location: UI.ViewManager.ViewLocationValues.SOURCES_SIDEBAR_BOTTOM,\n  commandPrompt: i18nLazyString(UIStrings.showEventListenerBreakpoints),\n  title: i18nLazyString(UIStrings.eventListenerBreakpoints),\n  order: 9,\n  persistence: UI.ViewManager.ViewPersistence.PERMANENT,\n});\n\nUI.ViewManager.registerViewExtension({\n  async loadView() {\n    const BrowserDebugger = await loadBrowserDebuggerModule();\n    return new BrowserDebugger.CSPViolationBreakpointsSidebarPane.CSPViolationBreakpointsSidebarPane();\n  },\n  id: 'sources.csp-violation-breakpoints',\n  location: UI.ViewManager.ViewLocationValues.SOURCES_SIDEBAR_BOTTOM,\n  commandPrompt: i18nLazyString(UIStrings.showCspViolationBreakpoints),\n  title: i18nLazyString(UIStrings.cspViolationBreakpoints),\n  order: 10,\n  persistence: UI.ViewManager.ViewPersistence.PERMANENT,\n});\n\nUI.ViewManager.registerViewExtension({\n  async loadView() {\n    const BrowserDebugger = await loadBrowserDebuggerModule();\n    return BrowserDebugger.XHRBreakpointsSidebarPane.XHRBreakpointsSidebarPane.instance();\n  },\n  id: 'sources.xhr-breakpoints',\n  location: UI.ViewManager.ViewLocationValues.SOURCES_SIDEBAR_BOTTOM,\n  commandPrompt: i18nLazyString(UIStrings.showXhrfetchBreakpoints),\n  title: i18nLazyString(UIStrings.xhrfetchBreakpoints),\n  order: 5,\n  persistence: UI.ViewManager.ViewPersistence.PERMANENT,\n  hasToolbar: true,\n});\n\nUI.ViewManager.registerViewExtension({\n  async loadView() {\n    const BrowserDebugger = await loadBrowserDebuggerModule();\n    return BrowserDebugger.DOMBreakpointsSidebarPane.DOMBreakpointsSidebarPane.instance();\n  },\n  id: 'sources.dom-breakpoints',\n  location: UI.ViewManager.ViewLocationValues.SOURCES_SIDEBAR_BOTTOM,\n  commandPrompt: i18nLazyString(UIStrings.showDomBreakpoints),\n  title: i18nLazyString(UIStrings.domBreakpoints),\n  order: 7,\n  persistence: UI.ViewManager.ViewPersistence.PERMANENT,\n});\n\nUI.ViewManager.registerViewExtension({\n  async loadView() {\n    const BrowserDebugger = await loadBrowserDebuggerModule();\n    return new BrowserDebugger.ObjectEventListenersSidebarPane.ObjectEventListenersSidebarPane();\n  },\n  id: 'sources.global-listeners',\n  location: UI.ViewManager.ViewLocationValues.SOURCES_SIDEBAR_BOTTOM,\n  commandPrompt: i18nLazyString(UIStrings.showGlobalListeners),\n  title: i18nLazyString(UIStrings.globalListeners),\n  order: 8,\n  persistence: UI.ViewManager.ViewPersistence.PERMANENT,\n  hasToolbar: true,\n});\n\nUI.ViewManager.registerViewExtension({\n  async loadView() {\n    const BrowserDebugger = await loadBrowserDebuggerModule();\n    return BrowserDebugger.DOMBreakpointsSidebarPane.DOMBreakpointsSidebarPane.instance();\n  },\n  id: 'elements.dom-breakpoints',\n  location: UI.ViewManager.ViewLocationValues.ELEMENTS_SIDEBAR,\n  commandPrompt: i18nLazyString(UIStrings.showDomBreakpoints),\n  title: i18nLazyString(UIStrings.domBreakpoints),\n  order: 6,\n  persistence: UI.ViewManager.ViewPersistence.PERMANENT,\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.NAVIGATOR_VIEW,\n  id: 'navigator-network',\n  title: i18nLazyString(UIStrings.page),\n  commandPrompt: i18nLazyString(UIStrings.showPage),\n  order: 2,\n  persistence: UI.ViewManager.ViewPersistence.PERMANENT,\n  async loadView() {\n    const Sources = await loadSourcesModule();\n    return Sources.SourcesNavigator.NetworkNavigatorView.instance();\n  },\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.NAVIGATOR_VIEW,\n  id: 'navigator-overrides',\n  title: i18nLazyString(UIStrings.overrides),\n  commandPrompt: i18nLazyString(UIStrings.showOverrides),\n  order: 4,\n  persistence: UI.ViewManager.ViewPersistence.PERMANENT,\n  async loadView() {\n    const Sources = await loadSourcesModule();\n    return Sources.SourcesNavigator.OverridesNavigatorView.instance();\n  },\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.NAVIGATOR_VIEW,\n  id: 'navigator-content-scripts',\n  title: i18nLazyString(UIStrings.contentScripts),\n  commandPrompt: i18nLazyString(UIStrings.showContentScripts),\n  order: 5,\n  persistence: UI.ViewManager.ViewPersistence.PERMANENT,\n  condition: () => Root.Runtime.getPathName() !== '/bundled/worker_app.html',\n  async loadView() {\n    const Sources = await loadSourcesModule();\n    return new Sources.SourcesNavigator.ContentScriptsNavigatorView();\n  },\n});\n\nUI.ActionRegistration.registerActionExtension({\n  category: UI.ActionRegistration.ActionCategory.DEBUGGER,\n  actionId: 'browser-debugger.refresh-global-event-listeners',\n  async loadActionDelegate() {\n    const BrowserDebugger = await loadBrowserDebuggerModule();\n    return new BrowserDebugger.ObjectEventListenersSidebarPane.ActionDelegate();\n  },\n  title: i18nLazyString(UIStrings.refreshGlobalListeners),\n  iconClass: UI.ActionRegistration.IconClass.REFRESH,\n  contextTypes() {\n    return maybeRetrieveContextTypes(\n        BrowserDebugger =>\n            [BrowserDebugger.ObjectEventListenersSidebarPane.ObjectEventListenersSidebarPane,\n    ]);\n  },\n});\n\nUI.ContextMenu.registerProvider({\n  contextTypes() {\n    return [\n      SDK.DOMModel.DOMNode,\n    ];\n  },\n  async loadProvider() {\n    const BrowserDebugger = await loadBrowserDebuggerModule();\n    return new BrowserDebugger.DOMBreakpointsSidebarPane.ContextMenuProvider();\n  },\n  experiment: undefined,\n});\n\nUI.Context.registerListener({\n  contextTypes() {\n    return [SDK.DebuggerModel.DebuggerPausedDetails];\n  },\n  async loadListener() {\n    const BrowserDebugger = await loadBrowserDebuggerModule();\n    return BrowserDebugger.XHRBreakpointsSidebarPane.XHRBreakpointsSidebarPane.instance();\n  },\n});\n\nUI.Context.registerListener({\n  contextTypes() {\n    return [SDK.DebuggerModel.DebuggerPausedDetails];\n  },\n  async loadListener() {\n    const BrowserDebugger = await loadBrowserDebuggerModule();\n    return BrowserDebugger.DOMBreakpointsSidebarPane.DOMBreakpointsSidebarPane.instance();\n  },\n});\n"],
  "mappings": "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",
  "names": []
}
