{
  "version": 3,
  "sources": ["js_timeline-meta.prebundle.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Timeline from '../timeline/timeline.js';\n\nconst UIStrings = {\n  /**\n   * @description Text for the performance of something\n   */\n  performance: 'Performance',\n  /**\n   * @description Command for showing the 'Performance' tool\n   */\n  showPerformance: 'Show Performance',\n  /**\n   * @description Title of an action in the timeline tool to show history\n   */\n  showRecentTimelineSessions: 'Show recent timeline sessions',\n  /**\n   * @description Text to record a series of actions for analysis\n   */\n  record: 'Record',\n  /**\n   * @description Text of an item that stops the running task\n   */\n  stop: 'Stop',\n  /**\n   * @description Title of an action in the timeline tool to record a reload of the current page\n   */\n  recordAndReload: 'Record and reload',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/js_timeline/js_timeline-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet loadedTimelineModule: (typeof Timeline|undefined);\n\nasync function loadTimelineModule(): Promise<typeof Timeline> {\n  if (!loadedTimelineModule) {\n    loadedTimelineModule = await import('../timeline/timeline.js');\n  }\n  return loadedTimelineModule;\n}\n\nfunction maybeRetrieveTimelineContextTypes<T = unknown>(getClassCallBack: (timelineModule: typeof Timeline) => T[]):\n    T[] {\n  if (loadedTimelineModule === undefined) {\n    return [];\n  }\n  return getClassCallBack(loadedTimelineModule);\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.PANEL,\n  id: 'timeline',\n  title: i18nLazyString(UIStrings.performance),\n  commandPrompt: i18nLazyString(UIStrings.showPerformance),\n  order: 66,\n  hasToolbar: false,\n  isPreviewFeature: true,\n  async loadView() {\n    const Timeline = await loadTimelineModule();\n    return Timeline.TimelinePanel.TimelinePanel.instance({forceNew: null, isNode: true});\n  },\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'timeline.show-history',\n  async loadActionDelegate() {\n    const Timeline = await loadTimelineModule();\n    return new Timeline.TimelinePanel.ActionDelegate();\n  },\n  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,\n  title: i18nLazyString(UIStrings.showRecentTimelineSessions),\n  contextTypes() {\n    return maybeRetrieveTimelineContextTypes(Timeline => [Timeline.TimelinePanel.TimelinePanel]);\n  },\n  bindings: [\n    {\n      platform: UI.ActionRegistration.Platforms.WINDOWS_LINUX,\n      shortcut: 'Ctrl+H',\n    },\n    {\n      platform: UI.ActionRegistration.Platforms.MAC,\n      shortcut: 'Meta+Y',\n    },\n  ],\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'timeline.toggle-recording',\n  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,\n  iconClass: UI.ActionRegistration.IconClass.START_RECORDING,\n  toggleable: true,\n  toggledIconClass: UI.ActionRegistration.IconClass.STOP_RECORDING,\n  toggleWithRedColor: true,\n  contextTypes() {\n    return maybeRetrieveTimelineContextTypes(Timeline => [Timeline.TimelinePanel.TimelinePanel]);\n  },\n  async loadActionDelegate() {\n    const Timeline = await loadTimelineModule();\n    return new Timeline.TimelinePanel.ActionDelegate();\n  },\n  options: [\n    {\n      value: true,\n      title: i18nLazyString(UIStrings.record),\n    },\n    {\n      value: false,\n      title: i18nLazyString(UIStrings.stop),\n    },\n  ],\n  bindings: [\n    {\n      platform: UI.ActionRegistration.Platforms.WINDOWS_LINUX,\n      shortcut: 'Ctrl+E',\n    },\n    {\n      platform: UI.ActionRegistration.Platforms.MAC,\n      shortcut: 'Meta+E',\n    },\n  ],\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'timeline.record-reload',\n  iconClass: UI.ActionRegistration.IconClass.REFRESH,\n  contextTypes() {\n    return maybeRetrieveTimelineContextTypes(Timeline => [Timeline.TimelinePanel.TimelinePanel]);\n  },\n  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,\n  title: i18nLazyString(UIStrings.recordAndReload),\n  async loadActionDelegate() {\n    const Timeline = await loadTimelineModule();\n    return new Timeline.TimelinePanel.ActionDelegate();\n  },\n  bindings: [\n    {\n      platform: UI.ActionRegistration.Platforms.WINDOWS_LINUX,\n      shortcut: 'Ctrl+Shift+E',\n    },\n    {\n      platform: UI.ActionRegistration.Platforms.MAC,\n      shortcut: 'Meta+Shift+E',\n    },\n  ],\n});\n\n// IMPORTANT: if you are updating this, you should also update the setting in\n// timeline-meta.\nCommon.Settings.registerSettingExtension({\n  category: Common.Settings.SettingCategory.PERFORMANCE,\n  storageType: Common.Settings.SettingStorageType.SYNCED,\n  settingName: 'annotations-hidden',\n  settingType: Common.Settings.SettingType.BOOLEAN,\n  defaultValue: true,\n});\n"],
  "mappings": ";AAIA,YAAY,YAAY;AACxB,YAAY,UAAU;AACtB,YAAY,QAAQ;AAGpB,IAAM,YAAY;;;;EAIhB,aAAa;;;;EAIb,iBAAiB;;;;EAIjB,4BAA4B;;;;EAI5B,QAAQ;;;;EAIR,MAAM;;;;EAIN,iBAAiB;;AAEnB,IAAM,OAAY,UAAK,kBAAkB,0CAA0C,SAAS;AAC5F,IAAM,iBAAsB,UAAK,iCAAiC,KAAK,QAAW,IAAI;AAEtF,IAAI;AAEJ,eAAe,qBAAkB;AAC/B,MAAI,CAAC,sBAAsB;AACzB,2BAAuB,MAAM,OAAO,2BAAyB;EAC/D;AACA,SAAO;AACT;AAEA,SAAS,kCAA+C,kBAA0D;AAEhH,MAAI,yBAAyB,QAAW;AACtC,WAAO,CAAA;EACT;AACA,SAAO,iBAAiB,oBAAoB;AAC9C;AAEG,eAAY,sBAAsB;EACnC,UAAQ;EACR,IAAI;EACJ,OAAO,eAAe,UAAU,WAAW;EAC3C,eAAe,eAAe,UAAU,eAAe;EACvD,OAAO;EACP,YAAY;EACZ,kBAAkB;EAClB,MAAM,WAAQ;AACZ,UAAM,WAAW,MAAM,mBAAkB;AACzC,WAAO,SAAS,cAAc,cAAc,SAAS,EAAC,UAAU,MAAM,QAAQ,KAAI,CAAC;EACrF;CACD;AAEE,sBAAmB,wBAAwB;EAC5C,UAAU;EACV,MAAM,qBAAkB;AACtB,UAAM,WAAW,MAAM,mBAAkB;AACzC,WAAO,IAAI,SAAS,cAAc,eAAc;EAClD;EACA,UAAQ;EACR,OAAO,eAAe,UAAU,0BAA0B;EAC1D,eAAY;AACV,WAAO,kCAAkC,cAAY,CAAC,SAAS,cAAc,aAAa,CAAC;EAC7F;EACA,UAAU;IACR;MACE,UAAQ;MACR,UAAU;;IAEZ;MACE,UAAQ;MACR,UAAU;;;CAGf;AAEE,sBAAmB,wBAAwB;EAC5C,UAAU;EACV,UAAQ;EACR,WAAS;EACT,YAAY;EACZ,kBAAgB;EAChB,oBAAoB;EACpB,eAAY;AACV,WAAO,kCAAkC,cAAY,CAAC,SAAS,cAAc,aAAa,CAAC;EAC7F;EACA,MAAM,qBAAkB;AACtB,UAAM,WAAW,MAAM,mBAAkB;AACzC,WAAO,IAAI,SAAS,cAAc,eAAc;EAClD;EACA,SAAS;IACP;MACE,OAAO;MACP,OAAO,eAAe,UAAU,MAAM;;IAExC;MACE,OAAO;MACP,OAAO,eAAe,UAAU,IAAI;;;EAGxC,UAAU;IACR;MACE,UAAQ;MACR,UAAU;;IAEZ;MACE,UAAQ;MACR,UAAU;;;CAGf;AAEE,sBAAmB,wBAAwB;EAC5C,UAAU;EACV,WAAS;EACT,eAAY;AACV,WAAO,kCAAkC,cAAY,CAAC,SAAS,cAAc,aAAa,CAAC;EAC7F;EACA,UAAQ;EACR,OAAO,eAAe,UAAU,eAAe;EAC/C,MAAM,qBAAkB;AACtB,UAAM,WAAW,MAAM,mBAAkB;AACzC,WAAO,IAAI,SAAS,cAAc,eAAc;EAClD;EACA,UAAU;IACR;MACE,UAAQ;MACR,UAAU;;IAEZ;MACE,UAAQ;MACR,UAAU;;;CAGf;AAIM,gBAAS,yBAAyB;EACvC,UAAQ;EACR,aAAW;EACX,aAAa;EACb,aAAW;EACX,cAAc;CACf;",
  "names": []
}
