{"version":3,"file":"CookieReportView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/security/CookieReportView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport {createFakeSetting, createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {getMainFrame, navigate} from '../../testing/ResourceTreeHelpers.js';\n\nimport * as Security from './security.js';\n\nfunction getTestCookieIssue(\n    readCookie?: boolean, exclusionReason?: Protocol.Audits.CookieExclusionReason,\n    warningReason?: Protocol.Audits.CookieWarningReason, cookieName?: string): Protocol.Audits.InspectorIssue {\n  // if no exclusion or warning reason provided, use a default\n  if (!exclusionReason && !warningReason) {\n    exclusionReason = Protocol.Audits.CookieExclusionReason.ExcludeThirdPartyPhaseout;\n  }\n\n  return {\n    code: Protocol.Audits.InspectorIssueCode.CookieIssue,\n    details: {\n      cookieIssueDetails: {\n        cookie: {\n          name: cookieName + 'test',\n          path: '/',\n          domain: 'a.' + cookieName + 'test',\n        },\n        cookieExclusionReasons: exclusionReason ? [exclusionReason] : [],\n        cookieWarningReasons: warningReason ? [warningReason] : [],\n        operation: readCookie ? Protocol.Audits.CookieOperation.ReadCookie : Protocol.Audits.CookieOperation.SetCookie,\n        cookieUrl: 'a.' + cookieName + 'test',\n      },\n    },\n  };\n}\n\ndescribeWithMockConnection('CookieReportView', () => {\n  let mockView: sinon.SinonStub;\n  let target: SDK.Target.Target;\n\n  beforeEach(() => {\n    mockView = sinon.stub();\n    target = createTarget();\n    const showThirdPartyIssuesSetting = createFakeSetting('third party flag', true);\n    IssuesManager.IssuesManager.IssuesManager.instance({\n      forceNew: false,\n      ensureFirst: false,\n      showThirdPartyIssuesSetting,\n    });\n  });\n\n  it('should contain no rows if no issues were created', async () => {\n    const view = new Security.CookieReportView.CookieReportView(undefined, mockView);\n\n    assert.lengthOf(view.gridData, 0);\n  });\n\n  it('should have row when there was a preexisting cookie issue', async () => {\n    // @ts-ignore\n    globalThis.addIssueForTest(getTestCookieIssue());\n\n    const view = new Security.CookieReportView.CookieReportView(undefined, mockView);\n    await view.updateComplete;\n\n    assert.lengthOf(view.gridData, 1);\n  });\n\n  it('should add row when issue added after view creation', async () => {\n    const view = new Security.CookieReportView.CookieReportView(undefined, mockView);\n    await view.updateComplete;\n\n    assert.lengthOf(view.gridData, 0);\n\n    // @ts-ignore\n    globalThis.addIssueForTest(getTestCookieIssue());\n    await view.updateComplete;\n\n    assert.lengthOf(view.gridData, 1);\n  });\n\n  it('should ignore non-third-party-cookie related exclusionReason', async () => {\n    const view = new Security.CookieReportView.CookieReportView(undefined, mockView);\n\n    // @ts-ignore\n    globalThis.addIssueForTest(\n        getTestCookieIssue(undefined, Protocol.Audits.CookieExclusionReason.ExcludeSameSiteNoneInsecure));\n    await view.updateComplete;\n\n    assert.lengthOf(view.gridData, 0);\n\n    // Make sure ExcludeThirdPartyPhaseout (default) is added.\n    // @ts-ignore\n    globalThis.addIssueForTest(getTestCookieIssue());\n    await view.updateComplete;\n\n    assert.lengthOf(view.gridData, 1);\n    assert.strictEqual(view.gridData[0].data.status, 'Blocked');\n  });\n\n  it('should ignore non-third-party-cookie related warningReason', async () => {\n    const view = new Security.CookieReportView.CookieReportView(undefined, mockView);\n\n    // @ts-ignore\n    globalThis.addIssueForTest(\n        getTestCookieIssue(undefined, undefined, Protocol.Audits.CookieWarningReason.WarnSameSiteLaxCrossDowngradeLax));\n    await view.updateComplete;\n\n    assert.lengthOf(view.gridData, 0);\n\n    // Make sure warning 3pc warning reasons are added\n    // @ts-ignore\n    globalThis.addIssueForTest(getTestCookieIssue(\n        undefined, undefined, Protocol.Audits.CookieWarningReason.WarnDeprecationTrialMetadata, 'metadata'));\n    // @ts-ignore\n    globalThis.addIssueForTest(getTestCookieIssue(\n        undefined, undefined, Protocol.Audits.CookieWarningReason.WarnThirdPartyCookieHeuristic, 'heuristic'));\n    // @ts-ignore\n    globalThis.addIssueForTest(getTestCookieIssue(\n        undefined, undefined, Protocol.Audits.CookieWarningReason.WarnThirdPartyPhaseout, 'phaseout'));\n    await view.updateComplete;\n\n    assert.lengthOf(view.gridData, 3);\n    assert.strictEqual(view.gridData[0].data.status, 'Allowed By Exception');\n    assert.strictEqual(view.gridData[1].data.status, 'Allowed By Exception');\n    assert.strictEqual(view.gridData[2].data.status, 'Allowed');\n  });\n\n  it('should only have a single entry for same cookie with a read and a write operations', async () => {\n    const view = new Security.CookieReportView.CookieReportView(undefined, mockView);\n\n    // @ts-ignore\n    globalThis.addIssueForTest(getTestCookieIssue(true));\n    // @ts-ignore\n    globalThis.addIssueForTest(getTestCookieIssue(false));\n    await view.updateComplete;\n\n    assert.lengthOf(view.gridData, 1);\n  });\n\n  it('should have zero entries after the primary page was changed', async () => {\n    const view = new Security.CookieReportView.CookieReportView(undefined, mockView);\n\n    // @ts-ignore\n    globalThis.addIssueForTest(getTestCookieIssue(true));\n    await view.updateComplete;\n\n    assert.lengthOf(view.gridData, 1);\n\n    navigate(getMainFrame(target));\n    await view.updateComplete;\n\n    assert.lengthOf(view.gridData, 0);\n  });\n});\n"]}