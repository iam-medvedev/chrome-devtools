{"version":3,"file":"CookieControlsView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/security/CookieControlsView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {createFakeSetting, createTarget, updateHostConfig} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {createViewFunctionStub, type ViewFunctionStub} from '../../testing/ViewFunctionHelpers.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Security from './security.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\ndescribeWithMockConnection('CookieControlsView', () => {\n  let mockView: ViewFunctionStub<typeof Security.CookieControlsView.CookieControlsView>;\n  let target: SDK.Target.Target;\n\n  beforeEach(() => {\n    mockView = createViewFunctionStub(Security.CookieControlsView.CookieControlsView);\n  });\n\n  it('should update setting', async () => {\n    const testSetting = createFakeSetting('test-control', true);\n    const view = new Security.CookieControlsView.CookieControlsView(undefined, mockView);\n    const reloadRequiredInfobarSpy =\n        sinon.spy(UI.InspectorView.InspectorView.instance(), 'displayDebuggedTabReloadRequiredWarning');\n    assert.isTrue(testSetting.get());\n\n    view.inputChanged(false, testSetting);\n    assert.isFalse(testSetting.get());\n    assert.isTrue(reloadRequiredInfobarSpy.calledOnce);\n  });\n\n  it('should invoke getAffectedUrlsForThirdPartyCookieMetadata upon construction', async () => {\n    updateHostConfig({thirdPartyCookieControls: {thirdPartyCookieMetadataEnabled: true}});\n\n    target = createTarget();\n    const getAffectedUrlsSpy = sinon.spy(target.storageAgent(), 'invoke_getAffectedUrlsForThirdPartyCookieMetadata');\n    new Security.CookieControlsView.CookieControlsView(undefined, mockView);\n\n    assert.isTrue(getAffectedUrlsSpy.calledOnce);\n  });\n\n  it('should invoke getAffectedUrlsForThirdPartyCookieMetadata when a resource is added', async () => {\n    updateHostConfig({thirdPartyCookieControls: {thirdPartyCookieMetadataEnabled: true}});\n    new Security.CookieControlsView.CookieControlsView(undefined, mockView);\n\n    target = createTarget();\n    const getAffectedUrlsSpy = sinon.spy(target.storageAgent(), 'invoke_getAffectedUrlsForThirdPartyCookieMetadata');\n\n    const model = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    assert.exists(model);\n\n    const resourceSite = urlString`https://test.com/`;\n    const r = new SDK.Resource.Resource(\n        model, null, resourceSite, resourceSite, null, null, Common.ResourceType.resourceTypes.Document, '', null,\n        null);\n    model.dispatchEventToListeners(SDK.ResourceTreeModel.Events.ResourceAdded, r);\n\n    assert.isTrue(getAffectedUrlsSpy.calledOnceWithExactly({firstPartyUrl: '', thirdPartyUrls: [resourceSite]}));\n  });\n});\n"]}