{"version":3,"file":"IPProtectionView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/security/IPProtectionView.test.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C,OAAO,EAAC,YAAY,EAAE,gBAAgB,EAAC,MAAM,qCAAqC,CAAC;AACnF,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAC3E,OAAO,EAAC,sBAAsB,EAAwB,MAAM,sCAAsC,CAAC;AAEnG,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,0BAA0B,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAClD,IAAI,QAA6E,CAAC;IAClF,IAAI,MAAyB,CAAC;IAC9B,IAAI,cAAiD,CAAC;IAEtD,MAAM,WAAW,GAAG;;;;;;;;QAQlB,IAAI;KACL,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,sBAAsB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;QAC9E,gBAAgB,EAAE,CAAC;QACnB,MAAM,GAAG,YAAY,EAAE,CAAC;QACxB,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,cAAc,CAAE,CAAC;QAClE,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,KAAK,CAAC,OAAO,EAAE,CAAC;IAClB,CAAC,CAAC,CAAC;IAEH,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE,CAAC;QACjC,EAAE,CAAC,6BAA6B,MAAM,GAAG,EAAE,KAAK,IAAI,EAAE;YACpD,2DAA2D;YAC3D,MAAM,8BAA8B,GAChC,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE,4BAA4B,CAAC,CAAC,QAAQ,CAAC,MAAwC,CAAC,CAAC;YAEhH,qFAAqF;YACrF,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;YAEjF,2EAA2E;YAC3E,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACtB,MAAM,QAAQ,CAAC,SAAS,CAAC;YAEzB,4CAA4C;YAC5C,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;YAEpD,iEAAiE;YACjE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget, stubNoopSettings} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {createViewFunctionStub, type ViewFunctionStub} from '../../testing/ViewFunctionHelpers.js';\n\nimport * as Security from './security.js';\n\ndescribeWithMockConnection('IPProtectionView', () => {\n  let mockView: ViewFunctionStub<typeof Security.IPProtectionView.IPProtectionView>;\n  let target: SDK.Target.Target;\n  let networkManager: SDK.NetworkManager.NetworkManager;\n\n  const allStatuses = [\n    Protocol.Network.IpProxyStatus.Available,\n    Protocol.Network.IpProxyStatus.FeatureNotEnabled,\n    Protocol.Network.IpProxyStatus.MaskedDomainListNotEnabled,\n    Protocol.Network.IpProxyStatus.MaskedDomainListNotPopulated,\n    Protocol.Network.IpProxyStatus.AuthTokensUnavailable,\n    Protocol.Network.IpProxyStatus.Unavailable,\n    Protocol.Network.IpProxyStatus.BypassedByDevTools,\n    null,\n  ];\n\n  beforeEach(() => {\n    mockView = createViewFunctionStub(Security.IPProtectionView.IPProtectionView);\n    stubNoopSettings();\n    target = createTarget();\n    networkManager = target.model(SDK.NetworkManager.NetworkManager)!;\n    assert.exists(networkManager);\n  });\n\n  afterEach(() => {\n    sinon.restore();\n  });\n\n  for (const status of allStatuses) {\n    it(`should render the status \"${status}\"`, async () => {\n      // Mock the promise returned by getIpProtectionProxyStatus.\n      const getIpProtectionProxyStatusStub =\n          sinon.stub(networkManager, 'getIpProtectionProxyStatus').resolves(status as Protocol.Network.IpProxyStatus);\n\n      // Instantiate the view, which will immediately call wasShown() and fetch the status.\n      const view = new Security.IPProtectionView.IPProtectionView(undefined, mockView);\n\n      // Wait for the asynchronous operations to complete and the view to update.\n      await view.wasShown();\n      await mockView.nextInput;\n\n      // Assert that the mocked method was called.\n      sinon.assert.called(getIpProtectionProxyStatusStub);\n\n      // Assert that the view's input now contains the expected status.\n      assert.deepEqual(mockView.input.status, status);\n    });\n  }\n});\n"]}