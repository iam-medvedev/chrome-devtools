{"version":3,"file":"security-meta.js","sourceRoot":"","sources":["../../../../../../front_end/panels/security/security-meta.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAEhD,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,MAAM,SAAS,GAAG;IAChB;;OAEG;IACH,QAAQ,EAAE,UAAU;IACpB;;OAEG;IACH,kBAAkB,EAAE,sBAAsB;IAC1C;;OAEG;IACH,YAAY,EAAE,eAAe;IAC7B;;OAEG;IACH,sBAAsB,EAAE,2BAA2B;CAC3C,CAAC;AAEX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,kCAAkC,EAAE,SAAS,CAAC,CAAC;AACxF,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAExF,IAAI,oBAAiD,CAAC;AAEtD,KAAK,UAAU,kBAAkB;IAC/B,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC1B,oBAAoB,GAAG,MAAM,MAAM,CAAC,eAAe,CAAC,CAAC;IACvD,CAAC;IACD,OAAO,oBAAoB,CAAC;AAC9B,CAAC;AAED,EAAE,CAAC,WAAW,CAAC,qBAAqB,CAAC;IACnC,QAAQ,uDAAyC;IACjD,EAAE,EAAE,UAAU;IACd,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;QAChD,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;IACtG,aAAa,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;QACrE,cAAc,CAAC,SAAS,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC;QACpD,cAAc,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE;IAC5C,KAAK,EAAE,EAAE;IACT,WAAW,4DAA0C;IACrD,KAAK,CAAC,QAAQ;QACZ,MAAM,QAAQ,GAAG,MAAM,kBAAkB,EAAE,CAAC;QAC5C,OAAO,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;IACzD,CAAC;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC;IAC/B,YAAY;QACV,OAAO;YACL,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB;SAC3C,CAAC;IACJ,CAAC;IACD,WAAW,EAAE,MAAM,CAAC,QAAQ,CAAC,mBAAmB,CAAC,cAAc;IAC/D,KAAK,CAAC,YAAY;QAChB,MAAM,QAAQ,GAAG,MAAM,kBAAkB,EAAE,CAAC;QAC5C,OAAO,IAAI,QAAQ,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC;IACvD,CAAC;CACF,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Security from './security.js';\n\nconst UIStrings = {\n  /**\n   *@description Default Title of the security panel\n   */\n  security: 'Security',\n  /**\n   *@description Title of privacy and security panel. This is used when the kDevToolsPrivacyUI feature flag is enabled.\n   */\n  PrivacyAndSecurity: 'Privacy and security',\n  /**\n   *@description Default command to open the security panel\n   */\n  showSecurity: 'Show Security',\n  /**\n   *@description Command to open the privacy and security panel. This is used when the kDevToolPrivacyUI feature flag is enabled\n   */\n  showPrivacyAndSecurity: 'Show Privacy and security',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/security/security-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet loadedSecurityModule: (typeof Security|undefined);\n\nasync function loadSecurityModule(): Promise<typeof Security> {\n  if (!loadedSecurityModule) {\n    loadedSecurityModule = await import('./security.js');\n  }\n  return loadedSecurityModule;\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.PANEL,\n  id: 'security',\n  title: () => Root.Runtime.hostConfig.devToolsPrivacyUI?.enabled ? i18nLazyString(UIStrings.PrivacyAndSecurity)() :\n                                                                    i18nLazyString(UIStrings.security)(),\n  commandPrompt: () => Root.Runtime.hostConfig.devToolsPrivacyUI?.enabled ?\n      i18nLazyString(UIStrings.showPrivacyAndSecurity)() :\n      i18nLazyString(UIStrings.showSecurity)(),\n  order: 80,\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  async loadView() {\n    const Security = await loadSecurityModule();\n    return Security.SecurityPanel.SecurityPanel.instance();\n  },\n});\n\nCommon.Revealer.registerRevealer({\n  contextTypes() {\n    return [\n      Security.CookieReportView.CookieReportView,\n    ];\n  },\n  destination: Common.Revealer.RevealerDestination.SECURITY_PANEL,\n  async loadRevealer() {\n    const Security = await loadSecurityModule();\n    return new Security.SecurityPanel.SecurityRevealer();\n  },\n});\n"]}