{"version":3,"file":"SecurityPanel.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/security/SecurityPanel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget, updateHostConfig} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {getMainFrame, navigate} from '../../testing/ResourceTreeHelpers.js';\n\nimport * as Security from './security.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\ndescribeWithMockConnection('SecurityAndPrivacyPanel', () => {\n  describe('viewMemory', () => {\n    it('initially shows control view if privacy UI is enabled', () => {\n      updateHostConfig({devToolsPrivacyUI: {enabled: true}});\n      const securityPanel = Security.SecurityPanel.SecurityPanel.instance({forceNew: true});\n\n      assert.instanceOf(securityPanel.visibleView, Security.CookieControlsView.CookieControlsView);\n    });\n\n    it('initially shows security main view if privacy UI is not enabled', () => {\n      updateHostConfig({devToolsPrivacyUI: {enabled: false}});\n      const securityPanel = Security.SecurityPanel.SecurityPanel.instance({forceNew: true});\n\n      assert.instanceOf(securityPanel.visibleView, Security.SecurityPanel.SecurityMainView);\n    });\n\n    it('remembers last selected view when new panel is made', () => {\n      updateHostConfig({devToolsPrivacyUI: {enabled: true}});\n      let securityPanel = Security.SecurityPanel.SecurityPanel.instance({forceNew: true});\n\n      // Should initially be the controls view\n      assert.instanceOf(securityPanel.visibleView, Security.CookieControlsView.CookieControlsView);\n\n      // Select and switch to the security main view\n      securityPanel.sidebar.securityOverviewElement.select(/* omitFocus=*/ false, /* selectedByUser=*/ true);\n      assert.instanceOf(securityPanel.visibleView, Security.SecurityPanel.SecurityMainView);\n\n      // Create a new security panel. The last selected view memory should make the main view visible\n      securityPanel = Security.SecurityPanel.SecurityPanel.instance({forceNew: true});\n      assert.instanceOf(securityPanel.visibleView, Security.SecurityPanel.SecurityMainView);\n    });\n  });\n\n  describe('updateOrigin', () => {\n    it('correctly updates the URL scheme highlighting', () => {\n      const origin = urlString`https://foo.bar`;\n      const securityPanel = Security.SecurityPanel.SecurityPanel.instance({forceNew: true});\n\n      securityPanel.sidebar.addOrigin(origin, Protocol.Security.SecurityState.Unknown);\n      assert.notExists(\n          securityPanel.sidebar.sidebarTree.contentElement.querySelector('.highlighted-url > .url-scheme-secure'));\n      assert.exists(\n          securityPanel.sidebar.sidebarTree.contentElement.querySelector('.highlighted-url > .url-scheme-unknown'));\n\n      securityPanel.sidebar.updateOrigin(origin, Protocol.Security.SecurityState.Secure);\n\n      assert.exists(\n          securityPanel.sidebar.sidebarTree.contentElement.querySelector('.highlighted-url > .url-scheme-secure'));\n      assert.notExists(\n          securityPanel.sidebar.sidebarTree.contentElement.querySelector('.highlighted-url > .url-scheme-unknown'));\n    });\n  });\n});\n\ndescribeWithMockConnection('SecurityPanel', () => {\n  let target: SDK.Target.Target;\n  let prerenderTarget: SDK.Target.Target;\n\n  beforeEach(() => {\n    const tabTarget = createTarget({type: SDK.Target.Type.TAB});\n    prerenderTarget = createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n    target = createTarget({parentTarget: tabTarget});\n  });\n\n  it('updates when security state changes', async () => {\n    const securityPanel = Security.SecurityPanel.SecurityPanel.instance({forceNew: true});\n    const securityModel = target.model(Security.SecurityModel.SecurityModel);\n    assert.exists(securityModel);\n    const visibleSecurityState = {\n      securityState: Protocol.Security.SecurityState.Insecure,\n      securityStateIssueIds: [],\n      certificateSecurityState: null,\n    } as unknown as Security.SecurityModel.PageVisibleSecurityState;\n    securityModel.dispatchEventToListeners(\n        Security.SecurityModel.Events.VisibleSecurityStateChanged, visibleSecurityState);\n\n    assert.isTrue(securityPanel.mainView.contentElement.querySelector('.security-summary')\n                      ?.classList.contains('security-summary-insecure'));\n\n    visibleSecurityState.securityState = Protocol.Security.SecurityState.Secure;\n    securityModel.dispatchEventToListeners(\n        Security.SecurityModel.Events.VisibleSecurityStateChanged, visibleSecurityState);\n\n    assert.isFalse(securityPanel.mainView.contentElement.querySelector('.security-summary')\n                       ?.classList.contains('security-summary-insecure'));\n    assert.isTrue(securityPanel.mainView.contentElement.querySelector('.security-summary')\n                      ?.classList.contains('security-summary-secure'));\n  });\n\n  it('can switch to a different SecurityModel', async () => {\n    const mainSecurityModel = target.model(Security.SecurityModel.SecurityModel);\n    assert.exists(mainSecurityModel);\n    const securityPanel = Security.SecurityPanel.SecurityPanel.instance({forceNew: true});\n\n    // Add the main target to the security panel.\n    securityPanel.modelAdded(mainSecurityModel);\n    const visibleSecurityState = {\n      securityState: Protocol.Security.SecurityState.Insecure,\n      securityStateIssueIds: [],\n      certificateSecurityState: null,\n    } as unknown as Security.SecurityModel.PageVisibleSecurityState;\n    mainSecurityModel.dispatchEventToListeners(\n        Security.SecurityModel.Events.VisibleSecurityStateChanged, visibleSecurityState);\n    assert.isTrue(securityPanel.mainView.contentElement.querySelector('.security-summary')\n                      ?.classList.contains('security-summary-insecure'));\n\n    // Switch to the prerender target.\n    const prerenderSecurityModel = prerenderTarget.model(Security.SecurityModel.SecurityModel);\n    assert.exists(prerenderSecurityModel);\n    securityPanel.modelAdded(prerenderSecurityModel);\n    securityPanel.modelRemoved(mainSecurityModel);\n\n    // Check that the security panel does not listen to events from the previous target.\n    visibleSecurityState.securityState = Protocol.Security.SecurityState.Secure;\n    mainSecurityModel.dispatchEventToListeners(\n        Security.SecurityModel.Events.VisibleSecurityStateChanged, visibleSecurityState);\n    assert.isTrue(securityPanel.mainView.contentElement.querySelector('.security-summary')\n                      ?.classList.contains('security-summary-insecure'));\n\n    // Check that the security panel listens to events from the current target.\n    prerenderSecurityModel.dispatchEventToListeners(\n        Security.SecurityModel.Events.VisibleSecurityStateChanged, visibleSecurityState);\n    assert.isTrue(securityPanel.mainView.contentElement.querySelector('.security-summary')\n                      ?.classList.contains('security-summary-secure'));\n\n    // Check that the SecurityPanel listens to any PrimaryPageChanged event\n    const sidebarTreeClearSpy = sinon.spy(securityPanel.sidebar, 'clearOrigins');\n    navigate(getMainFrame(target));\n    assert.isTrue(sidebarTreeClearSpy.calledOnce);\n  });\n\n  it('shows \\'reload page\\' message when no data is available', async () => {\n    const securityModel = target.model(Security.SecurityModel.SecurityModel);\n    assert.exists(securityModel);\n    const securityPanel = Security.SecurityPanel.SecurityPanel.instance({forceNew: true});\n\n    // Check that reload message is visible initially.\n    const reloadMessage =\n        securityPanel.sidebar.sidebarTree.shadowRoot.querySelector('.security-main-view-reload-message');\n    assert.instanceOf(reloadMessage, HTMLLIElement);\n    assert.isFalse(reloadMessage.classList.contains('hidden'));\n\n    // Check that reload message is hidden when there is data to display.\n    const networkManager = securityModel.networkManager();\n    const request = {\n      wasBlocked: () => false,\n      url: () => 'https://www.example.com',\n      securityState: () => Protocol.Security.SecurityState.Secure,\n      securityDetails: () => null,\n      cached: () => false,\n    } as SDK.NetworkRequest.NetworkRequest;\n    networkManager.dispatchEventToListeners(SDK.NetworkManager.Events.RequestFinished, request);\n    assert.isTrue(reloadMessage.classList.contains('hidden'));\n\n    // Check that reload message is hidden after clearing data.\n    navigate(getMainFrame(target));\n    assert.isFalse(reloadMessage.classList.contains('hidden'));\n  });\n});\n"]}