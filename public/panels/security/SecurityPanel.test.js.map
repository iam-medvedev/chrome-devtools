{"version":3,"file":"SecurityPanel.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/security/SecurityPanel.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,wBAAwB,EAAC,MAAM,iCAAiC,CAAC;AACzE,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C,OAAO,EAAC,aAAa,EAAC,MAAM,6BAA6B,CAAC;AAC1D,OAAO,EAAC,YAAY,EAAC,MAAM,qCAAqC,CAAC;AACjE,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAE3E,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,0BAA0B,CAAC,eAAe,EAAE,GAAG,EAAE;IAC/C,MAAM,KAAK,GAAG,CAAC,aAAsC,EAAE,EAAE;QACvD,IAAI,MAAyB,CAAC;QAE9B,UAAU,CAAC,GAAG,EAAE;YACd,MAAM,GAAG,aAAa,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YACtF,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;YACzE,wBAAwB,CAAC,aAAa,CAAC,CAAC;YACxC,MAAM,oBAAoB,GAAG;gBAC3B,aAAa,2DAA0C;gBACvD,qBAAqB,EAAE,EAAE;gBACzB,wBAAwB,EAAE,IAAI;aAC+B,CAAC;YAChE,aAAa,CAAC,wBAAwB,CAClC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,2BAA2B,EAAE,oBAAoB,CAAC,CAAC;YAErF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,mBAAmB,CAAC;gBACpE,EAAE,SAAS,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAErE,oBAAoB,CAAC,aAAa,wDAAyC,CAAC;YAC5E,aAAa,CAAC,wBAAwB,CAClC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,2BAA2B,EAAE,oBAAoB,CAAC,CAAC;YAErF,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,mBAAmB,CAAC;gBACpE,EAAE,SAAS,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC,CAAC;YACtE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,mBAAmB,CAAC;gBACpE,EAAE,SAAS,CAAC,QAAQ,CAAC,yBAAyB,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;IAC1D,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE;QACf,MAAM,SAAS,GAAG,YAAY,CAAC,EAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;QAC5D,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAC,CAAC,CAAC;QAC9D,OAAO,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC,CAAC;IAEhC,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,SAAS,GAAG,YAAY,CAAC,EAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;QAC5D,MAAM,UAAU,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,CAAC;QAC3D,MAAM,iBAAiB,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QACjF,wBAAwB,CAAC,iBAAiB,CAAC,CAAC;QAC5C,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAEtF,6CAA6C;QAC7C,aAAa,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;QAC5C,MAAM,oBAAoB,GAAG;YAC3B,aAAa,2DAA0C;YACvD,qBAAqB,EAAE,EAAE;YACzB,wBAAwB,EAAE,IAAI;SAC+B,CAAC;QAChE,iBAAiB,CAAC,wBAAwB,CACtC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,2BAA2B,EAAE,oBAAoB,CAAC,CAAC;QACrF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,mBAAmB,CAAC;YACpE,EAAE,SAAS,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC,CAAC;QAErE,kCAAkC;QAClC,MAAM,eAAe,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAC,CAAC,CAAC;QACtF,MAAM,sBAAsB,GAAG,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QAC3F,wBAAwB,CAAC,sBAAsB,CAAC,CAAC;QACjD,aAAa,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;QACjD,aAAa,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;QAE9C,oFAAoF;QACpF,oBAAoB,CAAC,aAAa,wDAAyC,CAAC;QAC5E,iBAAiB,CAAC,wBAAwB,CACtC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,2BAA2B,EAAE,oBAAoB,CAAC,CAAC;QACrF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,mBAAmB,CAAC;YACpE,EAAE,SAAS,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC,CAAC;QAErE,2EAA2E;QAC3E,sBAAsB,CAAC,wBAAwB,CAC3C,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,2BAA2B,EAAE,oBAAoB,CAAC,CAAC;QACrF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,mBAAmB,CAAC;YACpE,EAAE,SAAS,CAAC,QAAQ,CAAC,yBAAyB,CAAC,CAAC,CAAC;QAEnE,uEAAuE;QACvE,MAAM,iBAAiB,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QACpF,wBAAwB,CAAC,iBAAiB,CAAC,CAAC;QAC5C,MAAM,mBAAmB,GAAG,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QACjF,iBAAiB,CAAC,wBAAwB,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,kBAAkB,EAAE;YAC1F,KAAK,EAAE,EAAC,GAAG,EAAE,yBAAyB,EAA4C;YAClF,IAAI,2EAAwD;SAC7D,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;QAC9B,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QACzE,wBAAwB,CAAC,aAAa,CAAC,CAAC;QACxC,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAEtF,kDAAkD;QAClD,MAAM,aAAa,GAAG,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC,aAAa,CAAC,oCAAoC,CAAC,CAAC;QAC/G,aAAa,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;QAC5C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE3D,qEAAqE;QACrE,MAAM,cAAc,GAAG,aAAa,CAAC,cAAc,EAAE,CAAC;QACtD,MAAM,OAAO,GAAG;YACd,UAAU,EAAE,GAAG,EAAE,CAAC,KAAK;YACvB,GAAG,EAAE,GAAG,EAAE,CAAC,yBAAyB;YACpC,aAAa,EAAE,GAAG,EAAE,sDAAuC;YAC3D,eAAe,EAAE,GAAG,EAAE,CAAC,IAAI;YAC3B,MAAM,EAAE,GAAG,EAAE,CAAC,KAAK;SACiB,CAAC;QACvC,cAAc,CAAC,wBAAwB,CAAC,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;QAC5F,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE1D,2DAA2D;QAC3D,MAAM,iBAAiB,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QAChF,wBAAwB,CAAC,iBAAiB,CAAC,CAAC;QAC5C,iBAAiB,CAAC,wBAAwB,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,kBAAkB,EAAE;YAC1F,KAAK,EAAE,EAAC,GAAG,EAAE,yBAAyB,EAA4C;YAClF,IAAI,2EAAwD;SAC7D,CAAC,CAAC;QACH,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assertNotNullOrUndefined} from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {assertElement} from '../../testing/DOMHelpers.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\n\nimport * as Security from './security.js';\n\ndescribeWithMockConnection('SecurityPanel', () => {\n  const tests = (targetFactory: () => SDK.Target.Target) => {\n    let target: SDK.Target.Target;\n\n    beforeEach(() => {\n      target = targetFactory();\n    });\n\n    it('updates when security state changes', async () => {\n      const securityPanel = Security.SecurityPanel.SecurityPanel.instance({forceNew: true});\n      const securityModel = target.model(Security.SecurityModel.SecurityModel);\n      assertNotNullOrUndefined(securityModel);\n      const visibleSecurityState = {\n        securityState: Protocol.Security.SecurityState.Insecure,\n        securityStateIssueIds: [],\n        certificateSecurityState: null,\n      } as unknown as Security.SecurityModel.PageVisibleSecurityState;\n      securityModel.dispatchEventToListeners(\n          Security.SecurityModel.Events.VisibleSecurityStateChanged, visibleSecurityState);\n\n      assert.isTrue(securityPanel.mainView.contentElement.querySelector('.security-summary')\n                        ?.classList.contains('security-summary-insecure'));\n\n      visibleSecurityState.securityState = Protocol.Security.SecurityState.Secure;\n      securityModel.dispatchEventToListeners(\n          Security.SecurityModel.Events.VisibleSecurityStateChanged, visibleSecurityState);\n\n      assert.isFalse(securityPanel.mainView.contentElement.querySelector('.security-summary')\n                         ?.classList.contains('security-summary-insecure'));\n      assert.isTrue(securityPanel.mainView.contentElement.querySelector('.security-summary')\n                        ?.classList.contains('security-summary-secure'));\n    });\n  };\n\n  describe('without tab target', () => tests(createTarget));\n  describe('with tab target', () => tests(() => {\n                                const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n                                createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n                                return createTarget({parentTarget: tabTarget});\n                              }));\n\n  it('can switch to a different SecurityModel', async () => {\n    const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n    const mainTarget = createTarget({parentTarget: tabTarget});\n    const mainSecurityModel = mainTarget.model(Security.SecurityModel.SecurityModel);\n    assertNotNullOrUndefined(mainSecurityModel);\n    const securityPanel = Security.SecurityPanel.SecurityPanel.instance({forceNew: true});\n\n    // Add the main target to the security panel.\n    securityPanel.modelAdded(mainSecurityModel);\n    const visibleSecurityState = {\n      securityState: Protocol.Security.SecurityState.Insecure,\n      securityStateIssueIds: [],\n      certificateSecurityState: null,\n    } as unknown as Security.SecurityModel.PageVisibleSecurityState;\n    mainSecurityModel.dispatchEventToListeners(\n        Security.SecurityModel.Events.VisibleSecurityStateChanged, visibleSecurityState);\n    assert.isTrue(securityPanel.mainView.contentElement.querySelector('.security-summary')\n                      ?.classList.contains('security-summary-insecure'));\n\n    // Switch to the prerender target.\n    const prerenderTarget = createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n    const prerenderSecurityModel = prerenderTarget.model(Security.SecurityModel.SecurityModel);\n    assertNotNullOrUndefined(prerenderSecurityModel);\n    securityPanel.modelAdded(prerenderSecurityModel);\n    securityPanel.modelRemoved(mainSecurityModel);\n\n    // Check that the security panel does not listen to events from the previous target.\n    visibleSecurityState.securityState = Protocol.Security.SecurityState.Secure;\n    mainSecurityModel.dispatchEventToListeners(\n        Security.SecurityModel.Events.VisibleSecurityStateChanged, visibleSecurityState);\n    assert.isTrue(securityPanel.mainView.contentElement.querySelector('.security-summary')\n                      ?.classList.contains('security-summary-insecure'));\n\n    // Check that the security panel listens to events from the current target.\n    prerenderSecurityModel.dispatchEventToListeners(\n        Security.SecurityModel.Events.VisibleSecurityStateChanged, visibleSecurityState);\n    assert.isTrue(securityPanel.mainView.contentElement.querySelector('.security-summary')\n                      ?.classList.contains('security-summary-secure'));\n\n    // Check that the SecurityPanel listens to any PrimaryPageChanged event\n    const resourceTreeModel = mainTarget.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    assertNotNullOrUndefined(resourceTreeModel);\n    const sidebarTreeClearSpy = sinon.spy(securityPanel.sidebarTree, 'clearOrigins');\n    resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.PrimaryPageChanged, {\n      frame: {url: 'https://www.example.com'} as SDK.ResourceTreeModel.ResourceTreeFrame,\n      type: SDK.ResourceTreeModel.PrimaryPageChangeType.Navigation,\n    });\n    assert.isTrue(sidebarTreeClearSpy.calledOnce);\n  });\n\n  it('shows \\'reload page\\' message when no data is available', async () => {\n    const target = createTarget();\n    const securityModel = target.model(Security.SecurityModel.SecurityModel);\n    assertNotNullOrUndefined(securityModel);\n    const securityPanel = Security.SecurityPanel.SecurityPanel.instance({forceNew: true});\n\n    // Check that reload message is visible initially.\n    const reloadMessage = securityPanel.sidebarTree.shadowRoot.querySelector('.security-main-view-reload-message');\n    assertElement(reloadMessage, HTMLLIElement);\n    assert.isFalse(reloadMessage.classList.contains('hidden'));\n\n    // Check that reload message is hidden when there is data to display.\n    const networkManager = securityModel.networkManager();\n    const request = {\n      wasBlocked: () => false,\n      url: () => 'https://www.example.com',\n      securityState: () => Protocol.Security.SecurityState.Secure,\n      securityDetails: () => null,\n      cached: () => false,\n    } as SDK.NetworkRequest.NetworkRequest;\n    networkManager.dispatchEventToListeners(SDK.NetworkManager.Events.RequestFinished, request);\n    assert.isTrue(reloadMessage.classList.contains('hidden'));\n\n    // Check that reload message is hidden after clearing data.\n    const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    assertNotNullOrUndefined(resourceTreeModel);\n    resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.PrimaryPageChanged, {\n      frame: {url: 'https://www.example.com'} as SDK.ResourceTreeModel.ResourceTreeFrame,\n      type: SDK.ResourceTreeModel.PrimaryPageChangeType.Navigation,\n    });\n    assert.isFalse(reloadMessage.classList.contains('hidden'));\n  });\n});\n"]}