{"version":3,"file":"LinearMemoryInspectorPane.js","sourceRoot":"","sources":["../../../../../../front_end/panels/linear_memory_inspector/LinearMemoryInspectorPane.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport * as LinearMemoryInspectorComponents from './components/components.js';\nimport {type LazyUint8Array, LinearMemoryInspectorController} from './LinearMemoryInspectorController.js';\n\nconst UIStrings = {\n  /**\n   *@description Label in the Linear Memory inspector tool that serves as a placeholder if no inspections are open (i.e. nothing to see here).\n   *             Inspection hereby refers to viewing, navigating and understanding the memory through this tool.\n   */\n  noOpenInspections: 'No open inspections',\n  /**\n   *@description Label in the Linear Memory inspector tool that serves as a placeholder if no inspections are open (i.e. nothing to see here).\n   *             Inspection hereby refers to viewing, navigating and understanding the memory through this tool.\n   */\n  memoryInspectorExplanation: 'On this page you can inspect binary data.',\n  /**\n   *@description Label in the Linear Memory inspector tool for a link.\n   */\n  learnMore: 'Learn more',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/linear_memory_inspector/LinearMemoryInspectorPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet inspectorInstance: LinearMemoryInspectorPane;\n\nconst MEMORY_INSPECTOR_EXPLANATION_URL =\n    'https://developer.chrome.com/docs/devtools/memory-inspector' as Platform.DevToolsPath.UrlString;\n\nexport class LinearMemoryInspectorPane extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(\n    UI.Widget.VBox) {\n  readonly #tabbedPane: UI.TabbedPane.TabbedPane;\n\n  constructor() {\n    super(false);\n    this.element.setAttribute('jslog', `${VisualLogging.panel('linear-memory-inspector').track({resize: true})}`);\n    this.#tabbedPane = new UI.TabbedPane.TabbedPane();\n    this.#tabbedPane.setPlaceholderElement(this.createPlaceholder());\n    this.#tabbedPane.setCloseableTabs(true);\n    this.#tabbedPane.setAllowTabReorder(true, true);\n    this.#tabbedPane.addEventListener(UI.TabbedPane.Events.TabClosed, this.#tabClosed, this);\n    this.#tabbedPane.show(this.contentElement);\n    this.#tabbedPane.headerElement().setAttribute(\n        'jslog', `${VisualLogging.toolbar().track({keydown: 'ArrowUp|ArrowLeft|ArrowDown|ArrowRight|Enter|Space'})}`);\n  }\n\n  createPlaceholder(): HTMLElement {\n    const placeholder = document.createElement('div');\n    placeholder.classList.add('empty-state');\n\n    placeholder.createChild('span', 'empty-state-header').textContent = i18nString(UIStrings.noOpenInspections);\n\n    const description = placeholder.createChild('div', 'empty-state-description');\n    description.createChild('span').textContent = i18nString(UIStrings.memoryInspectorExplanation);\n    const link = UI.XLink.XLink.create(\n        MEMORY_INSPECTOR_EXPLANATION_URL, i18nString(UIStrings.learnMore), undefined, undefined, 'learn-more');\n    description.appendChild(link);\n\n    return placeholder;\n  }\n\n  static instance(): LinearMemoryInspectorPane {\n    if (!inspectorInstance) {\n      inspectorInstance = new LinearMemoryInspectorPane();\n    }\n    return inspectorInstance;\n  }\n\n  #tabView(tabId: string): LinearMemoryInspectorView {\n    const view = this.#tabbedPane.tabView(tabId);\n    if (view === null) {\n      throw new Error(`No linear memory inspector view for the given tab id: ${tabId}`);\n    }\n    return view as LinearMemoryInspectorView;\n  }\n\n  create(tabId: string, title: string, arrayWrapper: LazyUint8Array, address?: number): void {\n    const inspectorView = new LinearMemoryInspectorView(arrayWrapper, address, tabId);\n    this.#tabbedPane.appendTab(tabId, title, inspectorView, undefined, false, true);\n    this.#tabbedPane.selectTab(tabId);\n  }\n\n  close(tabId: string): void {\n    this.#tabbedPane.closeTab(tabId, false);\n  }\n\n  reveal(tabId: string, address?: number): void {\n    const view = this.#tabView(tabId);\n\n    if (address !== undefined) {\n      view.updateAddress(address);\n    }\n    this.refreshView(tabId);\n    this.#tabbedPane.selectTab(tabId);\n  }\n\n  refreshView(tabId: string): void {\n    const view = this.#tabView(tabId);\n    view.refreshData();\n  }\n\n  #tabClosed(event: Common.EventTarget.EventTargetEvent<UI.TabbedPane.EventData>): void {\n    const {tabId} = event.data;\n    this.dispatchEventToListeners(Events.VIEW_CLOSED, tabId);\n  }\n}\n\nexport const enum Events {\n  VIEW_CLOSED = 'ViewClosed',\n}\n\nexport interface EventTypes {\n  [Events.VIEW_CLOSED]: string;\n}\n\nexport class LinearMemoryInspectorView extends UI.Widget.VBox {\n  #memoryWrapper: LazyUint8Array;\n  #address: number;\n  #tabId: string;\n  #inspector: LinearMemoryInspectorComponents.LinearMemoryInspector.LinearMemoryInspector;\n  firstTimeOpen: boolean;\n  readonly #hideValueInspector: boolean;\n\n  constructor(\n      memoryWrapper: LazyUint8Array, address: number|undefined = 0, tabId: string, hideValueInspector?: boolean) {\n    super(false);\n\n    if (address < 0 || address >= memoryWrapper.length()) {\n      throw new Error('Requested address is out of bounds.');\n    }\n\n    this.#memoryWrapper = memoryWrapper;\n    this.#address = address;\n    this.#tabId = tabId;\n    this.#hideValueInspector = Boolean(hideValueInspector);\n    this.#inspector = new LinearMemoryInspectorComponents.LinearMemoryInspector.LinearMemoryInspector();\n    this.#inspector.addEventListener(\n        LinearMemoryInspectorComponents.LinearMemoryInspector.MemoryRequestEvent.eventName,\n        (event: LinearMemoryInspectorComponents.LinearMemoryInspector.MemoryRequestEvent) => {\n          this.#memoryRequested(event);\n        });\n    this.#inspector.addEventListener(\n        LinearMemoryInspectorComponents.LinearMemoryInspector.AddressChangedEvent.eventName,\n        (event: LinearMemoryInspectorComponents.LinearMemoryInspector.AddressChangedEvent) => {\n          this.updateAddress(event.data);\n        });\n    this.#inspector.addEventListener(\n        LinearMemoryInspectorComponents.LinearMemoryInspector.SettingsChangedEvent.eventName,\n        (event: LinearMemoryInspectorComponents.LinearMemoryInspector.SettingsChangedEvent) => {\n          // Stop event from bubbling up, since no element further up needs the event.\n          event.stopPropagation();\n          this.saveSettings(event.data);\n        });\n    this.#inspector.addEventListener(\n        LinearMemoryInspectorComponents.LinearMemoryHighlightChipList.DeleteMemoryHighlightEvent.eventName,\n        (event: LinearMemoryInspectorComponents.LinearMemoryHighlightChipList.DeleteMemoryHighlightEvent) => {\n          LinearMemoryInspectorController.instance().removeHighlight(this.#tabId, event.data);\n          this.refreshData();\n        });\n    this.contentElement.appendChild(this.#inspector);\n    this.firstTimeOpen = true;\n  }\n\n  override wasShown(): void {\n    this.refreshData();\n  }\n\n  saveSettings(settings: LinearMemoryInspectorComponents.LinearMemoryInspector.Settings): void {\n    LinearMemoryInspectorController.instance().saveSettings(settings);\n  }\n\n  updateAddress(address: number): void {\n    if (address < 0 || address >= this.#memoryWrapper.length()) {\n      throw new Error('Requested address is out of bounds.');\n    }\n    this.#address = address;\n  }\n\n  refreshData(): void {\n    void LinearMemoryInspectorController.getMemoryForAddress(this.#memoryWrapper, this.#address).then(({\n                                                                                                        memory,\n                                                                                                        offset,\n                                                                                                      }) => {\n      let valueTypes;\n      let valueTypeModes;\n      let endianness;\n      if (this.firstTimeOpen) {\n        const settings = LinearMemoryInspectorController.instance().loadSettings();\n        valueTypes = settings.valueTypes;\n        valueTypeModes = settings.modes;\n        endianness = settings.endianness;\n        this.firstTimeOpen = false;\n      }\n      this.#inspector.data = {\n        memory,\n        address: this.#address,\n        memoryOffset: offset,\n        outerMemoryLength: this.#memoryWrapper.length(),\n        valueTypes,\n        valueTypeModes,\n        endianness,\n        highlightInfo: this.#getHighlightInfo(),\n        hideValueInspector: this.#hideValueInspector,\n      };\n    });\n  }\n\n  #memoryRequested(event: LinearMemoryInspectorComponents.LinearMemoryInspector.MemoryRequestEvent): void {\n    const {start, end, address} = event.data;\n    if (address < start || address >= end) {\n      throw new Error('Requested address is out of bounds.');\n    }\n\n    void LinearMemoryInspectorController.getMemoryRange(this.#memoryWrapper, start, end).then(memory => {\n      this.#inspector.data = {\n        memory,\n        address,\n        memoryOffset: start,\n        outerMemoryLength: this.#memoryWrapper.length(),\n        highlightInfo: this.#getHighlightInfo(),\n        hideValueInspector: this.#hideValueInspector,\n      };\n    });\n  }\n\n  #getHighlightInfo(): LinearMemoryInspectorComponents.LinearMemoryViewerUtils.HighlightInfo|undefined {\n    const highlightInfo = LinearMemoryInspectorController.instance().getHighlightInfo(this.#tabId);\n    if (highlightInfo !== undefined) {\n      if (highlightInfo.startAddress < 0 || highlightInfo.startAddress >= this.#memoryWrapper.length()) {\n        throw new Error('HighlightInfo start address is out of bounds.');\n      }\n      if (highlightInfo.size <= 0) {\n        throw new Error('Highlight size must be a positive number.');\n      }\n    }\n    return highlightInfo;\n  }\n}\n"]}