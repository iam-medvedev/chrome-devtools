{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/linear_memory_inspector/components/LinearMemoryHighlightChipList.ts", "linearMemoryHighlightChipList.css.js", "../../../../../../../front_end/panels/linear_memory_inspector/components/LinearMemoryInspector.ts", "../../../../../../../front_end/panels/linear_memory_inspector/components/LinearMemoryValueInterpreter.ts", "../../../../../../../front_end/panels/linear_memory_inspector/components/ValueInterpreterDisplay.ts", "valueInterpreterDisplay.css.js", "../../../../../../../front_end/panels/linear_memory_inspector/components/ValueInterpreterDisplayUtils.ts", "../../../../../../../front_end/panels/linear_memory_inspector/components/ValueInterpreterSettings.ts", "valueInterpreterSettings.css.js", "linearMemoryValueInterpreter.css.js", "../../../../../../../front_end/panels/linear_memory_inspector/components/LinearMemoryViewer.ts", "../../../../../../../front_end/panels/linear_memory_inspector/components/LinearMemoryInspectorUtils.ts", "linearMemoryViewer.css.js", "linearMemoryInspector.css.js", "../../../../../../../front_end/panels/linear_memory_inspector/components/LinearMemoryNavigator.ts", "linearMemoryNavigator.css.js", "../../../../../../../front_end/panels/linear_memory_inspector/components/LinearMemoryViewerUtils.ts"],
  "sourcesContent": ["// Copyright (c) 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport '../../../ui/components/icon_button/icon_button.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Lit from '../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport linearMemoryHighlightChipListStyles from './linearMemoryHighlightChipList.css.js';\nimport type {HighlightInfo} from './LinearMemoryViewerUtils.js';\n\nconst UIStrings = {\n  /**\n   * @description Tooltip text that appears when hovering over an inspected variable's button in the Linear Memory Highlight Chip List.\n   * Clicking the button changes the displayed slice of computer memory in the Linear Memory inspector to contain the inspected variable's bytes.\n   */\n  jumpToAddress: 'Jump to this memory',\n  /**\n   * @description Tooltip text that appears when hovering over an inspected variable's delete button in the Linear Memory Highlight Chip List.\n   * Clicking the delete button stops highlighting the variable's memory in the Linear Memory inspector.\n   * 'Memory' is a slice of bytes in the computer memory.\n   */\n  deleteHighlight: 'Stop highlighting this memory',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings(\n    'panels/linear_memory_inspector/components/LinearMemoryHighlightChipList.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst {render, html} = Lit;\n\nexport interface LinearMemoryHighlightChipListData {\n  highlightInfos: HighlightInfo[];\n  focusedMemoryHighlight?: HighlightInfo;\n}\n\nexport class DeleteMemoryHighlightEvent extends Event {\n  static readonly eventName = 'deletememoryhighlight';\n  data: HighlightInfo;\n\n  constructor(highlightInfo: HighlightInfo) {\n    super(DeleteMemoryHighlightEvent.eventName, {bubbles: true, composed: true});\n    this.data = highlightInfo;\n  }\n}\n\nexport class JumpToHighlightedMemoryEvent extends Event {\n  static readonly eventName = 'jumptohighlightedmemory';\n  data: number;\n\n  constructor(address: number) {\n    super(JumpToHighlightedMemoryEvent.eventName);\n    this.data = address;\n  }\n}\n\nexport class LinearMemoryHighlightChipList extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #highlightedAreas: HighlightInfo[] = [];\n  #focusedMemoryHighlight?: HighlightInfo;\n\n  set data(data: LinearMemoryHighlightChipListData) {\n    this.#highlightedAreas = data.highlightInfos;\n    this.#focusedMemoryHighlight = data.focusedMemoryHighlight;\n    this.#render();\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    const chips = [];\n    for (const highlightInfo of this.#highlightedAreas) {\n      chips.push(this.#createChip(highlightInfo));\n    }\n    const result = html`\n            <style>${linearMemoryHighlightChipListStyles}</style>\n            <div class=\"highlight-chip-list\">\n              ${chips}\n            </div>\n        `;\n    render(result, this.#shadow, { host: this });\n    // clang-format on\n  }\n\n  #createChip(highlightInfo: HighlightInfo): Lit.TemplateResult {\n    const expressionName = highlightInfo.name || '<anonymous>';\n    const expressionType = highlightInfo.type;\n    const isFocused = highlightInfo === this.#focusedMemoryHighlight;\n    const classMap = {\n      focused: isFocused,\n      'highlight-chip': true,\n    };\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      <div class=${Lit.Directives.classMap(classMap)}>\n        <button class=\"jump-to-highlight-button\" title=${i18nString(UIStrings.jumpToAddress)}\n            jslog=${VisualLogging.action('linear-memory-inspector.jump-to-highlight').track({click:true})}\n            @click=${():void => this.#onJumpToHighlightClick(highlightInfo.startAddress)}>\n          <span class=\"source-code\">\n            <span class=\"value\">${expressionName}</span>\n            <span class=\"separator\">: </span>\n            <span>${expressionType}</span>\n          </span>\n        </button>\n        <div class=\"delete-highlight-container\">\n          <button class=\"delete-highlight-button\" title=${i18nString(UIStrings.deleteHighlight)}\n              jslog=${VisualLogging.action('linear-memory-inspector.delete-highlight').track({click:true})}\n              @click=${():void => this.#onDeleteHighlightClick(highlightInfo)}>\n            <devtools-icon .data=${{\n              iconName: 'cross',\n              color: 'var(--icon-default-hover)',\n              width: '16px',\n              }}>\n            </devtools-icon>\n          </button>\n        </div>\n      </div>\n    `;\n    // clang-format off\n  }\n\n  #onJumpToHighlightClick(startAddress: number): void {\n    this.dispatchEvent(new JumpToHighlightedMemoryEvent(startAddress));\n  }\n\n  #onDeleteHighlightClick(highlight:HighlightInfo): void {\n    this.dispatchEvent(new DeleteMemoryHighlightEvent(highlight));\n  }\n}\n\ncustomElements.define(\n    'devtools-linear-memory-highlight-chip-list', LinearMemoryHighlightChipList);\n\ndeclare global {\n\n  interface HTMLElementTagNameMap {\n    'devtools-linear-memory-highlight-chip-list': LinearMemoryHighlightChipList;\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2022 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.highlight-chip-list {\n  min-height: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: left;\n  align-items: center;\n  background-color: var(--sys-color-cdt-base-container);\n  margin: 8px 0;\n  gap: 8px;\n  row-gap: 6px;\n}\n\n.highlight-chip {\n  background: var(--sys-color-cdt-base-container);\n  border: 1px solid var(--sys-color-divider);\n  height: 18px;\n  border-radius: 4px;\n  flex: 0 0 auto;\n  max-width: 250px;\n  position: relative;\n  padding: 0 6px;\n}\n\n.highlight-chip:hover {\n  background-color: var(--sys-color-state-hover-on-subtle);\n}\n\n.delete-highlight-container {\n  display: none;\n  height: 100%;\n  position: absolute;\n  right: 0;\n  top: 0;\n  border-radius: 4px;\n  width: 24px;\n  align-items: center;\n  justify-content: center;\n}\n\n.delete-highlight-button {\n  cursor: pointer;\n  width: 13px;\n  height: 13px;\n  border: none;\n  background-color: transparent;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.delete-highlight-button:hover {\n  background-color: var(--sys-color-state-hover-on-subtle);\n  border-radius: 50%;\n}\n\n.jump-to-highlight-button {\n  cursor: pointer;\n  padding: 0;\n  border: none;\n  background: none;\n  height: 100%;\n  align-items: center;\n  max-width: 100%;\n  overflow: hidden;\n}\n\n.delete-highlight-button devtools-icon {\n  width: 13px;\n  height: 13px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n}\n\n.source-code {\n  font-family: var(--source-code-font-family);\n  font-size: var(--source-code-font-size);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  color: var(--sys-color-on-surface);\n}\n\n.value {\n  color: var(--sys-color-token-tag);\n}\n\n.separator {\n  white-space: pre;\n  flex-shrink: 0;\n}\n\n.highlight-chip.focused {\n  outline: 2px solid var(--sys-color-state-focus-ring);\n  outline-offset: 2px;\n}\n\n.highlight-chip:hover > .delete-highlight-container {\n  display: flex;\n  /* To avoid issues with stacking semi-transparent colors, we use a hardcoded solid color here. */\n  /* stylelint-disable-next-line plugin/use_theme_colors */\n  background: linear-gradient(90deg, transparent 0%, rgb(241 243 244) 25%)\n}\n\n.highlight-chip.focused:hover > .delete-highlight-container {\n  /* To avoid issues with stacking semi-transparent colors, we use a hardcoded solid color here. */\n  /* stylelint-disable-next-line plugin/use_theme_colors */\n  background: linear-gradient(90deg, transparent 0%, rgb(231 241 253) 25%);\n}\n\n:host-context(.theme-with-dark-background) .highlight-chip:hover > .delete-highlight-container {\n  display: flex;\n  /* To avoid issues with stacking semi-transparent colors, we use a hardcoded solid color here. */\n  /* stylelint-disable-next-line plugin/use_theme_colors */\n  background: linear-gradient(90deg, transparent 0%, rgb(41 42 45) 25%);\n}\n\n:host-context(.theme-with-dark-background) .highlight-chip.focused:hover > .delete-highlight-container {\n  /* To avoid issues with stacking semi-transparent colors, we use a hardcoded solid color here. */\n  /* stylelint-disable-next-line plugin/use_theme_colors */\n  background: linear-gradient(90deg, transparent 0%, rgb(48 55 68) 25%);\n}\n\n/*# sourceURL=${import.meta.resolve('./linearMemoryHighlightChipList.css')} */`;", "// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport './LinearMemoryValueInterpreter.js';\nimport './LinearMemoryHighlightChipList.js';\nimport './LinearMemoryViewer.js';\n\nimport * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport {html, nothing, render} from '../../../ui/lit/lit.js';\n\nimport type {DeleteMemoryHighlightEvent, JumpToHighlightedMemoryEvent} from './LinearMemoryHighlightChipList.js';\nimport linearMemoryInspectorStyles from './linearMemoryInspector.css.js';\nimport {formatAddress, parseAddress} from './LinearMemoryInspectorUtils.js';\nimport {\n  type AddressInputChangedEvent,\n  type HistoryNavigationEvent,\n  Mode,\n  Navigation,\n  type PageNavigationEvent,\n} from './LinearMemoryNavigator.js';\nimport type {EndiannessChangedEvent, ValueTypeToggledEvent} from './LinearMemoryValueInterpreter.js';\nimport type {ByteSelectedEvent, ResizeEvent} from './LinearMemoryViewer.js';\nimport type {HighlightInfo} from './LinearMemoryViewerUtils.js';\nimport type {JumpToPointerAddressEvent, ValueTypeModeChangedEvent} from './ValueInterpreterDisplay.js';\nimport {\n  Endianness,\n  getDefaultValueTypeMapping,\n  VALUE_INTEPRETER_MAX_NUM_BYTES,\n  type ValueType,\n  type ValueTypeMode,\n} from './ValueInterpreterDisplayUtils.js';\n\nconst UIStrings = {\n  /**\n   * @description Tooltip text that appears when hovering over an invalid address in the address line in the Linear memory inspector\n   * @example {0x00000000} PH1\n   * @example {0x00400000} PH2\n   */\n  addressHasToBeANumberBetweenSAnd: 'Address has to be a number between {PH1} and {PH2}',\n} as const;\nconst str_ =\n    i18n.i18n.registerUIStrings('panels/linear_memory_inspector/components/LinearMemoryInspector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n// If the LinearMemoryInspector only receives a portion\n// of the original Uint8Array to show, it requires information\n// on the 1. memoryOffset (at which index this portion starts),\n// and on the 2. outerMemoryLength (length of the original Uint8Array).\nexport interface LinearMemoryInspectorData {\n  memory: Uint8Array<ArrayBuffer>;\n  address: number;\n  memoryOffset: number;\n  outerMemoryLength: number;\n  valueTypes?: Set<ValueType>;\n  valueTypeModes?: Map<ValueType, ValueTypeMode>;\n  endianness?: Endianness;\n  highlightInfo?: HighlightInfo;\n  hideValueInspector?: boolean;\n}\n\nexport interface Settings {\n  valueTypes: Set<ValueType>;\n  modes: Map<ValueType, ValueTypeMode>;\n  endianness: Endianness;\n}\n\nexport class MemoryRequestEvent extends Event {\n  static readonly eventName = 'memoryrequest';\n  data: {start: number, end: number, address: number};\n\n  constructor(start: number, end: number, address: number) {\n    super(MemoryRequestEvent.eventName);\n    this.data = {start, end, address};\n  }\n}\n\nexport class AddressChangedEvent extends Event {\n  static readonly eventName = 'addresschanged';\n  data: number;\n\n  constructor(address: number) {\n    super(AddressChangedEvent.eventName);\n    this.data = address;\n  }\n}\n\nexport class SettingsChangedEvent extends Event {\n  static readonly eventName = 'settingschanged';\n  data: Settings;\n\n  constructor(settings: Settings) {\n    super(SettingsChangedEvent.eventName);\n    this.data = settings;\n  }\n}\n\nclass AddressHistoryEntry implements Common.SimpleHistoryManager.HistoryEntry {\n  #address = 0;\n  #callback;\n\n  constructor(address: number, callback: (x: number) => void) {\n    if (address < 0) {\n      throw new Error('Address should be a greater or equal to zero');\n    }\n    this.#address = address;\n    this.#callback = callback;\n  }\n\n  valid(): boolean {\n    return true;\n  }\n\n  reveal(): void {\n    this.#callback(this.#address);\n  }\n}\n\nexport class LinearMemoryInspector extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #history = new Common.SimpleHistoryManager.SimpleHistoryManager(10);\n\n  #memory = new Uint8Array();\n  #memoryOffset = 0;\n  #outerMemoryLength = 0;\n\n  #address = -1;\n  #highlightInfo?: HighlightInfo;\n\n  #currentNavigatorMode = Mode.SUBMITTED;\n  #currentNavigatorAddressLine = `${this.#address}`;\n\n  #numBytesPerPage = 4;\n\n  #valueTypeModes = getDefaultValueTypeMapping();\n  #valueTypes = new Set(this.#valueTypeModes.keys());\n  #endianness = Endianness.LITTLE;\n\n  #hideValueInspector = false;\n\n  set data(data: LinearMemoryInspectorData) {\n    if (data.address < data.memoryOffset || data.address > data.memoryOffset + data.memory.length || data.address < 0) {\n      throw new Error('Address is out of bounds.');\n    }\n\n    if (data.memoryOffset < 0) {\n      throw new Error('Memory offset has to be greater or equal to zero.');\n    }\n\n    if (data.highlightInfo) {\n      if (data.highlightInfo.size < 0) {\n        throw new Error('Object size has to be greater than or equal to zero');\n      }\n      if (data.highlightInfo.startAddress < 0 || data.highlightInfo.startAddress >= data.outerMemoryLength) {\n        throw new Error('Object start address is out of bounds.');\n      }\n    }\n\n    this.#memory = data.memory;\n    this.#memoryOffset = data.memoryOffset;\n    this.#outerMemoryLength = data.outerMemoryLength;\n    this.#valueTypeModes = data.valueTypeModes || this.#valueTypeModes;\n    this.#valueTypes = data.valueTypes || this.#valueTypes;\n    this.#endianness = data.endianness || this.#endianness;\n    this.#highlightInfo = data.highlightInfo;\n    this.#hideValueInspector = data.hideValueInspector ?? this.#hideValueInspector;\n    this.#setAddress(data.address);\n    this.#render();\n  }\n\n  #render(): void {\n    const {start, end} = this.#getPageRangeForAddress(this.#address, this.#numBytesPerPage);\n\n    const navigatorAddressToShow = this.#currentNavigatorMode === Mode.SUBMITTED ? formatAddress(this.#address) :\n                                                                                   this.#currentNavigatorAddressLine;\n    const navigatorAddressIsValid = this.#isValidAddress(navigatorAddressToShow);\n\n    const invalidAddressMsg = i18nString(\n        UIStrings.addressHasToBeANumberBetweenSAnd,\n        {PH1: formatAddress(0), PH2: formatAddress(this.#outerMemoryLength)});\n\n    const errorMsg = navigatorAddressIsValid ? undefined : invalidAddressMsg;\n\n    const canGoBackInHistory = this.#history.canRollback();\n    const canGoForwardInHistory = this.#history.canRollover();\n\n    const highlightedMemoryAreas = this.#highlightInfo ? [this.#highlightInfo] : [];\n    const focusedMemoryHighlight = this.#getSmallestEnclosingMemoryHighlight(highlightedMemoryAreas, this.#address);\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <style>${linearMemoryInspectorStyles}</style>\n      <div class=\"view\">\n        <devtools-linear-memory-inspector-navigator\n          .data=${{address: navigatorAddressToShow, valid: navigatorAddressIsValid, mode: this.#currentNavigatorMode, error: errorMsg, canGoBackInHistory, canGoForwardInHistory}}\n          @refreshrequested=${this.#onRefreshRequest}\n          @addressinputchanged=${this.#onAddressChange}\n          @pagenavigation=${this.#navigatePage}\n          @historynavigation=${this.#navigateHistory}></devtools-linear-memory-inspector-navigator>\n          <devtools-linear-memory-highlight-chip-list\n          .data=${{highlightInfos: highlightedMemoryAreas, focusedMemoryHighlight }}\n          @jumptohighlightedmemory=${this.#onJumpToAddress}>\n          </devtools-linear-memory-highlight-chip-list>\n        <devtools-linear-memory-inspector-viewer\n          .data=${{\n            memory: this.#memory.slice(start - this.#memoryOffset,\n            end - this.#memoryOffset),\n            address: this.#address, memoryOffset: start,\n            focus: this.#currentNavigatorMode === Mode.SUBMITTED,\n            highlightInfo: this.#highlightInfo,\n            focusedMemoryHighlight }}\n          @byteselected=${this.#onByteSelected}\n          @resize=${this.#resize}>\n        </devtools-linear-memory-inspector-viewer>\n      </div>\n      ${this.#hideValueInspector ? nothing : html`\n      <div class=\"value-interpreter\">\n        <devtools-linear-memory-inspector-interpreter\n          .data=${{\n            value: this.#memory.slice(this.#address - this.#memoryOffset, this.#address + VALUE_INTEPRETER_MAX_NUM_BYTES).buffer,\n            valueTypes: this.#valueTypes,\n            valueTypeModes: this.#valueTypeModes,\n            endianness: this.#endianness,\n            memoryLength: this.#outerMemoryLength }}\n          @valuetypetoggled=${this.#onValueTypeToggled}\n          @valuetypemodechanged=${this.#onValueTypeModeChanged}\n          @endiannesschanged=${this.#onEndiannessChanged}\n          @jumptopointeraddress=${this.#onJumpToAddress}\n          >\n        </devtools-linear-memory-inspector-interpreter/>\n      </div>`}\n      `, this.#shadow, {\n      host: this,\n    });\n    // clang-format on\n  }\n\n  #onJumpToAddress(e: JumpToPointerAddressEvent|JumpToHighlightedMemoryEvent): void {\n    // Stop event from bubbling up, since no element further up needs the event.\n    e.stopPropagation();\n    this.#currentNavigatorMode = Mode.SUBMITTED;\n    const addressInRange = Math.max(0, Math.min(e.data, this.#outerMemoryLength - 1));\n    this.#jumpToAddress(addressInRange);\n  }\n\n  #onRefreshRequest(): void {\n    const {start, end} = this.#getPageRangeForAddress(this.#address, this.#numBytesPerPage);\n    this.dispatchEvent(new MemoryRequestEvent(start, end, this.#address));\n  }\n\n  #onByteSelected(e: ByteSelectedEvent): void {\n    this.#currentNavigatorMode = Mode.SUBMITTED;\n    const addressInRange = Math.max(0, Math.min(e.data, this.#outerMemoryLength - 1));\n    this.#jumpToAddress(addressInRange);\n  }\n\n  #createSettings(): Settings {\n    return {valueTypes: this.#valueTypes, modes: this.#valueTypeModes, endianness: this.#endianness};\n  }\n\n  #onEndiannessChanged(e: EndiannessChangedEvent): void {\n    this.#endianness = e.data;\n    this.dispatchEvent(new SettingsChangedEvent(this.#createSettings()));\n    this.#render();\n  }\n\n  #isValidAddress(address: string): boolean {\n    const newAddress = parseAddress(address);\n    return newAddress !== undefined && newAddress >= 0 && newAddress < this.#outerMemoryLength;\n  }\n\n  #onAddressChange(e: AddressInputChangedEvent): void {\n    const {address, mode} = e.data;\n    const isValid = this.#isValidAddress(address);\n    const newAddress = parseAddress(address);\n    this.#currentNavigatorAddressLine = address;\n\n    if (newAddress !== undefined && isValid) {\n      this.#currentNavigatorMode = mode;\n      this.#jumpToAddress(newAddress);\n      return;\n    }\n\n    if (mode === Mode.SUBMITTED && !isValid) {\n      this.#currentNavigatorMode = Mode.INVALID_SUBMIT;\n    } else {\n      this.#currentNavigatorMode = Mode.EDIT;\n    }\n\n    this.#render();\n  }\n\n  #onValueTypeToggled(e: ValueTypeToggledEvent): void {\n    const {type, checked} = e.data;\n    if (checked) {\n      this.#valueTypes.add(type);\n    } else {\n      this.#valueTypes.delete(type);\n    }\n    this.dispatchEvent(new SettingsChangedEvent(this.#createSettings()));\n    this.#render();\n  }\n\n  #onValueTypeModeChanged(e: ValueTypeModeChangedEvent): void {\n    e.stopImmediatePropagation();\n    const {type, mode} = e.data;\n    this.#valueTypeModes.set(type, mode);\n    this.dispatchEvent(new SettingsChangedEvent(this.#createSettings()));\n    this.#render();\n  }\n\n  #navigateHistory(e: HistoryNavigationEvent): boolean {\n    return e.data === Navigation.FORWARD ? this.#history.rollover() : this.#history.rollback();\n  }\n\n  #navigatePage(e: PageNavigationEvent): void {\n    const newAddress =\n        e.data === Navigation.FORWARD ? this.#address + this.#numBytesPerPage : this.#address - this.#numBytesPerPage;\n    const addressInRange = Math.max(0, Math.min(newAddress, this.#outerMemoryLength - 1));\n    this.#jumpToAddress(addressInRange);\n  }\n\n  #jumpToAddress(address: number): void {\n    if (address < 0 || address >= this.#outerMemoryLength) {\n      console.warn(`Specified address is out of bounds: ${address}`);\n      return;\n    }\n    this.#setAddress(address);\n    this.#update();\n  }\n\n  #getPageRangeForAddress(address: number, numBytesPerPage: number): {start: number, end: number} {\n    const pageNumber = Math.floor(address / numBytesPerPage);\n    const pageStartAddress = pageNumber * numBytesPerPage;\n    const pageEndAddress = Math.min(pageStartAddress + numBytesPerPage, this.#outerMemoryLength);\n    return {start: pageStartAddress, end: pageEndAddress};\n  }\n\n  #resize(event: ResizeEvent): void {\n    this.#numBytesPerPage = event.data;\n    this.#update();\n  }\n\n  #update(): void {\n    const {start, end} = this.#getPageRangeForAddress(this.#address, this.#numBytesPerPage);\n    if (start < this.#memoryOffset || end > this.#memoryOffset + this.#memory.length) {\n      this.dispatchEvent(new MemoryRequestEvent(start, end, this.#address));\n    } else {\n      this.#render();\n    }\n  }\n\n  #setAddress(address: number): void {\n    // If we are already showing the address that is requested, no need to act upon it.\n    if (this.#address === address) {\n      return;\n    }\n    const historyEntry = new AddressHistoryEntry(address, () => this.#jumpToAddress(address));\n    this.#history.push(historyEntry);\n    this.#address = address;\n    this.dispatchEvent(new AddressChangedEvent(this.#address));\n  }\n\n  // Returns the highlightInfo with the smallest size property that encloses the provided address.\n  // If there are multiple smallest enclosing highlights, we pick the one appearing the earliest in highlightedMemoryAreas.\n  // If no such highlightInfo exists, it returns undefined.\n  //\n  // Selecting the smallest enclosing memory highlight is a heuristic that aims to pick the\n  // most specific highlight given a provided address. This way, objects contained in other objects are\n  // potentially still accessible.\n  #getSmallestEnclosingMemoryHighlight(highlightedMemoryAreas: HighlightInfo[], address: number): HighlightInfo\n      |undefined {\n    let smallestEnclosingHighlight;\n    for (const highlightedMemory of highlightedMemoryAreas) {\n      if (highlightedMemory.startAddress <= address &&\n          address < highlightedMemory.startAddress + highlightedMemory.size) {\n        if (!smallestEnclosingHighlight) {\n          smallestEnclosingHighlight = highlightedMemory;\n        } else if (highlightedMemory.size < smallestEnclosingHighlight.size) {\n          smallestEnclosingHighlight = highlightedMemory;\n        }\n      }\n    }\n    return smallestEnclosingHighlight;\n  }\n}\n\ncustomElements.define('devtools-linear-memory-inspector-inspector', LinearMemoryInspector);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-inspector': LinearMemoryInspector;\n  }\n\n  interface HTMLElementEventMap {\n    memoryrequest: MemoryRequestEvent;\n    addresschanged: AddressChangedEvent;\n    settingschanged: SettingsChangedEvent;\n    deletememoryhighlight: DeleteMemoryHighlightEvent;\n  }\n}\n", "// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport '../../../ui/components/icon_button/icon_button.js';\nimport './ValueInterpreterDisplay.js';\nimport './ValueInterpreterSettings.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as Lit from '../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport linearMemoryValueInterpreterStyles from './linearMemoryValueInterpreter.css.js';\nimport {Endianness, type ValueType, type ValueTypeMode} from './ValueInterpreterDisplayUtils.js';\nimport type {TypeToggleEvent} from './ValueInterpreterSettings.js';\n\nconst UIStrings = {\n  /**\n   * @description Tooltip text that appears when hovering over the gear button to open and close settings in the Linear memory inspector. These settings\n   *             allow the user to change the value type to view, such as 32-bit Integer, or 32-bit Float.\n   */\n  toggleValueTypeSettings: 'Toggle value type settings',\n  /**\n   * @description Tooltip text that appears when hovering over the 'Little Endian' or 'Big Endian' setting in the Linear memory inspector.\n   */\n  changeEndianness: 'Change `Endianness`',\n} as const;\nconst str_ =\n    i18n.i18n.registerUIStrings('panels/linear_memory_inspector/components/LinearMemoryValueInterpreter.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst {render, html} = Lit;\n\nexport class EndiannessChangedEvent extends Event {\n  static readonly eventName = 'endiannesschanged';\n  data: Endianness;\n\n  constructor(endianness: Endianness) {\n    super(EndiannessChangedEvent.eventName);\n    this.data = endianness;\n  }\n}\n\nexport class ValueTypeToggledEvent extends Event {\n  static readonly eventName = 'valuetypetoggled';\n  data: {type: ValueType, checked: boolean};\n\n  constructor(type: ValueType, checked: boolean) {\n    super(ValueTypeToggledEvent.eventName);\n    this.data = {type, checked};\n  }\n}\n\nexport interface LinearMemoryValueInterpreterData {\n  value: ArrayBuffer;\n  valueTypes: Set<ValueType>;\n  endianness: Endianness;\n  valueTypeModes?: Map<ValueType, ValueTypeMode>;\n  memoryLength: number;\n}\n\nexport class LinearMemoryValueInterpreter extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #endianness = Endianness.LITTLE;\n  #buffer = new ArrayBuffer(0);\n  #valueTypes = new Set<ValueType>();\n  #valueTypeModeConfig = new Map<ValueType, ValueTypeMode>();\n  #memoryLength = 0;\n  #showSettings = false;\n\n  set data(data: LinearMemoryValueInterpreterData) {\n    this.#endianness = data.endianness;\n    this.#buffer = data.value;\n    this.#valueTypes = data.valueTypes;\n    this.#valueTypeModeConfig = data.valueTypeModes || new Map();\n    this.#memoryLength = data.memoryLength;\n    this.#render();\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <style>${UI.inspectorCommonStyles}</style>\n      <style>${linearMemoryValueInterpreterStyles}</style>\n      <div class=\"value-interpreter\">\n        <div class=\"settings-toolbar\">\n          ${this.#renderEndiannessSetting()}\n          <devtools-button data-settings=\"true\" class=\"toolbar-button ${this.#showSettings ? '' : 'disabled'}\"\n              title=${i18nString(UIStrings.toggleValueTypeSettings)} @click=${this.#onSettingsToggle}\n              jslog=${VisualLogging.toggleSubpane('linear-memory-inspector.toggle-value-settings').track({click: true})}\n              .iconName=${'gear'}\n              .toggledIconName=${'gear-filled'}\n              .toggleType=${Buttons.Button.ToggleType.PRIMARY}\n              .variant=${Buttons.Button.Variant.ICON_TOGGLE}\n          ></devtools-button>\n        </div>\n        <span class=\"divider\"></span>\n        <div>\n          ${this.#showSettings ?\n            html`\n              <devtools-linear-memory-inspector-interpreter-settings\n                .data=${{ valueTypes: this.#valueTypes }}\n                @typetoggle=${this.#onTypeToggle}>\n              </devtools-linear-memory-inspector-interpreter-settings>` :\n            html`\n              <devtools-linear-memory-inspector-interpreter-display\n                .data=${{\n                  buffer: this.#buffer,\n                  valueTypes: this.#valueTypes,\n                  endianness: this.#endianness,\n                  valueTypeModes: this.#valueTypeModeConfig,\n                  memoryLength: this.#memoryLength,\n                }}>\n              </devtools-linear-memory-inspector-interpreter-display>`}\n        </div>\n      </div>\n    `,\n      this.#shadow, { host: this },\n    );\n    // clang-format on\n  }\n\n  #onEndiannessChange(event: Event): void {\n    event.preventDefault();\n    const select = event.target as HTMLInputElement;\n    const endianness = select.value as Endianness;\n    this.dispatchEvent(new EndiannessChangedEvent(endianness));\n  }\n\n  #renderEndiannessSetting(): Lit.TemplateResult {\n    const onEnumSettingChange = this.#onEndiannessChange.bind(this);\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n    <label data-endianness-setting=\"true\" title=${i18nString(UIStrings.changeEndianness)}>\n      <select\n        jslog=${VisualLogging.dropDown('linear-memory-inspector.endianess').track({change: true})}\n        style=\"border: none;\"\n        data-endianness=\"true\" @change=${onEnumSettingChange}>\n        ${[Endianness.LITTLE, Endianness.BIG].map(endianness => {\n            return html`<option value=${endianness} .selected=${this.#endianness === endianness}\n            jslog=${VisualLogging.item(Platform.StringUtilities.toKebabCase(endianness)).track({click: true})}>${\n                i18n.i18n.lockedString(endianness)}</option>`;\n        })}\n      </select>\n    </label>\n    `;\n    // clang-format on\n  }\n\n  #onSettingsToggle(): void {\n    this.#showSettings = !this.#showSettings;\n    this.#render();\n  }\n\n  #onTypeToggle(e: TypeToggleEvent): void {\n    this.dispatchEvent(new ValueTypeToggledEvent(e.data.type, e.data.checked));\n  }\n}\n\ncustomElements.define('devtools-linear-memory-inspector-interpreter', LinearMemoryValueInterpreter);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-interpreter': LinearMemoryValueInterpreter;\n  }\n}\n", "// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport '../../../ui/components/icon_button/icon_button.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as Lit from '../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport valueInterpreterDisplayStyles from './valueInterpreterDisplay.css.js';\nimport {\n  Endianness,\n  format,\n  getDefaultValueTypeMapping,\n  getPointerAddress,\n  isNumber,\n  isPointer,\n  isValidMode,\n  VALUE_TYPE_MODE_LIST,\n  ValueType,\n  ValueTypeMode,\n} from './ValueInterpreterDisplayUtils.js';\n\nconst UIStrings = {\n  /**\n   * @description Tooltip text that appears when hovering over an unsigned interpretation of the memory under the Value Interpreter\n   */\n  unsignedValue: '`Unsigned` value',\n  /**\n   * @description Tooltip text that appears when hovering over the element to change value type modes of under the Value Interpreter. Value type modes\n   *             are different ways of viewing a certain value, e.g.: 10 (decimal) can be 0xa in hexadecimal mode, or 12 in octal mode.\n   */\n  changeValueTypeMode: 'Change mode',\n  /**\n   * @description Tooltip text that appears when hovering over a signed interpretation of the memory under the Value Interpreter\n   */\n  signedValue: '`Signed` value',\n  /**\n   * @description Tooltip text that appears when hovering over a 'jump-to-address' button that is next to a pointer (32-bit or 64-bit) under the Value Interpreter\n   */\n  jumpToPointer: 'Jump to address',\n  /**\n   * @description Tooltip text that appears when hovering over a 'jump-to-address' button that is next to a pointer (32-bit or 64-bit) with an invalid address under the Value Interpreter.\n   */\n  addressOutOfRange: 'Address out of memory range',\n\n} as const;\nconst str_ =\n    i18n.i18n.registerUIStrings('panels/linear_memory_inspector/components/ValueInterpreterDisplay.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst {render, html} = Lit;\n\nconst SORTED_VALUE_TYPES = Array.from(getDefaultValueTypeMapping().keys());\n\nexport interface ValueDisplayData {\n  buffer: ArrayBuffer;\n  valueTypes: Set<ValueType>;\n  endianness: Endianness;\n  memoryLength: number;\n  valueTypeModes?: Map<ValueType, ValueTypeMode>;\n}\n\nexport class ValueTypeModeChangedEvent extends Event {\n  static readonly eventName = 'valuetypemodechanged';\n  data: {type: ValueType, mode: ValueTypeMode};\n\n  constructor(type: ValueType, mode: ValueTypeMode) {\n    super(ValueTypeModeChangedEvent.eventName, {\n      composed: true,\n    });\n    this.data = {type, mode};\n  }\n}\n\nexport class JumpToPointerAddressEvent extends Event {\n  static readonly eventName = 'jumptopointeraddress';\n  data: number;\n\n  constructor(address: number) {\n    super(JumpToPointerAddressEvent.eventName, {\n      composed: true,\n    });\n    this.data = address;\n  }\n}\n\nexport class ValueInterpreterDisplay extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #endianness = Endianness.LITTLE;\n  #buffer = new ArrayBuffer(0);\n  #valueTypes = new Set<ValueType>();\n  #valueTypeModeConfig: Map<ValueType, ValueTypeMode> = getDefaultValueTypeMapping();\n  #memoryLength = 0;\n\n  set data(data: ValueDisplayData) {\n    this.#buffer = data.buffer;\n    this.#endianness = data.endianness;\n    this.#valueTypes = data.valueTypes;\n    this.#memoryLength = data.memoryLength;\n\n    if (data.valueTypeModes) {\n      data.valueTypeModes.forEach((mode, valueType) => {\n        if (isValidMode(valueType, mode)) {\n          this.#valueTypeModeConfig.set(valueType, mode);\n        }\n      });\n    }\n\n    this.#render();\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <style>${UI.inspectorCommonStyles}</style>\n      <style>${valueInterpreterDisplayStyles}</style>\n      <div class=\"value-types\">\n        ${SORTED_VALUE_TYPES.map(type => this.#valueTypes.has(type) ? this.#showValue(type) : '')}\n      </div>\n    `, this.#shadow, {host: this},\n    );\n    // clang-format on\n  }\n\n  #showValue(type: ValueType): Lit.TemplateResult {\n    if (isNumber(type)) {\n      return this.#renderNumberValues(type);\n    }\n    if (isPointer(type)) {\n      return this.#renderPointerValue(type);\n    }\n    throw new Error(`No known way to format ${type}`);\n  }\n\n  #renderPointerValue(type: ValueType): Lit.TemplateResult {\n    const unsignedValue = this.#parse({type, signed: false});\n    const address = getPointerAddress(type, this.#buffer, this.#endianness);\n    const jumpDisabled = Number.isNaN(address) || BigInt(address) >= BigInt(this.#memoryLength);\n    const buttonTitle = jumpDisabled ? i18nString(UIStrings.addressOutOfRange) : i18nString(UIStrings.jumpToPointer);\n    const iconColor = jumpDisabled ? 'var(--icon-default)' : 'var(--icon-link)';\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      <span class=\"value-type-cell-no-mode value-type-cell selectable-text\">${i18n.i18n.lockedString(type)}</span>\n      <div class=\"value-type-cell\">\n        <div class=\"value-type-value-with-link\" data-value=\"true\">\n        <span class=\"selectable-text\">${unsignedValue}</span>\n          ${\n            html`\n              <button class=\"jump-to-button\" data-jump=\"true\" title=${buttonTitle} ?disabled=${jumpDisabled}\n                jslog=${VisualLogging.action('linear-memory-inspector.jump-to-address').track({click: true})}\n                @click=${this.#onJumpToAddressClicked.bind(this, Number(address))}>\n                <devtools-icon .data=${\n                  {iconName: 'open-externally', color: iconColor, width: '16px'}}>\n                </devtools-icon>\n              </button>`}\n        </div>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #onJumpToAddressClicked(address: number): void {\n    this.dispatchEvent(new JumpToPointerAddressEvent(address));\n  }\n\n  #renderNumberValues(type: ValueType): Lit.TemplateResult {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      <span class=\"value-type-cell selectable-text\">${i18n.i18n.lockedString(type)}</span>\n      <div>\n        <select title=${i18nString(UIStrings.changeValueTypeMode)}\n          data-mode-settings=\"true\"\n          jslog=${VisualLogging.dropDown('linear-memory-inspector.value-type-mode').track({change: true})}\n          @change=${this.#onValueTypeModeChange.bind(this, type)}>\n            ${VALUE_TYPE_MODE_LIST.filter(x => isValidMode(type, x)).map(mode => {\n              return html`\n                <option value=${mode} .selected=${this.#valueTypeModeConfig.get(type) === mode}\n                        jslog=${VisualLogging.item(mode).track({click: true})}>${\n                  i18n.i18n.lockedString(mode)}\n                </option>`;\n            })}\n        </select>\n      </div>\n      ${this.#renderSignedAndUnsigned(type)}\n    `;\n    // clang-format on\n  }\n\n  #renderSignedAndUnsigned(type: ValueType): Lit.TemplateResult {\n    const unsignedValue = this.#parse({type, signed: false});\n    const signedValue = this.#parse({type, signed: true});\n    const mode = this.#valueTypeModeConfig.get(type);\n    const showSignedAndUnsigned =\n        signedValue !== unsignedValue && mode !== ValueTypeMode.HEXADECIMAL && mode !== ValueTypeMode.OCTAL;\n\n    const unsignedRendered = html`<span class=\"value-type-cell selectable-text\"  title=${\n        i18nString(UIStrings.unsignedValue)} data-value=\"true\">${unsignedValue}</span>`;\n    if (!showSignedAndUnsigned) {\n      return unsignedRendered;\n    }\n\n    // Some values are too long to show in one line, we're putting them into the next line.\n    const showInMultipleLines = type === ValueType.INT32 || type === ValueType.INT64;\n    const signedRendered = html`<span class=\"selectable-text\" data-value=\"true\" title=${\n        i18nString(UIStrings.signedValue)}>${signedValue}</span>`;\n\n    if (showInMultipleLines) {\n      return html`\n        <div class=\"value-type-cell\">\n          ${unsignedRendered}\n          ${signedRendered}\n        </div>\n        `;\n    }\n\n    return html`\n      <div class=\"value-type-cell\" style=\"flex-direction: row;\">\n        ${unsignedRendered}\n        <span class=\"signed-divider\"></span>\n        ${signedRendered}\n      </div>\n    `;\n  }\n\n  #onValueTypeModeChange(type: ValueType, event: Event): void {\n    event.preventDefault();\n    const select = event.target as HTMLInputElement;\n    const mode = select.value as ValueTypeMode;\n    this.dispatchEvent(new ValueTypeModeChangedEvent(type, mode));\n  }\n\n  #parse(data: {type: ValueType, signed?: boolean}): string {\n    const mode = this.#valueTypeModeConfig.get(data.type);\n    return format(\n        {buffer: this.#buffer, type: data.type, endianness: this.#endianness, signed: data.signed || false, mode});\n  }\n}\n\ncustomElements.define('devtools-linear-memory-inspector-interpreter-display', ValueInterpreterDisplay);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-interpreter-display': ValueInterpreterDisplay;\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2021 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n:host {\n  flex: auto;\n  display: flex;\n}\n\n.value-types {\n  width: 100%;\n  display: grid;\n  grid-template-columns: auto auto 1fr;\n  gap: 4px 24px;\n  min-height: 24px;\n  overflow: hidden;\n  padding: 2px 12px;\n  align-items: baseline;\n  justify-content: start;\n}\n\n.value-type-cell {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  min-height: 24px;\n}\n\n.value-type-value-with-link {\n  display: flex;\n  align-items: center;\n}\n\n.value-type-cell-no-mode {\n  grid-column: 1 / 3;\n}\n\n.jump-to-button {\n  display: flex;\n  width: 20px;\n  height: 20px;\n  border: none;\n  padding: 0;\n  outline: none;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  background-color: var(--sys-color-cdt-base-container);\n}\n\n.signed-divider {\n  width: 1px;\n  height: 15px;\n  background-color: var(--sys-color-divider);\n  margin: 0 4px;\n}\n\n.selectable-text {\n  user-select: text;\n}\n\n.selectable-text::selection {\n  background-color: var(--sys-color-tonal-container);\n  color: currentcolor;\n}\n\n/*# sourceURL=${import.meta.resolve('./valueInterpreterDisplay.css')} */`;", "// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\n\nconst UIStrings = {\n  /**\n   * @description Text that is shown in the LinearMemoryInspector if a value could not be correctly formatted\n   *             for the requested mode (e.g. we do not floats to be represented as hexadecimal numbers).\n   *             Abbreviation stands for 'not applicable'.\n   */\n  notApplicable: 'N/A',\n} as const;\nconst str_ =\n    i18n.i18n.registerUIStrings('panels/linear_memory_inspector/components/ValueInterpreterDisplayUtils.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport const VALUE_INTEPRETER_MAX_NUM_BYTES = 8;\n\nexport const enum ValueType {\n  INT8 = 'Integer 8-bit',\n  INT16 = 'Integer 16-bit',\n  INT32 = 'Integer 32-bit',\n  INT64 = 'Integer 64-bit',\n  FLOAT32 = 'Float 32-bit',\n  FLOAT64 = 'Float 64-bit',\n  POINTER32 = 'Pointer 32-bit',\n  POINTER64 = 'Pointer 64-bit',\n}\n\nexport const enum Endianness {\n  LITTLE = 'Little Endian',\n  BIG = 'Big Endian',\n}\n\nexport const enum ValueTypeMode {\n  DECIMAL = 'dec',\n  HEXADECIMAL = 'hex',\n  OCTAL = 'oct',\n  SCIENTIFIC = 'sci',\n}\n\nexport function getDefaultValueTypeMapping(): Map<ValueType, ValueTypeMode> {\n  return new Map(DEFAULT_MODE_MAPPING);\n}\n\nconst DEFAULT_MODE_MAPPING = new Map([\n  [ValueType.INT8, ValueTypeMode.DECIMAL],\n  [ValueType.INT16, ValueTypeMode.DECIMAL],\n  [ValueType.INT32, ValueTypeMode.DECIMAL],\n  [ValueType.INT64, ValueTypeMode.DECIMAL],\n  [ValueType.FLOAT32, ValueTypeMode.DECIMAL],\n  [ValueType.FLOAT64, ValueTypeMode.DECIMAL],\n  [ValueType.POINTER32, ValueTypeMode.HEXADECIMAL],\n  [ValueType.POINTER64, ValueTypeMode.HEXADECIMAL],\n]);\n\nexport const VALUE_TYPE_MODE_LIST = [\n  ValueTypeMode.DECIMAL,\n  ValueTypeMode.HEXADECIMAL,\n  ValueTypeMode.OCTAL,\n  ValueTypeMode.SCIENTIFIC,\n];\n\nexport function valueTypeToLocalizedString(valueType: ValueType): string {\n  return i18n.i18n.lockedString(valueType);\n}\n\nexport function isValidMode(type: ValueType, mode: ValueTypeMode): boolean {\n  switch (type) {\n    case ValueType.INT8:\n    case ValueType.INT16:\n    case ValueType.INT32:\n    case ValueType.INT64:\n      return mode === ValueTypeMode.DECIMAL || mode === ValueTypeMode.HEXADECIMAL || mode === ValueTypeMode.OCTAL;\n    case ValueType.FLOAT32:\n    case ValueType.FLOAT64:\n      return mode === ValueTypeMode.SCIENTIFIC || mode === ValueTypeMode.DECIMAL;\n    case ValueType.POINTER32:  // fallthrough\n    case ValueType.POINTER64:\n      return mode === ValueTypeMode.HEXADECIMAL;\n    default:\n      return Platform.assertNever(type, `Unknown value type: ${type}`);\n  }\n}\n\nexport function isNumber(type: ValueType): boolean {\n  switch (type) {\n    case ValueType.INT8:\n    case ValueType.INT16:\n    case ValueType.INT32:\n    case ValueType.INT64:\n    case ValueType.FLOAT32:\n    case ValueType.FLOAT64:\n      return true;\n    default:\n      return false;\n  }\n}\n\nexport function getPointerAddress(type: ValueType, buffer: ArrayBuffer, endianness: Endianness): number|bigint {\n  if (!isPointer(type)) {\n    console.error(`Requesting address of a non-pointer type: ${type}.\\n`);\n    return NaN;\n  }\n  try {\n    const dataView = new DataView(buffer);\n    const isLittleEndian = endianness === Endianness.LITTLE;\n    return type === ValueType.POINTER32 ? dataView.getUint32(0, isLittleEndian) :\n                                          dataView.getBigUint64(0, isLittleEndian);\n  } catch {\n    return NaN;\n  }\n}\n\nexport function isPointer(type: ValueType): boolean {\n  return type === ValueType.POINTER32 || type === ValueType.POINTER64;\n}\nexport interface FormatData {\n  buffer: ArrayBuffer;\n  type: ValueType;\n  endianness: Endianness;\n  signed: boolean;\n  mode?: ValueTypeMode;\n}\n\nexport function format(formatData: FormatData): string {\n  if (!formatData.mode) {\n    console.error(`No known way of showing value for ${formatData.type}`);\n    return i18nString(UIStrings.notApplicable);\n  }\n  const valueView = new DataView(formatData.buffer);\n  const isLittleEndian = formatData.endianness === Endianness.LITTLE;\n  let value;\n\n  try {\n    switch (formatData.type) {\n      case ValueType.INT8:\n        value = formatData.signed ? valueView.getInt8(0) : valueView.getUint8(0);\n        return formatInteger(value, formatData.mode);\n      case ValueType.INT16:\n        value = formatData.signed ? valueView.getInt16(0, isLittleEndian) : valueView.getUint16(0, isLittleEndian);\n        return formatInteger(value, formatData.mode);\n      case ValueType.INT32:\n        value = formatData.signed ? valueView.getInt32(0, isLittleEndian) : valueView.getUint32(0, isLittleEndian);\n        return formatInteger(value, formatData.mode);\n      case ValueType.INT64:\n        value =\n            formatData.signed ? valueView.getBigInt64(0, isLittleEndian) : valueView.getBigUint64(0, isLittleEndian);\n        return formatInteger(value, formatData.mode);\n      case ValueType.FLOAT32:\n        value = valueView.getFloat32(0, isLittleEndian);\n        return formatFloat(value, formatData.mode);\n      case ValueType.FLOAT64:\n        value = valueView.getFloat64(0, isLittleEndian);\n        return formatFloat(value, formatData.mode);\n      case ValueType.POINTER32:\n        value = valueView.getUint32(0, isLittleEndian);\n        return formatInteger(value, ValueTypeMode.HEXADECIMAL);\n      case ValueType.POINTER64:\n        value = valueView.getBigUint64(0, isLittleEndian);\n        return formatInteger(value, ValueTypeMode.HEXADECIMAL);\n      default:\n        return Platform.assertNever(formatData.type, `Unknown value type: ${formatData.type}`);\n    }\n  } catch {\n    return i18nString(UIStrings.notApplicable);\n  }\n}\n\nexport function formatFloat(value: number, mode: ValueTypeMode): string {\n  switch (mode) {\n    case ValueTypeMode.DECIMAL:\n      return value.toFixed(2).toString();\n    case ValueTypeMode.SCIENTIFIC:\n      return value.toExponential(2).toString();\n    default:\n      throw new Error(`Unknown mode for floats: ${mode}.`);\n  }\n}\n\nexport function formatInteger(value: number|bigint, mode: ValueTypeMode): string {\n  switch (mode) {\n    case ValueTypeMode.DECIMAL:\n      return value.toString();\n    case ValueTypeMode.HEXADECIMAL:\n      if (value < 0) {\n        return i18nString(UIStrings.notApplicable);\n      }\n      return '0x' + value.toString(16).toUpperCase();\n    case ValueTypeMode.OCTAL:\n      if (value < 0) {\n        return i18nString(UIStrings.notApplicable);\n      }\n      return value.toString(8);\n    default:\n      throw new Error(`Unknown mode for integers: ${mode}.`);\n  }\n}\n", "// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport '../../../ui/legacy/legacy.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Lit from '../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport {ValueType, valueTypeToLocalizedString} from './ValueInterpreterDisplayUtils.js';\nimport valueInterpreterSettingsStyles from './valueInterpreterSettings.css.js';\n\nconst {render, html} = Lit;\n\nconst UIStrings = {\n  /**\n   * @description Name of a group of selectable value types that do not fall under integer and floating point value types, e.g. Pointer32. The group appears name appears under the Value Interpreter Settings.\n   */\n  otherGroup: 'Other',\n} as const;\nconst str_ =\n    i18n.i18n.registerUIStrings('panels/linear_memory_inspector/components/ValueInterpreterSettings.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface ValueInterpreterSettingsData {\n  valueTypes: Set<ValueType>;\n}\n\nconst enum ValueTypeGroup {\n  INTEGER = 'Integer',\n  FLOAT = 'Floating point',\n  OTHER = 'Other',\n}\n\nconst GROUP_TO_TYPES = new Map(\n    [\n      [ValueTypeGroup.INTEGER, [ValueType.INT8, ValueType.INT16, ValueType.INT32, ValueType.INT64]],\n      [ValueTypeGroup.FLOAT, [ValueType.FLOAT32, ValueType.FLOAT64]],\n      [ValueTypeGroup.OTHER, [ValueType.POINTER32, ValueType.POINTER64]],\n    ],\n);\n\nfunction valueTypeGroupToLocalizedString(group: ValueTypeGroup): string {\n  if (group === ValueTypeGroup.OTHER) {\n    return i18nString(UIStrings.otherGroup);\n  }\n\n  // The remaining group type names should not be localized.\n  return group;\n}\n\nexport class TypeToggleEvent extends Event {\n  static readonly eventName = 'typetoggle';\n  data: {type: ValueType, checked: boolean};\n\n  constructor(type: ValueType, checked: boolean) {\n    super(TypeToggleEvent.eventName);\n    this.data = {type, checked};\n  }\n}\n\nexport class ValueInterpreterSettings extends HTMLElement {\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #valueTypes = new Set<ValueType>();\n\n  set data(data: ValueInterpreterSettingsData) {\n    this.#valueTypes = data.valueTypes;\n    this.#render();\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <style>${valueInterpreterSettingsStyles}</style>\n      <div class=\"settings\" jslog=${VisualLogging.pane('settings')}>\n       ${[...GROUP_TO_TYPES.keys()].map(group => {\n        return html`\n          <div class=\"value-types-selection\">\n            <span class=\"group\">${valueTypeGroupToLocalizedString(group)}</span>\n            ${this.#plotTypeSelections(group)}\n          </div>\n        `;})}\n      </div>\n      `, this.#shadow, {host: this});\n  }\n\n  #plotTypeSelections(group: ValueTypeGroup): Lit.TemplateResult {\n    const types = GROUP_TO_TYPES.get(group);\n    if (!types) {\n      throw new Error(`Unknown group ${group}`);\n    }\n    return html`\n      ${types.map(type => {\n        return html`\n            <devtools-checkbox\n              title=${valueTypeToLocalizedString(type)}\n              ?checked=${this.#valueTypes.has(type)}\n              @change=${(e: Event) => this.#onTypeToggle(type, e)} jslog=${VisualLogging.toggle().track({change: true}).context(Platform.StringUtilities.toKebabCase(type))}\n              >${valueTypeToLocalizedString(type)}</devtools-checkbox>\n     `;})}`;\n  }\n\n  #onTypeToggle(type: ValueType, event: Event): void {\n    const checkbox = event.target as HTMLInputElement;\n    this.dispatchEvent(new TypeToggleEvent(type, checkbox.checked));\n  }\n}\n\ncustomElements.define('devtools-linear-memory-inspector-interpreter-settings', ValueInterpreterSettings);\n\ndeclare global {\n\ninterface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-interpreter-settings': ValueInterpreterSettings;\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2021 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n:host {\n  flex: auto;\n  display: flex;\n  min-height: 20px;\n}\n\n.settings {\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 12px 12px;\n  gap: 15px 45px;\n}\n\n.value-types-selection {\n  display: flex;\n  flex-direction: column;\n}\n\n.group {\n  font-weight: bold;\n  margin-bottom: var(--sys-size-6);\n}\n\n/*# sourceURL=${import.meta.resolve('./valueInterpreterSettings.css')} */`;", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2021 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n:host {\n  flex: auto;\n  display: flex;\n}\n\n.value-interpreter {\n  border: 1px solid var(--sys-color-divider);\n  background-color: var(--sys-color-cdt-base-container);\n  overflow: hidden;\n  width: 400px;\n}\n\n.settings-toolbar {\n  min-height: 26px;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  padding-left: var(--sys-size-3);\n  padding-right: var(--sys-size-3);\n  align-items: center;\n}\n\n.settings-toolbar-button {\n  padding: 0;\n  width: 20px;\n  height: 20px;\n  border: none;\n  outline: none;\n  background-color: transparent;\n}\n\n.settings-toolbar-button.active devtools-icon {\n  color: var(--icon-toggled);\n}\n\n.divider {\n  display: block;\n  height: 1px;\n  margin-bottom: 12px;\n  background-color: var(--sys-color-divider);\n}\n\n/*# sourceURL=${import.meta.resolve('./linearMemoryValueInterpreter.css')} */`;", "// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport * as Lit from '../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport {toHexString} from './LinearMemoryInspectorUtils.js';\nimport linearMemoryViewerStyles from './linearMemoryViewer.css.js';\nimport type {HighlightInfo} from './LinearMemoryViewerUtils.js';\n\nconst {render, html} = Lit;\n\nexport interface LinearMemoryViewerData {\n  memory: Uint8Array<ArrayBuffer>;\n  address: number;\n  memoryOffset: number;\n  focus: boolean;\n  highlightInfo?: HighlightInfo;\n  focusedMemoryHighlight?: HighlightInfo;\n}\n\nexport class ByteSelectedEvent extends Event {\n  static readonly eventName = 'byteselected';\n  data: number;\n\n  constructor(address: number) {\n    super(ByteSelectedEvent.eventName);\n    this.data = address;\n  }\n}\n\nexport class ResizeEvent extends Event {\n  static readonly eventName = 'resize';\n  data: number;\n\n  constructor(numBytesPerPage: number) {\n    super(ResizeEvent.eventName);\n    this.data = numBytesPerPage;\n  }\n}\n\nconst BYTE_GROUP_MARGIN = 8;\nconst BYTE_GROUP_SIZE = 4;\n\nexport class LinearMemoryViewer extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  readonly #resizeObserver = new ResizeObserver(() => this.#resize());\n  #isObservingResize = false;\n\n  #memory = new Uint8Array();\n  #address = 0;\n  #memoryOffset = 0;\n  #highlightInfo?: HighlightInfo;\n  #focusedMemoryHighlight?: HighlightInfo;\n\n  #numRows = 1;\n  #numBytesInRow = BYTE_GROUP_SIZE;\n\n  #focusOnByte = true;\n\n  #lastKeyUpdateSent: number|undefined = undefined;\n\n  set data(data: LinearMemoryViewerData) {\n    if (data.address < data.memoryOffset || data.address > data.memoryOffset + data.memory.length || data.address < 0) {\n      throw new Error('Address is out of bounds.');\n    }\n\n    if (data.memoryOffset < 0) {\n      throw new Error('Memory offset has to be greater or equal to zero.');\n    }\n\n    this.#memory = data.memory;\n    this.#address = data.address;\n    this.#highlightInfo = data.highlightInfo;\n    this.#focusedMemoryHighlight = data.focusedMemoryHighlight;\n    this.#memoryOffset = data.memoryOffset;\n    this.#focusOnByte = data.focus;\n    this.#update();\n  }\n\n  connectedCallback(): void {\n    this.style.setProperty('--byte-group-margin', `${BYTE_GROUP_MARGIN}px`);\n  }\n\n  disconnectedCallback(): void {\n    this.#isObservingResize = false;\n    this.#resizeObserver.disconnect();\n  }\n\n  #update(): void {\n    this.#updateDimensions();\n    this.#render();\n    this.#focusOnView();\n    this.#engageResizeObserver();\n  }\n\n  #focusOnView(): void {\n    if (this.#focusOnByte) {\n      const view = this.#shadow.querySelector<HTMLDivElement>('.view');\n      if (view) {\n        view.focus();\n      }\n    }\n  }\n\n  #resize(): void {\n    this.#update();\n    this.dispatchEvent(new ResizeEvent(this.#numBytesInRow * this.#numRows));\n  }\n\n  /** Recomputes the number of rows and (byte) columns that fit into the current view. */\n  #updateDimensions(): void {\n    if (this.clientWidth === 0 || this.clientHeight === 0 || !this.shadowRoot) {\n      this.#numBytesInRow = BYTE_GROUP_SIZE;\n      this.#numRows = 1;\n      return;\n    }\n\n    // We initially just plot one row with one byte group (here: byte group size of 4).\n    // Depending on that initially plotted row we can determine how many rows and\n    // bytes per row we can fit.\n    // >    0000000 | b0 b1 b2 b4 | a0 a1 a2 a3    <\n    //      ^-------^ ^-^           ^-^\n    //          |     byteCellWidth textCellWidth\n    //          |\n    //     addressTextAndDividerWidth\n    //  ^--^   +     ^----------------------------^\n    //      widthToFill\n\n    const firstByteCell = this.shadowRoot.querySelector('.byte-cell');\n    const textCell = this.shadowRoot.querySelector('.text-cell');\n    const divider = this.shadowRoot.querySelector('.divider');\n    const rowElement = this.shadowRoot.querySelector('.row');\n    const addressText = this.shadowRoot.querySelector('.address');\n\n    if (!firstByteCell || !textCell || !divider || !rowElement || !addressText) {\n      this.#numBytesInRow = BYTE_GROUP_SIZE;\n      this.#numRows = 1;\n      return;\n    }\n\n    // Calculate the width required for each (unsplittable) group of bytes.\n    const byteCellWidth = firstByteCell.getBoundingClientRect().width;\n    const textCellWidth = textCell.getBoundingClientRect().width;\n    const groupWidth = BYTE_GROUP_SIZE * (byteCellWidth + textCellWidth) + BYTE_GROUP_MARGIN;\n\n    // Calculate the width to fill.\n    const dividerWidth = divider.getBoundingClientRect().width;\n    const addressTextAndDividerWidth =\n        firstByteCell.getBoundingClientRect().left - addressText.getBoundingClientRect().left;\n\n    // this.clientWidth is rounded, while the other values are not. Subtract 1 to make\n    // sure that we correctly calculate the widths.\n    const widthToFill = this.clientWidth - 1 - addressTextAndDividerWidth - dividerWidth;\n\n    if (widthToFill < groupWidth) {\n      this.#numBytesInRow = BYTE_GROUP_SIZE;\n      this.#numRows = 1;\n      return;\n    }\n    this.#numBytesInRow = Math.floor(widthToFill / groupWidth) * BYTE_GROUP_SIZE;\n    this.#numRows = Math.floor(this.clientHeight / rowElement.clientHeight);\n  }\n\n  #engageResizeObserver(): void {\n    if (!this.#resizeObserver || this.#isObservingResize) {\n      return;\n    }\n\n    this.#resizeObserver.observe(this);\n    this.#isObservingResize = true;\n  }\n\n  #render(): void {\n    const jslog = VisualLogging.section()\n                      .track({keydown: 'ArrowUp|ArrowDown|ArrowLeft|ArrowRight|PageUp|PageDown'})\n                      .context('linear-memory-inspector.viewer');\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <style>${linearMemoryViewerStyles}</style>\n      <div class=\"view\" tabindex=\"0\" @keydown=${this.#onKeyDown} jslog=${jslog}>\n        ${this.#renderView()}\n      </div>\n      `, this.#shadow, {host: this});\n  }\n\n  #onKeyDown(event: Event): void {\n    const keyboardEvent = event as KeyboardEvent;\n    let newAddress = undefined;\n    if (keyboardEvent.code === 'ArrowUp') {\n      newAddress = this.#address - this.#numBytesInRow;\n    } else if (keyboardEvent.code === 'ArrowDown') {\n      newAddress = this.#address + this.#numBytesInRow;\n    } else if (keyboardEvent.code === 'ArrowLeft') {\n      newAddress = this.#address - 1;\n    } else if (keyboardEvent.code === 'ArrowRight') {\n      newAddress = this.#address + 1;\n    } else if (keyboardEvent.code === 'PageUp') {\n      newAddress = this.#address - this.#numBytesInRow * this.#numRows;\n    } else if (keyboardEvent.code === 'PageDown') {\n      newAddress = this.#address + this.#numBytesInRow * this.#numRows;\n    }\n\n    if (newAddress !== undefined && newAddress !== this.#lastKeyUpdateSent) {\n      this.#lastKeyUpdateSent = newAddress;\n      this.dispatchEvent(new ByteSelectedEvent(newAddress));\n    }\n  }\n\n  #renderView(): Lit.TemplateResult {\n    const itemTemplates = [];\n    for (let i = 0; i < this.#numRows; ++i) {\n      itemTemplates.push(this.#renderRow(i));\n    }\n    return html`${itemTemplates}`;\n  }\n\n  #renderRow(row: number): Lit.TemplateResult {\n    const {startIndex, endIndex} = {startIndex: row * this.#numBytesInRow, endIndex: (row + 1) * this.#numBytesInRow};\n\n    const classMap = {\n      address: true,\n      selected: Math.floor((this.#address - this.#memoryOffset) / this.#numBytesInRow) === row,\n    };\n    return html`\n    <div class=\"row\">\n      <span class=${Lit.Directives.classMap(classMap)}>${toHexString({number: startIndex + this.#memoryOffset, pad: 8, prefix: false})}</span>\n      <span class=\"divider\"></span>\n      ${this.#renderByteValues(startIndex, endIndex)}\n      <span class=\"divider\"></span>\n      ${this.#renderCharacterValues(startIndex, endIndex)}\n    </div>\n    `;\n  }\n\n  #renderByteValues(startIndex: number, endIndex: number): Lit.TemplateResult {\n    const cells = [];\n    for (let i = startIndex; i < endIndex; ++i) {\n      const actualIndex = i + this.#memoryOffset;\n      // Add margin after each group of bytes of size byteGroupSize.\n      const addMargin = i !== startIndex && (i - startIndex) % BYTE_GROUP_SIZE === 0;\n      const selected = i === this.#address - this.#memoryOffset;\n      const shouldBeHighlighted = this.#shouldBeHighlighted(actualIndex);\n      const focusedMemoryArea = this.#isFocusedArea(actualIndex);\n      const classMap = {\n        cell: true,\n        'byte-cell': true,\n        'byte-group-margin': addMargin,\n        selected,\n        'highlight-area': shouldBeHighlighted,\n        'focused-area': focusedMemoryArea,\n      };\n      const isSelectableCell = i < this.#memory.length;\n      const byteValue = isSelectableCell ? html`${toHexString({number: this.#memory[i], pad: 2, prefix: false})}` : '';\n      const onSelectedByte = isSelectableCell ? this.#onSelectedByte.bind(this, actualIndex) : '';\n      const jslog = VisualLogging.tableCell('linear-memory-inspector.byte-cell').track({click: true});\n      cells.push(html`<span class=${Lit.Directives.classMap(classMap)} @click=${onSelectedByte} jslog=${jslog}>${byteValue}</span>`);\n    }\n    return html`${cells}`;\n  }\n\n  #renderCharacterValues(startIndex: number, endIndex: number): Lit.TemplateResult {\n    const cells = [];\n    for (let i = startIndex; i < endIndex; ++i) {\n      const actualIndex = i + this.#memoryOffset;\n      const shouldBeHighlighted = this.#shouldBeHighlighted(actualIndex);\n      const focusedMemoryArea = this.#isFocusedArea(actualIndex);\n      const classMap = {\n        cell: true,\n        'text-cell': true,\n        selected: this.#address - this.#memoryOffset === i,\n        'highlight-area': shouldBeHighlighted,\n        'focused-area': focusedMemoryArea,\n      };\n      const isSelectableCell = i < this.#memory.length;\n      const value = isSelectableCell ? html`${this.#toAscii(this.#memory[i])}` : '';\n      const onSelectedByte = isSelectableCell ? this.#onSelectedByte.bind(this, i + this.#memoryOffset) : '';\n      const jslog = VisualLogging.tableCell('linear-memory-inspector.text-cell').track({click: true});\n      cells.push(html`<span class=${Lit.Directives.classMap(classMap)} @click=${onSelectedByte} jslog=${jslog}>${value}</span>`);\n    }\n    return html`${cells}`;\n  }\n\n  #toAscii(byte: number): string {\n    if (byte >= 20 && byte <= 0x7F) {\n      return String.fromCharCode(byte);\n    }\n    return '.';\n  }\n\n  #onSelectedByte(index: number): void {\n    this.dispatchEvent(new ByteSelectedEvent(index));\n  }\n\n  #shouldBeHighlighted(index: number): boolean {\n    if (this.#highlightInfo === undefined) {\n      return false;\n    }\n    return this.#highlightInfo.startAddress <= index\n    && index < this.#highlightInfo.startAddress + this.#highlightInfo.size;\n  }\n\n  #isFocusedArea(index: number): boolean {\n    if (!this.#focusedMemoryHighlight) {\n      return false;\n    }\n    return this.#focusedMemoryHighlight.startAddress <= index\n    && index < this.#focusedMemoryHighlight.startAddress + this.#focusedMemoryHighlight.size;\n  }\n}\n\ncustomElements.define('devtools-linear-memory-inspector-viewer', LinearMemoryViewer);\n\ndeclare global {\n\ninterface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-viewer': LinearMemoryViewer;\n  }\n}\n", "// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport const HEXADECIMAL_REGEXP = /^0x[a-fA-F0-9]+$/;\nexport const DECIMAL_REGEXP = /^0$|[1-9]\\d*$/;\n\nexport function toHexString(data: {number: number, pad: number, prefix: boolean}): string {\n  const hex = data.number.toString(16).padStart(data.pad, '0');\n  const upperHex = hex.toUpperCase();\n  return data.prefix ? '0x' + upperHex : upperHex;\n}\n\nexport function formatAddress(address: number): string {\n  return toHexString({number: address, pad: 8, prefix: true});\n}\n\nexport function parseAddress(address: string): number|undefined {\n  const hexMatch = address.match(HEXADECIMAL_REGEXP);\n  const decMatch = address.match(DECIMAL_REGEXP);\n\n  let newAddress = undefined;\n  if (hexMatch && hexMatch[0].length === address.length) {\n    newAddress = parseInt(address, 16);\n  } else if (decMatch && decMatch[0].length === address.length) {\n    newAddress = parseInt(address, 10);\n  }\n  return newAddress;\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2021 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n:host {\n  flex: auto;\n  display: flex;\n  min-height: 20px;\n}\n\n.view {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  box-sizing: border-box;\n  background: var(--sys-color-cdt-base-container);\n  outline: none;\n}\n\n.row {\n  display: flex;\n  height: 20px;\n  align-items: center;\n}\n\n.cell {\n  text-align: center;\n  border: 1px solid transparent;\n  border-radius: 2px;\n\n  &.focused-area {\n    background-color: var(--sys-color-tonal-container);\n    color: var(--sys-color-on-tonal-container);\n  }\n\n  &.selected {\n    border-color: var(--sys-color-state-focus-ring);\n    color: var(--sys-color-on-tonal-container);\n    background-color: var(--sys-color-state-focus-select);\n  }\n}\n\n.byte-cell {\n  min-width: 21px;\n  color: var(--sys-color-on-surface);\n}\n\n.byte-group-margin {\n  margin-left: var(--byte-group-margin);\n}\n\n.text-cell {\n  min-width: 14px;\n  color: var(--sys-color-on-surface-subtle);\n}\n\n.address {\n  color: var(--sys-color-state-disabled);\n}\n\n.address.selected {\n  font-weight: bold;\n  color: var(--sys-color-on-surface);\n}\n\n.divider {\n  width: 1px;\n  height: inherit;\n  background-color: var(--sys-color-divider);\n  margin: 0 4px;\n}\n\n.highlight-area {\n  background-color: var(--sys-color-surface-variant);\n}\n\n/*# sourceURL=${import.meta.resolve('./linearMemoryViewer.css')} */`;", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2021 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n:host {\n  flex: auto;\n  display: flex;\n}\n\n.view {\n  width: 100%;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  font-family: var(--monospace-font-family);\n  font-size: var(--monospace-font-size);\n  padding: 9px 12px 9px 7px;\n}\n\ndevtools-linear-memory-inspector-viewer {\n  justify-content: center;\n}\n\ndevtools-linear-memory-inspector-navigator + devtools-linear-memory-inspector-viewer {\n  margin-top: 12px;\n}\n\n.value-interpreter {\n  display: flex;\n}\n\n/*# sourceURL=${import.meta.resolve('./linearMemoryInspector.css')} */`;", "// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport '../../../ui/components/icon_button/icon_button.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as Lit from '../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport linearMemoryNavigatorStyles from './linearMemoryNavigator.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Tooltip text that appears when hovering over a valid memory address (e.g. 0x0) in the address line in the Linear memory inspector.\n   */\n  enterAddress: 'Enter address',\n  /**\n   * @description Tooltip text that appears when hovering over the button to go back in history in the Linear Memory Navigator\n   */\n  goBackInAddressHistory: 'Go back in address history',\n  /**\n   * @description Tooltip text that appears when hovering over the button to go forward in history in the Linear Memory Navigator\n   */\n  goForwardInAddressHistory: 'Go forward in address history',\n  /**\n   * @description Tooltip text that appears when hovering over the page back icon in the Linear Memory Navigator\n   */\n  previousPage: 'Previous page',\n  /**\n   * @description Tooltip text that appears when hovering over the next page icon in the Linear Memory Navigator\n   */\n  nextPage: 'Next page',\n  /**\n   * @description Text to refresh the page\n   */\n  refresh: 'Refresh',\n} as const;\nconst str_ =\n    i18n.i18n.registerUIStrings('panels/linear_memory_inspector/components/LinearMemoryNavigator.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst {render, html, Directives: {ifDefined}} = Lit;\n\nexport const enum Navigation {\n  BACKWARD = 'Backward',\n  FORWARD = 'Forward',\n}\n\nexport class AddressInputChangedEvent extends Event {\n  static readonly eventName = 'addressinputchanged';\n  data: {address: string, mode: Mode};\n\n  constructor(address: string, mode: Mode) {\n    super(AddressInputChangedEvent.eventName);\n    this.data = {address, mode};\n  }\n}\n\nexport class PageNavigationEvent extends Event {\n  static readonly eventName = 'pagenavigation';\n  data: Navigation;\n\n  constructor(navigation: Navigation) {\n    super(PageNavigationEvent.eventName, {});\n    this.data = navigation;\n  }\n}\n\nexport class HistoryNavigationEvent extends Event {\n  static readonly eventName = 'historynavigation';\n  data: Navigation;\n\n  constructor(navigation: Navigation) {\n    super(HistoryNavigationEvent.eventName, {});\n    this.data = navigation;\n  }\n}\n\nexport class RefreshRequestedEvent extends Event {\n  static readonly eventName = 'refreshrequested';\n  constructor() {\n    super(RefreshRequestedEvent.eventName, {});\n  }\n}\n\nexport interface LinearMemoryNavigatorData {\n  address: string;\n  mode: Mode;\n  canGoBackInHistory: boolean;\n  canGoForwardInHistory: boolean;\n  valid: boolean;\n  error: string|undefined;\n}\n\nexport const enum Mode {\n  EDIT = 'Edit',\n  SUBMITTED = 'Submitted',\n  INVALID_SUBMIT = 'InvalidSubmit',\n}\n\nexport class LinearMemoryNavigator extends HTMLElement {\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #address = '0';\n  #error: string|undefined = undefined;\n  #valid = true;\n  #canGoBackInHistory = false;\n  #canGoForwardInHistory = false;\n\n  set data(data: LinearMemoryNavigatorData) {\n    this.#address = data.address;\n    this.#error = data.error;\n    this.#valid = data.valid;\n    this.#canGoBackInHistory = data.canGoBackInHistory;\n    this.#canGoForwardInHistory = data.canGoForwardInHistory;\n    this.#render();\n\n    const addressInput = this.#shadow.querySelector<HTMLInputElement>('.address-input');\n    if (addressInput) {\n      if (data.mode === Mode.SUBMITTED) {\n        addressInput.blur();\n      } else if (data.mode === Mode.INVALID_SUBMIT) {\n        addressInput.select();\n      }\n    }\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    const result = html`\n      <style>${linearMemoryNavigatorStyles}</style>\n      <div class=\"navigator\">\n        <div class=\"navigator-item\">\n          ${this.#createButton({icon: 'undo', title: i18nString(UIStrings.goBackInAddressHistory),\n              event: new HistoryNavigationEvent(Navigation.BACKWARD), enabled: this.#canGoBackInHistory,\n              jslogContext:'linear-memory-inspector.history-back'})}\n          ${this.#createButton({icon: 'redo', title: i18nString(UIStrings.goForwardInAddressHistory),\n              event: new HistoryNavigationEvent(Navigation.FORWARD), enabled: this.#canGoForwardInHistory,\n              jslogContext:'linear-memory-inspector.history-forward'})}\n        </div>\n        <div class=\"navigator-item\">\n          ${this.#createButton({icon: 'chevron-left', title: i18nString(UIStrings.previousPage),\n              event: new PageNavigationEvent(Navigation.BACKWARD), enabled: true,\n              jslogContext:'linear-memory-inspector.previous-page'})}\n          ${this.#createAddressInput()}\n          ${this.#createButton({icon: 'chevron-right', title: i18nString(UIStrings.nextPage),\n              event: new PageNavigationEvent(Navigation.FORWARD), enabled: true,\n              jslogContext:'linear-memory-inspector.next-page'})}\n        </div>\n        ${this.#createButton({icon: 'refresh', title: i18nString(UIStrings.refresh),\n            event: new RefreshRequestedEvent(), enabled: true,\n            jslogContext:'linear-memory-inspector.refresh'})}\n      </div>\n      `;\n      render(result, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  #createAddressInput(): Lit.TemplateResult {\n    const classMap = {\n      'address-input': true,\n      invalid: !this.#valid,\n    };\n    return html`\n      <input class=${Lit.Directives.classMap(classMap)} data-input=\"true\" .value=${this.#address}\n        jslog=${VisualLogging.textField('linear-memory-inspector.address').track({\n      change: true,\n    })}\n        title=${ifDefined(this.#valid ? i18nString(UIStrings.enterAddress) : this.#error)} @change=${\n        this.#onAddressChange.bind(this, Mode.SUBMITTED)} @input=${this.#onAddressChange.bind(this, Mode.EDIT)}/>`;\n  }\n\n  #onAddressChange(mode: Mode, event: Event): void {\n    const addressInput = event.target as HTMLInputElement;\n    this.dispatchEvent(new AddressInputChangedEvent(addressInput.value, mode));\n  }\n\n  #createButton(data: {icon: string, title: string, event: Event, enabled: boolean, jslogContext: string}):\n      Lit.TemplateResult {\n    return html`\n      <devtools-button class=\"navigator-button\"\n        .data=${\n        {variant: Buttons.Button.Variant.ICON, iconName: data.icon, disabled: !data.enabled} as\n        Buttons.Button.ButtonData}\n        jslog=${VisualLogging.action().track({click: true, keydown: 'Enter'}).context(data.jslogContext)}\n        data-button=${data.event.type} title=${data.title}\n        @click=${this.dispatchEvent.bind(this, data.event)}\n      ></devtools-button>`;\n  }\n}\n\ncustomElements.define('devtools-linear-memory-inspector-navigator', LinearMemoryNavigator);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-navigator': LinearMemoryNavigator;\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2021 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.navigator {\n  min-height: 24px;\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  overflow: hidden;\n  align-items: center;\n  background-color: var(--sys-color-cdt-base-container);\n  color: var(--sys-color-on-surface);\n}\n\n.navigator-item {\n  display: flex;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.address-input {\n  height: var(--sys-size-11);\n  padding: 0 var(--sys-size-5);\n  margin: 0 var(--sys-size-3);\n  text-align: center;\n  align-items: center;\n  outline: none;\n  color: var(--sys-color-on-surface);\n  border: var(--sys-size-1) solid var(--sys-color-neutral-outline);\n  border-radius: var(--sys-shape-corner-extra-small);\n  background: transparent;\n}\n\n.address-input.invalid {\n  color: var(--sys-color-error);\n}\n\n.navigator-button {\n  display: flex;\n  background: transparent;\n  overflow: hidden;\n  border: none;\n  padding: 0;\n  outline: none;\n  justify-content: center;\n  align-items: center;\n}\n\n.navigator-button:disabled devtools-icon {\n  opacity: 50%;\n}\n\n.navigator-button:enabled:hover devtools-icon {\n  color: var(--icon-default-hover);\n}\n\n.navigator-button:enabled:focus devtools-icon {\n  color: var(--icon-default-hover);\n}\n\n/*# sourceURL=${import.meta.resolve('./linearMemoryNavigator.css')} */`;", "// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport interface HighlightInfo {\n  startAddress: number;\n  size: number;\n  // If the inspector is opened from a different UI location\n  // than the scope view, we don't have guaranteed access to the name.\n  name?: string;\n  type: string;\n}\n"],
  "mappings": "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",
  "names": ["i18n", "Lit", "VisualLogging", "i18n", "UIStrings", "str_", "i18nString", "UIStrings", "str_", "i18nString", "render", "html", "Lit", "i18n", "Platform", "Lit", "VisualLogging", "render", "html", "Lit", "UIStrings", "str_", "i18nString", "i18n", "Platform", "UI", "Lit", "VisualLogging", "UIStrings", "str_", "i18nString", "render", "html", "Lit", "Lit", "VisualLogging", "render", "html", "Lit", "i18n", "html", "render", "UIStrings", "str_", "i18nString", "render", "html", "i18n", "Buttons", "Lit", "VisualLogging", "UIStrings", "str_", "i18nString", "render", "html", "Lit"]
}
