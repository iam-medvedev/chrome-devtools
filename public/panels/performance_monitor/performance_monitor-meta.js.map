{
  "version": 3,
  "sources": ["performance_monitor-meta.prebundle.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as PerformanceMonitor from './performance_monitor.js';\n\nconst UIStrings = {\n  /**\n   * @description Title of the 'Performance monitor' tool in the bottom drawer\n   */\n  performanceMonitor: 'Performance monitor',\n  /**\n   * @description A tag of Performance Monitor that can be searched in the command menu\n   */\n  performance: 'performance',\n  /**\n   * @description A tag of Performance Monitor that can be searched in the command menu\n   */\n  systemMonitor: 'system monitor',\n  /**\n   * @description A tag of Performance Monitor that can be searched in the command menu\n   */\n  monitor: 'monitor',\n  /**\n   * @description A tag of Performance Monitor that can be searched in the command menu\n   */\n  activity: 'activity',\n  /**\n   * @description A tag of Performance Monitor that can be searched in the command menu\n   */\n  metrics: 'metrics',\n  /**\n   * @description Command for showing the 'Performance monitor' tool in the bottom drawer\n   */\n  showPerformanceMonitor: 'Show Performance monitor',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/performance_monitor/performance_monitor-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet loadedPerformanceMonitorModule: (typeof PerformanceMonitor|undefined);\n\nasync function loadPerformanceMonitorModule(): Promise<typeof PerformanceMonitor> {\n  if (!loadedPerformanceMonitorModule) {\n    loadedPerformanceMonitorModule = await import('./performance_monitor.js');\n  }\n  return loadedPerformanceMonitorModule;\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.DRAWER_VIEW,\n  id: 'performance.monitor',\n  title: i18nLazyString(UIStrings.performanceMonitor),\n  commandPrompt: i18nLazyString(UIStrings.showPerformanceMonitor),\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  order: 100,\n  async loadView() {\n    const PerformanceMonitor = await loadPerformanceMonitorModule();\n    return new PerformanceMonitor.PerformanceMonitor.PerformanceMonitorImpl();\n  },\n  tags: [\n    i18nLazyString(UIStrings.performance),\n    i18nLazyString(UIStrings.systemMonitor),\n    i18nLazyString(UIStrings.monitor),\n    i18nLazyString(UIStrings.activity),\n    i18nLazyString(UIStrings.metrics),\n  ],\n});\n"],
  "mappings": ";AAIA,YAAY,UAAU;AACtB,YAAY,QAAQ;AAIpB,IAAM,YAAY;;;;EAIhB,oBAAoB;;;;EAIpB,aAAa;;;;EAIb,eAAe;;;;EAIf,SAAS;;;;EAIT,UAAU;;;;EAIV,SAAS;;;;EAIT,wBAAwB;;AAG1B,IAAM,OAAY,UAAK,kBAAkB,0DAA0D,SAAS;AAC5G,IAAM,iBAAsB,UAAK,iCAAiC,KAAK,QAAW,IAAI;AAEtF,IAAI;AAEJ,eAAe,+BAA4B;AACzC,MAAI,CAAC,gCAAgC;AACnC,qCAAiC,MAAM,OAAO,0BAA0B;EAC1E;AACA,SAAO;AACT;AAEG,eAAY,sBAAsB;EACnC,UAAQ;EACR,IAAI;EACJ,OAAO,eAAe,UAAU,kBAAkB;EAClD,eAAe,eAAe,UAAU,sBAAsB;EAC9D,aAAW;EACX,OAAO;EACP,MAAM,WAAQ;AACZ,UAAM,qBAAqB,MAAM,6BAA4B;AAC7D,WAAO,IAAI,mBAAmB,mBAAmB,uBAAsB;EACzE;EACA,MAAM;IACJ,eAAe,UAAU,WAAW;IACpC,eAAe,UAAU,aAAa;IACtC,eAAe,UAAU,OAAO;IAChC,eAAe,UAAU,QAAQ;IACjC,eAAe,UAAU,OAAO;;CAEnC;",
  "names": []
}
