{"version":3,"file":"PerformanceMonitor.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/performance_monitor/PerformanceMonitor.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {renderElementIntoDOM} from '../../testing/DOMHelpers.js';\nimport {createTarget, stubNoopSettings} from '../../testing/EnvironmentHelpers.js';\nimport {expectCall} from '../../testing/ExpectStubCall.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {createViewFunctionStub} from '../../testing/ViewFunctionHelpers.js';\n\nimport * as PerformanceMonitor from './performance_monitor.js';\n\ndescribeWithMockConnection('PerformanceMonitor', () => {\n  let target: SDK.Target.Target;\n  let performanceMonitor: PerformanceMonitor.PerformanceMonitor.PerformanceMonitorImpl;\n\n  beforeEach(() => {\n    const tabTarget = createTarget({type: SDK.Target.Type.TAB});\n    createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n    target = createTarget({parentTarget: tabTarget});\n  });\n  afterEach(() => {\n    performanceMonitor.detach();\n  });\n\n  it('updates metrics', async () => {\n    const getMetrics = sinon.stub(target.performanceAgent(), 'invoke_getMetrics');\n    const view = createViewFunctionStub(PerformanceMonitor.PerformanceMonitor.PerformanceMonitorImpl);\n    performanceMonitor = new PerformanceMonitor.PerformanceMonitor.PerformanceMonitorImpl(0, view);\n    renderElementIntoDOM(performanceMonitor);\n\n    assert.isUndefined((await view.nextInput).metrics);\n    await expectCall(getMetrics, {fakeFn: () => Promise.resolve({metrics: [{name: 'LayoutCount', value: 42}]})});\n    await expectCall(getMetrics, {fakeFn: () => Promise.resolve({metrics: [{name: 'LayoutCount', value: 84}]})});\n    assert.isNotEmpty((await view.nextInput).metrics);\n  });\n\n  it('starts polling when shown and stops when hidden', async () => {\n    const getMetrics = sinon.stub(target.performanceAgent(), 'invoke_getMetrics');\n    const view = createViewFunctionStub(PerformanceMonitor.PerformanceMonitor.PerformanceMonitorImpl);\n    performanceMonitor = new PerformanceMonitor.PerformanceMonitor.PerformanceMonitorImpl(10, view);\n    const model = target.model(SDK.PerformanceMetricsModel.PerformanceMetricsModel);\n    assert.exists(model);\n    const modelEnableSpy = sinon.spy(model, 'enable');\n    const modelDisableSpy = sinon.spy(model, 'disable');\n\n    performanceMonitor.markAsRoot();\n    renderElementIntoDOM(performanceMonitor);\n\n    // Starts polling when shown.\n    await expectCall(getMetrics, {fakeFn: () => Promise.resolve({metrics: [], getError: () => undefined})});\n    sinon.assert.calledOnce(modelEnableSpy);\n\n    performanceMonitor.detach();\n\n    // Stops polling when hidden.\n    getMetrics.resetHistory();\n    await new Promise(resolve => setTimeout(resolve, 20));\n    sinon.assert.notCalled(getMetrics);\n    sinon.assert.calledOnce(modelDisableSpy);\n\n    renderElementIntoDOM(performanceMonitor);\n\n    // Resumes polling when shown again.\n    await expectCall(getMetrics, {fakeFn: () => Promise.resolve({metrics: [], getError: () => undefined})});\n    sinon.assert.calledTwice(modelEnableSpy);\n  });\n\n  it('updates chart visibility and height', async () => {\n    const view = createViewFunctionStub(PerformanceMonitor.PerformanceMonitor.PerformanceMonitorImpl);\n    performanceMonitor = new PerformanceMonitor.PerformanceMonitor.PerformanceMonitorImpl(0, view);\n    renderElementIntoDOM(performanceMonitor);\n\n    const {onMetricChanged, chartsInfo, height: initialHeight} = await view.nextInput;\n    // From recalcChartHeight(): height = this.scaleHeight when no active charts.\n    // scaleHeight is 16.\n    assert.strictEqual(initialHeight, Math.ceil(16 * window.devicePixelRatio));\n\n    const chartToActivate = chartsInfo[0].metrics[0].name;\n    onMetricChanged(chartToActivate, true);\n\n    const {height: heightAfterActivation} = await view.nextInput;\n    // graphHeight is 90.\n    assert.strictEqual(heightAfterActivation, Math.ceil((16 + 90) * window.devicePixelRatio));\n\n    onMetricChanged(chartToActivate, false);\n    const {height: heightAfterDeactivation} = await view.nextInput;\n    assert.strictEqual(heightAfterDeactivation, initialHeight);\n  });\n});\n\ndescribe('ControlPane', () => {\n  const chartsInfo: PerformanceMonitor.PerformanceMonitor.ChartInfo[] = [\n    {\n      title: 'Chart1' as unknown as Common.UIString.LocalizedString,\n      metrics: [{name: 'Metric1', color: 'red'}],\n    },\n    {\n      title: 'Chart2' as unknown as Common.UIString.LocalizedString,\n      metrics: [{name: 'Metric2', color: 'blue'}],\n    },\n  ];\n\n  beforeEach(() => {\n    stubNoopSettings();\n  });\n\n  it('renders indicators', async () => {\n    const view = createViewFunctionStub(PerformanceMonitor.PerformanceMonitor.ControlPane);\n    const controlPane = new PerformanceMonitor.PerformanceMonitor.ControlPane(document.createElement('div'), view);\n    renderElementIntoDOM(controlPane);\n    controlPane.chartsInfo = chartsInfo;\n    const {chartsInfo: renderedChartsInfo} = await view.nextInput;\n    assert.deepEqual(renderedChartsInfo.map(c => c.title), ['Chart1', 'Chart2']);\n  });\n\n  it('toggles charts', async () => {\n    const view = createViewFunctionStub(PerformanceMonitor.PerformanceMonitor.ControlPane);\n    const controlPane = new PerformanceMonitor.PerformanceMonitor.ControlPane(document.createElement('div'), view);\n    renderElementIntoDOM(controlPane);\n\n    const onMetricChanged = sinon.spy();\n    controlPane.onMetricChanged = onMetricChanged;\n\n    controlPane.chartsInfo = chartsInfo;\n    const {onCheckboxChange} = await view.nextInput;\n\n    const event = {target: {checked: true}} as unknown as Event;\n    onCheckboxChange('Metric1', event);\n\n    assert.isTrue(onMetricChanged.calledOnceWith('Metric1', true));\n\n    const event2 = {target: {checked: false}} as unknown as Event;\n    onCheckboxChange('Metric1', event2);\n    sinon.assert.calledTwice(onMetricChanged);\n    sinon.assert.calledWith(onMetricChanged.secondCall, 'Metric1', false);\n  });\n\n  it('updates metric values', async () => {\n    const view = createViewFunctionStub(PerformanceMonitor.PerformanceMonitor.ControlPane);\n    const controlPane = new PerformanceMonitor.PerformanceMonitor.ControlPane(document.createElement('div'), view);\n    renderElementIntoDOM(controlPane);\n    controlPane.chartsInfo = chartsInfo;\n    await view.nextInput;\n\n    controlPane.metrics = new Map([['Metric1', 42]]);\n    const {metricValues} = await view.nextInput;\n    assert.strictEqual(metricValues.get('Metric1'), 42);\n  });\n});\n"]}