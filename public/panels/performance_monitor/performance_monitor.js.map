{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/performance_monitor/PerformanceMonitor.ts", "performanceMonitor.css.js"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\nimport {Directives, html, render, type TemplateResult} from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport performanceMonitorStyles from './performanceMonitor.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Aria accessible name in Performance Monitor of the Performance monitor tab\n   */\n  graphsDisplayingARealtimeViewOf: 'Graphs displaying a real-time view of performance metrics',\n  /**\n   * @description Text in Performance Monitor of the Performance monitor tab\n   */\n  paused: 'Paused',\n  /**\n   * @description Text in Performance Monitor of the Performance monitor tab\n   */\n  cpuUsage: 'CPU usage',\n  /**\n   * @description Text in Performance Monitor of the Performance monitor tab\n   */\n  jsHeapSize: 'JS heap size',\n  /**\n   * @description Text in Performance Monitor of the Performance monitor tab\n   */\n  domNodes: 'DOM Nodes',\n  /**\n   * @description Text in Performance Monitor of the Performance monitor tab\n   */\n  jsEventListeners: 'JS event listeners',\n  /**\n   * @description Text for documents, a type of resources\n   */\n  documents: 'Documents',\n  /**\n   * @description Text in Performance Monitor of the Performance monitor tab\n   */\n  documentFrames: 'Document Frames',\n  /**\n   * @description Text in Performance Monitor of the Performance monitor tab\n   */\n  layoutsSec: 'Layouts / sec',\n  /**\n   * @description Text in Performance Monitor of the Performance monitor tab\n   */\n  styleRecalcsSec: 'Style recalcs / sec',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/performance_monitor/PerformanceMonitor.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst {widgetConfig} = UI.Widget;\nconst {classMap, ref} = Directives;\n\ninterface PerformanceMonitorInput {\n  onMetricChanged: (metricName: string, active: boolean) => void;\n  chartsInfo: ChartInfo[];\n  metrics?: Map<string, number>;\n  width: number;\n  height: number;\n  suspended: boolean;\n}\n\ninterface PerformanceMonitorOutput {\n  graphRenderingContext: CanvasRenderingContext2D|null;\n  width: number;\n}\n\ntype PerformanceMonitorView = (input: PerformanceMonitorInput, output: PerformanceMonitorOutput, target: HTMLElement) =>\n    void;\n\nconst DEFAULT_VIEW: PerformanceMonitorView = (input, output, target) => {\n  // clang-format off\n  render(html`\n    <devtools-widget .widgetConfig=${widgetConfig(ControlPane, {\n      onMetricChanged: input.onMetricChanged,\n      chartsInfo: input.chartsInfo,\n      metrics: input.metrics\n    })} class=${classMap({suspended: input.suspended})}></devtools-widget>\n    <div class=\"perfmon-chart-container ${classMap({suspended: input.suspended})}\">\n      <canvas tabindex=\"-1\" aria-label=${i18nString(UIStrings.graphsDisplayingARealtimeViewOf)}\n          .width=${Math.round(input.width * window.devicePixelRatio)} .height=${input.height}\n          style=\"height:${input.height / window.devicePixelRatio}px\" ${ref(e => {\n            if (e) {\n              const canvas = e as HTMLCanvasElement;\n              output.graphRenderingContext = canvas.getContext('2d');\n              output.width = canvas.offsetWidth;\n            }\n      })}>\n      </canvas>\n    </div>\n    ${input.suspended ? html`\n      <div class=\"perfmon-chart-suspend-overlay fill\">\n        <div>${i18nString(UIStrings.paused)}</div>\n      </div>` : ''}`,\n    target);\n  // clang-format on\n};\n\nexport class PerformanceMonitorImpl extends UI.Widget.HBox implements\n    SDK.TargetManager.SDKModelObserver<SDK.PerformanceMetricsModel.PerformanceMetricsModel> {\n  private view: PerformanceMonitorView;\n  private chartInfos: ChartInfo[] = [];\n  private activeCharts = new Set<string>();\n  private metricsBuffer: Array<{timestamp: number, metrics: Map<string, number>}>;\n  private readonly pixelsPerMs: number;\n  private pollIntervalMs: number;\n  private readonly scaleHeight: number;\n  private graphHeight: number;\n  private gridColor: string;\n  private animationId!: number;\n  private width!: number;\n  private height!: number;\n  private model?: SDK.PerformanceMetricsModel.PerformanceMetricsModel|null;\n  private pollTimer?: number;\n  private metrics?: Map<string, number>;\n  private suspended = false;\n  private graphRenderingContext: CanvasRenderingContext2D|null = null;\n\n  constructor(pollIntervalMs = 500, view = DEFAULT_VIEW) {\n    super({\n      jslog: `${VisualLogging.panel('performance.monitor').track({resize: true})}`,\n      useShadowDom: true,\n    });\n    this.view = view;\n    this.registerRequiredCSS(performanceMonitorStyles);\n\n    this.metricsBuffer = [];\n    /** @constant */\n    this.pixelsPerMs = 10 / 1000;\n    /** @constant */\n    this.pollIntervalMs = pollIntervalMs;\n    /** @constant */\n    this.scaleHeight = 16;\n    /** @constant */\n    this.graphHeight = 90;\n    this.gridColor = ThemeSupport.ThemeSupport.instance().getComputedValue('--divider-line');\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.PerformanceMetricsModel.PerformanceMetricsModel, this);\n  }\n\n  private onMetricStateChanged(metricName: string, active: boolean): void {\n    if (active) {\n      this.activeCharts.add(metricName);\n    } else {\n      this.activeCharts.delete(metricName);\n    }\n    this.recalcChartHeight();\n  }\n\n  override wasShown(): void {\n    if (!this.model) {\n      return;\n    }\n    this.chartInfos = this.createChartInfos();\n    const themeSupport = ThemeSupport.ThemeSupport.instance();\n    themeSupport.addEventListener(ThemeSupport.ThemeChangeEvent.eventName, () => {\n      // instantiateMetricData sets the colors for the metrics, which we need\n      // to re-evaluate when the theme changes before re-drawing the canvas.\n      this.chartInfos = this.createChartInfos();\n      this.requestUpdate();\n    });\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.SUSPEND_STATE_CHANGED, this.suspendStateChanged, this);\n    void this.model.enable();\n    this.suspendStateChanged();\n    this.requestUpdate();\n  }\n\n  override willHide(): void {\n    if (!this.model) {\n      return;\n    }\n    SDK.TargetManager.TargetManager.instance().removeEventListener(\n        SDK.TargetManager.Events.SUSPEND_STATE_CHANGED, this.suspendStateChanged, this);\n    this.stopPolling();\n    void this.model.disable();\n  }\n\n  override performUpdate(): void {\n    const input = {\n      onMetricChanged: this.onMetricStateChanged.bind(this),\n      chartsInfo: this.chartInfos,\n      metrics: this.metrics,\n      width: this.width,\n      height: this.height,\n      suspended: this.suspended,\n    };\n    const output = {graphRenderingContext: null, width: 0};\n    this.view(input, output, this.contentElement);\n    this.graphRenderingContext = output.graphRenderingContext;\n    this.width = output.width;\n    this.draw();\n  }\n\n  modelAdded(model: SDK.PerformanceMetricsModel.PerformanceMetricsModel): void {\n    if (model.target() !== SDK.TargetManager.TargetManager.instance().primaryPageTarget()) {\n      return;\n    }\n    this.model = model;\n    if (this.isShowing()) {\n      this.wasShown();\n    }\n  }\n\n  modelRemoved(model: SDK.PerformanceMetricsModel.PerformanceMetricsModel): void {\n    if (this.model !== model) {\n      return;\n    }\n    if (this.isShowing()) {\n      this.willHide();\n    }\n    this.model = null;\n  }\n\n  private suspendStateChanged(): void {\n    const suspended = SDK.TargetManager.TargetManager.instance().allTargetsSuspended();\n    if (suspended) {\n      this.stopPolling();\n    } else {\n      this.startPolling();\n    }\n    this.suspended = suspended;\n    this.requestUpdate();\n  }\n\n  private startPolling(): void {\n    this.pollTimer = window.setInterval(() => this.poll(), this.pollIntervalMs);\n    this.onResize();\n    const animate = (): void => {\n      this.draw();\n      this.animationId = this.contentElement.window().requestAnimationFrame(() => {\n        animate();\n      });\n    };\n    animate();\n  }\n\n  private stopPolling(): void {\n    window.clearInterval(this.pollTimer);\n    this.contentElement.window().cancelAnimationFrame(this.animationId);\n    this.metricsBuffer = [];\n  }\n\n  private async poll(): Promise<void> {\n    if (!this.model) {\n      return;\n    }\n    const data = await this.model.requestMetrics();\n    const timestamp = data.timestamp;\n    const metrics = data.metrics;\n    this.metricsBuffer.push({timestamp, metrics});\n    const millisPerWidth = this.width / this.pixelsPerMs;\n    // Multiply by 2 as the pollInterval has some jitter and to have some extra samples if window is resized.\n    const maxCount = Math.ceil(millisPerWidth / this.pollIntervalMs * 2);\n    if (this.metricsBuffer.length > maxCount * 2)  // Multiply by 2 to have a hysteresis.\n    {\n      this.metricsBuffer.splice(0, this.metricsBuffer.length - maxCount);\n    }\n    this.metrics = metrics;\n    this.requestUpdate();\n  }\n\n  private draw(): void {\n    if (!this.graphRenderingContext) {\n      return;\n    }\n    const ctx = this.graphRenderingContext;\n    ctx.save();\n    ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n    ctx.clearRect(0, 0, this.width, this.height);\n    ctx.save();\n    ctx.translate(0, this.scaleHeight);  // Reserve space for the scale bar.\n    for (const chartInfo of this.chartInfos) {\n      if (!this.activeCharts.has(chartInfo.metrics[0].name)) {\n        continue;\n      }\n      this.drawChart(ctx, chartInfo, this.graphHeight);\n      ctx.translate(0, this.graphHeight);\n    }\n    ctx.restore();\n    this.drawHorizontalGrid(ctx);\n    ctx.restore();\n  }\n\n  private drawHorizontalGrid(ctx: CanvasRenderingContext2D): void {\n    const labelDistanceSeconds = 10;\n    const lightGray = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-2');\n    ctx.font = '10px ' + Host.Platform.fontFamily();\n    ctx.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-50');\n    const currentTime = Date.now() / 1000;\n    for (let sec = Math.ceil(currentTime);; --sec) {\n      const x = this.width - ((currentTime - sec) * 1000 - this.pollIntervalMs) * this.pixelsPerMs;\n      if (x < -50) {\n        break;\n      }\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, this.height);\n      if (sec >= 0 && sec % labelDistanceSeconds === 0) {\n        ctx.fillText(new Date(sec * 1000).toLocaleTimeString(), x + 4, 12);\n      }\n      ctx.strokeStyle = sec % labelDistanceSeconds ? lightGray : this.gridColor;\n      ctx.stroke();\n    }\n  }\n\n  private drawChart(ctx: CanvasRenderingContext2D, chartInfo: ChartInfo, height: number): void {\n    ctx.save();\n    ctx.rect(0, 0, this.width, height);\n    ctx.clip();\n    const bottomPadding = 8;\n    const extraSpace = 1.05;\n    const max = this.calcMax(chartInfo) * extraSpace;\n    const stackedChartBaseLandscape = chartInfo.stacked ? new Map() : null;\n    const paths = [];\n    for (let i = chartInfo.metrics.length - 1; i >= 0; --i) {\n      const metricInfo = chartInfo.metrics[i];\n      paths.push({\n        path: this.buildMetricPath(\n            chartInfo, metricInfo, height - bottomPadding, max, i ? stackedChartBaseLandscape : null),\n        color: metricInfo.color,\n      });\n    }\n    const backgroundColor =\n        Common.Color.parse(ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-cdt-base-container'))\n            ?.asLegacyColor();\n\n    if (backgroundColor) {\n      for (const path of paths.reverse()) {\n        const color = path.color;\n        ctx.save();\n        const parsedColor = Common.Color.parse(color);\n        if (!parsedColor) {\n          continue;\n        }\n        ctx.fillStyle = backgroundColor.blendWith(parsedColor.setAlpha(0.2).asLegacyColor()).asString() || '';\n        ctx.fill(path.path);\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 0.5;\n        ctx.stroke(path.path);\n        ctx.restore();\n      }\n    }\n    ctx.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-50');\n    ctx.font = `10px  ${Host.Platform.fontFamily()}`;\n    ctx.fillText(chartInfo.title, 8, 10);\n    this.drawVerticalGrid(ctx, height - bottomPadding, max, chartInfo);\n    ctx.restore();\n  }\n\n  private calcMax(chartInfo: ChartInfo): number {\n    if (chartInfo.max) {\n      return chartInfo.max;\n    }\n    const width = this.width;\n    const startTime = performance.now() - this.pollIntervalMs - width / this.pixelsPerMs;\n    let max = -Infinity;\n    for (const metricInfo of chartInfo.metrics) {\n      for (let i = this.metricsBuffer.length - 1; i >= 0; --i) {\n        const metrics = this.metricsBuffer[i];\n        const value = metrics.metrics.get(metricInfo.name);\n        if (value !== undefined) {\n          max = Math.max(max, value);\n        }\n        if (metrics.timestamp < startTime) {\n          break;\n        }\n      }\n    }\n    if (!this.metricsBuffer.length) {\n      return 10;\n    }\n\n    const base10 = Math.pow(10, Math.floor(Math.log10(max)));\n    max = Math.ceil(max / base10 / 2) * base10 * 2;\n\n    const alpha = 0.2;\n    chartInfo.currentMax = max * alpha + (chartInfo.currentMax || max) * (1 - alpha);\n    return chartInfo.currentMax;\n  }\n\n  private drawVerticalGrid(ctx: CanvasRenderingContext2D, height: number, max: number, info: ChartInfo): void {\n    let base = Math.pow(10, Math.floor(Math.log10(max)));\n    const firstDigit = Math.floor(max / base);\n    if (firstDigit !== 1 && firstDigit % 2 === 1) {\n      base *= 2;\n    }\n    let scaleValue = Math.floor(max / base) * base;\n\n    const span = max;\n    const topPadding = 18;\n    const visibleHeight = height - topPadding;\n    ctx.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-50');\n    ctx.strokeStyle = this.gridColor;\n    ctx.beginPath();\n    for (let i = 0; i < 2; ++i) {\n      const y = calcY(scaleValue);\n      const labelText = formatNumber(scaleValue, info);\n      ctx.moveTo(0, y);\n      ctx.lineTo(4, y);\n      ctx.moveTo(ctx.measureText(labelText).width + 12, y);\n      ctx.lineTo(this.width, y);\n      ctx.fillText(labelText, 8, calcY(scaleValue) + 3);\n      scaleValue /= 2;\n    }\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(0, height + 0.5);\n    ctx.lineTo(this.width, height + 0.5);\n    ctx.strokeStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-inverted-opacity-2');\n    ctx.stroke();\n    function calcY(value: number): number {\n      return Math.round(height - visibleHeight * value / span) + 0.5;\n    }\n  }\n\n  private buildMetricPath(\n      chartInfo: ChartInfo, metricInfo: MetricInfo, height: number, scaleMax: number,\n      stackedChartBaseLandscape: Map<number, number>|null): Path2D {\n    const path = new Path2D();\n    const topPadding = 18;\n    const visibleHeight = height - topPadding;\n    if (visibleHeight < 1) {\n      return path;\n    }\n    const span = scaleMax;\n    const metricName = metricInfo.name;\n    const pixelsPerMs = this.pixelsPerMs;\n    const startTime = performance.now() - this.pollIntervalMs - this.width / pixelsPerMs;\n    const smooth = chartInfo.smooth;\n\n    let x = 0;\n    let lastY = 0;\n    let lastX = 0;\n    if (this.metricsBuffer.length) {\n      x = (this.metricsBuffer[0].timestamp - startTime) * pixelsPerMs;\n      path.moveTo(x, calcY(0));\n      path.lineTo(this.width + 5, calcY(0));\n      lastY = calcY(\n          (this.metricsBuffer[this.metricsBuffer.length - 1] as {\n            metrics: Map<string, number>,\n          }).metrics.get(metricName) ||\n          0);\n      lastX = this.width + 5;\n      path.lineTo(lastX, lastY);\n    }\n    for (let i = this.metricsBuffer.length - 1; i >= 0; --i) {\n      const metrics = this.metricsBuffer[i];\n      const timestamp = metrics.timestamp;\n      let value: number = metrics.metrics.get(metricName) || 0;\n      if (stackedChartBaseLandscape) {\n        value += stackedChartBaseLandscape.get(timestamp) || 0;\n        value = Platform.NumberUtilities.clamp(value, 0, 1);\n        stackedChartBaseLandscape.set(timestamp, value);\n      }\n      const y = calcY(value);\n      x = (timestamp - startTime) * pixelsPerMs;\n      if (smooth) {\n        const midX = (lastX + x) / 2;\n        path.bezierCurveTo(midX, lastY, midX, y, x, y);\n      } else {\n        path.lineTo(x, lastY);\n        path.lineTo(x, y);\n      }\n      lastX = x;\n      lastY = y;\n      if (timestamp < startTime) {\n        break;\n      }\n    }\n    return path;\n\n    function calcY(value: number): number {\n      return Math.round(height - visibleHeight * value / span) + 0.5;\n    }\n  }\n\n  override onResize(): void {\n    super.onResize();\n    this.recalcChartHeight();\n  }\n\n  private recalcChartHeight(): void {\n    let height = this.scaleHeight;\n    for (const chartInfo of this.chartInfos) {\n      if (this.activeCharts.has(chartInfo.metrics[0].name)) {\n        height += this.graphHeight;\n      }\n    }\n    this.height = Math.ceil(height * window.devicePixelRatio);\n    this.requestUpdate();\n  }\n\n  private createChartInfos(): ChartInfo[] {\n    const themeSupport = ThemeSupport.ThemeSupport.instance();\n    const elementForStyles = this.contentElement;\n\n    const defaults = {\n      color: undefined,\n      format: undefined,\n      currentMax: undefined,\n      max: undefined,\n      smooth: undefined,\n      stacked: undefined,\n    };\n\n    return [\n      {\n        ...defaults,\n        title: i18nString(UIStrings.cpuUsage),\n        metrics: [\n          {\n            name: 'TaskDuration',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-cpu-task-duration', elementForStyles),\n          },\n          {\n            name: 'ScriptDuration',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-cpu-script-duration', elementForStyles),\n          },\n          {\n            name: 'LayoutDuration',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-cpu-layout-duration', elementForStyles),\n          },\n          {\n            name: 'RecalcStyleDuration',\n            color: themeSupport.getComputedValue(\n                '--override-color-perf-monitor-cpu-recalc-style-duration', elementForStyles),\n          },\n        ],\n        format: Format.PERCENT,\n        smooth: true,\n        stacked: true,\n        color: themeSupport.getComputedValue('--override-color-perf-monitor-cpu', elementForStyles),\n        max: 1,\n        currentMax: undefined,\n      },\n      {\n        ...defaults,\n        title: i18nString(UIStrings.jsHeapSize),\n        metrics: [\n          {\n            name: 'JSHeapTotalSize',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-jsheap-total-size', elementForStyles),\n          },\n          {\n            name: 'JSHeapUsedSize',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-jsheap-used-size', elementForStyles),\n          },\n        ],\n        format: Format.BYTES,\n        color: themeSupport.getComputedValue('--override-color-perf-monitor-jsheap', elementForStyles),\n      },\n      {\n        ...defaults,\n        title: i18nString(UIStrings.domNodes),\n        metrics: [\n          {\n            name: 'Nodes',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-dom-nodes', elementForStyles),\n          },\n        ],\n      },\n      {\n        ...defaults,\n        title: i18nString(UIStrings.jsEventListeners),\n        metrics: [\n          {\n            name: 'JSEventListeners',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-js-event-listeners', elementForStyles),\n          },\n        ],\n      },\n      {\n        ...defaults,\n        title: i18nString(UIStrings.documents),\n        metrics: [{\n          name: 'Documents',\n          color: themeSupport.getComputedValue('--override-color-perf-monitor-documents', elementForStyles),\n        }],\n      },\n      {\n        ...defaults,\n        title: i18nString(UIStrings.documentFrames),\n        metrics: [{\n          name: 'Frames',\n          color: themeSupport.getComputedValue('--override-color-perf-monitor-document-frames', elementForStyles),\n        }],\n      },\n      {\n        ...defaults,\n        title: i18nString(UIStrings.layoutsSec),\n        metrics: [{\n          name: 'LayoutCount',\n          color: themeSupport.getComputedValue('--override-color-perf-monitor-layout-count', elementForStyles),\n        }],\n      },\n      {\n        ...defaults,\n        title: i18nString(UIStrings.styleRecalcsSec),\n        metrics: [\n          {\n            name: 'RecalcStyleCount',\n            color: themeSupport.getComputedValue('--override-color-perf-monitor-recalc-style-count', elementForStyles),\n          },\n        ],\n      },\n    ];\n  }\n}\n\nexport const enum Format {\n  PERCENT = 'Percent',\n  BYTES = 'Bytes',\n}\n\ninterface ControlPaneInput {\n  chartsInfo: ChartInfo[];\n  enabledCharts: Set<string>;\n  metricValues: Map<string, number>;\n  onCheckboxChange: (chartName: string, e: Event) => void;\n}\n\ntype ControlPaneView = (input: ControlPaneInput, output: object, target: HTMLElement) => void;\n\nconst CONTROL_PANE_DEFAULT_VIEW: ControlPaneView = (input, _output, target) => {\n  render(\n      input.chartsInfo.map(chartInfo => {\n        const chartName = chartInfo.metrics[0].name;\n        const active = input.enabledCharts.has(chartName);\n        const value = input.metricValues.get(chartName) || 0;\n        return renderMetricIndicator(\n            chartInfo,\n            active,\n            value,\n            (e: Event) => input.onCheckboxChange(chartName, e),\n        );\n      }),\n      target);\n};\n\nexport class ControlPane extends UI.Widget.VBox {\n  readonly #enabledChartsSetting: Common.Settings.Setting<string[]>;\n  readonly #enabledCharts: Set<string>;\n  #onMetricChanged: ((metricName: string, active: boolean) => void)|null = null;\n\n  #chartsInfo: ChartInfo[] = [];\n  readonly #metricValues = new Map<string, number>();\n  readonly #view: ControlPaneView;\n\n  constructor(element: HTMLElement, view = CONTROL_PANE_DEFAULT_VIEW) {\n    super(element, {useShadowDom: false, classes: ['perfmon-control-pane']});\n    this.#view = view;\n\n    this.#enabledChartsSetting = Common.Settings.Settings.instance().createSetting(\n        'perfmon-active-indicators2', ['TaskDuration', 'JSHeapTotalSize', 'Nodes']);\n    this.#enabledCharts = new Set(this.#enabledChartsSetting.get());\n  }\n\n  set chartsInfo(chartsInfo: ChartInfo[]) {\n    this.#chartsInfo = chartsInfo;\n    this.requestUpdate();\n  }\n\n  set onMetricChanged(callback: (metricName: string, active: boolean) => void) {\n    this.#onMetricChanged = callback;\n    for (const chartName of this.#enabledCharts) {\n      callback(chartName, true);\n    }\n  }\n\n  override performUpdate(): void {\n    const input = {\n      chartsInfo: this.#chartsInfo,\n      enabledCharts: this.#enabledCharts,\n      metricValues: this.#metricValues,\n      onCheckboxChange: this.#onCheckboxChange.bind(this),\n    };\n    this.#view(input, {}, this.element);\n  }\n\n  #onCheckboxChange(chartName: string, e: Event): void {\n    this.#onToggle(chartName, (e.target as HTMLInputElement).checked);\n    this.requestUpdate();\n  }\n\n  #onToggle(chartName: string, active: boolean): void {\n    if (active) {\n      this.#enabledCharts.add(chartName);\n    } else {\n      this.#enabledCharts.delete(chartName);\n    }\n    this.#enabledChartsSetting.set(Array.from(this.#enabledCharts));\n    if (this.#onMetricChanged) {\n      this.#onMetricChanged(chartName, active);\n    }\n  }\n\n  set metrics(metrics: Map<string, number>|undefined) {\n    if (!metrics) {\n      return;\n    }\n    for (const [name, value] of metrics.entries()) {\n      this.#metricValues.set(name, value);\n    }\n    this.requestUpdate();\n  }\n}\n\nlet numberFormatter: Intl.NumberFormat;\nlet percentFormatter: Intl.NumberFormat;\n\nexport function formatNumber(value: number, info: ChartInfo): string {\n  if (!numberFormatter) {\n    numberFormatter = new Intl.NumberFormat('en-US', {maximumFractionDigits: 1});\n    percentFormatter = new Intl.NumberFormat('en-US', {maximumFractionDigits: 1, style: 'percent'});\n  }\n  switch (info.format) {\n    case Format.PERCENT:\n      return percentFormatter.format(value);\n    case Format.BYTES:\n      return i18n.ByteUtilities.bytesToString(value);\n    default:\n      return numberFormatter.format(value);\n  }\n}\n\nfunction renderMetricIndicator(\n    info: ChartInfo, active: boolean, value: number, onCheckboxChange: (e: Event) => void): TemplateResult {\n  const color = info.color || info.metrics[0].color;\n  const chartName = info.metrics[0].name;\n  // clang-format off\n  return html`\n      <div class=\"perfmon-indicator ${active ? 'active' : ''}\" jslog=${VisualLogging.toggle().track({\n        click: true,\n        keydown: 'Enter',\n      }).context(Platform.StringUtilities.toKebabCase(chartName))}>\n        <devtools-checkbox .checked=${active}\n            @change=${onCheckboxChange} .jslogContext=${chartName}>${info.title}</devtools-checkbox>\n        <div class=\"perfmon-indicator-value\" style=\"color:${color}\">${\n      formatNumber(value, info)}</div>\n      </div>\n    `;\n  // clang-format on\n}\n\nexport const format = new Intl.NumberFormat('en-US', {maximumFractionDigits: 1});\nexport interface MetricInfo {\n  name: string;\n  color: string;\n}\nexport interface ChartInfo {\n  title: Common.UIString.LocalizedString;\n  metrics: Array<{name: string, color: string}>;\n  max?: number;\n  currentMax?: number;\n  format?: Format;\n  smooth?: boolean;\n  color?: string;\n  stacked?: boolean;\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2017 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n:host {\n  overflow: hidden;\n\n  --override-color-perf-monitor-cpu: var(--sys-color-yellow-bright);\n  --override-color-perf-monitor-cpu-task-duration: var(--sys-color-neutral-bright);\n  --override-color-perf-monitor-cpu-script-duration: var(--sys-color-yellow-bright);\n  --override-color-perf-monitor-cpu-layout-duration: var(--sys-color-purple);\n  --override-color-perf-monitor-cpu-recalc-style-duration: var(--sys-color-purple-bright);\n  --override-color-perf-monitor-jsheap: var(--sys-color-purple-bright);\n  --override-color-perf-monitor-jsheap-total-size: var(--ref-palette-purple70);\n  --override-color-perf-monitor-jsheap-used-size: var(--sys-color-purple-bright);\n  --override-color-perf-monitor-dom-nodes: var(--sys-color-green);\n  --override-color-perf-monitor-js-event-listeners: var(--ref-palette-green80);\n  --override-color-perf-monitor-documents: var(--sys-color-blue);\n  --override-color-perf-monitor-document-frames: var(--sys-color-cyan-bright);\n  --override-color-perf-monitor-layout-count: var(--sys-color-pink-bright);\n  --override-color-perf-monitor-recalc-style-count: var(--sys-color-pink);\n}\n\n:host-context(.theme-with-dark-background) {\n  --override-color-perf-monitor-jsheap-total-size: var(--ref-palette-purple50);\n  --override-color-perf-monitor-js-event-listeners: var(--ref-palette-green50);\n}\n\n.suspended {\n  opacity: 40%;\n  pointer-events: none;\n}\n\n.perfmon-chart-suspend-overlay {\n  display: flex;\n  font-size: 26px;\n  align-items: center;\n  justify-content: center;\n}\n\n.perfmon-control-pane {\n  display: flex;\n  flex: initial;\n  flex-direction: column;\n  padding: 6px 0;\n  overflow: hidden auto;\n}\n\n.perfmon-chart-container {\n  display: flex;\n  flex: 1 1;\n  border-left: 1px solid var(--sys-color-divider);\n  overflow-y: auto;\n}\n\n.perfmon-chart-container canvas {\n  width: 100%;\n}\n\n.perfmon-indicator {\n  padding: 3px 9px;\n  margin: -1px 0;\n  display: flex;\n  flex-shrink: 0;\n  width: 210px;\n}\n\n.perfmon-indicator span {\n  flex: 0 0 135px;\n}\n\n.perfmon-indicator-value {\n  flex: 0 0 55px;\n  text-align: right;\n  overflow: visible;\n  align-self: center;\n  margin-left: auto;\n}\n\n.perfmon-indicator:not(.active) .perfmon-indicator-value {\n  opacity: 0%;\n}\n\n/*# sourceURL=${import.meta.resolve('./performanceMonitor.css')} */`;"],
  "mappings": "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",
  "names": ["Platform"]
}
