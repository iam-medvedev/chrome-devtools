{"version":3,"file":"DrJonesNetworkAgent.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/DrJonesNetworkAgent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport {\n  describeWithEnvironment,\n  getGetHostConfigStub,\n} from '../../testing/EnvironmentHelpers.js';\n\nimport {DrJonesNetworkAgent, ResponseType} from './freestyler.js';\n\ndescribeWithEnvironment('DrJonesNetworkAgent', () => {\n  function mockHostConfig(modelId?: string, temperature?: number) {\n    getGetHostConfigStub({\n      devToolsExplainThisResourceDogfood: {\n        modelId,\n        temperature,\n      },\n    });\n  }\n\n  describe('buildRequest', () => {\n    beforeEach(() => {\n      sinon.restore();\n    });\n\n    it('builds a request with a model id', async () => {\n      mockHostConfig('test model');\n      const agent = new DrJonesNetworkAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({input: 'test input'}).options?.model_id,\n          'test model',\n      );\n    });\n\n    it('builds a request with a temperature', async () => {\n      mockHostConfig('test model', 1);\n      const agent = new DrJonesNetworkAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({input: 'test input'}).options?.temperature,\n          1,\n      );\n    });\n\n    it('structure matches the snapshot', () => {\n      mockHostConfig('test model');\n      sinon.stub(crypto, 'randomUUID').returns('sessionId' as `${string}-${string}-${string}-${string}-${string}`);\n      const agent = new DrJonesNetworkAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n        serverSideLoggingEnabled: true,\n      });\n      sinon.stub(agent, 'preamble').value('preamble');\n      agent.chatHistoryForTesting = new Map([[\n        0,\n        [\n          {\n            text: 'first',\n            entity: Host.AidaClient.Entity.UNKNOWN,\n          },\n          {\n            text: 'second',\n            entity: Host.AidaClient.Entity.SYSTEM,\n          },\n          {\n            text: 'third',\n            entity: Host.AidaClient.Entity.USER,\n          },\n        ],\n      ]]);\n      assert.deepStrictEqual(\n          agent.buildRequest({\n            input: 'test input',\n          }),\n          {\n            input: 'test input',\n            client: 'CHROME_DEVTOOLS',\n            preamble: 'preamble',\n            chat_history: [\n              {\n                entity: 0,\n                text: 'first',\n              },\n              {\n                entity: 2,\n                text: 'second',\n              },\n              {\n                entity: 1,\n                text: 'third',\n              },\n            ],\n            metadata: {\n              disable_user_content_logging: false,\n              string_session_id: 'sessionId',\n              user_tier: 2,\n            },\n            options: {\n              model_id: 'test model',\n              temperature: undefined,\n            },\n            client_feature: 7,\n            functionality_type: 1,\n          },\n      );\n    });\n  });\n  describe('run', () => {\n    let selectedNetworkRequest: SDK.NetworkRequest.NetworkRequest;\n    const timingInfo: Protocol.Network.ResourceTiming = {\n      requestTime: 500,\n      proxyStart: 0,\n      proxyEnd: 0,\n      dnsStart: 0,\n      dnsEnd: 0,\n      connectStart: 0,\n      connectEnd: 0,\n      sslStart: 0,\n      sslEnd: 0,\n      sendStart: 800,\n      sendEnd: 900,\n      pushStart: 0,\n      pushEnd: 0,\n      receiveHeadersStart: 1000,\n      receiveHeadersEnd: 0,\n    } as unknown as Protocol.Network.ResourceTiming;\n\n    beforeEach(() => {\n      selectedNetworkRequest = SDK.NetworkRequest.NetworkRequest.create(\n          'requestId' as Protocol.Network.RequestId, 'https://www.example.com' as Platform.DevToolsPath.UrlString,\n          '' as Platform.DevToolsPath.UrlString, null, null, null);\n      selectedNetworkRequest.statusCode = 200;\n      selectedNetworkRequest.setRequestHeaders([{name: 'foo1', value: 'bar1'}]);\n      selectedNetworkRequest.responseHeaders = [{name: 'foo2', value: 'bar2'}, {name: 'foo3', value: 'bar3'}];\n      selectedNetworkRequest.timing = timingInfo;\n\n      const initiatorNetworkRequest = SDK.NetworkRequest.NetworkRequest.create(\n          'requestId' as Protocol.Network.RequestId, 'https://www.initiator.com' as Platform.DevToolsPath.UrlString,\n          '' as Platform.DevToolsPath.UrlString, null, null, null);\n      const initiatedNetworkRequest1 = SDK.NetworkRequest.NetworkRequest.create(\n          'requestId' as Protocol.Network.RequestId, 'https://www.example.com/1' as Platform.DevToolsPath.UrlString,\n          '' as Platform.DevToolsPath.UrlString, null, null, null);\n      const initiatedNetworkRequest2 = SDK.NetworkRequest.NetworkRequest.create(\n          'requestId' as Protocol.Network.RequestId, 'https://www.example.com/2' as Platform.DevToolsPath.UrlString,\n          '' as Platform.DevToolsPath.UrlString, null, null, null);\n\n      sinon.stub(Logs.NetworkLog.NetworkLog.instance(), 'initiatorGraphForRequest')\n          .withArgs(selectedNetworkRequest)\n          .returns({\n            initiators: new Set([selectedNetworkRequest, initiatorNetworkRequest]),\n            initiated: new Map([\n              [selectedNetworkRequest, initiatorNetworkRequest],\n              [initiatedNetworkRequest1, selectedNetworkRequest],\n              [initiatedNetworkRequest2, selectedNetworkRequest],\n            ]),\n          })\n          .withArgs(initiatedNetworkRequest1)\n          .returns({\n            initiators: new Set([]),\n            initiated: new Map([\n              [initiatedNetworkRequest1, selectedNetworkRequest],\n            ]),\n          })\n          .withArgs(initiatedNetworkRequest2)\n          .returns({\n            initiators: new Set([]),\n            initiated: new Map([\n              [initiatedNetworkRequest2, selectedNetworkRequest],\n            ]),\n          });\n    });\n\n    afterEach(() => {\n      sinon.restore();\n    });\n\n    function mockAidaClient(\n        fetch: () => AsyncGenerator<Host.AidaClient.AidaResponse, void, void>,\n        ): Host.AidaClient.AidaClient {\n      return {\n        fetch,\n        registerClientEvent: () => Promise.resolve({}),\n      };\n    }\n\n    it('generates an answer', async () => {\n      async function* generateAnswer() {\n        yield {\n          explanation: 'This is the answer',\n          metadata: {\n            rpcGlobalId: 123,\n          },\n          completed: true,\n        };\n      }\n\n      const agent = new DrJonesNetworkAgent({\n        aidaClient: mockAidaClient(generateAnswer),\n      });\n\n      const responses = await Array.fromAsync(agent.run('test', {selectedNetworkRequest}));\n      assert.deepStrictEqual(responses, [\n        {\n          type: ResponseType.TITLE,\n          title: 'Inspecting network data',\n        },\n        {\n          type: ResponseType.THOUGHT,\n          thought: 'Data used to generate this response',\n          contextDetails: [\n            {\n              title: 'Request',\n              text: 'Request URL: https://www.example.com\\n\\nRequest Headers\\nfoo1: bar1',\n            },\n            {\n              title: 'Response',\n              text: 'Response Status: 200 \\n\\nResponse Headers\\nfoo2: bar2\\nfoo3: bar3',\n            },\n            {\n              title: 'Timing',\n              text: `Request start time: 500\nRequest end time: -1\nReceiving response headers start time: 1000\nReceiving response headers end time: 0\nProxy negotiation start time: 0\nProxy negotiation end time: 0\nDNS lookup start time: 0\nDNS lookup end time: 0\nTCP start time: 0\nTCP end time: 0\nSSL start time: 0\nSSL end time: 0\nSending start: 800\nSending end: 900\n`,\n            },\n            {\n              title: 'Request Initiator Chain',\n              text: `- URL: https://www.initiator.com\n\\t- URL: https://www.example.com\n\\t\\t- URL: https://www.example.com/1\n\\t\\t- URL: https://www.example.com/2\n`,\n            },\n          ],\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'This is the answer',\n          rpcId: 123,\n        },\n      ]);\n      assert.deepStrictEqual(agent.chatHistoryForTesting, [\n        {\n          entity: 1,\n          text: `# Selected network request \\nRequest: https://www.example.com\n\nRequest headers:\nfoo1: bar1\n\nResponse headers:\nfoo2: bar2\nfoo3: bar3\n\nResponse status: 200 \\n\nRequest Timing:\nRequest start time: 500\nRequest end time: -1\nReceiving response headers start time: 1000\nReceiving response headers end time: 0\nProxy negotiation start time: 0\nProxy negotiation end time: 0\nDNS lookup start time: 0\nDNS lookup end time: 0\nTCP start time: 0\nTCP end time: 0\nSSL start time: 0\nSSL end time: 0\nSending start: 800\nSending end: 900\n\n\nRequest Initiator Chain:\n- URL: https://www.initiator.com\n\\t- URL: https://www.example.com\n\\t\\t- URL: https://www.example.com/1\n\\t\\t- URL: https://www.example.com/2\n\n\n# User request\n\ntest`,\n        },\n        {\n          entity: 2,\n          text: 'This is the answer',\n        },\n      ]);\n    });\n  });\n});\n"]}