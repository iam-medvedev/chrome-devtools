{"version":3,"file":"FreestylerChatUi.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/freestyler/components/FreestylerChatUi.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,uBAAuB,EAAC,MAAM,wCAAwC,CAAC;AAC/E,OAAO,KAAK,MAAM,MAAM,uCAAuC,CAAC;AAChE,OAAO,KAAK,YAAY,MAAM,uDAAuD,CAAC;AACtF,OAAO,KAAK,gBAAgB,MAAM,kBAAkB,CAAC;AAErD,MAAM,EAAC,6BAA6B,EAAC,GAAG,gBAAgB,CAAC,QAAQ,CAAC;AAElE,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,uBAAuB,CAAC,+BAA+B,EAAE,GAAG,EAAE;QAC5D,EAAE,CAAC,qGAAqG,EAAE,GAAG,EAAE;YAC7G,MAAM,QAAQ,GAAG,IAAI,6BAA6B,EAAE,CAAC;YACrD,MAAM,oBAAoB,GACtB,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,uBAAuB,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;YAChG,MAAM,SAAS,GAAG;;;;;OAKjB,CAAC;YACF,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAA8B,CAAC;YACjF,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC/B,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YAEhC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,oBAAoB,EAAE,KAAK,CAAC,KAAK,CAAC;gBACxD,IAAI,EAAE,KAAK;gBACX,IAAI,EAAE;;EAEZ;aACK,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport * as Marked from '../../../third_party/marked/marked.js';\nimport * as MarkdownView from '../../../ui/components/markdown_view/markdown_view.js';\nimport * as FreestylerChatUi from '../freestyler.js';\n\nconst {MarkdownRendererWithCodeBlock} = FreestylerChatUi.FOR_TEST;\n\ndescribe('FreestylerChatUi', () => {\n  describeWithEnvironment('MarkdownRendererWithCodeBlock', () => {\n    it('should transform code token for multiline code blocks with `css` language written in the first line', () => {\n      const renderer = new MarkdownRendererWithCodeBlock();\n      const templateForTokenStub =\n          sinon.stub(MarkdownView.MarkdownView.MarkdownInsightRenderer.prototype, 'templateForToken');\n      const codeBlock = `\\`\\`\\`\ncss\n* {\n  color: red;\n}\n\\`\\`\\``;\n      const codeToken = Marked.Marked.lexer(codeBlock)[0] as Marked.Marked.Tokens.Code;\n      assert.isEmpty(codeToken.lang);\n      renderer.renderToken(codeToken);\n\n      sinon.assert.calledWith(templateForTokenStub, sinon.match({\n        lang: 'css',\n        text: `* {\n  color: red;\n}`,\n      }));\n    });\n  });\n});\n"]}