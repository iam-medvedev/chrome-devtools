{"version":3,"file":"FreestylerChatUi.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/freestyler/components/FreestylerChatUi.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport * as Marked from '../../../third_party/marked/marked.js';\nimport * as MarkdownView from '../../../ui/components/markdown_view/markdown_view.js';\nimport * as Freestyler from '../freestyler.js';\n\nconst {MarkdownRendererWithCodeBlock} = Freestyler.FOR_TEST;\n\ndescribeWithEnvironment('FreestylerChatUi', () => {\n  describe('MarkdownRendererWithCodeBlock', () => {\n    it('should transform code token for multiline code blocks with `css` language written in the first line', () => {\n      const renderer = new MarkdownRendererWithCodeBlock();\n      const templateForTokenStub =\n          sinon.stub(MarkdownView.MarkdownView.MarkdownInsightRenderer.prototype, 'templateForToken');\n      const codeBlock = `\\`\\`\\`\ncss\n* {\n  color: red;\n}\n\\`\\`\\``;\n      const codeToken = Marked.Marked.lexer(codeBlock)[0] as Marked.Marked.Tokens.Code;\n      assert.isEmpty(codeToken.lang);\n      renderer.renderToken(codeToken);\n\n      sinon.assert.calledWith(templateForTokenStub, sinon.match({\n        lang: 'css',\n        text: `* {\n  color: red;\n}`,\n      }));\n    });\n  });\n\n  function getProp(options: Partial<Freestyler.Props>): Freestyler.Props {\n    const noop = () => {};\n    const messages: Freestyler.ChatMessage[] = options.messages ?? [];\n    return {\n      onTextSubmit: noop,\n      onInspectElementClick: noop,\n      onFeedbackSubmit: noop,\n      onAcceptConsentClick: noop,\n      onCancelClick: noop,\n      onFixThisIssueClick: noop,\n      inspectElementToggled: false,\n      state: Freestyler.State.CHAT_VIEW,\n      agentType: Freestyler.AgentType.FREESTYLER,\n      aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      messages,\n      selectedElement: {} as unknown as SDK.DOMModel.DOMNode,\n      selectedNetworkRequest: {} as unknown as SDK.NetworkRequest.NetworkRequest,\n      isLoading: false,\n      canShowFeedbackForm: false,\n      userInfo: {},\n      ...options,\n    };\n  }\n\n  describe('SideEffects', () => {\n    it('should show SideEffects when the step contains \"sideEffect\" object', async () => {\n      const props = getProp({\n        messages: [\n          {\n            entity: Freestyler.ChatMessageEntity.MODEL,\n            suggestingFix: false,\n            aborted: false,\n            steps: [\n              {\n                isLoading: false,\n                title: 'Updating element styles',\n                thought: 'Updating element styles',\n                code: '$0.style.background = \"blue\";',\n                sideEffect: {\n                  onAnswer: () => {},\n                },\n              },\n            ],\n          },\n        ],\n      });\n      const chat = new Freestyler.FreestylerChatUi(props);\n      renderElementIntoDOM(chat);\n\n      const sideEffect = chat.shadowRoot!.querySelector('.side-effect-confirmation');\n      assert.exists(sideEffect);\n    });\n  });\n});\n"]}