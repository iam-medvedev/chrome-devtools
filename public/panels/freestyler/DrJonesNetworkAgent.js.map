{"version":3,"file":"DrJonesNetworkAgent.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/DrJonesNetworkAgent.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\n\n/* clang-format off */\nconst preamble = `You are the most advanced network request debugging assistant integrated into Chrome DevTools.\nThe user selected a network request in the browser's DevTools Network Panel and sends a query to understand the request.\nProvide a comprehensive analysis of the network request, focusing on areas crucial for a software engineer. Your analysis should include:\n* Briefly explain the purpose of the request based on the URL, method, and any relevant headers or payload.\n* Highlight potential issues indicated by the status code.\n\n# Considerations\n* If the response payload or request payload contains sensitive data, redact or generalize it in your analysis to ensure privacy.\n* Tailor your explanations and suggestions to the specific context of the request and the technologies involved (if discernible from the provided details).\n* Keep your analysis concise and focused, highlighting only the most critical aspects for a software engineer.\n\n## Example session\n\nExplain this network request\nRequest: https://api.example.com/products/search?q=laptop&category=electronics\nResponse Headers:\n    Content-Type: application/json\n    Cache-Control: max-age=300\n...\nRequest Headers:\n    User-Agent: Mozilla/5.0\n...\nRequest Status: 200 OK\n\n\nThis request aims to retrieve a list of products matching the search query \"laptop\" within the \"electronics\" category. The successful 200 OK status confirms that the server fulfilled the request and returned the relevant data.\n`;\n/* clang-format on */\n\nconst MAX_HEADERS_SIZE = 1000;\n\nexport enum DrJonesNetworkAgentResponseType {\n  ANSWER = 'answer',\n  ERROR = 'error',\n}\n\nexport interface AnswerResponse {\n  type: DrJonesNetworkAgentResponseType.ANSWER;\n  text: string;\n  rpcId?: number;\n}\n\nexport interface ErrorResponse {\n  type: DrJonesNetworkAgentResponseType.ERROR;\n  rpcId?: number;\n}\n\nexport type ResponseData = AnswerResponse|ErrorResponse;\n\ntype HistoryChunk = {\n  text: string,\n  entity: Host.AidaClient.Entity,\n};\n\ntype AgentOptions = {\n  aidaClient: Host.AidaClient.AidaClient,\n  serverSideLoggingEnabled?: boolean,\n};\n\ninterface AidaRequestOptions {\n  input: string;\n  preamble?: string;\n  chatHistory?: Host.AidaClient.Chunk[];\n  /**\n   * @default false\n   */\n  serverSideLoggingEnabled?: boolean;\n  sessionId?: string;\n}\n\n/**\n * One agent instance handles one conversation. Create a new agent\n * instance for a new conversation.\n */\nexport class DrJonesNetworkAgent {\n  static buildRequest(opts: AidaRequestOptions): Host.AidaClient.AidaRequest {\n    const config = Common.Settings.Settings.instance().getHostConfig();\n    const request: Host.AidaClient.AidaRequest = {\n      input: opts.input,\n      preamble: opts.preamble,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      chat_history: opts.chatHistory,\n      client: Host.AidaClient.CLIENT_NAME,\n      options: {\n        temperature: config.devToolsFreestylerDogfood?.temperature ?? 0,\n        model_id: config.devToolsFreestylerDogfood?.modelId ?? undefined,\n      },\n      metadata: {\n        // TODO: disable logging based on query params.\n        disable_user_content_logging: !(opts.serverSideLoggingEnabled ?? false),\n        string_session_id: opts.sessionId,\n        user_tier: Host.AidaClient.convertToUserTierEnum(config.devToolsFreestylerDogfood?.userTier),\n      },\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      functionality_type: Host.AidaClient.FunctionalityType.CHAT,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      client_feature: Host.AidaClient.ClientFeature.CHROME_FREESTYLER,\n    };\n    return request;\n  }\n\n  #aidaClient: Host.AidaClient.AidaClient;\n  #chatHistory: Map<number, HistoryChunk[]> = new Map();\n  #serverSideLoggingEnabled: boolean;\n\n  readonly #sessionId = crypto.randomUUID();\n\n  constructor(opts: AgentOptions) {\n    this.#aidaClient = opts.aidaClient;\n    this.#serverSideLoggingEnabled = opts.serverSideLoggingEnabled ?? false;\n  }\n\n  get #getHistoryEntry(): Array<HistoryChunk> {\n    return [...this.#chatHistory.values()].flat();\n  }\n\n  get chatHistoryForTesting(): Array<HistoryChunk> {\n    return this.#getHistoryEntry;\n  }\n\n  async #aidaFetch(request: Host.AidaClient.AidaRequest): Promise<{response: string, rpcId: number|undefined}> {\n    let response = '';\n    let rpcId;\n    for await (const lastResult of this.#aidaClient.fetch(request)) {\n      response = lastResult.explanation;\n      rpcId = lastResult.metadata.rpcGlobalId ?? rpcId;\n      if (lastResult.metadata.attributionMetadata?.some(\n              meta => meta.attributionAction === Host.AidaClient.RecitationAction.BLOCK)) {\n        throw new Error('Attribution action does not allow providing the response');\n      }\n    }\n    return {response, rpcId};\n  }\n\n  #runId = 0;\n  async * run(query: string, options: {\n    signal?: AbortSignal, selectedNetworkRequest: SDK.NetworkRequest.NetworkRequest|null,\n  }): AsyncGenerator<ResponseData, void, void> {\n    const structuredLog = [];\n    query = `${\n        options.selectedNetworkRequest ?\n            `# Selected network request \\n${\n                formatNetworkRequest(options.selectedNetworkRequest)}\\n\\n# User request\\n\\n` :\n            ''}${query}`;\n    const currentRunId = ++this.#runId;\n\n    options.signal?.addEventListener('abort', () => {\n      this.#chatHistory.delete(currentRunId);\n    });\n\n    const request = DrJonesNetworkAgent.buildRequest({\n      input: query,\n      preamble,\n      chatHistory: this.#chatHistory.size ? this.#getHistoryEntry : undefined,\n      serverSideLoggingEnabled: this.#serverSideLoggingEnabled,\n      sessionId: this.#sessionId,\n    });\n    let response: string;\n    let rpcId: number|undefined;\n    try {\n      const fetchResult = await this.#aidaFetch(request);\n      response = fetchResult.response;\n      rpcId = fetchResult.rpcId;\n    } catch (err) {\n      debugLog('Error calling the AIDA API', err);\n\n      if (options.signal?.aborted) {\n        return;\n      }\n\n      yield {\n        type: DrJonesNetworkAgentResponseType.ERROR,\n        rpcId,\n      };\n      return;\n    }\n\n    if (options.signal?.aborted) {\n      return;\n    }\n\n    debugLog('Request', request, 'Response', response);\n\n    structuredLog.push({\n      request: structuredClone(request),\n      response,\n    });\n\n    const addToHistory = (text: string): void => {\n      this.#chatHistory.set(currentRunId, [\n        ...currentRunEntries,\n        {\n          text: query,\n          entity: Host.AidaClient.Entity.USER,\n        },\n        {\n          text,\n          entity: Host.AidaClient.Entity.SYSTEM,\n        },\n      ]);\n    };\n    const currentRunEntries = this.#chatHistory.get(currentRunId) ?? [];\n    addToHistory(`ANSWER: ${response}`);\n    yield {\n      type: DrJonesNetworkAgentResponseType.ANSWER,\n      text: response,\n      rpcId,\n    };\n    if (isDebugMode()) {\n      localStorage.setItem('freestylerStructuredLog', JSON.stringify(structuredLog));\n      window.dispatchEvent(new CustomEvent('freestylerdone'));\n    }\n  }\n}\n\nfunction isDebugMode(): boolean {\n  return Boolean(localStorage.getItem('debugFreestylerEnabled'));\n}\n\nfunction debugLog(...log: unknown[]): void {\n  if (!isDebugMode()) {\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(...log);\n}\n\nfunction setDebugFreestylerEnabled(enabled: boolean): void {\n  if (enabled) {\n    localStorage.setItem('debugFreestylerEnabled', 'true');\n  } else {\n    localStorage.removeItem('debugFreestylerEnabled');\n  }\n}\n\nfunction formatLines(title: string, lines: string[], maxLength: number): string {\n  let result = '';\n  for (const line of lines) {\n    if (result.length + line.length > maxLength) {\n      break;\n    }\n    result += line;\n  }\n  result = result.trim();\n  return result && title ? title + '\\n' + result : result;\n}\n\nexport function allowHeader(header: SDK.NetworkRequest.NameValue): boolean {\n  const normalizedName = header.name.toLowerCase().trim();\n  // Skip custom headers.\n  if (normalizedName.startsWith('x-')) {\n    return false;\n  }\n  // Skip cookies as they might contain auth.\n  if (normalizedName === 'cookie' || normalizedName === 'set-cookie') {\n    return false;\n  }\n  if (normalizedName === 'authorization') {\n    return false;\n  }\n  return true;\n}\n\nexport function formatNetworkRequest(\n    request:\n        Pick<SDK.NetworkRequest.NetworkRequest, 'url'|'requestHeaders'|'responseHeaders'|'statusCode'|'statusText'>):\n    string {\n  const formatHeaders = (title: string, headers: SDK.NetworkRequest.NameValue[]): string => formatLines(\n      title, headers.filter(allowHeader).map(header => header.name + ': ' + header.value + '\\n'), MAX_HEADERS_SIZE);\n  // TODO: anything else that might be relavant?\n  // TODO: handle missing headers\n  return `Request: ${request.url()}\n\n${formatHeaders('Request headers:', request.requestHeaders())}\n\n${formatHeaders('Response headers:', request.responseHeaders)}\n\nResponse status: ${request.statusCode} ${request.statusText}`;\n}\n\n// @ts-ignore\nglobalThis.setDebugFreestylerEnabled = setDebugFreestylerEnabled;\n"]}