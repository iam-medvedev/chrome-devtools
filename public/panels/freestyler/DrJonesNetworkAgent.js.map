{"version":3,"file":"DrJonesNetworkAgent.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/DrJonesNetworkAgent.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Logs from '../../models/logs/logs.js';\n\nimport {\n  AiAgent,\n  type AidaRequestOptions,\n  type ContextDetail,\n  debugLog,\n  ErrorType,\n  isDebugMode,\n  type ResponseData,\n  ResponseType,\n  type ThoughtResponse,\n  type TitleResponse,\n} from './AiAgent.js';\n\n/* clang-format off */\nconst preamble = `You are the most advanced network request debugging assistant integrated into Chrome DevTools.\nThe user selected a network request in the browser's DevTools Network Panel and sends a query to understand the request.\nProvide a comprehensive analysis of the network request, focusing on areas crucial for a software engineer. Your analysis should include:\n* Briefly explain the purpose of the request based on the URL, method, and any relevant headers or payload.\n* Analyze timing information to identify potential bottlenecks or areas for optimization.\n* Highlight potential issues indicated by the status code.\n\n# Considerations\n* If the response payload or request payload contains sensitive data, redact or generalize it in your analysis to ensure privacy.\n* Tailor your explanations and suggestions to the specific context of the request and the technologies involved (if discernible from the provided details).\n* Keep your analysis concise and focused, highlighting only the most critical aspects for a software engineer.\n* **CRITICAL** If the user asks a question about religion, race, politics, sexuality, gender, or other sensitive topics, answer with \"Sorry, I can't answer that. I'm best at questions about network requests.\"\n\n## Example session\n\nExplain this network request\nRequest: https://api.example.com/products/search?q=laptop&category=electronics\nResponse Headers:\n    Content-Type: application/json\n    Cache-Control: max-age=300\n...\nRequest Headers:\n    User-Agent: Mozilla/5.0\n...\nRequest Status: 200 OK\n\n\nThis request aims to retrieve a list of products matching the search query \"laptop\" within the \"electronics\" category. The successful 200 OK status confirms that the server fulfilled the request and returned the relevant data.\n`;\n/* clang-format on */\n\nconst MAX_HEADERS_SIZE = 1000;\n\n/*\n* Strings that don't need to be translated at this time.\n*/\nconst UIStringsNotTranslate = {\n  inspectingNetworkData: 'Inspecting network data',\n  /**\n   *@description Thought text for thinking step of DrJones Network agent.\n   */\n  dataUsedToGenerateThisResponse: 'Data used to generate this response',\n  /**\n   *@description Heading text for the block that shows the network request details.\n   */\n  request: 'Request',\n  /**\n   *@description Heading text for the block that shows the network response details.\n   */\n  response: 'Response',\n  /**\n   *@description Prefix text for request URL.\n   */\n  requestUrl: 'Request URL',\n  /**\n   *@description Title text for request headers.\n   */\n  requestHeaders: 'Request Headers',\n  /**\n   *@description Title text for request timing details.\n   */\n  timing: 'Timing',\n  /**\n   *@description Title text for response headers.\n   */\n  responseHeaders: 'Response Headers',\n  /**\n   *@description Prefix text for response status.\n   */\n  responseStatus: 'Response Status',\n  /**\n   *@description Title text for request initiator chain.\n   */\n  requestInitiatorChain: 'Request Initiator Chain',\n};\n\nconst lockedString = i18n.i18n.lockedString;\n\n/**\n * One agent instance handles one conversation. Create a new agent\n * instance for a new conversation.\n */\nexport class DrJonesNetworkAgent extends AiAgent {\n  readonly preamble = preamble;\n  readonly clientFeature = Host.AidaClient.ClientFeature.CHROME_FREESTYLER;\n  // TODO(b/369822364): use a feature param instead.\n  readonly userTier = 'BETA';\n  get options(): AidaRequestOptions {\n    const config = Common.Settings.Settings.instance().getHostConfig();\n    const temperature = AiAgent.validTemperature(config.devToolsExplainThisResourceDogfood?.temperature);\n    const modelId = config.devToolsExplainThisResourceDogfood?.modelId;\n\n    return {\n      temperature,\n      model_id: modelId,\n    };\n  }\n\n  *\n      handleContextDetails(selectedNetworkRequest: SDK.NetworkRequest.NetworkRequest|null):\n          Generator<ThoughtResponse|TitleResponse, void, void> {\n    yield {\n      type: ResponseType.TITLE,\n      title: lockedString(UIStringsNotTranslate.inspectingNetworkData),\n    };\n    yield {\n      type: ResponseType.THOUGHT,\n      thought: lockedString(UIStringsNotTranslate.dataUsedToGenerateThisResponse),\n      contextDetails: createContextDetailsForDrJonesNetworkAgent(selectedNetworkRequest),\n    };\n  }\n\n  async enhanceQuery(query: string, selectedNetworkRequest: SDK.NetworkRequest.NetworkRequest|null): Promise<string> {\n    const networkEnchantmentQuery = selectedNetworkRequest ?\n        `# Selected network request \\n${formatNetworkRequest(selectedNetworkRequest)}\\n\\n# User request\\n\\n` :\n        '';\n    return `${networkEnchantmentQuery}${query}`;\n  }\n\n  #runId = 0;\n  async * run(query: string, options: {\n    signal?: AbortSignal, selectedNetworkRequest: SDK.NetworkRequest.NetworkRequest|null,\n  }): AsyncGenerator<ResponseData, void, void> {\n    yield* this.handleContextDetails(options.selectedNetworkRequest);\n\n    query = await this.enhanceQuery(query, options.selectedNetworkRequest);\n    const currentRunId = ++this.#runId;\n\n    let response: string;\n    let rpcId: number|undefined;\n    try {\n      const fetchResult = await this.aidaFetch(query, {signal: options.signal});\n      response = fetchResult.response;\n      rpcId = fetchResult.rpcId;\n    } catch (err) {\n      debugLog('Error calling the AIDA API', err);\n      if (err instanceof Host.AidaClient.AidaAbortError) {\n        this.removeHistoryRun(currentRunId);\n        yield {\n          type: ResponseType.ERROR,\n          error: ErrorType.ABORT,\n          rpcId,\n        };\n        return;\n      }\n\n      yield {\n        type: ResponseType.ERROR,\n        error: ErrorType.UNKNOWN,\n        rpcId,\n      };\n      return;\n    }\n\n    this.addToHistory({\n      id: currentRunId,\n      query,\n      output: response,\n    });\n\n    yield {\n      type: ResponseType.ANSWER,\n      text: response,\n      rpcId,\n    };\n    if (isDebugMode()) {\n      window.dispatchEvent(new CustomEvent('freestylerdone'));\n    }\n  }\n}\n\nfunction formatLines(title: string, lines: string[], maxLength: number): string {\n  let result = '';\n  for (const line of lines) {\n    if (result.length + line.length > maxLength) {\n      break;\n    }\n    result += line;\n  }\n  result = result.trim();\n  return result && title ? title + '\\n' + result : result;\n}\n\nexport function allowHeader(header: SDK.NetworkRequest.NameValue): boolean {\n  const normalizedName = header.name.toLowerCase().trim();\n  // Skip custom headers.\n  if (normalizedName.startsWith('x-')) {\n    return false;\n  }\n  // Skip cookies as they might contain auth.\n  if (normalizedName === 'cookie' || normalizedName === 'set-cookie') {\n    return false;\n  }\n  if (normalizedName === 'authorization') {\n    return false;\n  }\n  return true;\n}\n\nexport function formatHeaders(title: string, headers: SDK.NetworkRequest.NameValue[]): string {\n  return formatLines(\n      title, headers.filter(allowHeader).map(header => header.name + ': ' + header.value + '\\n'), MAX_HEADERS_SIZE);\n}\n\nexport function formatNetworkRequestTiming(request: SDK.NetworkRequest.NetworkRequest): string {\n  const timing = request.timing;\n\n  return `Request start time: ${request.startTime}\nRequest end time: ${request.endTime}\nReceiving response headers start time: ${timing?.receiveHeadersStart}\nReceiving response headers end time: ${timing?.receiveHeadersEnd}\nProxy negotiation start time: ${timing?.proxyStart}\nProxy negotiation end time: ${timing?.proxyEnd}\nDNS lookup start time: ${timing?.dnsStart}\nDNS lookup end time: ${timing?.dnsEnd}\nTCP start time: ${timing?.connectStart}\nTCP end time: ${timing?.connectEnd}\nSSL start time: ${timing?.sslStart}\nSSL end time: ${timing?.sslEnd}\nSending start: ${timing?.sendStart}\nSending end: ${timing?.sendEnd}\n`;\n}\n\nfunction formatRequestInitiated(\n    request: SDK.NetworkRequest.NetworkRequest, initiatorChain: string, lineStart: string): string {\n  const initiated = Logs.NetworkLog.NetworkLog.instance().initiatorGraphForRequest(request).initiated;\n  initiated.forEach((v, initiatedRequest) => {\n    if (request === v) {\n      initiatorChain = initiatorChain + lineStart + initiatedRequest.url() + '\\n';\n      initiatorChain = formatRequestInitiated(initiatedRequest, initiatorChain, '\\t' + lineStart);\n    }\n  });\n  return initiatorChain;\n}\n\nfunction formatRequestInitiatorChain(request: SDK.NetworkRequest.NetworkRequest): string {\n  let initiatorChain = '';\n  let lineStart = '- URL: ';\n  const initiators = Logs.NetworkLog.NetworkLog.instance().initiatorGraphForRequest(request).initiators;\n\n  for (const initator of Array.from(initiators).reverse()) {\n    initiatorChain = initiatorChain + lineStart + initator.url() + '\\n';\n    lineStart = '\\t' + lineStart;\n    if (initator === request) {\n      initiatorChain = formatRequestInitiated(initator, initiatorChain, lineStart);\n      break;\n    }\n  }\n\n  return initiatorChain;\n}\n\nexport function formatNetworkRequest(request: SDK.NetworkRequest.NetworkRequest): string {\n  const formatHeaders = (title: string, headers: SDK.NetworkRequest.NameValue[]): string => formatLines(\n      title, headers.filter(allowHeader).map(header => header.name + ': ' + header.value + '\\n'), MAX_HEADERS_SIZE);\n  // TODO: anything else that might be relavant?\n  // TODO: handle missing headers\n  return `Request: ${request.url()}\n\n${formatHeaders('Request headers:', request.requestHeaders())}\n\n${formatHeaders('Response headers:', request.responseHeaders)}\n\nResponse status: ${request.statusCode} ${request.statusText}\n\nRequest Timing:\\n${formatNetworkRequestTiming(request)}\n\nRequest Initiator Chain:\\n${formatRequestInitiatorChain(request)}`;\n}\n\nfunction createContextDetailsForDrJonesNetworkAgent(request: SDK.NetworkRequest.NetworkRequest|null): ContextDetail[] {\n  if (request) {\n    const requestContextDetail: ContextDetail = {\n      title: lockedString(UIStringsNotTranslate.request),\n      text: lockedString(UIStringsNotTranslate.requestUrl) + ': ' + request.url() + '\\n\\n' +\n          formatHeaders(lockedString(UIStringsNotTranslate.requestHeaders), request.requestHeaders()),\n    };\n    const responseContextDetail: ContextDetail = {\n      title: lockedString(UIStringsNotTranslate.response),\n      text: lockedString(UIStringsNotTranslate.responseStatus) + ': ' + request.statusCode + ' ' + request.statusText +\n          '\\n\\n' + formatHeaders(lockedString(UIStringsNotTranslate.responseHeaders), request.responseHeaders),\n    };\n    const timingContextDetail: ContextDetail = {\n      title: lockedString(UIStringsNotTranslate.timing),\n      text: formatNetworkRequestTiming(request),\n    };\n    const initiatorChainContextDetail: ContextDetail = {\n      title: lockedString(UIStringsNotTranslate.requestInitiatorChain),\n      text: formatRequestInitiatorChain(request),\n    };\n    return [\n      requestContextDetail,\n      responseContextDetail,\n      timingContextDetail,\n      initiatorChainContextDetail,\n    ];\n  }\n  return [];\n}\n"]}