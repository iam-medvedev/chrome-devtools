{"version":3,"file":"freestyler-meta.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/freestyler-meta.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Root from '../../core/root/root.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as Freestyler from './freestyler.js';\n\n/*\n  * TODO(nvitkov): b/346933425\n  * Temporary string that should not be translated\n  * as they may change often during development.\n  */\nconst TempUIStrings = {\n  /**\n   * @description The title of the action for showing Freestyler panel.\n   */\n  showFreestyler: 'Show Freestyler',\n  /**\n   * @description The title of the Freestyler panel.\n   */\n  freestyler: 'Freestyler',\n  /**\n   * @description The setting title to enable the freestyler via\n   * the settings tab.\n   */\n  enableFreestyler: 'Enable Freestyler',\n  /**\n   *@description Text of a tooltip to redirect to the AI assistant panel with\n   *the current element as context\n   */\n  askFreestyler: 'Ask Freestyler',\n};\n\n// TODO(nvitkov): b/346933425\n// const str_ = i18n.i18n.registerUIStrings('panels/freestyler/freestyler-meta.ts', UIStrings);\n// const i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n/* eslint-disable  rulesdir/l10n_i18nString_call_only_with_uistrings */\nconst i18nLazyString = i18n.i18n.lockedLazyString;\n\nconst setting = 'freestyler-enabled';\n\nlet loadedFreestylerModule: (typeof Freestyler|undefined);\nasync function loadFreestylerModule(): Promise<typeof Freestyler> {\n  if (!loadedFreestylerModule) {\n    loadedFreestylerModule = await import('./freestyler.js');\n  }\n  return loadedFreestylerModule;\n}\n\nfunction isFeatureAvailable(config?: Root.Runtime.HostConfig): boolean {\n  const blockedByFeatureFlag = config?.devToolsAida ? config.devToolsAida.blockedByFeatureFlag === true :\n                                                      config?.devToolsConsoleInsights?.blockedByFeatureFlag === true;\n  return config?.devToolsFreestylerDogfood?.enabled === true && !blockedByFeatureFlag;\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.DRAWER_VIEW,\n  id: 'freestyler',\n  commandPrompt: i18nLazyString(TempUIStrings.showFreestyler),\n  title: i18nLazyString(TempUIStrings.freestyler),\n  order: 10,\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  hasToolbar: false,\n  condition: isFeatureAvailable,\n  async loadView() {\n    const Freestyler = await loadFreestylerModule();\n    return Freestyler.FreestylerPanel.instance();\n  },\n});\n\nCommon.Settings.registerSettingExtension({\n  category: Common.Settings.SettingCategory.GLOBAL,\n  settingName: setting,\n  settingType: Common.Settings.SettingType.BOOLEAN,\n  title: i18nLazyString(TempUIStrings.enableFreestyler),\n  defaultValue: isFeatureAvailable,\n  reloadRequired: true,\n  condition: isFeatureAvailable,\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'freestyler.element-panel-context',\n  contextTypes(): [] {\n    return [];\n  },\n  setting,\n  category: UI.ActionRegistration.ActionCategory.GLOBAL,\n  title: i18nLazyString(TempUIStrings.askFreestyler),\n  async loadActionDelegate() {\n    const Freestyler = await loadFreestylerModule();\n    return new Freestyler.ActionDelegate();\n  },\n  condition: isFeatureAvailable,\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'freestyler.style-tab-context',\n  contextTypes(): [] {\n    return [];\n  },\n  setting,\n  category: UI.ActionRegistration.ActionCategory.GLOBAL,\n  title: i18nLazyString(TempUIStrings.askFreestyler),\n  iconClass: UI.ActionRegistration.IconClass.SPARK,\n  async loadActionDelegate() {\n    const Freestyler = await loadFreestylerModule();\n    return new Freestyler.ActionDelegate();\n  },\n  condition: isFeatureAvailable,\n});\n"]}