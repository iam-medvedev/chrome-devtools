{"version":3,"file":"AiHistoryStorage.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/AiHistoryStorage.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  describeWithEnvironment,\n} from '../../testing/EnvironmentHelpers.js';\n\nimport * as Freestyler from './freestyler.js';\n\ndescribeWithEnvironment('Freestyler.AiHistoryStorage', () => {\n  const agent1: Freestyler.SerializedAgent = {\n    id: 'id1',\n    type: Freestyler.AgentType.FREESTYLER,\n    history: [],\n  };\n  const agent2: Freestyler.SerializedAgent = {\n    id: 'id2',\n    type: Freestyler.AgentType.DRJONES_FILE,\n    history: [],\n  };\n  const agent3: Freestyler.SerializedAgent = {\n    id: 'id3',\n    type: Freestyler.AgentType.DRJONES_NETWORK_REQUEST,\n    history: [],\n  };\n\n  afterEach(() => {\n    Freestyler.AiHistoryStorage.instance().clearForTest();\n  });\n\n  it('should create and retrieve history entry', async () => {\n    const storage = Freestyler.AiHistoryStorage.instance();\n    await storage.upsertHistoryEntry(agent1);\n    assert.deepEqual(\n        storage.getHistory(),\n        [{\n          id: 'id1',\n          type: 'freestyler' as Freestyler.AgentType,\n          history: [],\n        }],\n    );\n    await storage.upsertHistoryEntry(agent2);\n    assert.deepEqual(\n        storage.getHistory(),\n        [\n          {\n            id: 'id1',\n            type: 'freestyler' as Freestyler.AgentType,\n            history: [],\n          },\n          {\n            id: 'id2',\n            type: 'drjones-file' as Freestyler.AgentType,\n            history: [],\n          },\n        ],\n    );\n  });\n\n  it('should update history entries correctly', async () => {\n    const storage = Freestyler.AiHistoryStorage.instance();\n    await storage.upsertHistoryEntry(agent1);\n    await storage.upsertHistoryEntry(agent2);\n    await storage.upsertHistoryEntry({\n      ...agent1,\n      history: [\n        {\n          type: Freestyler.ResponseType.USER_QUERY,\n          query: 'text',\n        },\n      ],\n    });\n    assert.deepEqual(\n        storage.getHistory(),\n        [\n          {\n            id: 'id1',\n            type: 'freestyler' as Freestyler.AgentType,\n            history: [\n              {\n                type: Freestyler.ResponseType.USER_QUERY,\n                query: 'text',\n              },\n            ],\n          },\n          {\n            id: 'id2',\n            type: 'drjones-file' as Freestyler.AgentType,\n            history: [],\n          },\n        ],\n    );\n\n    await storage.upsertHistoryEntry(agent3);\n    assert.deepEqual(\n        storage.getHistory(),\n        [\n          {\n            id: 'id1',\n            type: 'freestyler' as Freestyler.AgentType,\n            history: [\n              {\n                type: Freestyler.ResponseType.USER_QUERY,\n                query: 'text',\n              },\n            ],\n          },\n          {\n            id: 'id2',\n            type: 'drjones-file' as Freestyler.AgentType,\n            history: [],\n          },\n          {\n            id: 'id3',\n            type: 'drjones-network-request' as Freestyler.AgentType,\n            history: [],\n          },\n        ],\n    );\n  });\n\n  it('should delete a single entry', async () => {\n    const storage = Freestyler.AiHistoryStorage.instance();\n    await storage.upsertHistoryEntry(agent1);\n    await storage.upsertHistoryEntry(agent2);\n    await storage.upsertHistoryEntry(agent3);\n    await storage.deleteHistoryEntry('id2');\n    assert.deepEqual(\n        storage.getHistory(),\n        [\n          {\n            id: 'id1',\n            type: 'freestyler' as Freestyler.AgentType,\n            history: [\n\n            ],\n          },\n          {\n            id: 'id3',\n            type: 'drjones-network-request' as Freestyler.AgentType,\n            history: [],\n          },\n        ],\n    );\n  });\n\n  it('should delete all entries', async () => {\n    const storage = Freestyler.AiHistoryStorage.instance();\n    await storage.upsertHistoryEntry(agent1);\n    await storage.upsertHistoryEntry(agent2);\n    await storage.upsertHistoryEntry(agent3);\n    await storage.deleteAll();\n    assert.deepEqual(\n        storage.getHistory(),\n        [],\n    );\n  });\n});\n"]}