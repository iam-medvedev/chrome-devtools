{"version":3,"file":"FreestylerPanel.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/FreestylerPanel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport {describeWithEnvironment, registerNoopActions} from '../../testing/EnvironmentHelpers.js';\n\nimport * as Freestyler from './freestyler.js';\n\nfunction getTestAidaClient() {\n  return {\n    async *\n        fetch() {\n          yield {explanation: 'test', metadata: {}};\n        },\n    registerClientEvent: sinon.spy(),\n  };\n}\n\ndescribeWithEnvironment('FreestylerPanel', () => {\n  const mockView = sinon.stub();\n\n  beforeEach(() => {\n    registerNoopActions(['elements.toggle-element-search']);\n    mockView.reset();\n  });\n\n  describe('consent view', () => {\n    it('should render consent view when the consent is not given before', async () => {\n      Common.Settings.settingForTest('freestyler-dogfood-consent-onboarding-finished').set(false);\n\n      new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      });\n\n      sinon.assert.calledWith(mockView, sinon.match({state: Freestyler.State.CONSENT_VIEW}));\n    });\n\n    it('should set the setting to true and render chat view on accept click', async () => {\n      const setting = Common.Settings.settingForTest('freestyler-dogfood-consent-onboarding-finished');\n      setting.set(false);\n\n      new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      });\n\n      const callArgs = mockView.getCall(0).args[0];\n      mockView.reset();\n      callArgs.onAcceptConsentClick();\n\n      assert.isTrue(setting.get());\n      sinon.assert.calledWith(mockView, sinon.match({state: Freestyler.State.CHAT_VIEW}));\n    });\n\n    it('should render chat view when the consent is given before', async () => {\n      Common.Settings.settingForTest('freestyler-dogfood-consent-onboarding-finished').set(true);\n\n      new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      });\n\n      sinon.assert.calledWith(mockView, sinon.match({state: Freestyler.State.CHAT_VIEW}));\n    });\n  });\n\n  describe('showConfirmSideEffectUi', () => {\n    beforeEach(() => {\n      Common.Settings.settingForTest('freestyler-dogfood-consent-onboarding-finished').set(true);\n    });\n\n    it('should render the view with confirmSideEffectDialog prop', async () => {\n      const panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      });\n\n      void panel.showConfirmSideEffectUi('code');\n\n      const lastArg = mockView.lastCall.args[0];\n      assert.exists(lastArg.confirmSideEffectDialog);\n      assert.strictEqual(lastArg.confirmSideEffectDialog.code, 'code');\n    });\n\n    it('should resolve with the result of the onAnswer call', done => {\n      const panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      });\n\n      void panel.showConfirmSideEffectUi('code').then(result => {\n        assert.isTrue(result);\n        done();\n      });\n\n      const lastArg = mockView.lastCall.args[0];\n      assert.exists(lastArg.confirmSideEffectDialog);\n      lastArg.confirmSideEffectDialog.onAnswer(true);\n    });\n  });\n\n  describe('on rate click', () => {\n    beforeEach(() => {\n      Common.Settings.settingForTest('freestyler-dogfood-consent-onboarding-finished').set(true);\n    });\n\n    afterEach(() => {\n      // @ts-expect-error global test variable\n      setFreestylerServerSideLoggingEnabled(false);\n    });\n\n    it('should allow logging if configured', () => {\n      // @ts-expect-error global test variable\n      setFreestylerServerSideLoggingEnabled(true);\n\n      const aidaClient = getTestAidaClient();\n      new Freestyler.FreestylerPanel(mockView, {\n        aidaClient,\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      });\n      const callArgs = mockView.getCall(0).args[0];\n      mockView.reset();\n      callArgs.onFeedbackSubmit(0, Host.AidaClient.Rating.POSITIVE);\n\n      sinon.assert.match(aidaClient.registerClientEvent.firstCall.firstArg, sinon.match({\n        disable_user_content_logging: false,\n      }));\n    });\n\n    it('should send POSITIVE rating to aida client when the user clicks on positive rating', () => {\n      const RPC_ID = 0;\n\n      const aidaClient = getTestAidaClient();\n      new Freestyler.FreestylerPanel(mockView, {\n        aidaClient,\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      });\n      const callArgs = mockView.getCall(0).args[0];\n      mockView.reset();\n      callArgs.onFeedbackSubmit(RPC_ID, Host.AidaClient.Rating.POSITIVE);\n\n      sinon.assert.match(aidaClient.registerClientEvent.firstCall.firstArg, sinon.match({\n        corresponding_aida_rpc_global_id: RPC_ID,\n        do_conversation_client_event: {\n          user_feedback: {\n            sentiment: 'POSITIVE',\n          },\n        },\n        disable_user_content_logging: true,\n      }));\n    });\n\n    it('should send NEGATIVE rating to aida client when the user clicks on positive rating', () => {\n      const RPC_ID = 0;\n      const aidaClient = getTestAidaClient();\n      new Freestyler.FreestylerPanel(mockView, {\n        aidaClient,\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      });\n      const callArgs = mockView.getCall(0).args[0];\n      mockView.reset();\n      callArgs.onFeedbackSubmit(RPC_ID, Host.AidaClient.Rating.NEGATIVE);\n\n      sinon.assert.match(aidaClient.registerClientEvent.firstCall.firstArg, sinon.match({\n        corresponding_aida_rpc_global_id: RPC_ID,\n        do_conversation_client_event: {\n          user_feedback: {\n            sentiment: 'NEGATIVE',\n          },\n        },\n        disable_user_content_logging: true,\n      }));\n    });\n\n    it('should send feedback text with data', () => {\n      const RPC_ID = 0;\n      const feedback = 'This helped me a ton.';\n      const aidaClient = getTestAidaClient();\n      new Freestyler.FreestylerPanel(mockView, {\n        aidaClient,\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      });\n      const callArgs = mockView.getCall(0).args[0];\n      mockView.reset();\n      callArgs.onFeedbackSubmit(RPC_ID, Host.AidaClient.Rating.POSITIVE, feedback);\n\n      sinon.assert.match(aidaClient.registerClientEvent.firstCall.firstArg, sinon.match({\n        corresponding_aida_rpc_global_id: RPC_ID,\n        do_conversation_client_event: {\n          user_feedback: {\n            sentiment: 'POSITIVE',\n            user_input: {\n              comment: feedback,\n            },\n          },\n        },\n        disable_user_content_logging: true,\n      }));\n    });\n  });\n});\n"]}