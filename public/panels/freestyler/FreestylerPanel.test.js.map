{"version":3,"file":"FreestylerPanel.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/FreestylerPanel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport {findMenuItemWithLabel, getMenu} from '../../testing/ContextMenuHelpers.js';\nimport {dispatchClickEvent} from '../../testing/DOMHelpers.js';\nimport {describeWithEnvironment, getGetHostConfigStub, registerNoopActions} from '../../testing/EnvironmentHelpers.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ElementsPanel from '../elements/elements.js';\nimport * as NetworkPanel from '../network/network.js';\nimport * as SourcesPanel from '../sources/sources.js';\nimport * as TimelinePanel from '../timeline/timeline.js';\nimport * as TimelineUtils from '../timeline/utils/utils.js';\n\nimport * as AiAgent from './AiAgent.js';\nimport * as Freestyler from './freestyler.js';\n\nfunction getTestAidaClient() {\n  return {\n    async *\n        fetch() {\n          yield {explanation: 'test', metadata: {}, completed: true};\n        },\n    registerClientEvent: sinon.spy(),\n  };\n}\n\nfunction getTestSyncInfo(): Host.InspectorFrontendHostAPI.SyncInformation {\n  return {isSyncActive: true};\n}\n\nasync function drainMicroTasks() {\n  await new Promise(resolve => setTimeout(resolve, 0));\n}\n\ndescribeWithEnvironment('FreestylerPanel', () => {\n  let mockView: sinon.SinonStub<[Freestyler.Props, unknown, HTMLElement]>;\n  let panel: Freestyler.FreestylerPanel;\n\n  beforeEach(() => {\n    mockView = sinon.stub();\n    registerNoopActions(['elements.toggle-element-search']);\n    UI.Context.Context.instance().setFlavor(ElementsPanel.ElementsPanel.ElementsPanel, null);\n    UI.Context.Context.instance().setFlavor(NetworkPanel.NetworkPanel.NetworkPanel, null);\n    UI.Context.Context.instance().setFlavor(SourcesPanel.SourcesPanel.SourcesPanel, null);\n    UI.Context.Context.instance().setFlavor(TimelinePanel.TimelinePanel.TimelinePanel, null);\n  });\n\n  afterEach(() => {\n    panel.detach();\n  });\n\n  describe('consent view', () => {\n    it('should render consent view when the consent is not given before', async () => {\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.markAsRoot();\n      panel.show(document.body);\n\n      sinon.assert.calledWith(mockView, sinon.match({state: Freestyler.State.CONSENT_VIEW}));\n    });\n\n    it('should switch from consent view to chat view when enabling setting', async () => {\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.markAsRoot();\n      panel.show(document.body);\n      sinon.assert.calledWith(mockView, sinon.match({state: Freestyler.State.CONSENT_VIEW}));\n\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      sinon.assert.calledWith(mockView, sinon.match({state: Freestyler.State.CHAT_VIEW}));\n      await drainMicroTasks();\n    });\n\n    it('should render chat view when the consent is given before', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.markAsRoot();\n      panel.show(document.body);\n\n      sinon.assert.calledWith(mockView, sinon.match({state: Freestyler.State.CHAT_VIEW}));\n    });\n\n    it('should render the consent view when the setting is disabled', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      Common.Settings.moduleSetting('ai-assistance-enabled').setDisabled(true);\n      const chatUiStates: Freestyler.State[] = [];\n      const viewStub = sinon.stub().callsFake(props => {\n        chatUiStates.push(props.state);\n      });\n\n      panel = new Freestyler.FreestylerPanel(viewStub, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.markAsRoot();\n      panel.show(document.body);\n      await drainMicroTasks();\n\n      sinon.assert.calledWith(viewStub, sinon.match({state: Freestyler.State.CONSENT_VIEW}));\n      assert.isFalse(chatUiStates.includes(Freestyler.State.CHAT_VIEW));\n      Common.Settings.moduleSetting('ai-assistance-enabled').setDisabled(false);\n    });\n\n    it('should render the consent view when blocked by age', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      const stub = getGetHostConfigStub({\n        aidaAvailability: {\n          blockedByAge: true,\n        },\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.markAsRoot();\n      panel.show(document.body);\n\n      sinon.assert.calledWith(mockView, sinon.match({state: Freestyler.State.CONSENT_VIEW}));\n      stub.restore();\n    });\n\n    it('updates when the user logs in', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.markAsRoot();\n      panel.show(document.body);\n      await drainMicroTasks();\n      sinon.assert.calledWith(mockView, sinon.match({\n        state: Freestyler.State.CHAT_VIEW,\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL,\n      }));\n      mockView.reset();\n\n      const stub = sinon.stub(Host.AidaClient.AidaClient, 'checkAccessPreconditions')\n                       .returns(Promise.resolve(Host.AidaClient.AidaAccessPreconditions.AVAILABLE));\n      Host.AidaClient.HostConfigTracker.instance().dispatchEventToListeners(\n          Host.AidaClient.Events.AIDA_AVAILABILITY_CHANGED);\n      await drainMicroTasks();\n      sinon.assert.calledWith(mockView, sinon.match({\n        state: Freestyler.State.CHAT_VIEW,\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      }));\n\n      stub.restore();\n    });\n  });\n\n  describe('on rate click', () => {\n    afterEach(() => {\n      // @ts-expect-error global test variable\n      setFreestylerServerSideLoggingEnabled(false);\n    });\n\n    it('renders a button linking to settings', () => {\n      const stub = sinon.stub(UI.ViewManager.ViewManager.instance(), 'showView');\n\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      const toolbar = panel.contentElement.querySelector('.freestyler-right-toolbar');\n      const button = toolbar!.shadowRoot!.querySelector('devtools-button[aria-label=\\'Settings\\']');\n      assert.instanceOf(button, HTMLElement);\n      button.click();\n      assert.isTrue(stub.calledWith('chrome-ai'));\n      stub.restore();\n    });\n\n    it('should allow logging if configured', () => {\n      // @ts-expect-error global test variable\n      setFreestylerServerSideLoggingEnabled(true);\n      const stub = getGetHostConfigStub({\n        aidaAvailability: {\n          disallowLogging: false,\n        },\n      });\n\n      const aidaClient = getTestAidaClient();\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient,\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.markAsRoot();\n      panel.show(document.body);\n      const callArgs = mockView.getCall(0)?.args[0];\n      mockView.reset();\n      callArgs.onFeedbackSubmit(0, Host.AidaClient.Rating.POSITIVE);\n\n      sinon.assert.match(aidaClient.registerClientEvent.firstCall.firstArg, sinon.match({\n        disable_user_content_logging: false,\n      }));\n      stub.restore();\n    });\n\n    it('should send POSITIVE rating to aida client when the user clicks on positive rating', () => {\n      const RPC_ID = 0;\n\n      const aidaClient = getTestAidaClient();\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient,\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.markAsRoot();\n      panel.show(document.body);\n      const callArgs = mockView.getCall(0).args[0];\n      mockView.reset();\n      callArgs.onFeedbackSubmit(RPC_ID, Host.AidaClient.Rating.POSITIVE);\n\n      sinon.assert.match(aidaClient.registerClientEvent.firstCall.firstArg, sinon.match({\n        corresponding_aida_rpc_global_id: RPC_ID,\n        do_conversation_client_event: {\n          user_feedback: {\n            sentiment: 'POSITIVE',\n          },\n        },\n        disable_user_content_logging: true,\n      }));\n    });\n\n    it('should send NEGATIVE rating to aida client when the user clicks on positive rating', () => {\n      const RPC_ID = 0;\n      const aidaClient = getTestAidaClient();\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient,\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.markAsRoot();\n      panel.show(document.body);\n      const callArgs = mockView.getCall(0).args[0];\n      mockView.reset();\n      callArgs.onFeedbackSubmit(RPC_ID, Host.AidaClient.Rating.NEGATIVE);\n\n      sinon.assert.match(aidaClient.registerClientEvent.firstCall.firstArg, sinon.match({\n        corresponding_aida_rpc_global_id: RPC_ID,\n        do_conversation_client_event: {\n          user_feedback: {\n            sentiment: 'NEGATIVE',\n          },\n        },\n        disable_user_content_logging: true,\n      }));\n    });\n\n    it('should send feedback text with data', () => {\n      const RPC_ID = 0;\n      const feedback = 'This helped me a ton.';\n      const aidaClient = getTestAidaClient();\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient,\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.markAsRoot();\n      panel.show(document.body);\n      const callArgs = mockView.getCall(0).args[0];\n      mockView.reset();\n      callArgs.onFeedbackSubmit(RPC_ID, Host.AidaClient.Rating.POSITIVE, feedback);\n\n      sinon.assert.match(aidaClient.registerClientEvent.firstCall.firstArg, sinon.match({\n        corresponding_aida_rpc_global_id: RPC_ID,\n        do_conversation_client_event: {\n          user_feedback: {\n            sentiment: 'POSITIVE',\n            user_input: {\n              comment: feedback,\n            },\n          },\n        },\n        disable_user_content_logging: true,\n      }));\n    });\n  });\n\n  describe('flavor change listeners', () => {\n    describe('SDK.DOMModel.DOMNode flavor changes for selected element', () => {\n      it('should set the selected element when the widget is shown', () => {\n        UI.Context.Context.instance().setFlavor(SDK.DOMModel.DOMNode, null);\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        const node = sinon.createStubInstance(SDK.DOMModel.DOMNode, {\n          nodeType: Node.ELEMENT_NODE,\n        });\n        UI.Context.Context.instance().setFlavor(SDK.DOMModel.DOMNode, node);\n        panel.markAsRoot();\n        panel.show(document.body);\n        panel.handleAction('freestyler.elements-floating-button');\n\n        sinon.assert.calledWith(mockView, sinon.match({\n          selectedContext: new Freestyler.NodeContext(node),\n        }));\n      });\n\n      it('should update the selected element when the changed DOMNode flavor is an ELEMENT_NODE', () => {\n        UI.Context.Context.instance().setFlavor(SDK.DOMModel.DOMNode, null);\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n        panel.markAsRoot();\n        panel.show(document.body);\n        panel.handleAction('freestyler.elements-floating-button');\n        sinon.assert.calledWith(mockView, sinon.match({\n          selectedContext: null,\n        }));\n\n        const node = sinon.createStubInstance(SDK.DOMModel.DOMNode, {\n          nodeType: Node.ELEMENT_NODE,\n        });\n        UI.Context.Context.instance().setFlavor(SDK.DOMModel.DOMNode, node);\n\n        sinon.assert.calledWith(mockView, sinon.match({\n          selectedContext: new Freestyler.NodeContext(node),\n        }));\n      });\n\n      it('should set selected element to null when the change DOMNode flavor is not an ELEMENT_NODE', () => {\n        UI.Context.Context.instance().setFlavor(SDK.DOMModel.DOMNode, null);\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n        panel.markAsRoot();\n        panel.show(document.body);\n        panel.handleAction('freestyler.elements-floating-button');\n        sinon.assert.calledWith(mockView, sinon.match({\n          selectedContext: null,\n        }));\n\n        const node = sinon.createStubInstance(SDK.DOMModel.DOMNode, {\n          nodeType: Node.COMMENT_NODE,\n        });\n        UI.Context.Context.instance().setFlavor(SDK.DOMModel.DOMNode, node);\n\n        sinon.assert.calledWith(mockView, sinon.match({\n          selectedContext: null,\n        }));\n      });\n\n      it('should not handle DOMNode flavor changes if the widget is not shown', () => {\n        UI.Context.Context.instance().setFlavor(SDK.DOMModel.DOMNode, null);\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        const node = sinon.createStubInstance(SDK.DOMModel.DOMNode, {\n          nodeType: Node.ELEMENT_NODE,\n        });\n        UI.Context.Context.instance().setFlavor(SDK.DOMModel.DOMNode, node);\n\n        sinon.assert.notCalled(mockView);\n      });\n    });\n\n    describe('SDK.NetworkRequest.NetworkRequest flavor changes for selected network request', () => {\n      it('should set the selected network request when the widget is shown', () => {\n        UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, null);\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        const networkRequest = sinon.createStubInstance(SDK.NetworkRequest.NetworkRequest);\n        UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest);\n        panel.markAsRoot();\n        panel.show(document.body);\n        panel.handleAction('drjones.network-floating-button');\n\n        sinon.assert.calledWith(mockView, sinon.match({\n          selectedContext: new Freestyler.RequestContext(networkRequest),\n        }));\n      });\n\n      it('should set selected network request when the NetworkRequest flavor changes', () => {\n        UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, null);\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n        panel.markAsRoot();\n        panel.show(document.body);\n        panel.handleAction('drjones.network-floating-button');\n        sinon.assert.calledWith(mockView, sinon.match({\n          selectedContext: null,\n        }));\n\n        const networkRequest = sinon.createStubInstance(SDK.NetworkRequest.NetworkRequest);\n        UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest);\n\n        sinon.assert.calledWith(mockView, sinon.match({\n          selectedContext: new Freestyler.RequestContext(networkRequest),\n        }));\n      });\n\n      it('should not handle NetworkRequest flavor changes if the widget is not shown', () => {\n        UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, null);\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        const networkRequest = sinon.createStubInstance(SDK.NetworkRequest.NetworkRequest);\n        UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest);\n\n        sinon.assert.notCalled(mockView);\n      });\n    });\n\n    describe('TimelineUtils.AICallTree.AICallTree flavor changes for selected call tree', () => {\n      it('should set the selected call tree when the widget is shown', () => {\n        UI.Context.Context.instance().setFlavor(TimelineUtils.AICallTree.AICallTree, null);\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        const selectedAiCallTree = {};\n        UI.Context.Context.instance().setFlavor(TimelineUtils.AICallTree.AICallTree, selectedAiCallTree);\n        panel.markAsRoot();\n        panel.show(document.body);\n        panel.handleAction('drjones.performance-panel-context');\n\n        sinon.assert.calledWith(mockView, sinon.match({\n          selectedContext: new Freestyler.CallTreeContext(selectedAiCallTree as TimelineUtils.AICallTree.AICallTree),\n        }));\n      });\n\n      it('should set selected call tree when the AICallTree flavor changes', () => {\n        UI.Context.Context.instance().setFlavor(TimelineUtils.AICallTree.AICallTree, null);\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n        panel.markAsRoot();\n        panel.show(document.body);\n        panel.handleAction('drjones.performance-panel-context');\n        sinon.assert.calledWith(mockView, sinon.match({\n          selectedContext: null,\n        }));\n\n        const selectedAiCallTree = {};\n        UI.Context.Context.instance().setFlavor(TimelineUtils.AICallTree.AICallTree, selectedAiCallTree);\n\n        sinon.assert.calledWith(mockView, sinon.match({\n          selectedContext: new Freestyler.CallTreeContext(selectedAiCallTree as TimelineUtils.AICallTree.AICallTree),\n        }));\n      });\n\n      it('should not handle AICallTree flavor changes if the widget is not shown', () => {\n        UI.Context.Context.instance().setFlavor(TimelineUtils.AICallTree.AICallTree, null);\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        const selectedAiCallTree = {};\n        UI.Context.Context.instance().setFlavor(TimelineUtils.AICallTree.AICallTree, selectedAiCallTree);\n\n        sinon.assert.notCalled(mockView);\n      });\n    });\n\n    describe('Workspace.UISourceCode.UISourceCode flavor changes for selected network request', () => {\n      it('should set selected file when the widget is shown', () => {\n        UI.Context.Context.instance().setFlavor(Workspace.UISourceCode.UISourceCode, null);\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        const uiSourceCode = sinon.createStubInstance(Workspace.UISourceCode.UISourceCode);\n        UI.Context.Context.instance().setFlavor(Workspace.UISourceCode.UISourceCode, uiSourceCode);\n        panel.markAsRoot();\n        panel.show(document.body);\n        panel.handleAction('drjones.sources-panel-context');\n\n        sinon.assert.calledWith(mockView, sinon.match({\n          selectedContext: new Freestyler.FileContext(uiSourceCode),\n        }));\n      });\n\n      it('should set selected file when the UISourceCode flavor changes', () => {\n        UI.Context.Context.instance().setFlavor(Workspace.UISourceCode.UISourceCode, null);\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n        panel.markAsRoot();\n        panel.show(document.body);\n        panel.handleAction('drjones.sources-panel-context');\n        sinon.assert.calledWith(mockView, sinon.match({\n          selectedContext: null,\n        }));\n\n        const uiSourceCode = sinon.createStubInstance(Workspace.UISourceCode.UISourceCode);\n        UI.Context.Context.instance().setFlavor(Workspace.UISourceCode.UISourceCode, uiSourceCode);\n\n        sinon.assert.calledWith(mockView, sinon.match({\n          selectedContext: new Freestyler.FileContext(uiSourceCode),\n        }));\n      });\n\n      it('should not handle NetworkRequest flavor changes if the widget is not shown', () => {\n        UI.Context.Context.instance().setFlavor(Workspace.UISourceCode.UISourceCode, null);\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        const uiSourceCode = sinon.createStubInstance(Workspace.UISourceCode.UISourceCode);\n        UI.Context.Context.instance().setFlavor(Workspace.UISourceCode.UISourceCode, uiSourceCode);\n\n        sinon.assert.notCalled(mockView);\n      });\n    });\n  });\n\n  describe('toggle search element action', () => {\n    let toggleSearchElementAction: UI.ActionRegistration.Action;\n    beforeEach(() => {\n      toggleSearchElementAction =\n          UI.ActionRegistry.ActionRegistry.instance().getAction('elements.toggle-element-search');\n      toggleSearchElementAction.setToggled(false);\n    });\n\n    it('should set inspectElementToggled when the widget is shown', () => {\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n\n      toggleSearchElementAction.setToggled(true);\n      panel.markAsRoot();\n      panel.show(document.body);\n\n      sinon.assert.calledWith(mockView, sinon.match({\n        inspectElementToggled: true,\n      }));\n    });\n\n    it('should update inspectElementToggled when the action is toggled', () => {\n      toggleSearchElementAction.setToggled(false);\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.markAsRoot();\n      panel.show(document.body);\n      sinon.assert.calledWith(mockView, sinon.match({\n        inspectElementToggled: false,\n      }));\n\n      toggleSearchElementAction.setToggled(true);\n\n      sinon.assert.calledWith(mockView, sinon.match({\n        inspectElementToggled: true,\n      }));\n    });\n\n    it('should not update toggleSearchElementAction even after the action is toggled when the widget is not shown',\n       () => {\n         toggleSearchElementAction.setToggled(false);\n         panel = new Freestyler.FreestylerPanel(mockView, {\n           aidaClient: getTestAidaClient(),\n           aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n           syncInfo: getTestSyncInfo(),\n         });\n\n         toggleSearchElementAction.setToggled(true);\n\n         sinon.assert.notCalled(mockView);\n       });\n  });\n\n  describe('history interactions', () => {\n    it('should have empty messages after new chat', async () => {\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.handleAction('freestyler.elements-floating-button');\n      mockView.lastCall.args[0].onTextSubmit('test');\n      await drainMicroTasks();\n\n      assert.deepEqual(mockView.lastCall.args[0].messages, [\n        {\n          entity: Freestyler.ChatMessageEntity.USER,\n          text: 'test',\n        },\n        {\n          answer: 'test',\n          entity: Freestyler.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n      const toolbar = panel.contentElement.querySelector('.freestyler-left-toolbar');\n      const button = toolbar!.shadowRoot!.querySelector('devtools-button[aria-label=\\'New chat\\']');\n      assert.instanceOf(button, HTMLElement);\n      dispatchClickEvent(button);\n      assert.deepEqual(mockView.lastCall.args[0].messages, []);\n    });\n\n    it('should select default agent after new chat', async () => {\n      const stub = getGetHostConfigStub({\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.handleAction('freestyler.elements-floating-button');\n      mockView.lastCall.args[0].onTextSubmit('test');\n      await drainMicroTasks();\n      UI.Context.Context.instance().setFlavor(\n          ElementsPanel.ElementsPanel.ElementsPanel,\n          sinon.createStubInstance(ElementsPanel.ElementsPanel.ElementsPanel));\n\n      assert.deepEqual(mockView.lastCall.args[0].messages, [\n        {\n          entity: Freestyler.ChatMessageEntity.USER,\n          text: 'test',\n        },\n        {\n          answer: 'test',\n          entity: Freestyler.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n      const toolbar = panel.contentElement.querySelector('.freestyler-left-toolbar');\n      const button = toolbar!.shadowRoot!.querySelector('devtools-button[aria-label=\\'New chat\\']');\n      assert.instanceOf(button, HTMLElement);\n      dispatchClickEvent(button);\n      assert.deepEqual(mockView.lastCall.args[0].messages, []);\n      assert.deepEqual(mockView.lastCall.args[0].agentType, AiAgent.AgentType.FREESTYLER);\n      stub.restore();\n    });\n\n    it('should switch agents and restore history', async () => {\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.handleAction('freestyler.elements-floating-button');\n      mockView.lastCall.args[0].onTextSubmit('User question to Freestyler?');\n      await drainMicroTasks();\n      assert.deepEqual(mockView.lastCall.args[0].messages, [\n        {\n          entity: Freestyler.ChatMessageEntity.USER,\n          text: 'User question to Freestyler?',\n        },\n        {\n          answer: 'test',\n          entity: Freestyler.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      panel.handleAction('drjones.network-floating-button');\n      mockView.lastCall.args[0].onTextSubmit('User question to DrJones?');\n      await drainMicroTasks();\n      assert.deepEqual(mockView.lastCall.args[0].messages, [\n        {\n          entity: Freestyler.ChatMessageEntity.USER,\n          text: 'User question to DrJones?',\n        },\n        {\n          answer: 'test',\n          entity: Freestyler.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      const toolbar = panel.contentElement.querySelector('.freestyler-left-toolbar');\n      const button = toolbar!.shadowRoot!.querySelector('devtools-button[aria-label=\\'History\\']');\n      assert.instanceOf(button, HTMLElement);\n      const contextMenu = getMenu(() => {\n        dispatchClickEvent(button);\n      });\n      const freestylerEntry = findMenuItemWithLabel(contextMenu.defaultSection(), 'User question to Freestyler?')!;\n      assert.isDefined(freestylerEntry);\n      contextMenu.invokeHandler(freestylerEntry.id());\n\n      await drainMicroTasks();\n      assert.deepEqual(mockView.lastCall.args[0].messages, [\n        {\n          entity: Freestyler.ChatMessageEntity.USER,\n          text: 'User question to Freestyler?',\n        },\n        {\n          answer: 'test',\n          entity: Freestyler.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n    });\n  });\n\n  it('should have empty state after clear chat', async () => {\n    panel = new Freestyler.FreestylerPanel(mockView, {\n      aidaClient: getTestAidaClient(),\n      aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      syncInfo: getTestSyncInfo(),\n    });\n    panel.handleAction('freestyler.elements-floating-button');\n    mockView.lastCall.args[0].onTextSubmit('test');\n    await drainMicroTasks();\n\n    assert.deepEqual(mockView.lastCall.args[0].messages, [\n      {\n        entity: Freestyler.ChatMessageEntity.USER,\n        text: 'test',\n      },\n      {\n        answer: 'test',\n        entity: Freestyler.ChatMessageEntity.MODEL,\n        rpcId: undefined,\n        suggestions: undefined,\n        steps: [],\n      },\n    ]);\n    const toolbar = panel.contentElement.querySelector('.freestyler-left-toolbar');\n    const button = toolbar!.shadowRoot!.querySelector('devtools-button[aria-label=\\'Delete local chat\\']');\n    assert.instanceOf(button, HTMLElement);\n    dispatchClickEvent(button);\n    assert.deepEqual(mockView.lastCall.args[0].messages, []);\n    assert.deepEqual(mockView.lastCall.args[0].agentType, undefined);\n  });\n\n  it('should select default agent based on open panel after clearing the chat', async () => {\n    const stub = getGetHostConfigStub({\n      devToolsFreestyler: {\n        enabled: true,\n      },\n    });\n    panel = new Freestyler.FreestylerPanel(mockView, {\n      aidaClient: getTestAidaClient(),\n      aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      syncInfo: getTestSyncInfo(),\n    });\n    panel.handleAction('freestyler.elements-floating-button');\n    mockView.lastCall.args[0].onTextSubmit('test');\n    await drainMicroTasks();\n\n    UI.Context.Context.instance().setFlavor(\n        ElementsPanel.ElementsPanel.ElementsPanel, sinon.createStubInstance(ElementsPanel.ElementsPanel.ElementsPanel));\n    assert.deepEqual(mockView.lastCall.args[0].messages, [\n      {\n        entity: Freestyler.ChatMessageEntity.USER,\n        text: 'test',\n      },\n      {\n        answer: 'test',\n        entity: Freestyler.ChatMessageEntity.MODEL,\n        rpcId: undefined,\n        suggestions: undefined,\n        steps: [],\n      },\n    ]);\n    const toolbar = panel.contentElement.querySelector('.freestyler-left-toolbar');\n    const button = toolbar!.shadowRoot!.querySelector('devtools-button[aria-label=\\'Delete local chat\\']');\n    assert.instanceOf(button, HTMLElement);\n    dispatchClickEvent(button);\n    assert.deepEqual(mockView.lastCall.args[0].messages, []);\n    assert.deepEqual(mockView.lastCall.args[0].agentType, AiAgent.AgentType.FREESTYLER);\n    stub.restore();\n  });\n\n  it('should have empty state after clear chat history', async () => {\n    panel = new Freestyler.FreestylerPanel(mockView, {\n      aidaClient: getTestAidaClient(),\n      aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      syncInfo: getTestSyncInfo(),\n    });\n    panel.handleAction('freestyler.elements-floating-button');\n    mockView.lastCall.args[0].onTextSubmit('User question to Freestyler?');\n    await drainMicroTasks();\n    assert.deepEqual(mockView.lastCall.args[0].messages, [\n      {\n        entity: Freestyler.ChatMessageEntity.USER,\n        text: 'User question to Freestyler?',\n      },\n      {\n        answer: 'test',\n        entity: Freestyler.ChatMessageEntity.MODEL,\n        rpcId: undefined,\n        suggestions: undefined,\n        steps: [],\n      },\n    ]);\n\n    panel.handleAction('drjones.network-floating-button');\n    mockView.lastCall.args[0].onTextSubmit('User question to DrJones?');\n    await drainMicroTasks();\n    assert.deepEqual(mockView.lastCall.args[0].messages, [\n      {\n        entity: Freestyler.ChatMessageEntity.USER,\n        text: 'User question to DrJones?',\n      },\n      {\n        answer: 'test',\n        entity: Freestyler.ChatMessageEntity.MODEL,\n        rpcId: undefined,\n        suggestions: undefined,\n        steps: [],\n      },\n    ]);\n\n    let toolbar = panel.contentElement.querySelector('.freestyler-left-toolbar');\n    let button = toolbar!.shadowRoot!.querySelector('devtools-button[aria-label=\\'History\\']');\n    assert.instanceOf(button, HTMLElement);\n    let contextMenu = getMenu(() => {\n      dispatchClickEvent(button!);\n    });\n    const clearAll = findMenuItemWithLabel(contextMenu.footerSection(), 'Clear local chats')!;\n    assert.isDefined(clearAll);\n    contextMenu.invokeHandler(clearAll.id());\n    await drainMicroTasks();\n    assert.deepEqual(mockView.lastCall.args[0].messages, []);\n    assert.deepEqual(mockView.lastCall.args[0].agentType, undefined);\n\n    await drainMicroTasks();\n    contextMenu.discard();\n    await drainMicroTasks();\n\n    toolbar = panel.contentElement.querySelector('.freestyler-left-toolbar');\n    button = toolbar!.shadowRoot!.querySelector('devtools-button[aria-label=\\'History\\']');\n    assert.instanceOf(button, HTMLElement);\n    contextMenu = getMenu(() => {\n      dispatchClickEvent(button);\n    });\n    const menuItem = findMenuItemWithLabel(contextMenu.defaultSection(), 'No past conversations');\n    assert(menuItem);\n  });\n\n  describe('cross-origin', () => {\n    it('blocks input on cross origin requests', async () => {\n      const networkRequest = sinon.createStubInstance(SDK.NetworkRequest.NetworkRequest, {\n        url: 'https://a.test' as Platform.DevToolsPath.UrlString,\n      });\n      UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest);\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      panel.markAsRoot();\n      panel.show(document.body);\n      panel.handleAction('drjones.network-floating-button');\n\n      sinon.assert.calledWith(mockView, sinon.match({\n        selectedContext: new Freestyler.RequestContext(networkRequest),\n        blockedByCrossOrigin: false,\n      }));\n\n      // Send a query for https://a.test.\n      panel.handleAction('drjones.network-floating-button');\n      mockView.lastCall.args[0].onTextSubmit('test');\n      await drainMicroTasks();\n\n      // Change context to https://b.test.\n      const networkRequest2 = sinon.createStubInstance(SDK.NetworkRequest.NetworkRequest, {\n        url: 'https://b.test' as Platform.DevToolsPath.UrlString,\n      });\n      UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest2);\n      panel.handleAction('drjones.network-floating-button');\n      await drainMicroTasks();\n\n      sinon.assert.calledWith(mockView, sinon.match({\n        selectedContext: new Freestyler.RequestContext(networkRequest2),\n        blockedByCrossOrigin: true,\n      }));\n    });\n\n    it('should be able to continue same-origin requests', async () => {\n      const stub = getGetHostConfigStub({\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n      panel = new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n        syncInfo: getTestSyncInfo(),\n      });\n      UI.Context.Context.instance().setFlavor(\n          ElementsPanel.ElementsPanel.ElementsPanel,\n          sinon.createStubInstance(ElementsPanel.ElementsPanel.ElementsPanel));\n\n      panel.handleAction('freestyler.elements-floating-button');\n      mockView.lastCall.args[0].onTextSubmit('test');\n      await drainMicroTasks();\n\n      assert.deepEqual(mockView.lastCall.args[0].messages, [\n        {\n          entity: Freestyler.ChatMessageEntity.USER,\n          text: 'test',\n        },\n        {\n          answer: 'test',\n          entity: Freestyler.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      UI.Context.Context.instance().setFlavor(\n          ElementsPanel.ElementsPanel.ElementsPanel,\n          sinon.createStubInstance(ElementsPanel.ElementsPanel.ElementsPanel));\n\n      panel.handleAction('freestyler.elements-floating-button');\n      mockView.lastCall.args[0].onTextSubmit('test2');\n      await drainMicroTasks();\n\n      assert.strictEqual(mockView.lastCall.args[0].isReadOnly, false);\n      assert.deepEqual(mockView.lastCall.args[0].messages, [\n        {\n          entity: Freestyler.ChatMessageEntity.USER,\n          text: 'test',\n        },\n        {\n          answer: 'test',\n          entity: Freestyler.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n        {\n          entity: Freestyler.ChatMessageEntity.USER,\n          text: 'test2',\n        },\n        {\n          answer: 'test',\n          entity: Freestyler.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      stub.restore();\n    });\n  });\n\n  describe('auto agent selection for panels', () => {\n    describe('Elements panel', () => {\n      it('should select FREESTYLER agent when the Elements panel is open in initial render', () => {\n        const stub = getGetHostConfigStub({\n          devToolsFreestyler: {\n            enabled: true,\n          },\n        });\n        UI.Context.Context.instance().setFlavor(\n            ElementsPanel.ElementsPanel.ElementsPanel,\n            sinon.createStubInstance(ElementsPanel.ElementsPanel.ElementsPanel));\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        panel.markAsRoot();\n        panel.show(document.body);\n\n        sinon.assert.calledWith(mockView, sinon.match({\n          agentType: AiAgent.AgentType.FREESTYLER,\n        }));\n        stub.restore();\n      });\n\n      it('should update to no agent state when the Elements panel is closed and no other panels are open', () => {\n        const stub = getGetHostConfigStub({\n          devToolsFreestyler: {\n            enabled: true,\n          },\n        });\n        UI.Context.Context.instance().setFlavor(\n            ElementsPanel.ElementsPanel.ElementsPanel,\n            sinon.createStubInstance(ElementsPanel.ElementsPanel.ElementsPanel));\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        panel.markAsRoot();\n        panel.show(document.body);\n        sinon.assert.calledWith(mockView, sinon.match({\n          agentType: AiAgent.AgentType.FREESTYLER,\n        }));\n\n        UI.Context.Context.instance().setFlavor(ElementsPanel.ElementsPanel.ElementsPanel, null);\n        assert.deepStrictEqual(mockView.lastCall.args[0].agentType, undefined);\n        stub.restore();\n      });\n\n      it('should render no agent state when Elements panel is open but Freestyler is not enabled', () => {\n        const stub = getGetHostConfigStub({\n          devToolsFreestyler: {\n            enabled: false,\n          },\n        });\n        UI.Context.Context.instance().setFlavor(\n            ElementsPanel.ElementsPanel.ElementsPanel,\n            sinon.createStubInstance(ElementsPanel.ElementsPanel.ElementsPanel));\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        panel.markAsRoot();\n        panel.show(document.body);\n\n        assert.deepStrictEqual(mockView.lastCall.args[0].agentType, undefined);\n        stub.restore();\n      });\n    });\n\n    describe('Network panel', () => {\n      it('should select DRJONES_NETWORK agent when the Network panel is open in initial render', () => {\n        const stub = getGetHostConfigStub({\n          devToolsAiAssistanceNetworkAgent: {\n            enabled: true,\n          },\n        });\n        UI.Context.Context.instance().setFlavor(\n            NetworkPanel.NetworkPanel.NetworkPanel, sinon.createStubInstance(NetworkPanel.NetworkPanel.NetworkPanel));\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        panel.markAsRoot();\n        panel.show(document.body);\n\n        sinon.assert.calledWith(mockView, sinon.match({\n          agentType: AiAgent.AgentType.DRJONES_NETWORK_REQUEST,\n        }));\n        stub.restore();\n      });\n\n      it('should update to no agent state when the Network panel is closed and no other panels are open', () => {\n        const stub = getGetHostConfigStub({\n          devToolsAiAssistanceNetworkAgent: {\n            enabled: true,\n          },\n        });\n        UI.Context.Context.instance().setFlavor(\n            NetworkPanel.NetworkPanel.NetworkPanel, sinon.createStubInstance(NetworkPanel.NetworkPanel.NetworkPanel));\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        panel.markAsRoot();\n        panel.show(document.body);\n        sinon.assert.calledWith(mockView, sinon.match({\n          agentType: AiAgent.AgentType.DRJONES_NETWORK_REQUEST,\n        }));\n\n        UI.Context.Context.instance().setFlavor(NetworkPanel.NetworkPanel.NetworkPanel, null);\n        assert.deepStrictEqual(mockView.lastCall.args[0].agentType, undefined);\n        stub.restore();\n      });\n\n      it('should render no agent state when Network panel is open but devToolsAiAssistanceNetworkAgent is not enabled',\n         () => {\n           const stub = getGetHostConfigStub({\n             devToolsAiAssistanceNetworkAgent: {\n               enabled: false,\n             },\n           });\n           UI.Context.Context.instance().setFlavor(\n               NetworkPanel.NetworkPanel.NetworkPanel,\n               sinon.createStubInstance(NetworkPanel.NetworkPanel.NetworkPanel));\n           panel = new Freestyler.FreestylerPanel(mockView, {\n             aidaClient: getTestAidaClient(),\n             aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n             syncInfo: getTestSyncInfo(),\n           });\n\n           panel.markAsRoot();\n           panel.show(document.body);\n\n           assert.deepStrictEqual(mockView.lastCall.args[0].agentType, undefined);\n           stub.restore();\n         });\n    });\n\n    describe('Sources panel', () => {\n      it('should select DRJONES_FILE agent when the Sources panel is open in initial render', () => {\n        const stub = getGetHostConfigStub({\n          devToolsAiAssistanceFileAgent: {\n            enabled: true,\n          },\n        });\n        UI.Context.Context.instance().setFlavor(\n            SourcesPanel.SourcesPanel.SourcesPanel, sinon.createStubInstance(SourcesPanel.SourcesPanel.SourcesPanel));\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        panel.markAsRoot();\n        panel.show(document.body);\n\n        sinon.assert.calledWith(mockView, sinon.match({\n          agentType: AiAgent.AgentType.DRJONES_FILE,\n        }));\n        stub.restore();\n      });\n\n      it('should update to no agent state when the Sources panel is closed and no other panels are open', () => {\n        const stub = getGetHostConfigStub({\n          devToolsAiAssistanceFileAgent: {\n            enabled: true,\n          },\n        });\n        UI.Context.Context.instance().setFlavor(\n            SourcesPanel.SourcesPanel.SourcesPanel, sinon.createStubInstance(SourcesPanel.SourcesPanel.SourcesPanel));\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        panel.markAsRoot();\n        panel.show(document.body);\n        sinon.assert.calledWith(mockView, sinon.match({\n          agentType: AiAgent.AgentType.DRJONES_FILE,\n        }));\n\n        UI.Context.Context.instance().setFlavor(SourcesPanel.SourcesPanel.SourcesPanel, null);\n        assert.deepStrictEqual(mockView.lastCall.args[0].agentType, undefined);\n        stub.restore();\n      });\n\n      it('should render no agent state when Sources panel is open but devToolsAiAssistanceFileAgent is not enabled',\n         () => {\n           const stub = getGetHostConfigStub({\n             devToolsAiAssistanceFileAgent: {\n               enabled: false,\n             },\n           });\n           UI.Context.Context.instance().setFlavor(\n               SourcesPanel.SourcesPanel.SourcesPanel,\n               sinon.createStubInstance(SourcesPanel.SourcesPanel.SourcesPanel));\n           panel = new Freestyler.FreestylerPanel(mockView, {\n             aidaClient: getTestAidaClient(),\n             aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n             syncInfo: getTestSyncInfo(),\n           });\n\n           panel.markAsRoot();\n           panel.show(document.body);\n\n           assert.deepStrictEqual(mockView.lastCall.args[0].agentType, undefined);\n           stub.restore();\n         });\n    });\n\n    describe('Performance panel', () => {\n      it('should select DRJONES_PERFORMANCE agent when the Performance panel is open in initial render', () => {\n        const stub = getGetHostConfigStub({\n          devToolsAiAssistancePerformanceAgent: {\n            enabled: true,\n          },\n        });\n        UI.Context.Context.instance().setFlavor(\n            TimelinePanel.TimelinePanel.TimelinePanel,\n            sinon.createStubInstance(TimelinePanel.TimelinePanel.TimelinePanel));\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        panel.markAsRoot();\n        panel.show(document.body);\n\n        sinon.assert.calledWith(mockView, sinon.match({\n          agentType: AiAgent.AgentType.DRJONES_PERFORMANCE,\n        }));\n        stub.restore();\n      });\n\n      it('should update to no agent state when the Performance panel is closed and no other panels are open', () => {\n        const stub = getGetHostConfigStub({\n          devToolsAiAssistancePerformanceAgent: {\n            enabled: true,\n          },\n        });\n        UI.Context.Context.instance().setFlavor(\n            TimelinePanel.TimelinePanel.TimelinePanel,\n            sinon.createStubInstance(TimelinePanel.TimelinePanel.TimelinePanel));\n        panel = new Freestyler.FreestylerPanel(mockView, {\n          aidaClient: getTestAidaClient(),\n          aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n          syncInfo: getTestSyncInfo(),\n        });\n\n        panel.markAsRoot();\n        panel.show(document.body);\n        sinon.assert.calledWith(mockView, sinon.match({\n          agentType: AiAgent.AgentType.DRJONES_PERFORMANCE,\n        }));\n\n        UI.Context.Context.instance().setFlavor(TimelinePanel.TimelinePanel.TimelinePanel, null);\n        assert.deepStrictEqual(mockView.lastCall.args[0].agentType, undefined);\n        stub.restore();\n      });\n\n      it('should render no agent state when Performance panel is open but devToolsAiAssistancePerformanceAgent is not enabled',\n         () => {\n           const stub = getGetHostConfigStub({\n             devToolsAiAssistancePerformanceAgent: {\n               enabled: false,\n             },\n           });\n           UI.Context.Context.instance().setFlavor(\n               TimelinePanel.TimelinePanel.TimelinePanel,\n               sinon.createStubInstance(TimelinePanel.TimelinePanel.TimelinePanel));\n           panel = new Freestyler.FreestylerPanel(mockView, {\n             aidaClient: getTestAidaClient(),\n             aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n             syncInfo: getTestSyncInfo(),\n           });\n\n           panel.markAsRoot();\n           panel.show(document.body);\n\n           assert.deepStrictEqual(mockView.lastCall.args[0].agentType, undefined);\n           stub.restore();\n         });\n    });\n  });\n\n  it('erases previous partial response on blocked error', async () => {\n    async function* generateAnswerAndError() {\n      yield {\n        explanation: 'ANSWER: This is the first part of the answer.',\n        metadata: {},\n        completed: false,\n      };\n      throw new Host.AidaClient.AidaBlockError();\n    }\n\n    const mockAidaClient = {\n      fetch: generateAnswerAndError,\n      registerClientEvent: sinon.spy(),\n    };\n\n    const messages: Freestyler.ModelChatMessage[] = [];\n    const viewMock = sinon.stub().callsFake((props: Freestyler.Props) => {\n      messages.push(JSON.parse(JSON.stringify(props.messages[1])));\n    });\n\n    panel = new Freestyler.FreestylerPanel(viewMock, {\n      aidaClient: mockAidaClient,\n      aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      syncInfo: getTestSyncInfo(),\n    });\n    panel.handleAction('freestyler.elements-floating-button');\n    viewMock.lastCall.args[0].onTextSubmit('test');\n    await drainMicroTasks();\n\n    assert.strictEqual(messages[2].answer, 'This is the first part of the answer.');\n    assert.isUndefined(messages[2].error);\n    assert.isUndefined(messages[3].answer);\n    assert.strictEqual(messages[3].error, 'block');\n  });\n});\n"]}