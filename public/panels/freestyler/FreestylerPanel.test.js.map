{"version":3,"file":"FreestylerPanel.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/FreestylerPanel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport {describeWithEnvironment, registerNoopActions} from '../../testing/EnvironmentHelpers.js';\n\nimport * as Freestyler from './freestyler.js';\n\nfunction getTestAidaClient() {\n  return {\n    async *\n        fetch() {\n          yield {explanation: 'test', metadata: {}};\n        },\n  };\n}\n\ndescribeWithEnvironment('FreestylerPanel', () => {\n  describe('consent view', () => {\n    const mockView = sinon.stub();\n\n    beforeEach(() => {\n      registerNoopActions(['elements.toggle-element-search']);\n      mockView.reset();\n    });\n\n    it('should render consent view when the consent is not given before', async () => {\n      Common.Settings.settingForTest('freestyler-dogfood-consent-onboarding-finished').set(false);\n\n      new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAvailability.AVAILABLE,\n      });\n\n      sinon.assert.calledWith(mockView, sinon.match({state: Freestyler.State.CONSENT_VIEW}));\n    });\n\n    it('should set the setting to true and render chat view on accept click', async () => {\n      const setting = Common.Settings.settingForTest('freestyler-dogfood-consent-onboarding-finished');\n      setting.set(false);\n\n      new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAvailability.AVAILABLE,\n      });\n\n      const callArgs = mockView.getCall(0).args[0];\n      mockView.reset();\n      callArgs.onAcceptConsentClick();\n\n      assert.isTrue(setting.get());\n      sinon.assert.calledWith(mockView, sinon.match({state: Freestyler.State.CHAT_VIEW}));\n    });\n\n    it('should render chat view when the consent is given before', async () => {\n      Common.Settings.settingForTest('freestyler-dogfood-consent-onboarding-finished').set(true);\n\n      new Freestyler.FreestylerPanel(mockView, {\n        aidaClient: getTestAidaClient(),\n        aidaAvailability: Host.AidaClient.AidaAvailability.AVAILABLE,\n      });\n\n      sinon.assert.calledWith(mockView, sinon.match({state: Freestyler.State.CHAT_VIEW}));\n    });\n  });\n});\n"]}