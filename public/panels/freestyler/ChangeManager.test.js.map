{"version":3,"file":"ChangeManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/ChangeManager.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,UAAU,MAAM,iBAAiB,CAAC;AAE9C,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC/B,MAAM,aAAa,GAAG,IAAI,UAAU,CAAC,aAAa,EAAE,CAAC;QACrD,aAAa,CAAC,SAAS,CAAC;YACtB,QAAQ,EAAE,KAAK;YACf,MAAM,EAAE,cAAc;SACvB,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,eAAe,EAAE,EAAE;;;;EAItD,CAAC,CAAC;IACF,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAChE,MAAM,aAAa,GAAG,IAAI,UAAU,CAAC,aAAa,EAAE,CAAC;QACrD,aAAa,CAAC,SAAS,CAAC;YACtB,QAAQ,EAAE,KAAK;YACf,MAAM,EAAE,cAAc;SACvB,CAAC,CAAC;QACH,aAAa,CAAC,SAAS,CAAC;YACtB,QAAQ,EAAE,MAAM;YAChB,MAAM,EAAE,eAAe;SACxB,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,eAAe,EAAE,EAAE;;;;;;;EAOtD,CAAC,CAAC;IACF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,aAAa,GAAG,IAAI,UAAU,CAAC,aAAa,EAAE,CAAC;QACrD,aAAa,CAAC,SAAS,CAAC;YACtB,QAAQ,EAAE,KAAK;YACf,MAAM,EAAE,cAAc;SACvB,CAAC,CAAC;QACH,aAAa,CAAC,SAAS,CAAC;YACtB,QAAQ,EAAE,KAAK;YACf,MAAM,EAAE,eAAe;SACxB,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,eAAe,EAAE,EAAE;;;;;;;EAOtD,CAAC,CAAC;IACF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Freestyler from './freestyler.js';\n\ndescribe('ChangeManager', () => {\n  it('can register a change', () => {\n    const changeManager = new Freestyler.ChangeManager();\n    changeManager.addChange({\n      selector: 'div',\n      styles: 'color: blue;',\n    });\n    assert.strictEqual(changeManager.buildStyleSheet(), `.ai-assistant-change {\n  div& {\n    color: blue;\n  }\n}`);\n  });\n  it('can register multiple changes with different selectors', () => {\n    const changeManager = new Freestyler.ChangeManager();\n    changeManager.addChange({\n      selector: 'div',\n      styles: 'color: blue;',\n    });\n    changeManager.addChange({\n      selector: 'body',\n      styles: 'color: green;',\n    });\n    assert.strictEqual(changeManager.buildStyleSheet(), `.ai-assistant-change {\n  div& {\n    color: blue;\n  }\n  body& {\n    color: green;\n  }\n}`);\n  });\n\n  it('can register multiple changes with the same selector', () => {\n    const changeManager = new Freestyler.ChangeManager();\n    changeManager.addChange({\n      selector: 'div',\n      styles: 'color: blue;',\n    });\n    changeManager.addChange({\n      selector: 'div',\n      styles: 'color: green;',\n    });\n    assert.strictEqual(changeManager.buildStyleSheet(), `.ai-assistant-change {\n  div& {\n    color: blue;\n  }\n  div& {\n    color: green;\n  }\n}`);\n  });\n});\n"]}