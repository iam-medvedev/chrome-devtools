{"version":3,"file":"AiAgent.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/AiAgent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport {\n  describeWithEnvironment,\n} from '../../testing/EnvironmentHelpers.js';\n\nimport * as Freestyler from './freestyler.js';\n\nconst {AiAgent, ResponseType, ConversationContext, ErrorType} = Freestyler;\n\nfunction mockAidaClient(\n    fetch: (_: Host.AidaClient.AidaRequest, options?: {signal: AbortSignal}) =>\n        AsyncGenerator<Host.AidaClient.AidaResponse, void, void>,\n    ): Host.AidaClient.AidaClient {\n  return {\n    fetch,\n    registerClientEvent: () => Promise.resolve({}),\n  };\n}\n\nfunction mockConversationContext(): Freestyler.ConversationContext<unknown> {\n  return new (class extends ConversationContext<unknown>{\n    override getOrigin(): string {\n      return 'origin';\n    }\n\n    override getItem(): unknown {\n      return null;\n    }\n\n    override getIcon(): HTMLElement {\n      return document.createElement('span');\n    }\n\n    override getTitle(): string {\n      return 'title';\n    }\n  })();\n}\n\nclass AiAgentMock extends AiAgent<unknown> {\n  type = Freestyler.AgentType.FREESTYLER;\n  override preamble = 'preamble';\n\n  // eslint-disable-next-line require-yield\n  override async * handleContextDetails(): AsyncGenerator<Freestyler.ContextResponse, void, void> {\n    return;\n  }\n\n  clientFeature: Host.AidaClient.ClientFeature = 0;\n  userTier: undefined;\n\n  options: Freestyler.RequestOptions = {\n    temperature: 1,\n    modelId: 'test model',\n  };\n}\n\ndescribeWithEnvironment('AiAgent', () => {\n  describe('buildRequest', () => {\n    beforeEach(() => {\n      sinon.stub(crypto, 'randomUUID').returns('sessionId' as `${string}-${string}-${string}-${string}-${string}`);\n    });\n\n    afterEach(() => {\n      sinon.restore();\n    });\n\n    it('builds a request with a temperature', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({text: 'test input'}).options?.temperature,\n          1,\n      );\n    });\n\n    it('builds a request with a temperature -1', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      agent.options.temperature = -1;\n      assert.strictEqual(\n          agent.buildRequest({text: 'test input'}).options?.temperature,\n          undefined,\n      );\n    });\n\n    it('builds a request with a model id', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({text: 'test input'}).options?.model_id,\n          'test model',\n      );\n    });\n\n    it('builds a request with logging', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n        serverSideLoggingEnabled: true,\n      });\n      assert.strictEqual(\n          agent.buildRequest({text: 'test input'}).metadata?.disable_user_content_logging,\n          false,\n      );\n    });\n\n    it('builds a request without logging', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n        serverSideLoggingEnabled: false,\n      });\n      assert.strictEqual(\n          agent\n              .buildRequest({\n                text: 'test input',\n              })\n              .metadata?.disable_user_content_logging,\n          true,\n      );\n    });\n\n    it('builds a request with input', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n        serverSideLoggingEnabled: false,\n      });\n      const request = agent.buildRequest({text: 'test input'});\n      assert.deepStrictEqual(request.current_message?.parts[0], {text: 'test input'});\n      assert.strictEqual(request.historical_contexts, undefined);\n    });\n\n    it('builds a request with a sessionId', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      const request = agent.buildRequest({text: 'test input'});\n      assert.strictEqual(request.metadata?.string_session_id, 'sessionId');\n    });\n\n    it('builds a request with preamble', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      const request = agent.buildRequest({text: 'test input'});\n      assert.deepStrictEqual(request.current_message?.parts[0], {text: 'test input'});\n      assert.strictEqual(request.preamble, 'preamble');\n      assert.strictEqual(request.historical_contexts, undefined);\n    });\n\n    it('builds a request with chat history', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      agent.chatNewHistoryForTesting = [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'test',\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'test',\n        },\n        {\n          type: ResponseType.THOUGHT,\n          thought: 'thought',\n        },\n        {\n          type: ResponseType.TITLE,\n          title: 'title',\n        },\n        {\n          type: ResponseType.ACTION,\n          code: 'action',\n          output: 'result',\n          canceled: false,\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'OBSERVATION: result',\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'answer',\n        },\n      ];\n      const request = agent.buildRequest({text: 'test input'});\n      assert.deepStrictEqual(request.current_message?.parts[0], {text: 'test input'});\n      assert.deepStrictEqual(request.historical_contexts, [\n        {\n          parts: [{text: 'test'}],\n          role: 1,\n        },\n        {\n          role: 2,\n          parts: [{text: 'THOUGHT: thought\\nTITLE: title\\nACTION\\naction\\nSTOP'}],\n        },\n        {\n          role: 1,\n          parts: [{text: 'OBSERVATION: result'}],\n        },\n        {\n          role: 2,\n          parts: [{text: 'answer'}],\n        },\n      ]);\n    });\n\n    it('builds a request with aborted query in history', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      agent.chatNewHistoryForTesting = [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'test',\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'test',\n        },\n        {\n          type: ResponseType.THOUGHT,\n          thought: 'thought',\n        },\n        {\n          type: ResponseType.TITLE,\n          title: 'title',\n        },\n        {\n          type: ResponseType.ERROR,\n          error: ErrorType.ABORT,\n        },\n      ];\n      const request = agent.buildRequest({text: 'test input'});\n      assert.deepStrictEqual(request.current_message?.parts[0], {text: 'test input'});\n      assert.deepStrictEqual(request.historical_contexts, undefined);\n    });\n\n    it('builds a request with aborted query in history before a real request', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      agent.chatNewHistoryForTesting = [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'test',\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'test',\n        },\n        {\n          type: ResponseType.THOUGHT,\n          thought: 'thought',\n        },\n        {\n          type: ResponseType.TITLE,\n          title: 'title',\n        },\n        {\n          type: ResponseType.ERROR,\n          error: ErrorType.ABORT,\n        },\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'test2',\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'test2',\n        },\n        {\n          type: ResponseType.THOUGHT,\n          thought: 'thought2',\n        },\n        {\n          type: ResponseType.TITLE,\n          title: 'title2',\n        },\n        {\n          type: ResponseType.ACTION,\n          code: 'action2',\n          output: 'result2',\n          canceled: false,\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'OBSERVATION: result2',\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'answer2',\n        },\n      ];\n      const request = agent.buildRequest({text: 'test input'});\n      assert.deepStrictEqual(request.current_message?.parts[0], {text: 'test input'});\n      assert.deepStrictEqual(request.historical_contexts, [\n        {\n          parts: [{text: 'test2'}],\n          role: 1,\n        },\n        {\n          role: 2,\n          parts: [{text: 'THOUGHT: thought2\\nTITLE: title2\\nACTION\\naction2\\nSTOP'}],\n        },\n        {\n          role: 1,\n          parts: [{text: 'OBSERVATION: result2'}],\n        },\n        {\n          role: 2,\n          parts: [{text: 'answer2'}],\n        },\n      ]);\n    });\n  });\n\n  describe('run', () => {\n    describe('partial yielding for answers', () => {\n      it('should yield partial answer with final answer at the end', async () => {\n        async function* generateAnswerAfterPartial() {\n          yield {\n            explanation: 'Partial ans',\n            metadata: {},\n            completed: false,\n          };\n\n          yield {\n            explanation: 'Partial answer is now completed',\n            metadata: {},\n            completed: true,\n          };\n        }\n        const agent = new AiAgentMock({\n          aidaClient: mockAidaClient(generateAnswerAfterPartial),\n        });\n\n        const responses = await Array.fromAsync(agent.run('query', {selected: mockConversationContext()}));\n\n        assert.deepStrictEqual(responses, [\n          {\n            type: ResponseType.USER_QUERY,\n            query: 'query',\n          },\n          {\n            type: ResponseType.QUERYING,\n            query: 'query',\n          },\n          {\n            type: ResponseType.ANSWER,\n            text: 'Partial ans',\n          },\n          {\n            type: ResponseType.ANSWER,\n            text: 'Partial answer is now completed',\n            rpcId: undefined,\n            suggestions: undefined,\n          },\n        ]);\n      });\n\n      it('should not add partial answers to history', async () => {\n        async function* generateAnswerAfterPartial() {\n          yield {\n            explanation: 'Partial ans',\n            metadata: {},\n            completed: false,\n          };\n\n          yield {\n            explanation: 'Partial answer is now completed',\n            metadata: {},\n            completed: true,\n          };\n        }\n        const agent = new AiAgentMock({\n          aidaClient: mockAidaClient(generateAnswerAfterPartial),\n        });\n\n        await Array.fromAsync(agent.run('query', {selected: mockConversationContext()}));\n\n        assert.deepStrictEqual(agent.chatHistoryForTesting, [\n          {\n            role: Host.AidaClient.Role.USER,\n            parts: [{text: 'query'}],\n          },\n          {\n            role: Host.AidaClient.Role.MODEL,\n            parts: [{text: 'Partial answer is now completed'}],\n          },\n        ]);\n      });\n    });\n\n    it('should yield unknown error when aidaFetch does not return anything', async () => {\n      async function* generateNothing() {\n      }\n      const agent = new AiAgentMock({\n        aidaClient: mockAidaClient(generateNothing),\n      });\n\n      const responses = await Array.fromAsync(agent.run('query', {selected: mockConversationContext()}));\n\n      assert.deepStrictEqual(responses, [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'query',\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'query',\n        },\n        {\n          type: ResponseType.ERROR,\n          error: ErrorType.UNKNOWN,\n        },\n      ]);\n    });\n  });\n\n  describe('runFromHistory', () => {\n    it('should run', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      agent.chatNewHistoryForTesting = [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'first question',\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'first enhancements',\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'first answer',\n        },\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'second question',\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'second enhancements',\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'second answer',\n        },\n      ];\n\n      const responses = await Array.fromAsync(agent.runFromHistory());\n      assert.deepStrictEqual(responses, [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'first question',\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'first enhancements',\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'first answer',\n        },\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'second question',\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'second enhancements',\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'second answer',\n        },\n      ]);\n    });\n  });\n\n  describe('ConversationContext', () => {\n    function getTestContext(origin: string) {\n      class TestContext extends ConversationContext<undefined> {\n        override getIcon(): HTMLElement {\n          throw new Error('Method not implemented.');\n        }\n        override getTitle(): string {\n          throw new Error('Method not implemented.');\n        }\n        override getOrigin(): string {\n          return origin;\n        }\n        override getItem(): undefined {\n          return undefined;\n        }\n      }\n      return new TestContext();\n    }\n    it('checks context origins', () => {\n      const tests = [\n        {\n          contextOrigin: 'https://google.test',\n          agentOrigin: 'https://google.test',\n          isAllowed: true,\n        },\n        {\n          contextOrigin: 'https://google.test',\n          agentOrigin: 'about:blank',\n          isAllowed: false,\n        },\n        {\n          contextOrigin: 'https://google.test',\n          agentOrigin: 'https://www.google.test',\n          isAllowed: false,\n        },\n        {\n          contextOrigin: 'https://a.test',\n          agentOrigin: 'https://b.test',\n          isAllowed: false,\n        },\n        {\n          contextOrigin: 'https://a.test',\n          agentOrigin: 'file:///tmp',\n          isAllowed: false,\n        },\n        {\n          contextOrigin: 'https://a.test',\n          agentOrigin: 'http://a.test',\n          isAllowed: false,\n        },\n      ];\n      for (const test of tests) {\n        assert.strictEqual(getTestContext(test.contextOrigin).isOriginAllowed(test.agentOrigin), test.isAllowed);\n      }\n    });\n  });\n});\n"]}