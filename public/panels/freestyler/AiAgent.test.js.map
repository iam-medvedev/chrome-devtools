{"version":3,"file":"AiAgent.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/AiAgent.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EACL,uBAAuB,GACxB,MAAM,qCAAqC,CAAC;AAE7C,OAAO,KAAK,UAAU,MAAM,iBAAiB,CAAC;AAE9C,MAAM,EAAC,OAAO,EAAE,YAAY,EAAC,GAAG,UAAU,CAAC;AAE3C,MAAM,WAAY,SAAQ,OAAgB;IACxC,IAAI,sDAAmC;IAC9B,QAAQ,GAAG,UAAU,CAAC;IAE/B,yCAAyC;IAChC,KAAK,CAAC,CAAE,oBAAoB;QACnC,OAAO;IACT,CAAC;IAED,aAAa,GAAkC,CAAC,CAAC;IACjD,QAAQ,CAAY;IAEpB,OAAO,GAAkC;QACvC,WAAW,EAAE,CAAC;QACd,OAAO,EAAE,YAAY;KACtB,CAAC;CACH;AAED,uBAAuB,CAAC,SAAS,EAAE,GAAG,EAAE;IACtC,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,UAAU,CAAC,GAAG,EAAE;YACd,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC,WAAkE,CAAC,CAAC;QAC/G,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,KAAK,CAAC,OAAO,EAAE,CAAC;QAClB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC;gBAC5B,UAAU,EAAE,EAAgC;aAC7C,CAAC,CAAC;YACH,MAAM,CAAC,WAAW,CACd,KAAK,CAAC,YAAY,CAAC,EAAC,KAAK,EAAE,YAAY,EAAC,CAAC,CAAC,OAAO,EAAE,WAAW,EAC9D,CAAC,CACJ,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC;gBAC5B,UAAU,EAAE,EAAgC;aAC7C,CAAC,CAAC;YACH,KAAK,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,WAAW,CACd,KAAK,CAAC,YAAY,CAAC,EAAC,KAAK,EAAE,YAAY,EAAC,CAAC,CAAC,OAAO,EAAE,WAAW,EAC9D,SAAS,CACZ,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC;gBAC5B,UAAU,EAAE,EAAgC;aAC7C,CAAC,CAAC;YACH,MAAM,CAAC,WAAW,CACd,KAAK,CAAC,YAAY,CAAC,EAAC,KAAK,EAAE,YAAY,EAAC,CAAC,CAAC,OAAO,EAAE,QAAQ,EAC3D,YAAY,CACf,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC;gBAC5B,UAAU,EAAE,EAAgC;gBAC5C,wBAAwB,EAAE,IAAI;aAC/B,CAAC,CAAC;YACH,MAAM,CAAC,WAAW,CACd,KAAK,CAAC,YAAY,CAAC,EAAC,KAAK,EAAE,YAAY,EAAC,CAAC,CAAC,QAAQ,EAAE,4BAA4B,EAChF,KAAK,CACR,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC;gBAC5B,UAAU,EAAE,EAAgC;gBAC5C,wBAAwB,EAAE,KAAK;aAChC,CAAC,CAAC;YACH,MAAM,CAAC,WAAW,CACd,KAAK;iBACA,YAAY,CAAC;gBACZ,KAAK,EAAE,YAAY;aACpB,CAAC;iBACD,QAAQ,EAAE,4BAA4B,EAC3C,IAAI,CACP,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC;gBAC5B,UAAU,EAAE,EAAgC;gBAC5C,wBAAwB,EAAE,KAAK;aAChC,CAAC,CAAC;YACH,MAAM,OAAO,GAAG,KAAK,CAAC,YAAY,CAAC,EAAC,KAAK,EAAE,YAAY,EAAC,CAAC,CAAC;YAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC;gBAC5B,UAAU,EAAE,EAAgC;aAC7C,CAAC,CAAC;YACH,MAAM,OAAO,GAAG,KAAK,CAAC,YAAY,CAAC,EAAC,KAAK,EAAE,YAAY,EAAC,CAAC,CAAC;YAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,iBAAiB,EAAE,WAAW,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC;gBAC5B,UAAU,EAAE,EAAgC;aAC7C,CAAC,CAAC;YACH,MAAM,OAAO,GAAG,KAAK,CAAC,YAAY,CAAC,EAAC,KAAK,EAAE,YAAY,EAAC,CAAC,CAAC;YAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC;gBAC5B,UAAU,EAAE,EAAgC;aAC7C,CAAC,CAAC;YACH,KAAK,CAAC,wBAAwB,GAAG,IAAI,GAAG,CAAC;gBACvC;oBACE,CAAC;oBACD;wBACE;4BACE,IAAI,wCAAuB;4BAC3B,KAAK,EAAE,MAAM;yBACd;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,KAAK,CAAC,YAAY,CAAC;gBACjC,KAAK,EAAE,YAAY;aACpB,CAAC,CAAC;YAEH,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;YAChD,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,YAAY,EAAE;gBAC3C;oBACE,IAAI,EAAE,MAAM;oBACZ,MAAM,EAAE,CAAC;iBACV;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC;gBAC5B,UAAU,EAAE,EAAgC;aAC7C,CAAC,CAAC;YACH,KAAK,CAAC,wBAAwB,GAAG,IAAI,GAAG,CAAC;gBACvC;oBACE,CAAC;oBACD;wBACE;4BACE,IAAI,4CAAyB;4BAC7B,KAAK,EAAE,gBAAgB;yBACxB;wBACD;4BACE,IAAI,wCAAuB;4BAC3B,KAAK,EAAE,oBAAoB;yBAC5B;wBACD;4BACE,IAAI,oCAAqB;4BACzB,IAAI,EAAE,cAAc;yBACrB;qBACF;iBACF;gBACD;oBACE,CAAC;oBACD;wBACE;4BACE,IAAI,4CAAyB;4BAC7B,KAAK,EAAE,iBAAiB;yBACzB;wBACD;4BACE,IAAI,wCAAuB;4BAC3B,KAAK,EAAE,qBAAqB;yBAC7B;wBACD;4BACE,IAAI,oCAAqB;4BACzB,IAAI,EAAE,eAAe;yBACtB;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC;YAChE,MAAM,CAAC,eAAe,CAAC,SAAS,EAAE;gBAChC;oBACE,IAAI,4CAAyB;oBAC7B,KAAK,EAAE,gBAAgB;iBACxB;gBACD;oBACE,IAAI,wCAAuB;oBAC3B,KAAK,EAAE,oBAAoB;iBAC5B;gBACD;oBACE,IAAI,oCAAqB;oBACzB,IAAI,EAAE,cAAc;iBACrB;gBACD;oBACE,IAAI,4CAAyB;oBAC7B,KAAK,EAAE,iBAAiB;iBACzB;gBACD;oBACE,IAAI,wCAAuB;oBAC3B,KAAK,EAAE,qBAAqB;iBAC7B;gBACD;oBACE,IAAI,oCAAqB;oBACzB,IAAI,EAAE,eAAe;iBACtB;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Host from '../../core/host/host.js';\nimport {\n  describeWithEnvironment,\n} from '../../testing/EnvironmentHelpers.js';\n\nimport * as Freestyler from './freestyler.js';\n\nconst {AiAgent, ResponseType} = Freestyler;\n\nclass AiAgentMock extends AiAgent<unknown> {\n  type = Freestyler.AgentType.FREESTYLER;\n  override preamble = 'preamble';\n\n  // eslint-disable-next-line require-yield\n  override async * handleContextDetails(): AsyncGenerator<Freestyler.ContextResponse, void, void> {\n    return;\n  }\n\n  clientFeature: Host.AidaClient.ClientFeature = 0;\n  userTier: undefined;\n\n  options: Freestyler.AidaRequestOptions = {\n    temperature: 1,\n    modelId: 'test model',\n  };\n}\n\ndescribeWithEnvironment('AiAgent', () => {\n  describe('buildRequest', () => {\n    beforeEach(() => {\n      sinon.stub(crypto, 'randomUUID').returns('sessionId' as `${string}-${string}-${string}-${string}-${string}`);\n    });\n\n    afterEach(() => {\n      sinon.restore();\n    });\n\n    it('builds a request with a temperature', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({input: 'test input'}).options?.temperature,\n          1,\n      );\n    });\n\n    it('builds a request with a temperature -1', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      agent.options.temperature = -1;\n      assert.strictEqual(\n          agent.buildRequest({input: 'test input'}).options?.temperature,\n          undefined,\n      );\n    });\n\n    it('builds a request with a model id', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({input: 'test input'}).options?.model_id,\n          'test model',\n      );\n    });\n\n    it('builds a request with logging', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n        serverSideLoggingEnabled: true,\n      });\n      assert.strictEqual(\n          agent.buildRequest({input: 'test input'}).metadata?.disable_user_content_logging,\n          false,\n      );\n    });\n\n    it('builds a request without logging', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n        serverSideLoggingEnabled: false,\n      });\n      assert.strictEqual(\n          agent\n              .buildRequest({\n                input: 'test input',\n              })\n              .metadata?.disable_user_content_logging,\n          true,\n      );\n    });\n\n    it('builds a request with input', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n        serverSideLoggingEnabled: false,\n      });\n      const request = agent.buildRequest({input: 'test input'});\n      assert.strictEqual(request.input, 'test input');\n      assert.strictEqual(request.chat_history, undefined);\n    });\n\n    it('builds a request with a sessionId', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      const request = agent.buildRequest({input: 'test input'});\n      assert.strictEqual(request.metadata?.string_session_id, 'sessionId');\n    });\n\n    it('builds a request with preamble', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      const request = agent.buildRequest({input: 'test input'});\n      assert.strictEqual(request.input, 'test input');\n      assert.strictEqual(request.preamble, 'preamble');\n      assert.strictEqual(request.chat_history, undefined);\n    });\n\n    it('builds a request with chat history', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      agent.chatNewHistoryForTesting = new Map([\n        [\n          0,\n          [\n            {\n              type: ResponseType.QUERYING,\n              query: 'test',\n            },\n          ],\n        ],\n      ]);\n\n      const request = agent.buildRequest({\n        input: 'test input',\n      });\n\n      assert.strictEqual(request.input, 'test input');\n      assert.deepStrictEqual(request.chat_history, [\n        {\n          text: 'test',\n          entity: 1,\n        },\n      ]);\n    });\n  });\n\n  describe('runFromHistory', () => {\n    it('should run', async () => {\n      const agent = new AiAgentMock({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      agent.chatNewHistoryForTesting = new Map([\n        [\n          0,\n          [\n            {\n              type: ResponseType.USER_QUERY,\n              query: 'first question',\n            },\n            {\n              type: ResponseType.QUERYING,\n              query: 'first enhancements',\n            },\n            {\n              type: ResponseType.ANSWER,\n              text: 'first answer',\n            },\n          ],\n        ],\n        [\n          1,\n          [\n            {\n              type: ResponseType.USER_QUERY,\n              query: 'second question',\n            },\n            {\n              type: ResponseType.QUERYING,\n              query: 'second enhancements',\n            },\n            {\n              type: ResponseType.ANSWER,\n              text: 'second answer',\n            },\n          ],\n        ],\n      ]);\n\n      const responses = await Array.fromAsync(agent.runFromHistory());\n      assert.deepStrictEqual(responses, [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'first question',\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'first enhancements',\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'first answer',\n        },\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'second question',\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'second enhancements',\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'second answer',\n        },\n      ]);\n    });\n  });\n});\n"]}