{"version":3,"file":"DrJonesPerformanceAgent.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/DrJonesPerformanceAgent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Host from '../../core/host/host.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport {describeWithEnvironment, getGetHostConfigStub} from '../../testing/EnvironmentHelpers.js';\nimport {makeCompleteEvent, makeProfileCall} from '../../testing/TraceHelpers.js';\n\nimport {DrJonesPerformanceAgent, ResponseType} from './freestyler.js';\n\ndescribeWithEnvironment('DrJonesPerformanceAgent', () => {\n  function mockHostConfig(modelId?: string, temperature?: number) {\n    getGetHostConfigStub({\n      devToolsAiAssistancePerformanceAgentDogfood: {\n        modelId,\n        temperature,\n      },\n    });\n  }\n\n  function mockAidaClient(\n      fetch: () => AsyncGenerator<Host.AidaClient.AidaResponse, void, void>,\n      ): Host.AidaClient.AidaClient {\n    return {\n      fetch,\n      registerClientEvent: () => Promise.resolve({}),\n    };\n  }\n\n  describe('buildRequest', () => {\n    beforeEach(() => {\n      sinon.restore();\n    });\n\n    it('builds a request with a model id', async () => {\n      mockHostConfig('test model');\n      const agent = new DrJonesPerformanceAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({input: 'test input'}).options?.model_id,\n          'test model',\n      );\n    });\n\n    it('builds a request with a temperature', async () => {\n      mockHostConfig('test model', 1);\n      const agent = new DrJonesPerformanceAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({input: 'test input'}).options?.temperature,\n          1,\n      );\n    });\n\n    it('structure matches the snapshot', () => {\n      mockHostConfig('test model');\n      sinon.stub(crypto, 'randomUUID').returns('sessionId' as `${string}-${string}-${string}-${string}-${string}`);\n      const agent = new DrJonesPerformanceAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n        serverSideLoggingEnabled: true,\n      });\n      sinon.stub(agent, 'preamble').value('preamble');\n      agent.chatNewHistoryForTesting = new Map([[\n        0,\n        [\n          {\n            type: ResponseType.QUERYING,\n            query: 'question',\n          },\n          {\n            type: ResponseType.ANSWER,\n            text: 'answer',\n          },\n        ],\n      ]]);\n      assert.deepStrictEqual(\n          agent.buildRequest({\n            input: 'test input',\n          }),\n          {\n            input: 'test input',\n            client: 'CHROME_DEVTOOLS',\n            preamble: 'preamble',\n            chat_history: [\n              {\n                entity: 1,\n                text: 'question',\n              },\n              {\n                entity: 2,\n                text: 'answer',\n              },\n            ],\n            metadata: {\n              disable_user_content_logging: false,\n              string_session_id: 'sessionId',\n              user_tier: 2,\n            },\n            options: {\n              model_id: 'test model',\n              temperature: undefined,\n            },\n            client_feature: 8,\n            functionality_type: 1,\n          },\n      );\n    });\n  });\n  describe('run', function() {\n    const evaluateScript = makeCompleteEvent(Trace.Types.Events.Name.EVALUATE_SCRIPT, 0, 500);\n    const v8Run = makeCompleteEvent('v8.run', 10, 490);\n    const parseFunction = makeCompleteEvent('V8.ParseFunction', 12, 1);\n    const traceEvents: Trace.Types.Events.Event[] = [evaluateScript, v8Run, parseFunction];\n    const profileCalls = [makeProfileCall('a', 100, 200), makeProfileCall('b', 300, 200)];\n\n    // Roughly this looks like:\n    // 0                                          500\n    // |------------- EvaluateScript -------------|\n    //  |-        v8.run                         -|\n    //    |--|   |-    a   -||-          b        |\n    //      ^ V8.ParseFunction\n\n    const allEntries = Trace.Helpers.Trace.mergeEventsInOrder(traceEvents, profileCalls);\n    const {entryToNode} = Trace.Helpers.TreeHelpers.treify(allEntries, {filter: {has: () => true}});\n    const selectedNode = entryToNode.get(v8Run);\n    assert.exists(selectedNode);\n\n    const aiNodeTree = Trace.Helpers.TreeHelpers.AINode.fromEntryNode(selectedNode, () => true);\n    const v8RunNode = Trace.Helpers.TreeHelpers.AINode.getSelectedNodeWithinTree(aiNodeTree);\n    assert.exists(aiNodeTree);\n    assert.exists(v8RunNode);\n\n    it('generates an answer', async () => {\n      async function* generateAnswer() {\n        yield {\n          explanation: 'This is the answer',\n          metadata: {\n            rpcGlobalId: 123,\n          },\n          completed: true,\n        };\n      }\n\n      const agent = new DrJonesPerformanceAgent({\n        aidaClient: mockAidaClient(generateAnswer),\n      });\n\n      // Select the v8.run node\n      v8RunNode.selected = true;\n      const responses = await Array.fromAsync(agent.run('test', {selected: aiNodeTree}));\n\n      assert.deepStrictEqual(responses, [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'test',\n        },\n        {\n          type: ResponseType.CONTEXT,\n          title: 'Analyzing stack',\n          details: [\n            {\n              title: 'Selected stack',\n              text: JSON.stringify({\n                name: 'EvaluateScript',\n                dur: 0.5,\n                self: 0,\n                children: [{\n                  selected: true,\n                  name: 'v8.run',\n                  dur: 0.5,\n                  self: 0.1,\n                  children: [\n                    {name: 'V8.ParseFunction', dur: 0, self: 0},\n                    {name: 'a', url: '', dur: 0.2, self: 0.2},\n                    {name: 'b', url: '', dur: 0.2, self: 0.2},\n                  ],\n                }],\n              }),\n            },\n          ],\n        },\n        {\n          type: ResponseType.QUERYING,\n          query:\n              '# Selected stack trace\\n{\\\"name\\\":\\\"EvaluateScript\\\",\\\"dur\\\":0.5,\\\"self\\\":0}\\n\\n# User request\\n\\ntest',\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'This is the answer',\n          suggestions: undefined,\n          rpcId: 123,\n        },\n      ]);\n\n      assert.deepStrictEqual(agent.chatHistoryForTesting, [\n        {\n          entity: 1,\n          text: `# Selected stack trace\\n${JSON.stringify(aiNodeTree)}\\n\\n# User request\\n\\ntest`,\n        },\n        {\n          entity: 2,\n          text: 'This is the answer',\n        },\n      ]);\n    });\n  });\n});\n"]}