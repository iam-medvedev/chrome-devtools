{"version":3,"file":"AiAgent.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/AiAgent.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\n\nexport enum ResponseType {\n  CONTEXT = 'context',\n  TITLE = 'title',\n  THOUGHT = 'thought',\n  ACTION = 'action',\n  SIDE_EFFECT = 'side-effect',\n  ANSWER = 'answer',\n  ERROR = 'error',\n  QUERYING = 'querying',\n}\n\nexport const enum ErrorType {\n  UNKNOWN = 'unknown',\n  ABORT = 'abort',\n  MAX_STEPS = 'max-steps',\n}\n\nexport interface AnswerResponse {\n  type: ResponseType.ANSWER;\n  text: string;\n  rpcId?: number;\n  suggestions?: [string, ...string[]];\n}\n\nexport interface ErrorResponse {\n  type: ResponseType.ERROR;\n  error: ErrorType;\n  rpcId?: number;\n}\n\nexport interface ContextDetail {\n  title: string;\n  text: string;\n  codeLang?: string;\n}\nexport interface ContextResponse {\n  type: ResponseType.CONTEXT;\n  title: string;\n  details: [ContextDetail, ...ContextDetail[]];\n}\n\nexport interface TitleResponse {\n  type: ResponseType.TITLE;\n  title: string;\n  rpcId?: number;\n}\n\nexport interface ThoughtResponse {\n  type: ResponseType.THOUGHT;\n  thought: string;\n  rpcId?: number;\n}\n\nexport interface SideEffectResponse {\n  type: ResponseType.SIDE_EFFECT;\n  code: string;\n  confirm: (confirm: boolean) => void;\n  rpcId?: number;\n}\n\nexport interface ActionResponse {\n  type: ResponseType.ACTION;\n  code: string;\n  output: string;\n  canceled: boolean;\n  rpcId?: number;\n}\n\nexport interface QueryResponse {\n  type: ResponseType.QUERYING;\n}\n\nexport type ResponseData = AnswerResponse|ErrorResponse|ActionResponse|SideEffectResponse|ThoughtResponse|TitleResponse|\n    QueryResponse|ContextResponse;\n\nexport interface AidaBuildRequestOptions {\n  input: string;\n}\n\nexport interface HistoryChunk {\n  text: string;\n  entity: Host.AidaClient.Entity;\n}\n\nexport interface AidaRequestOptions {\n  temperature?: number;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  model_id?: string;\n}\n\ntype AgentOptions = {\n  aidaClient: Host.AidaClient.AidaClient,\n  serverSideLoggingEnabled?: boolean,\n};\n\ninterface ParsedResponseAnswer {\n  answer: string;\n  suggestions?: [string, ...string[]];\n}\n\ninterface ParsedResponseStep {\n  thought?: string;\n  title?: string;\n  action?: string;\n}\n\nexport type ParsedResponse = ParsedResponseAnswer|ParsedResponseStep;\n\nconst MAX_STEP = 10;\n\nexport abstract class AiAgent<T> {\n  static validTemperature(temperature: number|undefined): number|undefined {\n    return typeof temperature === 'number' && temperature >= 0 ? temperature : undefined;\n  }\n\n  readonly #sessionId: string = crypto.randomUUID();\n  #aidaClient: Host.AidaClient.AidaClient;\n  #serverSideLoggingEnabled: boolean;\n  abstract readonly preamble: string;\n  abstract readonly options: AidaRequestOptions;\n  abstract readonly clientFeature: Host.AidaClient.ClientFeature;\n  abstract readonly userTier: string|undefined;\n  abstract handleContextDetails(select: T|null): AsyncGenerator<ContextResponse, void, void>;\n\n  /**\n   * Mapping between the unique request id and\n   * the history chuck it created\n   */\n  #chatHistory: Map<number, HistoryChunk[]> = new Map();\n\n  constructor(opts: AgentOptions) {\n    this.#aidaClient = opts.aidaClient;\n    this.#serverSideLoggingEnabled = opts.serverSideLoggingEnabled ?? false;\n  }\n\n  get historyEntry(): Array<HistoryChunk> {\n    return [...this.#chatHistory.values()].flat();\n  }\n\n  get chatHistoryForTesting(): Array<HistoryChunk> {\n    return this.historyEntry;\n  }\n\n  set chatHistoryForTesting(history: Map<number, HistoryChunk[]>) {\n    this.#chatHistory = history;\n  }\n\n  removeHistoryRun(id: number): void {\n    this.#chatHistory.delete(id);\n  }\n\n  addToHistory(options: {\n    id: number,\n    query: string,\n    response: ParsedResponse,\n  }): void {\n    const response = options.response;\n    if ('answer' in response) {\n      this.#storeHistoryEntries({\n        id: options.id,\n        query: options.query,\n        output: response.answer,\n      });\n      return;\n    }\n\n    const {\n      title,\n      thought,\n      action,\n    } = response;\n\n    if (thought) {\n      this.#storeHistoryEntries({\n        id: options.id,\n        query: options.query,\n        output: `THOUGHT: ${thought}\nTITLE: ${title}\nACTION\n${action}\nSTOP`,\n      });\n    } else {\n      this.#storeHistoryEntries({\n        id: options.id,\n        query: options.query,\n        output: `ACTION\n${action}\nSTOP`,\n      });\n    }\n  }\n\n  #storeHistoryEntries({\n    id,\n    query,\n    output,\n  }: {\n    id: number,\n    query: string,\n    output: string,\n  }): void {\n    const currentRunEntries = this.#chatHistory.get(id) ?? [];\n\n    this.#chatHistory.set(id, [\n      ...currentRunEntries,\n      {\n        text: query,\n        entity: Host.AidaClient.Entity.USER,\n      },\n      {\n        text: output,\n        entity: Host.AidaClient.Entity.SYSTEM,\n      },\n    ]);\n  }\n\n  #structuredLog: Array<{\n    request: Host.AidaClient.AidaRequest,\n    response: string,\n    rawResponse?: Host.AidaClient.AidaResponse,\n  }> = [];\n  async aidaFetch(\n      input: string,\n      options?: {signal?: AbortSignal},\n      ): Promise<{\n    response: string,\n    rpcId?: number,\n  }> {\n    const request = this.buildRequest({\n      input,\n    });\n\n    let rawResponse: Host.AidaClient.AidaResponse|undefined = undefined;\n    let response = '';\n    let rpcId: number|undefined;\n    for await (rawResponse of this.#aidaClient.fetch(request, options)) {\n      response = rawResponse.explanation;\n      rpcId = rawResponse.metadata.rpcGlobalId ?? rpcId;\n      if (rawResponse.metadata.attributionMetadata?.some(\n              meta => meta.attributionAction === Host.AidaClient.RecitationAction.BLOCK)) {\n        throw new Error('Attribution action does not allow providing the response');\n      }\n    }\n\n    debugLog({\n      request,\n      response: rawResponse,\n    });\n\n    this.#structuredLog.push({\n      request: structuredClone(request),\n      response,\n      rawResponse,\n    });\n    localStorage.setItem('freestylerStructuredLog', JSON.stringify(this.#structuredLog));\n\n    return {response, rpcId};\n  }\n\n  buildRequest(opts: AidaBuildRequestOptions): Host.AidaClient.AidaRequest {\n    const request: Host.AidaClient.AidaRequest = {\n      input: opts.input,\n      preamble: this.preamble,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      chat_history: this.#chatHistory.size ? this.historyEntry : undefined,\n      client: Host.AidaClient.CLIENT_NAME,\n      options: this.options,\n      metadata: {\n        disable_user_content_logging: !(this.#serverSideLoggingEnabled ?? false),\n        string_session_id: this.#sessionId,\n        user_tier: Host.AidaClient.convertToUserTierEnum(this.userTier),\n      },\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      functionality_type: Host.AidaClient.FunctionalityType.CHAT,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      client_feature: this.clientFeature,\n    };\n    return request;\n  }\n\n  handleAction(_action: string, _rpcId?: number): AsyncGenerator<SideEffectResponse, ActionResponse, void> {\n    throw new Error('Unexpected action found');\n  }\n\n  async enhanceQuery(query: string, selected: T|null): Promise<string>;\n  async enhanceQuery(query: string): Promise<string> {\n    return query;\n  }\n\n  parseResponse(response: string): ParsedResponse {\n    return {\n      answer: response,\n    };\n  }\n\n  #runId = 0;\n  async * run(query: string, options: {\n    signal?: AbortSignal, selected: T|null,\n  }): AsyncGenerator<ResponseData, void, void> {\n    yield* this.handleContextDetails(options.selected);\n\n    query = await this.enhanceQuery(query, options.selected);\n    const currentRunId = ++this.#runId;\n\n    for (let i = 0; i < MAX_STEP; i++) {\n      yield {\n        type: ResponseType.QUERYING,\n      };\n\n      let response: string;\n      let rpcId: number|undefined;\n      try {\n        const fetchResult = await this.aidaFetch(\n            query,\n            {signal: options.signal},\n        );\n        response = fetchResult.response;\n        rpcId = fetchResult.rpcId;\n      } catch (err) {\n        debugLog('Error calling the AIDA API', err);\n\n        if (err instanceof Host.AidaClient.AidaAbortError) {\n          this.removeHistoryRun(currentRunId);\n          yield {\n            type: ResponseType.ERROR,\n            error: ErrorType.ABORT,\n            rpcId,\n          };\n          break;\n        }\n\n        yield {\n          type: ResponseType.ERROR,\n          error: ErrorType.UNKNOWN,\n          rpcId,\n        };\n        break;\n      }\n\n      const parsedResponse = this.parseResponse(response);\n\n      this.addToHistory({\n        id: currentRunId,\n        query,\n        response: parsedResponse,\n      });\n      if ('answer' in parsedResponse) {\n        const {\n          answer,\n          suggestions,\n        } = parsedResponse;\n        if (answer) {\n          yield {\n            type: ResponseType.ANSWER,\n            text: answer,\n            rpcId,\n            suggestions,\n          };\n        } else {\n          this.removeHistoryRun(currentRunId);\n          yield {\n            type: ResponseType.ERROR,\n            error: ErrorType.UNKNOWN,\n            rpcId,\n          };\n        }\n\n        break;\n      }\n\n      const {\n        title,\n        thought,\n        action,\n      } = parsedResponse;\n\n      if (title) {\n        yield {\n          type: ResponseType.TITLE,\n          title,\n          rpcId,\n        };\n      }\n\n      if (thought) {\n        yield {\n          type: ResponseType.THOUGHT,\n          thought,\n          rpcId,\n        };\n      }\n\n      if (action) {\n        const result = yield* this.handleAction(action, rpcId);\n        yield result;\n        query = `OBSERVATION: ${result.output}`;\n      }\n\n      if (i === MAX_STEP - 1) {\n        yield {\n          type: ResponseType.ERROR,\n          error: ErrorType.MAX_STEPS,\n        };\n        break;\n      }\n    }\n    if (isDebugMode()) {\n      window.dispatchEvent(new CustomEvent('freestylerdone'));\n    }\n  }\n}\n\nexport function isDebugMode(): boolean {\n  return Boolean(localStorage.getItem('debugFreestylerEnabled'));\n}\n\nexport function debugLog(...log: unknown[]): void {\n  if (!isDebugMode()) {\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(...log);\n}\n\nfunction setDebugFreestylerEnabled(enabled: boolean): void {\n  if (enabled) {\n    localStorage.setItem('debugFreestylerEnabled', 'true');\n  } else {\n    localStorage.removeItem('debugFreestylerEnabled');\n  }\n}\n// @ts-ignore\nglobalThis.setDebugFreestylerEnabled = setDebugFreestylerEnabled;\n"]}