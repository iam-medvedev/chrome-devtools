{"version":3,"file":"AiAgent.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/AiAgent.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport type * as LitHtml from '../../ui/lit-html/lit-html.js';\n\nimport {AiHistoryStorage} from './AiHistoryStorage.js';\n\nexport const enum ResponseType {\n  CONTEXT = 'context',\n  TITLE = 'title',\n  THOUGHT = 'thought',\n  ACTION = 'action',\n  SIDE_EFFECT = 'side-effect',\n  ANSWER = 'answer',\n  ERROR = 'error',\n  QUERYING = 'querying',\n  USER_QUERY = 'user-query',\n}\n\nexport const enum ErrorType {\n  UNKNOWN = 'unknown',\n  ABORT = 'abort',\n  MAX_STEPS = 'max-steps',\n}\n\nexport interface AnswerResponse {\n  type: ResponseType.ANSWER;\n  text: string;\n  rpcId?: number;\n  suggestions?: [string, ...string[]];\n}\n\nexport interface ErrorResponse {\n  type: ResponseType.ERROR;\n  error: ErrorType;\n  rpcId?: number;\n}\n\nexport interface ContextDetail {\n  title: string;\n  text: string;\n  codeLang?: string;\n}\nexport interface ContextResponse {\n  type: ResponseType.CONTEXT;\n  title: string;\n  details: [ContextDetail, ...ContextDetail[]];\n}\n\nexport interface TitleResponse {\n  type: ResponseType.TITLE;\n  title: string;\n  rpcId?: number;\n}\n\nexport interface ThoughtResponse {\n  type: ResponseType.THOUGHT;\n  thought: string;\n  rpcId?: number;\n}\n\nexport interface SideEffectResponse {\n  type: ResponseType.SIDE_EFFECT;\n  code: string;\n  confirm: (confirm: boolean) => void;\n  rpcId?: number;\n}\n\nexport interface ActionResponse {\n  type: ResponseType.ACTION;\n  code: string;\n  output: string;\n  canceled: boolean;\n  rpcId?: number;\n}\n\nexport interface QueryResponse {\n  type: ResponseType.QUERYING;\n  query: string;\n}\n\nexport interface UserQuery {\n  type: ResponseType.USER_QUERY;\n  query: string;\n}\n\nexport type ResponseData = AnswerResponse|ErrorResponse|ActionResponse|SideEffectResponse|ThoughtResponse|TitleResponse|\n    QueryResponse|ContextResponse|UserQuery;\n\nexport interface BuildRequestOptions {\n  input: string;\n}\n\nexport interface RequestOptions {\n  temperature?: number;\n  modelId?: string;\n}\n\nexport interface AgentOptions {\n  aidaClient: Host.AidaClient.AidaClient;\n  serverSideLoggingEnabled?: boolean;\n}\n\nexport interface ParsedAnswer {\n  answer: string;\n  suggestions?: [string, ...string[]];\n}\n\nexport interface ParsedStep {\n  thought?: string;\n  title?: string;\n  action?: string;\n}\n\nexport type ParsedResponse = ParsedAnswer|ParsedStep;\n\nexport const enum AgentType {\n  FREESTYLER = 'freestyler',\n  DRJONES_FILE = 'drjones-file',\n  DRJONES_NETWORK_REQUEST = 'drjones-network-request',\n  DRJONES_PERFORMANCE = 'drjones-performance',\n}\n\nexport interface SerializedAgent {\n  id: string;\n  type: AgentType;\n  history: HistoryEntryStorage;\n}\n\nconst MAX_STEP = 10;\nexport type HistoryEntryStorage = ResponseData[];\n\nexport abstract class ConversationContext<T> {\n  abstract getOrigin(): string;\n  abstract getItem(): T;\n  abstract getIcon(): HTMLElement;\n  abstract getTitle(): string|ReturnType<typeof LitHtml.Directives.until>;\n\n  isOriginAllowed(agentOrigin: string|undefined): boolean {\n    if (!agentOrigin) {\n      return true;\n    }\n    // Currently does not handle opaque origins because they\n    // are not available to DevTools, instead checks\n    // that serialization of the origin is the same\n    // https://html.spec.whatwg.org/#ascii-serialisation-of-an-origin.\n    return this.getOrigin() === agentOrigin;\n  }\n}\n\nexport abstract class AiAgent<T> {\n  static validTemperature(temperature: number|undefined): number|undefined {\n    return typeof temperature === 'number' && temperature >= 0 ? temperature : undefined;\n  }\n\n  abstract type: AgentType;\n  #id: string = crypto.randomUUID();\n  readonly #sessionId: string = crypto.randomUUID();\n  #aidaClient: Host.AidaClient.AidaClient;\n  #serverSideLoggingEnabled: boolean;\n  abstract readonly preamble: string;\n  abstract readonly options: RequestOptions;\n  abstract readonly clientFeature: Host.AidaClient.ClientFeature;\n  abstract readonly userTier: string|undefined;\n  abstract handleContextDetails(select: ConversationContext<T>|null): AsyncGenerator<ContextResponse, void, void>;\n  #generatedFromHistory = false;\n\n  /**\n   * Historical responses.\n   */\n  #history: HistoryEntryStorage = [];\n  /**\n   * Might need to be part of history in case we allow chatting in\n   * historical conversations.\n   */\n  #origin?: string;\n  #context?: ConversationContext<T>;\n  #structuredLog: Array<{\n    request: Host.AidaClient.AidaRequest,\n    response: string,\n    rawResponse?: Host.AidaClient.AidaResponse,\n  }> = [];\n\n  constructor(opts: AgentOptions) {\n    this.#aidaClient = opts.aidaClient;\n    this.#serverSideLoggingEnabled = opts.serverSideLoggingEnabled ?? false;\n  }\n\n  get chatHistoryForTesting(): Array<Host.AidaClient.HistoryChunk> {\n    return this.#chatHistoryForAida;\n  }\n\n  set chatNewHistoryForTesting(history: HistoryEntryStorage) {\n    this.#history = history;\n  }\n\n  get id(): string {\n    return this.#id;\n  }\n\n  get isEmpty(): boolean {\n    return this.#history.length === 0;\n  }\n\n  get origin(): string|undefined {\n    return this.#origin;\n  }\n\n  get context(): ConversationContext<T>|undefined {\n    return this.#context;\n  }\n\n  get title(): string|undefined {\n    return this.#history\n        .filter(response => {\n          return response.type === ResponseType.USER_QUERY;\n        })\n        .at(0)\n        ?.query;\n  }\n\n  get isHistoryEntry(): boolean {\n    return this.#generatedFromHistory;\n  }\n\n  serialized(): SerializedAgent {\n    return {\n      id: this.id,\n      type: this.type,\n      history: this.#history,\n    };\n  }\n\n  populateHistoryFromStorage(entry: SerializedAgent): void {\n    this.#id = entry.id;\n    this.#history = entry.history;\n    this.#generatedFromHistory = true;\n  }\n\n  async *\n      aidaFetch(\n          request: Host.AidaClient.AidaRequest,\n          options?: {signal?: AbortSignal},\n          ): AsyncGenerator<{parsedResponse: ParsedResponse, completed: boolean, rpcId?: number}, void, void> {\n    let rawResponse: Host.AidaClient.AidaResponse|undefined = undefined;\n    let response = '';\n    let rpcId: number|undefined;\n    for await (rawResponse of this.#aidaClient.fetch(request, options)) {\n      response = rawResponse.explanation;\n      rpcId = rawResponse.metadata.rpcGlobalId ?? rpcId;\n      if (rawResponse.metadata.attributionMetadata?.some(\n              meta => meta.attributionAction === Host.AidaClient.RecitationAction.BLOCK)) {\n        throw new Error('Attribution action does not allow providing the response');\n      }\n      const parsedResponse = this.parseResponse(response);\n      yield {rpcId, parsedResponse, completed: rawResponse.completed};\n    }\n\n    debugLog({\n      request,\n      response: rawResponse,\n    });\n\n    this.#structuredLog.push({\n      request: structuredClone(request),\n      response,\n      rawResponse,\n    });\n    localStorage.setItem('freestylerStructuredLog', JSON.stringify(this.#structuredLog));\n  }\n\n  buildRequest(opts: BuildRequestOptions): Host.AidaClient.AidaRequest {\n    const history = this.#chatHistoryForAida;\n    const request: Host.AidaClient.AidaRequest = {\n      input: opts.input,\n      preamble: this.preamble,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      chat_history: history.length ? history : undefined,\n      client: Host.AidaClient.CLIENT_NAME,\n      options: {\n        temperature: AiAgent.validTemperature(this.options.temperature),\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        model_id: this.options.modelId,\n      },\n      metadata: {\n        disable_user_content_logging: !(this.#serverSideLoggingEnabled ?? false),\n        string_session_id: this.#sessionId,\n        user_tier: Host.AidaClient.convertToUserTierEnum(this.userTier),\n      },\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      functionality_type: Host.AidaClient.FunctionalityType.CHAT,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      client_feature: this.clientFeature,\n    };\n    return request;\n  }\n\n  handleAction(action: string, rpcId?: number): AsyncGenerator<SideEffectResponse, ActionResponse, void>;\n  handleAction(): never {\n    throw new Error('Unexpected action found');\n  }\n\n  async enhanceQuery(query: string, selected: ConversationContext<T>|null): Promise<string>;\n  async enhanceQuery(query: string): Promise<string> {\n    return query;\n  }\n\n  parseResponse(response: string): ParsedResponse {\n    return {\n      answer: response,\n    };\n  }\n\n  formatParsedAnswer({answer}: ParsedAnswer): string {\n    return answer;\n  }\n\n  formatParsedStep(step: ParsedStep): string {\n    let text = '';\n    if (step.thought) {\n      text = `THOUGHT: ${step.thought}`;\n    }\n    if (step.title) {\n      text += `\\nTITLE: ${step.title}`;\n    }\n    if (step.action) {\n      text += `\\nACTION\n${step.action}\nSTOP`;\n    }\n\n    return text;\n  }\n\n  get #chatHistoryForAida(): Host.AidaClient.HistoryChunk[] {\n    const history: Array<Host.AidaClient.HistoryChunk> = [];\n    let currentParsedStep: ParsedStep = {};\n    let lastRunStartIdx = 0;\n    const flushCurrentStep = (): void => {\n      const text = this.formatParsedStep(currentParsedStep);\n      if (text) {\n        history.push({\n          entity: Host.AidaClient.Entity.SYSTEM,\n          text,\n        });\n        currentParsedStep = {};\n      }\n    };\n    for (const data of this.#history) {\n      switch (data.type) {\n        case ResponseType.CONTEXT:\n        case ResponseType.SIDE_EFFECT:\n          break;\n        case ResponseType.USER_QUERY:\n          lastRunStartIdx = history.length;\n          break;\n        case ResponseType.QUERYING: {\n          flushCurrentStep();\n          history.push({\n            entity: Host.AidaClient.Entity.USER,\n            text: data.query,\n          });\n          break;\n        }\n        case ResponseType.ANSWER:\n          history.push({\n            entity: Host.AidaClient.Entity.SYSTEM,\n            text: this.formatParsedAnswer({answer: data.text}),\n          });\n          break;\n        case ResponseType.TITLE:\n          currentParsedStep.title = data.title;\n          break;\n        case ResponseType.THOUGHT:\n          currentParsedStep.thought = data.thought;\n          break;\n        case ResponseType.ACTION:\n          currentParsedStep.action = data.code;\n          break;\n        case ResponseType.ERROR:\n          // Delete the end of history.\n          history.splice(lastRunStartIdx);\n          currentParsedStep = {};\n          break;\n      }\n    }\n    // Flush remaining step data into history.\n    flushCurrentStep();\n    return history;\n  }\n\n  #addHistory(data: ResponseData): void {\n    this.#history.push(data);\n    // Remove condition to store the history in storage\n    if (isHistoryEnabled()) {\n      void AiHistoryStorage.instance().upsertHistoryEntry(this.serialized());\n    }\n  }\n\n  async * run(query: string, options: {\n    signal?: AbortSignal, selected: ConversationContext<T>|null,\n  }): AsyncGenerator<ResponseData, void, void> {\n    if (this.#generatedFromHistory) {\n      throw new Error('History entries are read-only.');\n    }\n\n    // First context set on the agent determines its origin from now on.\n    if (options.selected && this.#origin === undefined && options.selected) {\n      this.#origin = options.selected.getOrigin();\n    }\n    // Remember if the context that is set.\n    if (options.selected && !this.#context) {\n      this.#context = options.selected;\n    }\n\n    const enhancedQuery = await this.enhanceQuery(query, options.selected);\n\n    Host.userMetrics.freestylerQueryLength(enhancedQuery.length);\n\n    // Request is built here to capture history up to this point.\n    let request = this.buildRequest({\n      input: enhancedQuery,\n    });\n\n    const response = {\n      type: ResponseType.USER_QUERY,\n      query,\n    } as const;\n    this.#addHistory(response);\n    yield response;\n\n    for await (const response of this.handleContextDetails(options.selected)) {\n      this.#addHistory(response);\n      yield response;\n    }\n\n    query = enhancedQuery;\n\n    for (let i = 0; i < MAX_STEP; i++) {\n      const queryResponse = {\n        type: ResponseType.QUERYING,\n        query,\n      } as const;\n      this.#addHistory(queryResponse);\n      yield queryResponse;\n      let rpcId: number|undefined;\n      let parsedResponse: ParsedResponse|undefined = undefined;\n      try {\n        for await (const fetchResult of this.aidaFetch(request, {signal: options.signal})) {\n          rpcId = fetchResult.rpcId;\n          parsedResponse = fetchResult.parsedResponse;\n\n          // Only yield partial responses here and do not add partial answers to the history.\n          if (!fetchResult.completed && 'answer' in parsedResponse && parsedResponse.answer) {\n            yield {\n              type: ResponseType.ANSWER,\n              text: parsedResponse.answer,\n              rpcId,\n            };\n          }\n        }\n      } catch (err) {\n        debugLog('Error calling the AIDA API', err);\n\n        if (err instanceof Host.AidaClient.AidaAbortError) {\n          const response = {\n            type: ResponseType.ERROR,\n            error: ErrorType.ABORT,\n            rpcId,\n          } as const;\n          this.#addHistory(response);\n          yield response;\n          break;\n        }\n\n        const response = {\n          type: ResponseType.ERROR,\n          error: ErrorType.UNKNOWN,\n          rpcId,\n        } as const;\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiAssistanceError);\n        this.#addHistory(response);\n        yield response;\n\n        break;\n      }\n\n      if (!parsedResponse) {\n        const response = {\n          type: ResponseType.ERROR,\n          error: ErrorType.UNKNOWN,\n          rpcId,\n        } as const;\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiAssistanceError);\n        this.#addHistory(response);\n        yield response;\n        break;\n      }\n\n      if ('answer' in parsedResponse) {\n        const {\n          answer,\n          suggestions,\n        } = parsedResponse;\n        if (answer) {\n          const response = {\n            type: ResponseType.ANSWER,\n            text: answer,\n            rpcId,\n            suggestions,\n          } as const;\n          Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiAssistanceAnswerReceived);\n          this.#addHistory(response);\n          yield response;\n        } else {\n          const response = {\n            type: ResponseType.ERROR,\n            error: ErrorType.UNKNOWN,\n            rpcId,\n          } as const;\n          Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiAssistanceError);\n          this.#addHistory(response);\n          yield response;\n        }\n\n        break;\n      }\n\n      const {\n        title,\n        thought,\n        action,\n      } = parsedResponse;\n\n      if (title) {\n        const response = {\n          type: ResponseType.TITLE,\n          title,\n          rpcId,\n        } as const;\n        this.#addHistory(response);\n        yield response;\n      }\n\n      if (thought) {\n        const response = {\n          type: ResponseType.THOUGHT,\n          thought,\n          rpcId,\n        } as const;\n        this.#addHistory(response);\n        yield response;\n      }\n\n      if (action) {\n        const result = yield* this.handleAction(action, rpcId);\n        this.#addHistory(result);\n        query = `OBSERVATION: ${result.output}`;\n        // Capture history state for the next iteration query.\n        request = this.buildRequest({\n          input: query,\n        });\n        yield result;\n      }\n\n      if (i === MAX_STEP - 1) {\n        const response = {\n          type: ResponseType.ERROR,\n          error: ErrorType.MAX_STEPS,\n        } as const;\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiAssistanceError);\n        this.#addHistory(response);\n        yield response;\n        break;\n      }\n    }\n    if (isDebugMode()) {\n      window.dispatchEvent(new CustomEvent('freestylerdone'));\n    }\n  }\n\n  async * runFromHistory(): AsyncGenerator<ResponseData, void, void> {\n    if (this.isEmpty) {\n      return;\n    }\n\n    this.#generatedFromHistory = true;\n    for (const entry of this.#history) {\n      yield entry;\n    }\n  }\n}\n\nexport function isDebugMode(): boolean {\n  return Boolean(localStorage.getItem('debugFreestylerEnabled'));\n}\n\nexport function debugLog(...log: unknown[]): void {\n  if (!isDebugMode()) {\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(...log);\n}\n\nfunction setDebugFreestylerEnabled(enabled: boolean): void {\n  if (enabled) {\n    localStorage.setItem('debugFreestylerEnabled', 'true');\n  } else {\n    localStorage.removeItem('debugFreestylerEnabled');\n  }\n}\n// @ts-ignore\nglobalThis.setDebugFreestylerEnabled = setDebugFreestylerEnabled;\n\nexport function isHistoryEnabled(): boolean {\n  return Boolean(localStorage.getItem('persistentHistoryAiAssistance'));\n}\n\nfunction setAiAssistancePersistentHistory(enabled: boolean): void {\n  if (enabled) {\n    localStorage.setItem('persistentHistoryAiAssistance', 'true');\n  } else {\n    localStorage.removeItem('persistentHistoryAiAssistance');\n  }\n}\n// @ts-ignore\nglobalThis.setAiAssistancePersistentHistory = setAiAssistancePersistentHistory;\n"]}