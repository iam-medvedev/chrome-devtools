{"version":3,"file":"AiAgent.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/AiAgent.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\n\nexport enum ResponseType {\n  TITLE = 'title',\n  THOUGHT = 'thought',\n  ACTION = 'action',\n  SIDE_EFFECT = 'side-effect',\n  ANSWER = 'answer',\n  ERROR = 'error',\n  QUERYING = 'querying',\n}\n\nexport const enum ErrorType {\n  UNKNOWN = 'unknown',\n  ABORT = 'abort',\n  MAX_STEPS = 'max-steps',\n}\n\nexport interface AnswerResponse {\n  type: ResponseType.ANSWER;\n  text: string;\n  rpcId?: number;\n  suggestions?: string[];\n}\n\nexport interface ErrorResponse {\n  type: ResponseType.ERROR;\n  error: ErrorType;\n  rpcId?: number;\n}\n\nexport interface TitleResponse {\n  type: ResponseType.TITLE;\n  title: string;\n  rpcId?: number;\n}\n\nexport interface ThoughtResponse {\n  type: ResponseType.THOUGHT;\n  thought?: string;\n  contextDetails?: [ContextDetail, ...ContextDetail[]];\n  rpcId?: number;\n}\n\nexport interface SideEffectResponse {\n  type: ResponseType.SIDE_EFFECT;\n  code: string;\n  confirm: (confirm: boolean) => void;\n  rpcId?: number;\n}\n\nexport interface ActionResponse {\n  type: ResponseType.ACTION;\n  code: string;\n  output: string;\n  canceled: boolean;\n  rpcId?: number;\n}\n\nexport interface QueryResponse {\n  type: ResponseType.QUERYING;\n}\n\nexport type ResponseData =\n    AnswerResponse|ErrorResponse|ActionResponse|SideEffectResponse|ThoughtResponse|TitleResponse|QueryResponse;\n\nexport interface ContextDetail {\n  title: string;\n  text: string;\n  codeLang?: string;\n}\n\nexport interface AidaBuildRequestOptions {\n  input: string;\n}\n\nexport interface HistoryChunk {\n  text: string;\n  entity: Host.AidaClient.Entity;\n}\n\nexport interface AidaRequestOptions {\n  temperature?: number;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  model_id?: string;\n}\n\ntype AgentOptions = {\n  aidaClient: Host.AidaClient.AidaClient,\n  serverSideLoggingEnabled?: boolean,\n};\n\nexport abstract class AiAgent {\n  readonly #sessionId: string = crypto.randomUUID();\n  #aidaClient: Host.AidaClient.AidaClient;\n  #serverSideLoggingEnabled: boolean;\n  abstract readonly preamble: string;\n  abstract readonly options: AidaRequestOptions;\n  abstract readonly clientFeature: Host.AidaClient.ClientFeature;\n  abstract readonly userTier: string|undefined;\n\n  /**\n   * Mapping between the unique request id and\n   * the history chuck it created\n   */\n  #chatHistory: Map<number, HistoryChunk[]> = new Map();\n\n  constructor(opts: AgentOptions) {\n    this.#aidaClient = opts.aidaClient;\n    this.#serverSideLoggingEnabled = opts.serverSideLoggingEnabled ?? false;\n  }\n\n  get historyEntry(): Array<HistoryChunk> {\n    return [...this.#chatHistory.values()].flat();\n  }\n\n  get chatHistoryForTesting(): Array<HistoryChunk> {\n    return this.historyEntry;\n  }\n\n  set chatHistoryForTesting(history: Map<number, HistoryChunk[]>) {\n    this.#chatHistory = history;\n  }\n\n  removeHistoryRun(id: number): void {\n    this.#chatHistory.delete(id);\n  }\n\n  addToHistory({\n    id,\n    query,\n    output,\n  }: {\n    id: number,\n    query: string,\n    output: string,\n  }): void {\n    const currentRunEntries = this.#chatHistory.get(id) ?? [];\n\n    this.#chatHistory.set(id, [\n      ...currentRunEntries,\n      {\n        text: query,\n        entity: Host.AidaClient.Entity.USER,\n      },\n      {\n        text: output,\n        entity: Host.AidaClient.Entity.SYSTEM,\n      },\n    ]);\n  }\n\n  #structuredLog: Array<{\n    request: Host.AidaClient.AidaRequest,\n    response: string,\n    rawResponse?: Host.AidaClient.AidaResponse,\n  }> = [];\n  async aidaFetch(\n      input: string,\n      options?: {signal?: AbortSignal},\n      ): Promise<{\n    response: string,\n    rpcId: number|undefined,\n  }> {\n    const request = this.buildRequest({\n      input,\n    });\n\n    let rawResponse: Host.AidaClient.AidaResponse|undefined = undefined;\n    let response = '';\n    let rpcId;\n    for await (rawResponse of this.#aidaClient.fetch(request, options)) {\n      response = rawResponse.explanation;\n      rpcId = rawResponse.metadata.rpcGlobalId ?? rpcId;\n      if (rawResponse.metadata.attributionMetadata?.some(\n              meta => meta.attributionAction === Host.AidaClient.RecitationAction.BLOCK)) {\n        throw new Error('Attribution action does not allow providing the response');\n      }\n    }\n\n    debugLog({\n      request,\n      response: rawResponse,\n    });\n\n    this.#structuredLog.push({\n      request: structuredClone(request),\n      response,\n      rawResponse,\n    });\n    localStorage.setItem('freestylerStructuredLog', JSON.stringify(this.#structuredLog));\n\n    return {response, rpcId};\n  }\n\n  buildRequest(opts: AidaBuildRequestOptions): Host.AidaClient.AidaRequest {\n    const request: Host.AidaClient.AidaRequest = {\n      input: opts.input,\n      preamble: this.preamble,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      chat_history: this.#chatHistory.size ? this.historyEntry : undefined,\n      client: Host.AidaClient.CLIENT_NAME,\n      options: this.options,\n      metadata: {\n        disable_user_content_logging: !(this.#serverSideLoggingEnabled ?? false),\n        string_session_id: this.#sessionId,\n        user_tier: Host.AidaClient.convertToUserTierEnum(this.userTier),\n      },\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      functionality_type: Host.AidaClient.FunctionalityType.CHAT,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      client_feature: this.clientFeature,\n    };\n    return request;\n  }\n\n  static validTemperature(temperature: number|undefined): number|undefined {\n    return typeof temperature === 'number' && temperature >= 0 ? temperature : undefined;\n  }\n}\n\nexport function isDebugMode(): boolean {\n  return Boolean(localStorage.getItem('debugFreestylerEnabled'));\n}\n\nexport function debugLog(...log: unknown[]): void {\n  if (!isDebugMode()) {\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(...log);\n}\n\nfunction setDebugFreestylerEnabled(enabled: boolean): void {\n  if (enabled) {\n    localStorage.setItem('debugFreestylerEnabled', 'true');\n  } else {\n    localStorage.removeItem('debugFreestylerEnabled');\n  }\n}\n// @ts-ignore\nglobalThis.setDebugFreestylerEnabled = setDebugFreestylerEnabled;\n"]}