{"version":3,"file":"FreestylerAgent.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/freestyler/FreestylerAgent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport {\n  describeWithEnvironment,\n  getGetHostConfigStub,\n} from '../../testing/EnvironmentHelpers.js';\n\nimport * as Freestyler from './FreestylerAgent.js';\n\nconst {FreestylerAgent} = Freestyler;\n\ndescribeWithEnvironment('FreestylerAgent', () => {\n  function mockHostConfig(modelId?: string) {\n    getGetHostConfigStub({\n      devToolsFreestylerDogfood: {\n        aidaModelId: modelId,\n      },\n    });\n  }\n  describe('parseResponse', () => {\n    it('parses a thought', async () => {\n      const payload = 'some response';\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(`THOUGHT: ${payload}`),\n          {\n            action: undefined,\n            thought: payload,\n            answer: undefined,\n          },\n      );\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(`   THOUGHT: ${payload}`),\n          {\n            action: undefined,\n            thought: payload,\n            answer: undefined,\n          },\n      );\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(`Something\\n   THOUGHT: ${payload}`),\n          {\n            action: undefined,\n            thought: payload,\n            answer: undefined,\n          },\n      );\n    });\n    it('parses a answer', async () => {\n      const payload = 'some response';\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(`ANSWER: ${payload}`),\n          {\n            action: undefined,\n            thought: undefined,\n            answer: payload,\n          },\n      );\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(`   ANSWER: ${payload}`),\n          {\n            action: undefined,\n            thought: undefined,\n            answer: payload,\n          },\n      );\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(`Something\\n   ANSWER: ${payload}`),\n          {\n            action: undefined,\n            thought: undefined,\n            answer: payload,\n          },\n      );\n    });\n    it('parses a multiline answer', async () => {\n      const payload = `a\nb\nc`;\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(`ANSWER: ${payload}`),\n          {\n            action: undefined,\n            thought: undefined,\n            answer: payload,\n          },\n      );\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(`   ANSWER: ${payload}`),\n          {\n            action: undefined,\n            thought: undefined,\n            answer: payload,\n          },\n      );\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(`Something\\n   ANSWER: ${payload}`),\n          {\n            action: undefined,\n            thought: undefined,\n            answer: payload,\n          },\n      );\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(`ANSWER: ${payload}\\nTHOUGHT: thought`),\n          {\n            action: undefined,\n            thought: 'thought',\n            answer: payload,\n          },\n      );\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(\n              `ANSWER: ${payload}\\nOBSERVATION: observation`,\n              ),\n          {\n            action: undefined,\n            thought: undefined,\n            answer: payload,\n          },\n      );\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(\n              `ANSWER: ${payload}\\nACTION\\naction\\nSTOP`,\n              ),\n          {\n            action: 'action',\n            thought: undefined,\n            answer: payload,\n          },\n      );\n    });\n    it('parses an action', async () => {\n      const payload = `const data = {\n  someKey: \"value\",\n}`;\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(`ACTION\\n${payload}\\nSTOP`),\n          {\n            action: payload,\n            thought: undefined,\n            answer: undefined,\n          },\n      );\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(`ACTION\\n${payload}`),\n          {\n            action: payload,\n            thought: undefined,\n            answer: undefined,\n          },\n      );\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(`ACTION\\n\\n${payload}\\n\\nSTOP`),\n          {\n            action: payload,\n            thought: undefined,\n            answer: undefined,\n          },\n      );\n    });\n\n    it('parses an action with backticks in the code', async () => {\n      const payload = `const data = {\n  someKey: \"value\",\n}`;\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(\n              `ACTION\\n\\`\\`\\`\\n${payload}\\n\\`\\`\\`\\nSTOP`,\n              ),\n          {\n            action: payload,\n            thought: undefined,\n            answer: undefined,\n          },\n      );\n    });\n\n    it('parses an action with 5 backticks in the code and `js` text in the prelude', async () => {\n      const payload = `const data = {\n  someKey: \"value\",\n}`;\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(\n              `ACTION\\n\\`\\`\\`\\`\\`\\njs\\n${payload}\\n\\`\\`\\`\\`\\`\\nSTOP`,\n              ),\n          {\n            action: payload,\n            thought: undefined,\n            answer: undefined,\n          },\n      );\n    });\n\n    it('parses a thought and an action', async () => {\n      const actionPayload = `const data = {\n  someKey: \"value\",\n}`;\n      const thoughtPayload = 'thought';\n      assert.deepStrictEqual(\n          FreestylerAgent.parseResponse(\n              `THOUGHT:${thoughtPayload}\\nACTION\\n${actionPayload}\\nSTOP`,\n              ),\n          {\n            action: actionPayload,\n            thought: thoughtPayload,\n            answer: undefined,\n          },\n      );\n    });\n  });\n\n  describe('buildRequest', () => {\n    beforeEach(() => {\n      sinon.restore();\n    });\n\n    it('builds a request with a model id', async () => {\n      mockHostConfig('test model');\n      assert.strictEqual(\n          FreestylerAgent.buildRequest('test input').options?.model_id,\n          'test model',\n      );\n    });\n\n    it('builds a request with input', async () => {\n      mockHostConfig();\n      const request = FreestylerAgent.buildRequest('test input');\n      assert.strictEqual(request.input, 'test input');\n      assert.strictEqual(request.preamble, undefined);\n      assert.strictEqual(request.chat_history, undefined);\n    });\n\n    it('builds a request with preamble', async () => {\n      mockHostConfig();\n      const request = FreestylerAgent.buildRequest('test input', 'preamble');\n      assert.strictEqual(request.input, 'test input');\n      assert.strictEqual(request.preamble, 'preamble');\n      assert.strictEqual(request.chat_history, undefined);\n    });\n\n    it('builds a request with chat history', async () => {\n      mockHostConfig();\n      const request = FreestylerAgent.buildRequest('test input', undefined, [\n        {\n          text: 'test',\n          entity: Host.AidaClient.Entity.USER,\n        },\n      ]);\n      assert.strictEqual(request.input, 'test input');\n      assert.strictEqual(request.preamble, undefined);\n      assert.deepStrictEqual(request.chat_history, [\n        {\n          text: 'test',\n          entity: 1,\n        },\n      ]);\n    });\n\n    it('structure matches the snapshot', () => {\n      mockHostConfig('test model');\n      assert.deepStrictEqual(\n          FreestylerAgent.buildRequest(\n              'test input', 'preamble',\n              [\n                {\n                  text: 'first',\n                  entity: Host.AidaClient.Entity.UNKNOWN,\n                },\n                {\n                  text: 'second',\n                  entity: Host.AidaClient.Entity.SYSTEM,\n                },\n                {\n                  text: 'third',\n                  entity: Host.AidaClient.Entity.USER,\n                },\n              ]),\n          {\n            input: 'test input',\n            client: 'CHROME_DEVTOOLS',\n            preamble: 'preamble',\n            chat_history: [\n              {\n                entity: 0,\n                text: 'first',\n              },\n              {\n                entity: 2,\n                text: 'second',\n              },\n              {\n                entity: 1,\n                text: 'third',\n              },\n            ],\n            metadata: {\n              disable_user_content_logging: true,\n            },\n            options: {\n              model_id: 'test model',\n              temperature: 0,\n            },\n            client_feature: 2,\n            functionality_type: 1,\n          },\n      );\n    });\n  });\n\n  describe('run', () => {\n    beforeEach(() => {\n      mockHostConfig();\n    });\n\n    function mockAidaClient(\n        generator: () => AsyncGenerator<Host.AidaClient.AidaResponse, void, void>,\n        ): Host.AidaClient.AidaClient {\n      return {\n        async *\n            fetch(\n                _request: Host.AidaClient.AidaRequest,\n                ): AsyncGenerator<Host.AidaClient.AidaResponse, void, void> {\n              yield* generator();\n            },\n      };\n    }\n\n    it('generates an answer immediately', async () => {\n      async function* generateAnswer() {\n        yield {\n          explanation: 'ANSWER: this is the answer',\n          metadata: {},\n        };\n      }\n\n      const execJs = sinon.spy();\n      const agent = new FreestylerAgent({\n        aidaClient: mockAidaClient(generateAnswer),\n        execJs,\n      });\n\n      const steps = await Array.fromAsync(agent.run('test'));\n      assert.deepStrictEqual(steps, [{\n                               step: Freestyler.Step.ANSWER,\n                               text: 'this is the answer',\n                               rpcId: undefined,\n                             }]);\n      sinon.assert.notCalled(execJs);\n      assert.deepStrictEqual(agent.chatHistoryForTesting, [\n        {\n          entity: 1,\n          text: 'QUERY: test',\n        },\n        {\n          entity: 2,\n          text: 'ANSWER: this is the answer',\n        },\n      ]);\n    });\n\n    it('generates an rpcId for the answer', async () => {\n      async function* generateAnswer() {\n        yield {\n          explanation: 'ANSWER: this is the answer',\n          metadata: {\n            rpcGlobalId: 123,\n          },\n        };\n      }\n\n      const agent = new FreestylerAgent({\n        aidaClient: mockAidaClient(generateAnswer),\n        execJs: sinon.spy(),\n      });\n\n      const steps = await Array.fromAsync(agent.run('test'));\n      assert.deepStrictEqual(steps, [{\n                               step: Freestyler.Step.ANSWER,\n                               text: 'this is the answer',\n                               rpcId: 123,\n                             }]);\n    });\n\n    it('generates a response if nothing is returned', async () => {\n      async function* generateNothing() {\n        yield {\n          explanation: '',\n          metadata: {},\n        };\n      }\n\n      const execJs = sinon.spy();\n      const agent = new FreestylerAgent({\n        aidaClient: mockAidaClient(generateNothing),\n        execJs,\n      });\n      const steps = await Array.fromAsync(agent.run('test'));\n      assert.deepStrictEqual(steps, [{\n                               step: Freestyler.Step.ANSWER,\n                               text: 'Sorry, I could not help you with this query.',\n                               rpcId: undefined,\n                             }]);\n      sinon.assert.notCalled(execJs);\n      assert.deepStrictEqual(agent.chatHistoryForTesting, [\n        {\n          entity: 1,\n          text: 'QUERY: test',\n        },\n        {\n          entity: 2,\n          text: '',\n        },\n      ]);\n    });\n\n    it('generates history for multiple actions', async () => {\n      let count = 0;\n      async function* generateMultipleTimes() {\n        if (count === 3) {\n          yield {\n            explanation: 'ANSWER: this is the answer',\n            metadata: {},\n          };\n          return;\n        }\n        count++;\n        yield {\n          explanation: `THOUGHT: thought ${count}\\nACTION\\nconsole.log('test')\\nSTOP\\n`,\n          metadata: {},\n        };\n      }\n\n      const execJs = sinon.spy();\n      const agent = new FreestylerAgent({\n        aidaClient: mockAidaClient(generateMultipleTimes),\n        execJs,\n      });\n\n      await Array.fromAsync(agent.run('test'));\n\n      assert.deepStrictEqual(agent.chatHistoryForTesting, [\n        {\n          entity: 1,\n          text: 'QUERY: test',\n        },\n        {\n          entity: 2,\n          text: 'THOUGHT: thought 1\\nACTION\\nconsole.log(\\'test\\')\\nSTOP\\n',\n        },\n        {\n          entity: 1,\n          text: 'OBSERVATION: undefined',\n        },\n        {\n          entity: 2,\n          text: 'THOUGHT: thought 2\\nACTION\\nconsole.log(\\'test\\')\\nSTOP\\n',\n        },\n        {\n          entity: 1,\n          text: 'OBSERVATION: undefined',\n        },\n        {\n          entity: 2,\n          text: 'THOUGHT: thought 3\\nACTION\\nconsole.log(\\'test\\')\\nSTOP\\n',\n        },\n        {\n          entity: 1,\n          text: 'OBSERVATION: undefined',\n        },\n        {\n          entity: 2,\n          text: 'ANSWER: this is the answer',\n        },\n      ]);\n    });\n\n    it('stops when aborted', async () => {\n      let count = 0;\n      async function* generateMultipleTimes() {\n        if (count === 3) {\n          yield {\n            explanation: 'ANSWER: this is the answer',\n            metadata: {},\n          };\n          return;\n        }\n        count++;\n        yield {\n          explanation: `THOUGHT: thought ${count}\\nACTION\\nconsole.log('test')\\nSTOP\\n`,\n          metadata: {},\n        };\n      }\n\n      const execJs = sinon.spy();\n      const agent = new FreestylerAgent({\n        aidaClient: mockAidaClient(generateMultipleTimes),\n        execJs,\n      });\n\n      const controller = new AbortController();\n      controller.abort();\n      await Array.fromAsync(agent.run('test', {signal: controller.signal}));\n\n      assert.deepStrictEqual(agent.chatHistoryForTesting, []);\n    });\n  });\n});\n"]}