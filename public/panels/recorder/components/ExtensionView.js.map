{"version":3,"file":"ExtensionView.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/components/ExtensionView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../ui/legacy/legacy.js';\nimport '../../../ui/components/icon_button/icon_button.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as PublicExtensions from '../../../models/extensions/extensions.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as Lit from '../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\nimport * as Extensions from '../extensions/extensions.js';\n\nimport extensionViewStylesRaw from './extensionView.css.js';\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst extensionViewStyles = new CSSStyleSheet();\nextensionViewStyles.replaceSync(extensionViewStylesRaw.cssContent);\n\nconst {html} = Lit;\n\nconst UIStrings = {\n  /**\n   * @description The button label that closes the panel that shows the extension content inside the Recorder panel.\n   */\n  closeView: 'Close',\n  /**\n   * @description The label that indicates that the content shown is provided by a browser extension.\n   */\n  extension: 'Content provided by a browser extension',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings(\n    'panels/recorder/components/ExtensionView.ts',\n    UIStrings,\n);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-recorder-extension-view': ExtensionView;\n  }\n  interface HTMLElementEventMap {\n    recorderextensionviewclosed: ClosedEvent;\n  }\n}\n\nexport class ClosedEvent extends Event {\n  static readonly eventName = 'recorderextensionviewclosed';\n  constructor() {\n    super(ClosedEvent.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class ExtensionView extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #descriptor?: PublicExtensions.RecorderPluginManager.ViewDescriptor;\n\n  constructor() {\n    super();\n\n    this.setAttribute('jslog', `${VisualLogging.section('extension-view')}`);\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [extensionViewStyles];\n    this.#render();\n  }\n\n  disconnectedCallback(): void {\n    if (!this.#descriptor) {\n      return;\n    }\n    Extensions.ExtensionManager.ExtensionManager.instance().getView(this.#descriptor.id).hide();\n  }\n\n  set descriptor(\n      descriptor: PublicExtensions.RecorderPluginManager.ViewDescriptor,\n  ) {\n    this.#descriptor = descriptor;\n    this.#render();\n    Extensions.ExtensionManager.ExtensionManager.instance().getView(descriptor.id).show();\n  }\n\n  #closeView(): void {\n    this.dispatchEvent(new ClosedEvent());\n  }\n\n  #render(): void {\n    if (!this.#descriptor) {\n      return;\n    }\n    const iframe = Extensions.ExtensionManager.ExtensionManager.instance().getView(this.#descriptor.id).frame();\n    // clang-format off\n    Lit.render(\n      html`\n        <div class=\"extension-view\">\n          <header>\n            <div class=\"title\">\n              <devtools-icon\n                class=\"icon\"\n                title=${i18nString(UIStrings.extension)}\n                name=\"extension\">\n              </devtools-icon>\n              ${this.#descriptor.title}\n            </div>\n            <devtools-button\n              title=${i18nString(UIStrings.closeView)}\n              jslog=${VisualLogging.close().track({click: true})}\n              .data=${\n                {\n                  variant: Buttons.Button.Variant.ICON,\n                  size: Buttons.Button.Size.SMALL,\n                  iconName: 'cross',\n                } as Buttons.Button.ButtonData\n              }\n              @click=${this.#closeView}\n            ></devtools-button>\n          </header>\n          <main>\n            ${iframe}\n          </main>\n      </div>\n    `,\n      this.#shadow,\n      { host: this },\n    );\n    // clang-format on\n  }\n}\n\ncustomElements.define(\n    'devtools-recorder-extension-view',\n    ExtensionView,\n);\n"]}