{"version":3,"file":"RecordingPlayer.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/models/RecordingPlayer.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  createCustomStep,\n  installMocksForRecordingPlayer,\n  installMocksForTargetManager,\n} from '../testing/RecorderHelpers.js';\n\nimport * as Models from './models.js';\n\ndescribe('RecordingPlayer', () => {\n  let recordingPlayer: Models.RecordingPlayer.RecordingPlayer;\n  /**\n   * Create a promise that resolve once the Stop event is emitted\n   * And return a new Promise that awaits the Stop event\n   * Useful when dealing with breakpoints\n   */\n  function createStopEvent(\n      recordingPlayer: Models.RecordingPlayer.RecordingPlayer,\n      stopTimes = 1,\n  ) {\n    const stopEvent: {promise: Promise<void>} = {promise: Promise.resolve()};\n\n    function createPromise() {\n      return new Promise<void>(resolve => {\n        recordingPlayer.addEventListener(\n            Models.RecordingPlayer.Events.STOP,\n            () => {\n              // setTimeout is needed to insure that the checks are ran\n              // on the next tick\n              setTimeout(() => {\n                resolve();\n              }, 0);\n            },\n            {once: true},\n        );\n      });\n    }\n\n    stopEvent.promise = createPromise().then(() => {\n      const time = stopTimes - 1;\n      if (time > 0) {\n        stopEvent.promise = createPromise();\n      } else {\n        stopEvent.promise = Promise.reject(new Error('Unexpected call to stopPromise'));\n      }\n    });\n    return stopEvent;\n  }\n\n  beforeEach(() => {\n    installMocksForTargetManager();\n    installMocksForRecordingPlayer();\n  });\n\n  afterEach(() => {\n    recordingPlayer.disposeForTesting();\n  });\n\n  it('should emit `Step` event before executing in every step', async () => {\n    recordingPlayer = new Models.RecordingPlayer.RecordingPlayer(\n        {\n          title: 'test',\n          steps: [\n            createCustomStep(),\n            createCustomStep(),\n            createCustomStep(),\n          ],\n        },\n        {\n          speed: Models.RecordingPlayer.PlayRecordingSpeed.NORMAL,\n          breakpointIndexes: new Set(),\n        },\n    );\n    const stepEventHandlerStub = sinon.stub().callsFake(async ({data: {resolve}}) => {\n      resolve();\n    });\n    recordingPlayer.addEventListener(\n        Models.RecordingPlayer.Events.STEP,\n        stepEventHandlerStub,\n    );\n\n    await recordingPlayer.play();\n\n    assert.lengthOf(stepEventHandlerStub.getCalls(), 3);\n  });\n\n  describe('Step by step execution', () => {\n    it('should stop execution before executing a step that has a breakpoint', async () => {\n      recordingPlayer = new Models.RecordingPlayer.RecordingPlayer(\n          {\n            title: 'test',\n            steps: [\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n            ],\n          },\n          {\n            speed: Models.RecordingPlayer.PlayRecordingSpeed.NORMAL,\n            breakpointIndexes: new Set([1]),\n          },\n      );\n      const stepEventHandlerStub = sinon.stub().callsFake(async ({data: {resolve}}) => {\n        resolve();\n      });\n      const stopEvent = createStopEvent(recordingPlayer);\n      recordingPlayer.addEventListener(\n          Models.RecordingPlayer.Events.STEP,\n          stepEventHandlerStub,\n      );\n\n      void recordingPlayer.play();\n      await stopEvent.promise;\n\n      assert.lengthOf(stepEventHandlerStub.getCalls(), 2);\n    });\n\n    it('should `stepOver` execute only the next step after breakpoint and stop', async () => {\n      recordingPlayer = new Models.RecordingPlayer.RecordingPlayer(\n          {\n            title: 'test',\n            steps: [\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n            ],\n          },\n          {\n            speed: Models.RecordingPlayer.PlayRecordingSpeed.NORMAL,\n            breakpointIndexes: new Set([1]),\n          },\n      );\n      const stepEventHandlerStub = sinon.stub().callsFake(async ({data: {resolve}}) => {\n        resolve();\n      });\n      const stopEvent = createStopEvent(recordingPlayer, 2);\n      recordingPlayer.addEventListener(\n          Models.RecordingPlayer.Events.STEP,\n          stepEventHandlerStub,\n      );\n\n      void recordingPlayer.play();\n      await stopEvent.promise;\n      assert.lengthOf(stepEventHandlerStub.getCalls(), 2);\n      recordingPlayer.stepOver();\n\n      await stopEvent.promise;\n\n      assert.lengthOf(stepEventHandlerStub.getCalls(), 3);\n    });\n\n    it('should `continue` execute until the next breakpoint', async () => {\n      recordingPlayer = new Models.RecordingPlayer.RecordingPlayer(\n          {\n            title: 'test',\n            steps: [\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n            ],\n          },\n          {\n            speed: Models.RecordingPlayer.PlayRecordingSpeed.NORMAL,\n            breakpointIndexes: new Set([1, 3]),\n          },\n      );\n      const stepEventHandlerStub = sinon.stub().callsFake(async ({data: {resolve}}) => {\n        resolve();\n      });\n      const stopEvent = createStopEvent(recordingPlayer, 2);\n      recordingPlayer.addEventListener(\n          Models.RecordingPlayer.Events.STEP,\n          stepEventHandlerStub,\n      );\n\n      void recordingPlayer.play();\n      await stopEvent.promise;\n      assert.lengthOf(stepEventHandlerStub.getCalls(), 2);\n      recordingPlayer.continue();\n      await stopEvent.promise;\n\n      assert.lengthOf(stepEventHandlerStub.getCalls(), 4);\n    });\n\n    it('should `continue` execute until the end if there is no later breakpoints', async () => {\n      recordingPlayer = new Models.RecordingPlayer.RecordingPlayer(\n          {\n            title: 'test',\n            steps: [\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n            ],\n          },\n          {\n            speed: Models.RecordingPlayer.PlayRecordingSpeed.NORMAL,\n            breakpointIndexes: new Set([1]),\n          },\n      );\n      const stepEventHandlerStub = sinon.stub().callsFake(async ({data: {resolve}}) => {\n        resolve();\n      });\n      const stopEvent = createStopEvent(recordingPlayer);\n      const doneEventPromise = new Promise<void>(resolve => {\n        recordingPlayer.addEventListener(\n            Models.RecordingPlayer.Events.DONE,\n            () => {\n              resolve();\n            },\n            {once: true},\n        );\n      });\n      recordingPlayer.addEventListener(\n          Models.RecordingPlayer.Events.STEP,\n          stepEventHandlerStub,\n      );\n\n      void recordingPlayer.play();\n      await stopEvent.promise;\n      assert.lengthOf(stepEventHandlerStub.getCalls(), 2);\n      recordingPlayer.continue();\n      await doneEventPromise;\n\n      assert.lengthOf(stepEventHandlerStub.getCalls(), 5);\n    });\n  });\n});\n"]}