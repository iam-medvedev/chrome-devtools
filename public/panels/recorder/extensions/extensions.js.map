{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/recorder/extensions/ExtensionManager.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Extensions from '../../../models/extensions/extensions.js';\n\nlet instance: ExtensionManager|null = null;\n\nexport interface Extension {\n  getName(): string;\n  getMediaType(): string|undefined;\n  stringify(recording: Object): Promise<string>;\n  stringifyStep(step: Object): Promise<string>;\n  getCapabilities(): Array<'replay'|'export'>;\n  replay(recording: Object): void;\n}\n\nexport class ExtensionManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  static instance(): ExtensionManager {\n    if (!instance) {\n      instance = new ExtensionManager();\n    }\n    return instance;\n  }\n\n  #views = new Map<string, ExtensionIframe>();\n\n  constructor() {\n    super();\n    this.attach();\n  }\n\n  attach(): void {\n    const pluginManager = Extensions.RecorderPluginManager.RecorderPluginManager.instance();\n    pluginManager.addEventListener(Extensions.RecorderPluginManager.Events.PLUGIN_ADDED, this.#handlePlugin);\n    pluginManager.addEventListener(Extensions.RecorderPluginManager.Events.PLUGIN_REMOVED, this.#handlePlugin);\n    pluginManager.addEventListener(Extensions.RecorderPluginManager.Events.VIEW_REGISTERED, this.#handleView);\n    for (const descriptor of pluginManager.views()) {\n      this.#handleView({data: descriptor});\n    }\n  }\n\n  detach(): void {\n    const pluginManager = Extensions.RecorderPluginManager.RecorderPluginManager.instance();\n    pluginManager.removeEventListener(Extensions.RecorderPluginManager.Events.PLUGIN_ADDED, this.#handlePlugin);\n    pluginManager.removeEventListener(Extensions.RecorderPluginManager.Events.PLUGIN_REMOVED, this.#handlePlugin);\n    pluginManager.removeEventListener(Extensions.RecorderPluginManager.Events.VIEW_REGISTERED, this.#handleView);\n    this.#views.clear();\n  }\n\n  extensions(): Extension[] {\n    return Extensions.RecorderPluginManager.RecorderPluginManager.instance().plugins();\n  }\n\n  getView(descriptorId: string): ExtensionIframe {\n    const view = this.#views.get(descriptorId);\n    if (!view) {\n      throw new Error('View not found');\n    }\n    return view;\n  }\n\n  #handlePlugin = (): void => {\n    this.dispatchEventToListeners(Events.EXTENSIONS_UPDATED, this.extensions());\n  };\n\n  #handleView = (event: {data: Extensions.RecorderPluginManager.ViewDescriptor}): void => {\n    const descriptor = event.data;\n    if (!this.#views.has(descriptor.id)) {\n      this.#views.set(descriptor.id, new ExtensionIframe(descriptor));\n    }\n  };\n}\n\nclass ExtensionIframe {\n  #descriptor: Extensions.RecorderPluginManager.ViewDescriptor;\n  #iframe: HTMLIFrameElement;\n  #isShowing = false;\n  #isLoaded = false;\n\n  constructor(descriptor: Extensions.RecorderPluginManager.ViewDescriptor) {\n    this.#descriptor = descriptor;\n    this.#iframe = document.createElement('iframe');\n    this.#iframe.src = descriptor.pagePath;\n    this.#iframe.onload = this.#onIframeLoad;\n  }\n\n  #onIframeLoad = (): void => {\n    this.#isLoaded = true;\n    if (this.#isShowing) {\n      this.#descriptor.onShown();\n    }\n  };\n\n  show(): void {\n    if (this.#isShowing) {\n      return;\n    }\n    this.#isShowing = true;\n    if (this.#isLoaded) {\n      this.#descriptor.onShown();\n    }\n  }\n\n  hide(): void {\n    if (!this.#isShowing) {\n      return;\n    }\n    this.#isShowing = false;\n    this.#isLoaded = false;\n    this.#descriptor.onHidden();\n  }\n\n  frame(): HTMLIFrameElement {\n    return this.#iframe;\n  }\n}\n\nexport const enum Events {\n  EXTENSIONS_UPDATED = 'extensionsUpdated',\n}\n\nexport interface EventTypes {\n  [Events.EXTENSIONS_UPDATED]: Extension[];\n}\n"],
  "mappings": ";;;;;;;AAAA;;;;AAKA,YAAY,YAAY;AACxB,YAAY,gBAAgB;AAE5B,IAAI,WAAkC;AAWhC,IAAO,mBAAP,MAAO,0BAAgC,qBAAc,cAAyB;EAClF,OAAO,WAAQ;AACb,QAAI,CAAC,UAAU;AACb,iBAAW,IAAI,kBAAgB;IACjC;AACA,WAAO;EACT;EAEA,SAAS,oBAAI,IAAG;EAEhB,cAAA;AACE,UAAK;AACL,SAAK,OAAM;EACb;EAEA,SAAM;AACJ,UAAM,gBAA2B,iCAAsB,sBAAsB,SAAQ;AACrF,kBAAc,iBAAgB,eAAuD,KAAK,aAAa;AACvG,kBAAc,iBAAgB,iBAAyD,KAAK,aAAa;AACzG,kBAAc,iBAAgB,kBAA0D,KAAK,WAAW;AACxG,eAAW,cAAc,cAAc,MAAK,GAAI;AAC9C,WAAK,YAAY,EAAC,MAAM,WAAU,CAAC;IACrC;EACF;EAEA,SAAM;AACJ,UAAM,gBAA2B,iCAAsB,sBAAsB,SAAQ;AACrF,kBAAc,oBAAmB,eAAuD,KAAK,aAAa;AAC1G,kBAAc,oBAAmB,iBAAyD,KAAK,aAAa;AAC5G,kBAAc,oBAAmB,kBAA0D,KAAK,WAAW;AAC3G,SAAK,OAAO,MAAK;EACnB;EAEA,aAAU;AACR,WAAkB,iCAAsB,sBAAsB,SAAQ,EAAG,QAAO;EAClF;EAEA,QAAQ,cAAoB;AAC1B,UAAM,OAAO,KAAK,OAAO,IAAI,YAAY;AACzC,QAAI,CAAC,MAAM;AACT,YAAM,IAAI,MAAM,gBAAgB;IAClC;AACA,WAAO;EACT;EAEA,gBAAgB,MAAW;AACzB,SAAK,yBAAwB,qBAA4B,KAAK,WAAU,CAAE;EAC5E;EAEA,cAAc,CAAC,UAAwE;AACrF,UAAM,aAAa,MAAM;AACzB,QAAI,CAAC,KAAK,OAAO,IAAI,WAAW,EAAE,GAAG;AACnC,WAAK,OAAO,IAAI,WAAW,IAAI,IAAI,gBAAgB,UAAU,CAAC;IAChE;EACF;;AAGF,IAAM,kBAAN,MAAqB;EACnB;EACA;EACA,aAAa;EACb,YAAY;EAEZ,YAAY,YAA2D;AACrE,SAAK,cAAc;AACnB,SAAK,UAAU,SAAS,cAAc,QAAQ;AAC9C,SAAK,QAAQ,MAAM,WAAW;AAC9B,SAAK,QAAQ,SAAS,KAAK;EAC7B;EAEA,gBAAgB,MAAW;AACzB,SAAK,YAAY;AACjB,QAAI,KAAK,YAAY;AACnB,WAAK,YAAY,QAAO;IAC1B;EACF;EAEA,OAAI;AACF,QAAI,KAAK,YAAY;AACnB;IACF;AACA,SAAK,aAAa;AAClB,QAAI,KAAK,WAAW;AAClB,WAAK,YAAY,QAAO;IAC1B;EACF;EAEA,OAAI;AACF,QAAI,CAAC,KAAK,YAAY;AACpB;IACF;AACA,SAAK,aAAa;AAClB,SAAK,YAAY;AACjB,SAAK,YAAY,SAAQ;EAC3B;EAEA,QAAK;AACH,WAAO,KAAK;EACd;;",
  "names": []
}
