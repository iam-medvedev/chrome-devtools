{"version":3,"file":"injected.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/recorder/injected.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {DevToolsRecorder} from './injected/injected.js';\nimport type {Schema} from './models/models.js';\n\ndescribe('Injected', () => {\n  let iframe: HTMLIFrameElement|undefined;\n  // TODO: use smaller test pages per test.\n  const testPage = `<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Recording Client example</title>\n    <style>\n      html, body, * {\n        margin: 0;\n        padding: 0;\n      }\n      button {\n        width: 100px;\n        height: 20px;\n      }\n    </style>\n  </head>\n  <body>\n\n    <button aria-role=\"button\" aria-name=\"testButton\" id=\"button\"></button>\n    <button id=\"buttonNoARIA\"></button>\n    <button id=\"buttonWithLength11\">length a 11</button>\n    <button id=\"buttonWithLength12\">length aa 12</button>\n    <button id=\"buttonWithLength32\">length aaaaaaaaa aaaaaaaaa aa 32</button>\n    <button id=\"buttonWithLength33\">length aaaaaaaaa aaaaaaaaa aaa 33</button>\n    <button id=\"buttonWithLength64\">length aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaa 64</button>\n    <button id=\"buttonWithLength65\">length aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaa 65</button>\n    <button id=\"buttonWithNewLines\">\n      with newlines\n    </button>\n    <input id=\"input\"></input>\n\n    <script>\n      class ShadowCSSSelectorElement extends HTMLElement {\n        constructor() {\n          super();\n          const shadow = this.attachShadow({mode: 'open'});\n          shadow.innerHTML = \\`\n            <p>sss</p>\n            <button id=\"insideShadowRoot\">Login</button>\n          \\`;\n        }\n      }\n      customElements.define('shadow-css-selector-element', ShadowCSSSelectorElement);\n\n      class ShadowARIASelectorElement extends HTMLElement {\n        constructor() {\n          super();\n          const shadow = this.attachShadow({mode: 'open'});\n          shadow.innerHTML = \\`\n            <p>sss</p>\n            <button aria-role=\"button\" aria-name=\"login\">Login</button>\n          \\`;\n        }\n      }\n      customElements.define('shadow-aria-selector-element', ShadowARIASelectorElement);\n    </script>\n    <header>\n      <shadow-css-selector-element></shadow-css-selector-element>\n    </header>\n    <main>\n      <shadow-css-selector-element></shadow-css-selector-element>\n    </main>\n\n    <div aria-role=\"header\">\n      <shadow-aria-selector-element></shadow-aria-selector-element>\n    </div>\n    <div aria-role=\"main\">\n      <shadow-aria-selector-element></shadow-aria-selector-element>\n    </div>\n\n    <div aria-name=\"parent-name\">\n      <div id=\"no-aria-name-or-role\" aria-name=\"\" aria-role=\"\">\n    </div>\n\n    <host-element id=\"slotted-host-element\">\n      <template shadowrootmode=\"open\">\n        <slot></slot>\n      </template>\n      text in slot\n    </host-element>\n\n    <button class=\"custom-selector-attribute\" data-testid=\"unique\">Custom selector</button>\n    <button class=\"custom-selector-attribute\" data-testid=\"123456789\">Custom selector (invalid CSS id)</button>\n\n    <host-element id=\"shadow-root-with-custom-selectors\" data-qa=\"custom-id\">\n      <template shadowrootmode=\"open\">\n        <button data-testid=\"shadow button\">Shadow button with testid</button>>\n      </template>\n    </host-element>\n\n    <div id=\"notunique\"></div>\n    <div id=\"notunique\"></div>\n  </body>\n</html>`;\n\n  /**\n   * Loads scripts injected by Recorder into a new iframe to make sure\n   * they run in dedicated environment.\n   */\n  async function createSandbox(): Promise<Window> {\n    const url = new URL('./injected/injected.generated.js', import.meta.url);\n\n    iframe = document.createElement('iframe');\n    const {promise, resolve} = Promise.withResolvers();\n    iframe.srcdoc = testPage;\n    iframe.onload = resolve;\n    document.body.append(iframe);\n    await promise;\n    const iframeDocument = iframe.contentDocument!;\n    {\n      const {promise, resolve} = Promise.withResolvers();\n      const script = iframeDocument.createElement('script');\n      script.src = url.toString();\n      script.onload = resolve;\n      iframeDocument.body.append(script);\n      await promise;\n    }\n    const iframeWindow = iframe.contentWindow!;\n    {\n      (iframeWindow.DevToolsRecorder as DevToolsRecorder)\n          .startRecording(\n              {\n                // We don't have the access to the actual bindings here. Therefore, the test assumes\n                // that the markup is explicitly annotated with the following attributes.\n                getAccessibleName: (element: Node) => {\n                  if (!('getAttribute' in element)) {\n                    return '';\n                  }\n                  return (element as Element).getAttribute('aria-name') || '';\n                },\n                getAccessibleRole: (element: Node) => {\n                  if (!('getAttribute' in element)) {\n                    return 'generic';\n                  }\n                  return (element as Element).getAttribute('aria-role') || '';\n                },\n              },\n              {\n                debug: false,\n                allowUntrustedEvents: true,\n                selectorTypesToRecord: [\n                  'xpath',\n                  'css',\n                  'text',\n                  'aria',\n                  'pierce',\n                ] as Schema.SelectorType[],\n              },\n          );\n    }\n\n    return iframeWindow;\n  }\n\n  afterEach(() => {\n    iframe?.remove();\n  });\n\n  it('should get selectors for an element', async () => {\n    const window = await createSandbox();\n    const selectors = window.DevToolsRecorder.recordingClientForTesting.getSelectors(\n        window.document.querySelector('#buttonNoARIA')!,\n    );\n    assert.deepEqual(selectors, [\n      [\n        '#buttonNoARIA',\n      ],\n      [\n        'xpath///*[@id=\"buttonNoARIA\"]',\n      ],\n      [\n        'pierce/#buttonNoARIA',\n      ]\n    ]);\n  });\n\n  it('should get selectors for elements with custom selector attributes', async () => {\n    const window = await createSandbox();\n    const targets = [\n      ...window.document.querySelectorAll('.custom-selector-attribute'),\n      window.document.querySelector('#shadow-root-with-custom-selectors')?.shadowRoot?.querySelector('button') as\n          HTMLButtonElement,\n    ];\n    const selectors = targets.map(\n        window.DevToolsRecorder.recordingClientForTesting.getSelectors,\n    );\n    assert.deepEqual(selectors, [\n      [\n        [\n          '[data-testid=\\'unique\\']',\n        ],\n        [\n          'xpath///*[@data-testid=\"unique\"]',\n        ],\n        [\n          'pierce/[data-testid=\\'unique\\']',\n        ]\n      ],\n      [\n        ['[data-testid=\\'\\\\31 23456789\\']'], ['xpath///*[@data-testid=\"123456789\"]'],\n        ['pierce/[data-testid=\\'\\\\31 23456789\\']'], ['text/Custom selector (invalid']\n      ],\n      [\n        ['[data-qa=\\'custom-id\\']', '[data-testid=\\'shadow\\\\ button\\']'], ['pierce/[data-testid=\\'shadow\\\\ button\\']'],\n        ['text/Shadow button']\n      ]\n    ]);\n  });\n\n  it('should get selectors for shadow root elements', async () => {\n    const window = await createSandbox();\n    const selectors = window.DevToolsRecorder.recordingClientForTesting.getSelectors(\n        window.document.querySelector('main')\n            ?.querySelector('shadow-css-selector-element')\n            ?.shadowRoot?.querySelector('#insideShadowRoot')!,\n    );\n    assert.deepEqual(selectors, [\n      ['main > shadow-css-selector-element', '#insideShadowRoot'],\n      ['pierce/main > shadow-css-selector-element', 'pierce/#insideShadowRoot']\n    ]);\n  });\n\n  it('should get an ARIA selector for shadow root elements', async () => {\n    const window = await createSandbox();\n    const selectors = window.DevToolsRecorder.recordingClientForTesting.getSelectors(\n        window.document.querySelector('[aria-role=\"main\"]')\n            ?.querySelector('shadow-aria-selector-element')\n            ?.shadowRoot?.querySelector('button')!,\n    );\n    assert.deepEqual(selectors, [\n      ['aria/[role=\"main\"]', 'aria/login'], ['div:nth-of-type(2) > shadow-aria-selector-element', 'button'],\n      ['pierce/div:nth-of-type(2) > shadow-aria-selector-element', 'pierce/button']\n    ]);\n  });\n\n  it('should not get an ARIA selector if the target element has no name or role', async () => {\n    const window = await createSandbox();\n    const selectors = window.DevToolsRecorder.recordingClientForTesting.getSelectors(\n        window.document.querySelector('#no-aria-name-or-role')!);\n    assert.deepEqual(\n        selectors,\n        [['#no-aria-name-or-role'], ['xpath///*[@id=\"no-aria-name-or-role\"]'], ['pierce/#no-aria-name-or-role']]);\n  });\n\n  describe('CSS selectors', () => {\n    it('should query CSS selectors', async () => {\n      const window = await createSandbox();\n      const results = [\n        window.DevToolsRecorder.recordingClientForTesting\n            .queryCSSSelectorAllForTesting(\n                ['[data-qa=custom-id]', '[data-testid=shadow\\\\ button]'],\n                )\n            .length,\n        window.DevToolsRecorder.recordingClientForTesting\n            .queryCSSSelectorAllForTesting(\n                ['[data-qa=custom-id]'],\n                )\n            .length,\n        window.DevToolsRecorder.recordingClientForTesting\n            .queryCSSSelectorAllForTesting(\n                '[data-qa=custom-id]',\n                )\n            .length,\n        window.DevToolsRecorder.recordingClientForTesting\n            .queryCSSSelectorAllForTesting(\n                '.doesnotexist',\n                )\n            .length,\n        window.DevToolsRecorder.recordingClientForTesting\n            .queryCSSSelectorAllForTesting(\n                ['[data-qa=custom-id]', '.doesnotexist'],\n                )\n            .length,\n        window.DevToolsRecorder.recordingClientForTesting\n            .queryCSSSelectorAllForTesting(\n                ['#notunique'],\n                )\n            .length,\n      ];\n      assert.deepEqual(results, [1, 1, 1, 0, 0, 2]);\n    });\n\n    it('should return not-optimized CSS selectors for duplicate elements', async () => {\n      const window = await createSandbox();\n      const selectors =\n          window.DevToolsRecorder.recordingClientForTesting.getSelectors(window.document.querySelector('#notunique')!);\n      assert.deepEqual(selectors, [\n        ['div:nth-of-type(3) > div:nth-of-type(2)'], ['xpath///*[@id=\"notunique\"]'],\n        ['pierce/div:nth-of-type(3) > div:nth-of-type(2)']\n      ]);\n    });\n  });\n\n  describe('Text selectors', () => {\n    const getSelectorOfButtonWithLength = async (length: number) => {\n      const window = await createSandbox();\n      const selector = `#buttonWithLength${length}`;\n      const target = window.document.querySelector(selector);\n      if (!target) {\n        throw new Error(`${selector} could not be found.`);\n      }\n      if (target.innerHTML.length !== length) {\n        throw new Error(`${selector} is not of length ${length}`);\n      }\n      return window.DevToolsRecorder.recordingClientForTesting.getTextSelector(\n          target,\n      );\n    };\n    const MINIMUM_LENGTH = 12;\n    const MAXIMUM_LENGTH = 64;\n    const SAME_PREFIX_TEXT_LENGTH = 32;\n\n    it('should return a text selector for elements < minimum length', async () => {\n      const selectors = await getSelectorOfButtonWithLength(MINIMUM_LENGTH - 1);\n      assert.deepEqual(selectors, ['text/length a 11']);\n    });\n    it('should return a text selector for elements == minimum length', async () => {\n      const selectors = await getSelectorOfButtonWithLength(MINIMUM_LENGTH);\n      assert.deepEqual(selectors, ['text/length aa 12']);\n    });\n    it('should return a text selector for elements == maximum length', async () => {\n      const selectors = await getSelectorOfButtonWithLength(MAXIMUM_LENGTH);\n      assert.deepEqual(selectors, ['text/length aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaaaaaaa aaaa 64']);\n    });\n    it('should not return a text selector for elements > maximum length', async () => {\n      const selectors = await getSelectorOfButtonWithLength(MAXIMUM_LENGTH + 1);\n      assert.isUndefined(selectors);\n    });\n    it('should return a text selector correctly with same prefix elements', async () => {\n      let selectors = await getSelectorOfButtonWithLength(\n          SAME_PREFIX_TEXT_LENGTH,\n      );\n      assert.deepEqual(selectors, ['text/length aaaaaaaaa aaaaaaaaa aa 32']);\n      selectors = await getSelectorOfButtonWithLength(\n          SAME_PREFIX_TEXT_LENGTH + 1,\n      );\n      assert.deepEqual(selectors, ['text/length aaaaaaaaa aaaaaaaaa aaa 33']);\n    });\n    it('should trim text selectors', async () => {\n      const window = await createSandbox();\n      assert.deepEqual(\n          window.DevToolsRecorder.recordingClientForTesting.getTextSelector(\n              window.document.querySelector('#buttonWithNewLines')!,\n              ),\n          ['text/with newlines']);\n    });\n  });\n});\n"]}