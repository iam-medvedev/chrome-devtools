{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/recorder/RecorderController.ts", "recorderController.css.js", "../../../../../../front_end/panels/recorder/RecorderEvents.ts", "../../../../../../front_end/panels/recorder/RecorderPanel.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as PublicExtensions from '../../models/extensions/extensions.js';\nimport type * as Trace from '../../models/trace/trace.js';\nimport * as PanelCommon from '../../panels/common/common.js';\nimport * as Emulation from '../../panels/emulation/emulation.js';\nimport * as Tracing from '../../services/tracing/tracing.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport type * as Dialogs from '../../ui/components/dialogs/dialogs.js';\nimport * as ComponentHelpers from '../../ui/components/helpers/helpers.js';\nimport type * as Menus from '../../ui/components/menus/menus.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Lit from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport * as Components from './components/components.js';\nimport type {AddBreakpointEvent, RemoveBreakpointEvent} from './components/StepView.js';\nimport type * as Controllers from './controllers/controllers.js';\nimport * as Converters from './converters/converters.js';\nimport * as Extensions from './extensions/extensions.js';\nimport * as Models from './models/models.js';\nimport * as Actions from './recorder-actions/recorder-actions.js';\nimport recorderControllerStyles from './recorderController.css.js';\nimport * as Events from './RecorderEvents.js';\n\n// TODO(crbug.com/391381439): Fully migrate off of Constructable Stylesheets.\nconst {html, Decorators, LitElement} = Lit;\nconst {customElement, state} = Decorators;\n\nconst UIStrings = {\n  /**\n   * @description The title of the button that leads to a page for creating a new recording.\n   */\n  createRecording: 'Create recording',\n  /**\n   * @description The title of the button that allows importing a recording.\n   */\n  importRecording: 'Import recording',\n  /**\n   * @description The title of the button that deletes the recording\n   */\n  deleteRecording: 'Delete recording',\n  /**\n   * @description The title of the select if user has no saved recordings\n   */\n  noRecordings: 'No recordings',\n  /**\n   * @description The title of the select option for one or more recording\n   * number followed by this text - `1 recording(s)` or `4 recording(s)`\n   */\n  numberOfRecordings: 'recording(s)',\n  /**\n   * @description The title of the button that continues the replay\n   */\n  continueReplay: 'Continue',\n  /**\n   * @description The title of the button that executes only one step in the replay\n   */\n  stepOverReplay: 'Execute one step',\n  /**\n   * @description The title of the button that opens a menu with various options of exporting a recording to file.\n   */\n  exportRecording: 'Export recording',\n  /**\n   * @description The title of shortcut for starting and stopping recording.\n   */\n  startStopRecording: 'Start/Stop recording',\n  /**\n   * @description The title of shortcut for replaying recording.\n   */\n  replayRecording: 'Replay recording',\n  /**\n   * @description The title of shortcut for copying a recording or selected step.\n   */\n  copyShortcut: 'Copy recording or selected step',\n  /**\n   * @description The title of shortcut for toggling code view.\n   */\n  toggleCode: 'Toggle code view',\n  /**\n   * @description The title of the menu group in the export menu of the Recorder\n   * panel that is followed by the list of built-in export formats.\n   */\n  export: 'Export',\n  /**\n   * @description The title of the menu group in the export menu of the Recorder\n   * panel that is followed by the list of export formats available via browser\n   * extensions.\n   */\n  exportViaExtensions: 'Export via extensions',\n  /**\n   * @description The title of the menu option that leads to a page that lists\n   * all browsers extensions available for Recorder.\n   */\n  getExtensions: 'Get extensionsâ€¦',\n  /**\n   * @description The button label that leads to the feedback form for Recorder.\n   */\n  sendFeedback: 'Send feedback',\n  /**\n   * @description The header of the start page in the Recorder panel.\n   */\n  header: 'Nothing recorded yet',\n  /**\n   * @description Text to explain the usage of the recorder panel.\n   */\n  recordingDescription: 'Use recordings to create automated end-to-end tests or performance traces.',\n  /**\n   * @description Link text to forward to a documentation page on the recorder.\n   */\n  learnMore: 'Learn more',\n  /**\n   * @description Headline of warning shown to users when users import a recording into DevTools Recorder.\n   */\n  doYouTrustThisCode: 'Do you trust this recording?',\n  /**\n   * @description Warning shown to users when imports code into DevTools Recorder.\n   * @example {allow importing} PH1\n   */\n  doNotImport:\n      'Don\\'t import recordings you do not understand or have not reviewed yourself into DevTools. This could allow attackers to steal your identity or take control of your computer. Please type \\'\\'{PH1}\\'\\' below to allow importing.',\n  /**\n   * @description Text a user needs to type in order to confirm that they\n   *are aware of the danger of import code into the DevTools Recorder.\n   */\n  allowImporting: 'allow importing',\n  /**\n   * @description Input box placeholder which instructs the user to type 'allow importing' into the input box.\n   * @example {allow importing} PH1\n   */\n  typeAllowImporting: 'Type \\'\\'{PH1}\\'\\'',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/recorder/RecorderController.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst GET_EXTENSIONS_MENU_ITEM = 'get-extensions-link';\nconst GET_EXTENSIONS_URL = 'https://goo.gle/recorder-extension-list' as Platform.DevToolsPath.UrlString;\nconst RECORDER_EXPLANATION_URL = 'https://developer.chrome.com/docs/devtools/recorder';\nconst FEEDBACK_URL = 'https://goo.gle/recorder-feedback' as Platform.DevToolsPath.UrlString;\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-recorder-controller': RecorderController;\n  }\n}\n\ninterface StoredRecording {\n  storageName: string;\n  flow: Models.Schema.UserFlow;\n}\n\ninterface SetCurrentRecordingOptions {\n  /**\n   * Whether to keep breakpoints in the recording.\n   */\n  keepBreakpoints: boolean;\n  /**\n   * Whether to upstream the recording to a recording session if it exists.\n   */\n  updateSession: boolean;\n}\n\nexport const enum Pages {\n  START_PAGE = 'StartPage',\n  ALL_RECORDINGS_PAGE = 'AllRecordingsPage',\n  CREATE_RECORDING_PAGE = 'CreateRecordingPage',\n  RECORDING_PAGE = 'RecordingPage',\n}\n\nconst CONVERTER_ID_TO_METRIC: Record<string, Host.UserMetrics.RecordingExported|undefined> = {\n  [Models.ConverterIds.ConverterIds.JSON]: Host.UserMetrics.RecordingExported.TO_JSON,\n  [Models.ConverterIds.ConverterIds.REPLAY]: Host.UserMetrics.RecordingExported.TO_PUPPETEER_REPLAY,\n  [Models.ConverterIds.ConverterIds.PUPPETEER]: Host.UserMetrics.RecordingExported.TO_PUPPETEER,\n  [Models.ConverterIds.ConverterIds.PUPPETEER_FIREFOX]: Host.UserMetrics.RecordingExported.TO_PUPPETEER,\n  [Models.ConverterIds.ConverterIds.LIGHTHOUSE]: Host.UserMetrics.RecordingExported.TO_LIGHTHOUSE,\n};\n\n@customElement('devtools-recorder-controller')\nexport class RecorderController extends LitElement {\n  @state() declare private currentRecordingSession?: Models.RecordingSession.RecordingSession;\n  @state() declare private currentRecording: StoredRecording|undefined;\n  @state() declare private currentStep?: Models.Schema.Step;\n  @state() declare private recordingError?: Error;\n\n  #storage = Models.RecordingStorage.RecordingStorage.instance();\n  #screenshotStorage = Models.ScreenshotStorage.ScreenshotStorage.instance();\n\n  @state() declare private isRecording: boolean;\n  @state() declare private isToggling: boolean;\n\n  // TODO: we keep the functionality to allow/disallow replay but right now it's not used.\n  // It can be used to decide if we allow replay on a certain target for example.\n  #replayAllowed = true;\n  @state() declare private recordingPlayer?: Models.RecordingPlayer.RecordingPlayer;\n  @state() declare private lastReplayResult?: Models.RecordingPlayer.ReplayResult;\n  readonly #replayState: Components.RecordingView.ReplayState = {isPlaying: false, isPausedOnBreakpoint: false};\n\n  @state() declare private currentPage: Pages;\n  @state() declare private previousPage?: Pages;\n  #fileSelector?: HTMLInputElement;\n\n  @state() declare private sections?: Models.Section.Section[];\n  @state() declare private settings?: Models.RecordingSettings.RecordingSettings;\n\n  @state() declare private importError?: Error;\n\n  @state() declare private exportMenuExpanded: boolean;\n  #exportMenuButton: Buttons.Button.Button|undefined;\n\n  #stepBreakpointIndexes = new Set<number>();\n\n  #builtInConverters: readonly Converters.Converter.Converter[];\n  @state() declare private extensionConverters: Converters.Converter.Converter[];\n  @state() declare private replayExtensions: Extensions.ExtensionManager.Extension[];\n\n  @state() declare private viewDescriptor?: PublicExtensions.RecorderPluginManager.ViewDescriptor;\n\n  #recorderSettings = new Models.RecorderSettings.RecorderSettings();\n  #shortcutHelper = new Models.RecorderShortcutHelper.RecorderShortcutHelper();\n\n  #disableRecorderImportWarningSetting = Common.Settings.Settings.instance().createSetting(\n      'disable-recorder-import-warning', false, Common.Settings.SettingStorageType.SYNCED);\n  #selfXssWarningDisabledSetting = Common.Settings.Settings.instance().createSetting(\n      'disable-self-xss-warning', false, Common.Settings.SettingStorageType.SYNCED);\n\n  #recordingView?: Components.RecordingView.RecordingView;\n\n  constructor() {\n    super();\n\n    this.isRecording = false;\n    this.isToggling = false;\n    this.exportMenuExpanded = false;\n\n    this.currentPage = Pages.START_PAGE;\n    if (this.#storage.getRecordings().length) {\n      this.#setCurrentPage(Pages.ALL_RECORDINGS_PAGE);\n    }\n\n    const textEditorIndent = Common.Settings.Settings.instance().moduleSetting('text-editor-indent').get();\n    this.#builtInConverters = Object.freeze([\n      new Converters.JSONConverter.JSONConverter(textEditorIndent),\n      new Converters.PuppeteerReplayConverter.PuppeteerReplayConverter(textEditorIndent),\n      new Converters.PuppeteerConverter.PuppeteerConverter(textEditorIndent),\n      new Converters.PuppeteerFirefoxConverter.PuppeteerFirefoxConverter(textEditorIndent),\n      new Converters.LighthouseConverter.LighthouseConverter(textEditorIndent),\n    ]);\n\n    const extensionManager = Extensions.ExtensionManager.ExtensionManager.instance();\n    this.#updateExtensions(extensionManager.extensions());\n    extensionManager.addEventListener(Extensions.ExtensionManager.Events.EXTENSIONS_UPDATED, event => {\n      this.#updateExtensions(event.data);\n    });\n\n    // used in e2e tests only.\n    this.addEventListener('setrecording', (event: Event) => this.#onSetRecording(event));\n  }\n\n  override disconnectedCallback(): void {\n    super.disconnectedCallback();\n\n    if (this.currentRecordingSession) {\n      void this.currentRecordingSession.stop();\n    }\n  }\n\n  #updateExtensions(extensions: Extensions.ExtensionManager.Extension[]): void {\n    this.extensionConverters =\n        extensions.filter(extension => extension.getCapabilities().includes('export')).map((extension, idx) => {\n          return new Converters.ExtensionConverter.ExtensionConverter(idx, extension);\n        });\n    this.replayExtensions = extensions.filter(extension => extension.getCapabilities().includes('replay'));\n  }\n\n  setIsRecordingStateForTesting(isRecording: boolean): void {\n    this.isRecording = isRecording;\n  }\n\n  setRecordingStateForTesting(state: Components.RecordingView.ReplayState): void {\n    this.#replayState.isPlaying = state.isPlaying;\n    this.#replayState.isPausedOnBreakpoint = state.isPausedOnBreakpoint;\n  }\n\n  setCurrentPageForTesting(page: Pages): void {\n    this.#setCurrentPage(page);\n  }\n\n  getCurrentPageForTesting(): Pages {\n    return this.currentPage;\n  }\n\n  getCurrentRecordingForTesting(): StoredRecording|undefined {\n    return this.currentRecording;\n  }\n\n  getStepBreakpointIndexesForTesting(): number[] {\n    return [...this.#stepBreakpointIndexes.values()];\n  }\n\n  /**\n   * We should clear errors on every new action in the controller.\n   * TODO: think how to make handle this centrally so that in no case\n   * the error remains shown for longer than needed. Maybe a timer?\n   */\n  #clearError(): void {\n    this.importError = undefined;\n  }\n\n  async #importFile(file: File): Promise<void> {\n    const outputStream = new Common.StringOutputStream.StringOutputStream();\n    const reader = new Bindings.FileUtils.ChunkedFileReader(\n        file,\n        /* chunkSize */ 10000000);\n    const success = await reader.read(outputStream);\n    if (!success) {\n      throw reader.error() ?? new Error('Unknown');\n    }\n\n    let flow: Models.Schema.UserFlow|undefined;\n    try {\n      flow = Models.SchemaUtils.parse(JSON.parse(outputStream.data()));\n    } catch (error) {\n      this.importError = error;\n      return;\n    }\n    this.#setCurrentRecording(await this.#storage.saveRecording(flow));\n    this.#setCurrentPage(Pages.RECORDING_PAGE);\n    this.#clearError();\n  }\n\n  setCurrentRecordingForTesting(recording: StoredRecording|undefined): void {\n    this.#setCurrentRecording(recording);\n  }\n\n  getSectionsForTesting(): Models.Section.Section[]|undefined {\n    return this.sections;\n  }\n\n  #setCurrentRecording(recording: StoredRecording|undefined, opts: Partial<SetCurrentRecordingOptions> = {}): void {\n    const {keepBreakpoints = false, updateSession = false} = opts;\n    this.recordingPlayer?.abort();\n    this.currentStep = undefined;\n    this.recordingError = undefined;\n    this.lastReplayResult = undefined;\n    this.recordingPlayer = undefined;\n    this.#replayState.isPlaying = false;\n    this.#replayState.isPausedOnBreakpoint = false;\n    this.#stepBreakpointIndexes = keepBreakpoints ? this.#stepBreakpointIndexes : new Set();\n\n    if (recording) {\n      this.currentRecording = recording;\n      this.sections = Models.Section.buildSections(recording.flow.steps);\n      this.settings = this.#buildSettings(recording.flow);\n      if (updateSession && this.currentRecordingSession) {\n        this.currentRecordingSession.overwriteUserFlow(recording.flow);\n      }\n    } else {\n      this.currentRecording = undefined;\n      this.sections = undefined;\n      this.settings = undefined;\n    }\n\n    this.#updateScreenshotsForSections();\n  }\n\n  #setCurrentPage(page: Pages): void {\n    if (page === this.currentPage) {\n      return;\n    }\n\n    this.previousPage = this.currentPage;\n    this.currentPage = page;\n  }\n\n  #buildSettings(flow: Models.Schema.UserFlow): Models.RecordingSettings.RecordingSettings {\n    const steps = flow.steps;\n    const navigateStepIdx = steps.findIndex(step => step.type === 'navigate');\n    const settings: Models.RecordingSettings.RecordingSettings = {timeout: flow.timeout};\n    for (let i = navigateStepIdx - 1; i >= 0; i--) {\n      const step = steps[i];\n      if (!settings.viewportSettings && step.type === 'setViewport') {\n        settings.viewportSettings = step;\n      }\n      if (!settings.networkConditionsSettings && step.type === 'emulateNetworkConditions') {\n        settings.networkConditionsSettings = {...step};\n        for (const preset\n                 of [SDK.NetworkManager.OfflineConditions, SDK.NetworkManager.Slow3GConditions,\n                     SDK.NetworkManager.Slow4GConditions, SDK.NetworkManager.Fast4GConditions]) {\n          // Using i18nTitleKey as a title here because we only want to compare the parameters of the network conditions.\n          if (SDK.NetworkManager.networkConditionsEqual(\n                  {...preset, title: preset.i18nTitleKey || ''},\n                  // The key below is not used, but we need it to satisfy TS.\n                  {\n                    ...step,\n                    title: preset.i18nTitleKey || '',\n                    key: `step_${i}_recorder_key` as SDK.NetworkManager.UserDefinedThrottlingConditionKey\n                  })) {\n            settings.networkConditionsSettings.title = preset.title instanceof Function ? preset.title() : preset.title;\n            settings.networkConditionsSettings.i18nTitleKey = preset.i18nTitleKey;\n          }\n        }\n      }\n    }\n    return settings;\n  }\n\n  #getMainTarget(): SDK.Target.Target {\n    const target = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    if (!target) {\n      throw new Error('Missing main page target');\n    }\n    return target;\n  }\n\n  #getSectionFromStep(step: Models.Schema.Step): Models.Section.Section|null {\n    if (!this.sections) {\n      return null;\n    }\n\n    for (const section of this.sections) {\n      if (section.steps.indexOf(step) !== -1) {\n        return section;\n      }\n    }\n\n    return null;\n  }\n\n  #updateScreenshotsForSections(): void {\n    if (!this.sections || !this.currentRecording) {\n      return;\n    }\n    const storageName = this.currentRecording.storageName;\n    for (let i = 0; i < this.sections.length; i++) {\n      const screenshot = this.#screenshotStorage.getScreenshotForSection(storageName, i);\n      this.sections[i].screenshot = screenshot || undefined;\n    }\n    this.requestUpdate();\n  }\n\n  #onAbortReplay(): void {\n    this.recordingPlayer?.abort();\n  }\n\n  async #onPlayViaExtension(extension: Extensions.ExtensionManager.Extension): Promise<void> {\n    if (!this.currentRecording || !this.#replayAllowed) {\n      return;\n    }\n    const pluginManager = PublicExtensions.RecorderPluginManager.RecorderPluginManager.instance();\n    const promise = pluginManager.once(PublicExtensions.RecorderPluginManager.Events.SHOW_VIEW_REQUESTED);\n    extension.replay(this.currentRecording.flow);\n    const descriptor = await promise;\n    this.viewDescriptor = descriptor;\n    Host.userMetrics.recordingReplayStarted(Host.UserMetrics.RecordingReplayStarted.REPLAY_VIA_EXTENSION);\n  }\n\n  async #onPlayRecording(event: Components.RecordingView.PlayRecordingEvent): Promise<void> {\n    if (!this.currentRecording || !this.#replayAllowed) {\n      return;\n    }\n    if (this.viewDescriptor) {\n      this.viewDescriptor = undefined;\n    }\n    if (event.extension) {\n      return await this.#onPlayViaExtension(event.extension);\n    }\n    Host.userMetrics.recordingReplayStarted(\n        event.targetPanel !== Components.RecordingView.TargetPanel.DEFAULT ?\n            Host.UserMetrics.RecordingReplayStarted.REPLAY_WITH_PERFORMANCE_TRACING :\n            Host.UserMetrics.RecordingReplayStarted.REPLAY_ONLY);\n    this.#replayState.isPlaying = true;\n    this.currentStep = undefined;\n    this.recordingError = undefined;\n    this.lastReplayResult = undefined;\n    const currentRecording = this.currentRecording;\n    this.#clearError();\n\n    await this.#disableDeviceModeIfEnabled();\n\n    this.recordingPlayer = new Models.RecordingPlayer.RecordingPlayer(\n        this.currentRecording.flow, {speed: event.speed, breakpointIndexes: this.#stepBreakpointIndexes});\n\n    const withPerformanceTrace = event.targetPanel === Components.RecordingView.TargetPanel.PERFORMANCE_PANEL;\n    const sectionsWithScreenshot = new Set();\n    this.recordingPlayer.addEventListener(Models.RecordingPlayer.Events.STEP, async ({data: {step, resolve}}) => {\n      this.currentStep = step;\n      const currentSection = this.#getSectionFromStep(step);\n      if (this.sections && currentSection && !sectionsWithScreenshot.has(currentSection)) {\n        sectionsWithScreenshot.add(currentSection);\n        const currentSectionIndex = this.sections.indexOf(currentSection);\n        const screenshot = await Models.ScreenshotUtils.takeScreenshot();\n        currentSection.screenshot = screenshot;\n        Models.ScreenshotStorage.ScreenshotStorage.instance().storeScreenshotForSection(\n            currentRecording.storageName, currentSectionIndex, screenshot);\n      }\n      resolve();\n    });\n\n    this.recordingPlayer.addEventListener(Models.RecordingPlayer.Events.STOP, () => {\n      this.#replayState.isPausedOnBreakpoint = true;\n      this.requestUpdate();\n    });\n\n    this.recordingPlayer.addEventListener(Models.RecordingPlayer.Events.CONTINUE, () => {\n      this.#replayState.isPausedOnBreakpoint = false;\n      this.requestUpdate();\n    });\n\n    this.recordingPlayer.addEventListener(Models.RecordingPlayer.Events.ERROR, ({data: error}) => {\n      this.recordingError = error;\n      if (!withPerformanceTrace) {\n        this.#replayState.isPlaying = false;\n        this.recordingPlayer = undefined;\n      }\n      this.lastReplayResult = Models.RecordingPlayer.ReplayResult.FAILURE;\n      const errorMessage = error.message.toLowerCase();\n      if (errorMessage.startsWith('could not find element')) {\n        Host.userMetrics.recordingReplayFinished(Host.UserMetrics.RecordingReplayFinished.TIMEOUT_ERROR_SELECTORS);\n      } else if (errorMessage.startsWith('waiting for target failed')) {\n        Host.userMetrics.recordingReplayFinished(Host.UserMetrics.RecordingReplayFinished.TIMEOUT_ERROR_TARGET);\n      } else {\n        Host.userMetrics.recordingReplayFinished(Host.UserMetrics.RecordingReplayFinished.OTHER_ERROR);\n      }\n      // Dispatch an event for e2e testing.\n      this.dispatchEvent(new Events.ReplayFinishedEvent());\n    });\n\n    this.recordingPlayer.addEventListener(Models.RecordingPlayer.Events.DONE, () => {\n      if (!withPerformanceTrace) {\n        this.#replayState.isPlaying = false;\n        this.recordingPlayer = undefined;\n      }\n      this.lastReplayResult = Models.RecordingPlayer.ReplayResult.SUCCESS;\n      // Dispatch an event for e2e testing.\n      this.dispatchEvent(new Events.ReplayFinishedEvent());\n      Host.userMetrics.recordingReplayFinished(Host.UserMetrics.RecordingReplayFinished.SUCCESS);\n    });\n\n    this.recordingPlayer.addEventListener(Models.RecordingPlayer.Events.ABORT, () => {\n      this.currentStep = undefined;\n      this.recordingError = undefined;\n      this.lastReplayResult = undefined;\n      this.#replayState.isPlaying = false;\n    });\n\n    let resolveWithEvents = (_events: Object[]): void => {};\n    const eventsPromise = new Promise<Object[]>((resolve): void => {\n      resolveWithEvents = resolve;\n    });\n\n    let performanceTracing = null;\n    switch (event.targetPanel) {\n      case Components.RecordingView.TargetPanel.PERFORMANCE_PANEL:\n        performanceTracing = new Tracing.PerformanceTracing.PerformanceTracing(this.#getMainTarget(), {\n          tracingBufferUsage(): void{},\n          eventsRetrievalProgress(): void{},\n          tracingComplete(events: Object[]): void {\n            resolveWithEvents(events);\n          },\n        });\n        break;\n    }\n\n    if (performanceTracing) {\n      await performanceTracing.start();\n    }\n\n    this.#setTouchEmulationAllowed(false);\n    await this.recordingPlayer.play();\n    this.#setTouchEmulationAllowed(true);\n\n    if (performanceTracing) {\n      await performanceTracing.stop();\n      const events = await eventsPromise;\n      this.#replayState.isPlaying = false;\n      this.recordingPlayer = undefined;\n      await UI.InspectorView.InspectorView.instance().showPanel(event.targetPanel as string);\n      if (event.targetPanel === Components.RecordingView.TargetPanel.PERFORMANCE_PANEL) {\n        // Note: this is not passing any metadata to the Performance panel.\n        const trace = new SDK.TraceObject.TraceObject(events as Trace.Types.Events.Event[]);\n        void Common.Revealer.reveal(trace);\n      }\n    }\n  }\n\n  async #disableDeviceModeIfEnabled(): Promise<void> {\n    try {\n      const deviceModeWrapper = Emulation.DeviceModeWrapper.DeviceModeWrapper.instance();\n      if (deviceModeWrapper.isDeviceModeOn()) {\n        deviceModeWrapper.toggleDeviceMode();\n        const emulationModel = this.#getMainTarget().model(SDK.EmulationModel.EmulationModel);\n        await emulationModel?.emulateDevice(null);\n      }\n    } catch {\n      // in the hosted mode, when the DeviceMode toolbar is not supported,\n      // Emulation.DeviceModeWrapper.DeviceModeWrapper.instance throws an exception.\n    }\n  }\n\n  #setTouchEmulationAllowed(touchEmulationAllowed: boolean): void {\n    const emulationModel = this.#getMainTarget().model(SDK.EmulationModel.EmulationModel);\n    emulationModel?.setTouchEmulationAllowed(touchEmulationAllowed);\n  }\n\n  async #onSetRecording(event: Event): Promise<void> {\n    const json = JSON.parse((event as CustomEvent).detail);\n    this.#setCurrentRecording(await this.#storage.saveRecording(Models.SchemaUtils.parse(json)));\n    this.#setCurrentPage(Pages.RECORDING_PAGE);\n    this.#clearError();\n  }\n\n  // Used by e2e tests to inspect the current recording.\n  getUserFlow(): Models.Schema.UserFlow|undefined {\n    return this.currentRecording?.flow;\n  }\n\n  async #handleRecordingChanged(event: Components.StepView.StepChanged): Promise<void> {\n    if (!this.currentRecording) {\n      throw new Error('Current recording expected to be defined.');\n    }\n    const recording = {\n      ...this.currentRecording,\n      flow: {\n        ...this.currentRecording.flow,\n        steps: this.currentRecording.flow.steps.map(step => step === event.currentStep ? event.newStep : step),\n      },\n    };\n    this.#setCurrentRecording(\n        await this.#storage.updateRecording(recording.storageName, recording.flow),\n        {keepBreakpoints: true, updateSession: true});\n  }\n\n  async #handleStepAdded(event: Components.StepView.AddStep): Promise<void> {\n    if (!this.currentRecording) {\n      throw new Error('Current recording expected to be defined.');\n    }\n    const stepOrSection = event.stepOrSection;\n    let step;\n    let position = event.position;\n    if ('steps' in stepOrSection) {\n      // section\n      const sectionIdx = this.sections?.indexOf(stepOrSection);\n      if (sectionIdx === undefined || sectionIdx === -1) {\n        throw new Error('There is no section to add a step to');\n      }\n      if (event.position === Components.StepView.AddStepPosition.AFTER) {\n        if (this.sections?.[sectionIdx].steps.length) {\n          step = this.sections?.[sectionIdx].steps[0];\n          position = Components.StepView.AddStepPosition.BEFORE;\n        } else {\n          step = this.sections?.[sectionIdx].causingStep;\n          position = Components.StepView.AddStepPosition.AFTER;\n        }\n      } else {\n        if (sectionIdx <= 0) {\n          throw new Error('There is no section to add a step to');\n        }\n        const prevSection = this.sections?.[sectionIdx - 1];\n        step = prevSection?.steps[prevSection.steps.length - 1];\n        position = Components.StepView.AddStepPosition.AFTER;\n      }\n    } else {\n      // step\n      step = stepOrSection;\n    }\n    if (!step) {\n      throw new Error('Anchor step is not found when adding a step');\n    }\n    const steps = this.currentRecording.flow.steps;\n    const currentIndex = steps.indexOf(step);\n    const indexToInsertAt = currentIndex + (position === Components.StepView.AddStepPosition.BEFORE ? 0 : 1);\n    steps.splice(indexToInsertAt, 0, {type: Models.Schema.StepType.WaitForElement, selectors: ['body']});\n    const recording = {...this.currentRecording, flow: {...this.currentRecording.flow, steps}};\n    Host.userMetrics.recordingEdited(Host.UserMetrics.RecordingEdited.STEP_ADDED);\n    this.#stepBreakpointIndexes = new Set([...this.#stepBreakpointIndexes.values()].map(breakpointIndex => {\n      if (indexToInsertAt > breakpointIndex) {\n        return breakpointIndex;\n      }\n\n      return breakpointIndex + 1;\n    }));\n    this.#setCurrentRecording(\n        await this.#storage.updateRecording(recording.storageName, recording.flow),\n        {keepBreakpoints: true, updateSession: true});\n  }\n\n  async #handleRecordingTitleChanged(title: string): Promise<void> {\n    if (!this.currentRecording) {\n      throw new Error('Current recording expected to be defined.');\n    }\n\n    const flow = {...this.currentRecording.flow, title};\n    this.#setCurrentRecording(await this.#storage.updateRecording(this.currentRecording.storageName, flow));\n  }\n\n  async #handleStepRemoved(event: Components.StepView.RemoveStep): Promise<void> {\n    if (!this.currentRecording) {\n      throw new Error('Current recording expected to be defined.');\n    }\n\n    const steps = this.currentRecording.flow.steps;\n    const currentIndex = steps.indexOf(event.step);\n    steps.splice(currentIndex, 1);\n    const flow = {...this.currentRecording.flow, steps};\n    Host.userMetrics.recordingEdited(Host.UserMetrics.RecordingEdited.STEP_REMOVED);\n    this.#stepBreakpointIndexes = new Set([...this.#stepBreakpointIndexes.values()]\n                                              .map(breakpointIndex => {\n                                                if (currentIndex > breakpointIndex) {\n                                                  return breakpointIndex;\n                                                }\n\n                                                if (currentIndex === breakpointIndex) {\n                                                  return -1;\n                                                }\n\n                                                return breakpointIndex - 1;\n                                              })\n                                              .filter(index => index >= 0));\n    this.#setCurrentRecording(\n        await this.#storage.updateRecording(this.currentRecording.storageName, flow),\n        {keepBreakpoints: true, updateSession: true});\n  }\n\n  async #onNetworkConditionsChanged(data?: SDK.NetworkManager.Conditions): Promise<void> {\n    if (!this.currentRecording) {\n      throw new Error('Current recording expected to be defined.');\n    }\n    const navigateIdx = this.currentRecording.flow.steps.findIndex(step => step.type === 'navigate');\n    if (navigateIdx === -1) {\n      throw new Error('Current recording does not have a navigate step');\n    }\n    const emulateNetworkConditionsIdx = this.currentRecording.flow.steps.findIndex((step, idx) => {\n      if (idx >= navigateIdx) {\n        return false;\n      }\n      return step.type === 'emulateNetworkConditions';\n    });\n    if (!data) {\n      // Delete step if present.\n      if (emulateNetworkConditionsIdx !== -1) {\n        this.currentRecording.flow.steps.splice(emulateNetworkConditionsIdx, 1);\n      }\n    } else if (emulateNetworkConditionsIdx === -1) {\n      // Insert at the first position.\n      this.currentRecording.flow.steps.splice(\n          0, 0,\n          Models.SchemaUtils.createEmulateNetworkConditionsStep(\n              {download: data.download, upload: data.upload, latency: data.latency}));\n    } else {\n      // Update existing step.\n      const step =\n          this.currentRecording.flow.steps[emulateNetworkConditionsIdx] as Models.Schema.EmulateNetworkConditionsStep;\n      step.download = data.download;\n      step.upload = data.upload;\n      step.latency = data.latency;\n    }\n    this.#setCurrentRecording(\n        await this.#storage.updateRecording(this.currentRecording.storageName, this.currentRecording.flow));\n  }\n\n  async #onTimeoutChanged(timeout?: number): Promise<void> {\n    if (!this.currentRecording) {\n      throw new Error('Current recording expected to be defined.');\n    }\n    this.currentRecording.flow.timeout = timeout;\n    this.#setCurrentRecording(\n        await this.#storage.updateRecording(this.currentRecording.storageName, this.currentRecording.flow));\n  }\n\n  async #onDeleteRecording(event: Event): Promise<void> {\n    event.stopPropagation();\n    if (event instanceof Components.RecordingListView.DeleteRecordingEvent) {\n      await this.#storage.deleteRecording(event.storageName);\n      this.#screenshotStorage.deleteScreenshotsForRecording(event.storageName);\n      this.requestUpdate();\n    } else {\n      if (!this.currentRecording) {\n        return;\n      }\n      await this.#storage.deleteRecording(this.currentRecording.storageName);\n      this.#screenshotStorage.deleteScreenshotsForRecording(this.currentRecording.storageName);\n    }\n    if ((await this.#storage.getRecordings()).length) {\n      this.#setCurrentPage(Pages.ALL_RECORDINGS_PAGE);\n    } else {\n      this.#setCurrentPage(Pages.START_PAGE);\n    }\n    this.#setCurrentRecording(undefined);\n    this.#clearError();\n  }\n\n  #onCreateNewRecording(event?: Event): void {\n    event?.stopPropagation();\n    this.#setCurrentPage(Pages.CREATE_RECORDING_PAGE);\n    this.#clearError();\n  }\n\n  async #onRecordingStarted(event: Components.CreateRecordingView.RecordingStartedEvent): Promise<void> {\n    // Recording is not available in device mode.\n    await this.#disableDeviceModeIfEnabled();\n\n    // Setting up some variables to notify the user we are initializing a recording.\n    this.isToggling = true;\n    this.#clearError();\n\n    // -- Recording logic starts here --\n    Host.userMetrics.recordingToggled(Host.UserMetrics.RecordingToggled.RECORDING_STARTED);\n    this.currentRecordingSession = new Models.RecordingSession.RecordingSession(this.#getMainTarget(), {\n      title: event.name,\n      selectorAttribute: event.selectorAttribute,\n      selectorTypesToRecord: event.selectorTypesToRecord.length ? event.selectorTypesToRecord :\n                                                                  Object.values(Models.Schema.SelectorType),\n    });\n    this.#setCurrentRecording(await this.#storage.saveRecording(this.currentRecordingSession.cloneUserFlow()));\n\n    let previousSectionIndex = -1;\n    let screenshotPromise:|Promise<Models.ScreenshotStorage.Screenshot>|undefined;\n    const takeScreenshot = async(currentRecording: StoredRecording): Promise<void> => {\n      if (!this.sections) {\n        throw new Error('Could not find sections.');\n      }\n\n      const currentSectionIndex = this.sections.length - 1;\n      const currentSection = this.sections[currentSectionIndex];\n      if (screenshotPromise || previousSectionIndex === currentSectionIndex) {\n        return;\n      }\n\n      screenshotPromise = Models.ScreenshotUtils.takeScreenshot();\n      const screenshot = await screenshotPromise;\n      screenshotPromise = undefined;\n      currentSection.screenshot = screenshot;\n      Models.ScreenshotStorage.ScreenshotStorage.instance().storeScreenshotForSection(\n          currentRecording.storageName, currentSectionIndex, screenshot);\n      previousSectionIndex = currentSectionIndex;\n      this.#updateScreenshotsForSections();\n    };\n\n    this.currentRecordingSession.addEventListener(\n        Models.RecordingSession.Events.RECORDING_UPDATED, async ({data}: {data: Models.Schema.UserFlow}) => {\n          if (!this.currentRecording) {\n            throw new Error('No current recording found');\n          }\n          this.#setCurrentRecording(await this.#storage.updateRecording(this.currentRecording.storageName, data));\n          this.#recordingView?.scrollToBottom();\n\n          await takeScreenshot(this.currentRecording);\n        });\n\n    this.currentRecordingSession.addEventListener(\n        Models.RecordingSession.Events.RECORDING_STOPPED, async ({data}: {data: Models.Schema.UserFlow}) => {\n          if (!this.currentRecording) {\n            throw new Error('No current recording found');\n          }\n          Host.userMetrics.keyboardShortcutFired(Actions.RecorderActions.START_RECORDING);\n          this.#setCurrentRecording(await this.#storage.updateRecording(this.currentRecording.storageName, data));\n          await this.#onRecordingFinished();\n        });\n\n    await this.currentRecordingSession.start();\n    // -- Recording logic ends here --\n\n    // Setting up some variables to notify the user we are finished initialization.\n    this.isToggling = false;\n    this.isRecording = true;\n    this.#setCurrentPage(Pages.RECORDING_PAGE);\n\n    // Dispatch an event for e2e testing.\n    this.dispatchEvent(new Events.RecordingStateChangedEvent((this.currentRecording as StoredRecording).flow));\n  }\n\n  async #onRecordingFinished(): Promise<void> {\n    if (!this.currentRecording || !this.currentRecordingSession) {\n      throw new Error('Recording was never started');\n    }\n\n    // Setting up some variables to notify the user we are finalizing a recording.\n    this.isToggling = true;\n    this.#clearError();\n\n    // -- Recording logic starts here --\n    Host.userMetrics.recordingToggled(Host.UserMetrics.RecordingToggled.RECORDING_FINISHED);\n    await this.currentRecordingSession.stop();\n    this.currentRecordingSession = undefined;\n    // -- Recording logic ends here --\n\n    // Setting up some variables to notify the user we are finished finalizing.\n    this.isToggling = false;\n    this.isRecording = false;\n\n    // Dispatch an event for e2e testing.\n    this.dispatchEvent(new Events.RecordingStateChangedEvent(this.currentRecording.flow));\n  }\n\n  async #onRecordingCancelled(): Promise<void> {\n    if (this.previousPage) {\n      this.#setCurrentPage(this.previousPage);\n    }\n  }\n\n  async #onRecordingSelected(event: Event): Promise<void> {\n    const storageName = event instanceof Components.RecordingListView.OpenRecordingEvent ||\n            event instanceof Components.RecordingListView.PlayRecordingEvent ?\n        event.storageName :\n        ((event as InputEvent).target as HTMLSelectElement)?.value;\n    this.#setCurrentRecording(await this.#storage.getRecording(storageName));\n    if (this.currentRecording) {\n      this.#setCurrentPage(Pages.RECORDING_PAGE);\n    } else if (storageName === Pages.START_PAGE) {\n      this.#setCurrentPage(Pages.START_PAGE);\n    } else if (storageName === Pages.ALL_RECORDINGS_PAGE) {\n      this.#setCurrentPage(Pages.ALL_RECORDINGS_PAGE);\n    }\n  }\n\n  async #onExportOptionSelected(event: Menus.SelectMenu.SelectMenuItemSelectedEvent): Promise<void> {\n    if (typeof event.itemValue !== 'string') {\n      throw new Error('Invalid export option value');\n    }\n    if (event.itemValue === GET_EXTENSIONS_MENU_ITEM) {\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(GET_EXTENSIONS_URL);\n      return;\n    }\n    if (!this.currentRecording) {\n      throw new Error('No recording selected');\n    }\n    const id = event.itemValue;\n    const byId = (converter: Converters.Converter.Converter): boolean => converter.getId() === id;\n    const converter = this.#builtInConverters.find(byId) || this.extensionConverters.find(byId);\n    if (!converter) {\n      throw new Error('No recording selected');\n    }\n    const [content] = await converter.stringify(this.currentRecording.flow);\n    await this.#exportContent(converter.getFilename(this.currentRecording.flow), content);\n    const builtInMetric = CONVERTER_ID_TO_METRIC[converter.getId()];\n    if (builtInMetric) {\n      Host.userMetrics.recordingExported(builtInMetric);\n    } else if (converter.getId().startsWith(Converters.ExtensionConverter.EXTENSION_PREFIX)) {\n      Host.userMetrics.recordingExported(Host.UserMetrics.RecordingExported.TO_EXTENSION);\n    } else {\n      throw new Error('Could not find a metric for the export option with id = ' + id);\n    }\n  }\n\n  async #exportContent(suggestedName: string, data: string): Promise<void> {\n    try {\n      const handle = await window.showSaveFilePicker({suggestedName});\n      const writable = await handle.createWritable();\n      await writable.write(data);\n      await writable.close();\n    } catch (error) {\n      // If the user aborts the action no need to report it, otherwise do.\n      if (error.name === 'AbortError') {\n        return;\n      }\n\n      throw error;\n    }\n  }\n\n  async #handleAddAssertionEvent(): Promise<void> {\n    if (!this.currentRecordingSession || !this.currentRecording) {\n      return;\n    }\n    const flow = this.currentRecordingSession.cloneUserFlow();\n    flow.steps.push({type: 'waitForElement' as Models.Schema.StepType.WaitForElement, selectors: [['.cls']]});\n    this.#setCurrentRecording(\n        await this.#storage.updateRecording(this.currentRecording.storageName, flow),\n        {keepBreakpoints: true, updateSession: true});\n    Host.userMetrics.recordingAssertion(Host.UserMetrics.RecordingAssertion.ASSERTION_ADDED);\n    await this.updateComplete;\n    // FIXME: call a method on the recording view widget.\n    await this.#recordingView?.updateComplete;\n    this.#recordingView?.contentElement?.querySelector('.section:last-child devtools-step-view:last-of-type')\n        ?.shadowRoot?.querySelector<HTMLElement>('.action')\n        ?.click();\n  }\n\n  async #acknowledgeImportNotice(): Promise<boolean> {\n    if (this.#disableRecorderImportWarningSetting.get()) {\n      return true;\n    }\n\n    if (Root.Runtime.Runtime.queryParam('isChromeForTesting') ||\n        Root.Runtime.Runtime.queryParam('disableSelfXssWarnings') || this.#selfXssWarningDisabledSetting.get()) {\n      return true;\n    }\n\n    const result = await PanelCommon.TypeToAllowDialog.show({\n      jslogContext: {\n        input: 'confirm-import-recording-input',\n        dialog: 'confirm-import-recording-dialog',\n      },\n      message: i18nString(UIStrings.doNotImport, {PH1: i18nString(UIStrings.allowImporting)}),\n      header: i18nString(UIStrings.doYouTrustThisCode),\n      typePhrase: i18nString(UIStrings.allowImporting),\n      inputPlaceholder: i18nString(UIStrings.typeAllowImporting, {PH1: i18nString(UIStrings.allowImporting)}),\n    });\n\n    if (result) {\n      this.#disableRecorderImportWarningSetting.set(true);\n    }\n\n    return result;\n  }\n\n  async #onImportRecording(event: Event): Promise<void> {\n    event.stopPropagation();\n\n    this.#clearError();\n\n    if (await this.#acknowledgeImportNotice()) {\n      this.#fileSelector = UI.UIUtils.createFileSelectorElement(this.#importFile.bind(this));\n      this.#fileSelector.click();\n    }\n  }\n\n  async #onPlayRecordingByName(event: Components.RecordingListView.PlayRecordingEvent): Promise<void> {\n    await this.#onRecordingSelected(event);\n    await this.#onPlayRecording(\n        {targetPanel: Components.RecordingView.TargetPanel.DEFAULT, speed: this.#recorderSettings.speed});\n  }\n\n  #onAddBreakpoint = (event: AddBreakpointEvent): void => {\n    this.#stepBreakpointIndexes = structuredClone(this.#stepBreakpointIndexes);\n    this.#stepBreakpointIndexes.add(event.index);\n    this.recordingPlayer?.updateBreakpointIndexes(this.#stepBreakpointIndexes);\n    this.requestUpdate();\n  };\n\n  #onRemoveBreakpoint = (event: RemoveBreakpointEvent): void => {\n    this.#stepBreakpointIndexes = structuredClone(this.#stepBreakpointIndexes);\n    this.#stepBreakpointIndexes.delete(event.index);\n    this.recordingPlayer?.updateBreakpointIndexes(this.#stepBreakpointIndexes);\n    this.requestUpdate();\n  };\n\n  #onExtensionViewClosed(): void {\n    this.viewDescriptor = undefined;\n  }\n\n  handleActions(actionId: Actions.RecorderActions): void {\n    if (!this.isActionPossible(actionId)) {\n      return;\n    }\n\n    switch (actionId) {\n      case Actions.RecorderActions.CREATE_RECORDING:\n        this.#onCreateNewRecording();\n        return;\n\n      case Actions.RecorderActions.START_RECORDING:\n        if (this.currentPage !== Pages.CREATE_RECORDING_PAGE && !this.isRecording) {\n          this.#shortcutHelper.handleShortcut(this.#onRecordingStarted.bind(\n              this,\n              new Components.CreateRecordingView.RecordingStartedEvent(\n                  this.#recorderSettings.defaultTitle, this.#recorderSettings.defaultSelectors,\n                  this.#recorderSettings.selectorAttribute)));\n        } else if (this.currentPage === Pages.CREATE_RECORDING_PAGE) {\n          const view = this.renderRoot.querySelector('devtools-create-recording-view');\n          if (view) {\n            this.#shortcutHelper.handleShortcut(view.startRecording.bind(view));\n          }\n        } else if (this.isRecording) {\n          void this.#onRecordingFinished();\n        }\n        return;\n\n      case Actions.RecorderActions.REPLAY_RECORDING:\n        void this.#onPlayRecording(\n            {targetPanel: Components.RecordingView.TargetPanel.DEFAULT, speed: this.#recorderSettings.speed});\n        return;\n\n      case Actions.RecorderActions.TOGGLE_CODE_VIEW: {\n        this.#recordingView?.showCodeToggle();\n        return;\n      }\n    }\n  }\n\n  isActionPossible(actionId: Actions.RecorderActions): boolean {\n    switch (actionId) {\n      case Actions.RecorderActions.CREATE_RECORDING:\n        return !this.isRecording && !this.#replayState.isPlaying;\n      case Actions.RecorderActions.START_RECORDING:\n        return !this.#replayState.isPlaying;\n      case Actions.RecorderActions.REPLAY_RECORDING:\n        return (this.currentPage === Pages.RECORDING_PAGE && !this.#replayState.isPlaying);\n      case Actions.RecorderActions.TOGGLE_CODE_VIEW:\n        return this.currentPage === Pages.RECORDING_PAGE;\n      case Actions.RecorderActions.COPY_RECORDING_OR_STEP:\n        // This action is handled in the RecordingView\n        // It relies on browser `copy` event.\n        return false;\n    }\n  }\n\n  #getShortcutsInfo(): Dialogs.ShortcutDialog.Shortcut[] {\n    const getBindingForAction = (action: Actions.RecorderActions): Dialogs.ShortcutDialog.ShortcutPart[][] => {\n      const shortcuts = UI.ShortcutRegistry.ShortcutRegistry.instance().shortcutsForAction(action);\n      const shortcutsWithSplitBindings = shortcuts.map(shortcut => shortcut.title().split(/[\\s+]+/).map(word => {\n        return {key: word.trim()};\n      }));\n      return shortcutsWithSplitBindings;\n    };\n\n    return [\n      {\n        title: i18nString(UIStrings.startStopRecording),\n        rows: getBindingForAction(Actions.RecorderActions.START_RECORDING),\n      },\n      {\n        title: i18nString(UIStrings.replayRecording),\n        rows: getBindingForAction(Actions.RecorderActions.REPLAY_RECORDING),\n      },\n      {\n        title: i18nString(UIStrings.copyShortcut),\n        rows: Host.Platform.isMac() ? [[{key: 'âŒ˜'}, {key: 'C'}]] : [[{key: 'Ctrl'}, {key: 'C'}]]\n      },\n      {\n        title: i18nString(UIStrings.toggleCode),\n        rows: getBindingForAction(Actions.RecorderActions.TOGGLE_CODE_VIEW),\n      },\n    ];\n  }\n\n  #renderCurrentPage(): Lit.TemplateResult {\n    switch (this.currentPage) {\n      case Pages.START_PAGE:\n        return this.#renderStartPage();\n      case Pages.ALL_RECORDINGS_PAGE:\n        return this.#renderAllRecordingsPage();\n      case Pages.RECORDING_PAGE:\n        return this.#renderRecordingPage();\n      case Pages.CREATE_RECORDING_PAGE:\n        return this.#renderCreateRecordingPage();\n    }\n  }\n\n  #renderAllRecordingsPage(): Lit.TemplateResult {\n    const recordings = this.#storage.getRecordings();\n    // clang-format off\n    return html`\n      <devtools-widget\n        .widgetConfig=${UI.Widget.widgetConfig(Components.RecordingListView.RecordingListView, {\n          recordings: recordings.map(recording => ({\n            storageName: recording.storageName,\n            name: recording.flow.title,\n          })),\n          replayAllowed: this.#replayAllowed,\n        })}\n        @createrecording=${this.#onCreateNewRecording}\n        @deleterecording=${this.#onDeleteRecording}\n        @openrecording=${this.#onRecordingSelected}\n        @playrecording=${this.#onPlayRecordingByName}\n      >\n      </devtools-widget>\n    `;\n    // clang-format on\n  }\n\n  #renderStartPage(): Lit.TemplateResult {\n    // clang-format off\n    return html`\n      <div class=\"empty-state\" jslog=${VisualLogging.section().context('start-view')}>\n        <div class=\"empty-state-header\">${i18nString(UIStrings.header)}</div>\n        <div class=\"empty-state-description\">\n          <span>${i18nString(UIStrings.recordingDescription)}</span>\n          ${UI.XLink.XLink.create(RECORDER_EXPLANATION_URL, i18nString(UIStrings.learnMore), 'x-link', undefined, 'learn-more')}\n        </div>\n        <devtools-button .variant=${Buttons.Button.Variant.TONAL} jslogContext=${Actions.RecorderActions.CREATE_RECORDING} @click=${this.#onCreateNewRecording}>${i18nString(UIStrings.createRecording)}</devtools-button>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #renderRecordingPage(): Lit.TemplateResult {\n    // clang-format off\n    return html`\n      <devtools-widget\n          class=\"recording-view\"\n          .widgetConfig=${UI.Widget.widgetConfig(Components.RecordingView.RecordingView, {\n            recording: this.currentRecording?.flow ?? {title: '', steps: []},\n            replayState: this.#replayState,\n            isRecording: this.isRecording,\n            recordingTogglingInProgress: this.isToggling,\n            currentStep: this.currentStep,\n            currentError: this.recordingError,\n            sections: this.sections ?? [],\n            settings: this.settings,\n            recorderSettings: this.#recorderSettings,\n            lastReplayResult: this.lastReplayResult,\n            replayAllowed: this.#replayAllowed,\n            breakpointIndexes: this.#stepBreakpointIndexes,\n            builtInConverters: this.#builtInConverters,\n            extensionConverters: this.extensionConverters,\n            replayExtensions: this.replayExtensions,\n            extensionDescriptor: this.viewDescriptor,\n            recordingFinished: this.#onRecordingFinished.bind(this),\n            addAssertion: this.#handleAddAssertionEvent.bind(this),\n            abortReplay: this.#onAbortReplay.bind(this),\n            playRecording: this.#onPlayRecording.bind(this),\n            networkConditionsChanged: this.#onNetworkConditionsChanged.bind(this),\n            timeoutChanged: this.#onTimeoutChanged.bind(this),\n            titleChanged: this.#handleRecordingTitleChanged.bind(this),\n          })}\n          @requestselectorattribute=${(\n            event: Controllers.SelectorPicker.RequestSelectorAttributeEvent,\n          ) => {\n            event.send(this.currentRecording?.flow.selectorAttribute);\n          }}\n          @stepchanged=${this.#handleRecordingChanged.bind(this)}\n          @addstep=${this.#handleStepAdded.bind(this)}\n          @removestep=${this.#handleStepRemoved.bind(this)}\n          @addbreakpoint=${this.#onAddBreakpoint.bind(this)}\n          @removebreakpoint=${this.#onRemoveBreakpoint.bind(this)}\n          @recorderextensionviewclosed=${this.#onExtensionViewClosed.bind(this)}\n          ${UI.Widget.widgetRef(Components.RecordingView.RecordingView, widget => {this.#recordingView = widget;})}\n        ></devtools-widget>\n    `;\n    // clang-format on\n  }\n\n  #renderCreateRecordingPage(): Lit.TemplateResult {\n    // clang-format off\n    return html`\n      <devtools-create-recording-view\n        .data=${\n          {\n            recorderSettings: this.#recorderSettings,\n          } as Components.CreateRecordingView.CreateRecordingViewData\n        }\n        @recordingstarted=${this.#onRecordingStarted}\n        @recordingcancelled=${this.#onRecordingCancelled}\n      ></devtools-create-recording-view>\n    `;\n    // clang-format on\n  }\n\n  #getExportMenuButton = (): Buttons.Button.Button => {\n    if (!this.#exportMenuButton) {\n      throw new Error('#exportMenuButton not found');\n    }\n    return this.#exportMenuButton;\n  };\n\n  #onExportRecording(event: Event): void {\n    event.stopPropagation();\n    this.#clearError();\n    this.exportMenuExpanded = !this.exportMenuExpanded;\n  }\n\n  #onExportMenuClosed(): void {\n    this.exportMenuExpanded = false;\n  }\n\n  protected override render(): Lit.TemplateResult {\n    const recordings = this.#storage.getRecordings();\n    const selectValue: string = this.currentRecording ? this.currentRecording.storageName : this.currentPage;\n    // clang-format off\n    const values = [\n      recordings.length === 0\n        ? {\n            value: Pages.START_PAGE,\n            name: i18nString(UIStrings.noRecordings),\n            selected: selectValue === Pages.START_PAGE,\n          }\n        : {\n            value: Pages.ALL_RECORDINGS_PAGE,\n            name: `${recordings.length} ${i18nString(UIStrings.numberOfRecordings)}`,\n            selected: selectValue === Pages.ALL_RECORDINGS_PAGE,\n          },\n      ...recordings.map(recording => ({\n        value: recording.storageName,\n        name: recording.flow.title,\n        selected: selectValue === recording.storageName,\n      })),\n    ];\n\n    return html`\n        <style>${UI.inspectorCommonStyles}</style>\n        <style>${recorderControllerStyles}</style>\n        <div class=\"wrapper\">\n          <div class=\"header\" jslog=${VisualLogging.toolbar()}>\n            <devtools-button\n              @click=${this.#onCreateNewRecording}\n              .data=${\n                {\n                  variant: Buttons.Button.Variant.TOOLBAR,\n                  iconName: 'plus',\n                  disabled:\n                    this.#replayState.isPlaying ||\n                    this.isRecording ||\n                    this.isToggling,\n                  title: Models.Tooltip.getTooltipForActions(\n                    i18nString(UIStrings.createRecording),\n                    Actions.RecorderActions.CREATE_RECORDING,\n                  ),\n                  jslogContext: Actions.RecorderActions.CREATE_RECORDING,\n                } as Buttons.Button.ButtonData\n              }\n            ></devtools-button>\n            <div class=\"separator\"></div>\n            <select\n              .disabled=${\n                recordings.length === 0 ||\n                this.#replayState.isPlaying ||\n                this.isRecording ||\n                this.isToggling\n              }\n              @click=${(e: Event) => e.stopPropagation()}\n              @change=${this.#onRecordingSelected}\n              jslog=${VisualLogging.dropDown('recordings').track({change: true})}\n            >\n              ${Lit.Directives.repeat(\n                values,\n                item => item.value,\n                item => {\n                  return html`<option .selected=${item.selected} value=${item.value}>${item.name}</option>`;\n                },\n              )}\n            </select>\n            <div class=\"separator\"></div>\n            <devtools-button\n              @click=${this.#onImportRecording}\n              .data=${\n                {\n                  variant: Buttons.Button.Variant.TOOLBAR,\n                  iconName: 'import',\n                  title: i18nString(UIStrings.importRecording),\n                  jslogContext: 'import-recording',\n                } as Buttons.Button.ButtonData\n              }\n            ></devtools-button>\n            <devtools-button\n              id='origin'\n              @click=${this.#onExportRecording}\n              on-render=${ComponentHelpers.Directives.nodeRenderedCallback(\n                node => {\n                  this.#exportMenuButton = node as Buttons.Button.Button;\n                },\n              )}\n              .data=${\n                {\n                  variant: Buttons.Button.Variant.TOOLBAR,\n                  iconName: 'download',\n                  title: i18nString(UIStrings.exportRecording),\n                  disabled: !this.currentRecording,\n                } as Buttons.Button.ButtonData\n              }\n              jslog=${VisualLogging.dropDown('export-recording').track({click: true})}\n            ></devtools-button>\n            <devtools-menu\n              @menucloserequest=${this.#onExportMenuClosed}\n              @menuitemselected=${this.#onExportOptionSelected}\n              .origin=${this.#getExportMenuButton}\n              .showDivider=${false}\n              .showSelectedItem=${false}\n              .open=${this.exportMenuExpanded}\n            >\n              <devtools-menu-group .name=${i18nString(UIStrings.export)}>\n                ${Lit.Directives.repeat(\n                  this.#builtInConverters,\n                  converter => {\n                    return html`\n                    <devtools-menu-item\n                      .value=${converter.getId()}\n                      jslog=${VisualLogging.item(`converter-${Platform.StringUtilities.toKebabCase(converter.getId())}`).track({click: true})}>\n                      ${converter.getFormatName()}\n                    </devtools-menu-item>\n                  `;\n                  },\n                )}\n              </devtools-menu-group>\n              <devtools-menu-group .name=${i18nString(UIStrings.exportViaExtensions)}>\n                ${Lit.Directives.repeat(\n                  this.extensionConverters,\n                  converter => {\n                    return html`\n                    <devtools-menu-item\n                     .value=${converter.getId()}\n                      jslog=${VisualLogging.item('converter-extension').track({click: true})}>\n                    ${converter.getFormatName()}\n                    </devtools-menu-item>\n                  `;\n                  },\n                )}\n                <devtools-menu-item .value=${GET_EXTENSIONS_MENU_ITEM}>\n                  ${i18nString(UIStrings.getExtensions)}\n                </devtools-menu-item>\n              </devtools-menu-group>\n            </devtools-menu>\n            <devtools-button\n              @click=${this.#onDeleteRecording}\n              .data=${\n                {\n                  variant: Buttons.Button.Variant.TOOLBAR,\n                  iconName: 'bin',\n                  disabled:\n                    !this.currentRecording ||\n                    this.#replayState.isPlaying ||\n                    this.isRecording ||\n                    this.isToggling,\n                  title: i18nString(UIStrings.deleteRecording),\n                  jslogContext: 'delete-recording',\n                } as Buttons.Button.ButtonData\n              }\n            ></devtools-button>\n            <div class=\"separator\"></div>\n            <devtools-button\n              @click=${() => this.recordingPlayer?.continue()}\n              .data=${\n                {\n                  variant: Buttons.Button.Variant.PRIMARY_TOOLBAR,\n                  iconName: 'resume',\n                  disabled:\n                    !this.recordingPlayer ||\n                    !this.#replayState.isPausedOnBreakpoint,\n                  title: i18nString(UIStrings.continueReplay),\n                  jslogContext: 'continue-replay',\n                } as Buttons.Button.ButtonData\n              }\n            ></devtools-button>\n            <devtools-button\n              @click=${() => this.recordingPlayer?.stepOver()}\n              .data=${\n                {\n                  variant: Buttons.Button.Variant.TOOLBAR,\n                  iconName: 'step-over',\n                  disabled:\n                    !this.recordingPlayer ||\n                    !this.#replayState.isPausedOnBreakpoint,\n                  title: i18nString(UIStrings.stepOverReplay),\n                  jslogContext: 'step-over',\n                } as Buttons.Button.ButtonData\n              }\n            ></devtools-button>\n            <div class=\"feedback\">\n              <x-link class=\"x-link\" title=${i18nString(UIStrings.sendFeedback)} href=${\n                FEEDBACK_URL\n              } jslog=${VisualLogging.link('feedback').track({click: true})}>${i18nString(UIStrings.sendFeedback)}</x-link>\n            </div>\n            <div class=\"separator\"></div>\n            <devtools-shortcut-dialog\n              .data=${\n                {\n                  shortcuts: this.#getShortcutsInfo(),\n                } as Dialogs.ShortcutDialog.ShortcutDialogData\n              } jslog=${VisualLogging.action('show-shortcuts').track({click: true})}\n            ></devtools-shortcut-dialog>\n          </div>\n          ${\n            this.importError\n              ? html`<div class='error'>Import error: ${\n                  this.importError.message\n                }</div>`\n              : ''\n          }\n          ${this.#renderCurrentPage()}\n        </div>\n      `;\n    // clang-format on\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2023 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-size: inherit;\n}\n\n*:focus,\n*:focus-visible {\n  outline: none;\n}\n\n:host {\n  overflow-x: auto;\n}\n\n:host,\ndevtools-create-recording-view {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  min-height: 0;\n}\n\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.header {\n  background-color: var(--sys-color-cdt-base-container);\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n  border-bottom: 1px solid var(--sys-color-divider);\n  padding: 0 5px;\n  gap: 3px;\n  flex-shrink: 0;\n}\n\n.separator {\n  background-color: var(--sys-color-divider);\n  width: 1px;\n  height: 17px;\n  margin: 0;\n}\n\nselect {\n  appearance: none;\n  user-select: none;\n  border: none;\n  border-radius: var(--sys-shape-corner-extra-small);\n  height: var(--sys-size-9);\n  max-width: 140px;\n  min-width: 140px;\n  padding: 0 var(--sys-size-6) 0 var(--sys-size-5);\n  position: relative;\n  color: var(--sys-color-on-surface);\n  background-color: transparent;\n  text-overflow: ellipsis;\n  background-image: var(--combobox-dropdown-arrow);\n  background-position: right center;\n  background-repeat: no-repeat;\n\n  &:hover {\n    background-color: var(--sys-color-state-hover-on-subtle);\n  }\n\n  &:active {\n    background-color: var(--sys-color-state-ripple-neutral-on-subtle);\n  }\n\n  &:hover:active {\n    background: var(--combobox-dropdown-arrow),\n      linear-gradient(\n        var(--sys-color-state-hover-on-subtle),\n        var(--sys-color-state-hover-on-subtle)\n      ),\n      linear-gradient(\n        var(--sys-color-state-ripple-neutral-on-subtle),\n        var(--sys-color-state-ripple-neutral-on-subtle)\n      );\n    background-position: right center;\n    background-repeat: no-repeat;\n  }\n\n  &:disabled {\n    pointer-events: none;\n    color: var(--sys-color-state-disabled);\n    background-color: var(--sys-color-state-disabled-container);\n  }\n\n  &:focus-visible {\n    outline: var(--sys-size-2) solid var(--sys-color-state-focus-ring);\n  }\n}\n\nselect option {\n  background-color: var(--sys-color-cdt-base-container);\n  color: var(--sys-color-on-surface);\n}\n\ndevtools-menu {\n  width: 0;\n  height: 0;\n  position: absolute;\n}\n\ndevtools-recording-list-view {\n  overflow: auto;\n}\n\n.error {\n  color: var(--sys-color-error);\n  border: 1px solid var(--sys-color-error);\n  background-color: var(--sys-color-error-container);\n  padding: 4px;\n}\n\n.feedback {\n  margin-left: auto;\n  margin-right: 4px;\n}\n\n.feedback .x-link {\n  letter-spacing: 0.03em;\n  text-decoration-line: underline;\n  font-size: var(--sys-typescale-body4-size);\n  line-height: 16px;\n  color: var(--sys-color-primary);\n  outline-offset: 3px;\n}\n\n.feedback .x-link:focus-visible,\n.empty-state-description .x-link:focus-visible {\n  outline: -webkit-focus-ring-color auto 1px;\n}\n\n.empty-state {\n  margin: var(--sys-size-5);\n  display: flex;\n  flex-grow: 1;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  text-align: center;\n  min-height: fit-content;\n  min-width: fit-content;\n\n  > * {\n    max-width: var(--sys-size-29);\n  }\n\n  .empty-state-header {\n    font: var(--sys-typescale-headline5);\n    margin-bottom: var(--sys-size-3);\n  }\n\n  .empty-state-description {\n    font: var(--sys-typescale-body4-regular);\n    color: var(--sys-color-on-surface-subtle);\n\n    > x-link {\n      white-space: nowrap;\n      margin-left: var(--sys-size-3);\n      cursor: pointer;\n      text-decoration: underline;\n      color: var(--sys-color-primary);\n      outline-offset: var(--sys-size-2);\n    }\n  }\n\n  > devtools-button {\n    margin-top: var(--sys-size-7);\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./recorderController.css')} */`;", "// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Models from './models/models.js';\n\nexport class ReplayFinishedEvent extends Event {\n  static readonly eventName = 'replayfinished';\n\n  constructor() {\n    super(ReplayFinishedEvent.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class RecordingStateChangedEvent extends Event {\n  static readonly eventName = 'recordingstatechanged';\n\n  constructor(public recording: Models.Schema.UserFlow) {\n    super(RecordingStateChangedEvent.eventName, {\n      bubbles: true,\n      composed: true,\n    });\n  }\n}\n", "// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport type * as Actions from './recorder-actions/recorder-actions.js';\nimport {RecorderController} from './RecorderController.js';\n\nlet recorderPanelInstance: RecorderPanel;\n\nexport class RecorderPanel extends UI.Panel.Panel {\n  static panelName = 'chrome-recorder';\n\n  #controller: RecorderController;\n\n  constructor() {\n    super(RecorderPanel.panelName);\n    this.element.setAttribute('jslog', `${VisualLogging.panel('chrome-recorder').track({resize: true})}`);\n    this.#controller = new RecorderController();\n    this.contentElement.append(this.#controller);\n    this.setHideOnDetach();\n  }\n\n  static instance(\n      opts: {forceNew: boolean|null} = {forceNew: null},\n      ): RecorderPanel {\n    const {forceNew} = opts;\n    if (!recorderPanelInstance || forceNew) {\n      recorderPanelInstance = new RecorderPanel();\n    }\n\n    return recorderPanelInstance;\n  }\n\n  override wasShown(): void {\n    UI.Context.Context.instance().setFlavor(RecorderPanel, this);\n    // Focus controller so shortcuts become active\n    this.#controller.focus();\n  }\n\n  override willHide(): void {\n    UI.Context.Context.instance().setFlavor(RecorderPanel, null);\n  }\n\n  handleActions(actionId: Actions.RecorderActions): void {\n    this.#controller.handleActions(actionId);\n  }\n\n  isActionPossible(actionId: Actions.RecorderActions): boolean {\n    return this.#controller.isActionPossible(actionId);\n  }\n}\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(\n      _context: UI.Context.Context,\n      actionId: Actions.RecorderActions,\n      ): boolean {\n    void (async () => {\n      await UI.ViewManager.ViewManager.instance().showView(\n          RecorderPanel.panelName,\n      );\n      const view = UI.ViewManager.ViewManager.instance().view(\n          RecorderPanel.panelName,\n      );\n\n      if (view) {\n        const widget = (await view.widget()) as RecorderPanel;\n\n        widget.handleActions(actionId);\n      }\n    })();\n    return true;\n  }\n}\n"],
  "mappings": "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",
  "names": ["Platform", "RecorderController", "state", "section", "converter", "action", "item", "UI", "VisualLogging"]
}
