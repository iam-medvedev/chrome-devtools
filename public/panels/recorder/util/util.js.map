{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/recorder/util/SharedObject.ts", "util.prebundle.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\n\ntype Awaitable<T> = Promise<T>|T;\n\nexport type ReleaseFunction = () => Promise<void>;\n\n/**\n * SharedObject is similar to a C++ shared pointer, i.e. a reference counted\n * object.\n *\n * A object is \"created\" whenever there are no acquirers and it's then acquired.\n * Subsequent acquirers use the same object. Only until all acquirers release\n * will the object be \"destroyed\".\n *\n * Using an object after it's destroyed is undefined behavior.\n *\n * The definition of \"created\" and \"destroyed\" is dependent on the functions\n * passed into the constructor.\n */\nexport class SharedObject<T> {\n  #mutex = new Common.Mutex.Mutex();\n  #counter = 0;\n  #value: T|undefined;\n\n  #create: () => Awaitable<T>;\n  #destroy: (value: T) => Awaitable<void>;\n\n  constructor(create: () => Awaitable<T>, destroy: (value: T) => Awaitable<void>) {\n    this.#create = create;\n    this.#destroy = destroy;\n  }\n\n  /**\n   * @returns The shared object and a release function. If the release function\n   * throws, you may attempt to call it again (however this probably implies\n   * your destroy function is bad).\n   */\n  async acquire(): Promise<[T, ReleaseFunction]> {\n    await this.#mutex.run(async () => {\n      if (this.#counter === 0) {\n        this.#value = await this.#create();\n      }\n      ++this.#counter;\n    });\n    return [this.#value as T, this.#release.bind(this, {released: false})];\n  }\n\n  /**\n   * Automatically perform an acquire and release.\n   *\n   * **If the release fails**, then this will throw and the object will be\n   * permanently alive. This is expected to be a fatal error and you should\n   * debug your destroy function.\n   */\n  async run<U>(action: (value: T) => Awaitable<U>): Promise<U> {\n    const [value, release] = await this.acquire();\n    try {\n      const result = await action(value);\n      return result;\n    } finally {\n      await release();\n    }\n  }\n\n  async #release(state: {released: boolean}): Promise<void> {\n    if (state.released) {\n      throw new Error('Attempted to release object multiple times.');\n    }\n    try {\n      state.released = true;\n      await this.#mutex.run(async () => {\n        if (this.#counter === 1) {\n          await this.#destroy(this.#value as T);\n          this.#value = undefined;\n        }\n        --this.#counter;\n      });\n    } catch (error) {\n      state.released = false;\n      throw error;\n    }\n  }\n}\n", "// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SharedObject from './SharedObject.js';\n\n// Setting this to `true` enables extra logging for the injected scripts.\nconst isDebugBuild = false;\n\nconst DEVTOOLS_RECORDER_WORLD_NAME = 'devtools_recorder';\n\nclass InjectedScript {\n  static #injectedScript?: Promise<string>;\n  static async get(): Promise<string> {\n    if (!this.#injectedScript) {\n      this.#injectedScript = (await fetch(\n                                  new URL('../injected/injected.generated.js', import.meta.url),\n                                  ))\n                                 .text();\n    }\n    return await this.#injectedScript;\n  }\n}\n\nexport {DEVTOOLS_RECORDER_WORLD_NAME, InjectedScript, isDebugBuild, SharedObject};\n"],
  "mappings": ";;;;;;;AAAA;;;;AAIA,YAAY,YAAY;AAmBlB,IAAO,eAAP,MAAmB;EACvB,SAAS,IAAW,aAAM,MAAK;EAC/B,WAAW;EACX;EAEA;EACA;EAEA,YAAY,QAA4B,SAAsC;AAC5E,SAAK,UAAU;AACf,SAAK,WAAW;EAClB;;;;;;EAOA,MAAM,UAAO;AACX,UAAM,KAAK,OAAO,IAAI,YAAW;AAC/B,UAAI,KAAK,aAAa,GAAG;AACvB,aAAK,SAAS,MAAM,KAAK,QAAO;MAClC;AACA,QAAE,KAAK;IACT,CAAC;AACD,WAAO,CAAC,KAAK,QAAa,KAAK,SAAS,KAAK,MAAM,EAAC,UAAU,MAAK,CAAC,CAAC;EACvE;;;;;;;;EASA,MAAM,IAAO,QAAkC;AAC7C,UAAM,CAAC,OAAO,OAAO,IAAI,MAAM,KAAK,QAAO;AAC3C,QAAI;AACF,YAAM,SAAS,MAAM,OAAO,KAAK;AACjC,aAAO;IACT;AACE,YAAM,QAAO;IACf;EACF;EAEA,MAAM,SAAS,OAA0B;AACvC,QAAI,MAAM,UAAU;AAClB,YAAM,IAAI,MAAM,6CAA6C;IAC/D;AACA,QAAI;AACF,YAAM,WAAW;AACjB,YAAM,KAAK,OAAO,IAAI,YAAW;AAC/B,YAAI,KAAK,aAAa,GAAG;AACvB,gBAAM,KAAK,SAAS,KAAK,MAAW;AACpC,eAAK,SAAS;QAChB;AACA,UAAE,KAAK;MACT,CAAC;IACH,SAAS,OAAO;AACd,YAAM,WAAW;AACjB,YAAM;IACR;EACF;;;;AC9EF,IAAM,eAAe;AAErB,IAAM,+BAA+B;AAErC,IAAM,iBAAN,MAAoB;EAClB,OAAO;EACP,aAAa,MAAG;AACd,QAAI,CAAC,KAAK,iBAAiB;AACzB,WAAK,mBAAmB,MAAM,MACF,IAAI,IAAI,qCAAqC,YAAY,GAAG,CAAC,GAE7D,KAAI;IAClC;AACA,WAAO,MAAM,KAAK;EACpB;;",
  "names": []
}
