{"version":3,"file":"ConsoleSidebar.js","sourceRoot":"","sources":["../../../../../../front_end/panels/console/ConsoleSidebar.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAG7C,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAChD,OAAO,KAAK,GAAG,MAAM,qBAAqB,CAAC;AAC3C,OAAO,KAAK,aAAa,MAAM,2CAA2C,CAAC;AAE3E,OAAO,EAAC,aAAa,EAAE,UAAU,EAAkB,MAAM,oBAAoB,CAAC;AAC9E,OAAO,oBAAoB,MAAM,yBAAyB,CAAC;AAG3D,MAAM,SAAS,GAAG;IAChB;;;;;OAKG;IACH,KAAK,EAAE,SAAS;IAChB;;OAEG;IACH,aAAa,EAAE,gFAAgF;IAC/F;;OAEG;IACH,SAAS,EAAE,iEAAiE;IAC5E;;OAEG;IACH,OAAO,EAAE,2DAA2D;IACpE;;OAEG;IACH,SAAS,EAAE,iEAAiE;IAC5E;;OAEG;IACH,KAAK,EAAE,sDAAsD;IAC7D;;OAEG;IACH,QAAQ,EAAE,+DAA+D;CACjE,CAAC;AACX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,kCAAkC,EAAE,SAAS,CAAC,CAAC;AACxF,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACtE,MAAM,EAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,EAAC,GAAG,GAAG,CAAC;AAWhD,MAAM,WAAW,GAAG;IAClB,+BAAe,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,SAAS,EAAC;IAC3D,4CAAuB,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC,aAAa,EAAC;IAC1E,+BAAiB,EAAE,EAAC,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,SAAS,CAAC,OAAO,EAAC;IACnE,mCAAmB,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC,SAAS,EAAC;IAClE,6BAAgB,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,KAAK,EAAC;IACxD,mCAAmB,EAAE,EAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,QAAQ,EAAC;CAC9D,CAAC;AASF,MAAM,CAAC,MAAM,YAAY,GAAS,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE;IAC1D,MAAM,aAAa,GAAG,IAAI,OAAO,EAA0B,CAAC;IAC5D,MAAM,kBAAkB,GAAG,CAAC,KAAiD,EAAQ,EAAE;QACrF,MAAM,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC/C,IAAI,MAAM,EAAE,CAAC;YACX,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC;IACH,CAAC,CAAC;IACF,MAAM,CACF,IAAI,CAAA;;;kBAGQ,kBAAkB;oBAE1B,IAAI,CAAA;;cAGA,KAAK,CAAC,MAAM,CAAC,GAAG,CACZ,KAAK,CAAC,EAAE,CAAC,IAAI,CAAA;;;kBAGb,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,IAAI,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;4BACpE,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC,cAAc;2BACtC,oBAAoB;wCACP,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI;oBAChD;IACE,gFAAgF;IAChF,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE;QAExC,CAAC,EAAE,KAAK,CAAC,YAAY;KACtB,CAAC;oBACJ,KAAK,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAA;6CAChB,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC,cAAc;sBAC5D,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAA;;0BAEzC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,IAAI,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;;oCAEpE,QAAQ,CAAC,MAAM,KAAK,KAAK,CAAC,cAAc;gCAC5C,QAAQ,CAAC,GAAG,IAAI,EAAE;;4BAEtB,QAAQ,CAAC,MAAM,CAAC,IAAI,sBAAsB,QAAQ,CAAC,KAAK;4BACxD,CAAC;wBACL;oBACJ,CAAC;cACP;0BACY,EACpB,MAAM,CAAC,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,kBAAkB;IACb,SAAS,GAAG,IAAI,GAAG,EAAyE,CAAC;IACtG,YAAY,GAAG,CAAC,CAAC;IACR,IAAI,CAAY;IAChB,MAAM,CAAgB;IAC/B,YAAY,IAAe,EAAE,aAAiD,EAAE,UAAsB;QACpG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;IACzE,CAAC;IAED,SAAS,CAAC,WAA+B;QACvC,MAAM,OAAO,GAAG,WAAW,CAAC,cAAc,EAAE,CAAC;QAC7C,MAAM,sBAAsB,GAAG,OAAO,CAAC,IAAI,KAAK,GAAG,CAAC,YAAY,CAAC,mBAAmB,CAAC,OAAO;YACxF,OAAO,CAAC,IAAI,KAAK,GAAG,CAAC,YAAY,CAAC,mBAAmB,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;QAC9F,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACzE,OAAO;QACT,CAAC;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC;QACrD,KAAK,CAAC,KAAK,EAAE,CAAC;QACd,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,KAAK;QACH,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;IAED,YAAY,CAAC,GAAgB;QAC3B,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpC,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,KAAK,CAAC;QACf,CAAC;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACnC,KAAK,GAAG,EAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAC,CAAC;QAChC,MAAM,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC1E,IAAI,GAAG,EAAE,CAAC;YACR,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC;QACxD,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC;QACD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,UAAU,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAC,CAAC,CAAC;QAE/F,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC/B,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAED,MAAM,0BAA0B,GAAG,CAAC;QAClC,GAAG,EAAE,UAAU,CAAC,MAAM;QACtB,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,qBAAqB,CAAC,UAAU;QACrD,QAAQ,EAAE,KAAK;QACf,KAAK,EAAE,SAAS;KACjB,CAAC,CAAC;AAEH,MAAM,OAAO,cAAe,SAAQ,MAAM,CAAC,aAAa,CAAC,UAAU,CAAoC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC;IACpH,KAAK,CAAO;IACH,OAAO,GAAG;QACjB,IAAI,kBAAkB,gCAAgB,EAAE,EAAE,aAAa,CAAC,oBAAoB,EAAE,CAAC;QAC/E,IAAI,kBAAkB,6CAAwB,0BAA0B,EAAE,aAAa,CAAC,oBAAoB,EAAE,CAAC;QAC/G,IAAI,kBAAkB,gCAAkB,EAAE,EAAE,aAAa,CAAC,eAAe,gDAAkC,CAAC;QAC5G,IAAI,kBAAkB,oCAAoB,EAAE,EAAE,aAAa,CAAC,eAAe,oDAAoC,CAAC;QAChH,IAAI,kBAAkB,8BAAiB,EAAE,EAAE,aAAa,CAAC,eAAe,8CAAiC,CAAC;QAC1G,IAAI,kBAAkB,oCAAoB,EAAE,EAAE,aAAa,CAAC,eAAe,oDAAoC,CAAC;KACjH,CAAC;IACO,sBAAsB,GAC3B,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAc,iCAAiC,EAAE,IAAI,CAAC,CAAC;IAC5G,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,CAAC;IAEvG,YAAY,OAAqB,EAAE,IAAI,GAAG,YAAY;QACpD,KAAK,CAAC,OAAO,EAAE;YACb,KAAK,EAAE,GAAG,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,EAAE;YAC/D,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAE5B,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAEQ,aAAa;QACpB,MAAM,KAAK,GAAc;YACvB,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,cAAc,EAAE,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM;YAC9D,kBAAkB,EAAE,MAAM,CAAC,EAAE;gBAC3B,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;gBAC9B,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC7C,IAAI,CAAC,wBAAwB,+CAAwB,CAAC;YACxD,CAAC;SACF,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK;QACH,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjC,KAAK,CAAC,KAAK,EAAE,CAAC;QAChB,CAAC;QACD,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,cAAc,CAAC,WAA+B;QAC5C,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjC,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC/B,CAAC;QACD,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,eAAe,CAAC,WAA+B;QAC7C,OAAO,IAAI,CAAC,eAAe,EAAE,eAAe,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC;IACpE,CAAC;CACF","sourcesContent":["// Copyright 2017 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport type * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Lit from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {ConsoleFilter, FilterType, type LevelsMask} from './ConsoleFilter.js';\nimport consoleSidebarStyles from './consoleSidebar.css.js';\nimport type {ConsoleViewMessage} from './ConsoleViewMessage.js';\n\nconst UIStrings = {\n  /**\n   * @description Filter name in Console Sidebar of the Console panel. This is shown when we fail to\n   * parse a URL when trying to display console messages from each URL separately. This might be\n   * because the console message does not come from any particular URL. This should be translated as\n   * a term that indicates 'not one of the other URLs listed here'.\n   */\n  other: '<other>',\n  /**\n   * @description Text in Console Sidebar of the Console panel to show how many user messages exist.\n   */\n  dUserMessages: '{n, plural, =0 {No user messages} =1 {# user message} other {# user messages}}',\n  /**\n   * @description Text in Console Sidebar of the Console panel to show how many messages exist.\n   */\n  dMessages: '{n, plural, =0 {No messages} =1 {# message} other {# messages}}',\n  /**\n   * @description Text in Console Sidebar of the Console panel to show how many errors exist.\n   */\n  dErrors: '{n, plural, =0 {No errors} =1 {# error} other {# errors}}',\n  /**\n   * @description Text in Console Sidebar of the Console panel to show how many warnings exist.\n   */\n  dWarnings: '{n, plural, =0 {No warnings} =1 {# warning} other {# warnings}}',\n  /**\n   * @description Text in Console Sidebar of the Console panel to show how many info messages exist.\n   */\n  dInfo: '{n, plural, =0 {No info} =1 {# info} other {# info}}',\n  /**\n   * @description Text in Console Sidebar of the Console panel to show how many verbose messages exist.\n   */\n  dVerbose: '{n, plural, =0 {No verbose} =1 {# verbose} other {# verbose}}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/console/ConsoleSidebar.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst {render, html, nothing, Directives} = Lit;\n\nconst enum GroupName {\n  CONSOLE_API = 'user message',\n  ALL = 'message',\n  ERROR = 'error',\n  WARNING = 'warning',\n  INFO = 'info',\n  VERBOSE = 'verbose',\n}\n\nconst GROUP_ICONS = {\n  [GroupName.ALL]: {icon: 'list', label: UIStrings.dMessages},\n  [GroupName.CONSOLE_API]: {icon: 'profile', label: UIStrings.dUserMessages},\n  [GroupName.ERROR]: {icon: 'cross-circle', label: UIStrings.dErrors},\n  [GroupName.WARNING]: {icon: 'warning', label: UIStrings.dWarnings},\n  [GroupName.INFO]: {icon: 'info', label: UIStrings.dInfo},\n  [GroupName.VERBOSE]: {icon: 'bug', label: UIStrings.dVerbose},\n};\n\ninterface ViewInput {\n  groups: ConsoleFilterGroup[];\n  selectedFilter: ConsoleFilter;\n  onSelectionChanged: (selectedFilter: ConsoleFilter) => void;\n}\n\nexport type View = (input: ViewInput, output: object, target: HTMLElement) => void;\nexport const DEFAULT_VIEW: View = (input, output, target) => {\n  const nodeFilterMap = new WeakMap<Element, ConsoleFilter>();\n  const onSelectionChanged = (event: UI.TreeOutline.TreeViewElement.SelectEvent): void => {\n    const filter = nodeFilterMap.get(event.detail);\n    if (filter) {\n      input.onSelectionChanged(filter);\n    }\n  };\n  render(\n      html`<devtools-tree\n        navigation-variant\n        hide-overflow\n        @select=${onSelectionChanged}\n        .template=${\n          html`\n          <ul role=\"tree\">\n            ${\n              input.groups.map(\n                  group => html`\n              <li\n                role=\"treeitem\"\n                ${Directives.ref(element => element && nodeFilterMap.set(element, group.filter))}\n                ?selected=${group.filter === input.selectedFilter}>\n                  <style>${consoleSidebarStyles}</style>\n                  <devtools-icon name=${GROUP_ICONS[group.name].icon}></devtools-icon>\n                  ${\n                      /* eslint-disable-next-line rulesdir/l10n-i18nString-call-only-with-uistrings */\n                      i18nString(GROUP_ICONS[group.name].label, {\n\n                        n: group.messageCount\n                      })}\n                  ${group.messageCount === 0 ? nothing : html`\n                  <ul role=\"group\" ?hidden=${group.filter !== input.selectedFilter}>\n                    ${group.urlGroups.values().map(urlGroup => html`\n                      <li\n                        ${Directives.ref(element => element && nodeFilterMap.set(element, group.filter))}\n                        role=\"treeitem\"\n                        ?selected=${urlGroup.filter === input.selectedFilter}\n                        title=${urlGroup.url ?? ''}>\n                          <devtools-icon name=document></devtools-icon>\n                          ${urlGroup.filter.name} <span class=count>${urlGroup.count}</span>\n                      </li>`)}\n                  </ul>`}\n              </li>`)}\n        </ul>`}\n        ></devtools-tree>`,\n      target);\n};\n\nclass ConsoleFilterGroup {\n  readonly urlGroups = new Map<string|null, {filter: ConsoleFilter, url: string|null, count: number}>();\n  messageCount = 0;\n  readonly name: GroupName;\n  readonly filter: ConsoleFilter;\n  constructor(name: GroupName, parsedFilters: TextUtils.TextUtils.ParsedFilter[], levelsMask: LevelsMask) {\n    this.name = name;\n    this.filter = new ConsoleFilter(name, parsedFilters, null, levelsMask);\n  }\n\n  onMessage(viewMessage: ConsoleViewMessage): void {\n    const message = viewMessage.consoleMessage();\n    const shouldIncrementCounter = message.type !== SDK.ConsoleModel.FrontendMessageType.Command &&\n        message.type !== SDK.ConsoleModel.FrontendMessageType.Result && !message.isGroupMessage();\n    if (!this.filter.shouldBeVisible(viewMessage) || !shouldIncrementCounter) {\n      return;\n    }\n    const child = this.#getUrlGroup(message.url || null);\n    child.count++;\n    this.messageCount++;\n  }\n\n  clear(): void {\n    this.messageCount = 0;\n    this.urlGroups.clear();\n  }\n\n  #getUrlGroup(url: string|null): {filter: ConsoleFilter, url: string|null, count: number} {\n    let child = this.urlGroups.get(url);\n    if (child) {\n      return child;\n    }\n\n    const filter = this.filter.clone();\n    child = {filter, url, count: 0};\n    const parsedURL = url ? Common.ParsedURL.ParsedURL.fromString(url) : null;\n    if (url) {\n      filter.name = parsedURL ? parsedURL.displayName : url;\n    } else {\n      filter.name = i18nString(UIStrings.other);\n    }\n    filter.parsedFilters.push({key: FilterType.Url, text: url, negative: false, regex: undefined});\n\n    this.urlGroups.set(url, child);\n    return child;\n  }\n}\n\nconst CONSOLE_API_PARSED_FILTERS = [{\n  key: FilterType.Source,\n  text: Common.Console.FrontendMessageSource.ConsoleAPI,\n  negative: false,\n  regex: undefined,\n}];\n\nexport class ConsoleSidebar extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox) {\n  #view: View;\n  readonly #groups = [\n    new ConsoleFilterGroup(GroupName.ALL, [], ConsoleFilter.allLevelsFilterValue()),\n    new ConsoleFilterGroup(GroupName.CONSOLE_API, CONSOLE_API_PARSED_FILTERS, ConsoleFilter.allLevelsFilterValue()),\n    new ConsoleFilterGroup(GroupName.ERROR, [], ConsoleFilter.singleLevelMask(Protocol.Log.LogEntryLevel.Error)),\n    new ConsoleFilterGroup(GroupName.WARNING, [], ConsoleFilter.singleLevelMask(Protocol.Log.LogEntryLevel.Warning)),\n    new ConsoleFilterGroup(GroupName.INFO, [], ConsoleFilter.singleLevelMask(Protocol.Log.LogEntryLevel.Info)),\n    new ConsoleFilterGroup(GroupName.VERBOSE, [], ConsoleFilter.singleLevelMask(Protocol.Log.LogEntryLevel.Verbose)),\n  ];\n  readonly #selectedFilterSetting =\n      Common.Settings.Settings.instance().createSetting<string|null>('console.sidebar-selected-filter', null);\n  #selectedFilter = this.#groups.find(group => group.name === this.#selectedFilterSetting.get())?.filter;\n\n  constructor(element?: HTMLElement, view = DEFAULT_VIEW) {\n    super(element, {\n      jslog: `${VisualLogging.pane('sidebar').track({resize: true})}`,\n      useShadowDom: true,\n    });\n    this.#view = view;\n    this.setMinimumSize(125, 0);\n\n    this.performUpdate();\n  }\n\n  override performUpdate(): void {\n    const input: ViewInput = {\n      groups: this.#groups,\n      selectedFilter: this.#selectedFilter ?? this.#groups[0].filter,\n      onSelectionChanged: filter => {\n        this.#selectedFilter = filter;\n        this.#selectedFilterSetting.set(filter.name);\n        this.dispatchEventToListeners(Events.FILTER_SELECTED);\n      },\n    };\n    this.#view(input, {}, this.contentElement);\n  }\n\n  clear(): void {\n    for (const group of this.#groups) {\n      group.clear();\n    }\n    this.requestUpdate();\n  }\n\n  onMessageAdded(viewMessage: ConsoleViewMessage): void {\n    for (const group of this.#groups) {\n      group.onMessage(viewMessage);\n    }\n    this.requestUpdate();\n  }\n\n  shouldBeVisible(viewMessage: ConsoleViewMessage): boolean {\n    return this.#selectedFilter?.shouldBeVisible(viewMessage) ?? true;\n  }\n}\n\nexport const enum Events {\n  FILTER_SELECTED = 'FilterSelected',\n}\n\nexport interface EventTypes {\n  [Events.FILTER_SELECTED]: void;\n}\n"]}