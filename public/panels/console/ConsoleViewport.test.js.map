{"version":3,"file":"ConsoleViewport.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/console/ConsoleViewport.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {renderElementIntoDOM} from '../../testing/DOMHelpers.js';\n\nimport * as Console from './console.js';\n\ndescribe('ConsoleViewport', () => {\n  let viewport: Console.ConsoleViewport.ConsoleViewport;\n  let mockProvider: MockProvider;\n  const viewportHeight = 200;  // Matching layout test\n  const viewportWidth = 600;   // Matching layout test\n\n  class MockProvider implements Console.ConsoleViewport.ConsoleViewportProvider {\n    itemHeights: number[] = [];\n    minimumRowHeightValue = 16;  // Default from ConsoleViewMessage\n\n    fastHeight(index: number): number {\n      return this.itemHeights[index] ?? this.minimumRowHeightValue;\n    }\n\n    itemCount(): number {\n      return this.itemHeights.length;\n    }\n\n    minimumRowHeight(): number {\n      return this.minimumRowHeightValue;\n    }\n\n    itemElement(index: number): Console.ConsoleViewport.ConsoleViewportElement|null {\n      // For these tests, we only need the element's offsetHeight.\n      const mockElement = document.createElement('div');\n      mockElement.style.height = `${this.itemHeights[index] ?? this.minimumRowHeightValue}px`;\n      Object.defineProperty(\n          mockElement, 'offsetHeight',\n          {value: this.itemHeights[index] ?? this.minimumRowHeightValue, configurable: true});\n      // Mock the ConsoleViewportElement interface methods\n      return {\n        willHide: () => {},\n        wasShown: () => {},\n        element: () => mockElement,\n        focusLastChildOrSelf: () => {},\n      };\n    }\n\n    setItems(heights: number[]): void {\n      this.itemHeights = heights;\n    }\n  }\n\n  beforeEach(() => {\n    mockProvider = new MockProvider();\n    viewport = new Console.ConsoleViewport.ConsoleViewport(mockProvider);\n    // Simulate setting dimensions like ConsoleTestRunner.fixConsoleViewportDimensions\n    viewport.element.style.width = `${viewportWidth}px`;\n    viewport.element.style.height = `${viewportHeight}px`;\n    // Need to append to DOM for offsetHeight/clientHeight to work\n    renderElementIntoDOM(viewport.element);\n  });\n\n  /** Helper to set items and refresh the viewport **/\n  function setItemsAndRefresh(heights: number[]): void {\n    mockProvider.setItems(heights);\n    viewport.invalidate();  // This calls rebuildCumulativeHeights and refresh\n  }\n\n  function changeItemHeight(index: number, newHeight: number): void {\n    mockProvider.itemHeights[index] = newHeight;\n    // Simulate the element's height changing in the DOM for the viewport's calculations\n    const renderedElement = viewport.renderedElementAt(index);\n    if (renderedElement) {\n      Object.defineProperty(renderedElement, 'offsetHeight', {value: newHeight, configurable: true});\n    }\n    // Invalidate to rebuild cumulative heights and then refresh\n    viewport.invalidate();\n  }\n\n  /** Helper to simulate scrolling and refresh **/\n  function scrollTo(scrollTop: number): void {\n    viewport.element.scrollTop = scrollTop;\n    viewport.refresh();\n  }\n\n  /** Helper to calculate expected cumulative heights **/\n  function calculateCumulativeHeights(itemHeights: number[]): number[] {\n    const cumulative = new Array(itemHeights.length);\n    let currentHeight = 0;\n    for (let i = 0; i < itemHeights.length; ++i) {\n      currentHeight += itemHeights[i];\n      cumulative[i] = currentHeight;\n    }\n    return cumulative;\n  }\n\n  /** Helper to calculate expected visible indices based on scroll and heights **/\n  function getExpectedVisibleIndices(\n      scrollTop: number, viewportHeight: number, cumulativeHeights: number[]): {first: number, last: number} {\n    if (cumulativeHeights.length === 0) {\n      return {first: -1, last: -1};\n    }\n\n    // Find the first visible index: the first item whose bottom is below scrollTop.\n    let first = -1;\n    for (let i = 0; i < cumulativeHeights.length; ++i) {\n      if (cumulativeHeights[i] > scrollTop) {\n        first = i;\n        break;\n      }\n    }\n\n    if (first === -1) {\n      // No items are visible from the top.\n      return {first: -1, last: -1};\n    }\n\n    // Find the last visible index: the last item whose top is above scrollTop + viewportHeight.\n    let last = -1;\n    const scrollBottom = scrollTop + viewportHeight;\n    for (let i = cumulativeHeights.length - 1; i >= 0; --i) {\n      const itemTop = i === 0 ? 0 : cumulativeHeights[i - 1];\n      if (itemTop < scrollBottom) {\n        last = i;\n        break;\n      }\n    }\n\n    // Ensure the calculated range is valid.\n    if (last < first) {\n      return {first: -1, last: -1};\n    }\n\n    return {first, last};\n  }\n\n  it('should report -1 for first and last visible index when empty', () => {\n    setItemsAndRefresh([]);\n    assert.strictEqual(viewport.firstVisibleIndex(), -1);\n    assert.strictEqual(viewport.lastVisibleIndex(), -1);\n  });\n\n  it('should report correct visible indices for uniform height items at the top', () => {\n    const itemHeight = 20;\n    const itemCount = 100;\n    const heights = Array(itemCount).fill(itemHeight);\n    setItemsAndRefresh(heights);\n\n    const cumulativeHeights = calculateCumulativeHeights(heights);\n    const expected = getExpectedVisibleIndices(0, viewportHeight, cumulativeHeights);\n\n    assert.strictEqual(viewport.firstVisibleIndex(), expected.first);\n    assert.strictEqual(viewport.lastVisibleIndex(), expected.last);\n  });\n\n  it('should report correct visible indices for uniform height items when scrolled down', () => {\n    const itemHeight = 20;\n    const itemCount = 100;\n    const heights = Array(itemCount).fill(itemHeight);\n    setItemsAndRefresh(heights);\n\n    const scrollTop = 500;\n    scrollTo(scrollTop);\n\n    const cumulativeHeights = calculateCumulativeHeights(heights);\n    const expected = getExpectedVisibleIndices(scrollTop, viewportHeight, cumulativeHeights);\n    assert.strictEqual(viewport.firstVisibleIndex(), expected.first);\n    assert.strictEqual(viewport.lastVisibleIndex(), expected.last);\n  });\n\n  it('should report correct visible indices for uniform height items at the bottom', () => {\n    const itemHeight = 20;\n    const itemCount = 100;\n    const heights = Array(itemCount).fill(itemHeight);\n    setItemsAndRefresh(heights);\n\n    const cumulativeHeights = calculateCumulativeHeights(heights);\n    const totalHeight = cumulativeHeights[cumulativeHeights.length - 1];\n    const scrollTop = totalHeight - viewportHeight;\n    scrollTo(scrollTop);\n\n    const expected = getExpectedVisibleIndices(scrollTop, viewportHeight, cumulativeHeights);\n\n    assert.strictEqual(viewport.firstVisibleIndex(), expected.first);\n    assert.strictEqual(viewport.lastVisibleIndex(), expected.last);\n  });\n\n  it('should report correct visible indices for varying height items at the top', () => {\n    const heights = [30, 20, 40, 15, 25, 50, 10, 35, 20, 45, 30, 20, 40, 15, 25, 50, 10, 35, 20, 45];  // 20 items\n    setItemsAndRefresh(heights);\n\n    const cumulativeHeights = calculateCumulativeHeights(heights);\n    const expected = getExpectedVisibleIndices(0, viewportHeight, cumulativeHeights);\n\n    assert.strictEqual(viewport.firstVisibleIndex(), expected.first);\n    assert.strictEqual(viewport.lastVisibleIndex(), expected.last);\n  });\n\n  it('should report correct visible indices for varying height items when scrolled down', () => {\n    const heights = [30, 20, 40, 15, 25, 50, 10, 35, 20, 45, 30, 20, 40, 15, 25, 50, 10, 35, 20, 45];  // 20 items\n    setItemsAndRefresh(heights);\n\n    const scrollTop = 150;\n    scrollTo(scrollTop);\n\n    const cumulativeHeights = calculateCumulativeHeights(heights);\n    const expected = getExpectedVisibleIndices(scrollTop, viewportHeight, cumulativeHeights);\n\n    assert.strictEqual(viewport.firstVisibleIndex(), expected.first);\n    assert.strictEqual(viewport.lastVisibleIndex(), expected.last);\n  });\n\n  it('should report correct visible indices for varying height items at the bottom', () => {\n    const heights = [30, 20, 40, 15, 25, 50, 10, 35, 20, 45, 30, 20, 40, 15, 25, 50, 10, 35, 20, 45];  // 20 items\n    setItemsAndRefresh(heights);\n\n    const cumulativeHeights = calculateCumulativeHeights(heights);\n    const totalHeight = cumulativeHeights[cumulativeHeights.length - 1];\n    const scrollTop = totalHeight - viewportHeight;\n    scrollTo(scrollTop);\n\n    const expected = getExpectedVisibleIndices(scrollTop, viewportHeight, cumulativeHeights);\n    assert.strictEqual(viewport.firstVisibleIndex(), expected.first);\n    assert.strictEqual(viewport.lastVisibleIndex(), expected.last);\n  });\n\n  it('should update cumulative heights when item heights change after initial render', () => {\n    const initialHeights = Array(10).fill(40);\n    setItemsAndRefresh(initialHeights);\n\n    // Simulate a height change for a rendered item\n    const changedIndex = 2;  // Must be within the initially rendered range\n    const newHeight = 50;\n    const updatedHeights = [...initialHeights];\n    updatedHeights[changedIndex] = newHeight;\n\n    // Change element's height.\n    changeItemHeight(changedIndex, newHeight);\n\n    // Simulate a scroll that would require recalculating heights\n    const scrollTop = 100;\n    scrollTo(scrollTop);  // This should trigger rebuildCumulativeHeightsIfNeeded\n\n    const cumulativeHeights = calculateCumulativeHeights(updatedHeights);\n    const expected = getExpectedVisibleIndices(scrollTop, viewportHeight, cumulativeHeights);\n\n    assert.strictEqual(viewport.firstVisibleIndex(), expected.first);\n    assert.strictEqual(viewport.lastVisibleIndex(), expected.last);\n  });\n\n  // Test forceScrollItemToBeFirst and forceScrollItemToBeLast\n  it('should force an item to be the first visible item', () => {\n    const itemHeight = 20;\n    const itemCount = 100;\n    const heights = Array(itemCount).fill(itemHeight);\n    setItemsAndRefresh(heights);\n\n    const targetIndex = 50;\n    viewport.forceScrollItemToBeFirst(targetIndex);\n\n    const cumulativeHeights = calculateCumulativeHeights(heights);\n    const expectedScrollTop = targetIndex > 0 ? cumulativeHeights[targetIndex - 1] : 0;\n    const expected = getExpectedVisibleIndices(expectedScrollTop, viewportHeight, cumulativeHeights);\n\n    assert.strictEqual(viewport.firstVisibleIndex(), expected.first);\n    assert.strictEqual(viewport.lastVisibleIndex(), expected.last);\n    assert.strictEqual(viewport.element.scrollTop, expectedScrollTop);\n  });\n\n  it('should force an item to be the last visible item', () => {\n    const itemHeight = 20;\n    const itemCount = 100;\n    const heights = Array(itemCount).fill(itemHeight);\n    setItemsAndRefresh(heights);\n\n    const targetIndex = 50;\n    viewport.forceScrollItemToBeLast(targetIndex);\n\n    const cumulativeHeights = calculateCumulativeHeights(heights);\n    const expectedScrollTop = cumulativeHeights[targetIndex] - viewportHeight;\n    const expected = getExpectedVisibleIndices(expectedScrollTop, viewportHeight, cumulativeHeights);\n\n    assert.strictEqual(viewport.firstVisibleIndex(), expected.first);\n    assert.strictEqual(viewport.lastVisibleIndex(), expected.last);\n    assert.strictEqual(viewport.element.scrollTop, expectedScrollTop);\n  });\n\n  describe('stick-to-bottom with expanding objects', () => {\n    const ITEM_COUNT = 150;\n    const INITIAL_ITEM_HEIGHT = 20;\n    const EXPANDED_ITEM_HEIGHT_INCREASE = 80;  // Makes item 100px tall\n\n    function populateViewport(itemCount: number, itemHeight: number): void {\n      const heights = Array(itemCount).fill(itemHeight);\n      setItemsAndRefresh(heights);\n    }\n\n    function forceSelectAndFocus(index: number): void {\n      viewport.scrollItemIntoView(index);\n      const elementToFocus = viewport.renderedElementAt(index);\n      if (elementToFocus) {\n        elementToFocus.focus();\n      }\n      // Refresh to ensure onFocusIn logic (like setting virtualSelectedIndex) and updateFocusedItem are processed.\n      viewport.refresh();\n    }\n\n    function isElementFullyVisible(index: number): boolean {\n      const selectedElement = viewport.renderedElementAt(index);\n      if (!selectedElement) {\n        return false;\n      }\n      const selectedRect = selectedElement.getBoundingClientRect();\n      const viewportRect = viewport.element.getBoundingClientRect();\n      // Using a small tolerance like in the layout test\n      const tolerance = 2.5;\n      return (\n          selectedRect.top + tolerance >= viewportRect.top && selectedRect.bottom - tolerance <= viewportRect.bottom);\n    }\n\n    function getInfo(selectedIndex: number): {isAtBottom: boolean, shouldStick: boolean, selectedVisible: boolean} {\n      viewport.refresh();  // Ensure viewport is up-to-date before getting info\n      const isAtBottom =\n          (viewport.element.scrollHeight - viewport.element.scrollTop - viewport.element.clientHeight) < 1;\n      const shouldStick = viewport.stickToBottom();\n      const selectedVisible = isElementFullyVisible(selectedIndex);\n      return {isAtBottom, shouldStick, selectedVisible};\n    }\n\n    beforeEach(() => {\n      populateViewport(ITEM_COUNT, INITIAL_ITEM_HEIGHT);\n    });\n\n    it('keeps last visible object in view when expanded/collapsed if scrolled to bottom', () => {\n      // Scroll to bottom\n      scrollTo(viewport.element.scrollHeight - viewport.element.clientHeight);\n      viewport.setStickToBottom(true);  // Explicitly set stick to bottom\n      viewport.refresh();\n\n      const lastItemIndex = ITEM_COUNT - 1;\n      forceSelectAndFocus(lastItemIndex);\n\n      let info = getInfo(lastItemIndex);\n      assert.isTrue(info.isAtBottom, 'Initial: Should be at bottom');\n      assert.isTrue(info.shouldStick, 'Initial: Should stick to bottom');\n      assert.isTrue(info.selectedVisible, 'Initial: Selected item should be visible');\n\n      // Expand object\n      changeItemHeight(lastItemIndex, INITIAL_ITEM_HEIGHT + EXPANDED_ITEM_HEIGHT_INCREASE);\n\n      info = getInfo(lastItemIndex);\n      assert.isTrue(info.isAtBottom, 'After expand: Should be at bottom');\n      assert.isTrue(info.shouldStick, 'After expand: Should stick to bottom');\n      assert.isTrue(info.selectedVisible, 'After expand: Selected item should be visible');\n\n      // Collapse object\n      changeItemHeight(lastItemIndex, INITIAL_ITEM_HEIGHT);\n\n      info = getInfo(lastItemIndex);\n      assert.isTrue(info.isAtBottom, 'After collapse: Should be at bottom');\n      assert.isTrue(info.shouldStick, 'After collapse: Should stick to bottom');\n      assert.isTrue(info.selectedVisible, 'After collapse: Selected item should be visible');\n    });\n\n    it('keeps first fully visible object in view when expanded/collapsed if not scrolled to bottom', () => {\n      // Scroll somewhere in the middle, not at the bottom\n      const scrollTop = 100;\n      scrollTo(scrollTop);               // This also calls refresh\n      viewport.setStickToBottom(false);  // Explicitly set stick to bottom to false\n      viewport.refresh();\n\n      // The layout test uses `viewport.firstVisibleIndex() + 1`.\n      const targetIndex = viewport.firstVisibleIndex() + 1;\n      assert.isBelow(targetIndex, ITEM_COUNT, 'Target index should be within bounds');\n\n      forceSelectAndFocus(targetIndex);\n\n      let info = getInfo(targetIndex);\n      assert.isFalse(info.isAtBottom, 'Initial: Should not be at bottom');\n      assert.isFalse(info.shouldStick, 'Initial: Should not stick to bottom');\n      assert.isTrue(info.selectedVisible, 'Initial: Selected item should be visible');\n\n      // Expand object\n      changeItemHeight(targetIndex, INITIAL_ITEM_HEIGHT + EXPANDED_ITEM_HEIGHT_INCREASE);\n\n      info = getInfo(targetIndex);\n      assert.isFalse(info.isAtBottom, 'After expand: Should not be at bottom');\n      assert.isFalse(info.shouldStick, 'After expand: Should not stick to bottom');\n      assert.isTrue(info.selectedVisible, 'After expand: Selected item should be visible');\n\n      // Collapse object\n      changeItemHeight(targetIndex, INITIAL_ITEM_HEIGHT);\n\n      info = getInfo(targetIndex);\n      assert.isFalse(info.isAtBottom, 'After collapse: Should not be at bottom');\n      assert.isFalse(info.shouldStick, 'After collapse: Should not stick to bottom');\n      assert.isTrue(info.selectedVisible, 'After collapse: Selected item should be visible');\n    });\n  });\n});\n"]}