{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/layers/LayerPaintProfilerView.ts", "../../../../../../front_end/panels/layers/LayersPanel.ts", "../../../../../../front_end/panels/layers/LayerTreeModel.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport * as LayerViewer from '../layer_viewer/layer_viewer.js';\n\nexport class LayerPaintProfilerView extends UI.SplitWidget.SplitWidget {\n  private readonly logTreeView: LayerViewer.PaintProfilerView.PaintProfilerCommandLogView;\n  private readonly paintProfilerView: LayerViewer.PaintProfilerView.PaintProfilerView;\n  constructor(showImageCallback: (arg0?: string|undefined) => void) {\n    super(true, false);\n    this.element.setAttribute('jslog', `${VisualLogging.pane('layers.paint-profiler').track({resize: true})}`);\n\n    this.logTreeView = new LayerViewer.PaintProfilerView.PaintProfilerCommandLogView();\n    this.setSidebarWidget(this.logTreeView);\n    this.paintProfilerView = new LayerViewer.PaintProfilerView.PaintProfilerView(showImageCallback);\n    this.setMainWidget(this.paintProfilerView);\n\n    this.paintProfilerView.addEventListener(\n        LayerViewer.PaintProfilerView.Events.WINDOW_CHANGED, this.onWindowChanged, this);\n\n    this.logTreeView.focus();\n  }\n\n  reset(): void {\n    void this.paintProfilerView.setSnapshotAndLog(null, [], null);\n  }\n\n  profile(snapshot: SDK.PaintProfiler.PaintProfilerSnapshot): void {\n    void snapshot.commandLog().then(log => setSnapshotAndLog.call(this, snapshot, log));\n\n    function setSnapshotAndLog(\n        this: LayerPaintProfilerView, snapshot: SDK.PaintProfiler.PaintProfilerSnapshot|null,\n        log: SDK.PaintProfiler.PaintProfilerLogItem[]|null): void {\n      this.logTreeView.setCommandLog(log || []);\n      void this.paintProfilerView.setSnapshotAndLog(snapshot, log || [], null);\n      if (snapshot) {\n        snapshot.release();\n      }\n    }\n  }\n\n  setScale(scale: number): void {\n    this.paintProfilerView.setScale(scale);\n  }\n\n  private onWindowChanged(): void {\n    this.logTreeView.updateWindow(this.paintProfilerView.selectionWindow());\n  }\n}\n", "/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as LayerViewer from '../layer_viewer/layer_viewer.js';\n\nimport {LayerPaintProfilerView} from './LayerPaintProfilerView.js';\nimport {Events, LayerTreeModel} from './LayerTreeModel.js';\n\nconst UIStrings = {\n  /**\n   * @description Text for the details of something\n   */\n  details: 'Details',\n  /**\n   * @description Title of the Profiler tool\n   */\n  profiler: 'Profiler',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/layers/LayersPanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet layersPanelInstance: LayersPanel;\n\nexport class LayersPanel extends UI.Panel.PanelWithSidebar implements SDK.TargetManager.Observer {\n  private model: LayerTreeModel|null;\n  private readonly layerViewHost: LayerViewer.LayerViewHost.LayerViewHost;\n  private readonly layerTreeOutline: LayerViewer.LayerTreeOutline.LayerTreeOutline;\n  private readonly rightSplitWidget: UI.SplitWidget.SplitWidget;\n  readonly layers3DView: LayerViewer.Layers3DView.Layers3DView;\n  private tabbedPane: UI.TabbedPane.TabbedPane;\n  private readonly layerDetailsView: LayerViewer.LayerDetailsView.LayerDetailsView;\n  private readonly paintProfilerView: LayerPaintProfilerView;\n  private readonly updateThrottler: Common.Throttler.Throttler;\n  private layerBeingProfiled?: SDK.LayerTreeBase.Layer|null;\n  constructor() {\n    super('layers', 225);\n    this.model = null;\n\n    SDK.TargetManager.TargetManager.instance().observeTargets(this, {scoped: true});\n    this.layerViewHost = new LayerViewer.LayerViewHost.LayerViewHost();\n    this.layerTreeOutline = new LayerViewer.LayerTreeOutline.LayerTreeOutline(this.layerViewHost);\n    this.layerTreeOutline.addEventListener(\n        LayerViewer.LayerTreeOutline.Events.PAINT_PROFILER_REQUESTED, this.onPaintProfileRequested, this);\n    this.panelSidebarElement().appendChild(this.layerTreeOutline.element);\n    this.setDefaultFocusedElement(this.layerTreeOutline.element);\n\n    this.rightSplitWidget = new UI.SplitWidget.SplitWidget(false, true, 'layer-details-split-view-state');\n    this.splitWidget().setMainWidget(this.rightSplitWidget);\n    this.splitWidget().hideSidebar();\n\n    this.layers3DView = new LayerViewer.Layers3DView.Layers3DView(this.layerViewHost);\n    this.rightSplitWidget.setMainWidget(this.layers3DView);\n    this.rightSplitWidget.hideSidebar();\n    this.layers3DView.addEventListener(\n        LayerViewer.Layers3DView.Events.PAINT_PROFILER_REQUESTED, this.onPaintProfileRequested, this);\n    this.layers3DView.addEventListener(LayerViewer.Layers3DView.Events.SCALE_CHANGED, this.onScaleChanged, this);\n\n    this.tabbedPane = new UI.TabbedPane.TabbedPane();\n    this.rightSplitWidget.setSidebarWidget(this.tabbedPane);\n\n    this.layerDetailsView = new LayerViewer.LayerDetailsView.LayerDetailsView(this.layerViewHost);\n    this.layerDetailsView.addEventListener(\n        LayerViewer.LayerDetailsView.Events.PAINT_PROFILER_REQUESTED, this.onPaintProfileRequested, this);\n    this.tabbedPane.appendTab(DetailsViewTabs.Details, i18nString(UIStrings.details), this.layerDetailsView);\n\n    this.paintProfilerView = new LayerPaintProfilerView(this.showImage.bind(this));\n    this.tabbedPane.addEventListener(UI.TabbedPane.Events.TabClosed, this.onTabClosed, this);\n    this.updateThrottler = new Common.Throttler.Throttler(100);\n  }\n\n  static instance(opts?: {forceNew: boolean}): LayersPanel {\n    if (!layersPanelInstance || opts?.forceNew) {\n      layersPanelInstance = new LayersPanel();\n    }\n\n    return layersPanelInstance;\n  }\n\n  override focus(): void {\n    this.layerTreeOutline.focus();\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    if (this.model) {\n      this.model.enable();\n    }\n  }\n\n  override willHide(): void {\n    if (this.model) {\n      void this.model.disable();\n    }\n    super.willHide();\n  }\n\n  targetAdded(target: SDK.Target.Target): void {\n    if (target !== target.outermostTarget()) {\n      return;\n    }\n    this.model = target.model(LayerTreeModel);\n    if (!this.model) {\n      return;\n    }\n    this.model.addEventListener(Events.LayerTreeChanged, this.onLayerTreeUpdated, this);\n    this.model.addEventListener(Events.LayerPainted, this.onLayerPainted, this);\n    if (this.isShowing()) {\n      this.model.enable();\n      void this.update();\n    }\n  }\n\n  targetRemoved(target: SDK.Target.Target): void {\n    if (!this.model || this.model.target() !== target) {\n      return;\n    }\n    this.model.removeEventListener(Events.LayerTreeChanged, this.onLayerTreeUpdated, this);\n    this.model.removeEventListener(Events.LayerPainted, this.onLayerPainted, this);\n    void this.model.disable();\n    this.model = null;\n  }\n\n  private onLayerTreeUpdated(): void {\n    void this.updateThrottler.schedule(this.update.bind(this));\n  }\n\n  update(): void {\n    if (this.model) {\n      this.splitWidget().showBoth();\n      this.rightSplitWidget.showBoth();\n      this.layerViewHost.setLayerTree(this.model.layerTree());\n      const resourceModel = this.model.target().model(SDK.ResourceTreeModel.ResourceTreeModel);\n      if (resourceModel) {\n        const mainFrame = resourceModel.mainFrame;\n        if (mainFrame) {\n          const url = mainFrame.url;\n          // Add the currently visualized url as an attribute to make it accessible to e2e tests\n          this.element.setAttribute('test-current-url', url);\n        }\n      }\n    }\n  }\n\n  private onLayerPainted({data: layer}: Common.EventTarget.EventTargetEvent<SDK.LayerTreeBase.Layer>): void {\n    if (!this.model) {\n      return;\n    }\n    const selection = this.layerViewHost.selection();\n    if (selection && selection.layer() === layer) {\n      this.layerDetailsView.update();\n    }\n    this.layers3DView.updateLayerSnapshot(layer);\n  }\n\n  private onPaintProfileRequested({data: selection}:\n                                      Common.EventTarget.EventTargetEvent<LayerViewer.LayerViewHost.Selection>): void {\n    void this.layers3DView.snapshotForSelection(selection).then(snapshotWithRect => {\n      if (!snapshotWithRect) {\n        return;\n      }\n      this.layerBeingProfiled = selection.layer();\n      if (!this.tabbedPane.hasTab(DetailsViewTabs.Profiler)) {\n        this.tabbedPane.appendTab(\n            DetailsViewTabs.Profiler, i18nString(UIStrings.profiler), this.paintProfilerView, undefined, true, true);\n      }\n      this.tabbedPane.selectTab(DetailsViewTabs.Profiler);\n      this.paintProfilerView.profile(snapshotWithRect.snapshot);\n    });\n  }\n\n  private onTabClosed(event: Common.EventTarget.EventTargetEvent<UI.TabbedPane.EventData>): void {\n    if (event.data.tabId !== DetailsViewTabs.Profiler || !this.layerBeingProfiled) {\n      return;\n    }\n    this.paintProfilerView.reset();\n    this.layers3DView.showImageForLayer(this.layerBeingProfiled, undefined);\n    this.layerBeingProfiled = null;\n  }\n\n  private showImage(imageURL?: string): void {\n    if (this.layerBeingProfiled) {\n      this.layers3DView.showImageForLayer(this.layerBeingProfiled, imageURL);\n    }\n  }\n\n  private onScaleChanged(event: Common.EventTarget.EventTargetEvent<number>): void {\n    this.paintProfilerView.setScale(event.data);\n  }\n}\n\nexport const DetailsViewTabs = {\n  Details: 'details',\n  Profiler: 'profiler',\n};\n", "/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Geometry from '../../models/geometry/geometry.js';\n\nexport class LayerTreeModel extends SDK.SDKModel.SDKModel<EventTypes> {\n  readonly layerTreeAgent: ProtocolProxyApi.LayerTreeApi;\n  readonly paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel;\n  private layerTreeInternal: SDK.LayerTreeBase.LayerTreeBase|null;\n  private readonly throttler: Common.Throttler.Throttler;\n  private enabled?: boolean;\n  private lastPaintRectByLayerId?: Map<string, Protocol.DOM.Rect>;\n\n  constructor(target: SDK.Target.Target) {\n    super(target);\n    this.layerTreeAgent = target.layerTreeAgent();\n    target.registerLayerTreeDispatcher(new LayerTreeDispatcher(this));\n    this.paintProfilerModel =\n        target.model(SDK.PaintProfiler.PaintProfilerModel) as SDK.PaintProfiler.PaintProfilerModel;\n    const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    if (resourceTreeModel) {\n      resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.PrimaryPageChanged, this.onPrimaryPageChanged, this);\n    }\n    this.layerTreeInternal = null;\n    this.throttler = new Common.Throttler.Throttler(20);\n  }\n\n  async disable(): Promise<void> {\n    if (!this.enabled) {\n      return;\n    }\n    this.enabled = false;\n    await this.layerTreeAgent.invoke_disable();\n  }\n\n  enable(): void {\n    if (this.enabled) {\n      return;\n    }\n    this.enabled = true;\n    void this.forceEnable();\n  }\n\n  private async forceEnable(): Promise<void> {\n    this.lastPaintRectByLayerId = new Map();\n    if (!this.layerTreeInternal) {\n      this.layerTreeInternal = new AgentLayerTree(this);\n    }\n    await this.layerTreeAgent.invoke_enable();\n  }\n\n  layerTree(): SDK.LayerTreeBase.LayerTreeBase|null {\n    return this.layerTreeInternal;\n  }\n\n  async layerTreeChanged(layers: Protocol.LayerTree.Layer[]|null): Promise<void> {\n    if (!this.enabled) {\n      return;\n    }\n    void this.throttler.schedule(this.innerSetLayers.bind(this, layers));\n  }\n\n  private async innerSetLayers(layers: Protocol.LayerTree.Layer[]|null): Promise<void> {\n    const layerTree = this.layerTreeInternal as AgentLayerTree;\n\n    await layerTree.setLayers(layers);\n\n    if (!this.lastPaintRectByLayerId) {\n      this.lastPaintRectByLayerId = new Map();\n    }\n\n    for (const layerId of this.lastPaintRectByLayerId.keys()) {\n      const lastPaintRect = this.lastPaintRectByLayerId.get(layerId);\n      const layer = layerTree.layerById(layerId);\n      if (layer) {\n        (layer as AgentLayer).setLastPaintRect(lastPaintRect);\n      }\n    }\n\n    this.lastPaintRectByLayerId = new Map();\n\n    this.dispatchEventToListeners(Events.LayerTreeChanged);\n  }\n\n  layerPainted(layerId: string, clipRect: Protocol.DOM.Rect): void {\n    if (!this.enabled) {\n      return;\n    }\n    const layerTree = this.layerTreeInternal as AgentLayerTree;\n    const layer = layerTree.layerById(layerId) as AgentLayer;\n    if (!layer) {\n      if (!this.lastPaintRectByLayerId) {\n        this.lastPaintRectByLayerId = new Map();\n      }\n\n      this.lastPaintRectByLayerId.set(layerId, clipRect);\n      return;\n    }\n    layer.didPaint(clipRect);\n    this.dispatchEventToListeners(Events.LayerPainted, layer);\n  }\n\n  private onPrimaryPageChanged(): void {\n    this.layerTreeInternal = null;\n    if (this.enabled) {\n      void this.forceEnable();\n    }\n  }\n}\n\nSDK.SDKModel.SDKModel.register(LayerTreeModel, {capabilities: SDK.Target.Capability.DOM, autostart: false});\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  LayerTreeChanged = 'LayerTreeChanged',\n  LayerPainted = 'LayerPainted',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface EventTypes {\n  [Events.LayerTreeChanged]: void;\n  [Events.LayerPainted]: AgentLayer;\n}\n\nexport class AgentLayerTree extends SDK.LayerTreeBase.LayerTreeBase {\n  private layerTreeModel: LayerTreeModel;\n\n  constructor(layerTreeModel: LayerTreeModel) {\n    super(layerTreeModel.target());\n    this.layerTreeModel = layerTreeModel;\n  }\n\n  async setLayers(payload: Protocol.LayerTree.Layer[]|null): Promise<void> {\n    if (!payload) {\n      this.innerSetLayers(payload);\n      return;\n    }\n    const idsToResolve = new Set<Protocol.DOM.BackendNodeId>();\n    for (let i = 0; i < payload.length; ++i) {\n      const backendNodeId = payload[i].backendNodeId;\n      if (!backendNodeId || this.backendNodeIdToNode().has(backendNodeId)) {\n        continue;\n      }\n      idsToResolve.add(backendNodeId);\n    }\n    await this.resolveBackendNodeIds(idsToResolve);\n    this.innerSetLayers(payload);\n  }\n\n  private innerSetLayers(layers: Protocol.LayerTree.Layer[]|null): void {\n    this.setRoot(null);\n    this.setContentRoot(null);\n    // Payload will be null when not in the composited mode.\n    if (!layers) {\n      return;\n    }\n    let root;\n    const oldLayersById = this.layersById;\n    this.layersById = new Map();\n    for (let i = 0; i < layers.length; ++i) {\n      const layerId = layers[i].layerId;\n      let layer: AgentLayer|(AgentLayer | null) = oldLayersById.get(layerId) as AgentLayer | null;\n      if (layer) {\n        layer.reset(layers[i]);\n      } else {\n        layer = new AgentLayer(this.layerTreeModel, layers[i]);\n      }\n      this.layersById.set(layerId, layer);\n      const backendNodeId = layers[i].backendNodeId;\n      if (backendNodeId) {\n        layer.setNode(this.backendNodeIdToNode().get(backendNodeId) || null);\n      }\n      if (!this.contentRoot() && layer.drawsContent()) {\n        this.setContentRoot(layer);\n      }\n      const parentId = layer.parentId();\n      if (parentId) {\n        const parent = this.layersById.get(parentId);\n        if (!parent) {\n          throw new Error(`Missing parent ${parentId} for layer ${layerId}`);\n        }\n        parent.addChild(layer);\n      } else {\n        if (root) {\n          console.assert(false, 'Multiple root layers');\n        }\n        root = layer;\n      }\n    }\n    if (root) {\n      this.setRoot(root);\n      root.calculateQuad(new WebKitCSSMatrix());\n    }\n  }\n}\n\nexport class AgentLayer implements SDK.LayerTreeBase.Layer {\n  private scrollRectsInternal!: Protocol.LayerTree.ScrollRect[];\n  private quadInternal!: number[];\n  private childrenInternal!: AgentLayer[];\n  private parentInternal!: AgentLayer|null;\n  private layerPayload!: Protocol.LayerTree.Layer;\n  private layerTreeModel: LayerTreeModel;\n  private nodeInternal?: SDK.DOMModel.DOMNode|null;\n  lastPaintRectInternal?: Protocol.DOM.Rect;\n  private paintCountInternal?: number;\n  private stickyPositionConstraintInternal?: SDK.LayerTreeBase.StickyPositionConstraint|null;\n  constructor(layerTreeModel: LayerTreeModel, layerPayload: Protocol.LayerTree.Layer) {\n    this.layerTreeModel = layerTreeModel;\n    this.reset(layerPayload);\n  }\n\n  id(): Protocol.LayerTree.LayerId {\n    return this.layerPayload.layerId;\n  }\n\n  parentId(): Protocol.LayerTree.LayerId|null {\n    return this.layerPayload.parentLayerId || null;\n  }\n\n  parent(): SDK.LayerTreeBase.Layer|null {\n    return this.parentInternal;\n  }\n\n  isRoot(): boolean {\n    return !this.parentId();\n  }\n\n  children(): SDK.LayerTreeBase.Layer[] {\n    return this.childrenInternal;\n  }\n\n  addChild(childParam: SDK.LayerTreeBase.Layer): void {\n    const child = childParam as AgentLayer;\n    if (child.parentInternal) {\n      console.assert(false, 'Child already has a parent');\n    }\n    this.childrenInternal.push(child);\n    child.parentInternal = this;\n  }\n\n  setNode(node: SDK.DOMModel.DOMNode|null): void {\n    this.nodeInternal = node;\n  }\n\n  node(): SDK.DOMModel.DOMNode|null {\n    return this.nodeInternal || null;\n  }\n\n  nodeForSelfOrAncestor(): SDK.DOMModel.DOMNode|null {\n    let layer: (AgentLayer|null)|this = this;\n    for (; layer; layer = layer.parentInternal) {\n      if (layer.nodeInternal) {\n        return layer.nodeInternal;\n      }\n    }\n    return null;\n  }\n\n  offsetX(): number {\n    return this.layerPayload.offsetX;\n  }\n\n  offsetY(): number {\n    return this.layerPayload.offsetY;\n  }\n\n  width(): number {\n    return this.layerPayload.width;\n  }\n\n  height(): number {\n    return this.layerPayload.height;\n  }\n\n  transform(): number[]|null {\n    return this.layerPayload.transform || null;\n  }\n\n  quad(): number[] {\n    return this.quadInternal;\n  }\n\n  anchorPoint(): number[] {\n    return [\n      this.layerPayload.anchorX || 0,\n      this.layerPayload.anchorY || 0,\n      this.layerPayload.anchorZ || 0,\n    ];\n  }\n\n  invisible(): boolean {\n    return this.layerPayload.invisible || false;\n  }\n\n  paintCount(): number {\n    return this.paintCountInternal || this.layerPayload.paintCount;\n  }\n\n  lastPaintRect(): Protocol.DOM.Rect|null {\n    return this.lastPaintRectInternal || null;\n  }\n\n  setLastPaintRect(lastPaintRect?: Protocol.DOM.Rect): void {\n    this.lastPaintRectInternal = lastPaintRect;\n  }\n\n  scrollRects(): Protocol.LayerTree.ScrollRect[] {\n    return this.scrollRectsInternal;\n  }\n\n  stickyPositionConstraint(): SDK.LayerTreeBase.StickyPositionConstraint|null {\n    return this.stickyPositionConstraintInternal || null;\n  }\n\n  async requestCompositingReasons(): Promise<string[]> {\n    const reasons = await this.layerTreeModel.layerTreeAgent.invoke_compositingReasons({layerId: this.id()});\n    return reasons.compositingReasons || [];\n  }\n\n  async requestCompositingReasonIds(): Promise<string[]> {\n    const reasons = await this.layerTreeModel.layerTreeAgent.invoke_compositingReasons({layerId: this.id()});\n    return reasons.compositingReasonIds || [];\n  }\n\n  drawsContent(): boolean {\n    return this.layerPayload.drawsContent;\n  }\n\n  gpuMemoryUsage(): number {\n    const bytesPerPixel = 4;\n    return this.drawsContent() ? this.width() * this.height() * bytesPerPixel : 0;\n  }\n\n  snapshots(): Array<Promise<SDK.PaintProfiler.SnapshotWithRect|null>> {\n    const promise = this.layerTreeModel.paintProfilerModel.makeSnapshot(this.id()).then(snapshot => {\n      if (!snapshot) {\n        return null;\n      }\n      return {rect: {x: 0, y: 0, width: this.width(), height: this.height()}, snapshot};\n    });\n    return [promise];\n  }\n\n  didPaint(rect: Protocol.DOM.Rect): void {\n    this.lastPaintRectInternal = rect;\n    this.paintCountInternal = this.paintCount() + 1;\n  }\n\n  reset(layerPayload: Protocol.LayerTree.Layer): void {\n    this.nodeInternal = null;\n    this.childrenInternal = [];\n    this.parentInternal = null;\n    this.paintCountInternal = 0;\n    this.layerPayload = layerPayload;\n    this.scrollRectsInternal = this.layerPayload.scrollRects || [];\n    this.stickyPositionConstraintInternal = this.layerPayload.stickyPositionConstraint ?\n        new SDK.LayerTreeBase.StickyPositionConstraint(\n            this.layerTreeModel.layerTree(), this.layerPayload.stickyPositionConstraint) :\n        null;\n  }\n\n  private matrixFromArray(a: number[]): DOMMatrix {\n    function toFixed9(x: number): string {\n      return x.toFixed(9);\n    }\n    return new WebKitCSSMatrix('matrix3d(' + a.map(toFixed9).join(',') + ')');\n  }\n\n  private calculateTransformToViewport(parentTransform: DOMMatrix): DOMMatrix {\n    const offsetMatrix = new WebKitCSSMatrix().translate(this.layerPayload.offsetX, this.layerPayload.offsetY);\n    let matrix: DOMMatrix = offsetMatrix;\n\n    if (this.layerPayload.transform) {\n      const transformMatrix = this.matrixFromArray(this.layerPayload.transform);\n      const anchorVector = new Geometry.Vector(\n          this.layerPayload.width * this.anchorPoint()[0], this.layerPayload.height * this.anchorPoint()[1],\n          this.anchorPoint()[2]);\n      const anchorPoint = Geometry.multiplyVectorByMatrixAndNormalize(anchorVector, matrix);\n      const anchorMatrix = new WebKitCSSMatrix().translate(-anchorPoint.x, -anchorPoint.y, -anchorPoint.z);\n      matrix = anchorMatrix.inverse().multiply(transformMatrix.multiply(anchorMatrix.multiply(matrix)));\n    }\n\n    matrix = parentTransform.multiply(matrix);\n    return matrix;\n  }\n\n  private createVertexArrayForRect(width: number, height: number): number[] {\n    return [0, 0, 0, width, 0, 0, width, height, 0, 0, height, 0];\n  }\n\n  calculateQuad(parentTransform: DOMMatrix): void {\n    const matrix = this.calculateTransformToViewport(parentTransform);\n    this.quadInternal = [];\n    const vertices = this.createVertexArrayForRect(this.layerPayload.width, this.layerPayload.height);\n    for (let i = 0; i < 4; ++i) {\n      const point = Geometry.multiplyVectorByMatrixAndNormalize(\n          new Geometry.Vector(vertices[i * 3], vertices[i * 3 + 1], vertices[i * 3 + 2]), matrix);\n      this.quadInternal.push(point.x, point.y);\n    }\n\n    function calculateQuadForLayer(layer: AgentLayer): void {\n      layer.calculateQuad(matrix);\n    }\n\n    this.childrenInternal.forEach(calculateQuadForLayer);\n  }\n}\n\nclass LayerTreeDispatcher implements ProtocolProxyApi.LayerTreeDispatcher {\n  private readonly layerTreeModel: LayerTreeModel;\n  constructor(layerTreeModel: LayerTreeModel) {\n    this.layerTreeModel = layerTreeModel;\n  }\n\n  layerTreeDidChange({layers}: Protocol.LayerTree.LayerTreeDidChangeEvent): void {\n    void this.layerTreeModel.layerTreeChanged(layers || null);\n  }\n\n  layerPainted({layerId, clip}: Protocol.LayerTree.LayerPaintedEvent): void {\n    this.layerTreeModel.layerPainted(layerId, clip);\n  }\n}\n"],
  "mappings": "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",
  "names": ["snapshot", "Common", "SDK", "UI", "LayerViewer", "Events"]
}
