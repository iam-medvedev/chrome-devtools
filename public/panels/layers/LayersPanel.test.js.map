{"version":3,"file":"LayersPanel.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/layers/LayersPanel.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,OAAO,KAAK,MAAM,MAAM,aAAa,CAAC;AACtC,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAChD,OAAO,EAAC,wBAAwB,EAAC,MAAM,iCAAiC,CAAC;AACzE,OAAO,EAAC,YAAY,EAAE,gBAAgB,EAAC,MAAM,qCAAqC,CAAC;AACnF,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAE3E,0BAA0B,CAAC,aAAa,EAAE,GAAG,EAAE;IAC7C,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,sBAAsB,GAAG,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAC3F,EAAE,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAE,sBAAsB,EAAC,CAAC,CAAC;QACxG,gBAAgB,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,MAAM,KAAK,GAAG,CAAC,aAAsC,EAAE,EAAE;QACvD,IAAI,MAAyB,CAAC;QAE9B,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,GAAG,aAAa,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YACxE,MAAM,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAC1E,wBAAwB,CAAC,cAAc,CAAC,CAAC;YACzC,MAAM,mBAAmB,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,qBAAqB,CAAC,CAAC;YAClF,MAAM,KAAK,GAAG,EAAC,EAAE,EAAE,GAAG,EAAE,CAAC,YAAY,EAAqC,CAAC;YAC3E,cAAc,CAAC,wBAAwB,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YAC1F,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;IACjE,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE;QACf,MAAM,SAAS,GAAG,YAAY,CAAC,EAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;QAC5D,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAC,CAAC,CAAC;QAC9D,OAAO,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC,CAAC;IAE/B,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,SAAS,GAAG,YAAY,CAAC,EAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;QAC5D,MAAM,eAAe,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAC,CAAC,CAAC;QACtF,MAAM,aAAa,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,CAAC;QAE9D,MAAM,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QACxE,MAAM,qBAAqB,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QACxF,wBAAwB,CAAC,qBAAqB,CAAC,CAAC;QAChD,MAAM,uBAAuB,GAAG,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QAC5F,wBAAwB,CAAC,uBAAuB,CAAC,CAAC;QAClD,MAAM,mBAAmB,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,qBAAqB,CAAC,CAAC;QAElF,MAAM,OAAO,GAAG,EAAC,EAAE,EAAE,GAAG,EAAE,CAAC,cAAc,EAAqC,CAAC;QAC/E,MAAM,OAAO,GAAG,EAAC,EAAE,EAAE,GAAG,EAAE,CAAC,cAAc,EAAqC,CAAC;QAC/E,qBAAqB,CAAC,wBAAwB,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QACnG,uBAAuB,CAAC,wBAAwB,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QACrG,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;QAE3D,mBAAmB,CAAC,KAAK,EAAE,CAAC;QAC5B,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;QAC3E,qBAAqB,CAAC,wBAAwB,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QACnG,uBAAuB,CAAC,wBAAwB,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QACrG,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as Layers from './layers.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {assertNotNullOrUndefined} from '../../core/platform/platform.js';\nimport {createTarget, stubNoopSettings} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\n\ndescribeWithMockConnection('LayersPanel', () => {\n  beforeEach(async () => {\n    const actionRegistryInstance = UI.ActionRegistry.ActionRegistry.instance({forceNew: true});\n    UI.ShortcutRegistry.ShortcutRegistry.instance({forceNew: true, actionRegistry: actionRegistryInstance});\n    stubNoopSettings();\n  });\n\n  const tests = (targetFactory: () => SDK.Target.Target) => {\n    let target: SDK.Target.Target;\n\n    beforeEach(async () => {\n      target = targetFactory();\n    });\n\n    it('udpates 3d view when layer painted', async () => {\n      const panel = Layers.LayersPanel.LayersPanel.instance({forceNew: true});\n      const layerTreeModel = target.model(Layers.LayerTreeModel.LayerTreeModel);\n      assertNotNullOrUndefined(layerTreeModel);\n      const updateLayerSnapshot = sinon.stub(panel.layers3DView, 'updateLayerSnapshot');\n      const LAYER = {id: () => 'TEST_LAYER'} as Layers.LayerTreeModel.AgentLayer;\n      layerTreeModel.dispatchEventToListeners(Layers.LayerTreeModel.Events.LayerPainted, LAYER);\n      assert.isTrue(updateLayerSnapshot.calledOnceWith(LAYER));\n    });\n  };\n\n  describe('without tab taget', () => tests(() => createTarget()));\n  describe('with tab taget', () => tests(() => {\n                               const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n                               createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n                               return createTarget({parentTarget: tabTarget});\n                             }));\n\n  it('can handle scope switches', async () => {\n    const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n    const prerenderTarget = createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n    const primaryTarget = createTarget({parentTarget: tabTarget});\n\n    const panel = Layers.LayersPanel.LayersPanel.instance({forceNew: true});\n    const primaryLayerTreeModel = primaryTarget.model(Layers.LayerTreeModel.LayerTreeModel);\n    assertNotNullOrUndefined(primaryLayerTreeModel);\n    const prerenderLayerTreeModel = prerenderTarget.model(Layers.LayerTreeModel.LayerTreeModel);\n    assertNotNullOrUndefined(prerenderLayerTreeModel);\n    const updateLayerSnapshot = sinon.stub(panel.layers3DView, 'updateLayerSnapshot');\n\n    const LAYER_1 = {id: () => 'TEST_LAYER_1'} as Layers.LayerTreeModel.AgentLayer;\n    const LAYER_2 = {id: () => 'TEST_LAYER_2'} as Layers.LayerTreeModel.AgentLayer;\n    primaryLayerTreeModel.dispatchEventToListeners(Layers.LayerTreeModel.Events.LayerPainted, LAYER_1);\n    prerenderLayerTreeModel.dispatchEventToListeners(Layers.LayerTreeModel.Events.LayerPainted, LAYER_2);\n    assert.isTrue(updateLayerSnapshot.calledOnceWith(LAYER_1));\n\n    updateLayerSnapshot.reset();\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(prerenderTarget);\n    primaryLayerTreeModel.dispatchEventToListeners(Layers.LayerTreeModel.Events.LayerPainted, LAYER_1);\n    prerenderLayerTreeModel.dispatchEventToListeners(Layers.LayerTreeModel.Events.LayerPainted, LAYER_2);\n    assert.isTrue(updateLayerSnapshot.calledOnceWith(LAYER_2));\n  });\n});\n"]}