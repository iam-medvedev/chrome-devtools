{"version":3,"file":"NetworkRequestFormatter.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/ai_assistance/data_formatters/NetworkRequestFormatter.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,uBAAuB,EAAC,MAAM,qBAAqB,CAAC;AAE5D,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACvC,MAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;YAClE,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,MAAM,KAAK,GAAG;YACZ;gBACE,eAAe,EAAE,sBAAsB;gBACvC,cAAc,EAAE,sBAAsB;gBACtC,gBAAgB,EAAE,KAAK;aACxB;YACD;gBACE,eAAe,EAAE,sBAAsB;gBACvC,cAAc,EAAE,8BAA8B;gBAC9C,gBAAgB,EAAE,IAAI;aACvB;YACD;gBACE,eAAe,EAAE,aAAa;gBAC9B,cAAc,EAAE,8BAA8B;gBAC9C,gBAAgB,EAAE,IAAI;aACvB;YACD;gBACE,eAAe,EAAE,8BAA8B;gBAC/C,cAAc,EAAE,aAAa;gBAC7B,gBAAgB,EAAE,IAAI;aACvB;YACD;gBACE,eAAe,EAAE,2BAA2B;gBAC5C,cAAc,EAAE,sBAAsB;gBACtC,gBAAgB,EAAE,IAAI;aACvB;YACD;gBACE,eAAe,EAAE,gCAAgC;gBACjD,cAAc,EAAE,gCAAgC;gBAChD,gBAAgB,EAAE,IAAI;aACvB;SACF,CAAC;QAEF,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC;YACtB,EAAE,CAAC,GAAG,CAAC,CAAC,cAAc,kCAAkC,CAAC,CAAC,eAAe,EAAE,EAAE,GAAG,EAAE;gBAChF,MAAM,SAAS,GAAG,uBAAuB,CAAC,kBAAkB,CACxD,IAAI,GAAG,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,CAAC;gBACzE,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;oBACvB,MAAM,CAAC,WAAW,CACd,SAAS,EAAE,uCAAuC,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC;gBACnG,CAAC;qBAAM,CAAC;oBACN,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,CAAC,cAAc,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;gBACvF,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,CAAC,WAAW,CACd,uBAAuB,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,EAAC,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC,EACtF,0BAA0B,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,CAAC,WAAW,CACd,uBAAuB,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC,EAChF,2BAA2B,CAAC,CAAC;YACjC,MAAM,CAAC,WAAW,CACd,uBAAuB,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,EAAC,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC,EACpF,+BAA+B,CAAC,CAAC;YACrC,MAAM,CAAC,WAAW,CACd,uBAAuB,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,EAAC,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC,EACvF,kCAAkC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {NetworkRequestFormatter} from '../ai_assistance.js';\n\ndescribe('NetworkRequestFormatter', () => {\n  describe('allowHeader', () => {\n    it('allows a header from the list', () => {\n      assert.isTrue(NetworkRequestFormatter.allowHeader('content-type'));\n    });\n\n    it('disallows headers not on the list', () => {\n      assert.isFalse(NetworkRequestFormatter.allowHeader('cookie'));\n      assert.isFalse(NetworkRequestFormatter.allowHeader('set-cookie'));\n      assert.isFalse(NetworkRequestFormatter.allowHeader('authorization'));\n    });\n  });\n\n  describe('formatInitiatorUrl', () => {\n    const tests = [\n      {\n        allowedResource: 'https://example.test',\n        targetResource: 'https://example.test',\n        shouldBeRedacted: false,\n      },\n      {\n        allowedResource: 'https://example.test',\n        targetResource: 'https://another-example.test',\n        shouldBeRedacted: true,\n      },\n      {\n        allowedResource: 'file://test',\n        targetResource: 'https://another-example.test',\n        shouldBeRedacted: true,\n      },\n      {\n        allowedResource: 'https://another-example.test',\n        targetResource: 'file://test',\n        shouldBeRedacted: true,\n      },\n      {\n        allowedResource: 'https://test.example.test',\n        targetResource: 'https://example.test',\n        shouldBeRedacted: true,\n      },\n      {\n        allowedResource: 'https://test.example.test:9900',\n        targetResource: 'https://test.example.test:9901',\n        shouldBeRedacted: true,\n      },\n    ];\n\n    for (const t of tests) {\n      it(`${t.targetResource} test when allowed resource is ${t.allowedResource}`, () => {\n        const formatted = NetworkRequestFormatter.formatInitiatorUrl(\n            new URL(t.targetResource).origin, new URL(t.allowedResource).origin);\n        if (t.shouldBeRedacted) {\n          assert.strictEqual(\n              formatted, '<redacted cross-origin initiator URL>', `${JSON.stringify(t)} was not redacted`);\n        } else {\n          assert.strictEqual(formatted, t.targetResource, `${JSON.stringify(t)} was redacted`);\n        }\n      });\n    }\n  });\n\n  describe('formatHeaders', () => {\n    it('does not redact a header from the list', () => {\n      assert.strictEqual(\n          NetworkRequestFormatter.formatHeaders('test:', [{name: 'content-type', value: 'foo'}]),\n          'test:\\ncontent-type: foo');\n    });\n\n    it('disallows headers not on the list', () => {\n      assert.strictEqual(\n          NetworkRequestFormatter.formatHeaders('test:', [{name: 'cookie', value: 'foo'}]),\n          'test:\\ncookie: <redacted>');\n      assert.strictEqual(\n          NetworkRequestFormatter.formatHeaders('test:', [{name: 'set-cookie', value: 'foo'}]),\n          'test:\\nset-cookie: <redacted>');\n      assert.strictEqual(\n          NetworkRequestFormatter.formatHeaders('test:', [{name: 'authorization', value: 'foo'}]),\n          'test:\\nauthorization: <redacted>');\n    });\n  });\n});\n"]}