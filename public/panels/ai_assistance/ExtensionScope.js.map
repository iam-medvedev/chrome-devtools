{"version":3,"file":"ExtensionScope.js","sourceRoot":"","sources":["../../../../../../front_end/panels/ai_assistance/ExtensionScope.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {AI_ASSISTANCE_CSS_CLASS_NAME, type ChangeManager} from './ChangeManager.js';\n\nexport const FREESTYLER_WORLD_NAME = 'DevTools AI Assistance';\nexport const FREESTYLER_BINDING_NAME = '__freestyler';\n\n/**\n * Injects Freestyler extension functions in to the isolated world.\n */\nexport class ExtensionScope {\n  #listeners: Array<(event: {\n                      data: Protocol.Runtime.BindingCalledEvent,\n                    }) => Promise<void>> = [];\n  #changeManager: ChangeManager;\n  #agentId: string;\n  #frameId?: Protocol.Page.FrameId|null;\n  #target?: SDK.Target.Target;\n\n  readonly #bindingMutex = new Common.Mutex.Mutex();\n\n  constructor(changes: ChangeManager, agentId: string) {\n    this.#changeManager = changes;\n    const selectedNode = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n\n    const frameId = selectedNode?.frameId();\n    const target = selectedNode?.domModel().target();\n    this.#agentId = agentId;\n    this.#target = target;\n    this.#frameId = frameId;\n  }\n\n  get target(): SDK.Target.Target {\n    if (this.#target) {\n      return this.#target;\n    }\n\n    const target = UI.Context.Context.instance().flavor(SDK.Target.Target);\n    if (!target) {\n      throw new Error('Target is not found for executing code');\n    }\n\n    return target;\n  }\n\n  get frameId(): Protocol.Page.FrameId {\n    if (this.#frameId) {\n      return this.#frameId;\n    }\n\n    const resourceTreeModel = this.target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    if (!resourceTreeModel?.mainFrame) {\n      throw new Error('Main frame is not found for executing code');\n    }\n\n    return resourceTreeModel.mainFrame.id;\n  }\n\n  async install(): Promise<void> {\n    const runtimeModel = this.target.model(SDK.RuntimeModel.RuntimeModel);\n    const pageAgent = this.target.pageAgent();\n\n    // This returns previously created world if it exists for the frame.\n    const {executionContextId} =\n        await pageAgent.invoke_createIsolatedWorld({frameId: this.frameId, worldName: FREESTYLER_WORLD_NAME});\n\n    const isolatedWorldContext = runtimeModel?.executionContext(executionContextId);\n    if (!isolatedWorldContext) {\n      throw new Error('Execution context is not found for executing code');\n    }\n\n    const handler = this.#bindingCalled.bind(this, isolatedWorldContext);\n    runtimeModel?.addEventListener(SDK.RuntimeModel.Events.BindingCalled, handler);\n    this.#listeners.push(handler);\n    await this.target.runtimeAgent().invoke_addBinding({\n      name: FREESTYLER_BINDING_NAME,\n      executionContextId,\n    });\n    await this.#simpleEval(isolatedWorldContext, freestylerBinding);\n    await this.#simpleEval(isolatedWorldContext, functions);\n  }\n\n  async uninstall(): Promise<void> {\n    const runtimeModel = this.target.model(SDK.RuntimeModel.RuntimeModel);\n\n    for (const handler of this.#listeners) {\n      runtimeModel?.removeEventListener(SDK.RuntimeModel.Events.BindingCalled, handler);\n    }\n    this.#listeners = [];\n\n    await this.target.runtimeAgent().invoke_removeBinding({\n      name: FREESTYLER_BINDING_NAME,\n    });\n  }\n\n  async #simpleEval(context: SDK.RuntimeModel.ExecutionContext, expression: string): Promise<{\n    object: SDK.RemoteObject.RemoteObject,\n    exceptionDetails?: Protocol.Runtime.ExceptionDetails,\n  }> {\n    const response = await context.evaluate(\n        {\n          expression,\n          replMode: true,\n          includeCommandLineAPI: false,\n          returnByValue: true,\n          silent: false,\n          generatePreview: false,\n          allowUnsafeEvalBlockedByCSP: true,\n          throwOnSideEffect: false,\n        },\n        /* userGesture */ false, /* awaitPromise */ true);\n\n    if (!response) {\n      throw new Error('Response is not found');\n    }\n    if ('error' in response) {\n      throw new Error(response.error);\n    }\n    if (response.exceptionDetails) {\n      const exceptionDescription = response.exceptionDetails.exception?.description;\n      throw new Error(exceptionDescription || 'JS exception');\n    }\n    return response;\n  }\n\n  async #bindingCalled(executionContext: SDK.RuntimeModel.ExecutionContext, event: {\n    data: Protocol.Runtime.BindingCalledEvent,\n  }): Promise<void> {\n    const {data} = event;\n    if (data.name !== FREESTYLER_BINDING_NAME) {\n      return;\n    }\n    await this.#bindingMutex.run(async () => {\n      const id = data.payload;\n      const {object} = await this.#simpleEval(executionContext, `freestyler.getArgs(${id})`);\n      const arg = JSON.parse(object.value);\n      const selector = arg.selector;\n      const className = arg.className;\n      const cssModel = this.target.model(SDK.CSSModel.CSSModel);\n      if (!cssModel) {\n        throw new Error('CSSModel is not found');\n      }\n      const styleChanges = await this.#changeManager.addChange(cssModel, this.frameId, {\n        groupId: this.#agentId,\n        selector,\n        className,\n        styles: arg.styles,\n      });\n      await this.#simpleEval(executionContext, `freestyler.respond(${id}, ${JSON.stringify(styleChanges)})`);\n    });\n  }\n}\n\nconst freestylerBinding = `if (!globalThis.freestyler) {\n  globalThis.freestyler = (args) => {\n    const {resolve, promise } = Promise.withResolvers();\n    freestyler.callbacks.set(freestyler.id , {\n      args: JSON.stringify(args),\n      callbackId: freestyler.id,\n      resolve,\n    });\n    ${FREESTYLER_BINDING_NAME}(String(freestyler.id));\n    freestyler.id++;\n    return promise;\n  }\n  freestyler.id = 1;\n  freestyler.callbacks = new Map();\n  freestyler.getArgs = (callbackId) => {\n    return freestyler.callbacks.get(callbackId).args;\n  }\n  freestyler.respond = (callbackId, styleChanges) => {\n    freestyler.callbacks.get(callbackId).resolve(styleChanges);\n    freestyler.callbacks.delete(callbackId);\n  }\n}`;\n\nconst functions = `async function setElementStyles(el, styles) {\n  let selector = el.tagName.toLowerCase();\n  if (el.id) {\n    selector = '#' + el.id;\n  } else if (el.classList.length) {\n    const parts = [];\n    for (const cls of el.classList) {\n      if (cls.startsWith('${AI_ASSISTANCE_CSS_CLASS_NAME}')) {\n        continue;\n      }\n      parts.push('.' + cls);\n    }\n    if (parts.length) {\n      selector = parts.join('');\n    }\n  }\n\n  // __freestylerClassName is not exposed to the page due to this being\n  // run in the isolated world.\n  const className = el.__freestylerClassName ?? '${AI_ASSISTANCE_CSS_CLASS_NAME}-' + freestyler.id;\n  el.__freestylerClassName = className;\n  el.classList.add(className);\n\n  // Remove inline styles with the same keys so that the edit applies.\n  for (const [key, value] of Object.entries(styles)) {\n    // if it's kebab case.\n    el.style.removeProperty(key);\n    // If it's camel case.\n    el.style[key] = '';\n  }\n\n  const result = await freestyler({\n    method: 'setElementStyles',\n    selector: selector,\n    className,\n    styles\n  });\n\n  let rootNode = el.getRootNode();\n  if (rootNode instanceof ShadowRoot) {\n    let stylesheets = rootNode.adoptedStyleSheets;\n    let hasAiStyleChange = false;\n    let stylesheet = new CSSStyleSheet();\n    for (let i = 0; i < stylesheets.length; i++) {\n      const sheet = stylesheets[i];\n      for (let j = 0; j < sheet.cssRules.length; j++) {\n        hasAiStyleChange = sheet.cssRules[j].selectorText.startsWith('.${AI_ASSISTANCE_CSS_CLASS_NAME}');\n        if (hasAiStyleChange) {\n          stylesheet = sheet;\n          break;\n        }\n      }\n    }\n    stylesheet.replaceSync(result);\n    if (!hasAiStyleChange) {\n      rootNode.adoptedStyleSheets = [...stylesheets, stylesheet];\n    }\n  }\n}`;\n"]}