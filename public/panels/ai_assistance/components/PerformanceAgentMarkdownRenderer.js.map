{"version":3,"file":"PerformanceAgentMarkdownRenderer.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/ai_assistance/components/PerformanceAgentMarkdownRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Trace from '../../../models/trace/trace.js';\nimport type * as Marked from '../../../third_party/marked/marked.js';\nimport * as Lit from '../../../ui/lit/lit.js';\n\nimport {MarkdownRendererWithCodeBlock} from './MarkdownRendererWithCodeBlock.js';\n\nconst {html} = Lit;\nconst {ref, createRef} = Lit.Directives;\n\nexport class PerformanceAgentMarkdownRenderer extends MarkdownRendererWithCodeBlock {\n  constructor(\n      private mainFrameId = '',\n      private lookupEvent: (key: Trace.Types.File.SerializableKey) => Trace.Types.Events.Event | null = () => null) {\n    super();\n  }\n\n  override templateForToken(token: Marked.Marked.MarkedToken): Lit.TemplateResult|null {\n    if (token.type === 'link' && token.href.startsWith('#')) {\n      if (token.href.startsWith('#node-')) {\n        const nodeId = Number(token.href.replace('#node-', '')) as Protocol.DOM.BackendNodeId;\n\n        const templateRef = createRef();\n        void this.#linkifyNode(nodeId, token.text).then(node => {\n          if (!templateRef.value || !node) {\n            return;\n          }\n\n          templateRef.value.textContent = '';\n          templateRef.value.append(node);\n        });\n        return html`<span ${ref(templateRef)}>${token.text}</span>`;\n      }\n\n      const event = this.lookupEvent(token.href.slice(1) as Trace.Types.File.SerializableKey);\n      if (!event) {\n        return html`${token.text}`;\n      }\n\n      let label = token.text;\n      let title = '';\n      if (Trace.Types.Events.isSyntheticNetworkRequest(event)) {\n        title = event.args.data.url;\n      } else {\n        label += ` (${event.name})`;\n      }\n\n      // eslint-disable-next-line rulesdir/no-a-tags-in-lit\n      return html`<a href=\"#\" draggable=false .title=${title} @click=${(e: Event) => {\n        e.stopPropagation();\n        void Common.Revealer.reveal(new SDK.TraceObject.RevealableEvent(event));\n      }}>${label}</a>`;\n    }\n\n    return super.templateForToken(token);\n  }\n\n  // Taken from front_end/panels/timeline/components/insights/NodeLink.ts\n  // Would be nice to move the above component to somewhere that allows the AI\n  // Assistance panel to also use it.\n  async #linkifyNode(backendNodeId: Protocol.DOM.BackendNodeId, label: string): Promise<Node|undefined> {\n    if (backendNodeId === undefined) {\n      return;\n    }\n\n    const target = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    const domModel = target?.model(SDK.DOMModel.DOMModel);\n    if (!domModel) {\n      return undefined;\n    }\n    const domNodesMap = await domModel.pushNodesByBackendIdsToFrontend(new Set([backendNodeId]));\n    const node = domNodesMap?.get(backendNodeId);\n    if (!node) {\n      return;\n    }\n\n    if (node.frameId() !== this.mainFrameId) {\n      return;\n    }\n\n    const linkedNode = await Common.Linkifier.Linkifier.linkify(node, {textContent: label});\n    return linkedNode;\n  }\n}\n"]}