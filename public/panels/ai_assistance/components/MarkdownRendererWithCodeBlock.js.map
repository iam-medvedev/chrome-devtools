{"version":3,"file":"MarkdownRendererWithCodeBlock.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/ai_assistance/components/MarkdownRendererWithCodeBlock.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,YAAY,MAAM,uDAAuD,CAAC;AAGtF,mGAAmG;AACnG,2GAA2G;AAC3G,sDAAsD;AACtD,WAAW;AACX,MAAM;AACN,mDAAmD;AACnD,MAAM;AACN,gBAAgB;AAChB,IAAI;AACJ,MAAM;AACN,MAAM,OAAO,6BAA8B,SAAQ,YAAY,CAAC,YAAY,CAAC,uBAAuB;IAClG,WAAW,GAAY,KAAK,CAAC;IAC7B,YAAY,OAA+B,EAAE;QAC3C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC9C,CAAC;IACQ,gBAAgB,CAAC,KAAgC;QACxD,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YAC1B,MAAM,KAAK,GAAI,KAAK,CAAC,IAAe,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACjD,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,KAAK,EAAE,CAAC;gBAC/B,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;gBACnB,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzC,CAAC;QACH,CAAC;QAED,oDAAoD;QACpD,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,MAAM,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,CAAC,EAAE,CAAC;YAC1E,mHAAmH;YACnH,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC;YACrC,qQAAqQ;YACrQ,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvD,GAAG,KAAK,CAAC,MAAM;gBACf,EAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAC;aAC5C,CAAC;YAEF,KAAK,GAAG;gBACN,GAAG,KAAK;gBACR,uEAAuE;gBACvE,6GAA6G;gBAC7G,IAAI,EAAE,GAAG,KAAK,CAAC,IAAI,GAAG,OAAO,EAAE;gBAC/B,GAAG,EAAE,GAAG,KAAK,CAAC,IAAI,GAAG,OAAO,EAAE;gBAC9B,IAAI,EAAE,MAAM;gBACZ,MAAM,EAAE,WAAW;aACpB,CAAC;QACJ,CAAC;QAED,OAAO,KAAK,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;CACF","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Marked from '../../../third_party/marked/marked.js';\nimport * as MarkdownView from '../../../ui/components/markdown_view/markdown_view.js';\nimport type * as Lit from '../../../ui/lit/lit.js';\n\n// The model returns multiline code blocks in an erroneous way with the language being in new line.\n// This renderer takes that into account and correctly updates the parsed multiline token with the language\n// correctly identified and stripped from the content.\n// Example:\n// ```\n// css <-- This should have been on the first line.\n// * {\n//   color: red;\n// }\n// ```\nexport class MarkdownRendererWithCodeBlock extends MarkdownView.MarkdownView.MarkdownInsightRenderer {\n  #stripLinks: boolean = false;\n  constructor(opts: {stripLinks?: boolean} = {}) {\n    super();\n    this.#stripLinks = Boolean(opts.stripLinks);\n  }\n  override templateForToken(token: Marked.Marked.MarkedToken): Lit.TemplateResult|null {\n    if (token.type === 'code') {\n      const lines = (token.text as string).split('\\n');\n      if (lines[0]?.trim() === 'css') {\n        token.lang = 'css';\n        token.text = lines.slice(1).join('\\n');\n      }\n    }\n\n    // Potentially remove links from the rendered result\n    if (this.#stripLinks && (token.type === 'link' || token.type === 'image')) {\n      // Insert an extra text node at the end after any link text. Show the link as plaintext (surrounded by parentheses)\n      const urlText = ` ( ${token.href} )`;\n      // Images would be turned into as links (but we'll skip that) https://source.chromium.org/chromium/chromium/src/+/main:third_party/devtools-frontend/src/front_end/ui/components/markdown_view/MarkdownView.ts;l=286-291;drc=d2cc89e48c913666655542d818ad0a09d25d0d08\n      const childTokens = token.type === 'image' ? undefined : [\n        ...token.tokens,\n        {type: 'text', text: urlText, raw: urlText},\n      ];\n\n      token = {\n        ...token,\n        // Marked doesn't read .text or .raw of a link, but we'll update anyway\n        // https://github.com/markedjs/marked/blob/035af38ab1e5aae95ece213dcc9a9c6d79cff46f/src/Renderer.ts#L178-L191\n        text: `${token.text}${urlText}`,\n        raw: `${token.text}${urlText}`,\n        type: 'text',\n        tokens: childTokens,\n      };\n    }\n\n    return super.templateForToken(token);\n  }\n}\n"]}