{"version":3,"file":"MarkdownRendererWithCodeBlock.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/ai_assistance/components/MarkdownRendererWithCodeBlock.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,YAAY,MAAM,uDAAuD,CAAC;AAGtF,mGAAmG;AACnG,2GAA2G;AAC3G,sDAAsD;AACtD,WAAW;AACX,MAAM;AACN,mDAAmD;AACnD,MAAM;AACN,gBAAgB;AAChB,IAAI;AACJ,MAAM;AACN,MAAM,OAAO,6BAA8B,SAAQ,YAAY,CAAC,YAAY,CAAC,uBAAuB;IACzF,gBAAgB,CAAC,KAAgC;QACxD,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YAC1B,MAAM,KAAK,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACvC,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,KAAK,EAAE,CAAC;gBAC/B,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;gBACnB,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzC,CAAC;QACH,CAAC;QAED,OAAO,KAAK,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;CACF","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Marked from '../../../third_party/marked/marked.js';\nimport * as MarkdownView from '../../../ui/components/markdown_view/markdown_view.js';\nimport type * as Lit from '../../../ui/lit/lit.js';\n\n// The model returns multiline code blocks in an erroneous way with the language being in new line.\n// This renderer takes that into account and correctly updates the parsed multiline token with the language\n// correctly identified and stripped from the content.\n// Example:\n// ```\n// css <-- This should have been on the first line.\n// * {\n//   color: red;\n// }\n// ```\nexport class MarkdownRendererWithCodeBlock extends MarkdownView.MarkdownView.MarkdownInsightRenderer {\n  override templateForToken(token: Marked.Marked.MarkedToken): Lit.TemplateResult|null {\n    if (token.type === 'code') {\n      const lines = (token.text).split('\\n');\n      if (lines[0]?.trim() === 'css') {\n        token.lang = 'css';\n        token.text = lines.slice(1).join('\\n');\n      }\n    }\n\n    return super.templateForToken(token);\n  }\n}\n"]}