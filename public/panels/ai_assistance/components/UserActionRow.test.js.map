{"version":3,"file":"UserActionRow.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/ai_assistance/components/UserActionRow.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,oBAAoB,EAAC,MAAM,gCAAgC,CAAC;AACpE,OAAO,EACL,uBAAuB,GACxB,MAAM,wCAAwC,CAAC;AAChD,OAAO,KAAK,UAAU,MAAM,qBAAqB,CAAC;AAElD,uBAAuB,CAAC,eAAe,EAAE,GAAG,EAAE;IAC5C,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAC9E,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC;YAC7C,eAAe,EAAE,IAAI;YACrB,gBAAgB,EAAE,KAAK,CAAC,IAAI,EAAE;YAC9B,mBAAmB,EAAE,IAAI;YACzB,qBAAqB,EAAE,KAAK,CAAC,IAAI,EAAE;SACpC,CAAC,CAAC;QACH,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAChC,MAAM,MAAM,GAAG,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,+BAA+B,CAAiB,CAAC;QACpG,MAAM,CAAC,KAAK,EAAE,CAAC;QAEf,MAAM,CAAC,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;QACnF,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC;YAC7C,eAAe,EAAE,IAAI;YACrB,gBAAgB,EAAE,KAAK,CAAC,IAAI,EAAE;YAC9B,mBAAmB,EAAE,KAAK;YAC1B,qBAAqB,EAAE,KAAK,CAAC,IAAI,EAAE;SACpC,CAAC,CAAC;QACH,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAEhC,MAAM,MAAM,GAAG,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,+BAA+B,CAAiB,CAAC;QACpG,MAAM,CAAC,KAAK,EAAE,CAAC;QAEf,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC;YAC7C,eAAe,EAAE,IAAI;YACrB,gBAAgB,EAAE,KAAK,CAAC,IAAI,EAAE;YAC9B,mBAAmB,EAAE,IAAI;YACzB,qBAAqB,EAAE,KAAK,CAAC,IAAI,EAAE;SACpC,CAAC,CAAC;QACH,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAChC,MAAM,MAAM,GAAG,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,+BAA+B,CAAiB,CAAC;QACpG,MAAM,CAAC,KAAK,EAAE,CAAC;QAEf,MAAM,CAAC,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAC9D,MAAM,YAAY,GAAG,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,uBAAuB,CAAsB,CAAC;QACvG,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QACtC,MAAM,UAAU,GAAG,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,sBAAsB,CAAsB,CAAC;QACpG,UAAU,CAAC,KAAK,GAAG,MAAM,CAAC;QAC1B,UAAU,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {\n  describeWithEnvironment,\n} from '../../../testing/EnvironmentHelpers.js';\nimport * as Freestyler from '../ai_assistance.js';\n\ndescribeWithEnvironment('UserActionRow', () => {\n  it('should show the feedback form when canShowFeedbackForm is true', async () => {\n    const component = new Freestyler.UserActionRow({\n      showRateButtons: true,\n      onFeedbackSubmit: sinon.stub(),\n      canShowFeedbackForm: true,\n      handleSuggestionClick: sinon.stub(),\n    });\n    renderElementIntoDOM(component);\n    const button = component.shadowRoot!.querySelector('.rate-buttons devtools-button')! as HTMLElement;\n    button.click();\n\n    assert(component.shadowRoot!.querySelector('.feedback-form'));\n  });\n\n  it('should not show the feedback form when canShowFeedbackForm is false', async () => {\n    const component = new Freestyler.UserActionRow({\n      showRateButtons: true,\n      onFeedbackSubmit: sinon.stub(),\n      canShowFeedbackForm: false,\n      handleSuggestionClick: sinon.stub(),\n    });\n    renderElementIntoDOM(component);\n\n    const button = component.shadowRoot!.querySelector('.rate-buttons devtools-button')! as HTMLElement;\n    button.click();\n\n    assert.notExists(component.shadowRoot!.querySelector('.feedback-form'));\n  });\n\n  it('should disable the submit button when the input is empty', async () => {\n    const component = new Freestyler.UserActionRow({\n      showRateButtons: true,\n      onFeedbackSubmit: sinon.stub(),\n      canShowFeedbackForm: true,\n      handleSuggestionClick: sinon.stub(),\n    });\n    renderElementIntoDOM(component);\n    const button = component.shadowRoot!.querySelector('.rate-buttons devtools-button')! as HTMLElement;\n    button.click();\n\n    assert(component.shadowRoot!.querySelector('.feedback-form'));\n    const submitButton = component.shadowRoot!.querySelector('[aria-label=\"Submit\"]') as HTMLButtonElement;\n    assert.isTrue(submitButton?.disabled);\n    const inputField = component.shadowRoot!.querySelector('.feedback-form input')! as HTMLInputElement;\n    inputField.value = 'test';\n    inputField.dispatchEvent(new Event('input'));\n    assert.isFalse(submitButton?.disabled);\n  });\n});\n"]}