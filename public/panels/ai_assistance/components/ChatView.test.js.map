{"version":3,"file":"ChatView.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/ai_assistance/components/ChatView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as AiAssistanceModel from '../../../models/ai_assistance/ai_assistance.js';\nimport {initializePersistenceImplForTests, setupAutomaticFileSystem} from '../../../testing/AiAssistanceHelpers.js';\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport * as AiAssistancePanel from '../ai_assistance.js';\n\ndescribeWithEnvironment('ChatView', () => {\n  function getProp(options: Partial<AiAssistancePanel.Props>): AiAssistancePanel.Props {\n    const noop = () => {};\n    const messages: AiAssistancePanel.ChatMessage[] = options.messages ?? [];\n    const selectedContext = sinon.createStubInstance(AiAssistanceModel.NodeContext);\n    selectedContext.getTitle.returns('');\n    return {\n      onTextSubmit: noop,\n      onInspectElementClick: noop,\n      onFeedbackSubmit: noop,\n      onCancelClick: noop,\n      onContextClick: noop,\n      onNewConversation: noop,\n      onTextInputChange: noop,\n      changeManager: new AiAssistanceModel.ChangeManager(),\n      inspectElementToggled: false,\n      state: AiAssistancePanel.State.CHAT_VIEW,\n      conversationType: AiAssistanceModel.ConversationType.STYLING,\n      aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      messages,\n      selectedContext,\n      isLoading: false,\n      canShowFeedbackForm: false,\n      userInfo: {},\n      blockedByCrossOrigin: false,\n      isReadOnly: false,\n      isTextInputDisabled: false,\n      emptyStateSuggestions: [],\n      inputPlaceholder: i18n.i18n.lockedString('input placeholder'),\n      disclaimerText: i18n.i18n.lockedString('disclaimer text'),\n      isTextInputEmpty: true,\n      ...options,\n    };\n  }\n\n  describe('SideEffects', () => {\n    it('should show SideEffects when the step contains \"sideEffect\" object', async () => {\n      initializePersistenceImplForTests();\n      setupAutomaticFileSystem();\n\n      const props = getProp({\n        messages: [\n          {\n            entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n            steps: [\n              {\n                isLoading: false,\n                title: 'Updating element styles',\n                thought: 'Updating element styles',\n                code: '$0.style.background = \"blue\";',\n                sideEffect: {\n                  onAnswer: () => {},\n                },\n              },\n            ],\n          },\n        ],\n      });\n      const chat = new AiAssistancePanel.ChatView(props);\n      renderElementIntoDOM(chat);\n\n      const sideEffect = chat.shadowRoot!.querySelector('.side-effect-confirmation');\n      assert.exists(sideEffect);\n    });\n\n    it('shows the disabled view when the state is CONSENT_VIEW', async () => {\n      const props = getProp({\n        state: AiAssistancePanel.State.CONSENT_VIEW,\n      });\n      const chat = new AiAssistancePanel.ChatView(props);\n      renderElementIntoDOM(chat);\n\n      const optIn = chat.shadowRoot?.querySelector('.disabled-view');\n      assert.strictEqual(\n          optIn?.textContent?.trim(), 'Turn on AI assistance in Settings to get help with understanding CSS styles');\n    });\n\n    it('shows the disabled view when the AIDA is not available', async () => {\n      const props = getProp({\n        state: AiAssistancePanel.State.CHAT_VIEW,\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.NO_INTERNET,\n      });\n      const chat = new AiAssistancePanel.ChatView(props);\n      renderElementIntoDOM(chat);\n\n      const optIn = chat.shadowRoot?.querySelector('.disabled-view');\n      assert.strictEqual(optIn?.textContent?.trim(), 'Check your internet connection and try again');\n    });\n  });\n});\n"]}