{"version":3,"file":"ChatView.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/ai_assistance/components/ChatView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment, updateHostConfig} from '../../../testing/EnvironmentHelpers.js';\nimport * as AiAssistance from '../ai_assistance.js';\n\ndescribeWithEnvironment('ChatView', () => {\n  function getProp(options: Partial<AiAssistance.Props>): AiAssistance.Props {\n    const noop = () => {};\n    const messages: AiAssistance.ChatMessage[] = options.messages ?? [];\n    const selectedContext = sinon.createStubInstance(AiAssistance.NodeContext);\n    selectedContext.getTitle.returns('');\n    return {\n      onTextSubmit: noop,\n      onInspectElementClick: noop,\n      onFeedbackSubmit: noop,\n      onCancelClick: noop,\n      onContextClick: noop,\n      onNewConversation: noop,\n      inspectElementToggled: false,\n      state: AiAssistance.State.CHAT_VIEW,\n      agentType: AiAssistance.AgentType.STYLING,\n      aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE,\n      messages,\n      selectedContext,\n      isLoading: false,\n      canShowFeedbackForm: false,\n      userInfo: {},\n      blockedByCrossOrigin: false,\n      stripLinks: false,\n      isReadOnly: false,\n      ...options,\n    };\n  }\n\n  describe('SideEffects', () => {\n    it('should show SideEffects when the step contains \"sideEffect\" object', async () => {\n      const props = getProp({\n        messages: [\n          {\n            entity: AiAssistance.ChatMessageEntity.MODEL,\n            steps: [\n              {\n                isLoading: false,\n                title: 'Updating element styles',\n                thought: 'Updating element styles',\n                code: '$0.style.background = \"blue\";',\n                sideEffect: {\n                  onAnswer: () => {},\n                },\n              },\n            ],\n          },\n        ],\n      });\n      const chat = new AiAssistance.ChatView(props);\n      renderElementIntoDOM(chat);\n\n      const sideEffect = chat.shadowRoot!.querySelector('.side-effect-confirmation');\n      assert.exists(sideEffect);\n    });\n\n    it('shows the disabled view when the state is CONSENT_VIEW', async () => {\n      const props = getProp({\n        state: AiAssistance.State.CONSENT_VIEW,\n      });\n      const chat = new AiAssistance.ChatView(props);\n      renderElementIntoDOM(chat);\n\n      const optIn = chat.shadowRoot?.querySelector('.disabled-view');\n      assert.strictEqual(\n          optIn?.textContent?.trim(), 'Turn on AI assistance in Settings to get help with understanding CSS styles');\n      const chatInput = chat.shadowRoot?.querySelector('.chat-input') as HTMLTextAreaElement;\n      assert.isTrue(chatInput.disabled);\n      assert.strictEqual(chatInput.placeholder, 'Follow the steps above to ask a question');\n    });\n\n    it('shows the disabled view when the AIDA is not available', async () => {\n      const props = getProp({\n        state: AiAssistance.State.CHAT_VIEW,\n        aidaAvailability: Host.AidaClient.AidaAccessPreconditions.NO_INTERNET,\n      });\n      const chat = new AiAssistance.ChatView(props);\n      renderElementIntoDOM(chat);\n\n      const optIn = chat.shadowRoot?.querySelector('.disabled-view');\n      assert.strictEqual(optIn?.textContent?.trim(), 'Check your internet connection and try again');\n      const chatInput = chat.shadowRoot?.querySelector('.chat-input') as HTMLTextAreaElement;\n      assert.isTrue(chatInput.disabled);\n      assert.strictEqual(chatInput.placeholder, 'Ask a question about the selected element');\n    });\n\n    describe('no agent empty state', () => {\n      it('should show feature cards for enabled features', () => {\n        updateHostConfig({\n          devToolsFreestyler: {\n            enabled: true,\n          },\n          devToolsAiAssistanceNetworkAgent: {\n            enabled: true,\n          },\n          devToolsAiAssistanceFileAgent: {\n            enabled: true,\n          },\n          devToolsAiAssistancePerformanceAgent: {\n            enabled: true,\n          },\n        });\n        const props = getProp({\n          agentType: undefined,\n        });\n        const chat = new AiAssistance.ChatView(props);\n        renderElementIntoDOM(chat);\n        const featureCards = chat.shadowRoot?.querySelectorAll('.feature-card');\n        assert.isDefined(featureCards);\n        assert.strictEqual(featureCards?.length, 4);\n        assert.strictEqual(featureCards[0].querySelector('.feature-card-content h3')?.textContent, 'CSS styles');\n        assert.strictEqual(featureCards[1].querySelector('.feature-card-content h3')?.textContent, 'Network');\n        assert.strictEqual(featureCards[2].querySelector('.feature-card-content h3')?.textContent, 'Files');\n        assert.strictEqual(featureCards[3].querySelector('.feature-card-content h3')?.textContent, 'Performance');\n      });\n\n      it('should not show any feature cards if none of the entrypoints are available', () => {\n        updateHostConfig({\n          devToolsFreestyler: {\n            enabled: false,\n          },\n          devToolsAiAssistanceNetworkAgent: {\n            enabled: false,\n          },\n          devToolsAiAssistanceFileAgent: {\n            enabled: false,\n          },\n          devToolsAiAssistancePerformanceAgent: {\n            enabled: false,\n          },\n        });\n        const props = getProp({\n          agentType: undefined,\n        });\n        const chat = new AiAssistance.ChatView(props);\n        renderElementIntoDOM(chat);\n        const featureCards = chat.shadowRoot?.querySelectorAll('.feature-card');\n        assert.isDefined(featureCards);\n        assert.strictEqual(featureCards?.length, 0);\n      });\n    });\n  });\n});\n"]}