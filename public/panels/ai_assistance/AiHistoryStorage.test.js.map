{"version":3,"file":"AiHistoryStorage.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/ai_assistance/AiHistoryStorage.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\n\nimport * as AiAssistance from './ai_assistance.js';\n\ndescribe('AiHistoryStorage', () => {\n  const agent1: AiAssistance.SerializedAgent = {\n    id: 'id1',\n    type: AiAssistance.AgentType.STYLING,\n    history: [],\n  };\n  const agent2: AiAssistance.SerializedAgent = {\n    id: 'id2',\n    type: AiAssistance.AgentType.FILE,\n    history: [],\n  };\n  const agent3: AiAssistance.SerializedAgent = {\n    id: 'id3',\n    type: AiAssistance.AgentType.NETWORK,\n    history: [],\n  };\n\n  beforeEach(() => {\n    let data: Record<string, string> = {};\n    const dummyStorage = new Common.Settings.SettingsStorage({}, {\n      get(setting) {\n        return Promise.resolve(data[setting]);\n      },\n      set(setting, value) {\n        data[setting] = value;\n      },\n      clear() {\n        data = {};\n      },\n      remove(setting) {\n        delete data[setting];\n      },\n      register(_setting) {},\n    });\n    Common.Settings.Settings.instance({\n      forceNew: true,\n      syncedStorage: dummyStorage,\n      globalStorage: dummyStorage,\n      localStorage: dummyStorage,\n    });\n  });\n\n  function getStorage() {\n    return AiAssistance.AiHistoryStorage.instance(true);\n  }\n\n  it('should create and retrieve history entry', async () => {\n    const storage = getStorage();\n    await storage.upsertHistoryEntry(agent1);\n    assert.deepEqual(\n        storage.getHistory(),\n        [{\n          id: 'id1',\n          type: 'freestyler' as AiAssistance.AgentType,\n          history: [],\n        }],\n    );\n    await storage.upsertHistoryEntry(agent2);\n    assert.deepEqual(\n        storage.getHistory(),\n        [\n          {\n            id: 'id1',\n            type: 'freestyler' as AiAssistance.AgentType,\n            history: [],\n          },\n          {\n            id: 'id2',\n            type: 'drjones-file' as AiAssistance.AgentType,\n            history: [],\n          },\n        ],\n    );\n  });\n\n  it('should update history entries correctly', async () => {\n    const storage = getStorage();\n    await storage.upsertHistoryEntry(agent1);\n    await storage.upsertHistoryEntry(agent2);\n    await storage.upsertHistoryEntry({\n      ...agent1,\n      history: [\n        {\n          type: AiAssistance.ResponseType.USER_QUERY,\n          query: 'text',\n        },\n      ],\n    });\n    assert.deepEqual(\n        storage.getHistory(),\n        [\n          {\n            id: 'id1',\n            type: 'freestyler' as AiAssistance.AgentType,\n            history: [\n              {\n                type: AiAssistance.ResponseType.USER_QUERY,\n                query: 'text',\n              },\n            ],\n          },\n          {\n            id: 'id2',\n            type: 'drjones-file' as AiAssistance.AgentType,\n            history: [],\n          },\n        ],\n    );\n\n    await storage.upsertHistoryEntry(agent3);\n    assert.deepEqual(\n        storage.getHistory(),\n        [\n          {\n            id: 'id1',\n            type: 'freestyler' as AiAssistance.AgentType,\n            history: [\n              {\n                type: AiAssistance.ResponseType.USER_QUERY,\n                query: 'text',\n              },\n            ],\n          },\n          {\n            id: 'id2',\n            type: 'drjones-file' as AiAssistance.AgentType,\n            history: [],\n          },\n          {\n            id: 'id3',\n            type: 'drjones-network-request' as AiAssistance.AgentType,\n            history: [],\n          },\n        ],\n    );\n  });\n\n  it('should delete a single entry', async () => {\n    const storage = getStorage();\n    await storage.upsertHistoryEntry(agent1);\n    await storage.upsertHistoryEntry(agent2);\n    await storage.upsertHistoryEntry(agent3);\n    await storage.deleteHistoryEntry('id2');\n    assert.deepEqual(\n        storage.getHistory(),\n        [\n          {\n            id: 'id1',\n            type: 'freestyler' as AiAssistance.AgentType,\n            history: [\n\n            ],\n          },\n          {\n            id: 'id3',\n            type: 'drjones-network-request' as AiAssistance.AgentType,\n            history: [],\n          },\n        ],\n    );\n  });\n\n  it('should delete all entries', async () => {\n    const storage = getStorage();\n    await storage.upsertHistoryEntry(agent1);\n    await storage.upsertHistoryEntry(agent2);\n    await storage.upsertHistoryEntry(agent3);\n    await storage.deleteAll();\n    assert.deepEqual(\n        storage.getHistory(),\n        [],\n    );\n  });\n});\n"]}