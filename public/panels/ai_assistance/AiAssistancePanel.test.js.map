{"version":3,"file":"AiAssistancePanel.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/ai_assistance/AiAssistancePanel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as AiAssistanceModel from '../../models/ai_assistance/ai_assistance.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport {\n  cleanup,\n  createAiAssistancePanel,\n  createNetworkRequest,\n  mockAidaClient,\n  openHistoryContextMenu\n} from '../../testing/AiAssistanceHelpers.js';\nimport {findMenuItemWithLabel} from '../../testing/ContextMenuHelpers.js';\nimport {\n  createTarget,\n  describeWithEnvironment,\n  registerNoopActions,\n  updateHostConfig\n} from '../../testing/EnvironmentHelpers.js';\nimport {expectCall} from '../../testing/ExpectStubCall.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {MockStore} from '../../testing/MockSettingStorage.js';\nimport {createNetworkPanelForMockConnection} from '../../testing/NetworkHelpers.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\nimport * as Snackbars from '../../ui/components/snackbars/snackbars.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Network from '../network/network.js';\nimport type * as TimelineComponents from '../timeline/components/components.js';\nimport * as Timeline from '../timeline/timeline.js';\nimport * as TimelineUtils from '../timeline/utils/utils.js';\n\nimport * as AiAssistancePanel from './ai_assistance.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\ndescribeWithMockConnection('AI Assistance Panel', () => {\n  let viewManagerIsViewVisibleStub: sinon.SinonStub<[viewId: string], boolean>;\n  beforeEach(() => {\n    viewManagerIsViewVisibleStub = sinon.stub(UI.ViewManager.ViewManager.instance(), 'isViewVisible');\n    AiAssistanceModel.ConversationHandler.removeInstance();\n    registerNoopActions([\n      'elements.toggle-element-search', 'timeline.record-reload', 'timeline.toggle-recording', 'timeline.show-history',\n      'components.collect-garbage'\n    ]);\n\n    UI.Context.Context.instance().setFlavor(Timeline.TimelinePanel.TimelinePanel, null);\n    UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, null);\n    UI.Context.Context.instance().setFlavor(SDK.DOMModel.DOMNode, null);\n    UI.Context.Context.instance().setFlavor(TimelineUtils.AIContext.AgentFocus, null);\n    UI.Context.Context.instance().setFlavor(Workspace.UISourceCode.UISourceCode, null);\n\n    const mockStore = new MockStore();\n    const settingsStorage = new Common.Settings.SettingsStorage({}, mockStore);\n    Common.Settings.Settings.instance({\n      forceNew: true,\n      syncedStorage: settingsStorage,\n      globalStorage: settingsStorage,\n      localStorage: settingsStorage,\n    });\n  });\n\n  afterEach(() => {\n    cleanup();\n    viewManagerIsViewVisibleStub.reset();\n  });\n\n  describe('consent view', () => {\n    it('should render chat view when no account email', async () => {\n      const {view} =\n          await createAiAssistancePanel({aidaAvailability: Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL});\n      assert.strictEqual(view.input.state, AiAssistancePanel.State.CHAT_VIEW);\n    });\n\n    it('should render chat view when sync paused', async () => {\n      const {view} =\n          await createAiAssistancePanel({aidaAvailability: Host.AidaClient.AidaAccessPreconditions.SYNC_IS_PAUSED});\n      assert.strictEqual(view.input.state, AiAssistancePanel.State.CHAT_VIEW);\n    });\n\n    it('should render chat view when no internet', async () => {\n      const {view} =\n          await createAiAssistancePanel({aidaAvailability: Host.AidaClient.AidaAccessPreconditions.NO_INTERNET});\n      assert.strictEqual(view.input.state, AiAssistancePanel.State.CHAT_VIEW);\n    });\n\n    it('should render consent view when the consent is not given before', async () => {\n      const {view} = await createAiAssistancePanel();\n      assert.strictEqual(view.input.state, AiAssistancePanel.State.CONSENT_VIEW);\n    });\n\n    it('should switch from consent view to empty state when enabling setting', async () => {\n      const {view} = await createAiAssistancePanel();\n      assert.strictEqual(view.input.state, AiAssistancePanel.State.CONSENT_VIEW);\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      assert.strictEqual((await view.nextInput).state, AiAssistancePanel.State.EXPLORE_VIEW);\n    });\n\n    it('should render empty state when the consent is given before', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      const {view} = await createAiAssistancePanel();\n      assert.strictEqual(view.input.state, AiAssistancePanel.State.EXPLORE_VIEW);\n    });\n\n    it('should render the consent view when the setting is disabled', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      Common.Settings.moduleSetting('ai-assistance-enabled').setDisabled(true);\n      const {view} = await createAiAssistancePanel();\n      assert.strictEqual(view.input.state, AiAssistancePanel.State.CONSENT_VIEW);\n      Common.Settings.moduleSetting('ai-assistance-enabled').setDisabled(false);\n    });\n\n    it('should render the consent view when blocked by age', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      updateHostConfig({\n        aidaAvailability: {\n          blockedByAge: true,\n        },\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n      const {view} = await createAiAssistancePanel();\n      assert.strictEqual(view.input.state, AiAssistancePanel.State.CONSENT_VIEW);\n    });\n\n    it('updates when the user logs in', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n\n      const {view, stubAidaCheckAccessPreconditions} =\n          await createAiAssistancePanel({aidaAvailability: Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL});\n\n      assert.strictEqual(view.input.state, AiAssistancePanel.State.CHAT_VIEW);\n      assert.strictEqual(view.input.aidaAvailability, Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL);\n\n      stubAidaCheckAccessPreconditions(Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n\n      Host.AidaClient.HostConfigTracker.instance().dispatchEventToListeners(\n          Host.AidaClient.Events.AIDA_AVAILABILITY_CHANGED);\n\n      assert.strictEqual((await view.nextInput).state, AiAssistancePanel.State.EXPLORE_VIEW);\n      assert.strictEqual(view.input.aidaAvailability, Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    });\n  });\n\n  describe('rating', () => {\n    it('should allow logging if configured', async () => {\n      updateHostConfig({\n        aidaAvailability: {\n          disallowLogging: false,\n        },\n      });\n      const {aidaClient, view} = await createAiAssistancePanel();\n\n      const aidaClientCall = expectCall(aidaClient.registerClientEvent as sinon.SinonStub);\n      view.input.onFeedbackSubmit(0, Host.AidaClient.Rating.POSITIVE);\n\n      const [aidaClientEvent] = await aidaClientCall;\n      assert.isFalse(aidaClientEvent.disable_user_content_logging);\n    });\n\n    it('should send POSITIVE rating to aida client when the user clicks on positive rating', async () => {\n      updateHostConfig({\n        aidaAvailability: {\n          enabled: true,\n          disallowLogging: true,\n        }\n      });\n      const RPC_ID = 999;\n      const {aidaClient, view} = await createAiAssistancePanel();\n\n      const aidaClientCall = expectCall(aidaClient.registerClientEvent as sinon.SinonStub);\n      view.input.onFeedbackSubmit(RPC_ID, Host.AidaClient.Rating.POSITIVE);\n      const [aidaClientEvent] = await aidaClientCall;\n\n      assert.deepEqual(aidaClientEvent, {\n        corresponding_aida_rpc_global_id: RPC_ID,\n        do_conversation_client_event: {\n          user_feedback: {\n            sentiment: 'POSITIVE',\n            user_input: {\n              comment: undefined,\n            }\n          },\n        },\n        disable_user_content_logging: true,\n      });\n    });\n\n    it('should send NEGATIVE rating to aida client when the user clicks on negative rating', async () => {\n      updateHostConfig({\n        aidaAvailability: {\n          enabled: true,\n          disallowLogging: true,\n        }\n      });\n      const RPC_ID = 999;\n      const {aidaClient, view} = await createAiAssistancePanel();\n\n      const aidaClientCall = expectCall(aidaClient.registerClientEvent as sinon.SinonStub);\n      view.input.onFeedbackSubmit(RPC_ID, Host.AidaClient.Rating.NEGATIVE);\n      const [aidaClientEvent] = await aidaClientCall;\n\n      assert.deepEqual(aidaClientEvent, {\n        corresponding_aida_rpc_global_id: RPC_ID,\n        do_conversation_client_event: {\n          user_feedback: {\n            sentiment: 'NEGATIVE',\n            user_input: {\n              comment: undefined,\n            }\n          },\n        },\n        disable_user_content_logging: true,\n      });\n    });\n\n    it('should send feedback text with data', async () => {\n      updateHostConfig({\n        aidaAvailability: {\n          enabled: true,\n          disallowLogging: true,\n        }\n      });\n      const feedback = 'This helped me a ton.';\n      const RPC_ID = 999;\n      const {aidaClient, view} = await createAiAssistancePanel();\n      const aidaClientCall = expectCall(aidaClient.registerClientEvent as sinon.SinonStub);\n      view.input.onFeedbackSubmit(RPC_ID, Host.AidaClient.Rating.POSITIVE, feedback);\n      const [aidaClientEvent] = await aidaClientCall;\n      assert.deepEqual(aidaClientEvent, {\n        corresponding_aida_rpc_global_id: RPC_ID,\n        do_conversation_client_event: {\n          user_feedback: {\n            sentiment: 'POSITIVE',\n            user_input: {\n              comment: feedback,\n            }\n          },\n        },\n        disable_user_content_logging: true,\n      });\n    });\n  });\n\n  describe('contexts', () => {\n    const tests = [\n      {\n        flavor: SDK.DOMModel.DOMNode,\n        createContext: () => {\n          const node = sinon.createStubInstance(SDK.DOMModel.DOMNode, {\n            nodeType: Node.ELEMENT_NODE,\n          });\n          sinon.stub(AiAssistanceModel.NodeContext.prototype, 'getSuggestions')\n              .returns(Promise.resolve([{title: 'test suggestion'}]));\n          return new AiAssistanceModel.NodeContext(node);\n        },\n        action: 'freestyler.elements-floating-button',\n      },\n      {\n        flavor: SDK.NetworkRequest.NetworkRequest,\n        createContext: () => {\n          return new AiAssistanceModel.RequestContext(sinon.createStubInstance(SDK.NetworkRequest.NetworkRequest));\n        },\n        action: 'drjones.network-floating-button'\n      },\n      {\n        flavor: TimelineUtils.AIContext.AgentFocus,\n        createContext: () => {\n          return AiAssistanceModel.PerformanceTraceContext.fromCallTree(\n              sinon.createStubInstance(TimelineUtils.AICallTree.AICallTree));\n        },\n        action: 'drjones.performance-panel-context'\n      },\n      {\n        flavor: TimelineUtils.AIContext.AgentFocus,\n        createContext: () => {\n          // @ts-expect-error: don't need any data.\n          const context = AiAssistanceModel.PerformanceTraceContext.fromInsight(null, null, null);\n          sinon.stub(AiAssistanceModel.PerformanceTraceContext.prototype, 'getSuggestions')\n              .returns(Promise.resolve([{title: 'test suggestion'}]));\n          return context;\n        },\n        action: 'drjones.performance-insight-context'\n      },\n      {\n        flavor: Workspace.UISourceCode.UISourceCode,\n        createContext: () => {\n          return new AiAssistanceModel.FileContext(sinon.createStubInstance(Workspace.UISourceCode.UISourceCode));\n        },\n        action: 'drjones.sources-panel-context',\n      }\n    ];\n\n    for (const test of tests) {\n      it(`should use the selected ${test.flavor.name} context after the widget is shown`, async () => {\n        const {panel, view} = await createAiAssistancePanel();\n        const context = test.createContext();\n        const contextItem = context.getItem();\n        if (!contextItem) {\n          throw new Error('Context is not available');\n        }\n        UI.Context.Context.instance().setFlavor(test.flavor, contextItem);\n        panel.handleAction(test.action);\n        expect((await view.nextInput).selectedContext?.getItem()).equals(contextItem);\n      });\n\n      it(`should update the selected ${test.flavor.name} context whenever flavor changes`, async () => {\n        const {panel, view} = await createAiAssistancePanel();\n        panel.handleAction(test.action);\n        assert.isNull((await view.nextInput).selectedContext);\n        const context = test.createContext();\n        const contextItem = context.getItem();\n        if (!contextItem) {\n          throw new Error('Context is not available');\n        }\n        UI.Context.Context.instance().setFlavor(test.flavor, contextItem);\n        UI.Context.Context.instance().setFlavor(test.flavor, contextItem);\n        expect((await view.nextInput).selectedContext?.getItem()).equals(contextItem);\n      });\n\n      it(`should ignore ${test.flavor.name} flavor change after the panel was hidden`, async () => {\n        const {view, panel} = await createAiAssistancePanel();\n        assert.isNull(view.input.selectedContext);\n        const callCount = view.callCount;\n        panel.hideWidget();\n        const context = test.createContext();\n        const contextItem = context.getItem();\n        if (!contextItem) {\n          throw new Error('Context is not available');\n        }\n        UI.Context.Context.instance().setFlavor(test.flavor, contextItem);\n        sinon.assert.callCount(view, callCount);\n      });\n    }\n\n    it('should set selected context to null when the change DOMNode flavor is not an ELEMENT_NODE', async () => {\n      const {panel, view} = await createAiAssistancePanel();\n      panel.handleAction('freestyler.elements-floating-button');\n      assert.isNull((await view.nextInput).selectedContext);\n\n      const node = sinon.createStubInstance(SDK.DOMModel.DOMNode, {\n        nodeType: Node.COMMENT_NODE,\n      });\n      UI.Context.Context.instance().setFlavor(SDK.DOMModel.DOMNode, node);\n      assert.isNull((await view.nextInput).selectedContext);\n    });\n\n    it('should clear the text input when the context changes to null', async () => {\n      const chatView = sinon.createStubInstance(AiAssistancePanel.ChatView);\n      const {panel, view} = await createAiAssistancePanel({chatView});\n\n      // Firstly, start a conversation and set a context\n      const context = AiAssistanceModel.PerformanceTraceContext.fromCallTree(\n          sinon.createStubInstance(TimelineUtils.AICallTree.AICallTree));\n      UI.Context.Context.instance().setFlavor(TimelineUtils.AIContext.AgentFocus, context.getItem());\n      panel.handleAction('drjones.performance-panel-context');\n      await view.nextInput;\n\n      // Now clear the context and check we cleared out the text\n      UI.Context.Context.instance().setFlavor(TimelineUtils.AIContext.AgentFocus, null);\n      sinon.assert.callCount(chatView.clearTextInput, 1);\n    });\n  });\n\n  describe('toggle search element action', () => {\n    let toggleSearchElementAction: UI.ActionRegistration.Action;\n    beforeEach(() => {\n      toggleSearchElementAction =\n          UI.ActionRegistry.ActionRegistry.instance().getAction('elements.toggle-element-search');\n      toggleSearchElementAction.setToggled(false);\n    });\n\n    it('should set inspectElementToggled when the widget is shown', async () => {\n      const {view} = await createAiAssistancePanel();\n      toggleSearchElementAction.setToggled(true);\n      assert.isTrue((await view.nextInput).inspectElementToggled);\n    });\n\n    it('should update inspectElementToggled when the action is toggled', async () => {\n      const {view} = await createAiAssistancePanel();\n      assert.isFalse(view.input.inspectElementToggled);\n\n      toggleSearchElementAction.setToggled(true);\n      assert.isTrue((await view.nextInput).inspectElementToggled);\n    });\n\n    it('should not update toggleSearchElementAction when the widget is not shown', async () => {\n      toggleSearchElementAction.setToggled(false);\n\n      const {view, panel} = await createAiAssistancePanel();\n      const callCount = view.callCount;\n      panel.hideWidget();\n\n      toggleSearchElementAction.setToggled(true);\n\n      const uiSourceCode = sinon.createStubInstance(Workspace.UISourceCode.UISourceCode);\n      UI.Context.Context.instance().setFlavor(Workspace.UISourceCode.UISourceCode, uiSourceCode);\n\n      sinon.assert.callCount(view, callCount);\n    });\n  });\n\n  describe('toolbar actions', () => {\n    it('should show chrome-ai view on settings click', async () => {\n      const stub = sinon.stub(UI.ViewManager.ViewManager.instance(), 'showView');\n      const {view} = await createAiAssistancePanel();\n      view.input.onSettingsClick();\n      sinon.assert.calledWith(stub, 'chrome-ai');\n    });\n\n    it('should not show chat and delete history actions when ai assistance enabled setting is disabled', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').setDisabled(true);\n\n      const {view} = await createAiAssistancePanel();\n\n      assert.isFalse(view.input.showChatActions);\n      assert.isFalse(view.input.showDeleteHistoryAction);\n    });\n\n    it('should not show chat and delete history actions when ai assistance setting is marked as false', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(false);\n\n      const {view} = await createAiAssistancePanel();\n\n      assert.isFalse(view.input.showChatActions);\n      assert.isFalse(view.input.showDeleteHistoryAction);\n    });\n\n    it('should not show chat and delete history actions when the user is blocked by age', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      updateHostConfig({\n        aidaAvailability: {\n          blockedByAge: true,\n        },\n      });\n\n      const {view} = await createAiAssistancePanel();\n\n      assert.isFalse(view.input.showChatActions);\n      assert.isFalse(view.input.showDeleteHistoryAction);\n    });\n\n    it('should not show chat and delete history actions when Aida availability status is SYNC IS PAUSED', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n\n      const {view} =\n          await createAiAssistancePanel({aidaAvailability: Host.AidaClient.AidaAccessPreconditions.SYNC_IS_PAUSED});\n\n      assert.isFalse(view.input.showChatActions);\n      assert.isFalse(view.input.showDeleteHistoryAction);\n    });\n  });\n\n  describe('history interactions', () => {\n    it('should have empty messages after new chat', async () => {\n      const {panel, view} = await createAiAssistancePanel({aidaClient: mockAidaClient([[{explanation: 'test'}]])});\n\n      panel.handleAction('freestyler.elements-floating-button');\n      (await view.nextInput).onTextSubmit('test');\n\n      assert.deepEqual((await view.nextInput).messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      view.input.onNewChatClick();\n\n      assert.deepEqual((await view.nextInput).messages, []);\n    });\n\n    it('should select default agent after new chat', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n      const {panel, view} = await createAiAssistancePanel({aidaClient: mockAidaClient([[{explanation: 'test'}]])});\n\n      panel.handleAction('freestyler.elements-floating-button');\n      await view.nextInput;\n\n      viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'elements');\n\n      view.input.onTextSubmit('test');\n\n      assert.deepEqual((await view.nextInput).messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n      view.input.onNewChatClick();\n\n      assert.deepEqual((await view.nextInput).messages, []);\n      assert.deepEqual(view.input.conversationType, AiAssistanceModel.ConversationType.STYLING);\n    });\n\n    it('should select the performance insights agent if it is enabled and the user has expanded an insight',\n       async () => {\n         updateHostConfig({\n           devToolsAiAssistancePerformanceAgent: {\n             enabled: true,\n             insightsEnabled: true,\n           },\n         });\n         const {panel, view} = await createAiAssistancePanel({aidaClient: mockAidaClient([[{explanation: 'test'}]])});\n\n         panel.handleAction('freestyler.elements-floating-button');\n\n         (await view.nextInput).onTextSubmit('test');\n         await view.nextInput;\n\n         viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'timeline');\n         UI.Context.Context.instance().setFlavor(\n             Timeline.TimelinePanel.TimelinePanel, sinon.createStubInstance(Timeline.TimelinePanel.TimelinePanel));\n\n         UI.Context.Context.instance().setFlavor(\n             Timeline.TimelinePanel.SelectedInsight,\n             new Timeline.TimelinePanel.SelectedInsight({} as unknown as TimelineComponents.Sidebar.ActiveInsight));\n\n         assert.deepEqual(view.input.messages, [\n           {\n             entity: AiAssistancePanel.ChatMessageEntity.USER,\n             text: 'test',\n             imageInput: undefined,\n           },\n           {\n             answer: 'test',\n             entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n             rpcId: undefined,\n             suggestions: undefined,\n             steps: [],\n           },\n         ]);\n         view.input.onNewChatClick();\n\n         assert.deepEqual((await view.nextInput).messages, []);\n         assert.deepEqual(view.input.conversationType, AiAssistanceModel.ConversationType.PERFORMANCE_INSIGHT);\n       });\n\n    it('should select the Dr Jones performance agent if insights are not enabled', async () => {\n      updateHostConfig({\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: true,\n          insightsEnabled: false,\n        },\n      });\n      const {panel, view} = await createAiAssistancePanel({aidaClient: mockAidaClient([[{explanation: 'test'}]])});\n\n      panel.handleAction('freestyler.elements-floating-button');\n      (await view.nextInput).onTextSubmit('test');\n      await view.nextInput;\n\n      viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'timeline');\n      UI.Context.Context.instance().setFlavor(\n          Timeline.TimelinePanel.TimelinePanel, sinon.createStubInstance(Timeline.TimelinePanel.TimelinePanel));\n\n      assert.deepEqual(view.input.messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n      view.input.onNewChatClick();\n\n      assert.deepEqual((await view.nextInput).messages, []);\n      assert.deepEqual(view.input.conversationType, AiAssistanceModel.ConversationType.PERFORMANCE);\n    });\n\n    it('should switch agents and restore history', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n          multimodal: true,\n        },\n      });\n      const {panel, view} = await createAiAssistancePanel(\n          {aidaClient: mockAidaClient([[{explanation: 'test'}], [{explanation: 'test2'}]])});\n      panel.handleAction('freestyler.elements-floating-button');\n      const imageInput = {inlineData: {data: 'imageinputbytes', mimeType: 'image/jpeg'}};\n      (await view.nextInput)\n          .onTextSubmit('User question to Freestyler?', imageInput, AiAssistanceModel.MultimodalInputType.SCREENSHOT);\n      assert.deepEqual((await view.nextInput).messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'User question to Freestyler?',\n          imageInput,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      panel.handleAction('drjones.network-floating-button');\n      (await view.nextInput).onTextSubmit('User question to DrJones?');\n      assert.deepEqual((await view.nextInput).messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'User question to DrJones?',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test2',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      const {contextMenu, id} = openHistoryContextMenu(view.input, 'User question to Freestyler?');\n      assert.isDefined(id);\n      contextMenu.invokeHandler(id);\n      assert.isTrue((await view.nextInput).isReadOnly);\n      assert.deepEqual(view.input.messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'User question to Freestyler?',\n          imageInput,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n    });\n\n    it('runs action-triggered prompts', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n\n      const {panel, view} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient(\n            [\n              [{explanation: 'test'}],\n            ],\n            ),\n      });\n\n      panel.handleAction('freestyler.element-panel-context', {prompt: 'Tell me more'});\n      assert.deepEqual((await view.nextInput).messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'Tell me more',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n    });\n\n    it('should not save partial responses to conversation history', async () => {\n\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n      const addHistoryItemStub = sinon.stub(AiAssistanceModel.Conversation.prototype, 'addHistoryItem');\n      viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'elements');\n      const {view} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient([[\n          {explanation: 'ANSWER: partially started'}, {explanation: 'ANSWER: partially started and now it\\'s finished'}\n        ]])\n      });\n      // Trigger running the conversation (observe that there are two answers: one partial, one complete)\n      view.input.onTextSubmit('User question to Freestyler?');\n      await view.nextInput;\n\n      sinon.assert.calledWith(\n          addHistoryItemStub, sinon.match({type: 'answer', text: 'partially started and now it\\'s finished'}));\n      sinon.assert.neverCalledWith(addHistoryItemStub, sinon.match({type: 'answer', text: 'partially started'}));\n    });\n\n    it('should switch agents and restore history and allow a single delete', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n      const aiHistoryStorage = AiAssistanceModel.AiHistoryStorage.instance({forceNew: true});\n      const deleteHistoryEntrySpy = sinon.spy(aiHistoryStorage, 'deleteHistoryEntry');\n      const {panel, view} = await createAiAssistancePanel(\n          {\n            aidaClient: mockAidaClient(\n                [\n                  [{explanation: 'test'}],\n                  [{explanation: 'test2'}],\n                ],\n                ),\n          },\n      );\n      panel.handleAction('freestyler.elements-floating-button');\n      (await view.nextInput).onTextSubmit('User question to Freestyler?');\n      await view.nextInput;\n\n      panel.handleAction('drjones.network-floating-button');\n      (await view.nextInput).onTextSubmit('User question to DrJones?');\n\n      const {contextMenu, id} = openHistoryContextMenu((await view.nextInput), 'User question to Freestyler?');\n      assert.isDefined(id);\n      contextMenu.invokeHandler(id);\n      await view.nextInput;\n\n      view.input.onDeleteClick();\n\n      assert.deepEqual((await view.nextInput).messages, []);\n      sinon.assert.callCount(deleteHistoryEntrySpy, 1);\n      assert.isString(deleteHistoryEntrySpy.lastCall.args[0]);\n\n      const menuAfterDelete = openHistoryContextMenu(view.input, 'User question to Freestyler?');\n      assert.isUndefined(menuAfterDelete.id);\n    });\n\n    it('should clear the list of previous conversations when all history is deleted', async () => {\n      const {panel, view} = await createAiAssistancePanel({aidaClient: mockAidaClient([[{explanation: 'test'}]])});\n      panel.handleAction('freestyler.elements-floating-button');\n      (await view.nextInput).onTextSubmit('test');\n      await view.nextInput;\n\n      let {contextMenu} = openHistoryContextMenu(view.input, 'test');\n      assert.isDefined(findMenuItemWithLabel(contextMenu.defaultSection(), 'test'));\n      contextMenu.discard();\n\n      await AiAssistanceModel.AiHistoryStorage.instance().deleteAll();\n\n      const newViewInput = await view.nextInput;\n      ({contextMenu} = openHistoryContextMenu(newViewInput, 'test'));\n\n      const defaultSectionItems = contextMenu.defaultSection().items;\n      assert.lengthOf(defaultSectionItems, 1, 'Default section should have one item');\n\n      const placeholderItem = defaultSectionItems[0];\n      assert.strictEqual(placeholderItem.buildDescriptor().label, 'No past conversations');\n      assert.isFalse(placeholderItem.isEnabled(), 'Placeholder item should be disabled');\n    });\n  });\n\n  describe('empty state', () => {\n    it('should have empty state after clear chat', async () => {\n      const {panel, view} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient([[{explanation: 'test'}]]),\n      });\n\n      panel.handleAction('freestyler.elements-floating-button');\n      (await view.nextInput).onTextSubmit('test');\n      assert.deepEqual((await view.nextInput).messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      view.input.onDeleteClick();\n      assert.deepEqual((await view.nextInput).messages, []);\n      assert.isUndefined(view.input.conversationType);\n    });\n\n    it('should select default agent based on open panel after clearing the chat', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n      viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'elements');\n      const {panel, view} = await createAiAssistancePanel({aidaClient: mockAidaClient([[{explanation: 'test'}]])});\n      panel.handleAction('freestyler.elements-floating-button');\n      (await view.nextInput).onTextSubmit('test');\n      assert.deepEqual((await view.nextInput).messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n      view.input.onDeleteClick();\n      assert.deepEqual((await view.nextInput).messages, []);\n      assert.deepEqual(view.input.conversationType, AiAssistanceModel.ConversationType.STYLING);\n    });\n\n    it('should have empty state after clear chat history', async () => {\n      const {panel, view} = await createAiAssistancePanel(\n          {aidaClient: mockAidaClient([[{explanation: 'test'}], [{explanation: 'test2'}]])});\n\n      panel.handleAction('freestyler.elements-floating-button');\n      (await view.nextInput).onTextSubmit('User question to Freestyler?');\n      assert.deepEqual((await view.nextInput).messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'User question to Freestyler?',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      panel.handleAction('drjones.network-floating-button');\n      (await view.nextInput).onTextSubmit('User question to DrJones?');\n      assert.deepEqual((await view.nextInput).messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'User question to DrJones?',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test2',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      let {contextMenu} = openHistoryContextMenu(view.input, 'User question to Freestyler?');\n      const clearAll = findMenuItemWithLabel(contextMenu.footerSection(), 'Clear local chats')!;\n      assert.isDefined(clearAll);\n      contextMenu.invokeHandler(clearAll.id());\n      assert.deepEqual((await view.nextInput).messages, []);\n      assert.isUndefined(view.input.conversationType);\n      contextMenu.discard();\n\n      contextMenu = openHistoryContextMenu(view.input, 'User question to Freestyler?').contextMenu;\n      const menuItem = findMenuItemWithLabel(contextMenu.defaultSection(), 'No past conversations');\n      assert(menuItem);\n    });\n  });\n\n  describe('cross-origin', () => {\n    beforeEach(async () => {\n      createTarget();\n      await createNetworkPanelForMockConnection();\n    });\n\n    afterEach(async () => {\n      Network.NetworkPanel.NetworkPanel.instance().detach();\n    });\n\n    it('blocks input on cross origin requests', async () => {\n      const networkRequest = createNetworkRequest({\n        url: urlString`https://a.test`,\n      });\n      UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest);\n\n      const {panel, view} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient([\n          [{explanation: 'test'}],\n        ])\n      });\n      panel.handleAction('drjones.network-floating-button');\n\n      assert.isFalse((await view.nextInput).blockedByCrossOrigin);\n      assert.strictEqual(view.input.selectedContext?.getItem(), networkRequest);\n\n      // Send a query for https://a.test.\n      panel.handleAction('drjones.network-floating-button');\n      view.input.onTextSubmit('test');\n      await view.nextInput;\n\n      // Change context to https://b.test.\n      const networkRequest2 = createNetworkRequest({\n        url: urlString`https://b.test`,\n      });\n      UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest2);\n\n      panel.handleAction('drjones.network-floating-button');\n\n      assert.isTrue((await view.nextInput).blockedByCrossOrigin);\n      assert.strictEqual(view.input.selectedContext?.getItem(), networkRequest2);\n    });\n\n    it('should be able to continue same-origin requests', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n\n      const {panel, view} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient([[{explanation: 'test'}], [{explanation: 'test2'}]]),\n      });\n      viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'elements');\n\n      panel.handleAction('freestyler.elements-floating-button');\n      view.input.onTextSubmit('test');\n\n      assert.deepEqual((await view.nextInput).messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'elements');\n\n      panel.handleAction('freestyler.elements-floating-button');\n      view.input.onTextSubmit('test2');\n\n      assert.isFalse((await view.nextInput).isReadOnly);\n      assert.deepEqual(view.input.messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'test2',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test2',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n    });\n\n    it('blocks input on cross origin request, when the selected context is changed while the panel was hidden',\n       async () => {\n         const networkRequest = createNetworkRequest({\n           url: urlString`https://a.test`,\n         });\n         UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest);\n\n         const {panel, view} = await createAiAssistancePanel({\n           aidaClient: mockAidaClient([\n             [{explanation: 'test'}],\n           ])\n         });\n         panel.handleAction('drjones.network-floating-button');\n\n         assert.isFalse((await view.nextInput).blockedByCrossOrigin);\n         assert.strictEqual(view.input.selectedContext?.getItem(), networkRequest);\n\n         // Send a query for https://a.test.\n         panel.handleAction('drjones.network-floating-button');\n         view.input.onTextSubmit('test');\n         await view.nextInput;\n\n         // Hide the panel\n         panel.hideWidget();\n\n         // Change context to https://b.test.\n         const networkRequest2 = createNetworkRequest({\n           url: urlString`https://b.test`,\n         });\n         UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest2);\n\n         // Show the widget again\n         panel.showWidget();\n\n         assert.isTrue((await view.nextInput).blockedByCrossOrigin);\n         assert.strictEqual(view.input.selectedContext?.getItem(), networkRequest2);\n       });\n\n    it('starts a new chat when a predefined prompt for a cross origin request is sent', async () => {\n      const networkRequest = createNetworkRequest({\n        url: urlString`https://a.test`,\n      });\n      UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest);\n\n      const {panel, view} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient([\n          [{explanation: 'test'}],\n        ])\n      });\n      panel.handleAction('drjones.network-floating-button', {prompt: 'Tell me more'});\n      assert.isFalse((await view.nextInput).blockedByCrossOrigin);\n\n      // Change context to https://b.test.\n      const networkRequest2 = createNetworkRequest({\n        url: urlString`https://b.test`,\n      });\n      UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest2);\n\n      // A predefined prompt from the user on a different origin has been initiated.\n      // This should automatically start a new chat, to allow for the prompt to be executed.\n      panel.handleAction('drjones.network-floating-button', {prompt: 'Tell me more about another one'});\n      const input = await view.nextInput;\n      assert.isFalse(input.blockedByCrossOrigin);\n    });\n  });\n\n  describe('auto agent selection for panels', () => {\n    const tests: Array<{\n      panelName: string,\n      expectedConversationType: AiAssistanceModel.ConversationType,\n      featureFlagName: string,\n    }> =\n        [\n          {\n            panelName: 'elements',\n            expectedConversationType: AiAssistanceModel.ConversationType.STYLING,\n            featureFlagName: 'devToolsFreestyler',\n          },\n          {\n            panelName: 'network',\n            expectedConversationType: AiAssistanceModel.ConversationType.NETWORK,\n            featureFlagName: 'devToolsAiAssistanceNetworkAgent',\n          },\n          {\n            panelName: 'sources',\n            expectedConversationType: AiAssistanceModel.ConversationType.FILE,\n            featureFlagName: 'devToolsAiAssistanceFileAgent',\n          },\n          {\n            panelName: 'timeline',\n            expectedConversationType: AiAssistanceModel.ConversationType.PERFORMANCE,\n            featureFlagName: 'devToolsAiAssistancePerformanceAgent',\n          }\n        ];\n\n    for (const test of tests) {\n      it(`should select ${test.expectedConversationType} conversation when the panel ${test.panelName} is opened`,\n          async () => {\n            updateHostConfig({\n              [test.featureFlagName]: {\n                enabled: true,\n              },\n            });\n            viewManagerIsViewVisibleStub.callsFake(viewName => viewName === test.panelName);\n\n            const {view} = await createAiAssistancePanel({\n              aidaClient: mockAidaClient([[{explanation: 'test'}]]),\n            });\n\n            assert.strictEqual(view.input.conversationType, test.expectedConversationType);\n          });\n\n      it(`should reset the conversation when ${test.panelName} is closed and no other panels are open`, async () => {\n        updateHostConfig({\n          [test.featureFlagName]: {\n            enabled: true,\n          },\n        });\n\n        viewManagerIsViewVisibleStub.callsFake(viewName => viewName === test.panelName);\n\n        const {view} = await createAiAssistancePanel();\n\n        assert.strictEqual(view.input.conversationType, test.expectedConversationType);\n\n        viewManagerIsViewVisibleStub.returns(false);\n        UI.ViewManager.ViewManager.instance().dispatchEventToListeners(UI.ViewManager.Events.VIEW_VISIBILITY_CHANGED, {\n          location: 'testLocation',\n          revealedViewId: undefined,\n          hiddenViewId: test.panelName,\n        });\n        assert.isUndefined((await view.nextInput).conversationType);\n      });\n\n      it(`should render no conversation state if the ${test.panelName} panel is changed and the feature is not enabled`,\n          async () => {\n            updateHostConfig({\n              [test.featureFlagName]: {\n                enabled: false,\n              },\n            });\n            viewManagerIsViewVisibleStub.callsFake(viewName => viewName === test.panelName);\n            const {view} = await createAiAssistancePanel();\n\n            assert.isUndefined(view.input.conversationType);\n          });\n    }\n\n    describe('Performance Insight agent', () => {\n      it('should select the PERFORMANCE_INSIGHT agent when the performance panel is open and insights are enabled and an insight is expanded',\n         async () => {\n           updateHostConfig({\n             devToolsAiAssistancePerformanceAgent: {\n               enabled: true,\n               insightsEnabled: true,\n             },\n           });\n           viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'timeline');\n           UI.Context.Context.instance().setFlavor(\n               Timeline.TimelinePanel.TimelinePanel, sinon.createStubInstance(Timeline.TimelinePanel.TimelinePanel));\n           UI.Context.Context.instance().setFlavor(\n               Timeline.TimelinePanel.SelectedInsight,\n               new Timeline.TimelinePanel.SelectedInsight({} as unknown as TimelineComponents.Sidebar.ActiveInsight));\n           const {view} = await createAiAssistancePanel();\n\n           assert.strictEqual(view.input.conversationType, AiAssistanceModel.ConversationType.PERFORMANCE_INSIGHT);\n         });\n\n      it('should select the PERFORMANCE agent when the performance panel is open and insights are enabled but the user has not selected an insight',\n         async () => {\n           updateHostConfig({\n             devToolsAiAssistancePerformanceAgent: {\n               enabled: true,\n               insightsEnabled: true,\n             },\n           });\n           viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'timeline');\n           UI.Context.Context.instance().setFlavor(\n               Timeline.TimelinePanel.TimelinePanel, sinon.createStubInstance(Timeline.TimelinePanel.TimelinePanel));\n           UI.Context.Context.instance().setFlavor(Timeline.TimelinePanel.SelectedInsight, null);\n\n           const {view} = await createAiAssistancePanel();\n           assert.strictEqual(view.input.conversationType, AiAssistanceModel.ConversationType.PERFORMANCE);\n         });\n    });\n  });\n\n  it('erases previous partial response on blocked error', async () => {\n    const {panel, view} = await createAiAssistancePanel({\n      aidaClient: mockAidaClient([[{\n        explanation: 'This is the first part of the answer.',\n        metadata: {attributionMetadata: {attributionAction: Host.AidaClient.RecitationAction.BLOCK, citations: []}}\n      }]]),\n    });\n    panel.handleAction('freestyler.elements-floating-button');\n    view.input.onTextSubmit('test');\n\n    assert.deepEqual((await view.nextInput).messages, [\n      {\n        entity: AiAssistancePanel.ChatMessageEntity.USER,\n        text: 'test',\n        imageInput: undefined,\n      },\n      {\n        answer: undefined,\n        entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n        rpcId: undefined,\n        error: AiAssistanceModel.ErrorType.BLOCK,\n        steps: [],\n      },\n    ]);\n  });\n\n  describe('chat input', () => {\n    describe('disabled state', () => {\n      it('should be disabled when ai assistance enabled setting is disabled and show followTheSteps placeholder',\n         async () => {\n           Common.Settings.moduleSetting('ai-assistance-enabled').setDisabled(true);\n\n           const {view} = await createAiAssistancePanel();\n\n           assert.isTrue(view.input.isTextInputDisabled);\n           assert.strictEqual(view.input.inputPlaceholder, 'Follow the steps above to ask a question');\n           assert.strictEqual(\n               view.input.disclaimerText, 'This is an experimental AI feature and won\\'t always get it right.');\n         });\n\n      it('should be disabled when ai assistance setting is marked as false and show followTheSteps placeholder',\n         async () => {\n           Common.Settings.moduleSetting('ai-assistance-enabled').set(false);\n\n           const {view} = await createAiAssistancePanel();\n\n           assert.isTrue(view.input.isTextInputDisabled);\n           assert.strictEqual(view.input.inputPlaceholder, 'Follow the steps above to ask a question');\n           assert.strictEqual(\n               view.input.disclaimerText, 'This is an experimental AI feature and won\\'t always get it right.');\n         });\n\n      it('should be disabled when the user is blocked by age and show followTheSteps placeholder', async () => {\n        Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n        updateHostConfig({\n          aidaAvailability: {\n            blockedByAge: true,\n          },\n        });\n\n        const {view} = await createAiAssistancePanel();\n\n        assert.isTrue(view.input.isTextInputDisabled);\n        assert.strictEqual(view.input.inputPlaceholder, 'Follow the steps above to ask a question');\n        assert.strictEqual(\n            view.input.disclaimerText, 'This is an experimental AI feature and won\\'t always get it right.');\n      });\n\n      it('should be disabled when Aida availability status is not AVAILABLE', async () => {\n        Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n        const {view} =\n            await createAiAssistancePanel({aidaAvailability: Host.AidaClient.AidaAccessPreconditions.NO_INTERNET});\n\n        assert.isTrue(view.input.isTextInputDisabled);\n      });\n\n      it('should be disabled when the next message is blocked by cross origin and show crossOriginError placeholder',\n         async () => {\n           Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n           const networkRequest = createNetworkRequest({\n             url: urlString`https://a.test`,\n           });\n           UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest);\n\n           const {panel, view} = await createAiAssistancePanel({\n             aidaClient: mockAidaClient([\n               [{explanation: 'test'}],\n             ]),\n           });\n           panel.handleAction('drjones.network-floating-button');\n\n           assert.isFalse((await view.nextInput).blockedByCrossOrigin);\n           assert.strictEqual(view.input.selectedContext?.getItem(), networkRequest);\n\n           // Send a query for https://a.test.\n           panel.handleAction('drjones.network-floating-button');\n           view.input.onTextSubmit('test');\n           await view.nextInput;\n\n           // Change context to https://b.test.\n           const networkRequest2 = createNetworkRequest({\n             url: urlString`https://b.test`,\n           });\n           UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest2);\n\n           panel.handleAction('drjones.network-floating-button');\n\n           assert.isTrue((await view.nextInput).blockedByCrossOrigin);\n           assert.isTrue(view.input.isTextInputDisabled);\n           assert.strictEqual(view.input.inputPlaceholder, 'To talk about data from another origin, start a new chat');\n         });\n\n      it('should be disabled when there is no selected context and show inputPlaceholderForStylingNoContext',\n         async () => {\n           updateHostConfig({\n             devToolsFreestyler: {\n               enabled: true,\n             },\n           });\n           Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n           const {panel, view} =\n               await createAiAssistancePanel({aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE});\n           panel.handleAction('freestyler.elements-floating-button');\n\n           assert.isNull((await view.nextInput).selectedContext);\n           assert.isTrue(view.input.isTextInputDisabled);\n           assert.strictEqual(view.input.inputPlaceholder, 'Select an element to ask a question');\n         });\n\n      it('shows the right placeholder for the performance agent when the user has no trace', async () => {\n        updateHostConfig({\n          devToolsAiAssistancePerformanceAgent: {\n            enabled: true,\n          },\n        });\n        viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'timeline');\n        UI.Context.Context.instance().setFlavor(\n            Timeline.TimelinePanel.TimelinePanel, sinon.createStubInstance(Timeline.TimelinePanel.TimelinePanel));\n        Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n        const {panel, view} =\n            await createAiAssistancePanel({aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE});\n        panel.handleAction('drjones.performance-panel-context');\n\n        assert.isNull((await view.nextInput).selectedContext);\n        assert.isTrue(view.input.isTextInputDisabled);\n        assert.strictEqual(\n            view.input.inputPlaceholder, 'Record a performance trace and select an item to ask a question');\n      });\n\n      it('shows the right placeholder for the performance agent when the user has a trace but no selected item',\n         async () => {\n           updateHostConfig({\n             devToolsAiAssistancePerformanceAgent: {\n               enabled: true,\n             },\n           });\n\n           const timelinePanel = sinon.createStubInstance(Timeline.TimelinePanel.TimelinePanel);\n           timelinePanel.hasActiveTrace.callsFake(() => true);\n           viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'timeline');\n           UI.Context.Context.instance().setFlavor(Timeline.TimelinePanel.TimelinePanel, timelinePanel);\n           Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n           const {panel, view} =\n               await createAiAssistancePanel({aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE});\n           panel.handleAction('drjones.performance-panel-context');\n\n           assert.isNull((await view.nextInput).selectedContext);\n           assert.isTrue(view.input.isTextInputDisabled);\n           assert.strictEqual(view.input.inputPlaceholder, 'Select an item to ask a question');\n         });\n\n      it('shows the right placeholder for the performance agent when the user has a trace and a selected item',\n         async () => {\n           updateHostConfig({\n             devToolsAiAssistancePerformanceAgent: {\n               enabled: true,\n             },\n           });\n\n           const timelinePanel = sinon.createStubInstance(Timeline.TimelinePanel.TimelinePanel);\n           timelinePanel.hasActiveTrace.callsFake(() => true);\n           viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'timeline');\n           UI.Context.Context.instance().setFlavor(Timeline.TimelinePanel.TimelinePanel, timelinePanel);\n\n           const fakeCallTree = sinon.createStubInstance(TimelineUtils.AICallTree.AICallTree);\n           const focus = TimelineUtils.AIContext.AgentFocus.fromCallTree(fakeCallTree);\n           UI.Context.Context.instance().setFlavor(TimelineUtils.AIContext.AgentFocus, focus);\n\n           Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n           const {panel, view} =\n               await createAiAssistancePanel({aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE});\n           panel.handleAction('drjones.performance-panel-context');\n\n           assert.strictEqual(view.input.inputPlaceholder, 'Ask a question about the selected item and its call tree');\n           assert.isFalse(view.input.isTextInputDisabled);\n         });\n    });\n\n    it('should disable the send button when the input is empty', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n\n      viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'elements');\n      const {panel, view} =\n          await createAiAssistancePanel({aidaAvailability: Host.AidaClient.AidaAccessPreconditions.AVAILABLE});\n\n      panel.handleAction('freestyler.elements-floating-button');\n      assert.isTrue((await view.nextInput).isTextInputEmpty);\n\n      view.input.onTextInputChange('test');\n      assert.isFalse((await view.nextInput).isTextInputEmpty);\n\n      view.input.onTextInputChange('');\n      assert.isTrue((await view.nextInput).isTextInputEmpty);\n\n      view.input.onTextInputChange('test');\n      assert.isFalse((await view.nextInput).isTextInputEmpty);\n\n      view.input.onTextSubmit('test');\n      assert.isTrue((await view.nextInput).isTextInputEmpty);\n    });\n  });\n\n  describe('multimodal input', () => {\n    let target: SDK.Target.Target;\n    beforeEach(() => {\n      target = createTarget();\n    });\n\n    function mockScreenshotModel() {\n      const screenCaptureModel = target.model(SDK.ScreenCaptureModel.ScreenCaptureModel);\n      assert.exists(screenCaptureModel);\n      return {\n        captureScreenshotStub:\n            sinon.stub(screenCaptureModel, 'captureScreenshot').returns(Promise.resolve('imageInput')),\n      };\n    }\n\n    it('multimodal related functions unavailable when multimodal is disabled', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n          multimodal: false,\n        },\n      });\n      viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'elements');\n      const {view} = await createAiAssistancePanel();\n\n      assert.isFalse(view.input.multimodalInputEnabled);\n      assert.isFalse(view.input.uploadImageInputEnabled);\n      assert.notExists(view.input.onTakeScreenshot);\n      assert.notExists(view.input.onRemoveImageInput);\n      assert.notExists(view.input.onLoadImage);\n      assert.notExists(view.input.imageInput);\n    });\n\n    it('upload input function unavailable when multimodalUploadInput is disabled', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n          multimodal: true,\n          multimodalUploadInput: false,\n        },\n      });\n      viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'elements');\n      const {view} = await createAiAssistancePanel();\n\n      assert.isTrue(view.input.multimodalInputEnabled);\n      assert.isFalse(view.input.uploadImageInputEnabled);\n      assert.exists(view.input.onTakeScreenshot);\n      assert.exists(view.input.onRemoveImageInput);\n      assert.notExists(view.input.onLoadImage);\n    });\n\n    it('adds screenshot as an image input and then removes it', async () => {\n      const {captureScreenshotStub} = mockScreenshotModel();\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n          multimodal: true,\n        },\n      });\n      viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'elements');\n      const {view} = await createAiAssistancePanel();\n\n      assert.isTrue(view.input.multimodalInputEnabled);\n\n      view.input.onTakeScreenshot?.();\n\n      assert.deepEqual((await view.nextInput).imageInput, {\n        isLoading: false,\n        data: 'imageInput',\n        mimeType: 'image/jpeg',\n        inputType: AiAssistanceModel.MultimodalInputType.SCREENSHOT\n      });\n      expect(captureScreenshotStub.calledOnce);\n\n      view.input.onRemoveImageInput?.();\n      assert.notExists((await view.nextInput).imageInput);\n    });\n\n    it('uploads an image as an input and then removes it', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n          multimodal: true,\n          multimodalUploadInput: true,\n        },\n      });\n      viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'elements');\n      const {view} = await createAiAssistancePanel();\n      const blob = new Blob(['imageInput'], {type: 'image/jpeg'});\n\n      assert.isTrue(view.input.multimodalInputEnabled);\n      assert.isTrue(view.input.uploadImageInputEnabled);\n\n      await view.input.onLoadImage?.(new File([blob], 'image.jpeg', {type: 'image/jpeg'}));\n\n      assert.deepEqual((await view.nextInput).imageInput, {\n        isLoading: false,\n        data: btoa('imageInput'),\n        mimeType: 'image/jpeg',\n        inputType: AiAssistanceModel.MultimodalInputType.UPLOADED_IMAGE\n      });\n\n      view.input.onRemoveImageInput?.();\n      assert.notExists((await view.nextInput).imageInput);\n    });\n\n    it('sends image as input', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n          multimodal: true,\n        },\n      });\n      viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'elements');\n      const {view} = await createAiAssistancePanel({aidaClient: mockAidaClient([[{explanation: 'test'}]])});\n\n      assert.isTrue(view.input.multimodalInputEnabled);\n\n      view.input.onTextSubmit(\n          'test', {inlineData: {data: 'imageInput', mimeType: 'image/jpeg'}},\n          AiAssistanceModel.MultimodalInputType.SCREENSHOT);\n\n      assert.deepEqual((await view.nextInput).messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: {inlineData: {data: 'imageInput', mimeType: 'image/jpeg'}}\n        },\n        {\n          answer: 'test',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n    });\n\n    it('image input should be removed when primary target changed', async () => {\n      mockScreenshotModel();\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n          multimodal: true,\n        },\n      });\n      viewManagerIsViewVisibleStub.callsFake(viewName => viewName === 'elements');\n      const {view} = await createAiAssistancePanel();\n\n      assert.isUndefined(view.input.imageInput);\n      view.input.onTakeScreenshot?.();\n      assert.exists((await view.nextInput).imageInput);\n\n      const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n      resourceTreeModel?.dispatchEventToListeners(SDK.ResourceTreeModel.Events.PrimaryPageChanged, {\n        frame: sinon.createStubInstance(SDK.ResourceTreeModel.ResourceTreeFrame),\n        type: SDK.ResourceTreeModel.PrimaryPageChangeType.NAVIGATION\n      });\n      assert.isUndefined((await view.nextInput).imageInput);\n    });\n  });\n\n  describe('a11y announcements', () => {\n    let liveAnnouncerStatusStub: sinon.SinonStub;\n    beforeEach(() => {\n      liveAnnouncerStatusStub = sinon.stub(UI.ARIAUtils.LiveAnnouncer, 'status').returns();\n    });\n\n    it('should announce the context title from the agent as status', async () => {\n      const stubbedResponses: AsyncGenerator<AiAssistanceModel.ResponseData> = (async function*() {\n        yield {\n          type: AiAssistanceModel.ResponseType.CONTEXT,\n          title: 'context-title',\n          details: [{title: 'mock', text: 'mock'}]\n        };\n      })();\n      sinon.stub(AiAssistanceModel.StylingAgent.prototype, 'run').returns(stubbedResponses);\n      const {panel, view} = await createAiAssistancePanel();\n\n      panel.handleAction('freestyler.elements-floating-button');\n      (await view.nextInput).onTextSubmit('test');\n      await view.nextInput;\n\n      assert.isTrue(\n          liveAnnouncerStatusStub.calledWith('context-title'),\n          'Expected live announcer status to be called with the context title');\n    });\n\n    it('should announce answer loading when answer starts streaming as status', async () => {\n      const stubbedResponses: AsyncGenerator<AiAssistanceModel.ResponseData> = (async function*() {\n        yield {\n          type: AiAssistanceModel.ResponseType.ANSWER,\n          text: 'streaming ans',\n          complete: false,\n        };\n\n        yield {\n          type: AiAssistanceModel.ResponseType.ANSWER,\n          text: 'streaming answer is not compl',\n          complete: false,\n        };\n      })();\n      sinon.stub(AiAssistanceModel.StylingAgent.prototype, 'run').returns(stubbedResponses);\n      const {panel, view} = await createAiAssistancePanel();\n\n      panel.handleAction('freestyler.elements-floating-button');\n      (await view.nextInput).onTextSubmit('test');\n      await view.nextInput;\n\n      assert.isTrue(liveAnnouncerStatusStub.calledOnce, 'Expected live announcer status to be called only once');\n      assert.isTrue(\n          liveAnnouncerStatusStub.calledWith('Answer loading'),\n          'Expected live announcer status to be called with the text \"Answer loading\"');\n    });\n\n    it('should announce answer ready when answer completes streaming', async () => {\n      const stubbedResponses: AsyncGenerator<AiAssistanceModel.ResponseData> = (async function*() {\n        yield {\n          type: AiAssistanceModel.ResponseType.ANSWER,\n          text: 'streaming answer is not completed before but now it is complete',\n          complete: true,\n        };\n      })();\n      sinon.stub(AiAssistanceModel.StylingAgent.prototype, 'run').returns(stubbedResponses);\n      const {panel, view} = await createAiAssistancePanel();\n\n      panel.handleAction('freestyler.elements-floating-button');\n      (await view.nextInput).onTextSubmit('test');\n      await view.nextInput;\n\n      assert.isTrue(\n          liveAnnouncerStatusStub.calledWith('Answer ready'),\n          'Expected live announcer status to be called with the text \"Answer loading\"');\n    });\n  });\n\n  describe('handleExternalRequest', () => {\n    const explanation = 'I need more information';\n    let performSearchStub: sinon.SinonStub;\n\n    beforeEach(() => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n\n        },\n        devToolsAiAssistanceNetworkAgent: {\n          enabled: true,\n        }\n      });\n\n      const target = createTarget();\n      performSearchStub = sinon.stub(target.domAgent(), 'invoke_performSearch')\n                              .resolves({searchId: 'uniqueId', resultCount: 0, getError: () => undefined});\n    });\n\n    it('returns an explanation for styling assistance requests', async () => {\n      const {panel} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient([[{explanation}]]),\n      });\n      const snackbarShowStub = sinon.stub(Snackbars.Snackbar.Snackbar, 'show');\n      const generator = await panel.handleExternalRequest(\n          {prompt: 'Please help me debug this problem', conversationType: AiAssistanceModel.ConversationType.STYLING});\n      const response = await generator.next();\n      assert.strictEqual(response.value.message, explanation);\n      sinon.assert.calledOnceWithExactly(snackbarShowStub, {message: 'DevTools received an external request'});\n    });\n\n    it('handles styling assistance requests which contain a selector', async () => {\n      const {panel} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient([[{explanation}]]),\n      });\n      const generator = await panel.handleExternalRequest({\n        prompt: 'Please help me debug this problem',\n        conversationType: AiAssistanceModel.ConversationType.STYLING,\n        selector: 'h1'\n      });\n      const response = await generator.next();\n      assert.strictEqual(response.value.message, explanation);\n      sinon.assert.calledOnce(performSearchStub);\n      assert.strictEqual(performSearchStub.getCall(0).args[0].query, 'h1');\n    });\n\n    it('returns an error if no answer could be generated', async () => {\n      const {panel} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient([\n          [{\n            explanation: `ACTION\n$0.style.backgroundColor = 'red'\nSTOP`,\n          }],\n        ])\n      });\n      const generator = await panel.handleExternalRequest(\n          {prompt: 'Please help me debug this problem', conversationType: AiAssistanceModel.ConversationType.STYLING});\n      const response = await generator.next();\n      assert.strictEqual(response.value.type, 'error');\n      assert.strictEqual(response.value.message, 'Something went wrong. No answer was generated.');\n    });\n\n    it('persists external conversations to history', async () => {\n      const {panel, view} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient([[{explanation}]]),\n      });\n      const generator = await panel.handleExternalRequest(\n          {prompt: 'Please help me debug this problem', conversationType: AiAssistanceModel.ConversationType.STYLING});\n      await generator.next();\n      const {contextMenu, id} = openHistoryContextMenu(view.input, '[External] Please help me debug this problem');\n      assert.isDefined(id);\n      contextMenu.invokeHandler(id);\n      assert.isTrue((await view.nextInput).isReadOnly);\n      assert.deepEqual(view.input.messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          imageInput: undefined,\n          text: 'Please help me debug this problem',\n        },\n        {\n          answer: explanation,\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n    });\n\n    it('can switch contexts', async () => {\n      const steps = [\n        {\n          contextDetails: [\n            {\n              text: 'Request URL: https://a.test\\n\\nRequest headers:\\ncontent-type: bar1',\n              title: 'Request',\n            },\n            {\n              text: 'Response Status: 200 \\n\\nResponse headers:\\ncontent-type: bar2\\nx-forwarded-for: bar3',\n              title: 'Response',\n            },\n            {\n              text:\n                  'Queued at (timestamp): 0 μs\\nStarted at (timestamp): 0 μs\\nConnection start (stalled) (duration): -\\nDuration (duration): -',\n              title: 'Timing',\n            },\n            {\n              text: '- URL: https://a.test',\n              title: 'Request initiator chain',\n            },\n          ],\n          isLoading: false,\n          sideEffect: undefined,\n          title: 'Analyzing network data',\n        },\n      ] as AiAssistancePanel.Step[];\n\n      await createNetworkPanelForMockConnection();\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n      const networkRequest = createNetworkRequest({\n        url: urlString`https://a.test`,\n      });\n      UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest);\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      const {panel, view} = await createAiAssistancePanel(\n          {aidaClient: mockAidaClient([[{explanation: 'test'}], [{explanation: 'test2'}], [{explanation: 'test3'}]])});\n\n      panel.handleAction('drjones.network-floating-button');\n      (await view.nextInput).onTextSubmit('User question to DrJones?');\n      assert.deepEqual((await view.nextInput).messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'User question to DrJones?',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps,\n        },\n      ]);\n\n      const generator = await panel.handleExternalRequest(\n          {prompt: 'Please help me debug this problem', conversationType: AiAssistanceModel.ConversationType.STYLING});\n      const response = await generator.next();\n      assert.strictEqual(response.value.message, 'test2');\n\n      view.input.onTextSubmit('Follow-up question to DrJones?');\n      assert.deepEqual((await view.nextInput).messages, [\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'User question to DrJones?',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps,\n        },\n        {\n          entity: AiAssistancePanel.ChatMessageEntity.USER,\n          text: 'Follow-up question to DrJones?',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test3',\n          entity: AiAssistancePanel.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps,\n        },\n      ]);\n    });\n    it('handles performance insight requests with an insight title', async function() {\n      const {panel} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient([[{explanation}]]),\n      });\n\n      // Create a timeline panel that has a trace imported with insights.\n      const events = await TraceLoader.rawEvents(this, 'web-dev-with-commit.json.gz');\n      const traceModel = Trace.TraceModel.Model.createWithAllHandlers();\n      await traceModel.parse(events);\n      Timeline.TimelinePanel.TimelinePanel.instance({forceNew: true, isNode: false, traceModel});\n\n      const generator = await panel.handleExternalRequest({\n        prompt: 'Please help me debug this problem',\n        conversationType: AiAssistanceModel.ConversationType.PERFORMANCE_INSIGHT,\n        insightTitle: 'LCP breakdown'\n      });\n      let response = await generator.next();\n      assert.strictEqual(response.value.message, 'Analyzing insight: LCP breakdown');\n      response = await generator.next();\n      assert.strictEqual(response.value.message, explanation);\n    });\n\n    it('errors for performance insight requests with no insightTitle', async () => {\n      const {panel} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient([[{explanation}]]),\n      });\n      const generator = await panel.handleExternalRequest(\n          // @ts-expect-error\n          {\n            prompt: 'Please help me debug this problem',\n            conversationType: AiAssistanceModel.ConversationType.PERFORMANCE_INSIGHT\n          });\n      const response = await generator.next();\n      assert.strictEqual(response.value.type, 'error');\n      assert.strictEqual(\n          response.value.message, 'The insightTitle parameter is required for debugging a Performance Insight.');\n    });\n  });\n});\n\ndescribeWithEnvironment('AiAssistancePanel.ActionDelegate', () => {\n  beforeEach(() => {\n    UI.ViewManager.ViewManager.instance({forceNew: true});\n    UI.InspectorView.InspectorView.instance({forceNew: true});\n  });\n\n  it('should set drawer size to 25% of total size if it\\'s less than that size', async () => {\n    const totalSizeStub = 400;\n    sinon.stub(UI.ViewManager.ViewManager.instance(), 'view').returns(sinon.createStubInstance(UI.View.SimpleView));\n    sinon.stub(UI.ViewManager.ViewManager.instance(), 'showView');\n    sinon.stub(UI.InspectorView.InspectorView.instance(), 'totalSize').returns(totalSizeStub);\n    sinon.stub(UI.InspectorView.InspectorView.instance(), 'drawerSize').returns(10);\n    const setDrawerSizeCall = expectCall(sinon.stub(UI.InspectorView.InspectorView.instance(), 'setDrawerSize'));\n\n    const actionDelegate = new AiAssistancePanel.ActionDelegate();\n    actionDelegate.handleAction(UI.Context.Context.instance(), 'freestyler.elements-floating-button');\n\n    const [size] = await setDrawerSizeCall;\n    assert.strictEqual(size, totalSizeStub / 4);\n  });\n});\n"]}