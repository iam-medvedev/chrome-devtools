{"version":3,"file":"AiAssistancePanel.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/ai_assistance/AiAssistancePanel.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,QAAQ,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,KAAK,SAAS,MAAM,qCAAqC,CAAC;AACjE,OAAO,EACL,uBAAuB,EACvB,oBAAoB,EACpB,YAAY,EACZ,cAAc,EACf,MAAM,sCAAsC,CAAC;AAC9C,OAAO,EAAC,qBAAqB,EAAE,OAAO,EAAC,MAAM,qCAAqC,CAAC;AACnF,OAAO,EAAC,YAAY,EAAE,mBAAmB,EAAE,gBAAgB,EAAC,MAAM,qCAAqC,CAAC;AACxG,OAAO,EAAC,UAAU,EAAC,MAAM,iCAAiC,CAAC;AAC3D,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAC3E,OAAO,EAAC,mCAAmC,EAAC,MAAM,iCAAiC,CAAC;AACpF,OAAO,EAAC,4BAA4B,EAAC,MAAM,sCAAsC,CAAC;AAClF,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAChD,OAAO,KAAK,QAAQ,MAAM,yBAAyB,CAAC;AACpD,OAAO,KAAK,OAAO,MAAM,uBAAuB,CAAC;AACjD,OAAO,KAAK,OAAO,MAAM,uBAAuB,CAAC;AACjD,OAAO,KAAK,QAAQ,MAAM,yBAAyB,CAAC;AACpD,OAAO,KAAK,aAAa,MAAM,4BAA4B,CAAC;AAE5D,OAAO,KAAK,YAAY,MAAM,oBAAoB,CAAC;AAEnD,MAAM,EAAC,SAAS,EAAC,GAAG,QAAQ,CAAC,YAAY,CAAC;AAE1C,0BAA0B,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACrD,UAAU,CAAC,GAAG,EAAE;QACd,mBAAmB,CAAC,CAAC,gCAAgC,CAAC,CAAC,CAAC;QACxD,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QACpF,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QACjF,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QACjF,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QACpF,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QACjF,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACpE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACnF,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,YAAY,EAAE,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;YAC/E,MAAM,EAAC,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,uDAAkC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;YAClF,MAAM,EAAC,gBAAgB,EAAE,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAC7E,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,uDAAkC,CAAC;YAC5E,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACnE,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,iDAA+B,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YACxE,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACjE,MAAM,EAAC,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,iDAA+B,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACjE,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACzE,MAAM,EAAC,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,uDAAkC,CAAC;YAC5E,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACjE,gBAAgB,CAAC;gBACf,gBAAgB,EAAE;oBAChB,YAAY,EAAE,IAAI;iBACnB;gBACD,kBAAkB,EAAE;oBAClB,OAAO,EAAE,IAAI;iBACd;aACF,CAAC,CAAC;YACH,MAAM,EAAC,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,uDAAkC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAEjE,MAAM,EAAC,gBAAgB,EAAE,gBAAgB,EAAC,GACtC,MAAM,uBAAuB,CAAC,EAAC,gBAAgB,mFAA0D,EAAC,CAAC,CAAC;YAEhH,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,iDAA+B,CAAC;YACzE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,gBAAgB,oFAA2D,CAAC;YAEhH,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,0BAA0B,CAAC;iBAC7D,OAAO,CAAC,OAAO,CAAC,OAAO,qEAAmD,CAAC,CAAC;YAEjF,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,wBAAwB,kFAChB,CAAC;YACxD,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,iDAA+B,CAAC;YACzE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,gBAAgB,sEAAoD,CAAC;QAC3G,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,gBAAgB,CAAC;gBACf,gBAAgB,EAAE;oBAChB,eAAe,EAAE,KAAK;iBACvB;aACF,CAAC,CAAC;YACH,MAAM,EAAC,UAAU,EAAE,gBAAgB,EAAE,EAAC,gBAAgB,EAAC,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAE3F,MAAM,cAAc,GAAG,UAAU,CAAC,UAAU,CAAC,mBAAsC,CAAC,CAAC;YACrF,gBAAgB,CAAC,CAAC,mDAAkC,CAAC;YAErD,MAAM,CAAC,eAAe,CAAC,GAAG,MAAM,cAAc,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,4BAA4B,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oFAAoF,EAAE,KAAK,IAAI,EAAE;YAClG,gBAAgB,CAAC;gBACf,gBAAgB,EAAE;oBAChB,OAAO,EAAE,IAAI;oBACb,eAAe,EAAE,IAAI;iBACtB;aACF,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,GAAG,CAAC;YACnB,MAAM,EAAC,UAAU,EAAE,gBAAgB,EAAE,EAAC,gBAAgB,EAAC,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAE3F,MAAM,cAAc,GAAG,UAAU,CAAC,UAAU,CAAC,mBAAsC,CAAC,CAAC;YACrF,gBAAgB,CAAC,MAAM,mDAAkC,CAAC;YAC1D,MAAM,CAAC,eAAe,CAAC,GAAG,MAAM,cAAc,CAAC;YAE/C,MAAM,CAAC,SAAS,CAAC,eAAe,EAAE;gBAChC,gCAAgC,EAAE,MAAM;gBACxC,4BAA4B,EAAE;oBAC5B,aAAa,EAAE;wBACb,SAAS,EAAE,UAAU;wBACrB,UAAU,EAAE;4BACV,OAAO,EAAE,SAAS;yBACnB;qBACF;iBACF;gBACD,4BAA4B,EAAE,IAAI;aACnC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oFAAoF,EAAE,KAAK,IAAI,EAAE;YAClG,gBAAgB,CAAC;gBACf,gBAAgB,EAAE;oBAChB,OAAO,EAAE,IAAI;oBACb,eAAe,EAAE,IAAI;iBACtB;aACF,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,GAAG,CAAC;YACnB,MAAM,EAAC,UAAU,EAAE,gBAAgB,EAAE,EAAC,gBAAgB,EAAC,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAE3F,MAAM,cAAc,GAAG,UAAU,CAAC,UAAU,CAAC,mBAAsC,CAAC,CAAC;YACrF,gBAAgB,CAAC,MAAM,mDAAkC,CAAC;YAC1D,MAAM,CAAC,eAAe,CAAC,GAAG,MAAM,cAAc,CAAC;YAE/C,MAAM,CAAC,SAAS,CAAC,eAAe,EAAE;gBAChC,gCAAgC,EAAE,MAAM;gBACxC,4BAA4B,EAAE;oBAC5B,aAAa,EAAE;wBACb,SAAS,EAAE,UAAU;wBACrB,UAAU,EAAE;4BACV,OAAO,EAAE,SAAS;yBACnB;qBACF;iBACF;gBACD,4BAA4B,EAAE,IAAI;aACnC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,gBAAgB,CAAC;gBACf,gBAAgB,EAAE;oBAChB,OAAO,EAAE,IAAI;oBACb,eAAe,EAAE,IAAI;iBACtB;aACF,CAAC,CAAC;YACH,MAAM,QAAQ,GAAG,uBAAuB,CAAC;YACzC,MAAM,MAAM,GAAG,GAAG,CAAC;YACnB,MAAM,EAAC,UAAU,EAAE,gBAAgB,EAAE,EAAC,gBAAgB,EAAC,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAC3F,MAAM,cAAc,GAAG,UAAU,CAAC,UAAU,CAAC,mBAAsC,CAAC,CAAC;YACrF,gBAAgB,CAAC,MAAM,oDAAmC,QAAQ,CAAC,CAAC;YACpE,MAAM,CAAC,eAAe,CAAC,GAAG,MAAM,cAAc,CAAC;YAC/C,MAAM,CAAC,SAAS,CAAC,eAAe,EAAE;gBAChC,gCAAgC,EAAE,MAAM;gBACxC,4BAA4B,EAAE;oBAC5B,aAAa,EAAE;wBACb,SAAS,EAAE,UAAU;wBACrB,UAAU,EAAE;4BACV,OAAO,EAAE,QAAQ;yBAClB;qBACF;iBACF;gBACD,4BAA4B,EAAE,IAAI;aACnC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,MAAM,KAAK,GAAG;YACZ;gBACE,MAAM,EAAE,GAAG,CAAC,QAAQ,CAAC,OAAO;gBAC5B,aAAa,EAAE,GAAG,EAAE;oBAClB,MAAM,IAAI,GAAG,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE;wBAC1D,QAAQ,EAAE,IAAI,CAAC,YAAY;qBAC5B,CAAC,CAAC;oBACH,OAAO,IAAI,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBAC5C,CAAC;gBACD,MAAM,EAAE,qCAAqC;aAC9C;YACD;gBACE,MAAM,EAAE,GAAG,CAAC,cAAc,CAAC,cAAc;gBACzC,aAAa,EAAE,GAAG,EAAE;oBAClB,OAAO,IAAI,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC;gBACtG,CAAC;gBACD,MAAM,EAAE,iCAAiC;aAC1C;YACD;gBACE,MAAM,EAAE,aAAa,CAAC,UAAU,CAAC,UAAU;gBAC3C,aAAa,EAAE,GAAG,EAAE;oBAClB,OAAO,IAAI,YAAY,CAAC,eAAe,CAAC,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;gBACzG,CAAC;gBACD,MAAM,EAAE,mCAAmC;aAC5C;YACD;gBACE,MAAM,EAAE,aAAa,CAAC,gBAAgB,CAAC,aAAa;gBACpD,aAAa,EAAE,GAAG,EAAE;oBAClB,OAAO,IAAI,YAAY,CAAC,cAAc,CAClC,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC;gBAC9E,CAAC;gBACD,MAAM,EAAE,qCAAqC;aAC9C;YACD;gBACE,MAAM,EAAE,SAAS,CAAC,YAAY,CAAC,YAAY;gBAC3C,aAAa,EAAE,GAAG,EAAE;oBAClB,OAAO,IAAI,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,kBAAkB,CAAC,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC;gBACrG,CAAC;gBACD,MAAM,EAAE,+BAA+B;aACxC;SACF,CAAC;QAEF,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,EAAE,CAAC,2BAA2B,IAAI,CAAC,MAAM,CAAC,IAAI,oCAAoC,EAAE,KAAK,IAAI,EAAE;gBAC7F,MAAM,EAAC,KAAK,EAAE,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;gBAClE,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;gBACrC,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;gBACtC,IAAI,CAAC,WAAW,EAAE,CAAC;oBACjB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAC9C,CAAC;gBACD,MAAM,iCAAiC,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;oBACpE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;oBAClE,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAClC,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,iCAAiC,CAAC,eAAe,EAAE,OAAO,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAC3F,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8BAA8B,IAAI,CAAC,MAAM,CAAC,IAAI,kCAAkC,EAAE,KAAK,IAAI,EAAE;gBAC9F,MAAM,EAAC,KAAK,EAAE,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;gBAClE,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;oBACnD,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAClC,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;gBAChD,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;gBACrC,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;gBACtC,IAAI,CAAC,WAAW,EAAE,CAAC;oBACjB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAC9C,CAAC;gBACD,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;gBAClE,MAAM,iCAAiC,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;oBACpE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;gBACpE,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,iCAAiC,CAAC,eAAe,EAAE,OAAO,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAC3F,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,iBAAiB,IAAI,CAAC,MAAM,CAAC,IAAI,2CAA2C,EAAE,KAAK,IAAI,EAAE;gBAC1F,MAAM,EAAC,gBAAgB,EAAE,IAAI,EAAE,KAAK,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;gBACxE,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;gBAChD,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;gBACjC,KAAK,CAAC,UAAU,EAAE,CAAC;gBACnB,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;gBACrC,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;gBACtC,IAAI,CAAC,WAAW,EAAE,CAAC;oBACjB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAC9C,CAAC;gBACD,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;gBAClE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;QACL,CAAC;QAED,EAAE,CAAC,2FAA2F,EAAE,KAAK,IAAI,EAAE;YACzG,MAAM,EAAC,KAAK,EAAE,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAClE,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,KAAK,CAAC,YAAY,CAAC,qCAAqC,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;YAEhD,MAAM,IAAI,GAAG,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE;gBAC1D,QAAQ,EAAE,IAAI,CAAC,YAAY;aAC5B,CAAC,CAAC;YACH,MAAM,+BAA+B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBAClE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,+BAA+B,CAAC,eAAe,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,IAAI,yBAAuD,CAAC;QAC5D,UAAU,CAAC,GAAG,EAAE;YACd,yBAAyB;gBACrB,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,gCAAgC,CAAC,CAAC;YAC5F,yBAAyB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YACzE,MAAM,EAAC,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAC3D,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,yBAAyB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YAC9E,MAAM,EAAC,gBAAgB,EAAE,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAC7E,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC;YAEvD,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,yBAAyB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0EAA0E,EAAE,KAAK,IAAI,EAAE;YACxF,yBAAyB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAE5C,MAAM,EAAC,IAAI,EAAE,KAAK,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YACtD,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YACjC,KAAK,CAAC,UAAU,EAAE,CAAC;YAEnB,yBAAyB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAE3C,MAAM,YAAY,GAAG,KAAK,CAAC,kBAAkB,CAAC,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YACnF,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YAE3F,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,CAAC;YAC3E,MAAM,EAAC,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAC3D,gBAAgB,CAAC,eAAe,EAAE,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,EAAC,KAAK,EAAE,gBAAgB,EAAC,GAC3B,MAAM,uBAAuB,CAAC,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC,EAAC,WAAW,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;YAE3F,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,KAAK,CAAC,YAAY,CAAC,qCAAqC,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;YAEH,MAAM,4BAA4B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBAC/D,gBAAgB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,QAAQ,EAAE;gBACtD;oBACE,MAAM,kDAAqC;oBAC3C,IAAI,EAAE,MAAM;oBACZ,UAAU,EAAE,SAAS;iBACtB;gBACD;oBACE,MAAM,EAAE,MAAM;oBACd,MAAM,oDAAsC;oBAC5C,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,SAAS;oBACtB,KAAK,EAAE,EAAE;iBACV;aACF,CAAC,CAAC;YAEH,MAAM,4BAA4B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBAC/D,4BAA4B,CAAC,cAAc,EAAE,CAAC;YAChD,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,gBAAgB,CAAC;gBACf,kBAAkB,EAAE;oBAClB,OAAO,EAAE,IAAI;iBACd;aACF,CAAC,CAAC;YACH,MAAM,EAAC,KAAK,EAAE,gBAAgB,EAAC,GAC3B,MAAM,uBAAuB,CAAC,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC,EAAC,WAAW,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;YAE3F,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,KAAK,CAAC,YAAY,CAAC,qCAAqC,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CACnC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;YAE1G,MAAM,4BAA4B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBAC/D,gBAAgB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,QAAQ,EAAE;gBACtD;oBACE,MAAM,kDAAqC;oBAC3C,IAAI,EAAE,MAAM;oBACZ,UAAU,EAAE,SAAS;iBACtB;gBACD;oBACE,MAAM,EAAE,MAAM;oBACd,MAAM,oDAAsC;oBAC5C,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,SAAS;oBACtB,KAAK,EAAE,EAAE;iBACV;aACF,CAAC,CAAC;YACH,MAAM,4BAA4B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBAC/D,4BAA4B,CAAC,cAAc,EAAE,CAAC;YAChD,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAC5D,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,SAAS,oDAAiC,CAAC;QAC3F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;YAC7E,gBAAgB,CAAC;gBACf,oCAAoC,EAAE;oBACpC,OAAO,EAAE,IAAI;oBACb,eAAe,EAAE,IAAI;iBACtB;aACF,CAAC,CAAC;YACH,MAAM,EAAC,KAAK,EAAE,gBAAgB,EAAC,GAC3B,MAAM,uBAAuB,CAAC,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC,EAAC,WAAW,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;YAE3F,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,KAAK,CAAC,YAAY,CAAC,qCAAqC,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;YAEH,MAAM,4BAA4B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBAC/D,gBAAgB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CACnC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;YAE1G,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,QAAQ,EAAE;gBACtD;oBACE,MAAM,kDAAqC;oBAC3C,IAAI,EAAE,MAAM;oBACZ,UAAU,EAAE,SAAS;iBACtB;gBACD;oBACE,MAAM,EAAE,MAAM;oBACd,MAAM,oDAAsC;oBAC5C,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,SAAS;oBACtB,KAAK,EAAE,EAAE;iBACV;aACF,CAAC,CAAC;YACH,MAAM,4BAA4B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBAC/D,4BAA4B,CAAC,cAAc,EAAE,CAAC;YAChD,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAC5D,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,SAAS,yEAA6C,CAAC;QACvG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0EAA0E,EAAE,KAAK,IAAI,EAAE;YACxF,gBAAgB,CAAC;gBACf,oCAAoC,EAAE;oBACpC,OAAO,EAAE,IAAI;oBACb,eAAe,EAAE,KAAK;iBACvB;aACF,CAAC,CAAC;YACH,MAAM,EAAC,KAAK,EAAE,gBAAgB,EAAC,GAC3B,MAAM,uBAAuB,CAAC,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC,EAAC,WAAW,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;YAE3F,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,KAAK,CAAC,YAAY,CAAC,qCAAqC,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;YAEH,MAAM,4BAA4B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBAC/D,gBAAgB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CACnC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;YAE1G,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,QAAQ,EAAE;gBACtD;oBACE,MAAM,kDAAqC;oBAC3C,IAAI,EAAE,MAAM;oBACZ,UAAU,EAAE,SAAS;iBACtB;gBACD;oBACE,MAAM,EAAE,MAAM;oBACd,MAAM,oDAAsC;oBAC5C,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,SAAS;oBACtB,KAAK,EAAE,EAAE;iBACV;aACF,CAAC,CAAC;YACH,MAAM,4BAA4B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBAC/D,4BAA4B,CAAC,cAAc,EAAE,CAAC;YAChD,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAC5D,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,SAAS,iEAAqC,CAAC;QAC/F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,gBAAgB,CAAC;gBACf,kBAAkB,EAAE;oBAClB,OAAO,EAAE,IAAI;oBACb,UAAU,EAAE,IAAI;iBACjB;aACF,CAAC,CAAC;YACH,MAAM,EAAC,KAAK,EAAE,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,CAC3D,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC,EAAC,WAAW,EAAE,MAAM,EAAC,CAAC,EAAE,CAAC,EAAC,WAAW,EAAE,OAAO,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;YACvF,MAAM,eAAe,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBAClD,KAAK,CAAC,YAAY,CAAC,qCAAqC,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;YACH,MAAM,UAAU,GAAG,EAAC,UAAU,EAAE,EAAC,IAAI,EAAE,iBAAiB,EAAE,QAAQ,EAAE,YAAY,EAAC,EAAC,CAAC;YACnF,MAAM,0BAA0B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBAC7D,eAAe,CAAC,YAAY,CAAC,8BAA8B,EAAE,UAAU,CAAC,CAAC;YAC3E,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,SAAS,CAAC,0BAA0B,CAAC,QAAQ,EAAE;gBACpD;oBACE,MAAM,kDAAqC;oBAC3C,IAAI,EAAE,8BAA8B;oBACpC,UAAU;iBACX;gBACD;oBACE,MAAM,EAAE,MAAM;oBACd,MAAM,oDAAsC;oBAC5C,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,SAAS;oBACtB,KAAK,EAAE,EAAE;iBACV;aACF,CAAC,CAAC;YAEH,MAAM,oCAAoC,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACvE,KAAK,CAAC,YAAY,CAAC,iCAAiC,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;YACH,MAAM,iCAAiC,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACpE,oCAAoC,CAAC,YAAY,CAAC,2BAA2B,CAAC,CAAC;YACjF,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,SAAS,CAAC,iCAAiC,CAAC,QAAQ,EAAE;gBAC3D;oBACE,MAAM,kDAAqC;oBAC3C,IAAI,EAAE,2BAA2B;oBACjC,UAAU,EAAE,SAAS;iBACtB;gBACD;oBACE,MAAM,EAAE,OAAO;oBACf,MAAM,oDAAsC;oBAC5C,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,SAAS;oBACtB,KAAK,EAAE,EAAE;iBACV;aACF,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,EAAE;gBAC/B,oCAAoC,CAAC,cAAc,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YAC/E,CAAC,CAAC,CAAC;YACH,MAAM,eAAe,GAAG,qBAAqB,CAAC,WAAW,CAAC,cAAc,EAAE,EAAE,8BAA8B,CAAE,CAAC;YAC7G,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YAClC,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,WAAW,CAAC,aAAa,CAAC,eAAe,CAAC,EAAE,EAAE,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAC3C,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,QAAQ,EAAE;gBAC1C;oBACE,MAAM,kDAAqC;oBAC3C,IAAI,EAAE,8BAA8B;oBACpC,UAAU;iBACX;gBACD;oBACE,MAAM,EAAE,MAAM;oBACd,MAAM,oDAAsC;oBAC5C,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,SAAS;oBACtB,KAAK,EAAE,EAAE;iBACV;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YACzE,gBAAgB,CAAC;gBACf,kBAAkB,EAAE;oBAClB,OAAO,EAAE,IAAI;iBACd;aACF,CAAC,CAAC;YACH,MAAM,kBAAkB,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;YAC7F,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CACnC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;YAC1G,MAAM,EAAC,gBAAgB,EAAE,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,CAAC;gBACzE,UAAU,EAAE,cAAc,CAAC,CAAC;wBAC1B,EAAC,WAAW,EAAE,2BAA2B,EAAC,EAAE,EAAC,WAAW,EAAE,kDAAkD,EAAC;qBAC9G,CAAC,CAAC;aACJ,CAAC,CAAC;YACH,mGAAmG;YACnG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBAC1B,gBAAgB,CAAC,YAAY,CAAC,8BAA8B,CAAC,CAAC;YAChE,CAAC,CAAC,CAAC;YAEH,KAAK,CAAC,MAAM,CAAC,UAAU,CACnB,kBAAkB,EAAE,KAAK,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,0CAA0C,EAAC,CAAC,CAAC,CAAC;YACzG,KAAK,CAAC,MAAM,CAAC,eAAe,CAAC,kBAAkB,EAAE,KAAK,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,mBAAmB,EAAC,CAAC,CAAC,CAAC;QAC7G,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,EAAC,KAAK,EAAE,gBAAgB,EAAC,GAC3B,MAAM,uBAAuB,CAAC,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC,EAAC,WAAW,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAE3F,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;YACnD,KAAK,CAAC,YAAY,CAAC,qCAAqC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,MAAM,4BAA4B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;YAC/D,gBAAgB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,QAAQ,EAAE;YACtD;gBACE,MAAM,kDAAqC;gBAC3C,IAAI,EAAE,MAAM;gBACZ,UAAU,EAAE,SAAS;aACtB;YACD;gBACE,MAAM,EAAE,MAAM;gBACd,MAAM,oDAAsC;gBAC5C,KAAK,EAAE,SAAS;gBAChB,WAAW,EAAE,SAAS;gBACtB,KAAK,EAAE,EAAE;aACV;SACF,CAAC,CAAC;QAEH,MAAM,2BAA2B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;YAC9D,4BAA4B,CAAC,aAAa,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,2BAA2B,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC3D,MAAM,CAAC,WAAW,CAAC,2BAA2B,CAAC,SAAS,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yEAAyE,EAAE,KAAK,IAAI,EAAE;QACvF,gBAAgB,CAAC;YACf,kBAAkB,EAAE;gBAClB,OAAO,EAAE,IAAI;aACd;SACF,CAAC,CAAC;QACH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CACnC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;QAC1G,MAAM,EAAC,KAAK,EAAE,gBAAgB,EAAC,GAC3B,MAAM,uBAAuB,CAAC,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC,EAAC,WAAW,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAC3F,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;YACnD,KAAK,CAAC,YAAY,CAAC,qCAAqC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QACH,MAAM,4BAA4B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;YAC/D,gBAAgB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,QAAQ,EAAE;YACtD;gBACE,MAAM,kDAAqC;gBAC3C,IAAI,EAAE,MAAM;gBACZ,UAAU,EAAE,SAAS;aACtB;YACD;gBACE,MAAM,EAAE,MAAM;gBACd,MAAM,oDAAsC;gBAC5C,KAAK,EAAE,SAAS;gBAChB,WAAW,EAAE,SAAS;gBACtB,KAAK,EAAE,EAAE;aACV;SACF,CAAC,CAAC;QACH,MAAM,2BAA2B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;YAC9D,4BAA4B,CAAC,aAAa,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,2BAA2B,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC3D,MAAM,CAAC,SAAS,CAAC,2BAA2B,CAAC,SAAS,oDAAiC,CAAC;IAC1F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAChE,MAAM,EAAC,KAAK,EAAE,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,CAC3D,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC,EAAC,WAAW,EAAE,MAAM,EAAC,CAAC,EAAE,CAAC,EAAC,WAAW,EAAE,OAAO,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAEvF,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;YACnD,KAAK,CAAC,YAAY,CAAC,qCAAqC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QACH,MAAM,4BAA4B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;YAC/D,gBAAgB,CAAC,YAAY,CAAC,8BAA8B,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,QAAQ,EAAE;YACtD;gBACE,MAAM,kDAAqC;gBAC3C,IAAI,EAAE,8BAA8B;gBACpC,UAAU,EAAE,SAAS;aACtB;YACD;gBACE,MAAM,EAAE,MAAM;gBACd,MAAM,oDAAsC;gBAC5C,KAAK,EAAE,SAAS;gBAChB,WAAW,EAAE,SAAS;gBACtB,KAAK,EAAE,EAAE;aACV;SACF,CAAC,CAAC;QAEH,MAAM,oCAAoC,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;YACvE,KAAK,CAAC,YAAY,CAAC,iCAAiC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QACH,MAAM,qCAAqC,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;YACxE,oCAAoC,CAAC,YAAY,CAAC,2BAA2B,CAAC,CAAC;QACjF,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,qCAAqC,CAAC,QAAQ,EAAE;YAC/D;gBACE,MAAM,kDAAqC;gBAC3C,IAAI,EAAE,2BAA2B;gBACjC,UAAU,EAAE,SAAS;aACtB;YACD;gBACE,MAAM,EAAE,OAAO;gBACf,MAAM,oDAAsC;gBAC5C,KAAK,EAAE,SAAS;gBAChB,WAAW,EAAE,SAAS;gBACtB,KAAK,EAAE,EAAE;aACV;SACF,CAAC,CAAC;QAEH,IAAI,WAAW,GAAG,OAAO,CAAC,GAAG,EAAE;YAC7B,qCAAqC,CAAC,cAAc,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,qBAAqB,CAAC,WAAW,CAAC,aAAa,EAAE,EAAE,mBAAmB,CAAE,CAAC;QAC1F,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC3B,MAAM,6BAA6B,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;YAChE,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,6BAA6B,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC7D,MAAM,CAAC,WAAW,CAAC,6BAA6B,CAAC,SAAS,CAAC,CAAC;QAC5D,WAAW,CAAC,OAAO,EAAE,CAAC;QAEtB,WAAW,GAAG,OAAO,CAAC,GAAG,EAAE;YACzB,6BAA6B,CAAC,cAAc,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,qBAAqB,CAAC,WAAW,CAAC,cAAc,EAAE,EAAE,uBAAuB,CAAC,CAAC;QAC9F,MAAM,CAAC,QAAQ,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,YAAY,EAAE,CAAC;YACf,MAAM,mCAAmC,EAAE,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,KAAK,IAAI,EAAE;YACnB,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,cAAc,GAAG,oBAAoB,CAAC;gBAC1C,GAAG,EAAE,SAAS,CAAA,gBAAgB;aAC/B,CAAC,CAAC;YACH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;YAE3F,MAAM,EAAC,KAAK,EAAE,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,CAAC;gBAC9D,UAAU,EAAE,cAAc,CAAC;oBACzB,CAAC,EAAC,WAAW,EAAE,MAAM,EAAC,CAAC;iBACxB,CAAC;aACH,CAAC,CAAC;YACH,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,KAAK,CAAC,YAAY,CAAC,iCAAiC,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;YACtD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,eAAe,EAAE,OAAO,EAAE,EAAE,cAAc,CAAC,CAAC;YAEhF,mCAAmC;YACnC,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBAC1B,KAAK,CAAC,YAAY,CAAC,iCAAiC,CAAC,CAAC;gBACtD,gBAAgB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,oCAAoC;YACpC,MAAM,eAAe,GAAG,oBAAoB,CAAC;gBAC3C,GAAG,EAAE,SAAS,CAAA,gBAAgB;aAC/B,CAAC,CAAC;YACH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;YAE5F,MAAM,sCAAsC,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACzE,KAAK,CAAC,YAAY,CAAC,iCAAiC,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,sCAAsC,CAAC,oBAAoB,CAAC,CAAC;YAC3E,MAAM,CAAC,WAAW,CAAC,sCAAsC,CAAC,eAAe,EAAE,OAAO,EAAE,EAAE,eAAe,CAAC,CAAC;QACzG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,gBAAgB,CAAC;gBACf,kBAAkB,EAAE;oBAClB,OAAO,EAAE,IAAI;iBACd;aACF,CAAC,CAAC;YAEH,MAAM,EAAC,gBAAgB,EAAE,KAAK,EAAE,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,CAAC;gBAChF,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC,EAAC,WAAW,EAAE,MAAM,EAAC,CAAC,EAAE,CAAC,EAAC,WAAW,EAAE,OAAO,EAAC,CAAC,CAAC,CAAC;aAChF,CAAC,CAAC;YACH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CACnC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;YAE1G,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,KAAK,CAAC,YAAY,CAAC,qCAAqC,CAAC,CAAC;gBAC1D,gBAAgB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,QAAQ,EAAE;gBAC1C;oBACE,MAAM,kDAAqC;oBAC3C,IAAI,EAAE,MAAM;oBACZ,UAAU,EAAE,SAAS;iBACtB;gBACD;oBACE,MAAM,EAAE,MAAM;oBACd,MAAM,oDAAsC;oBAC5C,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,SAAS;oBACtB,KAAK,EAAE,EAAE;iBACV;aACF,CAAC,CAAC;YAEH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CACnC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;YAE1G,MAAM,gCAAgC,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnE,KAAK,CAAC,YAAY,CAAC,qCAAqC,CAAC,CAAC;gBAC1D,gBAAgB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,OAAO,CAAC,gCAAgC,CAAC,UAAU,CAAC,CAAC;YAC5D,MAAM,CAAC,SAAS,CAAC,gCAAgC,CAAC,QAAQ,EAAE;gBAC1D;oBACE,MAAM,kDAAqC;oBAC3C,IAAI,EAAE,MAAM;oBACZ,UAAU,EAAE,SAAS;iBACtB;gBACD;oBACE,MAAM,EAAE,MAAM;oBACd,MAAM,oDAAsC;oBAC5C,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,SAAS;oBACtB,KAAK,EAAE,EAAE;iBACV;gBACD;oBACE,MAAM,kDAAqC;oBAC3C,IAAI,EAAE,OAAO;oBACb,UAAU,EAAE,SAAS;iBACtB;gBACD;oBACE,MAAM,EAAE,OAAO;oBACf,MAAM,oDAAsC;oBAC5C,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,SAAS;oBACtB,KAAK,EAAE,EAAE;iBACV;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC/C,MAAM,KAAK,GAKP;YACE;gBACE,KAAK,EAAE,QAAQ,CAAC,aAAa,CAAC,aAAa;gBAC3C,iBAAiB,mDAAgC;gBACjD,eAAe,EAAE,oBAAoB;aACtC;YACD;gBACE,KAAK,EAAE,OAAO,CAAC,YAAY,CAAC,YAAY;gBACxC,iBAAiB,gEAAgC;gBACjD,eAAe,EAAE,kCAAkC;aACpD;YACD;gBACE,KAAK,EAAE,OAAO,CAAC,YAAY,CAAC,YAAY;gBACxC,iBAAiB,kDAA6B;gBAC9C,eAAe,EAAE,+BAA+B;aACjD;YACD;gBACE,KAAK,EAAE,QAAQ,CAAC,aAAa,CAAC,aAAa;gBAC3C,iBAAiB,gEAAoC;gBACrD,eAAe,EAAE,sCAAsC;aACxD;SACF,CAAC;QAEN,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,EAAE,CAAC,iBAAiB,IAAI,CAAC,iBAAiB,gCAAgC,IAAI,CAAC,KAAK,CAAC,IAAI,YAAY,EACjG,KAAK,IAAI,EAAE;gBACT,gBAAgB,CAAC;oBACf,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;wBACtB,OAAO,EAAE,IAAI;qBACd;iBACF,CAAC,CAAC;gBACH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBAE1F,MAAM,EAAC,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,CAAC;oBACvD,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC,EAAC,WAAW,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;iBACtD,CAAC,CAAC;gBAEH,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACzE,CAAC,CAAC,CAAC;YAEP,EAAE,CAAC,sCAAsC,IAAI,CAAC,KAAK,CAAC,IAAI,yCAAyC,EAAE,KAAK,IAAI,EAAE;gBAC5G,gBAAgB,CAAC;oBACf,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;wBACtB,OAAO,EAAE,IAAI;qBACd;iBACF,CAAC,CAAC;gBAEH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBAE1F,MAAM,EAAC,gBAAgB,EAAE,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;gBAE7E,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBAEvE,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;oBACnD,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC5D,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CACI,IAAI,CAAC,KAAK,CAAC,IAAI,kDAAkD,EACpE,KAAK,IAAI,EAAE;gBACT,gBAAgB,CAAC;oBACf,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;wBACtB,OAAO,EAAE,KAAK;qBACf;iBACF,CAAC,CAAC;gBACH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC1F,MAAM,EAAC,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;gBAE3D,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;QACT,CAAC;QAED,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACzC,EAAE,CAAC,yGAAyG,EACzG,KAAK,IAAI,EAAE;gBACT,gBAAgB,CAAC;oBACf,oCAAoC,EAAE;wBACpC,OAAO,EAAE,IAAI;wBACb,eAAe,EAAE,IAAI;qBACtB;iBACF,CAAC,CAAC;gBACH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CACnC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;gBAC1G,MAAM,EAAC,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;gBAE3D,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,SAAS,yEAA6C,CAAC;YAC7F,CAAC,CAAC,CAAC;QACR,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;QACjE,MAAM,EAAC,gBAAgB,EAAE,KAAK,EAAE,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,CAAC;YAChF,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC;wBAC3B,WAAW,EAAE,uCAAuC;wBACpD,QAAQ,EAAE,EAAC,mBAAmB,EAAE,EAAC,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,EAAC,EAAC;qBAC5G,CAAC,CAAC,CAAC;SACL,CAAC,CAAC;QACH,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;YACnD,KAAK,CAAC,YAAY,CAAC,qCAAqC,CAAC,CAAC;YAC1D,gBAAgB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,QAAQ,EAAE;YAC1C;gBACE,MAAM,kDAAqC;gBAC3C,IAAI,EAAE,MAAM;gBACZ,UAAU,EAAE,SAAS;aACtB;YACD;gBACE,MAAM,EAAE,SAAS;gBACjB,MAAM,oDAAsC;gBAC5C,KAAK,EAAE,SAAS;gBAChB,KAAK,4CAA8B;gBACnC,KAAK,EAAE,EAAE;aACV;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,SAAS,mBAAmB;YAC1B,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;YAC9B,MAAM,kBAAkB,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;YACnF,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;YAClC,OAAO;gBACL,qBAAqB,EACjB,KAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,mBAAmB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;aAC/F,CAAC;QACJ,CAAC;QAED,EAAE,CAAC,sEAAsE,EAAE,KAAK,IAAI,EAAE;YACpF,gBAAgB,CAAC;gBACf,kBAAkB,EAAE;oBAClB,OAAO,EAAE,IAAI;oBACb,UAAU,EAAE,KAAK;iBAClB;aACF,CAAC,CAAC;YACH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CACnC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;YAC1G,MAAM,EAAC,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAE3D,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;YACxD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;YACpD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;YACtD,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,EAAC,qBAAqB,EAAC,GAAG,mBAAmB,EAAE,CAAC;YACtD,gBAAgB,CAAC;gBACf,kBAAkB,EAAE;oBAClB,OAAO,EAAE,IAAI;oBACb,UAAU,EAAE,IAAI;iBACjB;aACF,CAAC,CAAC;YACH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CACnC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;YAC1G,MAAM,EAAC,gBAAgB,EAAE,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAE7E,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;YAEvD,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,gBAAgB,CAAC,gBAAgB,EAAE,EAAE,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;YACzC,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;YAE5D,MAAM,iCAAiC,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACpE,gBAAgB,CAAC,kBAAkB,EAAE,EAAE,CAAC;YAC1C,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,OAAO,CAAC,iCAAiC,CAAC,UAAU,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;YACpC,gBAAgB,CAAC;gBACf,kBAAkB,EAAE;oBAClB,OAAO,EAAE,IAAI;oBACb,UAAU,EAAE,IAAI;iBACjB;aACF,CAAC,CAAC;YACH,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CACnC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;YAC1G,MAAM,EAAC,gBAAgB,EAAE,gBAAgB,EAAC,GACtC,MAAM,uBAAuB,CAAC,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC,EAAC,WAAW,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;YAE3F,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;YAEvD,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,gBAAgB,CAAC,YAAY,CAAC,MAAM,EAAE,EAAC,UAAU,EAAE,EAAC,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAC,EAAC,CAAC,CAAC;YACpG,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,QAAQ,EAAE;gBAC1C;oBACE,MAAM,kDAAqC;oBAC3C,IAAI,EAAE,MAAM;oBACZ,UAAU,EAAE,EAAC,UAAU,EAAE,EAAC,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAC,EAAC;iBACvE;gBACD;oBACE,MAAM,EAAE,MAAM;oBACd,MAAM,oDAAsC;oBAC5C,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,SAAS;oBACtB,KAAK,EAAE,EAAE;iBACV;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,SAAS,oBAAoB,CAAC,cAAsB;YAClD,MAAM,EAAC,OAAO,EAAE,YAAY,EAAC,GAAG,4BAA4B,CAAC;gBAC3D,GAAG,EAAE,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAA,sBAAsB;gBAC1D,QAAQ,EAAE,WAAW;gBACrB,OAAO,EAAE,SAAS;gBAClB,cAAc;aACf,CAAC,CAAC;YACH,OAAO,EAAC,OAAO,EAAE,YAAY,EAAC,CAAC;QACjC,CAAC;QAED,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,oBAAoB,CAAC,aAAa,CAAC,CAAC;YACpC,gBAAgB,CAAC;gBACf,kBAAkB,EAAE;oBAClB,OAAO,EAAE,IAAI;oBACb,QAAQ,EAAE,KAAK;iBAChB;aACF,CAAC,CAAC;YACH,MAAM,EACJ,gBAAgB,GACjB,GAAG,MAAM,uBAAuB,EAAE,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,oBAAoB,CAAC,aAAa,CAAC,CAAC;YACpC,gBAAgB,CAAC;gBACf,kBAAkB,EAAE;oBAClB,OAAO,EAAE,IAAI;oBACb,QAAQ,EAAE,IAAI;iBACf;aACF,CAAC,CAAC;YACH,MAAM,EACJ,gBAAgB,GACjB,GAAG,MAAM,uBAAuB,EAAE,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC1C,MAAM,EAAC,OAAO,EAAC,GAAG,oBAAoB,CAAC,aAAa,CAAC,CAAC;YACtD,gBAAgB,CAAC;gBACf,kBAAkB,EAAE;oBAClB,OAAO,EAAE,IAAI;oBACb,QAAQ,EAAE,IAAI;iBACf;aACF,CAAC,CAAC;YACH,MAAM,EAAC,gBAAgB,EAAE,gBAAgB,EAAC,GAAG,MAAM,uBAAuB,EAAE,CAAC;YAC7E,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YAEzD,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;gBACnD,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBACpE,oBAAoB,CAAC,cAAc,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport {\n  createAiAssistancePanel,\n  createNetworkRequest,\n  detachPanels,\n  mockAidaClient\n} from '../../testing/AiAssistanceHelpers.js';\nimport {findMenuItemWithLabel, getMenu} from '../../testing/ContextMenuHelpers.js';\nimport {createTarget, registerNoopActions, updateHostConfig} from '../../testing/EnvironmentHelpers.js';\nimport {expectCall} from '../../testing/ExpectStubCall.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {createNetworkPanelForMockConnection} from '../../testing/NetworkHelpers.js';\nimport {createFileSystemUISourceCode} from '../../testing/UISourceCodeHelpers.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Elements from '../elements/elements.js';\nimport * as Network from '../network/network.js';\nimport * as Sources from '../sources/sources.js';\nimport * as Timeline from '../timeline/timeline.js';\nimport * as TimelineUtils from '../timeline/utils/utils.js';\n\nimport * as AiAssistance from './ai_assistance.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\ndescribeWithMockConnection('AI Assistance Panel', () => {\n  beforeEach(() => {\n    registerNoopActions(['elements.toggle-element-search']);\n    UI.Context.Context.instance().setFlavor(Elements.ElementsPanel.ElementsPanel, null);\n    UI.Context.Context.instance().setFlavor(Network.NetworkPanel.NetworkPanel, null);\n    UI.Context.Context.instance().setFlavor(Sources.SourcesPanel.SourcesPanel, null);\n    UI.Context.Context.instance().setFlavor(Timeline.TimelinePanel.TimelinePanel, null);\n    UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, null);\n    UI.Context.Context.instance().setFlavor(SDK.DOMModel.DOMNode, null);\n    UI.Context.Context.instance().setFlavor(TimelineUtils.AICallTree.AICallTree, null);\n    UI.Context.Context.instance().setFlavor(Workspace.UISourceCode.UISourceCode, null);\n  });\n\n  afterEach(() => {\n    detachPanels();\n  });\n\n  describe('consent view', () => {\n    it('should render consent view when the consent is not given before', async () => {\n      const {initialViewInput} = await createAiAssistancePanel();\n      assert.strictEqual(initialViewInput.state, AiAssistance.State.CONSENT_VIEW);\n    });\n\n    it('should switch from consent view to chat view when enabling setting', async () => {\n      const {initialViewInput, expectViewUpdate} = await createAiAssistancePanel();\n      assert.strictEqual(initialViewInput.state, AiAssistance.State.CONSENT_VIEW);\n      const updatedViewInput = await expectViewUpdate(() => {\n        Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      });\n      assert.strictEqual(updatedViewInput.state, AiAssistance.State.CHAT_VIEW);\n    });\n\n    it('should render chat view when the consent is given before', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      const {initialViewInput} = await createAiAssistancePanel();\n      assert.strictEqual(initialViewInput.state, AiAssistance.State.CHAT_VIEW);\n    });\n\n    it('should render the consent view when the setting is disabled', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      Common.Settings.moduleSetting('ai-assistance-enabled').setDisabled(true);\n      const {initialViewInput} = await createAiAssistancePanel();\n      assert.strictEqual(initialViewInput.state, AiAssistance.State.CONSENT_VIEW);\n      Common.Settings.moduleSetting('ai-assistance-enabled').setDisabled(false);\n    });\n\n    it('should render the consent view when blocked by age', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n      updateHostConfig({\n        aidaAvailability: {\n          blockedByAge: true,\n        },\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n      const {initialViewInput} = await createAiAssistancePanel();\n      assert.strictEqual(initialViewInput.state, AiAssistance.State.CONSENT_VIEW);\n    });\n\n    it('updates when the user logs in', async () => {\n      Common.Settings.moduleSetting('ai-assistance-enabled').set(true);\n\n      const {initialViewInput, expectViewUpdate} =\n          await createAiAssistancePanel({aidaAvailability: Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL});\n\n      assert.strictEqual(initialViewInput.state, AiAssistance.State.CHAT_VIEW);\n      assert.strictEqual(initialViewInput.aidaAvailability, Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL);\n\n      sinon.stub(Host.AidaClient.AidaClient, 'checkAccessPreconditions')\n          .returns(Promise.resolve(Host.AidaClient.AidaAccessPreconditions.AVAILABLE));\n\n      const updatedViewInput = await expectViewUpdate(() => {\n        Host.AidaClient.HostConfigTracker.instance().dispatchEventToListeners(\n            Host.AidaClient.Events.AIDA_AVAILABILITY_CHANGED);\n      });\n\n      assert.strictEqual(updatedViewInput.state, AiAssistance.State.CHAT_VIEW);\n      assert.strictEqual(updatedViewInput.aidaAvailability, Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    });\n  });\n\n  describe('rating', () => {\n    it('should allow logging if configured', async () => {\n      updateHostConfig({\n        aidaAvailability: {\n          disallowLogging: false,\n        },\n      });\n      const {aidaClient, initialViewInput: {onFeedbackSubmit}} = await createAiAssistancePanel();\n\n      const aidaClientCall = expectCall(aidaClient.registerClientEvent as sinon.SinonStub);\n      onFeedbackSubmit(0, Host.AidaClient.Rating.POSITIVE);\n\n      const [aidaClientEvent] = await aidaClientCall;\n      assert.isFalse(aidaClientEvent.disable_user_content_logging);\n    });\n\n    it('should send POSITIVE rating to aida client when the user clicks on positive rating', async () => {\n      updateHostConfig({\n        aidaAvailability: {\n          enabled: true,\n          disallowLogging: true,\n        }\n      });\n      const RPC_ID = 999;\n      const {aidaClient, initialViewInput: {onFeedbackSubmit}} = await createAiAssistancePanel();\n\n      const aidaClientCall = expectCall(aidaClient.registerClientEvent as sinon.SinonStub);\n      onFeedbackSubmit(RPC_ID, Host.AidaClient.Rating.POSITIVE);\n      const [aidaClientEvent] = await aidaClientCall;\n\n      assert.deepEqual(aidaClientEvent, {\n        corresponding_aida_rpc_global_id: RPC_ID,\n        do_conversation_client_event: {\n          user_feedback: {\n            sentiment: 'POSITIVE',\n            user_input: {\n              comment: undefined,\n            }\n          },\n        },\n        disable_user_content_logging: true,\n      });\n    });\n\n    it('should send NEGATIVE rating to aida client when the user clicks on negative rating', async () => {\n      updateHostConfig({\n        aidaAvailability: {\n          enabled: true,\n          disallowLogging: true,\n        }\n      });\n      const RPC_ID = 999;\n      const {aidaClient, initialViewInput: {onFeedbackSubmit}} = await createAiAssistancePanel();\n\n      const aidaClientCall = expectCall(aidaClient.registerClientEvent as sinon.SinonStub);\n      onFeedbackSubmit(RPC_ID, Host.AidaClient.Rating.NEGATIVE);\n      const [aidaClientEvent] = await aidaClientCall;\n\n      assert.deepEqual(aidaClientEvent, {\n        corresponding_aida_rpc_global_id: RPC_ID,\n        do_conversation_client_event: {\n          user_feedback: {\n            sentiment: 'NEGATIVE',\n            user_input: {\n              comment: undefined,\n            }\n          },\n        },\n        disable_user_content_logging: true,\n      });\n    });\n\n    it('should send feedback text with data', async () => {\n      updateHostConfig({\n        aidaAvailability: {\n          enabled: true,\n          disallowLogging: true,\n        }\n      });\n      const feedback = 'This helped me a ton.';\n      const RPC_ID = 999;\n      const {aidaClient, initialViewInput: {onFeedbackSubmit}} = await createAiAssistancePanel();\n      const aidaClientCall = expectCall(aidaClient.registerClientEvent as sinon.SinonStub);\n      onFeedbackSubmit(RPC_ID, Host.AidaClient.Rating.POSITIVE, feedback);\n      const [aidaClientEvent] = await aidaClientCall;\n      assert.deepEqual(aidaClientEvent, {\n        corresponding_aida_rpc_global_id: RPC_ID,\n        do_conversation_client_event: {\n          user_feedback: {\n            sentiment: 'POSITIVE',\n            user_input: {\n              comment: feedback,\n            }\n          },\n        },\n        disable_user_content_logging: true,\n      });\n    });\n  });\n\n  describe('contexts', () => {\n    const tests = [\n      {\n        flavor: SDK.DOMModel.DOMNode,\n        createContext: () => {\n          const node = sinon.createStubInstance(SDK.DOMModel.DOMNode, {\n            nodeType: Node.ELEMENT_NODE,\n          });\n          return new AiAssistance.NodeContext(node);\n        },\n        action: 'freestyler.elements-floating-button',\n      },\n      {\n        flavor: SDK.NetworkRequest.NetworkRequest,\n        createContext: () => {\n          return new AiAssistance.RequestContext(sinon.createStubInstance(SDK.NetworkRequest.NetworkRequest));\n        },\n        action: 'drjones.network-floating-button'\n      },\n      {\n        flavor: TimelineUtils.AICallTree.AICallTree,\n        createContext: () => {\n          return new AiAssistance.CallTreeContext(sinon.createStubInstance(TimelineUtils.AICallTree.AICallTree));\n        },\n        action: 'drjones.performance-panel-context'\n      },\n      {\n        flavor: TimelineUtils.InsightAIContext.ActiveInsight,\n        createContext: () => {\n          return new AiAssistance.InsightContext(\n              sinon.createStubInstance(TimelineUtils.InsightAIContext.ActiveInsight));\n        },\n        action: 'drjones.performance-insight-context'\n      },\n      {\n        flavor: Workspace.UISourceCode.UISourceCode,\n        createContext: () => {\n          return new AiAssistance.FileContext(sinon.createStubInstance(Workspace.UISourceCode.UISourceCode));\n        },\n        action: 'drjones.sources-panel-context',\n      }\n    ];\n\n    for (const test of tests) {\n      it(`should use the selected ${test.flavor.name} context after the widget is shown`, async () => {\n        const {panel, expectViewUpdate} = await createAiAssistancePanel();\n        const context = test.createContext();\n        const contextItem = context.getItem();\n        if (!contextItem) {\n          throw new Error('Context is not available');\n        }\n        const updatedViewInputAfterFlavorChange = await expectViewUpdate(() => {\n          UI.Context.Context.instance().setFlavor(test.flavor, contextItem);\n          panel.handleAction(test.action);\n        });\n        expect(updatedViewInputAfterFlavorChange.selectedContext?.getItem()).equals(contextItem);\n      });\n\n      it(`should update the selected ${test.flavor.name} context whenever flavor changes`, async () => {\n        const {panel, expectViewUpdate} = await createAiAssistancePanel();\n        const updatedViewInput = await expectViewUpdate(() => {\n          panel.handleAction(test.action);\n        });\n        assert.isNull(updatedViewInput.selectedContext);\n        const context = test.createContext();\n        const contextItem = context.getItem();\n        if (!contextItem) {\n          throw new Error('Context is not available');\n        }\n        UI.Context.Context.instance().setFlavor(test.flavor, contextItem);\n        const updatedViewInputAfterFlavorChange = await expectViewUpdate(() => {\n          UI.Context.Context.instance().setFlavor(test.flavor, contextItem);\n        });\n        expect(updatedViewInputAfterFlavorChange.selectedContext?.getItem()).equals(contextItem);\n      });\n\n      it(`should ignore ${test.flavor.name} flavor change after the panel was hidden`, async () => {\n        const {initialViewInput, view, panel} = await createAiAssistancePanel();\n        assert.isNull(initialViewInput.selectedContext);\n        const callCount = view.callCount;\n        panel.hideWidget();\n        const context = test.createContext();\n        const contextItem = context.getItem();\n        if (!contextItem) {\n          throw new Error('Context is not available');\n        }\n        UI.Context.Context.instance().setFlavor(test.flavor, contextItem);\n        assert.strictEqual(view.callCount, callCount);\n      });\n    }\n\n    it('should set selected context to null when the change DOMNode flavor is not an ELEMENT_NODE', async () => {\n      const {panel, expectViewUpdate} = await createAiAssistancePanel();\n      const updatedViewInput = await expectViewUpdate(() => {\n        panel.handleAction('freestyler.elements-floating-button');\n      });\n      assert.isNull(updatedViewInput.selectedContext);\n\n      const node = sinon.createStubInstance(SDK.DOMModel.DOMNode, {\n        nodeType: Node.COMMENT_NODE,\n      });\n      const updatedViewInputAfterNodeChange = await expectViewUpdate(() => {\n        UI.Context.Context.instance().setFlavor(SDK.DOMModel.DOMNode, node);\n      });\n\n      assert.isNull(updatedViewInputAfterNodeChange.selectedContext);\n    });\n  });\n\n  describe('toggle search element action', () => {\n    let toggleSearchElementAction: UI.ActionRegistration.Action;\n    beforeEach(() => {\n      toggleSearchElementAction =\n          UI.ActionRegistry.ActionRegistry.instance().getAction('elements.toggle-element-search');\n      toggleSearchElementAction.setToggled(false);\n    });\n\n    it('should set inspectElementToggled when the widget is shown', async () => {\n      const {expectViewUpdate} = await createAiAssistancePanel();\n      const updatedViewInput = await expectViewUpdate(() => {\n        toggleSearchElementAction.setToggled(true);\n      });\n      assert.isTrue(updatedViewInput.inspectElementToggled);\n    });\n\n    it('should update inspectElementToggled when the action is toggled', async () => {\n      const {initialViewInput, expectViewUpdate} = await createAiAssistancePanel();\n      assert.isFalse(initialViewInput.inspectElementToggled);\n\n      const updatedViewInput = await expectViewUpdate(() => {\n        toggleSearchElementAction.setToggled(true);\n      });\n      assert.isTrue(updatedViewInput.inspectElementToggled);\n    });\n\n    it('should not update toggleSearchElementAction when the widget is not shown', async () => {\n      toggleSearchElementAction.setToggled(false);\n\n      const {view, panel} = await createAiAssistancePanel();\n      const callCount = view.callCount;\n      panel.hideWidget();\n\n      toggleSearchElementAction.setToggled(true);\n\n      const uiSourceCode = sinon.createStubInstance(Workspace.UISourceCode.UISourceCode);\n      UI.Context.Context.instance().setFlavor(Workspace.UISourceCode.UISourceCode, uiSourceCode);\n\n      assert.strictEqual(view.callCount, callCount);\n    });\n  });\n\n  describe('toolbar actions', () => {\n    it('should show chrome-ai view on settings click', async () => {\n      const stub = sinon.stub(UI.ViewManager.ViewManager.instance(), 'showView');\n      const {initialViewInput} = await createAiAssistancePanel();\n      initialViewInput.onSettingsClick();\n      assert.isTrue(stub.calledWith('chrome-ai'));\n    });\n  });\n\n  describe('history interactions', () => {\n    it('should have empty messages after new chat', async () => {\n      const {panel, expectViewUpdate} =\n          await createAiAssistancePanel({aidaClient: mockAidaClient([[{explanation: 'test'}]])});\n\n      const updatedViewInput = await expectViewUpdate(() => {\n        panel.handleAction('freestyler.elements-floating-button');\n      });\n\n      const updatedViewInputAfterMessage = await expectViewUpdate(() => {\n        updatedViewInput.onTextSubmit('test');\n      });\n\n      assert.deepEqual(updatedViewInputAfterMessage.messages, [\n        {\n          entity: AiAssistance.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistance.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      const updatedViewInputAfterNewChat = await expectViewUpdate(() => {\n        updatedViewInputAfterMessage.onNewChatClick();\n      });\n\n      assert.deepEqual(updatedViewInputAfterNewChat.messages, []);\n    });\n\n    it('should select default agent after new chat', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n      const {panel, expectViewUpdate} =\n          await createAiAssistancePanel({aidaClient: mockAidaClient([[{explanation: 'test'}]])});\n\n      const updatedViewInput = await expectViewUpdate(() => {\n        panel.handleAction('freestyler.elements-floating-button');\n      });\n\n      UI.Context.Context.instance().setFlavor(\n          Elements.ElementsPanel.ElementsPanel, sinon.createStubInstance(Elements.ElementsPanel.ElementsPanel));\n\n      const updatedViewInputAfterMessage = await expectViewUpdate(() => {\n        updatedViewInput.onTextSubmit('test');\n      });\n\n      assert.deepEqual(updatedViewInputAfterMessage.messages, [\n        {\n          entity: AiAssistance.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistance.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n      const updatedViewInputAfterNewChat = await expectViewUpdate(() => {\n        updatedViewInputAfterMessage.onNewChatClick();\n      });\n\n      assert.deepEqual(updatedViewInputAfterNewChat.messages, []);\n      assert.deepEqual(updatedViewInputAfterNewChat.agentType, AiAssistance.AgentType.STYLING);\n    });\n\n    it('should select the performance insights agent if it is enabled', async () => {\n      updateHostConfig({\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: true,\n          insightsEnabled: true,\n        },\n      });\n      const {panel, expectViewUpdate} =\n          await createAiAssistancePanel({aidaClient: mockAidaClient([[{explanation: 'test'}]])});\n\n      const updatedViewInput = await expectViewUpdate(() => {\n        panel.handleAction('freestyler.elements-floating-button');\n      });\n\n      const updatedViewInputAfterMessage = await expectViewUpdate(() => {\n        updatedViewInput.onTextSubmit('test');\n      });\n\n      UI.Context.Context.instance().setFlavor(\n          Timeline.TimelinePanel.TimelinePanel, sinon.createStubInstance(Timeline.TimelinePanel.TimelinePanel));\n\n      assert.deepEqual(updatedViewInputAfterMessage.messages, [\n        {\n          entity: AiAssistance.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistance.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n      const updatedViewInputAfterNewChat = await expectViewUpdate(() => {\n        updatedViewInputAfterMessage.onNewChatClick();\n      });\n\n      assert.deepEqual(updatedViewInputAfterNewChat.messages, []);\n      assert.deepEqual(updatedViewInputAfterNewChat.agentType, AiAssistance.AgentType.PERFORMANCE_INSIGHT);\n    });\n\n    it('should select the Dr Jones performance agent if insights are not enabled', async () => {\n      updateHostConfig({\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: true,\n          insightsEnabled: false,\n        },\n      });\n      const {panel, expectViewUpdate} =\n          await createAiAssistancePanel({aidaClient: mockAidaClient([[{explanation: 'test'}]])});\n\n      const updatedViewInput = await expectViewUpdate(() => {\n        panel.handleAction('freestyler.elements-floating-button');\n      });\n\n      const updatedViewInputAfterMessage = await expectViewUpdate(() => {\n        updatedViewInput.onTextSubmit('test');\n      });\n\n      UI.Context.Context.instance().setFlavor(\n          Timeline.TimelinePanel.TimelinePanel, sinon.createStubInstance(Timeline.TimelinePanel.TimelinePanel));\n\n      assert.deepEqual(updatedViewInputAfterMessage.messages, [\n        {\n          entity: AiAssistance.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistance.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n      const updatedViewInputAfterNewChat = await expectViewUpdate(() => {\n        updatedViewInputAfterMessage.onNewChatClick();\n      });\n\n      assert.deepEqual(updatedViewInputAfterNewChat.messages, []);\n      assert.deepEqual(updatedViewInputAfterNewChat.agentType, AiAssistance.AgentType.PERFORMANCE);\n    });\n\n    it('should switch agents and restore history', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n          multimodal: true,\n        },\n      });\n      const {panel, expectViewUpdate} = await createAiAssistancePanel(\n          {aidaClient: mockAidaClient([[{explanation: 'test'}], [{explanation: 'test2'}]])});\n      const updateViewInput = await expectViewUpdate(() => {\n        panel.handleAction('freestyler.elements-floating-button');\n      });\n      const imageInput = {inlineData: {data: 'imageinputbytes', mimeType: 'image/jpeg'}};\n      const updatedViewInputAfterInput = await expectViewUpdate(() => {\n        updateViewInput.onTextSubmit('User question to Freestyler?', imageInput);\n      });\n      assert.deepEqual(updatedViewInputAfterInput.messages, [\n        {\n          entity: AiAssistance.ChatMessageEntity.USER,\n          text: 'User question to Freestyler?',\n          imageInput,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistance.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      const updatedViewInputAfterSwitchToNetwork = await expectViewUpdate(() => {\n        panel.handleAction('drjones.network-floating-button');\n      });\n      const updatedViewInputAfterAnotherInput = await expectViewUpdate(() => {\n        updatedViewInputAfterSwitchToNetwork.onTextSubmit('User question to DrJones?');\n      });\n      assert.deepEqual(updatedViewInputAfterAnotherInput.messages, [\n        {\n          entity: AiAssistance.ChatMessageEntity.USER,\n          text: 'User question to DrJones?',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test2',\n          entity: AiAssistance.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      const contextMenu = getMenu(() => {\n        updatedViewInputAfterSwitchToNetwork.onHistoryClick(new MouseEvent('click'));\n      });\n      const freestylerEntry = findMenuItemWithLabel(contextMenu.defaultSection(), 'User question to Freestyler?')!;\n      assert.isDefined(freestylerEntry);\n      const updatedViewInput = await expectViewUpdate(() => {\n        contextMenu.invokeHandler(freestylerEntry.id());\n      });\n      assert.isTrue(updatedViewInput.isReadOnly);\n      assert.deepEqual(updatedViewInput.messages, [\n        {\n          entity: AiAssistance.ChatMessageEntity.USER,\n          text: 'User question to Freestyler?',\n          imageInput,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistance.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n    });\n\n    it('should not save partial responses to conversation history', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n      const addHistoryItemStub = sinon.stub(AiAssistance.Conversation.prototype, 'addHistoryItem');\n      UI.Context.Context.instance().setFlavor(\n          Elements.ElementsPanel.ElementsPanel, sinon.createStubInstance(Elements.ElementsPanel.ElementsPanel));\n      const {initialViewInput, expectViewUpdate} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient([[\n          {explanation: 'ANSWER: partially started'}, {explanation: 'ANSWER: partially started and now it\\'s finished'}\n        ]])\n      });\n      // Trigger running the conversation (observe that there are two answers: one partial, one complete)\n      await expectViewUpdate(() => {\n        initialViewInput.onTextSubmit('User question to Freestyler?');\n      });\n\n      sinon.assert.calledWith(\n          addHistoryItemStub, sinon.match({type: 'answer', text: 'partially started and now it\\'s finished'}));\n      sinon.assert.neverCalledWith(addHistoryItemStub, sinon.match({type: 'answer', text: 'partially started'}));\n    });\n  });\n\n  it('should have empty state after clear chat', async () => {\n    const {panel, expectViewUpdate} =\n        await createAiAssistancePanel({aidaClient: mockAidaClient([[{explanation: 'test'}]])});\n\n    const updatedViewInput = await expectViewUpdate(() => {\n      panel.handleAction('freestyler.elements-floating-button');\n    });\n\n    const updatedViewInputAfterMessage = await expectViewUpdate(() => {\n      updatedViewInput.onTextSubmit('test');\n    });\n    assert.deepEqual(updatedViewInputAfterMessage.messages, [\n      {\n        entity: AiAssistance.ChatMessageEntity.USER,\n        text: 'test',\n        imageInput: undefined,\n      },\n      {\n        answer: 'test',\n        entity: AiAssistance.ChatMessageEntity.MODEL,\n        rpcId: undefined,\n        suggestions: undefined,\n        steps: [],\n      },\n    ]);\n\n    const updatedViewInputAfterDelete = await expectViewUpdate(() => {\n      updatedViewInputAfterMessage.onDeleteClick();\n    });\n    assert.deepEqual(updatedViewInputAfterDelete.messages, []);\n    assert.isUndefined(updatedViewInputAfterDelete.agentType);\n  });\n\n  it('should select default agent based on open panel after clearing the chat', async () => {\n    updateHostConfig({\n      devToolsFreestyler: {\n        enabled: true,\n      },\n    });\n    UI.Context.Context.instance().setFlavor(\n        Elements.ElementsPanel.ElementsPanel, sinon.createStubInstance(Elements.ElementsPanel.ElementsPanel));\n    const {panel, expectViewUpdate} =\n        await createAiAssistancePanel({aidaClient: mockAidaClient([[{explanation: 'test'}]])});\n    const updatedViewInput = await expectViewUpdate(() => {\n      panel.handleAction('freestyler.elements-floating-button');\n    });\n    const updatedViewInputAfterMessage = await expectViewUpdate(() => {\n      updatedViewInput.onTextSubmit('test');\n    });\n    assert.deepEqual(updatedViewInputAfterMessage.messages, [\n      {\n        entity: AiAssistance.ChatMessageEntity.USER,\n        text: 'test',\n        imageInput: undefined,\n      },\n      {\n        answer: 'test',\n        entity: AiAssistance.ChatMessageEntity.MODEL,\n        rpcId: undefined,\n        suggestions: undefined,\n        steps: [],\n      },\n    ]);\n    const updatedViewInputAfterDelete = await expectViewUpdate(() => {\n      updatedViewInputAfterMessage.onDeleteClick();\n    });\n    assert.deepEqual(updatedViewInputAfterDelete.messages, []);\n    assert.deepEqual(updatedViewInputAfterDelete.agentType, AiAssistance.AgentType.STYLING);\n  });\n\n  it('should have empty state after clear chat history', async () => {\n    const {panel, expectViewUpdate} = await createAiAssistancePanel(\n        {aidaClient: mockAidaClient([[{explanation: 'test'}], [{explanation: 'test2'}]])});\n\n    const updatedViewInput = await expectViewUpdate(() => {\n      panel.handleAction('freestyler.elements-floating-button');\n    });\n    const updatedViewInputAfterMessage = await expectViewUpdate(() => {\n      updatedViewInput.onTextSubmit('User question to Freestyler?');\n    });\n    assert.deepEqual(updatedViewInputAfterMessage.messages, [\n      {\n        entity: AiAssistance.ChatMessageEntity.USER,\n        text: 'User question to Freestyler?',\n        imageInput: undefined,\n      },\n      {\n        answer: 'test',\n        entity: AiAssistance.ChatMessageEntity.MODEL,\n        rpcId: undefined,\n        suggestions: undefined,\n        steps: [],\n      },\n    ]);\n\n    const updatedViewInputAfterSwitchToNetwork = await expectViewUpdate(() => {\n      panel.handleAction('drjones.network-floating-button');\n    });\n    const updatedViewInputAfterMessageToNetwork = await expectViewUpdate(() => {\n      updatedViewInputAfterSwitchToNetwork.onTextSubmit('User question to DrJones?');\n    });\n    assert.deepEqual(updatedViewInputAfterMessageToNetwork.messages, [\n      {\n        entity: AiAssistance.ChatMessageEntity.USER,\n        text: 'User question to DrJones?',\n        imageInput: undefined,\n      },\n      {\n        answer: 'test2',\n        entity: AiAssistance.ChatMessageEntity.MODEL,\n        rpcId: undefined,\n        suggestions: undefined,\n        steps: [],\n      },\n    ]);\n\n    let contextMenu = getMenu(() => {\n      updatedViewInputAfterMessageToNetwork.onHistoryClick(new MouseEvent('click'));\n    });\n    const clearAll = findMenuItemWithLabel(contextMenu.footerSection(), 'Clear local chats')!;\n    assert.isDefined(clearAll);\n    const updatedViewInputAfterClearAll = await expectViewUpdate(() => {\n      contextMenu.invokeHandler(clearAll.id());\n    });\n    assert.deepEqual(updatedViewInputAfterClearAll.messages, []);\n    assert.isUndefined(updatedViewInputAfterClearAll.agentType);\n    contextMenu.discard();\n\n    contextMenu = getMenu(() => {\n      updatedViewInputAfterClearAll.onHistoryClick(new MouseEvent('click'));\n    });\n    const menuItem = findMenuItemWithLabel(contextMenu.defaultSection(), 'No past conversations');\n    assert(menuItem);\n  });\n\n  describe('cross-origin', () => {\n    beforeEach(async () => {\n      createTarget();\n      await createNetworkPanelForMockConnection();\n    });\n\n    afterEach(async () => {\n      Network.NetworkPanel.NetworkPanel.instance().detach();\n    });\n\n    it('blocks input on cross origin requests', async () => {\n      const networkRequest = createNetworkRequest({\n        url: urlString`https://a.test`,\n      });\n      UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest);\n\n      const {panel, expectViewUpdate} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient([\n          [{explanation: 'test'}],\n        ])\n      });\n      const updatedViewInput = await expectViewUpdate(() => {\n        panel.handleAction('drjones.network-floating-button');\n      });\n\n      assert.isFalse(updatedViewInput.blockedByCrossOrigin);\n      assert.strictEqual(updatedViewInput.selectedContext?.getItem(), networkRequest);\n\n      // Send a query for https://a.test.\n      await expectViewUpdate(() => {\n        panel.handleAction('drjones.network-floating-button');\n        updatedViewInput.onTextSubmit('test');\n      });\n\n      // Change context to https://b.test.\n      const networkRequest2 = createNetworkRequest({\n        url: urlString`https://b.test`,\n      });\n      UI.Context.Context.instance().setFlavor(SDK.NetworkRequest.NetworkRequest, networkRequest2);\n\n      const updatedViewInputWithCrossOriginContext = await expectViewUpdate(() => {\n        panel.handleAction('drjones.network-floating-button');\n      });\n\n      assert.isTrue(updatedViewInputWithCrossOriginContext.blockedByCrossOrigin);\n      assert.strictEqual(updatedViewInputWithCrossOriginContext.selectedContext?.getItem(), networkRequest2);\n    });\n\n    it('should be able to continue same-origin requests', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n        },\n      });\n\n      const {initialViewInput, panel, expectViewUpdate} = await createAiAssistancePanel({\n        aidaClient: mockAidaClient([[{explanation: 'test'}], [{explanation: 'test2'}]]),\n      });\n      UI.Context.Context.instance().setFlavor(\n          Elements.ElementsPanel.ElementsPanel, sinon.createStubInstance(Elements.ElementsPanel.ElementsPanel));\n\n      const updatedViewInput = await expectViewUpdate(() => {\n        panel.handleAction('freestyler.elements-floating-button');\n        initialViewInput.onTextSubmit('test');\n      });\n\n      assert.deepEqual(updatedViewInput.messages, [\n        {\n          entity: AiAssistance.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistance.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n\n      UI.Context.Context.instance().setFlavor(\n          Elements.ElementsPanel.ElementsPanel, sinon.createStubInstance(Elements.ElementsPanel.ElementsPanel));\n\n      const updatedViewInputAfterPanelChange = await expectViewUpdate(() => {\n        panel.handleAction('freestyler.elements-floating-button');\n        updatedViewInput.onTextSubmit('test2');\n      });\n\n      assert.isFalse(updatedViewInputAfterPanelChange.isReadOnly);\n      assert.deepEqual(updatedViewInputAfterPanelChange.messages, [\n        {\n          entity: AiAssistance.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test',\n          entity: AiAssistance.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n        {\n          entity: AiAssistance.ChatMessageEntity.USER,\n          text: 'test2',\n          imageInput: undefined,\n        },\n        {\n          answer: 'test2',\n          entity: AiAssistance.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n    });\n  });\n\n  describe('auto agent selection for panels', () => {\n    const tests: Array<{\n      panel: {new (...args: any[]): UI.Panel.Panel},\n      expectedAgentType: AiAssistance.AgentType,\n      featureFlagName: string,\n    }> =\n        [\n          {\n            panel: Elements.ElementsPanel.ElementsPanel,\n            expectedAgentType: AiAssistance.AgentType.STYLING,\n            featureFlagName: 'devToolsFreestyler',\n          },\n          {\n            panel: Network.NetworkPanel.NetworkPanel,\n            expectedAgentType: AiAssistance.AgentType.NETWORK,\n            featureFlagName: 'devToolsAiAssistanceNetworkAgent',\n          },\n          {\n            panel: Sources.SourcesPanel.SourcesPanel,\n            expectedAgentType: AiAssistance.AgentType.FILE,\n            featureFlagName: 'devToolsAiAssistanceFileAgent',\n          },\n          {\n            panel: Timeline.TimelinePanel.TimelinePanel,\n            expectedAgentType: AiAssistance.AgentType.PERFORMANCE,\n            featureFlagName: 'devToolsAiAssistancePerformanceAgent',\n          }\n        ];\n\n    for (const test of tests) {\n      it(`should select ${test.expectedAgentType} conversation when the panel ${test.panel.name} is opened`,\n          async () => {\n            updateHostConfig({\n              [test.featureFlagName]: {\n                enabled: true,\n              },\n            });\n            UI.Context.Context.instance().setFlavor(test.panel, sinon.createStubInstance(test.panel));\n\n            const {initialViewInput} = await createAiAssistancePanel({\n              aidaClient: mockAidaClient([[{explanation: 'test'}]]),\n            });\n\n            assert.strictEqual(initialViewInput.agentType, test.expectedAgentType);\n          });\n\n      it(`should reset the conversation when ${test.panel.name} is closed and no other panels are open`, async () => {\n        updateHostConfig({\n          [test.featureFlagName]: {\n            enabled: true,\n          },\n        });\n\n        UI.Context.Context.instance().setFlavor(test.panel, sinon.createStubInstance(test.panel));\n\n        const {initialViewInput, expectViewUpdate} = await createAiAssistancePanel();\n\n        assert.strictEqual(initialViewInput.agentType, test.expectedAgentType);\n\n        const updatedViewInput = await expectViewUpdate(() => {\n          UI.Context.Context.instance().setFlavor(test.panel, null);\n        });\n        assert.isUndefined(updatedViewInput.agentType);\n      });\n\n      it(`should render no conversation state if the ${\n             test.panel.name} panel is changed and the feature is not enabled`,\n          async () => {\n            updateHostConfig({\n              [test.featureFlagName]: {\n                enabled: false,\n              },\n            });\n            UI.Context.Context.instance().setFlavor(test.panel, sinon.createStubInstance(test.panel));\n            const {initialViewInput} = await createAiAssistancePanel();\n\n            assert.isUndefined(initialViewInput.agentType);\n          });\n    }\n\n    describe('Performance Insight agent', () => {\n      it('should select the PERFORMANCE_INSIGHT agent when the performance panel is open and insights are enabled',\n         async () => {\n           updateHostConfig({\n             devToolsAiAssistancePerformanceAgent: {\n               enabled: true,\n               insightsEnabled: true,\n             },\n           });\n           UI.Context.Context.instance().setFlavor(\n               Timeline.TimelinePanel.TimelinePanel, sinon.createStubInstance(Timeline.TimelinePanel.TimelinePanel));\n           const {initialViewInput} = await createAiAssistancePanel();\n\n           assert.strictEqual(initialViewInput.agentType, AiAssistance.AgentType.PERFORMANCE_INSIGHT);\n         });\n    });\n  });\n\n  it('erases previous partial response on blocked error', async () => {\n    const {initialViewInput, panel, expectViewUpdate} = await createAiAssistancePanel({\n      aidaClient: mockAidaClient([[{\n        explanation: 'This is the first part of the answer.',\n        metadata: {attributionMetadata: {attributionAction: Host.AidaClient.RecitationAction.BLOCK, citations: []}}\n      }]]),\n    });\n    const updatedViewInput = await expectViewUpdate(() => {\n      panel.handleAction('freestyler.elements-floating-button');\n      initialViewInput.onTextSubmit('test');\n    });\n\n    assert.deepEqual(updatedViewInput.messages, [\n      {\n        entity: AiAssistance.ChatMessageEntity.USER,\n        text: 'test',\n        imageInput: undefined,\n      },\n      {\n        answer: undefined,\n        entity: AiAssistance.ChatMessageEntity.MODEL,\n        rpcId: undefined,\n        error: AiAssistance.ErrorType.BLOCK,\n        steps: [],\n      },\n    ]);\n  });\n\n  describe('multimodal input', () => {\n    function mockScreenshotModel() {\n      const target = createTarget();\n      const screenCaptureModel = target.model(SDK.ScreenCaptureModel.ScreenCaptureModel);\n      assert.exists(screenCaptureModel);\n      return {\n        captureScreenshotStub:\n            sinon.stub(screenCaptureModel, 'captureScreenshot').returns(Promise.resolve('imageInput')),\n      };\n    }\n\n    it('multimodal related functions unavailable when multimodal is disabled', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n          multimodal: false,\n        },\n      });\n      UI.Context.Context.instance().setFlavor(\n          Elements.ElementsPanel.ElementsPanel, sinon.createStubInstance(Elements.ElementsPanel.ElementsPanel));\n      const {initialViewInput} = await createAiAssistancePanel();\n\n      assert.isFalse(initialViewInput.multimodalInputEnabled);\n      assert.notExists(initialViewInput.onTakeScreenshot);\n      assert.notExists(initialViewInput.onRemoveImageInput);\n      assert.isEmpty(initialViewInput.imageInput);\n    });\n\n    it('adds an image input and then removes it', async () => {\n      const {captureScreenshotStub} = mockScreenshotModel();\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n          multimodal: true,\n        },\n      });\n      UI.Context.Context.instance().setFlavor(\n          Elements.ElementsPanel.ElementsPanel, sinon.createStubInstance(Elements.ElementsPanel.ElementsPanel));\n      const {initialViewInput, expectViewUpdate} = await createAiAssistancePanel();\n\n      assert.isTrue(initialViewInput.multimodalInputEnabled);\n\n      const updatedViewInput = await expectViewUpdate(() => {\n        initialViewInput.onTakeScreenshot?.();\n      });\n\n      expect(captureScreenshotStub.calledOnce);\n      assert.deepEqual(updatedViewInput.imageInput, 'imageInput');\n\n      const updatedViewInputAfterImageRemoval = await expectViewUpdate(() => {\n        updatedViewInput.onRemoveImageInput?.();\n      });\n      assert.isEmpty(updatedViewInputAfterImageRemoval.imageInput);\n    });\n\n    it('sends image as input', async () => {\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n          multimodal: true,\n        },\n      });\n      UI.Context.Context.instance().setFlavor(\n          Elements.ElementsPanel.ElementsPanel, sinon.createStubInstance(Elements.ElementsPanel.ElementsPanel));\n      const {initialViewInput, expectViewUpdate} =\n          await createAiAssistancePanel({aidaClient: mockAidaClient([[{explanation: 'test'}]])});\n\n      assert.isTrue(initialViewInput.multimodalInputEnabled);\n\n      const updatedViewInput = await expectViewUpdate(() => {\n        initialViewInput.onTextSubmit('test', {inlineData: {data: 'imageInput', mimeType: 'image/jpeg'}});\n      });\n\n      assert.deepEqual(updatedViewInput.messages, [\n        {\n          entity: AiAssistance.ChatMessageEntity.USER,\n          text: 'test',\n          imageInput: {inlineData: {data: 'imageInput', mimeType: 'image/jpeg'}}\n        },\n        {\n          answer: 'test',\n          entity: AiAssistance.ChatMessageEntity.MODEL,\n          rpcId: undefined,\n          suggestions: undefined,\n          steps: [],\n        },\n      ]);\n    });\n  });\n\n  describe('workspace', () => {\n    function createTestFilesystem(fileSystemPath: string) {\n      const {project, uiSourceCode} = createFileSystemUISourceCode({\n        url: Platform.DevToolsPath.urlString`file:///example.html`,\n        mimeType: 'text/html',\n        content: 'content',\n        fileSystemPath,\n      });\n      return {project, uiSourceCode};\n    }\n\n    it('does not report a workspace project if disabled', async () => {\n      createTestFilesystem('file://test');\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n          patching: false,\n        },\n      });\n      const {\n        initialViewInput,\n      } = await createAiAssistancePanel();\n      assert.strictEqual(initialViewInput.projectName, '');\n    });\n\n    it('reports a current workspace project', async () => {\n      createTestFilesystem('file://test');\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n          patching: true,\n        },\n      });\n      const {\n        initialViewInput,\n      } = await createAiAssistancePanel();\n      assert.strictEqual(initialViewInput.projectName, 'test');\n    });\n\n    it('reports an updated project', async () => {\n      const {project} = createTestFilesystem('file://test');\n      updateHostConfig({\n        devToolsFreestyler: {\n          enabled: true,\n          patching: true,\n        },\n      });\n      const {initialViewInput, expectViewUpdate} = await createAiAssistancePanel();\n      assert.strictEqual(initialViewInput.projectName, 'test');\n\n      const updatedViewInput = await expectViewUpdate(() => {\n        Workspace.Workspace.WorkspaceImpl.instance().removeProject(project);\n        createTestFilesystem('file://test2');\n      });\n      assert.strictEqual(updatedViewInput.projectName, 'test2');\n    });\n  });\n});\n"]}