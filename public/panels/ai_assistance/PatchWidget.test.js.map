{"version":3,"file":"PatchWidget.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/ai_assistance/PatchWidget.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,QAAQ,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,SAAS,MAAM,qCAAqC,CAAC;AACjE,OAAO,EACL,OAAO,EACP,iBAAiB,GAClB,MAAM,sCAAsC,CAAC;AAC9C,OAAO,EAAC,gBAAgB,EAAC,MAAM,qCAAqC,CAAC;AACrE,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAC3E,OAAO,EAAC,4BAA4B,EAAC,MAAM,sCAAsC,CAAC;AAElF,0BAA0B,CAAC,WAAW,EAAE,GAAG,EAAE;IAC3C,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC,CAAC;IAEH,SAAS,oBAAoB,CAAC,cAAsB;QAClD,MAAM,EAAC,OAAO,EAAE,YAAY,EAAC,GAAG,4BAA4B,CAAC;YAC3D,GAAG,EAAE,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAA,sBAAsB;YAC1D,QAAQ,EAAE,WAAW;YACrB,OAAO,EAAE,SAAS;YAClB,cAAc;SACf,CAAC,CAAC;QACH,OAAO,EAAC,OAAO,EAAE,YAAY,EAAC,CAAC;IACjC,CAAC;IAED,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,oBAAoB,CAAC,aAAa,CAAC,CAAC;QACpC,gBAAgB,CAAC;YACf,kBAAkB,EAAE;gBAClB,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,KAAK;aAChB;SACF,CAAC,CAAC;QACH,MAAM,EACJ,gBAAgB,GACjB,GAAG,MAAM,iBAAiB,EAAE,CAAC;QAC9B,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,oBAAoB,CAAC,aAAa,CAAC,CAAC;QACpC,gBAAgB,CAAC;YACf,kBAAkB,EAAE;gBAClB,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,IAAI;aACf;SACF,CAAC,CAAC;QACH,MAAM,EACJ,gBAAgB,GACjB,GAAG,MAAM,iBAAiB,EAAE,CAAC;QAC9B,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC1C,MAAM,EAAC,OAAO,EAAC,GAAG,oBAAoB,CAAC,aAAa,CAAC,CAAC;QACtD,gBAAgB,CAAC;YACf,kBAAkB,EAAE;gBAClB,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,IAAI;aACf;SACF,CAAC,CAAC;QACH,MAAM,EAAC,gBAAgB,EAAE,gBAAgB,EAAC,GAAG,MAAM,iBAAiB,EAAE,CAAC;QACvE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAEzD,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,GAAG,EAAE;YACnD,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACpE,oBAAoB,CAAC,cAAc,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport {\n  cleanup,\n  createPatchWidget,\n} from '../../testing/AiAssistanceHelpers.js';\nimport {updateHostConfig} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {createFileSystemUISourceCode} from '../../testing/UISourceCodeHelpers.js';\n\ndescribeWithMockConnection('workspace', () => {\n  afterEach(() => {\n    cleanup();\n  });\n\n  function createTestFilesystem(fileSystemPath: string) {\n    const {project, uiSourceCode} = createFileSystemUISourceCode({\n      url: Platform.DevToolsPath.urlString`file:///example.html`,\n      mimeType: 'text/html',\n      content: 'content',\n      fileSystemPath,\n    });\n    return {project, uiSourceCode};\n  }\n\n  it('does not report a workspace project if disabled', async () => {\n    createTestFilesystem('file://test');\n    updateHostConfig({\n      devToolsFreestyler: {\n        enabled: true,\n        patching: false,\n      },\n    });\n    const {\n      initialViewInput,\n    } = await createPatchWidget();\n    assert.isUndefined(initialViewInput.projectName);\n  });\n\n  it('reports a current workspace project', async () => {\n    createTestFilesystem('file://test');\n    updateHostConfig({\n      devToolsFreestyler: {\n        enabled: true,\n        patching: true,\n      },\n    });\n    const {\n      initialViewInput,\n    } = await createPatchWidget();\n    assert.strictEqual(initialViewInput.projectName, 'test');\n  });\n\n  it('reports an updated project', async () => {\n    const {project} = createTestFilesystem('file://test');\n    updateHostConfig({\n      devToolsFreestyler: {\n        enabled: true,\n        patching: true,\n      },\n    });\n    const {initialViewInput, expectViewUpdate} = await createPatchWidget();\n    assert.strictEqual(initialViewInput.projectName, 'test');\n\n    const updatedViewInput = await expectViewUpdate(() => {\n      Workspace.Workspace.WorkspaceImpl.instance().removeProject(project);\n      createTestFilesystem('file://test2');\n    });\n    assert.strictEqual(updatedViewInput.projectName, 'test2');\n  });\n});\n"]}