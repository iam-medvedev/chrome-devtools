{"version":3,"file":"AiHistoryStorage.js","sourceRoot":"","sources":["../../../../../../front_end/panels/ai_assistance/AiHistoryStorage.ts"],"names":[],"mappings":"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","sourcesContent":["\n// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\n\nimport {type ResponseData, ResponseType} from './agents/AiAgent.js';\n\nexport const enum ConversationType {\n  STYLING = 'freestyler',\n  FILE = 'drjones-file',\n  NETWORK = 'drjones-network-request',\n  PERFORMANCE = 'drjones-performance',\n  PERFORMANCE_INSIGHT = 'performance-insight',\n}\n\nexport interface SerializedConversation {\n  id: string;\n  type: ConversationType;\n  history: ResponseData[];\n}\n\nexport class Conversation {\n  static fromSerialized(serialized: SerializedConversation): Conversation {\n    return new Conversation(serialized.type, serialized.history, serialized.id, true);\n  }\n\n  readonly id: string;\n  readonly history: ResponseData[];\n  readonly type: ConversationType;\n  readonly isReadOnly: boolean;\n\n  constructor(type: ConversationType, data: ResponseData[] = [], id: string = crypto.randomUUID(), isReadOnly = true) {\n    this.type = type;\n    this.history = data;\n    this.id = id;\n    this.isReadOnly = isReadOnly;\n  }\n\n  get title(): string|undefined {\n    return this.history\n        .filter(response => {\n          return response.type === ResponseType.USER_QUERY;\n        })\n        .at(0)\n        ?.query;\n  }\n\n  get isEmpty(): boolean {\n    return this.history.length === 0;\n  }\n\n  addHistoryItem(item: ResponseData): void {\n    if (item.type === ResponseType.USER_QUERY) {\n      const historyItem = {...item, imageInput: undefined};\n      this.history.push(historyItem);\n    } else {\n      this.history.push(item);\n    }\n    void AiHistoryStorage.instance().upsertHistoryEntry(this.serialize());\n  }\n\n  serialize(): SerializedConversation {\n    return {\n      id: this.id,\n      history: this.history,\n      type: this.type,\n    };\n  }\n}\n\nlet instance: AiHistoryStorage|null = null;\nexport class AiHistoryStorage {\n  #historySetting: Common.Settings.Setting<SerializedConversation[]>;\n  #mutex = new Common.Mutex.Mutex();\n\n  constructor() {\n    // This should not throw as we should be creating the setting in the `-meta.ts` file\n    this.#historySetting = Common.Settings.Settings.instance().createSetting('ai-assistance-history-entries', []);\n  }\n\n  clearForTest(): void {\n    this.#historySetting.set([]);\n  }\n\n  async upsertHistoryEntry(agentEntry: SerializedConversation): Promise<void> {\n    const release = await this.#mutex.acquire();\n    try {\n      const history = structuredClone(await this.#historySetting.forceGet());\n      const historyEntryIndex = history.findIndex(entry => entry.id === agentEntry.id);\n      if (historyEntryIndex !== -1) {\n        history[historyEntryIndex] = agentEntry;\n      } else {\n        history.push(agentEntry);\n      }\n      this.#historySetting.set(history);\n    } finally {\n      release();\n    }\n  }\n\n  async deleteHistoryEntry(id: string): Promise<void> {\n    const release = await this.#mutex.acquire();\n    try {\n      const history = structuredClone(await this.#historySetting.forceGet());\n      this.#historySetting.set(\n          history.filter(entry => entry.id !== id),\n      );\n    } finally {\n      release();\n    }\n  }\n\n  async deleteAll(): Promise<void> {\n    const release = await this.#mutex.acquire();\n    try {\n      this.#historySetting.set([]);\n    } finally {\n      release();\n    }\n  }\n\n  getHistory(): SerializedConversation[] {\n    return structuredClone(this.#historySetting.get());\n  }\n\n  static instance(forceNew = false): AiHistoryStorage {\n    if (!instance || forceNew) {\n      instance = new AiHistoryStorage();\n    }\n    return instance;\n  }\n}\n"]}