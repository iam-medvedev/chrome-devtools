{"version":3,"file":"AiHistoryStorage.js","sourceRoot":"","sources":["../../../../../../front_end/panels/ai_assistance/AiHistoryStorage.ts"],"names":[],"mappings":"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","sourcesContent":["\n// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\n\nimport {type ResponseData, ResponseType} from './agents/AiAgent.js';\n\nconst MAX_TITLE_LENGTH = 80;\n\nexport const enum ConversationType {\n  STYLING = 'freestyler',\n  FILE = 'drjones-file',\n  NETWORK = 'drjones-network-request',\n  PERFORMANCE = 'drjones-performance',\n  PERFORMANCE_INSIGHT = 'performance-insight',\n}\n\nexport const NOT_FOUND_IMAGE_DATA = '';\n\nexport interface SerializedConversation {\n  id: string;\n  type: ConversationType;\n  history: ResponseData[];\n}\n\nexport interface SerializedImage {\n  id: string;\n  // The IANA standard MIME type of the source data.\n  // Currently supported types are: image/png, image/jpeg.\n  // Format: base64-encoded\n  // For reference: google3/google/x/pitchfork/aida/v1/content.proto\n  mimeType: string;\n  data: string;\n}\n\nexport class Conversation {\n  readonly id: string;\n  readonly type: ConversationType;\n  #isReadOnly: boolean;\n  readonly history: ResponseData[];\n\n  constructor(type: ConversationType, data: ResponseData[] = [], id: string = crypto.randomUUID(), isReadOnly = true) {\n    this.type = type;\n    this.id = id;\n    this.#isReadOnly = isReadOnly;\n    this.history = this.#reconstructHistory(data);\n  }\n\n  get isReadOnly(): boolean {\n    return this.#isReadOnly;\n  }\n\n  get title(): string|undefined {\n    const query = this.history.find(response => response.type === ResponseType.USER_QUERY)?.query;\n\n    if (!query) {\n      return;\n    }\n\n    return `${query.substring(0, MAX_TITLE_LENGTH)}${query.length > MAX_TITLE_LENGTH ? 'â€¦' : ''}`;\n  }\n\n  get isEmpty(): boolean {\n    return this.history.length === 0;\n  }\n\n  #reconstructHistory(historyWithoutImages: ResponseData[]): ResponseData[] {\n    const imageHistory = AiHistoryStorage.instance().getImageHistory();\n    if (imageHistory && imageHistory.length > 0) {\n      const history: ResponseData[] = [];\n      for (const data of historyWithoutImages) {\n        if (data.type === ResponseType.USER_QUERY && data.imageId) {\n          const image = imageHistory.find(item => item.id === data.imageId);\n          const inlineData = image ? {data: image.data, mimeType: image.mimeType} :\n                                     {data: NOT_FOUND_IMAGE_DATA, mimeType: 'image/jpeg'};\n          history.push({...data, imageInput: {inlineData}});\n        } else {\n          history.push(data);\n        }\n      }\n      return history;\n    }\n    return historyWithoutImages;\n  }\n\n  archiveConversation(): void {\n    this.#isReadOnly = true;\n  }\n\n  async addHistoryItem(item: ResponseData): Promise<void> {\n    if (item.type === ResponseType.USER_QUERY) {\n      if (item.imageId && item.imageInput && 'inlineData' in item.imageInput) {\n        const inlineData = item.imageInput.inlineData;\n        await AiHistoryStorage.instance().upsertImage(\n            {id: item.imageId, data: inlineData.data, mimeType: inlineData.mimeType});\n      }\n    }\n    this.history.push(item);\n    await AiHistoryStorage.instance().upsertHistoryEntry(this.serialize());\n  }\n\n  serialize(): SerializedConversation {\n    return {\n      id: this.id,\n      history: this.history.map(item => {\n        if (item.type === ResponseType.USER_QUERY) {\n          return {...item, imageInput: undefined};\n        }\n        return item;\n      }),\n      type: this.type,\n    };\n  }\n}\n\nlet instance: AiHistoryStorage|null = null;\n\nconst DEFAULT_MAX_STORAGE_SIZE = 50 * 1024 * 1024;\n\nexport class AiHistoryStorage {\n  #historySetting: Common.Settings.Setting<SerializedConversation[]>;\n  #imageHistorySettings: Common.Settings.Setting<SerializedImage[]>;\n  #mutex = new Common.Mutex.Mutex();\n  #maxStorageSize: number;\n\n  constructor(maxStorageSize = DEFAULT_MAX_STORAGE_SIZE) {\n    this.#historySetting = Common.Settings.Settings.instance().createSetting('ai-assistance-history-entries', []);\n    this.#imageHistorySettings = Common.Settings.Settings.instance().createSetting(\n        'ai-assistance-history-images',\n        [],\n    );\n    this.#maxStorageSize = maxStorageSize;\n  }\n\n  clearForTest(): void {\n    this.#historySetting.set([]);\n    this.#imageHistorySettings.set([]);\n  }\n\n  async upsertHistoryEntry(agentEntry: SerializedConversation): Promise<void> {\n    const release = await this.#mutex.acquire();\n    try {\n      const history = structuredClone(await this.#historySetting.forceGet());\n      const historyEntryIndex = history.findIndex(entry => entry.id === agentEntry.id);\n      if (historyEntryIndex !== -1) {\n        history[historyEntryIndex] = agentEntry;\n      } else {\n        history.push(agentEntry);\n      }\n      this.#historySetting.set(history);\n    } finally {\n      release();\n    }\n  }\n\n  async upsertImage(image: SerializedImage): Promise<void> {\n    const release = await this.#mutex.acquire();\n    try {\n      const imageHistory = structuredClone(await this.#imageHistorySettings.forceGet());\n      const imageHistoryEntryIndex = imageHistory.findIndex(entry => entry.id === image.id);\n      if (imageHistoryEntryIndex !== -1) {\n        imageHistory[imageHistoryEntryIndex] = image;\n      } else {\n        imageHistory.push(image);\n      }\n\n      const imagesToBeStored: SerializedImage[] = [];\n      let currentStorageSize = 0;\n\n      for (const [, serializedImage] of Array\n               .from(\n                   imageHistory.entries(),\n                   )\n               .reverse()) {\n        if (currentStorageSize >= this.#maxStorageSize) {\n          break;\n        }\n        currentStorageSize += serializedImage.data.length;\n        imagesToBeStored.push(serializedImage);\n      }\n\n      this.#imageHistorySettings.set(imagesToBeStored.reverse());\n    } finally {\n      release();\n    }\n  }\n\n  async deleteHistoryEntry(id: string): Promise<void> {\n    const release = await this.#mutex.acquire();\n    try {\n      const history = structuredClone(await this.#historySetting.forceGet());\n      const imageIdsForDeletion = history.find(entry => entry.id === id)\n                                      ?.history\n                                      .map(item => {\n                                        if (item.type === ResponseType.USER_QUERY && item.imageId) {\n                                          return item.imageId;\n                                        }\n                                        return undefined;\n                                      })\n                                      .filter(item => Boolean(item));\n      this.#historySetting.set(\n          history.filter(entry => entry.id !== id),\n      );\n      const images = structuredClone(await this.#imageHistorySettings.forceGet());\n      this.#imageHistorySettings.set(\n          // Filter images for which ids are not present in deletion list\n          images.filter(entry => !Boolean(imageIdsForDeletion?.find(id => id === entry.id))));\n    } finally {\n      release();\n    }\n  }\n\n  async deleteAll(): Promise<void> {\n    const release = await this.#mutex.acquire();\n    try {\n      this.#historySetting.set([]);\n      this.#imageHistorySettings.set([]);\n    } finally {\n      release();\n    }\n  }\n\n  getHistory(): SerializedConversation[] {\n    return structuredClone(this.#historySetting.get());\n  }\n\n  getImageHistory(): SerializedImage[] {\n    return structuredClone(this.#imageHistorySettings.get());\n  }\n\n  static instance(\n      opts: {\n        forceNew: boolean,\n        maxStorageSize?: number,\n      } = {forceNew: false, maxStorageSize: DEFAULT_MAX_STORAGE_SIZE},\n      ): AiHistoryStorage {\n    const {forceNew, maxStorageSize} = opts;\n    if (!instance || forceNew) {\n      instance = new AiHistoryStorage(maxStorageSize);\n    }\n    return instance;\n  }\n}\n"]}