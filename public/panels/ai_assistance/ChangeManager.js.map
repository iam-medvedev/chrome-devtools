{"version":3,"file":"ChangeManager.js","sourceRoot":"","sources":["../../../../../../front_end/panels/ai_assistance/ChangeManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nexport interface Change {\n  groupId: string;\n  // Optional about where in the source the selector was defined.\n  sourceLocation?: string;\n  selector: string;\n  className: string;\n  styles: Record<string, string>;\n}\n\nfunction formatStyles(styles: Record<string, string>, indent = 2): string {\n  const kebabStyles = Platform.StringUtilities.toKebabCaseKeys(styles);\n  const lines = Object.entries(kebabStyles).map(([key, value]) => `${' '.repeat(indent)}${key}: ${value};`);\n  return lines.join('\\n');\n}\n\n/**\n * Keeps track of changes done by the Styling agent. Currently, it is\n * primarily for stylesheet generation based on all changes.\n */\nexport class ChangeManager {\n  readonly #stylesheetMutex = new Common.Mutex.Mutex();\n  readonly #cssModelToStylesheetId =\n      new Map<SDK.CSSModel.CSSModel, Map<Protocol.Page.FrameId, Protocol.CSS.StyleSheetId>>();\n  readonly #stylesheetChanges = new Map<Protocol.CSS.StyleSheetId, Change[]>();\n\n  async clear(): Promise<void> {\n    const models = Array.from(this.#cssModelToStylesheetId.keys());\n    const results = await Promise.allSettled(models.map(async model => {\n      await this.#onCssModelDisposed({data: model});\n    }));\n    this.#cssModelToStylesheetId.clear();\n    this.#stylesheetChanges.clear();\n    const firstFailed = results.find(result => result.status === 'rejected');\n    if (firstFailed) {\n      throw new Error(firstFailed.reason);\n    }\n  }\n\n  async addChange(cssModel: SDK.CSSModel.CSSModel, frameId: Protocol.Page.FrameId, change: Change): Promise<string> {\n    const stylesheetId = await this.#getStylesheet(cssModel, frameId);\n    const changes = this.#stylesheetChanges.get(stylesheetId) || [];\n    const existingChange = changes.find(c => c.className === change.className);\n    if (existingChange) {\n      Object.assign(existingChange.styles, change.styles);\n      // This combines all style changes for a given element,\n      // regardless of the conversation they originated from, into a single rule.\n      // While separating these changes by conversation would be ideal,\n      // it currently causes crashes in the Styles tab when duplicate selectors exist (crbug.com/393515428).\n      // This workaround avoids that crash.\n      existingChange.groupId = change.groupId;\n    } else {\n      changes.push(change);\n    }\n    const content = this.formatChangesForInspectoStylesheet(changes);\n    await cssModel.setStyleSheetText(stylesheetId, content, true);\n    this.#stylesheetChanges.set(stylesheetId, changes);\n    return content;\n  }\n\n  formatChangesForPatching(groupId: string, includeSourceLocation = false): string {\n    return Array.from(this.#stylesheetChanges.values())\n        .flatMap(\n            changesPerStylesheet => changesPerStylesheet.filter(change => change.groupId === groupId)\n                                        .map(change => this.#formatChange(change, includeSourceLocation)))\n        .join('\\n\\n');\n  }\n\n  formatChangesForInspectoStylesheet(changes: Change[]): string {\n    return changes\n        .map(change => {\n          return `.${change.className} {\n  ${change.selector}& {\n${formatStyles(change.styles, 4)}\n  }\n}`;\n        })\n        .join('\\n');\n  }\n\n  #formatChange(change: Change, includeSourceLocation = false): string {\n    const sourceLocation =\n        includeSourceLocation && change.sourceLocation ? `/* related resource: ${change.sourceLocation} */\\n` : '';\n    return `${sourceLocation}${change.selector} {\n${formatStyles(change.styles)}\n}`;\n  }\n\n  async #getStylesheet(cssModel: SDK.CSSModel.CSSModel, frameId: Protocol.Page.FrameId):\n      Promise<Protocol.CSS.StyleSheetId> {\n    return await this.#stylesheetMutex.run(async () => {\n      let frameToStylesheet = this.#cssModelToStylesheetId.get(cssModel);\n      if (!frameToStylesheet) {\n        frameToStylesheet = new Map();\n        this.#cssModelToStylesheetId.set(cssModel, frameToStylesheet);\n        cssModel.addEventListener(SDK.CSSModel.Events.ModelDisposed, this.#onCssModelDisposed, this);\n      }\n      let stylesheetId = frameToStylesheet.get(frameId);\n      if (!stylesheetId) {\n        const styleSheetHeader = await cssModel.createInspectorStylesheet(frameId, /* force */ true);\n        if (!styleSheetHeader) {\n          throw new Error('inspector-stylesheet is not found');\n        }\n        stylesheetId = styleSheetHeader.id;\n        frameToStylesheet.set(frameId, stylesheetId);\n      }\n      return stylesheetId;\n    });\n  }\n\n  async #onCssModelDisposed(event: Common.EventTarget.EventTargetEvent<SDK.CSSModel.CSSModel>): Promise<void> {\n    return await this.#stylesheetMutex.run(async () => {\n      const cssModel = event.data;\n      cssModel.removeEventListener(SDK.CSSModel.Events.ModelDisposed, this.#onCssModelDisposed, this);\n      const stylesheetIds = Array.from(this.#cssModelToStylesheetId.get(cssModel)?.values() ?? []);\n      // Empty stylesheets.\n      const results = await Promise.allSettled(stylesheetIds.map(async id => {\n        this.#stylesheetChanges.delete(id);\n        await cssModel.setStyleSheetText(id, '', true);\n      }));\n      this.#cssModelToStylesheetId.delete(cssModel);\n      const firstFailed = results.find(result => result.status === 'rejected');\n      if (firstFailed) {\n        throw new Error(firstFailed.reason);\n      }\n    });\n  }\n}\n"]}