{"version":3,"file":"AiAgent.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/ai_assistance/agents/AiAgent.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport type * as Lit from '../../../ui/lit/lit.js';\nimport {debugLog, isDebugMode} from '../debug.js';\n\nexport const enum ResponseType {\n  CONTEXT = 'context',\n  TITLE = 'title',\n  THOUGHT = 'thought',\n  ACTION = 'action',\n  SIDE_EFFECT = 'side-effect',\n  SUGGESTIONS = 'suggestions',\n  ANSWER = 'answer',\n  ERROR = 'error',\n  QUERYING = 'querying',\n  USER_QUERY = 'user-query',\n}\n\nexport const enum ErrorType {\n  UNKNOWN = 'unknown',\n  ABORT = 'abort',\n  MAX_STEPS = 'max-steps',\n  BLOCK = 'block',\n}\n\nexport interface AnswerResponse {\n  type: ResponseType.ANSWER;\n  text: string;\n  // Whether this is the complete answer or only a part of it (for streaming reasons)\n  complete: boolean;\n  rpcId?: Host.AidaClient.RpcGlobalId;\n  suggestions?: [string, ...string[]];\n}\n\nexport interface SuggestionsResponse {\n  type: ResponseType.SUGGESTIONS;\n  suggestions: [string, ...string[]];\n}\n\nexport interface ErrorResponse {\n  type: ResponseType.ERROR;\n  error: ErrorType;\n}\n\nexport interface ContextDetail {\n  title: string;\n  text: string;\n  codeLang?: string;\n}\nexport interface ContextResponse {\n  type: ResponseType.CONTEXT;\n  title: string;\n  details: [ContextDetail, ...ContextDetail[]];\n}\n\nexport interface TitleResponse {\n  type: ResponseType.TITLE;\n  title: string;\n  rpcId?: Host.AidaClient.RpcGlobalId;\n}\n\nexport interface ThoughtResponse {\n  type: ResponseType.THOUGHT;\n  thought: string;\n  rpcId?: Host.AidaClient.RpcGlobalId;\n}\n\nexport interface SideEffectResponse {\n  type: ResponseType.SIDE_EFFECT;\n  code?: string;\n  confirm: (confirm: boolean) => void;\n}\n\nexport interface ActionResponse {\n  type: ResponseType.ACTION;\n  code?: string;\n  output?: string;\n  canceled: boolean;\n}\n\nexport interface QueryResponse {\n  type: ResponseType.QUERYING;\n  query?: string;\n  imageInput?: Host.AidaClient.Part;\n}\n\nexport interface UserQuery {\n  type: ResponseType.USER_QUERY;\n  query: string;\n  imageInput?: Host.AidaClient.Part;\n}\n\nexport type ResponseData = AnswerResponse|SuggestionsResponse|ErrorResponse|ActionResponse|SideEffectResponse|\n    ThoughtResponse|TitleResponse|QueryResponse|ContextResponse|UserQuery;\n\nexport type FunctionCallResponseData =\n    TitleResponse|ThoughtResponse|ActionResponse|SideEffectResponse|SuggestionsResponse;\n\nexport interface BuildRequestOptions {\n  text: string;\n}\n\nexport interface RequestOptions {\n  temperature?: number;\n  modelId?: string;\n}\n\nexport interface AgentOptions {\n  aidaClient: Host.AidaClient.AidaClient;\n  serverSideLoggingEnabled?: boolean;\n  confirmSideEffectForTest?: typeof Promise.withResolvers;\n}\n\nexport interface ParsedAnswer {\n  answer: string;\n  suggestions?: [string, ...string[]];\n}\n\nexport interface ParsedStep {\n  thought?: string;\n  title?: string;\n  action?: string;\n}\n\nexport type ParsedResponse = ParsedAnswer|ParsedStep;\n\nexport const enum AgentType {\n  STYLING = 'freestyler',\n  FILE = 'drjones-file',\n  NETWORK = 'drjones-network-request',\n  PERFORMANCE = 'drjones-performance',\n  PERFORMANCE_INSIGHT = 'performance-insight',\n  PATCH = 'patch',\n}\n\nexport const MAX_STEPS = 10;\n\nexport abstract class ConversationContext<T> {\n  abstract getOrigin(): string;\n  abstract getItem(): T;\n  abstract getIcon(): HTMLElement;\n  abstract getTitle(): string|ReturnType<typeof Lit.Directives.until>;\n\n  isOriginAllowed(agentOrigin: string|undefined): boolean {\n    if (!agentOrigin) {\n      return true;\n    }\n    // Currently does not handle opaque origins because they\n    // are not available to DevTools, instead checks\n    // that serialization of the origin is the same\n    // https://html.spec.whatwg.org/#ascii-serialisation-of-an-origin.\n    return this.getOrigin() === agentOrigin;\n  }\n\n  /**\n   * This method is called at the start of `AiAgent.run`.\n   * It will be overridden in subclasses to fetch data related to the context item.\n   */\n  async refresh(): Promise<void> {\n    return;\n  }\n}\n\nexport type FunctionCallHandlerResult<Result> = {\n  result: Result,\n}|{\n  requiresApproval: true,\n}|{error: string};\n\nexport interface FunctionDeclaration<Args extends Record<string, unknown>, ReturnType> {\n  /**\n   * Description of function, this is send to the LLM\n   * to explain what will the function do.\n   */\n  description: string;\n  /**\n   * JSON schema like representation of the parameters\n   * the function needs to be called with.\n   * Provide description to all parameters as this is\n   * send to the LLM.\n   */\n  parameters: Host.AidaClient.FunctionObjectParam<keyof Args>;\n  /**\n   * Provided a way to give information back to\n   * the UI before running the the handler\n   */\n  displayInfoFromArgs?: (\n      args: Args,\n      ) => {\n    title?: string, thought?: string, code?: string, suggestions?: [string, ...string[]],\n  };\n  /**\n   * Function implementation that the LLM will try to execute,\n   */\n  handler: (args: Args, options?: {\n    /**\n     * Shows that the user approved\n     * the execution if it was required\n     */\n    approved?: boolean,\n    signal?: AbortSignal,\n  }) => Promise<FunctionCallHandlerResult<ReturnType>>;\n}\n\nconst OBSERVATION_PREFIX = 'OBSERVATION:';\n\nexport abstract class AiAgent<T> {\n  /** Subclasses need to define these. */\n  abstract readonly type: AgentType;\n  abstract readonly preamble: string|undefined;\n  abstract readonly options: RequestOptions;\n  abstract readonly clientFeature: Host.AidaClient.ClientFeature;\n  abstract readonly userTier: string|undefined;\n  abstract handleContextDetails(select: ConversationContext<T>|null): AsyncGenerator<ContextResponse, void, void>;\n\n  readonly #sessionId: string = crypto.randomUUID();\n  readonly #aidaClient: Host.AidaClient.AidaClient;\n  readonly #serverSideLoggingEnabled: boolean;\n  readonly confirmSideEffect: typeof Promise.withResolvers;\n  readonly #functionDeclarations = new Map<string, FunctionDeclaration<Record<string, unknown>, unknown>>();\n\n  /**\n   * Used in the debug mode and evals.\n   */\n  readonly #structuredLog: Array<{\n    request: Host.AidaClient.AidaRequest,\n    response: string,\n    aidaResponse?: Host.AidaClient.AidaResponse,\n  }> = [];\n\n  /**\n   * Might need to be part of history in case we allow chatting in\n   * historical conversations.\n   */\n  #origin?: string;\n  #context?: ConversationContext<T>;\n  #id: string = crypto.randomUUID();\n  #history: Host.AidaClient.Content[] = [];\n\n  constructor(opts: AgentOptions) {\n    this.#aidaClient = opts.aidaClient;\n    this.#serverSideLoggingEnabled = opts.serverSideLoggingEnabled ?? false;\n    this.confirmSideEffect = opts.confirmSideEffectForTest ?? (() => Promise.withResolvers());\n  }\n\n  async enhanceQuery(query: string, selected: ConversationContext<T>|null, hasImageInput?: boolean): Promise<string>;\n  async enhanceQuery(query: string): Promise<string> {\n    return query;\n  }\n\n  buildRequest(\n      part: Host.AidaClient.Part|Host.AidaClient.Part[],\n      role: Host.AidaClient.Role.USER|Host.AidaClient.Role.ROLE_UNSPECIFIED): Host.AidaClient.AidaRequest {\n    const parts = Array.isArray(part) ? part : [part];\n    const currentMessage: Host.AidaClient.Content = {\n      parts,\n      role,\n    };\n    const history = [...this.#history];\n    const declarations: Host.AidaClient.FunctionDeclaration[] = [];\n    for (const [name, definition] of this.#functionDeclarations.entries()) {\n      declarations.push({\n        name,\n        description: definition.description,\n        parameters: definition.parameters,\n      });\n    }\n    function validTemperature(temperature: number|undefined): number|undefined {\n      return typeof temperature === 'number' && temperature >= 0 ? temperature : undefined;\n    }\n    const request: Host.AidaClient.AidaRequest = {\n      client: Host.AidaClient.CLIENT_NAME,\n\n      current_message: currentMessage,\n      preamble: this.preamble,\n\n      historical_contexts: history.length ? history : undefined,\n\n      ...(declarations.length ? {function_declarations: declarations} : {}),\n      options: {\n        temperature: validTemperature(this.options.temperature),\n        model_id: this.options.modelId,\n      },\n      metadata: {\n        disable_user_content_logging: !(this.#serverSideLoggingEnabled ?? false),\n        string_session_id: this.#sessionId,\n        user_tier: Host.AidaClient.convertToUserTierEnum(this.userTier),\n      },\n\n      functionality_type: declarations.length ? Host.AidaClient.FunctionalityType.AGENTIC_CHAT :\n                                                Host.AidaClient.FunctionalityType.CHAT,\n\n      client_feature: this.clientFeature,\n    };\n    return request;\n  }\n\n  get id(): string {\n    return this.#id;\n  }\n\n  get isEmpty(): boolean {\n    return this.#history.length === 0;\n  }\n\n  get origin(): string|undefined {\n    return this.#origin;\n  }\n\n  parseResponse(response: Host.AidaClient.AidaResponse): ParsedResponse {\n    if (response.functionCalls && response.completed) {\n      throw new Error('Function calling not supported yet');\n    }\n    return {\n      answer: response.explanation,\n    };\n  }\n\n  /**\n   * Declare a function that the AI model can call.\n   * @param name - The name of the function\n   * @param declaration - the function declaration. Currently functions must:\n   * 1. Return an object of serializable key/value pairs. You cannot return\n   *    anything other than a plain JavaScript object that can be serialized.\n   * 2. Take one parameter which is an object that can have\n   *    multiple keys and values. For example, rather than a function being called\n   *    with two args, `foo` and `bar`, you should instead have the function be\n   *    called with one object with `foo` and `bar` keys.\n   */\n  protected declareFunction<Args extends Record<string, unknown>, ReturnType = unknown>(\n      name: string, declaration: FunctionDeclaration<Args, ReturnType>): void {\n    if (this.#functionDeclarations.has(name)) {\n      throw new Error(`Duplicate function declaration ${name}`);\n    }\n    this.#functionDeclarations.set(name, declaration as FunctionDeclaration<Record<string, unknown>, ReturnType>);\n  }\n\n  protected formatParsedAnswer({answer}: ParsedAnswer): string {\n    return answer;\n  }\n\n  protected handleAction(action: string, options?: {signal?: AbortSignal}):\n      AsyncGenerator<SideEffectResponse, ActionResponse, void>;\n  protected handleAction(): never {\n    throw new Error('Unexpected action found');\n  }\n\n  async *\n      run(initialQuery: string, options: {\n        signal?: AbortSignal, selected: ConversationContext<T>|null,\n      },\n          imageInput?: Host.AidaClient.Part): AsyncGenerator<ResponseData, void, void> {\n    await options.selected?.refresh();\n\n    // First context set on the agent determines its origin from now on.\n    if (options.selected && this.#origin === undefined && options.selected) {\n      this.#origin = options.selected.getOrigin();\n    }\n    // Remember if the context that is set.\n    if (options.selected && !this.#context) {\n      this.#context = options.selected;\n    }\n\n    const enhancedQuery = await this.enhanceQuery(initialQuery, options.selected, Boolean(imageInput));\n    Host.userMetrics.freestylerQueryLength(enhancedQuery.length);\n\n    let query: Host.AidaClient.Part|Host.AidaClient.Part[];\n    query = imageInput ? [{text: enhancedQuery}, imageInput] : [{text: enhancedQuery}];\n    // Request is built here to capture history up to this point.\n    let request = this.buildRequest(query, Host.AidaClient.Role.USER);\n\n    yield {\n      type: ResponseType.USER_QUERY,\n      query: initialQuery,\n      imageInput,\n    };\n\n    yield* this.handleContextDetails(options.selected);\n\n    for (let i = 0; i < MAX_STEPS; i++) {\n      yield {\n        type: ResponseType.QUERYING,\n      };\n\n      let rpcId: Host.AidaClient.RpcGlobalId|undefined;\n      let parsedResponse: ParsedResponse|undefined = undefined;\n      let functionCall: Host.AidaClient.AidaFunctionCallResponse|undefined = undefined;\n      try {\n        for await (const fetchResult of this.#aidaFetch(request, {signal: options.signal})) {\n          rpcId = fetchResult.rpcId;\n          parsedResponse = fetchResult.parsedResponse;\n          functionCall = fetchResult.functionCall;\n\n          // Only yield partial responses here and do not add partial answers to the history.\n          if (!fetchResult.completed && !fetchResult.functionCall && 'answer' in parsedResponse &&\n              parsedResponse.answer) {\n            yield {\n              type: ResponseType.ANSWER,\n              text: parsedResponse.answer,\n              complete: false,\n            };\n          }\n        }\n      } catch (err) {\n        debugLog('Error calling the AIDA API', err);\n\n        let error = ErrorType.UNKNOWN;\n        if (err instanceof Host.AidaClient.AidaAbortError) {\n          error = ErrorType.ABORT;\n        } else if (err instanceof Host.AidaClient.AidaBlockError) {\n          error = ErrorType.BLOCK;\n        }\n        yield this.#createErrorResponse(error);\n\n        break;\n      }\n\n      this.#history.push(request.current_message);\n\n      if (parsedResponse && 'answer' in parsedResponse && Boolean(parsedResponse.answer)) {\n        this.#history.push({\n          parts: [{\n            text: this.formatParsedAnswer(parsedResponse),\n          }],\n          role: Host.AidaClient.Role.MODEL,\n        });\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiAssistanceAnswerReceived);\n        yield {\n          type: ResponseType.ANSWER,\n          text: parsedResponse.answer,\n          suggestions: parsedResponse.suggestions,\n          complete: true,\n          rpcId,\n        };\n        break;\n      } else if (parsedResponse && !('answer' in parsedResponse)) {\n        const {\n          title,\n          thought,\n          action,\n        } = parsedResponse;\n\n        if (title) {\n          yield {\n            type: ResponseType.TITLE,\n            title,\n            rpcId,\n          };\n        }\n\n        if (thought) {\n          yield {\n            type: ResponseType.THOUGHT,\n            thought,\n            rpcId,\n          };\n        }\n\n        this.#history.push({\n          parts: [{\n            text: this.#formatParsedStep(parsedResponse),\n          }],\n          role: Host.AidaClient.Role.MODEL,\n        });\n\n        if (action) {\n          const result = yield* this.handleAction(action, {signal: options.signal});\n          if (options?.signal?.aborted) {\n            yield this.#createErrorResponse(ErrorType.ABORT);\n            break;\n          }\n          query = {text: `${OBSERVATION_PREFIX} ${result.output}`};\n          // Capture history state for the next iteration query.\n          request = this.buildRequest(query, Host.AidaClient.Role.USER);\n          yield result;\n        }\n      } else if (functionCall) {\n        try {\n          const result = yield* this.#callFunction(functionCall.name, functionCall.args);\n\n          if (result.result) {\n            yield {\n              type: ResponseType.ACTION,\n              output: JSON.stringify(result.result),\n              canceled: false,\n            };\n          }\n\n          query = {\n            functionResponse: {\n              name: functionCall.name,\n              response: result,\n            },\n          };\n          request = this.buildRequest(query, Host.AidaClient.Role.ROLE_UNSPECIFIED);\n        } catch {\n          yield this.#createErrorResponse(ErrorType.UNKNOWN);\n          break;\n        }\n      } else {\n        yield this.#createErrorResponse(i - 1 === MAX_STEPS ? ErrorType.MAX_STEPS : ErrorType.UNKNOWN);\n        break;\n      }\n    }\n\n    if (isDebugMode()) {\n      window.dispatchEvent(new CustomEvent('aiassistancedone'));\n    }\n  }\n\n  async * #callFunction(name: string, args: Record<string, unknown>, options?: {\n    signal?: AbortSignal,\n    approved?: boolean,\n  }): AsyncGenerator<FunctionCallResponseData, {result: unknown}> {\n    const call = this.#functionDeclarations.get(name);\n    if (!call) {\n      throw new Error(`Function ${name} is not found.`);\n    }\n    this.#history.push({\n      parts: [{\n        functionCall: {\n          name,\n          args,\n        },\n      }],\n      role: Host.AidaClient.Role.MODEL,\n    });\n\n    if (call.displayInfoFromArgs) {\n      const {title, thought, code, suggestions} = call.displayInfoFromArgs(args);\n      if (title) {\n        yield {\n          type: ResponseType.TITLE,\n          title,\n        };\n      }\n\n      if (thought) {\n        yield {\n          type: ResponseType.THOUGHT,\n          thought,\n        };\n      }\n\n      if (code) {\n        yield {\n          type: ResponseType.ACTION,\n          code,\n          canceled: false,\n        };\n      }\n\n      if (suggestions) {\n        yield {\n          type: ResponseType.SUGGESTIONS,\n          suggestions,\n        };\n      }\n    }\n\n    let result = await call.handler(args, options);\n\n    if ('requiresApproval' in result) {\n      const sideEffectConfirmationPromiseWithResolvers = this.confirmSideEffect<boolean>();\n\n      void sideEffectConfirmationPromiseWithResolvers.promise.then(result => {\n        Host.userMetrics.actionTaken(\n            result ? Host.UserMetrics.Action.AiAssistanceSideEffectConfirmed :\n                     Host.UserMetrics.Action.AiAssistanceSideEffectRejected,\n        );\n      });\n\n      if (options?.signal?.aborted) {\n        sideEffectConfirmationPromiseWithResolvers.resolve(false);\n      }\n\n      options?.signal?.addEventListener('abort', () => {\n        sideEffectConfirmationPromiseWithResolvers.resolve(false);\n      }, {once: true});\n\n      yield {\n        type: ResponseType.SIDE_EFFECT,\n        confirm: (result: boolean) => {\n          sideEffectConfirmationPromiseWithResolvers.resolve(result);\n        },\n      };\n\n      const approvedRun = await sideEffectConfirmationPromiseWithResolvers.promise;\n      if (!approvedRun) {\n        yield {\n          type: ResponseType.ACTION,\n          code: '',\n          canceled: true,\n        };\n        return {\n          result: 'Error: User denied code execution with side effects.',\n        };\n      }\n\n      result = await call.handler(args, {\n        ...options,\n        approved: approvedRun,\n      });\n    }\n\n    return result as {result: unknown};\n  }\n\n  async *\n      #aidaFetch(request: Host.AidaClient.AidaRequest, options?: {signal?: AbortSignal}): AsyncGenerator<\n          {\n            parsedResponse: ParsedResponse,\n            functionCall?: Host.AidaClient.AidaFunctionCallResponse, completed: boolean,\n            rpcId?: Host.AidaClient.RpcGlobalId,\n          },\n          void, void> {\n    let aidaResponse: Host.AidaClient.AidaResponse|undefined = undefined;\n    let response = '';\n    let rpcId: Host.AidaClient.RpcGlobalId|undefined;\n\n    for await (aidaResponse of this.#aidaClient.fetch(request, options)) {\n      if (aidaResponse.functionCalls?.length) {\n        debugLog('functionCalls.length', aidaResponse.functionCalls.length);\n        yield {\n          rpcId,\n          parsedResponse: {answer: ''},\n          functionCall: aidaResponse.functionCalls[0],\n          completed: true,\n        };\n        break;\n      }\n\n      response = aidaResponse.explanation;\n      rpcId = aidaResponse.metadata.rpcGlobalId ?? rpcId;\n      const parsedResponse = this.parseResponse(aidaResponse);\n      yield {\n        rpcId,\n        parsedResponse,\n        completed: aidaResponse.completed,\n      };\n    }\n\n    debugLog({\n      request,\n      response: aidaResponse,\n    });\n    if (isDebugMode()) {\n      this.#structuredLog.push({\n        request: structuredClone(request),\n        response,\n        aidaResponse,\n      });\n      localStorage.setItem('aiAssistanceStructuredLog', JSON.stringify(this.#structuredLog));\n    }\n  }\n\n  #formatParsedStep(step: ParsedStep): string {\n    let text = '';\n    if (step.thought) {\n      text = `THOUGHT: ${step.thought}`;\n    }\n    if (step.title) {\n      text += `\\nTITLE: ${step.title}`;\n    }\n    if (step.action) {\n      text += `\\nACTION\n${step.action}\nSTOP`;\n    }\n\n    return text;\n  }\n\n  #removeLastRunParts(): void {\n    this.#history.splice(this.#history.findLastIndex(item => {\n      return item.role === Host.AidaClient.Role.USER;\n    }));\n  }\n\n  #createErrorResponse(error: ErrorType): ResponseData {\n    this.#removeLastRunParts();\n    if (error !== ErrorType.ABORT) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiAssistanceError);\n    }\n\n    return {\n      type: ResponseType.ERROR,\n      error,\n    };\n  }\n}\n"]}