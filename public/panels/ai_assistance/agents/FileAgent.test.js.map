{"version":3,"file":"FileAgent.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/ai_assistance/agents/FileAgent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as Bindings from '../../../models/bindings/bindings.js';\nimport * as Workspace from '../../../models/workspace/workspace.js';\nimport {createUISourceCode, mockAidaClient} from '../../../testing/AiAssistanceHelpers.js';\nimport {\n  restoreUserAgentForTesting,\n  setUserAgentForTesting,\n  updateHostConfig,\n} from '../../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../../testing/MockConnection.js';\nimport {FileAgent, FileContext, ResponseType} from '../ai_assistance.js';\n\ndescribeWithMockConnection('FileAgent', () => {\n  function mockHostConfig(modelId?: string, temperature?: number) {\n    updateHostConfig({\n      devToolsAiAssistanceFileAgent: {\n        modelId,\n        temperature,\n      },\n    });\n  }\n\n  beforeEach(() => {\n    const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    const resourceMapping = new Bindings.ResourceMapping.ResourceMapping(targetManager, workspace);\n    const debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance({\n      forceNew: true,\n      resourceMapping,\n      targetManager,\n    });\n    Bindings.IgnoreListManager.IgnoreListManager.instance({forceNew: true, debuggerWorkspaceBinding});\n  });\n\n  afterEach(() => {\n    sinon.restore();\n  });\n\n  describe('buildRequest', () => {\n    beforeEach(() => {\n      sinon.restore();\n    });\n\n    it('builds a request with a model id', async () => {\n      mockHostConfig('test model');\n      const agent = new FileAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({text: 'test input'}, Host.AidaClient.Role.USER).options?.model_id,\n          'test model',\n      );\n    });\n\n    it('builds a request with a temperature', async () => {\n      mockHostConfig('test model', 1);\n      const agent = new FileAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({text: 'test input'}, Host.AidaClient.Role.USER).options?.temperature,\n          1,\n      );\n    });\n\n    it('structure matches the snapshot', async () => {\n      mockHostConfig('test model');\n      sinon.stub(crypto, 'randomUUID').returns('sessionId' as `${string}-${string}-${string}-${string}-${string}`);\n      const agent = new FileAgent({\n        aidaClient: mockAidaClient([[{explanation: 'answer'}]]),\n        serverSideLoggingEnabled: true,\n      });\n      sinon.stub(agent, 'preamble').value('preamble');\n      await Array.fromAsync(agent.run('question', {selected: null}));\n\n      setUserAgentForTesting();\n      assert.deepEqual(\n          agent.buildRequest({text: 'test input'}, Host.AidaClient.Role.USER),\n          {\n            current_message: {parts: [{text: 'test input'}], role: Host.AidaClient.Role.USER},\n            client: 'CHROME_DEVTOOLS',\n            preamble: 'preamble',\n            historical_contexts: [\n              {\n                role: 1,\n                parts: [{text: 'question'}],\n              },\n              {\n                role: 2,\n                parts: [{text: 'answer'}],\n              },\n            ],\n            metadata: {\n              disable_user_content_logging: false,\n              string_session_id: 'sessionId',\n              user_tier: 2,\n              client_version: 'unit_test',\n            },\n            options: {\n              model_id: 'test model',\n              temperature: undefined,\n            },\n            client_feature: 9,\n            functionality_type: 1,\n          },\n      );\n      restoreUserAgentForTesting();\n    });\n  });\n\n  describe('run', () => {\n    const testArguments = [\n      {\n        name: 'content loaded',\n        requestContentData: true,\n      },\n      {\n        name: 'content not loaded',\n        requestContentData: false,\n      },\n    ];\n\n    testArguments.forEach(args => {\n      it('generates an answer ' + args.name, async () => {\n        const agent = new FileAgent({\n          aidaClient: mockAidaClient([[{\n            explanation: 'This is the answer',\n            metadata: {\n              rpcGlobalId: 123,\n            },\n          }]]),\n        });\n\n        const uiSourceCode = await createUISourceCode({\n          requestContentData: args.requestContentData,\n          content: 'content',\n        });\n        const responses =\n            await Array.fromAsync(agent.run('test', {selected: uiSourceCode ? new FileContext(uiSourceCode) : null}));\n\n        assert.deepEqual(responses, [\n          {\n            type: ResponseType.USER_QUERY,\n            query: 'test',\n            imageInput: undefined,\n            imageId: undefined,\n          },\n          {\n            type: ResponseType.CONTEXT,\n            title: 'Analyzing file',\n            details: [\n              {\n                title: 'Selected file',\n                text: `File name: script.js\nURL: http://example.test/script.js\nFile content:\n\\`\\`\\`\ncontent\n\\`\\`\\``,\n              },\n            ],\n          },\n          {\n            type: ResponseType.QUERYING,\n            //             query: `# Selected file\n            // File name: script.js\n            // URL: http://example.test/script.js\n            // File content:\n            // \\`\\`\\`\n            // content\n            // \\`\\`\\`\n\n            // # User request\n\n            // test`,\n          },\n          {\n            type: ResponseType.ANSWER,\n            text: 'This is the answer',\n            complete: true,\n            suggestions: undefined,\n            rpcId: 123,\n          },\n        ]);\n\n        assert.deepEqual(agent.buildRequest({text: ''}, Host.AidaClient.Role.USER).historical_contexts, [\n          {\n            role: 1,\n            parts: [{\n              text: `# Selected file\nFile name: script.js\nURL: http://example.test/script.js\nFile content:\n\\`\\`\\`\ncontent\n\\`\\`\\`\n\n# User request\n\ntest`,\n            }],\n          },\n          {\n            role: 2,\n            parts: [{text: 'This is the answer'}],\n          },\n        ]);\n      });\n    });\n  });\n});\n"]}