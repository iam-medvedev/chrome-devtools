{"version":3,"file":"PatchAgent.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/ai_assistance/agents/PatchAgent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\nimport {mockAidaClient, type MockAidaResponse} from '../../../testing/AiAssistanceHelpers.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {createFileSystemUISourceCode} from '../../../testing/UISourceCodeHelpers.js';\nimport {type ActionResponse, FileUpdateAgent, PatchAgent, type ResponseData, ResponseType} from '../ai_assistance.js';\n\n/**\n * TODO: the following tests have to be added:\n *\n * - listFiles should have restricted view on files (node_modules etc).\n * - searchInFiles should work with dirty UiSourceCodes.\n * - updateFiles should verify better that working copies are updated.\n */\ndescribeWithEnvironment('PatchAgent', () => {\n  async function testAgent(\n      mock: Array<[MockAidaResponse, ...MockAidaResponse[]]>,\n      fileAgentMock?: Array<[MockAidaResponse, ...MockAidaResponse[]]>): Promise<ResponseData[]> {\n    const {project, uiSourceCode} = createFileSystemUISourceCode({\n      url: Platform.DevToolsPath.urlString`file:///path/to/overrides/example.html`,\n      fileSystemPath: Platform.DevToolsPath.urlString`file:///path/to/overrides`,\n      mimeType: 'text/html',\n      content: 'content',\n    });\n\n    uiSourceCode.setWorkingCopy('content working copy');\n\n    const agent = new PatchAgent({\n      aidaClient: mockAidaClient(mock),\n      project,\n      fileUpdateAgent: new FileUpdateAgent({\n        aidaClient: mockAidaClient(fileAgentMock),\n      })\n    });\n\n    return await Array.fromAsync(agent.applyChanges('summary'));\n  }\n\n  it('calls listFiles', async () => {\n    const responses = await testAgent([\n      [{explanation: '', functionCalls: [{name: 'listFiles', args: {}}]}], [{\n        explanation: 'done',\n      }]\n    ]);\n\n    const action = responses.find(response => response.type === ResponseType.ACTION);\n    assert.exists(action);\n    assert.deepEqual(action, {\n      type: 'action' as ActionResponse['type'],\n      output: '{\"files\":[\"example.html\"]}',\n      canceled: false,\n      code: undefined,\n    });\n  });\n\n  it('calls searchInFiles', async () => {\n    const responses = await testAgent([\n      [{\n        explanation: '',\n        functionCalls: [{\n          name: 'searchInFiles',\n          args: {\n            query: 'content',\n          }\n        }]\n      }],\n      [{\n        explanation: 'done',\n      }]\n    ]);\n\n    const action = responses.find(response => response.type === ResponseType.ACTION);\n    assert.exists(action);\n    assert.deepEqual(action, {\n      type: 'action' as ActionResponse['type'],\n      output: '{\"matches\":[{\"filepath\":\"example.html\",\"lineNumber\":0,\"columnNumber\":0,\"matchLength\":7}]}',\n      canceled: false,\n      code: undefined\n    });\n  });\n\n  it('calls updateFiles', async () => {\n    const responses = await testAgent(\n        [\n          [{explanation: '', functionCalls: [{name: 'updateFiles', args: {files: ['example.html']}}]}], [{\n            explanation: 'done',\n          }]\n        ],\n        [[{\n          explanation: 'file updated',\n        }]]);\n\n    const action = responses.find(response => response.type === ResponseType.ACTION);\n    assert.exists(action);\n    assert.deepEqual(\n        action,\n        {type: 'action' as ActionResponse['type'], output: '{\"success\":true}', code: undefined, canceled: false});\n  });\n});\n"]}