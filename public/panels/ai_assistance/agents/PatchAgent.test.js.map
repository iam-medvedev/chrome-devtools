{"version":3,"file":"PatchAgent.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/ai_assistance/agents/PatchAgent.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,QAAQ,MAAM,oCAAoC,CAAC;AAC/D,OAAO,EAAC,cAAc,EAAwB,MAAM,yCAAyC,CAAC;AAC9F,OAAO,EAAC,uBAAuB,EAAC,MAAM,wCAAwC,CAAC;AAC/E,OAAO,EAAC,4BAA4B,EAAC,MAAM,yCAAyC,CAAC;AACrF,OAAO,EAAsB,UAAU,EAAE,cAAc,EAAkC,MAAM,qBAAqB,CAAC;AAErH,uBAAuB,CAAC,YAAY,EAAE,GAAG,EAAE;IACzC,KAAK,UAAU,SAAS,CAAC,IAAsD;QAC7E,MAAM,EAAC,OAAO,EAAE,YAAY,EAAC,GAAG,4BAA4B,CAAC;YAC3D,GAAG,EAAE,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAA,wCAAwC;YAC5E,QAAQ,EAAE,WAAW;YACrB,OAAO,EAAE,SAAS;SACnB,CAAC,CAAC;QAEH,YAAY,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC,sBAAsB,CAAC,CAAC;QAEhE,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC;YAC3B,UAAU,EAAE,cAAc,CAAC,IAAI,CAAC;SACjC,CAAC,CAAC;QAEH,OAAO,MAAM,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,EAAE,EAAC,QAAQ,EAAE,IAAI,cAAc,CAAC,OAAO,CAAC,EAAC,CAAC,CAAC,CAAC;IACjG,CAAC;IAED,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC/B,MAAM,SAAS,GAAG,MAAM,SAAS,CAAC;YAChC,CAAC,EAAC,WAAW,EAAE,EAAE,EAAE,aAAa,EAAE,CAAC,EAAC,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,EAAE,EAAC,CAAC,EAAC,CAAC,EAAE,CAAC;oBACpE,WAAW,EAAE,MAAM;iBACpB,CAAC;SACH,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,uCAAwB,CAAC,CAAC;QACjF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACtB,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE;YACvB,IAAI,EAAE,QAAkC;YACxC,MAAM,EAAE,gDAAgD;YACxD,QAAQ,EAAE,KAAK;SAChB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACnC,MAAM,SAAS,GAAG,MAAM,SAAS,CAAC;YAChC,CAAC;oBACC,WAAW,EAAE,EAAE;oBACf,aAAa,EAAE,CAAC;4BACd,IAAI,EAAE,eAAe;4BACrB,IAAI,EAAE;gCACJ,KAAK,EAAE,SAAS;6BACjB;yBACF,CAAC;iBACH,CAAC;YACF,CAAC;oBACC,WAAW,EAAE,MAAM;iBACpB,CAAC;SACH,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,uCAAwB,CAAC,CAAC;QACjF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACtB,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE;YACvB,IAAI,EAAE,QAAkC;YACxC,MAAM,EACF,+GAA+G;YACnH,QAAQ,EAAE,KAAK;SAChB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\nimport {mockAidaClient, type MockAidaResponse} from '../../../testing/AiAssistanceHelpers.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {createFileSystemUISourceCode} from '../../../testing/UISourceCodeHelpers.js';\nimport {type ActionResponse, PatchAgent, ProjectContext, type ResponseData, ResponseType} from '../ai_assistance.js';\n\ndescribeWithEnvironment('PatchAgent', () => {\n  async function testAgent(mock: Array<[MockAidaResponse, ...MockAidaResponse[]]>): Promise<ResponseData[]> {\n    const {project, uiSourceCode} = createFileSystemUISourceCode({\n      url: Platform.DevToolsPath.urlString`file:///path/to/overrides/example.html`,\n      mimeType: 'text/html',\n      content: 'content',\n    });\n\n    uiSourceCode.setWorkingCopyGetter(() => 'content working copy');\n\n    const agent = new PatchAgent({\n      aidaClient: mockAidaClient(mock),\n    });\n\n    return await Array.fromAsync(agent.run('test input', {selected: new ProjectContext(project)}));\n  }\n\n  it('calls listFiles', async () => {\n    const responses = await testAgent([\n      [{explanation: '', functionCalls: [{name: 'listFiles', args: {}}]}], [{\n        explanation: 'done',\n      }]\n    ]);\n\n    const action = responses.find(response => response.type === ResponseType.ACTION);\n    assert.exists(action);\n    assert.deepEqual(action, {\n      type: 'action' as ActionResponse['type'],\n      output: '{\"files\":[\"//path/to/overrides/example.html\"]}',\n      canceled: false\n    });\n  });\n\n  it('calls searchInFiles', async () => {\n    const responses = await testAgent([\n      [{\n        explanation: '',\n        functionCalls: [{\n          name: 'searchInFiles',\n          args: {\n            query: 'content',\n          }\n        }]\n      }],\n      [{\n        explanation: 'done',\n      }]\n    ]);\n\n    const action = responses.find(response => response.type === ResponseType.ACTION);\n    assert.exists(action);\n    assert.deepEqual(action, {\n      type: 'action' as ActionResponse['type'],\n      output:\n          '{\"matches\":[{\"filepath\":\"//path/to/overrides/example.html\",\"lineNumber\":0,\"columnNumber\":0,\"matchLength\":7}]}',\n      canceled: false\n    });\n  });\n});\n"]}