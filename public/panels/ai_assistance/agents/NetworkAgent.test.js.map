{"version":3,"file":"NetworkAgent.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/ai_assistance/agents/NetworkAgent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Logs from '../../../models/logs/logs.js';\nimport {\n  getGetHostConfigStub,\n} from '../../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../../testing/MockConnection.js';\nimport {createNetworkPanelForMockConnection} from '../../../testing/NetworkHelpers.js';\nimport * as RenderCoordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport type * as Network from '../../network/network.js';\nimport {\n  allowHeader,\n  formatHeaders,\n  formatInitiatorUrl,\n  NetworkAgent,\n  RequestContext,\n  ResponseType,\n} from '../ai_assistance.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\ndescribeWithMockConnection('NetworkAgent', () => {\n  let networkPanel: Network.NetworkPanel.NetworkPanel;\n\n  function mockHostConfig(modelId?: string, temperature?: number) {\n    getGetHostConfigStub({\n      devToolsAiAssistanceNetworkAgent: {\n        modelId,\n        temperature,\n      },\n    });\n  }\n\n  beforeEach(async () => {\n    networkPanel = await createNetworkPanelForMockConnection();\n  });\n\n  afterEach(async () => {\n    await RenderCoordinator.done();\n    networkPanel.detach();\n  });\n\n  describe('buildRequest', () => {\n    beforeEach(() => {\n      sinon.restore();\n    });\n\n    it('builds a request with a model id', async () => {\n      mockHostConfig('test model');\n      const agent = new NetworkAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({text: 'test input'}).options?.model_id,\n          'test model',\n      );\n    });\n\n    it('builds a request with a temperature', async () => {\n      mockHostConfig('test model', 1);\n      const agent = new NetworkAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({text: 'test input'}).options?.temperature,\n          1,\n      );\n    });\n\n    it('structure matches the snapshot', () => {\n      mockHostConfig('test model');\n      sinon.stub(crypto, 'randomUUID').returns('sessionId' as `${string}-${string}-${string}-${string}-${string}`);\n      const agent = new NetworkAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n        serverSideLoggingEnabled: true,\n      });\n      sinon.stub(agent, 'preamble').value('preamble');\n      agent.chatNewHistoryForTesting = [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'questions',\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'questions',\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'answer',\n        },\n      ];\n      assert.deepEqual(\n          agent.buildRequest({\n            text: 'test input',\n          }),\n          {\n            current_message: {parts: [{text: 'test input'}], role: Host.AidaClient.Role.USER},\n            client: 'CHROME_DEVTOOLS',\n            preamble: 'preamble',\n            historical_contexts: [\n              {\n                role: 1,\n                parts: [{text: 'questions'}],\n              },\n              {\n                role: 2,\n                parts: [{text: 'answer'}],\n              },\n            ],\n            metadata: {\n              disable_user_content_logging: false,\n              string_session_id: 'sessionId',\n              user_tier: 2,\n            },\n            options: {\n              model_id: 'test model',\n              temperature: undefined,\n            },\n            client_feature: 7,\n            functionality_type: 1,\n          },\n      );\n    });\n  });\n  describe('run', () => {\n    let selectedNetworkRequest: SDK.NetworkRequest.NetworkRequest;\n    const timingInfo: Protocol.Network.ResourceTiming = {\n      requestTime: 500,\n      proxyStart: 0,\n      proxyEnd: 0,\n      dnsStart: 0,\n      dnsEnd: 0,\n      connectStart: 0,\n      connectEnd: 0,\n      sslStart: 0,\n      sslEnd: 0,\n      sendStart: 800,\n      sendEnd: 900,\n      pushStart: 0,\n      pushEnd: 0,\n      receiveHeadersStart: 1000,\n      receiveHeadersEnd: 0,\n    } as unknown as Protocol.Network.ResourceTiming;\n\n    beforeEach(() => {\n      selectedNetworkRequest = SDK.NetworkRequest.NetworkRequest.create(\n          'requestId' as Protocol.Network.RequestId, urlString`https://www.example.com`, urlString``, null, null, null);\n      selectedNetworkRequest.statusCode = 200;\n      selectedNetworkRequest.setRequestHeaders([{name: 'content-type', value: 'bar1'}]);\n      selectedNetworkRequest.responseHeaders =\n          [{name: 'content-type', value: 'bar2'}, {name: 'x-forwarded-for', value: 'bar3'}];\n      selectedNetworkRequest.timing = timingInfo;\n\n      const initiatorNetworkRequest = SDK.NetworkRequest.NetworkRequest.create(\n          'requestId' as Protocol.Network.RequestId, urlString`https://www.initiator.com`, urlString``, null, null,\n          null);\n      const initiatedNetworkRequest1 = SDK.NetworkRequest.NetworkRequest.create(\n          'requestId' as Protocol.Network.RequestId, urlString`https://www.example.com/1`, urlString``, null, null,\n          null);\n      const initiatedNetworkRequest2 = SDK.NetworkRequest.NetworkRequest.create(\n          'requestId' as Protocol.Network.RequestId, urlString`https://www.example.com/2`, urlString``, null, null,\n          null);\n\n      sinon.stub(Logs.NetworkLog.NetworkLog.instance(), 'initiatorGraphForRequest')\n          .withArgs(selectedNetworkRequest)\n          .returns({\n            initiators: new Set([selectedNetworkRequest, initiatorNetworkRequest]),\n            initiated: new Map([\n              [selectedNetworkRequest, initiatorNetworkRequest],\n              [initiatedNetworkRequest1, selectedNetworkRequest],\n              [initiatedNetworkRequest2, selectedNetworkRequest],\n            ]),\n          })\n          .withArgs(initiatedNetworkRequest1)\n          .returns({\n            initiators: new Set([]),\n            initiated: new Map([\n              [initiatedNetworkRequest1, selectedNetworkRequest],\n            ]),\n          })\n          .withArgs(initiatedNetworkRequest2)\n          .returns({\n            initiators: new Set([]),\n            initiated: new Map([\n              [initiatedNetworkRequest2, selectedNetworkRequest],\n            ]),\n          });\n    });\n\n    afterEach(() => {\n      sinon.restore();\n    });\n\n    function mockAidaClient(\n        fetch: () => AsyncGenerator<Host.AidaClient.AidaResponse, void, void>,\n        ): Host.AidaClient.AidaClient {\n      return {\n        fetch,\n        registerClientEvent: () => Promise.resolve({}),\n      };\n    }\n\n    it('generates an answer', async () => {\n      async function* generateAnswer() {\n        yield {\n          explanation: 'This is the answer',\n          metadata: {\n            rpcGlobalId: 123,\n          },\n          completed: true,\n        };\n      }\n\n      const agent = new NetworkAgent({\n        aidaClient: mockAidaClient(generateAnswer),\n      });\n\n      const responses =\n          await Array.fromAsync(agent.run('test', {selected: new RequestContext(selectedNetworkRequest)}));\n      assert.deepEqual(responses, [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'test',\n        },\n        {\n          type: ResponseType.CONTEXT,\n          title: 'Analyzing network data',\n          details: [\n            {\n              title: 'Request',\n              text: 'Request URL: https://www.example.com\\n\\nRequest Headers\\ncontent-type: bar1',\n            },\n            {\n              title: 'Response',\n              text: 'Response Status: 200 \\n\\nResponse Headers\\ncontent-type: bar2\\nx-forwarded-for: bar3',\n            },\n            {\n              title: 'Timing',\n              text:\n                  'Queued at (timestamp): 0 μs\\nStarted at (timestamp): 8.4 min\\nQueueing (duration): 8.4 min\\nConnection start (stalled) (duration): 800.00 ms\\nRequest sent (duration): 100.00 ms\\nDuration (duration): 8.4 min',\n            },\n            {\n              title: 'Request initiator chain',\n              text: `- URL: <redacted cross-origin initiator URL>\n\\t- URL: https://www.example.com\n\\t\\t- URL: https://www.example.com/1\n\\t\\t- URL: https://www.example.com/2`,\n            },\n          ],\n        },\n        {\n          type: ResponseType.QUERYING,\n          query:\n              '# Selected network request \\nRequest: https://www.example.com\\n\\nRequest headers:\\ncontent-type: bar1\\n\\nResponse headers:\\ncontent-type: bar2\\nx-forwarded-for: bar3\\n\\nResponse status: 200 \\n\\nRequest timing:\\nQueued at (timestamp): 0 μs\\nStarted at (timestamp): 8.4 min\\nQueueing (duration): 8.4 min\\nConnection start (stalled) (duration): 800.00 ms\\nRequest sent (duration): 100.00 ms\\nDuration (duration): 8.4 min\\n\\nRequest initiator chain:\\n- URL: <redacted cross-origin initiator URL>\\n\\t- URL: https://www.example.com\\n\\t\\t- URL: https://www.example.com/1\\n\\t\\t- URL: https://www.example.com/2\\n\\n# User request\\n\\ntest',\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'This is the answer',\n          suggestions: undefined,\n          rpcId: 123,\n        },\n      ]);\n      assert.deepEqual(agent.chatHistoryForTesting, [\n        {\n          role: 1,\n          parts: [{\n            text: `# Selected network request \\nRequest: https://www.example.com\n\nRequest headers:\ncontent-type: bar1\n\nResponse headers:\ncontent-type: bar2\nx-forwarded-for: bar3\n\nResponse status: 200 \\n\nRequest timing:\nQueued at (timestamp): 0 μs\nStarted at (timestamp): 8.4 min\nQueueing (duration): 8.4 min\nConnection start (stalled) (duration): 800.00 ms\nRequest sent (duration): 100.00 ms\nDuration (duration): 8.4 min\n\nRequest initiator chain:\n- URL: <redacted cross-origin initiator URL>\n\\t- URL: https://www.example.com\n\\t\\t- URL: https://www.example.com/1\n\\t\\t- URL: https://www.example.com/2\n\n# User request\n\ntest`,\n          }],\n        },\n        {\n          role: 2,\n          parts: [{text: 'This is the answer'}],\n        },\n      ]);\n    });\n  });\n\n  describe('allowHeader', () => {\n    it('allows a header from the list', () => {\n      assert.isTrue(allowHeader({name: 'content-type', value: 'foo'}));\n    });\n\n    it('disallows headers not on the list', () => {\n      assert.isFalse(allowHeader({name: 'cookie', value: 'foo'}));\n      assert.isFalse(allowHeader({name: 'set-cookie', value: 'foo'}));\n      assert.isFalse(allowHeader({name: 'authorization', value: 'foo'}));\n    });\n  });\n\n  describe('formatInitiatorUrl', () => {\n    const tests = [\n      {\n        allowedResource: 'https://example.test',\n        targetResource: 'https://example.test',\n        shouldBeRedacted: false,\n      },\n      {\n        allowedResource: 'https://example.test',\n        targetResource: 'https://another-example.test',\n        shouldBeRedacted: true,\n      },\n      {\n        allowedResource: 'file://test',\n        targetResource: 'https://another-example.test',\n        shouldBeRedacted: true,\n      },\n      {\n        allowedResource: 'https://another-example.test',\n        targetResource: 'file://test',\n        shouldBeRedacted: true,\n      },\n      {\n        allowedResource: 'https://test.example.test',\n        targetResource: 'https://example.test',\n        shouldBeRedacted: true,\n      },\n      {\n        allowedResource: 'https://test.example.test:9900',\n        targetResource: 'https://test.example.test:9901',\n        shouldBeRedacted: true,\n      },\n    ];\n\n    for (const t of tests) {\n      it(`${t.targetResource} test when allowed resource is ${t.allowedResource}`, () => {\n        const formatted = formatInitiatorUrl(new URL(t.targetResource).origin, new URL(t.allowedResource).origin);\n        if (t.shouldBeRedacted) {\n          assert.strictEqual(\n              formatted, '<redacted cross-origin initiator URL>', `${JSON.stringify(t)} was not redacted`);\n        } else {\n          assert.strictEqual(formatted, t.targetResource, `${JSON.stringify(t)} was redacted`);\n        }\n      });\n    }\n  });\n\n  describe('formatHeaders', () => {\n    it('does not redact a header from the list', () => {\n      assert.strictEqual(formatHeaders('test:', [{name: 'content-type', value: 'foo'}]), 'test:\\ncontent-type: foo');\n    });\n\n    it('disallows headers not on the list', () => {\n      assert.strictEqual(formatHeaders('test:', [{name: 'cookie', value: 'foo'}]), 'test:\\ncookie: <redacted>');\n      assert.strictEqual(formatHeaders('test:', [{name: 'set-cookie', value: 'foo'}]), 'test:\\nset-cookie: <redacted>');\n      assert.strictEqual(\n          formatHeaders('test:', [{name: 'authorization', value: 'foo'}]), 'test:\\nauthorization: <redacted>');\n    });\n  });\n});\n"]}