{"version":3,"file":"PatchAgent.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/ai_assistance/agents/PatchAgent.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport type * as Workspace from '../../../models/workspace/workspace.js';\nimport {AgentProject} from '../AgentProject.js';\nimport {debugLog} from '../debug.js';\n\nimport {\n  type AgentOptions as BaseAgentOptions,\n  AgentType,\n  AiAgent,\n  type ContextResponse,\n  type ConversationContext,\n  type RequestOptions,\n  type ResponseData,\n  ResponseType,\n} from './AiAgent.js';\n\nexport class PatchAgent extends AiAgent<Workspace.Workspace.Project> {\n  #project: AgentProject;\n  #fileUpdateAgent: FileUpdateAgent;\n  #changeSummary = '';\n\n  override async *\n      // eslint-disable-next-line require-yield\n      handleContextDetails(_select: ConversationContext<Workspace.Workspace.Project>|null):\n          AsyncGenerator<ContextResponse, void, void> {\n    return;\n  }\n\n  override readonly type = AgentType.PATCH;\n  readonly preamble = undefined;\n  readonly clientFeature = Host.AidaClient.ClientFeature.CHROME_PATCH_AGENT;\n\n  get userTier(): string|undefined {\n    return 'TESTERS';\n  }\n\n  get options(): RequestOptions {\n    return {\n      temperature: undefined,\n      modelId: undefined,\n    };\n  }\n\n  constructor(opts: BaseAgentOptions&{fileUpdateAgent?: FileUpdateAgent, project: Workspace.Workspace.Project}) {\n    super(opts);\n    this.#project = new AgentProject(opts.project);\n    this.#fileUpdateAgent = opts.fileUpdateAgent ?? new FileUpdateAgent(opts);\n    this.declareFunction<Record<never, unknown>>('listFiles', {\n      description: 'Returns a list of all files in the project.',\n      parameters: {\n        type: Host.AidaClient.ParametersTypes.OBJECT,\n        description: '',\n        nullable: true,\n        properties: {},\n      },\n      handler: async () => {\n        return {\n          result: {\n            files: this.#project.getFiles(),\n          }\n        };\n      },\n    });\n\n    this.declareFunction<{\n      query: string,\n      caseSensitive?: boolean,\n      isRegex?: boolean,\n    }>('searchInFiles', {\n      description:\n          'Searches for a text match in all files in the project. For each match it returns the positions of matches.',\n      parameters: {\n        type: Host.AidaClient.ParametersTypes.OBJECT,\n        description: '',\n        nullable: false,\n        properties: {\n          query: {\n            type: Host.AidaClient.ParametersTypes.STRING,\n            description: 'The query to search for matches in files',\n            nullable: false,\n          },\n          caseSensitive: {\n            type: Host.AidaClient.ParametersTypes.BOOLEAN,\n            description: 'Whether the query is case sensitive or not',\n            nullable: false,\n          },\n          isRegex: {\n            type: Host.AidaClient.ParametersTypes.BOOLEAN,\n            description: 'Whether the query is a regular expression or not',\n            nullable: true,\n          }\n        },\n      },\n      handler: async params => {\n        return {\n          result: {\n            matches: await this.#project.searchFiles(params.query, params.caseSensitive, params.isRegex),\n          }\n        };\n      },\n    });\n\n    this.declareFunction<{\n      files: string[],\n    }>('updateFiles', {\n      description: 'When called this function performs necesary updates to files',\n      parameters: {\n        type: Host.AidaClient.ParametersTypes.OBJECT,\n        description: '',\n        nullable: false,\n        properties: {\n          files: {\n            type: Host.AidaClient.ParametersTypes.ARRAY,\n            description: 'List of file names from the project',\n            nullable: false,\n            items: {type: Host.AidaClient.ParametersTypes.STRING, description: 'File name'}\n          }\n        },\n      },\n      handler: async args => {\n        debugLog('updateFiles', args.files);\n        for (const file of args.files) {\n          debugLog('updating', file);\n          const content = this.#project.readFile(file);\n          if (content === undefined) {\n            debugLog(file, 'not found');\n            continue;\n          }\n          const prompt = `I have applied the following CSS changes to my page in Chrome DevTools.\n\n\\`\\`\\`css\n${this.#changeSummary}\n\\`\\`\\`\n\nFollowing '===' I provide the source code file. Update the file to apply the same change to it.\nCRITICAL: Output the entire file with changes without any other modifications! DO NOT USE MARKDOWN.\n\n===\n${content}\n`;\n          let response;\n          for await (response of this.#fileUpdateAgent.run(prompt, {selected: null})) {\n            // Get the last response\n          }\n          debugLog('response', response);\n          if (response?.type !== ResponseType.ANSWER) {\n            debugLog('wrong response type', response);\n            continue;\n          }\n          const updated = response.text;\n          this.#project.writeFile(file, updated);\n          debugLog('updated', updated);\n        }\n        return {\n          result: {\n            success: true,\n          }\n        };\n      },\n    });\n  }\n\n  async * applyChanges(changeSummary: string): AsyncGenerator<ResponseData, void, void> {\n    this.#changeSummary = changeSummary;\n    const prompt =\n        `I have applied the following CSS changes to my page in Chrome DevTools, what are the files in my source code that I need to change to apply the same change?\n\n\\`\\`\\`css\n${changeSummary}\n\\`\\`\\`\n\nTry searching using the selectors and if nothing matches, try to find a semantically appropriate place to change.\nConsider updating files containing styles like CSS files first!\nCall the updateFiles with the list of files to be updated once you are done.\n`;\n\n    yield* this.run(prompt, {\n      selected: null,\n    });\n  }\n}\n\n/**\n * This is an inner \"agent\" to apply a change to one file.\n */\nexport class FileUpdateAgent extends AiAgent<Workspace.Workspace.Project> {\n  override async *\n      // eslint-disable-next-line require-yield\n      handleContextDetails(_select: ConversationContext<Workspace.Workspace.Project>|null):\n          AsyncGenerator<ContextResponse, void, void> {\n    return;\n  }\n\n  override readonly type = AgentType.PATCH;\n  readonly preamble = undefined;\n  readonly clientFeature = Host.AidaClient.ClientFeature.CHROME_PATCH_AGENT;\n\n  get userTier(): string|undefined {\n    return 'TESTERS';\n  }\n\n  get options(): RequestOptions {\n    return {\n      temperature: undefined,\n      modelId: undefined,\n    };\n  }\n}\n"]}