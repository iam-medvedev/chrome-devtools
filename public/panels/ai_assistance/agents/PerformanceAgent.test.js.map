{"version":3,"file":"PerformanceAgent.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/ai_assistance/agents/PerformanceAgent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport {describeWithEnvironment, getGetHostConfigStub} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TimelineUtils from '../../timeline/utils/utils.js';\nimport {CallTreeContext, PerformanceAgent, ResponseType} from '../ai_assistance.js';\n\ndescribeWithEnvironment('PerformanceAgent', () => {\n  function mockHostConfig(modelId?: string, temperature?: number) {\n    getGetHostConfigStub({\n      devToolsAiAssistancePerformanceAgent: {\n        modelId,\n        temperature,\n      },\n    });\n  }\n\n  function mockAidaClient(\n      fetch: () => AsyncGenerator<Host.AidaClient.AidaResponse, void, void>,\n      ): Host.AidaClient.AidaClient {\n    return {\n      fetch,\n      registerClientEvent: () => Promise.resolve({}),\n    };\n  }\n\n  describe('buildRequest', () => {\n    beforeEach(() => {\n      sinon.restore();\n    });\n\n    it('builds a request with a model id', async () => {\n      mockHostConfig('test model');\n      const agent = new PerformanceAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({text: 'test input'}).options?.model_id,\n          'test model',\n      );\n    });\n\n    it('builds a request with a temperature', async () => {\n      mockHostConfig('test model', 1);\n      const agent = new PerformanceAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({text: 'test input'}).options?.temperature,\n          1,\n      );\n    });\n\n    it('structure matches the snapshot', () => {\n      mockHostConfig('test model');\n      sinon.stub(crypto, 'randomUUID').returns('sessionId' as `${string}-${string}-${string}-${string}-${string}`);\n      const agent = new PerformanceAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n        serverSideLoggingEnabled: true,\n      });\n      sinon.stub(agent, 'preamble').value('preamble');\n      agent.chatNewHistoryForTesting = [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'question',\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: 'question',\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'answer',\n        },\n      ];\n      assert.deepEqual(\n          agent.buildRequest({\n            text: 'test input',\n          }),\n          {\n            current_message: {role: Host.AidaClient.Role.USER, parts: [{text: 'test input'}]},\n            client: 'CHROME_DEVTOOLS',\n            preamble: 'preamble',\n            historical_contexts: [\n              {\n                role: 1,\n                parts: [{text: 'question'}],\n              },\n              {\n                role: 2,\n                parts: [{text: 'answer'}],\n              },\n            ],\n            metadata: {\n              disable_user_content_logging: false,\n              string_session_id: 'sessionId',\n              user_tier: 2,\n            },\n            options: {\n              model_id: 'test model',\n              temperature: undefined,\n            },\n            client_feature: 8,\n            functionality_type: 1,\n          },\n      );\n    });\n  });\n  describe('run', function() {\n    it('generates an answer', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev-outermost-frames.json.gz');\n      // A basic Layout.\n      const layoutEvt = parsedTrace.Renderer.allTraceEntries.find(event => event.ts === 465457096322);\n      assert.exists(layoutEvt);\n      const aiCallTree =\n          TimelineUtils.AICallTree.AICallTree.from(layoutEvt, parsedTrace.Renderer.allTraceEntries, parsedTrace);\n      assert.exists(aiCallTree);\n\n      async function* generateAnswer() {\n        yield {\n          explanation: 'This is the answer',\n          metadata: {\n            rpcGlobalId: 123,\n          },\n          completed: true,\n        };\n      }\n\n      const agent = new PerformanceAgent({\n        aidaClient: mockAidaClient(generateAnswer),\n      });\n\n      const responses = await Array.fromAsync(agent.run('test', {selected: new CallTreeContext(aiCallTree)}));\n      const expectedData = '\\n\\n' +\n          `\n\n\n# Call tree:\n\nNode: 1 – Task\ndur: 3\nChildren:\n  * 2 – Layout\n\nNode: 2 – Layout\nSelected: true\ndur: 3\nself: 3\n`.trim();\n\n      assert.deepEqual(responses, [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'test',\n        },\n        {\n          type: ResponseType.CONTEXT,\n          title: 'Analyzing call tree',\n          details: [\n            {title: 'Selected call tree', text: expectedData},\n          ],\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: `${expectedData}\\n\\n# User request\\n\\ntest`,\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'This is the answer',\n          suggestions: undefined,\n          rpcId: 123,\n        },\n      ]);\n\n      assert.deepEqual(agent.chatHistoryForTesting, [\n        {\n          role: 1,\n          parts: [{text: `${aiCallTree.serialize()}\\n\\n# User request\\n\\ntest`}],\n        },\n        {\n          role: 2,\n          parts: [{text: 'This is the answer'}],\n        },\n      ]);\n    });\n  });\n\n  describe('enhanceQuery', () => {\n    it('does not send the serialized calltree again if it is a followup chat about the same calltree', async () => {\n      const agent = new PerformanceAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n\n      const mockAiCallTree = {\n        serialize: () => 'Mock call tree',\n      } as unknown as TimelineUtils.AICallTree.AICallTree;\n\n      const enhancedQuery1 = await agent.enhanceQuery('What is this?', new CallTreeContext(mockAiCallTree));\n      assert.strictEqual(enhancedQuery1, 'Mock call tree\\n\\n# User request\\n\\nWhat is this?');\n\n      // Create history state of the above query\n      agent.chatNewHistoryForTesting = [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'What is this?',\n        },\n        {\n          type: ResponseType.CONTEXT,\n          title: 'Analyzing call tree',\n          details: [\n            {\n              title: 'Selected call tree',\n              text: mockAiCallTree.serialize(),\n            },\n          ],\n        },\n        {\n          type: ResponseType.QUERYING,\n          query: enhancedQuery1,\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'test answer',\n        },\n      ];\n\n      const query2 = 'But what about this follow-up question?';\n      const enhancedQuery2 = await agent.enhanceQuery(query2, new CallTreeContext(mockAiCallTree));\n      assert.strictEqual(enhancedQuery2, query2);\n      assert.isFalse(enhancedQuery2.includes(mockAiCallTree.serialize()));\n\n      // Just making sure any subsequent chat doesnt include it either.\n      const query3 = 'And this 3rd question?';\n      const enhancedQuery3 = await agent.enhanceQuery(query3, new CallTreeContext(mockAiCallTree));\n      assert.strictEqual(enhancedQuery3, query3);\n      assert.isFalse(enhancedQuery3.includes(mockAiCallTree.serialize()));\n    });\n  });\n});\n"]}