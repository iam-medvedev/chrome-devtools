{"version":3,"file":"AgentProject.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/ai_assistance/AgentProject.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {createTestFilesystem} from '../../testing/AiAssistanceHelpers.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\n\nimport * as AiAssistance from './ai_assistance.js';\n\ndescribeWithEnvironment('AgentProject', () => {\n  async function mockProject(\n      files?: Array<{\n        path: string,\n        content: string,\n      }>,\n      options?: {\n        maxFilesChanged: number,\n        maxLinesChanged: number,\n      }) {\n    const {project, uiSourceCode} = createTestFilesystem('file:///path/to/project', files);\n    return {project: new AiAssistance.AgentProject(project, options), uiSourceCode};\n  }\n\n  it('can list files', async () => {\n    const {project} = await mockProject();\n\n    assert.deepEqual(project.getFiles(), ['index.html']);\n  });\n\n  it('ignores node_modules', async () => {\n    const {project} = await mockProject([\n      {\n        path: 'node_modules/test.js',\n        content: 'content',\n      },\n      {\n        path: 'test/another/node_modules/test2.js',\n        content: 'content',\n      }\n    ]);\n\n    assert.deepEqual(project.getFiles(), ['index.html']);\n  });\n\n  it('can search files', async () => {\n    const {project} = await mockProject();\n\n    assert.deepEqual(await project.searchFiles('content'), [{\n                       columnNumber: 0,\n                       filepath: 'index.html',\n                       lineNumber: 0,\n                       matchLength: 7,\n                     }]);\n  });\n\n  it('can read files', async () => {\n    const {project} = await mockProject();\n\n    assert.deepEqual(project.readFile('index.html'), 'content');\n  });\n\n  it('can write files files', async () => {\n    const {project} = await mockProject();\n    project.writeFile('index.html', 'updated');\n    assert.deepEqual(project.readFile('index.html'), 'updated');\n  });\n\n  describe('limits', () => {\n    it('cannot write more files than allowed', async () => {\n      const {project} = await mockProject(\n          [{\n            path: 'example2.js',\n            content: 'content',\n          }],\n          {\n            maxFilesChanged: 1,\n            maxLinesChanged: 10,\n          });\n\n      project.writeFile('index.html', 'updated');\n      expect(() => {\n        project.writeFile('example2.js', 'updated2');\n      }).throws('Too many files changed');\n      assert.deepEqual(project.readFile('index.html'), 'updated');\n      assert.deepEqual(project.readFile('example2.js'), 'content');\n    });\n\n    it('cannot write same file multiple times', async () => {\n      const {project} = await mockProject(undefined, {\n        maxFilesChanged: 1,\n        maxLinesChanged: 10,\n      });\n\n      project.writeFile('index.html', 'updated');\n      project.writeFile('index.html', 'updated2');\n      assert.deepEqual(project.readFile('index.html'), 'updated2');\n    });\n\n    it('cannot write more lines than allowed', async () => {\n      const {project} = await mockProject(\n          [{\n            path: 'example2.js',\n            content: 'content',\n          }],\n          {\n            maxFilesChanged: 1,\n            maxLinesChanged: 1,\n          });\n\n      expect(() => {\n        project.writeFile('example2.js', 'updated2\\nupdated3');\n      }).throws('Too many lines changed');\n      assert.deepEqual(project.readFile('example2.js'), 'content');\n    });\n  });\n});\n"]}