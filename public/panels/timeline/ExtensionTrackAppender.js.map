{"version":3,"file":"ExtensionTrackAppender.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/ExtensionTrackAppender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport {buildGroupStyle, buildTrackHeader, getFormattedTime} from './AppenderUtils.js';\nimport {\n  type CompatibilityTracksAppender,\n  type HighlightedEntryInfo,\n  type TrackAppender,\n  type TrackAppenderName,\n  VisualLoggingTrackName,\n} from './CompatibilityTracksAppender.js';\nimport * as Extensions from './extensions/extensions.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  customTrackDescription: 'This is a custom track added by a third party.',\n  /**\n   * @description The name of a track, which is a horizontal division of the timeline, synonym with \"swimlane\".\n   * @example {A track name} PH1\n   */\n  customTrackName: '{PH1} â€” Custom Track',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/ExtensionTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ExtensionTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'Extension';\n\n  #extensionTopLevelTrack: TraceEngine.Types.Extensions.ExtensionTrackData;\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  constructor(\n      compatibilityBuilder: CompatibilityTracksAppender,\n      extensionTracks: TraceEngine.Types.Extensions.ExtensionTrackData) {\n    this.#extensionTopLevelTrack = extensionTracks;\n    this.#compatibilityBuilder = compatibilityBuilder;\n  }\n\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean): number {\n    const totalEntryCount =\n        Object.values(this.#extensionTopLevelTrack.entriesByTrack).reduce((prev, current) => current.length + prev, 0);\n    if (totalEntryCount === 0) {\n      return trackStartLevel;\n    }\n    this.#appendTopLevelHeaderAtLevel(trackStartLevel, expanded);\n    return this.#appendExtensionTrackData(trackStartLevel);\n  }\n\n  /**\n   * Appends the top level header for a track. Extension entries can be\n   * added to tracks or sub-tracks. In the former case, the top level\n   * header corresponds to the track name, in the latter it corresponds\n   * to the track group name.\n   */\n  #appendTopLevelHeaderAtLevel(currentLevel: number, expanded?: boolean): void {\n    const style = buildGroupStyle({shareHeaderLine: false, collapsible: true});\n    const headerTitle = i18nString(UIStrings.customTrackName, {PH1: this.#extensionTopLevelTrack.name});\n    const group = buildTrackHeader(\n        VisualLoggingTrackName.EXTENSION, currentLevel, headerTitle, style,\n        /* selectable= */ true, expanded);\n    group.description = i18nString(UIStrings.customTrackDescription);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  /**\n   * Appends the second level header for a grouped track, which\n   * corresponds to the track name itself, instead of the track name.\n   */\n  #appendSecondLevelHeader(trackStartLevel: number, headerTitle: string): void {\n    const style = buildGroupStyle({shareHeaderLine: false, padding: 2, nestingLevel: 1, collapsible: true});\n    const group = buildTrackHeader(\n        VisualLoggingTrackName.EXTENSION, trackStartLevel, headerTitle, style,\n        /* selectable= */ true);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  #appendExtensionTrackData(trackStartLevel: number): number {\n    let currentStartLevel = trackStartLevel;\n    for (const [trackName, entries] of Object.entries(this.#extensionTopLevelTrack.entriesByTrack)) {\n      if (this.#extensionTopLevelTrack.isTrackGroup) {\n        // Second level header is used for only sub-tracks.\n        this.#appendSecondLevelHeader(currentStartLevel, trackName as string);\n      }\n      currentStartLevel = this.#compatibilityBuilder.appendEventsAtLevel(entries, currentStartLevel, this);\n    }\n    return currentStartLevel;\n  }\n\n  colorForEvent(event: TraceEngine.Types.TraceEvents.TraceEventData): string {\n    const defaultColor = ThemeSupport.ThemeSupport.instance().getComputedValue('--app-color-rendering');\n    if (!TraceEngine.Types.Extensions.isSyntheticExtensionEntry(event)) {\n      return defaultColor;\n    }\n    return Extensions.ExtensionUI.extensionEntryColor(event);\n  }\n\n  titleForEvent(event: TraceEngine.Types.TraceEvents.TraceEventData): string {\n    if (!TraceEngine.Types.Extensions.isSyntheticExtensionEntry(event)) {\n      return ThemeSupport.ThemeSupport.instance().getComputedValue('--app-color-rendering');\n    }\n    return event.name;\n  }\n\n  /**\n   * Returns the info shown when an event added by this appender\n   * is hovered in the timeline.\n   */\n  highlightedEntryInfo(event: TraceEngine.Types.TraceEvents.TraceEventData): HighlightedEntryInfo {\n    const title = TraceEngine.Types.Extensions.isSyntheticExtensionEntry(event) && event.args.tooltipText ?\n        event.args.tooltipText :\n        this.titleForEvent(event);\n    return {title, formattedTime: getFormattedTime(event.dur)};\n  }\n}\n"]}