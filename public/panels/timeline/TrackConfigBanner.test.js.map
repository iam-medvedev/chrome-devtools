{"version":3,"file":"TrackConfigBanner.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/TrackConfigBanner.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Trace from '../../models/trace/trace.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Timeline from './timeline.js';\n\nconst {createHiddenTracksOverlay} = Timeline.TrackConfigBanner;\n\nfunction fakeParsedTrace(): Trace.TraceModel.ParsedTrace {\n  // We don't need a real trace here; it is used as the cache key.\n  // So to keep the tests lightweight, let's just fake it\n  return {} as Trace.TraceModel.ParsedTrace;\n}\nconst NO_OP_CALLBACKS = {\n  onShowAllTracks: () => {},\n  onShowTrackConfigurationMode: () => {},\n  onClose: () => {},\n};\n\nfunction overlayIsBottomBar(overlay: Trace.Types.Overlays.Overlay|null): overlay is Trace.Types.Overlays.BottomInfoBar {\n  return overlay?.type === 'BOTTOM_INFO_BAR' && overlay?.infobar instanceof UI.Infobar.Infobar;\n}\n\ndescribeWithEnvironment('TrackConfigBanner', () => {\n  it('creates the overlay if the user has not seen it for this trace', async () => {\n    const trace = fakeParsedTrace();\n    const maybeOverlay = createHiddenTracksOverlay(trace, NO_OP_CALLBACKS);\n    assert.isOk(overlayIsBottomBar(maybeOverlay));\n  });\n\n  it('re-uses the same infobar for the same trace', async () => {\n    const trace = fakeParsedTrace();\n    const overlay1 = createHiddenTracksOverlay(trace, NO_OP_CALLBACKS);\n    assert.isOk(overlayIsBottomBar(overlay1));\n\n    const overlay2 = createHiddenTracksOverlay(trace, NO_OP_CALLBACKS);\n    assert.isOk(overlayIsBottomBar(overlay2));\n    assert.strictEqual(overlay1.infobar, overlay2.infobar);\n  });\n\n  it('creates new infobars for each trace', async () => {\n    const trace1 = fakeParsedTrace();\n    const trace2 = fakeParsedTrace();\n    const overlay1 = createHiddenTracksOverlay(trace1, NO_OP_CALLBACKS);\n    assert.isOk(overlayIsBottomBar(overlay1));\n\n    const overlay2 = createHiddenTracksOverlay(trace2, NO_OP_CALLBACKS);\n    assert.isOk(overlayIsBottomBar(overlay2));\n\n    assert.notStrictEqual(overlay1.infobar, overlay2.infobar);\n  });\n\n  it('does not create a new overlay if the user has seen and dismissed it', async () => {\n    const trace = fakeParsedTrace();\n    const overlay1 = createHiddenTracksOverlay(trace, NO_OP_CALLBACKS);\n    assert.isOk(overlayIsBottomBar(overlay1));\n    // This is equivalent to the user clicking the button to close it.\n    overlay1.infobar.dispose();\n\n    const overlay2 = createHiddenTracksOverlay(trace, NO_OP_CALLBACKS);\n    // The user has seen and dismissed the overlay, so we don't want to show it again.\n    assert.isNull(overlay2);\n  });\n});\n"]}