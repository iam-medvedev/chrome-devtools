{"version":3,"file":"LayoutShiftsTrackAppender.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/LayoutShiftsTrackAppender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport {buildGroupStyle, buildTrackHeader, getFormattedTime} from './AppenderUtils.js';\nimport {\n  type CompatibilityTracksAppender,\n  type DrawOverride,\n  type HighlightedEntryInfo,\n  type TrackAppender,\n  type TrackAppenderName,\n  VisualLoggingTrackName,\n} from './CompatibilityTracksAppender.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  layoutShifts: 'Layout shifts',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/LayoutShiftsTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// Bit of a hack: LayoutShifts are instant events, so have no duration. But\n// OPP doesn't do well at making tiny events easy to spot and click. So we\n// set it to a small duration so that the user is able to see and click\n// them more easily. Long term we will explore a better UI solution to\n// allow us to do this properly and not hack around it.\nexport const LAYOUT_SHIFT_SYNTHETIC_DURATION = Trace.Types.Timing.MicroSeconds(5_000);\n\nexport class LayoutShiftsTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'LayoutShifts';\n\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  #parsedTrace: Readonly<Trace.Handlers.Types.ParsedTrace>;\n\n  constructor(compatibilityBuilder: CompatibilityTracksAppender, parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    this.#compatibilityBuilder = compatibilityBuilder;\n    this.#parsedTrace = parsedTrace;\n  }\n\n  /**\n   * Appends into the flame chart data the data corresponding to the\n   * layout shifts track.\n   * @param trackStartLevel the horizontal level of the flame chart events where\n   * the track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean): number {\n    if (this.#parsedTrace.LayoutShifts.clusters.length === 0) {\n      return trackStartLevel;\n    }\n    this.#appendTrackHeaderAtLevel(trackStartLevel, expanded);\n    return this.#appendLayoutShiftsAtLevel(trackStartLevel);\n  }\n\n  /**\n   * Adds into the flame chart data the header corresponding to the\n   * layout shifts track. A header is added in the shape of a group in the\n   * flame chart data. A group has a predefined style and a reference\n   * to the definition of the legacy track (which should be removed\n   * in the future).\n   * @param currentLevel the flame chart level at which the header is\n   * appended.\n   */\n  #appendTrackHeaderAtLevel(currentLevel: number, expanded?: boolean): void {\n    const style = buildGroupStyle({collapsible: false});\n    const group = buildTrackHeader(\n        VisualLoggingTrackName.LAYOUT_SHIFTS, currentLevel, i18nString(UIStrings.layoutShifts), style,\n        /* selectable= */ true, expanded);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  /**\n   * Adds into the flame chart data all the layout shifts. These are taken from\n   * the clusters that are collected in the LayoutShiftsHandler.\n   * @param currentLevel the flame chart level from which layout shifts will\n   * be appended.\n   * @returns the next level after the last occupied by the appended\n   * layout shifts (the first available level to append more data).\n   */\n  #appendLayoutShiftsAtLevel(currentLevel: number): number {\n    const allLayoutShifts = this.#parsedTrace.LayoutShifts.clusters.flatMap(cluster => cluster.events);\n    const setFlameChartEntryTotalTime =\n        (_event: Trace.Types.Events.SyntheticLayoutShift|Trace.Types.Events.SyntheticLayoutShiftCluster,\n         index: number): void => {\n          let totalTime = LAYOUT_SHIFT_SYNTHETIC_DURATION;\n          if (Trace.Types.Events.isSyntheticLayoutShiftCluster(_event)) {\n            // This is to handle the cases where there is a singular shift for a cluster.\n            // A single shift would make the cluster duration 0 and hard to read.\n            // So in this case, give it the LAYOUT_SHIFT_SYNTHETIC_DURATION duration.\n            totalTime = _event.dur || LAYOUT_SHIFT_SYNTHETIC_DURATION;\n          }\n          this.#compatibilityBuilder.getFlameChartTimelineData().entryTotalTimes[index] =\n              Trace.Helpers.Timing.microSecondsToMilliseconds(totalTime);\n        };\n    let shiftLevel = currentLevel;\n    if (Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_LAYOUT_SHIFT_DETAILS)) {\n      const allClusters = this.#parsedTrace.LayoutShifts.clusters;\n      this.#compatibilityBuilder.appendEventsAtLevel(allClusters, currentLevel + 1, this, setFlameChartEntryTotalTime);\n\n      // layout shifts should be below clusters.\n      shiftLevel = currentLevel + 2;\n\n      return this.#compatibilityBuilder.appendEventsAtLevel(allLayoutShifts, shiftLevel, this);\n    }\n\n    return this.#compatibilityBuilder.appendEventsAtLevel(\n        allLayoutShifts, shiftLevel, this, setFlameChartEntryTotalTime);\n  }\n\n  /*\n    ------------------------------------------------------------------------------------\n     The following methods  are invoked by the flame chart renderer to query features about\n     events on rendering.\n    ------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Gets the color an event added by this appender should be rendered with.\n   */\n  colorForEvent(_event: Trace.Types.Events.Event): string {\n    return ThemeSupport.ThemeSupport.instance().getComputedValue('--app-color-rendering');\n  }\n\n  /**\n   * Gets the title an event added by this appender should be rendered with.\n   */\n  titleForEvent(event: Trace.Types.Events.Event): string {\n    if (Trace.Types.Events.isLayoutShift(event)) {\n      return 'Layout shift';\n    }\n    if (Trace.Types.Events.isSyntheticLayoutShiftCluster(event)) {\n      return 'Layout shift cluster';\n    }\n    return event.name;\n  }\n\n  /**\n   * Returns the info shown when an event added by this appender\n   * is hovered in the timeline.\n   */\n  highlightedEntryInfo(event: Trace.Types.Events.LayoutShift): HighlightedEntryInfo {\n    const title = this.titleForEvent(event);\n    return {title, formattedTime: getFormattedTime(event.dur)};\n  }\n\n  getDrawOverride(event: Trace.Types.Events.Event): DrawOverride|undefined {\n    if (!Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_LAYOUT_SHIFT_DETAILS)) {\n      return;\n    }\n\n    if (!Trace.Types.Events.isLayoutShift(event)) {\n      return;\n    }\n\n    const score = event.args.data?.weighted_score_delta || 0;\n\n    // `buffer` is how much space is between the actual diamond shape and the\n    // edge of its select box. The select box will have a constant size\n    // so a larger `buffer` will create a smaller diamond.\n    //\n    // This logic will scale the size of the diamond based on the layout shift score.\n    // A LS score of >=0.1 will create a diamond of maximum size\n    // A LS score of ~0 will create a diamond of minimum size (exactly 0 should not happen in practice)\n    const bufferScale = 1 - Math.min(score / 0.1, 1);\n    const buffer = Math.round(bufferScale * 3);\n\n    return (context, x, y, _width, height) => {\n      const boxSize = height;\n      const halfSize = boxSize / 2;\n      context.beginPath();\n      context.moveTo(x, y + buffer);\n      context.lineTo(x + halfSize - buffer, y + halfSize);\n      context.lineTo(x, y + height - buffer);\n      context.lineTo(x - halfSize + buffer, y + halfSize);\n      context.closePath();\n      context.fillStyle = this.colorForEvent(event);\n      context.fill();\n      return {\n        x: x - halfSize,\n        width: boxSize,\n      };\n    };\n  }\n}\n"]}