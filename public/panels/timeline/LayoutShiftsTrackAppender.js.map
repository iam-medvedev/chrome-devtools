{"version":3,"file":"LayoutShiftsTrackAppender.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/LayoutShiftsTrackAppender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport {buildGroupStyle, buildTrackHeader} from './AppenderUtils.js';\nimport {\n  type CompatibilityTracksAppender,\n  type DrawOverride,\n  type HighlightedEntryInfo,\n  type TrackAppender,\n  type TrackAppenderName,\n  VisualLoggingTrackName,\n} from './CompatibilityTracksAppender.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  layoutShifts: 'Layout shifts',\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  layoutShiftCluster: 'Layout shift cluster',\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  layoutShift: 'Layout shift',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/LayoutShiftsTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// Bit of a hack: LayoutShifts are instant events, so have no duration. But\n// OPP doesn't do well at making tiny events easy to spot and click. So we\n// set it to a small duration so that the user is able to see and click\n// them more easily. Long term we will explore a better UI solution to\n// allow us to do this properly and not hack around it.\n// TODO: Delete this once the new Layout Shift UI ships out of the TIMELINE_LAYOUT_SHIFT_DETAILS experiment\nexport const LAYOUT_SHIFT_SYNTHETIC_DURATION = Trace.Types.Timing.MicroSeconds(5_000);\n\nexport class LayoutShiftsTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'LayoutShifts';\n\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  #parsedTrace: Readonly<Trace.Handlers.Types.ParsedTrace>;\n\n  constructor(compatibilityBuilder: CompatibilityTracksAppender, parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    this.#compatibilityBuilder = compatibilityBuilder;\n    this.#parsedTrace = parsedTrace;\n  }\n\n  /**\n   * Appends into the flame chart data the data corresponding to the\n   * layout shifts track.\n   * @param trackStartLevel the horizontal level of the flame chart events where\n   * the track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean): number {\n    if (this.#parsedTrace.LayoutShifts.clusters.length === 0) {\n      return trackStartLevel;\n    }\n    this.#appendTrackHeaderAtLevel(trackStartLevel, expanded);\n    return this.#appendLayoutShiftsAtLevel(trackStartLevel);\n  }\n\n  /**\n   * Adds into the flame chart data the header corresponding to the\n   * layout shifts track. A header is added in the shape of a group in the\n   * flame chart data. A group has a predefined style and a reference\n   * to the definition of the legacy track (which should be removed\n   * in the future).\n   * @param currentLevel the flame chart level at which the header is\n   * appended.\n   */\n  #appendTrackHeaderAtLevel(currentLevel: number, expanded?: boolean): void {\n    const style = buildGroupStyle({collapsible: false});\n    const group = buildTrackHeader(\n        VisualLoggingTrackName.LAYOUT_SHIFTS, currentLevel, i18nString(UIStrings.layoutShifts), style,\n        /* selectable= */ true, expanded);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  /**\n   * Adds into the flame chart data all the layout shifts. These are taken from\n   * the clusters that are collected in the LayoutShiftsHandler.\n   * @param currentLevel the flame chart level from which layout shifts will\n   * be appended.\n   * @returns the next level after the last occupied by the appended\n   * layout shifts (the first available level to append more data).\n   */\n  #appendLayoutShiftsAtLevel(currentLevel: number): number {\n    const allLayoutShifts = this.#parsedTrace.LayoutShifts.clusters.flatMap(cluster => cluster.events);\n\n    if (Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_INSIGHTS)) {\n      const allClusters = this.#parsedTrace.LayoutShifts.clusters;\n      this.#compatibilityBuilder.appendEventsAtLevel(allClusters, currentLevel, this);\n    }\n\n    return this.#compatibilityBuilder.appendEventsAtLevel(allLayoutShifts, currentLevel, this);\n  }\n\n  /*\n    ------------------------------------------------------------------------------------\n     The following methods  are invoked by the flame chart renderer to query features about\n     events on rendering.\n    ------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Gets the color an event added by this appender should be rendered with.\n   */\n  colorForEvent(event: Trace.Types.Events.Event): string {\n    const renderingColor = ThemeSupport.ThemeSupport.instance().getComputedValue('--app-color-rendering');\n    if (Trace.Types.Events.isSyntheticLayoutShiftCluster(event)) {\n      const parsedColor = Common.Color.parse(renderingColor);\n      if (parsedColor) {\n        const colorWithAlpha = parsedColor.setAlpha(0.5).asString(Common.Color.Format.RGBA);\n        return colorWithAlpha;\n      }\n    }\n    return renderingColor;\n  }\n\n  /**\n   * Gets the title an event added by this appender should be rendered with.\n   */\n  titleForEvent(event: Trace.Types.Events.Event): string {\n    if (Trace.Types.Events.isLayoutShift(event)) {\n      return i18nString(UIStrings.layoutShift);\n    }\n    return '';\n  }\n\n  /**\n   * Returns the info shown when an event added by this appender\n   * is hovered in the timeline.\n   */\n  highlightedEntryInfo(event: Trace.Types.Events.Event): HighlightedEntryInfo {\n    const score = Trace.Types.Events.isLayoutShift(event)       ? event.args.data?.weighted_score_delta ?? 0 :\n        Trace.Types.Events.isSyntheticLayoutShiftCluster(event) ? event.clusterCumulativeScore :\n                                                                  -1;\n    const title = Trace.Types.Events.isLayoutShift(event)       ? i18nString(UIStrings.layoutShift) :\n        Trace.Types.Events.isSyntheticLayoutShiftCluster(event) ? i18nString(UIStrings.layoutShiftCluster) :\n                                                                  event.name;\n    // Score isn't a duration, but the UI works anyhow.\n    return {title, formattedTime: score.toFixed(4)};\n  }\n\n  getDrawOverride(event: Trace.Types.Events.Event): DrawOverride|undefined {\n    if (!Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_INSIGHTS)) {\n      // If the new CLS experience isn't on.. Continue to present that Shifts are 5ms long. (but now via drawOverrides)\n      // TODO: Remove this when the experiment ships\n      if (Trace.Types.Events.isLayoutShift(event)) {\n        return (context, x, y, _width, levelHeight, timeToPosition) => {\n          const fakeDurMs = Trace.Helpers.Timing.microSecondsToMilliseconds(\n              Trace.Types.Timing.MicroSeconds(event.ts + LAYOUT_SHIFT_SYNTHETIC_DURATION));\n          const barEnd = timeToPosition(fakeDurMs);\n          const barWidth = barEnd - x;\n          context.fillStyle = this.colorForEvent(event);\n          context.fillRect(x, y, barWidth - 0.5, levelHeight - 1);\n          return {\n            x,\n            width: barWidth,\n          };\n        };\n      }\n    }\n\n    if (Trace.Types.Events.isLayoutShift(event)) {\n      const score = event.args.data?.weighted_score_delta || 0;\n\n      // `buffer` is how much space is between the actual diamond shape and the\n      // edge of its select box. The select box will have a constant size\n      // so a larger `buffer` will create a smaller diamond.\n      //\n      // This logic will scale the size of the diamond based on the layout shift score.\n      // A LS score of >=0.1 will create a diamond of maximum size\n      // A LS score of ~0 will create a diamond of minimum size (exactly 0 should not happen in practice)\n      const bufferScale = 1 - Math.min(score / 0.10, 1);\n\n      return (context, x, y, _width, levelHeight) => {\n        // levelHeight is 17px, so this math translates to a minimum diamond size of 5.6px tall.\n        const maxBuffer = levelHeight / 3;\n        const buffer = bufferScale * maxBuffer;\n\n        const boxSize = levelHeight;\n        const halfSize = boxSize / 2;\n        context.save();\n        context.beginPath();\n        context.moveTo(x, y + buffer);\n        context.lineTo(x + halfSize - buffer, y + halfSize);\n        context.lineTo(x, y + levelHeight - buffer);\n        context.lineTo(x - halfSize + buffer, y + halfSize);\n        context.closePath();\n        context.fillStyle = this.colorForEvent(event);\n\n        context.fill();\n        context.restore();\n        return {\n          x: x - halfSize,\n          width: boxSize,\n        };\n      };\n    }\n    if (Trace.Types.Events.isSyntheticLayoutShiftCluster(event)) {\n      return (context, x, y, width, levelHeight) => {\n        const barHeight = levelHeight * 0.2;\n        const barY = y + (levelHeight - barHeight) / 2 + 0.5;\n        context.fillStyle = this.colorForEvent(event);\n        context.fillRect(x, barY, width - 0.5, barHeight - 1);\n        return {x, width, z: -1};\n      };\n    }\n    return;\n  }\n}\n"]}