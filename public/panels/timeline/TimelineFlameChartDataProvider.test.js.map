{"version":3,"file":"TimelineFlameChartDataProvider.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/TimelineFlameChartDataProvider.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\nimport * as PerfUi from '../../ui/legacy/components/perf_ui/perf_ui.js';\n\nimport * as Timeline from './timeline.js';\n\ndescribeWithEnvironment('TimelineFlameChartDataProvider', function() {\n  describe('groupTreeEvents', function() {\n    it('returns the correct events for tree views given a flame chart group', async function() {\n      const dataProvider = new Timeline.TimelineFlameChartDataProvider.TimelineFlameChartDataProvider();\n      const {traceParsedData, performanceModel} = await TraceLoader.allModels(this, 'sync-like-timings.json.gz');\n      dataProvider.setModel(performanceModel, traceParsedData);\n      const timingsTrackGroup = dataProvider.timelineData().groups.find(g => g.name === 'Timings');\n      if (!timingsTrackGroup) {\n        assert.fail('Could not find Timings track flame chart group');\n      }\n      const groupTreeEvents = dataProvider.groupTreeEvents(timingsTrackGroup);\n      const allTimingEvents = [\n        ...traceParsedData.UserTimings.consoleTimings,\n        ...traceParsedData.UserTimings.timestampEvents,\n        ...traceParsedData.UserTimings.performanceMarks,\n        ...traceParsedData.UserTimings.performanceMeasures,\n        ...traceParsedData.PageLoadMetrics.allMarkerEvents,\n      ].sort((a, b) => a.ts - b.ts);\n      assert.deepEqual(groupTreeEvents, allTimingEvents);\n    });\n\n    it('filters out async events if they cannot be added to the tree', async function() {\n      const dataProvider = new Timeline.TimelineFlameChartDataProvider.TimelineFlameChartDataProvider();\n      const {traceParsedData, performanceModel} = await TraceLoader.allModels(this, 'timings-track.json.gz');\n      dataProvider.setModel(performanceModel, traceParsedData);\n      const timingsTrackGroup = dataProvider.timelineData().groups.find(g => g.name === 'Timings');\n      if (!timingsTrackGroup) {\n        assert.fail('Could not find Timings track flame chart group');\n      }\n      const groupTreeEvents = dataProvider.groupTreeEvents(timingsTrackGroup);\n      assert.strictEqual(groupTreeEvents?.length, 12);\n      const allEventsAreSync = groupTreeEvents?.every(\n          event => !TraceEngine.Types.TraceEvents.isAsyncPhase(TraceEngine.Legacy.phaseForEvent(event)));\n      assert.isTrue(allEventsAreSync);\n    });\n  });\n\n  it('adds candy stripe and triangle decorations to long tasks in the main thread', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartDataProvider.TimelineFlameChartDataProvider();\n    const {traceParsedData, performanceModel} = await TraceLoader.allModels(this, 'one-second-interaction.json.gz');\n    dataProvider.setModel(performanceModel, traceParsedData);\n\n    const {entryDecorations} = dataProvider.timelineData();\n    const stripingTitles: string[] = [];\n    const triangleTitles: string[] = [];\n\n    Object.entries(entryDecorations).forEach(([index, decorationsForEvent]) => {\n      const entryTitle = dataProvider.entryTitle(parseInt(index, 10)) ?? '';\n      for (const decoration of decorationsForEvent) {\n        if (decoration.type === PerfUi.FlameChart.FlameChartDecorationType.CANDY) {\n          stripingTitles.push(entryTitle);\n        }\n        if (decoration.type === PerfUi.FlameChart.FlameChartDecorationType.WARNING_TRIANGLE) {\n          triangleTitles.push(entryTitle);\n        }\n      }\n    });\n\n    assert.deepEqual(stripingTitles, [\n      'Pointer',  // The interaction event in the Interactions track for the pointer event.\n      'Task',     // The same long task as above, but rendered by the new engine.\n    ]);\n    assert.deepEqual(triangleTitles, [\n      'Pointer',  // The interaction event in the Interactions track for the pointer event.\n      'Task',     // The same long task as above, but rendered by the new engine.\n    ]);\n  });\n\n  it('populates the frames track with frames and screenshots', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartDataProvider.TimelineFlameChartDataProvider();\n    const {traceParsedData, performanceModel} = await TraceLoader.allModels(this, 'web-dev.json.gz');\n    dataProvider.setModel(performanceModel, traceParsedData);\n    const framesTrack = dataProvider.timelineData().groups.find(g => {\n      return g.name.includes('Frames');\n    });\n    if (!framesTrack) {\n      throw new Error('Could not find expected Frames track');\n    }\n    const framesLevel = framesTrack.startLevel;\n    const screenshotsLevel = framesLevel + 1;\n    // The frames track first shows the frames, and then shows screenhots just below it.\n    assert.strictEqual(\n        dataProvider.getEntryTypeForLevel(framesLevel), Timeline.TimelineFlameChartDataProvider.EntryType.Frame);\n    assert.strictEqual(\n        dataProvider.getEntryTypeForLevel(screenshotsLevel),\n        Timeline.TimelineFlameChartDataProvider.EntryType.Screenshot);\n\n    // There are 5 screenshots in this trace, so we expect there to be 5 events on the screenshots track level.\n    const eventsOnScreenshotsLevel = dataProvider.timelineData().entryLevels.filter(e => e === screenshotsLevel);\n    assert.lengthOf(eventsOnScreenshotsLevel, 5);\n  });\n\n  describe('ignoring frames', function() {\n    it('removes entries from the data that match the ignored URL', async function() {\n      Root.Runtime.experiments.enableForTest('ignore-list-js-frames-on-timeline');\n\n      const targetManager = SDK.TargetManager.TargetManager.instance({forceNew: true});\n      const workspace = Workspace.Workspace.WorkspaceImpl.instance({forceNew: true});\n      const resourceMapping = new Bindings.ResourceMapping.ResourceMapping(targetManager, workspace);\n\n      const debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance({\n        forceNew: true,\n        resourceMapping,\n        targetManager,\n      });\n\n      const ignoreListManager = Bindings.IgnoreListManager.IgnoreListManager.instance({\n        forceNew: true,\n        debuggerWorkspaceBinding,\n      });\n\n      const dataProvider = new Timeline.TimelineFlameChartDataProvider.TimelineFlameChartDataProvider();\n      const {traceParsedData, performanceModel} = await TraceLoader.allModels(this, 'react-hello-world.json.gz');\n      dataProvider.setModel(performanceModel, traceParsedData);\n\n      const eventCountBeforeIgnoreList = dataProvider.timelineData().entryStartTimes.length;\n\n      const SCRIPT_TO_IGNORE =\n          'https://unpkg.com/react@18.2.0/umd/react.development.js' as Platform.DevToolsPath.UrlString;\n      // Clear the data provider cache and add the React script to the ignore list.\n      dataProvider.reset();\n      ignoreListManager.ignoreListURL(SCRIPT_TO_IGNORE);\n\n      const eventCountAfterIgnoreList = dataProvider.timelineData().entryStartTimes.length;\n      // Ensure that the amount of events we show on the flame chart is less\n      // than before, now we have added the React URL to the ignore list.\n      assert.isBelow(eventCountAfterIgnoreList, eventCountBeforeIgnoreList);\n\n      // Clear the data provider cache and unignore the script again\n      dataProvider.reset();\n      ignoreListManager.unIgnoreListURL(SCRIPT_TO_IGNORE);\n      // Ensure that now we have un-ignored the URL that we get the full set of events again.\n      assert.strictEqual(dataProvider.timelineData().entryStartTimes.length, eventCountBeforeIgnoreList);\n    });\n  });\n\n  it('filters navigations to only return those that happen on the main frame', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartDataProvider.TimelineFlameChartDataProvider();\n    const {traceParsedData, performanceModel} =\n        await TraceLoader.allModels(this, 'multiple-navigations-with-iframes.json.gz');\n\n    dataProvider.setModel(performanceModel, traceParsedData);\n\n    const mainFrameID = traceParsedData.Meta.mainFrameId;\n    const navigationEvents = dataProvider.mainFrameNavigationStartEvents();\n    // Ensure that every navigation event that we return is for the main frame.\n    assert.isTrue(navigationEvents.every(navEvent => {\n      return navEvent.args.frame === mainFrameID;\n    }));\n  });\n});\n"]}