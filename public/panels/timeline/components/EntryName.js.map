{"version":3,"file":"EntryName.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/EntryName.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,gCAAgC,CAAC;AACzD,OAAO,KAAK,IAAI,MAAM,4BAA4B,CAAC;AACnD,OAAO,KAAK,QAAQ,MAAM,oCAAoC,CAAC;AAC/D,OAAO,KAAK,WAAW,MAAM,gCAAgC,CAAC;AAE9D,MAAM,SAAS,GAAG;IAChB;;OAEG;IACH,SAAS,EAAE,aAAa;IACxB;;;OAGG;IACH,cAAc,EAAE,cAAc;IAC9B;;OAEG;IACH,KAAK,EAAE,OAAO;CACf,CAAC;AAEF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,yCAAyC,EAAE,SAAS,CAAC,CAAC;AAC/F,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE;;;;GAIG;AACH,MAAM,UAAU,YAAY,CACxB,KAAmD,EACnD,eAA2D;IAE7D,IAAI,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC;QACvD,IAAI,eAAe,EAAE,CAAC;YACpB,MAAM,iBAAiB,GACnB,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,0BAA0B,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC1G,oEAAoE;YACpE,yCAAyC;YACzC,IAAI,iBAAiB,EAAE,CAAC;gBACtB,OAAO,iBAAiB,CAAC;YAC3B,CAAC;QACH,CAAC;QACD,OAAO,KAAK,CAAC,SAAS,CAAC,YAAY,IAAI,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IACzE,CAAC;IAED,IAAI,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,qBAAqB,CAAC,KAAK,CAAC,EAAE,CAAC;QAC/D,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;IAED,IAAI,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAC;QAC9D,uEAAuE;QACvE,sEAAsE;QACtE,gEAAgE;QAChE,OAAO,UAAU,CAAC,SAAS,CAAC,cAAc,EAAE,EAAC,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAC,CAAC,CAAC;IAC3E,CAAC;IACD,IAAI,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,8BAA8B,CAAC,KAAK,CAAC,EAAE,CAAC;QACxE,MAAM,SAAS,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtE,MAAM,IAAI,GACN,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,WAAW,KAAK,SAAS,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,iBAAiB,CAAC;QAClH,OAAO,QAAQ,CAAC,eAAe,CAAC,oBAAoB,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC;IAED,OAAO,KAAK,CAAC,IAAI,CAAC;AACpB,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as TraceEngine from '../../../models/trace/trace.js';\n\nconst UIStrings = {\n  /**\n   *@description Text shown for an entry in the flame chart that has no explict name.\n   */\n  anonymous: '(anonymous)',\n  /**\n   *@description Text used to show an EventDispatch event which has a type associated with it\n   *@example {click} PH1\n   */\n  eventDispatchS: 'Event: {PH1}',\n  /**\n   *@description Text shown for an entry in the flame chart that represents a frame.\n   */\n  frame: 'Frame',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/EntryName.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * Calculates the display name for a given entry. If the trace data is provided\n * as the second argument it can be used to find source map resolved names for\n * profile calls.\n */\nexport function nameForEntry(\n    entry: TraceEngine.Types.TraceEvents.TraceEventData,\n    traceParsedData?: TraceEngine.Handlers.Types.TraceParseData,\n    ): string {\n  if (TraceEngine.Types.TraceEvents.isProfileCall(entry)) {\n    if (traceParsedData) {\n      const potentialCallName =\n          TraceEngine.Handlers.ModelHandlers.Samples.getProfileCallFunctionName(traceParsedData.Samples, entry);\n      // We need this extra check because the call name could be the empty\n      // string. If it is, we want to fallback.\n      if (potentialCallName) {\n        return potentialCallName;\n      }\n    }\n    return entry.callFrame.functionName || i18nString(UIStrings.anonymous);\n  }\n\n  if (TraceEngine.Types.TraceEvents.isLegacyTimelineFrame(entry)) {\n    return i18n.i18n.lockedString(UIStrings.frame);\n  }\n\n  if (TraceEngine.Types.TraceEvents.isTraceEventDispatch(entry)) {\n    // EventDispatch represent user actions such as clicks, so in this case\n    // rather than show the event title (which is always just \"Event\"), we\n    // add the type (\"click\") to help the user understand the event.\n    return i18nString(UIStrings.eventDispatchS, {PH1: entry.args.data.type});\n  }\n  if (TraceEngine.Types.TraceEvents.isSyntheticNetworkRequestEvent(entry)) {\n    const parsedURL = new Common.ParsedURL.ParsedURL(entry.args.data.url);\n    const text =\n        parsedURL.isValid ? `${parsedURL.displayName} (${parsedURL.host})` : entry.args.data.url || 'Network request';\n    return Platform.StringUtilities.trimEndWithMaxLength(text, 40);\n  }\n\n  return entry.name;\n}\n"]}