{"version":3,"file":"MetricCard.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/MetricCard.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as CrUXManager from '../../../models/crux-manager/crux-manager.js';\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {describeWithMockConnection} from '../../../testing/MockConnection.js';\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\n\nimport * as Components from './components.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nfunction getLocalMetricValue(view: Element): HTMLElement {\n  return view!.shadowRoot!.querySelector('#local-value .metric-value') as HTMLElement;\n}\n\nfunction getFieldMetricValue(view: Element): HTMLElement|null {\n  return view!.shadowRoot!.querySelector('#field-value .metric-value');\n}\n\nfunction getFieldHistogramPercents(view: Element): string[] {\n  const histogram = view!.shadowRoot!.querySelector('.bucket-summaries') as HTMLElement;\n  const percents = Array.from(histogram.querySelectorAll('.histogram-percent')) as HTMLElement[];\n  return percents.map(p => p.textContent || '');\n}\n\nfunction getFieldHistogramLabels(view: Element): string[] {\n  const histogram = view!.shadowRoot!.querySelector('.bucket-summaries') as HTMLElement;\n  const percents = Array.from(histogram.querySelectorAll('.bucket-label')) as HTMLElement[];\n  return percents.map(p => p.textContent || '');\n}\n\nfunction getCompareText(view: Element): HTMLElement|null {\n  return view!.shadowRoot!.querySelector('.compare-text');\n}\n\nfunction getDetailedCompareText(view: Element): HTMLElement|null {\n  return view!.shadowRoot!.querySelector('.detailed-compare-text');\n}\n\nfunction createMockHistogram() {\n  // start/end values aren't actually used but they are filled out just in case\n  // the histogram is therefore usable by all metrics\n  return [\n    {start: 0, end: 2500, density: 0.5},\n    {start: 2500, end: 4000, density: 0.3},\n    {start: 4000, density: 0.2},\n  ];\n}\n\ndescribeWithMockConnection('MetricCard', () => {\n  beforeEach(async () => {\n    const dummyStorage = new Common.Settings.SettingsStorage({});\n    Common.Settings.Settings.instance({\n      forceNew: true,\n      syncedStorage: dummyStorage,\n      globalStorage: dummyStorage,\n      localStorage: dummyStorage,\n    });\n\n    CrUXManager.CrUXManager.instance({forceNew: true});\n    CrUXManager.CrUXManager.instance().getConfigSetting().set({enabled: true, override: ''});\n  });\n\n  it('should show LCP value', async () => {\n    const view = new Components.MetricCard.MetricCard();\n    view.data = {\n      metric: 'LCP',\n      localValue: 100,\n      fieldValue: 5000,\n      histogram: createMockHistogram(),\n    };\n\n    renderElementIntoDOM(view);\n    await coordinator.done();\n\n    const localValueEl = getLocalMetricValue(view);\n    assert.strictEqual(localValueEl.className, 'metric-value good');\n    assert.strictEqual(localValueEl.innerText, '100 ms');\n\n    const fieldValueEl = getFieldMetricValue(view);\n    assert.strictEqual(fieldValueEl!.className, 'metric-value poor');\n    assert.strictEqual(fieldValueEl!.innerText, '5.00 s');\n\n    const histogramLabels = getFieldHistogramLabels(view);\n    assert.match(histogramLabels[0], /Good\\s+\\(≤2.50 s\\)/);\n    assert.match(histogramLabels[1], /Needs improvement\\s+\\(2.50 s-4.00 s\\)/);\n    assert.match(histogramLabels[2], /Poor\\s+\\(>4.00 s\\)/);\n  });\n\n  it('should show CLS value', async () => {\n    const view = new Components.MetricCard.MetricCard();\n    view.data = {\n      metric: 'CLS',\n      localValue: 0.14294789234,\n      fieldValue: 0,\n      histogram: createMockHistogram(),\n    };\n\n    renderElementIntoDOM(view);\n    await coordinator.done();\n\n    const localValueEl = getLocalMetricValue(view);\n    assert.strictEqual(localValueEl.className, 'metric-value needs-improvement');\n    assert.strictEqual(localValueEl.innerText, '0.14');\n\n    const fieldValueEl = getFieldMetricValue(view);\n    assert.strictEqual(fieldValueEl!.className, 'metric-value good');\n    assert.strictEqual(fieldValueEl!.innerText, '0');\n\n    const histogramLabels = getFieldHistogramLabels(view);\n    assert.match(histogramLabels[0], /Good\\s+\\(≤0.10\\)/);\n    assert.match(histogramLabels[1], /Needs improvement\\s+\\(0.10-0.25\\)/);\n    assert.match(histogramLabels[2], /Poor\\s+\\(>0.25\\)/);\n  });\n\n  it('should show INP value', async () => {\n    const view = new Components.MetricCard.MetricCard();\n    view.data = {\n      metric: 'INP',\n      localValue: 2000,\n      fieldValue: 1,\n      histogram: createMockHistogram(),\n    };\n\n    renderElementIntoDOM(view);\n    await coordinator.done();\n\n    const localValueEl = getLocalMetricValue(view);\n    assert.strictEqual(localValueEl.className, 'metric-value poor');\n    assert.strictEqual(localValueEl.innerText, '2.00 s');\n\n    const fieldValueEl = getFieldMetricValue(view);\n    assert.strictEqual(fieldValueEl!.className, 'metric-value good');\n    assert.strictEqual(fieldValueEl!.innerText, '1 ms');\n\n    const histogramLabels = getFieldHistogramLabels(view);\n    assert.match(histogramLabels[0], /Good\\s+\\(≤200 ms\\)/);\n    assert.match(histogramLabels[1], /Needs improvement\\s+\\(200 ms-500 ms\\)/);\n    assert.match(histogramLabels[2], /Poor\\s+\\(>500 ms\\)/);\n  });\n\n  it('should show empty metric', async () => {\n    const view = new Components.MetricCard.MetricCard();\n\n    renderElementIntoDOM(view);\n    await coordinator.done();\n\n    const metricValueEl = getLocalMetricValue(view);\n    assert.strictEqual(metricValueEl.className.trim(), 'metric-value waiting');\n    assert.strictEqual(metricValueEl.innerText, '-');\n\n    const fieldValueEl = getFieldMetricValue(view);\n    assert.strictEqual(fieldValueEl!.className, 'metric-value waiting');\n    assert.strictEqual(fieldValueEl!.innerText, '-');\n\n    const histogramLabels = getFieldHistogramLabels(view);\n    assert.match(histogramLabels[0], /Good\\s+\\(≤2.50 s\\)/);\n    assert.match(histogramLabels[1], /Needs improvement\\s+\\(2.50 s-4.00 s\\)/);\n    assert.match(histogramLabels[2], /Poor\\s+\\(>4.00 s\\)/);\n  });\n\n  describe('field data', () => {\n    it('should not show when crux is disabled', async () => {\n      CrUXManager.CrUXManager.instance().getConfigSetting().set({enabled: false, override: ''});\n\n      const view = new Components.MetricCard.MetricCard();\n      view.data = {\n        metric: 'LCP',\n        localValue: 100,\n        fieldValue: 200,\n        histogram: createMockHistogram(),\n      };\n      renderElementIntoDOM(view);\n\n      await coordinator.done();\n\n      const histogramLabels = getFieldHistogramLabels(view);\n      assert.match(histogramLabels[0], /Good\\s+\\(≤2.50 s\\)/);\n      assert.match(histogramLabels[1], /Needs improvement\\s+\\(2.50 s-4.00 s\\)/);\n      assert.match(histogramLabels[2], /Poor\\s+\\(>4.00 s\\)/);\n\n      const histogramPercents = getFieldHistogramPercents(view);\n      assert.lengthOf(histogramPercents, 0);\n\n      const fieldValueEl = getFieldMetricValue(view);\n      assert.isNull(fieldValueEl);\n    });\n\n    it('should show when crux is enabled', async () => {\n      const view = new Components.MetricCard.MetricCard();\n      view.data = {\n        metric: 'LCP',\n        localValue: 100,\n        fieldValue: 200,\n        histogram: createMockHistogram(),\n      };\n      renderElementIntoDOM(view);\n\n      await coordinator.done();\n\n      const histogramLabels = getFieldHistogramLabels(view);\n      assert.match(histogramLabels[0], /Good\\s+\\(≤2.50 s\\)/);\n      assert.match(histogramLabels[1], /Needs improvement\\s+\\(2.50 s-4.00 s\\)/);\n      assert.match(histogramLabels[2], /Poor\\s+\\(>4.00 s\\)/);\n\n      const histogramPercents = getFieldHistogramPercents(view);\n      assert.deepStrictEqual(histogramPercents, ['50%', '30%', '20%']);\n\n      const fieldValueEl = getFieldMetricValue(view);\n      assert.strictEqual(fieldValueEl!.textContent, '200 ms');\n    });\n\n    it('should show empty values when crux is enabled but there is no field data', async () => {\n      const view = new Components.MetricCard.MetricCard();\n      view.data = {\n        metric: 'LCP',\n        localValue: 100,\n      };\n      renderElementIntoDOM(view);\n\n      await coordinator.done();\n\n      const histogramLabels = getFieldHistogramLabels(view);\n      assert.match(histogramLabels[0], /Good\\s+\\(≤2.50 s\\)/);\n      assert.match(histogramLabels[1], /Needs improvement\\s+\\(2.50 s-4.00 s\\)/);\n      assert.match(histogramLabels[2], /Poor\\s+\\(>4.00 s\\)/);\n\n      const histogramPercents = getFieldHistogramPercents(view);\n      assert.deepStrictEqual(histogramPercents, ['-', '-', '-']);\n\n      const fieldValueEl = getFieldMetricValue(view);\n      assert.strictEqual(fieldValueEl!.textContent, '-');\n    });\n  });\n\n  describe('local/field comparison', () => {\n    it('should show message when values are similar', async () => {\n      const view = new Components.MetricCard.MetricCard();\n      view.data = {\n        metric: 'LCP',\n        localValue: 100,\n        fieldValue: 200,\n        histogram: createMockHistogram(),\n      };\n      renderElementIntoDOM(view);\n\n      await coordinator.done();\n\n      const compareText = getCompareText(view);\n      assert.strictEqual(\n          compareText!.innerText, 'Your local LCP 100 ms is good, and is similar to your users’ experience.');\n    });\n\n    it('should show message when local is better', async () => {\n      const view = new Components.MetricCard.MetricCard();\n      view.data = {\n        metric: 'LCP',\n        localValue: 100,\n        fieldValue: 5000,\n        histogram: createMockHistogram(),\n      };\n      renderElementIntoDOM(view);\n\n      await coordinator.done();\n\n      const compareText = getCompareText(view);\n      assert.strictEqual(\n          compareText!.innerText,\n          'Your local LCP 100 ms is good, but is significantly better than your users’ experience.');\n    });\n\n    it('should show message when local is worse', async () => {\n      const view = new Components.MetricCard.MetricCard();\n      view.data = {\n        metric: 'LCP',\n        localValue: 5000,\n        fieldValue: 100,\n        histogram: createMockHistogram(),\n      };\n      renderElementIntoDOM(view);\n\n      await coordinator.done();\n\n      const compareText = getCompareText(view);\n      assert.strictEqual(\n          compareText!.innerText,\n          'Your local LCP 5.00 s is poor, but is significantly worse than your users’ experience.');\n    });\n\n    it('should always be similar if local and field are rated \"good\"', async () => {\n      const view = new Components.MetricCard.MetricCard();\n      view.data = {\n        metric: 'LCP',\n        localValue: 10,\n        fieldValue: 2490,\n        histogram: createMockHistogram(),\n      };\n      renderElementIntoDOM(view);\n\n      await coordinator.done();\n\n      const compareText = getCompareText(view);\n      assert.strictEqual(\n          compareText!.innerText, 'Your local LCP 10 ms is good, and is similar to your users’ experience.');\n    });\n\n    it('should show generic summary if field is missing', async () => {\n      const view = new Components.MetricCard.MetricCard();\n      view.data = {\n        metric: 'LCP',\n        localValue: 3000,\n      };\n      renderElementIntoDOM(view);\n\n      await coordinator.done();\n\n      const compareText = getCompareText(view);\n      assert.strictEqual(compareText!.innerText, 'Your local LCP 3.00 s needs improvement.');\n    });\n\n    it('should suggest interaction if local INP is missing', async () => {\n      const view = new Components.MetricCard.MetricCard();\n      view.data = {\n        metric: 'INP',\n      };\n      renderElementIntoDOM(view);\n\n      await coordinator.done();\n\n      const compareText = getCompareText(view);\n      assert.strictEqual(compareText!.innerText, 'Interact with the page to measure INP.');\n    });\n  });\n\n  describe('detailed local/field comparison', () => {\n    it('should show message when values are rated the same', async () => {\n      const view = new Components.MetricCard.MetricCard();\n      view.data = {\n        metric: 'LCP',\n        localValue: 100,\n        fieldValue: 1000,\n        histogram: createMockHistogram(),\n      };\n      renderElementIntoDOM(view);\n\n      await coordinator.done();\n\n      const compareText = getDetailedCompareText(view);\n      assert.strictEqual(\n          compareText!.innerText,\n          'Your local LCP 100 ms is good and is rated the same as 50% of real-user LCP experiences. Additionally, the field data 75th percentile LCP 1.00 s is good.',\n      );\n    });\n\n    it('should show message when values are rated differently', async () => {\n      const view = new Components.MetricCard.MetricCard();\n      view.data = {\n        metric: 'LCP',\n        localValue: 100,\n        fieldValue: 5000,\n        histogram: createMockHistogram(),\n      };\n      renderElementIntoDOM(view);\n\n      await coordinator.done();\n\n      const compareText = getDetailedCompareText(view);\n      assert.strictEqual(\n          compareText!.innerText,\n          'Your local LCP 100 ms is good and is rated the same as 50% of real-user LCP experiences. However, the field data 75th percentile LCP 5.00 s is poor.',\n      );\n    });\n\n    it('should show generic summary if field is missing', async () => {\n      const view = new Components.MetricCard.MetricCard();\n      view.data = {\n        metric: 'LCP',\n        localValue: 3000,\n      };\n      renderElementIntoDOM(view);\n\n      await coordinator.done();\n\n      const compareText = getDetailedCompareText(view);\n      assert.strictEqual(compareText!.innerText, 'Your local LCP 3.00 s needs improvement.');\n    });\n\n    it('should suggest interaction if local INP is missing', async () => {\n      const view = new Components.MetricCard.MetricCard();\n      view.data = {\n        metric: 'INP',\n      };\n      renderElementIntoDOM(view);\n\n      await coordinator.done();\n\n      const compareText = getDetailedCompareText(view);\n      assert.strictEqual(compareText!.innerText, 'Interact with the page to measure INP.');\n    });\n  });\n});\n"]}