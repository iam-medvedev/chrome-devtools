{"version":3,"file":"SidebarInsight.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/SidebarInsight.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Handlers from '../../../models/trace/handlers/handlers.js';\nimport type * as TraceEngine from '../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport sidebarInsightStyles from './sidebarInsight.css.js';\n\nexport interface InsightDetails {\n  title: string;\n  expanded: boolean;\n}\n\nexport function getLCPInsightData(insights: TraceEngine.Insights.Types.TraceInsightData<typeof Handlers.ModelHandlers>|\n                                  null):\n    Array<{phase: string, timing: number | TraceEngine.Types.Timing.MilliSeconds, percent: string}> {\n  if (!insights) {\n    return [];\n  }\n  // For now, use the first navigation of the trace.\n  const firstNav = insights.values().next().value;\n  if (!firstNav) {\n    return [];\n  }\n  const lcpInsight = firstNav.LargestContentfulPaint;\n  if (lcpInsight instanceof Error) {\n    return [];\n  }\n\n  const timing = lcpInsight.lcpMs;\n  const phases = lcpInsight.phases;\n\n  if (!timing || !phases) {\n    return [];\n  }\n\n  const {ttfb, loadDelay, loadTime, renderDelay} = phases;\n\n  if (loadDelay && loadTime) {\n    const phaseData = [\n      {phase: 'Time to first byte', timing: ttfb, percent: `${(100 * ttfb / timing).toFixed(0)}%`},\n      {phase: 'Resource load delay', timing: loadDelay, percent: `${(100 * loadDelay / timing).toFixed(0)}%`},\n      {phase: 'Resource load duration', timing: loadTime, percent: `${(100 * loadTime / timing).toFixed(0)}%`},\n      {phase: 'Resource render delay', timing: renderDelay, percent: `${(100 * renderDelay / timing).toFixed(0)}%`},\n    ];\n    return phaseData;\n  }\n\n  // If the lcp is text, we only have ttfb and render delay.\n  const phaseData = [\n    {phase: 'Time to first byte', timing: ttfb, percent: `${(100 * ttfb / timing).toFixed(0)}%`},\n    {phase: 'Resource render delay', timing: renderDelay, percent: `${(100 * renderDelay / timing).toFixed(0)}%`},\n  ];\n  return phaseData;\n}\n\nexport function renderLCPPhases(\n    phaseData: Array<{phase: string, timing: number | TraceEngine.Types.Timing.MilliSeconds, percent: string}>,\n    insightExpanded: boolean): LitHtml.LitTemplate {\n  const lcpTitle = 'LCP by Phase';\n  const showLCPPhases = phaseData ? phaseData.length > 0 : false;\n\n  // clang-format off\n  if (insightExpanded) {\n    return LitHtml.html`${\n      showLCPPhases ? LitHtml.html`\n      <${SidebarInsight.litTagName} .data=${{\n          title: lcpTitle,\n          expanded: insightExpanded,\n        } as InsightDetails}>\n        <div slot=\"insight-description\" class=\"insight-description\">\n          Each\n          <x-link class=\"link\" href=\"https://web.dev/articles/optimize-lcp#lcp-breakdown\">phase has specific recommendations to improve.</x-link>\n          In an ideal load, the two delay phases should be quite short.\n        </div>\n        <div slot=\"insight-content\" class=\"table-container\">\n          <dl>\n            <dt class=\"dl-title\">Phase</dt>\n            <dd class=\"dl-title\">% of LCP</dd>\n            ${phaseData?.map(phase => LitHtml.html`\n              <dt>${phase.phase}</dt>\n              <dd class=\"dl-value\">${phase.percent}</dd>\n            `)}\n          </dl>\n        </div>\n      </${SidebarInsight}>` : LitHtml.nothing}`;\n  }\n    return LitHtml.html`\n    <${SidebarInsight.litTagName} .data=${{\n          title: lcpTitle,\n          expanded: insightExpanded,\n        } as InsightDetails}>\n      </${SidebarInsight}>`;\n  // clang-format on\n}\n\nexport class SidebarInsight extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-performance-sidebar-insight`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n  #insightTitle: string = '';\n  #expanded: boolean = false;\n\n  set data(data: InsightDetails) {\n    this.#insightTitle = data.title;\n    this.#expanded = data.expanded;\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [sidebarInsightStyles];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #render(): void {\n    let output: LitHtml.TemplateResult;\n    if (!this.#expanded) {\n      output = LitHtml.html`\n        <div class=\"insight closed\">\n            <h3 class=\"insight-title\">${this.#insightTitle}</h3>\n        </div>`;\n    } else {\n      output = LitHtml.html`\n        <div class=\"insight\">\n            <h3 class=\"insight-title\">${this.#insightTitle}</h3>\n            <slot name=\"insight-description\"></slot>\n            <slot name=\"insight-content\"></slot>\n        </div>`;\n    }\n    LitHtml.render(output, this.#shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-sidebar-insight': SidebarInsight;\n  }\n}\n\ncustomElements.define('devtools-performance-sidebar-insight', SidebarInsight);\n"]}