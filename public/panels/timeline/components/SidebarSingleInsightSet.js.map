{"version":3,"file":"SidebarSingleInsightSet.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/SidebarSingleInsightSet.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,4BAA4B,CAAC;AACnD,OAAO,KAAK,IAAI,MAAM,4BAA4B,CAAC;AACnD,OAAO,KAAK,KAAK,MAAM,gCAAgC,CAAC;AACxD,OAAO,KAAK,gBAAgB,MAAM,2CAA2C,CAAC;AAC9E,OAAO,KAAK,OAAO,MAAM,kCAAkC,CAAC;AAE5D,OAAO,EAAC,uBAAuB,EAAC,MAAM,uBAAuB,CAAC;AAC9D,OAAO,KAAK,QAAQ,MAAM,wBAAwB,CAAC;AAEnD,OAAO,MAAM,MAAM,kCAAkC,CAAC;AACtD,OAAO,EAAC,cAAc,EAA4B,MAAM,YAAY,CAAC;AAErE,MAAM,EAAC,IAAI,EAAC,GAAG,OAAO,CAAC;AAEvB,MAAM,SAAS,GAAG;IAChB;;;;;OAKG;IACH,WAAW,EAAE,0BAA0B;CACxC,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,uDAAuD,EAAE,SAAS,CAAC,CAAC;AAC7G,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAUtE;;;;YAIY;AACZ,MAAM,qBAAqB,GAAwB,IAAI,GAAG,CAAC;IACzD,aAAa;CACd,CAAC,CAAC;AAEH;;;;GAIG;AACH,MAAM,yBAAyB,GAAG;IAChC,sBAAsB,EAAE,QAAQ,CAAC,sBAAsB,CAAC,sBAAsB;IAC9E,SAAS,EAAE,QAAQ,CAAC,SAAS,CAAC,SAAS;IACvC,YAAY,EAAE,QAAQ,CAAC,YAAY,CAAC,YAAY;IAChD,WAAW,EAAE,QAAQ,CAAC,WAAW,CAAC,WAAW;IAC7C,cAAc,EAAE,QAAQ,CAAC,cAAc,CAAC,cAAc;IACtD,eAAe,EAAE,QAAQ,CAAC,eAAe,CAAC,eAAe;IACzD,WAAW,EAAE,QAAQ,CAAC,WAAW,CAAC,WAAW;IAC7C,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,QAAQ;IACpC,YAAY,EAAE,QAAQ,CAAC,YAAY,CAAC,YAAY;IAChD,eAAe,EAAE,QAAQ,CAAC,eAAe,CAAC,eAAe;CAC1D,CAAC;AAEF,MAAM,OAAO,uBAAwB,SAAQ,WAAW;IAC7C,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IACrD,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEvC,KAAK,GAAgC;QACnC,WAAW,EAAE,IAAI;QACjB,QAAQ,EAAE,IAAI;QACd,aAAa,EAAE,IAAI;QACnB,cAAc,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG;QACxD,aAAa,EAAE,IAAI;KACpB,CAAC;IAEF,IAAI,IAAI,CAAC,IAAiC;QACxC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IACD,iBAAiB;QACf,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,gBAAgB,CAAC,KAAwB;QACvC,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC;YAC3E,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;IAC7C,CAAC;IAED,cAAc,CAAC,UAAoC;QACjD,IAAI,CAAC,aAAa,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED,kBAAkB,CACd,KAAwB,EAAE,KAAkC,EAC5D,cAAgF,EAChF,oBAAmD;QACrD,MAAM,SAAS,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;QACjE,MAAM,YAAY,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC;QAEvE,iEAAiE;QACjE,6DAA6D;QAC7D,sEAAsE;QACtE,qEAAqE;QACrE,oDAAoD;QACpD,mBAAmB;QACnB,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,WAAW,EAAE,EAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,cAAc,EAAC,CAAC,CAAC;QAEnG,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;;iBAE7B,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC,CAAC,CAAC,IAAI;gBACnF,KAAK;qBACA,KAAK;;gDAEsB,cAAc,KAAK,YAAY;oCAC3C,KAAK;;KAEpC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;QACpB,kBAAkB;IACpB,CAAC;IAED,OAAO,CAAC,aAAqB;QAE3B,MAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,wBAAwB,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QAC/G,IAAI,CAAC,OAAO,EAAE,uBAAuB,EAAE,GAAG,EAAE,CAAC;YAC3C,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,KAAK,GAAG,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC;QAClD,OAAO,EAAC,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,uBAAuB,EAAC,CAAC;IACzD,CAAC;IAED,OAAO,CAAC,aAAqB;QAE3B,MAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QAClG,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;YACpD,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,0BAA0B,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7E,OAAO,EAAC,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,QAAQ,EAAC,CAAC;IAC1C,CAAC;IAED,OAAO,CAAC,aAAqB;QAC3B,MAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QACpG,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,sFAAsF;YACtF,wDAAwD;YACxD,OAAO,EAAC,KAAK,EAAE,CAAC,EAAE,eAAe,EAAE,IAAI,EAAC,CAAC;QAC3C,CAAC;QAED,6DAA6D;QAC7D,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,YAAY,CAAC;QACjB,KAAK,MAAM,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;YACvC,IAAI,OAAO,CAAC,sBAAsB,GAAG,QAAQ,EAAE,CAAC;gBAC9C,QAAQ,GAAG,OAAO,CAAC,sBAAsB,CAAC;gBAC1C,YAAY,GAAG,OAAO,CAAC;YACzB,CAAC;QACH,CAAC;QAED,OAAO,EAAC,KAAK,EAAE,QAAQ,EAAE,eAAe,EAAE,YAAY,EAAE,eAAe,IAAI,IAAI,EAAC,CAAC;IACnF,CAAC;IAED,cAAc,CAAC,aAAqB;QAClC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QACxC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QACxC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAExC,OAAO,IAAI,CAAA;;MAGP,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CACnB,KAAK,EAAE,cAAc,CAAC,2BAA2B,CAAC,GAAG,CAAC,KAAK,CAAC,EAC5D,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,eAAe,CAAC,4CAA4C,CAAC,GAAG,CAAC,KAAK,CAAC,EACpG,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,OAAO;MAErB,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CACnB,KAAK,EAAE,cAAc,CAAC,+BAA+B,CAAC,GAAG,CAAC,KAAK,CAAC,EAChE,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,4CAA4C,CAAC,GAAG,CAAC,KAAK,CAAC,EACrG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;YAChB,OAAO,CAAC,OAAO;MAErB,IAAI,CAAC,kBAAkB,CACnB,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAC7C,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,iCAAiC,CAAC,GAAG,CAAC,KAAK,CAAC,EACtF,GAAG,CAAC,eAAe,CAAC;;KAE3B,CAAC;IACJ,CAAC;IAED,eAAe,CACX,WAAuD,EACvD,WAAkD,EAClD,aAAqB;QAEvB,MAAM,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,mGAE7D,CAAC;QAEF,MAAM,MAAM,GAAG,WAAW,EAAE,GAAG,CAAC,aAAa,CAAC,EAAE,KAAK,CAAC;QACtD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,OAAO,CAAC,OAAO,CAAC;QACzB,CAAC;QAED,MAAM,UAAU,GAA6B,EAAE,CAAC;QAChD,KAAK,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,yBAAyB,CAAC,EAAE,CAAC;YAC/E,IAAI,CAAC,mBAAmB,IAAI,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC5D,SAAS;YACX,CAAC;YAED,MAAM,KAAK,GAAG,MAAM,CAAC,IAA2B,CAAC,CAAC;YAClD,IAAI,CAAC,KAAK;gBACN,CAAC,uBAAuB,CAAC,EAAC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,eAAe,EAAE,KAAK,CAAC,QAAQ,EAAC,CAAC,EAAE,CAAC;gBAC3G,SAAS;YACX,CAAC;YAED,mBAAmB;YACnB,MAAM,SAAS,GAAG,IAAI,CAAA;WACjB,cAAc,CAAC,UAAU;sBACd,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,KAAK,KAAK;mBAC5C,KAAK;yBACC,WAAW;2BACT,aAAa;YAC5B,cAAc,CAAC,UAAU;aACxB,CAAC;YACR,kBAAkB;YAElB,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7B,CAAC;QAED,OAAO,IAAI,CAAA,GAAG,UAAU,EAAE,CAAC;IAC7B,CAAC;IAED,OAAO;QACL,MAAM,EACJ,WAAW,EACX,QAAQ,EACR,aAAa,GACd,GAAG,IAAI,CAAC,KAAK,CAAC;QACf,IAAI,CAAC,WAAW,IAAI,CAAC,QAAQ,IAAI,CAAC,aAAa,EAAE,CAAC;YAChD,OAAO,CAAC,MAAM,CAAC,IAAI,CAAA,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;YACnD,OAAO;QACT,CAAC;QAED,mBAAmB;QACnB,OAAO,CAAC,MAAM,CAAC,IAAI,CAAA;;UAEb,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC;UAClC,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,WAAW,EAAE,aAAa,CAAC;;OAE7D,EAAE,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;QACjC,kBAAkB;IACpB,CAAC;CACF;AAQD,cAAc,CAAC,MAAM,CAAC,gDAAgD,EAAE,uBAAuB,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Root from '../../../core/root/root.js';\nimport * as Trace from '../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport {shouldRenderForCategory} from './insights/Helpers.js';\nimport * as Insights from './insights/insights.js';\nimport type {ActiveInsight} from './Sidebar.js';\nimport styles from './sidebarSingleInsightSet.css.js';\nimport {NumberWithUnit, type NumberWithUnitString} from './Utils.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   *@description title used for a metric value to tell the user about its score classification\n   *@example {INP} PH1\n   *@example {1.2s} PH2\n   *@example {poor} PH3\n   */\n  metricScore: '{PH1}: {PH2} {PH3} score',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/SidebarSingleInsightSet.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface SidebarSingleInsightSetData {\n  parsedTrace: Trace.Handlers.Types.ParsedTrace|null;\n  insights: Trace.Insights.Types.TraceInsightSets|null;\n  insightSetKey: Trace.Types.Events.NavigationId|null;\n  activeCategory: Trace.Insights.Types.InsightCategory;\n  activeInsight: ActiveInsight|null;\n}\n\n/**\n * These are WIP Insights that are only shown if the user has turned on the\n * \"enable experimental performance insights\" experiment. This is used to enable\n * us to ship incrementally without turning insights on by default for all\n * users. */\nconst EXPERIMENTAL_INSIGHTS: ReadonlySet<string> = new Set([\n  'FontDisplay',\n]);\n\n/**\n * Every insight (INCLUDING experimental ones)\n * The order of these properties is the order the insights will be shown in the sidebar.\n * TODO(crbug.com/368135130): sort this in a smart way!\n */\nconst INSIGHT_NAME_TO_COMPONENT = {\n  InteractionToNextPaint: Insights.InteractionToNextPaint.InteractionToNextPaint,\n  LCPPhases: Insights.LCPPhases.LCPPhases,\n  LCPDiscovery: Insights.LCPDiscovery.LCPDiscovery,\n  CLSCulprits: Insights.CLSCulprits.CLSCulprits,\n  RenderBlocking: Insights.RenderBlocking.RenderBlocking,\n  DocumentLatency: Insights.DocumentLatency.DocumentLatency,\n  FontDisplay: Insights.FontDisplay.FontDisplay,\n  Viewport: Insights.Viewport.Viewport,\n  ThirdParties: Insights.ThirdParties.ThirdParties,\n  SlowCSSSelector: Insights.SlowCSSSelector.SlowCSSSelector,\n};\n\nexport class SidebarSingleInsightSet extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #renderBound = this.#render.bind(this);\n\n  #data: SidebarSingleInsightSetData = {\n    parsedTrace: null,\n    insights: null,\n    insightSetKey: null,\n    activeCategory: Trace.Insights.Types.InsightCategory.ALL,\n    activeInsight: null,\n  };\n\n  set data(data: SidebarSingleInsightSetData) {\n    this.#data = data;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [styles];\n    this.#render();\n  }\n\n  #metricIsVisible(label: 'LCP'|'CLS'|'INP'): boolean {\n    if (this.#data.activeCategory === Trace.Insights.Types.InsightCategory.ALL) {\n      return true;\n    }\n    return label === this.#data.activeCategory;\n  }\n\n  #onClickMetric(traceEvent: Trace.Types.Events.Event): void {\n    this.dispatchEvent(new Insights.EventRef.EventReferenceClick(traceEvent));\n  }\n\n  #renderMetricValue(\n      label: 'LCP'|'CLS'|'INP', value: string|NumberWithUnitString,\n      classification: Trace.Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification,\n      eventToSelectOnClick: Trace.Types.Events.Event|null): LitHtml.LitTemplate {\n    const valueText = typeof value === 'string' ? value : value.text;\n    const valueDisplay = typeof value === 'string' ? value : value.element;\n\n    // NOTE: it is deliberate to use the same value for the title and\n    // aria-label; the aria-label is used to give more context to\n    // screen-readers, and the title is to aid users who may not know what\n    // the red/orange/green classification is, or those who are unable to\n    // easily distinguish the visual colour differences.\n    // clang-format off\n    const title = i18nString(UIStrings.metricScore, {PH1: label, PH2: valueText, PH3: classification});\n\n    return this.#metricIsVisible(label) ? html`\n      <button class=\"metric\"\n        @click=${eventToSelectOnClick ? this.#onClickMetric.bind(this, eventToSelectOnClick) : null}\n        title=${title}\n        aria-label=${title}\n      >\n        <div class=\"metric-value metric-value-${classification}\">${valueDisplay}</div>\n        <div class=\"metric-label\">${label}</div>\n      </button>\n    ` : LitHtml.nothing;\n    // clang-format on\n  }\n\n  #getINP(insightSetKey: string):\n      {value: Trace.Types.Timing.MicroSeconds, event: Trace.Types.Events.SyntheticInteractionPair}|null {\n    const insight = Trace.Insights.Common.getInsight('InteractionToNextPaint', this.#data.insights, insightSetKey);\n    if (!insight?.longestInteractionEvent?.dur) {\n      return null;\n    }\n\n    const value = insight.longestInteractionEvent.dur;\n    return {value, event: insight.longestInteractionEvent};\n  }\n\n  #getLCP(insightSetKey: string):\n      {value: Trace.Types.Timing.MicroSeconds, event: Trace.Types.Events.LargestContentfulPaintCandidate}|null {\n    const insight = Trace.Insights.Common.getInsight('LCPPhases', this.#data.insights, insightSetKey);\n    if (!insight || !insight.lcpMs || !insight.lcpEvent) {\n      return null;\n    }\n\n    const value = Trace.Helpers.Timing.millisecondsToMicroseconds(insight.lcpMs);\n    return {value, event: insight.lcpEvent};\n  }\n\n  #getCLS(insightSetKey: string): {value: number, worstShiftEvent: Trace.Types.Events.Event|null} {\n    const insight = Trace.Insights.Common.getInsight('CLSCulprits', this.#data.insights, insightSetKey);\n    if (!insight) {\n      // Unlike the other metrics, there is still a value for this metric even with no data.\n      // This means this view will always display a CLS score.\n      return {value: 0, worstShiftEvent: null};\n    }\n\n    // TODO(cjamcl): the CLS insight should be doing this for us.\n    let maxScore = 0;\n    let worstCluster;\n    for (const cluster of insight.clusters) {\n      if (cluster.clusterCumulativeScore > maxScore) {\n        maxScore = cluster.clusterCumulativeScore;\n        worstCluster = cluster;\n      }\n    }\n\n    return {value: maxScore, worstShiftEvent: worstCluster?.worstShiftEvent ?? null};\n  }\n\n  #renderMetrics(insightSetKey: string): LitHtml.TemplateResult {\n    const lcp = this.#getLCP(insightSetKey);\n    const cls = this.#getCLS(insightSetKey);\n    const inp = this.#getINP(insightSetKey);\n\n    return html`\n    <div class=\"metrics-row\">\n    ${\n        lcp ? this.#renderMetricValue(\n                  'LCP', NumberWithUnit.formatMicroSecondsAsSeconds(lcp.value),\n                  Trace.Handlers.ModelHandlers.PageLoadMetrics.scoreClassificationForLargestContentfulPaint(lcp.value),\n                  lcp.event ?? null) :\n              LitHtml.nothing}\n    ${\n        inp ? this.#renderMetricValue(\n                  'INP', NumberWithUnit.formatMicroSecondsAsMillisFixed(inp.value),\n                  Trace.Handlers.ModelHandlers.UserInteractions.scoreClassificationForInteractionToNextPaint(inp.value),\n                  inp.event) :\n              LitHtml.nothing}\n    ${\n        this.#renderMetricValue(\n            'CLS', cls.value ? cls.value.toFixed(2) : '0',\n            Trace.Handlers.ModelHandlers.LayoutShifts.scoreClassificationForLayoutShift(cls.value),\n            cls.worstShiftEvent)}\n    </div>\n    `;\n  }\n\n  #renderInsights(\n      insightSets: Trace.Insights.Types.TraceInsightSets|null,\n      parsedTrace: Trace.Handlers.Types.ParsedTrace|null,\n      insightSetKey: string,\n      ): LitHtml.LitTemplate {\n    const includeExperimental = Root.Runtime.experiments.isEnabled(\n        Root.Runtime.ExperimentName.TIMELINE_EXPERIMENTAL_INSIGHTS,\n    );\n\n    const models = insightSets?.get(insightSetKey)?.model;\n    if (!models) {\n      return LitHtml.nothing;\n    }\n\n    const components: LitHtml.TemplateResult[] = [];\n    for (const [name, componentClass] of Object.entries(INSIGHT_NAME_TO_COMPONENT)) {\n      if (!includeExperimental && EXPERIMENTAL_INSIGHTS.has(name)) {\n        continue;\n      }\n\n      const model = models[name as keyof typeof models];\n      if (!model ||\n          !shouldRenderForCategory({activeCategory: this.#data.activeCategory, insightCategory: model.category})) {\n        continue;\n      }\n\n      // clang-format off\n      const component = html`<div>\n        <${componentClass.litTagName}\n          .selected=${this.#data.activeInsight?.model === model}\n          .model=${model}\n          .parsedTrace=${parsedTrace}\n          .insightSetKey=${insightSetKey}\n        </${componentClass.litTagName}>\n      </div>`;\n      // clang-format on\n\n      components.push(component);\n    }\n\n    return html`${components}`;\n  }\n\n  #render(): void {\n    const {\n      parsedTrace,\n      insights,\n      insightSetKey,\n    } = this.#data;\n    if (!parsedTrace || !insights || !insightSetKey) {\n      LitHtml.render(html``, this.#shadow, {host: this});\n      return;\n    }\n\n    // clang-format off\n    LitHtml.render(html`\n      <div class=\"navigation\">\n        ${this.#renderMetrics(insightSetKey)}\n        ${this.#renderInsights(insights, parsedTrace, insightSetKey)}\n        </div>\n      `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-sidebar-single-navigation': SidebarSingleInsightSet;\n  }\n}\n\ncustomElements.define('devtools-performance-sidebar-single-navigation', SidebarSingleInsightSet);\n"]}