{"version":3,"file":"SidebarSingleInsightSet.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/SidebarSingleInsightSet.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Root from '../../../core/root/root.js';\nimport * as Trace from '../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport {shouldRenderForCategory} from './insights/Helpers.js';\nimport * as Insights from './insights/insights.js';\nimport type {ActiveInsight} from './Sidebar.js';\nimport styles from './sidebarSingleInsightSet.css.js';\nimport {NumberWithUnit} from './Utils.js';\n\nconst {html} = LitHtml.StaticHtml;\n\nconst UIStrings = {\n  /**\n   *@description title used for a metric value to tell the user about its score classification\n   *@example {INP} PH1\n   *@example {1.2s} PH2\n   *@example {poor} PH3\n   */\n  metricScore: '{PH1}: {PH2} {PH3} score',\n  /**\n   *@description title used for a metric value to tell the user that the data is unavailable\n   *@example {INP} PH1\n   */\n  metricScoreUnavailable: '{PH1}: unavailable',\n  /**\n   * @description Summary text for an expandable dropdown that contains all insights in a passing state.\n   * @example {4} PH1\n   */\n  passedInsights: 'Passed insights ({PH1})',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/SidebarSingleInsightSet.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface SidebarSingleInsightSetData {\n  insights: Trace.Insights.Types.TraceInsightSets|null;\n  insightSetKey: Trace.Types.Events.NavigationId|null;\n  activeCategory: Trace.Insights.Types.InsightCategory;\n  activeInsight: ActiveInsight|null;\n  parsedTrace: Trace.Handlers.Types.ParsedTrace|null;\n  traceMetadata: Trace.Types.File.MetaData|null;\n}\n\n/**\n * These are WIP Insights that are only shown if the user has turned on the\n * \"enable experimental performance insights\" experiment. This is used to enable\n * us to ship incrementally without turning insights on by default for all\n * users. */\nconst EXPERIMENTAL_INSIGHTS: ReadonlySet<string> = new Set([\n  'FontDisplay',\n  'LongCriticalNetworkTree',\n]);\n\ntype InsightNameToComponentMapping =\n    Record<string, typeof Insights.BaseInsightComponent.BaseInsightComponent<Trace.Insights.Types.InsightModel<{}>>>;\n\n/**\n * Every insight (INCLUDING experimental ones).\n *\n * Order does not matter (but keep alphabetized).\n */\nconst INSIGHT_NAME_TO_COMPONENT: InsightNameToComponentMapping = {\n  CLSCulprits: Insights.CLSCulprits.CLSCulprits,\n  DOMSize: Insights.DOMSize.DOMSize,\n  DocumentLatency: Insights.DocumentLatency.DocumentLatency,\n  FontDisplay: Insights.FontDisplay.FontDisplay,\n  ImageDelivery: Insights.ImageDelivery.ImageDelivery,\n  InteractionToNextPaint: Insights.InteractionToNextPaint.InteractionToNextPaint,\n  LCPDiscovery: Insights.LCPDiscovery.LCPDiscovery,\n  LCPPhases: Insights.LCPPhases.LCPPhases,\n  LongCriticalNetworkTree: Insights.LongCriticalNetworkTree.LongCriticalNetworkTree,\n  RenderBlocking: Insights.RenderBlocking.RenderBlocking,\n  SlowCSSSelector: Insights.SlowCSSSelector.SlowCSSSelector,\n  ThirdParties: Insights.ThirdParties.ThirdParties,\n  ForcedReflow: Insights.ForcedReflow.ForcedReflow,\n  Viewport: Insights.Viewport.Viewport,\n};\n\nexport class SidebarSingleInsightSet extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #renderBound = this.#render.bind(this);\n\n  #data: SidebarSingleInsightSetData = {\n    insights: null,\n    insightSetKey: null,\n    activeCategory: Trace.Insights.Types.InsightCategory.ALL,\n    activeInsight: null,\n    parsedTrace: null,\n    traceMetadata: null,\n  };\n\n  set data(data: SidebarSingleInsightSetData) {\n    this.#data = data;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [styles];\n    this.#render();\n  }\n\n  #metricIsVisible(label: 'LCP'|'CLS'|'INP'): boolean {\n    if (this.#data.activeCategory === Trace.Insights.Types.InsightCategory.ALL) {\n      return true;\n    }\n    return label === this.#data.activeCategory;\n  }\n\n  #onClickMetric(traceEvent: Trace.Types.Events.Event): void {\n    this.dispatchEvent(new Insights.EventRef.EventReferenceClick(traceEvent));\n  }\n\n  #renderMetricValue(metric: 'LCP'|'CLS'|'INP', value: number|null, relevantEvent: Trace.Types.Events.Event|null):\n      LitHtml.LitTemplate {\n    let valueText: string;\n    let valueDisplay: HTMLElement|string;\n    let classification;\n    if (value === null) {\n      valueText = valueDisplay = '-';\n      classification = Trace.Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification.UNCLASSIFIED;\n    } else if (metric === 'LCP') {\n      const micros = value as Trace.Types.Timing.Micro;\n      const {text, element} = NumberWithUnit.formatMicroSecondsAsSeconds(micros);\n      valueText = text;\n      valueDisplay = element;\n      classification =\n          Trace.Handlers.ModelHandlers.PageLoadMetrics.scoreClassificationForLargestContentfulPaint(micros);\n    } else if (metric === 'CLS') {\n      valueText = valueDisplay = value ? value.toFixed(2) : '0';\n      classification = Trace.Handlers.ModelHandlers.LayoutShifts.scoreClassificationForLayoutShift(value);\n    } else if (metric === 'INP') {\n      const micros = value as Trace.Types.Timing.Micro;\n      const {text, element} = NumberWithUnit.formatMicroSecondsAsMillisFixed(micros);\n      valueText = text;\n      valueDisplay = element;\n      classification =\n          Trace.Handlers.ModelHandlers.UserInteractions.scoreClassificationForInteractionToNextPaint(micros);\n    } else {\n      Platform.TypeScriptUtilities.assertNever(metric, `Unexpected metric ${metric}`);\n    }\n\n    // NOTE: it is deliberate to use the same value for the title and\n    // aria-label; the aria-label is used to give more context to\n    // screen-readers, and the title is to aid users who may not know what\n    // the red/orange/green classification is, or those who are unable to\n    // easily distinguish the visual colour differences.\n    // clang-format off\n    const title = value !== null ?\n      i18nString(UIStrings.metricScore, {PH1: metric, PH2: valueText, PH3: classification}) :\n      i18nString(UIStrings.metricScoreUnavailable, {PH1: metric});\n\n    return this.#metricIsVisible(metric) ? html`\n      <button class=\"metric\"\n        @click=${relevantEvent ? this.#onClickMetric.bind(this, relevantEvent) : null}\n        title=${title}\n        aria-label=${title}\n      >\n        <div class=\"metric-value metric-value-${classification}\">${valueDisplay}</div>\n      </button>\n    ` : LitHtml.nothing;\n    // clang-format on\n  }\n\n  #renderMetrics(insightSetKey: string): LitHtml.TemplateResult {\n    const lcp = Trace.Insights.Common.getLCP(this.#data.insights, insightSetKey);\n    const cls = Trace.Insights.Common.getCLS(this.#data.insights, insightSetKey);\n    const inp = Trace.Insights.Common.getINP(this.#data.insights, insightSetKey);\n\n    const lcpEl = this.#renderMetricValue('LCP', lcp?.value ?? null, lcp?.event ?? null);\n    const inpEl = this.#renderMetricValue('INP', inp?.value ?? null, inp?.event ?? null);\n    const clsEl = this.#renderMetricValue('CLS', cls.value ?? null, cls?.worstShiftEvent ?? null);\n\n    const localMetricsTemplateResult = html`\n      <div class=\"metrics-row\">\n        <span>${lcpEl}</span>\n        <span>${inpEl}</span>\n        <span>${clsEl}</span>\n        <span class=\"row-label\">Local</span>\n      </div>\n      <span class=\"row-border\"></span>\n    `;\n\n    const insightSet = this.#data.insights?.get(insightSetKey);\n    const fieldMetricsResults =\n        insightSet && Trace.Insights.Common.getFieldMetricsForInsightSet(insightSet, this.#data.traceMetadata);\n    let fieldMetricsTemplateResult;\n    if (fieldMetricsResults) {\n      let {lcp, inp, cls} = fieldMetricsResults;\n\n      // This UI shows field data from the Origin or URL datasets, but never a mix.\n      if (lcp?.pageScope === 'url' || inp?.pageScope === 'url' || cls?.pageScope === 'url') {\n        if (lcp?.pageScope === 'origin') {\n          lcp = null;\n        }\n        if (inp?.pageScope === 'origin') {\n          inp = null;\n        }\n        if (cls?.pageScope === 'origin') {\n          cls = null;\n        }\n      }\n\n      if (lcp || inp || cls) {\n        const lcpEl = this.#renderMetricValue('LCP', lcp?.value ?? null, null);\n        const inpEl = this.#renderMetricValue('INP', inp?.value ?? null, null);\n        const clsEl = this.#renderMetricValue('CLS', cls?.value ?? null, null);\n\n        fieldMetricsTemplateResult = html`\n          <div class=\"metrics-row\">\n            <span>${lcpEl}</span>\n            <span>${inpEl}</span>\n            <span>${clsEl}</span>\n            <span class=\"row-label\">Field (Origin)</span>\n          </div>\n          <span class=\"row-border\"></span>\n        `;\n      }\n    }\n\n    const classes = {metrics: true, 'metrics--field': Boolean(fieldMetricsTemplateResult)};\n    return html`<div class=${LitHtml.Directives.classMap(classes)}>\n      <div class=\"metrics-row\">\n        <span class=\"metric-label\">LCP</span>\n        <span class=\"metric-label\">INP</span>\n        <span class=\"metric-label\">CLS</span>\n        <span class=\"row-label\"></span>\n      </div>\n      ${localMetricsTemplateResult}\n      ${fieldMetricsTemplateResult}\n    </div>`;\n  }\n\n  #renderInsights(\n      insightSets: Trace.Insights.Types.TraceInsightSets|null,\n      insightSetKey: string,\n      ): LitHtml.LitTemplate {\n    const includeExperimental = Root.Runtime.experiments.isEnabled(\n        Root.Runtime.ExperimentName.TIMELINE_EXPERIMENTAL_INSIGHTS,\n    );\n\n    const insightSet = insightSets?.get(insightSetKey);\n    if (!insightSet) {\n      return LitHtml.nothing;\n    }\n\n    const models = insightSet.model;\n    const shownInsights: LitHtml.TemplateResult[] = [];\n    const passedInsights: LitHtml.TemplateResult[] = [];\n    for (const [name, model] of Object.entries(models)) {\n      const componentClass = INSIGHT_NAME_TO_COMPONENT[name as keyof Trace.Insights.Types.InsightModels];\n      if (!componentClass) {\n        continue;\n      }\n\n      if (!includeExperimental && EXPERIMENTAL_INSIGHTS.has(name)) {\n        continue;\n      }\n\n      if (!model ||\n          !shouldRenderForCategory({activeCategory: this.#data.activeCategory, insightCategory: model.category})) {\n        continue;\n      }\n\n      // clang-format off\n      const component = html`<div>\n        <${componentClass.litTagName}\n          .selected=${this.#data.activeInsight?.model === model}\n          .model=${model}\n          .bounds=${insightSet.bounds}\n          .insightSetKey=${insightSetKey}\n          .parsedTrace=${this.#data.parsedTrace}>\n        </${componentClass.litTagName}>\n      </div>`;\n      // clang-format on\n\n      if (model.shouldShow) {\n        shownInsights.push(component);\n      } else {\n        passedInsights.push(component);\n      }\n    }\n\n    // clang-format off\n    return html`\n      ${shownInsights}\n      ${passedInsights.length ? html`\n        <details class=\"passed-insights-section\">\n          <summary>${i18nString(UIStrings.passedInsights, {\n            PH1: passedInsights.length,\n          })}</summary>\n          ${passedInsights}\n        </details>\n      ` : LitHtml.nothing}\n    `;\n    // clang-format on\n  }\n\n  #render(): void {\n    const {\n      insights,\n      insightSetKey,\n    } = this.#data;\n    if (!insights || !insightSetKey) {\n      LitHtml.render(html``, this.#shadow, {host: this});\n      return;\n    }\n\n    // clang-format off\n    LitHtml.render(html`\n      <div class=\"navigation\">\n        ${this.#renderMetrics(insightSetKey)}\n        ${this.#renderInsights(insights, insightSetKey)}\n        </div>\n      `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-sidebar-single-navigation': SidebarSingleInsightSet;\n  }\n}\n\ncustomElements.define('devtools-performance-sidebar-single-navigation', SidebarSingleInsightSet);\n"]}