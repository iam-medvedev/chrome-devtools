{"version":3,"file":"Utils.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/Utils.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Trace from '../../../models/trace/trace.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\n\nimport * as Utils from './Utils.js';\n\ndescribeWithEnvironment('Utils', () => {\n  describe('NumberWithUnit', () => {\n    const {NumberWithUnit} = Utils;\n\n    it('renders number with unit (formatMicroSecondsAsSeconds)', () => {\n      const result = NumberWithUnit.formatMicroSecondsAsSeconds(100_000 as Trace.Types.Timing.MicroSeconds);\n      assert.strictEqual(result.text, '0.10s');\n      assert.strictEqual(result.element.textContent, '0.10s');\n      assert.strictEqual(result.element.querySelector('.unit')?.textContent, 's');\n    });\n\n    it('renders number with unit (formatMicroSecondsAsMillisFixed)', () => {\n      const result = NumberWithUnit.formatMicroSecondsAsMillisFixed(100_000 as Trace.Types.Timing.MicroSeconds);\n      assert.strictEqual(result.text, '100ms');\n      assert.strictEqual(result.element.textContent, '100ms');\n      assert.strictEqual(result.element.querySelector('.unit')?.textContent, 'ms');\n    });\n\n    it('parse', () => {\n      // en\n      assert.deepStrictEqual(NumberWithUnit.parse('100[s]()'), {firstPart: '100', unitPart: 's', lastPart: ''});\n      assert.deepStrictEqual(NumberWithUnit.parse('100 [s]()'), {firstPart: '100 ', unitPart: 's', lastPart: ''});\n\n      // Decimal separators\n      assert.deepStrictEqual(\n          NumberWithUnit.parse('100.123[ms]()'), {firstPart: '100.123', unitPart: 'ms', lastPart: ''});\n      assert.deepStrictEqual(NumberWithUnit.parse('100,2[s]()'), {firstPart: '100,2', unitPart: 's', lastPart: ''});\n\n      // zh\n      assert.deepStrictEqual(NumberWithUnit.parse('100[毫秒]()'), {firstPart: '100', unitPart: '毫秒', lastPart: ''});\n      // zh-Hans-CN-u-nu-hanidec\n      assert.deepStrictEqual(\n          NumberWithUnit.parse('一〇〇[毫秒]()'), {firstPart: '一〇〇', unitPart: '毫秒', lastPart: ''});\n\n      // ar-SA (RTL language, but the UIString still places the number first in the string)\n      assert.deepStrictEqual(\n          NumberWithUnit.parse('١٠٠[ملي ثانية]()'), {firstPart: '١٠٠', unitPart: 'ملي ثانية', lastPart: ''});\n\n      // ar\n      assert.deepStrictEqual(\n          NumberWithUnit.parse('100[ملي ثانية]()'), {firstPart: '100', unitPart: 'ملي ثانية', lastPart: ''});\n\n      // sw (only one that places unit first)\n      assert.deepStrictEqual(NumberWithUnit.parse('[Sek]()100'), {firstPart: '', unitPart: 'Sek', lastPart: '100'});\n      assert.deepStrictEqual(NumberWithUnit.parse('[Sek]() 100'), {firstPart: '', unitPart: 'Sek', lastPart: ' 100'});\n\n      // error cases\n      assert.deepStrictEqual(NumberWithUnit.parse(''), null);\n      assert.deepStrictEqual(NumberWithUnit.parse('100s'), null);\n      assert.deepStrictEqual(NumberWithUnit.parse('100[s]('), null);\n      assert.deepStrictEqual(NumberWithUnit.parse('100[s]'), null);\n      assert.deepStrictEqual(NumberWithUnit.parse('100[s'), null);\n      assert.deepStrictEqual(NumberWithUnit.parse('100 s]('), null);\n    });\n  });\n});\n"]}