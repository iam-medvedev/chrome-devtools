{"version":3,"file":"LiveMetricsView.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/LiveMetricsView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport * as CrUXManager from '../../../models/crux-manager/crux-manager.js';\nimport * as LiveMetrics from '../../../models/live-metrics/live-metrics.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as Settings from '../../../ui/components/settings/settings.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport liveMetricsViewStyles from './liveMetricsView.css.js';\n\nconst {html, nothing, Directives} = LitHtml;\nconst {until} = Directives;\n\ntype MetricRating = 'good'|'needs-improvement'|'poor';\ntype MetricThresholds = [number, number];\n\n// TODO: Consolidate our metric rating logic with the trace engine.\nconst LCP_THRESHOLDS = [2500, 4000] as MetricThresholds;\nconst CLS_THRESHOLDS = [0.1, 0.25] as MetricThresholds;\nconst INP_THRESHOLDS = [200, 500] as MetricThresholds;\n\nexport class LiveMetricsView extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-live-metrics-view`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #lcpValue?: LiveMetrics.LCPValue;\n  #clsValue?: LiveMetrics.CLSValue;\n  #inpValue?: LiveMetrics.INPValue;\n  #interactions: LiveMetrics.InteractionValue[] = [];\n\n  #cruxPageResult?: CrUXManager.PageResult;\n\n  // TODO: Link these to real setting inputs\n  #fieldDeviceScope: CrUXManager.DeviceScope = 'ALL';\n  #fieldPreferURL = true;\n\n  #toggleRecordAction: UI.ActionRegistration.Action;\n  #recordReloadAction: UI.ActionRegistration.Action;\n\n  constructor() {\n    super();\n\n    this.#toggleRecordAction = UI.ActionRegistry.ActionRegistry.instance().getAction('timeline.toggle-recording');\n    this.#recordReloadAction = UI.ActionRegistry.ActionRegistry.instance().getAction('timeline.record-reload');\n\n    this.#render();\n  }\n\n  #onMetricStatus(event: {data: LiveMetrics.StatusEvent}): void {\n    this.#lcpValue = event.data.lcp;\n    this.#clsValue = event.data.cls;\n    this.#inpValue = event.data.inp;\n    this.#interactions = event.data.interactions;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  #onFieldDataChanged(event: {data: CrUXManager.PageResult|undefined}): void {\n    this.#cruxPageResult = event.data;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  async #refreshFieldDataForCurrentPage(): Promise<void> {\n    this.#cruxPageResult = await CrUXManager.CrUXManager.instance().getFieldDataForCurrentPage();\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  #getFieldMetricData(fieldMetric: CrUXManager.MetricNames): CrUXManager.MetricResponse|undefined {\n    const originResponse = this.#cruxPageResult?.[`origin-${this.#fieldDeviceScope}`];\n    const urlResponse = this.#cruxPageResult?.[`url-${this.#fieldDeviceScope}`];\n    if (this.#fieldPreferURL && urlResponse) {\n      return urlResponse?.record.metrics[fieldMetric];\n    }\n    return originResponse?.record.metrics[fieldMetric];\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [liveMetricsViewStyles];\n\n    const liveMetrics = LiveMetrics.LiveMetrics.instance();\n    liveMetrics.addEventListener(LiveMetrics.Events.Status, this.#onMetricStatus, this);\n\n    const cruxManager = CrUXManager.CrUXManager.instance();\n    cruxManager.addEventListener(CrUXManager.Events.FieldDataChanged, this.#onFieldDataChanged, this);\n\n    if (cruxManager.getAutomaticSetting().get()) {\n      void this.#refreshFieldDataForCurrentPage();\n    }\n\n    this.#lcpValue = liveMetrics.lcpValue;\n    this.#clsValue = liveMetrics.clsValue;\n    this.#inpValue = liveMetrics.inpValue;\n    this.#interactions = liveMetrics.interactions;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  disconnectedCallback(): void {\n    LiveMetrics.LiveMetrics.instance().removeEventListener(LiveMetrics.Events.Status, this.#onMetricStatus, this);\n\n    const cruxManager = CrUXManager.CrUXManager.instance();\n    cruxManager.removeEventListener(CrUXManager.Events.FieldDataChanged, this.#onFieldDataChanged, this);\n  }\n\n  #renderMetricValue(value: number|string|undefined, thresholds: MetricThresholds, format: (value: number) => string):\n      LitHtml.LitTemplate {\n    if (value === undefined) {\n      return html`<span class=\"metric-value waiting\">-<span>`;\n    }\n\n    if (typeof value === 'string') {\n      value = Number(value);\n    }\n\n    const rating = this.#rateMetric(value, thresholds);\n    const valueString = format(value);\n    return html`\n      <span class=${`metric-value ${rating}`}>${valueString}</span>\n    `;\n  }\n\n  #renderLcpCard(): LitHtml.LitTemplate {\n    const title = 'Largest Contentful Paint (LCP)';\n    const fieldData = this.#getFieldMetricData('largest_contentful_paint');\n\n    return this.#renderMetricCard(\n        title,\n        this.#lcpValue?.value,\n        fieldData?.percentiles.p75,\n        fieldData?.histogram,\n        LCP_THRESHOLDS,\n        v => i18n.TimeUtilities.millisToString(v),\n        this.#lcpValue?.node,\n    );\n  }\n\n  #renderClsCard(): LitHtml.LitTemplate {\n    const title = 'Cumulative Layout Shift (CLS)';\n    const fieldData = this.#getFieldMetricData('cumulative_layout_shift');\n\n    return this.#renderMetricCard(\n        title,\n        this.#clsValue?.value,\n        fieldData?.percentiles.p75,\n        fieldData?.histogram,\n        CLS_THRESHOLDS,\n        v => v === 0 ? '0' : v.toFixed(2),\n    );\n  }\n\n  #renderInpCard(): LitHtml.LitTemplate {\n    const title = 'Interaction to Next Paint (INP)';\n    const fieldData = this.#getFieldMetricData('interaction_to_next_paint');\n\n    return this.#renderMetricCard(\n        title,\n        this.#inpValue?.value,\n        fieldData?.percentiles.p75,\n        fieldData?.histogram,\n        INP_THRESHOLDS,\n        v => i18n.TimeUtilities.millisToString(v),\n    );\n  }\n\n  #densityAsPercent(density?: number): string {\n    if (density === undefined) {\n      density = 0;\n    }\n    const percent = Math.round(density * 100);\n    return `${percent}%`;\n  }\n\n  #renderFieldHistogram(\n      histogram: CrUXManager.MetricResponse['histogram'], thresholds: MetricThresholds,\n      format: (value: number) => string): LitHtml.LitTemplate {\n    const goodPercent = this.#densityAsPercent(histogram[0].density);\n    const needsImprovementPercent = this.#densityAsPercent(histogram[1].density);\n    const poorPercent = this.#densityAsPercent(histogram[2].density);\n    return html`\n      <div class=\"field-data-histogram\">\n        <span class=\"histogram-label\">Good <span class=\"histogram-range\">(&le;${format(thresholds[0])})</span></span>\n        <span class=\"histogram-bar good-bg\" style=\"width: ${goodPercent}\"></span>\n        <span>${goodPercent}</span>\n        <span class=\"histogram-label\">Needs improvement <span class=\"histogram-range\">(${format(thresholds[0])}-${\n        format(thresholds[1])})</span></span>\n        <span class=\"histogram-bar needs-improvement-bg\" style=\"width: ${needsImprovementPercent}\"></span>\n        <span>${needsImprovementPercent}</span>\n        <span class=\"histogram-label\">Poor <span class=\"histogram-range\">(&gt;${format(thresholds[1])})</span></span>\n        <span class=\"histogram-bar poor-bg\" style=\"width: ${poorPercent}\"></span>\n        <span>${poorPercent}</span>\n      </div>\n    `;\n  }\n\n  #rateMetric(value: number, thresholds: MetricThresholds): MetricRating {\n    if (value <= thresholds[0]) {\n      return 'good';\n    }\n    if (value <= thresholds[1]) {\n      return 'needs-improvement';\n    }\n    return 'poor';\n  }\n\n  #renderMetricCard(\n      title: string, localValue: number|undefined, fieldValue: number|string|undefined,\n      histogram: CrUXManager.MetricResponse['histogram']|undefined, thresholds: MetricThresholds,\n      format: (value: number) => string, node?: SDK.DOMModel.DOMNode): LitHtml.LitTemplate {\n    // clang-format off\n    return html`\n      <div class=\"card\">\n        <div class=\"card-title\">${title}</div>\n        <div class=\"card-metric-values\">\n          <span class=\"local-value\">${this.#renderMetricValue(localValue, thresholds, format)}</span>\n          <span class=\"field-value\">${this.#renderMetricValue(fieldValue, thresholds, format)}</span>\n          <span class=\"metric-value-label\">Local</span>\n          <span class=\"metric-value-label\">Field 75th Percentile</span>\n        </div>\n        <hr class=\"divider\">\n        ${histogram ? this.#renderFieldHistogram(histogram, thresholds, format) : nothing}\n        <div class=\"metric-card-element\">\n          ${node ? html`\n              <div class=\"card-section-title\">Related node</div>\n              <div>${until(Common.Linkifier.Linkifier.linkify(node))}</div>`\n            : nothing}\n        </div>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #renderRecordAction(action: UI.ActionRegistration.Action): LitHtml.LitTemplate {\n    function onClick(): void {\n      void action.execute();\n    }\n\n    // clang-format off\n    return html`\n      <div class=\"record-action\">\n        <${Buttons.Button.Button.litTagName} @click=${onClick} .data=${{\n            variant: Buttons.Button.Variant.TEXT,\n            size: Buttons.Button.Size.REGULAR,\n            iconName: action.icon(),\n            title: action.title(),\n            jslogContext: action.id(),\n        } as Buttons.Button.ButtonData}>\n          ${action.title()}\n        </${Buttons.Button.Button.litTagName}>\n        <span class=\"shortcut-label\">${UI.ShortcutRegistry.ShortcutRegistry.instance().shortcutTitleForAction(action.id())}</span>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #render = (): void => {\n    const automaticSetting = CrUXManager.CrUXManager.instance().getAutomaticSetting();\n\n    // clang-format off\n    const output = html`\n      <div class=\"container\">\n        <div class=\"live-metrics-view\">\n          <div class=\"live-metrics\" slot=\"main\">\n            <h3>Local and Field Metrics</h3>\n            <div class=\"metric-cards\">\n              <div id=\"lcp\">\n                ${this.#renderLcpCard()}\n              </div>\n              <div id=\"cls\">\n                ${this.#renderClsCard()}\n              </div>\n              <div id=\"inp\">\n                ${this.#renderInpCard()}\n              </div>\n            </div>\n            <h3>Interactions</h3>\n            <ol class=\"interactions-list\">\n              ${this.#interactions.map((interaction, index) => html`\n                ${index === 0 ? html`<hr class=\"divider\">` : nothing}\n                <li class=\"interaction\">\n                  <span class=\"interaction-type\">${interaction.interactionType}</span>\n                  <span class=\"interaction-node\">${\n                    interaction.node && until(Common.Linkifier.Linkifier.linkify(interaction.node))}</span>\n                  <span class=\"interaction-duration\">\n                    ${this.#renderMetricValue(interaction.duration, INP_THRESHOLDS, v => i18n.TimeUtilities.millisToString(v))}\n                  </span>\n                </li>\n                <hr class=\"divider\">\n              `)}\n            </ol>\n          </div>\n          <div class=\"next-steps\" slot=\"sidebar\">\n            <h3>Next steps</h3>\n            <div id=\"field-setup\" class=\"card\">\n              <div class=\"card-title\">Field data</div>\n              <button @click=${this.#refreshFieldDataForCurrentPage}>Get field data</button>\n              <${Settings.SettingCheckbox.SettingCheckbox.litTagName} .data=${\n                  {setting: automaticSetting} as Settings.SettingCheckbox.SettingCheckboxData}>\n              </${Settings.SettingCheckbox.SettingCheckbox.litTagName}>\n            </div>\n            <div id=\"record\" class=\"card\">\n              ${this.#renderRecordAction(this.#toggleRecordAction)}\n            </div>\n            <div id=\"record-page-load\" class=\"card\">\n              ${this.#renderRecordAction(this.#recordReloadAction)}\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n    LitHtml.render(output, this.#shadow, {host: this});\n  };\n  // clang-format on\n}\n\ncustomElements.define('devtools-live-metrics-view', LiveMetricsView);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-live-metrics-view': LiveMetricsView;\n  }\n}\n"]}