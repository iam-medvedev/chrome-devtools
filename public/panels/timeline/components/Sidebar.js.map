{"version":3,"file":"Sidebar.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/Sidebar.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,gCAAgC,CAAC;AACzD,OAAO,KAAK,IAAI,MAAM,4BAA4B,CAAC;AAEnD,OAAO,KAAK,QAAQ,MAAM,6CAA6C,CAAC;AACxE,OAAO,KAAK,EAAE,MAAM,8BAA8B,CAAC;AAEnD,OAAO,EAAC,qBAAqB,EAAC,MAAM,4BAA4B,CAAC;AACjE,OAAO,EAAC,kBAAkB,EAAC,MAAM,yBAAyB,CAAC;AAO3D,MAAM,OAAO,gBAAiB,SAAQ,KAAK;IAGtB;IAFnB,MAAM,CAAU,SAAS,GAAG,kBAAkB,CAAC;IAE/C,YAAmB,iBAA8C;QAC/D,KAAK,CAAC,gBAAgB,CAAC,SAAS,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QADlD,sBAAiB,GAAjB,iBAAiB,CAA6B;IAEjE,CAAC;;AAGH,MAAM,OAAO,gBAAiB,SAAQ,KAAK;IAGtB;IAFnB,MAAM,CAAU,SAAS,GAAG,kBAAkB,CAAC;IAE/C,YAAmB,UAAuC;QACxD,KAAK,CAAC,gBAAgB,CAAC,SAAS,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QADlD,eAAU,GAAV,UAAU,CAA6B;IAE1D,CAAC;;AAaH,MAAM,CAAC,MAAM,mBAAmB,wCAAuB,CAAC;AAExD,MAAM,CAAC,MAAM,wBAAwB,GAAG,GAAG,CAAC;AAC5C,MAAM,oBAAoB,GAAG,GAAG,CAAC;AAEjC,MAAM,OAAO,aAAc,SAAQ,EAAE,CAAC,MAAM,CAAC,IAAI;IAC/C,WAAW,GAAG,IAAI,EAAE,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;IAE7C,aAAa,GAAG,IAAI,YAAY,EAAE,CAAC;IACnC,gBAAgB,GAAG,IAAI,eAAe,EAAE,CAAC;IAEzC,gBAAgB,GAAG,CAAC,CAAC;IAErB;;;;;;OAMG;IACH,yBAAyB,GACrB,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAU,uCAAuC,EAAE,KAAK,CAAC,CAAC;IAE/G,wBAAwB;QACtB,OAAO,IAAI,CAAC,yBAAyB,CAAC,GAAG,EAAE,CAAC;IAC9C,CAAC;IAED;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,cAAc,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;QAC7C,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,4EAA+C,EAAE,CAAC;YACtF,IAAI,CAAC,WAAW,CAAC,SAAS,wCACA,UAAU,EAAE,IAAI,CAAC,aAAa,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAC3F,uBAAuB,CAAC,CAAC;QAC/B,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,iFAAkD,EAAE,CAAC;YACzF,IAAI,CAAC,WAAW,CAAC,SAAS,8CACG,aAAa,EAAE,IAAI,CAAC,gBAAgB,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EACpG,0BAA0B,CAAC,CAAC;QAClC,CAAC;QAED,0EAA0E;QAC1E,2CAA2C;QAC3C,IAAI,CAAC,WAAW,CAAC,SAAS,uCAAsB,CAAC;IACnD,CAAC;IAEQ,QAAQ;QACf,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpC,IAAI,CAAC,4BAA4B,EAAE,CAAC;QAEpC,kCAAkC;QAClC,qCAAqC;QACrC,mFAAmF;QACnF,2EAA2E;QAC3E,2BAA2B;QAC3B,IAAI,IAAI,CAAC,WAAW,CAAC,aAAa,0CAAyB;YACvD,IAAI,CAAC,WAAW,CAAC,aAAa,uCAAsB,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,6CAAyB,EAAE,CAAC;YAC7G,IAAI,CAAC,WAAW,CAAC,SAAS,6CAAyB,CAAC;QACtD,CAAC;IACH,CAAC;IAED,cAAc,CACV,kBAAiD,EACjD,yBAAgE;QAClE,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,kBAAkB,EAAE,yBAAyB,CAAC,CAAC;QACpF,IAAI,CAAC,gBAAgB,GAAG,kBAAkB,CAAC,MAAM,CAAC;QAClD,IAAI,CAAC,4BAA4B,EAAE,CAAC;IACtC,CAAC;IAED,4BAA4B;QAC1B,IAAI,YAAY,GAAkC,IAAI,CAAC;QACvD,IAAI,IAAI,CAAC,gBAAgB,GAAG,CAAC,EAAE,CAAC;YAC9B,YAAY,GAAG,IAAI,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC9C,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YACjD,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;YACzD,YAAY,CAAC,IAAI,GAAG;gBAClB,IAAI,EAAE,cAAc;gBACpB,OAAO,EAAE,SAAS;aACnB,CAAC;YACF,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAClD,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;IACjE,CAAC;IAED,cAAc,CAAC,WAAkD;QAC/D,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IACjD,CAAC;IAED,WAAW,CAAC,QAAoD;QAC9D,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAEzC,IAAI,CAAC,WAAW,CAAC,aAAa,wCAE1B,QAAQ,KAAK,IAAI,CACpB,CAAC;IACJ,CAAC;IAED,gBAAgB,CAAC,aAAiC;QAChD,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QAEnD,IAAI,aAAa,EAAE,CAAC;YAClB,IAAI,CAAC,WAAW,CAAC,SAAS,uCAAsB,CAAC;QACnD,CAAC;IACH,CAAC;CACF;AAED,MAAM,YAAa,SAAQ,EAAE,CAAC,MAAM,CAAC,IAAI;IACvC,UAAU,GAAG,IAAI,kBAAkB,EAAE,CAAC;IAEtC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAC/C,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC;IAED,cAAc,CAAC,IAA2C;QACxD,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC;IACrC,CAAC;IAED,WAAW,CAAC,IAAgD;QAC1D,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;IAClC,CAAC;IAED,gBAAgB,CAAC,MAA0B;QACzC,IAAI,CAAC,UAAU,CAAC,aAAa,GAAG,MAAM,CAAC;IACzC,CAAC;CACF;AAED,MAAM,eAAgB,SAAQ,EAAE,CAAC,MAAM,CAAC,IAAI;IAC1C,UAAU,GAAG,IAAI,qBAAqB,EAAE,CAAC;IAEzC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC;IAED,cAAc,CACV,WAA0C,EAC1C,yBAAgE;QAClE,2EAA2E;QAC3E,6CAA6C;QAC7C,IAAI,CAAC,UAAU,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QACtE,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,WAAW,CAAC;IAC5C,CAAC;CACF","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Root from '../../../core/root/root.js';\nimport type * as Trace from '../../../models/trace/trace.js';\nimport * as Adorners from '../../../ui/components/adorners/adorners.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\n\nimport {SidebarAnnotationsTab} from './SidebarAnnotationsTab.js';\nimport {SidebarInsightsTab} from './SidebarInsightsTab.js';\n\nexport interface ActiveInsight {\n  model: Trace.Insights.Types.InsightModel<{}>;\n  insightSetKey: string;\n}\n\nexport class RemoveAnnotation extends Event {\n  static readonly eventName = 'removeannotation';\n\n  constructor(public removedAnnotation: Trace.Types.File.Annotation) {\n    super(RemoveAnnotation.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class RevealAnnotation extends Event {\n  static readonly eventName = 'revealannotation';\n\n  constructor(public annotation: Trace.Types.File.Annotation) {\n    super(RevealAnnotation.eventName, {bubbles: true, composed: true});\n  }\n}\n\ndeclare global {\n  interface GlobalEventHandlersEventMap {\n    [RevealAnnotation.eventName]: RevealAnnotation;\n  }\n}\n\nexport const enum SidebarTabs {\n  INSIGHTS = 'insights',\n  ANNOTATIONS = 'annotations',\n}\nexport const DEFAULT_SIDEBAR_TAB = SidebarTabs.INSIGHTS;\n\nexport const DEFAULT_SIDEBAR_WIDTH_PX = 240;\nconst MIN_SIDEBAR_WIDTH_PX = 170;\n\nexport class SidebarWidget extends UI.Widget.VBox {\n  #tabbedPane = new UI.TabbedPane.TabbedPane();\n\n  #insightsView = new InsightsView();\n  #annotationsView = new AnnotationsView();\n\n  #annotationCount = 0;\n\n  /**\n   * Track if the user has opened the sidebar before. We do this so that the\n   * very first time they record/import a trace after the sidebar ships, we can\n   * automatically pop it open to aid discovery. But, after that, the sidebar\n   * visibility will be persisted based on if the user opens or closes it - the\n   * SplitWidget tracks its state in its own setting.\n   */\n  #userHasOpenedSidebarOnce =\n      Common.Settings.Settings.instance().createSetting<boolean>('timeline-user-has-opened-sidebar-once', false);\n\n  userHasOpenedSidebarOnce(): boolean {\n    return this.#userHasOpenedSidebarOnce.get();\n  }\n\n  constructor() {\n    super();\n    this.setMinimumSize(MIN_SIDEBAR_WIDTH_PX, 0);\n    if (Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_INSIGHTS)) {\n      this.#tabbedPane.appendTab(\n          SidebarTabs.INSIGHTS, 'Insights', this.#insightsView, undefined, undefined, false, false, 0,\n          'timeline.insights-tab');\n    }\n    if (Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_ANNOTATIONS)) {\n      this.#tabbedPane.appendTab(\n          SidebarTabs.ANNOTATIONS, 'Annotations', this.#annotationsView, undefined, undefined, false, false, 1,\n          'timeline.annotations-tab');\n    }\n\n    // Default the selected tab to Insights. In wasShown() we will change this\n    // if this is a trace that has no insights.\n    this.#tabbedPane.selectTab(SidebarTabs.INSIGHTS);\n  }\n\n  override wasShown(): void {\n    this.#userHasOpenedSidebarOnce.set(true);\n    this.#tabbedPane.show(this.element);\n    this.#updateAnnotationsCountBadge();\n\n    // Swap to the Annotations tab if:\n    // 1. Insights is currently selected.\n    // 2. The Insights tab is disabled (which means we have no insights for this trace)\n    // 3. The annotations tab exists (we can remove this check once annotations\n    //    are non-experimental)\n    if (this.#tabbedPane.selectedTabId === SidebarTabs.INSIGHTS &&\n        this.#tabbedPane.tabIsDisabled(SidebarTabs.INSIGHTS) && this.#tabbedPane.hasTab(SidebarTabs.ANNOTATIONS)) {\n      this.#tabbedPane.selectTab(SidebarTabs.ANNOTATIONS);\n    }\n  }\n\n  setAnnotations(\n      updatedAnnotations: Trace.Types.File.Annotation[],\n      annotationEntryToColorMap: Map<Trace.Types.Events.Event, string>): void {\n    this.#annotationsView.setAnnotations(updatedAnnotations, annotationEntryToColorMap);\n    this.#annotationCount = updatedAnnotations.length;\n    this.#updateAnnotationsCountBadge();\n  }\n\n  #updateAnnotationsCountBadge(): void {\n    let countAdorner: Adorners.Adorner.Adorner|null = null;\n    if (this.#annotationCount > 0) {\n      countAdorner = new Adorners.Adorner.Adorner();\n      const countSpan = document.createElement('span');\n      countSpan.textContent = this.#annotationCount.toString();\n      countAdorner.data = {\n        name: 'countWrapper',\n        content: countSpan,\n      };\n      countAdorner.classList.add('annotations-count');\n    }\n    this.#tabbedPane.setSuffixElement('annotations', countAdorner);\n  }\n\n  setParsedTrace(parsedTrace: Trace.Handlers.Types.ParsedTrace|null): void {\n    this.#insightsView.setParsedTrace(parsedTrace);\n  }\n\n  setInsights(insights: Trace.Insights.Types.TraceInsightSets|null): void {\n    this.#insightsView.setInsights(insights);\n\n    this.#tabbedPane.setTabEnabled(\n        SidebarTabs.INSIGHTS,\n        insights !== null,\n    );\n  }\n\n  setActiveInsight(activeInsight: ActiveInsight|null): void {\n    this.#insightsView.setActiveInsight(activeInsight);\n\n    if (activeInsight) {\n      this.#tabbedPane.selectTab(SidebarTabs.INSIGHTS);\n    }\n  }\n}\n\nclass InsightsView extends UI.Widget.VBox {\n  #component = new SidebarInsightsTab();\n\n  constructor() {\n    super();\n    this.element.classList.add('sidebar-insights');\n    this.element.appendChild(this.#component);\n  }\n\n  setParsedTrace(data: Trace.Handlers.Types.ParsedTrace|null): void {\n    this.#component.parsedTrace = data;\n  }\n\n  setInsights(data: Trace.Insights.Types.TraceInsightSets|null): void {\n    this.#component.insights = data;\n  }\n\n  setActiveInsight(active: ActiveInsight|null): void {\n    this.#component.activeInsight = active;\n  }\n}\n\nclass AnnotationsView extends UI.Widget.VBox {\n  #component = new SidebarAnnotationsTab();\n\n  constructor() {\n    super();\n    this.element.classList.add('sidebar-annotations');\n    this.element.appendChild(this.#component);\n  }\n\n  setAnnotations(\n      annotations: Trace.Types.File.Annotation[],\n      annotationEntryToColorMap: Map<Trace.Types.Events.Event, string>): void {\n    // The component will only re-render when set the annotations, so we should\n    // set the `annotationEntryToColorMap` first.\n    this.#component.annotationEntryToColorMap = annotationEntryToColorMap;\n    this.#component.annotations = annotations;\n  }\n}\n"]}