{"version":3,"file":"Sidebar.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/Sidebar.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport type * as Trace from '../../../models/trace/trace.js';\nimport * as RenderCoordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\n\nimport {InsightActivated, InsightDeactivated} from './insights/SidebarInsight.js';\nimport {SidebarAnnotationsTab} from './SidebarAnnotationsTab.js';\nimport {SidebarInsightsTab} from './SidebarInsightsTab.js';\n\nexport interface ActiveInsight {\n  model: Trace.Insights.Types.InsightModel;\n  insightSetKey: string;\n}\n\nexport class RemoveAnnotation extends Event {\n  static readonly eventName = 'removeannotation';\n\n  constructor(public removedAnnotation: Trace.Types.File.Annotation) {\n    super(RemoveAnnotation.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class RevealAnnotation extends Event {\n  static readonly eventName = 'revealannotation';\n\n  constructor(public annotation: Trace.Types.File.Annotation) {\n    super(RevealAnnotation.eventName, {bubbles: true, composed: true});\n  }\n}\nexport class HoverAnnotation extends Event {\n  static readonly eventName = 'hoverannotation';\n\n  constructor(public annotation: Trace.Types.File.Annotation) {\n    super(HoverAnnotation.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class AnnotationHoverOut extends Event {\n  static readonly eventName = 'annotationhoverout';\n\n  constructor() {\n    super(AnnotationHoverOut.eventName, {bubbles: true, composed: true});\n  }\n}\n\ndeclare global {\n  interface GlobalEventHandlersEventMap {\n    [RevealAnnotation.eventName]: RevealAnnotation;\n    [HoverAnnotation.eventName]: HoverAnnotation;\n    [AnnotationHoverOut.eventName]: AnnotationHoverOut;\n  }\n}\n\nexport const enum SidebarTabs {\n  INSIGHTS = 'insights',\n  ANNOTATIONS = 'annotations',\n}\nexport const DEFAULT_SIDEBAR_TAB = SidebarTabs.INSIGHTS;\n\nexport const DEFAULT_SIDEBAR_WIDTH_PX = 240;\nconst MIN_SIDEBAR_WIDTH_PX = 170;\n\nexport class SidebarWidget extends UI.Widget.VBox {\n  #tabbedPane = new UI.TabbedPane.TabbedPane();\n\n  #insightsView = new InsightsView();\n  #annotationsView = new AnnotationsView();\n  /**\n   * If the user has an Insight open and then they collapse the sidebar, we\n   * deactivate that Insight to avoid it showing overlays etc - as the user has\n   * hidden the Sidebar & Insight from view. But we store it because when the\n   * user pops the sidebar open, we want to re-activate it.\n   */\n  #insightToRestoreOnOpen: ActiveInsight|null = null;\n\n  constructor() {\n    super();\n    this.setMinimumSize(MIN_SIDEBAR_WIDTH_PX, 0);\n    this.#tabbedPane.appendTab(\n        SidebarTabs.INSIGHTS, 'Insights', this.#insightsView, undefined, undefined, false, false, 0,\n        'timeline.insights-tab');\n    this.#tabbedPane.appendTab(\n        SidebarTabs.ANNOTATIONS, 'Annotations', this.#annotationsView, undefined, undefined, false, false, 1,\n        'timeline.annotations-tab');\n\n    // Default the selected tab to Insights. In wasShown() we will change this\n    // if this is a trace that has no insights.\n    this.#tabbedPane.selectTab(SidebarTabs.INSIGHTS);\n  }\n\n  override wasShown(): void {\n    this.#tabbedPane.show(this.element);\n    this.#updateAnnotationsCountBadge();\n\n    if (this.#insightToRestoreOnOpen) {\n      this.element.dispatchEvent(new InsightActivated(\n          this.#insightToRestoreOnOpen.model,\n          this.#insightToRestoreOnOpen.insightSetKey,\n          ));\n      this.#insightToRestoreOnOpen = null;\n    }\n\n    // Swap to the Annotations tab if:\n    // 1. Insights is currently selected.\n    // 2. The Insights tab is disabled (which means we have no insights for this trace)\n    if (this.#tabbedPane.selectedTabId === SidebarTabs.INSIGHTS &&\n        this.#tabbedPane.tabIsDisabled(SidebarTabs.INSIGHTS)) {\n      this.#tabbedPane.selectTab(SidebarTabs.ANNOTATIONS);\n    }\n  }\n\n  override willHide(): void {\n    const currentlyActiveInsight = this.#insightsView.getActiveInsight();\n    this.#insightToRestoreOnOpen = currentlyActiveInsight;\n\n    if (currentlyActiveInsight) {\n      this.element.dispatchEvent(new InsightDeactivated());\n    }\n  }\n\n  setAnnotations(\n      updatedAnnotations: Trace.Types.File.Annotation[],\n      annotationEntryToColorMap: Map<Trace.Types.Events.Event, string>): void {\n    this.#annotationsView.setAnnotations(updatedAnnotations, annotationEntryToColorMap);\n    this.#updateAnnotationsCountBadge();\n  }\n\n  #updateAnnotationsCountBadge(): void {\n    const annotations = this.#annotationsView.deduplicatedAnnotations();\n    this.#tabbedPane.setBadge('annotations', annotations.length > 0 ? annotations.length.toString() : null);\n  }\n\n  setParsedTrace(parsedTrace: Trace.Handlers.Types.ParsedTrace|null, metadata: Trace.Types.File.MetaData|null): void {\n    this.#insightsView.setParsedTrace(parsedTrace, metadata);\n  }\n\n  setInsights(insights: Trace.Insights.Types.TraceInsightSets|null): void {\n    this.#insightsView.setInsights(insights);\n\n    this.#tabbedPane.setTabEnabled(\n        SidebarTabs.INSIGHTS,\n        insights !== null && insights.size > 0,\n    );\n  }\n\n  setActiveInsight(activeInsight: ActiveInsight|null, opts: {\n    highlight: boolean,\n  }): void {\n    this.#insightsView.setActiveInsight(activeInsight, opts);\n\n    if (activeInsight) {\n      this.#tabbedPane.selectTab(SidebarTabs.INSIGHTS);\n    }\n  }\n}\n\nclass InsightsView extends UI.Widget.VBox {\n  #component = new SidebarInsightsTab();\n\n  constructor() {\n    super();\n    this.element.classList.add('sidebar-insights');\n    this.element.appendChild(this.#component);\n  }\n\n  setParsedTrace(parsedTrace: Trace.Handlers.Types.ParsedTrace|null, metadata: Trace.Types.File.MetaData|null): void {\n    this.#component.parsedTrace = parsedTrace;\n    this.#component.traceMetadata = metadata;\n  }\n\n  setInsights(data: Trace.Insights.Types.TraceInsightSets|null): void {\n    this.#component.insights = data;\n  }\n\n  getActiveInsight(): ActiveInsight|null {\n    return this.#component.activeInsight;\n  }\n\n  setActiveInsight(active: ActiveInsight|null, opts: {highlight: boolean}): void {\n    this.#component.activeInsight = active;\n    if (opts.highlight && active) {\n      // Wait for the rendering of the component to be done, otherwise we\n      // might highlight the wrong insight. The UI needs to be fully\n      // re-rendered before we can highlight the newly-expanded insight.\n      void RenderCoordinator.done().then(() => {\n        this.#component.highlightActiveInsight();\n      });\n    }\n  }\n}\n\nclass AnnotationsView extends UI.Widget.VBox {\n  #component = new SidebarAnnotationsTab();\n\n  constructor() {\n    super();\n    this.element.classList.add('sidebar-annotations');\n    this.#component.show(this.element);\n  }\n\n  setAnnotations(\n      annotations: Trace.Types.File.Annotation[],\n      annotationEntryToColorMap: Map<Trace.Types.Events.Event, string>): void {\n    this.#component.setData({annotations, annotationEntryToColorMap});\n  }\n\n  /**\n   * The component \"de-duplicates\" annotations to ensure implementation details\n   * about how we create pending annotations don't leak into the UI. We expose\n   * these here because we use this count to show the number of annotations in\n   * the small adorner in the sidebar tab.\n   */\n  deduplicatedAnnotations(): readonly Trace.Types.File.Annotation[] {\n    return this.#component.deduplicatedAnnotations();\n  }\n}\n"]}