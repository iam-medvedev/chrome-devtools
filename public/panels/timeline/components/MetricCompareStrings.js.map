{"version":3,"file":"MetricCompareStrings.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/MetricCompareStrings.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,4BAA4B,CAAC;AAInD,6EAA6E;AAC7E,EAAE;AACF,4FAA4F;AAC5F,0EAA0E;AAE1E,MAAM,SAAS,GAAG;IAChB;;;;OAIG;IACH,iBAAiB,EACb,mGAAmG;IACvG;;;;OAIG;IACH,gBAAgB,EAAE,kGAAkG;IACpH;;;;OAIG;IACH,kBAAkB,EAAE,oFAAoF;IACxG;;;;OAIG;IACH,cAAc,EAAE,0CAA0C;IAC1D;;;;OAIG;IACH,6BAA6B,EACzB,6GAA6G;IACjH;;;;OAIG;IACH,4BAA4B,EACxB,4GAA4G;IAChH;;;;OAIG;IACH,8BAA8B,EAC1B,8FAA8F;IAClG;;;;OAIG;IACH,0BAA0B,EAAE,oDAAoD;IAChF;;;;OAIG;IACH,iBAAiB,EACb,mGAAmG;IACvG;;;;OAIG;IACH,gBAAgB,EAAE,kGAAkG;IACpH;;;;OAIG;IACH,kBAAkB,EAAE,oFAAoF;IACxG;;;;OAIG;IACH,cAAc,EAAE,0CAA0C;IAC1D;;;;;;OAMG;IACH,uBAAuB,EACnB,mLAAmL;IACvL;;;;;;OAMG;IACH,mCAAmC,EAC/B,wLAAwL;IAC5L;;;;;;OAMG;IACH,uBAAuB,EACnB,8KAA8K;IAClL;;;;;;OAMG;IACH,mCAAmC,EAC/B,wLAAwL;IAC5L;;;;;;OAMG;IACH,+CAA+C,EAC3C,uMAAuM;IAC3M;;;;;;OAMG;IACH,mCAAmC,EAC/B,wLAAwL;IAC5L;;;;;;OAMG;IACH,uBAAuB,EACnB,8KAA8K;IAClL;;;;;;OAMG;IACH,mCAAmC,EAC/B,wLAAwL;IAC5L;;;;;;OAMG;IACH,uBAAuB,EACnB,mLAAmL;CAC/K,CAAC;AAEX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,oDAAoD,EAAE,SAAS,CAAC,CAAC;AAI1G,MAAM,UAAU,iBAAiB,CAC7B,OAA6F;IAC/F,MAAM,EAAC,MAAM,EAAE,OAAO,EAAC,GAAG,OAAO,CAAC;IAClC,MAAM,MAAM,GAAG;QACb,GAAG,EAAE,OAAO,CAAC,MAAM;QACnB,GAAG,EAAE,OAAO,CAAC,UAAU;KACxB,CAAC;IAEF,IAAI,MAAM,KAAK,MAAM,IAAI,OAAO,KAAK,QAAQ,EAAE,CAAC;QAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;IACvF,CAAC;IACD,IAAI,MAAM,KAAK,MAAM,IAAI,OAAO,KAAK,OAAO,EAAE,CAAC;QAC7C,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;IACtF,CAAC;IACD,IAAI,MAAM,KAAK,MAAM,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;QAC/C,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;IACxF,CAAC;IACD,IAAI,MAAM,KAAK,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;IACpF,CAAC;IACD,IAAI,MAAM,KAAK,mBAAmB,IAAI,OAAO,KAAK,QAAQ,EAAE,CAAC;QAC3D,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,6BAA6B,EAAE,MAAM,CAAC,CAAC;IACnG,CAAC;IACD,IAAI,MAAM,KAAK,mBAAmB,IAAI,OAAO,KAAK,OAAO,EAAE,CAAC;QAC1D,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,4BAA4B,EAAE,MAAM,CAAC,CAAC;IAClG,CAAC;IACD,IAAI,MAAM,KAAK,mBAAmB,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;QAC5D,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,8BAA8B,EAAE,MAAM,CAAC,CAAC;IACpG,CAAC;IACD,IAAI,MAAM,KAAK,mBAAmB,IAAI,CAAC,OAAO,EAAE,CAAC;QAC/C,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,0BAA0B,EAAE,MAAM,CAAC,CAAC;IAChG,CAAC;IACD,IAAI,MAAM,KAAK,MAAM,IAAI,OAAO,KAAK,QAAQ,EAAE,CAAC;QAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;IACvF,CAAC;IACD,IAAI,MAAM,KAAK,MAAM,IAAI,OAAO,KAAK,OAAO,EAAE,CAAC;QAC7C,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;IACtF,CAAC;IACD,IAAI,MAAM,KAAK,MAAM,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;QAC/C,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;IACxF,CAAC;IACD,IAAI,MAAM,KAAK,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;IACpF,CAAC;IAED,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;AAC9C,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,OAIzC;IACC,MAAM,EAAC,WAAW,EAAE,WAAW,EAAC,GAAG,OAAO,CAAC;IAC3C,MAAM,MAAM,GAAG;QACb,GAAG,EAAE,OAAO,CAAC,MAAM;QACnB,GAAG,EAAE,OAAO,CAAC,UAAU;QACvB,GAAG,EAAE,OAAO,CAAC,UAAU;QACvB,GAAG,EAAE,OAAO,CAAC,OAAO;KACrB,CAAC;IAEF,IAAI,WAAW,KAAK,MAAM,IAAI,WAAW,KAAK,MAAM,EAAE,CAAC;QACrD,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;IAC7F,CAAC;IACD,IAAI,WAAW,KAAK,MAAM,IAAI,WAAW,KAAK,mBAAmB,EAAE,CAAC;QAClE,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,mCAAmC,EAAE,MAAM,CAAC,CAAC;IACzG,CAAC;IACD,IAAI,WAAW,KAAK,MAAM,IAAI,WAAW,KAAK,MAAM,EAAE,CAAC;QACrD,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;IAC7F,CAAC;IACD,IAAI,WAAW,KAAK,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC3C,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;IACpF,CAAC;IACD,IAAI,WAAW,KAAK,mBAAmB,IAAI,WAAW,KAAK,MAAM,EAAE,CAAC;QAClE,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,mCAAmC,EAAE,MAAM,CAAC,CAAC;IACzG,CAAC;IACD,IAAI,WAAW,KAAK,mBAAmB,IAAI,WAAW,KAAK,mBAAmB,EAAE,CAAC;QAC/E,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,+CAA+C,EAAE,MAAM,CAAC,CAAC;IACrH,CAAC;IACD,IAAI,WAAW,KAAK,mBAAmB,IAAI,WAAW,KAAK,MAAM,EAAE,CAAC;QAClE,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,mCAAmC,EAAE,MAAM,CAAC,CAAC;IACzG,CAAC;IACD,IAAI,WAAW,KAAK,mBAAmB,IAAI,CAAC,WAAW,EAAE,CAAC;QACxD,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,0BAA0B,EAAE,MAAM,CAAC,CAAC;IAChG,CAAC;IACD,IAAI,WAAW,KAAK,MAAM,IAAI,WAAW,KAAK,MAAM,EAAE,CAAC;QACrD,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;IAC7F,CAAC;IACD,IAAI,WAAW,KAAK,MAAM,IAAI,WAAW,KAAK,mBAAmB,EAAE,CAAC;QAClE,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,mCAAmC,EAAE,MAAM,CAAC,CAAC;IACzG,CAAC;IACD,IAAI,WAAW,KAAK,MAAM,IAAI,WAAW,KAAK,MAAM,EAAE,CAAC;QACrD,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;IAC7F,CAAC;IACD,IAAI,WAAW,KAAK,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC3C,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;IACpF,CAAC;IAED,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;AACvD,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\n\nimport type {MetricRating} from './Utils.js';\n\n// This file is auto-generated by scripts/generate_metric_compare_strings.js.\n//\n// If you need to update one or more of these strings, it is preferable to modify the script\n// and write stdout to this file (Minor formatting differences may apply).\n\nconst UIStrings = {\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   */\n  goodBetterCompare:\n      'Your local {PH1} value of {PH2} is good, but is significantly better than your users’ experience.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   */\n  goodWorseCompare: 'Your local {PH1} value of {PH2} is good, but is significantly worse than your users’ experience.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   */\n  goodSimilarCompare: 'Your local {PH1} value of {PH2} is good, and is similar to your users’ experience.',\n  /**\n   * @description Text block that summarize a local metric value. \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   */\n  goodSummarized: 'Your local {PH1} value of {PH2} is good.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   */\n  needsImprovementBetterCompare:\n      'Your local {PH1} value of {PH2} needs improvement, but is significantly better than your users’ experience.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   */\n  needsImprovementWorseCompare:\n      'Your local {PH1} value of {PH2} needs improvement, but is significantly worse than your users’ experience.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   */\n  needsImprovementSimilarCompare:\n      'Your local {PH1} value of {PH2} needs improvement, and is similar to your users’ experience.',\n  /**\n   * @description Text block that summarize a local metric value. \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   */\n  needsImprovementSummarized: 'Your local {PH1} value of {PH2} needs improvement.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   */\n  poorBetterCompare:\n      'Your local {PH1} value of {PH2} is poor, but is significantly better than your users’ experience.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   */\n  poorWorseCompare: 'Your local {PH1} value of {PH2} is poor, but is significantly worse than your users’ experience.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   */\n  poorSimilarCompare: 'Your local {PH1} value of {PH2} is poor, and is similar to your users’ experience.',\n  /**\n   * @description Text block that summarize a local metric value. \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   */\n  poorSummarized: 'Your local {PH1} value of {PH2} is poor.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"field data\" should be interpreted as \"real user data\". \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   * @example {400 ms} PH3\n   * @example {40%} PH4\n   */\n  goodGoodDetailedCompare:\n      'Your local {PH1} value of {PH2} is good and is rated the same as {PH4} of real-user {PH1} experiences. Additionally, the field data 75th percentile {PH1} value of {PH3} is good.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"field data\" should be interpreted as \"real user data\". \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   * @example {400 ms} PH3\n   * @example {40%} PH4\n   */\n  goodNeedsImprovementDetailedCompare:\n      'Your local {PH1} value of {PH2} is good and is rated the same as {PH4} of real-user {PH1} experiences. However, the field data 75th percentile {PH1} value of {PH3} needs improvement.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"field data\" should be interpreted as \"real user data\". \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   * @example {400 ms} PH3\n   * @example {40%} PH4\n   */\n  goodPoorDetailedCompare:\n      'Your local {PH1} value of {PH2} is good and is rated the same as {PH4} of real-user {PH1} experiences. However, the field data 75th percentile {PH1} value of {PH3} is poor.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"field data\" should be interpreted as \"real user data\". \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   * @example {400 ms} PH3\n   * @example {40%} PH4\n   */\n  needsImprovementGoodDetailedCompare:\n      'Your local {PH1} value of {PH2} needs improvement and is rated the same as {PH4} of real-user {PH1} experiences. However, the field data 75th percentile {PH1} value of {PH3} is good.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"field data\" should be interpreted as \"real user data\". \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   * @example {400 ms} PH3\n   * @example {40%} PH4\n   */\n  needsImprovementNeedsImprovementDetailedCompare:\n      'Your local {PH1} value of {PH2} needs improvement and is rated the same as {PH4} of real-user {PH1} experiences. Additionally, the field data 75th percentile {PH1} value of {PH3} needs improvement.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"field data\" should be interpreted as \"real user data\". \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   * @example {400 ms} PH3\n   * @example {40%} PH4\n   */\n  needsImprovementPoorDetailedCompare:\n      'Your local {PH1} value of {PH2} needs improvement and is rated the same as {PH4} of real-user {PH1} experiences. However, the field data 75th percentile {PH1} value of {PH3} is poor.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"field data\" should be interpreted as \"real user data\". \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   * @example {400 ms} PH3\n   * @example {40%} PH4\n   */\n  poorGoodDetailedCompare:\n      'Your local {PH1} value of {PH2} is poor and is rated the same as {PH4} of real-user {PH1} experiences. However, the field data 75th percentile {PH1} value of {PH3} is good.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"field data\" should be interpreted as \"real user data\". \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   * @example {400 ms} PH3\n   * @example {40%} PH4\n   */\n  poorNeedsImprovementDetailedCompare:\n      'Your local {PH1} value of {PH2} is poor and is rated the same as {PH4} of real-user {PH1} experiences. However, the field data 75th percentile {PH1} value of {PH3} needs improvement.',\n  /**\n   * @description Text block that compares a local metric value to real user experiences. \"field data\" should be interpreted as \"real user data\". \"local\" refers to a developers local testing environment.\n   * @example {LCP} PH1\n   * @example {500 ms} PH2\n   * @example {400 ms} PH3\n   * @example {40%} PH4\n   */\n  poorPoorDetailedCompare:\n      'Your local {PH1} value of {PH2} is poor and is rated the same as {PH4} of real-user {PH1} experiences. Additionally, the field data 75th percentile {PH1} value of {PH3} is poor.',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/MetricCompareStrings.ts', UIStrings);\n\nexport type CompareRating = 'better'|'worse'|'similar';\n\nexport function renderCompareText(\n    options: {metric: string, rating: MetricRating, compare?: CompareRating, localValue: Element}): Element {\n  const {rating, compare} = options;\n  const values = {\n    PH1: options.metric,\n    PH2: options.localValue,\n  };\n\n  if (rating === 'good' && compare === 'better') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.goodBetterCompare, values);\n  }\n  if (rating === 'good' && compare === 'worse') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.goodWorseCompare, values);\n  }\n  if (rating === 'good' && compare === 'similar') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.goodSimilarCompare, values);\n  }\n  if (rating === 'good' && !compare) {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.goodSummarized, values);\n  }\n  if (rating === 'needs-improvement' && compare === 'better') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.needsImprovementBetterCompare, values);\n  }\n  if (rating === 'needs-improvement' && compare === 'worse') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.needsImprovementWorseCompare, values);\n  }\n  if (rating === 'needs-improvement' && compare === 'similar') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.needsImprovementSimilarCompare, values);\n  }\n  if (rating === 'needs-improvement' && !compare) {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.needsImprovementSummarized, values);\n  }\n  if (rating === 'poor' && compare === 'better') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.poorBetterCompare, values);\n  }\n  if (rating === 'poor' && compare === 'worse') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.poorWorseCompare, values);\n  }\n  if (rating === 'poor' && compare === 'similar') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.poorSimilarCompare, values);\n  }\n  if (rating === 'poor' && !compare) {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.poorSummarized, values);\n  }\n\n  throw new Error('Compare string not found');\n}\n\nexport function renderDetailedCompareText(options: {\n  metric: string,\n  localRating: MetricRating,\n  fieldRating?: MetricRating, localValue: Element, fieldValue: Element, percent: string,\n}): Element {\n  const {localRating, fieldRating} = options;\n  const values = {\n    PH1: options.metric,\n    PH2: options.localValue,\n    PH3: options.fieldValue,\n    PH4: options.percent,\n  };\n\n  if (localRating === 'good' && fieldRating === 'good') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.goodGoodDetailedCompare, values);\n  }\n  if (localRating === 'good' && fieldRating === 'needs-improvement') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.goodNeedsImprovementDetailedCompare, values);\n  }\n  if (localRating === 'good' && fieldRating === 'poor') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.goodPoorDetailedCompare, values);\n  }\n  if (localRating === 'good' && !fieldRating) {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.goodSummarized, values);\n  }\n  if (localRating === 'needs-improvement' && fieldRating === 'good') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.needsImprovementGoodDetailedCompare, values);\n  }\n  if (localRating === 'needs-improvement' && fieldRating === 'needs-improvement') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.needsImprovementNeedsImprovementDetailedCompare, values);\n  }\n  if (localRating === 'needs-improvement' && fieldRating === 'poor') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.needsImprovementPoorDetailedCompare, values);\n  }\n  if (localRating === 'needs-improvement' && !fieldRating) {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.needsImprovementSummarized, values);\n  }\n  if (localRating === 'poor' && fieldRating === 'good') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.poorGoodDetailedCompare, values);\n  }\n  if (localRating === 'poor' && fieldRating === 'needs-improvement') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.poorNeedsImprovementDetailedCompare, values);\n  }\n  if (localRating === 'poor' && fieldRating === 'poor') {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.poorPoorDetailedCompare, values);\n  }\n  if (localRating === 'poor' && !fieldRating) {\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.poorSummarized, values);\n  }\n\n  throw new Error('Detailed compare string not found');\n}\n"]}