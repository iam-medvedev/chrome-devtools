{"version":3,"file":"SidebarSingleInsightSet.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/SidebarSingleInsightSet.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Root from '../../../core/root/root.js';\nimport * as Trace from '../../../models/trace/trace.js';\nimport {getCleanTextContentFromElements, renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\n\nimport * as Components from './components.js';\nimport type * as InsightComponents from './insights/insights.js';\n\ntype BaseInsightComponent =\n    InsightComponents.BaseInsightComponent.BaseInsightComponent<Trace.Insights.Types.InsightModel<{}>>;\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nfunction getUserVisibleInsights(component: Components.SidebarSingleInsightSet.SidebarSingleInsightSet):\n    BaseInsightComponent[] {\n  assert.isOk(component.shadowRoot);\n  return [...component.shadowRoot.querySelectorAll<BaseInsightComponent>('[data-insight-name]')];\n}\n\ndescribeWithEnvironment('SidebarSingleInsightSet', () => {\n  it('renders a list of insights', async function() {\n    const {parsedTrace, insights} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n\n    assert.isOk(insights);\n    // only one navigation in this trace.\n    assert.strictEqual(insights.size, 1);\n    // This is the navigationID from this trace.\n    const navigationId = '8463DF94CD61B265B664E7F768183DE3';\n    assert.isTrue(insights.has(navigationId));\n\n    const component = new Components.SidebarSingleInsightSet.SidebarSingleInsightSet();\n    renderElementIntoDOM(component);\n    component.data = {\n      parsedTrace,\n      insights,\n      insightSetKey: navigationId,\n      activeCategory: Trace.Insights.Types.InsightCategory.ALL,\n      activeInsight: null,\n    };\n    await coordinator.done();\n\n    const userVisibleTitles = getUserVisibleInsights(component).flatMap(component => {\n      return getCleanTextContentFromElements(component.shadowRoot!, '.insight-title');\n    });\n    assert.deepEqual(userVisibleTitles, [\n      'LCP by phase',\n      'LCP request discovery',\n      'Render blocking requests',\n      'Document request latency',\n      'Third parties',\n    ]);\n  });\n\n  it('does not render experimental insights by default', async function() {\n    const {parsedTrace, insights} = await TraceLoader.traceEngine(this, 'font-display.json.gz');\n    const component = new Components.SidebarSingleInsightSet.SidebarSingleInsightSet();\n    renderElementIntoDOM(component);\n    const firstNavigation = parsedTrace.Meta.mainFrameNavigations.at(0)?.args.data?.navigationId;\n    assert.isOk(firstNavigation);\n    component.data = {\n      parsedTrace,\n      insights,\n      insightSetKey: firstNavigation,\n      activeCategory: Trace.Insights.Types.InsightCategory.ALL,\n      activeInsight: null,\n    };\n    await coordinator.done();\n    const userVisibleTitles = getUserVisibleInsights(component).flatMap(component => {\n      return getCleanTextContentFromElements(component.shadowRoot!, '.insight-title');\n    });\n    // Does not include \"font display\", which is experimental.\n    assert.deepEqual(userVisibleTitles, [\n      'LCP by phase',\n      'LCP request discovery',\n      'Layout shift culprits',\n      'Third parties',\n    ]);\n  });\n\n  it('renders experimental insights if the experiment is turned on', async function() {\n    const {parsedTrace, insights} = await TraceLoader.traceEngine(this, 'font-display.json.gz');\n    const component = new Components.SidebarSingleInsightSet.SidebarSingleInsightSet();\n    Root.Runtime.experiments.enableForTest(\n        Root.Runtime.ExperimentName.TIMELINE_EXPERIMENTAL_INSIGHTS,\n    );\n    renderElementIntoDOM(component);\n    const firstNavigation = parsedTrace.Meta.mainFrameNavigations.at(0)?.args.data?.navigationId;\n    assert.isOk(firstNavigation);\n    component.data = {\n      parsedTrace,\n      insights,\n      insightSetKey: firstNavigation,\n      activeCategory: Trace.Insights.Types.InsightCategory.ALL,\n      activeInsight: null,\n    };\n    await coordinator.done();\n    const userVisibleTitles = getUserVisibleInsights(component).flatMap(component => {\n      return getCleanTextContentFromElements(component.shadowRoot!, '.insight-title');\n    });\n    // Does not include \"font display\", which is experimental.\n    assert.deepEqual(userVisibleTitles, [\n      'LCP by phase',\n      'LCP request discovery',\n      'Layout shift culprits',\n      'Font display',\n      'Third parties',\n    ]);\n  });\n\n  it('will render the active insight fully', async function() {\n    const {parsedTrace, insights} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n\n    assert.isOk(insights);\n    // only one navigation in this trace.\n    assert.strictEqual(insights.size, 1);\n    // This is the navigationID from this trace.\n    const navigationId = '8463DF94CD61B265B664E7F768183DE3';\n    assert.isTrue(insights.has(navigationId));\n\n    const model = insights.get(navigationId)?.model.LCPPhases;\n    if (!model) {\n      throw new Error('missing LCPPhases model');\n    }\n\n    const component = new Components.SidebarSingleInsightSet.SidebarSingleInsightSet();\n    renderElementIntoDOM(component);\n    component.data = {\n      parsedTrace,\n      insights,\n      insightSetKey: navigationId,\n      activeCategory: Trace.Insights.Types.InsightCategory.ALL,\n      activeInsight: {\n        model,\n        insightSetKey: navigationId,\n      },\n    };\n    await coordinator.done();\n\n    const expandedInsight = getUserVisibleInsights(component).find(insight => {\n      return insight.selected;\n    });\n    assert.isOk(expandedInsight);\n    assert.strictEqual(expandedInsight.model?.title, 'LCP by phase');\n  });\n});\n"]}