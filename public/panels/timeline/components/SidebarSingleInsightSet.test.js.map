{"version":3,"file":"SidebarSingleInsightSet.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/SidebarSingleInsightSet.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {getCleanTextContentFromElements, renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\n\nimport * as Components from './components.js';\nimport * as InsightComponents from './insights/insights.js';\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nfunction getUserVisibleInsights(component: Components.SidebarSingleInsightSet.SidebarSingleInsightSet):\n    InsightComponents.SidebarInsight.SidebarInsight[] {\n  assert.isOk(component.shadowRoot);\n  const insightWrappers = [...component.shadowRoot.querySelectorAll<HTMLDivElement>('[data-single-insight-wrapper]')];\n\n  // We have to jump through some hoops here => each insight is rendered in its\n  // own component, but within it they all use the\n  // devtools-performance-sidebar-insight component to render the header +\n  // body.\n  // So we first have to find the specific insight component (e.g.\n  // devtools-performance-render-blocking), then look inside its shadow dom for\n  // the devtools-performance-sidebar-insight component.\n  // If you are here debugging something, I highly recommend loading up\n  // DevTools and inspecting the DOM in the Insights sidebar. It will be much\n  // easier!\n  const userVisibleInsightComponents =\n      insightWrappers\n          .map(div => {\n            const component = div.querySelector('[data-insight-name]');\n            assert.instanceOf(component, HTMLElement);\n            const insightComponent =\n                component.shadowRoot?.querySelector<InsightComponents.SidebarInsight.SidebarInsight>(\n                    'devtools-performance-sidebar-insight');\n            return insightComponent ?? null;\n          })\n          .filter(x => x !== null);\n  return userVisibleInsightComponents;\n}\n\ndescribeWithEnvironment('SidebarSingleInsightSet', () => {\n  it('renders a list of insights', async function() {\n    const {parsedTrace, insights} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n\n    assert.isOk(insights);\n    // only one navigation in this trace.\n    assert.strictEqual(insights.size, 1);\n    // This is the navigationID from this trace.\n    const navigationId = '8463DF94CD61B265B664E7F768183DE3';\n    assert.isTrue(insights.has(navigationId));\n\n    const component = new Components.SidebarSingleInsightSet.SidebarSingleInsightSet();\n    renderElementIntoDOM(component);\n    component.data = {\n      parsedTrace,\n      insights,\n      insightSetKey: navigationId,\n      activeCategory: InsightComponents.Types.Category.ALL,\n      activeInsight: null,\n    };\n    await coordinator.done();\n\n    const userVisibleTitles = getUserVisibleInsights(component).flatMap(component => {\n      return getCleanTextContentFromElements(component.shadowRoot!, 'header');\n    });\n    assert.deepEqual(userVisibleTitles, [\n      'LCP by phase',\n      'LCP request discovery',\n      'Render blocking requests',\n      'Document request latency',\n      'Third parties',\n    ]);\n  });\n\n  it('will render the active insight fully', async function() {\n    const {parsedTrace, insights} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n\n    assert.isOk(insights);\n    // only one navigation in this trace.\n    assert.strictEqual(insights.size, 1);\n    // This is the navigationID from this trace.\n    const navigationId = '8463DF94CD61B265B664E7F768183DE3';\n    assert.isTrue(insights.has(navigationId));\n\n    const component = new Components.SidebarSingleInsightSet.SidebarSingleInsightSet();\n    renderElementIntoDOM(component);\n    component.data = {\n      parsedTrace,\n      insights,\n      insightSetKey: navigationId,\n      activeCategory: InsightComponents.Types.Category.ALL,\n      activeInsight: {\n        name: 'lcp-by-phase',\n        insightSetKey: navigationId,\n        overlays: [],\n      },\n    };\n    await coordinator.done();\n\n    const expandedInsight = getUserVisibleInsights(component).find(insight => {\n      return 'insightExpanded' in insight.dataset;\n    });\n    assert.isOk(expandedInsight);\n    assert.strictEqual(expandedInsight.dataset.insightTitle, 'LCP by phase');\n  });\n});\n"]}