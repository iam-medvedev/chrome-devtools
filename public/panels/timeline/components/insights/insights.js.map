{
  "version": 3,
  "sources": ["../../../../../../../../front_end/panels/timeline/components/insights/BaseInsightComponent.ts", "baseInsightComponent.css.js", "../../../../../../../../front_end/panels/timeline/components/insights/Helpers.ts", "../../../../../../../../front_end/panels/timeline/components/insights/SidebarInsight.ts", "../../../../../../../../front_end/panels/timeline/components/insights/Cache.ts", "../../../../../../../../front_end/panels/timeline/components/insights/Table.ts", "../../../../../../../../front_end/panels/timeline/components/insights/EventRef.ts", "table.css.js", "../../../../../../../../front_end/panels/timeline/components/insights/Checklist.ts", "checklist.css.js", "../../../../../../../../front_end/panels/timeline/components/insights/CLSCulprits.ts", "../../../../../../../../front_end/panels/timeline/components/insights/NodeLink.ts", "../../../../../../../../front_end/panels/timeline/components/insights/DocumentLatency.ts", "../../../../../../../../front_end/panels/timeline/components/insights/DOMSize.ts", "../../../../../../../../front_end/panels/timeline/components/insights/DuplicatedJavaScript.ts", "../../../../../../../../front_end/panels/timeline/components/insights/ScriptRef.ts", "../../../../../../../../front_end/panels/timeline/components/insights/FontDisplay.ts", "../../../../../../../../front_end/panels/timeline/components/insights/ForcedReflow.ts", "../../../../../../../../front_end/panels/timeline/components/insights/ImageDelivery.ts", "../../../../../../../../front_end/panels/timeline/components/insights/INPBreakdown.ts", "../../../../../../../../front_end/panels/timeline/components/insights/LCPBreakdown.ts", "../../../../../../../../front_end/panels/timeline/components/insights/LCPDiscovery.ts", "../../../../../../../../front_end/panels/timeline/components/insights/LegacyJavaScript.ts", "../../../../../../../../front_end/panels/timeline/components/insights/ModernHTTP.ts", "../../../../../../../../front_end/panels/timeline/components/insights/NetworkDependencyTree.ts", "networkDependencyTreeInsight.css.js", "../../../../../../../../front_end/panels/timeline/components/insights/RenderBlocking.ts", "../../../../../../../../front_end/panels/timeline/components/insights/SlowCSSSelector.ts", "../../../../../../../../front_end/panels/timeline/components/insights/ThirdParties.ts", "../../../../../../../../front_end/panels/timeline/components/insights/types.ts", "../../../../../../../../front_end/panels/timeline/components/insights/Viewport.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport '../../../../ui/components/markdown_view/markdown_view.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Root from '../../../../core/root/root.js';\nimport type {InsightModel} from '../../../../models/trace/insights/types.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as Buttons from '../../../../ui/components/buttons/buttons.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as UI from '../../../../ui/legacy/legacy.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../../ui/visual_logging/visual_logging.js';\nimport type * as Overlays from '../../overlays/overlays.js';\nimport * as Utils from '../../utils/utils.js';\n\nimport baseInsightComponentStyles from './baseInsightComponent.css.js';\nimport {md} from './Helpers.js';\nimport * as SidebarInsight from './SidebarInsight.js';\nimport type {TableState} from './Table.js';\n\nconst {html} = Lit;\n\nconst UIStrings = {\n  /**\n   * @description Text to tell the user the estimated time or size savings for this insight. \"&\" means \"and\" - space is limited to prefer abbreviated terms if possible. Text will still fit if not short, it just won't look very good, so using no abbreviations is fine if necessary.\n   * @example {401 ms} PH1\n   * @example {112 kB} PH1\n   */\n  estimatedSavings: 'Est savings: {PH1}',\n  /**\n   * @description Text to tell the user the estimated time and size savings for this insight. \"&\" means \"and\", \"Est\" means \"Estimated\" - space is limited to prefer abbreviated terms if possible. Text will still fit if not short, it just won't look very good, so using no abbreviations is fine if necessary.\n   * @example {401 ms} PH1\n   * @example {112 kB} PH2\n   */\n  estimatedSavingsTimingAndBytes: 'Est savings: {PH1} & {PH2}',\n  /**\n   * @description Text to tell the user the estimated time savings for this insight that is used for screen readers.\n   * @example {401 ms} PH1\n   * @example {112 kB} PH1\n   */\n  estimatedSavingsAriaTiming: 'Estimated savings for this insight: {PH1}',\n  /**\n   * @description Text to tell the user the estimated size savings for this insight that is used for screen readers. Value is in terms of \"transfer size\", aka encoded/compressed data length.\n   * @example {401 ms} PH1\n   * @example {112 kB} PH1\n   */\n  estimatedSavingsAriaBytes: 'Estimated savings for this insight: {PH1} transfer size',\n  /**\n   * @description Text to tell the user the estimated time and size savings for this insight that is used for screen readers.\n   * @example {401 ms} PH1\n   * @example {112 kB} PH2\n   */\n  estimatedSavingsTimingAndBytesAria: 'Estimated savings for this insight: {PH1} and {PH2} transfer size',\n  /**\n   * @description Used for screen-readers as a label on the button to expand an insight to view details\n   * @example {LCP breakdown} PH1\n   */\n  viewDetails: 'View details for {PH1} insight.',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/BaseInsightComponent.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface BaseInsightData {\n  /** The trace bounds for the insight set that contains this insight. */\n  bounds: Trace.Types.Timing.TraceWindowMicro|null;\n  /** The key into `insights` that contains this particular insight. */\n  insightSetKey: string|null;\n}\n\nexport abstract class BaseInsightComponent<T extends InsightModel> extends HTMLElement {\n  abstract internalName: string;\n\n  // So we can use the TypeScript BaseInsight class without getting warnings\n  // about litTagName. Every child should overwrite this.\n  static readonly litTagName = Lit.StaticHtml.literal``;\n  protected readonly shadow = this.attachShadow({mode: 'open'});\n\n  // This flag tracks if the Insights AI feature is enabled within Chrome for\n  // the active user.\n  #insightsAskAiEnabled = false;\n\n  #selected = false;\n  #model: T|null = null;\n  #agentFocus: Utils.AIContext.AgentFocus|null = null;\n  #fieldMetrics: Trace.Insights.Common.CrUXFieldMetricResults|null = null;\n\n  get model(): T|null {\n    return this.#model;\n  }\n  protected data: BaseInsightData = {\n    bounds: null,\n    insightSetKey: null,\n  };\n\n  readonly sharedTableState: TableState = {\n    selectedRowEl: null,\n    selectionIsSticky: false,\n  };\n  #initialOverlays: Trace.Types.Overlays.Overlay[]|null = null;\n\n  protected scheduleRender(): void {\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  // Insights that do support the AI feature can override this to return true.\n  // The \"Ask AI\" button will only be shown for an Insight if this\n  // is true and if the feature has been enabled by the user and they meet the\n  // requirements to use AI.\n  protected hasAskAiSupport(): boolean {\n    return false;\n  }\n\n  connectedCallback(): void {\n    this.setAttribute('jslog', `${VisualLogging.section(`timeline.insights.${this.internalName}`)}`);\n    // Used for unit test purposes when querying the DOM.\n    this.dataset.insightName = this.internalName;\n\n    const {devToolsAiAssistancePerformanceAgent} = Root.Runtime.hostConfig;\n    this.#insightsAskAiEnabled =\n        Boolean(devToolsAiAssistancePerformanceAgent?.enabled && devToolsAiAssistancePerformanceAgent?.insightsEnabled);\n  }\n\n  set selected(selected: boolean) {\n    if (!this.#selected && selected) {\n      const options = this.getOverlayOptionsForInitialOverlays();\n      this.dispatchEvent(new SidebarInsight.InsightProvideOverlays(this.getInitialOverlays(), options));\n    }\n\n    this.#selected = selected;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  get selected(): boolean {\n    return this.#selected;\n  }\n\n  set model(model: T) {\n    this.#model = model;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  set insightSetKey(insightSetKey: string|null) {\n    this.data.insightSetKey = insightSetKey;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  get bounds(): Trace.Types.Timing.TraceWindowMicro|null {\n    return this.data.bounds;\n  }\n\n  set bounds(bounds: Trace.Types.Timing.TraceWindowMicro|null) {\n    this.data.bounds = bounds;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  set agentFocus(agentFocus: Utils.AIContext.AgentFocus) {\n    this.#agentFocus = agentFocus;\n  }\n\n  set fieldMetrics(fieldMetrics: Trace.Insights.Common.CrUXFieldMetricResults) {\n    this.#fieldMetrics = fieldMetrics;\n  }\n\n  get fieldMetrics(): Trace.Insights.Common.CrUXFieldMetricResults|null {\n    return this.#fieldMetrics;\n  }\n\n  getOverlayOptionsForInitialOverlays(): Overlays.Overlays.TimelineOverlaySetOptions {\n    return {updateTraceWindow: true};\n  }\n\n  #dispatchInsightToggle(): void {\n    if (this.#selected) {\n      this.dispatchEvent(new SidebarInsight.InsightDeactivated());\n\n      // Clear agent (but only if currently focused on an insight).\n      const focus = UI.Context.Context.instance().flavor(Utils.AIContext.AgentFocus);\n      if (focus && focus.data.type === 'insight') {\n        UI.Context.Context.instance().setFlavor(Utils.AIContext.AgentFocus, null);\n      }\n      return;\n    }\n\n    if (!this.data.insightSetKey || !this.model) {\n      // Shouldn't happen, but needed to satisfy TS.\n      return;\n    }\n\n    this.sharedTableState.selectedRowEl?.classList.remove('selected');\n    this.sharedTableState.selectedRowEl = null;\n    this.sharedTableState.selectionIsSticky = false;\n\n    this.dispatchEvent(new SidebarInsight.InsightActivated(this.model, this.data.insightSetKey));\n  }\n\n  #renderHoverIcon(insightIsActive: boolean): Lit.TemplateResult {\n    // clang-format off\n    const containerClasses = Lit.Directives.classMap({\n      'insight-hover-icon': true,\n      active: insightIsActive,\n    });\n    return html`\n      <div class=${containerClasses} inert>\n        <devtools-button .data=${{\n          variant: Buttons.Button.Variant.ICON,\n          iconName: 'chevron-down',\n          size: Buttons.Button.Size.SMALL,\n        } as Buttons.Button.ButtonData}\n      ></devtools-button>\n      </div>\n\n    `;\n    // clang-format on\n  }\n\n  /**\n   * Ensure that if the user presses enter or space on a header, we treat it\n   * like a click and toggle the insight.\n   */\n  #handleHeaderKeyDown(event: KeyboardEvent): void {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      event.stopPropagation();\n      this.#dispatchInsightToggle();\n    }\n  }\n\n  /**\n   * Replaces the initial insight overlays with the ones provided.\n   *\n   * If `overlays` is null, reverts back to the initial overlays.\n   *\n   * This allows insights to provide an initial set of overlays,\n   * and later temporarily replace all of those insights with a different set.\n   * This enables the hover/click table interactions.\n   */\n  toggleTemporaryOverlays(\n      overlays: Trace.Types.Overlays.Overlay[]|null, options: Overlays.Overlays.TimelineOverlaySetOptions): void {\n    if (!this.#selected) {\n      return;\n    }\n\n    if (!overlays) {\n      this.dispatchEvent(new SidebarInsight.InsightProvideOverlays(\n          this.getInitialOverlays(), this.getOverlayOptionsForInitialOverlays()));\n      return;\n    }\n\n    this.dispatchEvent(new SidebarInsight.InsightProvideOverlays(overlays, options));\n  }\n\n  getInitialOverlays(): Trace.Types.Overlays.Overlay[] {\n    if (this.#initialOverlays) {\n      return this.#initialOverlays;\n    }\n\n    this.#initialOverlays = this.createOverlays();\n    return this.#initialOverlays;\n  }\n\n  protected createOverlays(): Trace.Types.Overlays.Overlay[] {\n    return this.model?.createOverlays?.() ?? [];\n  }\n\n  protected abstract renderContent(): Lit.LitTemplate;\n\n  #render(): void {\n    if (!this.model) {\n      return;\n    }\n\n    this.#renderWithContent();\n  }\n\n  getEstimatedSavingsTime(): Trace.Types.Timing.Milli|null {\n    return null;\n  }\n\n  getEstimatedSavingsBytes(): number|null {\n    return this.model?.wastedBytes ?? null;\n  }\n\n  #getEstimatedSavingsTextParts(): {bytesString?: string, timeString?: string} {\n    const savingsTime = this.getEstimatedSavingsTime();\n    const savingsBytes = this.getEstimatedSavingsBytes();\n\n    let timeString, bytesString;\n    if (savingsTime) {\n      timeString = i18n.TimeUtilities.millisToString(savingsTime);\n    }\n    if (savingsBytes) {\n      bytesString = i18n.ByteUtilities.bytesToString(savingsBytes);\n    }\n    return {\n      timeString,\n      bytesString,\n    };\n  }\n\n  #getEstimatedSavingsAriaLabel(): string|null {\n    const {bytesString, timeString} = this.#getEstimatedSavingsTextParts();\n\n    if (timeString && bytesString) {\n      return i18nString(UIStrings.estimatedSavingsTimingAndBytesAria, {\n        PH1: timeString,\n        PH2: bytesString,\n      });\n    }\n    if (timeString) {\n      return i18nString(UIStrings.estimatedSavingsAriaTiming, {\n        PH1: timeString,\n      });\n    }\n    if (bytesString) {\n      return i18nString(UIStrings.estimatedSavingsAriaBytes, {\n        PH1: bytesString,\n      });\n    }\n\n    return null;\n  }\n\n  #getEstimatedSavingsString(): string|null {\n    const {bytesString, timeString} = this.#getEstimatedSavingsTextParts();\n\n    if (timeString && bytesString) {\n      return i18nString(UIStrings.estimatedSavingsTimingAndBytes, {\n        PH1: timeString,\n        PH2: bytesString,\n      });\n    }\n    if (timeString) {\n      return i18nString(UIStrings.estimatedSavings, {\n        PH1: timeString,\n      });\n    }\n    if (bytesString) {\n      return i18nString(UIStrings.estimatedSavings, {\n        PH1: bytesString,\n      });\n    }\n\n    return null;\n  }\n\n  #askAIButtonClick(): void {\n    if (!this.#agentFocus) {\n      return;\n    }\n\n    // matches the one in ai_assistance-meta.ts\n    const actionId = 'drjones.performance-insight-context';\n    if (!UI.ActionRegistry.ActionRegistry.instance().hasAction(actionId)) {\n      return;\n    }\n\n    UI.Context.Context.instance().setFlavor(Utils.AIContext.AgentFocus, this.#agentFocus);\n\n    // Trigger the AI Assistance panel to open.\n    const action = UI.ActionRegistry.ActionRegistry.instance().getAction(actionId);\n    void action.execute();\n  }\n\n  #canShowAskAI(): boolean {\n    const aiAvailable = Root.Runtime.hostConfig.aidaAvailability?.enterprisePolicyValue !==\n            Root.Runtime.GenAiEnterprisePolicyValue.DISABLE &&\n        this.#insightsAskAiEnabled && Root.Runtime.hostConfig.aidaAvailability?.enabled === true;\n\n    return aiAvailable && this.hasAskAiSupport();\n  }\n\n  #renderInsightContent(insightModel: T): Lit.LitTemplate {\n    if (!this.#selected) {\n      return Lit.nothing;\n    }\n\n    const aiLabel = Root.Runtime.hostConfig.devToolsAiDebugWithAi?.enabled ||\n            Root.Runtime.hostConfig.devToolsAiSubmenuPrompts?.enabled ?\n        'Debug with AI' :\n        'Ask AI';\n    const ariaLabel = `${aiLabel} about ${insightModel.title} insight`;\n    // Only render the insight body content if it is selected.\n    // To avoid re-rendering triggered from elsewhere.\n    const content = this.renderContent();\n    // clang-format off\n    return html`\n      <div class=\"insight-body\">\n        <div class=\"insight-description\">${md(insightModel.description)}</div>\n        <div class=\"insight-content\">${content}</div>\n        ${this.#canShowAskAI() ? html`\n          <div class=\"ask-ai-btn-wrap\">\n            <devtools-button class=\"ask-ai\"\n              .variant=${Buttons.Button.Variant.OUTLINED}\n              .iconName=${'smart-assistant'}\n              data-insights-ask-ai\n              jslog=${VisualLogging.action(`timeline.insight-ask-ai.${this.internalName}`).track({click: true})}\n              @click=${this.#askAIButtonClick}\n              aria-label=${ariaLabel}\n            >${aiLabel}</devtools-button>\n          </div>\n        `: Lit.nothing}\n      </div>`;\n    // clang-format on\n  }\n\n  #renderWithContent(): void {\n    if (!this.#model) {\n      Lit.render(Lit.nothing, this.shadow, {host: this});\n      return;\n    }\n\n    const containerClasses = Lit.Directives.classMap({\n      insight: true,\n      closed: !this.#selected,\n    });\n    const estimatedSavingsString = this.#getEstimatedSavingsString();\n    const estimatedSavingsAriaLabel = this.#getEstimatedSavingsAriaLabel();\n\n    let ariaLabel = `${i18nString(UIStrings.viewDetails, {PH1: this.#model.title})}`;\n    if (estimatedSavingsAriaLabel) {\n      // space prefix is deliberate to add a gap after the view details text\n      ariaLabel += ` ${estimatedSavingsAriaLabel}`;\n    }\n\n    // clang-format off\n    const output = html`\n      <style>${baseInsightComponentStyles}</style>\n      <div class=${containerClasses}>\n        <header @click=${this.#dispatchInsightToggle}\n          @keydown=${this.#handleHeaderKeyDown}\n          jslog=${VisualLogging.action(`timeline.toggle-insight.${this.internalName}`).track({click: true})}\n          data-insight-header-title=${this.#model?.title}\n          tabIndex=\"0\"\n          role=\"button\"\n          aria-expanded=${this.#selected}\n          aria-label=${ariaLabel}\n        >\n          ${this.#renderHoverIcon(this.#selected)}\n          <h3 class=\"insight-title\">${this.#model?.title}</h3>\n          ${estimatedSavingsString ?\n            html`\n            <slot name=\"insight-savings\" class=\"insight-savings\">\n              <span title=${estimatedSavingsAriaLabel ?? ''}>${estimatedSavingsString}</span>\n            </slot>\n          </div>`\n          : Lit.nothing}\n        </header>\n        ${this.#renderInsightContent(this.#model)}\n      </div>\n    `;\n    // clang-format on\n\n    Lit.render(output, this.shadow, {host: this});\n\n    if (this.#selected) {\n      requestAnimationFrame(() => requestAnimationFrame(() => this.scrollIntoViewIfNeeded()));\n    }\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2024 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n@keyframes insight-highlight-fade-out {\n  from {\n    background-color: var(--sys-color-yellow-container);\n  }\n\n  to {\n    background-color: transparent;\n  }\n}\n\n:host([highlight-insight]) {\n  .insight {\n    animation: insight-highlight-fade-out 2s 0s;\n  }\n}\n\n.insight {\n  display: block;\n  position: relative;\n  width: auto;\n  height: auto;\n  margin: var(--sys-size-5) 0;\n  border-radius: var(--sys-shape-corner-extra-small);\n  overflow: hidden;\n  border: var(--sys-size-1) solid var(--sys-color-divider);\n  background-color: var(--sys-color-base);\n\n  header:focus-visible {\n    outline: none;\n  }\n\n  &.closed {\n    background-color: var(--sys-color-surface3);\n    border: none;\n\n    &:focus-within {\n      /* Ensure that if the user tabs to a closed insight, we outline it so they know it's focused. */\n      outline: var(--sys-size-2) solid var(--sys-color-state-focus-ring);\n    }\n  }\n\n  header {\n    padding: var(--sys-size-5) var(--sys-size-4);\n\n    h3 {\n      font: var(--sys-typescale-body4-medium);\n    }\n  }\n\n  &:not(.closed) {\n    header {\n      padding-bottom: var(--sys-size-2);\n    }\n  }\n}\n\n.insight-hover-icon {\n  position: absolute;\n  top: var(--sys-size-5);\n  right: var(--sys-size-5);\n  border: none;\n  width: var(--sys-size-9);\n  user-select: none;\n  height: var(--sys-size-9);\n  box-shadow: var(--sys-elevation-level1);\n  border-radius: var(--sys-shape-corner-full);\n  background: var(--sys-color-cdt-base-container);\n  opacity: 0%;\n\n  /* Ensure that the icon appears when the user hovers, or focuses the header */\n  .insight:hover &,\n  header:focus-within & {\n    opacity: 100%;\n  }\n\n  &.active devtools-button {\n    transform: rotate(180deg);\n  }\n}\n\n.insight-description,\n.insight-body,\n.insight-title {\n  user-select: text;\n}\n\n.insight-body {\n  padding: 0 var(--sys-size-4) var(--sys-size-5);\n\n  .list-title {\n    margin-top: var(--sys-size-4);\n    margin-bottom: var(--sys-size-3);\n  }\n\n  ul {\n    /* left padding to bring the list bullets to the right place */\n    padding: 0 0 0 var(--sys-size-9);\n    margin: 0;\n  }\n}\n\n.insight-section {\n  padding-top: var(--sys-size-5);\n  margin-top: var(--sys-size-5);\n}\n\n.insight-description:not(:empty) {\n  margin-bottom: var(--sys-size-5);\n}\n\n.insight-section:not(:empty) {\n  border-top: var(--sys-size-1) solid var(--sys-color-divider);\n}\n\n.insight-title {\n  color: var(--sys-color-on-base);\n  margin-block: 3px;\n}\n\n.link {\n  color: var(--sys-color-primary);\n}\n\n.dl-title {\n  font-weight: bold;\n}\n\ndd.dl-title {\n  text-align: right;\n}\n\n.dl-value {\n  font-weight: bold;\n}\n\n.image-ref {\n  display: inline-flex;\n  align-items: center;\n\n  &:not(:empty) {\n    padding-top: var(--sys-size-5);\n  }\n}\n\n.element-img {\n  width: var(--sys-size-13);\n  height: var(--sys-size-13);\n  object-fit: cover;\n  border: var(--sys-size-1) solid var(--sys-color-divider);\n  background: var(--sys-color-divider) -0.054px -12px / 100.239% 148.936% no-repeat;\n  margin-right: var(--sys-size-5);\n}\n\n.element-img-details {\n  font: var(--sys-typescale-body4-regular);\n  display: flex;\n  flex-direction: column;\n  word-break: break-all;\n\n  .element-img-details-size {\n    color: var(--color-text-secondary);\n  }\n}\n\n::slotted(*) {\n  font: var(--sys-typescale-body4-regular);\n}\n\n.insight-savings {\n  font: var(--sys-typescale-body4-medium);\n  color: var(--sys-color-green);\n}\n\n.timeline-link {\n  cursor: pointer;\n  text-decoration: var(--override-timeline-link-text-decoration, underline);\n  color: var(--override-timeline-link-text-color, var(--sys-color-primary));\n  /* for a11y reasons this is a button, so we have to remove some default\n   * styling */\n  background: none;\n  border: none;\n  padding: 0;\n  font: inherit;\n  text-align: left;\n}\n\n.timeline-link.invalid-link {\n  color: var(--sys-color-state-disabled);\n}\n\n.ask-ai-btn-wrap {\n  border-top: var(--sys-size-1) solid var(--sys-color-divider);\n  padding-top: var(--sys-size-5);\n  margin-top: var(--sys-size-5);\n  text-align: center;\n}\n\n/*# sourceURL=${import.meta.resolve('./baseInsightComponent.css')} */`;", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../../ui/components/markdown_view/markdown_view.js';\n\nimport type * as Common from '../../../../core/common/common.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Marked from '../../../../third_party/marked/marked.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nconst {html} = Lit;\n\nexport function shouldRenderForCategory(options: {\n  activeCategory: Trace.Insights.Types.InsightCategory,\n  insightCategory: Trace.Insights.Types.InsightCategory,\n}): boolean {\n  return options.activeCategory === Trace.Insights.Types.InsightCategory.ALL ||\n      options.activeCategory === options.insightCategory;\n}\n\n/**\n * Returns a rendered MarkdownView component.\n *\n * This should only be used for markdown that is guaranteed to be valid,\n * and not contain any user-generated content.\n */\nexport function md(markdown: Common.UIString.LocalizedString): Lit.TemplateResult {\n  const tokens = Marked.Marked.lexer(markdown);\n  const data = {tokens};\n  return html`<devtools-markdown-view .data=${data}></devtools-markdown-view>`;\n}\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {InsightModel} from '../../../../models/trace/insights/types.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nexport interface InsightDetails {\n  title: string;\n  description: string;\n  internalName: string;\n  expanded: boolean;\n  estimatedSavingsTime?: Trace.Types.Timing.Milli;\n  estimatedSavingsBytes?: number;\n}\n\nexport class InsightActivated extends Event {\n  static readonly eventName = 'insightactivated';\n\n  constructor(public model: InsightModel, public insightSetKey: string) {\n    super(InsightActivated.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class InsightDeactivated extends Event {\n  static readonly eventName = 'insightdeactivated';\n  constructor() {\n    super(InsightDeactivated.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class InsightSetHovered extends Event {\n  static readonly eventName = 'insightsethovered';\n  constructor(public bounds?: Trace.Types.Timing.TraceWindowMicro) {\n    super(InsightSetHovered.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class InsightSetZoom extends Event {\n  static readonly eventName = 'insightsetzoom';\n  constructor(public bounds: Trace.Types.Timing.TraceWindowMicro) {\n    super(InsightSetZoom.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class InsightProvideOverlays extends Event {\n  static readonly eventName = 'insightprovideoverlays';\n\n  constructor(\n      public overlays: Trace.Types.Overlays.Overlay[], public options: Overlays.Overlays.TimelineOverlaySetOptions) {\n    super(InsightProvideOverlays.eventName, {bubbles: true, composed: true});\n  }\n}\n\ndeclare global {\n  interface GlobalEventHandlersEventMap {\n    [InsightActivated.eventName]: InsightActivated;\n    [InsightDeactivated.eventName]: InsightDeactivated;\n    [InsightSetHovered.eventName]: InsightSetHovered;\n    [InsightSetZoom.eventName]: InsightSetZoom;\n    [InsightProvideOverlays.eventName]: InsightProvideOverlays;\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {CacheInsightModel} from '../../../../models/trace/insights/Cache.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {eventRef} from './EventRef.js';\nimport {createLimitedRows, renderOthersLabel, type TableData, type TableDataRow} from './Table.js';\n\nconst {UIStrings, i18nString, createOverlayForRequest} = Trace.Insights.Models.Cache;\n\nconst {html} = Lit;\n\nexport class Cache extends BaseInsightComponent<CacheInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-cache`;\n  override internalName = 'cache';\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  mapToRow(req: Trace.Insights.Models.Cache.CacheableRequest): TableDataRow {\n    return {\n      values: [eventRef(req.request), i18n.TimeUtilities.secondsToString(req.ttl)],\n      overlays: [createOverlayForRequest(req.request)],\n    };\n  }\n\n  createAggregatedTableRow(remaining: Trace.Insights.Models.Cache.CacheableRequest[]): TableDataRow {\n    return {\n      values: [renderOthersLabel(remaining.length), ''],\n      overlays: remaining.flatMap(r => createOverlayForRequest(r.request)),\n    };\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const cacheableRequests = [...this.model.requests];\n    const topRequests =\n        cacheableRequests.sort((a, b) => b.request.args.data.decodedBodyLength - a.request.args.data.decodedBodyLength);\n\n    const rows = createLimitedRows(topRequests, this);\n\n    if (!rows.length) {\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.noRequestsToCache)}</div>`;\n    }\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.requestColumn), i18nString(UIStrings.cacheTTL)],\n            rows,\n          } as TableData}>\n        </devtools-performance-table>\n      </div>`;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-cache': Cache;\n  }\n}\n\ncustomElements.define('devtools-performance-cache', Cache);\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport type * as BaseInsightComponent from './BaseInsightComponent.js';\nimport {EventReferenceClick} from './EventRef.js';\nimport tableStyles from './table.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Table row value representing the remaining items not shown in the table due to size constraints. This row will always represent at least 2 items.\n   * @example {5} PH1\n   */\n  others: '{PH1} others',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/Table.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst {html} = Lit;\n\ntype BaseInsightComponent = BaseInsightComponent.BaseInsightComponent<Trace.Insights.Types.InsightModel>;\n\n/**\n * @file An interactive table component.\n *\n * On hover:\n *           desaturates the relevant events (in both the minimap and the flamegraph), and\n *           replaces the current insight's overlays with the overlays attached to that row.\n *           The currently selected trace bounds does not change.\n *\n *           Removing the mouse from the table without clicking on any row restores the original\n *           overlays.\n *\n * On click:\n *           \"sticks\" the selection, replaces overlays like hover does, and additionally updates\n *           the current trace bounds to fit the bounds of the row's overlays.\n */\n\nexport interface TableState {\n  selectedRowEl: HTMLElement|null;\n  selectionIsSticky: boolean;\n}\n\nexport interface TableData {\n  insight: BaseInsightComponent;\n  headers: string[];\n  rows: TableDataRow[];\n}\n\nexport interface TableDataRow {\n  values: Array<number|string|Lit.LitTemplate>;\n  overlays?: Trace.Types.Overlays.Overlay[];\n  subRows?: TableDataRow[];\n}\n\nexport function renderOthersLabel(numOthers: number): string {\n  return i18nString(UIStrings.others, {PH1: numOthers});\n}\n\nexport interface RowLimitAggregator<T> {\n  mapToRow: (item: T) => TableDataRow;\n  createAggregatedTableRow: (remaining: T[]) => TableDataRow;\n}\n\n/**\n * Maps `arr` to a list of `TableDataRow`s  using `aggregator.mapToRow`, but limits the number of `TableDataRow`s to `limit`.\n * If the length of `arr` is larger than `limit`, any excess rows will be aggregated into the final `TableDataRow` using `aggregator.createAggregatedTableRow`.\n *\n * Useful for creating a \"N others\" row in a data table.\n *\n * Example: `arr` is a list of 15 items & `limit` is 10. The first 9 items in `arr` would be mapped to `TableDataRow`s using `aggregator.mapToRow` and\n * the 10th `TableDataRow` would be created by using `aggregator.createAggregatedTableRow` on the 6 items that were not sent through `aggregator.mapToRow`.\n */\nexport function createLimitedRows<T>(arr: T[], aggregator: RowLimitAggregator<T>, limit = 10): TableDataRow[] {\n  if (arr.length === 0 || limit === 0) {\n    return [];\n  }\n\n  const aggregateStartIndex = limit - 1;\n  const items = arr.slice(0, aggregateStartIndex).map(aggregator.mapToRow.bind(aggregator));\n  if (arr.length > limit) {\n    items.push(aggregator.createAggregatedTableRow(arr.slice(aggregateStartIndex)));\n  } else if (arr.length === limit) {\n    items.push(aggregator.mapToRow(arr[aggregateStartIndex]));\n  }\n\n  return items;\n}\n\nexport class Table extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #insight?: BaseInsightComponent;\n  #state?: TableState;\n  #headers?: string[];\n  /** The rows as given as by the user, which may include recursive rows via subRows. */\n  #rows?: TableDataRow[];\n  /** All rows/subRows, in the order that they appear visually. This is the result of traversing `#rows` and any subRows found. */\n  #flattenedRows?: TableDataRow[];\n  #rowToParentRow = new Map<TableDataRow, TableDataRow>();\n  #interactive = false;\n  #currentHoverIndex: number|null = null;\n\n  set data(data: TableData) {\n    this.#insight = data.insight;\n    this.#state = data.insight.sharedTableState;\n    this.#headers = data.headers;\n    this.#rows = data.rows;\n    // If this table isn't interactive, don't attach mouse listeners or use CSS :hover.\n    this.#interactive = this.#rows.some(row => row.overlays || row.subRows?.length);\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  connectedCallback(): void {\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  #onHoverRow(e: MouseEvent): void {\n    if (!this.#flattenedRows) {\n      return;\n    }\n\n    if (!(e.target instanceof HTMLElement)) {\n      return;\n    }\n\n    const rowEl = e.target.closest('tr');\n    if (!rowEl?.parentElement) {\n      return;\n    }\n\n    const rowEls = [...rowEl.parentElement.children];\n    const index = rowEl.sectionRowIndex;\n    if (index === this.#currentHoverIndex) {\n      return;\n    }\n\n    for (const el of rowEl.parentElement.querySelectorAll('.hover')) {\n      el.classList.remove('hover');\n    }\n\n    // Add 'hover' class to all parent rows.\n    let row: TableDataRow|undefined = this.#rowToParentRow.get(this.#flattenedRows[index]);\n    while (row) {\n      const index = this.#flattenedRows.indexOf(row);\n      const rowEl = rowEls[index];\n      rowEl.classList.add('hover');\n      row = this.#rowToParentRow.get(row);\n    }\n\n    this.#currentHoverIndex = index;\n    // Temporarily selects the row, but only if there is not already a sticky selection.\n    this.#onSelectedRowChanged(rowEl, index, {isHover: true});\n  }\n\n  #onClickRow(e: MouseEvent): void {\n    if (!(e.target instanceof HTMLElement)) {\n      return;\n    }\n\n    const rowEl = e.target.closest('tr');\n    if (!rowEl?.parentElement) {\n      return;\n    }\n\n    const index = [...rowEl.parentElement.children].indexOf(rowEl);\n    if (index === -1) {\n      return;\n    }\n\n    // If the desired overlays consist of just a single ENTRY_OUTLINE, then\n    // it is more intuitive to just select the target event.\n    const overlays = this.#flattenedRows?.[index]?.overlays;\n    if (overlays?.length === 1 && overlays[0].type === 'ENTRY_OUTLINE') {\n      this.dispatchEvent(new EventReferenceClick(overlays[0].entry));\n      return;\n    }\n\n    // Select the row and make it sticky.\n    this.#onSelectedRowChanged(rowEl, index, {sticky: true});\n  }\n\n  #onMouseLeave(): void {\n    for (const el of this.shadowRoot?.querySelectorAll('.hover') ?? []) {\n      el.classList.remove('hover');\n    }\n\n    this.#currentHoverIndex = null;\n    // Unselect the row, unless it's sticky.\n    this.#onSelectedRowChanged(null, null);\n  }\n\n  #onSelectedRowChanged(rowEl: HTMLElement|null, rowIndex: number|null, opts: {\n    sticky?: boolean,\n    isHover?: boolean,\n  } = {}): void {\n    if (!this.#flattenedRows || !this.#state || !this.#insight) {\n      return;\n    }\n\n    if (this.#state.selectionIsSticky && !opts.sticky) {\n      return;\n    }\n\n    // Unselect a sticky-selection when clicking it for a second time.\n    if (this.#state.selectionIsSticky && rowEl === this.#state.selectedRowEl) {\n      rowEl = null;\n      opts.sticky = false;\n    }\n\n    if (rowEl && rowIndex !== null) {\n      const overlays = this.#flattenedRows[rowIndex].overlays;\n      if (overlays) {\n        this.#insight.toggleTemporaryOverlays(overlays, {updateTraceWindow: !opts.isHover});\n      }\n    } else {\n      this.#insight.toggleTemporaryOverlays(null, {updateTraceWindow: false});\n    }\n\n    this.#state.selectedRowEl?.classList.remove('selected');\n    rowEl?.classList.add('selected');\n    this.#state.selectedRowEl = rowEl;\n    this.#state.selectionIsSticky = opts.sticky ?? false;\n  }\n\n  async #render(): Promise<void> {\n    if (!this.#headers || !this.#rows) {\n      return;\n    }\n\n    const rowToParentRow = this.#rowToParentRow;\n    rowToParentRow.clear();\n\n    const numColumns = this.#headers.length;\n    const flattenedRows: TableDataRow[] = [];\n    const rowEls: Lit.TemplateResult[] = [];\n    function traverse(parent: TableDataRow|null, row: TableDataRow, depth = 0): void {\n      if (parent) {\n        rowToParentRow.set(row, parent);\n      }\n\n      const thStyles = Lit.Directives.styleMap({\n        paddingLeft: `calc(${depth} * var(--sys-size-5))`,\n        backgroundImage: `repeating-linear-gradient(\n              to right,\n              var(--sys-color-tonal-outline) 0 var(--sys-size-1),\n              transparent var(--sys-size-1) var(--sys-size-5)\n            )`,\n        backgroundPosition: '0 0',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: `calc(${depth} * var(--sys-size-5))`,\n      });\n      const trStyles = Lit.Directives.styleMap({\n        color: depth ? 'var(--sys-color-on-surface-subtle)' : '',\n      });\n      const columnEls = row.values.map(\n          (value, i) => i === 0 ? html`<th\n                scope=\"row\"\n                colspan=${i === row.values.length - 1 ? numColumns - i : 1}\n                style=${thStyles}>${value}\n              </th>` :\n                                  html`<td>${value}</td>`);\n      rowEls.push(html`<tr style=${trStyles}>${columnEls}</tr>`);\n\n      flattenedRows.push(row);\n\n      for (const subRow of row.subRows ?? []) {\n        traverse(row, subRow, depth + 1);\n      }\n    }\n\n    for (const row of this.#rows) {\n      traverse(null, row);\n    }\n\n    this.#flattenedRows = flattenedRows;\n\n    Lit.render(\n        html`<style>${tableStyles}</style>\n      <table\n          class=${Lit.Directives.classMap({\n          interactive: this.#interactive,\n        })}\n          @mouseleave=${this.#interactive ? this.#onMouseLeave : null}>\n        <thead>\n          <tr>\n          ${this.#headers.map(h => html`<th scope=\"col\">${h}</th>`)}\n          </tr>\n        </thead>\n        <tbody\n          @mouseover=${this.#interactive ? this.#onHoverRow : null}\n          @click=${this.#interactive ? this.#onClickRow : null}\n        >${rowEls}</tbody>\n      </table>`,\n        this.#shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-table': Table;\n  }\n}\n\ncustomElements.define('devtools-performance-table', Table);\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport * as Utils from '../../utils/utils.js';\n\nimport baseInsightComponentStyles from './baseInsightComponent.css.js';\n\nconst {html, Directives: {ifDefined}} = Lit;\n\nexport class EventReferenceClick extends Event {\n  static readonly eventName = 'eventreferenceclick';\n\n  constructor(public event: Trace.Types.Events.Event) {\n    super(EventReferenceClick.eventName, {bubbles: true, composed: true});\n  }\n}\n\nclass EventRef extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #text: string|null = null;\n  #event: Trace.Types.Events.Event|null = null;\n\n  set text(text: string) {\n    this.#text = text;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  set event(event: Trace.Types.Events.Event) {\n    this.#event = event;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  #render(): void {\n    if (!this.#text || !this.#event) {\n      return;\n    }\n\n    // clang-format off\n    Lit.render(html`\n      <style>${baseInsightComponentStyles}</style>\n      <button type=\"button\" class=\"timeline-link\" @click=${(e: Event) => {\n        e.stopPropagation();\n        if (this.#event) {\n          this.dispatchEvent(new EventReferenceClick(this.#event));\n        }\n      }}>${this.#text}</button>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\nexport function eventRef(\n    event: Trace.Types.Events.Event, options?: {text?: string, title?: string}): Lit.TemplateResult {\n  let title = options?.title;\n  let text = options?.text;\n  if (Trace.Types.Events.isSyntheticNetworkRequest(event)) {\n    text = text ?? Utils.Helpers.shortenUrl(new URL(event.args.data.url));\n    title = title ?? event.args.data.url;\n  } else if (!text) {\n    console.warn('No text given for eventRef');\n    text = event.name;\n  }\n\n  return html`<devtools-performance-event-ref\n    .event=${event as Trace.Types.Events.Event}\n    .text=${text}\n    title=${ifDefined(title)}\n  ></devtools-performance-event-ref>`;\n}\n\nclass ImageRef extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #request?: Trace.Types.Events.SyntheticNetworkRequest;\n  #imageDataUrl?: string|null;\n\n  set request(request: Trace.Types.Events.SyntheticNetworkRequest) {\n    this.#request = request;\n    this.#imageDataUrl = undefined;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  /**\n   * This only returns a data url if the resource is currently present from the active\n   * inspected page.\n   */\n  async #getOrCreateImageDataUrl(): Promise<string|null> {\n    if (!this.#request) {\n      return null;\n    }\n\n    if (this.#imageDataUrl !== undefined) {\n      return this.#imageDataUrl;\n    }\n\n    const originalUrl = this.#request.args.data.url as Platform.DevToolsPath.UrlString;\n    const resource = SDK.ResourceTreeModel.ResourceTreeModel.resourceForURL(originalUrl);\n    if (!resource) {\n      this.#imageDataUrl = null;\n      return this.#imageDataUrl;\n    }\n\n    const content = await resource.requestContentData();\n    if ('error' in content) {\n      this.#imageDataUrl = null;\n      return this.#imageDataUrl;\n    }\n\n    this.#imageDataUrl = content.asDataUrl();\n    return this.#imageDataUrl;\n  }\n\n  async #render(): Promise<void> {\n    if (!this.#request) {\n      return;\n    }\n\n    const url = this.#request.args.data.mimeType.includes('image') ? await this.#getOrCreateImageDataUrl() : null;\n    const img = url ? html`<img src=${url} class=\"element-img\"/>` : Lit.nothing;\n\n    // clang-format off\n    Lit.render(html`\n      <style>${baseInsightComponentStyles}</style>\n      <div class=\"image-ref\">\n        ${img}\n        <span class=\"element-img-details\">\n          ${eventRef(this.#request)}\n          <span class=\"element-img-details-size\">${\n            i18n.ByteUtilities.bytesToString(this.#request.args.data.decodedBodyLength ?? 0)\n          }</span>\n        </span>\n      </div>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\nexport function imageRef(request: Trace.Types.Events.SyntheticNetworkRequest): Lit.TemplateResult {\n  return html`\n    <devtools-performance-image-ref\n      .request=${request}\n    ></devtools-performance-image-ref>\n  `;\n}\n\ndeclare global {\n  interface GlobalEventHandlersEventMap {\n    [EventReferenceClick.eventName]: EventReferenceClick;\n  }\n\n  interface HTMLElementTagNameMap {\n    'devtools-performance-event-ref': EventRef;\n    'devtools-performance-image-ref': ImageRef;\n  }\n}\n\ncustomElements.define('devtools-performance-event-ref', EventRef);\ncustomElements.define('devtools-performance-image-ref', ImageRef);\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2024 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\ntable {\n  width: 100%;\n  padding: 5px 0;\n  border-collapse: collapse;\n}\n\nthead {\n  white-space: nowrap;\n}\n\ntable tr > * {\n  text-align: right;\n}\n\ntable tr > *:first-child {\n  text-align: left;\n}\n\ntable.interactive tbody tr {\n  cursor: pointer;\n}\n\ntable.interactive tbody tr:hover,\ntable.interactive tbody tr.hover,\ntable.interactive tbody tr.selected {\n  background-color: var(--sys-color-state-hover-on-subtle);\n}\n\ntable thead th {\n  font: var(--sys-typescale-body4-medium);\n}\n\ntable tbody th {\n  font-weight: normal;\n}\n\ntable th[scope='row'] {\n  padding: 3px 0;\n  word-break: normal;\n  overflow-wrap: anywhere;\n}\n\n.devtools-link {\n  color: var(--sys-color-primary);\n  text-decoration: underline;\n  cursor: pointer;\n  outline-offset: 2px;\n  padding: 0;\n  margin-left: var(--sys-size-3);\n  white-space: nowrap;;\n}\n\nbutton.devtools-link {\n  border: none;\n  background: none;\n  font-family: inherit;\n  font-size: inherit;\n  height: 16px;\n}\n\n/*# sourceURL=${import.meta.resolve('./table.css')} */`;", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\n/**\n * @file A list of pass/fail conditions for an insight.\n */\n\nimport '../../../../ui/components/icon_button/icon_button.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport checklistStyles from './checklist.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Text for a screen-reader label to tell the user that the icon represents a successful insight check\n   * @example {Server response time} PH1\n   */\n  successAriaLabel: 'Insight check passed: {PH1}',\n  /**\n   * @description Text for a screen-reader label to tell the user that the icon represents an unsuccessful insight check\n   * @example {Server response time} PH1\n   */\n  failedAriaLabel: 'Insight check failed: {PH1}',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/Checklist.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst {html} = Lit;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype GenericChecklist = Trace.Insights.Types.Checklist<any>;\n\nexport interface ChecklistData {\n  checklist: GenericChecklist;\n}\n\nexport interface TableDataRow {\n  values: Array<number|string|Lit.LitTemplate>;\n  overlays?: Trace.Types.Overlays.Overlay[];\n}\n\nexport class Checklist extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #checklist?: GenericChecklist;\n\n  set checklist(checklist: GenericChecklist) {\n    this.#checklist = checklist;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  connectedCallback(): void {\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  #getIcon(check: GenericChecklist['']): Lit.TemplateResult {\n    const icon = check.value ? 'check-circle' : 'clear';\n\n    const ariaLabel = check.value ? i18nString(UIStrings.successAriaLabel, {PH1: check.label}) :\n                                    i18nString(UIStrings.failedAriaLabel, {PH1: check.label});\n    return html`\n        <devtools-icon\n          aria-label=${ariaLabel}\n          name=${icon}\n          class=${check.value ? 'check-passed' : 'check-failed'}\n        ></devtools-icon>\n      `;\n  }\n\n  async #render(): Promise<void> {\n    if (!this.#checklist) {\n      return;\n    }\n\n    Lit.render(\n        html`\n          <style>${checklistStyles}</style>\n          <ul>\n            ${Object.values(this.#checklist).map(check => html`<li>\n                ${this.#getIcon(check)}\n                <span data-checklist-label>${check.label}</span>\n            </li>`)}\n          </ul>`,\n        this.#shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-checklist': Checklist;\n  }\n}\n\ncustomElements.define('devtools-performance-checklist', Checklist);\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2025 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\nul {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n\n  li {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    gap: var(--sys-size-3);\n    font: var(--sys-typescale-body4-medium);\n    padding-block: var(--sys-size-3);\n\n    span {\n      /* push the text down to align slightly better with the icons */\n      padding-top: 2px;\n    }\n  }\n}\n\n.check-failed {\n  color: var(--app-color-performance-bad);\n}\n\n.check-passed {\n  color: var(--app-color-performance-good);\n}\n\n/*# sourceURL=${import.meta.resolve('./checklist.css')} */`;", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './NodeLink.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {CLSCulpritsInsightModel} from '../../../../models/trace/insights/CLSCulprits.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {EventReferenceClick} from './EventRef.js';\nimport type * as NodeLink from './NodeLink.js';\n\nconst {UIStrings, i18nString} = Trace.Insights.Models.CLSCulprits;\n\nconst {html} = Lit;\n\nexport class CLSCulprits extends BaseInsightComponent<CLSCulpritsInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-cls-culprits`;\n  override internalName = 'cls-culprits';\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  override createOverlays(): Trace.Types.Overlays.Overlay[] {\n    if (!this.model) {\n      return [];\n    }\n\n    return this.model.createOverlays?.() ?? [];\n  }\n\n  #clickEvent(event: Trace.Types.Events.Event): void {\n    this.dispatchEvent(new EventReferenceClick(event));\n  }\n\n  #renderCulpritsSection(culprits: Trace.Insights.Models.CLSCulprits.LayoutShiftItem[]): Lit.LitTemplate {\n    if (culprits.length === 0) {\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.noCulprits)}</div>`;\n    }\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        <p class=\"list-title\">${i18nString(UIStrings.topCulprits)}:</p>\n        <ul class=\"worst-culprits\">\n          ${culprits.map(culprit => {\n            if (culprit.type === Trace.Insights.Models.CLSCulprits.LayoutShiftType.UNSIZED_IMAGE) {\n              return html`\n                <li>\n                  ${culprit.description}\n                  <devtools-performance-node-link\n                    .data=${{\n                      backendNodeId: culprit.backendNodeId,\n                      frame: culprit.frame,\n                      fallbackUrl: culprit.url,\n                    } as NodeLink.NodeLinkData}>\n                  </devtools-performance-node-link>\n                </li>`;\n            }\n\n            return html `<li>${culprit.description}</li>`;\n          })}\n        </ul>\n      </div>`;\n    // clang-format on\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model || !this.bounds) {\n      return Lit.nothing;\n    }\n\n    if (!this.model.clusters.length || !this.model.worstCluster) {\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.noLayoutShifts)}</div>`;\n    }\n\n    const worstCluster = this.model.worstCluster;\n    const culprits = this.model.topCulpritsByCluster.get(worstCluster) ?? [];\n\n    const ts = Trace.Types.Timing.Micro(worstCluster.ts - this.bounds.min);\n    const clusterTs = i18n.TimeUtilities.formatMicroSecondsTime(ts);\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        <span class=\"worst-cluster\">${i18nString(UIStrings.worstCluster)}: <button type=\"button\" class=\"timeline-link\" @click=${() => this.#clickEvent(worstCluster)}>${i18nString(UIStrings.layoutShiftCluster, {PH1: clusterTs})}</button></span>\n      </div>\n      ${this.#renderCulpritsSection(culprits)}\n    `;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-cls-culprits': CLSCulprits;\n  }\n}\n\ncustomElements.define('devtools-performance-cls-culprits', CLSCulprits);\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\n// TODO: move to ui/components/node_link?\n\nimport * as Common from '../../../../core/common/common.js';\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../../generated/protocol.js';\nimport * as Buttons from '../../../../ui/components/buttons/buttons.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as LegacyComponents from '../../../../ui/legacy/components/utils/utils.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nconst {html} = Lit;\n\nexport interface NodeLinkData {\n  backendNodeId: Protocol.DOM.BackendNodeId;\n  frame: string;\n  options?: Common.Linkifier.Options;\n  /**\n   * URL to display if backendNodeId cannot be resolved (ie for traces loaded from disk).\n   * Will be given to linkifyURL. Use this or one of the other fallback fields.\n   */\n  fallbackUrl?: Platform.DevToolsPath.UrlString;\n  /**\n   * Text to display if backendNodeId cannot be resolved (ie for traces loaded from disk).\n   * Displayed as monospace code.\n   */\n  fallbackHtmlSnippet?: string;\n  /**\n   * Text to display if backendNodeId cannot be resolved (ie for traces loaded from disk).\n   * Displayed as plain text.\n   */\n  fallbackText?: string;\n}\n\nexport class NodeLink extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #backendNodeId?: Protocol.DOM.BackendNodeId;\n  #frame?: string;\n  #options?: Common.Linkifier.Options;\n  #fallbackUrl?: Platform.DevToolsPath.UrlString;\n  #fallbackHtmlSnippet?: string;\n  #fallbackText?: string;\n  /**\n   * Track the linkified Node for a given backend NodeID to avoid repeated lookups on re-render.\n   * Also tracks if we fail to resolve a node, to ensure we don't try on each subsequent re-render.\n   */\n  #linkifiedNodeForBackendId = new Map<Protocol.DOM.BackendNodeId, Node|'NO_NODE_FOUND'>();\n\n  set data(data: NodeLinkData) {\n    this.#backendNodeId = data.backendNodeId;\n    this.#frame = data.frame;\n    this.#options = data.options;\n    this.#fallbackUrl = data.fallbackUrl;\n    this.#fallbackHtmlSnippet = data.fallbackHtmlSnippet;\n    this.#fallbackText = data.fallbackText;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  async #linkify(): Promise<Node|undefined> {\n    if (this.#backendNodeId === undefined) {\n      return;\n    }\n    const fromCache = this.#linkifiedNodeForBackendId.get(this.#backendNodeId);\n    if (fromCache) {\n      if (fromCache === 'NO_NODE_FOUND') {\n        return undefined;\n      }\n      return fromCache;\n    }\n\n    const target = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    const domModel = target?.model(SDK.DOMModel.DOMModel);\n    if (!domModel) {\n      return undefined;\n    }\n    const domNodesMap = await domModel.pushNodesByBackendIdsToFrontend(new Set([this.#backendNodeId]));\n    const node = domNodesMap?.get(this.#backendNodeId);\n    if (!node) {\n      this.#linkifiedNodeForBackendId.set(this.#backendNodeId, 'NO_NODE_FOUND');\n      return;\n    }\n\n    if (node.frameId() !== this.#frame) {\n      this.#linkifiedNodeForBackendId.set(this.#backendNodeId, 'NO_NODE_FOUND');\n      return;\n    }\n\n    // TODO: it'd be nice if we could specify what attributes to render,\n    // ex for the Viewport insight: <meta content=\"...\"> (instead of just <meta>)\n    const linkedNode = await Common.Linkifier.Linkifier.linkify(node, this.#options);\n    this.#linkifiedNodeForBackendId.set(this.#backendNodeId, linkedNode);\n    return linkedNode;\n  }\n\n  async #render(): Promise<void> {\n    const relatedNodeEl = await this.#linkify();\n\n    let template;\n    if (relatedNodeEl) {\n      template = html`<div class='node-link'>${relatedNodeEl}</div>`;\n    } else if (this.#fallbackUrl) {\n      const MAX_URL_LENGTH = 20;\n      const options = {\n        tabStop: true,\n        showColumnNumber: false,\n        inlineFrameIndex: 0,\n        maxLength: MAX_URL_LENGTH,\n      };\n      const linkEl = LegacyComponents.Linkifier.Linkifier.linkifyURL(this.#fallbackUrl, options);\n      template = html`<div class='node-link'>\n        <style>${Buttons.textButtonStyles}</style>\n        ${linkEl}\n      </div>`;\n    } else if (this.#fallbackHtmlSnippet) {\n      // TODO: Use CodeHighlighter.\n      template = html`<pre style='text-wrap: auto'>${this.#fallbackHtmlSnippet}</pre>`;\n    } else if (this.#fallbackText) {\n      template = html`<span>${this.#fallbackText}</span>`;\n    } else {\n      template = Lit.nothing;\n    }\n\n    Lit.render(template, this.#shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-node-link': NodeLink;\n  }\n}\n\ncustomElements.define('devtools-performance-node-link', NodeLink);\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Checklist.js';\n\nimport type {DocumentLatencyInsightModel} from '../../../../models/trace/insights/DocumentLatency.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\n\nconst {html} = Lit;\n\nexport class DocumentLatency extends BaseInsightComponent<DocumentLatencyInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-document-latency`;\n  override internalName = 'document-latency';\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  override getEstimatedSavingsTime(): Trace.Types.Timing.Milli|null {\n    return this.model?.metricSavings?.FCP ?? null;\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model?.data) {\n      return Lit.nothing;\n    }\n\n    // clang-format off\n    return html`<devtools-performance-checklist .checklist=${this.model.data.checklist}></devtools-performance-checklist>`;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-document-latency': DocumentLatency;\n  }\n}\n\ncustomElements.define('devtools-performance-document-latency', DocumentLatency);\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../../ui/components/icon_button/icon_button.js';\nimport './Table.js';\nimport './NodeLink.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {DOMSizeInsightModel} from '../../../../models/trace/insights/DOMSize.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {eventRef} from './EventRef.js';\nimport {md} from './Helpers.js';\nimport type * as NodeLink from './NodeLink.js';\nimport type {TableData, TableDataRow} from './Table.js';\n\nconst {UIStrings, i18nString} = Trace.Insights.Models.DOMSize;\n\nconst {html} = Lit;\n\nexport class DOMSize extends BaseInsightComponent<DOMSizeInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-dom-size`;\n  override internalName = 'dom-size';\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  #renderNodeTable(domStatsData: Trace.Types.Events.DOMStats['args']['data']): Lit.LitTemplate {\n    const rows: TableData['rows'] = [];\n\n    if (domStatsData.maxDepth) {\n      const {nodeId, nodeName} = domStatsData.maxDepth;\n      // clang-format off\n      const template = html`\n        <devtools-performance-node-link\n          .data=${{\n            backendNodeId: nodeId,\n            frame: domStatsData.frame,\n            fallbackText: nodeName,\n          } as NodeLink.NodeLinkData}>\n        </devtools-performance-node-link>\n      `;\n      // clang-format on\n      rows.push({values: [i18nString(UIStrings.maxDOMDepth), template]});\n    }\n\n    if (domStatsData.maxChildren) {\n      const {nodeId, nodeName} = domStatsData.maxChildren;\n      // clang-format off\n      const template = html`\n        <devtools-performance-node-link\n          .data=${{\n            backendNodeId: nodeId,\n            frame: domStatsData.frame,\n            fallbackText: nodeName,\n          } as NodeLink.NodeLinkData}>\n        </devtools-performance-node-link>\n      `;\n      // clang-format on\n      rows.push({values: [i18nString(UIStrings.maxChildren), template]});\n    }\n\n    if (!rows.length) {\n      return Lit.nothing;\n    }\n\n    // clang-format off\n    return html`<div class=\"insight-section\">\n      <devtools-performance-table\n        .data=${{\n          insight: this,\n          headers: [i18nString(UIStrings.statistic), i18nString(UIStrings.element)],\n          rows,\n        } as TableData}>\n      </devtools-performance-table>\n    </div>`;\n    // clang-format on\n  }\n\n  #renderLargeUpdatesTable(): Lit.LitTemplate|null {\n    if (!this.model || !this.model.largeUpdates.length) {\n      return null;\n    }\n\n    const rows: TableDataRow[] = this.model.largeUpdates.map(update => {\n      return {\n        values: [eventRef(update.event, {text: update.label}), i18n.TimeUtilities.millisToString(update.duration)],\n        overlays: [{\n          type: 'ENTRY_OUTLINE',\n          entry: update.event,\n          outlineReason: 'INFO',\n        }],\n      };\n    });\n\n    // clang-format off\n    return html`<div class=\"insight-section\">\n      <div class=\"insight-description\">${md(i18nString(UIStrings.topUpdatesDescription))}</div>\n      <devtools-performance-table\n        .data=${{\n          insight: this,\n          headers: ['', i18nString(UIStrings.duration)],\n          rows,\n        } as TableData}>\n      </devtools-performance-table>\n    </div>`;\n    // clang-format on\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const domStatsData = this.model.maxDOMStats?.args.data;\n    if (!domStatsData) {\n      return Lit.nothing;\n    }\n\n    // clang-format off\n    return html`<div class=\"insight-section\">\n      <devtools-performance-table\n        .data=${{\n          insight: this,\n          headers: [i18nString(UIStrings.statistic), i18nString(UIStrings.value)],\n          rows: [\n            {values: [i18nString(UIStrings.totalElements), domStatsData.totalElements]},\n            {values: [i18nString(UIStrings.maxDOMDepth), domStatsData.maxDepth?.depth ?? 0]},\n            {values: [i18nString(UIStrings.maxChildren), domStatsData.maxChildren?.numChildren ?? 0]},\n          ],\n        } as TableData}>\n      </devtools-performance-table>\n    </div>\n    ${this.#renderNodeTable(domStatsData)}\n    ${this.#renderLargeUpdatesTable()}\n    `;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-dom-size': DOMSize;\n  }\n}\n\ncustomElements.define('devtools-performance-dom-size', DOMSize);\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {DuplicatedJavaScriptInsightModel} from '../../../../models/trace/insights/DuplicatedJavaScript.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Buttons from '../../../../ui/components/buttons/buttons.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../../ui/visual_logging/visual_logging.js';\nimport * as Utils from '../../utils/utils.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {scriptRef} from './ScriptRef.js';\nimport type {TableData, TableDataRow} from './Table.js';\n\nconst {UIStrings, i18nString} = Trace.Insights.Models.DuplicatedJavaScript;\n\nconst {html} = Lit;\n\nexport class DuplicatedJavaScript extends BaseInsightComponent<DuplicatedJavaScriptInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-duplicated-javascript`;\n  override internalName = 'duplicated-javascript';\n  #treemapData: Utils.Treemap.TreemapData|null = null;\n\n  #shouldShowTreemap(): boolean {\n    if (!this.model) {\n      return false;\n    }\n\n    return this.model.scripts.some(script => !!script.url);\n  }\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  #openTreemap(): void {\n    if (!this.model) {\n      return;\n    }\n\n    if (!this.#treemapData) {\n      this.#treemapData = Utils.Treemap.createTreemapData({scripts: this.model.scripts}, this.model.duplication);\n    }\n\n    const windowNameSuffix = this.insightSetKey ?? 'devtools';\n    Utils.Treemap.openTreemap(this.#treemapData, this.model.mainDocumentUrl, windowNameSuffix);\n  }\n\n  override getEstimatedSavingsTime(): Trace.Types.Timing.Milli|null {\n    return this.model?.metricSavings?.FCP ?? null;\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const rows: TableDataRow[] =\n        [...this.model.duplicationGroupedByNodeModules.entries()].slice(0, 10).map(([source, data]) => {\n          const scriptToOverlay = new Map();\n          for (const {script} of data.duplicates) {\n            scriptToOverlay.set(script, {\n              type: 'ENTRY_OUTLINE',\n              entry: script.request,\n              outlineReason: 'ERROR',\n            });\n          }\n\n          return {\n            values: [source, i18n.ByteUtilities.bytesToString(data.estimatedDuplicateBytes)],\n            overlays: [...scriptToOverlay.values()],\n            subRows: data.duplicates.map(({script, attributedSize}, index) => {\n              let overlays: Trace.Types.Overlays.Overlay[]|undefined;\n              const overlay = scriptToOverlay.get(script);\n              if (overlay) {\n                overlays = [overlay];\n              }\n\n              return {\n                values: [\n                  scriptRef(script),\n                  index === 0 ? '--' : i18n.ByteUtilities.bytesToString(attributedSize),\n                ],\n                overlays,\n              };\n            })\n          };\n        });\n\n    let treemapButton;\n    if (this.#shouldShowTreemap()) {\n      treemapButton = html`<devtools-button\n        .variant=${Buttons.Button.Variant.OUTLINED}\n        jslog=${VisualLogging.action(`timeline.treemap.${this.internalName}-insight`).track({\n        click: true\n      })}\n        @click=${this.#openTreemap}\n      >View Treemap</devtools-button>`;\n    }\n\n    // clang-format off\n    return html`\n      ${treemapButton}\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.columnSource), i18nString(UIStrings.columnDuplicatedBytes)],\n            rows,\n          } as TableData}>\n        </devtools-performance-table>\n      </div>\n    `;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-duplicated-javascript': DuplicatedJavaScript;\n  }\n}\n\ncustomElements.define('devtools-performance-duplicated-javascript', DuplicatedJavaScript);\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../../core/platform/platform.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport type * as Lit from '../../../../ui/lit/lit.js';\nimport * as TimelineUtils from '../../utils/utils.js';\n\nimport {eventRef} from './EventRef.js';\n\nexport function scriptRef(script: Trace.Handlers.ModelHandlers.Scripts.Script): Lit.TemplateResult|string {\n  // The happy path is that we have a network request associated with this script.\n  if (script.request) {\n    if (script.inline) {\n      return eventRef(script.request, {\n        text: `(inline) ${Platform.StringUtilities.trimEndWithMaxLength(script.content ?? '', 15)}`,\n      });\n    }\n\n    return eventRef(script.request);\n  }\n\n  if (script.url) {\n    try {\n      const parsedUrl = new URL(script.url);\n      return TimelineUtils.Helpers.shortenUrl(parsedUrl);\n    } catch {\n    }\n  }\n\n  if (script.inline) {\n    return `(inline) ${Platform.StringUtilities.trimEndWithMaxLength(script.content ?? '', 15)}`;\n  }\n\n  return `script id: ${script.scriptId}`;\n}\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {FontDisplayInsightModel} from '../../../../models/trace/insights/FontDisplay.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {eventRef} from './EventRef.js';\nimport {createLimitedRows, renderOthersLabel, type TableData, type TableDataRow} from './Table.js';\n\nconst {UIStrings, i18nString} = Trace.Insights.Models.FontDisplay;\n\nconst {html} = Lit;\n\nexport class FontDisplay extends BaseInsightComponent<FontDisplayInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-font-display`;\n  override internalName = 'font-display';\n  #overlayForRequest = new Map<Trace.Types.Events.Event, Trace.Types.Overlays.Overlay>();\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  protected override createOverlays(): Trace.Types.Overlays.Overlay[] {\n    this.#overlayForRequest.clear();\n\n    if (!this.model) {\n      return [];\n    }\n\n    const overlays = this.model.createOverlays?.();\n    if (!overlays) {\n      return [];\n    }\n\n    for (const overlay of overlays.filter(overlay => overlay.type === 'ENTRY_OUTLINE')) {\n      this.#overlayForRequest.set(overlay.entry, overlay);\n    }\n\n    return overlays;\n  }\n\n  mapToRow(font: Trace.Insights.Models.FontDisplay.RemoteFont): TableDataRow {\n    const overlay = this.#overlayForRequest.get(font.request);\n    return {\n      values: [\n        eventRef(font.request, {text: font.name}),\n        i18n.TimeUtilities.millisToString(font.wastedTime),\n      ],\n      overlays: overlay ? [overlay] : [],\n    };\n  }\n\n  createAggregatedTableRow(remaining: Trace.Insights.Models.FontDisplay.RemoteFont[]): TableDataRow {\n    return {\n      values: [renderOthersLabel(remaining.length), ''],\n      overlays: remaining.map(r => this.#overlayForRequest.get(r.request)).filter(o => !!o),\n    };\n  }\n\n  override getEstimatedSavingsTime(): Trace.Types.Timing.Milli|null {\n    return this.model?.metricSavings?.FCP ?? null;\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const rows = createLimitedRows(this.model.fonts, this);\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        ${html`<devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.fontColumn), i18nString(UIStrings.wastedTimeColumn)],\n            rows,\n          } as TableData}>\n        </devtools-performance-table>`}\n      </div>`;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-font-display': FontDisplay;\n  }\n}\n\ncustomElements.define('devtools-performance-font-display', FontDisplay);\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport type * as Protocol from '../../../../generated/protocol.js';\nimport type {ForcedReflowInsightModel} from '../../../../models/trace/insights/ForcedReflow.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as LegacyComponents from '../../../../ui/legacy/components/utils/utils.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {createLimitedRows, renderOthersLabel, type TableData, type TableDataRow} from './Table.js';\n\nconst {UIStrings, i18nString, createOverlayForEvents} = Trace.Insights.Models.ForcedReflow;\n\nconst {html, nothing} = Lit;\n\nexport class ForcedReflow extends BaseInsightComponent<ForcedReflowInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-forced-reflow`;\n  override internalName = 'forced-reflow';\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  mapToRow(data: Trace.Insights.Models.ForcedReflow.BottomUpCallStack): TableDataRow {\n    return {\n      values: [this.#linkifyUrl(data.bottomUpData)],\n      overlays: createOverlayForEvents(data.relatedEvents),\n    };\n  }\n\n  createAggregatedTableRow(remaining: Trace.Insights.Models.ForcedReflow.BottomUpCallStack[]): TableDataRow {\n    return {\n      values: [renderOthersLabel(remaining.length)],\n      overlays: remaining.flatMap(r => createOverlayForEvents(r.relatedEvents)),\n    };\n  }\n\n  #linkifyUrl(callFrame: Trace.Types.Events.CallFrame|Protocol.Runtime.CallFrame|null): Lit.LitTemplate {\n    const style = 'display: flex; gap: 4px; padding: 4px 0; overflow: hidden; white-space: nowrap';\n    if (!callFrame) {\n      return html`<div style=${style}>${i18nString(UIStrings.unattributed)}</div>`;\n    }\n\n    const linkifier = new LegacyComponents.Linkifier.Linkifier();\n    const location = linkifier.linkifyScriptLocation(\n        null, callFrame.scriptId as Protocol.Runtime.ScriptId, callFrame.url as Platform.DevToolsPath.UrlString,\n        callFrame.lineNumber, {\n          columnNumber: callFrame.columnNumber,\n          showColumnNumber: true,\n          inlineFrameIndex: 0,\n          tabStop: true,\n        });\n\n    if (location instanceof HTMLElement) {\n      location.style.maxWidth = 'max-content';\n      location.style.overflow = 'hidden';\n      location.style.textOverflow = 'ellipsis';\n      location.style.whiteSpace = 'normal';\n      location.style.verticalAlign = 'top';\n      location.style.textAlign = 'left';\n      location.style.flex = '1';\n    }\n\n    const functionName = callFrame.functionName || i18nString(UIStrings.anonymous);\n    return html`<div style=${style}>${functionName}<span> @ </span> ${location}</div>`;\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const topLevelFunctionCallData = this.model.topLevelFunctionCallData;\n    const bottomUpCallStackData = this.model.aggregatedBottomUpData;\n    const time = (us: Trace.Types.Timing.Micro): string =>\n        i18n.TimeUtilities.millisToString(Platform.Timing.microSecondsToMilliSeconds(us));\n\n    const rows = createLimitedRows(bottomUpCallStackData, this);\n\n    // clang-format off\n    return html`\n      ${topLevelFunctionCallData ? html`\n        <div class=\"insight-section\">\n          <devtools-performance-table\n            .data=${{\n              insight: this,\n              headers: [i18nString(UIStrings.topTimeConsumingFunctionCall), i18nString(UIStrings.totalReflowTime)],\n              rows: [{\n                values: [\n                  this.#linkifyUrl(topLevelFunctionCallData.topLevelFunctionCall),\n                  time(Trace.Types.Timing.Micro(topLevelFunctionCallData.totalReflowTime)),\n                ],\n                overlays: createOverlayForEvents(topLevelFunctionCallData.topLevelFunctionCallEvents, 'INFO'),\n              }],\n            } as TableData}>\n          </devtools-performance-table>\n        </div>\n      ` : nothing}\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.relatedStackTrace)],\n            rows,\n        } as TableData}>\n        </devtools-performance-table>\n      </div>`;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-forced-reflow': ForcedReflow;\n  }\n}\n\ncustomElements.define('devtools-performance-forced-reflow', ForcedReflow);\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../../ui/components/icon_button/icon_button.js';\n\nimport type {ImageDeliveryInsightModel} from '../../../../models/trace/insights/ImageDelivery.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {imageRef} from './EventRef.js';\nimport {createLimitedRows, renderOthersLabel, type TableDataRow} from './Table.js';\n\nconst {UIStrings, i18nString, createOverlayForRequest} = Trace.Insights.Models.ImageDelivery;\n\nconst {html} = Lit;\n\nexport class ImageDelivery extends BaseInsightComponent<ImageDeliveryInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-image-delivery`;\n  override internalName = 'image-delivery';\n\n  mapToRow(image: Trace.Insights.Models.ImageDelivery.OptimizableImage): TableDataRow {\n    return {\n      values: [imageRef(image.request)],\n      overlays: [createOverlayForRequest(image.request)],\n    };\n  }\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  createAggregatedTableRow(remaining: Trace.Insights.Models.ImageDelivery.OptimizableImage[]): TableDataRow {\n    return {\n      values: [renderOthersLabel(remaining.length)],\n      overlays: remaining.map(r => createOverlayForRequest(r.request)),\n    };\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const optimizableImages = [...this.model.optimizableImages];\n\n    const topImages =\n        optimizableImages.sort((a, b) => b.request.args.data.decodedBodyLength - a.request.args.data.decodedBodyLength);\n\n    const rows = createLimitedRows(topImages, this);\n\n    if (!rows.length) {\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.noOptimizableImages)}</div>`;\n    }\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.optimizeFile)],\n            rows,\n          }}>\n        </devtools-performance-table>\n      </div>\n    `;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-image-delivery': ImageDelivery;\n  }\n}\n\ncustomElements.define('devtools-performance-image-delivery', ImageDelivery);\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport type {INPBreakdownInsightModel} from '../../../../models/trace/insights/INPBreakdown.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\n\nconst {UIStrings, i18nString, createOverlaysForSubpart} = Trace.Insights.Models.INPBreakdown;\n\nconst {html} = Lit;\n\nexport class INPBreakdown extends BaseInsightComponent<INPBreakdownInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-inp-breakdown`;\n  override internalName = 'inp';\n\n  protected override hasAskAiSupport(): boolean {\n    return this.model?.longestInteractionEvent !== undefined;\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    const event = this.model?.longestInteractionEvent;\n    if (!event) {\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.noInteractions)}</div>`;\n    }\n\n    const time = (us: Trace.Types.Timing.Micro): string =>\n        i18n.TimeUtilities.millisToString(Platform.Timing.microSecondsToMilliSeconds(us));\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        ${html`<devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.subpart), i18nString(UIStrings.duration)],\n            rows: [\n              {\n                values: [i18nString(UIStrings.inputDelay), time(event.inputDelay)],\n                overlays: createOverlaysForSubpart(event, 0),\n              },\n              {\n                values: [i18nString(UIStrings.processingDuration), time(event.mainThreadHandling)],\n                overlays: createOverlaysForSubpart(event, 1),\n              },\n              {\n                values: [i18nString(UIStrings.presentationDelay), time(event.presentationDelay)],\n                overlays: createOverlaysForSubpart(event, 2),\n              },\n            ],\n          }}>\n        </devtools-performance-table>`}\n      </div>`;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-inp-breakdown': INPBreakdown;\n  }\n}\n\ncustomElements.define('devtools-performance-inp-breakdown', INPBreakdown);\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {LCPBreakdownInsightModel} from '../../../../models/trace/insights/LCPBreakdown.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport type {TableData} from './Table.js';\n\nconst {UIStrings, i18nString} = Trace.Insights.Models.LCPBreakdown;\n\nconst {html} = Lit;\n\nexport class LCPBreakdown extends BaseInsightComponent<LCPBreakdownInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-lcp-breakdown`;\n  override internalName = 'lcp-by-phase';\n  #overlay: Trace.Types.Overlays.TimespanBreakdown|null = null;\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  protected override createOverlays(): Trace.Types.Overlays.Overlay[] {\n    this.#overlay = null;\n\n    if (!this.model || !this.model.subparts || !this.model.lcpTs) {\n      return [];\n    }\n\n    const overlays = this.model.createOverlays?.();\n    if (!overlays) {\n      return [];\n    }\n\n    this.#overlay = overlays[0] as Trace.Types.Overlays.TimespanBreakdown;\n    return overlays;\n  }\n\n  #renderFieldSubparts(): Lit.LitTemplate|null {\n    if (!this.fieldMetrics) {\n      return null;\n    }\n\n    const {ttfb, loadDelay, loadDuration, renderDelay} = this.fieldMetrics.lcpBreakdown;\n    if (!ttfb || !loadDelay || !loadDuration || !renderDelay) {\n      return null;\n    }\n\n    const ttfbMillis = i18n.TimeUtilities.preciseMillisToString(Trace.Helpers.Timing.microToMilli(ttfb.value));\n    const loadDelayMillis =\n        i18n.TimeUtilities.preciseMillisToString(Trace.Helpers.Timing.microToMilli(loadDelay.value));\n    const loadDurationMillis =\n        i18n.TimeUtilities.preciseMillisToString(Trace.Helpers.Timing.microToMilli(loadDuration.value));\n    const renderDelayMillis =\n        i18n.TimeUtilities.preciseMillisToString(Trace.Helpers.Timing.microToMilli(renderDelay.value));\n\n    const rows = [\n      {values: [i18nString(UIStrings.timeToFirstByte), ttfbMillis]},\n      {values: [i18nString(UIStrings.resourceLoadDelay), loadDelayMillis]},\n      {values: [i18nString(UIStrings.resourceLoadDuration), loadDurationMillis]},\n      {values: [i18nString(UIStrings.elementRenderDelay), renderDelayMillis]},\n    ];\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.subpart), i18nString(UIStrings.fieldDuration)],\n            rows,\n          } as TableData}>\n        </devtools-performance-table>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  override toggleTemporaryOverlays(\n      overlays: Trace.Types.Overlays.Overlay[]|null, options: Overlays.Overlays.TimelineOverlaySetOptions): void {\n    super.toggleTemporaryOverlays(overlays, {...options, updateTraceWindowPercentage: 0});\n  }\n\n  override getOverlayOptionsForInitialOverlays(): Overlays.Overlays.TimelineOverlaySetOptions {\n    return {updateTraceWindow: true, updateTraceWindowPercentage: 0};\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const {subparts} = this.model;\n\n    if (!subparts) {\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.noLcp)}</div>`;\n    }\n\n    const rows = Object.values(subparts).map((subpart: Trace.Insights.Models.LCPBreakdown.Subpart) => {\n      const section = this.#overlay?.sections.find(section => subpart.label === section.label);\n      const timing = Trace.Helpers.Timing.microToMilli(subpart.range);\n      return {\n        values: [subpart.label, i18n.TimeUtilities.preciseMillisToString(timing)],\n        overlays: section && [{\n                    type: 'TIMESPAN_BREAKDOWN',\n                    sections: [section],\n                  }],\n      };\n    });\n\n    // clang-format off\n    const sections: Lit.LitTemplate[] = [html`\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.subpart), i18nString(UIStrings.duration)],\n            rows,\n          } as TableData}>\n        </devtools-performance-table>\n      </div>`\n    ];\n    // clang-format on\n\n    const fieldDataSection = this.#renderFieldSubparts();\n    if (fieldDataSection) {\n      sections.push(fieldDataSection);\n    }\n\n    return html`${sections}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-lcp-breakdown': LCPBreakdown;\n  }\n}\n\ncustomElements.define('devtools-performance-lcp-breakdown', LCPBreakdown);\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport './Checklist.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {LCPDiscoveryInsightModel} from '../../../../models/trace/insights/LCPDiscovery.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {imageRef} from './EventRef.js';\n\nconst {UIStrings, i18nString, getImageData} = Trace.Insights.Models.LCPDiscovery;\n\nconst {html} = Lit;\n\n// eslint-disable-next-line rulesdir/l10n-filename-matches\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/LCPDiscovery.ts', UIStrings);\n\nexport class LCPDiscovery extends BaseInsightComponent<LCPDiscoveryInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-lcp-discovery`;\n  override internalName = 'lcp-discovery';\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  protected override createOverlays(): Trace.Types.Overlays.Overlay[] {\n    if (!this.model) {\n      return [];\n    }\n\n    const overlays = this.model.createOverlays?.();\n    if (!overlays) {\n      return [];\n    }\n\n    const imageResults = getImageData(this.model);\n    if (!imageResults?.discoveryDelay) {\n      return [];\n    }\n\n    const timespanOverlaySection = overlays.find(overlay => overlay.type === 'TIMESPAN_BREAKDOWN')?.sections[0];\n    if (timespanOverlaySection) {\n      timespanOverlaySection.label = this.#renderDiscoveryDelay(imageResults.discoveryDelay);\n    }\n\n    return overlays;\n  }\n\n  override getEstimatedSavingsTime(): Trace.Types.Timing.Milli|null {\n    if (!this.model) {\n      return null;\n    }\n\n    return getImageData(this.model)?.estimatedSavings ?? null;\n  }\n\n  #renderDiscoveryDelay(delay: Trace.Types.Timing.Micro): HTMLElement {\n    const timeWrapper = document.createElement('span');\n    timeWrapper.classList.add('discovery-time-ms');\n    timeWrapper.innerText = i18n.TimeUtilities.formatMicroSecondsAsMillisFixed(delay);\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.lcpLoadDelay, {PH1: timeWrapper});\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const imageData = getImageData(this.model);\n    if (!imageData) {\n      if (!this.model.lcpEvent) {\n        return html`<div class=\"insight-section\">${i18nString(UIStrings.noLcp)}</div>`;\n      }\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.noLcpResource)}</div>`;\n    }\n\n    let delayEl;\n    if (imageData.discoveryDelay) {\n      delayEl = html`<div>${this.#renderDiscoveryDelay(imageData.discoveryDelay)}</div>`;\n    }\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        <devtools-performance-checklist class=\"insight-section\" .checklist=${imageData.checklist}></devtools-performance-checklist>\n        <div class=\"insight-section\">${imageRef(imageData.request)}${delayEl}</div>\n      </div>`;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-lcp-discovery': LCPDiscovery;\n  }\n}\n\ncustomElements.define('devtools-performance-lcp-discovery', LCPDiscovery);\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as Bindings from '../../../../models/bindings/bindings.js';\nimport type {\n  LegacyJavaScriptInsightModel, PatternMatchResult} from '../../../../models/trace/insights/LegacyJavaScript.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {scriptRef} from './ScriptRef.js';\nimport type {TableData, TableDataRow} from './Table.js';\n\nconst {UIStrings, i18nString} = Trace.Insights.Models.LegacyJavaScript;\n\nconst {html} = Lit;\n\nexport class LegacyJavaScript extends BaseInsightComponent<LegacyJavaScriptInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-legacy-javascript`;\n  override internalName = 'legacy-javascript';\n\n  override getEstimatedSavingsTime(): Trace.Types.Timing.Milli|null {\n    return this.model?.metricSavings?.FCP ?? null;\n  }\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  async #revealLocation(script: Trace.Handlers.ModelHandlers.Scripts.Script, match: PatternMatchResult): Promise<void> {\n    const target = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    if (!target) {\n      return;\n    }\n\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    if (!debuggerModel) {\n      return;\n    }\n\n    const location = new SDK.DebuggerModel.Location(debuggerModel, script.scriptId, match.line, match.column);\n    if (!location) {\n      return;\n    }\n\n    const uiLocation =\n        await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().rawLocationToUILocation(location);\n    await Common.Revealer.reveal(uiLocation);\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const rows: TableDataRow[] =\n        [...this.model.legacyJavaScriptResults.entries()].slice(0, 10).map(([script, result]) => {\n          const overlays: Trace.Types.Overlays.Overlay[] = [];\n          if (script.request) {\n            overlays.push({\n              type: 'ENTRY_OUTLINE',\n              entry: script.request,\n              outlineReason: 'ERROR',\n            });\n          }\n\n          return {\n            values: [scriptRef(script), i18n.ByteUtilities.bytesToString(result.estimatedByteSavings)],\n            overlays,\n            subRows: result.matches.map(match => {\n              return {\n                values: [html`<span @click=${\n                    () => this.#revealLocation(\n                        script, match)} title=${`${script.url}:${match.line}:${match.column}`}>${match.name}</span>`],\n              };\n            })\n          };\n        });\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.columnScript), i18nString(UIStrings.columnWastedBytes)],\n            rows,\n          } as TableData}>\n        </devtools-performance-table>\n      </div>\n    `;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-legacy-javascript': LegacyJavaScript;\n  }\n}\n\ncustomElements.define('devtools-performance-legacy-javascript', LegacyJavaScript);\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport type {ModernHTTPInsightModel} from '../../../../models/trace/insights/ModernHTTP.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {eventRef} from './EventRef.js';\nimport {createLimitedRows, renderOthersLabel, type TableData, type TableDataRow} from './Table.js';\n\nconst {UIStrings, i18nString, createOverlayForRequest} = Trace.Insights.Models.ModernHTTP;\n\nconst {html} = Lit;\n\nexport class ModernHTTP extends BaseInsightComponent<ModernHTTPInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-modern-http`;\n  override internalName = 'modern-http';\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  override getEstimatedSavingsTime(): Trace.Types.Timing.Milli|null {\n    return this.model?.metricSavings?.LCP ?? null;\n  }\n\n  override createOverlays(): Trace.Types.Overlays.Overlay[] {\n    return this.model?.http1Requests.map(req => createOverlayForRequest(req)) ?? [];\n  }\n\n  mapToRow(req: Trace.Types.Events.SyntheticNetworkRequest): TableDataRow {\n    return {values: [eventRef(req), req.args.data.protocol], overlays: [createOverlayForRequest(req)]};\n  }\n\n  createAggregatedTableRow(remaining: Trace.Types.Events.SyntheticNetworkRequest[]): TableDataRow {\n    return {\n      values: [renderOthersLabel(remaining.length), ''],\n      overlays: remaining.map(req => createOverlayForRequest(req)),\n    };\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const rows = createLimitedRows(this.model.http1Requests, this);\n\n    if (!rows.length) {\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.noOldProtocolRequests)}</div>`;\n    }\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.request), i18nString(UIStrings.protocol)],\n            rows,\n          } as TableData}>\n        </devtools-performance-table>\n      </div>`;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-modern-http': ModernHTTP;\n  }\n}\n\ncustomElements.define('devtools-performance-modern-http', ModernHTTP);\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\nimport './NodeLink.js';\nimport '../../../../ui/components/icon_button/icon_button.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {\n  CriticalRequestNode, NetworkDependencyTreeInsightModel} from\n  '../../../../models/trace/insights/NetworkDependencyTree.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {eventRef} from './EventRef.js';\nimport {md} from './Helpers.js';\nimport networkDependencyTreeInsightStyles from './networkDependencyTreeInsight.css.js';\nimport type {NodeLinkData} from './NodeLink.js';\nimport {renderOthersLabel, type TableData, type TableDataRow} from './Table.js';\n\nconst {UIStrings, i18nString} = Trace.Insights.Models.NetworkDependencyTree;\n\nconst {html} = Lit;\n\nexport const MAX_CHAINS_TO_SHOW = 5;\n\nexport class NetworkDependencyTree extends BaseInsightComponent<NetworkDependencyTreeInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-long-critical-network-tree`;\n  override internalName = 'long-critical-network-tree';\n\n  #relatedRequests: Set<Trace.Types.Events.SyntheticNetworkRequest>|null = null;\n  #countOfChains = 0;\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  #createOverlayForChain(requests: Set<Trace.Types.Events.SyntheticNetworkRequest>):\n      Trace.Types.Overlays.EntryOutline[] {\n    const overlays: Trace.Types.Overlays.EntryOutline[] = [];\n    requests.forEach(entry => overlays.push({\n      type: 'ENTRY_OUTLINE',\n      entry,\n      outlineReason: 'ERROR',\n    }));\n    return overlays;\n  }\n\n  #renderNetworkTreeRow(node: CriticalRequestNode): Lit.LitTemplate {\n    const requestStyles = Lit.Directives.styleMap({\n      display: 'flex',\n      '--override-timeline-link-text-color': node.isLongest ? 'var(--sys-color-error)' : '',\n      color: node.isLongest ? 'var(--sys-color-error)' : '',\n      backgroundColor: this.#relatedRequests?.has(node.request) ? 'var(--sys-color-state-hover-on-subtle)' : '',\n    });\n    const urlStyles = Lit.Directives.styleMap({\n      flex: 'auto',\n    });\n\n    // clang-format off\n    return html`\n      <div style=${requestStyles}>\n        <span style=${urlStyles}>${eventRef(node.request)}</span>\n        <span>\n          ${i18n.TimeUtilities.formatMicroSecondsTime(Trace.Types.Timing.Micro(node.timeFromInitialRequest))}\n        </span>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  mapNetworkDependencyToRow(node: CriticalRequestNode): TableDataRow|null {\n    // Check early if we've exceeded the maximum number of chains to show.\n    // If so, and this is a leaf node, increment count and then skip rendering.\n    // Otherwise, simply skip rendering.\n    if (this.#countOfChains >= MAX_CHAINS_TO_SHOW) {\n      if (node.children.length === 0) {\n        // This still counts the chain even if not rendered, so we can count how many chains are collapsed.\n        this.#countOfChains++;\n      }\n      return null;\n    }\n\n    // If this is a leaf node and we haven't exceeded the max chains, increment the count.\n    // This ensures we only count chains that will actually be rendered (or at least considered for rendering).\n    if (node.children.length === 0) {\n      this.#countOfChains++;\n    }\n\n    return {\n      values: [this.#renderNetworkTreeRow(node)],\n      overlays: this.#createOverlayForChain(node.relatedRequests),\n      // Filter out the empty rows otherwise the `Table`component will render a super short row\n      subRows: node.children.map(child => this.mapNetworkDependencyToRow(child)).filter(row => row !== null),\n    };\n  }\n\n  #renderNetworkDependencyTree(nodes: CriticalRequestNode[]): Lit.LitTemplate|null {\n    if (nodes.length === 0) {\n      return null;\n    }\n\n    const rows: TableDataRow[] = [{\n      // Add one empty row so the main document request can also has a left border\n      values: [],\n      // Filter out the empty rows otherwise the `Table` component will render a super short row\n      subRows: nodes.map(node => this.mapNetworkDependencyToRow(node)).filter(row => row !== null),\n    }];\n\n    if (this.#countOfChains > MAX_CHAINS_TO_SHOW) {\n      rows.push({\n        values: [renderOthersLabel(this.#countOfChains - MAX_CHAINS_TO_SHOW)],\n      });\n    }\n\n    // clang-format off\n    return html`\n      <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.columnRequest), i18nString(UIStrings.columnTime)],\n            rows,\n          } as TableData}>\n      </devtools-performance-table>\n    `;\n    // clang-format on\n  }\n\n  #renderNetworkTreeSection(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    if (!this.model.rootNodes.length) {\n      // clang-format off\n      return html`\n        <style>${networkDependencyTreeInsightStyles}</style>\n        <div class=\"insight-section\">${i18nString(UIStrings.noNetworkDependencyTree)}</div>\n      `;\n      // clang-format on\n    }\n\n    // clang-format off\n    return html`\n      <style>${networkDependencyTreeInsightStyles}</style>\n      <div class=\"insight-section\">\n        <div class=\"max-time\">\n          ${i18nString(UIStrings.maxCriticalPathLatency)}\n          <br>\n          <span class='longest'> ${i18n.TimeUtilities.formatMicroSecondsTime((this.model.maxTime))}</span>\n        </div>\n      </div>\n      <div class=\"insight-section\">\n        ${this.#renderNetworkDependencyTree(this.model.rootNodes)}\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #renderTooManyPreconnectsWarning(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n    if (this.model.preconnectedOrigins.length <=\n        Trace.Insights.Models.NetworkDependencyTree.TOO_MANY_PRECONNECTS_THRESHOLD) {\n      return Lit.nothing;\n    }\n\n    const warningStyles = Lit.Directives.styleMap({\n      backgroundColor: 'var(--sys-color-surface-yellow)',\n      padding: ' var(--sys-size-5) var(--sys-size-8);',\n      display: 'flex',\n    });\n\n    // clang-format off\n    return html`\n      <div style=${warningStyles}>\n        ${md(i18nString(UIStrings.tooManyPreconnectLinksWarning))}\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #renderPreconnectOriginsTable(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const preconnectOriginsTableTitle = html`\n      <style>${networkDependencyTreeInsightStyles}</style>\n      <div class='section-title'>${i18nString(UIStrings.preconnectOriginsTableTitle)}</div>\n      <div class=\"insight-description\">${md(i18nString(UIStrings.preconnectOriginsTableDescription))}</div>\n    `;\n\n    if (!this.model.preconnectedOrigins.length) {\n      // clang-format off\n      return html`\n        <div class=\"insight-section\">\n          ${preconnectOriginsTableTitle}\n          ${i18nString(UIStrings.noPreconnectOrigins)}\n        </div>\n      `;\n      // clang-format on\n    }\n\n    const rows: TableDataRow[] = this.model.preconnectedOrigins.map(preconnectOrigin => {\n      const subRows = [];\n      if (preconnectOrigin.unused) {\n        subRows.push({\n          values: [md(i18nString(UIStrings.unusedWarning))],\n        });\n      }\n      if (preconnectOrigin.crossorigin) {\n        subRows.push({\n          values: [md(i18nString(UIStrings.crossoriginWarning))],\n        });\n      }\n\n      if (preconnectOrigin.source === 'ResponseHeader') {\n        return {\n          values: [preconnectOrigin.url, eventRef(preconnectOrigin.request, {text: preconnectOrigin.headerText})],\n          subRows,\n        };\n      }\n\n      // clang-format off\n      const nodeEl = html`\n        <devtools-performance-node-link\n          .data=${{\n            backendNodeId: preconnectOrigin.node_id,\n            frame: preconnectOrigin.frame,\n            fallbackHtmlSnippet: `<link rel=\"preconnect\" href=\"${preconnectOrigin.url}\">`,\n          } as NodeLinkData}>\n        </devtools-performance-node-link>`;\n      // clang-format on\n\n      return {\n        values: [preconnectOrigin.url, nodeEl],\n        subRows,\n      };\n    });\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        ${preconnectOriginsTableTitle}\n        ${this.#renderTooManyPreconnectsWarning()}\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.columnOrigin), i18nString(UIStrings.columnSource)],\n            rows,\n          } as TableData}>\n        </devtools-performance-table>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #renderEstSavingTable(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const estSavingTableTitle = html`\n      <style>${networkDependencyTreeInsightStyles}</style>\n      <div class='section-title'>${i18nString(UIStrings.estSavingTableTitle)}</div>\n      <div class=\"insight-description\">${md(i18nString(UIStrings.estSavingTableDescription))}</div>\n    `;\n\n    if (!this.model.preconnectCandidates.length) {\n      // clang-format off\n      return html`\n        <div class=\"insight-section\">\n          ${estSavingTableTitle}\n          ${i18nString(UIStrings.noPreconnectCandidates)}\n        </div>\n      `;\n      // clang-format on\n    }\n\n    const rows: TableDataRow[] = this.model.preconnectCandidates.map(\n        candidate => ({\n          values: [candidate.origin, i18n.TimeUtilities.millisToString(candidate.wastedMs)],\n        }));\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        ${estSavingTableTitle}\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.columnOrigin), i18nString(UIStrings.columnWastedMs)],\n            rows,\n          } as TableData}>\n        </devtools-performance-table>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    return html`\n      ${this.#renderNetworkTreeSection()}\n      ${this.#renderPreconnectOriginsTable()}\n      ${this.#renderEstSavingTable()}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-long-critical-network-tree': NetworkDependencyTree;\n  }\n}\n\ncustomElements.define('devtools-performance-long-critical-network-tree', NetworkDependencyTree);\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2025 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.insight-body {\n  --override-timeline-link-text-decoration: none;\n  --override-timeline-link-text-color: var(--sys-color-on-surface);\n\n  .max-time {\n    text-align: center;\n\n    .longest {\n      color: var(--sys-color-error);\n    }\n  }\n\n  .section-title{\n    font: var(--sys-typescale-body4-bold);\n    padding-bottom: var(--sys-size-2);\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./networkDependencyTreeInsight.css')} */`;", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {RenderBlockingInsightModel} from '../../../../models/trace/insights/RenderBlocking.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {eventRef} from './EventRef.js';\nimport {createLimitedRows, renderOthersLabel, type TableDataRow} from './Table.js';\n\nconst {UIStrings, i18nString, createOverlayForRequest} = Trace.Insights.Models.RenderBlocking;\n\nconst {html} = Lit;\n\nexport class RenderBlocking extends BaseInsightComponent<RenderBlockingInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-render-blocking-requests`;\n  override internalName = 'render-blocking-requests';\n\n  mapToRow(request: Trace.Types.Events.SyntheticNetworkRequest): TableDataRow {\n    return {\n      values: [\n        eventRef(request),\n        i18n.TimeUtilities.formatMicroSecondsTime(request.dur),\n      ],\n      overlays: [createOverlayForRequest(request)],\n    };\n  }\n\n  createAggregatedTableRow(remaining: Trace.Types.Events.SyntheticNetworkRequest[]): TableDataRow {\n    return {\n      values: [renderOthersLabel(remaining.length), ''],\n      overlays: remaining.map(r => createOverlayForRequest(r)),\n    };\n  }\n\n  protected override hasAskAiSupport(): boolean {\n    return !!this.model;\n  }\n\n  override getEstimatedSavingsTime(): Trace.Types.Timing.Milli|null {\n    return this.model?.metricSavings?.FCP ?? null;\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const requests = this.model.renderBlockingRequests;\n    if (!requests.length) {\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.noRenderBlocking)}</div>`;\n    }\n\n    const rows = createLimitedRows(requests, this);\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.renderBlockingRequest), i18nString(UIStrings.duration)],\n            rows,\n          }}>\n        </devtools-performance-table>\n      </div>\n    `;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-render-blocking-requests': RenderBlocking;\n  }\n}\n\ncustomElements.define('devtools-performance-render-blocking-requests', RenderBlocking);\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\nimport '../../../../ui/components/linkifier/linkifier.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../../generated/protocol.js';\nimport type {SlowCSSSelectorInsightModel} from '../../../../models/trace/insights/SlowCSSSelector.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport type * as Linkifier from '../../../../ui/components/linkifier/linkifier.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport type {TableData} from './Table.js';\n\nconst {UIStrings, i18nString} = Trace.Insights.Models.SlowCSSSelector;\n\nconst {html} = Lit;\n\nexport class SlowCSSSelector extends BaseInsightComponent<SlowCSSSelectorInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-slow-css-selector`;\n  override internalName = 'slow-css-selector';\n  #selectorLocations = new Map<string, Protocol.CSS.SourceRange[]>();\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  private async toSourceFileLocation(cssModel: SDK.CSSModel.CSSModel, selector: Trace.Types.Events.SelectorTiming):\n      Promise<Linkifier.Linkifier.LinkifierData[]|undefined> {\n    if (!cssModel) {\n      return undefined;\n    }\n    const styleSheetHeader = cssModel.styleSheetHeaderForId(selector.style_sheet_id as Protocol.CSS.StyleSheetId);\n    if (!styleSheetHeader?.resourceURL()) {\n      return undefined;\n    }\n\n    // get the locations from cache if available\n    const key: string = JSON.stringify({selectorText: selector.selector, styleSheetId: selector.style_sheet_id});\n    let ranges = this.#selectorLocations.get(key);\n    if (!ranges) {\n      const result = await cssModel.agent.invoke_getLocationForSelector(\n          {selectorText: selector.selector, styleSheetId: selector.style_sheet_id as Protocol.CSS.StyleSheetId});\n      if (result.getError() || !result.ranges) {\n        return undefined;\n      }\n      ranges = result.ranges;\n      this.#selectorLocations.set(key, ranges);\n    }\n\n    const locations = ranges.map((range, itemIndex) => {\n      return {\n        url: styleSheetHeader.resourceURL(),\n        lineNumber: range.startLine,\n        columnNumber: range.startColumn,\n        linkText: `[${itemIndex + 1}]`,\n        title: `${styleSheetHeader.id} line ${range.startLine + 1}:${range.startColumn + 1}`,\n      } as Linkifier.Linkifier.LinkifierData;\n    });\n    return locations;\n  }\n\n  private async getSelectorLinks(\n      cssModel: SDK.CSSModel.CSSModel|null|undefined,\n      selector: Trace.Types.Events.SelectorTiming): Promise<Lit.LitTemplate> {\n    if (!cssModel) {\n      return Lit.nothing;\n    }\n\n    if (!selector.style_sheet_id) {\n      return Lit.nothing;\n    }\n\n    const locations = await this.toSourceFileLocation(cssModel, selector);\n    if (!locations) {\n      return Lit.nothing;\n    }\n\n    const links = html`\n    ${locations.map((location, itemIndex) => {\n      const divider = itemIndex !== locations.length - 1 ? ', ' : '';\n      return html`<devtools-linkifier .data=${location}></devtools-linkifier>${divider}`;\n    })}`;\n\n    return links;\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const target = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    const cssModel = target?.model(SDK.CSSModel.CSSModel);\n    const time = (us: Trace.Types.Timing.Micro): string =>\n        i18n.TimeUtilities.millisToString(Platform.Timing.microSecondsToMilliSeconds(us));\n\n    if (!this.model.topSelectorMatchAttempts && !this.model.topSelectorElapsedMs) {\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.enableSelectorData)}</div>`;\n    }\n\n    // clang-format off\n    const sections = [html`\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.total), ''],\n            rows: [\n              {values: [i18nString(UIStrings.matchAttempts), this.model.totalMatchAttempts]},\n              {values: [i18nString(UIStrings.matchCount), this.model.totalMatchCount]},\n              {values: [i18nString(UIStrings.elapsed), i18n.TimeUtilities.millisToString(this.model.totalElapsedMs)]},\n            ],\n          } as TableData}>\n        </devtools-performance-table>\n      </div>\n    `];\n    // clang-format on\n\n    if (this.model.topSelectorElapsedMs) {\n      const selector = this.model.topSelectorElapsedMs;\n      // clang-format off\n      sections.push(html`\n        <div class=\"insight-section\">\n          <devtools-performance-table\n            .data=${{\n              insight: this,\n              headers: [`${i18nString(UIStrings.topSelectorElapsedTime)}: ${time(Trace.Types.Timing.Micro(selector['elapsed (us)']))}`],\n              rows: [{\n                values: [html`${selector.selector} ${Lit.Directives.until(this.getSelectorLinks(cssModel, selector))}`]}]\n            }} as TableData>\n          </devtools-performance-table>\n        </div>\n      `);\n      // clang-format on\n    }\n\n    if (this.model.topSelectorMatchAttempts) {\n      const selector = this.model.topSelectorMatchAttempts;\n      // clang-format off\n      sections.push(html`\n        <div class=\"insight-section\">\n          <devtools-performance-table\n            .data=${{\n              insight: this,\n              headers: [`${i18nString(UIStrings.topSelectorMatchAttempt)}: ${selector['match_attempts']}`],\n              rows: [{\n                  values: [html`${selector.selector} ${Lit.Directives.until(this.getSelectorLinks(cssModel, selector))}` as unknown as string],\n              }]\n            }} as TableData}>\n          </devtools-performance-table>\n        </div>\n      `);\n      // clang-format on\n    }\n\n    return html`${sections}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-slow-css-selector': SlowCSSSelector;\n  }\n}\n\ncustomElements.define('devtools-performance-slow-css-selector', SlowCSSSelector);\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {ThirdPartiesInsightModel} from '../../../../models/trace/insights/ThirdParties.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {createLimitedRows, renderOthersLabel, type RowLimitAggregator} from './Table.js';\n\nconst {UIStrings, i18nString, createOverlaysForSummary} = Trace.Insights.Models.ThirdParties;\n\nconst {html} = Lit;\n\nconst MAX_TO_SHOW = 5;\n\nexport class ThirdParties extends BaseInsightComponent<ThirdPartiesInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-third-parties`;\n  override internalName = 'third-parties';\n\n  #mainThreadTimeAggregator: RowLimitAggregator<Trace.Extras.ThirdParties.EntitySummary> = {\n    mapToRow: summary => ({\n      values: [summary.entity.name, i18n.TimeUtilities.millisToString(summary.mainThreadTime)],\n      overlays: createOverlaysForSummary(summary),\n    }),\n    createAggregatedTableRow:\n        remaining => {\n          const totalMainThreadTime =\n              remaining.reduce((acc, summary) => acc + summary.mainThreadTime, 0) as Trace.Types.Timing.Milli;\n          return {\n            values: [renderOthersLabel(remaining.length), i18n.TimeUtilities.millisToString(totalMainThreadTime)],\n            overlays: remaining.flatMap(summary => createOverlaysForSummary(summary) ?? []),\n          };\n        },\n  };\n\n  #transferSizeAggregator: RowLimitAggregator<Trace.Extras.ThirdParties.EntitySummary> = {\n    mapToRow: summary => ({\n      values: [summary.entity.name, i18n.ByteUtilities.formatBytesToKb(summary.transferSize)],\n      overlays: createOverlaysForSummary(summary),\n    }),\n    createAggregatedTableRow:\n        remaining => {\n          const totalBytes = remaining.reduce((acc, summary) => acc + summary.transferSize, 0);\n          return {\n            values: [renderOthersLabel(remaining.length), i18n.ByteUtilities.formatBytesToKb(totalBytes)],\n            overlays: remaining.flatMap(summary => createOverlaysForSummary(summary) ?? []),\n          };\n        },\n  };\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    let result = this.model.entitySummaries ?? [];\n\n    if (this.model.firstPartyEntity) {\n      result = result.filter(s => s.entity !== this.model?.firstPartyEntity || null);\n    }\n    if (!result.length) {\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.noThirdParties)}</div>`;\n    }\n\n    const topTransferSizeEntries = result.toSorted((a, b) => b.transferSize - a.transferSize);\n    const topMainThreadTimeEntries = result.toSorted((a, b) => b.mainThreadTime - a.mainThreadTime);\n\n    const sections = [];\n    if (topTransferSizeEntries.length) {\n      const rows = createLimitedRows(topTransferSizeEntries, this.#transferSizeAggregator, MAX_TO_SHOW);\n      // clang-format off\n      sections.push(html`\n        <div class=\"insight-section\">\n          <devtools-performance-table\n            .data=${{\n              insight: this,\n              headers: [i18nString(UIStrings.columnThirdParty), i18nString(UIStrings.columnTransferSize)],\n              rows,\n            }}>\n          </devtools-performance-table>\n        </div>\n      `);\n      // clang-format on\n    }\n\n    if (topMainThreadTimeEntries.length) {\n      const rows = createLimitedRows(topMainThreadTimeEntries, this.#mainThreadTimeAggregator, MAX_TO_SHOW);\n      // clang-format off\n      sections.push(html`\n        <div class=\"insight-section\">\n          <devtools-performance-table\n            .data=${{\n              insight: this,\n              headers: [i18nString(UIStrings.columnThirdParty), i18nString(UIStrings.columnMainThreadTime)],\n              rows,\n            }}>\n          </devtools-performance-table>\n        </div>\n      `);\n      // clang-format on\n    }\n\n    return html`${sections}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-third-parties': ThirdParties;\n  }\n}\n\ncustomElements.define('devtools-performance-third-parties', ThirdParties);\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Trace from '../../../../models/trace/trace.js';\n\nexport interface ActiveInsight {\n  name: string;\n  insightSetKey: string;\n  createOverlayFn: (() => Trace.Types.Overlays.Overlay[]);\n}\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './NodeLink.js';\n\nimport type {ViewportInsightModel} from '../../../../models/trace/insights/Viewport.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\n\nconst {html} = Lit;\n\nexport class Viewport extends BaseInsightComponent<ViewportInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-viewport`;\n  override internalName = 'viewport';\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  override getEstimatedSavingsTime(): Trace.Types.Timing.Milli|null {\n    return this.model?.metricSavings?.INP ?? null;\n  }\n\n  renderContent(): Lit.LitTemplate {\n    if (!this.model || !this.model.viewportEvent) {\n      return Lit.nothing;\n    }\n\n    const backendNodeId = this.model.viewportEvent.args.data.node_id;\n    if (backendNodeId === undefined) {\n      return Lit.nothing;\n    }\n\n    // clang-format off\n    return html`\n      <div>\n        <devtools-performance-node-link\n          .data=${{\n            backendNodeId,\n            frame: this.model.viewportEvent.args.data.frame ?? '',\n            options: {tooltip: this.model.viewportEvent.args.data.content},\n            fallbackHtmlSnippet: `<meta name=viewport content=\"${this.model.viewportEvent.args.data.content}\">`,\n          }}>\n        </devtools-performance-node-link>\n      </div>`;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-viewport': Viewport;\n  }\n}\n\ncustomElements.define('devtools-performance-viewport', Viewport);\n"],
  "mappings": "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",
  "names": ["Lit", "html", "Lit", "action", "i18nString", "i18n", "ComponentHelpers", "Lit", "i18n", "Trace", "ComponentHelpers", "Lit", "Utils", "html", "Lit", "UIStrings", "str_", "i18nString", "html", "Lit", "index", "rowEl", "i18n", "Trace", "Lit", "UIStrings", "i18nString", "html", "Lit", "i18n", "ComponentHelpers", "Lit", "UIStrings", "str_", "i18nString", "html", "Lit", "SDK", "Buttons", "ComponentHelpers", "Lit", "html", "i18n", "Trace", "Lit", "UIStrings", "i18nString", "html", "Lit", "Lit", "html", "Lit", "i18n", "Trace", "Lit", "UIStrings", "i18nString", "html", "Lit", "i18n", "Trace", "Buttons", "Lit", "VisualLogging", "Utils", "UIStrings", "i18nString", "html", "Lit", "i18n", "Trace", "Lit", "UIStrings", "i18nString", "html", "Lit", "overlay", "i18n", "Platform", "Trace", "LegacyComponents", "Lit", "UIStrings", "i18nString", "html", "nothing", "Lit", "Trace", "Lit", "UIStrings", "i18nString", "createOverlayForRequest", "html", "Lit", "i18n", "Platform", "Trace", "Lit", "UIStrings", "i18nString", "html", "Lit", "i18n", "Trace", "Lit", "UIStrings", "i18nString", "html", "Lit", "section", "i18n", "Trace", "Lit", "UIStrings", "i18nString", "html", "Lit", "str_", "Common", "i18n", "SDK", "Trace", "Lit", "UIStrings", "i18nString", "html", "Lit", "Trace", "Lit", "UIStrings", "i18nString", "createOverlayForRequest", "html", "Lit", "i18n", "Trace", "Lit", "UIStrings", "i18nString", "html", "Lit", "i18n", "Trace", "Lit", "UIStrings", "i18nString", "createOverlayForRequest", "html", "Lit", "i18n", "Platform", "SDK", "Trace", "Lit", "UIStrings", "i18nString", "html", "Lit", "i18n", "Trace", "Lit", "UIStrings", "i18nString", "html", "Lit", "Lit", "html", "Lit"]
}
