{"version":3,"file":"NodeLink.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/NodeLink.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// TODO: move to ui/components/node_link?\n\nimport * as Common from '../../../../core/common/common.js';\nimport type * as Protocol from '../../../../generated/protocol.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nconst {html} = Lit;\n\nexport interface NodeLinkData {\n  backendNodeId: Protocol.DOM.BackendNodeId;\n  frame: string;\n  options?: Common.Linkifier.Options;\n  /**\n   * Text to display if backendNodeId cannot be resolved (ie for traces loaded from disk).\n   * Displayed as monospace code. Use this or the next field.\n   */\n  fallbackHtmlSnippet?: string;\n  /**\n   * Text to display if backendNodeId cannot be resolved (ie for traces loaded from disk).\n   * Displayed as plain text. Use this or the previous field.\n   */\n  fallbackText?: string;\n}\n\nexport class NodeLink extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n  #backendNodeId?: Protocol.DOM.BackendNodeId;\n  #frame?: string;\n  #options?: Common.Linkifier.Options;\n  #fallbackHtmlSnippet?: string;\n  #fallbackText?: string;\n\n  set data(data: NodeLinkData) {\n    this.#backendNodeId = data.backendNodeId;\n    this.#frame = data.frame;\n    this.#options = data.options;\n    this.#fallbackHtmlSnippet = data.fallbackHtmlSnippet;\n    this.#fallbackText = data.fallbackText;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  async #linkify(): Promise<Node|undefined> {\n    if (this.#backendNodeId === undefined) {\n      return;\n    }\n\n    // Users of `NodeLink` do not have a parsed trace so this is a workaround. This\n    // is an abuse of this API, but it's currently alright since the first parameter\n    // is only used as a cache key.\n    const domNodesMap = await Trace.Extras.FetchNodes.domNodesForMultipleBackendNodeIds(\n        this as unknown as Trace.Handlers.Types.ParsedTrace, [this.#backendNodeId]);\n    const node = domNodesMap.get(this.#backendNodeId);\n    if (!node) {\n      return;\n    }\n\n    if (node.frameId() !== this.#frame) {\n      return;\n    }\n\n    // TODO: it'd be nice if we could specify what attributes to render,\n    // ex for the Viewport insight: <meta content=\"...\"> (instead of just <meta>)\n    return await Common.Linkifier.Linkifier.linkify(node, this.#options);\n  }\n\n  async #render(): Promise<void> {\n    const relatedNodeEl = await this.#linkify();\n\n    let template;\n    if (relatedNodeEl) {\n      template = html`<div class='node-link'>${relatedNodeEl}</div>`;\n    } else if (this.#fallbackHtmlSnippet) {\n      // TODO: Use CodeHighlighter.\n      template = html`<pre style='text-wrap: auto'>${this.#fallbackHtmlSnippet}</pre>`;\n    } else if (this.#fallbackText) {\n      template = html`<span>${this.#fallbackText}</span>`;\n    } else {\n      template = Lit.nothing;\n    }\n\n    Lit.render(template, this.#shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-node-link': NodeLink;\n  }\n}\n\ncustomElements.define('devtools-performance-node-link', NodeLink);\n"]}