{"version":3,"file":"NodeLink.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/NodeLink.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,yCAAyC;AAEzC,OAAO,KAAK,MAAM,MAAM,mCAAmC,CAAC;AAC5D,OAAO,KAAK,GAAG,MAAM,6BAA6B,CAAC;AAEnD,OAAO,KAAK,gBAAgB,MAAM,8CAA8C,CAAC;AACjF,OAAO,KAAK,OAAO,MAAM,qCAAqC,CAAC;AAE/D,MAAM,EAAC,IAAI,EAAC,GAAG,OAAO,CAAC;AAOvB,MAAM,OAAO,QAAS,SAAQ,WAAW;IAE9B,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAC5C,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,cAAc,CAA8B;IAC5C,QAAQ,CAA4B;IAEpC,IAAI,IAAI,CAAC,IAAkB;QACzB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC;QACzC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IAED,KAAK,CAAC,QAAQ;QACZ,wFAAwF;QACxF,wBAAwB;QAExB,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE,CAAC;YACtC,OAAO;QACT,CAAC;QAED,MAAM,UAAU,GAAG,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,iBAAiB,EAAE,CAAC;QAClF,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,OAAO;QACT,CAAC;QAED,MAAM,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACzD,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO;QACT,CAAC;QAED,MAAM,cAAc,GAAG,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;QACtD,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,+BAA+B,CAAC,cAAc,CAAC,CAAC;QACnF,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO;QACT,CAAC;QAED,MAAM,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO;QACT,CAAC;QAED,oEAAoE;QACpE,6EAA6E;QAC7E,OAAO,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC5C,OAAO,CAAC,MAAM,CACV,IAAI,CAAA;UACF,aAAa;aACV,EACL,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;IAClC,CAAC;CACF;AAQD,cAAc,CAAC,MAAM,CAAC,gCAAgC,EAAE,QAAQ,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// TODO: move to ui/components/node_link?\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../../generated/protocol.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\n\nconst {html} = LitHtml;\n\nexport interface NodeLinkData {\n  backendNodeId: Protocol.DOM.BackendNodeId;\n  options?: Common.Linkifier.Options;\n}\n\nexport class NodeLink extends HTMLElement {\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n  #backendNodeId?: Protocol.DOM.BackendNodeId;\n  #options?: Common.Linkifier.Options;\n\n  set data(data: NodeLinkData) {\n    this.#backendNodeId = data.backendNodeId;\n    this.#options = data.options;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  async #linkify(): Promise<Node|undefined> {\n    // TODO: consider using `Trace.Extras.FetchNodes.extractRelatedDOMNodesFromEvent`, which\n    // requires parsedTrace.\n\n    if (this.#backendNodeId === undefined) {\n      return;\n    }\n\n    const mainTarget = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    if (!mainTarget) {\n      return;\n    }\n\n    const domModel = mainTarget.model(SDK.DOMModel.DOMModel);\n    if (!domModel) {\n      return;\n    }\n\n    const backendNodeIds = new Set([this.#backendNodeId]);\n    const domNodesMap = await domModel.pushNodesByBackendIdsToFrontend(backendNodeIds);\n    if (!domNodesMap) {\n      return;\n    }\n\n    const node = domNodesMap.get(this.#backendNodeId);\n    if (!node) {\n      return;\n    }\n\n    // TODO: it'd be nice if we could specify what attributes to render,\n    // ex for the Viewport insight: <meta content=\"...\"> (instead of just <meta>)\n    return Common.Linkifier.Linkifier.linkify(node, this.#options);\n  }\n\n  async #render(): Promise<void> {\n    const relatedNodeEl = await this.#linkify();\n    LitHtml.render(\n        html`<div class='node-link'>\n        ${relatedNodeEl}\n      </div>`,\n        this.#shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-node-link': NodeLink;\n  }\n}\n\ncustomElements.define('devtools-performance-node-link', NodeLink);\n"]}