{"version":3,"file":"NodeLink.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/NodeLink.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\n// TODO: move to ui/components/node_link?\n\nimport * as Common from '../../../../core/common/common.js';\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../../generated/protocol.js';\nimport * as Buttons from '../../../../ui/components/buttons/buttons.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as LegacyComponents from '../../../../ui/legacy/components/utils/utils.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nconst {html} = Lit;\n\nexport interface NodeLinkData {\n  backendNodeId: Protocol.DOM.BackendNodeId;\n  frame: string;\n  options?: Common.Linkifier.Options;\n  /**\n   * URL to display if backendNodeId cannot be resolved (ie for traces loaded from disk).\n   * Will be given to linkifyURL. Use this or one of the other fallback fields.\n   */\n  fallbackUrl?: Platform.DevToolsPath.UrlString;\n  /**\n   * Text to display if backendNodeId cannot be resolved (ie for traces loaded from disk).\n   * Displayed as monospace code.\n   */\n  fallbackHtmlSnippet?: string;\n  /**\n   * Text to display if backendNodeId cannot be resolved (ie for traces loaded from disk).\n   * Displayed as plain text.\n   */\n  fallbackText?: string;\n}\n\nexport class NodeLink extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #backendNodeId?: Protocol.DOM.BackendNodeId;\n  #frame?: string;\n  #options?: Common.Linkifier.Options;\n  #fallbackUrl?: Platform.DevToolsPath.UrlString;\n  #fallbackHtmlSnippet?: string;\n  #fallbackText?: string;\n  /**\n   * Track the linkified Node for a given backend NodeID to avoid repeated lookups on re-render.\n   * Also tracks if we fail to resolve a node, to ensure we don't try on each subsequent re-render.\n   */\n  #linkifiedNodeForBackendId = new Map<Protocol.DOM.BackendNodeId, Node|'NO_NODE_FOUND'>();\n\n  set data(data: NodeLinkData) {\n    this.#backendNodeId = data.backendNodeId;\n    this.#frame = data.frame;\n    this.#options = data.options;\n    this.#fallbackUrl = data.fallbackUrl;\n    this.#fallbackHtmlSnippet = data.fallbackHtmlSnippet;\n    this.#fallbackText = data.fallbackText;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  async #linkify(): Promise<Node|undefined> {\n    if (this.#backendNodeId === undefined) {\n      return;\n    }\n    const fromCache = this.#linkifiedNodeForBackendId.get(this.#backendNodeId);\n    if (fromCache) {\n      if (fromCache === 'NO_NODE_FOUND') {\n        return undefined;\n      }\n      return fromCache;\n    }\n\n    const target = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    const domModel = target?.model(SDK.DOMModel.DOMModel);\n    if (!domModel) {\n      return undefined;\n    }\n    const domNodesMap = await domModel.pushNodesByBackendIdsToFrontend(new Set([this.#backendNodeId]));\n    const node = domNodesMap?.get(this.#backendNodeId);\n    if (!node) {\n      this.#linkifiedNodeForBackendId.set(this.#backendNodeId, 'NO_NODE_FOUND');\n      return;\n    }\n\n    if (node.frameId() !== this.#frame) {\n      this.#linkifiedNodeForBackendId.set(this.#backendNodeId, 'NO_NODE_FOUND');\n      return;\n    }\n\n    // TODO: it'd be nice if we could specify what attributes to render,\n    // ex for the Viewport insight: <meta content=\"...\"> (instead of just <meta>)\n    const linkedNode = await Common.Linkifier.Linkifier.linkify(node, this.#options);\n    this.#linkifiedNodeForBackendId.set(this.#backendNodeId, linkedNode);\n    return linkedNode;\n  }\n\n  async #render(): Promise<void> {\n    const relatedNodeEl = await this.#linkify();\n\n    let template;\n    if (relatedNodeEl) {\n      template = html`<div class='node-link'>${relatedNodeEl}</div>`;\n    } else if (this.#fallbackUrl) {\n      const MAX_URL_LENGTH = 20;\n      const options = {\n        tabStop: true,\n        showColumnNumber: false,\n        inlineFrameIndex: 0,\n        maxLength: MAX_URL_LENGTH,\n      };\n      const linkEl = LegacyComponents.Linkifier.Linkifier.linkifyURL(this.#fallbackUrl, options);\n      template = html`<div class='node-link'>\n        <style>${Buttons.textButtonStyles}</style>\n        ${linkEl}\n      </div>`;\n    } else if (this.#fallbackHtmlSnippet) {\n      // TODO: Use CodeHighlighter.\n      template = html`<pre style='text-wrap: auto'>${this.#fallbackHtmlSnippet}</pre>`;\n    } else if (this.#fallbackText) {\n      template = html`<span>${this.#fallbackText}</span>`;\n    } else {\n      template = Lit.nothing;\n    }\n\n    Lit.render(template, this.#shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-node-link': NodeLink;\n  }\n}\n\ncustomElements.define('devtools-performance-node-link', NodeLink);\n"]}