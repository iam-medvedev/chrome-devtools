{"version":3,"file":"Helpers.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/Helpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as TraceEngine from '../../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport sidebarInsightStyles from './sidebarInsight.css.js';\nimport * as SidebarInsight from './SidebarInsight.js';\nimport {type ActiveInsight, InsightsCategories} from './types.js';\n\nexport function shouldRenderForCategory(options: {\n  activeCategory: InsightsCategories,\n  insightCategory: InsightsCategories,\n}): boolean {\n  return options.activeCategory === InsightsCategories.ALL || options.activeCategory === options.insightCategory;\n}\n\nexport function insightIsActive(options: {\n  activeInsight: ActiveInsight|null,\n  insightName: string,\n  insightNavigationId: string|null,\n}): boolean {\n  const active = options.activeInsight && options.activeInsight.name === options.insightName &&\n      options.activeInsight.navigationId === options.insightNavigationId;\n  return Boolean(active);\n}\n\nexport interface BaseInsightData {\n  insights: TraceEngine.Insights.Types.TraceInsightData|null;\n  navigationId: string|null;\n  activeInsight: ActiveInsight|null;\n  activeCategory: InsightsCategories;\n}\n\n// This is an abstract base class so the component naming rules do not apply.\n// eslint-disable-next-line rulesdir/check_component_naming\nexport abstract class BaseInsight extends HTMLElement {\n  abstract internalName: string;\n  abstract insightCategory: InsightsCategories;\n  abstract userVisibleTitle: string;\n\n  protected readonly shadow = this.attachShadow({mode: 'open'});\n\n  protected data: BaseInsightData = {\n    insights: null,\n    navigationId: null,\n    activeInsight: null,\n    activeCategory: InsightsCategories.ALL,\n  };\n\n  readonly #boundRender = this.render.bind(this);\n\n  protected scheduleRender(): void {\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  connectedCallback(): void {\n    this.shadow.adoptedStyleSheets.push(sidebarInsightStyles);\n  }\n\n  set insights(insights: TraceEngine.Insights.Types.TraceInsightData|null) {\n    this.data.insights = insights;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set navigationId(navigationId: string|null) {\n    this.data.navigationId = navigationId;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set activeInsight(activeInsight: ActiveInsight) {\n    this.data.activeInsight = activeInsight;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set activeCategory(activeCategory: InsightsCategories) {\n    this.data.activeCategory = activeCategory;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  protected onSidebarClick(): void {\n    if (this.isActive()) {\n      this.dispatchEvent(new SidebarInsight.InsightDeactivated());\n      return;\n    }\n    if (!this.data.navigationId) {\n      // Shouldn't happen, but needed to satisfy TS.\n      return;\n    }\n\n    this.dispatchEvent(new SidebarInsight.InsightActivated(\n        this.internalName,\n        this.data.navigationId,\n        this.createOverlays.bind(this),\n        ));\n  }\n\n  abstract createOverlays(): Overlays.Overlays.TimelineOverlay[];\n\n  abstract render(): void;\n\n  protected isActive(): boolean {\n    return insightIsActive({\n      activeInsight: this.data.activeInsight,\n      insightName: this.internalName,\n      insightNavigationId: this.data.navigationId,\n    });\n  }\n}\n"]}