{"version":3,"file":"Helpers.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/Helpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as Marked from '../../../../third_party/marked/marked.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as MarkdownView from '../../../../ui/components/markdown_view/markdown_view.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../../ui/visual_logging/visual_logging.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport sidebarInsightStyles from './sidebarInsight.css.js';\nimport * as SidebarInsight from './SidebarInsight.js';\nimport {type TableState} from './Table.js';\nimport {type ActiveInsight, Category} from './types.js';\n\nexport function shouldRenderForCategory(options: {\n  activeCategory: Category,\n  insightCategory: Category,\n}): boolean {\n  return options.activeCategory === Category.ALL || options.activeCategory === options.insightCategory;\n}\n\nexport function insightIsActive(options: {\n  activeInsight: ActiveInsight|null,\n  insightName: string,\n  insightSetKey: string|null,\n}): boolean {\n  const active = options.activeInsight && options.activeInsight.name === options.insightName &&\n      options.activeInsight.insightSetKey === options.insightSetKey;\n  return Boolean(active);\n}\n\nexport interface BaseInsightData {\n  insights: Trace.Insights.Types.TraceInsightSets|null;\n  /** The key into `insights` that contains this particular insight. */\n  insightSetKey: string|null;\n  activeInsight: ActiveInsight|null;\n  activeCategory: Category;\n}\n\n// This is an abstract base class so the component naming rules do not apply.\n// eslint-disable-next-line rulesdir/check_component_naming\nexport abstract class BaseInsight extends HTMLElement {\n  abstract internalName: string;\n  abstract insightCategory: Category;\n  abstract userVisibleTitle: string;\n  abstract description: string;\n\n  protected readonly shadow = this.attachShadow({mode: 'open'});\n\n  protected data: BaseInsightData = {\n    insights: null,\n    insightSetKey: null,\n    activeInsight: null,\n    activeCategory: Category.ALL,\n  };\n\n  readonly #boundRender = this.render.bind(this);\n  readonly sharedTableState: TableState = {\n    selectedRowEl: null,\n    selectionIsSticky: false,\n  };\n  #initialOverlays: Overlays.Overlays.TimelineOverlay[]|null = null;\n\n  protected scheduleRender(): void {\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  connectedCallback(): void {\n    this.shadow.adoptedStyleSheets.push(sidebarInsightStyles);\n    this.setAttribute('jslog', `${VisualLogging.section(`timeline.insights.${this.internalName}`)}`);\n    // Used for unit test purposes when querying the DOM.\n    this.dataset.insightName = this.internalName;\n  }\n\n  set insights(insights: Trace.Insights.Types.TraceInsightSets|null) {\n    this.data.insights = insights;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set insightSetKey(insightSetKey: string|null) {\n    this.data.insightSetKey = insightSetKey;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set activeInsight(activeInsight: ActiveInsight|null) {\n    this.data.activeInsight = activeInsight;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set activeCategory(activeCategory: Category) {\n    this.data.activeCategory = activeCategory;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  protected onSidebarClick(): void {\n    if (this.isActive()) {\n      this.dispatchEvent(new SidebarInsight.InsightDeactivated());\n      return;\n    }\n    if (!this.data.insightSetKey) {\n      // Shouldn't happen, but needed to satisfy TS.\n      return;\n    }\n\n    this.sharedTableState.selectedRowEl?.classList.remove('selected');\n    this.sharedTableState.selectedRowEl = null;\n    this.sharedTableState.selectionIsSticky = false;\n\n    this.dispatchEvent(new SidebarInsight.InsightActivated(\n        this.internalName,\n        this.data.insightSetKey,\n        this.getInitialOverlays(),\n        ));\n  }\n\n  /**\n   * Replaces the initial insight overlays with the ones provided.\n   *\n   * If `overlays` is null, reverts back to the initial overlays.\n   *\n   * This allows insights to provide an initial set of overlays,\n   * and later temporarily replace all of those insights with a different set.\n   * This enables the hover/click table interactions.\n   */\n  toggleTemporaryOverlays(\n      overlays: Overlays.Overlays.TimelineOverlay[]|null, options?: Overlays.Overlays.TimelineOverlaySetOptions): void {\n    if (!this.isActive()) {\n      return;\n    }\n\n    if (!options) {\n      options = {updateTraceWindow: true};\n    }\n    this.dispatchEvent(new SidebarInsight.InsightProvideOverlays(overlays ?? this.getInitialOverlays(), options));\n  }\n\n  getInitialOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    if (this.#initialOverlays) {\n      return this.#initialOverlays;\n    }\n\n    this.#initialOverlays = this.createOverlays();\n    return this.#initialOverlays;\n  }\n\n  protected abstract createOverlays(): Overlays.Overlays.TimelineOverlay[];\n\n  abstract render(): void;\n\n  protected isActive(): boolean {\n    return insightIsActive({\n      activeInsight: this.data.activeInsight,\n      insightName: this.internalName,\n      insightSetKey: this.data.insightSetKey,\n    });\n  }\n}\n\n/**\n * Returns a rendered MarkdownView component.\n *\n * This should not be used for markdown that is not guaranteed to be valid.\n */\nexport function md(markdown: string): LitHtml.TemplateResult {\n  const tokens = Marked.Marked.lexer(markdown);\n  return LitHtml.html`<${MarkdownView.MarkdownView.MarkdownView.litTagName}\n    .data=${{tokens} as MarkdownView.MarkdownView.MarkdownViewData}>\n  </${MarkdownView.MarkdownView.MarkdownView.litTagName}>`;\n}\n"]}