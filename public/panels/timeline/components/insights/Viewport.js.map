{"version":3,"file":"Viewport.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/Viewport.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,eAAe,CAAC;AAIvB,OAAO,KAAK,OAAO,MAAM,qCAAqC,CAAC;AAG/D,OAAO,EAAC,oBAAoB,EAAC,MAAM,2BAA2B,CAAC;AAE/D,MAAM,EAAC,IAAI,EAAC,GAAG,OAAO,CAAC;AAEvB,MAAM,OAAO,QAAS,SAAQ,oBAA0C;IACtE,MAAM,CAAmB,UAAU,GAAG,OAAO,CAAC,OAAO,CAAA,+BAA+B,CAAC;IAC5E,YAAY,GAAW,UAAU,CAAC;IAElC,cAAc;QACrB,qEAAqE;QACrE,OAAO,EAAE,CAAC;IACZ,CAAC;IAEQ,uBAAuB;QAC9B,OAAO,IAAI,CAAC,KAAK,EAAE,aAAa,EAAE,GAAG,IAAI,IAAI,CAAC;IAChD,CAAC;IAEQ,aAAa;QACpB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO,OAAO,CAAC,OAAO,CAAC;QACzB,CAAC;QAED,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;QAElE,mBAAmB;QACnB,OAAO,IAAI,CAAA;;UAEL,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAA;kBAC1B;YACN,aAAa;YACb,OAAO,EAAE,EAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAC;SAChE;0CAC+B,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO;aAC/C,CAAC;QACV,kBAAkB;IACpB,CAAC;;AASH,cAAc,CAAC,MAAM,CAAC,+BAA+B,EAAE,QAAQ,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './NodeLink.js';\n\nimport type {ViewportInsightModel} from '../../../../models/trace/insights/Viewport.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\n\nconst {html} = LitHtml;\n\nexport class Viewport extends BaseInsightComponent<ViewportInsightModel> {\n  static override readonly litTagName = LitHtml.literal`devtools-performance-viewport`;\n  override internalName: string = 'viewport';\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    // TODO(b/351757418): create overlay for synthetic input delay events\n    return [];\n  }\n\n  override getEstimatedSavingsTime(): Trace.Types.Timing.MilliSeconds|null {\n    return this.model?.metricSavings?.INP ?? null;\n  }\n\n  override renderContent(): LitHtml.LitTemplate {\n    if (!this.model) {\n      return LitHtml.nothing;\n    }\n\n    const backendNodeId = this.model.viewportEvent?.args.data.node_id;\n\n    // clang-format off\n    return html`\n      <div>\n        ${backendNodeId !== undefined ? html`<devtools-performance-node-link\n          .data=${{\n            backendNodeId,\n            options: {tooltip: this.model.viewportEvent?.args.data.content},\n          }}>\n        </devtools-performance-node-link>` : LitHtml.nothing}\n      </div>`;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-viewport': Viewport;\n  }\n}\n\ncustomElements.define('devtools-performance-viewport', Viewport);\n"]}