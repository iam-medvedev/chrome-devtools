{"version":3,"file":"Viewport.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/Viewport.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,eAAe,CAAC;AAIvB,OAAO,KAAK,OAAO,MAAM,qCAAqC,CAAC;AAG/D,OAAO,EAAC,oBAAoB,EAAE,uBAAuB,EAAC,MAAM,cAAc,CAAC;AAC3E,OAAO,EAAC,QAAQ,EAAC,MAAM,YAAY,CAAC;AAEpC,MAAM,EAAC,IAAI,EAAC,GAAG,OAAO,CAAC;AAEvB,MAAM,OAAO,QAAS,SAAQ,oBAA0C;IACtE,MAAM,CAAmB,UAAU,GAAG,OAAO,CAAC,OAAO,CAAA,+BAA+B,CAAC;IAC5E,eAAe,GAAa,QAAQ,CAAC,GAAG,CAAC;IACzC,YAAY,GAAW,UAAU,CAAC;IAElC,cAAc;QACrB,qEAAqE;QACrE,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,OAAO,CAAC,OAAuD;QAC7D,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO,OAAO,CAAC,OAAO,CAAC;QACzB,CAAC;QAED,MAAM,aAAa,GAAG,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;QAE/D,mBAAmB;QACnB,OAAO,IAAI,CAAA;;0DAE2C;YAC5C,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;YACvB,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW;YACnC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE;YACzB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,oBAAoB,EAAE,OAAO,CAAC,aAAa,EAAE,GAAG;SACjD;kCACqB,IAAI,CAAC,cAAc;gBACrC,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAA;wBAC1B;YACN,aAAa;YACb,OAAO,EAAE,EAAC,OAAO,EAAE,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAC;SAC7D;gDAC+B,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO;;eAEnD,CAAC;QACF,kBAAkB;IAC9B,CAAC;IAEQ,MAAM;QACb,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,MAAM,UAAU,GAAG,KAAK,IAAI,KAAK,CAAC,eAAe,KAAK,KAAK,CAAC;QAE5D,MAAM,eAAe,GAAG,uBAAuB,CAAC;YAC9C,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc;YACxC,eAAe,EAAE,IAAI,CAAC,eAAe;SACtC,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,UAAU,IAAI,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;QACrF,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;IACpD,CAAC;;AASH,cAAc,CAAC,MAAM,CAAC,+BAA+B,EAAE,QAAQ,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './NodeLink.js';\n\nimport type {ViewportInsightModel} from '../../../../models/trace/insights/Viewport.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsightComponent, shouldRenderForCategory} from './Helpers.js';\nimport {Category} from './types.js';\n\nconst {html} = LitHtml;\n\nexport class Viewport extends BaseInsightComponent<ViewportInsightModel> {\n  static override readonly litTagName = LitHtml.literal`devtools-performance-viewport`;\n  override insightCategory: Category = Category.INP;\n  override internalName: string = 'viewport';\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    // TODO(b/351757418): create overlay for synthetic input delay events\n    return [];\n  }\n\n  #render(insight: Trace.Insights.Types.InsightModels['Viewport']): LitHtml.LitTemplate {\n    if (!this.model) {\n      return LitHtml.nothing;\n    }\n\n    const backendNodeId = insight.viewportEvent?.args.data.node_id;\n\n    // clang-format off\n    return html`\n        <div class=\"insights\">\n            <devtools-performance-sidebar-insight .data=${{\n              title: this.model.title,\n              description: this.model.description,\n              expanded: this.isActive(),\n              internalName: this.internalName,\n              estimatedSavingsTime: insight.metricSavings?.INP,\n            }}\n            @insighttoggleclick=${this.onSidebarClick}>\n              ${backendNodeId !== undefined ? html`<devtools-performance-node-link\n                .data=${{\n                  backendNodeId,\n                  options: {tooltip: insight.viewportEvent?.args.data.content},\n                }}>\n              </devtools-performance-node-link>` : LitHtml.nothing}\n            </devtools-performance-sidebar-insight>\n        </div>`;\n              // clang-format on\n  }\n\n  override render(): void {\n    const model = this.model;\n    const shouldShow = model && model.mobileOptimized === false;\n\n    const matchesCategory = shouldRenderForCategory({\n      activeCategory: this.data.activeCategory,\n      insightCategory: this.insightCategory,\n    });\n    const output = shouldShow && matchesCategory ? this.#render(model) : LitHtml.nothing;\n    LitHtml.render(output, this.shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-viewport': Viewport;\n  }\n}\n\ncustomElements.define('devtools-performance-viewport', Viewport);\n"]}