{"version":3,"file":"NodeLink.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/NodeLink.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../../generated/protocol.js';\nimport {raf, renderElementIntoDOM} from '../../../../testing/DOMHelpers.js';\nimport {createTarget} from '../../../../testing/EnvironmentHelpers.js';\nimport {\n  clearAllMockConnectionResponseHandlers,\n  describeWithMockConnection,\n  setMockConnectionResponseHandler\n} from '../../../../testing/MockConnection.js';\n\nimport * as Insights from './insights.js';\n\nfunction nodeId<T extends Protocol.DOM.BackendNodeId|Protocol.DOM.NodeId>(x: number): T {\n  return x as T;\n}\n\ndescribeWithMockConnection('NodeLink', () => {\n  beforeEach(async () => {\n    clearAllMockConnectionResponseHandlers();\n  });\n\n  it('renders a node link', async () => {\n    const linkifyStub = sinon.stub(Common.Linkifier.Linkifier, 'linkify').callsFake(() => {\n      const elem = document.createElement('div');\n      elem.classList.add('fake-linkify-node');\n      return Promise.resolve(elem);\n    });\n\n    // Create a mock target, dom model, document and node.\n    const target = createTarget();\n    const domModel = target.model(SDK.DOMModel.DOMModel);\n    assert.exists(domModel);\n    const documentNode = {nodeId: nodeId(1)};\n    const domNode = new SDK.DOMModel.DOMNode(domModel);\n    domNode.id = nodeId(2);\n    // Set related CDP methods responses to return our mock document and node.\n    setMockConnectionResponseHandler('DOM.pushNodesByBackendIdsToFrontend', () => ({nodeIds: [domNode.id]}));\n    setMockConnectionResponseHandler('DOM.getDocument', () => ({root: documentNode}));\n\n    // Register the mock document and node in DOMModel, these use the mock responses set above.\n    await domModel.requestDocument();\n    domModel.registerNode(domNode);\n\n    const component = new Insights.NodeLink.NodeLink();\n    component.data = {\n      backendNodeId: nodeId(2),\n      frame: domNode.frameId() as string,\n    };\n    renderElementIntoDOM(component);\n    // await new Promise(r => setTimeout(r, 1000));\n    await raf();\n    assert.isOk(component.shadowRoot);\n\n    // Check that linkify was called with the right Node and we rendered the linkified node.\n    sinon.assert.calledWith(linkifyStub, domNode);\n    assert.instanceOf(component.shadowRoot.querySelector('.fake-linkify-node'), Element);\n  });\n\n  it('falls back to an HTML snippet if one is passed in', async () => {\n    // Create a mock target, dom model, document and node.\n    const target = createTarget();\n    const domModel = target.model(SDK.DOMModel.DOMModel);\n    assert.exists(domModel);\n    const documentNode = {nodeId: nodeId(1)};\n    const domNode = new SDK.DOMModel.DOMNode(domModel);\n    domNode.id = nodeId(2);\n    // Return an empty array of NodeIds so that the frontend resolution fails.\n    setMockConnectionResponseHandler('DOM.pushNodesByBackendIdsToFrontend', () => ({nodeIds: []}));\n    setMockConnectionResponseHandler('DOM.getDocument', () => ({root: documentNode}));\n    await domModel.requestDocument();\n    domModel.registerNode(domNode);\n\n    const component = new Insights.NodeLink.NodeLink();\n    component.data = {\n      backendNodeId: nodeId(2),\n      frame: domNode.frameId() as string,\n      fallbackHtmlSnippet: '<p class=\"fallback\">fallback html</p>'\n    };\n    renderElementIntoDOM(component);\n    await raf();\n    const fallback = component.shadowRoot?.querySelector('pre');\n    assert.isOk(fallback);\n    assert.strictEqual(fallback.innerText, '<p class=\\\"fallback\\\">fallback html</p>');\n  });\n\n  it('falls back to text if that is supplied', async () => {\n    // Create a mock target, dom model, document and node.\n    const target = createTarget();\n    const domModel = target.model(SDK.DOMModel.DOMModel);\n    assert.exists(domModel);\n    const documentNode = {nodeId: nodeId(1)};\n    const domNode = new SDK.DOMModel.DOMNode(domModel);\n    domNode.id = nodeId(2);\n    // Return an empty array of NodeIds so that the frontend resolution fails.\n    setMockConnectionResponseHandler('DOM.pushNodesByBackendIdsToFrontend', () => ({nodeIds: []}));\n    setMockConnectionResponseHandler('DOM.getDocument', () => ({root: documentNode}));\n    await domModel.requestDocument();\n    domModel.registerNode(domNode);\n\n    const component = new Insights.NodeLink.NodeLink();\n    component.data = {backendNodeId: nodeId(2), frame: domNode.frameId() as string, fallbackText: 'Fallback text'};\n    renderElementIntoDOM(component);\n    await raf();\n    const fallback = component.shadowRoot?.querySelector('span');\n    assert.isOk(fallback);\n    assert.strictEqual(fallback.innerText, 'Fallback text');\n  });\n});\n"]}