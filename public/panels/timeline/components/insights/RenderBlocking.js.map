{"version":3,"file":"RenderBlocking.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/RenderBlocking.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as TraceEngine from '../../../../models/trace/trace.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsight, shouldRenderForCategory} from './Helpers.js';\nimport * as SidebarInsight from './SidebarInsight.js';\nimport {InsightsCategories} from './types.js';\n\nexport function getRenderBlockingInsight(\n    insights: TraceEngine.Insights.Types.TraceInsightData|null,\n    navigationId: string|null): TraceEngine.Insights.Types.InsightResults['RenderBlocking']|null {\n  if (!insights || !navigationId) {\n    return null;\n  }\n\n  const insightsByNavigation = insights.get(navigationId);\n  if (!insightsByNavigation) {\n    return null;\n  }\n\n  const insight = insightsByNavigation.RenderBlocking;\n  if (insight instanceof Error) {\n    return null;\n  }\n  return insight;\n}\n\nexport class RenderBlockingRequests extends BaseInsight {\n  static readonly litTagName = LitHtml.literal`devtools-performance-render-blocking-requests`;\n  override insightCategory: InsightsCategories = InsightsCategories.LCP;\n  override internalName: string = 'render-blocking-requests';\n  override userVisibleTitle: string = 'Render-blocking requests';\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    const renderBlockingResults = getRenderBlockingInsight(this.data.insights, this.data.navigationId);\n    if (!renderBlockingResults) {\n      return [];\n    }\n\n    const entryOutlineOverlays: Array<Overlays.Overlays.EntryOutline> =\n        renderBlockingResults.renderBlockingRequests.map(req => {\n          return {\n            type: 'ENTRY_OUTLINE',\n            entry: req,\n            outlineReason: 'ERROR',\n          };\n        });\n    return entryOutlineOverlays;\n  }\n\n  #renderRenderBlocking(insightResult: TraceEngine.Insights.Types.InsightResults['RenderBlocking']):\n      LitHtml.TemplateResult {\n    const estimatedSavings = insightResult.metricSavings?.FCP;\n    // clang-format off\n    return LitHtml.html`\n        <div class=\"insights\">\n          <${SidebarInsight.SidebarInsight.litTagName} .data=${{\n            title: this.userVisibleTitle,\n            expanded: this.isActive(),\n            estimatedSavings: estimatedSavings,\n          } as SidebarInsight.InsightDetails}\n          @insighttoggleclick=${this.onSidebarClick}\n        >\n          <div slot=\"insight-description\" class=\"insight-description\">\n            Requests are blocking the page's initial render. <x-link class=\"link\" href=\"https://web.dev/learn/performance/understanding-the-critical-path#render-blocking_resources\">Deferring or inlining</x-link>\n             can move these network requests out of the critical path.\n          </div>\n        </${SidebarInsight.SidebarInsight}>\n      </div>`;\n    // clang-format on\n  }\n\n  override render(): void {\n    const renderBlockingResults = getRenderBlockingInsight(this.data.insights, this.data.navigationId);\n    const hasBlockingRequests =\n        renderBlockingResults?.renderBlockingRequests && renderBlockingResults.renderBlockingRequests.length > 0;\n    const matchesCategory = shouldRenderForCategory({\n      activeCategory: this.data.activeCategory,\n      insightCategory: this.insightCategory,\n    });\n    const output =\n        hasBlockingRequests && matchesCategory ? this.#renderRenderBlocking(renderBlockingResults) : LitHtml.nothing;\n    LitHtml.render(output, this.shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-render-blocking-requests': RenderBlockingRequests;\n  }\n}\n\ncustomElements.define('devtools-performance-render-blocking-requests', RenderBlockingRequests);\n"]}