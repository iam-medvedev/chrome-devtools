{"version":3,"file":"RenderBlocking.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/RenderBlocking.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {eventRef} from './EventRef.js';\nimport {BaseInsight, shouldRenderForCategory} from './Helpers.js';\nimport type * as SidebarInsight from './SidebarInsight.js';\nimport type {TableData} from './Table.js';\nimport {Category} from './types.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   * @description Title of an insight that provides the user with the list of network requests that blocked and therefore slowed down the page rendering and becoming visible to the user.\n   */\n  title: 'Render blocking requests',\n  /**\n   * @description Text to describe that there are requests blocking rendering, which may affect LCP.\n   */\n  description: 'Requests are blocking the page\\'s initial render, which may delay LCP. ' +\n      '[Deferring or inlining](https://web.dev/learn/performance/understanding-the-critical-path#render-blocking_resources/) ' +\n      'can move these network requests out of the critical path.',\n  /**\n   * @description Label to describe a render-blocking network request.\n   */\n  renderBlockingRequest: 'Render-blocking request',\n  /**\n   *@description Label used for a time duration.\n   */\n  duration: 'Duration',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/RenderBlocking.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class RenderBlockingRequests extends BaseInsight {\n  static override readonly litTagName = LitHtml.literal`devtools-performance-render-blocking-requests`;\n  override insightCategory: Category = Category.LCP;\n  override internalName: string = 'render-blocking-requests';\n  override userVisibleTitle: string = i18nString(UIStrings.title);\n  override description: string = i18nString(UIStrings.description);\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    const insight = Trace.Insights.Common.getInsight('RenderBlocking', this.data.insights, this.data.insightSetKey);\n    if (!insight) {\n      return [];\n    }\n\n    return insight.renderBlockingRequests.map(request => this.#createOverlayForRequest(request));\n  }\n\n  #createOverlayForRequest(request: Trace.Types.Events.SyntheticNetworkRequest): Overlays.Overlays.EntryOutline {\n    return {\n      type: 'ENTRY_OUTLINE',\n      entry: request,\n      outlineReason: 'ERROR',\n    };\n  }\n\n  #renderRenderBlocking(insightResult: Trace.Insights.Types.InsightResults['RenderBlocking']): LitHtml.TemplateResult {\n    const estimatedSavings = insightResult.metricSavings?.FCP;\n    const MAX_REQUESTS = 3;\n    const topRequests = insightResult.renderBlockingRequests.slice(0, MAX_REQUESTS);\n\n    // clang-format off\n    return html`\n        <div class=\"insights\">\n          <devtools-performance-sidebar-insight .data=${{\n            title: this.userVisibleTitle,\n            description: this.description,\n            internalName: this.internalName,\n            expanded: this.isActive(),\n            estimatedSavingsTime: estimatedSavings,\n          } as SidebarInsight.InsightDetails}\n          @insighttoggleclick=${this.onSidebarClick} >\n            <div slot=\"insight-content\" class=\"insight-section\">\n              ${html`<devtools-performance-table\n                .data=${{\n                  insight: this,\n                  headers: [i18nString(UIStrings.renderBlockingRequest), i18nString(UIStrings.duration)],\n                  rows: topRequests.map(request => ({\n                    values: [\n                      eventRef(request),\n                      i18n.TimeUtilities.millisToString(Platform.Timing.microSecondsToMilliSeconds(request.dur)),\n                    ],\n                    overlays: [this.#createOverlayForRequest(request)],\n                  })),\n                } as TableData}>\n              </devtools-performance-table>`}\n            </div>\n          </devtools-performance-sidebar-insight>\n      </div>`;\n    // clang-format on\n  }\n\n  override getRelatedEvents(): Trace.Types.Events.Event[] {\n    const insight = Trace.Insights.Common.getInsight('RenderBlocking', this.data.insights, this.data.insightSetKey);\n    return insight?.relatedEvents ?? [];\n  }\n\n  override render(): void {\n    const insight = Trace.Insights.Common.getInsight('RenderBlocking', this.data.insights, this.data.insightSetKey);\n    const hasBlockingRequests = insight?.renderBlockingRequests && insight.renderBlockingRequests.length > 0;\n    const matchesCategory = shouldRenderForCategory({\n      activeCategory: this.data.activeCategory,\n      insightCategory: this.insightCategory,\n    });\n    const output = hasBlockingRequests && matchesCategory ? this.#renderRenderBlocking(insight) : LitHtml.nothing;\n    LitHtml.render(output, this.shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-render-blocking-requests': RenderBlockingRequests;\n  }\n}\n\ncustomElements.define('devtools-performance-render-blocking-requests', RenderBlockingRequests);\n"]}