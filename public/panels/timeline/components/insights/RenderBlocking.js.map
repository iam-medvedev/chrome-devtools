{"version":3,"file":"RenderBlocking.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/RenderBlocking.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as LegacyComponents from '../../../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../../../ui/legacy/legacy.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsight, md, shouldRenderForCategory} from './Helpers.js';\nimport * as SidebarInsight from './SidebarInsight.js';\nimport {InsightsCategories} from './types.js';\n\nconst MAX_URL_LENGTH = 80;\n\nconst UIStrings = {\n  /**\n   * @description Text to describe that there are requests blocking rendering, which may affect LCP.\n   */\n  description: 'Requests are blocking the page\\'s initial render, which may delay LCP. ' +\n      '[Deferring or inlining](https://web.dev/learn/performance/understanding-the-critical-path#render-blocking_resources/) ' +\n      'can move these network requests out of the critical path.',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/RenderBlocking.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function getRenderBlockingInsight(\n    insights: Trace.Insights.Types.TraceInsightSets|null,\n    navigationId: string|null): Trace.Insights.Types.InsightResults['RenderBlocking']|null {\n  if (!insights || !navigationId) {\n    return null;\n  }\n\n  const insightsByNavigation = insights.get(navigationId);\n  if (!insightsByNavigation) {\n    return null;\n  }\n\n  const insight = insightsByNavigation.data.RenderBlocking;\n  if (insight instanceof Error) {\n    return null;\n  }\n  return insight;\n}\n\nexport class RenderBlockingRequests extends BaseInsight {\n  static readonly litTagName = LitHtml.literal`devtools-performance-render-blocking-requests`;\n  override insightCategory: InsightsCategories = InsightsCategories.LCP;\n  override internalName: string = 'render-blocking-requests';\n  override userVisibleTitle: string = 'Render-blocking requests';\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n    // Button style for linkified url.\n    UI.UIUtils.injectTextButtonStyles(this.shadow);\n  }\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    const renderBlockingResults = getRenderBlockingInsight(this.data.insights, this.data.navigationId);\n    if (!renderBlockingResults) {\n      return [];\n    }\n\n    const entryOutlineOverlays: Array<Overlays.Overlays.EntryOutline> =\n        renderBlockingResults.renderBlockingRequests.map(req => {\n          return {\n            type: 'ENTRY_OUTLINE',\n            entry: req,\n            outlineReason: 'ERROR',\n          };\n        });\n    return entryOutlineOverlays;\n  }\n\n  #linkifyUrl(url: string): HTMLElement {\n    const options = {\n      tabStop: true,\n      showColumnNumber: false,\n      inlineFrameIndex: 0,\n      maxLength: MAX_URL_LENGTH,\n    };\n\n    const linkifiedURL =\n        LegacyComponents.Linkifier.Linkifier.linkifyURL(url as Platform.DevToolsPath.UrlString, options);\n    return linkifiedURL;\n  }\n\n  #renderRenderBlocking(insightResult: Trace.Insights.Types.InsightResults['RenderBlocking']): LitHtml.TemplateResult {\n    const estimatedSavings = insightResult.metricSavings?.FCP;\n    const MAX_REQUESTS = 3;\n    const topRequests = insightResult.renderBlockingRequests.slice(0, MAX_REQUESTS);\n    // clang-format off\n    return LitHtml.html`\n        <div class=\"insights\">\n          <${SidebarInsight.SidebarInsight.litTagName} .data=${{\n            title: this.userVisibleTitle,\n            expanded: this.isActive(),\n            estimatedSavings,\n          } as SidebarInsight.InsightDetails}\n          @insighttoggleclick=${this.onSidebarClick}\n        >\n          <div slot=\"insight-description\" class=\"insight-description\">\n            ${md(i18nString(UIStrings.description))}\n          </div>\n          <div slot=\"insight-content\" style=\"insight-content\">\n            <p>\n              Longest blocking requests:\n              <ul class=\"url-list\">\n                ${topRequests.map(req => {\n                  return LitHtml.html `\n                    <li>${this.#linkifyUrl(req.args.data.url)}</li>\n                  `;\n                })}\n              </ul>\n            <p>\n          </div>\n        </${SidebarInsight.SidebarInsight}>\n      </div>`;\n    // clang-format on\n  }\n\n  override render(): void {\n    const renderBlockingResults = getRenderBlockingInsight(this.data.insights, this.data.navigationId);\n    const hasBlockingRequests =\n        renderBlockingResults?.renderBlockingRequests && renderBlockingResults.renderBlockingRequests.length > 0;\n    const matchesCategory = shouldRenderForCategory({\n      activeCategory: this.data.activeCategory,\n      insightCategory: this.insightCategory,\n    });\n    const output =\n        hasBlockingRequests && matchesCategory ? this.#renderRenderBlocking(renderBlockingResults) : LitHtml.nothing;\n    LitHtml.render(output, this.shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-render-blocking-requests': RenderBlockingRequests;\n  }\n}\n\ncustomElements.define('devtools-performance-render-blocking-requests', RenderBlockingRequests);\n"]}