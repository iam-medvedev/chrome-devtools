{"version":3,"file":"NetworkDependencyTree.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/NetworkDependencyTree.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\nimport './NodeLink.js';\nimport '../../../../ui/components/icon_button/icon_button.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {\n  CriticalRequestNode, NetworkDependencyTreeInsightModel} from\n  '../../../../models/trace/insights/NetworkDependencyTree.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport {md} from '../../utils/Helpers.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {eventRef} from './EventRef.js';\nimport networkDependencyTreeInsightStyles from './networkDependencyTreeInsight.css.js';\nimport type {NodeLinkData} from './NodeLink.js';\nimport {renderOthersLabel, type TableData, type TableDataRow} from './Table.js';\n\nconst {UIStrings, i18nString} = Trace.Insights.Models.NetworkDependencyTree;\n\nconst {html} = Lit;\n\nexport const MAX_CHAINS_TO_SHOW = 5;\n\nexport class NetworkDependencyTree extends BaseInsightComponent<NetworkDependencyTreeInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-long-critical-network-tree`;\n  override internalName = 'long-critical-network-tree';\n\n  #relatedRequests: Set<Trace.Types.Events.SyntheticNetworkRequest>|null = null;\n  #countOfChains = 0;\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  #createOverlayForChain(requests: Set<Trace.Types.Events.SyntheticNetworkRequest>):\n      Trace.Types.Overlays.EntryOutline[] {\n    const overlays: Trace.Types.Overlays.EntryOutline[] = [];\n    requests.forEach(entry => overlays.push({\n      type: 'ENTRY_OUTLINE',\n      entry,\n      outlineReason: 'ERROR',\n    }));\n    return overlays;\n  }\n\n  #renderNetworkTreeRow(node: CriticalRequestNode): Lit.LitTemplate {\n    const requestStyles = Lit.Directives.styleMap({\n      display: 'flex',\n      '--override-timeline-link-text-color': node.isLongest ? 'var(--sys-color-error)' : '',\n      color: node.isLongest ? 'var(--sys-color-error)' : '',\n      backgroundColor: this.#relatedRequests?.has(node.request) ? 'var(--sys-color-state-hover-on-subtle)' : '',\n    });\n    const urlStyles = Lit.Directives.styleMap({\n      flex: 'auto',\n    });\n\n    // clang-format off\n    return html`\n      <div style=${requestStyles}>\n        <span style=${urlStyles}>${eventRef(node.request)}</span>\n        <span>\n          ${i18n.TimeUtilities.formatMicroSecondsTime(Trace.Types.Timing.Micro(node.timeFromInitialRequest))}\n        </span>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  mapNetworkDependencyToRow(node: CriticalRequestNode): TableDataRow|null {\n    // Check early if we've exceeded the maximum number of chains to show.\n    // If so, and this is a leaf node, increment count and then skip rendering.\n    // Otherwise, simply skip rendering.\n    if (this.#countOfChains >= MAX_CHAINS_TO_SHOW) {\n      if (node.children.length === 0) {\n        // This still counts the chain even if not rendered, so we can count how many chains are collapsed.\n        this.#countOfChains++;\n      }\n      return null;\n    }\n\n    // If this is a leaf node and we haven't exceeded the max chains, increment the count.\n    // This ensures we only count chains that will actually be rendered (or at least considered for rendering).\n    if (node.children.length === 0) {\n      this.#countOfChains++;\n    }\n\n    return {\n      values: [this.#renderNetworkTreeRow(node)],\n      overlays: this.#createOverlayForChain(node.relatedRequests),\n      // Filter out the empty rows otherwise the `Table`component will render a super short row\n      subRows: node.children.map(child => this.mapNetworkDependencyToRow(child)).filter(row => row !== null),\n    };\n  }\n\n  #renderNetworkDependencyTree(nodes: CriticalRequestNode[]): Lit.LitTemplate|null {\n    if (nodes.length === 0) {\n      return null;\n    }\n\n    const rows: TableDataRow[] = [{\n      // Add one empty row so the main document request can also has a left border\n      values: [],\n      // Filter out the empty rows otherwise the `Table` component will render a super short row\n      subRows: nodes.map(node => this.mapNetworkDependencyToRow(node)).filter(row => row !== null),\n    }];\n\n    if (this.#countOfChains > MAX_CHAINS_TO_SHOW) {\n      rows.push({\n        values: [renderOthersLabel(this.#countOfChains - MAX_CHAINS_TO_SHOW)],\n      });\n    }\n\n    // clang-format off\n    return html`\n      <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.columnRequest), i18nString(UIStrings.columnTime)],\n            rows,\n          } as TableData}>\n      </devtools-performance-table>\n    `;\n    // clang-format on\n  }\n\n  #renderNetworkTreeSection(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    if (!this.model.rootNodes.length) {\n      // clang-format off\n      return html`\n        <style>${networkDependencyTreeInsightStyles}</style>\n        <div class=\"insight-section\">${i18nString(UIStrings.noNetworkDependencyTree)}</div>\n      `;\n      // clang-format on\n    }\n\n    // clang-format off\n    return html`\n      <style>${networkDependencyTreeInsightStyles}</style>\n      <div class=\"insight-section\">\n        <div class=\"max-time\">\n          ${i18nString(UIStrings.maxCriticalPathLatency)}\n          <br>\n          <span class='longest'> ${i18n.TimeUtilities.formatMicroSecondsTime((this.model.maxTime))}</span>\n        </div>\n      </div>\n      <div class=\"insight-section\">\n        ${this.#renderNetworkDependencyTree(this.model.rootNodes)}\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #renderTooManyPreconnectsWarning(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n    if (this.model.preconnectedOrigins.length <=\n        Trace.Insights.Models.NetworkDependencyTree.TOO_MANY_PRECONNECTS_THRESHOLD) {\n      return Lit.nothing;\n    }\n\n    const warningStyles = Lit.Directives.styleMap({\n      backgroundColor: 'var(--sys-color-surface-yellow)',\n      padding: ' var(--sys-size-5) var(--sys-size-8);',\n      display: 'flex',\n    });\n\n    // clang-format off\n    return html`\n      <div style=${warningStyles}>\n        ${md(i18nString(UIStrings.tooManyPreconnectLinksWarning))}\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #renderPreconnectOriginsTable(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const preconnectOriginsTableTitle = html`\n      <style>${networkDependencyTreeInsightStyles}</style>\n      <div class='section-title'>${i18nString(UIStrings.preconnectOriginsTableTitle)}</div>\n      <div class=\"insight-description\">${md(i18nString(UIStrings.preconnectOriginsTableDescription))}</div>\n    `;\n\n    if (!this.model.preconnectedOrigins.length) {\n      // clang-format off\n      return html`\n        <div class=\"insight-section\">\n          ${preconnectOriginsTableTitle}\n          ${i18nString(UIStrings.noPreconnectOrigins)}\n        </div>\n      `;\n      // clang-format on\n    }\n\n    const rows: TableDataRow[] = this.model.preconnectedOrigins.map(preconnectOrigin => {\n      const subRows = [];\n      if (preconnectOrigin.unused) {\n        subRows.push({\n          values: [md(i18nString(UIStrings.unusedWarning))],\n        });\n      }\n      if (preconnectOrigin.crossorigin) {\n        subRows.push({\n          values: [md(i18nString(UIStrings.crossoriginWarning))],\n        });\n      }\n\n      if (preconnectOrigin.source === 'ResponseHeader') {\n        return {\n          values: [preconnectOrigin.url, eventRef(preconnectOrigin.request, {text: preconnectOrigin.headerText})],\n          subRows,\n        };\n      }\n\n      // clang-format off\n      const nodeEl = html`\n        <devtools-performance-node-link\n          .data=${{\n            backendNodeId: preconnectOrigin.node_id,\n            frame: preconnectOrigin.frame,\n            fallbackHtmlSnippet: `<link rel=\"preconnect\" href=\"${preconnectOrigin.url}\">`,\n          } as NodeLinkData}>\n        </devtools-performance-node-link>`;\n      // clang-format on\n\n      return {\n        values: [preconnectOrigin.url, nodeEl],\n        subRows,\n      };\n    });\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        ${preconnectOriginsTableTitle}\n        ${this.#renderTooManyPreconnectsWarning()}\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.columnOrigin), i18nString(UIStrings.columnSource)],\n            rows,\n          } as TableData}>\n        </devtools-performance-table>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #renderEstSavingTable(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const estSavingTableTitle = html`\n      <style>${networkDependencyTreeInsightStyles}</style>\n      <div class='section-title'>${i18nString(UIStrings.estSavingTableTitle)}</div>\n      <div class=\"insight-description\">${md(i18nString(UIStrings.estSavingTableDescription))}</div>\n    `;\n\n    if (!this.model.preconnectCandidates.length) {\n      // clang-format off\n      return html`\n        <div class=\"insight-section\">\n          ${estSavingTableTitle}\n          ${i18nString(UIStrings.noPreconnectCandidates)}\n        </div>\n      `;\n      // clang-format on\n    }\n\n    const rows: TableDataRow[] = this.model.preconnectCandidates.map(\n        candidate => ({\n          values: [candidate.origin, i18n.TimeUtilities.millisToString(candidate.wastedMs)],\n        }));\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        ${estSavingTableTitle}\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.columnOrigin), i18nString(UIStrings.columnWastedMs)],\n            rows,\n          } as TableData}>\n        </devtools-performance-table>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    return html`\n      ${this.#renderNetworkTreeSection()}\n      ${this.#renderPreconnectOriginsTable()}\n      ${this.#renderEstSavingTable()}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-long-critical-network-tree': NetworkDependencyTree;\n  }\n}\n\ncustomElements.define('devtools-performance-long-critical-network-tree', NetworkDependencyTree);\n"]}