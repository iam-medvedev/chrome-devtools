{"version":3,"file":"NetworkDependencyTree.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/NetworkDependencyTree.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../../ui/components/icon_button/icon_button.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {\n  CriticalRequestNode, NetworkDependencyTreeInsightModel} from\n  '../../../../models/trace/insights/NetworkDependencyTree.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport type * as Overlays from '../../overlays/overlays.js';\nimport * as Utils from '../../utils/utils.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport networkDependencyTreeInsightRaw from './networkDependencyTreeInsight.css.js';\n\nconst {UIStrings, i18nString} = Trace.Insights.Models.NetworkDependencyTree;\n\nconst {html} = Lit;\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst networkDependencyTreeInsightComponentStyles = new CSSStyleSheet();\nnetworkDependencyTreeInsightComponentStyles.replaceSync(networkDependencyTreeInsightRaw.cssContent);\n\nexport class NetworkDependencyTree extends BaseInsightComponent<NetworkDependencyTreeInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-long-critical-network-tree`;\n  override internalName = 'long-critical-network-tree';\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n    this.shadow.adoptedStyleSheets.push(networkDependencyTreeInsightComponentStyles);\n  }\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    if (!this.model) {\n      return [];\n    }\n\n    const overlays: Overlays.Overlays.TimelineOverlay[] = [];\n    getAllOverlays(this.model.rootNodes, overlays);\n\n    return overlays;\n  }\n\n  renderTree(nodes: CriticalRequestNode[]): Lit.LitTemplate|null {\n    if (nodes.length === 0) {\n      return null;\n    }\n    // clang-format off\n    return html`\n      <ul>\n        ${nodes.map(({request, timeFromInitialRequest, children}) => {\n          const hasChildren = children.length > 0;\n\n          return html`\n            <li>\n              <div class=\"request\">\n                <span class=\"url\">${Utils.Helpers.shortenUrl(new URL(request.args.data.url))}</span>\n                ${\n                  // If this is the last request, show the chain time\n                  hasChildren ? Lit.nothing :html`\n                    <span class=\"chain-time\">\n                      ${i18n.TimeUtilities.formatMicroSecondsTime(Trace.Types.Timing.Micro(timeFromInitialRequest))}\n                    </span>\n                `}\n              </div>\n            </li>\n            ${hasChildren ? html`${this.renderTree(children)}` : Lit.nothing}\n          `;\n        })}\n      </ul>`;\n    // clang-format on\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    if (!this.model.rootNodes.length) {\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.noNetworkDependencyTree)}</div>`;\n    }\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        <div class=\"max-time\">\n          ${i18nString(UIStrings.maxCriticalPathLatency)}\n          <br>\n          ${i18n.TimeUtilities.formatMicroSecondsTime((this.model.maxTime))}\n        </div>\n\n        <!-- a divider is added here, through |tree-view| element's border-top -->\n        <div class=\"tree-view\">${this.renderTree(this.model.rootNodes)} </div>\n      </div>\n    `;\n    // clang-format on\n  }\n}\n\nfunction getAllOverlays(nodes: CriticalRequestNode[], overlays: Overlays.Overlays.TimelineOverlay[]): void {\n  nodes.forEach(node => {\n    overlays.push({\n      type: 'ENTRY_OUTLINE',\n      entry: node.request,\n      outlineReason: 'ERROR',\n    });\n    getAllOverlays(node.children, overlays);\n  });\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-long-critical-network-tree': NetworkDependencyTree;\n  }\n}\n\ncustomElements.define('devtools-performance-long-critical-network-tree', NetworkDependencyTree);\n"]}