{"version":3,"file":"DuplicatedJavaScript.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/DuplicatedJavaScript.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {DuplicatedJavaScriptInsightModel} from '../../../../models/trace/insights/DuplicatedJavaScript.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Buttons from '../../../../ui/components/buttons/buttons.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../../ui/visual_logging/visual_logging.js';\nimport * as Utils from '../../utils/utils.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {scriptRef} from './ScriptRef.js';\nimport type {TableData, TableDataRow} from './Table.js';\n\nconst {UIStrings, i18nString} = Trace.Insights.Models.DuplicatedJavaScript;\n\nconst {html} = Lit;\n\nexport class DuplicatedJavaScript extends BaseInsightComponent<DuplicatedJavaScriptInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-duplicated-javascript`;\n  override internalName = 'duplicated-javascript';\n  #treemapData: Utils.Treemap.TreemapData|null = null;\n\n  #shouldShowTreemap(): boolean {\n    if (!this.model) {\n      return false;\n    }\n\n    return this.model.scripts.some(script => !!script.url);\n  }\n\n  protected override hasAskAiSupport(): boolean {\n    return true;\n  }\n\n  #openTreemap(): void {\n    if (!this.model) {\n      return;\n    }\n\n    if (!this.#treemapData) {\n      this.#treemapData = Utils.Treemap.createTreemapData({scripts: this.model.scripts}, this.model.duplication);\n    }\n\n    const windowNameSuffix = this.insightSetKey ?? 'devtools';\n    Utils.Treemap.openTreemap(this.#treemapData, this.model.mainDocumentUrl, windowNameSuffix);\n  }\n\n  override getEstimatedSavingsTime(): Trace.Types.Timing.Milli|null {\n    return this.model?.metricSavings?.FCP ?? null;\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const rows: TableDataRow[] =\n        [...this.model.duplicationGroupedByNodeModules.entries()].slice(0, 10).map(([source, data]) => {\n          const scriptToOverlay = new Map();\n          for (const {script} of data.duplicates) {\n            scriptToOverlay.set(script, {\n              type: 'ENTRY_OUTLINE',\n              entry: script.request,\n              outlineReason: 'ERROR',\n            });\n          }\n\n          return {\n            values: [source, i18n.ByteUtilities.bytesToString(data.estimatedDuplicateBytes)],\n            overlays: [...scriptToOverlay.values()],\n            subRows: data.duplicates.map(({script, attributedSize}, index) => {\n              let overlays: Trace.Types.Overlays.Overlay[]|undefined;\n              const overlay = scriptToOverlay.get(script);\n              if (overlay) {\n                overlays = [overlay];\n              }\n\n              return {\n                values: [\n                  scriptRef(script),\n                  index === 0 ? '--' : i18n.ByteUtilities.bytesToString(attributedSize),\n                ],\n                overlays,\n              };\n            })\n          };\n        });\n\n    let treemapButton;\n    if (this.#shouldShowTreemap()) {\n      treemapButton = html`<devtools-button\n        .variant=${Buttons.Button.Variant.OUTLINED}\n        jslog=${VisualLogging.action(`timeline.treemap.${this.internalName}-insight`).track({\n        click: true\n      })}\n        @click=${this.#openTreemap}\n      >View Treemap</devtools-button>`;\n    }\n\n    // clang-format off\n    return html`\n      ${treemapButton}\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.columnSource), i18nString(UIStrings.columnDuplicatedBytes)],\n            rows,\n          } as TableData}>\n        </devtools-performance-table>\n      </div>\n    `;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-duplicated-javascript': DuplicatedJavaScript;\n  }\n}\n\ncustomElements.define('devtools-performance-duplicated-javascript', DuplicatedJavaScript);\n"]}