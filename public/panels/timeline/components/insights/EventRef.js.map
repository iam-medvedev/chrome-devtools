{"version":3,"file":"EventRef.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/EventRef.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport * as Utils from '../../utils/utils.js';\n\nimport baseInsightComponentStyles from './baseInsightComponent.css.js';\n\nconst {html, Directives: {ifDefined}} = Lit;\n\nexport class EventReferenceClick extends Event {\n  static readonly eventName = 'eventreferenceclick';\n\n  constructor(public event: Trace.Types.Events.Event) {\n    super(EventReferenceClick.eventName, {bubbles: true, composed: true});\n  }\n}\n\nclass EventRef extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #text: string|null = null;\n  #event: Trace.Types.Events.Event|null = null;\n\n  set text(text: string) {\n    this.#text = text;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  set event(event: Trace.Types.Events.Event) {\n    this.#event = event;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  #render(): void {\n    if (!this.#text || !this.#event) {\n      return;\n    }\n\n    // clang-format off\n    Lit.render(html`\n      <style>${baseInsightComponentStyles}</style>\n      <button type=\"button\" class=\"timeline-link\" @click=${(e: Event) => {\n        e.stopPropagation();\n        if (this.#event) {\n          this.dispatchEvent(new EventReferenceClick(this.#event));\n        }\n      }}>${this.#text}</button>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\nexport function eventRef(\n    event: Trace.Types.Events.Event, options?: {text?: string, title?: string}): Lit.TemplateResult {\n  let title = options?.title;\n  let text = options?.text;\n  if (Trace.Types.Events.isSyntheticNetworkRequest(event)) {\n    text = text ?? Utils.Helpers.shortenUrl(new URL(event.args.data.url));\n    title = title ?? event.args.data.url;\n  } else if (!text) {\n    console.warn('No text given for eventRef');\n    text = event.name;\n  }\n\n  return html`<devtools-performance-event-ref\n    .event=${event as Trace.Types.Events.Event}\n    .text=${text}\n    title=${ifDefined(title)}\n  ></devtools-performance-event-ref>`;\n}\n\nclass ImageRef extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #request?: Trace.Types.Events.SyntheticNetworkRequest;\n  #imageDataUrl?: string|null;\n\n  set request(request: Trace.Types.Events.SyntheticNetworkRequest) {\n    this.#request = request;\n    this.#imageDataUrl = undefined;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  /**\n   * This only returns a data url if the resource is currently present from the active\n   * inspected page.\n   */\n  async #getOrCreateImageDataUrl(): Promise<string|null> {\n    if (!this.#request) {\n      return null;\n    }\n\n    if (this.#imageDataUrl !== undefined) {\n      return this.#imageDataUrl;\n    }\n\n    const originalUrl = this.#request.args.data.url as Platform.DevToolsPath.UrlString;\n    const resource = SDK.ResourceTreeModel.ResourceTreeModel.resourceForURL(originalUrl);\n    if (!resource) {\n      this.#imageDataUrl = null;\n      return this.#imageDataUrl;\n    }\n\n    const content = await resource.requestContentData();\n    if ('error' in content) {\n      this.#imageDataUrl = null;\n      return this.#imageDataUrl;\n    }\n\n    this.#imageDataUrl = content.asDataUrl();\n    return this.#imageDataUrl;\n  }\n\n  async #render(): Promise<void> {\n    if (!this.#request) {\n      return;\n    }\n\n    const url = this.#request.args.data.mimeType.includes('image') ? await this.#getOrCreateImageDataUrl() : null;\n    const img = url ? html`<img src=${url} class=\"element-img\"/>` : Lit.nothing;\n\n    // clang-format off\n    Lit.render(html`\n      <style>${baseInsightComponentStyles}</style>\n      <div class=\"image-ref\">\n        ${img}\n        <span class=\"element-img-details\">\n          ${eventRef(this.#request)}\n          <span class=\"element-img-details-size\">${\n            i18n.ByteUtilities.bytesToString(this.#request.args.data.decodedBodyLength ?? 0)\n          }</span>\n        </span>\n      </div>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\nexport function imageRef(request: Trace.Types.Events.SyntheticNetworkRequest): Lit.TemplateResult {\n  return html`\n    <devtools-performance-image-ref\n      .request=${request}\n    ></devtools-performance-image-ref>\n  `;\n}\n\ndeclare global {\n  interface GlobalEventHandlersEventMap {\n    [EventReferenceClick.eventName]: EventReferenceClick;\n  }\n\n  interface HTMLElementTagNameMap {\n    'devtools-performance-event-ref': EventRef;\n    'devtools-performance-image-ref': ImageRef;\n  }\n}\n\ncustomElements.define('devtools-performance-event-ref', EventRef);\ncustomElements.define('devtools-performance-image-ref', ImageRef);\n"]}