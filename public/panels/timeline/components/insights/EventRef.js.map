{"version":3,"file":"EventRef.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/EventRef.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport * as Utils from '../../utils/utils.js';\n\nimport baseInsightComponentStylesRaw from './baseInsightComponent.css.js';\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst baseInsightComponentStyles = new CSSStyleSheet();\nbaseInsightComponentStyles.replaceSync(baseInsightComponentStylesRaw.cssContent);\n\nconst {html} = Lit;\n\nexport class EventReferenceClick extends Event {\n  static readonly eventName = 'eventreferenceclick';\n\n  constructor(public event: Trace.Types.Events.Event) {\n    super(EventReferenceClick.eventName, {bubbles: true, composed: true});\n  }\n}\n\nclass EventRef extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n\n  #text: string|null = null;\n  #event: Trace.Types.Events.Event|null = null;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [baseInsightComponentStyles];\n  }\n\n  set text(text: string) {\n    this.#text = text;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set event(event: Trace.Types.Events.Event) {\n    this.#event = event;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #render(): void {\n    if (!this.#text || !this.#event) {\n      return;\n    }\n\n    // clang-format off\n    Lit.render(html`\n      <button type=\"button\" class=\"timeline-link\" @click=${(e: Event) => {\n        e.stopPropagation();\n        if (this.#event) {\n          this.dispatchEvent(new EventReferenceClick(this.#event));\n        }\n      }}>${this.#text}</button>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\ntype EventRefSupportedEvents = Trace.Types.Events.SyntheticNetworkRequest;\n\nexport function eventRef(\n    event: EventRefSupportedEvents, options?: {text?: string, title?: string}): Lit.TemplateResult {\n  let title = options?.title;\n  let text = options?.text;\n  if (Trace.Types.Events.isSyntheticNetworkRequest(event)) {\n    text = text ?? Utils.Helpers.shortenUrl(new URL(event.args.data.url));\n    title = title ?? event.args.data.url;\n  } else {\n    Platform.TypeScriptUtilities.assertNever(\n        event, `unsupported event in eventRef: ${(event as Trace.Types.Events.Event).name}`);\n  }\n\n  return html`<devtools-performance-event-ref\n    .event=${event as Trace.Types.Events.Event}\n    .text=${text}\n    title=${title}\n  ></devtools-performance-event-ref>`;\n}\n\nclass ImageRef extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n\n  #request?: Trace.Types.Events.SyntheticNetworkRequest;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [baseInsightComponentStyles];\n  }\n\n  set request(request: Trace.Types.Events.SyntheticNetworkRequest) {\n    this.#request = request;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #render(): void {\n    if (!this.#request) {\n      return;\n    }\n\n    // clang-format off\n    Lit.render(html`\n      <div class=\"image-ref\">\n        ${this.#request.args.data.mimeType.includes('image') ? html`\n          <img\n            class=\"element-img\"\n            src=${this.#request.args.data.url}\n            @error=${handleBadImage}/>\n        `: Lit.nothing}\n        <span class=\"element-img-details\">\n          ${eventRef(this.#request)}\n          <span class=\"element-img-details-size\">${\n            i18n.ByteUtilities.bytesToString(this.#request.args.data.decodedBodyLength ?? 0)\n          }</span>\n        </span>\n      </div>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\nfunction handleBadImage(event: Event): void {\n  const img = event.target as HTMLImageElement;\n  img.style.display = 'none';\n}\n\nexport function imageRef(request: Trace.Types.Events.SyntheticNetworkRequest): Lit.TemplateResult {\n  return html`\n    <devtools-performance-image-ref\n      .request=${request}\n    ></devtools-performance-image-ref>\n  `;\n}\n\ndeclare global {\n  interface GlobalEventHandlersEventMap {\n    [EventReferenceClick.eventName]: EventReferenceClick;\n  }\n\n  interface HTMLElementTagNameMap {\n    'devtools-performance-event-ref': EventRef;\n    'devtools-performance-image-ref': ImageRef;\n  }\n}\n\ncustomElements.define('devtools-performance-event-ref', EventRef);\ncustomElements.define('devtools-performance-image-ref', ImageRef);\n"]}