{"version":3,"file":"ScriptRef.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/ScriptRef.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,QAAQ,MAAM,uCAAuC,CAAC;AAGlE,OAAO,KAAK,aAAa,MAAM,sBAAsB,CAAC;AAEtD,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AAEvC,MAAM,UAAU,SAAS,CAAC,MAAmD;IAC3E,gFAAgF;IAChF,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;YAClB,OAAO,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE;gBAC9B,IAAI,EAAE,YAAY,QAAQ,CAAC,eAAe,CAAC,oBAAoB,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE;aAC5F,CAAC,CAAC;QACL,CAAC;QAED,OAAO,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;IAED,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;QACf,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACtC,OAAO,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QACrD,CAAC;QAAC,MAAM,CAAC;QACT,CAAC;IACH,CAAC;IAED,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QAClB,OAAO,YAAY,QAAQ,CAAC,eAAe,CAAC,oBAAoB,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;IAC/F,CAAC;IAED,OAAO,cAAc,MAAM,CAAC,QAAQ,EAAE,CAAC;AACzC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../../core/platform/platform.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport type * as Lit from '../../../../ui/lit/lit.js';\nimport * as TimelineUtils from '../../utils/utils.js';\n\nimport {eventRef} from './EventRef.js';\n\nexport function scriptRef(script: Trace.Handlers.ModelHandlers.Scripts.Script): Lit.TemplateResult|string {\n  // The happy path is that we have a network request associated with this script.\n  if (script.request) {\n    if (script.inline) {\n      return eventRef(script.request, {\n        text: `(inline) ${Platform.StringUtilities.trimEndWithMaxLength(script.content ?? '', 15)}`,\n      });\n    }\n\n    return eventRef(script.request);\n  }\n\n  if (script.url) {\n    try {\n      const parsedUrl = new URL(script.url);\n      return TimelineUtils.Helpers.shortenUrl(parsedUrl);\n    } catch {\n    }\n  }\n\n  if (script.inline) {\n    return `(inline) ${Platform.StringUtilities.trimEndWithMaxLength(script.content ?? '', 15)}`;\n  }\n\n  return `script id: ${script.scriptId}`;\n}\n"]}