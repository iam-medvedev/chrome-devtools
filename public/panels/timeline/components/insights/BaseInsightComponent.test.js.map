{"version":3,"file":"BaseInsightComponent.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/BaseInsightComponent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../../core/common/common.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport {dispatchClickEvent, renderElementIntoDOM} from '../../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment, updateHostConfig} from '../../../../testing/EnvironmentHelpers.js';\nimport * as RenderCoordinator from '../../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as UI from '../../../../ui/legacy/legacy.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport type {TimelineOverlay} from '../../overlays/OverlaysImpl.js';\nimport * as Utils from '../../utils/utils.js';\n\nimport * as Insights from './insights.js';\n\nconst {html} = Lit;\n\ndescribeWithEnvironment('BaseInsightComponent', () => {\n  const {BaseInsightComponent} = Insights.BaseInsightComponent;\n  class TestInsightComponent extends BaseInsightComponent<Trace.Insights.Types.InsightModel<{}, {}>> {\n    override internalName = 'test-insight';\n    override createOverlays(): TimelineOverlay[] {\n      return [];\n    }\n    override renderContent(): Lit.LitTemplate {\n      return html`<div>test content</div>`;\n    }\n  }\n  customElements.define('test-insight-component', TestInsightComponent);\n\n  describe('sidebar insight component rendering', () => {\n    it('renders insight title even when not active', async () => {\n      const component = new TestInsightComponent();\n      component.selected = false;\n      component.model = {\n        strings: {},\n        title: 'LCP by Phase' as Common.UIString.LocalizedString,\n        description: 'some description' as Common.UIString.LocalizedString,\n        category: Trace.Insights.Types.InsightCategory.ALL,\n        state: 'fail',\n      };\n      renderElementIntoDOM(component);\n\n      await RenderCoordinator.done();\n\n      assert.isNotNull(component.shadowRoot);\n      const titleElement = component.shadowRoot.querySelector<HTMLElement>('.insight-title');\n      assert.isNotNull(titleElement);\n      const descElement = component.shadowRoot.querySelector<HTMLElement>('.insight-description');\n      assert.isNull(descElement);\n      const contentElement = component.shadowRoot.querySelector<HTMLElement>('.insight-content');\n      assert.isNull(contentElement);\n      assert.deepEqual(titleElement.textContent, 'LCP by Phase');\n    });\n\n    it('renders title, description and content when toggled', async () => {\n      const component = new TestInsightComponent();\n      component.selected = true;\n      component.model = {\n        strings: {},\n        title: 'LCP by Phase' as Common.UIString.LocalizedString,\n        description: 'some description' as Common.UIString.LocalizedString,\n        category: Trace.Insights.Types.InsightCategory.ALL,\n        state: 'fail',\n      };\n      renderElementIntoDOM(component);\n\n      await RenderCoordinator.done();\n\n      assert.isNotNull(component.shadowRoot);\n      const titleElement = component.shadowRoot.querySelector<HTMLElement>('.insight-title');\n      assert.isNotNull(titleElement);\n      assert.deepEqual(titleElement.textContent, 'LCP by Phase');\n\n      const descElement = component.shadowRoot.querySelector<HTMLElement>('.insight-description');\n      assert.isNotNull(descElement);\n      // It's in the markdown component.\n      assert.strictEqual(descElement.children[0].shadowRoot?.textContent?.trim(), 'some description');\n\n      const contentElement = component.shadowRoot.querySelector<HTMLElement>('.insight-content');\n      assert.isNotNull(contentElement);\n      assert.strictEqual(contentElement.textContent, 'test content');\n    });\n  });\n\n  describe('Ask AI Insights', () => {\n    const FAKE_PARSED_TRACE = {} as unknown as Trace.Handlers.Types.ParsedTrace;\n    const FAKE_LCP_MODEL = {\n      strings: {},\n      title: 'LCP by Phase' as Common.UIString.LocalizedString,\n      description: 'some description' as Common.UIString.LocalizedString,\n      category: Trace.Insights.Types.InsightCategory.ALL,\n      state: 'fail',\n    } as const;\n    async function renderComponent(): Promise<TestInsightComponent> {\n      const component = new TestInsightComponent();\n      component.selected = true;\n      component.model = FAKE_LCP_MODEL;\n      // We don't need a real trace for these tests.\n      component.parsedTrace = FAKE_PARSED_TRACE;\n      renderElementIntoDOM(component);\n\n      await RenderCoordinator.done();\n      return component;\n    }\n\n    it('renders the \"Ask AI\" button when perf insights AI is enabled', async () => {\n      updateHostConfig({\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: true,\n          insightsEnabled: true,\n        }\n      });\n      const component = await renderComponent();\n      assert.isOk(component.shadowRoot);\n      const button = component.shadowRoot.querySelector('devtools-button[data-ask-ai]');\n      assert.isOk(button);\n    });\n\n    it('sets the context when the user clicks the button', async () => {\n      updateHostConfig({\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: true,\n          insightsEnabled: true,\n        }\n      });\n      const component = await renderComponent();\n      assert.isOk(component.shadowRoot);\n      const button = component.shadowRoot.querySelector('devtools-button[data-ask-ai]');\n      assert.isOk(button);\n      sinon.stub(UI.ActionRegistry.ActionRegistry.instance(), 'hasAction')\n          .withArgs(sinon.match(/drjones\\.performance-insight-context/))\n          .returns(true);\n\n      const FAKE_ACTION = sinon.createStubInstance(UI.ActionRegistration.Action);\n      sinon.stub(UI.ActionRegistry.ActionRegistry.instance(), 'getAction')\n          .withArgs(sinon.match(/drjones\\.performance-insight-context/))\n          .returns(FAKE_ACTION);\n\n      dispatchClickEvent(button);\n      const context = UI.Context.Context.instance().flavor(Utils.InsightAIContext.ActiveInsight);\n      assert.instanceOf(context, Utils.InsightAIContext.ActiveInsight);\n    });\n\n    it('clears the active context when it gets toggled shut', async () => {\n      const FAKE_ACTIVE_INSIGHT = {} as unknown as Utils.InsightAIContext.ActiveInsight;\n      UI.Context.Context.instance().setFlavor(Utils.InsightAIContext.ActiveInsight, FAKE_ACTIVE_INSIGHT);\n      const component = await renderComponent();\n      const header = component.shadowRoot?.querySelector('header');\n      assert.isOk(header);\n      dispatchClickEvent(header);\n      const context = UI.Context.Context.instance().flavor(Utils.InsightAIContext.ActiveInsight);\n      assert.isNull(context);\n    });\n\n    it('does not render the \"Ask AI\" button when the perf agent is not enabled', async () => {\n      updateHostConfig({\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: false,\n        }\n      });\n      const component = await renderComponent();\n      assert.isOk(component.shadowRoot);\n      const button = component.shadowRoot.querySelector('devtools-button[data-ask-ai]');\n      assert.isNull(button);\n    });\n\n    it('does not render the \"Ask AI\" button when the perf agent is enabled but the insights ai is not', async () => {\n      updateHostConfig({\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: true,\n          insightsEnabled: false,\n        }\n      });\n      const component = await renderComponent();\n      assert.isOk(component.shadowRoot);\n      const button = component.shadowRoot.querySelector('devtools-button[data-ask-ai]');\n      assert.isNull(button);\n    });\n  });\n});\n"]}