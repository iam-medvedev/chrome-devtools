{"version":3,"file":"BaseInsightComponent.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/BaseInsightComponent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../../core/common/common.js';\nimport * as Root from '../../../../core/root/root.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport {dispatchClickEvent, renderElementIntoDOM} from '../../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment, updateHostConfig} from '../../../../testing/EnvironmentHelpers.js';\nimport * as RenderCoordinator from '../../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as UI from '../../../../ui/legacy/legacy.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport * as Utils from '../../utils/utils.js';\n\nimport * as Insights from './insights.js';\n\nconst {html} = Lit;\n\ndescribeWithEnvironment('BaseInsightComponent', () => {\n  const {BaseInsightComponent} = Insights.BaseInsightComponent;\n  class TestInsightComponentNoAISupport extends BaseInsightComponent<Trace.Insights.Types.InsightModel> {\n    override internalName = 'test-insight';\n\n    override hasAskAiSupport() {\n      return false;\n    }\n\n    override createOverlays(): Trace.Types.Overlays.Overlay[] {\n      return [];\n    }\n    override renderContent(): Lit.LitTemplate {\n      return html`<div>test content</div>`;\n    }\n  }\n  class TestInsightComponentWithAISupport extends BaseInsightComponent<Trace.Insights.Types.InsightModel> {\n    override internalName = 'test-insight';\n    override hasAskAiSupport() {\n      return true;\n    }\n    override createOverlays(): Trace.Types.Overlays.Overlay[] {\n      return [];\n    }\n    override renderContent(): Lit.LitTemplate {\n      return html`<div>test content</div>`;\n    }\n  }\n  customElements.define('test-insight-component-no-ai-support', TestInsightComponentNoAISupport);\n  customElements.define('test-insight-component-ai-support', TestInsightComponentWithAISupport);\n\n  describe('sidebar insight component rendering', () => {\n    it('renders insight title even when not active', async () => {\n      const component = new TestInsightComponentNoAISupport();\n      component.selected = false;\n      component.model = {\n        insightKey: 'LCPBreakdown',\n        strings: {},\n        title: 'LCP by Phase' as Common.UIString.LocalizedString,\n        description: 'some description' as Common.UIString.LocalizedString,\n        category: Trace.Insights.Types.InsightCategory.ALL,\n        state: 'fail',\n        frameId: '123',\n      };\n      renderElementIntoDOM(component);\n\n      await RenderCoordinator.done();\n\n      assert.isNotNull(component.shadowRoot);\n      const titleElement = component.shadowRoot.querySelector<HTMLElement>('.insight-title');\n      assert.isNotNull(titleElement);\n      const descElement = component.shadowRoot.querySelector<HTMLElement>('.insight-description');\n      assert.isNull(descElement);\n      const contentElement = component.shadowRoot.querySelector<HTMLElement>('.insight-content');\n      assert.isNull(contentElement);\n      assert.deepEqual(titleElement.textContent, 'LCP by Phase');\n    });\n\n    it('renders title, description and content when toggled', async () => {\n      const component = new TestInsightComponentNoAISupport();\n      component.selected = true;\n      component.model = {\n        insightKey: 'LCPBreakdown',\n        strings: {},\n        title: 'LCP by Phase' as Common.UIString.LocalizedString,\n        description: 'some description' as Common.UIString.LocalizedString,\n        category: Trace.Insights.Types.InsightCategory.ALL,\n        state: 'fail',\n        frameId: '123',\n      };\n      renderElementIntoDOM(component);\n\n      await RenderCoordinator.done();\n\n      assert.isNotNull(component.shadowRoot);\n      const titleElement = component.shadowRoot.querySelector<HTMLElement>('.insight-title');\n      assert.isNotNull(titleElement);\n      assert.deepEqual(titleElement.textContent, 'LCP by Phase');\n\n      const descElement = component.shadowRoot.querySelector<HTMLElement>('.insight-description');\n      assert.isNotNull(descElement);\n      // It's in the markdown component.\n      assert.include(descElement.children[0].shadowRoot?.textContent?.trim(), 'some description');\n\n      const contentElement = component.shadowRoot.querySelector<HTMLElement>('.insight-content');\n      assert.isNotNull(contentElement);\n      assert.strictEqual(contentElement.textContent, 'test content');\n    });\n  });\n\n  describe('estimated savings output', () => {\n    let testComponentIndex = 0;  // used for defining the custom element and making it unique\n    function makeTestComponent(opts: {wastedBytes?: number, timeSavings?: number}) {\n      class TestInsight extends BaseInsightComponent<Trace.Insights.Types.InsightModel> {\n        override internalName = 'test-insight';\n        override createOverlays(): Trace.Types.Overlays.Overlay[] {\n          return [];\n        }\n\n        override getEstimatedSavingsTime(): Trace.Types.Timing.Milli|null {\n          return opts.timeSavings ? Trace.Types.Timing.Milli(opts.timeSavings) : null;\n        }\n\n        override getEstimatedSavingsBytes(): number|null {\n          return opts.wastedBytes ?? null;\n        }\n\n        override renderContent(): Lit.LitTemplate {\n          return html`<div>test content</div>`;\n        }\n      }\n      customElements.define(`test-insight-est-savings-${testComponentIndex++}`, TestInsight);\n      return new TestInsight();\n    }\n\n    it('outputs the correct estimated savings for both bytes and time', async () => {\n      const component = makeTestComponent({wastedBytes: 5_000, timeSavings: 50});\n      component.model = {\n        insightKey: 'LCPBreakdown',\n        strings: {},\n        title: 'LCP by Phase' as Common.UIString.LocalizedString,\n        description: 'some description' as Common.UIString.LocalizedString,\n        category: Trace.Insights.Types.InsightCategory.ALL,\n        state: 'fail',\n        frameId: '123',\n      };\n      renderElementIntoDOM(component);\n\n      await RenderCoordinator.done();\n      const estSavings = component.shadowRoot?.querySelector<HTMLElement>('slot[name=insight-savings]');\n      assert.isOk(estSavings);\n      assert.strictEqual(estSavings.innerText, 'Est savings: 50 ms & 5.0 kB');\n    });\n\n    it('outputs the correct estimated savings for bytes only', async () => {\n      const component = makeTestComponent({wastedBytes: 5_000});\n      component.model = {\n        insightKey: 'LCPBreakdown',\n        strings: {},\n        title: 'LCP by Phase' as Common.UIString.LocalizedString,\n        description: 'some description' as Common.UIString.LocalizedString,\n        category: Trace.Insights.Types.InsightCategory.ALL,\n        state: 'fail',\n        frameId: '123',\n      };\n      renderElementIntoDOM(component);\n\n      await RenderCoordinator.done();\n      const estSavings = component.shadowRoot?.querySelector<HTMLElement>('slot[name=insight-savings]');\n      assert.isOk(estSavings);\n      assert.strictEqual(estSavings.innerText, 'Est savings: 5.0 kB');\n    });\n\n    it('outputs the correct estimated savings for time only', async () => {\n      const component = makeTestComponent({timeSavings: 50});\n      component.model = {\n        insightKey: 'LCPBreakdown',\n        strings: {},\n        title: 'LCP by Phase' as Common.UIString.LocalizedString,\n        description: 'some description' as Common.UIString.LocalizedString,\n        category: Trace.Insights.Types.InsightCategory.ALL,\n        state: 'fail',\n        frameId: '123',\n      };\n      renderElementIntoDOM(component);\n\n      await RenderCoordinator.done();\n      const estSavings = component.shadowRoot?.querySelector<HTMLElement>('slot[name=insight-savings]');\n      assert.isOk(estSavings);\n      assert.strictEqual(estSavings.innerText, 'Est savings: 50 ms');\n    });\n\n    it('includes the output in the insight aria label', async () => {\n      const component = makeTestComponent({wastedBytes: 5_000, timeSavings: 50});\n      component.model = {\n        insightKey: 'LCPBreakdown',\n        strings: {},\n        title: 'LCP by Phase' as Common.UIString.LocalizedString,\n        description: 'some description' as Common.UIString.LocalizedString,\n        category: Trace.Insights.Types.InsightCategory.ALL,\n        state: 'fail',\n        frameId: '123',\n      };\n      renderElementIntoDOM(component);\n\n      await RenderCoordinator.done();\n      const label = component.shadowRoot?.querySelector('header')?.getAttribute('aria-label');\n      assert.isOk(label);\n\n      assert.strictEqual(\n          label,\n          'View details for LCP by Phase insight. Estimated savings for this insight: 50 ms and 5.0 kB transfer size');\n    });\n  });\n\n  describe('Ask AI Insights', () => {\n    const FAKE_LCP_MODEL = {\n      insightKey: 'LCPBreakdown',\n      strings: {},\n      title: 'LCP by Phase' as Common.UIString.LocalizedString,\n      description: 'some description' as Common.UIString.LocalizedString,\n      category: Trace.Insights.Types.InsightCategory.ALL,\n      state: 'fail',\n      frameId: '123',\n    } as const;\n    const FAKE_INSIGHT_SET_BOUNDS =\n        Trace.Helpers.Timing.traceWindowFromMicroSeconds(0 as Trace.Types.Timing.Micro, 0 as Trace.Types.Timing.Micro);\n    async function renderComponent({insightHasAISupport}: {insightHasAISupport: boolean}):\n        Promise<TestInsightComponentNoAISupport|TestInsightComponentWithAISupport> {\n      const component =\n          insightHasAISupport ? new TestInsightComponentWithAISupport() : new TestInsightComponentNoAISupport();\n      component.selected = true;\n      component.model = FAKE_LCP_MODEL;\n      // We don't need a real trace for these tests.\n      component.bounds = FAKE_INSIGHT_SET_BOUNDS;\n      renderElementIntoDOM(component);\n\n      await RenderCoordinator.done();\n      return component;\n    }\n\n    it('renders the \"Ask AI\" button when perf insights AI is enabled and the Insight supports it', async () => {\n      updateHostConfig({\n        aidaAvailability: {\n          enabled: true,\n        },\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: true,\n          insightsEnabled: true,\n        }\n      });\n      const component = await renderComponent({insightHasAISupport: true});\n      assert.isOk(component.shadowRoot);\n      const button = component.shadowRoot.querySelector('devtools-button[data-insights-ask-ai]');\n      assert.isOk(button);\n    });\n\n    it('does not render the \"Ask AI\" button when AI is disabled', async () => {\n      updateHostConfig({\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: true,\n          insightsEnabled: true,\n        }\n      });\n      const component = await renderComponent({insightHasAISupport: true});\n      assert.isOk(component.shadowRoot);\n      const button = component.shadowRoot.querySelector('devtools-button[data-insights-ask-ai]');\n      assert.isNotOk(button);\n    });\n\n    it('adds a descriptive aria label to the button', async () => {\n      updateHostConfig({\n        aidaAvailability: {\n          enabled: true,\n        },\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: true,\n          insightsEnabled: true,\n        }\n      });\n      const component = await renderComponent({insightHasAISupport: true});\n      assert.isOk(component.shadowRoot);\n      const button = component.shadowRoot.querySelector('devtools-button[data-insights-ask-ai]');\n      assert.isOk(button);\n      assert.strictEqual(button.getAttribute('aria-label'), 'Ask AI about LCP by Phase insight');\n    });\n\n    it('does not render the \"Ask AI\" button if disabled by enterprise policy', async () => {\n      updateHostConfig({\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: true,\n          insightsEnabled: true,\n        },\n        aidaAvailability: {\n          enterprisePolicyValue: Root.Runtime.GenAiEnterprisePolicyValue.DISABLE,\n        }\n      });\n      const component = await renderComponent({insightHasAISupport: true});\n      assert.isOk(component.shadowRoot);\n      const button = component.shadowRoot.querySelector('devtools-button[data-insights-ask-ai]');\n      assert.isNull(button);\n    });\n\n    it('does not show the button if the feature is enabled but the Insight does not support it', async () => {\n      updateHostConfig({\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: true,\n          insightsEnabled: true,\n        }\n      });\n      const component = await renderComponent({insightHasAISupport: false});\n      assert.isOk(component.shadowRoot);\n      const button = component.shadowRoot.querySelector('devtools-button[data-insights-ask-ai]');\n      assert.isNull(button);\n    });\n\n    it('sets the context when the user clicks the button', async () => {\n      const focus =\n          new Utils.AIContext.AgentFocus({type: 'insight'} as unknown as Utils.AIContext.AgentFocusDataInsight);\n      updateHostConfig({\n        aidaAvailability: {\n          enabled: true,\n        },\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: true,\n          insightsEnabled: true,\n        }\n      });\n      const component = await renderComponent({insightHasAISupport: true});\n      component.agentFocus = focus;\n      assert.isOk(component.shadowRoot);\n      const button = component.shadowRoot.querySelector('devtools-button[data-insights-ask-ai]');\n      assert.isOk(button);\n      sinon.stub(UI.ActionRegistry.ActionRegistry.instance(), 'hasAction')\n          .withArgs(sinon.match(/drjones\\.performance-insight-context/))\n          .returns(true);\n\n      const FAKE_ACTION = sinon.createStubInstance(UI.ActionRegistration.Action);\n      sinon.stub(UI.ActionRegistry.ActionRegistry.instance(), 'getAction')\n          .withArgs(sinon.match(/drjones\\.performance-insight-context/))\n          .returns(FAKE_ACTION);\n\n      dispatchClickEvent(button);\n      const context = UI.Context.Context.instance().flavor(Utils.AIContext.AgentFocus);\n      assert.instanceOf(context, Utils.AIContext.AgentFocus);\n    });\n\n    it('clears the active context when it gets toggled shut', async () => {\n      const focus =\n          new Utils.AIContext.AgentFocus({type: 'insight'} as unknown as Utils.AIContext.AgentFocusDataInsight);\n      UI.Context.Context.instance().setFlavor(Utils.AIContext.AgentFocus, focus);\n      const component = await renderComponent({insightHasAISupport: true});\n      component.agentFocus = focus;\n      const header = component.shadowRoot?.querySelector('header');\n      assert.isOk(header);\n      dispatchClickEvent(header);\n      const context = UI.Context.Context.instance().flavor(Utils.AIContext.AgentFocus);\n      assert.isNull(context);\n    });\n\n    it('does not render the \"Ask AI\" button when the perf agent is not enabled', async () => {\n      updateHostConfig({\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: false,\n        }\n      });\n      const component = await renderComponent(\n          {insightHasAISupport: true});  // The Insight supports it, but the feature is not enabled\n      assert.isOk(component.shadowRoot);\n      const button = component.shadowRoot.querySelector('devtools-button[data-insights-ask-ai]');\n      assert.isNull(button);\n    });\n\n    it('does not render the \"Ask AI\" button when the perf agent is enabled but the insights ai is not', async () => {\n      updateHostConfig({\n        devToolsAiAssistancePerformanceAgent: {\n          enabled: true,\n          insightsEnabled: false,\n        }\n      });\n      const component = await renderComponent({insightHasAISupport: true});\n      assert.isOk(component.shadowRoot);\n      const button = component.shadowRoot.querySelector('devtools-button[data-insights-ask-ai]');\n      assert.isNull(button);\n    });\n  });\n});\n"]}