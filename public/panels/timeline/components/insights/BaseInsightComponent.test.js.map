{"version":3,"file":"BaseInsightComponent.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/BaseInsightComponent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../../core/common/common.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport {renderElementIntoDOM} from '../../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../../testing/EnvironmentHelpers.js';\nimport * as RenderCoordinator from '../../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport type {TimelineOverlay} from '../../overlays/OverlaysImpl.js';\n\nimport * as Insights from './insights.js';\n\nconst {html} = Lit;\n\ndescribeWithEnvironment('BaseInsightComponent', () => {\n  const {BaseInsightComponent} = Insights.BaseInsightComponent;\n  class TestInsightComponent extends BaseInsightComponent<Trace.Insights.Types.InsightModel<{}, {}>> {\n    override internalName = 'test-insight';\n    override createOverlays(): TimelineOverlay[] {\n      return [];\n    }\n    override renderContent(): Lit.LitTemplate {\n      return html`<div>test content</div>`;\n    }\n  }\n  customElements.define('test-insight-component', TestInsightComponent);\n\n  describe('sidebar insight component rendering', () => {\n    it('renders insight title even when not active', async () => {\n      const component = new TestInsightComponent();\n      component.selected = false;\n      component.model = {\n        strings: {},\n        title: 'LCP by Phase' as Common.UIString.LocalizedString,\n        description: 'some description' as Common.UIString.LocalizedString,\n        category: Trace.Insights.Types.InsightCategory.ALL,\n        shouldShow: true,\n      };\n      renderElementIntoDOM(component);\n\n      await RenderCoordinator.done();\n\n      assert.isNotNull(component.shadowRoot);\n      const titleElement = component.shadowRoot.querySelector<HTMLElement>('.insight-title');\n      assert.isNotNull(titleElement);\n      const descElement = component.shadowRoot.querySelector<HTMLElement>('.insight-description');\n      assert.isNull(descElement);\n      const contentElement = component.shadowRoot.querySelector<HTMLElement>('.insight-content');\n      assert.isNull(contentElement);\n      assert.deepEqual(titleElement.textContent, 'LCP by Phase');\n    });\n\n    it('renders title, description and content when toggled', async () => {\n      const component = new TestInsightComponent();\n      component.selected = true;\n      component.model = {\n        strings: {},\n        title: 'LCP by Phase' as Common.UIString.LocalizedString,\n        description: 'some description' as Common.UIString.LocalizedString,\n        category: Trace.Insights.Types.InsightCategory.ALL,\n        shouldShow: true,\n      };\n      renderElementIntoDOM(component);\n\n      await RenderCoordinator.done();\n\n      assert.isNotNull(component.shadowRoot);\n      const titleElement = component.shadowRoot.querySelector<HTMLElement>('.insight-title');\n      assert.isNotNull(titleElement);\n      assert.deepEqual(titleElement.textContent, 'LCP by Phase');\n\n      const descElement = component.shadowRoot.querySelector<HTMLElement>('.insight-description');\n      assert.isNotNull(descElement);\n      // It's in the markdown component.\n      assert.strictEqual(descElement.children[0].shadowRoot?.textContent?.trim(), 'some description');\n\n      const contentElement = component.shadowRoot.querySelector<HTMLElement>('.insight-content');\n      assert.isNotNull(contentElement);\n      assert.strictEqual(contentElement.textContent, 'test content');\n    });\n  });\n});\n"]}