{"version":3,"file":"LCPDiscovery.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/LCPDiscovery.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport {type LCPInsightResult} from '../../../../models/trace/insights/types.js';\nimport * as TraceEngine from '../../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as IconButton from '../../../../ui/components/icon_button/icon_button.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\n\nimport discoveryStyles from './lcpDiscovery.css.js';\nimport sidebarInsightStyles from './sidebarInsight.css.js';\nimport * as SidebarInsight from './SidebarInsight.js';\nimport {type ActiveInsight, InsightsCategories} from './types.js';\n\nexport const InsightName = 'lcp-discovery';\n\nconst UIStrings = {\n  /**\n   * @description Text to tell the user how long after the earliest discovery time their LCP element loaded.\n   * @example {401ms} PH1\n   */\n  lcpLoadDelay: 'LCP image loaded {PH1} after earliest start point.',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/LCPDiscovery.ts', UIStrings);\n// const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface LCPImageDiscoveryData {\n  shouldIncreasePriorityHint: boolean;\n  shouldPreloadImage: boolean;\n  shouldRemoveLazyLoading: boolean;\n  resource: TraceEngine.Types.TraceEvents.SyntheticNetworkRequest;\n  discoveryDelay: TraceEngine.Types.Timing.MicroSeconds|null;\n}\n\nexport function getLCPInsightData(\n    insights: TraceEngine.Insights.Types.TraceInsightData|null, navigationId: string|null): LCPInsightResult|null {\n  if (!insights || !navigationId) {\n    return null;\n  }\n\n  const insightsByNavigation = insights.get(navigationId);\n  if (!insightsByNavigation) {\n    return null;\n  }\n\n  const lcpInsight: TraceEngine.Insights.Types.LCPInsightResult|Error = insightsByNavigation.LargestContentfulPaint;\n  if (lcpInsight instanceof Error) {\n    return null;\n  }\n  return lcpInsight;\n}\n\nfunction getImageData(\n    insights: TraceEngine.Insights.Types.TraceInsightData|null, navigationId: string|null): LCPImageDiscoveryData|null {\n  const lcpInsight = getLCPInsightData(insights, navigationId);\n  if (!lcpInsight) {\n    return null;\n  }\n\n  if (lcpInsight.lcpResource === undefined) {\n    return null;\n  }\n\n  const shouldIncreasePriorityHint = lcpInsight.shouldIncreasePriorityHint;\n  const shouldPreloadImage = lcpInsight.shouldPreloadImage;\n  const shouldRemoveLazyLoading = lcpInsight.shouldRemoveLazyLoading;\n\n  const imageLCP = shouldIncreasePriorityHint !== undefined && shouldPreloadImage !== undefined &&\n      shouldRemoveLazyLoading !== undefined;\n\n  // Shouldn't render anything if lcp insight is null or lcp is text.\n  if (!imageLCP) {\n    return null;\n  }\n\n  const data: LCPImageDiscoveryData = {\n    shouldIncreasePriorityHint,\n    shouldPreloadImage,\n    shouldRemoveLazyLoading,\n    resource: lcpInsight.lcpResource,\n    discoveryDelay: null,\n  };\n\n  if (lcpInsight.earliestDiscoveryTimeTs && lcpInsight.lcpResource) {\n    const discoveryDelay = lcpInsight.lcpResource.ts - lcpInsight.earliestDiscoveryTimeTs;\n    data.discoveryDelay = TraceEngine.Types.Timing.MicroSeconds(discoveryDelay);\n  }\n\n  return data;\n}\n\nexport class LCPDiscovery extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-performance-lcp-discovery`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n  #insightTitle: string = 'LCP request discovery';\n  #insights: TraceEngine.Insights.Types.TraceInsightData|null = null;\n  #navigationId: string|null = null;\n  #activeInsight: ActiveInsight|null = null;\n  #activeCategory: InsightsCategories = InsightsCategories.ALL;\n\n  set insights(insights: TraceEngine.Insights.Types.TraceInsightData|null) {\n    this.#insights = insights;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set navigationId(navigationId: string|null) {\n    this.#navigationId = navigationId;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set activeInsight(activeInsight: ActiveInsight) {\n    this.#activeInsight = activeInsight;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set activeCategory(activeCategory: InsightsCategories) {\n    this.#activeCategory = activeCategory;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #sidebarClicked(): void {\n    // deactivate current insight if already selected.\n    if (this.#isActive()) {\n      this.dispatchEvent(new SidebarInsight.InsightDeactivated());\n      return;\n    }\n    if (!this.#navigationId) {\n      // Shouldn't happen, but needed to satisfy TS.\n      return;\n    }\n\n    this.dispatchEvent(new SidebarInsight.InsightActivated(\n        InsightName,\n        this.#navigationId,\n        // TODO: create the overlay for this insight.\n        () => [],\n        ));\n  }\n\n  #adviceIcon(didFail: boolean): LitHtml.TemplateResult {\n    const icon = didFail ? 'clear' : 'check-circle';\n\n    return LitHtml.html`\n      <${IconButton.Icon.Icon.litTagName}\n      name=${icon}\n      class=${didFail ? 'metric-value-bad' : 'metric-value-good'}\n      ></${IconButton.Icon.Icon.litTagName}>\n    `;\n  }\n\n  #renderDiscoveryDelay(delay: TraceEngine.Types.Timing.MicroSeconds): Element {\n    const timeWrapper = document.createElement('span');\n    timeWrapper.classList.add('discovery-time-ms');\n    timeWrapper.innerText = i18n.TimeUtilities.formatMicroSecondsTime(delay);\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.lcpLoadDelay, {PH1: timeWrapper});\n  }\n\n  #renderDiscovery(imageData: LCPImageDiscoveryData): LitHtml.TemplateResult {\n    // clang-format off\n    return LitHtml.html`\n        <div class=\"insights\">\n          <${SidebarInsight.SidebarInsight.litTagName} .data=${{\n            title: this.#insightTitle,\n            expanded: this.#isActive(),\n          } as SidebarInsight.InsightDetails}\n          @insighttoggleclick=${this.#sidebarClicked}\n        >\n          <div slot=\"insight-description\" class=\"insight-description\">\n          ${imageData.discoveryDelay ? LitHtml.html`<p class=\"discovery-delay\">${this.#renderDiscoveryDelay(imageData.discoveryDelay)}</p>` : LitHtml.nothing}\n            <ul class=\"insight-results discovery-icon-results\">\n              <li class=\"insight-entry\">\n                ${this.#adviceIcon(imageData.shouldIncreasePriorityHint)}\n                <span>fetchpriority=high applied</span>\n              </li>\n              <li class=\"insight-entry\">\n                ${this.#adviceIcon(imageData.shouldPreloadImage)}\n                <span>Request is discoverable in initial document</span>\n              </li>\n              <li class=\"insight-entry\">\n                ${this.#adviceIcon(imageData.shouldRemoveLazyLoading)}\n                <span>lazyload not applied</span>\n              </li>\n            </ul>\n          </div>\n          <div slot=\"insight-content\" class=\"insight-content\">\n            <img class=\"element-img\" data-src=${imageData.resource.args.data.url} src=${imageData.resource.args.data.url}>\n            <div class=\"element-img-details\">\n              ${Common.ParsedURL.ParsedURL.extractName(imageData.resource.args.data.url ?? '')}\n              <div class=\"element-img-details-size\">${Platform.NumberUtilities.bytesToString(imageData.resource.args.data.decodedBodyLength ?? 0)}</div>\n            </div>\n          </div>\n        </${SidebarInsight.SidebarInsight}>\n      </div>`;\n    // clang-format on\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [sidebarInsightStyles, discoveryStyles];\n  }\n\n  #shouldRenderForCateogory(): boolean {\n    if (this.#activeCategory === InsightsCategories.ALL) {\n      return true;\n    }\n    return this.#activeCategory === InsightsCategories.LCP;\n  }\n\n  #isActive(): boolean {\n    const isActive = this.#activeInsight && this.#activeInsight.name === InsightName &&\n        this.#activeInsight.navigationId === this.#navigationId;\n    return Boolean(isActive);\n  }\n\n  #render(): void {\n    const imageResults = getImageData(this.#insights, this.#navigationId);\n    const output =\n        imageResults && this.#shouldRenderForCateogory() ? this.#renderDiscovery(imageResults) : LitHtml.nothing;\n    LitHtml.render(output, this.#shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-lcp-discovery': LCPDiscovery;\n  }\n}\n\ncustomElements.define('devtools-performance-lcp-discovery', LCPDiscovery);\n"]}