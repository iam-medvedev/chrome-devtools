{"version":3,"file":"LCPDiscovery.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/LCPDiscovery.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../../ui/components/icon_button/icon_button.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {LCPDiscoveryInsightModel} from '../../../../models/trace/insights/LCPDiscovery.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {imageRef} from './EventRef.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   * @description Text to tell the user how long after the earliest discovery time their LCP element loaded.\n   * @example {401ms} PH1\n   */\n  lcpLoadDelay: 'LCP image loaded {PH1} after earliest start point.',\n  /**\n   * @description Text to tell the user that a fetchpriority property value of \"high\" is applied to the LCP request.\n   */\n  fetchPriorityApplied: 'fetchpriority=high applied',\n  /**\n   * @description Text to tell the user that the LCP request is discoverable in the initial document.\n   */\n  requestDiscoverable: 'Request is discoverable in initial document',\n  /**\n   * @description Text to tell the user that the LCP request does not have the lazy load property applied.\n   */\n  lazyLoadNotApplied: 'lazy load not applied',\n  /**\n   *@description Text for a screen-reader label to tell the user that the icon represents a successful insight check\n   *@example {Server response time} PH1\n   */\n  successAriaLabel: 'Insight check passed: {PH1}',\n  /**\n   *@description Text for a screen-reader label to tell the user that the icon represents an unsuccessful insight check\n   *@example {Server response time} PH1\n   */\n  failedAriaLabel: 'Insight check failed: {PH1}',\n  /**\n   * @description Text status indicating that the the Largest Contentful Paint (LCP) metric timing was not found. \"LCP\" is an acronym and should not be translated.\n   */\n  noLcp: 'No LCP detected',\n  /**\n   * @description Text status indicating that the Largest Contentful Paint (LCP) metric was text rather than an image. \"LCP\" is an acronym and should not be translated.\n   */\n  noLcpResource: 'No LCP resource detected because the LCP is not an image',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/LCPDiscovery.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface LCPImageDiscoveryData {\n  shouldIncreasePriorityHint: boolean;\n  shouldPreloadImage: boolean;\n  shouldRemoveLazyLoading: boolean;\n  request: Trace.Types.Events.SyntheticNetworkRequest;\n  discoveryDelay: Trace.Types.Timing.Micro|null;\n  estimatedSavings: Trace.Types.Timing.Milli|null;\n}\n\nfunction getImageData(model: LCPDiscoveryInsightModel): LCPImageDiscoveryData|null {\n  if (model.lcpRequest === undefined) {\n    return null;\n  }\n\n  const shouldIncreasePriorityHint = model.shouldIncreasePriorityHint;\n  const shouldPreloadImage = model.shouldPreloadImage;\n  const shouldRemoveLazyLoading = model.shouldRemoveLazyLoading;\n\n  const imageLCP = shouldIncreasePriorityHint !== undefined && shouldPreloadImage !== undefined &&\n      shouldRemoveLazyLoading !== undefined;\n\n  // Shouldn't render anything if lcp insight is null or lcp is text.\n  if (!imageLCP) {\n    return null;\n  }\n\n  const data: LCPImageDiscoveryData = {\n    shouldIncreasePriorityHint,\n    shouldPreloadImage,\n    shouldRemoveLazyLoading,\n    request: model.lcpRequest,\n    discoveryDelay: null,\n    estimatedSavings: model.metricSavings?.LCP ?? null,\n  };\n\n  if (model.earliestDiscoveryTimeTs && model.lcpRequest) {\n    const discoveryDelay = model.lcpRequest.ts - model.earliestDiscoveryTimeTs;\n    data.discoveryDelay = Trace.Types.Timing.Micro(discoveryDelay);\n  }\n\n  return data;\n}\n\nexport class LCPDiscovery extends BaseInsightComponent<LCPDiscoveryInsightModel> {\n  static override readonly litTagName = LitHtml.StaticHtml.literal`devtools-performance-lcp-discovery`;\n  override internalName: string = 'lcp-discovery';\n\n  #adviceIcon(didFail: boolean, label: string): LitHtml.TemplateResult {\n    const icon = didFail ? 'clear' : 'check-circle';\n\n    const ariaLabel = didFail ? i18nString(UIStrings.failedAriaLabel, {PH1: label}) :\n                                i18nString(UIStrings.successAriaLabel, {PH1: label});\n    return html`\n      <devtools-icon\n        aria-label=${ariaLabel}\n        name=${icon}\n        class=${didFail ? 'metric-value-bad' : 'metric-value-good'}\n      ></devtools-icon>\n    `;\n  }\n\n  #renderDiscoveryDelay(delay: Trace.Types.Timing.Micro): Element {\n    const timeWrapper = document.createElement('span');\n    timeWrapper.classList.add('discovery-time-ms');\n    timeWrapper.innerText = i18n.TimeUtilities.formatMicroSecondsTime(delay);\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.lcpLoadDelay, {PH1: timeWrapper});\n  }\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    if (!this.model) {\n      return [];\n    }\n\n    const imageResults = getImageData(this.model);\n    if (!imageResults || !imageResults.discoveryDelay) {\n      return [];\n    }\n\n    const delay = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n        Trace.Types.Timing.Micro(imageResults.request.ts - imageResults.discoveryDelay),\n        imageResults.request.ts,\n    );\n\n    const label = html`<div class=\"discovery-delay\"> ${this.#renderDiscoveryDelay(delay.range)}</div>`;\n\n    return [\n      {\n        type: 'ENTRY_OUTLINE',\n        entry: imageResults.request,\n        outlineReason: 'ERROR',\n      },\n      {\n        type: 'CANDY_STRIPED_TIME_RANGE',\n        bounds: delay,\n        entry: imageResults.request,\n      },\n      {\n        type: 'TIMESPAN_BREAKDOWN',\n        sections: [{\n          bounds: delay,\n          label,\n          showDuration: false,\n        }],\n        entry: imageResults.request,\n        renderLocation: 'ABOVE_EVENT',\n      },\n    ];\n  }\n\n  override getEstimatedSavingsTime(): Trace.Types.Timing.Milli|null {\n    if (!this.model) {\n      return null;\n    }\n\n    return getImageData(this.model)?.estimatedSavings ?? null;\n  }\n\n  override renderContent(): LitHtml.LitTemplate {\n    if (!this.model) {\n      return LitHtml.nothing;\n    }\n\n    const imageData = getImageData(this.model);\n    if (!imageData) {\n      if (!this.model.lcpEvent) {\n        return html`<div class=\"insight-section\">${i18nString(UIStrings.noLcp)}</div>`;\n      }\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.noLcpResource)}</div>`;\n    }\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        <div class=\"insight-results\">\n          <ul class=\"insight-icon-results\">\n            <li class=\"insight-entry\">\n              ${this.#adviceIcon(imageData.shouldIncreasePriorityHint, i18nString(UIStrings.fetchPriorityApplied))}\n              <span>${i18nString(UIStrings.fetchPriorityApplied)}</span>\n            </li>\n            <li class=\"insight-entry\">\n              ${this.#adviceIcon(imageData.shouldPreloadImage, i18nString(UIStrings.requestDiscoverable))}\n              <span>${i18nString(UIStrings.requestDiscoverable)}</span>\n            </li>\n            <li class=\"insight-entry\">\n              ${this.#adviceIcon(imageData.shouldRemoveLazyLoading, i18nString(UIStrings.lazyLoadNotApplied))}\n              <span>${i18nString(UIStrings.lazyLoadNotApplied)}</span>\n            </li>\n          </ul>\n        </div>\n        ${imageRef(imageData.request)}\n      </div>`;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-lcp-discovery': LCPDiscovery;\n  }\n}\n\ncustomElements.define('devtools-performance-lcp-discovery', LCPDiscovery);\n"]}