{"version":3,"file":"LCPDiscovery.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/LCPDiscovery.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,sDAAsD,CAAC;AAE9D,OAAO,KAAK,IAAI,MAAM,+BAA+B,CAAC;AACtD,OAAO,KAAK,QAAQ,MAAM,uCAAuC,CAAC;AAClE,OAAO,KAAK,KAAK,MAAM,mCAAmC,CAAC;AAC3D,OAAO,KAAK,OAAO,MAAM,qCAAqC,CAAC;AAG/D,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AACvC,OAAO,EAAC,WAAW,EAAE,uBAAuB,EAAC,MAAM,cAAc,CAAC;AAElE,OAAO,EAAC,QAAQ,EAAC,MAAM,YAAY,CAAC;AAEpC,MAAM,EAAC,IAAI,EAAC,GAAG,OAAO,CAAC;AAEvB,MAAM,SAAS,GAAG;IAChB;;OAEG;IACH,KAAK,EAAE,uBAAuB;IAC9B;;OAEG;IACH,WAAW,EACP,8NAA8N;IAClO;;;OAGG;IACH,YAAY,EAAE,oDAAoD;IAClE;;OAEG;IACH,oBAAoB,EAAE,4BAA4B;IAClD;;OAEG;IACH,mBAAmB,EAAE,6CAA6C;IAClE;;OAEG;IACH,kBAAkB,EAAE,uBAAuB;IAC3C;;;OAGG;IACH,gBAAgB,EAAE,6BAA6B;IAC/C;;;OAGG;IACH,eAAe,EAAE,6BAA6B;CAE/C,CAAC;AAEF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,qDAAqD,EAAE,SAAS,CAAC,CAAC;AAC3G,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAWtE,SAAS,YAAY,CACjB,QAAoD,EAAE,aAA0B;IAClF,MAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,wBAAwB,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;IACpG,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,OAAO,CAAC,UAAU,KAAK,SAAS,EAAE,CAAC;QACrC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,0BAA0B,GAAG,OAAO,CAAC,0BAA0B,CAAC;IACtE,MAAM,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;IACtD,MAAM,uBAAuB,GAAG,OAAO,CAAC,uBAAuB,CAAC;IAEhE,MAAM,QAAQ,GAAG,0BAA0B,KAAK,SAAS,IAAI,kBAAkB,KAAK,SAAS;QACzF,uBAAuB,KAAK,SAAS,CAAC;IAE1C,mEAAmE;IACnE,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,IAAI,GAA0B;QAClC,0BAA0B;QAC1B,kBAAkB;QAClB,uBAAuB;QACvB,OAAO,EAAE,OAAO,CAAC,UAAU;QAC3B,cAAc,EAAE,IAAI;QACpB,gBAAgB,EAAE,OAAO,CAAC,aAAa,EAAE,GAAG,IAAI,IAAI;KACrD,CAAC;IAEF,IAAI,OAAO,CAAC,uBAAuB,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,cAAc,GAAG,OAAO,CAAC,UAAU,CAAC,EAAE,GAAG,OAAO,CAAC,uBAAuB,CAAC;QAC/E,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;IACxE,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,OAAO,YAAa,SAAQ,WAAW;IAC3C,MAAM,CAAmB,UAAU,GAAG,OAAO,CAAC,OAAO,CAAA,oCAAoC,CAAC;IACjF,eAAe,GAAa,QAAQ,CAAC,GAAG,CAAC;IACzC,YAAY,GAAW,eAAe,CAAC;IACvC,gBAAgB,GAAW,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACvD,WAAW,GAAW,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAEjE,WAAW,CAAC,OAAgB,EAAE,KAAa;QACzC,MAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC;QAEhD,MAAM,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,eAAe,EAAE,EAAC,GAAG,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;YACrD,UAAU,CAAC,SAAS,CAAC,gBAAgB,EAAE,EAAC,GAAG,EAAE,KAAK,EAAC,CAAC,CAAC;QACjF,OAAO,IAAI,CAAA;;qBAEM,SAAS;eACf,IAAI;gBACH,OAAO,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,mBAAmB;;KAE7D,CAAC;IACJ,CAAC;IAED,qBAAqB,CAAC,KAAsC;QAC1D,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACnD,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAC/C,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;QACzE,OAAO,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,YAAY,EAAE,EAAC,GAAG,EAAE,WAAW,EAAC,CAAC,CAAC;IAC9F,CAAC;IAEQ,cAAc;QACrB,MAAM,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC/E,IAAI,CAAC,YAAY,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC;YAClD,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,2BAA2B,CAC1D,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,GAAG,YAAY,CAAC,cAAc,CAAC,EACtF,YAAY,CAAC,OAAO,CAAC,EAAE,CAC1B,CAAC;QAEF,MAAM,KAAK,GAAG,IAAI,CAAA,iCAAiC,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC;QAEnG,OAAO;YACL;gBACE,IAAI,EAAE,eAAe;gBACrB,KAAK,EAAE,YAAY,CAAC,OAAO;gBAC3B,aAAa,EAAE,OAAO;aACvB;YACD;gBACE,IAAI,EAAE,0BAA0B;gBAChC,MAAM,EAAE,KAAK;gBACb,KAAK,EAAE,YAAY,CAAC,OAAO;aAC5B;YACD;gBACE,IAAI,EAAE,oBAAoB;gBAC1B,QAAQ,EAAE,CAAC;wBACT,MAAM,EAAE,KAAK;wBACb,KAAK;wBACL,YAAY,EAAE,KAAK;qBACpB,CAAC;gBACF,KAAK,EAAE,YAAY,CAAC,OAAO;gBAC3B,cAAc,EAAE,aAAa;aAC9B;SACF,CAAC;IACJ,CAAC;IAED,eAAe,CAAC,KAAY;QAC1B,MAAM,GAAG,GAAG,KAAK,CAAC,MAA0B,CAAC;QAC7C,GAAG,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;IAC7B,CAAC;IAED,YAAY,CAAC,SAAgC;QAC3C,mBAAmB;QACnB,OAAO,IAAI,CAAA;;UAEL,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;YACxD,IAAI,CAAA;;;gBAGE,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;mBAC5B,IAAI,CAAC,eAAe;cACzB,CAAA,CAAC,CAAC,OAAO,CAAC,OAAO;;YAEnB,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC;mDACY,QAAQ,CAAC,eAAe,CAAC,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,CAAC;;aAEhI,CAAC;QACV,kBAAkB;IACpB,CAAC;IAED,gBAAgB,CAAC,SAAgC;QAC/C,mBAAmB;QACnB,OAAO,IAAI,CAAA;;wDAEyC;YAC5C,KAAK,EAAE,IAAI,CAAC,gBAAgB;YAC5B,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE;YACzB,oBAAoB,EAAE,SAAS,CAAC,gBAAgB;SAChB;gCACZ,IAAI,CAAC,cAAc;;;;;sBAK7B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,0BAA0B,EAAE,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;4BAC5F,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC;;;sBAGhD,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,kBAAkB,EAAE,UAAU,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;4BACnF,UAAU,CAAC,SAAS,CAAC,mBAAmB,CAAC;;;sBAG/C,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,uBAAuB,EAAE,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;4BACvF,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC;;;;gBAIpD,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;;;aAG/B,CAAC;QACV,kBAAkB;IACpB,CAAC;IAEQ,gBAAgB;QACvB,MAAM,OAAO,GACT,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,wBAAwB,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC5G,IAAI,CAAC,OAAO,EAAE,QAAQ,IAAI,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC;YAC/C,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,4CAA4C;QAC5C,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;IAChD,CAAC;IAEQ,MAAM;QACb,MAAM,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC/E,MAAM,eAAe,GAAG,uBAAuB,CAAC;YAC9C,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc;YACxC,eAAe,EAAE,IAAI,CAAC,eAAe;SACtC,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,YAAY,IAAI,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;QACvG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;IACpD,CAAC;;AASH,cAAc,CAAC,MAAM,CAAC,oCAAoC,EAAE,YAAY,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../../ui/components/icon_button/icon_button.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {eventRef} from './EventRef.js';\nimport {BaseInsight, shouldRenderForCategory} from './Helpers.js';\nimport type * as SidebarInsight from './SidebarInsight.js';\nimport {Category} from './types.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   *@description Title of an insight that provides details about the LCP metric, and the network requests necessary to load it. Details how the LCP request was discoverable - in other words, the path necessary to load it (ex: network requests, JavaScript)\n   */\n  title: 'LCP request discovery',\n  /**\n   *@description Description of an insight that provides details about the LCP metric, and the network requests necessary to load it.\n   */\n  description:\n      'Optimize LCP by making the LCP image [discoverable](https://web.dev/articles/optimize-lcp#1_eliminate_resource_load_delay) from the HTML immediately, and [avoiding lazy-loading](https://web.dev/articles/lcp-lazy-loading)',\n  /**\n   * @description Text to tell the user how long after the earliest discovery time their LCP element loaded.\n   * @example {401ms} PH1\n   */\n  lcpLoadDelay: 'LCP image loaded {PH1} after earliest start point.',\n  /**\n   * @description Text to tell the user that a fetchpriority property value of \"high\" is applied to the LCP request.\n   */\n  fetchPriorityApplied: 'fetchpriority=high applied',\n  /**\n   * @description Text to tell the user that the LCP request is discoverable in the initial document.\n   */\n  requestDiscoverable: 'Request is discoverable in initial document',\n  /**\n   * @description Text to tell the user that the LCP request does not have the lazy load property applied.\n   */\n  lazyLoadNotApplied: 'lazy load not applied',\n  /**\n   *@description Text for a screen-reader label to tell the user that the icon represents a successful insight check\n   *@example {Server response time} PH1\n   */\n  successAriaLabel: 'Insight check passed: {PH1}',\n  /**\n   *@description Text for a screen-reader label to tell the user that the icon represents an unsuccessful insight check\n   *@example {Server response time} PH1\n   */\n  failedAriaLabel: 'Insight check failed: {PH1}',\n\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/LCPDiscovery.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface LCPImageDiscoveryData {\n  shouldIncreasePriorityHint: boolean;\n  shouldPreloadImage: boolean;\n  shouldRemoveLazyLoading: boolean;\n  request: Trace.Types.Events.SyntheticNetworkRequest;\n  discoveryDelay: Trace.Types.Timing.MicroSeconds|null;\n  estimatedSavings: Trace.Types.Timing.MilliSeconds|null;\n}\n\nfunction getImageData(\n    insights: Trace.Insights.Types.TraceInsightSets|null, insightSetKey: string|null): LCPImageDiscoveryData|null {\n  const insight = Trace.Insights.Common.getInsight('LargestContentfulPaint', insights, insightSetKey);\n  if (!insight) {\n    return null;\n  }\n\n  if (insight.lcpRequest === undefined) {\n    return null;\n  }\n\n  const shouldIncreasePriorityHint = insight.shouldIncreasePriorityHint;\n  const shouldPreloadImage = insight.shouldPreloadImage;\n  const shouldRemoveLazyLoading = insight.shouldRemoveLazyLoading;\n\n  const imageLCP = shouldIncreasePriorityHint !== undefined && shouldPreloadImage !== undefined &&\n      shouldRemoveLazyLoading !== undefined;\n\n  // Shouldn't render anything if lcp insight is null or lcp is text.\n  if (!imageLCP) {\n    return null;\n  }\n\n  const data: LCPImageDiscoveryData = {\n    shouldIncreasePriorityHint,\n    shouldPreloadImage,\n    shouldRemoveLazyLoading,\n    request: insight.lcpRequest,\n    discoveryDelay: null,\n    estimatedSavings: insight.metricSavings?.LCP ?? null,\n  };\n\n  if (insight.earliestDiscoveryTimeTs && insight.lcpRequest) {\n    const discoveryDelay = insight.lcpRequest.ts - insight.earliestDiscoveryTimeTs;\n    data.discoveryDelay = Trace.Types.Timing.MicroSeconds(discoveryDelay);\n  }\n\n  return data;\n}\n\nexport class LCPDiscovery extends BaseInsight {\n  static override readonly litTagName = LitHtml.literal`devtools-performance-lcp-discovery`;\n  override insightCategory: Category = Category.LCP;\n  override internalName: string = 'lcp-discovery';\n  override userVisibleTitle: string = i18nString(UIStrings.title);\n  override description: string = i18nString(UIStrings.description);\n\n  #adviceIcon(didFail: boolean, label: string): LitHtml.TemplateResult {\n    const icon = didFail ? 'clear' : 'check-circle';\n\n    const ariaLabel = didFail ? i18nString(UIStrings.failedAriaLabel, {PH1: label}) :\n                                i18nString(UIStrings.successAriaLabel, {PH1: label});\n    return html`\n      <devtools-icon\n        aria-label=${ariaLabel}\n        name=${icon}\n        class=${didFail ? 'metric-value-bad' : 'metric-value-good'}\n      ></devtools-icon>\n    `;\n  }\n\n  #renderDiscoveryDelay(delay: Trace.Types.Timing.MicroSeconds): Element {\n    const timeWrapper = document.createElement('span');\n    timeWrapper.classList.add('discovery-time-ms');\n    timeWrapper.innerText = i18n.TimeUtilities.formatMicroSecondsTime(delay);\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.lcpLoadDelay, {PH1: timeWrapper});\n  }\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    const imageResults = getImageData(this.data.insights, this.data.insightSetKey);\n    if (!imageResults || !imageResults.discoveryDelay) {\n      return [];\n    }\n\n    const delay = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n        Trace.Types.Timing.MicroSeconds(imageResults.request.ts - imageResults.discoveryDelay),\n        imageResults.request.ts,\n    );\n\n    const label = html`<div class=\"discovery-delay\"> ${this.#renderDiscoveryDelay(delay.range)}</div>`;\n\n    return [\n      {\n        type: 'ENTRY_OUTLINE',\n        entry: imageResults.request,\n        outlineReason: 'ERROR',\n      },\n      {\n        type: 'CANDY_STRIPED_TIME_RANGE',\n        bounds: delay,\n        entry: imageResults.request,\n      },\n      {\n        type: 'TIMESPAN_BREAKDOWN',\n        sections: [{\n          bounds: delay,\n          label,\n          showDuration: false,\n        }],\n        entry: imageResults.request,\n        renderLocation: 'ABOVE_EVENT',\n      },\n    ];\n  }\n\n  #handleBadImage(event: Event): void {\n    const img = event.target as HTMLImageElement;\n    img.style.display = 'none';\n  }\n\n  #renderImage(imageData: LCPImageDiscoveryData): LitHtml.TemplateResult {\n    // clang-format off\n    return html`\n      <div class=\"lcp-element\">\n        ${imageData.request.args.data.mimeType.includes('image') ?\n          html`\n        <img\n          class=\"element-img\"\n          src=${imageData.request.args.data.url}\n          @error=${this.#handleBadImage}\n           />`: LitHtml.nothing}\n        <span class=\"element-img-details\">\n          ${eventRef(imageData.request)}\n          <span class=\"element-img-details-size\">${Platform.NumberUtilities.bytesToString(imageData.request.args.data.decodedBodyLength ?? 0)}</span>\n        </span>\n      </div>`;\n    // clang-format on\n  }\n\n  #renderDiscovery(imageData: LCPImageDiscoveryData): LitHtml.TemplateResult {\n    // clang-format off\n    return html`\n        <div class=\"insights\">\n          <devtools-performance-sidebar-insight .data=${{\n            title: this.userVisibleTitle,\n            description: this.description,\n            internalName: this.internalName,\n            expanded: this.isActive(),\n            estimatedSavingsTime: imageData.estimatedSavings,\n          } as SidebarInsight.InsightDetails}\n          @insighttoggleclick=${this.onSidebarClick}>\n            <div slot=\"insight-content\" class=\"insight-section\">\n              <div class=\"insight-results\">\n                <ul class=\"insight-icon-results\">\n                  <li class=\"insight-entry\">\n                    ${this.#adviceIcon(imageData.shouldIncreasePriorityHint, i18nString(UIStrings.fetchPriorityApplied))}\n                    <span>${i18nString(UIStrings.fetchPriorityApplied)}</span>\n                  </li>\n                  <li class=\"insight-entry\">\n                    ${this.#adviceIcon(imageData.shouldPreloadImage, i18nString(UIStrings.requestDiscoverable))}\n                    <span>${i18nString(UIStrings.requestDiscoverable)}</span>\n                  </li>\n                  <li class=\"insight-entry\">\n                    ${this.#adviceIcon(imageData.shouldRemoveLazyLoading, i18nString(UIStrings.lazyLoadNotApplied))}\n                    <span>${i18nString(UIStrings.lazyLoadNotApplied)}</span>\n                  </li>\n                </ul>\n              </div>\n              ${this.#renderImage(imageData)}\n            </div>\n          </devtools-performance-sidebar-insight>\n      </div>`;\n    // clang-format on\n  }\n\n  override getRelatedEvents(): Trace.Types.Events.Event[] {\n    const insight =\n        Trace.Insights.Common.getInsight('LargestContentfulPaint', this.data.insights, this.data.insightSetKey);\n    if (!insight?.lcpEvent || !insight?.lcpRequest) {\n      return [];\n    }\n\n    // TODO: add entire request initiator chain?\n    return [insight.lcpEvent, insight.lcpRequest];\n  }\n\n  override render(): void {\n    const imageResults = getImageData(this.data.insights, this.data.insightSetKey);\n    const matchesCategory = shouldRenderForCategory({\n      activeCategory: this.data.activeCategory,\n      insightCategory: this.insightCategory,\n    });\n    const output = imageResults && matchesCategory ? this.#renderDiscovery(imageResults) : LitHtml.nothing;\n    LitHtml.render(output, this.shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-lcp-discovery': LCPDiscovery;\n  }\n}\n\ncustomElements.define('devtools-performance-lcp-discovery', LCPDiscovery);\n"]}