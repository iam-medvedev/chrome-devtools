{"version":3,"file":"SidebarInsight.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/SidebarInsight.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as Buttons from '../../../../ui/components/buttons/buttons.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../../ui/visual_logging/visual_logging.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {md} from './Helpers.js';\nimport sidebarInsightStyles from './sidebarInsight.css.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   * @description Text to tell the user the estimated time or size savings for this insight.\n   * @example {401 ms} PH1\n   * @example {112 kB} PH1\n   */\n  estimatedSavings: 'Est savings: {PH1}',\n  /**\n   * @description Text to tell the user the estimated time and size savings for this insight.\n   * @example {401 ms} PH1\n   * @example {112 kB} PH2\n   */\n  estimatedSavingsTimingAndBytes: 'Est savings: {PH1} && {PH2}',\n  /**\n   * @description Used for screen-readers as a label on the button to expand an insight to view details\n   * @example {LCP by phase} PH1\n   */\n  viewDetails: 'View details for {PH1}',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/SidebarInsight.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface InsightDetails {\n  title: string;\n  description: string;\n  internalName: string;\n  expanded: boolean;\n  estimatedSavingsTime?: Trace.Types.Timing.MilliSeconds;\n  estimatedSavingsBytes?: number;\n}\n\nexport class InsightActivated extends Event {\n  static readonly eventName = 'insightactivated';\n\n  constructor(public name: string, public insightSetKey: string, public overlays: Overlays.Overlays.TimelineOverlay[]) {\n    super(InsightActivated.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class InsightDeactivated extends Event {\n  static readonly eventName = 'insightdeactivated';\n  constructor() {\n    super(InsightDeactivated.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class InsightSetHovered extends Event {\n  static readonly eventName = 'insightsethovered';\n  constructor(public bounds?: Trace.Types.Timing.TraceWindowMicroSeconds) {\n    super(InsightSetHovered.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class InsightProvideOverlays extends Event {\n  static readonly eventName = 'insightprovideoverlays';\n\n  constructor(\n      public overlays: Array<Overlays.Overlays.TimelineOverlay>,\n      public options: Overlays.Overlays.TimelineOverlaySetOptions) {\n    super(InsightProvideOverlays.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class InsightProvideRelatedEvents extends Event {\n  static readonly eventName = 'insightproviderelatedevents';\n\n  constructor(\n      public label: string, public events: Array<Trace.Types.Events.Event>, public activateInsight: () => void) {\n    super(InsightProvideRelatedEvents.eventName, {bubbles: true, composed: true});\n  }\n}\n\ndeclare global {\n  interface GlobalEventHandlersEventMap {\n    [InsightActivated.eventName]: InsightActivated;\n    [InsightDeactivated.eventName]: InsightDeactivated;\n    [InsightSetHovered.eventName]: InsightSetHovered;\n    [InsightProvideOverlays.eventName]: InsightProvideOverlays;\n    [InsightProvideRelatedEvents.eventName]: InsightProvideRelatedEvents;\n  }\n}\n\nexport class SidebarInsight extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-performance-sidebar-insight`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n\n  #insightTitle: string = '';\n  #insightDescription: string = '';\n  #insightInternalName: string = '';\n  #expanded: boolean = false;\n  #estimatedSavingsTime: Trace.Types.Timing.MilliSeconds|undefined = undefined;\n  #estimatedSavingsBytes: number|undefined = undefined;\n\n  set data(data: InsightDetails) {\n    this.#insightTitle = data.title;\n    this.#insightDescription = data.description;\n    this.#insightInternalName = data.internalName;\n    this.#expanded = data.expanded;\n    this.#estimatedSavingsTime = data.estimatedSavingsTime;\n    this.#estimatedSavingsBytes = data.estimatedSavingsBytes;\n\n    // Used for testing.\n    this.dataset.insightTitle = data.title;\n    if (data.expanded) {\n      this.dataset.insightExpanded = '';\n    } else {\n      delete this.dataset.insightExpanded;\n    }\n\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [sidebarInsightStyles];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #dispatchInsightToggle(): void {\n    this.dispatchEvent(new CustomEvent('insighttoggleclick'));\n  }\n\n  #renderHoverIcon(insightIsActive: boolean): LitHtml.TemplateResult {\n    // clang-format off\n    const containerClasses = LitHtml.Directives.classMap({\n      'insight-hover-icon': true,\n      active: insightIsActive,\n    });\n    return html`\n      <div class=${containerClasses} inert>\n        <devtools-button .data=${{\n          variant: Buttons.Button.Variant.ICON,\n          iconName: 'chevron-down',\n          size: Buttons.Button.Size.SMALL,\n        } as Buttons.Button.ButtonData}\n      ></devtools-button>\n      </div>\n\n    `;\n    // clang-format on\n  }\n\n  /**\n   * Ensure that if the user presses enter or space on a header, we treat it\n   * like a click and toggle the insight.\n   */\n  #handleHeaderKeyDown(event: KeyboardEvent): void {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      event.stopPropagation();\n      this.#dispatchInsightToggle();\n    }\n  }\n\n  #getEstimatedSavingsString(): string|null {\n    let timeString, bytesString;\n    if (this.#estimatedSavingsTime !== undefined && this.#estimatedSavingsTime > 0) {\n      timeString = i18n.TimeUtilities.millisToString(this.#estimatedSavingsTime);\n    }\n    if (this.#estimatedSavingsBytes !== undefined && this.#estimatedSavingsBytes > 0) {\n      bytesString = Platform.NumberUtilities.bytesToString(this.#estimatedSavingsBytes);\n    }\n\n    if (timeString && bytesString) {\n      return i18nString(UIStrings.estimatedSavingsTimingAndBytes, {\n        PH1: timeString,\n        PH2: bytesString,\n      });\n    }\n    if (timeString) {\n      return i18nString(UIStrings.estimatedSavings, {\n        PH1: timeString,\n      });\n    }\n    if (bytesString) {\n      return i18nString(UIStrings.estimatedSavings, {\n        PH1: bytesString,\n      });\n    }\n\n    return null;\n  }\n\n  #render(): void {\n    const containerClasses = LitHtml.Directives.classMap({\n      insight: true,\n      closed: !this.#expanded,\n    });\n    const estimatedSavingsString = this.#getEstimatedSavingsString();\n\n    // clang-format off\n    const output = html`\n      <div class=${containerClasses}>\n        <header @click=${this.#dispatchInsightToggle}\n          @keydown=${this.#handleHeaderKeyDown}\n          jslog=${VisualLogging.action(`timeline.toggle-insight.${this.#insightInternalName}`).track({click: true})}\n          tabIndex=\"0\"\n          role=\"button\"\n          aria-expanded=${this.#expanded}\n          aria-label=${i18nString(UIStrings.viewDetails, {PH1: this.#insightTitle})}\n        >\n          ${this.#renderHoverIcon(this.#expanded)}\n          <h3 class=\"insight-title\">${this.#insightTitle}</h3>\n          ${estimatedSavingsString ?\n            html`\n            <slot name=\"insight-savings\" class=\"insight-savings\">\n              ${estimatedSavingsString}\n            </slot>\n          </div>`\n          : LitHtml.nothing}\n        </header>\n        ${this.#expanded ? html`\n          <div class=\"insight-body\">\n            <div class=\"insight-description\">${this.#insightDescription ? md(this.#insightDescription) : LitHtml.nothing}</div>\n            <div class=\"insight-content\">\n              <slot name=\"insight-content\"></slot>\n            </div>\n          </div>`\n          : LitHtml.nothing\n        }\n      </div>\n    `;\n    // clang-format on\n    LitHtml.render(output, this.#shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-sidebar-insight': SidebarInsight;\n  }\n}\n\ncustomElements.define('devtools-performance-sidebar-insight', SidebarInsight);\n"]}