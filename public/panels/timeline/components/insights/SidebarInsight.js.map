{"version":3,"file":"SidebarInsight.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/SidebarInsight.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAe7B,MAAM,OAAO,gBAAiB,SAAQ,KAAK;IAGtB;IAA4B;IAF/C,MAAM,CAAU,SAAS,GAAG,kBAAkB,CAAC;IAE/C,YAAmB,KAAmB,EAAS,aAAqB;QAClE,KAAK,CAAC,gBAAgB,CAAC,SAAS,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QADlD,UAAK,GAAL,KAAK,CAAc;QAAS,kBAAa,GAAb,aAAa,CAAQ;IAEpE,CAAC;;AAGH,MAAM,OAAO,kBAAmB,SAAQ,KAAK;IAC3C,MAAM,CAAU,SAAS,GAAG,oBAAoB,CAAC;IACjD;QACE,KAAK,CAAC,kBAAkB,CAAC,SAAS,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;IACvE,CAAC;;AAGH,MAAM,OAAO,iBAAkB,SAAQ,KAAK;IAEvB;IADnB,MAAM,CAAU,SAAS,GAAG,mBAAmB,CAAC;IAChD,YAAmB,MAA4C;QAC7D,KAAK,CAAC,iBAAiB,CAAC,SAAS,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QADnD,WAAM,GAAN,MAAM,CAAsC;IAE/D,CAAC;;AAGH,MAAM,OAAO,cAAe,SAAQ,KAAK;IAEpB;IADnB,MAAM,CAAU,SAAS,GAAG,gBAAgB,CAAC;IAC7C,YAAmB,MAA2C;QAC5D,KAAK,CAAC,cAAc,CAAC,SAAS,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QADhD,WAAM,GAAN,MAAM,CAAqC;IAE9D,CAAC;;AAGH,MAAM,OAAO,sBAAuB,SAAQ,KAAK;IAIpC;IACA;IAJX,MAAM,CAAU,SAAS,GAAG,wBAAwB,CAAC;IAErD,YACW,QAA6C,EAC7C,OAAoD;QAC7D,KAAK,CAAC,sBAAsB,CAAC,SAAS,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAFhE,aAAQ,GAAR,QAAQ,CAAqC;QAC7C,YAAO,GAAP,OAAO,CAA6C;IAE/D,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {InsightModel} from '../../../../models/trace/insights/types.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nexport interface InsightDetails {\n  title: string;\n  description: string;\n  internalName: string;\n  expanded: boolean;\n  estimatedSavingsTime?: Trace.Types.Timing.Milli;\n  estimatedSavingsBytes?: number;\n}\n\nexport class InsightActivated extends Event {\n  static readonly eventName = 'insightactivated';\n\n  constructor(public model: InsightModel, public insightSetKey: string) {\n    super(InsightActivated.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class InsightDeactivated extends Event {\n  static readonly eventName = 'insightdeactivated';\n  constructor() {\n    super(InsightDeactivated.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class InsightSetHovered extends Event {\n  static readonly eventName = 'insightsethovered';\n  constructor(public bounds?: Trace.Types.Timing.TraceWindowMicro) {\n    super(InsightSetHovered.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class InsightSetZoom extends Event {\n  static readonly eventName = 'insightsetzoom';\n  constructor(public bounds: Trace.Types.Timing.TraceWindowMicro) {\n    super(InsightSetZoom.eventName, {bubbles: true, composed: true});\n  }\n}\n\nexport class InsightProvideOverlays extends Event {\n  static readonly eventName = 'insightprovideoverlays';\n\n  constructor(\n      public overlays: Overlays.Overlays.TimelineOverlay[],\n      public options: Overlays.Overlays.TimelineOverlaySetOptions) {\n    super(InsightProvideOverlays.eventName, {bubbles: true, composed: true});\n  }\n}\n\ndeclare global {\n  interface GlobalEventHandlersEventMap {\n    [InsightActivated.eventName]: InsightActivated;\n    [InsightDeactivated.eventName]: InsightDeactivated;\n    [InsightSetHovered.eventName]: InsightSetHovered;\n    [InsightSetZoom.eventName]: InsightSetZoom;\n    [InsightProvideOverlays.eventName]: InsightProvideOverlays;\n  }\n}\n"]}