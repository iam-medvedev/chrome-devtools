{"version":3,"file":"BaseInsightComponent.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/BaseInsightComponent.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,0DAA0D,CAAC;AAElE,OAAO,KAAK,MAAM,MAAM,mCAAmC,CAAC;AAC5D,OAAO,KAAK,IAAI,MAAM,+BAA+B,CAAC;AACtD,OAAO,KAAK,IAAI,MAAM,+BAA+B,CAAC;AAGtD,OAAO,KAAK,KAAK,MAAM,mCAAmC,CAAC;AAC3D,OAAO,KAAK,OAAO,MAAM,8CAA8C,CAAC;AACxE,OAAO,KAAK,gBAAgB,MAAM,8CAA8C,CAAC;AACjF,OAAO,KAAK,EAAE,MAAM,iCAAiC,CAAC;AACtD,OAAO,KAAK,GAAG,MAAM,2BAA2B,CAAC;AACjD,OAAO,KAAK,aAAa,MAAM,iDAAiD,CAAC;AAEjF,OAAO,EAAC,EAAE,EAAC,MAAM,wBAAwB,CAAC;AAC1C,OAAO,KAAK,KAAK,MAAM,sBAAsB,CAAC;AAE9C,OAAO,6BAA6B,MAAM,+BAA+B,CAAC;AAC1E,OAAO,KAAK,cAAc,MAAM,qBAAqB,CAAC;AAGtD,4EAA4E;AAC5E,MAAM,0BAA0B,GAAG,IAAI,aAAa,EAAE,CAAC;AACvD,0BAA0B,CAAC,WAAW,CAAC,6BAA6B,CAAC,UAAU,CAAC,CAAC;AAEjF,MAAM,EAAC,IAAI,EAAC,GAAG,GAAG,CAAC;AAEnB,MAAM,SAAS,GAAG;IAChB;;;;OAIG;IACH,gBAAgB,EAAE,oBAAoB;IACtC;;;;OAIG;IACH,8BAA8B,EAAE,4BAA4B;IAC5D;;;OAGG;IACH,WAAW,EAAE,wBAAwB;CAC7B,CAAC;AAEX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,6DAA6D,EAAE,SAAS,CAAC,CAAC;AACnH,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAQtE,MAAM,OAAgB,oBAA6C,SAAQ,WAAW;IAEpF,0EAA0E;IAC1E,wDAAwD;IACxD,MAAM,CAAU,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC,OAAO,CAAA,EAAE,CAAC;IAEnC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAE9D,SAAS,GAAG,KAAK,CAAC;IAClB,MAAM,GAAW,IAAI,CAAC;IACtB,YAAY,GAA0C,IAAI,CAAC;IAC3D,aAAa,GAAsD,IAAI,CAAC;IAExE,qBAAqB,GAAG,KAAK,CAAC;IAE9B,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAES,IAAI,GAAoB;QAChC,MAAM,EAAE,IAAI;QACZ,aAAa,EAAE,IAAI;KACpB,CAAC;IAEO,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvC,gBAAgB,GAAe;QACtC,aAAa,EAAE,IAAI;QACnB,iBAAiB,EAAE,KAAK;KACzB,CAAC;IACF,gBAAgB,GAA6C,IAAI,CAAC;IAExD,cAAc;QACtB,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAChE,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,aAAa,CAAC,OAAO,CAAC,qBAAqB,IAAI,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;QACjG,qDAAqD;QACrD,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;QAE7C,MAAM,EAAC,oCAAoC,EAAC,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;QACvE,IAAI,CAAC,qBAAqB;YACtB,OAAO,CAAC,oCAAoC,EAAE,OAAO,IAAI,oCAAoC,EAAE,eAAe,CAAC,CAAC;IACtH,CAAC;IAED,IAAI,QAAQ,CAAC,QAAiB;QAC5B,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,QAAQ,EAAE,CAAC;YAChC,IAAI,CAAC,aAAa,CACd,IAAI,cAAc,CAAC,sBAAsB,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE,EAAC,iBAAiB,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;QACvG,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAI,KAAK,CAAC,KAAQ;QAChB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IAED,IAAI,aAAa,CAAC,aAA0B;QAC1C,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACxC,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;IAC1B,CAAC;IAED,IAAI,MAAM,CAAC,MAAgD;QACzD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAC1B,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IAED,IAAI,WAAW,CAAC,WAA6C;QAC3D,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IAClC,CAAC;IAED,IAAI,YAAY,CAAC,YAA0D;QACzE,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACpC,CAAC;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED,sBAAsB;QACpB,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,IAAI,CAAC,aAAa,CAAC,IAAI,cAAc,CAAC,kBAAkB,EAAE,CAAC,CAAC;YAC5D,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YACpF,OAAO;QACT,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YAC5C,8CAA8C;YAC9C,OAAO;QACT,CAAC;QAED,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAClE,IAAI,CAAC,gBAAgB,CAAC,aAAa,GAAG,IAAI,CAAC;QAC3C,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAEhD,IAAI,CAAC,aAAa,CAAC,IAAI,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;IAC/F,CAAC;IAED,gBAAgB,CAAC,eAAwB;QACvC,mBAAmB;QACnB,MAAM,gBAAgB,GAAG,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC;YAC/C,oBAAoB,EAAE,IAAI;YAC1B,MAAM,EAAE,eAAe;SACxB,CAAC,CAAC;QACH,OAAO,IAAI,CAAA;mBACI,gBAAgB;iCACF;YACvB,OAAO,0CAA6B;YACpC,QAAQ,EAAE,cAAc;YACxB,IAAI,yCAA2B;SACH;;;;KAIjC,CAAC;QACF,kBAAkB;IACpB,CAAC;IAED;;;OAGG;IACH,oBAAoB,CAAC,KAAoB;QACvC,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,EAAE,CAAC;YAC/C,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,KAAK,CAAC,eAAe,EAAE,CAAC;YACxB,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAChC,CAAC;IACH,CAAC;IAED;;;;;;;;OAQG;IACH,uBAAuB,CACnB,QAAkD,EAAE,OAAoD;QAC1G,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACpB,OAAO;QACT,CAAC;QAED,IAAI,CAAC,aAAa,CAAC,IAAI,cAAc,CAAC,sBAAsB,CAAC,QAAQ,IAAI,IAAI,CAAC,kBAAkB,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;IAChH,CAAC;IAED,kBAAkB;QAChB,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,OAAO,IAAI,CAAC,gBAAgB,CAAC;QAC/B,CAAC;QAED,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAC9C,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAMD,OAAO;QACL,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO;QACT,CAAC;QAED,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED,uBAAuB;QACrB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,wBAAwB;QACtB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,0BAA0B;QACxB,MAAM,WAAW,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACnD,MAAM,YAAY,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAErD,IAAI,UAAU,EAAE,WAAW,CAAC;QAC5B,IAAI,WAAW,EAAE,CAAC;YAChB,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAC9D,CAAC;QACD,IAAI,YAAY,EAAE,CAAC;YACjB,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAC/D,CAAC;QAED,IAAI,UAAU,IAAI,WAAW,EAAE,CAAC;YAC9B,OAAO,UAAU,CAAC,SAAS,CAAC,8BAA8B,EAAE;gBAC1D,GAAG,EAAE,UAAU;gBACf,GAAG,EAAE,WAAW;aACjB,CAAC,CAAC;QACL,CAAC;QACD,IAAI,UAAU,EAAE,CAAC;YACf,OAAO,UAAU,CAAC,SAAS,CAAC,gBAAgB,EAAE;gBAC5C,GAAG,EAAE,UAAU;aAChB,CAAC,CAAC;QACL,CAAC;QACD,IAAI,WAAW,EAAE,CAAC;YAChB,OAAO,UAAU,CAAC,SAAS,CAAC,gBAAgB,EAAE;gBAC5C,GAAG,EAAE,WAAW;aACjB,CAAC,CAAC;QACL,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAES,UAAU,CAAC,aAAyC,EAAE,YAAqB;QACnF,MAAM,QAAQ,GAAG,YAAY,IAAI,GAAG,CAAC,OAAO,CAAC;QAC7C,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,OAAO,IAAI,CAAA,GAAG,QAAQ,EAAE,CAAC;QAC3B,CAAC;QAED,MAAM,cAAc,GAChB,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,uBAAuB,CAAC,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAW,EAAE;YACvG,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,OAAO,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEP,OAAO,IAAI,CAAA,GAAG,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,cAAc,EAAE,QAAQ,CAAC,EAAE,CAAC;IACjE,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvC,OAAO;QACT,CAAC;QAED,2CAA2C;QAC3C,MAAM,QAAQ,GAAG,qCAAqC,CAAC;QACvD,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC;YACrE,OAAO;QACT,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,KAAK,CAAC,gBAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACzF,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,gBAAgB,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QAEvF,2CAA2C;QAC3C,MAAM,MAAM,GAAG,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC/E,KAAK,MAAM,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAED,qBAAqB,CAAC,YAAe;QACnC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACpB,OAAO,GAAG,CAAC,OAAO,CAAC;QACrB,CAAC;QACD,0DAA0D;QAC1D,kDAAkD;QAClD,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACrC,mBAAmB;QACnB,OAAO,IAAI,CAAA;;2CAE4B,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC;uCAChC,OAAO;UACpC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAAA;;;yBAGlB,gDAA+B;0BAC9B,iBAAiB;;uBAEpB,IAAI,CAAC,iBAAiB;;;SAGpC,CAAA,CAAC,CAAC,GAAG,CAAC,OAAO;aACT,CAAC;QACV,kBAAkB;IACpB,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACjB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;YACnD,OAAO;QACT,CAAC;QAED,MAAM,gBAAgB,GAAG,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC;YAC/C,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,CAAC,IAAI,CAAC,SAAS;SACxB,CAAC,CAAC;QACH,MAAM,sBAAsB,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAEjE,mBAAmB;QACnB,MAAM,MAAM,GAAG,IAAI,CAAA;mBACJ,gBAAgB;yBACV,IAAI,CAAC,sBAAsB;qBAC/B,IAAI,CAAC,oBAAoB;kBAC5B,aAAa,CAAC,MAAM,CAAC,2BAA2B,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC;;;0BAGjF,IAAI,CAAC,SAAS;uBACjB,UAAU,CAAC,SAAS,CAAC,WAAW,EAAE,EAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAC,CAAC;;YAEtE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC;sCACX,IAAI,CAAC,MAAM,EAAE,KAAK;YAC5C,sBAAsB,CAAC,CAAC;YACxB,IAAI,CAAA;;gBAEA,sBAAsB;;iBAErB;YACP,CAAC,CAAC,GAAG,CAAC,OAAO;;UAEb,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC;;KAE5C,CAAC;QACF,kBAAkB;QAElB,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;QAE9C,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,qBAAqB,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC;QAC1F,CAAC;IACH,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../../ui/components/markdown_view/markdown_view.js';\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Root from '../../../../core/root/root.js';\nimport type * as Protocol from '../../../../generated/protocol.js';\nimport type {InsightModel} from '../../../../models/trace/insights/types.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Buttons from '../../../../ui/components/buttons/buttons.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as UI from '../../../../ui/legacy/legacy.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../../ui/visual_logging/visual_logging.js';\nimport type * as Overlays from '../../overlays/overlays.js';\nimport {md} from '../../utils/Helpers.js';\nimport * as Utils from '../../utils/utils.js';\n\nimport baseInsightComponentStylesRaw from './baseInsightComponent.css.js';\nimport * as SidebarInsight from './SidebarInsight.js';\nimport type {TableState} from './Table.js';\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst baseInsightComponentStyles = new CSSStyleSheet();\nbaseInsightComponentStyles.replaceSync(baseInsightComponentStylesRaw.cssContent);\n\nconst {html} = Lit;\n\nconst UIStrings = {\n  /**\n   * @description Text to tell the user the estimated time or size savings for this insight. \"&\" means \"and\" - space is limited to prefer abbreviated terms if possible. Text will still fit if not short, it just won't look very good, so using no abbreviations is fine if necessary.\n   * @example {401 ms} PH1\n   * @example {112 kB} PH1\n   */\n  estimatedSavings: 'Est savings: {PH1}',\n  /**\n   * @description Text to tell the user the estimated time and size savings for this insight. \"&\" means \"and\", \"Est\" means \"Estimated\" - space is limited to prefer abbreviated terms if possible. Text will still fit if not short, it just won't look very good, so using no abbreviations is fine if necessary.\n   * @example {401 ms} PH1\n   * @example {112 kB} PH2\n   */\n  estimatedSavingsTimingAndBytes: 'Est savings: {PH1} & {PH2}',\n  /**\n   * @description Used for screen-readers as a label on the button to expand an insight to view details\n   * @example {LCP by phase} PH1\n   */\n  viewDetails: 'View details for {PH1}',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/BaseInsightComponent.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface BaseInsightData {\n  bounds: Trace.Types.Timing.TraceWindowMicro|null;\n  /** The key into `insights` that contains this particular insight. */\n  insightSetKey: string|null;\n}\n\nexport abstract class BaseInsightComponent<T extends InsightModel> extends HTMLElement {\n  abstract internalName: string;\n  // So we can use the TypeScript BaseInsight class without getting warnings\n  // about litTagName. Every child should overrwrite this.\n  static readonly litTagName = Lit.StaticHtml.literal``;\n\n  protected readonly shadow = this.attachShadow({mode: 'open'});\n\n  #selected = false;\n  #model: T|null = null;\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace|null = null;\n  #fieldMetrics: Trace.Insights.Common.CrUXFieldMetricResults|null = null;\n\n  #insightsAskAiEnabled = false;\n\n  get model(): T|null {\n    return this.#model;\n  }\n\n  protected data: BaseInsightData = {\n    bounds: null,\n    insightSetKey: null,\n  };\n\n  readonly #boundRender = this.#render.bind(this);\n  readonly sharedTableState: TableState = {\n    selectedRowEl: null,\n    selectionIsSticky: false,\n  };\n  #initialOverlays: Overlays.Overlays.TimelineOverlay[]|null = null;\n\n  protected scheduleRender(): void {\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  connectedCallback(): void {\n    this.shadow.adoptedStyleSheets.push(baseInsightComponentStyles);\n    this.setAttribute('jslog', `${VisualLogging.section(`timeline.insights.${this.internalName}`)}`);\n    // Used for unit test purposes when querying the DOM.\n    this.dataset.insightName = this.internalName;\n\n    const {devToolsAiAssistancePerformanceAgent} = Root.Runtime.hostConfig;\n    this.#insightsAskAiEnabled =\n        Boolean(devToolsAiAssistancePerformanceAgent?.enabled && devToolsAiAssistancePerformanceAgent?.insightsEnabled);\n  }\n\n  set selected(selected: boolean) {\n    if (!this.#selected && selected) {\n      this.dispatchEvent(\n          new SidebarInsight.InsightProvideOverlays(this.getInitialOverlays(), {updateTraceWindow: true}));\n    }\n\n    this.#selected = selected;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  get selected(): boolean {\n    return this.#selected;\n  }\n\n  set model(model: T) {\n    this.#model = model;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set insightSetKey(insightSetKey: string|null) {\n    this.data.insightSetKey = insightSetKey;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  get bounds(): Trace.Types.Timing.TraceWindowMicro|null {\n    return this.data.bounds;\n  }\n\n  set bounds(bounds: Trace.Types.Timing.TraceWindowMicro|null) {\n    this.data.bounds = bounds;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set parsedTrace(parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    this.#parsedTrace = parsedTrace;\n  }\n\n  set fieldMetrics(fieldMetrics: Trace.Insights.Common.CrUXFieldMetricResults) {\n    this.#fieldMetrics = fieldMetrics;\n  }\n\n  get fieldMetrics(): Trace.Insights.Common.CrUXFieldMetricResults|null {\n    return this.#fieldMetrics;\n  }\n\n  #dispatchInsightToggle(): void {\n    if (this.#selected) {\n      this.dispatchEvent(new SidebarInsight.InsightDeactivated());\n      UI.Context.Context.instance().setFlavor(Utils.InsightAIContext.ActiveInsight, null);\n      return;\n    }\n\n    if (!this.data.insightSetKey || !this.model) {\n      // Shouldn't happen, but needed to satisfy TS.\n      return;\n    }\n\n    this.sharedTableState.selectedRowEl?.classList.remove('selected');\n    this.sharedTableState.selectedRowEl = null;\n    this.sharedTableState.selectionIsSticky = false;\n\n    this.dispatchEvent(new SidebarInsight.InsightActivated(this.model, this.data.insightSetKey));\n  }\n\n  #renderHoverIcon(insightIsActive: boolean): Lit.TemplateResult {\n    // clang-format off\n    const containerClasses = Lit.Directives.classMap({\n      'insight-hover-icon': true,\n      active: insightIsActive,\n    });\n    return html`\n      <div class=${containerClasses} inert>\n        <devtools-button .data=${{\n          variant: Buttons.Button.Variant.ICON,\n          iconName: 'chevron-down',\n          size: Buttons.Button.Size.SMALL,\n        } as Buttons.Button.ButtonData}\n      ></devtools-button>\n      </div>\n\n    `;\n    // clang-format on\n  }\n\n  /**\n   * Ensure that if the user presses enter or space on a header, we treat it\n   * like a click and toggle the insight.\n   */\n  #handleHeaderKeyDown(event: KeyboardEvent): void {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      event.stopPropagation();\n      this.#dispatchInsightToggle();\n    }\n  }\n\n  /**\n   * Replaces the initial insight overlays with the ones provided.\n   *\n   * If `overlays` is null, reverts back to the initial overlays.\n   *\n   * This allows insights to provide an initial set of overlays,\n   * and later temporarily replace all of those insights with a different set.\n   * This enables the hover/click table interactions.\n   */\n  toggleTemporaryOverlays(\n      overlays: Overlays.Overlays.TimelineOverlay[]|null, options: Overlays.Overlays.TimelineOverlaySetOptions): void {\n    if (!this.#selected) {\n      return;\n    }\n\n    this.dispatchEvent(new SidebarInsight.InsightProvideOverlays(overlays ?? this.getInitialOverlays(), options));\n  }\n\n  getInitialOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    if (this.#initialOverlays) {\n      return this.#initialOverlays;\n    }\n\n    this.#initialOverlays = this.createOverlays();\n    return this.#initialOverlays;\n  }\n\n  protected abstract createOverlays(): Overlays.Overlays.TimelineOverlay[];\n\n  protected abstract renderContent(): Lit.LitTemplate;\n\n  #render(): void {\n    if (!this.model) {\n      return;\n    }\n\n    this.#renderWithContent();\n  }\n\n  getEstimatedSavingsTime(): Trace.Types.Timing.Milli|null {\n    return null;\n  }\n\n  getEstimatedSavingsBytes(): number|null {\n    return null;\n  }\n\n  #getEstimatedSavingsString(): string|null {\n    const savingsTime = this.getEstimatedSavingsTime();\n    const savingsBytes = this.getEstimatedSavingsBytes();\n\n    let timeString, bytesString;\n    if (savingsTime) {\n      timeString = i18n.TimeUtilities.millisToString(savingsTime);\n    }\n    if (savingsBytes) {\n      bytesString = i18n.ByteUtilities.bytesToString(savingsBytes);\n    }\n\n    if (timeString && bytesString) {\n      return i18nString(UIStrings.estimatedSavingsTimingAndBytes, {\n        PH1: timeString,\n        PH2: bytesString,\n      });\n    }\n    if (timeString) {\n      return i18nString(UIStrings.estimatedSavings, {\n        PH1: timeString,\n      });\n    }\n    if (bytesString) {\n      return i18nString(UIStrings.estimatedSavings, {\n        PH1: bytesString,\n      });\n    }\n\n    return null;\n  }\n\n  protected renderNode(backendNodeId: Protocol.DOM.BackendNodeId, fallbackText?: string): Lit.LitTemplate {\n    const fallback = fallbackText ?? Lit.nothing;\n    if (!this.#parsedTrace) {\n      return html`${fallback}`;\n    }\n\n    const domNodePromise =\n        Trace.Extras.FetchNodes.domNodeForBackendNodeID(this.#parsedTrace, backendNodeId).then((node): unknown => {\n          if (!node) {\n            return fallback;\n          }\n          return Common.Linkifier.Linkifier.linkify(node);\n        });\n\n    return html`${Lit.Directives.until(domNodePromise, fallback)}`;\n  }\n\n  #askAIButtonClick(): void {\n    if (!this.#model || !this.#parsedTrace) {\n      return;\n    }\n\n    // matches the one in ai_assistance-meta.ts\n    const actionId = 'drjones.performance-insight-context';\n    if (!UI.ActionRegistry.ActionRegistry.instance().hasAction(actionId)) {\n      return;\n    }\n\n    const context = new Utils.InsightAIContext.ActiveInsight(this.#model, this.#parsedTrace);\n    UI.Context.Context.instance().setFlavor(Utils.InsightAIContext.ActiveInsight, context);\n\n    // Trigger the AI Assistance panel to open.\n    const action = UI.ActionRegistry.ActionRegistry.instance().getAction(actionId);\n    void action.execute();\n  }\n\n  #renderInsightContent(insightModel: T): Lit.LitTemplate {\n    if (!this.#selected) {\n      return Lit.nothing;\n    }\n    // Only render the insight body content if it is selected.\n    // To avoid re-rendering triggered from elsewhere.\n    const content = this.renderContent();\n    // clang-format off\n    return html`\n      <div class=\"insight-body\">\n        <div class=\"insight-description\">${md(insightModel.description)}</div>\n        <div class=\"insight-content\">${content}</div>\n        ${this.#insightsAskAiEnabled ? html`\n          <div class=\"ask-ai-btn-wrap\">\n            <devtools-button class=\"ask-ai\"\n              .variant=${Buttons.Button.Variant.OUTLINED}\n              .iconName=${'smart-assistant'}\n              data-insights-ask-ai\n              @click=${this.#askAIButtonClick}\n            >Ask AI</devtools-button>\n          </div>\n        `: Lit.nothing}\n      </div>`;\n    // clang-format on\n  }\n\n  #renderWithContent(): void {\n    if (!this.#model) {\n      Lit.render(Lit.nothing, this.shadow, {host: this});\n      return;\n    }\n\n    const containerClasses = Lit.Directives.classMap({\n      insight: true,\n      closed: !this.#selected,\n    });\n    const estimatedSavingsString = this.#getEstimatedSavingsString();\n\n    // clang-format off\n    const output = html`\n      <div class=${containerClasses}>\n        <header @click=${this.#dispatchInsightToggle}\n          @keydown=${this.#handleHeaderKeyDown}\n          jslog=${VisualLogging.action(`timeline.toggle-insight.${this.internalName}`).track({click: true})}\n          tabIndex=\"0\"\n          role=\"button\"\n          aria-expanded=${this.#selected}\n          aria-label=${i18nString(UIStrings.viewDetails, {PH1: this.#model.title})}\n        >\n          ${this.#renderHoverIcon(this.#selected)}\n          <h3 class=\"insight-title\">${this.#model?.title}</h3>\n          ${estimatedSavingsString ?\n            html`\n            <slot name=\"insight-savings\" class=\"insight-savings\">\n              ${estimatedSavingsString}\n            </slot>\n          </div>`\n          : Lit.nothing}\n        </header>\n        ${this.#renderInsightContent(this.#model)}\n      </div>\n    `;\n    // clang-format on\n\n    Lit.render(output, this.shadow, {host: this});\n\n    if (this.#selected) {\n      requestAnimationFrame(() => requestAnimationFrame(() => this.scrollIntoViewIfNeeded()));\n    }\n  }\n}\n"]}