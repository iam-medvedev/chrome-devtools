{"version":3,"file":"ImageDelivery.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/ImageDelivery.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../../ui/components/icon_button/icon_button.js';\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {\n  ImageDeliveryInsightModel, ImageOptimizationType, OptimizableImage} from\n  '../../../../models/trace/insights/ImageDelivery.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {imageRef} from './EventRef.js';\nimport type {TableDataRow} from './Table.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   * @description Column header for a table column containing network requests for images that are not sized correctly for how they are displayed on the page.\n   */\n  sizeAppropriately: 'Size appropriately',\n  /**\n   * @description Column header for a table column containing network requests for images which can improve their file size (e.g. use a different format, increase compression, etc).\n   */\n  optimizeFile: 'Optimize file size',\n  /**\n   * @description Table row value representing the remaining items not shown in the table due to size constraints. This row will always represent at least 2 items.\n   * @example {5} PH1\n   */\n  others: '{PH1} others',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/ImageDelivery.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ImageDelivery extends BaseInsightComponent<ImageDeliveryInsightModel> {\n  static override readonly litTagName = LitHtml.literal`devtools-performance-image-delivery`;\n  override internalName: string = 'image-delivery';\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    if (!this.model) {\n      return [];\n    }\n\n    const {optimizableImages} = this.model;\n    return optimizableImages.map(image => this.#createOverlayForRequest(image.request));\n  }\n\n  #createOverlayForRequest(request: Trace.Types.Events.SyntheticNetworkRequest): Overlays.Overlays.EntryOutline {\n    return {\n      type: 'ENTRY_OUTLINE',\n      entry: request,\n      outlineReason: 'ERROR',\n    };\n  }\n\n  #getTopImagesAsRows(\n      optimizableImages: OptimizableImage[], typeFilter: (type: ImageOptimizationType) => boolean,\n      showDimensions?: boolean): TableDataRow[] {\n    const MAX_REQUESTS = 3;\n    const topImages =\n        optimizableImages.filter(image => image.optimizations.some(o => typeFilter(o.type)))\n            .sort((a, b) => b.request.args.data.decodedBodyLength - a.request.args.data.decodedBodyLength);\n\n    const remaining = topImages.splice(MAX_REQUESTS);\n\n    const rows: TableDataRow[] = topImages.map(image => ({\n                                                 values: [\n                                                   imageRef(\n                                                       image.request,\n                                                       showDimensions ? image.largestImagePaint : undefined,\n                                                       ),\n                                                 ],\n                                                 overlays: [this.#createOverlayForRequest(image.request)],\n                                               }));\n\n    if (remaining.length > 0) {\n      const value = remaining.length > 1 ? i18nString(UIStrings.others, {PH1: remaining.length}) :\n                                           imageRef(\n                                               remaining[0].request,\n                                               showDimensions ? remaining[0].largestImagePaint : undefined,\n                                           );\n      rows.push({\n        values: [value],\n        overlays: remaining.map(r => this.#createOverlayForRequest(r.request)),\n      });\n    }\n\n    return rows;\n  }\n\n  #renderContent(): LitHtml.LitTemplate {\n    if (!this.model) {\n      return LitHtml.nothing;\n    }\n\n    const optimizableImages = this.model.optimizableImages;\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.sizeAppropriately)],\n            rows: this.#getTopImagesAsRows(optimizableImages, type => type === 'responsive-size', true),\n          }}>\n        </devtools-performance-table>\n      </div>\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.optimizeFile)],\n            rows: this.#getTopImagesAsRows(optimizableImages, type => type !== 'responsive-size'),\n          }}>\n        </devtools-performance-table>\n      </div>`;\n    // clang-format on\n  }\n\n  override render(): void {\n    if (!this.model) {\n      return;\n    }\n\n    this.renderWithContent(this.#renderContent());\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-image-delivery': ImageDelivery;\n  }\n}\n\ncustomElements.define('devtools-performance-image-delivery', ImageDelivery);\n"]}