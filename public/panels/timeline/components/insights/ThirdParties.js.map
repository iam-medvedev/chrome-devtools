{"version":3,"file":"ThirdParties.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/ThirdParties.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport type {ThirdPartiesInsightModel} from '../../../../models/trace/insights/ThirdParties.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\n\nconst {html} = LitHtml;\n\ntype ThirdPartiesEntries = Array<[\n  Trace.Extras.ThirdParties.Entity,\n  Trace.Extras.ThirdParties.Summary,\n]>;\n\nconst UIStrings = {\n  /** Label for a table column that displays the name of a third-party provider. */\n  columnThirdParty: 'Third party',\n  /** Label for a column in a data table; entries will be the download size of a web resource in kilobytes. */\n  columnTransferSize: 'Transfer size',\n  /** Label for a table column that displays how much time each row spent blocking other work on the main thread, entries will be the number of milliseconds spent. */\n  columnBlockingTime: 'Blocking time',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/ThirdParties.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ThirdParties extends BaseInsightComponent<ThirdPartiesInsightModel> {\n  static override readonly litTagName = LitHtml.literal`devtools-performance-third-parties`;\n  override internalName: string = 'third-parties';\n\n  #overlaysForEntity = new Map<Trace.Extras.ThirdParties.Entity, Overlays.Overlays.TimelineOverlay[]>();\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    this.#overlaysForEntity.clear();\n\n    if (!this.model) {\n      return [];\n    }\n\n    const overlays: Overlays.Overlays.TimelineOverlay[] = [];\n    for (const [entity, requests] of this.model.requestsByEntity) {\n      if (entity === this.model.firstPartyEntity) {\n        continue;\n      }\n\n      const overlaysForThisEntity = [];\n      for (const request of requests) {\n        const overlay: Overlays.Overlays.TimelineOverlay = {\n          type: 'ENTRY_OUTLINE',\n          entry: request,\n          outlineReason: 'INFO',\n        };\n        overlaysForThisEntity.push(overlay);\n        overlays.push(overlay);\n      }\n\n      this.#overlaysForEntity.set(entity, overlaysForThisEntity);\n    }\n\n    return overlays;\n  }\n\n  #renderContent(entries: ThirdPartiesEntries): LitHtml.LitTemplate {\n    if (!this.model) {\n      return LitHtml.nothing;\n    }\n\n    const topTransferSizeEntries = entries.sort((a, b) => b[1].transferSize - a[1].transferSize).slice(0, 6);\n    const topMainThreadTimeEntries = entries.sort((a, b) => b[1].mainThreadTime - a[1].mainThreadTime).slice(0, 6);\n\n    // clang-format off\n    return html`\n      <div>\n        <div class=\"insight-section\">\n          ${html`<devtools-performance-table\n            .data=${{\n              insight: this,\n              headers: [i18nString(UIStrings.columnThirdParty), i18nString(UIStrings.columnTransferSize)],\n              rows: topTransferSizeEntries.map(([entity, summary]) => ({\n                values: [\n                  entity.name,\n                  i18n.ByteUtilities.bytesToString(summary.transferSize),\n                ],\n                overlays: this.#overlaysForEntity.get(entity),\n              })),\n            }}>\n          </devtools-performance-table>`}\n        </div>\n\n        <div class=\"insight-section\">\n          ${html`<devtools-performance-table\n            .data=${{\n              insight: this,\n              headers: [i18nString(UIStrings.columnThirdParty), i18nString(UIStrings.columnBlockingTime)],\n              rows: topMainThreadTimeEntries.map(([entity, summary]) => ({\n                values: [\n                  entity.name,\n                  i18n.TimeUtilities.millisToString(Platform.Timing.microSecondsToMilliSeconds(summary.mainThreadTime)),\n                ],\n                overlays: this.#overlaysForEntity.get(entity),\n              })),\n            }}>\n          </devtools-performance-table>`}\n        </div>\n      </div>`;\n    // clang-format on\n  }\n\n  override render(): void {\n    const model = this.model;\n    const entries = model && [...model.summaryByEntity.entries()].filter(kv => kv[0] !== model.firstPartyEntity);\n    const shouldShow = entries?.length;\n\n    const output = shouldShow ? this.#renderContent(entries) : LitHtml.nothing;\n    this.renderWithContent(output);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-third-parties': ThirdParties;\n  }\n}\n\ncustomElements.define('devtools-performance-third-parties', ThirdParties);\n"]}