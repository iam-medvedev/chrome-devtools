{"version":3,"file":"DOMSize.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/DOMSize.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../../ui/components/icon_button/icon_button.js';\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {DOMSizeInsightModel} from '../../../../models/trace/insights/DOMSize.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport type {TableData} from './Table.js';\n\nconst UIStrings = {\n  /**\n   * @description Header for a column containing the names of statistics as opposed to the actual statistic values.\n   */\n  statistic: 'Statistic',\n  /**\n   * @description Header for a column containing the value of a statistic.\n   */\n  value: 'Value',\n  /**\n   * @description Header for a column containing the page element related to a statistc.\n   */\n  element: 'Element',\n  /**\n   * @description Label for a value representing the total number of elements on the page.\n   */\n  totalElements: 'Total elements',\n  /**\n   * @description Label for a value representing the maximum depth of the Document Object Model (DOM). \"DOM\" is a acronym and should not be translated.\n   */\n  maxDOMDepth: 'DOM depth',\n  /**\n   * @description Label for a value representing the maximum number of child elements of any parent element on the page.\n   */\n  maxChildren: 'Most children',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/DOMSize.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst {html} = LitHtml;\n\nexport class DOMSize extends BaseInsightComponent<DOMSizeInsightModel> {\n  static override readonly litTagName = LitHtml.StaticHtml.literal`devtools-performance-dom-size`;\n  override internalName: string = 'dom-size';\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    if (!this.model) {\n      return [];\n    }\n\n    const entries = [...this.model.largeStyleRecalcs, ...this.model.largeLayoutUpdates];\n    return entries.map(entry => ({\n                         type: 'ENTRY_OUTLINE',\n                         entry,\n                         outlineReason: 'ERROR',\n                       }));\n  }\n\n  #renderNodeTable(domStatsData: Trace.Types.Events.DOMStats['args']['data']): LitHtml.LitTemplate {\n    const rows: TableData['rows'] = [];\n\n    if (domStatsData.maxDepth) {\n      const {nodeId, nodeName} = domStatsData.maxDepth;\n      rows.push({values: [i18nString(UIStrings.maxDOMDepth), this.renderNode(nodeId, nodeName)]});\n    }\n\n    if (domStatsData.maxChildren) {\n      const {nodeId, nodeName} = domStatsData.maxChildren;\n      rows.push({values: [i18nString(UIStrings.maxChildren), this.renderNode(nodeId, nodeName)]});\n    }\n\n    if (!rows.length) {\n      return LitHtml.nothing;\n    }\n\n    // clang-format off\n    return html`<div class=\"insight-section\">\n      <devtools-performance-table\n        .data=${{\n          insight: this,\n          headers: [i18nString(UIStrings.statistic), i18nString(UIStrings.element)],\n          rows,\n        } as TableData}>\n      </devtools-performance-table>\n    </div>`;\n    // clang-format on\n  }\n\n  override renderContent(): LitHtml.LitTemplate {\n    if (!this.model) {\n      return LitHtml.nothing;\n    }\n\n    const domStatsData = this.model.maxDOMStats?.args.data;\n    if (!domStatsData) {\n      return LitHtml.nothing;\n    }\n\n    // clang-format off\n    return html`<div class=\"insight-section\">\n      <devtools-performance-table\n        .data=${{\n          insight: this,\n          headers: [i18nString(UIStrings.statistic), i18nString(UIStrings.value)],\n          rows: [\n            {values: [i18nString(UIStrings.totalElements), domStatsData.totalElements]},\n            {values: [i18nString(UIStrings.maxDOMDepth), domStatsData.maxDepth?.depth ?? 0]},\n            {values: [i18nString(UIStrings.maxChildren), domStatsData.maxChildren?.numChildren ?? 0]},\n          ],\n        } as TableData}>\n      </devtools-performance-table>\n    </div>\n    ${this.#renderNodeTable(domStatsData)}\n    `;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-dom-size': DOMSize;\n  }\n}\n\ncustomElements.define('devtools-performance-dom-size', DOMSize);\n"]}