{"version":3,"file":"InteractionToNextPaint.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/InteractionToNextPaint.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport type {INPInsightModel} from '../../../../models/trace/insights/InteractionToNextPaint.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\n\nconst {UIStrings, i18nString} = Trace.Insights.Models.InteractionToNextPaint;\n\nconst {html} = Lit;\n\nexport class InteractionToNextPaint extends BaseInsightComponent<INPInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-inp`;\n  override internalName = 'inp';\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    if (!this.model) {\n      return [];\n    }\n\n    const event = this.model.longestInteractionEvent;\n    if (!event) {\n      return [];\n    }\n\n    return this.#createOverlaysForPhase(event);\n  }\n\n  // If `phase` is -1, then all phases are included. Otherwise it's just that phase index.\n  #createOverlaysForPhase(event: Trace.Types.Events.SyntheticInteractionPair, phase = -1):\n      Overlays.Overlays.TimelineOverlay[] {\n    const p1 = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n        event.ts,\n        (event.ts + event.inputDelay) as Trace.Types.Timing.Micro,\n    );\n    const p2 = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n        p1.max,\n        (p1.max + event.mainThreadHandling) as Trace.Types.Timing.Micro,\n    );\n    const p3 = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n        p2.max,\n        (p2.max + event.presentationDelay) as Trace.Types.Timing.Micro,\n    );\n    let sections = [\n      {bounds: p1, label: i18nString(UIStrings.inputDelay), showDuration: true},\n      {bounds: p2, label: i18nString(UIStrings.processingDuration), showDuration: true},\n      {bounds: p3, label: i18nString(UIStrings.presentationDelay), showDuration: true},\n    ];\n    if (phase !== -1) {\n      sections = [sections[phase]];\n    }\n\n    return [\n      {\n        type: 'TIMESPAN_BREAKDOWN',\n        sections,\n        renderLocation: 'BELOW_EVENT',\n        entry: event,\n      },\n    ];\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    const event = this.model?.longestInteractionEvent;\n    if (!event) {\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.noInteractions)}</div>`;\n    }\n\n    const time = (us: Trace.Types.Timing.Micro): string =>\n        i18n.TimeUtilities.millisToString(Platform.Timing.microSecondsToMilliSeconds(us));\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        ${html`<devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.phase), i18nString(UIStrings.duration)],\n            rows: [\n              {\n                values: [i18nString(UIStrings.inputDelay), time(event.inputDelay)],\n                overlays: this.#createOverlaysForPhase(event, 0),\n              },\n              {\n                values: [i18nString(UIStrings.processingDuration), time(event.mainThreadHandling)],\n                overlays: this.#createOverlaysForPhase(event, 1),\n              },\n              {\n                values: [i18nString(UIStrings.presentationDelay), time(event.presentationDelay)],\n                overlays: this.#createOverlaysForPhase(event, 2),\n              },\n            ],\n          }}>\n        </devtools-performance-table>`}\n      </div>`;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-inp': InteractionToNextPaint;\n  }\n}\n\ncustomElements.define('devtools-performance-inp', InteractionToNextPaint);\n"]}