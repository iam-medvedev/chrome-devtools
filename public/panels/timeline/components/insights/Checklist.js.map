{"version":3,"file":"Checklist.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/Checklist.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B;;GAEG;AAEH,OAAO,sDAAsD,CAAC;AAE9D,OAAO,KAAK,IAAI,MAAM,+BAA+B,CAAC;AAEtD,OAAO,KAAK,gBAAgB,MAAM,8CAA8C,CAAC;AACjF,OAAO,KAAK,EAAE,MAAM,iCAAiC,CAAC;AACtD,OAAO,KAAK,GAAG,MAAM,2BAA2B,CAAC;AAGjD,OAAO,kBAAkB,MAAM,oBAAoB,CAAC;AAEpD,MAAM,SAAS,GAAG;IAChB;;;OAGG;IACH,gBAAgB,EAAE,6BAA6B;IAC/C;;;OAGG;IACH,eAAe,EAAE,6BAA6B;CACtC,CAAC;AAEX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,kDAAkD,EAAE,SAAS,CAAC,CAAC;AACxG,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE,4EAA4E;AAC5E,MAAM,eAAe,GAAG,IAAI,aAAa,EAAE,CAAC;AAC5C,eAAe,CAAC,WAAW,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;AAE3D,MAAM,EAAC,IAAI,EAAC,GAAG,GAAG,CAAC;AAcnB,MAAM,OAAO,SAAU,SAAQ,WAAW;IAC/B,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAC5C,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,UAAU,CAAoB;IAE9B,IAAI,SAAS,CAAC,SAA2B;QACvC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtD,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE1C,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IAED,QAAQ,CAAC,KAA2B;QAClC,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC;QAEpD,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,gBAAgB,EAAE,EAAC,GAAG,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC,CAAC;YAC5D,UAAU,CAAC,SAAS,CAAC,eAAe,EAAE,EAAC,GAAG,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;QAC1F,OAAO,IAAI,CAAA;;uBAEQ,SAAS;iBACf,IAAI;kBACH,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc;;OAExD,CAAC;IACN,CAAC;IAED,KAAK,CAAC,OAAO;QACX,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACrB,OAAO;QACT,CAAC;QAED,GAAG,CAAC,MAAM,CACN,IAAI,CAAA;;cAEE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAA;kBAC5C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;6CACO,KAAK,CAAC,KAAK;kBACtC,CAAC;gBACH,EACR,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;IAClC,CAAC;CACF;AAQD,cAAc,CAAC,MAAM,CAAC,gCAAgC,EAAE,SAAS,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * @fileoverview A list of pass/fail conditions for an insight.\n */\n\nimport '../../../../ui/components/icon_button/icon_button.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as UI from '../../../../ui/legacy/legacy.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport checklistStylesRaw from './checklist.css.js';\n\nconst UIStrings = {\n  /**\n   *@description Text for a screen-reader label to tell the user that the icon represents a successful insight check\n   *@example {Server response time} PH1\n   */\n  successAriaLabel: 'Insight check passed: {PH1}',\n  /**\n   *@description Text for a screen-reader label to tell the user that the icon represents an unsuccessful insight check\n   *@example {Server response time} PH1\n   */\n  failedAriaLabel: 'Insight check failed: {PH1}',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/Checklist.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst checklistStyles = new CSSStyleSheet();\nchecklistStyles.replaceSync(checklistStylesRaw.cssContent);\n\nconst {html} = Lit;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype GenericChecklist = Trace.Insights.Types.Checklist<any>;\n\nexport interface ChecklistData {\n  checklist: GenericChecklist;\n}\n\nexport interface TableDataRow {\n  values: Array<number|string|Lit.LitTemplate>;\n  overlays?: Overlays.Overlays.TimelineOverlay[];\n}\n\nexport class Checklist extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n  #checklist?: GenericChecklist;\n\n  set checklist(checklist: GenericChecklist) {\n    this.#checklist = checklist;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets.push(checklistStyles);\n    UI.UIUtils.injectCoreStyles(this.#shadow);\n\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #getIcon(check: GenericChecklist['']): Lit.TemplateResult {\n    const icon = check.value ? 'check-circle' : 'clear';\n\n    const ariaLabel = check.value ? i18nString(UIStrings.successAriaLabel, {PH1: check.label}) :\n                                    i18nString(UIStrings.failedAriaLabel, {PH1: check.label});\n    return html`\n        <devtools-icon\n          aria-label=${ariaLabel}\n          name=${icon}\n          class=${check.value ? 'check-passed' : 'check-failed'}\n        ></devtools-icon>\n      `;\n  }\n\n  async #render(): Promise<void> {\n    if (!this.#checklist) {\n      return;\n    }\n\n    Lit.render(\n        html`\n          <ul>\n            ${Object.values(this.#checklist).map(check => html`<li>\n                ${this.#getIcon(check)}\n                <span data-checklist-label>${check.label}</span>\n            </li>`)}\n          </ul>`,\n        this.#shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-checklist': Checklist;\n  }\n}\n\ncustomElements.define('devtools-performance-checklist', Checklist);\n"]}