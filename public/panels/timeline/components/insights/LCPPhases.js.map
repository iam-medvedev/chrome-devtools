{"version":3,"file":"LCPPhases.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/LCPPhases.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsight, shouldRenderForCategory} from './Helpers.js';\nimport type * as SidebarInsight from './SidebarInsight.js';\nimport type {TableData} from './Table.js';\nimport {Category} from './types.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /**\n   *@description Title of an insight that provides details about the LCP metric, broken down by phases / parts.\n   */\n  title: 'LCP by phase',\n  /**\n   * @description Description of a DevTools insight that presents a breakdown for the LCP metric by phases.\n   * This is displayed after a user expands the section to see more. No character length limits.\n   */\n  description:\n      'Each [phase has specific improvement strategies](https://web.dev/articles/optimize-lcp#lcp-breakdown). Ideally, most of the LCP time should be spent on loading the resources, not within delays.',\n  /**\n   *@description Time to first byte title for the Largest Contentful Paint's phases timespan breakdown.\n   */\n  timeToFirstByte: 'Time to first byte',\n  /**\n   *@description Resource load delay title for the Largest Contentful Paint phases timespan breakdown.\n   */\n  resourceLoadDelay: 'Resource load delay',\n  /**\n   *@description Resource load duration title for the Largest Contentful Paint phases timespan breakdown.\n   */\n  resourceLoadDuration: 'Resource load duration',\n  /**\n   *@description Element render delay title for the Largest Contentful Paint phases timespan breakdown.\n   */\n  elementRenderDelay: 'Element render delay',\n  /**\n   *@description Label used for the phase/component/stage/section of a larger duration.\n   */\n  phase: 'Phase',\n  /**\n   *@description Label used for the percentage a single phase/component/stage/section takes up of a larger duration.\n   */\n  percentLCP: '% of LCP',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/LCPPhases.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface PhaseData {\n  phase: string;\n  timing: number|Trace.Types.Timing.MilliSeconds;\n  percent: string;\n}\n\nexport class LCPPhases extends BaseInsight {\n  static override readonly litTagName = LitHtml.literal`devtools-performance-lcp-by-phases`;\n  override insightCategory: Category = Category.LCP;\n  override internalName: string = 'lcp-by-phase';\n  override userVisibleTitle: string = i18nString(UIStrings.title);\n  override description: string = i18nString(UIStrings.description);\n  #overlay: Overlays.Overlays.TimespanBreakdown|null = null;\n\n  #getPhaseData(insights: Trace.Insights.Types.TraceInsightSets|null, navigationId: string|null): PhaseData[] {\n    if (!insights || !navigationId) {\n      return [];\n    }\n    const insightsByNavigation = insights.get(navigationId);\n    if (!insightsByNavigation) {\n      return [];\n    }\n    const lcpInsight = insightsByNavigation.data.LargestContentfulPaint;\n    if (lcpInsight instanceof Error) {\n      return [];\n    }\n\n    const timing = lcpInsight.lcpMs;\n    const phases = lcpInsight.phases;\n\n    if (!timing || !phases) {\n      return [];\n    }\n\n    const {ttfb, loadDelay, loadTime, renderDelay} = phases;\n\n    if (loadDelay && loadTime) {\n      const phaseData = [\n        {phase: i18nString(UIStrings.timeToFirstByte), timing: ttfb, percent: `${(100 * ttfb / timing).toFixed(0)}%`},\n        {\n          phase: i18nString(UIStrings.resourceLoadDelay),\n          timing: loadDelay,\n          percent: `${(100 * loadDelay / timing).toFixed(0)}%`,\n        },\n        {\n          phase: i18nString(UIStrings.resourceLoadDuration),\n          timing: loadTime,\n          percent: `${(100 * loadTime / timing).toFixed(0)}%`,\n        },\n        {\n          phase: i18nString(UIStrings.elementRenderDelay),\n          timing: renderDelay,\n          percent: `${(100 * renderDelay / timing).toFixed(0)}%`,\n        },\n      ];\n      return phaseData;\n    }\n\n    // If the lcp is text, we only have ttfb and render delay.\n    const phaseData = [\n      {phase: i18nString(UIStrings.timeToFirstByte), timing: ttfb, percent: `${(100 * ttfb / timing).toFixed(0)}%`},\n      {\n        phase: i18nString(UIStrings.elementRenderDelay),\n        timing: renderDelay,\n        percent: `${(100 * renderDelay / timing).toFixed(0)}%`,\n      },\n    ];\n    return phaseData;\n  }\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    this.#overlay = null;\n\n    if (!this.data.insights || !this.data.insightSetKey) {\n      return [];\n    }\n    const {insightSetKey: navigationId, insights} = this.data;\n\n    const insightsByNavigation = insights.get(navigationId);\n    if (!insightsByNavigation) {\n      return [];\n    }\n\n    const lcpInsight = insightsByNavigation.data.LargestContentfulPaint;\n    if (lcpInsight instanceof Error) {\n      return [];\n    }\n\n    const phases = lcpInsight.phases;\n    const lcpTs = lcpInsight.lcpTs;\n    if (!phases || !lcpTs) {\n      return [];\n    }\n    const lcpMicroseconds = Trace.Types.Timing.MicroSeconds(Trace.Helpers.Timing.millisecondsToMicroseconds(lcpTs));\n\n    const sections = [];\n    // For text LCP, we should only have ttfb and renderDelay sections.\n    if (!phases?.loadDelay && !phases?.loadTime) {\n      const renderBegin: Trace.Types.Timing.MicroSeconds = Trace.Types.Timing.MicroSeconds(\n          lcpMicroseconds - Trace.Helpers.Timing.millisecondsToMicroseconds(phases.renderDelay));\n      const renderDelay = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          renderBegin,\n          lcpMicroseconds,\n      );\n\n      const mainReqStart =\n          Trace.Types.Timing.MicroSeconds(renderBegin - Trace.Helpers.Timing.millisecondsToMicroseconds(phases.ttfb));\n      const ttfb = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          mainReqStart,\n          renderBegin,\n      );\n      sections.push(\n          {bounds: ttfb, label: i18nString(UIStrings.timeToFirstByte), showDuration: true},\n          {bounds: renderDelay, label: i18nString(UIStrings.elementRenderDelay), showDuration: true});\n    } else if (phases?.loadDelay && phases?.loadTime) {\n      const renderBegin: Trace.Types.Timing.MicroSeconds = Trace.Types.Timing.MicroSeconds(\n          lcpMicroseconds - Trace.Helpers.Timing.millisecondsToMicroseconds(phases.renderDelay));\n      const renderDelay = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          renderBegin,\n          lcpMicroseconds,\n      );\n\n      const loadBegin = Trace.Types.Timing.MicroSeconds(\n          renderBegin - Trace.Helpers.Timing.millisecondsToMicroseconds(phases.loadTime));\n      const loadTime = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          loadBegin,\n          renderBegin,\n      );\n\n      const loadDelayStart = Trace.Types.Timing.MicroSeconds(\n          loadBegin - Trace.Helpers.Timing.millisecondsToMicroseconds(phases.loadDelay));\n      const loadDelay = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          loadDelayStart,\n          loadBegin,\n      );\n\n      const mainReqStart = Trace.Types.Timing.MicroSeconds(\n          loadDelayStart - Trace.Helpers.Timing.millisecondsToMicroseconds(phases.ttfb));\n      const ttfb = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          mainReqStart,\n          loadDelayStart,\n      );\n\n      sections.push(\n          {bounds: ttfb, label: i18nString(UIStrings.timeToFirstByte), showDuration: true},\n          {bounds: loadDelay, label: i18nString(UIStrings.resourceLoadDelay), showDuration: true},\n          {bounds: loadTime, label: i18nString(UIStrings.resourceLoadDuration), showDuration: true},\n          {bounds: renderDelay, label: i18nString(UIStrings.elementRenderDelay), showDuration: true},\n      );\n    }\n\n    this.#overlay = {\n      type: 'TIMESPAN_BREAKDOWN',\n      sections,\n    };\n    return [this.#overlay];\n  }\n\n  #renderLCPPhases(phaseData: PhaseData[]): LitHtml.LitTemplate {\n    const rows = phaseData.map(({phase, percent}) => {\n      const section = this.#overlay?.sections.find(section => phase === section.label);\n      return {\n        values: [phase, percent],\n        overlays: section && [{\n                    type: 'TIMESPAN_BREAKDOWN',\n                    sections: [section],\n                  }],\n      };\n    });\n\n    // clang-format off\n    return html`\n    <div class=\"insights\">\n      <devtools-performance-sidebar-insight .data=${{\n            title: this.userVisibleTitle,\n            description: this.description,\n            internalName: this.internalName,\n            expanded: this.isActive(),\n        } as SidebarInsight.InsightDetails}\n        @insighttoggleclick=${this.onSidebarClick}\n      >\n        <div slot=\"insight-content\" class=\"insight-section\">\n          ${html`<devtools-performance-table\n            .data=${{\n              insight: this,\n              headers: [i18nString(UIStrings.phase), i18nString(UIStrings.percentLCP)],\n              rows,\n            } as TableData}>\n          </devtools-performance-table>`}\n        </div>\n      </devtools-performance-sidebar-insight>\n    </div>`;\n    // clang-format on\n  }\n\n  #hasDataToRender(phaseData: PhaseData[]): boolean {\n    return phaseData ? phaseData.length > 0 : false;\n  }\n\n  override getRelatedEvents(): Trace.Types.Events.Event[] {\n    const insight =\n        Trace.Insights.Common.getInsight('LargestContentfulPaint', this.data.insights, this.data.insightSetKey);\n    if (!insight?.lcpEvent) {\n      return [];\n    }\n\n    const relatedEvents: Trace.Types.Events.Event[] = [insight.lcpEvent];\n    if (insight.lcpRequest) {\n      relatedEvents.push(insight.lcpRequest);\n    }\n\n    return relatedEvents;\n  }\n\n  override render(): void {\n    const phaseData = this.#getPhaseData(this.data.insights, this.data.insightSetKey);\n    const matchesCategory = shouldRenderForCategory({\n      activeCategory: this.data.activeCategory,\n      insightCategory: this.insightCategory,\n    });\n    const shouldRender = matchesCategory && this.#hasDataToRender(phaseData);\n    const output = shouldRender ? this.#renderLCPPhases(phaseData) : LitHtml.nothing;\n    LitHtml.render(output, this.shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-lcp-by-phases': LCPPhases;\n  }\n}\n\ncustomElements.define('devtools-performance-lcp-by-phases', LCPPhases);\n"]}