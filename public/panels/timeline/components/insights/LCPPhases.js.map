{"version":3,"file":"LCPPhases.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/LCPPhases.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as TraceEngine from '../../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport sidebarStyles from '../sidebar.css.js';\n\nimport sidebarInsightStyles from './sidebarInsight.css.js';\nimport * as SidebarInsightNamespace from './SidebarInsight.js';\n\nexport class LCPPhases extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-performance-lcp-by-phases`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n  #insightTitle: string = 'LCP by Phase';\n  #expanded: boolean = false;\n  #insights: TraceEngine.Insights.Types.TraceInsightData|null = null;\n  #navigationId: string|null = null;\n  #phaseData: Array<{phase: string, timing: number|TraceEngine.Types.Timing.MilliSeconds, percent: string}>|null = null;\n\n  set insights(insights: TraceEngine.Insights.Types.TraceInsightData|null) {\n    this.#insights = insights;\n    this.#phaseData = this.getPhaseData(this.#insights, this.#navigationId);\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set navigationId(navigationId: string|null) {\n    this.#navigationId = navigationId;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #toggleClick(): void {\n    this.#expanded = !this.#expanded;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  getPhaseData(insights: TraceEngine.Insights.Types.TraceInsightData|null, navigationId: string|null):\n      Array<{phase: string, timing: number|TraceEngine.Types.Timing.MilliSeconds, percent: string}> {\n    if (!insights || !navigationId) {\n      return [];\n    }\n    const insightsByNavigation = insights.get(navigationId);\n    if (!insightsByNavigation) {\n      return [];\n    }\n    const lcpInsight = insightsByNavigation.LargestContentfulPaint;\n    if (lcpInsight instanceof Error) {\n      return [];\n    }\n\n    const timing = lcpInsight.lcpMs;\n    const phases = lcpInsight.phases;\n\n    if (!timing || !phases) {\n      return [];\n    }\n\n    const {ttfb, loadDelay, loadTime, renderDelay} = phases;\n\n    if (loadDelay && loadTime) {\n      const phaseData = [\n        {phase: 'Time to first byte', timing: ttfb, percent: `${(100 * ttfb / timing).toFixed(0)}%`},\n        {phase: 'Resource load delay', timing: loadDelay, percent: `${(100 * loadDelay / timing).toFixed(0)}%`},\n        {phase: 'Resource load duration', timing: loadTime, percent: `${(100 * loadTime / timing).toFixed(0)}%`},\n        {phase: 'Resource render delay', timing: renderDelay, percent: `${(100 * renderDelay / timing).toFixed(0)}%`},\n      ];\n      return phaseData;\n    }\n\n    // If the lcp is text, we only have ttfb and render delay.\n    const phaseData = [\n      {phase: 'Time to first byte', timing: ttfb, percent: `${(100 * ttfb / timing).toFixed(0)}%`},\n      {phase: 'Resource render delay', timing: renderDelay, percent: `${(100 * renderDelay / timing).toFixed(0)}%`},\n    ];\n    return phaseData;\n  }\n\n  renderLCPPhases(): LitHtml.LitTemplate {\n    const showLCPPhases = this.#phaseData ? this.#phaseData.length > 0 : false;\n\n    // clang-format off\n        if (this.#expanded) {\n          return LitHtml.html`${showLCPPhases ? LitHtml.html`\n            <div class=\"insights\" @click=${this.#toggleClick}>\n              <${SidebarInsightNamespace.SidebarInsight.litTagName} .data=${{\n                  title: this.#insightTitle,\n                  expanded: this.#expanded,\n              } as SidebarInsightNamespace.InsightDetails}>\n              <div slot=\"insight-description\" class=\"insight-description\">\n                Each\n                <x-link class=\"link\" href=\"https://web.dev/articles/optimize-lcp#lcp-breakdown\">phase has specific recommendations to improve.</x-link>\n                In an ideal load, the two delay phases should be quite short.\n              </div>\n              <div slot=\"insight-content\" class=\"table-container\">\n                <dl>\n                  <dt class=\"dl-title\">Phase</dt>\n                  <dd class=\"dl-title\">% of LCP</dd>\n                  ${this.#phaseData?.map(phase => LitHtml.html`\n                    <dt>${phase.phase}</dt>\n                    <dd class=\"dl-value\">${phase.percent}</dd>\n                  `)}\n                </dl>\n              </div>\n              </${SidebarInsightNamespace}>\n            </div>` : LitHtml.nothing}`;\n        }\n\n        return LitHtml.html`\n        <div class=\"insights\" @click=${this.#toggleClick}>\n          <${SidebarInsightNamespace.SidebarInsight.litTagName} .data=${{\n                title: this.#insightTitle,\n                expanded: this.#expanded,\n            } as SidebarInsightNamespace.InsightDetails}>\n          </${SidebarInsightNamespace}>\n        </div>`;\n    // clang-format on\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [sidebarInsightStyles, sidebarStyles];\n  }\n\n  #render(): void {\n    const output = this.renderLCPPhases();\n    LitHtml.render(output, this.#shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-lcp-by-phases': LCPPhases;\n  }\n}\n\ncustomElements.define('devtools-performance-lcp-by-phases', LCPPhases);\n"]}