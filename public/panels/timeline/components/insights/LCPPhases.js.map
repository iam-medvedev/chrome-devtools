{"version":3,"file":"LCPPhases.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/LCPPhases.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as TraceEngine from '../../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport sidebarInsightStyles from './sidebarInsight.css.js';\nimport * as SidebarInsight from './SidebarInsight.js';\nimport {type ActiveInsight, InsightsCategories} from './types.js';\n\nexport const InsightName = 'lcp-phases';\n\nconst UIStrings = {\n  /**\n   *@description Time to first byte title for the Largest Contentful Paint's phases timespan breakdown.\n   */\n  timeToFirstByte: 'Time to first byte',\n  /**\n   *@description Resource load delay title for the Largest Contentful Paint phases timespan breakdown.\n   */\n  resourceLoadDelay: 'Resource load delay',\n  /**\n   *@description Resource load time title for the Largest Contentful Paint phases timespan breakdown.\n   */\n  resourceLoadTime: 'Resource load time',\n  /**\n   *@description Element render delay title for the Largest Contentful Paint phases timespan breakdown.\n   */\n  elementRenderDelay: 'Element render delay',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/LCPPhases.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface PhaseData {\n  phase: string;\n  timing: number|TraceEngine.Types.Timing.MilliSeconds;\n  percent: string;\n}\n\nexport class LCPPhases extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-performance-lcp-by-phases`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n  #insightTitle: string = 'LCP by Phase';\n  #insights: TraceEngine.Insights.Types.TraceInsightData|null = null;\n  #navigationId: string|null = null;\n  #activeInsight: ActiveInsight|null = null;\n  #activeCategory: InsightsCategories = InsightsCategories.ALL;\n\n  set insights(insights: TraceEngine.Insights.Types.TraceInsightData|null) {\n    this.#insights = insights;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set navigationId(navigationId: string|null) {\n    this.#navigationId = navigationId;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set activeInsight(activeInsight: ActiveInsight) {\n    this.#activeInsight = activeInsight;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set activeCategory(activeCategory: InsightsCategories) {\n    this.#activeCategory = activeCategory;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #getPhaseData(insights: TraceEngine.Insights.Types.TraceInsightData|null, navigationId: string|null): PhaseData[] {\n    if (!insights || !navigationId) {\n      return [];\n    }\n    const insightsByNavigation = insights.get(navigationId);\n    if (!insightsByNavigation) {\n      return [];\n    }\n    const lcpInsight = insightsByNavigation.LargestContentfulPaint;\n    if (lcpInsight instanceof Error) {\n      return [];\n    }\n\n    const timing = lcpInsight.lcpMs;\n    const phases = lcpInsight.phases;\n\n    if (!timing || !phases) {\n      return [];\n    }\n\n    const {ttfb, loadDelay, loadTime, renderDelay} = phases;\n\n    if (loadDelay && loadTime) {\n      const phaseData = [\n        {phase: 'Time to first byte', timing: ttfb, percent: `${(100 * ttfb / timing).toFixed(0)}%`},\n        {phase: 'Resource load delay', timing: loadDelay, percent: `${(100 * loadDelay / timing).toFixed(0)}%`},\n        {phase: 'Resource load duration', timing: loadTime, percent: `${(100 * loadTime / timing).toFixed(0)}%`},\n        {phase: 'Resource render delay', timing: renderDelay, percent: `${(100 * renderDelay / timing).toFixed(0)}%`},\n      ];\n      return phaseData;\n    }\n\n    // If the lcp is text, we only have ttfb and render delay.\n    const phaseData = [\n      {phase: 'Time to first byte', timing: ttfb, percent: `${(100 * ttfb / timing).toFixed(0)}%`},\n      {phase: 'Resource render delay', timing: renderDelay, percent: `${(100 * renderDelay / timing).toFixed(0)}%`},\n    ];\n    return phaseData;\n  }\n\n  #createLCPPhasesOverlay(): Array<Overlays.Overlays.TimelineOverlay> {\n    if (!this.#insights || !this.#navigationId) {\n      return [];\n    }\n\n    const insightsByNavigation = this.#insights.get(this.#navigationId);\n    if (!insightsByNavigation) {\n      return [];\n    }\n\n    const lcpInsight: TraceEngine.Insights.Types.LCPInsightResult|Error = insightsByNavigation.LargestContentfulPaint;\n    if (lcpInsight instanceof Error) {\n      return [];\n    }\n\n    const phases = lcpInsight.phases;\n    const lcpTs = lcpInsight.lcpTs;\n    if (!phases || !lcpTs) {\n      return [];\n    }\n    const lcpMicroseconds =\n        TraceEngine.Types.Timing.MicroSeconds(TraceEngine.Helpers.Timing.millisecondsToMicroseconds(lcpTs));\n\n    const sections = [];\n    // For text LCP, we should only have ttfb and renderDelay sections.\n    if (!phases?.loadDelay && !phases?.loadTime) {\n      const renderBegin: TraceEngine.Types.Timing.MicroSeconds = TraceEngine.Types.Timing.MicroSeconds(\n          lcpMicroseconds - TraceEngine.Helpers.Timing.millisecondsToMicroseconds(phases.renderDelay));\n      const renderDelay = TraceEngine.Helpers.Timing.traceWindowFromMicroSeconds(\n          renderBegin,\n          lcpMicroseconds,\n      );\n\n      const mainReqStart = TraceEngine.Types.Timing.MicroSeconds(\n          renderBegin - TraceEngine.Helpers.Timing.millisecondsToMicroseconds(phases.ttfb));\n      const ttfb = TraceEngine.Helpers.Timing.traceWindowFromMicroSeconds(\n          mainReqStart,\n          renderBegin,\n      );\n      sections.push(\n          {bounds: ttfb, label: i18nString(UIStrings.timeToFirstByte)},\n          {bounds: renderDelay, label: i18nString(UIStrings.elementRenderDelay)});\n    } else if (phases?.loadDelay && phases?.loadTime) {\n      const renderBegin: TraceEngine.Types.Timing.MicroSeconds = TraceEngine.Types.Timing.MicroSeconds(\n          lcpMicroseconds - TraceEngine.Helpers.Timing.millisecondsToMicroseconds(phases.renderDelay));\n      const renderDelay = TraceEngine.Helpers.Timing.traceWindowFromMicroSeconds(\n          renderBegin,\n          lcpMicroseconds,\n      );\n\n      const loadBegin = TraceEngine.Types.Timing.MicroSeconds(\n          renderBegin - TraceEngine.Helpers.Timing.millisecondsToMicroseconds(phases.loadTime));\n      const loadTime = TraceEngine.Helpers.Timing.traceWindowFromMicroSeconds(\n          loadBegin,\n          renderBegin,\n      );\n\n      const loadDelayStart = TraceEngine.Types.Timing.MicroSeconds(\n          loadBegin - TraceEngine.Helpers.Timing.millisecondsToMicroseconds(phases.loadDelay));\n      const loadDelay = TraceEngine.Helpers.Timing.traceWindowFromMicroSeconds(\n          loadDelayStart,\n          loadBegin,\n      );\n\n      const mainReqStart = TraceEngine.Types.Timing.MicroSeconds(\n          loadDelayStart - TraceEngine.Helpers.Timing.millisecondsToMicroseconds(phases.ttfb));\n      const ttfb = TraceEngine.Helpers.Timing.traceWindowFromMicroSeconds(\n          mainReqStart,\n          loadDelayStart,\n      );\n\n      sections.push(\n          {bounds: ttfb, label: i18nString(UIStrings.timeToFirstByte)},\n          {bounds: loadDelay, label: i18nString(UIStrings.resourceLoadDelay)},\n          {bounds: loadTime, label: i18nString(UIStrings.resourceLoadTime)},\n          {bounds: renderDelay, label: i18nString(UIStrings.elementRenderDelay)},\n      );\n    }\n    return [{\n      type: 'TIMESPAN_BREAKDOWN',\n      sections,\n    }];\n  }\n\n  #sidebarClicked(): void {\n    // deactivate current insight if already selected.\n    if (this.#isActive()) {\n      this.dispatchEvent(new SidebarInsight.InsightDeactivated());\n      return;\n    }\n    if (!this.#navigationId) {\n      // Shouldn't happen, but needed to satisfy TS.\n      return;\n    }\n\n    this.dispatchEvent(new SidebarInsight.InsightActivated(\n        InsightName,\n        this.#navigationId,\n        this.#createLCPPhasesOverlay.bind(this),\n        ));\n  }\n\n  #renderLCPPhases(phaseData: PhaseData[]): LitHtml.LitTemplate {\n    // clang-format off\n    return LitHtml.html`\n    <div class=\"insights\">\n      <${SidebarInsight.SidebarInsight.litTagName} .data=${{\n            title: this.#insightTitle,\n            expanded: this.#isActive(),\n        } as SidebarInsight.InsightDetails}\n        @insighttoggleclick=${this.#sidebarClicked}\n      >\n        <div slot=\"insight-description\" class=\"insight-description\">\n          Each\n          <x-link class=\"link\" href=\"https://web.dev/articles/optimize-lcp#lcp-breakdown\">phase has specific recommendations to improve.</x-link>\n          In an ideal load, the two delay phases should be quite short.\n        </div>\n        <div slot=\"insight-content\" class=\"table-container\">\n          <dl>\n            <dt class=\"dl-title\">Phase</dt>\n            <dd class=\"dl-title\">% of LCP</dd>\n            ${phaseData?.map(phase => LitHtml.html`\n              <dt>${phase.phase}</dt>\n              <dd class=\"dl-value\">${phase.percent}</dd>\n            `)}\n          </dl>\n        </div>\n      </${SidebarInsight}>\n    </div>`;\n    // clang-format on\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [sidebarInsightStyles];\n  }\n\n  #shouldRenderForCateogory(): boolean {\n    if (this.#activeCategory === InsightsCategories.ALL) {\n      return true;\n    }\n    return this.#activeCategory === InsightsCategories.LCP;\n  }\n\n  #isActive(): boolean {\n    const isActive = this.#activeInsight && this.#activeInsight.name === InsightName &&\n        this.#activeInsight.navigationId === this.#navigationId;\n    return Boolean(isActive);\n  }\n\n  #hasDataToRender(phaseData: PhaseData[]): boolean {\n    return phaseData ? phaseData.length > 0 : false;\n  }\n\n  #render(): void {\n    const phaseData = this.#getPhaseData(this.#insights, this.#navigationId);\n    const shouldRender = this.#shouldRenderForCateogory() && this.#hasDataToRender(phaseData);\n    const output = shouldRender ? this.#renderLCPPhases(phaseData) : LitHtml.nothing;\n    LitHtml.render(output, this.#shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-lcp-by-phases': LCPPhases;\n  }\n}\n\ncustomElements.define('devtools-performance-lcp-by-phases', LCPPhases);\n"]}