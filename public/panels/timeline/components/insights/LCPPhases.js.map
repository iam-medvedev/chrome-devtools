{"version":3,"file":"LCPPhases.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/LCPPhases.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {LCPPhasesInsightModel} from '../../../../models/trace/insights/LCPPhases.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport type {TableData} from './Table.js';\n\nconst {UIStrings, i18nString} = Trace.Insights.Models.LCPPhases;\n\nconst {html} = Lit;\n\ninterface PhaseData {\n  phase: string;\n  timing: number|Trace.Types.Timing.Milli;\n}\n\nexport class LCPPhases extends BaseInsightComponent<LCPPhasesInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-lcp-by-phases`;\n  override internalName = 'lcp-by-phase';\n  #overlay: Overlays.Overlays.TimespanBreakdown|null = null;\n\n  #getPhaseData(): PhaseData[] {\n    if (!this.model) {\n      return [];\n    }\n\n    const timing = this.model.lcpMs;\n    const phases = this.model.phases;\n\n    if (!timing || !phases) {\n      return [];\n    }\n\n    const {ttfb, loadDelay, loadTime, renderDelay} = phases;\n\n    if (loadDelay && loadTime) {\n      const phaseData = [\n        {phase: i18nString(UIStrings.timeToFirstByte), timing: ttfb},\n        {\n          phase: i18nString(UIStrings.resourceLoadDelay),\n          timing: loadDelay,\n        },\n        {\n          phase: i18nString(UIStrings.resourceLoadDuration),\n          timing: loadTime,\n        },\n        {\n          phase: i18nString(UIStrings.elementRenderDelay),\n          timing: renderDelay,\n        },\n      ];\n      return phaseData;\n    }\n\n    // If the lcp is text, we only have ttfb and render delay.\n    const phaseData = [\n      {phase: i18nString(UIStrings.timeToFirstByte), timing: ttfb},\n      {\n        phase: i18nString(UIStrings.elementRenderDelay),\n        timing: renderDelay,\n      },\n    ];\n    return phaseData;\n  }\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    this.#overlay = null;\n\n    if (!this.model) {\n      return [];\n    }\n\n    const phases = this.model.phases;\n    const lcpTs = this.model.lcpTs;\n    if (!phases || !lcpTs) {\n      return [];\n    }\n    const lcpMicroseconds = Trace.Types.Timing.Micro(Trace.Helpers.Timing.milliToMicro(lcpTs));\n\n    const overlays: Overlays.Overlays.TimelineOverlay[] = [];\n    if (this.model.lcpRequest) {\n      overlays.push({type: 'ENTRY_OUTLINE', entry: this.model.lcpRequest, outlineReason: 'INFO'});\n    }\n\n    const sections = [];\n    // For text LCP, we should only have ttfb and renderDelay sections.\n    if (!phases?.loadDelay && !phases?.loadTime) {\n      const renderBegin: Trace.Types.Timing.Micro =\n          Trace.Types.Timing.Micro(lcpMicroseconds - Trace.Helpers.Timing.milliToMicro(phases.renderDelay));\n      const renderDelay = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          renderBegin,\n          lcpMicroseconds,\n      );\n\n      const mainReqStart = Trace.Types.Timing.Micro(renderBegin - Trace.Helpers.Timing.milliToMicro(phases.ttfb));\n      const ttfb = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          mainReqStart,\n          renderBegin,\n      );\n      sections.push(\n          {bounds: ttfb, label: i18nString(UIStrings.timeToFirstByte), showDuration: true},\n          {bounds: renderDelay, label: i18nString(UIStrings.elementRenderDelay), showDuration: true});\n    } else if (phases?.loadDelay && phases?.loadTime) {\n      const renderBegin: Trace.Types.Timing.Micro =\n          Trace.Types.Timing.Micro(lcpMicroseconds - Trace.Helpers.Timing.milliToMicro(phases.renderDelay));\n      const renderDelay = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          renderBegin,\n          lcpMicroseconds,\n      );\n\n      const loadBegin = Trace.Types.Timing.Micro(renderBegin - Trace.Helpers.Timing.milliToMicro(phases.loadTime));\n      const loadTime = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          loadBegin,\n          renderBegin,\n      );\n\n      const loadDelayStart = Trace.Types.Timing.Micro(loadBegin - Trace.Helpers.Timing.milliToMicro(phases.loadDelay));\n      const loadDelay = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          loadDelayStart,\n          loadBegin,\n      );\n\n      const mainReqStart = Trace.Types.Timing.Micro(loadDelayStart - Trace.Helpers.Timing.milliToMicro(phases.ttfb));\n      const ttfb = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          mainReqStart,\n          loadDelayStart,\n      );\n\n      sections.push(\n          {bounds: ttfb, label: i18nString(UIStrings.timeToFirstByte), showDuration: true},\n          {bounds: loadDelay, label: i18nString(UIStrings.resourceLoadDelay), showDuration: true},\n          {bounds: loadTime, label: i18nString(UIStrings.resourceLoadDuration), showDuration: true},\n          {bounds: renderDelay, label: i18nString(UIStrings.elementRenderDelay), showDuration: true},\n      );\n    }\n\n    this.#overlay = {\n      type: 'TIMESPAN_BREAKDOWN',\n      sections,\n    };\n    overlays.push(this.#overlay);\n    return overlays;\n  }\n\n  #renderFieldPhases(): Lit.LitTemplate|null {\n    if (!this.fieldMetrics) {\n      return null;\n    }\n\n    const {ttfb, loadDelay, loadDuration, renderDelay} = this.fieldMetrics.lcpPhases;\n    if (!ttfb || !loadDelay || !loadDuration || !renderDelay) {\n      return null;\n    }\n\n    const ttfbMillis = i18n.TimeUtilities.preciseMillisToString(Trace.Helpers.Timing.microToMilli(ttfb.value));\n    const loadDelayMillis =\n        i18n.TimeUtilities.preciseMillisToString(Trace.Helpers.Timing.microToMilli(loadDelay.value));\n    const loadDurationMillis =\n        i18n.TimeUtilities.preciseMillisToString(Trace.Helpers.Timing.microToMilli(loadDuration.value));\n    const renderDelayMillis =\n        i18n.TimeUtilities.preciseMillisToString(Trace.Helpers.Timing.microToMilli(renderDelay.value));\n\n    const rows = [\n      {values: [i18nString(UIStrings.timeToFirstByte), ttfbMillis]},\n      {values: [i18nString(UIStrings.resourceLoadDelay), loadDelayMillis]},\n      {values: [i18nString(UIStrings.resourceLoadDuration), loadDurationMillis]},\n      {values: [i18nString(UIStrings.elementRenderDelay), renderDelayMillis]},\n    ];\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.phase), i18nString(UIStrings.fieldDuration)],\n            rows,\n          } as TableData}>\n        </devtools-performance-table>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    const phaseData = this.#getPhaseData();\n    if (!phaseData.length) {\n      return html`<div class=\"insight-section\">${i18nString(UIStrings.noLcp)}</div>`;\n    }\n\n    const rows = phaseData.map(({phase, timing}) => {\n      const section = this.#overlay?.sections.find(section => phase === section.label);\n      return {\n        values: [phase, i18n.TimeUtilities.preciseMillisToString(timing)],\n        overlays: section && [{\n                    type: 'TIMESPAN_BREAKDOWN',\n                    sections: [section],\n                  }],\n      };\n    });\n\n    // clang-format off\n    const sections: Lit.LitTemplate[] = [html`\n      <div class=\"insight-section\">\n        <devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.phase), i18nString(UIStrings.duration)],\n            rows,\n          } as TableData}>\n        </devtools-performance-table>\n      </div>`\n    ];\n    // clang-format on\n\n    const fieldDataSection = this.#renderFieldPhases();\n    if (fieldDataSection) {\n      sections.push(fieldDataSection);\n    }\n\n    return html`${sections}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-lcp-by-phases': LCPPhases;\n  }\n}\n\ncustomElements.define('devtools-performance-lcp-by-phases', LCPPhases);\n"]}