{"version":3,"file":"CLSCulprits.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/CLSCulprits.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as TraceEngine from '../../../../models/trace/trace.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsight, shouldRenderForCategory} from './Helpers.js';\nimport * as SidebarInsight from './SidebarInsight.js';\nimport {InsightsCategories} from './types.js';\n\nexport function getCLSInsight(insights: TraceEngine.Insights.Types.TraceInsightData|null, navigationId: string|null):\n    TraceEngine.Insights.Types.InsightResults['CumulativeLayoutShift']|null {\n  if (!insights || !navigationId) {\n    return null;\n  }\n\n  const insightsByNavigation = insights.get(navigationId);\n  if (!insightsByNavigation) {\n    return null;\n  }\n\n  const clsInsight = insightsByNavigation.CumulativeLayoutShift;\n  if (clsInsight instanceof Error) {\n    return null;\n  }\n  return clsInsight;\n}\n\nexport class CLSCulprits extends BaseInsight {\n  static readonly litTagName = LitHtml.literal`devtools-performance-cls-culprits`;\n  override insightCategory: InsightsCategories = InsightsCategories.CLS;\n  override internalName: string = 'cls-culprits';\n  override userVisibleTitle: string = 'Layout shift culprits';\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    // TODO: create overlays\n    return [];\n  }\n\n  /**\n   * getTopCulprits gets the top 3 shift root causes based on clusters.\n   */\n  getTopCulprits(\n      clusters: TraceEngine.Types.TraceEvents.SyntheticLayoutShiftCluster[],\n      culpritsByShift:\n          Map<TraceEngine.Types.TraceEvents.TraceEventLayoutShift,\n              TraceEngine.Insights.InsightRunners.CumulativeLayoutShift.LayoutShiftRootCausesData>|\n      undefined): string[] {\n    if (!culpritsByShift) {\n      return [];\n    }\n    const MAX_TOP_CULPRITS = 3;\n    const causes: Array<string> = [];\n    for (const cluster of clusters) {\n      if (causes.length === MAX_TOP_CULPRITS) {\n        break;\n      }\n      const shifts = cluster.events;\n      for (const shift of shifts) {\n        if (causes.length === MAX_TOP_CULPRITS) {\n          break;\n        }\n\n        const culprits = culpritsByShift.get(shift);\n        if (!culprits) {\n          continue;\n        }\n        const fontReq = culprits.fontRequests;\n        const iframes = culprits.iframeIds;\n\n        for (let i = 0; i < fontReq.length && causes.length < MAX_TOP_CULPRITS; i++) {\n          causes.push('Font request');\n        }\n        for (let i = 0; i < iframes.length && causes.length < MAX_TOP_CULPRITS; i++) {\n          causes.push('Injected iframe');\n        }\n      }\n    }\n    return causes.slice(0, MAX_TOP_CULPRITS);\n  }\n\n  #render(culprits: Array<string>): LitHtml.TemplateResult {\n    // clang-format off\n    return LitHtml.html`\n        <div class=\"insights\">\n            <${SidebarInsight.SidebarInsight.litTagName} .data=${{\n            title: this.userVisibleTitle,\n            expanded: this.isActive(),\n            } as SidebarInsight.InsightDetails}\n            @insighttoggleclick=${this.onSidebarClick}>\n                <div slot=\"insight-description\" class=\"insight-description\">\n                    Layout shifts happen when existing elements unexpectedly move.\n                         Shifts are caused by nodes changing size or newly added. Investigate\n                         and fix these culprits.\n                </div>\n                <div slot=\"insight-content\" style=\"insight-content\">\n                  <p>\n                    Top layout shift culprits:\n                    ${culprits.map(culprit => {\n                      return LitHtml.html `\n                        <li>${culprit}</li>\n                      `;\n                    })}\n                  <p>\n                </div>\n            </${SidebarInsight.SidebarInsight}>\n        </div>`;\n    // clang-format on\n  }\n\n  override render(): void {\n    const clsInsight = getCLSInsight(this.data.insights, this.data.navigationId);\n    const culpritsByShift = clsInsight?.shifts;\n    const clusters = clsInsight?.clusters ?? [];\n\n    const causes = this.getTopCulprits(clusters, culpritsByShift);\n    const hasCulprits = causes.length > 0;\n\n    const matchesCategory = shouldRenderForCategory({\n      activeCategory: this.data.activeCategory,\n      insightCategory: this.insightCategory,\n    });\n    const output = hasCulprits && matchesCategory ? this.#render(causes) : LitHtml.nothing;\n    LitHtml.render(output, this.shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-cls-culprits': CLSCulprits;\n  }\n}\n\ncustomElements.define('devtools-performance-cls-culprits', CLSCulprits);\n"]}