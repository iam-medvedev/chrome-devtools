{"version":3,"file":"CLSCulprits.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/CLSCulprits.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,OAAO,MAAM,qCAAqC,CAAC;AAG/D,OAAO,EAAC,WAAW,EAAE,uBAAuB,EAAC,MAAM,cAAc,CAAC;AAClE,OAAO,KAAK,cAAc,MAAM,qBAAqB,CAAC;AACtD,OAAO,EAAC,kBAAkB,EAAC,MAAM,YAAY,CAAC;AAE9C,MAAM,UAAU,aAAa,CAAC,QAA0D,EAAE,YAAyB;IAQjH,IAAI,CAAC,QAAQ,IAAI,CAAC,YAAY,EAAE,CAAC;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,oBAAoB,GAAG,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACxD,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,UAAU,GAAG,oBAAoB,CAAC,qBAAqB,CAAC;IAC9D,IAAI,UAAU,YAAY,KAAK,EAAE,CAAC;QAChC,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,MAAM,OAAO,WAAY,SAAQ,WAAW;IAC1C,MAAM,CAAU,UAAU,GAAG,OAAO,CAAC,OAAO,CAAA,mCAAmC,CAAC;IACvE,eAAe,GAAuB,kBAAkB,CAAC,GAAG,CAAC;IAC7D,YAAY,GAAW,cAAc,CAAC;IACtC,gBAAgB,GAAW,uBAAuB,CAAC;IAEnD,cAAc;QACrB,wBAAwB;QACxB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,OAAO;QACL,mBAAmB;QACnB,OAAO,OAAO,CAAC,IAAI,CAAA;;eAER,cAAc,CAAC,cAAc,CAAC,UAAU,UAAU;YACrD,KAAK,EAAE,IAAI,CAAC,gBAAgB;YAC5B,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE;SACS;kCACZ,IAAI,CAAC,cAAc;;;;;;gBAMrC,cAAc,CAAC,cAAc;eAC9B,CAAC;QACZ,kBAAkB;IACpB,CAAC;IAEQ,MAAM;QACb,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC7E,MAAM,SAAS,GAAG,UAAU,EAAE,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC;QAEnE,MAAM,eAAe,GAAG,uBAAuB,CAAC;YAC9C,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc;YACxC,eAAe,EAAE,IAAI,CAAC,eAAe;SACtC,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,SAAS,IAAI,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;QAC/E,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;IACpD,CAAC;;AASH,cAAc,CAAC,MAAM,CAAC,mCAAmC,EAAE,WAAW,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as TraceEngine from '../../../../models/trace/trace.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsight, shouldRenderForCategory} from './Helpers.js';\nimport * as SidebarInsight from './SidebarInsight.js';\nimport {InsightsCategories} from './types.js';\n\nexport function getCLSInsight(insights: TraceEngine.Insights.Types.TraceInsightData|null, navigationId: string|null):\n    TraceEngine.Insights.Types.InsightResult<{\n      animationFailures?: readonly TraceEngine.Insights.InsightRunners.CumulativeLayoutShift\n                           .NoncompositedAnimationFailure[],\n      shifts?:\n                Map<TraceEngine.Types.TraceEvents.TraceEventLayoutShift,\n                    TraceEngine.Insights.InsightRunners.CumulativeLayoutShift.LayoutShiftRootCausesData>,\n    }>|null {\n  if (!insights || !navigationId) {\n    return null;\n  }\n\n  const insightsByNavigation = insights.get(navigationId);\n  if (!insightsByNavigation) {\n    return null;\n  }\n\n  const clsInsight = insightsByNavigation.CumulativeLayoutShift;\n  if (clsInsight instanceof Error) {\n    return null;\n  }\n  return clsInsight;\n}\n\nexport class CLSCulprits extends BaseInsight {\n  static readonly litTagName = LitHtml.literal`devtools-performance-cls-culprits`;\n  override insightCategory: InsightsCategories = InsightsCategories.CLS;\n  override internalName: string = 'cls-culprits';\n  override userVisibleTitle: string = 'Layout Shift Culprits';\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    // TODO: create overlays\n    return [];\n  }\n\n  #render(): LitHtml.TemplateResult {\n    // clang-format off\n    return LitHtml.html`\n        <div class=\"insights\">\n            <${SidebarInsight.SidebarInsight.litTagName} .data=${{\n            title: this.userVisibleTitle,\n            expanded: this.isActive(),\n            } as SidebarInsight.InsightDetails}\n            @insighttoggleclick=${this.onSidebarClick}>\n                <div slot=\"insight-description\" class=\"insight-description\">\n                    <p>Layout shifts happen when existing elements unexpectedly move.\n                         Shifts are caused by nodes changing size or newly added. Investigate\n                         and fix these culprits.</p>\n                </div>\n            </${SidebarInsight.SidebarInsight}>\n        </div>`;\n    // clang-format on\n  }\n\n  override render(): void {\n    const clsInsight = getCLSInsight(this.data.insights, this.data.navigationId);\n    const hasShifts = clsInsight?.shifts && clsInsight.shifts.size > 0;\n\n    const matchesCategory = shouldRenderForCategory({\n      activeCategory: this.data.activeCategory,\n      insightCategory: this.insightCategory,\n    });\n    const output = hasShifts && matchesCategory ? this.#render() : LitHtml.nothing;\n    LitHtml.render(output, this.shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-cls-culprits': CLSCulprits;\n  }\n}\n\ncustomElements.define('devtools-performance-cls-culprits', CLSCulprits);\n"]}