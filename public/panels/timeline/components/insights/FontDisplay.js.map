{"version":3,"file":"FontDisplay.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/FontDisplay.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,YAAY,CAAC;AAEpB,OAAO,KAAK,IAAI,MAAM,+BAA+B,CAAC;AAEtD,OAAO,KAAK,KAAK,MAAM,mCAAmC,CAAC;AAC3D,OAAO,KAAK,GAAG,MAAM,2BAA2B,CAAC;AAGjD,OAAO,EAAC,oBAAoB,EAAC,MAAM,2BAA2B,CAAC;AAC/D,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AAGvC,MAAM,EAAC,SAAS,EAAE,UAAU,EAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC;AAElE,MAAM,EAAC,IAAI,EAAC,GAAG,GAAG,CAAC;AAEnB,MAAM,OAAO,WAAY,SAAQ,oBAA6C;IAC5E,MAAM,CAAmB,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC,OAAO,CAAA,mCAAmC,CAAC;IACvF,YAAY,GAAG,cAAc,CAAC;IAEvC,kBAAkB,GAAG,IAAI,GAAG,EAAiF,CAAC;IAErG,cAAc;QACrB,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;QAEhC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACpC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE;gBACxC,IAAI,EAAE,eAAe;gBACrB,KAAK,EAAE,IAAI,CAAC,OAAO;gBACnB,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM;aAClD,CAAC,CAAC;QACL,CAAC;QAED,OAAO,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC;IAC/C,CAAC;IAEQ,uBAAuB;QAC9B,OAAO,IAAI,CAAC,KAAK,EAAE,aAAa,EAAE,GAAG,IAAI,IAAI,CAAC;IAChD,CAAC;IAEQ,aAAa;QACpB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO,GAAG,CAAC,OAAO,CAAC;QACrB,CAAC;QAED,mBAAmB;QACnB,OAAO,IAAI,CAAA;;UAEL,IAAI,CAAA;kBACI;YACN,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YACnF,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAClC,MAAM,EAAE;oBACN,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAC,CAAC;oBACzC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC;iBACnD;gBACD,QAAQ,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACtD,CAAC,CAAC;SACS;sCACc;aACzB,CAAC;QACV,kBAAkB;IACpB,CAAC;;AASH,cAAc,CAAC,MAAM,CAAC,mCAAmC,EAAE,WAAW,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {FontDisplayInsightModel} from '../../../../models/trace/insights/FontDisplay.js';\nimport * as Trace from '../../../../models/trace/trace.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {BaseInsightComponent} from './BaseInsightComponent.js';\nimport {eventRef} from './EventRef.js';\nimport type {TableData} from './Table.js';\n\nconst {UIStrings, i18nString} = Trace.Insights.Models.FontDisplay;\n\nconst {html} = Lit;\n\nexport class FontDisplay extends BaseInsightComponent<FontDisplayInsightModel> {\n  static override readonly litTagName = Lit.StaticHtml.literal`devtools-performance-font-display`;\n  override internalName = 'font-display';\n\n  #overlayForRequest = new Map<Trace.Types.Events.SyntheticNetworkRequest, Overlays.Overlays.TimelineOverlay>();\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    this.#overlayForRequest.clear();\n\n    if (!this.model) {\n      return [];\n    }\n\n    for (const font of this.model.fonts) {\n      this.#overlayForRequest.set(font.request, {\n        type: 'ENTRY_OUTLINE',\n        entry: font.request,\n        outlineReason: font.wastedTime ? 'ERROR' : 'INFO',\n      });\n    }\n\n    return [...this.#overlayForRequest.values()];\n  }\n\n  override getEstimatedSavingsTime(): Trace.Types.Timing.Milli|null {\n    return this.model?.metricSavings?.FCP ?? null;\n  }\n\n  override renderContent(): Lit.LitTemplate {\n    if (!this.model) {\n      return Lit.nothing;\n    }\n\n    // clang-format off\n    return html`\n      <div class=\"insight-section\">\n        ${html`<devtools-performance-table\n          .data=${{\n            insight: this,\n            headers: [i18nString(UIStrings.fontColumn), i18nString(UIStrings.wastedTimeColumn)],\n            rows: this.model.fonts.map(font => ({\n              values: [\n                eventRef(font.request, {text: font.name}),\n                i18n.TimeUtilities.millisToString(font.wastedTime),\n              ],\n              overlays: [this.#overlayForRequest.get(font.request)],\n            })),\n          } as TableData}>\n        </devtools-performance-table>`}\n      </div>`;\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-font-display': FontDisplay;\n  }\n}\n\ncustomElements.define('devtools-performance-font-display', FontDisplay);\n"]}