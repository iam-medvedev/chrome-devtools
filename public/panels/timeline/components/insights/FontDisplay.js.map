{"version":3,"file":"FontDisplay.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/FontDisplay.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './Table.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type {FontDisplayInsightModel} from '../../../../models/trace/insights/FontDisplay.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport * as LitHtml from '../../../../ui/lit-html/lit-html.js';\nimport type * as Overlays from '../../overlays/overlays.js';\n\nimport {eventRef} from './EventRef.js';\nimport {BaseInsightComponent, shouldRenderForCategory} from './Helpers.js';\nimport type * as SidebarInsight from './SidebarInsight.js';\nimport type {TableData} from './Table.js';\nimport {Category} from './types.js';\n\nconst {html} = LitHtml;\n\nconst UIStrings = {\n  /** Column for a font loaded by the page to render text. */\n  fontColumn: 'Font',\n  /** Column for the amount of time wasted. */\n  wastedTimeColumn: 'Wasted time',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/insights/FontDisplay.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class FontDisplay extends BaseInsightComponent<FontDisplayInsightModel> {\n  static override readonly litTagName = LitHtml.literal`devtools-performance-font-display`;\n  override insightCategory = Category.INP;\n  override internalName: string = 'font-display';\n\n  #overlayForRequest = new Map<Trace.Types.Events.SyntheticNetworkRequest, Overlays.Overlays.TimelineOverlay>();\n\n  override createOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    this.#overlayForRequest.clear();\n\n    if (!this.model) {\n      return [];\n    }\n\n    for (const font of this.model.fonts) {\n      this.#overlayForRequest.set(font.request, {\n        type: 'ENTRY_OUTLINE',\n        entry: font.request,\n        outlineReason: font.wastedTime ? 'ERROR' : 'INFO',\n      });\n    }\n\n    return [...this.#overlayForRequest.values()];\n  }\n\n  #render(insight: Trace.Insights.Types.InsightModels['FontDisplay']): LitHtml.LitTemplate {\n    if (!this.model) {\n      return LitHtml.nothing;\n    }\n\n    // clang-format off\n    return html`\n        <div class=\"insights\">\n            <devtools-performance-sidebar-insight .data=${{\n              title: this.model.title,\n              description: this.model.description,\n              expanded: this.isActive(),\n              internalName: this.internalName,\n              estimatedSavingsTime: insight.metricSavings?.FCP,\n            } as SidebarInsight.InsightDetails}\n            @insighttoggleclick=${this.onSidebarClick}>\n                <div slot=\"insight-content\" class=\"insight-section\">\n                  ${html`<devtools-performance-table\n                    .data=${{\n                      insight: this,\n                      headers: [i18nString(UIStrings.fontColumn), 'font-display', i18nString(UIStrings.wastedTimeColumn)],\n                      rows: insight.fonts.map(font => ({\n                        values: [\n                          // TODO(crbug.com/369422196): the font name would be nicer here.\n                          eventRef(font.request),\n                          font.display,\n                          i18n.TimeUtilities.millisToString(font.wastedTime),\n                        ],\n                        overlays: [this.#overlayForRequest.get(font.request)],\n                      })),\n                    } as TableData}>\n                  </devtools-performance-table>`}\n                </div>\n            </devtools-performance-sidebar-insight>\n        </div>`;\n    // clang-format on\n  }\n\n  override getRelatedEvents(): Trace.Types.Events.Event[] {\n    return this.model?.relatedEvents ?? [];\n  }\n\n  override render(): void {\n    const model = this.model;\n    const shouldShow = model && model.fonts.find(font => font.wastedTime);\n\n    const matchesCategory = shouldRenderForCategory({\n      activeCategory: this.data.activeCategory,\n      insightCategory: this.insightCategory,\n    });\n    const output = shouldShow && matchesCategory ? this.#render(model) : LitHtml.nothing;\n    LitHtml.render(output, this.shadow, {host: this});\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-font-display': FontDisplay;\n  }\n}\n\ncustomElements.define('devtools-performance-font-display', FontDisplay);\n"]}