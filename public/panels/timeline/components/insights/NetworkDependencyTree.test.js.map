{"version":3,"file":"NetworkDependencyTree.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/components/insights/NetworkDependencyTree.test.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,KAAK,MAAM,mCAAmC,CAAC;AAC3D,OAAO,EAAC,uBAAuB,EAAC,MAAM,2CAA2C,CAAC;AAElF,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,uBAAuB,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACpD,IAAI,SAA+D,CAAC;IAEpE,UAAU,CAAC,GAAG,EAAE;QACd,6GAA6G;QAC7G,SAAS,GAAG,IAAI,QAAQ,CAAC,qBAAqB,CAAC,qBAAqB,EAAE,CAAC;IACzE,CAAC,CAAC,CAAC;IAEH;;;OAGG;IACH,SAAS,cAAc,CAAC,UAEpB,EAAE;QACJ,OAAO;YACL,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAI,EAAE;YAChC,eAAe,EAAE,IAAI,GAAG,EAAE;YAC1B,SAAS,EAAE,KAAK;YAChB,sBAAsB,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACnD,OAAO,EAAE,iCAAiC,EAAE;SAC7C,CAAC;IACJ,CAAC;IAED,SAAS,iCAAiC;QACxC,OAAO;YACL,IAAI,EAAE;gBACJ,IAAI,EAAE;oBACJ,GAAG,EAAE,sBAAsB;iBAC5B;aACF;YACD,IAAI,mFAAmD;SACV,CAAC;IAClD,CAAC;IAED,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;QACxE,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,qBAAqB,CAAC,kBAAkB,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3E,MAAM,IAAI,GAAG,cAAc,EAAE,CAAC;YAC9B,MAAM,KAAK,GAAG,cAAc,CAAC,EAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC;YACjD,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC;QACD,MAAM,IAAI,GAAG,cAAc,CAAC,EAAC,QAAQ,EAAC,CAAC,CAAC;QAExC,MAAM,OAAO,GAAG,SAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;QAC1D,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC1B,oGAAoG;QACpG,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;QACxE,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,qBAAqB,CAAC,kBAAkB,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC/E,MAAM,IAAI,GAAG,cAAc,EAAE,CAAC;YAC9B,MAAM,KAAK,GAAG,cAAc,CAAC;gBAC3B,QAAQ,EAAE,CAAC,IAAI,CAAC;aACjB,CAAC,CAAC;YACH,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC;QACD,MAAM,IAAI,GAAG,cAAc,CAAC,EAAC,QAAQ,EAAC,CAAC,CAAC;QAExC,MAAM,OAAO,GAAG,SAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;QAC1D,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC1B,kDAAkD;QAClD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;IACjG,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../../../models/trace/trace.js';\nimport {describeWithEnvironment} from '../../../../testing/EnvironmentHelpers.js';\n\nimport * as Insights from './insights.js';\n\ndescribeWithEnvironment('NetworkDependencyTree', () => {\n  let component: Insights.NetworkDependencyTree.NetworkDependencyTree;\n\n  beforeEach(() => {\n    // Create a new instance of the component before each test, so the previous number of chains will be cleared.\n    component = new Insights.NetworkDependencyTree.NetworkDependencyTree();\n  });\n\n  /**\n   * Helper function to create a dummy CriticalRequestNode.\n   * For the purpose of these unit tests, we only care about the |children| field.\n   */\n  function createMockNode(options: {\n    children?: Trace.Insights.Models.NetworkDependencyTree.CriticalRequestNode[],\n  } = {}): Trace.Insights.Models.NetworkDependencyTree.CriticalRequestNode {\n    return {\n      children: options.children ?? [],\n      relatedRequests: new Set(),\n      isLongest: false,\n      timeFromInitialRequest: Trace.Types.Timing.Micro(0),\n      request: createMockSyntheticNetworkRequest(),\n    };\n  }\n\n  function createMockSyntheticNetworkRequest(): Trace.Types.Events.SyntheticNetworkRequest {\n    return {\n      args: {\n        data: {\n          url: 'https://example.com/',\n        },\n      },\n      name: Trace.Types.Events.Name.SYNTHETIC_NETWORK_REQUEST\n    } as Trace.Types.Events.SyntheticNetworkRequest;\n  }\n\n  it('should return a TableDataRow for a node within the chain limit', () => {\n    const children = [];\n    for (let i = 0; i < Insights.NetworkDependencyTree.MAX_CHAINS_TO_SHOW; i++) {\n      const leaf = createMockNode();\n      const chain = createMockNode({children: [leaf]});\n      children.push(chain);\n    }\n    const root = createMockNode({children});\n\n    const rootRow = component.mapNetworkDependencyToRow(root);\n    assert.isNotNull(rootRow);\n    // There are 5 chains, so no chain will be hidden, so the length should be same as number of chains.\n    assert.strictEqual(rootRow.subRows?.length, children.length);\n  });\n\n  it('should return a TableDataRow for a node beyond the chain limit', () => {\n    const children = [];\n    for (let i = 0; i < Insights.NetworkDependencyTree.MAX_CHAINS_TO_SHOW + 1; i++) {\n      const leaf = createMockNode();\n      const child = createMockNode({\n        children: [leaf],\n      });\n      children.push(child);\n    }\n    const root = createMockNode({children});\n\n    const rootRow = component.mapNetworkDependencyToRow(root);\n    assert.isNotNull(rootRow);\n    // There are more than 5 chains, so will cut to 5.\n    assert.strictEqual(rootRow.subRows?.length, Insights.NetworkDependencyTree.MAX_CHAINS_TO_SHOW);\n  });\n});\n"]}