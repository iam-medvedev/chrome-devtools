{"version":3,"file":"IgnoreListSetting.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/IgnoreListSetting.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../ui/components/menus/menus.js';\n\nimport * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Bindings from '../../../models/bindings/bindings.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as Dialogs from '../../../ui/components/dialogs/dialogs.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as Lit from '../../../ui/lit/lit.js';\n\nimport ignoreListSettingStylesRaw from './ignoreListSetting.css.js';\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst ignoreListSettingStyles = new CSSStyleSheet();\nignoreListSettingStyles.replaceSync(ignoreListSettingStylesRaw.cssContent);\n\nconst {html} = Lit;\n\nconst UIStrings = {\n  /**\n   * @description Text title for the button to open the ignore list setting.\n   */\n  showIgnoreListSettingDialog: 'Show ignore list setting dialog',\n  /**\n   * @description Text title for ignore list setting.\n   */\n  ignoreList: 'Ignore list',\n  /**\n   * @description Text description for ignore list setting.\n   */\n  ignoreListDescription: 'Add regular expression rules to remove matching scripts from the flame chart.',\n  /**\n   *@description Pattern title in Framework Ignore List Settings Tab of the Settings\n   *@example {ad.*?} regex\n   */\n  ignoreScriptsWhoseNamesMatchS: 'Ignore scripts whose names match \\'\\'{regex}\\'\\'',\n  /**\n   *@description Label for the button to remove an regex\n   *@example {ad.*?} regex\n   */\n  removeRegex: 'Remove the regex: \\'\\'{regex}\\'\\'',\n  /**\n   *@description Aria accessible name in Ignore List Settings Dialog in Performance panel. It labels the input\n   * field used to add new or edit existing regular expressions that match file names to ignore in the debugger.\n   */\n  addNewRegex: 'Add a regular expression rule for the script\\'s URL',\n  /**\n   * @description Aria accessible name in Ignore List Settings Dialog in Performance panel. It labels the checkbox of\n   * the input field used to enable the new regular expressions that match file names to ignore in the debugger.\n   */\n  ignoreScriptsWhoseNamesMatchNewRegex: 'Ignore scripts whose names match the new regex',\n  /**\n   *@description Error message in Framework Ignore List settings pane that declares pattern must not be empty\n   */\n  patternCannotBeEmpty: 'Rule can\\'t be empty',\n  /**\n   *@description Error message in Framework Ignore List settings pane that declares pattern already exits\n   */\n  patternAlreadyExists: 'Rule already exists',\n  /**\n   *@description Error message in Framework Ignore List settings pane that declares pattern must be a valid regular expression\n   */\n  patternMustBeAValidRegular: 'Rule must be a valid regular expression',\n  /**\n   *@description Error message in Framework Ignore List settings pane that declares pattern already exits\n   */\n  patternAlreadyExistsWillBeEnables:\n      'This rule already exists but is disabled. Saving this value will re-enable the rule',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/IgnoreListSetting.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class IgnoreListSetting extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #renderBound = this.#render.bind(this);\n  readonly #ignoreListEnabled: Common.Settings.Setting<boolean> =\n      Common.Settings.Settings.instance().moduleSetting('enable-ignore-listing');\n  readonly #regexPatterns = this.#getSkipStackFramesPatternSetting().getAsArray();\n\n  #newRegexCheckbox = UI.UIUtils.CheckboxLabel.create(\n      /* title*/ undefined, /* checked*/ false, /* subtitle*/ undefined,\n      /* jslogContext*/ 'timeline.ignore-list-new-regex.checkbox');\n  #newRegexInput = UI.UIUtils.createInput(\n      /* className*/ 'new-regex-text-input', /* type*/ 'text', /* jslogContext*/ 'timeline.ignore-list-new-regex.text');\n  #newRegexIsValid = true;\n  #newRegexValidationMessage?: string;\n\n  #editingRegexSetting: Common.Settings.RegExpSettingItem|null = null;\n\n  constructor() {\n    super();\n\n    this.#initAddNewItem();\n\n    Common.Settings.Settings.instance()\n        .moduleSetting('skip-stack-frames-pattern')\n        .addChangeListener(this.#scheduleRender.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('enable-ignore-listing')\n        .addChangeListener(this.#scheduleRender.bind(this));\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [ignoreListSettingStyles];\n    this.#scheduleRender();\n\n    // Prevent the event making its way to the TimelinePanel element which will\n    // cause the \"Load Profile\" context menu to appear.\n    this.addEventListener('contextmenu', e => {\n      e.stopPropagation();\n    });\n  }\n\n  #scheduleRender(): void {\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  #getSkipStackFramesPatternSetting(): Common.Settings.RegExpSetting {\n    return Common.Settings.Settings.instance().moduleSetting('skip-stack-frames-pattern') as\n        Common.Settings.RegExpSetting;\n  }\n\n  #startEditing(): void {\n    // Do not need to trim here because this is a temporary one, we will trim the input when finish editing,\n    this.#editingRegexSetting = {pattern: this.#newRegexInput.value, disabled: false, disabledForUrl: undefined};\n    // We need to push the temp regex here to update the flame chart.\n    // We are using the \"skip-stack-frames-pattern\" setting to determine which is rendered on flame chart. And the push\n    // here will update the setting's value.\n    this.#regexPatterns.push(this.#editingRegexSetting);\n  }\n\n  #finishEditing(): void {\n    if (!this.#editingRegexSetting) {\n      return;\n    }\n\n    const lastRegex = this.#regexPatterns.pop();\n    // Add a sanity check to make sure the last one is the editing one.\n    // In case the check fails, add back the last element.\n    if (lastRegex && lastRegex !== this.#editingRegexSetting) {\n      console.warn('The last regex is not the editing one.');\n      this.#regexPatterns.push(lastRegex);\n    }\n\n    this.#editingRegexSetting = null;\n    this.#getSkipStackFramesPatternSetting().setAsArray(this.#regexPatterns);\n  }\n\n  #resetInput(): void {\n    this.#newRegexCheckbox.checkboxElement.checked = false;\n    this.#newRegexInput.value = '';\n\n    this.#newRegexIsValid = true;\n    this.#newRegexValidationMessage = undefined;\n  }\n\n  #addNewRegexToIgnoreList(): void {\n    const newRegex = this.#newRegexInput.value.trim();\n\n    this.#finishEditing();\n    const {valid} = patternValidator(this.#getExistingRegexes(), newRegex);\n    if (!valid) {\n      // It the new regex is invalid, let's skip it.\n      return;\n    }\n    Bindings.IgnoreListManager.IgnoreListManager.instance().addRegexToIgnoreList(newRegex);\n    this.#resetInput();\n  }\n\n  #handleKeyDown(event: KeyboardEvent): void {\n    // When user press the 'Enter', the current regex will be added and user can keep adding more regexes.\n    if (event.key === Platform.KeyboardUtilities.ENTER_KEY) {\n      this.#addNewRegexToIgnoreList();\n      this.#startEditing();\n      return;\n    }\n\n    // When user press the 'Escape', it means cancel the editing, so the current regex won't be added and the input will\n    // lose focus.\n    if (event.key === Platform.KeyboardUtilities.ESCAPE_KEY) {\n      // Escape key will close the dialog, and toggle the `Console` drawer. So we need to ignore other listeners.\n      event.stopImmediatePropagation();\n\n      this.#finishEditing();\n      this.#resetInput();\n      this.#newRegexInput.blur();\n    }\n  }\n\n  /**\n   * When it is in the 'preview' mode, the last regex in the array is the editing one.\n   * So we want to remove it for some usage, like rendering the existed rules or validating the rules.\n   */\n  #getExistingRegexes(): Common.Settings.RegExpSettingItem[] {\n    if (this.#editingRegexSetting) {\n      const lastRegex = this.#regexPatterns[this.#regexPatterns.length - 1];\n\n      // Add a sanity check to make sure the last one is the editing one.\n      if (lastRegex && lastRegex === this.#editingRegexSetting) {\n        // We don't want to modify the array itself, so just return a shadow copy of it.\n        return this.#regexPatterns.slice(0, -1);\n      }\n    }\n    return this.#regexPatterns;\n  }\n\n  #validateInput(): void {\n    const newRegex = this.#newRegexInput.value.trim();\n    const newRegexIsNotEmpty = Boolean(newRegex);\n    // Enable the rule if the text input field is not empty.\n    this.#newRegexCheckbox.checkboxElement.checked = newRegexIsNotEmpty;\n    const {valid, message} = patternValidator(this.#getExistingRegexes(), newRegex);\n\n    this.#newRegexInput.classList.toggle('error-input', !valid);\n    UI.ARIAUtils.setInvalid(this.#newRegexInput, !valid);\n    this.#newRegexIsValid = valid;\n    this.#newRegexValidationMessage = message;\n  }\n\n  #handleInputChange(): void {\n    this.#validateInput();\n\n    if (this.#editingRegexSetting) {\n      const newRegex = this.#newRegexInput.value.trim();\n      this.#editingRegexSetting.pattern = newRegex;\n      this.#editingRegexSetting.disabled = !Boolean(newRegex);\n      this.#getSkipStackFramesPatternSetting().setAsArray(this.#regexPatterns);\n    }\n  }\n\n  #initAddNewItem(): void {\n    this.#newRegexInput.placeholder = '/framework\\\\.js$';\n\n    const checkboxHelpText = i18nString(UIStrings.ignoreScriptsWhoseNamesMatchNewRegex);\n    const inputHelpText = i18nString(UIStrings.addNewRegex);\n    UI.Tooltip.Tooltip.install(this.#newRegexCheckbox, checkboxHelpText);\n    UI.Tooltip.Tooltip.install(this.#newRegexInput, inputHelpText);\n\n    this.#newRegexInput.addEventListener('blur', this.#addNewRegexToIgnoreList.bind(this), false);\n    this.#newRegexInput.addEventListener('keydown', this.#handleKeyDown.bind(this), false);\n    this.#newRegexInput.addEventListener('input', this.#handleInputChange.bind(this), false);\n    this.#newRegexInput.addEventListener('focus', this.#startEditing.bind(this), false);\n  }\n\n  #renderNewRegexRow(): Lit.TemplateResult {\n    const classes = Lit.Directives.classMap({\n      'input-validation': true,\n      'input-validation-error': !this.#newRegexIsValid,\n    });\n    return html`\n      <div class='new-regex-row'>${this.#newRegexCheckbox}${this.#newRegexInput}</div>\n      ${\n        this.#newRegexValidationMessage ? html`<div class=${classes}>${this.#newRegexValidationMessage}</div>` :\n                                          Lit.nothing}\n    `;\n  }\n\n  #onRegexEnableToggled(regex: Common.Settings.RegExpSettingItem, checkbox: UI.UIUtils.CheckboxLabel): void {\n    regex.disabled = !checkbox.checkboxElement.checked;\n    this.#validateInput();\n    // Technically we don't need to call the set function, because the regex is a reference, so it changed the setting\n    // value directly.\n    // But we need to call the set function to trigger the setting change event. which is needed by view update of flame\n    // chart.\n    this.#getSkipStackFramesPatternSetting().setAsArray(this.#regexPatterns);\n    // There is no need to update this component, since the only UI change is this checkbox, which is already done by\n    // the user.\n  }\n\n  #removeRegexByIndex(index: number): void {\n    this.#regexPatterns.splice(index, 1);\n    this.#validateInput();\n    // Call the set function to trigger the setting change event. we listen to this event and will update this component\n    // and the flame chart.\n    this.#getSkipStackFramesPatternSetting().setAsArray(this.#regexPatterns);\n  }\n\n  #renderItem(regex: Common.Settings.RegExpSettingItem, index: number): Lit.TemplateResult {\n    const checkboxWithLabel = UI.UIUtils.CheckboxLabel.createWithStringLiteral(\n        regex.pattern, !regex.disabled, /* subtitle*/ undefined, /* jslogContext*/ 'timeline.ignore-list-pattern');\n    const helpText = i18nString(UIStrings.ignoreScriptsWhoseNamesMatchS, {regex: regex.pattern});\n    UI.Tooltip.Tooltip.install(checkboxWithLabel, helpText);\n    checkboxWithLabel.checkboxElement.ariaLabel = helpText;\n    checkboxWithLabel.checkboxElement.addEventListener(\n        'change', this.#onRegexEnableToggled.bind(this, regex, checkboxWithLabel), false);\n    // clang-format off\n    return html`\n      <div class='regex-row'>\n        ${checkboxWithLabel}\n        <devtools-button\n            @click=${this.#removeRegexByIndex.bind(this, index)}\n            .data=${{\n            variant: Buttons.Button.Variant.ICON,\n            iconName: 'bin',\n            title: i18nString(UIStrings.removeRegex, {regex: regex.pattern}),\n            jslogContext: 'timeline.ignore-list-pattern.remove',\n          } as Buttons.Button.ButtonData}></devtools-button>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #render(): void {\n    if (!ComponentHelpers.ScheduledRender.isScheduledRender(this)) {\n      throw new Error('Ignore List setting dialog render was not scheduled');\n    }\n    // clang-format off\n    const output = html`\n      <devtools-button-dialog .data=${{\n          openOnRender: false,\n          jslogContext: 'timeline.ignore-list',\n          variant: Buttons.Button.Variant.TOOLBAR,\n          iconName: 'compress',\n          disabled: !this.#ignoreListEnabled.get(),\n          iconTitle: i18nString(UIStrings.showIgnoreListSettingDialog),\n          horizontalAlignment: Dialogs.Dialog.DialogHorizontalAlignment.AUTO,\n          closeButton: true,\n          dialogTitle: i18nString(UIStrings.ignoreList),\n        } as Dialogs.ButtonDialog.ButtonDialogData}>\n        <div class='ignore-list-setting-content'>\n          <div class='ignore-list-setting-description'>${i18nString(UIStrings.ignoreListDescription)}</div>\n          ${this.#getExistingRegexes().map(this.#renderItem.bind(this))}\n          ${this.#renderNewRegexRow()}\n        </div>\n      </devtools-button-dialog>\n    `;\n    // clang-format on\n    Lit.render(output, this.#shadow, {host: this});\n  }\n}\n\ncustomElements.define('devtools-perf-ignore-list-setting', IgnoreListSetting);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-perf-ignore-list-setting': IgnoreListSetting;\n  }\n}\n\n/**\n * Returns if a new regex string is valid for the given regex setting array.\n *\n * Export for test reason\n * @param existingRegexes an array of objects, each representing a regex pattern and its state.\n * @param inputValue new regex in string format\n * @returns if the regex is valid and if not, why it is invalid\n */\nexport function patternValidator(existingRegexes: Common.Settings.RegExpSettingItem[], inputValue: string): {\n  valid: boolean,\n  message?: string,\n} {\n  const pattern = inputValue.trim();\n\n  if (!pattern.length) {\n    return {valid: false, message: i18nString(UIStrings.patternCannotBeEmpty)};\n  }\n\n  for (let i = 0; i < existingRegexes.length; ++i) {\n    const regexPattern = existingRegexes[i];\n    if (regexPattern.pattern === pattern) {\n      if (regexPattern.disabled || regexPattern.disabledForUrl) {\n        return {valid: true, message: i18nString(UIStrings.patternAlreadyExistsWillBeEnables)};\n      }\n      return {valid: false, message: i18nString(UIStrings.patternAlreadyExists)};\n    }\n  }\n\n  let regex;\n  try {\n    regex = new RegExp(pattern);\n  } catch {\n  }\n  if (!regex) {\n    return {valid: false, message: i18nString(UIStrings.patternMustBeAValidRegular)};\n  }\n  return {valid: true};\n}\n"]}