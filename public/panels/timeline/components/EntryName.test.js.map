{"version":3,"file":"EntryName.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/EntryName.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as CPUProfile from '../../../models/cpu_profile/cpu_profile.js';\nimport * as TraceEngine from '../../../models/trace/trace.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {getMainThread} from '../../../testing/TraceHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\n\nimport * as Components from './components.js';\n\ndescribeWithEnvironment('EntryName', () => {\n  it('uses the URL for the name of a network request', async function() {\n    const {traceData} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n    const request = traceData.NetworkRequests.byTime.at(0);\n    assert.isOk(request);\n    const name = Components.EntryName.nameForEntry(request);\n    assert.strictEqual(name, 'web.dev/ (web.dev)');\n  });\n\n  it('uses \"Frame\" for timeline frames', async function() {\n    const {traceData} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n    const frame = traceData.Frames.frames.at(0);\n    assert.isOk(frame);\n    const name = Components.EntryName.nameForEntry(frame);\n    assert.strictEqual(name, 'Frame');\n  });\n\n  it('adds the event type for EventDispatch events', async function() {\n    const {traceData} = await TraceLoader.traceEngine(this, 'one-second-interaction.json.gz');\n    const clickEvent = traceData.Renderer.allTraceEntries.find(event => {\n      return TraceEngine.Types.TraceEvents.isTraceEventDispatch(event) && event.args.data.type === 'click';\n    });\n    assert.isOk(clickEvent);\n    const name = Components.EntryName.nameForEntry(clickEvent);\n    assert.strictEqual(name, 'Event: click');\n  });\n\n  describe('profile calls', () => {\n    it('uses the profile name for a ProfileCall if it has been set', async function() {\n      const {traceData} = await TraceLoader.traceEngine(this, 'react-hello-world.json.gz');\n      const {entry, profileNode} = getProfileEventAndNodeForReactTrace(traceData);\n      // Store and then reset this: we are doing this to test the fallback to\n      // the entry callFrame.functionName property. After the assertion we\n      // reset this to avoid impacting other tests.\n      const originalProfileNodeName = profileNode.functionName;\n      profileNode.setFunctionName('testing-profile-name');\n      const name = Components.EntryName.nameForEntry(entry, traceData);\n      assert.strictEqual(name, 'testing-profile-name');\n      profileNode.setFunctionName(originalProfileNodeName);\n    });\n\n    it('falls back to the call frame name if a specific name has not been set', async function() {\n      const {traceData} = await TraceLoader.traceEngine(this, 'react-hello-world.json.gz');\n      const {entry, profileNode} = getProfileEventAndNodeForReactTrace(traceData);\n      // Store and then reset this: we are doing this to test the fallback to\n      // the entry callFrame.functionName property. After the assertion we\n      // reset this to avoid impacting other tests.\n      const originalProfileNodeName = profileNode.functionName;\n      profileNode.setFunctionName('');\n      const name = Components.EntryName.nameForEntry(entry, traceData);\n      assert.strictEqual(name, 'performConcurrentWorkOnRoot');\n      profileNode.setFunctionName(originalProfileNodeName);\n    });\n\n    // Finds a particular event from the react-hello-world trace which is used for our test example.\n    function getProfileEventAndNodeForReactTrace(traceData: TraceEngine.Handlers.Types.TraceParseData): {\n      entry: TraceEngine.Types.TraceEvents.SyntheticProfileCall,\n      profileNode: CPUProfile.ProfileTreeModel.ProfileNode,\n    } {\n      const mainThread = getMainThread(traceData.Renderer);\n      let foundNode: CPUProfile.ProfileTreeModel.ProfileNode|null = null;\n      let foundEntry: TraceEngine.Types.TraceEvents.SyntheticProfileCall|null = null;\n\n      for (const entry of mainThread.entries) {\n        if (TraceEngine.Types.TraceEvents.isProfileCall(entry) &&\n            entry.callFrame.functionName === 'performConcurrentWorkOnRoot') {\n          const profile = traceData.Samples.profilesInProcess.get(entry.pid)?.get(entry.tid);\n          const node = profile?.parsedProfile.nodeById(entry.nodeId);\n          if (node) {\n            foundNode = node;\n          }\n          foundEntry = entry;\n          break;\n        }\n      }\n      if (!foundNode) {\n        throw new Error('Could not find CPU Profile node.');\n      }\n      if (!foundEntry) {\n        throw new Error('Could not find expected entry.');\n      }\n\n      return {\n        entry: foundEntry,\n        profileNode: foundNode,\n      };\n    }\n  });\n});\n"]}