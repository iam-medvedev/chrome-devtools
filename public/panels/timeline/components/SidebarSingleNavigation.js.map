{"version":3,"file":"SidebarSingleNavigation.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/SidebarSingleNavigation.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// TODO(crbug.com/366049346): rename file\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Trace from '../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport {type BaseInsight} from './insights/Helpers.js';\nimport * as Insights from './insights/insights.js';\nimport {type ActiveInsight, EventReferenceClick} from './Sidebar.js';\nimport {InsightsCategories} from './SidebarInsightsTab.js';\nimport styles from './sidebarSingleNavigation.css.js';\n\nexport interface SidebarSingleNavigationData {\n  parsedTrace: Trace.Handlers.Types.ParsedTrace|null;\n  insights: Trace.Insights.Types.TraceInsightSets|null;\n  navigationId: string|null;\n  activeCategory: InsightsCategories;\n  activeInsight: ActiveInsight|null;\n}\n\nexport class SidebarSingleNavigation extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-performance-sidebar-single-navigation`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #renderBound = this.#render.bind(this);\n\n  #data: SidebarSingleNavigationData = {\n    parsedTrace: null,\n    insights: null,\n    navigationId: null,\n    activeCategory: InsightsCategories.ALL,\n    activeInsight: null,\n  };\n\n  set data(data: SidebarSingleNavigationData) {\n    this.#data = data;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [styles];\n    this.#render();\n  }\n\n  #metricIsVisible(label: 'LCP'|'CLS'|'INP'): boolean {\n    if (this.#data.activeCategory === InsightsCategories.ALL) {\n      return true;\n    }\n    return label === this.#data.activeCategory;\n  }\n\n  #onClickMetric(event: Trace.Types.Events.Event, insightComponentName: string): void {\n    const el = this.shadowRoot?.querySelector(insightComponentName) as BaseInsight;\n    if (el && this.#data.navigationId) {\n      this.dispatchEvent(new Insights.SidebarInsight.InsightActivated(\n          el.internalName,\n          this.#data.navigationId,\n          el.createOverlays.bind(el),\n          ));\n    }\n\n    this.dispatchEvent(new EventReferenceClick(event));\n  }\n\n  #renderMetricValue(\n      label: 'LCP'|'CLS'|'INP', value: string,\n      classification: Trace.Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification,\n      event: Trace.Types.Events.Event|null): LitHtml.LitTemplate {\n    const insightComponentName = {\n      LCP: Insights.LCPPhases.LCPPhases.litTagName.value as string,\n      CLS: Insights.CLSCulprits.CLSCulprits.litTagName.value as string,\n      INP: Insights.InteractionToNextPaint.InteractionToNextPaint.litTagName.value as string,\n    }[label];\n\n    // clang-format off\n    return this.#metricIsVisible(label) ? LitHtml.html`\n      <div class=\"metric\" @click=${event ? this.#onClickMetric.bind(this, event, insightComponentName) : null}>\n        <div class=\"metric-value metric-value-${classification}\">${value}</div>\n        <div class=\"metric-label\">${label}</div>\n      </div>\n    ` : LitHtml.nothing;\n    // clang-format on\n  }\n\n  /**\n   * @returns the duration of the longest interaction for the navigation. If\n   * there are no interactions, we return `null`. This distinction is important\n   * as if there are no navigations, we do not want to show the user the INP\n   * score.\n   */\n  #calculateINP(\n      parsedTrace: Trace.Handlers.Types.ParsedTrace,\n      navigationId: string,\n      ): Trace.Types.Timing.MicroSeconds|null {\n    const eventsForNavigation = parsedTrace.UserInteractions.interactionEventsWithNoNesting.filter(e => {\n      return e.args.data.navigationId === navigationId;\n    });\n    if (eventsForNavigation.length === 0) {\n      return null;\n    }\n\n    let maxDuration = Trace.Types.Timing.MicroSeconds(0);\n    for (const event of eventsForNavigation) {\n      if (event.dur > maxDuration) {\n        maxDuration = event.dur;\n      }\n    }\n\n    return maxDuration;\n  }\n\n  #calculateCLSScore(\n      parsedTrace: Trace.Handlers.Types.ParsedTrace,\n      navigationId: string,\n      ): {maxScore: number, worstShfitEvent: Trace.Types.Events.Event|null} {\n    // Find all clusers associated with this navigation\n    const clustersForNavigation = parsedTrace.LayoutShifts.clusters.filter(c => c.navigationId === navigationId);\n    let maxScore = 0;\n    let worstCluster;\n    for (const cluster of clustersForNavigation) {\n      if (cluster.clusterCumulativeScore > maxScore) {\n        maxScore = cluster.clusterCumulativeScore;\n        worstCluster = cluster;\n      }\n    }\n    return {maxScore, worstShfitEvent: worstCluster?.worstShiftEvent ?? null};\n  }\n\n  #renderMetrics(\n      parsedTrace: Trace.Handlers.Types.ParsedTrace,\n      navigationId: string,\n      ): LitHtml.TemplateResult {\n    const forNavigation =\n        parsedTrace.PageLoadMetrics.metricScoresByFrameId.get(parsedTrace.Meta.mainFrameId)?.get(navigationId);\n    const lcpMetric = forNavigation?.get(Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP);\n\n    const {maxScore: clsScore, worstShfitEvent} = this.#calculateCLSScore(parsedTrace, navigationId);\n    const inp = this.#calculateINP(parsedTrace, navigationId);\n\n    return LitHtml.html`\n    <div class=\"metrics-row\">\n    ${\n        lcpMetric ? this.#renderMetricValue(\n                        'LCP', i18n.TimeUtilities.formatMicroSecondsAsSeconds(lcpMetric.timing),\n                        lcpMetric.classification, lcpMetric.event ?? null) :\n                    LitHtml.nothing}\n    ${\n        this.#renderMetricValue(\n            'CLS', clsScore.toFixed(2),\n            Trace.Handlers.ModelHandlers.LayoutShifts.scoreClassificationForLayoutShift(clsScore), worstShfitEvent)}\n    ${\n        inp ?\n            this.#renderMetricValue(\n                'INP', i18n.TimeUtilities.formatMicroSecondsAsMillisFixed(inp),\n                Trace.Handlers.ModelHandlers.UserInteractions.scoreClassificationForInteractionToNextPaint(inp), null) :\n            LitHtml.nothing}\n    </div>\n    `;\n  }\n\n  #renderInsights(\n      insights: Trace.Insights.Types.TraceInsightSets|null,\n      navigationId: string,\n      ): LitHtml.TemplateResult {\n    // TODO(crbug.com/368135130): sort this in a smart way!\n    const insightComponents = [\n      Insights.LCPPhases.LCPPhases,\n      Insights.InteractionToNextPaint.InteractionToNextPaint,\n      Insights.LCPDiscovery.LCPDiscovery,\n      Insights.RenderBlocking.RenderBlockingRequests,\n      Insights.SlowCSSSelector.SlowCSSSelector,\n      Insights.CLSCulprits.CLSCulprits,\n      Insights.DocumentLatency.DocumentLatency,\n      Insights.ThirdParties.ThirdParties,\n      Insights.Viewport.Viewport,\n    ];\n    // clang-format off\n    return LitHtml.html`${insightComponents.map(component => {\n      return LitHtml.html`<div>\n        <${component.litTagName}\n          .insights=${insights}\n          .navigationId=${navigationId}\n          .activeInsight=${this.#data.activeInsight}\n          .activeCategory=${this.#data.activeCategory}\n        </${component.litTagName}>\n      </div>`;\n    })}`;\n    // clang-format on\n  }\n\n  #render(): void {\n    const {\n      parsedTrace,\n      insights,\n      navigationId,\n    } = this.#data;\n    if (!parsedTrace || !insights || !navigationId) {\n      LitHtml.render(LitHtml.html``, this.#shadow, {host: this});\n      return;\n    }\n\n    // clang-format off\n    LitHtml.render(LitHtml.html`\n      <div class=\"navigation\">\n        ${this.#renderMetrics(parsedTrace, navigationId)}\n        ${this.#renderInsights(insights, navigationId)}\n        </div>\n      `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-sidebar-single-navigation': SidebarSingleNavigation;\n  }\n}\n\ncustomElements.define('devtools-performance-sidebar-single-navigation', SidebarSingleNavigation);\n"]}