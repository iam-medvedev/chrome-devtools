{"version":3,"file":"SidebarSingleNavigation.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/SidebarSingleNavigation.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as TraceEngine from '../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport * as Insights from './insights/insights.js';\nimport {type ActiveInsight} from './Sidebar.js';\nimport {InsightsCategories} from './SidebarInsightsTab.js';\nimport styles from './sidebarSingleNavigation.css.js';\n\nexport interface SidebarSingleNavigationData {\n  traceParsedData: TraceEngine.Handlers.Types.TraceParseData|null;\n  insights: TraceEngine.Insights.Types.TraceInsightData|null;\n  navigationId: string|null;\n  activeCategory: InsightsCategories;\n  activeInsight: ActiveInsight|null;\n}\n\nexport class SidebarSingleNavigation extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-performance-sidebar-single-navigation`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #renderBound = this.#render.bind(this);\n\n  #data: SidebarSingleNavigationData = {\n    traceParsedData: null,\n    insights: null,\n    navigationId: null,\n    activeCategory: InsightsCategories.ALL,\n    activeInsight: null,\n  };\n\n  set data(data: SidebarSingleNavigationData) {\n    this.#data = data;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [styles];\n    this.#render();\n  }\n\n  #metricIsVisible(label: 'LCP'|'CLS'|'INP'): boolean {\n    if (this.#data.activeCategory === InsightsCategories.ALL) {\n      return true;\n    }\n    return label === this.#data.activeCategory;\n  }\n\n  #renderMetricValue(\n      label: 'LCP'|'CLS'|'INP', value: string,\n      classification: TraceEngine.Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification): LitHtml.LitTemplate {\n    // clang-format off\n    return this.#metricIsVisible(label) ? LitHtml.html`\n      <div class=\"metric\">\n        <div class=\"metric-value metric-value-${classification}\">${value}</div>\n        <div class=\"metric-label\">${label}</div>\n      </div>\n    ` : LitHtml.nothing;\n    // clang-format on\n  }\n\n  /**\n   * @returns the duration of the longest interaction for the navigation. If\n   * there are no interactions, we return `null`. This distinction is important\n   * as if there are no navigations, we do not want to show the user the INP\n   * score.\n   */\n  #calculateINPScore(\n      traceParsedData: TraceEngine.Handlers.Types.TraceParseData,\n      navigationId: string,\n      ): TraceEngine.Types.Timing.MicroSeconds|null {\n    const eventsForNavigation = traceParsedData.UserInteractions.interactionEventsWithNoNesting.filter(e => {\n      return e.args.data.navigationId === navigationId;\n    });\n    if (eventsForNavigation.length === 0) {\n      return null;\n    }\n\n    let maxDuration = TraceEngine.Types.Timing.MicroSeconds(0);\n    for (const event of eventsForNavigation) {\n      if (event.dur > maxDuration) {\n        maxDuration = event.dur;\n      }\n    }\n\n    return maxDuration;\n  }\n\n  #calculateCLSScore(\n      traceParsedData: TraceEngine.Handlers.Types.TraceParseData,\n      navigationId: string,\n      ): number {\n    // Find all clusers associated with this navigation\n    const clustersForNavigation = traceParsedData.LayoutShifts.clusters.filter(c => c.navigationId === navigationId);\n    let maxScore = 0;\n    for (const cluster of clustersForNavigation) {\n      if (cluster.clusterCumulativeScore > maxScore) {\n        maxScore = cluster.clusterCumulativeScore;\n      }\n    }\n    return maxScore;\n  }\n\n  #renderMetrics(\n      traceParsedData: TraceEngine.Handlers.Types.TraceParseData,\n      navigationId: string,\n      ): LitHtml.TemplateResult {\n    const forNavigation =\n        traceParsedData.PageLoadMetrics.metricScoresByFrameId.get(traceParsedData.Meta.mainFrameId)?.get(navigationId);\n    const lcpMetric = forNavigation?.get(TraceEngine.Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP);\n\n    const clsScore = this.#calculateCLSScore(traceParsedData, navigationId);\n    const inpScore = this.#calculateINPScore(traceParsedData, navigationId);\n\n    return LitHtml.html`\n    <div class=\"metrics-row\">\n    ${\n        lcpMetric ?\n            this.#renderMetricValue(\n                'LCP', i18n.TimeUtilities.formatMicroSecondsAsSeconds(lcpMetric.timing), lcpMetric.classification) :\n            LitHtml.nothing}\n    ${\n        this.#renderMetricValue(\n            'CLS', clsScore.toFixed(2),\n            TraceEngine.Handlers.ModelHandlers.LayoutShifts.scoreClassificationForLayoutShift(clsScore))}\n    ${\n        inpScore ? this.#renderMetricValue(\n                       'INP', i18n.TimeUtilities.formatMicroSecondsTime(inpScore),\n                       TraceEngine.Handlers.ModelHandlers.UserInteractions.scoreClassificationForInteractionToNextPaint(\n                           inpScore)) :\n                   LitHtml.nothing}\n    </div>\n    `;\n  }\n\n  #renderInsights(\n      insights: TraceEngine.Insights.Types.TraceInsightData|null,\n      navigationId: string,\n      ): LitHtml.TemplateResult {\n    // clang-format off\n    return LitHtml.html`\n    <div>\n      <${Insights.LCPPhases.LCPPhases.litTagName}\n        .insights=${insights}\n        .navigationId=${navigationId}\n        .activeInsight=${this.#data.activeInsight}\n        .activeCategory=${this.#data.activeCategory}\n      </${Insights.LCPPhases.LCPPhases}>\n    </div>\n    <div>\n      <${Insights.LCPDiscovery.LCPDiscovery.litTagName}\n        .insights=${insights}\n        .navigationId=${navigationId}\n        .activeInsight=${this.#data.activeInsight}\n        .activeCategory=${this.#data.activeCategory}\n      </${Insights.LCPDiscovery.LCPDiscovery}>\n    </div>`;\n    // clang-format on\n  }\n\n  #render(): void {\n    const {\n      traceParsedData,\n      insights,\n      navigationId,\n    } = this.#data;\n    if (!traceParsedData || !insights || !navigationId) {\n      LitHtml.render(LitHtml.html``, this.#shadow, {host: this});\n      return;\n    }\n\n    const navigation = traceParsedData.Meta.navigationsByNavigationId.get(navigationId);\n    if (!navigation) {\n      LitHtml.render(LitHtml.html``, this.#shadow, {host: this});\n      return;\n    }\n\n    // clang-format off\n    LitHtml.render(LitHtml.html`\n      <div class=\"navigation\">\n        ${this.#renderMetrics(traceParsedData, navigationId)}\n        ${this.#renderInsights(insights, navigationId)}\n        </div>\n      `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-sidebar-single-navigation': SidebarSingleNavigation;\n  }\n}\n\ncustomElements.define('devtools-performance-sidebar-single-navigation', SidebarSingleNavigation);\n"]}