{"version":3,"file":"RelatedInsightChips.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/RelatedInsightChips.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Trace from '../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as Lit from '../../../ui/lit/lit.js';\n\nimport stylesRaw from './relatedInsightChips.css.js';\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(stylesRaw.cssContent);\n\nconst {html} = Lit;\n\nconst UIStrings = {\n  /**\n   *@description prefix shown next to related insight chips\n   */\n  insightKeyword: 'Insight',\n  /**\n   * @description Prefix shown next to related insight chips and containing the insight name.\n   * @example {Improve image delivery} PH1\n   */\n  insightWithName: 'Insight: {PH1}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/RelatedInsightChips.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface RelatedInsight {\n  insightLabel: string;\n  messages: string[];\n  activateInsight: () => void;\n}\nexport type EventToRelatedInsightsMap = Map<Trace.Types.Events.Event, RelatedInsight[]>;\n\nexport interface Data {\n  eventToRelatedInsightsMap: EventToRelatedInsightsMap;\n  activeEvent: Trace.Types.Events.Event|null;\n}\nexport class RelatedInsightChips extends HTMLElement {\n  #shadow = this.attachShadow({mode: 'open'});\n\n  #boundRender = this.#render.bind(this);\n\n  #data: Data = {eventToRelatedInsightsMap: new Map(), activeEvent: null};\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [styles];\n    this.#render();\n  }\n\n  set activeEvent(event: Data['activeEvent']) {\n    if (event === this.#data.activeEvent) {\n      return;\n    }\n    this.#data.activeEvent = event;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set eventToRelatedInsightsMap(map: Data['eventToRelatedInsightsMap']) {\n    this.#data.eventToRelatedInsightsMap = map;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #insightClick(insight: RelatedInsight): (e: Event) => void {\n    return (event: Event) => {\n      event.preventDefault();\n      insight.activateInsight();\n    };\n  }\n\n  #render(): void {\n    const {activeEvent, eventToRelatedInsightsMap} = this.#data;\n    const relatedInsights = activeEvent ? eventToRelatedInsightsMap.get(activeEvent) ?? [] : [];\n    if (!activeEvent || eventToRelatedInsightsMap.size === 0 || relatedInsights.length === 0) {\n      Lit.render(html``, this.#shadow, {host: this});\n      return;\n    }\n\n    // TODO: Render insight messages in a separate UX\n    // Right before insight chips is acceptable for now\n    const insightMessages = relatedInsights.flatMap(insight => {\n      return insight.messages.map(message => html`\n        <li class=\"insight-message-box\">\n          <button type=\"button\" @click=${this.#insightClick(insight)}>\n            <div class=\"insight-label\">${i18nString(UIStrings.insightWithName, {\n                                    PH1: insight.insightLabel,\n                                  })}</div>\n            <div class=\"insight-message\">${message}</div>\n          </button>\n        </li>\n      `);\n    });\n\n    const insightChips = relatedInsights.flatMap(insight => {\n      // clang-format off\n      return [html`\n        <li class=\"insight-chip\">\n          <button type=\"button\" @click=${this.#insightClick(insight)}>\n            <span class=\"keyword\">${i18nString(UIStrings.insightKeyword)}</span>\n            <span class=\"insight-label\">${insight.insightLabel}</span>\n          </button>\n        </li>\n      `];\n      // clang-format on\n    });\n\n    // clang-format off\n    Lit.render(html`\n      <ul>${insightMessages}</ul>\n      <ul>${insightChips}</ul>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\ncustomElements.define('devtools-related-insight-chips', RelatedInsightChips);\n"]}