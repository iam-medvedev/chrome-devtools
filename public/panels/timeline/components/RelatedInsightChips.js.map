{"version":3,"file":"RelatedInsightChips.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/RelatedInsightChips.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Trace from '../../../models/trace/trace.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as Lit from '../../../ui/lit/lit.js';\n\nimport relatedInsightsStyles from './relatedInsightChips.css.js';\n\nconst {html, render} = Lit;\n\nconst UIStrings = {\n  /**\n   * @description prefix shown next to related insight chips\n   */\n  insightKeyword: 'Insight',\n  /**\n   * @description Prefix shown next to related insight chips and containing the insight name.\n   * @example {Improve image delivery} PH1\n   */\n  insightWithName: 'Insight: {PH1}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/RelatedInsightChips.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface RelatedInsight {\n  insightLabel: string;\n  messages: string[];\n  activateInsight: () => void;\n}\nexport type EventToRelatedInsightsMap = Map<Trace.Types.Events.Event, RelatedInsight[]>;\n\nexport interface ViewInput {\n  activeEvent: Trace.Types.Events.Event|null;\n  eventToInsightsMap: EventToRelatedInsightsMap;\n  onInsightClick: (insight: RelatedInsight) => void;\n}\n\nexport interface Data {\n  eventToRelatedInsightsMap: EventToRelatedInsightsMap|null;\n  activeEvent: Trace.Types.Events.Event|null;\n}\n\nexport class RelatedInsightChips extends UI.Widget.Widget {\n  #view: typeof DEFAULT_VIEW;\n\n  #activeEvent: Trace.Types.Events.Event|null = null;\n  #eventToInsightsMap: EventToRelatedInsightsMap = new Map();\n\n  constructor(element?: HTMLElement, view = DEFAULT_VIEW) {\n    super(element);\n    this.#view = view;\n  }\n\n  set activeEvent(event: Trace.Types.Events.Event|null) {\n    if (event === this.#activeEvent) {\n      return;\n    }\n    this.#activeEvent = event;\n    this.requestUpdate();\n  }\n\n  set eventToInsightsMap(map: EventToRelatedInsightsMap|null) {\n    // Purposefully don't check object equality here; the contents of the map\n    // could have changed, so play it safe and always trigger a re-render.\n    this.#eventToInsightsMap = map ?? new Map();\n    this.requestUpdate();\n  }\n\n  override performUpdate(): Promise<void>|void {\n    const input: ViewInput = {\n      activeEvent: this.#activeEvent,\n      eventToInsightsMap: this.#eventToInsightsMap,\n      onInsightClick(insight) {\n        insight.activateInsight();\n      },\n    };\n    this.#view(input, {}, this.contentElement);\n  }\n}\n\nexport const DEFAULT_VIEW: (input: ViewInput, output: object, target: HTMLElement) => void =\n    (input, _output, target) => {\n      const {activeEvent, eventToInsightsMap} = input;\n      const relatedInsights = activeEvent ? eventToInsightsMap.get(activeEvent) ?? [] : [];\n      if (!activeEvent || eventToInsightsMap.size === 0 || relatedInsights.length === 0) {\n        render(html``, target);\n        return;\n      }\n\n      // TODO: Render insight messages in a separate UX\n      // Right before insight chips is acceptable for now\n      const insightMessages = relatedInsights.flatMap(insight => {\n        // TODO: support markdown (`md`).\n        // clang-format off\n        return insight.messages.map(message => html`\n          <li class=\"insight-message-box\">\n            <button type=\"button\" @click=${(event: Event) => {\n              event.preventDefault();\n              input.onInsightClick(insight);\n            }}>\n              <div class=\"insight-label\">${i18nString(UIStrings.insightWithName, {\n                PH1: insight.insightLabel,\n              })}</div>\n              <div class=\"insight-message\">${message}</div>\n            </button>\n          </li>\n        `);\n        // clang-format on\n      });\n\n      const insightChips = relatedInsights.flatMap(insight => {\n        // clang-format off\n        return [html`\n          <li class=\"insight-chip\">\n            <button type=\"button\" @click=${(event: Event) => {\n              event.preventDefault();\n              input.onInsightClick(insight);\n            }}>\n              <span class=\"keyword\">${i18nString(UIStrings.insightKeyword)}</span>\n              <span class=\"insight-label\">${insight.insightLabel}</span>\n            </button>\n          </li>\n        `];\n        // clang-format on\n      });\n\n      // clang-format off\n      render(html`<style>${relatedInsightsStyles}</style>\n        <ul>${insightMessages}</ul>\n        <ul>${insightChips}</ul>`,\n      target);\n      // clang-format on\n    };\n"]}