{"version":3,"file":"Breadcrumbs.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/Breadcrumbs.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Trace from '../../../models/trace/trace.js';\nimport * as TraceBounds from '../../../services/trace_bounds/trace_bounds.js';\n\nexport function flattenBreadcrumbs(initialBreadcrumb: Trace.Types.File.Breadcrumb): Trace.Types.File.Breadcrumb[] {\n  const allBreadcrumbs: Trace.Types.File.Breadcrumb[] = [initialBreadcrumb];\n  let breadcrumbsIter: Trace.Types.File.Breadcrumb = initialBreadcrumb;\n\n  while (breadcrumbsIter.child !== null) {\n    const iterChild = breadcrumbsIter.child;\n    if (iterChild !== null) {\n      allBreadcrumbs.push(iterChild);\n      breadcrumbsIter = iterChild;\n    }\n  }\n\n  return allBreadcrumbs;\n}\n\nexport interface SetActiveBreadcrumbOptions {\n  removeChildBreadcrumbs: boolean;\n  updateVisibleWindow: boolean;\n}\n\nexport class Breadcrumbs {\n  initialBreadcrumb: Trace.Types.File.Breadcrumb;\n  activeBreadcrumb: Trace.Types.File.Breadcrumb;\n\n  constructor(initialTraceWindow: Trace.Types.Timing.TraceWindowMicro) {\n    this.initialBreadcrumb = {\n      window: initialTraceWindow,\n      child: null,\n    };\n    let lastBreadcrumb = this.initialBreadcrumb;\n    while (lastBreadcrumb.child !== null) {\n      lastBreadcrumb = lastBreadcrumb.child;\n    }\n    this.activeBreadcrumb = lastBreadcrumb;\n  }\n\n  add(newBreadcrumbTraceWindow: Trace.Types.Timing.TraceWindowMicro): Trace.Types.File.Breadcrumb {\n    if (!this.isTraceWindowWithinTraceWindow(newBreadcrumbTraceWindow, this.activeBreadcrumb.window)) {\n      throw new Error('Can not add a breadcrumb that is equal to or is outside of the parent breadcrumb TimeWindow');\n    }\n\n    const newBreadcrumb = {\n      window: newBreadcrumbTraceWindow,\n      child: null,\n    };\n    // To add a new Breadcrumb to the Breadcrumbs Linked List, set the child of active breadcrumb\n    // to the new breadcrumb and update the active Breadcrumb to the newly added one\n    this.activeBreadcrumb.child = newBreadcrumb;\n    this.setActiveBreadcrumb(newBreadcrumb, {removeChildBreadcrumbs: false, updateVisibleWindow: true});\n    return newBreadcrumb;\n  }\n\n  // Breadcumb should be within the bounds of the parent and can not have both start and end be equal to the parent\n  isTraceWindowWithinTraceWindow(\n      child: Trace.Types.Timing.TraceWindowMicro, parent: Trace.Types.Timing.TraceWindowMicro): boolean {\n    return (child.min >= parent.min && child.max <= parent.max) &&\n        !(child.min === parent.min && child.max === parent.max);\n  }\n\n  // Used to set an initial breadcrumbs from modifications loaded from a file\n  setInitialBreadcrumbFromLoadedModifications(initialBreadcrumb: Trace.Types.File.Breadcrumb): void {\n    this.initialBreadcrumb = initialBreadcrumb;\n    // Make last breadcrumb active\n    let lastBreadcrumb = initialBreadcrumb;\n    while (lastBreadcrumb.child !== null) {\n      lastBreadcrumb = lastBreadcrumb.child;\n    }\n    this.setActiveBreadcrumb(lastBreadcrumb, {removeChildBreadcrumbs: false, updateVisibleWindow: true});\n  }\n\n  /**\n   * Sets a breadcrumb to be active.\n   * Doing this will update the minimap bounds and optionally based on the\n   * `updateVisibleWindow` parameter, it will also update the active window.\n   * The reason `updateVisibleWindow` is configurable is because if we are\n   * changing which breadcrumb is active because we want to reveal something to\n   * the user, we may have already updated the visible timeline window, but we\n   * are activating the breadcrumb to show the user that they are now within\n   * this breadcrumb. This is used when revealing insights and annotations.\n   */\n  setActiveBreadcrumb(activeBreadcrumb: Trace.Types.File.Breadcrumb, options: SetActiveBreadcrumbOptions): void {\n    // If the children of the activated breadcrumb need to be removed, set the child on the\n    // activated breadcrumb to null. Since breadcrumbs are a linked list, this will remove all\n    // of the following children.\n    if (options.removeChildBreadcrumbs) {\n      activeBreadcrumb.child = null;\n    }\n\n    // When we assign a new active breadcrumb, both the minimap bounds and the visible\n    // window get set to that breadcrumb's window.\n    this.activeBreadcrumb = activeBreadcrumb;\n    TraceBounds.TraceBounds.BoundsManager.instance().setMiniMapBounds(\n        activeBreadcrumb.window,\n    );\n\n    if (options.updateVisibleWindow) {\n      TraceBounds.TraceBounds.BoundsManager.instance().setTimelineVisibleWindow(\n          activeBreadcrumb.window,\n      );\n    }\n  }\n}\n"]}