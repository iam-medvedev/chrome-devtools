{"version":3,"file":"SidebarInsightsTab.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/SidebarInsightsTab.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport * as Insights from './insights/insights.js';\nimport {type ActiveInsight} from './Sidebar.js';\nimport styles from './sidebarInsightsTab.css.js';\nimport {SidebarSingleInsightSet, type SidebarSingleInsightSetData} from './SidebarSingleInsightSet.js';\n\nexport class SidebarInsightsTab extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-performance-sidebar-insights`;\n  readonly #boundRender = this.#render.bind(this);\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace|null = null;\n  #insights: Trace.Insights.Types.TraceInsightSets|null = null;\n  #activeInsight: ActiveInsight|null = null;\n  #selectedCategory = Insights.Types.Category.ALL;\n  /**\n   * When a trace has sets of insights, we show an accordion with each\n   * set within. A set can be specific to a single navigation, or include the\n   * beginning of the trace up to the first navigation.\n   * You can only have one of these open at any time, and we track it via this ID.\n   */\n  #insightSetKey: string|null = null;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [styles];\n  }\n\n  set parsedTrace(data: Trace.Handlers.Types.ParsedTrace|null) {\n    if (data === this.#parsedTrace) {\n      return;\n    }\n    this.#parsedTrace = data;\n    this.#insightSetKey = null;\n\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set insights(data: Trace.Insights.Types.TraceInsightSets|null) {\n    if (data === this.#insights) {\n      return;\n    }\n\n    // TODO(crbug.com/366049346): move \"shouldShow\" logic to insight result (rather than the component),\n    // and if none are visible, exclude it here.\n    this.#insights = data;\n    this.#insightSetKey = null;\n    if (!this.#insights || !this.#parsedTrace) {\n      return;\n    }\n\n    // Select by default the first non-trivial insight set:\n    // - greater than 5s in duration\n    // - or, has a navigation\n    // In practice this means selecting either the first or the second insight set.\n    const trivialThreshold = Trace.Helpers.Timing.millisecondsToMicroseconds(Trace.Types.Timing.MilliSeconds(5000));\n    const insightSets = [...this.#insights.values()];\n    this.#insightSetKey =\n        insightSets.find(insightSet => insightSet.navigation || insightSet.bounds.range > trivialThreshold)?.id\n        // If everything is \"trivial\", just select the first one.\n        ?? insightSets[0]?.id ?? null;\n\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set activeInsight(active: ActiveInsight|null) {\n    if (active === this.#activeInsight) {\n      return;\n    }\n    this.#activeInsight = active;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #onCategoryDropdownChange(event: Event): void {\n    const target = event.target as HTMLOptionElement;\n    const value = target.value as Insights.Types.Category;\n    this.#selectedCategory = value;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #insightSetClicked(id: string): void {\n    // Update the active insight set.\n    if (id !== this.#activeInsight?.insightSetKey) {\n      this.dispatchEvent(new Insights.SidebarInsight.InsightDeactivated());\n    }\n    this.#insightSetKey = id;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #insightSetHovered(id: string): void {\n    const data = this.#insights?.get(id);\n    data && this.dispatchEvent(new Insights.SidebarInsight.InsightSetHovered(data.bounds));\n  }\n\n  #insightSetUnhovered(): void {\n    this.dispatchEvent(new Insights.SidebarInsight.InsightSetHovered());\n  }\n\n  // TODO(crbug.com/368170718): use a shorter label for each insight set/url when possible.\n  #render(): void {\n    if (!this.#parsedTrace || !this.#insights) {\n      LitHtml.render(LitHtml.nothing, this.#shadow, {host: this});\n      return;\n    }\n\n    const hasMultipleInsightSets = this.#insights.size > 1;\n\n    // clang-format off\n    const html = LitHtml.html`\n      <select class=\"chrome-select insights-category-select\"\n        @change=${this.#onCategoryDropdownChange}\n        jslog=${VisualLogging.dropDown('timeline.sidebar-insights-category-select').track({click: true})}\n      >\n        ${Object.values(Insights.Types.Category).map(insightsCategory => {\n          return LitHtml.html`\n            <option value=${insightsCategory}>\n              ${insightsCategory}\n            </option>\n          `;\n        })}\n      </select>\n\n      <div class=\"insight-sets-wrapper\">\n        ${[...this.#insights.values()].map(({id, label}) => {\n          const data = {\n            parsedTrace: this.#parsedTrace,\n            insights: this.#insights,\n            insightSetKey: id,\n            activeCategory: this.#selectedCategory,\n            activeInsight: this.#activeInsight,\n          };\n\n          const contents = LitHtml.html`\n            <${SidebarSingleInsightSet.litTagName}\n              .data=${data as SidebarSingleInsightSetData}>\n            </${SidebarSingleInsightSet.litTagName}>\n          `;\n\n          if (hasMultipleInsightSets) {\n            return LitHtml.html`<details\n              ?open=${id === this.#insightSetKey}\n            >\n              <summary\n                @click=${() => this.#insightSetClicked(id)}\n                @mouseenter=${() => this.#insightSetHovered(id)}\n                @mouseleave=${() => this.#insightSetUnhovered()}\n                >${label}</summary>\n              ${contents}\n            </details>`;\n          }\n\n          return contents;\n        })}\n      </div>\n    `;\n    // clang-format on\n    LitHtml.render(LitHtml.html`${html}`, this.#shadow, {host: this});\n  }\n}\n\ncustomElements.define('devtools-performance-sidebar-insights', SidebarInsightsTab);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-sidebar-insights': SidebarInsightsTab;\n  }\n}\n"]}