{"version":3,"file":"SidebarInsightsTab.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/SidebarInsightsTab.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './SidebarSingleInsightSet.js';\n\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as Trace from '../../../models/trace/trace.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as Lit from '../../../ui/lit/lit.js';\nimport * as Utils from '../utils/utils.js';\n\nimport * as Insights from './insights/insights.js';\nimport type {ActiveInsight} from './Sidebar.js';\nimport stylesRaw from './sidebarInsightsTab.css.js';\nimport type {SidebarSingleInsightSetData} from './SidebarSingleInsightSet.js';\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(stylesRaw.cssContent);\n\nconst {html} = Lit;\n\nconst FEEDBACK_URL = 'https://crbug.com/371170842' as Platform.DevToolsPath.UrlString;\n\nconst UIStrings = {\n  /**\n   *@description text show in feedback button\n   */\n  feedbackButton: 'Feedback',\n  /**\n   *@description text show in feedback tooltip\n   */\n  feedbackTooltip: 'Insights is an experimental feature. Your feedback will help us improve it.',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/components/SidebarInsightsTab.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class SidebarInsightsTab extends HTMLElement {\n  readonly #boundRender = this.#render.bind(this);\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace|null = null;\n  #traceMetadata: Trace.Types.File.MetaData|null = null;\n  #insights: Trace.Insights.Types.TraceInsightSets|null = null;\n  #activeInsight: ActiveInsight|null = null;\n  #selectedCategory = Trace.Insights.Types.InsightCategory.ALL;\n  /**\n   * When a trace has sets of insights, we show an accordion with each\n   * set within. A set can be specific to a single navigation, or include the\n   * beginning of the trace up to the first navigation.\n   * You can only have one of these open at any time, and we track it via this ID.\n   */\n  #insightSetKey: string|null = null;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [styles];\n  }\n\n  // TODO(paulirish): add back a disconnectedCallback() to avoid memory leaks that doesn't cause b/372943062\n\n  set parsedTrace(data: Trace.Handlers.Types.ParsedTrace|null) {\n    if (data === this.#parsedTrace) {\n      return;\n    }\n    this.#parsedTrace = data;\n    this.#insightSetKey = null;\n\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set traceMetadata(data: Trace.Types.File.MetaData|null) {\n    if (data === this.#traceMetadata) {\n      return;\n    }\n    this.#traceMetadata = data;\n    this.#insightSetKey = null;\n\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set insights(data: Trace.Insights.Types.TraceInsightSets|null) {\n    if (data === this.#insights) {\n      return;\n    }\n\n    this.#insights = data;\n    this.#insightSetKey = null;\n    if (!this.#insights || !this.#parsedTrace) {\n      return;\n    }\n\n    // Select by default the first non-trivial insight set:\n    // - greater than 5s in duration\n    // - or, has a navigation\n    // In practice this means selecting either the first or the second insight set.\n    const trivialThreshold = Trace.Helpers.Timing.milliToMicro(Trace.Types.Timing.Milli(5000));\n    const insightSets = [...this.#insights.values()];\n    this.#insightSetKey =\n        insightSets.find(insightSet => insightSet.navigation || insightSet.bounds.range > trivialThreshold)?.id\n        // If everything is \"trivial\", just select the first one.\n        ?? insightSets[0]?.id ?? null;\n\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set activeInsight(active: ActiveInsight|null) {\n    if (active === this.#activeInsight) {\n      return;\n    }\n    this.#activeInsight = active;\n\n    // Only update the insightSetKey if there is an active insight. Otherwise, closing an insight\n    // would also collapse the insight set. Usually the proper insight set is already set because\n    // the user has it open already in order for this setter to be called, but insights can also\n    // be activated by clicking on a insight chip in the Summary panel, which may require opening\n    // a different insight set.\n    if (this.#activeInsight) {\n      this.#insightSetKey = this.#activeInsight.insightSetKey;\n    }\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #insightSetToggled(id: string): void {\n    this.#insightSetKey = this.#insightSetKey === id ? null : id;\n    // Update the active insight set.\n    if (this.#insightSetKey !== this.#activeInsight?.insightSetKey) {\n      this.dispatchEvent(new Insights.SidebarInsight.InsightDeactivated());\n    }\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  #insightSetHovered(id: string): void {\n    const data = this.#insights?.get(id);\n    data && this.dispatchEvent(new Insights.SidebarInsight.InsightSetHovered(data.bounds));\n  }\n\n  #insightSetUnhovered(): void {\n    this.dispatchEvent(new Insights.SidebarInsight.InsightSetHovered());\n  }\n\n  #onFeedbackClick(): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(FEEDBACK_URL);\n  }\n\n  #onZoomClick(event: Event, id: string): void {\n    event.stopPropagation();\n    const data = this.#insights?.get(id);\n    if (!data) {\n      return;\n    }\n    this.dispatchEvent(new Insights.SidebarInsight.InsightSetZoom(data.bounds));\n  }\n\n  #renderZoomButton(insightSetToggled: boolean): Lit.TemplateResult {\n    const classes = Lit.Directives.classMap({\n      'zoom-icon': true,\n      active: insightSetToggled,\n    });\n\n    // clang-format off\n    return html`\n    <div class=${classes}>\n        <devtools-button .data=${{\n          variant: Buttons.Button.Variant.ICON,\n          iconName: 'center-focus-weak',\n          size: Buttons.Button.Size.SMALL,\n        } as Buttons.Button.ButtonData}\n      ></devtools-button></div>`;\n    // clang-format on\n  }\n\n  #renderDropdownIcon(insightSetToggled: boolean): Lit.TemplateResult {\n    const containerClasses = Lit.Directives.classMap({\n      'dropdown-icon': true,\n      active: insightSetToggled,\n    });\n\n    // clang-format off\n    return html`\n      <div class=${containerClasses}>\n        <devtools-button .data=${{\n          variant: Buttons.Button.Variant.ICON,\n          iconName: 'chevron-right',\n          size: Buttons.Button.Size.SMALL,\n        } as Buttons.Button.ButtonData}\n      ></devtools-button></div>\n    `;\n    // clang-format on\n  }\n\n  #render(): void {\n    if (!this.#parsedTrace || !this.#insights) {\n      Lit.render(Lit.nothing, this.#shadow, {host: this});\n      return;\n    }\n\n    const hasMultipleInsightSets = this.#insights.size > 1;\n    const labels = Utils.Helpers.createUrlLabels([...this.#insights.values()].map(({url}) => url));\n\n    const contents =\n        // clang-format off\n     html`\n      <div class=\"insight-sets-wrapper\">\n        ${[...this.#insights.values()].map(({id, url}, index) => {\n          const data: SidebarSingleInsightSetData = {\n            insights: this.#insights,\n            insightSetKey: id,\n            activeCategory: this.#selectedCategory,\n            activeInsight: this.#activeInsight,\n            parsedTrace: this.#parsedTrace,\n            traceMetadata: this.#traceMetadata,\n          };\n\n          const contents = html`\n            <devtools-performance-sidebar-single-navigation\n              .data=${data}>\n            </devtools-performance-sidebar-single-navigation>\n          `;\n\n          if (hasMultipleInsightSets) {\n            return html`<details\n              ?open=${id === this.#insightSetKey}\n            >\n              <summary\n                @click=${() => this.#insightSetToggled(id)}\n                @mouseenter=${() => this.#insightSetHovered(id)}\n                @mouseleave=${() => this.#insightSetUnhovered()}\n                title=${url.href}>\n                ${this.#renderDropdownIcon(id === this.#insightSetKey)}\n                <span>${labels[index]}</span>\n                <span class='zoom-button' @click=${(event: Event) => this.#onZoomClick(event, id)}>${this.#renderZoomButton(id === this.#insightSetKey)}</span>\n              </summary>\n              ${contents}\n            </details>`;\n          }\n\n          return contents;\n        })}\n      </div>\n\n      <div class=\"feedback-wrapper\">\n        <devtools-button .variant=${Buttons.Button.Variant.OUTLINED} .iconName=${'experiment'} @click=${this.#onFeedbackClick}>\n          ${i18nString(UIStrings.feedbackButton)}\n        </devtools-button>\n\n        <p class=\"tooltip\">${i18nString(UIStrings.feedbackTooltip)}</p>\n      </div>\n    `;\n    // clang-format on\n\n    // Insight components contain state, so to prevent insights from previous trace loads breaking things we use the parsedTrace\n    // as a render key.\n    // Note: newer Lit has `keyed`, but we don't have that, so we do it manually. https://lit.dev/docs/templates/directives/#keyed\n    const result = Lit.Directives.repeat([contents], () => this.#parsedTrace, template => template);\n    Lit.render(result, this.#shadow, {host: this});\n  }\n}\n\ncustomElements.define('devtools-performance-sidebar-insights', SidebarInsightsTab);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-sidebar-insights': SidebarInsightsTab;\n  }\n}\n"]}