{"version":3,"file":"SidebarAnnotationsTab.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/SidebarAnnotationsTab.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TraceEngine from '../../../models/trace/trace.js';\nimport * as TraceBounds from '../../../services/trace_bounds/trace_bounds.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as IconButton from '../../../ui/components/icon_button/icon_button.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport {RemoveAnnotation} from './Sidebar.js';\nimport sidebarAnnotationsTabStyles from './sidebarAnnotationsTab.css.js';\n\nexport class SidebarAnnotationsTab extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-performance-sidebar-annotations`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n  #annotations: TraceEngine.Types.File.Annotation[] = [];\n  // A map with annotated entries and the colours that are used to display them in the FlameChart.\n  // We need this map to display the entries in the sidebar with the same colours.\n  #annotationEntryToColorMap: Map<TraceEngine.Types.TraceEvents.TraceEventData, string> = new Map();\n\n  set annotations(annotations: TraceEngine.Types.File.Annotation[]) {\n    this.#annotations = annotations;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  set annotationEntryToColorMap(annotationEntryToColorMap: Map<TraceEngine.Types.TraceEvents.TraceEventData, string>) {\n    this.#annotationEntryToColorMap = annotationEntryToColorMap;\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [sidebarAnnotationsTabStyles];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  /**\n   * Renders the Annotation 'identifier' or 'name' in the annotations list.\n   * This is the text rendered before the annotation label that we use to indentify the annotation.\n   *\n   * Annotations identifiers for different annotations:\n   * Entry label -> Entry name\n   * Labelled range -> Start to End Range of the label in ms\n   * Connected entries -> Connected entries names\n   *\n   * All identifiers have a different colour background.\n   */\n  #renderAnnotationIdentifier(annotation: TraceEngine.Types.File.Annotation): LitHtml.LitTemplate {\n    switch (annotation.type) {\n      case 'ENTRY_LABEL': {\n        const entryName = TraceEngine.Types.TraceEvents.isProfileCall(annotation.entry) ?\n            annotation.entry.callFrame.functionName :\n            annotation.entry.name;\n        const color = this.#annotationEntryToColorMap.get(annotation.entry);\n\n        return LitHtml.html`\n              <span class=\"annotation-identifier\" style=\"background-color: ${color}\">\n                ${entryName}\n              </span>\n        `;\n      }\n      case 'TIME_RANGE': {\n        const minTraceBoundsMilli =\n            TraceBounds.TraceBounds.BoundsManager.instance().state()?.milli.entireTraceBounds.min ?? 0;\n\n        const timeRangeStartInMs = Math.round(\n            TraceEngine.Helpers.Timing.microSecondsToMilliseconds(annotation.bounds.min) - minTraceBoundsMilli);\n        const timeRangeEndInMs = Math.round(\n            TraceEngine.Helpers.Timing.microSecondsToMilliseconds(annotation.bounds.max) - minTraceBoundsMilli);\n\n        return LitHtml.html`\n              <span class=\"annotation-identifier time-range\">\n                ${timeRangeStartInMs} - ${timeRangeEndInMs} ms\n              </span>\n        `;\n      }\n      case 'ENTRIES_LINK': {\n        const entryFromName = TraceEngine.Types.TraceEvents.isProfileCall(annotation.entryFrom) ?\n            annotation.entryFrom.callFrame.functionName :\n            annotation.entryFrom.name;\n\n        const entryToName = (!annotation.entryTo) ? '' :\n            TraceEngine.Types.TraceEvents.isProfileCall(annotation.entryTo) ?\n                                                    annotation.entryTo.callFrame.functionName :\n                                                    annotation.entryTo.name;\n\n        const fromColor = this.#annotationEntryToColorMap.get(annotation.entryFrom);\n        const toColor = (annotation.entryTo) ? this.#annotationEntryToColorMap.get(annotation.entryTo) : '';\n\n        // clang-format off\n        return LitHtml.html`\n          <div class=\"entries-link\">\n            <span class=\"annotation-identifier\"  style=\"background-color: ${fromColor}\">\n              ${entryFromName}\n            </span>\n            <${IconButton.Icon.Icon.litTagName} class=\"inline-icon\" .data=${{\n              iconName: 'arrow-forward',\n              color: 'var(--icon-default)',\n              width: '18px',\n              height: '18px',\n            } as IconButton.Icon.IconData}>\n            </${IconButton.Icon.Icon.litTagName}>\n            ${(entryToName !== '' ?\n              LitHtml.html`<span class=\"annotation-identifier\" style=\"background-color: ${toColor}\" >${entryToName}</span>`\n            : '')}\n          </div>\n      `;\n        // clang-format on\n      }\n    }\n  }\n\n  // When an annotations are clicked in the sidebar, zoom into it.\n  #zoomIntoAnnotation(annotation: TraceEngine.Types.File.Annotation): void {\n    let annotationWindow: TraceEngine.Types.Timing.TraceWindowMicroSeconds|null = null;\n    const minVisibleEntryDuration = TraceEngine.Types.Timing.MilliSeconds(1);\n\n    switch (annotation.type) {\n      case 'ENTRY_LABEL': {\n        const eventDuration = annotation.entry.dur ?? minVisibleEntryDuration;\n\n        annotationWindow = {\n          min: annotation.entry.ts,\n          max: TraceEngine.Types.Timing.MicroSeconds(annotation.entry.ts + eventDuration),\n          range: TraceEngine.Types.Timing.MicroSeconds(eventDuration),\n        };\n        break;\n      }\n      case 'TIME_RANGE': {\n        annotationWindow = annotation.bounds;\n        break;\n      }\n      case 'ENTRIES_LINK': {\n        // If entryTo does not exist, the annotation is in the process of being created.\n        // Do not allow to zoom into it in this case.\n        if (!annotation.entryTo) {\n          break;\n        }\n\n        const fromEventDuration = (annotation.entryFrom.dur) ?? minVisibleEntryDuration;\n        const toEventDuration = annotation.entryTo.dur ?? minVisibleEntryDuration;\n\n        // To choose window max, check which entry ends later\n        const fromEntryEndTS = (annotation.entryFrom.ts + fromEventDuration);\n        const toEntryEndTS = (annotation.entryTo.ts + toEventDuration);\n        const maxTimestamp = Math.max(fromEntryEndTS, toEntryEndTS);\n\n        annotationWindow = {\n          min: annotation.entryFrom.ts,\n          max: TraceEngine.Types.Timing.MicroSeconds(maxTimestamp),\n          range: TraceEngine.Types.Timing.MicroSeconds(maxTimestamp - annotation.entryFrom.ts),\n        };\n      }\n    }\n\n    const currentMinimapWindow = TraceBounds.TraceBounds.BoundsManager.instance().state()?.micro.minimapTraceBounds;\n    if (annotationWindow && currentMinimapWindow) {\n      // Expand the bounds by 20% to make the new window 40% bigger than the annotation so it is not taking the whole visible window. Pass the minimap window to make\n      // sure we do not set a window outside of the current bounds.\n      const newVisibleWindow = TraceEngine.Helpers.Timing.expandWindowByPercentOrToOneMillisecond(\n          annotationWindow, currentMinimapWindow, 40);\n      TraceBounds.TraceBounds.BoundsManager.instance().setTimelineVisibleWindow(\n          newVisibleWindow, {shouldAnimate: true});\n    } else {\n      console.error('Could not calculate zoom in window for ', annotation);\n    }\n  }\n\n  #render(): void {\n    // clang-format off\n      LitHtml.render(\n        LitHtml.html`\n          <span class=\"annotations\">\n            ${this.#annotations.map(annotation =>\n              LitHtml.html`\n                <div class=\"annotation-container\" @click=${() => this.#zoomIntoAnnotation(annotation)}>\n                  <div class=\"annotation\">\n                    ${this.#renderAnnotationIdentifier(annotation)}\n                    <span class=\"label\">\n                      ${(annotation.type === 'ENTRY_LABEL' || annotation.type === 'TIME_RANGE') ? annotation.label : ''}\n                    </span>\n                  </div>\n                  <${IconButton.Icon.Icon.litTagName} class=\"bin-icon\" .data=${{\n                          iconName: 'bin',\n                          color: 'var(--icon-default)',\n                          width: '20px',\n                          height: '20px',\n                        } as IconButton.Icon.IconData} @click=${(event: Event) => {\n                         // Stop propagation to not zoom into the annotation when the delete button is clicked\n                         event.stopPropagation();\n                          this.dispatchEvent(new RemoveAnnotation(annotation));\n                  }}>\n                </div>`,\n           )}\n          </span>`,\n      this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\ncustomElements.define('devtools-performance-sidebar-annotations', SidebarAnnotationsTab);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-sidebar-annotations': SidebarAnnotationsTab;\n  }\n}\n"]}