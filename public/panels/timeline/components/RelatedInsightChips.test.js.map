{"version":3,"file":"RelatedInsightChips.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/RelatedInsightChips.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EACL,kBAAkB,EAClB,+BAA+B,EAC/B,oBAAoB,GACrB,MAAM,gCAAgC,CAAC;AACxC,OAAO,EAAC,uBAAuB,EAAC,MAAM,wCAAwC,CAAC;AAC/E,OAAO,KAAK,iBAAiB,MAAM,iEAAiE,CAAC;AAErG,OAAO,KAAK,UAAU,MAAM,iBAAiB,CAAC;AAE9C,uBAAuB,CAAC,qBAAqB,EAAE,GAAG,EAAE;IAClD,iFAAiF;IACjF,MAAM,UAAU,GAAG,EAAyC,CAAC;IAE7D,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;QAC5D,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,CAAC;QAC3E,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAChC,SAAS,CAAC,WAAW,GAAG,UAAU,CAAC;QACnC,SAAS,CAAC,yBAAyB,GAAG,IAAI,GAAG,EAAE,CAAC;QAChD,MAAM,iBAAiB,CAAC,IAAI,EAAE,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAClC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;QAClF,MAAM,cAAc,GAAkD;YACpE,YAAY,EAAE,mBAAmB;YACjC,eAAe,EAAE,GAAG,EAAE,GAAE,CAAC;YACzB,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,MAAM,UAAU,GAA6D,IAAI,GAAG,EAAE,CAAC;QACvF,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;QAE7C,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,CAAC;QAC3E,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAChC,SAAS,CAAC,WAAW,GAAG,UAAU,CAAC;QACnC,SAAS,CAAC,yBAAyB,GAAG,UAAU,CAAC;QACjD,MAAM,iBAAiB,CAAC,IAAI,EAAE,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAElC,MAAM,KAAK,GAAG,SAAS,CAAC,UAAU,CAAC,gBAAgB,CAAc,iBAAiB,CAAC,CAAC;QACpF,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC1B,MAAM,IAAI,GAAG,+BAA+B,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,uBAAuB,CAAC,CAAC;QAChF,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,cAAc,GAAkD;YACpE,YAAY,EAAE,mBAAmB;YACjC,eAAe,EAAE,GAAG,EAAE,GAAE,CAAC;YACzB,QAAQ,EAAE;gBACR,WAAW;gBACX,WAAW;aACZ;SACF,CAAC;QACF,MAAM,UAAU,GAA6D,IAAI,GAAG,EAAE,CAAC;QACvF,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;QAE7C,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,CAAC;QAC3E,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAChC,SAAS,CAAC,WAAW,GAAG,UAAU,CAAC;QACnC,SAAS,CAAC,yBAAyB,GAAG,UAAU,CAAC;QACjD,MAAM,iBAAiB,CAAC,IAAI,EAAE,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAElC,MAAM,YAAY,GAAG,SAAS,CAAC,UAAU,CAAC,gBAAgB,CAAc,iBAAiB,CAAC,CAAC;QAC3F,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAEjC,MAAM,iBAAiB,GAAG,SAAS,CAAC,UAAU,CAAC,gBAAgB,CAAc,wBAAwB,CAAC,CAAC;QACvG,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;QAEtC,MAAM,KAAK,GAAG,+BAA+B,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QAC9E,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,sCAAsC,CAAC,CAAC,CAAC;QAClE,MAAM,KAAK,GAAG,+BAA+B,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QAC9E,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,sCAAsC,CAAC,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAC9E,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;QAClC,MAAM,cAAc,GAAkD;YACpE,YAAY,EAAE,mBAAmB;YACjC,eAAe,EAAE,GAAG,EAAE,CAAC,YAAY,EAAE;YACrC,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,MAAM,UAAU,GAA6D,IAAI,GAAG,EAAE,CAAC;QACvF,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;QAE7C,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,CAAC;QAC3E,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAChC,SAAS,CAAC,WAAW,GAAG,UAAU,CAAC;QACnC,SAAS,CAAC,yBAAyB,GAAG,UAAU,CAAC;QACjD,MAAM,iBAAiB,CAAC,IAAI,EAAE,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAElC,MAAM,MAAM,GAAG,SAAS,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC5D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpB,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC3B,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Trace from '../../../models/trace/trace.js';\nimport {\n  dispatchClickEvent,\n  getCleanTextContentFromElements,\n  renderElementIntoDOM,\n} from '../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport * as RenderCoordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\n\nimport * as Components from './components.js';\n\ndescribeWithEnvironment('RelatedInsightChips', () => {\n  // Event doesn't matter, so let's keep this test quick and avoid parsing a trace.\n  const FAKE_EVENT = {} as unknown as Trace.Types.Events.Event;\n\n  it('renders nothing if the event has no insights', async () => {\n    const component = new Components.RelatedInsightChips.RelatedInsightChips();\n    renderElementIntoDOM(component);\n    component.activeEvent = FAKE_EVENT;\n    component.eventToRelatedInsightsMap = new Map();\n    await RenderCoordinator.done();\n    assert.isOk(component.shadowRoot);\n    assert.strictEqual(component.shadowRoot.childElementCount, 0);\n  });\n\n  it('renders a chip for each insight the given event is associated with', async () => {\n    const relatedInsight: Components.RelatedInsightChips.RelatedInsight = {\n      insightLabel: 'Some fake insight',\n      activateInsight: () => {},\n      messages: [],\n    };\n    const relatedMap: Components.RelatedInsightChips.EventToRelatedInsightsMap = new Map();\n    relatedMap.set(FAKE_EVENT, [relatedInsight]);\n\n    const component = new Components.RelatedInsightChips.RelatedInsightChips();\n    renderElementIntoDOM(component);\n    component.activeEvent = FAKE_EVENT;\n    component.eventToRelatedInsightsMap = relatedMap;\n    await RenderCoordinator.done();\n    assert.isOk(component.shadowRoot);\n\n    const chips = component.shadowRoot.querySelectorAll<HTMLElement>('li.insight-chip');\n    assert.lengthOf(chips, 1);\n    const text = getCleanTextContentFromElements(chips[0], 'button .insight-label');\n    assert.deepEqual(text, ['Some fake insight']);\n  });\n\n  it('renders any insight messages', async () => {\n    const relatedInsight: Components.RelatedInsightChips.RelatedInsight = {\n      insightLabel: 'Some fake insight',\n      activateInsight: () => {},\n      messages: [\n        'Message 1',\n        'Message 2',\n      ],\n    };\n    const relatedMap: Components.RelatedInsightChips.EventToRelatedInsightsMap = new Map();\n    relatedMap.set(FAKE_EVENT, [relatedInsight]);\n\n    const component = new Components.RelatedInsightChips.RelatedInsightChips();\n    renderElementIntoDOM(component);\n    component.activeEvent = FAKE_EVENT;\n    component.eventToRelatedInsightsMap = relatedMap;\n    await RenderCoordinator.done();\n    assert.isOk(component.shadowRoot);\n\n    const regularChips = component.shadowRoot.querySelectorAll<HTMLElement>('li.insight-chip');\n    assert.lengthOf(regularChips, 1);\n\n    const optimizationChips = component.shadowRoot.querySelectorAll<HTMLElement>('li.insight-message-box');\n    assert.lengthOf(optimizationChips, 2);\n\n    const text1 = getCleanTextContentFromElements(optimizationChips[0], 'button');\n    assert.deepEqual(text1, ['Insight: Some fake insight Message 1']);\n    const text2 = getCleanTextContentFromElements(optimizationChips[1], 'button');\n    assert.deepEqual(text2, ['Insight: Some fake insight Message 2']);\n  });\n\n  it('calls the activateInsight function when the insight is clicked', async () => {\n    const activateStub = sinon.stub();\n    const relatedInsight: Components.RelatedInsightChips.RelatedInsight = {\n      insightLabel: 'Some fake insight',\n      activateInsight: () => activateStub(),\n      messages: [],\n    };\n    const relatedMap: Components.RelatedInsightChips.EventToRelatedInsightsMap = new Map();\n    relatedMap.set(FAKE_EVENT, [relatedInsight]);\n\n    const component = new Components.RelatedInsightChips.RelatedInsightChips();\n    renderElementIntoDOM(component);\n    component.activeEvent = FAKE_EVENT;\n    component.eventToRelatedInsightsMap = relatedMap;\n    await RenderCoordinator.done();\n    assert.isOk(component.shadowRoot);\n\n    const button = component.shadowRoot.querySelector('button');\n    assert.isOk(button);\n    dispatchClickEvent(button);\n    assert.isTrue(activateStub.called);\n  });\n});\n"]}