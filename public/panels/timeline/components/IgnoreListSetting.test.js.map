{"version":3,"file":"IgnoreListSetting.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/components/IgnoreListSetting.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as Bindings from '../../../models/bindings/bindings.js';\nimport * as Workspace from '../../../models/workspace/workspace.js';\nimport {\n  dispatchBlurEvent,\n  dispatchFocusEvent,\n  dispatchInputEvent,\n  dispatchKeyDownEvent,\n  renderElementIntoDOM,\n} from '../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport * as RenderCoordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\n\nimport * as TimelineComponents from './components.js';\n\ndescribeWithEnvironment('Ignore List Setting', () => {\n  async function renderIgnoreListSetting(): Promise<HTMLElement> {\n    const component = new TimelineComponents.IgnoreListSetting.IgnoreListSetting();\n    renderElementIntoDOM(component);\n    await RenderCoordinator.done();\n    return component;\n  }\n\n  function getAllRules(component: HTMLElement): Array<{regex: string, disabled: boolean}> {\n    assert.isNotNull(component.shadowRoot);\n    const regexRows = component.shadowRoot.querySelectorAll<HTMLElement>('.regex-row');\n    return Array.from(regexRows).map(row => {\n      const checkboxShadow = row.querySelector('dt-checkbox')?.shadowRoot;\n      assert.exists(checkboxShadow);\n      return {\n        regex: checkboxShadow.querySelector('label')?.textContent?.trim() ?? '',\n        disabled: !checkboxShadow.querySelector('input')?.checked,\n      };\n    });\n  }\n\n  function getNewRegexInput(component: HTMLElement): HTMLInputElement {\n    assert.isNotNull(component.shadowRoot);\n    const newRegexRow = component.shadowRoot.querySelector<HTMLElement>('.new-regex-row');\n    const newRegexInput = newRegexRow?.querySelector<HTMLInputElement>('.new-regex-text-input');\n\n    assert.exists(newRegexInput);\n    return newRegexInput;\n  }\n\n  function getValidationResultElement(component: HTMLElement): HTMLDivElement {\n    assert.isNotNull(component.shadowRoot);\n    const validationResultElement = component.shadowRoot.querySelector<HTMLDivElement>('.input-validation');\n\n    assert.exists(validationResultElement);\n    return validationResultElement;\n  }\n\n  before(() => {\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    const workspace = Workspace.Workspace.WorkspaceImpl.instance({forceNew: true});\n    const resourceMapping = new Bindings.ResourceMapping.ResourceMapping(targetManager, workspace);\n    const debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance(\n        {forceNew: true, resourceMapping, targetManager});\n    Bindings.IgnoreListManager.IgnoreListManager.instance({\n      forceNew: true,\n      debuggerWorkspaceBinding,\n    });\n  });\n\n  beforeEach(() => {\n    const regexPatterns = getIgnoredRegexes();\n    // There is a default rule `/node_modules/|^node:`, So let's remove it for less confusion.\n    // Also this will clear the ignore list so each test can be individual.\n    regexPatterns.length = 0;\n  });\n\n  it('Able to render the ignore listed rules', async () => {\n    ignoreRegex('rule 1');\n\n    const component = await renderIgnoreListSetting();\n    const ignoredRules = getAllRules(component);\n\n    assert.lengthOf(ignoredRules, 1);\n    assert.deepEqual(ignoredRules[0].regex, 'rule 1');\n    assert.isFalse(ignoredRules[0].disabled);\n\n    // Check the remove buttons are rendered\n    assert.isNotNull(component.shadowRoot);\n    const regexRowsElements = component.shadowRoot.querySelectorAll<HTMLElement>('.regex-row');\n    Array.from(regexRowsElements).forEach(row => {\n      const removeButton = row.querySelector('devtools-button');\n      assert.exists(removeButton);\n    });\n  });\n\n  it('Able to render the disabled ignore listed rules', async () => {\n    ignoreRegex('rule 1');\n    disableIgnoreRegex('rule 1');\n\n    const component = await renderIgnoreListSetting();\n    const ignoredRules = getAllRules(component);\n\n    // There is a default rule `/node_modules/|/bower_components/`\n    assert.lengthOf(ignoredRules, 1);\n    assert.deepEqual(ignoredRules[0].regex, 'rule 1');\n    assert.isTrue(ignoredRules[0].disabled);\n  });\n\n  it('Able to toggle the disable status of an ignore listed rules', async () => {\n    ignoreRegex('rule 1');\n    const component = await renderIgnoreListSetting();\n\n    assert.isNotNull(component.shadowRoot);\n    const regexRows = component.shadowRoot.querySelectorAll<HTMLElement>('.regex-row');\n    // Add sanity checks to make sure the rule is enabled before toggling.\n    assert.isFalse(isIgnoreRegexDisabled('rule 1'));\n\n    const rule1CheckBox = regexRows[0].querySelector('dt-checkbox')?.shadowRoot?.querySelector('input');\n    rule1CheckBox?.click();\n    assert.isTrue(isIgnoreRegexDisabled('rule 1'));\n  });\n\n  it('Able to remove an ignore list rule', async () => {\n    ignoreRegex('rule 1');\n    const component = await renderIgnoreListSetting();\n\n    assert.isNotNull(component.shadowRoot);\n    const regexRows = component.shadowRoot.querySelectorAll<HTMLElement>('.regex-row');\n    // Add sanity checks to make sure 'rule 1' exists.\n    assert.isTrue(isRegexInIgnoredList('rule 1'));\n\n    const rule1RemoveButton = regexRows[0].querySelector('devtools-button');\n    rule1RemoveButton?.click();\n    assert.isFalse(isRegexInIgnoredList('rule 1'));\n  });\n\n  it('Able to render the add new regex row correctly', async () => {\n    const component = await renderIgnoreListSetting();\n    assert.isNotNull(component.shadowRoot);\n\n    const newRegexRows = component.shadowRoot.querySelectorAll<HTMLElement>('.new-regex-row');\n    // There should only be one add new regex row.\n    assert.lengthOf(newRegexRows, 1);\n    // There are two elements, one is checkbox, one is the input\n    const newRegexCheckboxes = newRegexRows[0].querySelectorAll<HTMLInputElement>('dt-checkbox');\n    assert.lengthOf(newRegexCheckboxes, 1);\n    const newRegexInputs = newRegexRows[0].querySelectorAll<HTMLInputElement>('.new-regex-text-input');\n    assert.lengthOf(newRegexInputs, 1);\n  });\n\n  it('Able to add an ignore list rule', async () => {\n    // Now there should only by 1 rule (`/node_modules/|/bower_components/`)\n    assert.isFalse(isRegexInIgnoredList('rule 1'));\n\n    const component = await renderIgnoreListSetting();\n    const newRegexInput = getNewRegexInput(component);\n\n    newRegexInput.value = 'rule 1';\n    dispatchBlurEvent(newRegexInput);\n\n    assert.isTrue(isRegexInIgnoredList('rule 1'));\n  });\n\n  it('Do not add a duplicate ignore list rule', async () => {\n    ignoreRegex('rule 1');\n    disableIgnoreRegex('rule 1');\n    assert.isTrue(isIgnoreRegexDisabled('rule 1'));\n\n    const component = await renderIgnoreListSetting();\n    const newRegexInput = getNewRegexInput(component);\n\n    newRegexInput.value = 'rule 1';\n    dispatchBlurEvent(newRegexInput);\n\n    assert.isFalse(isIgnoreRegexDisabled('rule 1'));\n  });\n\n  it('Do not show warning message for valid rule', async () => {\n    const component = await renderIgnoreListSetting();\n    const newRegexInput = getNewRegexInput(component);\n\n    dispatchFocusEvent(newRegexInput);\n    newRegexInput.value = 'rule 1';\n    dispatchInputEvent(newRegexInput);\n    await RenderCoordinator.done();\n\n    const validationResultElement = component.shadowRoot?.querySelector<HTMLDivElement>('.input-validation');\n    assert.notExists(validationResultElement);\n\n    // We need this to simulate the 'finish editing' with empty input, so it can remove the temp regex. Otherwise the\n    // future tests will be messed up.\n    // The 'finish editing' part will be tested later\n    newRegexInput.value = '';\n    dispatchBlurEvent(newRegexInput);\n  });\n\n  it('Show error message for invalid rule', async () => {\n    // One example of invalid rule is duplicate input.\n    ignoreRegex('rule 1');\n    assert.isTrue(isRegexInIgnoredList('rule 1'));\n\n    const component = await renderIgnoreListSetting();\n    const newRegexInput = getNewRegexInput(component);\n\n    dispatchFocusEvent(newRegexInput);\n    newRegexInput.value = 'rule 1';\n    dispatchInputEvent(newRegexInput);\n    await RenderCoordinator.done();\n\n    const validationResultElement = getValidationResultElement(component);\n    assert.isFalse(validationResultElement.hidden);\n    assert.isTrue(validationResultElement.classList.contains('input-validation-error'));\n    assert.isNotEmpty(validationResultElement.textContent);\n\n    // We need this to simulate the 'finish editing' with empty input, so it can remove the temp regex. Otherwise the\n    // future tests will be messed up.\n    // The 'finish editing' part will be tested later\n    newRegexInput.value = '';\n    dispatchBlurEvent(newRegexInput);\n  });\n\n  it('Show warning message for valid rule with warning message', async () => {\n    // One example of valid rule with warning message is when a rule is disabled and it is added again.\n    ignoreRegex('rule 1');\n    disableIgnoreRegex('rule 1');\n    assert.isTrue(isIgnoreRegexDisabled('rule 1'));\n\n    const component = await renderIgnoreListSetting();\n    const newRegexInput = getNewRegexInput(component);\n\n    dispatchFocusEvent(newRegexInput);\n    newRegexInput.value = 'rule 1';\n    dispatchInputEvent(newRegexInput);\n    await RenderCoordinator.done();\n\n    const validationResultElement = getValidationResultElement(component);\n    assert.isFalse(validationResultElement.hidden);\n    assert.isFalse(validationResultElement.classList.contains('input-validation-error'));\n    assert.isNotEmpty(validationResultElement.textContent);\n\n    // We need this to simulate the 'finish editing' with empty input, so it can remove the temp regex. Otherwise the\n    // future tests will be messed up.\n    // The 'finish editing' part will be tested later\n    newRegexInput.value = '';\n    dispatchBlurEvent(newRegexInput);\n  });\n\n  describe('preview the result', () => {\n    it('Add an empty regex when focusing on the input', async () => {\n      const regexPatterns = getIgnoredRegexes();\n      assert.lengthOf(regexPatterns, 0);\n\n      const component = await renderIgnoreListSetting();\n      const newRegexInput = getNewRegexInput(component);\n\n      dispatchFocusEvent(newRegexInput);\n      assert.lengthOf(regexPatterns, 1);\n\n      // We need this to simulate the 'finish editing', so it can remove the temp regex. Otherwise the future tests will\n      // be messed up.\n      // The 'finish editing' part will be tested later\n      dispatchBlurEvent(newRegexInput);\n    });\n\n    it('Update the regex when user typing', async () => {\n      const regexPatterns = getIgnoredRegexes();\n      assert.lengthOf(regexPatterns, 0);\n\n      const component = await renderIgnoreListSetting();\n      const newRegexInput = getNewRegexInput(component);\n\n      dispatchFocusEvent(newRegexInput);\n      assert.lengthOf(regexPatterns, 1);\n      // After the focus event, the temp regex (last one) is still empty.\n      assert.strictEqual(regexPatterns[0].pattern, '');\n      // Simulate user's typing\n      newRegexInput.value = 'r';\n      dispatchInputEvent(newRegexInput);\n      // After the input event, the temp regex (last one) is updated.\n      assert.strictEqual(regexPatterns[0].pattern, 'r');\n\n      // We need this to simulate the 'finish editing' with empty input, so it can remove the temp regex. Otherwise the\n      // future tests will be messed up.\n      // The 'finish editing' part will be tested later\n      newRegexInput.value = '';\n      dispatchBlurEvent(newRegexInput);\n    });\n\n    it('Add the regex when user finish typing', async () => {\n      const regexPatterns = getIgnoredRegexes();\n      assert.lengthOf(regexPatterns, 0);\n\n      const component = await renderIgnoreListSetting();\n      const newRegexInput = getNewRegexInput(component);\n\n      dispatchFocusEvent(newRegexInput);\n      newRegexInput.value = 'rule 1';\n      assert.lengthOf(regexPatterns, 1);\n\n      dispatchBlurEvent(newRegexInput);\n      // When add a valid rule, the temp regex won't be removed.\n      assert.lengthOf(regexPatterns, 1);\n      assert.strictEqual(regexPatterns[0].pattern, 'rule 1');\n    });\n\n    it('Remove the invalid regex when user finish typing', async () => {\n      ignoreRegex('rule 1');\n      const regexPatterns = getIgnoredRegexes();\n      assert.lengthOf(regexPatterns, 1);\n\n      const component = await renderIgnoreListSetting();\n      const newRegexInput = getNewRegexInput(component);\n\n      dispatchFocusEvent(newRegexInput);\n      // This is a duplicate rule, so it is invalid.\n      newRegexInput.value = 'rule 1';\n      assert.lengthOf(regexPatterns, 2);\n\n      dispatchBlurEvent(newRegexInput);\n      // When add an invalid rule, the temp regex will be removed.\n      assert.lengthOf(regexPatterns, 1);\n    });\n\n    it('Clear the input when `Escape` is pressed', async () => {\n      const component = await renderIgnoreListSetting();\n      const newRegexInput = getNewRegexInput(component);\n\n      // This is a duplicate rule, so it is invalid.\n      newRegexInput.value = 'rule 1';\n\n      dispatchKeyDownEvent(newRegexInput, {key: Platform.KeyboardUtilities.ESCAPE_KEY});\n      // When add an invalid rule, the temp regex will be removed.\n      assert.strictEqual('', newRegexInput.value);\n    });\n  });\n});\n\ndescribeWithEnvironment('Pattern validator', () => {\n  it('Can validate the valid pattern', () => {\n    const validPattern = '^hello$';\n    const result = TimelineComponents.IgnoreListSetting.patternValidator([], validPattern);\n    assert.isTrue(result.valid);\n  });\n\n  it('Returns the reason for the empty pattern', () => {\n    const emptyPattern = '';\n    const result = TimelineComponents.IgnoreListSetting.patternValidator([], emptyPattern);\n    assert.isFalse(result.valid);\n    assert.strictEqual(result.message, 'Rule can\\'t be empty');\n  });\n\n  it('Returns the reason for the existed pattern', () => {\n    const duplicatePattern = 'abc';\n    const existedRegex = {pattern: duplicatePattern, disabled: false};\n\n    const result = TimelineComponents.IgnoreListSetting.patternValidator([existedRegex], duplicatePattern);\n    assert.isFalse(result.valid);\n    assert.strictEqual(result.message, 'Rule already exists');\n  });\n\n  it('Returns true for the disabled existed pattern', () => {\n    const duplicatePattern = 'abc';\n    const existedRegex = {pattern: duplicatePattern, disabled: true};\n\n    const result = TimelineComponents.IgnoreListSetting.patternValidator([existedRegex], duplicatePattern);\n    assert.isTrue(result.valid);\n    assert.strictEqual(\n        result.message, 'This rule already exists but is disabled. Saving this value will re-enable the rule');\n  });\n\n  it('Returns the reason for the invalid pattern', () => {\n    const invalidPattern = '[';\n    const result = TimelineComponents.IgnoreListSetting.patternValidator([], invalidPattern);\n    assert.isFalse(result.valid);\n    assert.strictEqual(result.message, 'Rule must be a valid regular expression');\n  });\n});\n\nfunction getIgnoredRegexes(): Common.Settings.RegExpSettingItem[] {\n  return (Common.Settings.Settings.instance().moduleSetting('skip-stack-frames-pattern') as\n          Common.Settings.RegExpSetting)\n      .getAsArray();\n}\n\nfunction ignoreRegex(regexValue: string): void {\n  const regexPatterns = getIgnoredRegexes();\n  regexPatterns.push({pattern: regexValue, disabled: false});\n}\n\nfunction disableIgnoreRegex(regexValue: string): void {\n  const regexPatterns = getIgnoredRegexes();\n  for (const regexPattern of regexPatterns) {\n    if (regexPattern.pattern === regexValue) {\n      regexPattern.disabled = true;\n      break;\n    }\n  }\n}\n\nfunction isIgnoreRegexDisabled(regexValue: string): boolean {\n  const regexPatterns = getIgnoredRegexes();\n  for (const regexPattern of regexPatterns) {\n    if (regexPattern.pattern === regexValue) {\n      return regexPattern.disabled ?? false;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns if the regex is in the ignore list, no matter if it is disabled.\n */\nfunction isRegexInIgnoredList(regexValue: string): boolean {\n  const regexPatterns = getIgnoredRegexes();\n  for (const regexPattern of regexPatterns) {\n    if (regexPattern.pattern === regexValue) {\n      return true;\n    }\n  }\n  return false;\n}\n"]}