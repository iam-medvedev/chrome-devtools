{"version":3,"file":"ThirdPartyTreeView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/ThirdPartyTreeView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Trace from '../../models/trace/trace.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Timeline from './timeline.js';\nimport * as Utils from './utils/utils.js';\n\ndescribeWithEnvironment('TimelineTreeView', function() {\n  describe('Third party tree', function() {\n    it('does not select the first row by default', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n      const treeView = new Timeline.ThirdPartyTreeView.ThirdPartyTreeViewWidget();\n      const mapper = new Utils.EntityMapper.EntityMapper(parsedTrace);\n      const events = [...mapper.mappings().eventsByEntity.values()].flat();\n      treeView.setModelWithEvents(events, parsedTrace, mapper);\n      const sel: Timeline.TimelineSelection.TimeRangeSelection = {\n        bounds: parsedTrace.Meta.traceBounds,\n      };\n      const box = new UI.Widget.VBox();\n      treeView.show(box.element);\n      treeView.updateContents(sel);\n      assert.isNull(treeView.dataGrid.selectedNode);\n    });\n    it('includes 1p and extension badges', async function() {\n      // This trace creates 2 nodes in the tree. One representing the first party entity, and one for\n      // a chrome extension.\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'extension-tracks-and-marks.json.gz');\n      const treeView = new Timeline.ThirdPartyTreeView.ThirdPartyTreeViewWidget();\n      const mapper = new Utils.EntityMapper.EntityMapper(parsedTrace);\n      const events = [...mapper.mappings().eventsByEntity.values()].flat();\n\n      treeView.setModelWithEvents(events, parsedTrace, mapper);\n      const sel: Timeline.TimelineSelection.TimeRangeSelection = {\n        bounds: parsedTrace.Meta.traceBounds,\n      };\n      treeView.updateContents(sel);\n      const tree = treeView.buildTree() as Trace.Extras.TraceTree.BottomUpRootNode;\n      const topNodesIterator = [...tree.children().values()].flat();\n\n      // Node with ext\n      const firstNode = topNodesIterator[0];\n      assert.strictEqual(firstNode.id.toString(), 'ienfalfjdbdpebioblfackkekamfmbnh');\n\n      const extensionNode = new Timeline.TimelineTreeView.TreeGridNode(\n          firstNode, firstNode.totalTime, firstNode.selfTime, firstNode.totalTime, treeView);\n      const extEntity = extensionNode?.createCell('site');\n\n      let gotBadgeName = extEntity.querySelector<HTMLTableRowElement>('.entity-badge')?.textContent || '';\n      assert.strictEqual(gotBadgeName, 'Extension');\n\n      // Node with first party\n      const secondNode = topNodesIterator[1];\n      assert.strictEqual(secondNode.id.toString(), 'localhost');\n\n      const firstPartyNode = new Timeline.TimelineTreeView.TreeGridNode(\n          secondNode, secondNode.totalTime, secondNode.selfTime, secondNode.totalTime, treeView);\n      const firstPartyEntity = firstPartyNode?.createCell('site');\n\n      gotBadgeName = firstPartyEntity.querySelector<HTMLTableRowElement>('.entity-badge')?.textContent || '';\n      assert.strictEqual(gotBadgeName, '1st party');\n    });\n  });\n});\n"]}