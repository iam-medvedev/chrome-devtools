{"version":3,"file":"ExtensionDataGatherer.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/ExtensionDataGatherer.ts"],"names":[],"mappings":"AAKA,OAAO,EAAC,aAAa,EAAC,MAAM,oBAAoB,CAAC;AAIjD,IAAI,6BAA8D,CAAC;AAEnE;;;GAGG;AACH,MAAM,OAAO,qBAAqB;IAChC,YAAY,GAA0C,IAAI,CAAC;IAC3D,qBAAqB,GAAyD,IAAI,GAAG,EAAE,CAAC;IACxF,MAAM,CAAC,QAAQ;QACb,IAAI,6BAA6B,EAAE,CAAC;YAClC,OAAO,6BAA6B,CAAC;QACvC,CAAC;QACD,6BAA6B,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC5D,OAAO,6BAA6B,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,cAAc;QACnB,6BAA6B,GAAG,SAAS,CAAC;IAC5C,CAAC;IAED;;OAEG;IACH,gBAAgB;QACd,MAAM,oBAAoB,GAAG,aAAa,CAAC,8BAA8B,EAAE,CAAC,GAAG,EAAE,CAAC;QAClF,IAAI,CAAC,oBAAoB,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,CAAC;YACzF,OAAO,EAAC,gBAAgB,EAAE,EAAE,EAAE,kBAAkB,EAAE,EAAE,EAAE,WAAW,EAAE,IAAI,GAAG,EAAE,EAAC,CAAC;QAChF,CAAC;QACD,MAAM,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC1E,IAAI,eAAe,EAAE,CAAC;YACpB,OAAO,eAAe,CAAC;QACzB,CAAC;QACD,OAAO,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC;IAC9C,CAAC;IAED,oBAAoB;QAClB,IAAI,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;YAC5E,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;QAC7E,CAAC;IACH,CAAC;IAED,YAAY,CAAC,WAAkD;QAC7D,IAAI,WAAW,KAAK,IAAI,CAAC,YAAY,EAAE,CAAC;YACtC,OAAO;QACT,CAAC;QACD,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,EAAE,CAAC;YAC/B,uEAAuE;YACvE,2EAA2E;YAC3E,qEAAqE;YACrE,8CAA8C;YAC9C,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC9B,CAAC;QACD,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IAClC,CAAC;CACF","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as Trace from '../../models/trace/trace.js';\n\nimport {TimelinePanel} from './TimelinePanel.js';\n\ntype ExtensionData = Trace.Handlers.ModelHandlers.ExtensionTraceData.ExtensionTraceData;\n\nlet extensionDataGathererInstance: ExtensionDataGatherer|undefined;\n\n/**\n * This class abstracts the source of extension data out by providing a\n * single access point to the performance panel for extension data.\n */\nexport class ExtensionDataGatherer {\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace|null = null;\n  #extensionDataByModel: Map<Trace.Handlers.Types.ParsedTrace, ExtensionData> = new Map();\n  static instance(): ExtensionDataGatherer {\n    if (extensionDataGathererInstance) {\n      return extensionDataGathererInstance;\n    }\n    extensionDataGathererInstance = new ExtensionDataGatherer();\n    return extensionDataGathererInstance;\n  }\n\n  static removeInstance(): void {\n    extensionDataGathererInstance = undefined;\n  }\n\n  /**\n   * Gets the data provided by extensions.\n   */\n  getExtensionData(): ExtensionData {\n    const extensionDataEnabled = TimelinePanel.extensionDataVisibilitySetting().get();\n    if (!extensionDataEnabled || !this.#parsedTrace || !this.#parsedTrace.ExtensionTraceData) {\n      return {extensionMarkers: [], extensionTrackData: [], entryToNode: new Map()};\n    }\n    const maybeCachedData = this.#extensionDataByModel.get(this.#parsedTrace);\n    if (maybeCachedData) {\n      return maybeCachedData;\n    }\n    return this.#parsedTrace.ExtensionTraceData;\n  }\n\n  saveCurrentModelData(): void {\n    if (this.#parsedTrace && !this.#extensionDataByModel.has(this.#parsedTrace)) {\n      this.#extensionDataByModel.set(this.#parsedTrace, this.getExtensionData());\n    }\n  }\n\n  modelChanged(parsedTrace: Trace.Handlers.Types.ParsedTrace|null): void {\n    if (parsedTrace === this.#parsedTrace) {\n      return;\n    }\n    if (this.#parsedTrace !== null) {\n      // DevTools extension data is assumed to be useful only for the current\n      // trace data (model). As such, if the model changes, we cache the devtools\n      // extension data we have collected for the previous model and listen\n      // for new data that applies to the new model.\n      this.saveCurrentModelData();\n    }\n    this.#parsedTrace = parsedTrace;\n  }\n}\n"]}