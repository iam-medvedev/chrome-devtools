{"version":3,"file":"ModificationsManager.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/ModificationsManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as TraceEngine from '../../models/trace/trace.js';\nimport * as TimelineComponents from '../../panels/timeline/components/components.js';\n\nimport {EntriesFilter} from './EntriesFilter.js';\nimport {EventsSerializer} from './EventsSerializer.js';\nimport type * as Overlays from './overlays/overlays.js';\n\nconst modificationsManagerByTraceIndex: ModificationsManager[] = [];\nlet activeManager: ModificationsManager|null;\n\nexport type UpdateAction = 'Remove'|'Add'|'UpdateLabel';\n\n// Event dispatched after an annotation was added, removed or updated.\n// The event argument is the Overlay that needs to be created,removed\n// or updated by `Overlays.ts` and the action that needs to be applied to it.\nexport class AnnotationModifiedEvent extends Event {\n  static readonly eventName = 'annotationmodifiedevent';\n\n  constructor(public overlay: Overlays.Overlays.TimelineOverlay, public action: UpdateAction) {\n    super(AnnotationModifiedEvent.eventName);\n  }\n}\n\ntype ModificationsManagerData = {\n  traceParsedData: TraceEngine.Handlers.Types.TraceParseData,\n  traceBounds: TraceEngine.Types.Timing.TraceWindowMicroSeconds,\n  rawTraceEvents: readonly TraceEngine.Types.TraceEvents.TraceEventData[],\n  syntheticEvents: TraceEngine.Types.TraceEvents.SyntheticBasedEvent[],\n  modifications?: TraceEngine.Types.File.Modifications,\n};\n\nexport class ModificationsManager extends EventTarget {\n  #entriesFilter: EntriesFilter;\n  #timelineBreadcrumbs: TimelineComponents.Breadcrumbs.Breadcrumbs;\n  #modifications: TraceEngine.Types.File.Modifications|null = null;\n  #traceParsedData: TraceEngine.Handlers.Types.TraceParseData;\n  #eventsSerializer: EventsSerializer;\n  #overlayForAnnotation: Map<TraceEngine.Types.File.Annotation, Overlays.Overlays.TimelineOverlay>;\n\n  /**\n   * Gets the ModificationsManager instance corresponding to a trace\n   * given its index used in Model#traces. If no index is passed gets\n   * the manager instance for the last trace. If no instance is found,\n   * throws.\n   */\n  static activeManager(): ModificationsManager|null {\n    return activeManager;\n  }\n\n  /**\n   * Initializes a ModificationsManager instance for a parsed trace or changes the active manager for an existing one.\n   * This needs to be called if and a trace has been parsed or switched to.\n   */\n  static initAndActivateModificationsManager(traceModel: TraceEngine.TraceModel.Model, traceIndex: number):\n      ModificationsManager|null {\n    // If a manager for a given index has already been created, active it.\n    if (modificationsManagerByTraceIndex[traceIndex]) {\n      activeManager = modificationsManagerByTraceIndex[traceIndex];\n      ModificationsManager.activeManager()?.applyModificationsIfPresent();\n    }\n    const traceParsedData = traceModel.traceParsedData(traceIndex);\n    if (!traceParsedData) {\n      throw new Error('ModificationsManager was initialized without a corresponding trace data');\n    }\n    const traceBounds = traceParsedData.Meta.traceBounds;\n    const traceEvents = traceModel.rawTraceEvents(traceIndex);\n    if (!traceEvents) {\n      throw new Error('ModificationsManager was initialized without a corresponding raw trace events array');\n    }\n    const syntheticEventsManager = traceModel.syntheticTraceEventsManager(traceIndex);\n    if (!syntheticEventsManager) {\n      throw new Error('ModificationsManager was initialized without a corresponding SyntheticEventsManager');\n    }\n    const metadata = traceModel.metadata(traceIndex);\n    const newModificationsManager = new ModificationsManager({\n      traceParsedData,\n      traceBounds,\n      rawTraceEvents: traceEvents,\n      modifications: metadata?.modifications,\n      syntheticEvents: syntheticEventsManager.getSyntheticTraceEvents(),\n    });\n    modificationsManagerByTraceIndex[traceIndex] = newModificationsManager;\n    activeManager = newModificationsManager;\n    ModificationsManager.activeManager()?.applyModificationsIfPresent();\n    return this.activeManager();\n  }\n\n  private constructor({traceParsedData, traceBounds, modifications}: ModificationsManagerData) {\n    super();\n    const entryToNodeMap = new Map([...traceParsedData.Samples.entryToNode, ...traceParsedData.Renderer.entryToNode]);\n    this.#entriesFilter = new EntriesFilter(entryToNodeMap);\n    this.#timelineBreadcrumbs = new TimelineComponents.Breadcrumbs.Breadcrumbs(traceBounds);\n    this.#modifications = modifications || null;\n    this.#traceParsedData = traceParsedData;\n    this.#eventsSerializer = new EventsSerializer();\n    // TODO: Assign annotations loaded from the trace file\n    this.#overlayForAnnotation = new Map();\n  }\n\n  getEntriesFilter(): EntriesFilter {\n    return this.#entriesFilter;\n  }\n\n  getTimelineBreadcrumbs(): TimelineComponents.Breadcrumbs.Breadcrumbs {\n    return this.#timelineBreadcrumbs;\n  }\n\n  createAnnotation(newAnnotation: TraceEngine.Types.File.Annotation): void {\n    const newOverlay = {\n      type: 'ENTRY_LABEL',\n      entry: newAnnotation.entry,\n      label: newAnnotation.label,\n    } as Overlays.Overlays.EntryLabel;\n    this.#overlayForAnnotation.set(newAnnotation, newOverlay);\n\n    // TODO: When we have more annotations, check the annotation type and create the appropriate one\n    this.dispatchEvent(new AnnotationModifiedEvent(newOverlay, 'Add'));\n  }\n\n  removeAnnotation(removedAnnotation: TraceEngine.Types.File.Annotation): void {\n    const overlayToRemove = this.#overlayForAnnotation.get(removedAnnotation);\n    if (!overlayToRemove) {\n      console.warn('Overlay for deleted Annotation does not exist');\n      return;\n    }\n    this.#overlayForAnnotation.delete(removedAnnotation);\n    this.dispatchEvent(new AnnotationModifiedEvent(overlayToRemove, 'Remove'));\n  }\n\n  removeAnnotationOverlay(removedOverlay: Overlays.Overlays.TimelineOverlay): void {\n    const annotationForRemovedOverlay = this.#getAnnotationByOverlay(removedOverlay);\n    if (!annotationForRemovedOverlay) {\n      console.warn('Annotation for deleted Overlay does not exist');\n      return;\n    }\n    this.#overlayForAnnotation.delete(annotationForRemovedOverlay);\n    this.dispatchEvent(new AnnotationModifiedEvent(removedOverlay, 'Remove'));\n  }\n\n  updateAnnotationOverlay(updatedOverlay: Overlays.Overlays.TimelineOverlay): void {\n    const annotationForUpdatedOverlay = this.#getAnnotationByOverlay(updatedOverlay);\n    if (!annotationForUpdatedOverlay) {\n      console.warn('Annotation for updated Overlay does not exist');\n      return;\n    }\n\n    if (updatedOverlay.type === 'ENTRY_LABEL') {\n      annotationForUpdatedOverlay.label = updatedOverlay.label;\n    }\n    this.dispatchEvent(new AnnotationModifiedEvent(updatedOverlay, 'UpdateLabel'));\n  }\n\n  #getAnnotationByOverlay(overlay: Overlays.Overlays.TimelineOverlay): TraceEngine.Types.File.Annotation|null {\n    for (const [annotation, currOverlay] of this.#overlayForAnnotation.entries()) {\n      if (currOverlay === overlay) {\n        return annotation;\n      }\n    }\n    return null;\n  }\n\n  getAnnotations(): TraceEngine.Types.File.Annotation[] {\n    return [...this.#overlayForAnnotation.keys()];\n  }\n\n  getOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    return [...this.#overlayForAnnotation.values()];\n  }\n\n  /**\n   * Builds all modifications into a serializable object written into\n   * the 'modifications' trace file metadata field.\n   */\n  toJSON(): TraceEngine.Types.File.Modifications {\n    const hiddenEntries = this.#entriesFilter.invisibleEntries()\n                              .map(entry => this.#eventsSerializer.keyForEvent(entry))\n                              .filter(entry => entry !== null) as TraceEngine.Types.File.TraceEventSerializableKey[];\n    const expandableEntries =\n        this.#entriesFilter.expandableEntries()\n            .map(entry => this.#eventsSerializer.keyForEvent(entry))\n            .filter(entry => entry !== null) as TraceEngine.Types.File.TraceEventSerializableKey[];\n    this.#modifications = {\n      entriesModifications: {\n        hiddenEntries: hiddenEntries,\n        expandableEntries: expandableEntries,\n      },\n      initialBreadcrumb: this.#timelineBreadcrumbs.initialBreadcrumb,\n      annotations: this.#annotationsJSON(),\n    };\n    return this.#modifications;\n  }\n\n  #annotationsJSON(): TraceEngine.Types.File.SerializedAnnotations {\n    const annotations = this.getAnnotations();\n    const entryLabelsSerialized: TraceEngine.Types.File.EntryLabelAnnotationSerialized[] = [];\n\n    for (let i = 0; i < annotations.length; i++) {\n      if (annotations[i].type === 'ENTRY_LABEL') {\n        const serializedEvent = this.#eventsSerializer.keyForEvent(annotations[i].entry);\n        if (serializedEvent) {\n          entryLabelsSerialized.push({\n            entry: serializedEvent,\n            label: annotations[i].label,\n          });\n        }\n      }\n    }\n\n    return {\n      entryLabels: entryLabelsSerialized,\n    };\n  }\n\n  applyModificationsIfPresent(): void {\n    const modifications = this.#modifications;\n    if (!modifications || !modifications.annotations) {\n      return;\n    }\n    const hiddenEntries = modifications.entriesModifications.hiddenEntries;\n    const expandableEntries = modifications.entriesModifications.expandableEntries;\n    this.#applyEntriesFilterModifications(hiddenEntries, expandableEntries);\n    this.#timelineBreadcrumbs.setInitialBreadcrumbFromLoadedModifications(modifications.initialBreadcrumb);\n\n    const entryLabels = modifications.annotations.entryLabels;\n    entryLabels.forEach(entryLabel => {\n      this.createAnnotation({\n        type: 'ENTRY_LABEL',\n        entry: this.#eventsSerializer.eventForKey(entryLabel.entry, this.#traceParsedData),\n        label: entryLabel.label,\n      });\n    });\n  }\n\n  #applyEntriesFilterModifications(\n      hiddenEntriesKeys: TraceEngine.Types.File.TraceEventSerializableKey[],\n      expandableEntriesKeys: TraceEngine.Types.File.TraceEventSerializableKey[]): void {\n    const hiddenEntries = hiddenEntriesKeys.map(key => this.#eventsSerializer.eventForKey(key, this.#traceParsedData));\n    const expandableEntries =\n        expandableEntriesKeys.map(key => this.#eventsSerializer.eventForKey(key, this.#traceParsedData));\n    this.#entriesFilter.setHiddenAndExpandableEntries(hiddenEntries, expandableEntries);\n  }\n}\n"]}