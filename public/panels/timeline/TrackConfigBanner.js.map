{"version":3,"file":"TrackConfigBanner.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/TrackConfigBanner.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAEhD,OAAO,KAAK,OAAO,MAAM,wCAAwC,CAAC;AAClE,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAEhD,MAAM,SAAS,GAAG;IAChB;;OAEG;IACH,mBAAmB,EACf,kGAAkG;IACtG;;OAEG;IACH,OAAO,EAAE,UAAU;IACnB;;OAEG;IACH,eAAe,EAAE,kBAAkB;CAC3B,CAAC;AACX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,sCAAsC,EAAE,SAAS,CAAC,CAAC;AAC5F,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE;;;;;;;;;GASG;AACH,MAAM,gCAAgC,GAAG,IAAI,OAAO,EAAgE,CAAC;AAErH;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,yBAAyB,CAAC,WAAyC,EAAE,SAIpF;IACC,MAAM,MAAM,GAAG,gCAAgC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACjE,IAAI,MAAM,KAAK,WAAW,EAAE,CAAC;QAC3B,yEAAyE;QACzE,gCAAgC;QAChC,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,MAAM,YAAY,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACzC,sEAAsE;QACtE,sGAAsG;QACtG,OAAO;YACL,IAAI,EAAE,iBAAiB;YACvB,OAAO,EAAE,MAAM;SAChB,CAAC;IACJ,CAAC;IAED,wGAAwG;IACxG,MAAM,eAAe,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,OAAO,0CAE1C,UAAU,CAAC,SAAS,CAAC,mBAAmB,CAAC,EACzC;QACE;YACE,IAAI,EAAE,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC;YACnC,QAAQ,EAAE,SAAS,CAAC,eAAe;YACnC,OAAO,EAAE,IAAI;SACd;QACD;YACE,IAAI,EAAE,UAAU,CAAC,SAAS,CAAC,eAAe,CAAC;YAC3C,QAAQ,EAAE,SAAS,CAAC,4BAA4B;YAChD,OAAO,EAAE,IAAI;YACb,aAAa,gDAAgC;SAC9C;KACF,CACJ,CAAC;IACF,eAAe,CAAC,gBAAgB,CAAC,GAAG,EAAE;QACpC,SAAS,CAAC,OAAO,EAAE,CAAC;QACpB,gCAAgC,CAAC,GAAG,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,gCAAgC,CAAC,GAAG,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;IACnE,OAAO,EAAC,IAAI,EAAE,iBAAiB,EAAE,OAAO,EAAE,eAAe,EAAC,CAAC;AAC7D,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Trace from '../../models/trace/trace.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n   * @description Message shown in a banner when some tracks are hidden in the timeline.\n   */\n  someTracksAreHidden:\n      'Some tracks are hidden in this trace. You can configure tracks by right clicking the track name.',\n  /**\n   * @description Text for a button to show all hidden tracks.\n   */\n  showAll: 'Show all',\n  /**\n   * @description Text for a button that opens a view to configure which tracks are visible.\n   */\n  configureTracks: 'Configure tracks',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TrackConfigBanner.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * If the user records/imports a trace and their configuration means some\n * tracks are hidden, we show them a dismissable banner at the bottom of the\n * timeline. But we need to remember when they dismiss the banner, so we don't\n * show it again for this trace; so this map stores either the infobar element,\n * or 'DISMISSED', which tells us not to show or create another infobar. If\n * there\n * is no entry for a trace in this map it is assumed to be a new trace and the\n * banner will be shown if the user has any hidden track config.\n */\nconst hiddenTracksInfoBarByParsedTrace = new WeakMap<Trace.TraceModel.ParsedTrace, UI.Infobar.Infobar|'DISMISSED'>();\n\n/**\n * Creates an overlay for the timeline that will show a banner informing the user that at least one track is hidden.\n *\n * @param parsedTrace The trace parsed data.\n * @param callbacks An object containing the callback functions to be executed\n * when the user interacts with the banner.\n *   - `onShowAllTracks`: called when the user clicks the \"Unhide all\" button.\n *   - `onShowTrackConfigurationMode`: called when the user clicks the \"Show hidden tracks\" button.\n *   - `onClose`: called when the banner is closed by the user.\n * @returns A `Trace.Types.Overlays.Overlay` object to be rendered, or `null` if\n * no banner should be shown (because the user has already seen the banner)\n */\nexport function createHiddenTracksOverlay(parsedTrace: Trace.TraceModel.ParsedTrace, callbacks: {\n  onShowAllTracks: () => void,\n  onShowTrackConfigurationMode: () => void,\n  onClose: () => void,\n}): Trace.Types.Overlays.BottomInfoBar|null {\n  const status = hiddenTracksInfoBarByParsedTrace.get(parsedTrace);\n  if (status === 'DISMISSED') {\n    // The user has already seen the banner + dismissed it for this trace, so\n    // we don't need to do anything.\n    return null;\n  }\n  if (status instanceof UI.Infobar.Infobar) {\n    // We already have an infobar, so let's update the overlay to show it.\n    // The Bottom Info Bar overlay is a singleton, so we can safely do this and it won't show two banners.\n    return {\n      type: 'BOTTOM_INFO_BAR',\n      infobar: status,\n    };\n  }\n\n  // If we got here, it means that the user has hidden tracks, and has not seen the banner for this trace.\n  const infobarForTrace = new UI.Infobar.Infobar(\n      UI.Infobar.Type.WARNING,\n      i18nString(UIStrings.someTracksAreHidden),\n      [\n        {\n          text: i18nString(UIStrings.showAll),\n          delegate: callbacks.onShowAllTracks,\n          dismiss: true,\n        },\n        {\n          text: i18nString(UIStrings.configureTracks),\n          delegate: callbacks.onShowTrackConfigurationMode,\n          dismiss: true,\n          buttonVariant: Buttons.Button.Variant.PRIMARY,\n        }\n      ],\n  );\n  infobarForTrace.setCloseCallback(() => {\n    callbacks.onClose();\n    hiddenTracksInfoBarByParsedTrace.set(parsedTrace, 'DISMISSED');\n  });\n\n  hiddenTracksInfoBarByParsedTrace.set(parsedTrace, infobarForTrace);\n  return {type: 'BOTTOM_INFO_BAR', infobar: infobarForTrace};\n}\n"]}