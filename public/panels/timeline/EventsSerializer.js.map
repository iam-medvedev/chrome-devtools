{"version":3,"file":"EventsSerializer.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/EventsSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TraceEngine from '../../models/trace/trace.js';\n\nexport class EventsSerializer {\n  #modifiedProfileCallByKey:\n      Map<TraceEngine.Types.File.ProfileCallKeyValues, TraceEngine.Types.TraceEvents.SyntheticProfileCall> = new Map();\n\n  keyForEvent(event: TraceEngine.Types.TraceEvents.TraceEventData): TraceEngine.Types.File.TraceEventSerializableKey\n      |null {\n    if (TraceEngine.Types.TraceEvents.isProfileCall(event)) {\n      return `${TraceEngine.Types.File.EventKeyType.PROFILE_CALL}-${event.pid}-${event.tid}-${\n          TraceEngine.Types.TraceEvents.SampleIndex(event.sampleIndex)}-${event.nodeId}`;\n    }\n\n    if (TraceEngine.Types.TraceEvents.isLegacyTimelineFrame(event)) {\n      return `${TraceEngine.Types.File.EventKeyType.LEGACY_TIMELINE_FRAME}-${event.index}`;\n    }\n\n    const rawEvents = TraceEngine.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getRawTraceEvents();\n    const key: TraceEngine.Types.File.SyntheticEventKey|TraceEngine.Types.File.RawEventKey =\n        TraceEngine.Types.TraceEvents.isSyntheticBasedEvent(event) ?\n        `${TraceEngine.Types.File.EventKeyType.SYNTHETIC_EVENT}-${rawEvents.indexOf(event.rawSourceEvent)}` :\n        `${TraceEngine.Types.File.EventKeyType.RAW_EVENT}-${rawEvents.indexOf(event)}`;\n    if (key.length < 3) {\n      return null;\n    }\n    return key;\n  }\n\n  eventForKey(\n      key: TraceEngine.Types.File.TraceEventSerializableKey,\n      traceParsedData: TraceEngine.Handlers.Types.TraceParseData): TraceEngine.Types.TraceEvents.TraceEventData {\n    const eventValues = TraceEngine.Types.File.traceEventKeyToValues(key);\n\n    if (EventsSerializer.isProfileCallKey(eventValues)) {\n      return this.#getModifiedProfileCallByKeyValues(eventValues, traceParsedData);\n    }\n\n    if (EventsSerializer.isLegacyTimelineFrameKey(eventValues)) {\n      const event = traceParsedData.Frames.frames.at(eventValues.rawIndex);\n      if (!event) {\n        throw new Error(`Could not find frame with index ${eventValues.rawIndex}`);\n      }\n      return event;\n    }\n\n    if (EventsSerializer.isSyntheticEventKey(eventValues)) {\n      const syntheticEvents =\n          TraceEngine.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getSyntheticTraceEvents();\n      const syntheticEvent = syntheticEvents.at(eventValues.rawIndex);\n      if (!syntheticEvent) {\n        throw new Error(`Attempted to get a synthetic event from an unknown raw event index: ${eventValues.rawIndex}`);\n      }\n      return syntheticEvent;\n    }\n\n    if (EventsSerializer.isRawEventKey(eventValues)) {\n      const rawEvents =\n          TraceEngine.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getRawTraceEvents();\n      return rawEvents[eventValues.rawIndex];\n    }\n    throw new Error(`Unknown trace event serializable key values: ${(eventValues as Array<unknown>).join('-')}`);\n  }\n\n  static isProfileCallKey(key: TraceEngine.Types.File.TraceEventSerializableKeyValues):\n      key is TraceEngine.Types.File.ProfileCallKeyValues {\n    return key.type === TraceEngine.Types.File.EventKeyType.PROFILE_CALL;\n  }\n  static isLegacyTimelineFrameKey(key: TraceEngine.Types.File.TraceEventSerializableKeyValues):\n      key is TraceEngine.Types.File.LegacyTimelineFrameKeyValues {\n    return key.type === TraceEngine.Types.File.EventKeyType.LEGACY_TIMELINE_FRAME;\n  }\n\n  static isRawEventKey(key: TraceEngine.Types.File.TraceEventSerializableKeyValues):\n      key is TraceEngine.Types.File.RawEventKeyValues {\n    return key.type === TraceEngine.Types.File.EventKeyType.RAW_EVENT;\n  }\n  static isSyntheticEventKey(key: TraceEngine.Types.File.TraceEventSerializableKeyValues):\n      key is TraceEngine.Types.File.SyntheticEventKeyValues {\n    return key.type === TraceEngine.Types.File.EventKeyType.SYNTHETIC_EVENT;\n  }\n\n  #getModifiedProfileCallByKeyValues(\n      key: TraceEngine.Types.File.ProfileCallKeyValues,\n      traceParsedData: TraceEngine.Handlers.Types.TraceParseData): TraceEngine.Types.TraceEvents.SyntheticProfileCall {\n    const cacheResult = this.#modifiedProfileCallByKey.get(key);\n    if (cacheResult) {\n      return cacheResult;\n    }\n    const profileCallsInThread =\n        traceParsedData.Renderer.processes.get(key.processID)?.threads.get(key.threadID)?.profileCalls;\n    if (!profileCallsInThread) {\n      throw new Error(`Unknown profile call serializable key: ${(key)}`);\n    }\n\n    const match = profileCallsInThread?.find(e => {\n      return e.sampleIndex === key.sampleIndex && e.nodeId === key.protocol;\n    });\n    if (!match) {\n      throw new Error(`Unknown profile call serializable key: ${(JSON.stringify(key))}`);\n    }\n    // Cache to avoid looking up in subsequent calls.\n    this.#modifiedProfileCallByKey.set(key, match);\n    return match;\n  }\n}\n"]}