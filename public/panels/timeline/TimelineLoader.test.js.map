{"version":3,"file":"TimelineLoader.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/TimelineLoader.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {makeInstantEvent} from '../../testing/TraceHelpers.js';\n\nimport * as Timeline from './timeline.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\nfunction getWebDevTraceUrl(): Platform.DevToolsPath.UrlString {\n  const href = new URL('./fixtures/traces/web-dev.json.gz', import.meta.url).href;\n  return urlString`${href}`;\n}\n\nfunction getBasicCpuProfileUrl(): Platform.DevToolsPath.UrlString {\n  const href = new URL('./fixtures/traces/node-fibonacci-website.cpuprofile.gz', import.meta.url).href;\n  return urlString`${href}`;\n}\n\ndescribeWithEnvironment('TimelineLoader', () => {\n  const loadingStartedSpy = sinon.spy();\n  const loadingProgressSpy = sinon.spy();\n  const processingStartedSpy = sinon.spy();\n  const loadingCompleteSpy = sinon.spy();\n  const recordingProgressSpy = sinon.spy();\n  const loadingCompleteForTestSpy = sinon.spy();\n\n  const client: Timeline.TimelineController.Client = {\n    async loadingStarted() {\n      loadingStartedSpy();\n    },\n    async loadingProgress(progress?: number) {\n      loadingProgressSpy(progress);\n    },\n    async processingStarted() {\n      processingStartedSpy();\n    },\n    async loadingComplete(\n        collectedEvents: Trace.Types.Events.Event[],\n        exclusiveFilter: Trace.Extras.TraceFilter.TraceFilter|null,\n        metadata: Trace.Types.File.MetaData,\n    ) {\n      loadingCompleteSpy(collectedEvents, exclusiveFilter, metadata);\n    },\n    recordingProgress: function(usage: number): void {\n      recordingProgressSpy(usage);\n    },\n    loadingCompleteForTest: function(): void {\n      loadingCompleteForTestSpy();\n    },\n  };\n\n  beforeEach(() => {\n    loadingStartedSpy.resetHistory();\n    loadingProgressSpy.resetHistory();\n    processingStartedSpy.resetHistory();\n    loadingCompleteSpy.resetHistory();\n    recordingProgressSpy.resetHistory();\n    loadingCompleteForTestSpy.resetHistory();\n  });\n\n  it('can load a saved trace file', async () => {\n    const url = getWebDevTraceUrl();\n    const loader = await Timeline.TimelineLoader.TimelineLoader.loadFromURL(url, client);\n    await loader.traceFinalizedForTest();\n    sinon.assert.calledOnce(loadingStartedSpy);\n    // Not called for loadFromURL. Maybe it should be.\n    sinon.assert.callCount(loadingProgressSpy, 0);\n    sinon.assert.calledOnce(processingStartedSpy);\n    sinon.assert.calledOnce(loadingCompleteSpy);\n\n    // Get the arguments of the first (and only) call to the loadingComplete\n    // function. TS doesn't know what the types are (they are [any, any] by\n    // default), so we tell it that they align with the types of the\n    // loadingComplete parameters.\n    const [collectedEvents, exclusiveFilter, metadata] =\n        loadingCompleteSpy.args[0] as Parameters<Timeline.TimelineController.Client['loadingComplete']>;\n    assert.isNull(exclusiveFilter);  // We are not filtering out any events for this trace.\n    // Ensure that we loaded something that looks about right!\n    assert.lengthOf(collectedEvents, 8252);\n    assert.notStrictEqual(metadata?.dataOrigin, Trace.Types.File.DataOrigin.CPU_PROFILE);\n  });\n\n  it('can load a saved CPUProfile file', async () => {\n    const url = getBasicCpuProfileUrl();\n    const loader = await Timeline.TimelineLoader.TimelineLoader.loadFromURL(url, client);\n    await loader.traceFinalizedForTest();\n    sinon.assert.calledOnce(loadingStartedSpy);\n    // Not called for loadFromURL. Maybe it should be.\n    sinon.assert.callCount(loadingProgressSpy, 0);\n    sinon.assert.calledOnce(processingStartedSpy);\n    sinon.assert.calledOnce(loadingCompleteSpy);\n\n    // Get the arguments of the first (and only) call to the loadingComplete\n    // function. TS doesn't know what the types are (they are [any, any] by\n    // default), so we tell it that they align with the types of the\n    // loadingComplete parameters.\n    const [collectedEvents, /* exclusiveFilter */, metadata] =\n        loadingCompleteSpy.args[0] as Parameters<Timeline.TimelineController.Client['loadingComplete']>;\n    // We create one synthetic trace event for CPU profile\n    assert.lengthOf(collectedEvents, 1);\n    assert.strictEqual(metadata?.dataOrigin, Trace.Types.File.DataOrigin.CPU_PROFILE);\n  });\n\n  it('can load recorded trace events correctly', async () => {\n    const testTraceEvents: Trace.Types.Events.Event[] = [\n      makeInstantEvent('test-event-1', 1),\n      makeInstantEvent('test-event-2', 2),\n    ];\n    const loader = Timeline.TimelineLoader.TimelineLoader.loadFromEvents(testTraceEvents, client);\n    await loader.traceFinalizedForTest();\n    sinon.assert.calledOnce(loadingStartedSpy);\n    // For the trace events we are testing, loadingProgress will be called only once, because the\n    // fake trace events array is very short.\n    sinon.assert.calledOnce(loadingProgressSpy);\n    sinon.assert.calledOnce(processingStartedSpy);\n    sinon.assert.calledOnce(loadingCompleteSpy);\n\n    // Get the arguments of the first (and only) call to the loadingComplete\n    // function. TS doesn't know what the types are (they are [any, any] by\n    // default), so we tell it that they align with the types of the\n    // loadingComplete parameters.\n    const [collectedEvents, exclusiveFilter, metadata] =\n        loadingCompleteSpy.args[0] as Parameters<Timeline.TimelineController.Client['loadingComplete']>;\n    assert.isNull(exclusiveFilter);\n    // Ensure that we loaded something that looks about right!\n    assert.lengthOf(collectedEvents, testTraceEvents.length);\n    assert.notStrictEqual(metadata?.dataOrigin, Trace.Types.File.DataOrigin.CPU_PROFILE);\n  });\n\n  it('can load recorded CPUProfile correctly', async () => {\n    const testProfile: Protocol.Profiler.Profile = {nodes: [], startTime: 0, endTime: 0};\n    const loader = Timeline.TimelineLoader.TimelineLoader.loadFromCpuProfile(testProfile, client);\n    await loader.traceFinalizedForTest();\n    sinon.assert.calledOnce(loadingStartedSpy);\n    // For the CPU Profile we are testing, loadingProgress will be called only once, because the\n    // fake Profile is basically empty.\n    sinon.assert.callCount(loadingProgressSpy, 1);\n    sinon.assert.calledOnce(processingStartedSpy);\n    sinon.assert.calledOnce(loadingCompleteSpy);\n\n    // Get the arguments of the first (and only) call to the loadingComplete\n    // function. TS doesn't know what the types are (they are [any, any] by\n    // default), so we tell it that they align with the types of the\n    // loadingComplete parameters.\n    const [collectedEvents, /* exclusiveFilter */, metadata] =\n        loadingCompleteSpy.args[0] as Parameters<Timeline.TimelineController.Client['loadingComplete']>;\n    // We create one synthetic trace event for CPU profile\n    assert.lengthOf(collectedEvents, 1);\n    assert.strictEqual(metadata?.dataOrigin, Trace.Types.File.DataOrigin.CPU_PROFILE);\n  });\n});\n"]}