{"version":3,"file":"TimeRangeOverlay.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/timeline/overlays/components/TimeRangeOverlay.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as Platform from '../../../../core/platform/platform.js';\nimport type * as Trace from '../../../../models/trace/trace.js';\nimport {html, render} from '../../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../../ui/visual_logging/visual_logging.js';\n\nimport stylesRaw from './timeRangeOverlay.css.js';\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst styles = new CSSStyleSheet();\nstyles.replaceSync(stylesRaw.cssContent);\n\nconst UIStrings = {\n  /**\n   *@description Accessible label used to explain to a user that they are viewing an entry label.\n   */\n  timeRange: 'Time range',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/overlays/components/TimeRangeOverlay.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class TimeRangeLabelChangeEvent extends Event {\n  static readonly eventName = 'timerangelabelchange';\n\n  constructor(public newLabel: string) {\n    super(TimeRangeLabelChangeEvent.eventName);\n  }\n}\n\nexport class TimeRangeRemoveEvent extends Event {\n  static readonly eventName = 'timerangeremoveevent';\n\n  constructor() {\n    super(TimeRangeRemoveEvent.eventName);\n  }\n}\n\nexport class TimeRangeOverlay extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #duration: Trace.Types.Timing.Micro|null = null;\n  #canvasRect: DOMRect|null = null;\n  #label: string;\n\n  // The label is set to editable and in focus anytime the label is empty and when the label it is double clicked.\n  // If the user clicks away from the selected range element and the label is not empty, the label is set to not editable until it is double clicked.\n  #isLabelEditable = true;\n\n  #rangeContainer: HTMLElement|null = null;\n  #labelBox: HTMLElement|null = null;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [styles];\n  }\n\n  constructor(initialLabel: string) {\n    super();\n    this.#render();\n    this.#rangeContainer = this.#shadow.querySelector<HTMLElement>('.range-container');\n    this.#labelBox = this.#rangeContainer?.querySelector<HTMLElement>('.label-text') ?? null;\n    this.#label = initialLabel;\n    if (!this.#labelBox) {\n      console.error('`labelBox` element is missing.');\n      return;\n    }\n    this.#labelBox.innerText = initialLabel;\n    if (initialLabel) {\n      this.#labelBox?.setAttribute('aria-label', initialLabel);\n      // To construct a time range with a predefined label, it must have been\n      // loaded from the trace file. In this case we do not want it to default\n      // to editable.\n      this.#setLabelEditability(false);\n    }\n  }\n\n  set canvasRect(rect: DOMRect|null) {\n    if (rect === null) {\n      return;\n    }\n    if (this.#canvasRect && this.#canvasRect.width === rect.width && this.#canvasRect.height === rect.height) {\n      return;\n    }\n    this.#canvasRect = rect;\n    this.#render();\n  }\n\n  set duration(duration: Trace.Types.Timing.Micro|null) {\n    if (duration === this.#duration) {\n      return;\n    }\n    this.#duration = duration;\n    this.#render();\n  }\n\n  /**\n   * This calculates how much of the time range is in the user's view. This is\n   * used to determine how much of the label can fit into the view, and if we\n   * should even show the label.\n   */\n  #visibleOverlayWidth(overlayRect: DOMRect): number {\n    if (!this.#canvasRect) {\n      return 0;\n    }\n\n    const {x: overlayStartX, width} = overlayRect;\n    const overlayEndX = overlayStartX + width;\n\n    const canvasStartX = this.#canvasRect.x;\n    const canvasEndX = this.#canvasRect.x + this.#canvasRect.width;\n\n    const leftVisible = Math.max(canvasStartX, overlayStartX);\n    const rightVisible = Math.min(canvasEndX, overlayEndX);\n    return rightVisible - leftVisible;\n  }\n\n  /**\n   * We use this method after the overlay has been positioned in order to move\n   * the label as required to keep it on screen.\n   * If the label is off to the left or right, we fix it to that corner and\n   * align the text so the label is visible as long as possible.\n   */\n  updateLabelPositioning(): void {\n    if (!this.#rangeContainer) {\n      return;\n    }\n\n    if (!this.#canvasRect || !this.#labelBox) {\n      return;\n    }\n\n    // On the RHS of the panel a scrollbar can be shown which means the canvas\n    // has a 9px gap on the right hand edge. We use this value when calculating\n    // values and label positioning from the left hand side in order to be\n    // consistent on both edges of the UI.\n    const paddingForScrollbar = 9;\n    const overlayRect = this.getBoundingClientRect();\n    const labelFocused = this.#shadow.activeElement === this.#labelBox;\n\n    const labelRect = this.#rangeContainer.getBoundingClientRect();\n    const visibleOverlayWidth = this.#visibleOverlayWidth(overlayRect) - paddingForScrollbar;\n\n    const durationBox = this.#rangeContainer.querySelector<HTMLElement>('.duration') ?? null;\n    const durationBoxLength = durationBox?.getBoundingClientRect().width;\n    if (!durationBoxLength) {\n      return;\n    }\n    const overlayTooNarrow = visibleOverlayWidth <= durationBoxLength;\n    // We do not hide the label if:\n    // 1. it is focused (user is typing into it)\n    // 2. it is empty - this means it's a new label and we need to let the user type into it!\n    // 3. it is too narrow - narrower than the duration length\n    const hideLabel = overlayTooNarrow && !labelFocused && this.#label.length > 0;\n    this.#rangeContainer.classList.toggle('labelHidden', hideLabel);\n\n    if (hideLabel) {\n      // Label is invisible, no need to do all the layout.\n      return;\n    }\n\n    // Check if label is off the LHS of the screen.\n    const labelLeftMarginToCenter = (overlayRect.width - labelRect.width) / 2;\n    const newLabelX = overlayRect.x + labelLeftMarginToCenter;\n\n    const labelOffLeftOfScreen = newLabelX < this.#canvasRect.x;\n    this.#rangeContainer.classList.toggle('offScreenLeft', labelOffLeftOfScreen);\n\n    // Check if label is off the RHS of the screen\n    const rightBound = this.#canvasRect.x + this.#canvasRect.width;\n    // The label's right hand edge is the gap from the left of the range to the\n    // label, and then the width of the label.\n    const labelRightEdge = overlayRect.x + labelLeftMarginToCenter + labelRect.width;\n    const labelOffRightOfScreen = labelRightEdge > rightBound;\n    this.#rangeContainer.classList.toggle('offScreenRight', labelOffRightOfScreen);\n\n    if (labelOffLeftOfScreen) {\n      // If the label is off the left of the screen, we adjust by the\n      // difference between the X that represents the start of the cavnas, and\n      // the X that represents the start of the overlay.\n      // We then take the absolute value of this - because if the canvas starts\n      // at 0, and the overlay is -200px, we have to adjust the label by +200.\n      // Add on 9 pixels to pad from the left; this is the width of the sidebar\n      // on the RHS so we match it so the label is equally padded on either\n      // side.\n      this.#rangeContainer.style.marginLeft = `${Math.abs(this.#canvasRect.x - overlayRect.x) + paddingForScrollbar}px`;\n    } else if (labelOffRightOfScreen) {\n      // If the label is off the right of the screen, we adjust by adding the\n      // right margin equal to the difference between the right edge of the\n      // overlay and the right edge of the canvas.\n      this.#rangeContainer.style.marginRight = `${overlayRect.right - this.#canvasRect.right + paddingForScrollbar}px`;\n    } else {\n      // Keep the label central.\n      this.#rangeContainer.style.margin = '0px';\n    }\n\n    // If the text is empty, set the label editibility to true.\n    // Only allow to remove the focus and save the range as annotation if the label is not empty.\n    if (this.#labelBox?.innerText === '') {\n      this.#setLabelEditability(true);\n    }\n  }\n\n  #focusInputBox(): void {\n    if (!this.#labelBox) {\n      console.error('`labelBox` element is missing.');\n      return;\n    }\n    this.#labelBox.focus();\n  }\n\n  #setLabelEditability(editable: boolean): void {\n    // Always keep focus on the label input field if the label is empty.\n    // TODO: Do not remove a range that is being navigated away from if the label is not empty\n    if (this.#labelBox?.innerText === '') {\n      this.#focusInputBox();\n      return;\n    }\n    this.#isLabelEditable = editable;\n    this.#render();\n    // If the label is editable, focus cursor on it\n    if (editable) {\n      this.#focusInputBox();\n    }\n  }\n\n  #handleLabelInputKeyUp(): void {\n    // If the label changed on key up, dispatch label changed event\n    const labelBoxTextContent = this.#labelBox?.textContent ?? '';\n    if (labelBoxTextContent !== this.#label) {\n      this.#label = labelBoxTextContent;\n      this.dispatchEvent(new TimeRangeLabelChangeEvent(this.#label));\n      this.#labelBox?.setAttribute('aria-label', labelBoxTextContent);\n    }\n  }\n\n  #handleLabelInputKeyDown(event: KeyboardEvent): boolean {\n    // If the new key is `Enter` or `Escape` key, treat it\n    // as the end of the label input and blur the input field.\n    // If the text field is empty when `Enter` or `Escape` are pressed,\n    // dispatch an event to remove the time range.\n    if (event.key === Platform.KeyboardUtilities.ENTER_KEY || event.key === Platform.KeyboardUtilities.ESCAPE_KEY) {\n      // In DevTools, the `Escape` button will by default toggle the console\n      // drawer, which we don't want here, so we need to call\n      // `stopPropagation()`.\n      event.stopPropagation();\n      if (this.#label === '') {\n        this.dispatchEvent(new TimeRangeRemoveEvent());\n      }\n      this.#labelBox?.blur();\n      return false;\n    }\n\n    return true;\n  }\n\n  #render(): void {\n    const durationText = this.#duration ? i18n.TimeUtilities.formatMicroSecondsTime(this.#duration) : '';\n    // clang-format off\n    render(\n        html`\n          <span class=\"range-container\" role=\"region\" aria-label=${i18nString(UIStrings.timeRange)}>\n            <span\n             class=\"label-text\"\n             role=\"textbox\"\n             @focusout=${() => this.#setLabelEditability(false)}\n             @dblclick=${() => this.#setLabelEditability(true)}\n             @keydown=${this.#handleLabelInputKeyDown}\n             @keyup=${this.#handleLabelInputKeyUp}\n             contenteditable=${this.#isLabelEditable ? 'plaintext-only' : false}\n             jslog=${VisualLogging.textField('timeline.annotations.time-range-label-input').track({keydown: true, click: true})}\n            ></span>\n            <span class=\"duration\">${durationText}</span>\n          </span>\n          `,\n        this.#shadow, {host: this});\n    // clang-format on\n\n    // Now we have rendered, we need to re-run the code to tweak the margin &\n    // positioning of the label.\n    this.updateLabelPositioning();\n  }\n}\n\ncustomElements.define('devtools-time-range-overlay', TimeRangeOverlay);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-time-range-overlay': TimeRangeOverlay;\n  }\n}\n"]}