{"version":3,"file":"ExternalRequests.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/ExternalRequests.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,KAAK,MAAM,6BAA6B,CAAC;AACrD,OAAO,EAAC,uBAAuB,EAAC,MAAM,qCAAqC,CAAC;AAC5E,OAAO,EAAC,WAAW,EAAC,MAAM,8BAA8B,CAAC;AAEzD,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,MAAM,EAAC,iBAAiB,EAAC,GAAG,QAAQ,CAAC,gBAAgB,CAAC;AAEtD,uBAAuB,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAC/C,EAAE,CAAC,gCAAgC,EAAE,KAAK;QACxC,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC;QAChF,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC;QAC7D,MAAM,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAE1B,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;QAC/D,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC,gBAAgB,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;QAC9C,CAAC;QACD,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QACjF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK;QAC9C,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC;QAChF,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC;QAC7D,MAAM,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAE1B,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;QAClE,IAAI,SAAS,IAAI,MAAM,EAAE,CAAC;YACxB,MAAM,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;QAClD,CAAC;QACD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,sDAAsD,CAAC,CAAC;IAC3F,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../models/trace/trace.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\n\nimport * as Timeline from './timeline.js';\n\nconst {getInsightToDebug} = Timeline.ExternalRequests;\n\ndescribeWithEnvironment('ExternalRequests', () => {\n  it('finds the insight by the title', async function() {\n    const events = await TraceLoader.rawEvents(this, 'web-dev-with-commit.json.gz');\n    const model = Trace.TraceModel.Model.createWithAllHandlers();\n    await model.parse(events);\n\n    const result = await getInsightToDebug(model, 'LCP breakdown');\n    if ('error' in result) {\n      assert.fail(`Test failed: ${result.error}`);\n    }\n    assert.instanceOf(result.insight, Timeline.Utils.InsightAIContext.ActiveInsight);\n    assert.strictEqual(result.insight.insight.insightKey, 'LCPBreakdown');\n  });\n\n  it('errors if it cannot find the insight', async function() {\n    const events = await TraceLoader.rawEvents(this, 'web-dev-with-commit.json.gz');\n    const model = Trace.TraceModel.Model.createWithAllHandlers();\n    await model.parse(events);\n\n    const result = await getInsightToDebug(model, 'FakeInsightTitle');\n    if ('insight' in result) {\n      assert.fail('Test should not find an insight.');\n    }\n    assert.strictEqual(result.error, 'Could not find matching insight for FakeInsightTitle');\n  });\n});\n"]}