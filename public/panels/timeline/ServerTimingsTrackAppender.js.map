{"version":3,"file":"ServerTimingsTrackAppender.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/ServerTimingsTrackAppender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport type * as Trace from '../../models/trace/trace.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport {buildGroupStyle, buildTrackHeader} from './AppenderUtils.js';\nimport {\n  type CompatibilityTracksAppender,\n  type TrackAppender,\n  type TrackAppenderName,\n  VisualLoggingTrackName,\n} from './CompatibilityTracksAppender.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  serverTimingTrack:\n      'This track contains timings taken from Server-Timing network response headers. Their respective start times are only estimated and may not be accurate.',\n  /**\n   * @description Server Side refers to activity happening in the server in the context of an HTTP request.\n   * @example {origin} PH1\n   */\n  serverSideTrack: 'Server Timings â€” {PH1}',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/ServerTimingsTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ServerTimingsTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'ServerTimings';\n\n  #parsedTrace: Readonly<Trace.Handlers.Types.ParsedTrace>;\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  constructor(compatibilityBuilder: CompatibilityTracksAppender, parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    this.#parsedTrace = parsedTrace;\n    this.#compatibilityBuilder = compatibilityBuilder;\n  }\n\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean): number {\n    if (!Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_SERVER_TIMINGS)) {\n      return trackStartLevel;\n    }\n    if (this.#parsedTrace.ServerTimings.serverTimings.length === 0) {\n      return trackStartLevel;\n    }\n    let lastLevel = trackStartLevel;\n    const serverTimingsByOrigin =\n        Object.groupBy(this.#parsedTrace.ServerTimings.serverTimings, serverTiming => serverTiming.args.data.origin);\n    for (const [origin, serverTimings] of Object.entries(serverTimingsByOrigin)) {\n      if (!serverTimings || serverTimings.length === 0) {\n        continue;\n      }\n      this.#appendTopLevelHeaderAtLevel(lastLevel, origin, expanded);\n      lastLevel = this.#appendServerTimings(lastLevel, serverTimings);\n    }\n    return lastLevel;\n  }\n\n  /**\n   * Appends the top level header for a track. Extension entries can be\n   * added to tracks or sub-tracks. In the former case, the top level\n   * header corresponds to the track name, in the latter it corresponds\n   * to the track group name.\n   */\n  #appendTopLevelHeaderAtLevel(currentLevel: number, origin: string, expanded?: boolean): void {\n    const style = buildGroupStyle({shareHeaderLine: false, collapsible: true});\n    const headerTitle = i18nString(UIStrings.serverSideTrack, {PH1: origin});\n    const group = buildTrackHeader(\n        VisualLoggingTrackName.SERVER_TIMINGS, currentLevel, headerTitle, style,\n        /* selectable= */ true, expanded);\n    group.description = i18nString(UIStrings.serverTimingTrack);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  #appendServerTimings(trackStartLevel: number, serverTimings: Trace.Types.Events.SyntheticServerTiming[]): number {\n    let currentStartLevel = trackStartLevel;\n    currentStartLevel = this.#compatibilityBuilder.appendEventsAtLevel(serverTimings, currentStartLevel, this);\n    return currentStartLevel;\n  }\n\n  colorForEvent(): string {\n    return ThemeSupport.ThemeSupport.instance().getComputedValue('--ref-palette-primary70');\n  }\n}\n"]}