{"version":3,"file":"TimelineSelection.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/TimelineSelection.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,KAAK,MAAM,6BAA6B,CAAC;AACrD,OAAO,EAAC,uBAAuB,EAAC,MAAM,qCAAqC,CAAC;AAC5E,OAAO,EAAC,YAAY,EAAE,YAAY,EAAC,MAAM,+BAA+B,CAAC;AACzE,OAAO,EAAC,WAAW,EAAC,MAAM,8BAA8B,CAAC;AAEzD,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,uBAAuB,CAAC,mBAAmB,EAAE;IAC3C,MAAM,EAAC,iBAAiB,EAAC,GAAG,QAAQ,CAAC;IACrC,EAAE,CAAC,6BAA6B,EAAE,KAAK;QACrC,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC;QACzF,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnB,MAAM,SAAS,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC9D,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC3C,MAAM,OAAO,GAAG,iBAAiB,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAC/D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;QACjD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QAE/C,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK;QAC/C,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;QAC7E,MAAM,OAAO,GAAG,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,SAAS,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAChE,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC7C,MAAM,OAAO,GAAG,iBAAiB,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAC/D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAG,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,GAAgC,CAAC,CAAC;QACxF,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK;QAClD,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;QAC7E,MAAM,aAAa,GAAG,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC7E,OAAO,KAAK,CAAC,IAAI,KAAK,mCAAmC,CAAC;QAC5D,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3B,MAAM,SAAS,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;QACtE,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;QACnD,MAAM,OAAO,GAAG,iBAAiB,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAC/D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,wBAAwB,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC;QACxG,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,wBAAwB,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC;QACtG,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE;QAChC,MAAM,SAAS,GAAG,iBAAiB,CAAC,8BAA8B,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;QACtG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE;YACjC,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,EAAE;YACP,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,SAAS,GAAG,iBAAiB,CAAC,8BAA8B,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;QACtG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE;YACjC,GAAG,EAAE,KAAK;YACV,GAAG,EAAE,MAAM;YACX,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE,KAAK;QAC7E,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC;QACzF,MAAM,aAAa,GAAG,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC7E,OAAO,KAAK,CAAC,IAAI,KAAK,mCAAmC,CAAC;QAC5D,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3B,MAAM,UAAU,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;QACvE,MAAM,UAAU,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;QACvE,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,eAAe,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;QAEzE,MAAM,YAAY,GAAG,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9D,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC1B,MAAM,UAAU,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QACtE,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,eAAe,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;QACnF,MAAM,UAAU,GAAG,iBAAiB,CAAC,8BAA8B,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;QACvG,MAAM,UAAU,GAAG,iBAAiB,CAAC,8BAA8B,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;QACvG,MAAM,UAAU,GAAG,iBAAiB,CAAC,8BAA8B,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;QACxG,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,eAAe,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;QACzE,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,eAAe,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK;QAC3D,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC;QACzF,MAAM,aAAa,GAAG,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC7E,OAAO,KAAK,CAAC,IAAI,KAAK,mCAAmC,CAAC;QAC5D,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3B,MAAM,UAAU,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;QACvE,MAAM,UAAU,GAAG,iBAAiB,CAAC,8BAA8B,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;QACvG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,eAAe,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../models/trace/trace.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {microseconds, milliseconds} from '../../testing/TraceHelpers.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\n\nimport * as Timeline from './timeline.js';\n\ndescribeWithEnvironment('TimelineSelection', function() {\n  const {TimelineSelection} = Timeline;\n  it('can be created with a frame', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n    const frame = parsedTrace.Frames.frames.at(0);\n    assert.isOk(frame);\n    const selection = TimelineSelection.selectionFromEvent(frame);\n    assert.strictEqual(selection.event, frame);\n    const timings = TimelineSelection.rangeForSelection(selection);\n    assert.strictEqual(timings.min, frame.startTime);\n    assert.strictEqual(timings.max, frame.endTime);\n\n    assert.isTrue(TimelineSelection.selectionIsEvent(selection));\n    assert.isFalse(TimelineSelection.selectionIsRange(selection));\n  });\n\n  it('can be created with a network request', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n    const request = parsedTrace.NetworkRequests.byTime.at(0);\n    assert.isOk(request);\n    const selection = TimelineSelection.selectionFromEvent(request);\n    assert.strictEqual(selection.event, request);\n    const timings = TimelineSelection.rangeForSelection(selection);\n    assert.strictEqual(timings.min, request.ts);\n    assert.strictEqual(timings.max, (request.ts + request.dur as Trace.Types.Timing.Micro));\n    assert.isTrue(TimelineSelection.selectionIsEvent(selection));\n    assert.isFalse(TimelineSelection.selectionIsRange(selection));\n  });\n\n  it('can be created with a random trace event', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n    const firstLCPEvent = parsedTrace.PageLoadMetrics.allMarkerEvents.find(event => {\n      return event.name === 'largestContentfulPaint::Candidate';\n    });\n    assert.isOk(firstLCPEvent);\n    const selection = TimelineSelection.selectionFromEvent(firstLCPEvent);\n    assert.strictEqual(selection.event, firstLCPEvent);\n    const timings = TimelineSelection.rangeForSelection(selection);\n    assert.strictEqual(timings.min, Trace.Helpers.Timing.eventTimingsMicroSeconds(firstLCPEvent).startTime);\n    assert.strictEqual(timings.max, Trace.Helpers.Timing.eventTimingsMicroSeconds(firstLCPEvent).endTime);\n    assert.isTrue(TimelineSelection.selectionIsEvent(selection));\n    assert.isFalse(TimelineSelection.selectionIsRange(selection));\n  });\n\n  it('can be created with a range', function() {\n    const selection = TimelineSelection.selectionFromRangeMicroSeconds(microseconds(0), microseconds(10));\n    assert.deepEqual(selection.bounds, {\n      min: 0,\n      max: 10,\n      range: 10,\n    });\n    assert.isTrue(TimelineSelection.selectionIsRange(selection));\n    assert.isFalse(TimelineSelection.selectionIsEvent(selection));\n  });\n\n  it('can be created with a millisecond range', async () => {\n    const selection = TimelineSelection.selectionFromRangeMilliSeconds(milliseconds(1), milliseconds(10));\n    assert.deepEqual(selection.bounds, {\n      min: 1_000,\n      max: 10_000,\n      range: 9_000,\n    });\n    assert.isTrue(TimelineSelection.selectionIsRange(selection));\n    assert.isFalse(TimelineSelection.selectionIsEvent(selection));\n  });\n\n  it('knows if two event selections are equal if they have the same event', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n    const firstLCPEvent = parsedTrace.PageLoadMetrics.allMarkerEvents.find(event => {\n      return event.name === 'largestContentfulPaint::Candidate';\n    });\n    assert.isOk(firstLCPEvent);\n    const selection1 = TimelineSelection.selectionFromEvent(firstLCPEvent);\n    const selection2 = TimelineSelection.selectionFromEvent(firstLCPEvent);\n    assert.isTrue(TimelineSelection.selectionsEqual(selection1, selection2));\n\n    const networkEvent = parsedTrace.NetworkRequests.byTime.at(0);\n    assert.isOk(networkEvent);\n    const selection3 = TimelineSelection.selectionFromEvent(networkEvent);\n    assert.isFalse(TimelineSelection.selectionsEqual(selection1, selection3));\n  });\n\n  it('knows if two range selections are equal if they have the same range', async () => {\n    const selection1 = TimelineSelection.selectionFromRangeMicroSeconds(microseconds(0), microseconds(10));\n    const selection2 = TimelineSelection.selectionFromRangeMicroSeconds(microseconds(0), microseconds(10));\n    const selection3 = TimelineSelection.selectionFromRangeMicroSeconds(microseconds(20), microseconds(40));\n    assert.isTrue(TimelineSelection.selectionsEqual(selection1, selection2));\n    assert.isFalse(TimelineSelection.selectionsEqual(selection1, selection3));\n  });\n\n  it('knows selections of different types are not equal', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n    const firstLCPEvent = parsedTrace.PageLoadMetrics.allMarkerEvents.find(event => {\n      return event.name === 'largestContentfulPaint::Candidate';\n    });\n    assert.isOk(firstLCPEvent);\n    const selection1 = TimelineSelection.selectionFromEvent(firstLCPEvent);\n    const selection2 = TimelineSelection.selectionFromRangeMicroSeconds(microseconds(0), microseconds(10));\n    assert.isFalse(TimelineSelection.selectionsEqual(selection1, selection2));\n  });\n});\n"]}