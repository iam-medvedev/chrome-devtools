{"version":3,"file":"CountersGraph.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/CountersGraph.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Trace from '../../models/trace/trace.js';\nimport {raf, renderElementIntoDOM} from '../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {getMainThread} from '../../testing/TraceHelpers.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\n\nimport * as Timeline from './timeline.js';\n\nclass FakeTimelineModeViewDelegate implements Timeline.TimelinePanel.TimelineModeViewDelegate {\n  element = document.createElement('div');\n  select(_selection: Timeline.TimelineSelection.TimelineSelection|null): void {\n  }\n  set3PCheckboxDisabled(_disabled: boolean): void {\n  }\n  selectEntryAtTime(_events: Trace.Types.Events.Event[]|null, _time: number): void {\n  }\n  highlightEvent(_event: Trace.Types.Events.Event|null): void {\n  }\n}\n\nasync function renderCountersGraphForMainThread(context: Mocha.Context): Promise<{\n  countersGraph: Timeline.CountersGraph.CountersGraph,\n  parsedTrace: Trace.TraceModel.ParsedTrace,\n}> {\n  const timelineModeViewDelegate = new FakeTimelineModeViewDelegate();\n  const parsedTrace = await TraceLoader.traceEngine(context, 'web-dev-with-commit.json.gz');\n  const countersGraph = new Timeline.CountersGraph.CountersGraph(timelineModeViewDelegate);\n  renderElementIntoDOM(countersGraph);\n\n  const mainThread = getMainThread(parsedTrace.data.Renderer);\n  countersGraph.setModel(parsedTrace, mainThread.entries);\n  await raf();\n  return {countersGraph, parsedTrace};\n}\n\ndescribeWithEnvironment('CountersGraph', () => {\n  it('shows the counters and the ranges in the toolbar', async function() {\n    const {countersGraph} = await renderCountersGraphForMainThread(this);\n    const checkboxes = countersGraph.element.querySelectorAll('devtools-checkbox');\n    const userVisibleLabels = Array.from(checkboxes, checkbox => checkbox.getLabelText());\n    assert.deepEqual(userVisibleLabels, [\n      'JS heap [1.5 MB – 1.5 MB]',\n      'Documents [4 – 4]',\n      'Nodes [54 – 54]',\n      'Listeners [8 – 8]',\n      'GPU memory',\n    ]);\n\n    const ariaLabels = Array.from(checkboxes, checkbox => checkbox.getAttribute('aria-label'));\n    assert.deepEqual(ariaLabels, [\n      'JS heap [1.5 MB – 1.5 MB]',\n      'Documents [4 – 4]',\n      'Nodes [54 – 54]',\n      'Listeners [8 – 8]',\n      'GPU memory',\n    ]);\n  });\n\n  it('clears the ranges when the counter graph is reset', async function() {\n    const {countersGraph, parsedTrace} = await renderCountersGraphForMainThread(this);\n    const checkboxes = countersGraph.element.querySelectorAll('devtools-checkbox');\n    // Setting the model to have an empty set of events is enough to reset the existing view\n    countersGraph.setModel(parsedTrace, []);\n    await raf();\n    const userVisibleLabels = Array.from(checkboxes, checkbox => checkbox.getLabelText());\n\n    // No ranges after the label\n    assert.deepEqual(userVisibleLabels, [\n      'JS heap',\n      'Documents',\n      'Nodes',\n      'Listeners',\n      'GPU memory',\n    ]);\n  });\n});\n"]}