{"version":3,"file":"RecordingMetadata.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/RecordingMetadata.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C,OAAO,KAAK,cAAc,MAAM,qCAAqC,CAAC;AACtE,OAAO,KAAK,KAAK,MAAM,6BAA6B,CAAC;AAOrD;;GAEG;AACH,MAAM,UAAU,aAAa;IAC3B,OAAO;QACL,UAAU,4DAAyC;KACpD,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAC,qBAAyC,EAAE;IACxE,IAAI,CAAC;QACH,OAAO,MAAM,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;IAC1D,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC;AAED,KAAK,UAAU,sBAAsB,CAAC,EAAC,kBAAkB,EAAE,aAAa,KAAwB,EAAE;IAEhG,MAAM,eAAe,GAAG,cAAc,CAAC,eAAe,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;IACrF,IAAI,mBAAmB,CAAC;IACxB,IAAI,eAAe,EAAE,IAAI,EAAE,KAAK,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QAC3E,mBAAmB,GAAG,eAAe,CAAC,MAAM,EAAE,EAAE,KAAK,IAAI,SAAS,CAAC;IACrE,CAAC;SAAM,IAAI,eAAe,EAAE,IAAI,EAAE,KAAK,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;QACtF,mBAAmB,GAAG,YAAY,CAAC;IACrC,CAAC;IAED,MAAM,aAAa,GAAG,GAAG,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,CAAC,iBAAiB,EAAE,CAAC;IACnG,MAAM,iBAAiB,GAAG,GAAG,CAAC,cAAc,CAAC,yBAAyB,CAAC,QAAQ,EAAE,CAAC,YAAY,EAAE,CAAC,CAAC;QAC9F,GAAG,CAAC,cAAc,CAAC,yBAAyB,CAAC,QAAQ,EAAE,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAC7E,SAAS,CAAC;IAEd,IAAI,2BAA2B,CAAC;IAChC,IAAI,YAAY,CAAC;IACjB,IAAI,iBAAiB,EAAE,CAAC;QACtB,2BAA2B,GAAG;YAC5B,QAAQ,EAAE,iBAAiB,CAAC,QAAQ;YACpC,MAAM,EAAE,iBAAiB,CAAC,MAAM;YAChC,OAAO,EAAE,iBAAiB,CAAC,OAAO;YAClC,UAAU,EAAE,iBAAiB,CAAC,UAAU;YACxC,iBAAiB,EAAE,iBAAiB,CAAC,iBAAiB;YACtD,gBAAgB,EAAE,iBAAiB,CAAC,gBAAgB;YACpD,aAAa,EAAE,iBAAiB,CAAC,aAAa;SAC/C,CAAC;QACF,YAAY,GAAG,OAAO,iBAAiB,CAAC,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC;IACrH,CAAC;IAED,OAAO;QACL,MAAM,EAAE,UAAU;QAClB,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,kBAAkB,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS,EAAG,qBAAqB;QACzG,mBAAmB;QACnB,aAAa,EAAE,aAAa,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS;QAC9D,iBAAiB,EAAE,YAAY;QAC/B,2BAA2B;QAC3B,UAAU,8DAA0C;QACpD,aAAa,EAAE,aAAa,IAAI,SAAS;QACzC,OAAO,EAAE,MAAM,CAAC,gBAAgB;KACjC,CAAC;AACJ,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as CrUXManager from '../../models/crux-manager/crux-manager.js';\nimport * as EmulationModel from '../../models/emulation/emulation.js';\nimport * as Trace from '../../models/trace/trace.js';\n\nexport interface DataFromController {\n  recordingStartTime?: number;\n  cruxFieldData?: CrUXManager.PageResult[]|null;\n}\n\n/**\n * We do not track any custom metadata for CPU Profiles.\n */\nexport function forCPUProfile(): Trace.Types.File.MetaData {\n  return {\n    dataOrigin: Trace.Types.File.DataOrigin.CPU_PROFILE,\n  };\n}\n\n/**\n * Calculates and returns the Metadata for the last trace recording.\n * Wrapped in a try/catch because if anything goes wrong, we don't want to\n * break DevTools; we would rather just store no metadata.\n */\nexport async function forTrace(dataFromController: DataFromController = {}): Promise<Trace.Types.File.MetaData> {\n  try {\n    return await innerForTraceCalculate(dataFromController);\n  } catch {\n    return {};\n  }\n}\n\nasync function innerForTraceCalculate({recordingStartTime, cruxFieldData}: DataFromController = {}):\n    Promise<Trace.Types.File.MetaData> {\n  const deviceModeModel = EmulationModel.DeviceModeModel.DeviceModeModel.tryInstance();\n  let emulatedDeviceTitle;\n  if (deviceModeModel?.type() === EmulationModel.DeviceModeModel.Type.Device) {\n    emulatedDeviceTitle = deviceModeModel.device()?.title ?? undefined;\n  } else if (deviceModeModel?.type() === EmulationModel.DeviceModeModel.Type.Responsive) {\n    emulatedDeviceTitle = 'Responsive';\n  }\n\n  const cpuThrottling = SDK.CPUThrottlingManager.CPUThrottlingManager.instance().cpuThrottlingRate();\n  const networkConditions = SDK.NetworkManager.MultitargetNetworkManager.instance().isThrottling() ?\n      SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions() :\n      undefined;\n\n  let networkThrottlingConditions;\n  let networkTitle;\n  if (networkConditions) {\n    networkThrottlingConditions = {\n      download: networkConditions.download,\n      upload: networkConditions.upload,\n      latency: networkConditions.latency,\n      packetLoss: networkConditions.packetLoss,\n      packetQueueLength: networkConditions.packetQueueLength,\n      packetReordering: networkConditions.packetReordering,\n      targetLatency: networkConditions.targetLatency,\n    };\n    networkTitle = typeof networkConditions.title === 'function' ? networkConditions.title() : networkConditions.title;\n  }\n\n  return {\n    source: 'DevTools',\n    startTime: recordingStartTime ? new Date(recordingStartTime).toJSON() : undefined,  // ISO-8601 timestamp\n    emulatedDeviceTitle,\n    cpuThrottling: cpuThrottling !== 1 ? cpuThrottling : undefined,\n    networkThrottling: networkTitle,\n    networkThrottlingConditions,\n    dataOrigin: Trace.Types.File.DataOrigin.TRACE_EVENTS,\n    cruxFieldData: cruxFieldData ?? undefined,\n    hostDPR: window.devicePixelRatio,\n  };\n}\n"]}