{"version":3,"file":"TimelineLoader.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/TimelineLoader.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Trace from '../../models/trace/trace.js';\n\nimport type {Client} from './TimelineController.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Loader of the Performance panel\n   *@example {Unknown JSON format} PH1\n   */\n  malformedTimelineDataS: 'Malformed timeline data: {PH1}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineLoader.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * This class handles loading traces from file and URL, and from the Lighthouse panel\n * It also handles loading cpuprofiles from file, url and console.profileEnd()\n *\n * Meanwhile, the normal trace recording flow bypasses TimelineLoader entirely,\n * as it's handled from TracingManager => TimelineController.\n */\nexport class TimelineLoader implements Common.StringOutputStream.OutputStream {\n  private client: Client|null;\n  private canceledCallback: (() => void)|null;\n  private buffer: string;\n  private firstRawChunk: boolean;\n  private totalSize!: number;\n  private filter: Trace.Extras.TraceFilter.TraceFilter|null;\n  #traceIsCPUProfile: boolean;\n  #collectedEvents: Trace.Types.Events.Event[] = [];\n  #metadata: Trace.Types.File.MetaData|null;\n\n  #traceFinalizedCallbackForTest?: () => void;\n  #traceFinalizedPromiseForTest: Promise<void>;\n\n  constructor(client: Client) {\n    this.client = client;\n    this.canceledCallback = null;\n    this.buffer = '';\n    this.firstRawChunk = true;\n    this.filter = null;\n    this.#traceIsCPUProfile = false;\n    this.#metadata = null;\n\n    this.#traceFinalizedPromiseForTest = new Promise<void>(resolve => {\n      this.#traceFinalizedCallbackForTest = resolve;\n    });\n  }\n\n  static async loadFromFile(file: File, client: Client): Promise<TimelineLoader> {\n    const loader = new TimelineLoader(client);\n    const fileReader = new Bindings.FileUtils.ChunkedFileReader(file);\n    loader.canceledCallback = fileReader.cancel.bind(fileReader);\n    loader.totalSize = file.size;\n    // We'll resolve and return the loader instance before finalizing the trace.\n    setTimeout(async () => {\n      const success = await fileReader.read(loader);\n      if (!success && fileReader.error()) {\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        loader.reportErrorAndCancelLoading((fileReader.error() as any).message);\n      }\n    });\n    return loader;\n  }\n\n  static loadFromEvents(events: Trace.Types.Events.Event[], client: Client): TimelineLoader {\n    const loader = new TimelineLoader(client);\n    window.setTimeout(async () => {\n      void loader.addEvents(events);\n    });\n    return loader;\n  }\n\n  static loadFromCpuProfile(profile: Protocol.Profiler.Profile, client: Client): TimelineLoader {\n    const loader = new TimelineLoader(client);\n    loader.#traceIsCPUProfile = true;\n\n    try {\n      const contents = Trace.Helpers.SamplesIntegrator.SamplesIntegrator.createFakeTraceFromCpuProfile(\n          profile, Trace.Types.Events.ThreadID(1));\n\n      window.setTimeout(async () => {\n        void loader.addEvents(contents.traceEvents);\n      });\n    } catch (e) {\n      console.error(e.stack);\n    }\n    return loader;\n  }\n\n  static async loadFromURL(url: Platform.DevToolsPath.UrlString, client: Client): Promise<TimelineLoader> {\n    const loader = new TimelineLoader(client);\n    const stream = new Common.StringOutputStream.StringOutputStream();\n    client.loadingStarted();\n\n    const allowRemoteFilePaths =\n        Common.Settings.Settings.instance().moduleSetting('network.enable-remote-file-loading').get();\n    Host.ResourceLoader.loadAsStream(url, null, stream, finishedCallback, allowRemoteFilePaths);\n\n    async function finishedCallback(\n        success: boolean, _headers: {[x: string]: string},\n        errorDescription: Host.ResourceLoader.LoadErrorDescription): Promise<void> {\n      if (!success) {\n        return loader.reportErrorAndCancelLoading(errorDescription.message);\n      }\n      try {\n        const txt = stream.data();\n        const trace = JSON.parse(txt);\n        loader.#processParsedFile(trace);\n        await loader.close();\n      } catch (e: unknown) {\n        await loader.close();\n        const message = e instanceof Error ? e.message : '';\n        return loader.reportErrorAndCancelLoading(i18nString(UIStrings.malformedTimelineDataS, {PH1: message}));\n      }\n    }\n\n    return loader;\n  }\n\n  #processParsedFile(trace: ParsedJSONFile): void {\n    if ('traceEvents' in trace || Array.isArray(trace)) {\n      // We know that this is NOT a raw CPU Profile because it has traceEvents\n      // (either at the top level, or nested under the traceEvents key)\n      const items = Array.isArray(trace) ? trace : trace.traceEvents;\n\n      this.#collectEvents(items);\n    } else if (trace.nodes) {\n      // We know it's a raw Protocol CPU Profile.\n      this.#parseCPUProfileFormatFromFile(trace);\n      this.#traceIsCPUProfile = true;\n    } else {\n      this.reportErrorAndCancelLoading(i18nString(UIStrings.malformedTimelineDataS));\n      return;\n    }\n\n    if ('metadata' in trace) {\n      this.#metadata = trace.metadata;\n\n      // Older traces set these fields even when throttling is not active, while newer traces do not.\n      // Clear them out on load to simplify usage.\n      if (this.#metadata.cpuThrottling === 1) {\n        this.#metadata.cpuThrottling = undefined;\n      }\n      // This string is translated, so this only covers the english case and the current locale.\n      // Due to this, older traces in other locales will end up displaying \"No throttling\" in the trace history selector.\n      const noThrottlingString = typeof SDK.NetworkManager.NoThrottlingConditions.title === 'string' ?\n          SDK.NetworkManager.NoThrottlingConditions.title :\n          SDK.NetworkManager.NoThrottlingConditions.title();\n      if (this.#metadata.networkThrottling === 'No throttling' ||\n          this.#metadata.networkThrottling === noThrottlingString) {\n        this.#metadata.networkThrottling = undefined;\n      }\n    }\n  }\n\n  async addEvents(events: readonly Trace.Types.Events.Event[]): Promise<void> {\n    this.client?.loadingStarted();\n    /**\n     * See the `eventsPerChunk` comment in `models/trace/types/Configuration.ts`.\n     *\n     * This value is different though. Why? `The addEvents()` work below is different\n     * (and much faster!) than running `handleEvent()` on all handlers.\n     */\n    const eventsPerChunk = 150_000;\n    for (let i = 0; i < events.length; i += eventsPerChunk) {\n      const chunk = events.slice(i, i + eventsPerChunk);\n      this.#collectEvents(chunk as unknown as Trace.Types.Events.Event[]);\n      this.client?.loadingProgress((i + chunk.length) / events.length);\n      await new Promise(r => window.setTimeout(r, 0));  // Yield event loop to paint.\n    }\n    void this.close();\n  }\n\n  async cancel(): Promise<void> {\n    if (this.client) {\n      await this.client.loadingComplete(\n          /* collectedEvents */[], /* exclusiveFilter= */ null, /* metadata= */ null);\n      this.client = null;\n    }\n    if (this.canceledCallback) {\n      this.canceledCallback();\n    }\n  }\n\n  /**\n   * As TimelineLoader implements `Common.StringOutputStream.OutputStream`, `write()` is called when a\n   * Common.StringOutputStream.StringOutputStream instance has decoded a chunk. This path is only used\n   * by `loadFromFile()`; it's NOT used by `loadFromEvents` or `loadFromURL`.\n   */\n  async write(chunk: string, endOfFile: boolean): Promise<void> {\n    if (!this.client) {\n      return await Promise.resolve();\n    }\n    this.buffer += chunk;\n    if (this.firstRawChunk) {\n      this.client.loadingStarted();\n      // Ensure we paint the loading dialog before continuing\n      await new Promise(resolve => requestAnimationFrame(() => requestAnimationFrame(resolve)));\n      this.firstRawChunk = false;\n    } else {\n      let progress = undefined;\n      progress = this.buffer.length / this.totalSize;\n      // For compressed traces, we can't provide a definite progress percentage. So, just keep it moving.\n      // For other traces, calculate a loaded part.\n      progress = progress > 1 ? progress - Math.floor(progress) : progress;\n      this.client.loadingProgress(progress);\n    }\n\n    if (endOfFile) {\n      let trace;\n      try {\n        trace = JSON.parse(this.buffer) as ParsedJSONFile;\n        this.#processParsedFile(trace);\n      } catch (e) {\n        this.reportErrorAndCancelLoading(i18nString(UIStrings.malformedTimelineDataS, {PH1: e.toString()}));\n      }\n      return;\n    }\n  }\n\n  private reportErrorAndCancelLoading(message?: string): void {\n    if (message) {\n      Common.Console.Console.instance().error(message);\n    }\n    void this.cancel();\n  }\n\n  async close(): Promise<void> {\n    if (!this.client) {\n      return;\n    }\n    this.client.processingStarted();\n    await this.finalizeTrace();\n  }\n\n  private async finalizeTrace(): Promise<void> {\n    if (!this.#metadata && this.#traceIsCPUProfile) {\n      this.#metadata = {dataOrigin: Trace.Types.File.DataOrigin.CPU_PROFILE};\n    }\n\n    await (this.client as Client).loadingComplete(this.#collectedEvents, this.filter, this.#metadata);\n    this.#traceFinalizedCallbackForTest?.();\n  }\n\n  traceFinalizedForTest(): Promise<void> {\n    return this.#traceFinalizedPromiseForTest;\n  }\n\n  #parseCPUProfileFormatFromFile(parsedTrace: Protocol.Profiler.Profile): void {\n    const traceFile = Trace.Helpers.SamplesIntegrator.SamplesIntegrator.createFakeTraceFromCpuProfile(\n        parsedTrace, Trace.Types.Events.ThreadID(1));\n\n    this.#collectEvents(traceFile.traceEvents);\n  }\n\n  #collectEvents(events: readonly Trace.Types.Events.Event[]): void {\n    this.#collectedEvents = this.#collectedEvents.concat(events);\n  }\n}\n\n/**\n * Used when we parse the input, but do not yet know if it is a raw CPU Profile or a Trace\n **/\ntype ParsedJSONFile = Trace.Types.File.Contents|Protocol.Profiler.Profile;\n"]}