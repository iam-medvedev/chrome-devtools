{"version":3,"file":"TimingsTrackAppender.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/track_appenders/TimingsTrackAppender.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../../models/trace/trace.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as PerfUI from '../../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as ThemeSupport from '../../../ui/legacy/theme_support/theme_support.js';\nimport * as Timeline from '../timeline.js';\n\nfunction initTrackAppender(\n    flameChartData: PerfUI.FlameChart.FlameChartTimelineData,\n    parsedTrace: Trace.Handlers.Types.ParsedTrace,\n    entryData: Trace.Types.Events.Event[],\n    entryTypeByLevel: Timeline.TimelineFlameChartDataProvider.EntryType[],\n    ): Timeline.TimingsTrackAppender.TimingsTrackAppender {\n  const entityMapper = new Timeline.Utils.EntityMapper.EntityMapper(parsedTrace);\n  const compatibilityTracksAppender = new Timeline.CompatibilityTracksAppender.CompatibilityTracksAppender(\n      flameChartData, parsedTrace, entryData, entryTypeByLevel, entityMapper);\n  return compatibilityTracksAppender.timingsTrackAppender();\n}\n\ndescribeWithEnvironment('TimingTrackAppender', function() {\n  let parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  let timingsTrackAppender: Timeline.TimingsTrackAppender.TimingsTrackAppender;\n  let entryData: Trace.Types.Events.Event[] = [];\n  let flameChartData = PerfUI.FlameChart.FlameChartTimelineData.createEmpty();\n  let entryTypeByLevel: Timeline.TimelineFlameChartDataProvider.EntryType[] = [];\n  beforeEach(async function() {\n    ({parsedTrace} = await TraceLoader.traceEngine(this, 'timings-track.json.gz'));\n    timingsTrackAppender = initTrackAppender(flameChartData, parsedTrace, entryData, entryTypeByLevel);\n    timingsTrackAppender.appendTrackAtLevel(0);\n  });\n  afterEach(() => {\n    entryData = [];\n    flameChartData = PerfUI.FlameChart.FlameChartTimelineData.createEmpty();\n    entryTypeByLevel = [];\n  });\n\n  function getMockInfo(event?: Trace.Types.Events.Event) {\n    const defaultInfo: Timeline.CompatibilityTracksAppender.PopoverInfo = {\n      title: event ? timingsTrackAppender.titleForEvent(event) : 'title',\n      formattedTime: event ? Timeline.AppenderUtils.getDurationString(event.dur) : 'time',\n      warningElements: [],\n      additionalElements: [],\n      url: null,\n    };\n    return defaultInfo;\n  }\n\n  describe('appendTrackAtLevel', () => {\n    it('marks all levels used by the track with the `TrackAppender` type', () => {\n      // 7 levels should be taken:\n      //   * 1 performance.marks.\n      //   * 3 used by performance.measures.\n      //   * 1 used by console timestamps.\n      //   * 1 used by console.time calls.\n      const levelCount = 6;\n      assert.strictEqual(entryTypeByLevel.length, levelCount);\n      const allEntriesAreTrackAppender =\n          entryTypeByLevel.every(type => type === Timeline.TimelineFlameChartDataProvider.EntryType.TRACK_APPENDER);\n      assert.isTrue(allEntriesAreTrackAppender);\n    });\n    it('adds start times correctly', () => {\n      const performanceMarks = parsedTrace.UserTimings.performanceMarks;\n      const performanceMeasures = parsedTrace.UserTimings.performanceMeasures;\n      const consoleTimings = parsedTrace.UserTimings.consoleTimings;\n      const consoleTimestamps = parsedTrace.UserTimings.timestampEvents;\n      for (const event of [...performanceMarks, ...performanceMeasures, ...consoleTimings, ...consoleTimestamps]) {\n        const markerIndex = entryData.indexOf(event);\n        assert.exists(markerIndex);\n        assert.strictEqual(flameChartData.entryStartTimes[markerIndex], Trace.Helpers.Timing.microToMilli(event.ts));\n      }\n    });\n    it('adds total times correctly', () => {\n      const performanceMarks = parsedTrace.UserTimings.performanceMarks;\n      const performanceMeasures = parsedTrace.UserTimings.performanceMeasures;\n      const consoleTimings = parsedTrace.UserTimings.consoleTimings;\n      const consoleTimestamps = parsedTrace.UserTimings.timestampEvents;\n      for (const event of [...performanceMarks, ...performanceMeasures, ...consoleTimings, ...consoleTimestamps]) {\n        const markerIndex = entryData.indexOf(event);\n        assert.exists(markerIndex);\n        if (Trace.Types.Events.isMarkerEvent(event)) {\n          assert.isNaN(flameChartData.entryTotalTimes[markerIndex]);\n          continue;\n        }\n        const expectedTotalTimeForEvent = event.dur ?\n            Trace.Helpers.Timing.microToMilli(event.dur) :\n            Timeline.TimelineFlameChartDataProvider.InstantEventVisibleDurationMs;\n        assert.strictEqual(flameChartData.entryTotalTimes[markerIndex], expectedTotalTimeForEvent);\n      }\n    });\n  });\n\n  describe('colorForEvent and titleForEvent', () => {\n    it('returns the correct color and title for page load markers', () => {\n      const traceMarkers = parsedTrace.PageLoadMetrics.allMarkerEvents;\n      const firstContentfulPaint = traceMarkers.find(marker => marker.name === 'firstContentfulPaint');\n      const markLoad = traceMarkers.find(marker => marker.name === 'MarkLoad');\n      const markDOMContent = traceMarkers.find(marker => marker.name === 'MarkDOMContent');\n      const firstPaint = traceMarkers.find(marker => marker.name === 'firstPaint');\n      const largestContentfulPaint = traceMarkers.find(marker => marker.name === 'largestContentfulPaint::Candidate');\n\n      if (firstContentfulPaint === undefined || markLoad === undefined || markDOMContent === undefined ||\n          firstPaint === undefined || largestContentfulPaint === undefined) {\n        throw new Error('A metric was not found');\n      }\n\n      assert.strictEqual(timingsTrackAppender.colorForEvent(firstContentfulPaint), '#1A6937');\n      assert.strictEqual(\n          timingsTrackAppender.titleForEvent(firstContentfulPaint),\n          Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FCP);\n\n      assert.strictEqual(timingsTrackAppender.colorForEvent(markLoad), '#B31412');\n      assert.strictEqual(\n          timingsTrackAppender.titleForEvent(markLoad), Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.L);\n\n      assert.strictEqual(timingsTrackAppender.colorForEvent(markDOMContent), '#0867CB');\n      assert.strictEqual(\n          timingsTrackAppender.titleForEvent(markDOMContent),\n          Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.DCL);\n\n      assert.strictEqual(timingsTrackAppender.colorForEvent(firstPaint), '#228847');\n      assert.strictEqual(\n          timingsTrackAppender.titleForEvent(firstPaint), Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FP);\n\n      assert.strictEqual(timingsTrackAppender.colorForEvent(largestContentfulPaint), '#1A3422');\n      assert.strictEqual(\n          timingsTrackAppender.titleForEvent(largestContentfulPaint),\n          Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP);\n    });\n\n    it('returns the correct title for performance measures', () => {\n      const performanceMeasures = parsedTrace.UserTimings.performanceMeasures;\n      for (const measure of performanceMeasures) {\n        assert.strictEqual(timingsTrackAppender.titleForEvent(measure), measure.name);\n      }\n    });\n\n    it('returns the correct title for console timings', () => {\n      const traceMarkers = parsedTrace.UserTimings.consoleTimings;\n      for (const mark of traceMarkers) {\n        assert.strictEqual(timingsTrackAppender.titleForEvent(mark), mark.name);\n      }\n    });\n\n    it('returns the correct title for performance marks', () => {\n      const traceMarkers = parsedTrace.UserTimings.performanceMarks;\n      for (const mark of traceMarkers) {\n        assert.strictEqual(timingsTrackAppender.titleForEvent(mark), `[mark]: ${mark.name}`);\n      }\n    });\n\n    it('returns the correct title for console timestamps', () => {\n      const traceMarkers = parsedTrace.UserTimings.timestampEvents;\n      for (const mark of traceMarkers) {\n        assert.strictEqual(timingsTrackAppender.titleForEvent(mark), `TimeStamp: ${mark.args.data?.name}`);\n      }\n    });\n  });\n\n  describe('popoverInfo', () => {\n    it('shows the time of the mark, not the duration, if the event is a performance mark', () => {\n      const firstMark = parsedTrace.UserTimings.performanceMarks[0];\n      const popoverInfo = getMockInfo(firstMark);\n      timingsTrackAppender.setPopoverInfo(firstMark, popoverInfo);\n      assert.deepInclude(popoverInfo, {\n        formattedTime: '1.12\\u00A0s',\n      });\n    });\n\n    it('shows the time of the mark for an LCP event', () => {\n      const largestContentfulPaint = parsedTrace.PageLoadMetrics.allMarkerEvents.find(\n          marker => marker.name === 'largestContentfulPaint::Candidate');\n      assert.exists(largestContentfulPaint);\n      const popoverInfo = getMockInfo(largestContentfulPaint);\n      timingsTrackAppender.setPopoverInfo(largestContentfulPaint, popoverInfo);\n      assert.deepInclude(popoverInfo, {\n        title: 'LCP',\n        formattedTime: '2.42\\u00A0s',\n      });\n    });\n\n    it('shows the time of the mark for an FCP event', () => {\n      const firstContentfulPaint =\n          parsedTrace.PageLoadMetrics.allMarkerEvents.find(marker => marker.name === 'firstContentfulPaint');\n      assert.exists(firstContentfulPaint);\n      const popoverInfo = getMockInfo(firstContentfulPaint);\n      timingsTrackAppender.setPopoverInfo(firstContentfulPaint, popoverInfo);\n      assert.deepInclude(popoverInfo, {\n        title: 'FCP',\n        formattedTime: '2.42\\u00A0s',\n      });\n    });\n\n    it('shows the time of the mark for a DCL event', () => {\n      const dclEvent = parsedTrace.PageLoadMetrics.allMarkerEvents.find(marker => marker.name === 'MarkDOMContent');\n      assert.exists(dclEvent);\n      const popoverInfo = getMockInfo(dclEvent);\n      timingsTrackAppender.setPopoverInfo(dclEvent, popoverInfo);\n      assert.deepInclude(popoverInfo, {\n        title: 'DCL',\n        formattedTime: '2.42\\u00A0s',\n      });\n    });\n\n    it('shows the time of a console.timestamp event in the hover info', () => {\n      const timestampEvent = parsedTrace.UserTimings.timestampEvents[0];\n      const popoverInfo = getMockInfo(timestampEvent);\n      timingsTrackAppender.setPopoverInfo(timestampEvent, popoverInfo);\n\n      assert.deepInclude(popoverInfo, {\n        title: 'TimeStamp: a timestamp',\n        formattedTime: '615.88\\u00A0ms',\n      });\n    });\n\n    it('returns the info for a performance.measure calls correctly', () => {\n      const performanceMeasure = parsedTrace.UserTimings.performanceMeasures[0];\n      const popoverInfo = getMockInfo(performanceMeasure);\n      timingsTrackAppender.setPopoverInfo(performanceMeasure, popoverInfo);\n      // The i18n encodes spaces using the u00A0 unicode character.\n      assert.strictEqual(popoverInfo.formattedTime, ('500.07\\u00A0ms'));\n    });\n\n    it('returns the info for a console.time calls correctly', () => {\n      const consoleTiming = parsedTrace.UserTimings.consoleTimings[0];\n      const popoverInfo = getMockInfo(consoleTiming);\n      timingsTrackAppender.setPopoverInfo(consoleTiming, popoverInfo);\n      // The i18n encodes spaces using the u00A0 unicode character.\n      assert.strictEqual(popoverInfo.formattedTime, ('1.60\\u00A0s'));\n    });\n  });\n\n  describe('extension markers', () => {\n    beforeEach(async function() {\n      entryData = [];\n      flameChartData = PerfUI.FlameChart.FlameChartTimelineData.createEmpty();\n      entryTypeByLevel = [];\n      ({parsedTrace} = await TraceLoader.traceEngine(this, 'extension-tracks-and-marks.json.gz'));\n      timingsTrackAppender = initTrackAppender(flameChartData, parsedTrace, entryData, entryTypeByLevel);\n      timingsTrackAppender.appendTrackAtLevel(0);\n      // Rather than use the real colours here and burden the test with having to\n      // inject loads of CSS, we fake out the colours. this is fine for our tests as\n      // the exact value of the colours is not important; we just make sure that it\n      // parses them out correctly. Each variable is given a different rgb() value to\n      // ensure we know the code is working and using the right one.\n      const styleElement = document.createElement('style');\n      styleElement.id = 'fake-perf-panel-colors';\n      styleElement.textContent = `\n        :root {\n          --ref-palette-blue70: rgb(4 4 4);\n          --ref-palette-error60: rgb(10 10 10);\n        }\n      `;\n      document.documentElement.appendChild(styleElement);\n      ThemeSupport.ThemeSupport.clearThemeCache();\n    });\n    afterEach(() => {\n      entryData = [];\n      flameChartData = PerfUI.FlameChart.FlameChartTimelineData.createEmpty();\n      entryTypeByLevel = [];\n      const styleElementToRemove = document.documentElement.querySelector('#fake-perf-panel-colors');\n      if (styleElementToRemove) {\n        document.documentElement.removeChild(styleElementToRemove);\n      }\n      ThemeSupport.ThemeSupport.clearThemeCache();\n    });\n\n    it('creates a TimelineFlameChartMarker for each extension marker event in a trace', () => {\n      const extensionMarkers = parsedTrace.ExtensionTraceData.extensionMarkers;\n      for (const traceMarker of extensionMarkers) {\n        const markerTimeMs = Trace.Helpers.Timing.microToMilli(traceMarker.ts);\n        const flameChartMarker =\n            flameChartData.markers.find(flameChartMarker => flameChartMarker.startTime() === markerTimeMs);\n        assert.exists(flameChartMarker);\n      }\n    });\n\n    it('returns the correct color and title for extension markers', function() {\n      const extensionMarkers = parsedTrace.ExtensionTraceData.extensionMarkers;\n      assert.lengthOf(extensionMarkers, 1);\n      for (const event of extensionMarkers) {\n        // tooltipText is supplied, so the title should be that.\n        assert.notStrictEqual(timingsTrackAppender.titleForEvent(event), event.name);\n        if (event.args.color === 'error') {\n          // \"error\" color category is mapped to --ref-palette-error50\n          // which is faked out to 10, 10, 10\n          assert.strictEqual(timingsTrackAppender.colorForEvent(event), 'rgb(10 10 10)');\n        } else {\n          // Unknown colors are mapped to \"primary\" by default, and\n          // \"primary\" color category is mapped to --ref-palette-blue70\n          // which is faked out to 4, 4, 4\n          assert.strictEqual(timingsTrackAppender.colorForEvent(event), 'rgb(4 4 4)');\n        }\n      }\n    });\n    it('sets a default value when a color is not set or is set an unknown value', function() {\n      const mockExtensionEntryNoColor = {\n        args: {\n          dataType: 'marker',\n        },\n        cat: 'devtools.extension',\n      } as unknown as Trace.Types.Events.Event;\n\n      const mockExtensionEntryUnknownColor = {\n        args: {\n          color: 'anUnknownColor',\n          dataType: 'marker',\n        },\n        cat: 'devtools.extension',\n      } as unknown as Trace.Types.Events.Event;\n      // \"primary\" color category is mapped to --ref-palette-blue70\n      // which is faked out to 4, 4, 4\n      assert.strictEqual(timingsTrackAppender.colorForEvent(mockExtensionEntryNoColor), 'rgb(4 4 4)');\n      assert.strictEqual(timingsTrackAppender.colorForEvent(mockExtensionEntryUnknownColor), 'rgb(4 4 4)');\n    });\n    it('returns the tool tip info for an entry correctly', function() {\n      const extensionMarker = parsedTrace.ExtensionTraceData.extensionMarkers.at(0);\n      assert.isOk(extensionMarker, 'did not find any extension markers');\n\n      const popoverInfo = getMockInfo(extensionMarker);\n      timingsTrackAppender.setPopoverInfo(extensionMarker, popoverInfo);\n      assert.strictEqual(popoverInfo.title, 'A mark');\n    });\n    describe('toggling', function() {\n      it('Does not append extension data when the configuration is set to disabled', async function() {\n        entryData = [];\n        flameChartData = PerfUI.FlameChart.FlameChartTimelineData.createEmpty();\n        entryTypeByLevel = [];\n        Timeline.TimelinePanel.TimelinePanel.extensionDataVisibilitySetting().set(false);\n        parsedTrace = (await TraceLoader.traceEngine(this, 'extension-tracks-and-marks.json.gz')).parsedTrace;\n        timingsTrackAppender = initTrackAppender(flameChartData, parsedTrace, entryData, entryTypeByLevel);\n        timingsTrackAppender.appendTrackAtLevel(0);\n\n        const extensionMarkers = parsedTrace.ExtensionTraceData.extensionMarkers;\n        for (const traceMarker of extensionMarkers) {\n          const markerTimeMs = Trace.Helpers.Timing.microToMilli(traceMarker.ts);\n          const flameChartMarker =\n              flameChartData.markers.find(flameChartMarker => flameChartMarker.startTime() === markerTimeMs);\n          assert.isUndefined(flameChartMarker);\n        }\n      });\n    });\n  });\n});\n"]}