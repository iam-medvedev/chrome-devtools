{"version":3,"file":"InsightAIContext.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/InsightAIContext.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../../models/trace/trace.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {getFirstOrError, getInsightOrError} from '../../../testing/InsightHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\n\nimport * as Utils from './utils.js';\n\ndescribeWithEnvironment('InsightAIContext', () => {\n  it('gets the title from the provided insight', async function() {\n    const {parsedTrace, insights} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n    assert.isOk(insights);\n    const firstNav = getFirstOrError(parsedTrace.Meta.navigationsByNavigationId.values());\n    const insight = getInsightOrError('LCPPhases', insights, firstNav);\n    const aiContext = new Utils.InsightAIContext.ActiveInsight(insight, parsedTrace);\n    assert.strictEqual(aiContext.title(), 'LCP by phase');\n  });\n});\n\ndescribeWithEnvironment('AIQueries', () => {\n  it('can query for network events relevant to the given insight', async function() {\n    const {parsedTrace, insights} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n    assert.isOk(insights);\n    const firstNav = getFirstOrError(parsedTrace.Meta.navigationsByNavigationId.values());\n    const insight = getInsightOrError('LCPPhases', insights, firstNav);\n\n    const requests = Utils.InsightAIContext.AIQueries.networkRequests(insight, parsedTrace);\n    const expected = [\n      'https://web.dev/', 'https://web.dev/css/next.css?v=013a61aa',\n      'https://web.dev/fonts/material-icons/regular.woff2', 'https://web.dev/fonts/google-sans/regular/latin.woff2',\n      'https://web.dev/fonts/google-sans/bold/latin.woff2',\n      'https://web-dev.imgix.net/image/jxu1OdD7LKOGIDU7jURMpSH2lyK2/zrBPJq27O4Hs8haszVnK.svg',\n      'https://web-dev.imgix.net/image/kheDArv5csY6rvQUJDbWRscckLr1/4i7JstVZvgTFk9dxCe4a.svg',\n      'https://web-dev.imgix.net/image/jL3OLOhcWUQDnR4XjewLBx4e3PC3/3164So5aDk7vKTkhx9Vm.png?auto=format&w=1140',\n      'https://web.dev/js/app.js?v=fedf5fbe', 'https://web.dev/js/home.js?v=73b0d143',\n      'https://web.dev/js/index-7e29abb6.js', 'https://web.dev/js/index-578d2db7.js',\n      'https://web.dev/js/index-f45448ab.js', 'https://web.dev/js/actions-f0eb5c8e.js'\n    ];\n    assert.deepEqual(requests.map(r => r.args.data.url), expected);\n  });\n\n  it('correctly calculates the bounds when there are multiple navigations', async function() {\n    const {parsedTrace, insights} = await TraceLoader.traceEngine(this, 'multiple-navigations-render-blocking.json.gz');\n    assert.isOk(insights);\n    const [firstNav, secondNav] = parsedTrace.Meta.mainFrameNavigations;\n    assert.isOk(firstNav);\n    assert.isOk(secondNav);\n    const lcpNav1 = getInsightOrError('LCPPhases', insights, firstNav);\n    const lcpNav2 = getInsightOrError('LCPPhases', insights, secondNav);\n\n    const requests1 = Utils.InsightAIContext.AIQueries.networkRequests(lcpNav1, parsedTrace);\n    const requests2 = Utils.InsightAIContext.AIQueries.networkRequests(lcpNav2, parsedTrace);\n\n    // Both navigations load the same page, so we expect the set of URLs to be the same.\n    const expected = ['http://localhost:8080/render-blocking', 'http://localhost:8080/render-blocking/script.js'];\n    assert.deepEqual(requests1.map(r => r.args.data.url), expected);\n    assert.deepEqual(requests2.map(r => r.args.data.url), expected);\n\n    // But we can check that the requests are not equal to each other,\n    // and that we got the right ones for each insight.\n    // For the first Insight requests, they all happen before the second navigation.\n    assert.isTrue(requests1.every(req => req.ts < secondNav.ts));\n    // For the second Insight requests, they all happen after second navigation\n    assert.isTrue(requests2.every(req => req.ts > secondNav.ts));\n  });\n\n  it('can query for main thread activity for an insight', async function() {\n    const {parsedTrace, insights} = await TraceLoader.traceEngine(this, 'lcp-discovery-delay.json.gz');\n    assert.isOk(insights);\n    const firstNav = getFirstOrError(parsedTrace.Meta.navigationsByNavigationId.values());\n    const insight = getInsightOrError('LCPPhases', insights, firstNav);\n    const activity = Utils.InsightAIContext.AIQueries.mainThreadActivity(insight, parsedTrace);\n    assert.instanceOf(activity, Utils.AICallTree.AICallTree);\n    // There are a few smaller tasks but for this test we want to make sure we\n    // found the long task of ~999ms.\n    const rootNode = activity.rootNode;\n    const children = Array.from(rootNode.children().values()).map(n => n.event);\n    const longTaskDuration = Trace.Types.Timing.Micro(999544);\n    assert.isTrue(children.some(event => event.dur === longTaskDuration));\n  });\n});\n"]}