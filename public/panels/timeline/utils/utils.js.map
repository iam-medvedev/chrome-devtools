{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/timeline/utils/AICallTree.ts", "../../../../../../../front_end/panels/timeline/utils/EntryName.ts", "../../../../../../../front_end/panels/timeline/utils/EntryStyles.ts", "../../../../../../../front_end/panels/timeline/utils/SourceMapsResolver.ts", "../../../../../../../front_end/panels/timeline/utils/AIContext.ts", "../../../../../../../front_end/panels/timeline/utils/EntityMapper.ts", "../../../../../../../front_end/panels/timeline/utils/EntryNodes.ts", "../../../../../../../front_end/panels/timeline/utils/EventsSerializer.ts", "../../../../../../../front_end/panels/timeline/utils/Helpers.ts", "../../../../../../../front_end/panels/timeline/utils/IgnoreList.ts", "../../../../../../../front_end/panels/timeline/utils/ImageCache.ts", "../../../../../../../front_end/panels/timeline/utils/InsightAIContext.ts", "../../../../../../../front_end/panels/timeline/utils/Treemap.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Root from '../../../core/root/root.js';\nimport * as Trace from '../../../models/trace/trace.js';\n\nimport {nameForEntry} from './EntryName.js';\nimport {visibleTypes} from './EntryStyles.js';\nimport {SourceMapsResolver} from './SourceMapsResolver.js';\n\n/** Iterates from a node down through its descendents. If the callback returns true, the loop stops. */\nfunction depthFirstWalk(\n    nodes: MapIterator<Trace.Extras.TraceTree.Node>, callback: (arg0: Trace.Extras.TraceTree.Node) => void|true): void {\n  for (const node of nodes) {\n    if (callback?.(node)) {\n      break;\n    }\n    depthFirstWalk(node.children().values(), callback);  // Go deeper.\n  }\n}\n\nexport interface FromTimeOnThreadOptions {\n  thread: {pid: Trace.Types.Events.ProcessID, tid: Trace.Types.Events.ThreadID};\n  parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  bounds: Trace.Types.Timing.TraceWindowMicro;\n}\n\nexport class AICallTree {\n  constructor(\n      public selectedNode: Trace.Extras.TraceTree.Node|null,\n      public rootNode: Trace.Extras.TraceTree.TopDownRootNode,\n      // TODO: see if we can avoid passing around this entire thing.\n      public parsedTrace: Trace.Handlers.Types.ParsedTrace,\n  ) {\n  }\n\n  static findEventsForThread({thread, parsedTrace, bounds}: FromTimeOnThreadOptions): Trace.Types.Events.Event[]|null {\n    const threadEvents = parsedTrace.Renderer.processes.get(thread.pid)?.threads.get(thread.tid)?.entries;\n    if (!threadEvents) {\n      return null;\n    }\n\n    return threadEvents.filter(e => Trace.Helpers.Timing.eventIsInBounds(e, bounds));\n  }\n\n  static findMainThreadTasks({thread, parsedTrace, bounds}: FromTimeOnThreadOptions):\n      Trace.Types.Events.RunTask[]|null {\n    const threadEvents = parsedTrace.Renderer.processes.get(thread.pid)?.threads.get(thread.tid)?.entries;\n    if (!threadEvents) {\n      return null;\n    }\n\n    return threadEvents.filter(Trace.Types.Events.isRunTask)\n        .filter(e => Trace.Helpers.Timing.eventIsInBounds(e, bounds));\n  }\n\n  /**\n   * Builds a call tree representing all calls within the given timeframe for\n   * the provided thread.\n   * Events that are less than 0.05% of the range duration are removed.\n   */\n  static fromTimeOnThread({thread, parsedTrace, bounds}: FromTimeOnThreadOptions): AICallTree|null {\n    const overlappingEvents = this.findEventsForThread({thread, parsedTrace, bounds});\n    if (!overlappingEvents) {\n      return null;\n    }\n\n    const visibleEventsFilter = new Trace.Extras.TraceFilter.VisibleEventsFilter(visibleTypes());\n\n    // By default, we remove events whose duration is less than 0.5% of the total\n    // range. So if the range is 10s, an event must be 0.05s+ to be included.\n    // This does risk eliminating useful data when we pass it to the LLM, but\n    // we are trying to balance context window sizes and not using it up too\n    // eagerly. We will experiment with this filter and likely make it smarter\n    // or tweak it based on range size rather than using a blanket value. Or we\n    // could consider limiting the depth when we serialize. Or some\n    // combination!\n    const minDuration = Trace.Types.Timing.Micro(bounds.range * 0.005);\n    const minDurationFilter = new MinDurationFilter(minDuration);\n    const compileCodeFilter = new ExcludeCompileCodeFilter();\n    // Build a tree bounded by the selected event's timestamps, and our other filters applied\n    const rootNode = new Trace.Extras.TraceTree.TopDownRootNode(overlappingEvents, {\n      filters: [minDurationFilter, compileCodeFilter, visibleEventsFilter],\n      startTime: Trace.Helpers.Timing.microToMilli(bounds.min),\n      endTime: Trace.Helpers.Timing.microToMilli(bounds.max),\n      doNotAggregate: true,\n      includeInstantEvents: true,\n    });\n\n    const instance = new AICallTree(null /* no selected node*/, rootNode, parsedTrace);\n    return instance;\n  }\n  /**\n   * Attempts to build an AICallTree from a given selected event. It also\n   * validates that this event is one that we support being used with the AI\n   * Assistance panel, which [as of January 2025] means:\n   * 1. It is on the main thread.\n   * 2. It exists in either the Renderer or Sample handler's entryToNode map.\n   * This filters out other events we make such as SyntheticLayoutShifts which are not valid\n   * If the event is not valid, or there is an unexpected error building the tree, `null` is returned.\n   */\n  static fromEvent(selectedEvent: Trace.Types.Events.Event, parsedTrace: Trace.Handlers.Types.ParsedTrace): AICallTree\n      |null {\n    // Special case: performance.mark events are shown on the main thread\n    // technically, but because they are instant events they are shown with a\n    // tiny duration. Because they are instant, they also don't have any\n    // children or a call tree, and so if the user has selected a performance\n    // mark in the timings track, we do not want to attempt to build a call\n    // tree. Context: crbug.com/418223469\n    // Note that we do not have to repeat this check for performance.measure\n    // events because those are synthetic, and therefore the check\n    // further down about if this event is known to the RenderHandler\n    // deals with this.\n    if (Trace.Types.Events.isPerformanceMark(selectedEvent)) {\n      return null;\n    }\n\n    // First: check that the selected event is on the thread we have identified as the main thread.\n    const threads = Trace.Handlers.Threads.threadsInTrace(parsedTrace);\n    const thread = threads.find(t => t.pid === selectedEvent.pid && t.tid === selectedEvent.tid);\n    if (!thread) {\n      return null;\n    }\n    // We allow two thread types to deal with the NodeJS use case.\n    // MAIN_THREAD is used when a trace has been generated through Chrome\n    //   tracing on a website (and we have a renderer)\n    // CPU_PROFILE is used only when we have received a CPUProfile - in this\n    //   case all the threads are CPU_PROFILE so we allow those. If we only allow\n    //   MAIN_THREAD then we wouldn't ever allow NodeJS users to use the AI\n    //   integration.\n    if (thread.type !== Trace.Handlers.Threads.ThreadType.MAIN_THREAD &&\n        thread.type !== Trace.Handlers.Threads.ThreadType.CPU_PROFILE) {\n      return null;\n    }\n\n    // Ensure that the event is known to either the Renderer or Samples\n    // handler. This helps exclude synthetic events we build up for other\n    // information such as Layout Shift clusters.\n    // We check Renderer + Samples to ensure we support CPU Profiles (which do\n    // not populate the Renderer Handler)\n    if (!parsedTrace.Renderer.entryToNode.has(selectedEvent) && !parsedTrace.Samples.entryToNode.has(selectedEvent)) {\n      return null;\n    }\n\n    const allEventsEnabled = Root.Runtime.experiments.isEnabled('timeline-show-all-events');\n    const {startTime, endTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(selectedEvent);\n    const selectedEventBounds = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n        Trace.Helpers.Timing.milliToMicro(startTime), Trace.Helpers.Timing.milliToMicro(endTime));\n    let threadEvents = parsedTrace.Renderer.processes.get(selectedEvent.pid)?.threads.get(selectedEvent.tid)?.entries;\n    if (!threadEvents) {\n      // None from the renderer: try the samples handler, this might be a CPU trace.\n      threadEvents = parsedTrace.Samples.profilesInProcess.get(selectedEvent.pid)?.get(selectedEvent.tid)?.profileCalls;\n    }\n\n    if (!threadEvents) {\n      console.warn(`AICallTree: could not find thread for selected entry: ${selectedEvent}`);\n      return null;\n    }\n    const overlappingEvents = threadEvents.filter(e => Trace.Helpers.Timing.eventIsInBounds(e, selectedEventBounds));\n\n    const filters: Trace.Extras.TraceFilter.TraceFilter[] =\n        [new SelectedEventDurationFilter(selectedEvent), new ExcludeCompileCodeFilter(selectedEvent)];\n\n    // If the \"Show all events\" experiment is on, we don't filter out any\n    // events here, otherwise the generated call tree will not match what the\n    // user is seeing.\n    if (!allEventsEnabled) {\n      filters.push(new Trace.Extras.TraceFilter.VisibleEventsFilter(visibleTypes()));\n    }\n\n    // Build a tree bounded by the selected event's timestamps, and our other filters applied\n    const rootNode = new Trace.Extras.TraceTree.TopDownRootNode(overlappingEvents, {\n      filters,\n      startTime,\n      endTime,\n      includeInstantEvents: true,\n    });\n\n    // Walk the tree to find selectedNode\n    let selectedNode: Trace.Extras.TraceTree.Node|null = null;\n    depthFirstWalk([rootNode].values(), node => {\n      if (node.event === selectedEvent) {\n        selectedNode = node;\n        return true;\n      }\n      return;\n    });\n\n    if (selectedNode === null) {\n      console.warn(`Selected event ${selectedEvent} not found within its own tree.`);\n      return null;\n    }\n    const instance = new AICallTree(selectedNode, rootNode, parsedTrace);\n    // instance.logDebug();\n    return instance;\n  }\n\n  /**\n   * Iterates through nodes level by level using a Breadth-First Search (BFS) algorithm.\n   * BFS is important here because the serialization process assumes that direct child nodes\n   * will have consecutive IDs (horizontally across each depth).\n   *\n   * Example tree with IDs:\n   *\n   *             1\n   *            / \\\n   *           2   3\n   *        / / /   \\\n   *      4  5 6     7\n   *\n   * Here, node with an ID 2 has consecutive children in the 4-6 range.\n   *\n   * To optimize for space, the provided `callback` function is called to serialize\n   * each node as it's visited during the BFS traversal.\n   *\n   * When serializing a node, the callback receives:\n   * 1. The current node being visited.\n   * 2. The ID assigned to this current node (a simple incrementing index based on visit order).\n   * 3. The predicted starting ID for the children of this current node.\n   *\n   * A serialized node needs to know the ID range of its children. However,\n   * child node IDs are only assigned when those children are themselves visited.\n   * To handle this, we predict the starting ID for a node's children. This prediction\n   * is based on a running count of all nodes that have ever been added to the BFS queue.\n   * Since IDs are assigned consecutively as nodes are processed from the queue, and a\n   * node's children are added to the end of the queue when the parent is visited,\n   * their eventual IDs will follow this running count.\n   */\n  breadthFirstWalk(\n      nodes: MapIterator<Trace.Extras.TraceTree.Node>,\n      serializeNodeCallback:\n          (currentNode: Trace.Extras.TraceTree.Node, nodeId: number, childrenStartingId?: number) => void): void {\n    const queue: Trace.Extras.TraceTree.Node[] = Array.from(nodes);\n    let nodeIndex = 1;\n    // To predict the visited children indexes\n    let nodesAddedToQueueCount = queue.length;\n\n    let currentNode = queue.shift();\n\n    while (currentNode) {\n      if (currentNode.children().size > 0) {\n        serializeNodeCallback(currentNode, nodeIndex, nodesAddedToQueueCount + 1);\n      } else {\n        serializeNodeCallback(currentNode, nodeIndex);\n      }\n\n      queue.push(...Array.from(currentNode.children().values()));\n      nodesAddedToQueueCount += currentNode.children().size;\n\n      currentNode = queue.shift();\n      nodeIndex++;\n    }\n  }\n\n  serialize(headerLevel = 1): string {\n    const header = '#'.repeat(headerLevel);\n\n    // Keep a map of URLs. We'll output a LUT to keep size down.\n    const allUrls: string[] = [];\n\n    let nodesStr = '';\n    this.breadthFirstWalk(this.rootNode.children().values(), (node, nodeId, childStartingNode) => {\n      nodesStr +=\n          '\\n' + this.stringifyNode(node, nodeId, this.parsedTrace, this.selectedNode, allUrls, childStartingNode);\n    });\n\n    let output = '';\n    if (allUrls.length) {\n      // Output lookup table of URLs within this tree\n      output += `\\n${header} All URLs:\\n\\n` + allUrls.map((url, index) => `  * ${index}: ${url}`).join('\\n');\n    }\n    output += `\\n\\n${header} Call tree:\\n${nodesStr}`;\n    return output;\n  }\n\n  /*\n  * Each node is serialized into a single line to minimize token usage in the context window.\n  * The format is a semicolon-separated string with the following fields:\n  * Format: `id;name;duration;selfTime;urlIndex;childRange;[S]\n  *\n  *   1. `id`: A unique numerical identifier for the node assigned by BFS.\n  *   2. `name`: The name of the event represented by the node.\n  *   3. `duration`: The total duration of the event in milliseconds, rounded to one decimal place.\n  *   4. `selfTime`: The self time of the event in milliseconds, rounded to one decimal place.\n  *   5. `urlIndex`: An index referencing a URL in the `allUrls` array. If no URL is present, this is an empty string.\n  *   6. `childRange`: A string indicating the range of IDs for the node's children. Children should always have consecutive IDs.\n  *                    If there is only one child, it's a single ID.\n  *   7. `[S]`: An optional marker indicating that this node is the selected node.\n  *\n  * Example:\n  *   `1;Parse HTML;2.5;0.3;0;2-5;S`\n  *   This represents:\n  *     - Node ID 1\n  *     - Name \"Parse HTML\"\n  *     - Total duration of 2.5ms\n  *     - Self time of 0.3ms\n  *     - URL index 0 (meaning the URL is the first one in the `allUrls` array)\n  *     - Child range of IDs 2 to 5\n  *     - This node is the selected node (S marker)\n  */\n  stringifyNode(\n      node: Trace.Extras.TraceTree.Node, nodeId: number, parsedTrace: Trace.Handlers.Types.ParsedTrace,\n      selectedNode: Trace.Extras.TraceTree.Node|null, allUrls: string[], childStartingNodeIndex?: number): string {\n    const event = node.event;\n    if (!event) {\n      throw new Error('Event required');\n    }\n\n    // 1. ID\n    const idStr = String(nodeId);\n\n    // 2. Name\n    const name = nameForEntry(event, parsedTrace);\n\n    // Round milliseconds to one decimal place, return empty string if zero/undefined\n    const roundToTenths = (num: number|undefined): string => {\n      if (!num) {\n        return '';\n      }\n      return String(Math.round(num * 10) / 10);\n    };\n\n    // 3. Duration\n    const durationStr = roundToTenths(node.totalTime);\n\n    // 4. Self Time\n    const selfTimeStr = roundToTenths(node.selfTime);\n\n    // 5. URL Index\n    const url = SourceMapsResolver.resolvedURLForEntry(parsedTrace, event);\n    let urlIndexStr = '';\n    if (url) {\n      const existingIndex = allUrls.indexOf(url);\n      if (existingIndex === -1) {\n        urlIndexStr = String(allUrls.push(url) - 1);\n      } else {\n        urlIndexStr = String(existingIndex);\n      }\n    }\n\n    // 6. Child Range\n    const children = Array.from(node.children().values());\n    let childRangeStr = '';\n    if (childStartingNodeIndex) {\n      childRangeStr = (children.length === 1) ? String(childStartingNodeIndex) :\n                                                `${childStartingNodeIndex}-${childStartingNodeIndex + children.length}`;\n    }\n\n    // 7. Selected Marker\n    const selectedMarker = selectedNode?.event === node.event ? 'S' : '';\n\n    // Combine fields\n    let line = idStr;\n    line += ';' + name;\n    line += ';' + durationStr;\n    line += ';' + selfTimeStr;\n    line += ';' + urlIndexStr;\n    line += ';' + childRangeStr;\n\n    if (selectedMarker) {\n      line += ';' + selectedMarker;\n    }\n\n    return line;\n  }\n\n  // Only used for debugging.\n  logDebug(): void {\n    const str = this.serialize();\n    // eslint-disable-next-line no-console\n    console.log('🎆', str);\n    if (str.length > 45_000) {\n      // Manual testing shows 45k fits. 50k doesn't.\n      // Max is 32k _tokens_, but tokens to bytes is wishywashy, so... hard to know for sure.\n      console.warn('Output will likely not fit in the context window. Expect an AIDA error.');\n    }\n  }\n}\n\n/**\n * These events are very noisy and take up room in the context window for no real benefit.\n */\nexport class ExcludeCompileCodeFilter extends Trace.Extras.TraceFilter.TraceFilter {\n  #selectedEvent: Trace.Types.Events.Event|null = null;\n  constructor(selectedEvent?: Trace.Types.Events.Event) {\n    super();\n    this.#selectedEvent = selectedEvent ?? null;\n  }\n\n  accept(event: Trace.Types.Events.Event): boolean {\n    if (this.#selectedEvent && event === this.#selectedEvent) {\n      // If the user selects this event, we should accept it, else the\n      // behaviour is confusing when the selected event is not used.\n      return true;\n    }\n    return event.name !== Trace.Types.Events.Name.COMPILE_CODE;\n  }\n}\n\nexport class SelectedEventDurationFilter extends Trace.Extras.TraceFilter.TraceFilter {\n  #minDuration: Trace.Types.Timing.Micro;\n  #selectedEvent: Trace.Types.Events.Event;\n  constructor(selectedEvent: Trace.Types.Events.Event) {\n    super();\n    // The larger the selected event is, the less small ones matter. We'll exclude items under ½% of the selected event's size\n    this.#minDuration = Trace.Types.Timing.Micro((selectedEvent.dur ?? 1) * 0.005);\n    this.#selectedEvent = selectedEvent;\n  }\n  accept(event: Trace.Types.Events.Event): boolean {\n    if (event === this.#selectedEvent) {\n      return true;\n    }\n    return event.dur ? event.dur >= this.#minDuration : false;\n  }\n}\n\nexport class MinDurationFilter extends Trace.Extras.TraceFilter.TraceFilter {\n  #minDuration: Trace.Types.Timing.Micro;\n\n  constructor(minDuration: Trace.Types.Timing.Micro) {\n    super();\n    this.#minDuration = minDuration;\n  }\n\n  accept(event: Trace.Types.Events.Event): boolean {\n    return event.dur ? event.dur >= this.#minDuration : false;\n  }\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Trace from '../../../models/trace/trace.js';\n\nimport {getEventStyle} from './EntryStyles.js';\n\nconst UIStrings = {\n  /**\n   * @description Text shown for an entry in the flame chart that has no explicit name.\n   */\n  anonymous: '(anonymous)',\n  /**\n   * @description Text used to show an EventDispatch event which has a type associated with it\n   * @example {click} PH1\n   */\n  eventDispatchS: 'Event: {PH1}',\n  /**\n   * @description Text shown for an entry in the flame chart that represents a frame.\n   */\n  frame: 'Frame',\n  /**\n   * @description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  wsConnectionOpened: 'WebSocket opened',\n  /**\n   * @description Text in Timeline Flame Chart Data Provider of the Performance panel\n   * @example {ws://example.com} PH1\n   */\n  wsConnectionOpenedWithUrl: 'WebSocket opened: {PH1}',\n  /**\n   * @description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  wsConnectionClosed: 'WebSocket closed',\n  /**\n   * @description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  layoutShift: 'Layout shift',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/utils/EntryName.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * Calculates the display name for a given entry.\n * @param parsedTrace If the trace data is provided\n * as the second argument it can be used to find source map resolved names for\n * profile calls.\n * Use this function to customize the user visible name for an entry. If no\n * custom name is found, we will fallback to the `name` property in the trace\n * entry.\n */\nexport function nameForEntry(\n    entry: Trace.Types.Events.Event,\n    parsedTrace?: Trace.Handlers.Types.ParsedTrace,\n    ): string {\n  if (Trace.Types.Events.isProfileCall(entry)) {\n    if (parsedTrace) {\n      const potentialCallName =\n          Trace.Handlers.ModelHandlers.Samples.getProfileCallFunctionName(parsedTrace.Samples, entry);\n      // We need this extra check because the call name could be the empty\n      // string. If it is, we want to fallback.\n      if (potentialCallName) {\n        return potentialCallName;\n      }\n    }\n    return entry.callFrame.functionName || i18nString(UIStrings.anonymous);\n  }\n\n  if (Trace.Types.Events.isLegacyTimelineFrame(entry)) {\n    return i18n.i18n.lockedString(UIStrings.frame);\n  }\n\n  if (Trace.Types.Events.isDispatch(entry)) {\n    // EventDispatch represent user actions such as clicks, so in this case\n    // rather than show the event title (which is always just \"Event\"), we\n    // add the type (\"click\") to help the user understand the event.\n    return i18nString(UIStrings.eventDispatchS, {PH1: entry.args.data.type});\n  }\n  if (Trace.Types.Events.isSyntheticNetworkRequest(entry)) {\n    const parsedURL = new Common.ParsedURL.ParsedURL(entry.args.data.url);\n    const text =\n        parsedURL.isValid ? `${parsedURL.displayName} (${parsedURL.host})` : entry.args.data.url || 'Network request';\n    return text;\n  }\n\n  if (Trace.Types.Events.isWebSocketCreate(entry)) {\n    if (entry.args.data.url) {\n      return i18nString(UIStrings.wsConnectionOpenedWithUrl, {PH1: entry.args.data.url});\n    }\n\n    return i18nString(UIStrings.wsConnectionOpened);\n  }\n\n  if (Trace.Types.Events.isWebSocketDestroy(entry)) {\n    return i18nString(UIStrings.wsConnectionClosed);\n  }\n\n  if (Trace.Types.Events.isSyntheticInteraction(entry)) {\n    return nameForInteractionEvent(entry);\n  }\n\n  if (Trace.Types.Events.isSyntheticLayoutShift(entry)) {\n    return i18nString(UIStrings.layoutShift);\n  }\n\n  if (Trace.Types.Events.isSyntheticAnimation(entry) && entry.args.data.beginEvent.args.data.displayName) {\n    return entry.args.data.beginEvent.args.data.displayName;\n  }\n\n  const eventStyleCustomName = getEventStyle(entry.name as Trace.Types.Events.Name)?.title;\n\n  return eventStyleCustomName || entry.name;\n}\n\nfunction nameForInteractionEvent(event: Trace.Types.Events.SyntheticInteractionPair): string {\n  const category = Trace.Handlers.ModelHandlers.UserInteractions.categoryOfInteraction(event);\n  // Because we hide nested interactions, we do not want to show the\n  // specific type of the interaction that was not hidden, so instead we\n  // show just the category of that interaction.\n  if (category === 'OTHER') {\n    return 'Other';\n  }\n  if (category === 'KEYBOARD') {\n    return 'Keyboard';\n  }\n  if (category === 'POINTER') {\n    return 'Pointer';\n  }\n  return event.type;\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as Trace from '../../../models/trace/trace.js';\nimport * as ThemeSupport from '../../../ui/legacy/theme_support/theme_support.js';\n\nconst UIStrings = {\n  /**\n   * @description Category in the Summary view of the Performance panel to indicate time spent to load resources\n   */\n  loading: 'Loading',\n  /**\n   * @description Text in Timeline for the Experience title\n   */\n  experience: 'Experience',\n  /**\n   * @description Category in the Summary view of the Performance panel to indicate time spent in script execution\n   */\n  scripting: 'Scripting',\n  /**\n   * @description Category in the Summary view of the Performance panel to indicate time spent in rendering the web page\n   */\n  rendering: 'Rendering',\n  /**\n   * @description Category in the Summary view of the Performance panel to indicate time spent to visually represent the web page\n   */\n  painting: 'Painting',\n  /**\n   * @description Event category in the Performance panel for time spent in the GPU\n   */\n  gpu: 'GPU',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  async: 'Async',\n  /**\n   * @description Category in the Summary view of the Performance panel to indicate time spent in the rest of the system\n   */\n  system: 'System',\n  /**\n   * @description Category in the Summary view of the Performance panel to indicate idle time\n   */\n  idle: 'Idle',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  task: 'Task',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  consoleTaskRun: 'Run console task',\n  /**\n   * @description Text for other types of items\n   */\n  other: 'Other',\n  /**\n   * @description Text that refers to the animation of the web page\n   */\n  animation: 'Animation',\n  /**\n   * @description Text that refers to some events\n   */\n  event: 'Event',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  requestMainThreadFrame: 'Request main thread frame',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  frameStart: 'Frame start',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  onMessage: 'On message',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  schedulePostMessage: 'Schedule postMessage',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  messaging: 'Messaging',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  frameStartMainThread: 'Frame start (main thread)',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  drawFrame: 'Draw frame',\n  /**\n   * @description Noun for an event in the Performance panel. This marks time\n   * spent in an operation that only happens when the profiler is active.\n   */\n  profilingOverhead: 'Profiling overhead',\n  /**\n   * @description The process the browser uses to determine a target element for a\n   *pointer event. Typically, this is determined by considering the pointer's\n   *location and also the visual layout of elements on the screen.\n   */\n  hitTest: 'Hit test',\n  /**\n   * @description Noun for an event in the Performance panel. The browser has decided\n   *that the styles for some elements need to be recalculated and scheduled that\n   *recalculation process at some time in the future.\n   */\n  scheduleStyleRecalculation: 'Schedule style recalculation',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  recalculateStyle: 'Recalculate style',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  invalidateLayout: 'Invalidate Layout',\n  /**\n   * @description Noun for an event in the Performance panel. Layerize is a step\n   *where we calculate which layers to create.\n   */\n  layerize: 'Layerize',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  layout: 'Layout',\n  /**\n   * @description Noun for an event in the Performance panel. Paint setup is a\n   *step before the 'Paint' event. A paint event is when the browser draws pixels\n   *to the screen. This step is the setup beforehand.\n   */\n  paintSetup: 'Paint setup',\n  /**\n   * @description Noun for a paint event in the Performance panel, where an image\n   *was being painted. A paint event is when the browser draws pixels to the\n   *screen, in this case specifically for an image in a website.\n   */\n  paintImage: 'Paint image',\n  /**\n   * @description Noun for an event in the Performance panel. Pre-paint is a\n   *step before the 'Paint' event. A paint event is when the browser records the\n   *instructions for drawing the page. This step is the setup beforehand.\n   */\n  prePaint: 'Pre-paint',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  updateLayer: 'Update layer',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  updateLayerTree: 'Update layer tree',\n  /**\n   * @description Noun for a paint event in the Performance panel. A paint event is when the browser draws pixels to the screen.\n   */\n  paint: 'Paint',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  rasterizePaint: 'Rasterize paint',\n  /**\n   * @description The action to scroll\n   */\n  scroll: 'Scroll',\n  /**\n   * @description Noun for an event in the Performance panel. Commit is a step\n   *where we send (also known as \"commit\") layers to the compositor thread. This\n   *step follows the \"Layerize\" step which is what calculates which layers to\n   *create.\n   */\n  commit: 'Commit',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  compositeLayers: 'Composite layers',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  computeIntersections: 'Compute intersections',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  parseHtml: 'Parse HTML',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  parseStylesheet: 'Parse stylesheet',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  installTimer: 'Install timer',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  removeTimer: 'Remove timer',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  timerFired: 'Timer fired',\n  /**\n   * @description Text for an event. Shown in the timeline in the Performance panel.\n   * XHR refers to XmlHttpRequest, a Web API. This particular Web API has a property\n   * named 'readyState' (https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState). When\n   * the 'readyState' property changes the text is shown.\n   */\n  xhrReadyStateChange: '`XHR` `readyState` change',\n  /**\n   * @description Text for an event. Shown in the timeline in the Performance panel.\n   * XHR refers to XmlHttpRequest, a Web API. (see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)\n   * The text is shown when a XmlHttpRequest load event happens on the inspected page.\n   */\n  xhrLoad: '`XHR` load',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  compileScript: 'Compile script',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  cacheScript: 'Cache script code',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  compileCode: 'Compile code',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  optimizeCode: 'Optimize code',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  evaluateScript: 'Evaluate script',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  compileModule: 'Compile module',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  cacheModule: 'Cache module code',\n  /**\n   * @description Text for an event. Shown in the timeline in the Performance panel.\n   * \"Module\" refers to JavaScript modules: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\n   * JavaScript modules are a way to organize JavaScript code.\n   * \"Evaluate\" is the phase when the JavaScript code of a module is executed.\n   */\n  evaluateModule: 'Evaluate module',\n  /**\n   * @description Noun indicating that a compile task (type: streaming) happened.\n   */\n  streamingCompileTask: 'Streaming compile task',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  waitingForNetwork: 'Waiting for network',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  parseAndCompile: 'Parse and compile',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel.\n   * \"Code Cache\" refers to JavaScript bytecode cache: https://v8.dev/blog/code-caching-for-devs\n   * \"Deserialize\" refers to the process of reading the code cache.\n   */\n  deserializeCodeCache: 'Deserialize code cache',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  streamingWasmResponse: 'Streaming Wasm response',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  compiledWasmModule: 'Compiled Wasm module',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  cachedWasmModule: 'Cached Wasm module',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  wasmModuleCacheHit: 'Wasm module cache hit',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  wasmModuleCacheInvalid: 'Wasm module cache invalid',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  frameStartedLoading: 'Frame started loading',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  onloadEvent: 'Onload event',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  domcontentloadedEvent: 'DOMContentLoaded event',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  firstPaint: 'First Paint',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  firstContentfulPaint: 'First Contentful Paint',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  largestContentfulPaint: 'Largest Contentful Paint',\n  /**\n   * @description Text for timestamps of items\n   */\n  timestamp: 'Timestamp',\n  /**\n   * @description Noun for a 'time' event that happens in the Console (a tool in\n   * DevTools). The user can trigger console time events from their code, and\n   * they will show up in the Performance panel. Time events are used to measure\n   * the duration of something, e.g. the user will emit two time events at the\n   * start and end of some interesting task.\n   */\n  consoleTime: 'Console time',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  userTiming: 'User timing',\n  /**\n   * @description Name for an event shown in the Performance panel. When a network\n   * request is about to be sent by the browser, the time is recorded and DevTools\n   * is notified that a network request will be sent momentarily.\n   */\n  willSendRequest: 'Will send request',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  sendRequest: 'Send request',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  receiveResponse: 'Receive response',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  finishLoading: 'Finish loading',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  receiveData: 'Receive data',\n  /**\n   * @description Event category in the Performance panel for time spent to execute microtasks in JavaScript\n   */\n  runMicrotasks: 'Run microtasks',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  functionCall: 'Function call',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  gcEvent: 'GC event',\n  /**\n   * @description Event category in the Performance panel for time spent to perform a full Garbage Collection pass\n   */\n  majorGc: 'Major GC',\n  /**\n   * @description Event category in the Performance panel for time spent to perform a quick Garbage Collection pass\n   */\n  minorGc: 'Minor GC',\n  /**\n   * @description Text for the request animation frame event\n   */\n  requestAnimationFrame: 'Request animation frame',\n  /**\n   * @description Text to cancel the animation frame\n   */\n  cancelAnimationFrame: 'Cancel animation frame',\n  /**\n   * @description Text for the event that an animation frame is fired\n   */\n  animationFrameFired: 'Animation frame fired',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  requestIdleCallback: 'Request idle callback',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  cancelIdleCallback: 'Cancel idle callback',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  fireIdleCallback: 'Fire idle callback',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  createWebsocket: 'Create WebSocket',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  sendWebsocketHandshake: 'Send WebSocket handshake',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  receiveWebsocketHandshake: 'Receive WebSocket handshake',\n  /**\n   * @description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  wsMessageReceived: 'Receive WebSocket message',\n  /**\n   * @description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  wsMessageSent: 'Send WebSocket message',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  destroyWebsocket: 'Destroy WebSocket',\n  /**\n   * @description Event category in the Performance panel for time spent in the embedder of the WebView\n   */\n  embedderCallback: 'Embedder callback',\n  /**\n   * @description Event category in the Performance panel for time spent decoding an image\n   */\n  imageDecode: 'Image decode',\n  /**\n   * @description Event category in the Performance panel for time spent to perform Garbage Collection for the Document Object Model\n   */\n  domGc: 'DOM GC',\n  /**\n   * @description Event category in the Performance panel for time spent to perform Garbage Collection for C++: https://chromium.googlesource.com/v8/v8/+/main/include/cppgc/README.md\n   */\n  cppGc: 'CPP GC',\n  /**\n   * @description Event category in the Performance panel for time spent to perform encryption\n   */\n  encrypt: 'Encrypt',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  encryptReply: 'Encrypt reply',\n  /**\n   * @description Event category in the Performance panel for time spent to perform decryption\n   */\n  decrypt: 'Decrypt',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  decryptReply: 'Decrypt reply',\n  /**\n   * @description Noun phrase meaning 'the browser was preparing the digest'.\n   * Digest: https://developer.mozilla.org/en-US/docs/Glossary/Digest\n   */\n  digest: 'Digest',\n  /**\n   * @description Noun phrase meaning 'the browser was preparing the digest\n   *reply'. Digest: https://developer.mozilla.org/en-US/docs/Glossary/Digest\n   */\n  digestReply: 'Digest reply',\n  /**\n   * @description The 'sign' stage of a web crypto event. Shown when displaying what the website was doing at a particular point in time.\n   */\n  sign: 'Sign',\n  /**\n   * @description Noun phrase for an event of the Web Crypto API. The event is recorded when the signing process is concluded.\n   * Signature: https://developer.mozilla.org/en-US/docs/Glossary/Signature/Security\n   */\n  signReply: 'Sign reply',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  verify: 'Verify',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  verifyReply: 'Verify reply',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel\n   */\n  asyncTask: 'Async task',\n  /**\n   * @description Text in Timeline for Layout Shift records\n   */\n  layoutShift: 'Layout shift',\n  /**\n   * @description Text in Timeline for Layout Shift records\n   */\n  layoutShiftCluster: 'Layout shift cluster',\n  /**\n   * @description Text in Timeline for an Event Timing record\n   */\n  eventTiming: 'Event timing',\n  /**\n   * @description Event category in the Performance panel for JavaScript nodes in CPUProfile\n   */\n  jsFrame: 'JS frame',\n  /**\n   * @description Text in UIDevtools Utils of the Performance panel\n   */\n  rasterizing: 'Rasterizing',\n  /**\n   * @description Text in UIDevtools Utils of the Performance panel\n   */\n  drawing: 'Drawing',\n  /**\n   * @description Label for an event in the Performance panel indicating that a\n   * callback function has been scheduled to run at a later time using the\n   * postTask API.\n   */\n  schedulePostTaskCallback: 'Schedule postTask',\n  /**\n   * @description Label for an event in the Performance panel indicating that a\n   * callback function that was scheduled to run using the postTask API was\n   * fired (invoked).\n   */\n  runPostTaskCallback: 'Fire postTask',\n  /**\n   * @description Label for an event in the Performance panel indicating that a\n   * callback function that was scheduled to run at a later time using the\n   * postTask API was cancelled, so will no longer run.\n   */\n  abortPostTaskCallback: 'Cancel postTask',\n} as const;\n\nexport enum EventCategory {\n  DRAWING = 'drawing',\n  RASTERIZING = 'rasterizing',\n  LAYOUT = 'layout',\n  LOADING = 'loading',\n  EXPERIENCE = 'experience',\n  SCRIPTING = 'scripting',\n  MESSAGING = 'messaging',\n  RENDERING = 'rendering',\n  PAINTING = 'painting',\n  GPU = 'gpu',\n  ASYNC = 'async',\n  OTHER = 'other',\n  IDLE = 'idle',\n}\n\nlet mainEventCategories: EventCategory[];\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/utils/EntryStyles.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class TimelineRecordStyle {\n  title: string;\n  category: TimelineCategory;\n  hidden: boolean;\n\n  constructor(title: string, category: TimelineCategory, hidden: boolean|undefined = false) {\n    this.title = title;\n    this.category = category;\n    this.hidden = hidden;\n  }\n}\nexport class TimelineCategory {\n  name: EventCategory;\n  title: Platform.UIString.LocalizedString;\n  visible: boolean;\n  childColor: string;\n  colorInternal: string;\n  #hidden?: boolean;\n\n  constructor(\n      name: EventCategory, title: Platform.UIString.LocalizedString, visible: boolean, childColor: string,\n      color: string) {\n    this.name = name;\n    this.title = title;\n    this.visible = visible;\n    this.childColor = childColor;\n    this.colorInternal = color;\n    this.hidden = false;\n  }\n\n  get hidden(): boolean {\n    return Boolean(this.#hidden);\n  }\n\n  get color(): string {\n    return this.getComputedColorValue();\n  }\n  getCSSValue(): string {\n    return `var(${this.colorInternal})`;\n  }\n\n  getComputedColorValue(): string {\n    return ThemeSupport.ThemeSupport.instance().getComputedValue(this.colorInternal);\n  }\n\n  set hidden(hidden: boolean) {\n    this.#hidden = hidden;\n  }\n}\n\nexport type CategoryPalette = Record<EventCategory, TimelineCategory>;\n\ntype EventStylesMap = Partial<Record<Trace.Types.Events.Name, TimelineRecordStyle>>;\n\n/**\n * This object defines the styles for the categories used in the\n * timeline (loading, rendering, scripting, etc.).\n */\nlet categoryStyles: CategoryPalette|null;\n\n/**\n * This map defines the styles for events shown in the panel. This\n * includes its color (which on the event's category, the label it's\n * displayed with and flag to know weather it's visible in the flamechart\n * or not).\n * The thread appenders use this map to determine if an event should be\n * shown in the flame chart. If an event is not in the map, then it\n * won't be shown, but it also won't be shown if it's marked as \"hidden\"\n * in its styles.\n *\n * The map is also used in other places, like the event's details view.\n */\nlet eventStylesMap: EventStylesMap|null;\n\nexport function getEventStyle(eventName: Trace.Types.Events.Name): TimelineRecordStyle|undefined {\n  return maybeInitSylesMap()[eventName];\n}\n\nexport function stringIsEventCategory(it: string): it is EventCategory {\n  return (Object.values(EventCategory) as string[]).includes(it);\n}\n\nexport function getCategoryStyles(): CategoryPalette {\n  if (categoryStyles) {\n    return categoryStyles;\n  }\n  categoryStyles = {\n    loading: new TimelineCategory(\n        EventCategory.LOADING, i18nString(UIStrings.loading), true, '--app-color-loading-children',\n        '--app-color-loading'),\n    experience: new TimelineCategory(\n        EventCategory.EXPERIENCE, i18nString(UIStrings.experience), false, '--app-color-rendering-children',\n        '--app-color-rendering'),\n    messaging: new TimelineCategory(\n        EventCategory.MESSAGING, i18nString(UIStrings.messaging), true, '--app-color-messaging-children',\n        '--app-color-messaging'),\n    scripting: new TimelineCategory(\n        EventCategory.SCRIPTING, i18nString(UIStrings.scripting), true, '--app-color-scripting-children',\n        '--app-color-scripting'),\n    rendering: new TimelineCategory(\n        EventCategory.RENDERING, i18nString(UIStrings.rendering), true, '--app-color-rendering-children',\n        '--app-color-rendering'),\n    painting: new TimelineCategory(\n        EventCategory.PAINTING, i18nString(UIStrings.painting), true, '--app-color-painting-children',\n        '--app-color-painting'),\n    gpu: new TimelineCategory(\n        EventCategory.GPU, i18nString(UIStrings.gpu), false, '--app-color-painting-children', '--app-color-painting'),\n    async: new TimelineCategory(\n        EventCategory.ASYNC, i18nString(UIStrings.async), false, '--app-color-async-children', '--app-color-async'),\n    other: new TimelineCategory(\n        EventCategory.OTHER, i18nString(UIStrings.system), false, '--app-color-system-children', '--app-color-system'),\n    idle: new TimelineCategory(\n        EventCategory.IDLE, i18nString(UIStrings.idle), false, '--app-color-idle-children', '--app-color-idle'),\n    layout: new TimelineCategory(\n        EventCategory.LAYOUT, i18nString(UIStrings.layout), false, '--app-color-loading-children',\n        '--app-color-loading'),\n    rasterizing: new TimelineCategory(\n        EventCategory.RASTERIZING, i18nString(UIStrings.rasterizing), false, '--app-color-children',\n        '--app-color-scripting'),\n    drawing: new TimelineCategory(\n        EventCategory.DRAWING, i18nString(UIStrings.drawing), false, '--app-color-rendering-children',\n        '--app-color-rendering'),\n  };\n  return categoryStyles;\n}\n\nexport function maybeInitSylesMap(): EventStylesMap {\n  if (eventStylesMap) {\n    return eventStylesMap;\n  }\n  const defaultCategoryStyles = getCategoryStyles();\n\n  eventStylesMap = {\n    [Trace.Types.Events.Name.RUN_TASK]:\n        new TimelineRecordStyle(i18nString(UIStrings.task), defaultCategoryStyles.other),\n\n    [Trace.Types.Events.Name.PROFILE_CALL]:\n        new TimelineRecordStyle(i18nString(UIStrings.jsFrame), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.JS_SAMPLE]:\n        new TimelineRecordStyle(Trace.Types.Events.Name.JS_SAMPLE, defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.PROGRAM]:\n        new TimelineRecordStyle(i18nString(UIStrings.other), defaultCategoryStyles.other),\n\n    [Trace.Types.Events.Name.START_PROFILING]:\n        new TimelineRecordStyle(i18nString(UIStrings.profilingOverhead), defaultCategoryStyles.other),\n\n    [Trace.Types.Events.Name.ANIMATION]:\n        new TimelineRecordStyle(i18nString(UIStrings.animation), defaultCategoryStyles.rendering),\n\n    [Trace.Types.Events.Name.EVENT_DISPATCH]:\n        new TimelineRecordStyle(i18nString(UIStrings.event), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.REQUEST_MAIN_THREAD_FRAME]: new TimelineRecordStyle(\n        i18nString(UIStrings.requestMainThreadFrame),\n        defaultCategoryStyles.rendering,\n        true,\n        ),\n\n    [Trace.Types.Events.Name.BEGIN_FRAME]: new TimelineRecordStyle(\n        i18nString(UIStrings.frameStart),\n        defaultCategoryStyles.rendering,\n        true,\n        ),\n\n    [Trace.Types.Events.Name.BEGIN_MAIN_THREAD_FRAME]: new TimelineRecordStyle(\n        i18nString(UIStrings.frameStartMainThread),\n        defaultCategoryStyles.rendering,\n        true,\n        ),\n\n    [Trace.Types.Events.Name.DRAW_FRAME]: new TimelineRecordStyle(\n        i18nString(UIStrings.drawFrame),\n        defaultCategoryStyles.rendering,\n        true,\n        ),\n\n    [Trace.Types.Events.Name.HIT_TEST]:\n        new TimelineRecordStyle(i18nString(UIStrings.hitTest), defaultCategoryStyles.rendering),\n\n    [Trace.Types.Events.Name.SCHEDULE_STYLE_RECALCULATION]: new TimelineRecordStyle(\n        i18nString(UIStrings.scheduleStyleRecalculation),\n        defaultCategoryStyles.rendering,\n        ),\n\n    [Trace.Types.Events.Name.UPDATE_LAYOUT_TREE]:\n        new TimelineRecordStyle(i18nString(UIStrings.recalculateStyle), defaultCategoryStyles.rendering),\n\n    [Trace.Types.Events.Name.INVALIDATE_LAYOUT]: new TimelineRecordStyle(\n        i18nString(UIStrings.invalidateLayout),\n        defaultCategoryStyles.rendering,\n        true,\n        ),\n\n    [Trace.Types.Events.Name.LAYERIZE]:\n        new TimelineRecordStyle(i18nString(UIStrings.layerize), defaultCategoryStyles.rendering),\n\n    [Trace.Types.Events.Name.LAYOUT]:\n        new TimelineRecordStyle(i18nString(UIStrings.layout), defaultCategoryStyles.rendering),\n\n    [Trace.Types.Events.Name.PAINT_SETUP]:\n        new TimelineRecordStyle(i18nString(UIStrings.paintSetup), defaultCategoryStyles.painting),\n\n    [Trace.Types.Events.Name.PAINT_IMAGE]: new TimelineRecordStyle(\n        i18nString(UIStrings.paintImage),\n        defaultCategoryStyles.painting,\n        true,\n        ),\n\n    [Trace.Types.Events.Name.UPDATE_LAYER]: new TimelineRecordStyle(\n        i18nString(UIStrings.updateLayer),\n        defaultCategoryStyles.painting,\n        true,\n        ),\n\n    [Trace.Types.Events.Name.UPDATE_LAYER_TREE]:\n        new TimelineRecordStyle(i18nString(UIStrings.updateLayerTree), defaultCategoryStyles.rendering),\n\n    [Trace.Types.Events.Name.PAINT]:\n        new TimelineRecordStyle(i18nString(UIStrings.paint), defaultCategoryStyles.painting),\n\n    [Trace.Types.Events.Name.PRE_PAINT]:\n        new TimelineRecordStyle(i18nString(UIStrings.prePaint), defaultCategoryStyles.rendering),\n\n    [Trace.Types.Events.Name.RASTER_TASK]:\n        new TimelineRecordStyle(i18nString(UIStrings.rasterizePaint), defaultCategoryStyles.painting),\n\n    [Trace.Types.Events.Name.SCROLL_LAYER]:\n        new TimelineRecordStyle(i18nString(UIStrings.scroll), defaultCategoryStyles.rendering),\n\n    [Trace.Types.Events.Name.COMMIT]:\n        new TimelineRecordStyle(i18nString(UIStrings.commit), defaultCategoryStyles.painting),\n\n    [Trace.Types.Events.Name.COMPOSITE_LAYERS]:\n        new TimelineRecordStyle(i18nString(UIStrings.compositeLayers), defaultCategoryStyles.painting),\n\n    [Trace.Types.Events.Name.COMPUTE_INTERSECTION]: new TimelineRecordStyle(\n        i18nString(UIStrings.computeIntersections),\n        defaultCategoryStyles.rendering,\n        ),\n\n    [Trace.Types.Events.Name.PARSE_HTML]:\n        new TimelineRecordStyle(i18nString(UIStrings.parseHtml), defaultCategoryStyles.loading),\n\n    [Trace.Types.Events.Name.PARSE_AUTHOR_STYLE_SHEET]:\n        new TimelineRecordStyle(i18nString(UIStrings.parseStylesheet), defaultCategoryStyles.loading),\n\n    [Trace.Types.Events.Name.TIMER_INSTALL]:\n        new TimelineRecordStyle(i18nString(UIStrings.installTimer), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.TIMER_REMOVE]:\n        new TimelineRecordStyle(i18nString(UIStrings.removeTimer), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.TIMER_FIRE]:\n        new TimelineRecordStyle(i18nString(UIStrings.timerFired), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.XHR_READY_STATE_CHANGED]: new TimelineRecordStyle(\n        i18nString(UIStrings.xhrReadyStateChange),\n        defaultCategoryStyles.scripting,\n        ),\n\n    [Trace.Types.Events.Name.XHR_LOAD]:\n        new TimelineRecordStyle(i18nString(UIStrings.xhrLoad), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.COMPILE]:\n        new TimelineRecordStyle(i18nString(UIStrings.compileScript), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.CACHE_SCRIPT]:\n        new TimelineRecordStyle(i18nString(UIStrings.cacheScript), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.COMPILE_CODE]:\n        new TimelineRecordStyle(i18nString(UIStrings.compileCode), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.OPTIMIZE_CODE]:\n        new TimelineRecordStyle(i18nString(UIStrings.optimizeCode), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.EVALUATE_SCRIPT]:\n        new TimelineRecordStyle(i18nString(UIStrings.evaluateScript), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.COMPILE_MODULE]:\n        new TimelineRecordStyle(i18nString(UIStrings.compileModule), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.CACHE_MODULE]:\n        new TimelineRecordStyle(i18nString(UIStrings.cacheModule), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.EVALUATE_MODULE]:\n        new TimelineRecordStyle(i18nString(UIStrings.evaluateModule), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.STREAMING_COMPILE_SCRIPT]:\n        new TimelineRecordStyle(i18nString(UIStrings.streamingCompileTask), defaultCategoryStyles.other),\n\n    [Trace.Types.Events.Name.STREAMING_COMPILE_SCRIPT_WAITING]:\n        new TimelineRecordStyle(i18nString(UIStrings.waitingForNetwork), defaultCategoryStyles.idle),\n\n    [Trace.Types.Events.Name.STREAMING_COMPILE_SCRIPT_PARSING]:\n        new TimelineRecordStyle(i18nString(UIStrings.parseAndCompile), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.BACKGROUND_DESERIALIZE]: new TimelineRecordStyle(\n        i18nString(UIStrings.deserializeCodeCache),\n        defaultCategoryStyles.scripting,\n        ),\n\n    [Trace.Types.Events.Name.FINALIZE_DESERIALIZATION]:\n        new TimelineRecordStyle(i18nString(UIStrings.profilingOverhead), defaultCategoryStyles.other),\n\n    [Trace.Types.Events.Name.WASM_STREAM_FROM_RESPONSE_CALLBACK]: new TimelineRecordStyle(\n        i18nString(UIStrings.streamingWasmResponse),\n        defaultCategoryStyles.scripting,\n        ),\n\n    [Trace.Types.Events.Name.WASM_COMPILED_MODULE]:\n        new TimelineRecordStyle(i18nString(UIStrings.compiledWasmModule), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.WASM_CACHED_MODULE]:\n        new TimelineRecordStyle(i18nString(UIStrings.cachedWasmModule), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.WASM_MODULE_CACHE_HIT]:\n        new TimelineRecordStyle(i18nString(UIStrings.wasmModuleCacheHit), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.WASM_MODULE_CACHE_INVALID]: new TimelineRecordStyle(\n        i18nString(UIStrings.wasmModuleCacheInvalid),\n        defaultCategoryStyles.scripting,\n        ),\n\n    [Trace.Types.Events.Name.FRAME_STARTED_LOADING]: new TimelineRecordStyle(\n        i18nString(UIStrings.frameStartedLoading),\n        defaultCategoryStyles.loading,\n        true,\n        ),\n\n    [Trace.Types.Events.Name.MARK_LOAD]: new TimelineRecordStyle(\n        i18nString(UIStrings.onloadEvent),\n        defaultCategoryStyles.scripting,\n        true,\n        ),\n\n    [Trace.Types.Events.Name.MARK_DOM_CONTENT]: new TimelineRecordStyle(\n        i18nString(UIStrings.domcontentloadedEvent),\n        defaultCategoryStyles.scripting,\n        true,\n        ),\n\n    [Trace.Types.Events.Name.MARK_FIRST_PAINT]: new TimelineRecordStyle(\n        i18nString(UIStrings.firstPaint),\n        defaultCategoryStyles.painting,\n        true,\n        ),\n\n    [Trace.Types.Events.Name.MARK_FCP]: new TimelineRecordStyle(\n        i18nString(UIStrings.firstContentfulPaint),\n        defaultCategoryStyles.rendering,\n        true,\n        ),\n\n    [Trace.Types.Events.Name.MARK_LCP_CANDIDATE]: new TimelineRecordStyle(\n        i18nString(UIStrings.largestContentfulPaint),\n        defaultCategoryStyles.rendering,\n        true,\n        ),\n\n    [Trace.Types.Events.Name.TIME_STAMP]:\n        new TimelineRecordStyle(i18nString(UIStrings.timestamp), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.CONSOLE_TIME]:\n        new TimelineRecordStyle(i18nString(UIStrings.consoleTime), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.USER_TIMING]:\n        new TimelineRecordStyle(i18nString(UIStrings.userTiming), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.RESOURCE_WILL_SEND_REQUEST]:\n        new TimelineRecordStyle(i18nString(UIStrings.willSendRequest), defaultCategoryStyles.loading),\n\n    [Trace.Types.Events.Name.RESOURCE_SEND_REQUEST]:\n        new TimelineRecordStyle(i18nString(UIStrings.sendRequest), defaultCategoryStyles.loading),\n\n    [Trace.Types.Events.Name.RESOURCE_RECEIVE_RESPONSE]:\n        new TimelineRecordStyle(i18nString(UIStrings.receiveResponse), defaultCategoryStyles.loading),\n\n    [Trace.Types.Events.Name.RESOURCE_FINISH]:\n        new TimelineRecordStyle(i18nString(UIStrings.finishLoading), defaultCategoryStyles.loading),\n\n    [Trace.Types.Events.Name.RESOURCE_RECEIVE_DATA]:\n        new TimelineRecordStyle(i18nString(UIStrings.receiveData), defaultCategoryStyles.loading),\n\n    [Trace.Types.Events.Name.RUN_MICROTASKS]:\n        new TimelineRecordStyle(i18nString(UIStrings.runMicrotasks), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.FUNCTION_CALL]:\n        new TimelineRecordStyle(i18nString(UIStrings.functionCall), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.GC]:\n        new TimelineRecordStyle(i18nString(UIStrings.gcEvent), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.MAJOR_GC]:\n        new TimelineRecordStyle(i18nString(UIStrings.majorGc), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.MINOR_GC]:\n        new TimelineRecordStyle(i18nString(UIStrings.minorGc), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.CPPGC_SWEEP]:\n        new TimelineRecordStyle(i18nString(UIStrings.cppGc), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.REQUEST_ANIMATION_FRAME]: new TimelineRecordStyle(\n        i18nString(UIStrings.requestAnimationFrame),\n        defaultCategoryStyles.scripting,\n        ),\n\n    [Trace.Types.Events.Name.CANCEL_ANIMATION_FRAME]: new TimelineRecordStyle(\n        i18nString(UIStrings.cancelAnimationFrame),\n        defaultCategoryStyles.scripting,\n        ),\n\n    [Trace.Types.Events.Name.FIRE_ANIMATION_FRAME]: new TimelineRecordStyle(\n        i18nString(UIStrings.animationFrameFired),\n        defaultCategoryStyles.scripting,\n        ),\n\n    [Trace.Types.Events.Name.REQUEST_IDLE_CALLBACK]: new TimelineRecordStyle(\n        i18nString(UIStrings.requestIdleCallback),\n        defaultCategoryStyles.scripting,\n        ),\n\n    [Trace.Types.Events.Name.CANCEL_IDLE_CALLBACK]:\n        new TimelineRecordStyle(i18nString(UIStrings.cancelIdleCallback), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.FIRE_IDLE_CALLBACK]:\n        new TimelineRecordStyle(i18nString(UIStrings.fireIdleCallback), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.WEB_SOCKET_CREATE]:\n        new TimelineRecordStyle(i18nString(UIStrings.createWebsocket), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.WEB_SOCKET_SEND_HANDSHAKE_REQUEST]: new TimelineRecordStyle(\n        i18nString(UIStrings.sendWebsocketHandshake),\n        defaultCategoryStyles.scripting,\n        ),\n\n    [Trace.Types.Events.Name.WEB_SOCKET_RECEIVE_HANDSHAKE_REQUEST]: new TimelineRecordStyle(\n        i18nString(UIStrings.receiveWebsocketHandshake),\n        defaultCategoryStyles.scripting,\n        ),\n\n    [Trace.Types.Events.Name.WEB_SOCKET_DESTROY]:\n        new TimelineRecordStyle(i18nString(UIStrings.destroyWebsocket), defaultCategoryStyles.scripting),\n    [Trace.Types.Events.Name.WEB_SOCKET_SEND]: new TimelineRecordStyle(\n        i18nString(UIStrings.wsMessageSent),\n        defaultCategoryStyles.scripting,\n        ),\n    [Trace.Types.Events.Name.WEB_SOCKET_RECEIVE]: new TimelineRecordStyle(\n        i18nString(UIStrings.wsMessageReceived),\n        defaultCategoryStyles.scripting,\n        ),\n\n    [Trace.Types.Events.Name.EMBEDDER_CALLBACK]:\n        new TimelineRecordStyle(i18nString(UIStrings.embedderCallback), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.DECODE_IMAGE]:\n        new TimelineRecordStyle(i18nString(UIStrings.imageDecode), defaultCategoryStyles.painting),\n\n    [Trace.Types.Events.Name.GPU_TASK]: new TimelineRecordStyle(i18nString(UIStrings.gpu), defaultCategoryStyles.gpu),\n\n    [Trace.Types.Events.Name.GC_COLLECT_GARBARGE]:\n        new TimelineRecordStyle(i18nString(UIStrings.domGc), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.CRYPTO_DO_ENCRYPT]:\n        new TimelineRecordStyle(i18nString(UIStrings.encrypt), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.CRYPTO_DO_ENCRYPT_REPLY]:\n        new TimelineRecordStyle(i18nString(UIStrings.encryptReply), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.CRYPTO_DO_DECRYPT]:\n        new TimelineRecordStyle(i18nString(UIStrings.decrypt), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.CRYPTO_DO_DECRYPT_REPLY]:\n        new TimelineRecordStyle(i18nString(UIStrings.decryptReply), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.CRYPTO_DO_DIGEST]:\n        new TimelineRecordStyle(i18nString(UIStrings.digest), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.CRYPTO_DO_DIGEST_REPLY]:\n        new TimelineRecordStyle(i18nString(UIStrings.digestReply), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.CRYPTO_DO_SIGN]:\n        new TimelineRecordStyle(i18nString(UIStrings.sign), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.CRYPTO_DO_SIGN_REPLY]:\n        new TimelineRecordStyle(i18nString(UIStrings.signReply), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.CRYPTO_DO_VERIFY]:\n        new TimelineRecordStyle(i18nString(UIStrings.verify), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.CRYPTO_DO_VERIFY_REPLY]:\n        new TimelineRecordStyle(i18nString(UIStrings.verifyReply), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.ASYNC_TASK]:\n        new TimelineRecordStyle(i18nString(UIStrings.asyncTask), defaultCategoryStyles.async),\n\n    [Trace.Types.Events.Name.LAYOUT_SHIFT]: new TimelineRecordStyle(\n        i18nString(UIStrings.layoutShift), defaultCategoryStyles.experience,\n        /* Mark LayoutShifts as hidden; in the timeline we render\n        * SyntheticLayoutShifts so those are the ones visible to the user */\n        true),\n\n    [Trace.Types.Events.Name.SYNTHETIC_LAYOUT_SHIFT]:\n        new TimelineRecordStyle(i18nString(UIStrings.layoutShift), defaultCategoryStyles.experience),\n\n    [Trace.Types.Events.Name.SYNTHETIC_LAYOUT_SHIFT_CLUSTER]:\n        new TimelineRecordStyle(i18nString(UIStrings.layoutShiftCluster), defaultCategoryStyles.experience),\n\n    [Trace.Types.Events.Name.EVENT_TIMING]:\n        new TimelineRecordStyle(i18nString(UIStrings.eventTiming), defaultCategoryStyles.experience),\n\n    [Trace.Types.Events.Name.HANDLE_POST_MESSAGE]:\n        new TimelineRecordStyle(i18nString(UIStrings.onMessage), defaultCategoryStyles.messaging),\n\n    [Trace.Types.Events.Name.SCHEDULE_POST_MESSAGE]:\n        new TimelineRecordStyle(i18nString(UIStrings.schedulePostMessage), defaultCategoryStyles.messaging),\n\n    [Trace.Types.Events.Name.SCHEDULE_POST_TASK_CALLBACK]:\n        new TimelineRecordStyle(i18nString(UIStrings.schedulePostTaskCallback), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.RUN_POST_TASK_CALLBACK]:\n        new TimelineRecordStyle(i18nString(UIStrings.runPostTaskCallback), defaultCategoryStyles.scripting),\n\n    [Trace.Types.Events.Name.ABORT_POST_TASK_CALLBACK]:\n        new TimelineRecordStyle(i18nString(UIStrings.abortPostTaskCallback), defaultCategoryStyles.scripting),\n    [Trace.Types.Events.Name.V8_CONSOLE_RUN_TASK]:\n        new TimelineRecordStyle(i18nString(UIStrings.consoleTaskRun), defaultCategoryStyles.scripting),\n  };\n\n  // TODO(crbug.com/410884528): remove assertion after deduped eventStylesMap for VISIBLE_TRACE_EVENT_TYPES.\n  const visibleEventStyles =\n      Object.entries(eventStylesMap).filter(([, style]) => style.hidden === false).map(([\n                                                                                         key,\n                                                                                       ]) => key);\n  const visibleTraceEventsComplete = visibleEventStyles.every(eventType => {\n    return Trace.Helpers.Trace.VISIBLE_TRACE_EVENT_TYPES.has(eventType as Trace.Types.Events.Name);\n  });\n\n  const eventStylesMapKeys = Object.keys(eventStylesMap) as Trace.Types.Events.Name[];\n  const eventStylesComplete = Array.from(Trace.Helpers.Trace.VISIBLE_TRACE_EVENT_TYPES).every(eventType => {\n    return eventStylesMapKeys.includes(eventType);\n  });\n\n  if (!visibleTraceEventsComplete || !eventStylesComplete) {\n    throw new Error('eventStylesMap and VISIBLE_TRACE_EVENT_TYPES are out of sync!');\n  }\n  return eventStylesMap;\n}\n\nexport function setEventStylesMap(eventStyles: EventStylesMap): void {\n  eventStylesMap = eventStyles;\n}\n\nexport function setCategories(cats: CategoryPalette): void {\n  categoryStyles = cats;\n}\n\nexport function visibleTypes(): string[] {\n  const eventStyles = maybeInitSylesMap();\n  const result = [];\n  for (const name in eventStyles) {\n    // Typescript cannot infer that `name` is a key of eventStyles\n    const nameAsKey = name as keyof typeof eventStyles;\n    if (!eventStyles[nameAsKey]?.hidden) {\n      result.push(name);\n    }\n  }\n  return result;\n}\n\nexport function getTimelineMainEventCategories(): EventCategory[] {\n  if (mainEventCategories) {\n    return mainEventCategories;\n  }\n  mainEventCategories = [\n    EventCategory.IDLE,\n    EventCategory.LOADING,\n    EventCategory.PAINTING,\n    EventCategory.RENDERING,\n    EventCategory.SCRIPTING,\n    EventCategory.OTHER,\n  ];\n  return mainEventCategories;\n}\n\nexport function setTimelineMainEventCategories(categories: EventCategory[]): void {\n  mainEventCategories = categories;\n}\n\nexport function markerDetailsForEvent(event: Trace.Types.Events.Event): {\n  color: string,\n  title: string,\n} {\n  let title = '';\n  let color = 'var(--color-text-primary)';\n  if (Trace.Types.Events.isFirstContentfulPaint(event)) {\n    color = 'var(--sys-color-green-bright)';\n    title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FCP;\n  }\n  if (Trace.Types.Events.isLargestContentfulPaintCandidate(event)) {\n    color = 'var(--sys-color-green)';\n    title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP;\n  }\n  if (Trace.Types.Events.isNavigationStart(event)) {\n    color = 'var(--color-text-primary)';\n    title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.NAV;\n  }\n  if (Trace.Types.Events.isMarkDOMContent(event)) {\n    color = 'var(--color-text-disabled)';\n    title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.DCL;\n  }\n  if (Trace.Types.Events.isMarkLoad(event)) {\n    color = 'var(--color-text-disabled)';\n    title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.L;\n  }\n  return {color, title};\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Bindings from '../../../models/bindings/bindings.js';\nimport * as SourceMapScopes from '../../../models/source_map_scopes/source_map_scopes.js';\nimport * as Trace from '../../../models/trace/trace.js';\nimport * as Workspace from '../../../models/workspace/workspace.js';\n\nimport type * as EntityMapper from './EntityMapper.js';\n\ninterface ResolvedCodeLocationData {\n  name: string|null;\n  devtoolsLocation: Workspace.UISourceCode.UILocation|null;\n  script: SDK.Script.Script|null;\n}\nexport class SourceMappingsUpdated extends Event {\n  static readonly eventName = 'sourcemappingsupdated';\n  constructor() {\n    super(SourceMappingsUpdated.eventName, {composed: true, bubbles: true});\n  }\n}\n\n// The code location key is created as a concatenation of its fields.\nexport const resolvedCodeLocationDataNames = new Map<string, ResolvedCodeLocationData|null>();\n\nexport class SourceMapsResolver extends EventTarget {\n  private executionContextNamesByOrigin = new Map<Platform.DevToolsPath.UrlString, string>();\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  #entityMapper: EntityMapper.EntityMapper|null = null;\n\n  #isResolving = false;\n\n  // We need to gather up a list of all the DebuggerModels that we should\n  // listen to for source map attached events. For most pages this will be\n  // the debugger model for the primary page target, but if a trace has\n  // workers, we would also need to gather up the DebuggerModel instances for\n  // those workers too.\n  #debuggerModelsToListen = new Set<SDK.DebuggerModel.DebuggerModel>();\n\n  constructor(parsedTrace: Trace.Handlers.Types.ParsedTrace, entityMapper?: EntityMapper.EntityMapper) {\n    super();\n    this.#parsedTrace = parsedTrace;\n    this.#entityMapper = entityMapper ?? null;\n  }\n\n  static clearResolvedNodeNames(): void {\n    resolvedCodeLocationDataNames.clear();\n  }\n  static keyForCodeLocation(callFrame: Protocol.Runtime.CallFrame): string {\n    return `${callFrame.url}$$$${callFrame.scriptId}$$$${callFrame.functionName}$$$${callFrame.lineNumber}$$$${\n        callFrame.columnNumber}`;\n  }\n\n  /**\n   * For trace events containing a call frame / source location\n   * (f.e. a stack trace), attempts to obtain the resolved source\n   * location based on the those that have been resolved so far from\n   * listened source maps.\n   *\n   * Note that a single deployed URL can map to multiple authored URLs\n   * (f.e. if an app is bundled). Thus, beyond a URL we can use code\n   * location data like line and column numbers to obtain the specific\n   * authored code according to the source mappings.\n   *\n   * TODO(andoli): This can return incorrect scripts if the target page has been reloaded since the trace.\n   */\n  static resolvedCodeLocationForCallFrame(callFrame: Protocol.Runtime.CallFrame): ResolvedCodeLocationData|null {\n    const codeLocationKey = this.keyForCodeLocation(callFrame);\n    return resolvedCodeLocationDataNames.get(codeLocationKey) ?? null;\n  }\n\n  static resolvedCodeLocationForEntry(entry: Trace.Types.Events.Event): ResolvedCodeLocationData|null {\n    let callFrame = null;\n    if (Trace.Types.Events.isProfileCall(entry)) {\n      callFrame = entry.callFrame;\n    } else {\n      const stackTrace = Trace.Helpers.Trace.getZeroIndexedStackTraceInEventPayload(entry);\n      if (stackTrace === null || stackTrace.length < 1) {\n        return null;\n      }\n      callFrame = stackTrace[0];\n    }\n    return SourceMapsResolver.resolvedCodeLocationForCallFrame(callFrame as Protocol.Runtime.CallFrame);\n  }\n\n  static resolvedURLForEntry(parsedTrace: Trace.Handlers.Types.ParsedTrace, entry: Trace.Types.Events.Event):\n      Platform.DevToolsPath.UrlString|null {\n    const resolvedCallFrameURL =\n        SourceMapsResolver.resolvedCodeLocationForEntry(entry)?.devtoolsLocation?.uiSourceCode.url();\n    if (resolvedCallFrameURL) {\n      return resolvedCallFrameURL;\n    }\n    // If no source mapping was found for an entry's URL, then default\n    // to the URL value contained in the event itself, if any.\n    const url = Trace.Handlers.Helpers.getNonResolvedURL(entry, parsedTrace);\n    if (url) {\n      return Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(url)?.url() ?? url;\n    }\n    return null;\n  }\n\n  static storeResolvedCodeDataForCallFrame(\n      callFrame: Protocol.Runtime.CallFrame, resolvedCodeLocationData: ResolvedCodeLocationData): void {\n    const keyForCallFrame = this.keyForCodeLocation(callFrame);\n    resolvedCodeLocationDataNames.set(keyForCallFrame, resolvedCodeLocationData);\n  }\n\n  async install(): Promise<void> {\n    for (const threadToProfileMap of this.#parsedTrace.Samples.profilesInProcess.values()) {\n      for (const [tid, profile] of threadToProfileMap) {\n        const nodes = profile.parsedProfile.nodes();\n        if (!nodes || nodes.length === 0) {\n          continue;\n        }\n\n        const target = this.#targetForThread(tid);\n        const debuggerModel = target?.model(SDK.DebuggerModel.DebuggerModel);\n        if (!debuggerModel) {\n          continue;\n        }\n        for (const node of nodes) {\n          const script = debuggerModel.scriptForId(String(node.callFrame.scriptId));\n          const shouldListenToSourceMap = !script || script.sourceMapURL;\n          if (!shouldListenToSourceMap) {\n            continue;\n          }\n          this.#debuggerModelsToListen.add(debuggerModel);\n        }\n      }\n    }\n\n    for (const debuggerModel of this.#debuggerModelsToListen) {\n      debuggerModel.sourceMapManager().addEventListener(\n          SDK.SourceMapManager.Events.SourceMapAttached, this.#onAttachedSourceMap, this);\n    }\n\n    this.#updateExtensionNames();\n\n    // Although we have added listeners for SourceMapAttached events, we also\n    // immediately try to resolve function names. This ensures we use any\n    // sourcemaps that were attached before we bound our event listener.\n    await this.#resolveMappingsForProfileNodes();\n  }\n\n  /**\n   * Removes the event listeners and stops tracking newly added sourcemaps.\n   * Should be called before destroying an instance of this class to avoid leaks\n   * with listeners.\n   */\n  uninstall(): void {\n    for (const debuggerModel of this.#debuggerModelsToListen) {\n      debuggerModel.sourceMapManager().removeEventListener(\n          SDK.SourceMapManager.Events.SourceMapAttached, this.#onAttachedSourceMap, this);\n    }\n    this.#debuggerModelsToListen.clear();\n  }\n\n  async #resolveMappingsForProfileNodes(): Promise<void> {\n    // Used to track if source mappings were updated when a source map\n    // is attach. If not, we do not notify the flamechart that mappings\n    // were updated, since that would trigger a rerender.\n    let updatedMappings = false;\n    for (const [, threadsInProcess] of this.#parsedTrace.Samples.profilesInProcess) {\n      for (const [tid, threadProfile] of threadsInProcess) {\n        const nodes = threadProfile.parsedProfile.nodes() ?? [];\n        const target = this.#targetForThread(tid);\n        if (!target) {\n          continue;\n        }\n        for (const node of nodes) {\n          const resolvedFunctionName =\n              await SourceMapScopes.NamesResolver.resolveProfileFrameFunctionName(node.callFrame, target);\n          updatedMappings ||= Boolean(resolvedFunctionName);\n          node.setFunctionName(resolvedFunctionName);\n\n          const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n          const script = debuggerModel?.scriptForId(node.scriptId) || null;\n          const location = debuggerModel &&\n              new SDK.DebuggerModel.Location(\n                  debuggerModel, node.callFrame.scriptId, node.callFrame.lineNumber, node.callFrame.columnNumber);\n          const uiLocation = location &&\n              await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().rawLocationToUILocation(\n                  location);\n          updatedMappings ||= Boolean(uiLocation);\n          if (uiLocation?.uiSourceCode.url() && this.#entityMapper) {\n            // Update mappings for the related events of the entity.\n            this.#entityMapper.updateSourceMapEntities(node.callFrame, uiLocation.uiSourceCode.url());\n          }\n\n          SourceMapsResolver.storeResolvedCodeDataForCallFrame(\n              node.callFrame, {name: resolvedFunctionName, devtoolsLocation: uiLocation, script});\n        }\n      }\n    }\n    if (!updatedMappings) {\n      return;\n    }\n    this.dispatchEvent(new SourceMappingsUpdated());\n  }\n\n  #onAttachedSourceMap(): void {\n    // Exit if we are already resolving so that we batch requests; if pages\n    // have a lot of sourcemaps we can get a lot of events at once.\n    if (this.#isResolving) {\n      return;\n    }\n\n    this.#isResolving = true;\n    // Resolving names triggers a repaint of the flame chart. Instead of attempting to resolve\n    // names every time a source map is attached, wait for some time once the first source map is\n    // attached. This way we allow for other source maps to be parsed before attempting a name\n    // resolving using the available source maps. Otherwise the UI is blocked when the number\n    // of source maps is particularly large.\n    setTimeout(async () => {\n      this.#isResolving = false;\n      await this.#resolveMappingsForProfileNodes();\n    }, 500);\n  }\n\n  // Figure out the target for the node. If it is in a worker thread,\n  // that is the target, otherwise we use the primary page target.\n  #targetForThread(tid: Trace.Types.Events.ThreadID): SDK.Target.Target|null {\n    const maybeWorkerId = this.#parsedTrace.Workers.workerIdByThread.get(tid);\n    if (maybeWorkerId) {\n      return SDK.TargetManager.TargetManager.instance().targetById(maybeWorkerId);\n    }\n    return SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n  }\n\n  #updateExtensionNames(): void {\n    for (const runtimeModel of SDK.TargetManager.TargetManager.instance().models(SDK.RuntimeModel.RuntimeModel)) {\n      for (const context of runtimeModel.executionContexts()) {\n        this.executionContextNamesByOrigin.set(context.origin, context.name);\n      }\n    }\n    this.#entityMapper?.updateExtensionEntitiesWithName(this.executionContextNamesByOrigin);\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Trace from '../../../models/trace/trace.js';\n\nimport type {AICallTree} from './AICallTree.js';\n\nexport interface AgentFocusDataFull {\n  type: 'full';\n  parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  insightSet: Trace.Insights.Types.InsightSet|null;\n  traceMetadata: Trace.Types.File.MetaData;\n}\n\ninterface AgentFocusDataCallTree {\n  type: 'call-tree';\n  parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  callTree: AICallTree;\n}\n\ninterface AgentFocusDataInsight {\n  type: 'insight';\n  parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  insight: Trace.Insights.Types.InsightModel;\n  insightSetBounds: Trace.Types.Timing.TraceWindowMicro;\n}\n\ntype AgentFocusData = AgentFocusDataCallTree|AgentFocusDataInsight|AgentFocusDataFull;\n\nexport class AgentFocus {\n  static full(\n      parsedTrace: Trace.Handlers.Types.ParsedTrace, insightSet: Trace.Insights.Types.InsightSet|null,\n      traceMetadata: Trace.Types.File.MetaData): AgentFocus {\n    return new AgentFocus({\n      type: 'full',\n      parsedTrace,\n      insightSet,\n      traceMetadata,\n    });\n  }\n\n  static fromInsight(\n      parsedTrace: Trace.Handlers.Types.ParsedTrace, insight: Trace.Insights.Types.InsightModel,\n      insightSetBounds: Trace.Types.Timing.TraceWindowMicro): AgentFocus {\n    return new AgentFocus({\n      type: 'insight',\n      parsedTrace,\n      insight,\n      insightSetBounds,\n    });\n  }\n\n  static fromCallTree(callTree: AICallTree): AgentFocus {\n    return new AgentFocus({type: 'call-tree', parsedTrace: callTree.parsedTrace, callTree});\n  }\n\n  #data: AgentFocusData;\n\n  constructor(data: AgentFocusData) {\n    this.#data = data;\n  }\n\n  get data(): AgentFocusData {\n    return this.#data;\n  }\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../core/platform/platform.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Trace from '../../../models/trace/trace.js';\n\nexport class EntityMapper {\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  #entityMappings: Trace.Handlers.Helpers.EntityMappings;\n  #firstPartyEntity: Trace.Handlers.Helpers.Entity|null;\n  #thirdPartyEvents: Trace.Types.Events.Event[] = [];\n  /**\n   * When resolving urls and updating our entity mapping in the\n   * SourceMapsResolver, a single call frame can appear multiple times\n   * as different cpu profile nodes. To avoid duplicate work on the\n   * same CallFrame, we can keep track of them.\n   */\n  #resolvedCallFrames = new Set<Protocol.Runtime.CallFrame>();\n\n  constructor(parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    this.#parsedTrace = parsedTrace;\n    this.#entityMappings = this.#parsedTrace.Renderer.entityMappings;\n    this.#firstPartyEntity = this.#findFirstPartyEntity();\n    this.#thirdPartyEvents = this.#getThirdPartyEvents();\n  }\n\n  #findFirstPartyEntity(): Trace.Handlers.Helpers.Entity|null {\n    // As a starting point, we consider the first navigation as the 1P.\n    const nav = Array.from(this.#parsedTrace.Meta.navigationsByNavigationId.values()).sort((a, b) => a.ts - b.ts)[0];\n    const firstPartyUrl = nav?.args.data?.documentLoaderURL ?? this.#parsedTrace.Meta.mainFrameURL;\n    if (!firstPartyUrl) {\n      return null;\n    }\n    return Trace.Handlers.Helpers.getEntityForUrl(firstPartyUrl, this.#entityMappings) ?? null;\n  }\n\n  #getThirdPartyEvents(): Trace.Types.Events.Event[] {\n    const entries = Array.from(this.#entityMappings.eventsByEntity.entries());\n    const thirdPartyEvents = entries.flatMap(([entity, events]) => {\n      return entity !== this.#firstPartyEntity ? events : [];\n    });\n    return thirdPartyEvents;\n  }\n\n  /**\n   * Returns an entity for a given event if any.\n   */\n  entityForEvent(event: Trace.Types.Events.Event): Trace.Handlers.Helpers.Entity|null {\n    return this.#entityMappings.entityByEvent.get(event) ?? null;\n  }\n\n  /**\n   * Returns trace events that correspond with a given entity if any.\n   */\n  eventsForEntity(entity: Trace.Handlers.Helpers.Entity): Trace.Types.Events.Event[] {\n    return this.#entityMappings.eventsByEntity.get(entity) ?? [];\n  }\n\n  firstPartyEntity(): Trace.Handlers.Helpers.Entity|null {\n    return this.#firstPartyEntity;\n  }\n\n  thirdPartyEvents(): Trace.Types.Events.Event[] {\n    return this.#thirdPartyEvents;\n  }\n\n  mappings(): Trace.Handlers.Helpers.EntityMappings {\n    return this.#entityMappings;\n  }\n\n  /**\n   * This updates entity mapping given a callFrame and sourceURL (newly resolved),\n   * updating both eventsByEntity and entityByEvent. The call frame provides us the\n   * URL and sourcemap source location that events map to. This describes the exact events we\n   * want to update. We then update the events with the new sourceURL.\n   *\n   * compiledURLs -> the actual file's url (e.g. my-big-bundle.min.js)\n   * sourceURLs -> the resolved urls (e.g. react.development.js, my-app.ts)\n   * @param callFrame\n   * @param sourceURL\n   */\n  updateSourceMapEntities(callFrame: Protocol.Runtime.CallFrame, sourceURL: string): void {\n    // Avoid the extra work, if we have already resolved this callFrame.\n    if (this.#resolvedCallFrames.has(callFrame)) {\n      return;\n    }\n\n    const compiledURL = callFrame.url;\n    const currentEntity = Trace.Handlers.Helpers.getEntityForUrl(compiledURL, this.#entityMappings);\n    const resolvedEntity = Trace.Handlers.Helpers.getEntityForUrl(sourceURL, this.#entityMappings);\n    // If the entity changed, then we should update our caches. If we don't have a currentEntity,\n    // we can't do much with that. Additionally without our current entity, we don't have a reference to the related\n    // events so there are no relationships to be made.\n    if ((resolvedEntity === currentEntity) || (!currentEntity || !resolvedEntity)) {\n      return;\n    }\n    const currentEntityEvents = (currentEntity && this.#entityMappings.eventsByEntity.get(currentEntity)) ?? [];\n    // The events of the entity that match said source location.\n    const sourceLocationEvents: Trace.Types.Events.Event[] = [];\n    // The events that don't match the source location, but that we should keep mapped to its current entity.\n    const unrelatedEvents: Trace.Types.Events.Event[] = [];\n    currentEntityEvents?.forEach(e => {\n      const stackTrace = Trace.Helpers.Trace.getZeroIndexedStackTraceInEventPayload(e);\n      const cf = stackTrace?.at(0);\n\n      const matchesCallFrame = cf && Trace.Helpers.Trace.isMatchingCallFrame(cf, callFrame);\n      if (matchesCallFrame) {\n        sourceLocationEvents.push(e);\n      } else {\n        unrelatedEvents.push(e);\n      }\n    });\n    // Update current entity.\n    this.#entityMappings.eventsByEntity.set(currentEntity, unrelatedEvents);\n    // Map the source location events to the new entity.\n    this.#entityMappings.eventsByEntity.set(resolvedEntity, sourceLocationEvents);\n    sourceLocationEvents.forEach(e => {\n      this.#entityMappings.entityByEvent.set(e, resolvedEntity);\n    });\n    // Update our CallFrame cache when we've got a resolved entity.\n    this.#resolvedCallFrames.add(callFrame);\n  }\n\n  // Update entities with proper Chrome Extension names.\n  updateExtensionEntitiesWithName(executionContextNamesByOrigin: Map<Platform.DevToolsPath.UrlString, string>): void {\n    const entities = Array.from(this.#entityMappings.eventsByEntity.keys());\n    for (const [origin, name] of executionContextNamesByOrigin) {\n      // In makeUpChromeExtensionEntity, the extension origin is set as the only domain for the entity.\n      const entity = entities.find(e => e.domains[0] === origin);\n      if (entity) {\n        entity.name = entity.company = name;\n      }\n    }\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Trace from '../../../models/trace/trace.js';\n\nconst nodeIdsForEventCache = new WeakMap<Trace.Types.Events.Event, Set<Protocol.DOM.BackendNodeId>>();\nconst domNodesForEventCache =\n    new WeakMap<Trace.Types.Events.Event, Map<Protocol.DOM.BackendNodeId, SDK.DOMModel.DOMNode|null>>();\n\n/**\n * Extracts a set of NodeIds for a given event.\n * The result is cached so you can safely call this multiple times.\n **/\nexport function nodeIdsForEvent(\n    modelData: Trace.Handlers.Types.ParsedTrace,\n    event: Trace.Types.Events.Event,\n    ): Set<Protocol.DOM.BackendNodeId> {\n  const fromCache = nodeIdsForEventCache.get(event);\n  if (fromCache) {\n    return fromCache;\n  }\n  const foundIds = new Set<Protocol.DOM.BackendNodeId>();\n\n  if (Trace.Types.Events.isLayout(event)) {\n    event.args.endData?.layoutRoots.forEach(root => foundIds.add(root.nodeId));\n  } else if (Trace.Types.Events.isSyntheticLayoutShift(event) && event.args.data?.impacted_nodes) {\n    event.args.data.impacted_nodes.forEach(node => foundIds.add(node.node_id));\n  } else if (\n      Trace.Types.Events.isLargestContentfulPaintCandidate(event) && typeof event.args.data?.nodeId !== 'undefined') {\n    foundIds.add(event.args.data.nodeId);\n  } else if (Trace.Types.Events.isPaint(event) && typeof event.args.data.nodeId !== 'undefined') {\n    foundIds.add(event.args.data.nodeId);\n  } else if (Trace.Types.Events.isPaintImage(event) && typeof event.args.data.nodeId !== 'undefined') {\n    foundIds.add(event.args.data.nodeId);\n  } else if (Trace.Types.Events.isScrollLayer(event) && typeof event.args.data.nodeId !== 'undefined') {\n    foundIds.add(event.args.data.nodeId);\n  } else if (\n      Trace.Types.Events.isSyntheticAnimation(event) &&\n      typeof event.args.data.beginEvent.args.data.nodeId !== 'undefined') {\n    foundIds.add(event.args.data.beginEvent.args.data.nodeId);\n  } else if (Trace.Types.Events.isDecodeImage(event)) {\n    // For a DecodeImage event, we can use the ImagePaintingHandler, which has\n    // done the work to build the relationship between a DecodeImage event and\n    // the corresponding PaintImage event.\n    const paintImageEvent = modelData.ImagePainting.paintImageForEvent.get(event);\n    if (typeof paintImageEvent?.args.data.nodeId !== 'undefined') {\n      foundIds.add(paintImageEvent.args.data.nodeId);\n    }\n  } else if (Trace.Types.Events.isDrawLazyPixelRef(event) && event.args?.LazyPixelRef) {\n    const paintImageEvent = modelData.ImagePainting.paintImageByDrawLazyPixelRef.get(event.args.LazyPixelRef);\n    if (typeof paintImageEvent?.args.data.nodeId !== 'undefined') {\n      foundIds.add(paintImageEvent.args.data.nodeId);\n    }\n  } else if (Trace.Types.Events.isParseMetaViewport(event) && typeof event.args?.data.node_id !== 'undefined') {\n    foundIds.add(event.args.data.node_id);\n  }\n  nodeIdsForEventCache.set(event, foundIds);\n  return foundIds;\n}\n\n/**\n * Looks up for backend node ids in different types of trace events\n * and resolves them into related DOM nodes.\n * This method is cached for the given event.\n */\nexport async function relatedDOMNodesForEvent(\n    modelData: Trace.Handlers.Types.ParsedTrace,\n    event: Trace.Types.Events.Event): Promise<Map<Protocol.DOM.BackendNodeId, SDK.DOMModel.DOMNode|null>|null> {\n  const fromCache = domNodesForEventCache.get(event);\n  if (fromCache) {\n    return fromCache;\n  }\n\n  const nodeIds = nodeIdsForEvent(modelData, event);\n  if (nodeIds.size) {\n    const frame = event.args?.data?.frame as Protocol.Page.FrameId;\n    const result = await domNodesForBackendIds(frame, nodeIds);\n    domNodesForEventCache.set(event, result);\n    return result;\n  }\n\n  return null;\n}\n\n/**\n * Takes a set of Protocol.DOM.BackendNodeId ids and will return a map of NodeId=>DOMNode.\n */\nexport async function domNodesForBackendIds(frameId: Protocol.Page.FrameId, nodeIds: Set<Protocol.DOM.BackendNodeId>):\n    Promise<Map<Protocol.DOM.BackendNodeId, SDK.DOMModel.DOMNode|null>> {\n  const target = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n  const domModel = target?.model(SDK.DOMModel.DOMModel);\n  const resourceTreeModel = target?.model(SDK.ResourceTreeModel.ResourceTreeModel);\n  if (!domModel || !resourceTreeModel) {\n    return new Map();\n  }\n\n  // The node is only relevant if the target contains the specified frame.\n  // For now, allow events that specify no frame id to continue to resolve a node.\n  if (frameId && !resourceTreeModel.frames().some(frame => frame.id === frameId)) {\n    return new Map();\n  }\n\n  return await domModel.pushNodesByBackendIdsToFrontend(nodeIds) || new Map();\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../../models/trace/trace.js';\n\nexport class EventsSerializer {\n  #modifiedProfileCallByKey = new Map<Trace.Types.File.ProfileCallKeyValues, Trace.Types.Events.SyntheticProfileCall>();\n\n  keyForEvent(event: Trace.Types.Events.Event): Trace.Types.File.SerializableKey|null {\n    if (Trace.Types.Events.isProfileCall(event)) {\n      return `${Trace.Types.File.EventKeyType.PROFILE_CALL}-${event.pid}-${event.tid}-${\n          Trace.Types.Events.SampleIndex(event.sampleIndex)}-${event.nodeId}`;\n    }\n\n    if (Trace.Types.Events.isLegacyTimelineFrame(event)) {\n      return `${Trace.Types.File.EventKeyType.LEGACY_TIMELINE_FRAME}-${event.index}`;\n    }\n\n    const rawEvents = Trace.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getRawTraceEvents();\n    const key: Trace.Types.File.SyntheticEventKey|Trace.Types.File.RawEventKey =\n        Trace.Types.Events.isSyntheticBased(event) ?\n        `${Trace.Types.File.EventKeyType.SYNTHETIC_EVENT}-${rawEvents.indexOf(event.rawSourceEvent)}` :\n        `${Trace.Types.File.EventKeyType.RAW_EVENT}-${rawEvents.indexOf(event)}`;\n    if (key.length < 3) {\n      return null;\n    }\n    return key;\n  }\n\n  eventForKey(key: Trace.Types.File.SerializableKey, parsedTrace: Trace.Handlers.Types.ParsedTrace):\n      Trace.Types.Events.Event {\n    const eventValues = Trace.Types.File.traceEventKeyToValues(key);\n\n    if (EventsSerializer.isProfileCallKey(eventValues)) {\n      return this.#getModifiedProfileCallByKeyValues(eventValues, parsedTrace);\n    }\n\n    if (EventsSerializer.isLegacyTimelineFrameKey(eventValues)) {\n      const event = parsedTrace.Frames.frames.at(eventValues.rawIndex);\n      if (!event) {\n        throw new Error(`Could not find frame with index ${eventValues.rawIndex}`);\n      }\n      return event;\n    }\n\n    if (EventsSerializer.isSyntheticEventKey(eventValues)) {\n      const syntheticEvents =\n          Trace.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getSyntheticTraces();\n      const syntheticEvent = syntheticEvents.at(eventValues.rawIndex);\n      if (!syntheticEvent) {\n        throw new Error(`Attempted to get a synthetic event from an unknown raw event index: ${eventValues.rawIndex}`);\n      }\n      return syntheticEvent;\n    }\n\n    if (EventsSerializer.isRawEventKey(eventValues)) {\n      const rawEvents = Trace.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getRawTraceEvents();\n      return rawEvents[eventValues.rawIndex];\n    }\n    throw new Error(`Unknown trace event serializable key values: ${(eventValues as unknown[]).join('-')}`);\n  }\n\n  static isProfileCallKey(key: Trace.Types.File.SerializableKeyValues): key is Trace.Types.File.ProfileCallKeyValues {\n    return key.type === Trace.Types.File.EventKeyType.PROFILE_CALL;\n  }\n  static isLegacyTimelineFrameKey(key: Trace.Types.File.SerializableKeyValues):\n      key is Trace.Types.File.LegacyTimelineFrameKeyValues {\n    return key.type === Trace.Types.File.EventKeyType.LEGACY_TIMELINE_FRAME;\n  }\n\n  static isRawEventKey(key: Trace.Types.File.SerializableKeyValues): key is Trace.Types.File.RawEventKeyValues {\n    return key.type === Trace.Types.File.EventKeyType.RAW_EVENT;\n  }\n  static isSyntheticEventKey(key: Trace.Types.File.SerializableKeyValues):\n      key is Trace.Types.File.SyntheticEventKeyValues {\n    return key.type === Trace.Types.File.EventKeyType.SYNTHETIC_EVENT;\n  }\n\n  #getModifiedProfileCallByKeyValues(\n      key: Trace.Types.File.ProfileCallKeyValues,\n      parsedTrace: Trace.Handlers.Types.ParsedTrace): Trace.Types.Events.SyntheticProfileCall {\n    const cacheResult = this.#modifiedProfileCallByKey.get(key);\n    if (cacheResult) {\n      return cacheResult;\n    }\n    const profileCallsInThread =\n        parsedTrace.Renderer.processes.get(key.processID)?.threads.get(key.threadID)?.profileCalls;\n    if (!profileCallsInThread) {\n      throw new Error(`Unknown profile call serializable key: ${(key)}`);\n    }\n\n    const match = profileCallsInThread?.find(e => {\n      return e.sampleIndex === key.sampleIndex && e.nodeId === key.protocol;\n    });\n    if (!match) {\n      throw new Error(`Unknown profile call serializable key: ${(JSON.stringify(key))}`);\n    }\n    // Cache to avoid looking up in subsequent calls.\n    this.#modifiedProfileCallByKey.set(key, match);\n    return match;\n  }\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../ui/components/markdown_view/markdown_view.js';\n\nimport type * as Common from '../../../core/common/common.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as CrUXManager from '../../../models/crux-manager/crux-manager.js';\nimport type * as Trace from '../../../models/trace/trace.js';\nimport * as Marked from '../../../third_party/marked/marked.js';\nimport * as Lit from '../../../ui/lit/lit.js';\nimport * as MobileThrottling from '../../mobile_throttling/mobile_throttling.js';\n\nconst {html} = Lit;\nconst MAX_ORIGIN_LENGTH = 60;\n\nexport function getThrottlingRecommendations(): {\n  cpuOption: SDK.CPUThrottlingManager.CPUThrottlingOption|null,\n  networkConditions: SDK.NetworkManager.Conditions|null,\n} {\n  let cpuOption: SDK.CPUThrottlingManager.CPUThrottlingOption =\n      SDK.CPUThrottlingManager.CalibratedMidTierMobileThrottlingOption;\n  if (cpuOption.rate() === 0) {\n    cpuOption = SDK.CPUThrottlingManager.MidTierThrottlingOption;\n  }\n\n  let networkConditions = null;\n  const response = CrUXManager.CrUXManager.instance().getSelectedFieldMetricData('round_trip_time');\n  if (response?.percentiles) {\n    const rtt = Number(response.percentiles.p75);\n    networkConditions = MobileThrottling.ThrottlingPresets.ThrottlingPresets.getRecommendedNetworkPreset(rtt);\n  }\n\n  return {\n    cpuOption,\n    networkConditions,\n  };\n}\n\nfunction createTrimmedUrlSearch(url: URL): string {\n  const maxSearchValueLength = 8;\n  let search = '';\n\n  for (const [key, value] of url.searchParams) {\n    if (search) {\n      search += '&';\n    }\n    if (value) {\n      search += `${key}=${Platform.StringUtilities.trimEndWithMaxLength(value, maxSearchValueLength)}`;\n    } else {\n      search += key;\n    }\n  }\n  if (search) {\n    search = '?' + search;\n  }\n\n  return search;\n}\n\n/**\n * Shortens URLs as much as possible while keeping important context.\n *\n * - Elides the host if the previous url is the same host+protocol\n * - Always elide search param values\n * - Always includes protocol/domain if there is a mix of protocols\n * - First URL is elided fully to show just the pathname, unless there is a mix of protocols (see above)\n */\nexport function createUrlLabels(urls: URL[]): string[] {\n  const labels: string[] = [];\n  const isAllHttps = urls.every(url => url.protocol === 'https:');\n\n  for (const [index, url] of urls.entries()) {\n    const previousUrl = urls[index - 1];\n    const sameHostAndProtocol = previousUrl && url.host === previousUrl.host && url.protocol === previousUrl.protocol;\n    let elideHost = sameHostAndProtocol;\n    let elideProtocol = isAllHttps;\n\n    // For the first URL, show just the pathname and search - this will be relative to the domain as seen in the\n    // trace dropdown selector. Exception is if there are non-https protocols, in which case we're only going to elide\n    // parts of the query string.\n    if (index === 0 && isAllHttps) {\n      elideHost = true;\n      elideProtocol = true;\n    }\n\n    const search = createTrimmedUrlSearch(url);\n    if (!elideProtocol) {\n      labels.push(`${url.protocol}//${url.host}${url.pathname}${search}`);\n    } else if (!elideHost) {\n      labels.push(`${url.host}${url.pathname}${search}`);\n    } else {\n      labels.push(`${url.pathname}${search}`);\n    }\n  }\n\n  // Lastly, remove any trailing `/`.\n  return labels.map(label => label.length > 1 && label.endsWith('/') ? label.substring(0, label.length - 1) : label);\n}\n\n/**\n * Shortens the provided URL for use within a narrow display usecase.\n *\n * The resulting string will at least contain the last path component of the URL.\n * More components are included until a limit of maxChars (default 20) is reached.\n * No querystring is included.\n *\n * If the last path component is larger than maxChars characters, the middle is elided.\n */\nexport function shortenUrl(url: URL, maxChars = 20): string {\n  const parts = url.pathname === '/' ? [url.host] : url.pathname.split('/');\n  let shortenedUrl = parts.at(-1) ?? '';\n\n  if (shortenedUrl.length > maxChars) {\n    return Platform.StringUtilities.trimMiddle(shortenedUrl, maxChars);\n  }\n\n  let i = parts.length - 1;\n  while (--i >= 0) {\n    if (shortenedUrl.length + parts[i].length <= maxChars) {\n      shortenedUrl = `${parts[i]}/${shortenedUrl}`;\n    }\n  }\n\n  return shortenedUrl;\n}\n\n/**\n * Returns a rendered MarkdownView component.\n *\n * This should only be used for markdown that is guaranteed to be valid,\n * and not contain any user-generated content.\n */\nexport function md(markdown: Common.UIString.LocalizedString): Lit.TemplateResult {\n  const tokens = Marked.Marked.lexer(markdown);\n  const data = {tokens};\n  return html`<devtools-markdown-view .data=${data}></devtools-markdown-view>`;\n}\n\n/**\n * Returns a string containing both the origin and its 3rd party entity.\n *\n * By default we construct by diving with a hyphen, but with an optional\n * parenthesizeEntity to parenthesize the entity.\n *\n * @example 'uk-script.dotmetrics.net - DotMetrics'\n * @example 'securepubads.g.doubleclick.net (Google/Doubleclick Ads)'\n */\nexport function formatOriginWithEntity(\n    url: URL, entity: Trace.Handlers.Helpers.Entity|null, parenthesizeEntity?: boolean): string {\n  const origin = url.origin.replace('https://', '');\n  if (!entity) {\n    return origin;\n  }\n  let originWithEntity;\n  // If we have an unrecognized entity, entity name would be the same as the origin.\n  if (entity.isUnrecognized) {\n    originWithEntity = `${origin}`;\n  } else {\n    originWithEntity = parenthesizeEntity ? `${origin} (${entity.name})` : `${origin} - ${entity.name}`;\n  }\n\n  originWithEntity = Platform.StringUtilities.trimEndWithMaxLength(originWithEntity, MAX_ORIGIN_LENGTH);\n  return originWithEntity;\n}\n\n// Thin wrapper class to enable revealing an individual insight in Timeline panel.\nexport class RevealableInsight {\n  constructor(public insight: Trace.Insights.Types.InsightModel) {\n  }\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as Trace from '../../../models/trace/trace.js';\nimport * as Workspace from '../../../models/workspace/workspace.js';\n\nimport {SourceMapsResolver} from './SourceMapsResolver.js';\n\nconst UIStrings = {\n  /**\n   * @description Refers to when skipping content scripts is enabled and the current script is ignored because it's a content script.\n   */\n  skipContentScripts: 'Content script',\n  /**\n   * @description Refers to when skipping known third party scripts is enabled and the current script is ignored because it's a known third party script.\n   */\n  skip3rdPartyScripts: 'Marked with ignoreList in source map',\n  /**\n   * @description Refers to when skipping anonymous scripts is enabled and the current script is ignored because is an anonymous script.\n   */\n  skipAnonymousScripts: 'Anonymous script',\n  /**\n   * @description Refers to when the current script is ignored because of an unknown rule.\n   */\n  unknown: 'Unknown',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/utils/IgnoreList.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nfunction getUrlAndIgnoreListOptions(entry: Trace.Types.Events.SyntheticProfileCall):\n    {url: Platform.DevToolsPath.UrlString, ignoreListOptions: Workspace.IgnoreListManager.IgnoreListGeneralRules} {\n  const rawUrl = entry.callFrame.url as Platform.DevToolsPath.UrlString;\n\n  const sourceMappedData = SourceMapsResolver.resolvedCodeLocationForEntry(entry);\n  const script = sourceMappedData?.script;\n  const uiSourceCode = sourceMappedData?.devtoolsLocation?.uiSourceCode;\n  const resolvedUrl = uiSourceCode?.url();\n  const isKnownThirdParty = uiSourceCode?.isKnownThirdParty();\n  const isContentScript = script?.isContentScript();\n  const ignoreListOptions: Workspace.IgnoreListManager.IgnoreListGeneralRules = {isContentScript, isKnownThirdParty};\n  const url = resolvedUrl || rawUrl;\n  return {url, ignoreListOptions};\n}\n\nexport function isIgnoreListedEntry(entry: Trace.Types.Events.Event): boolean {\n  if (!Trace.Types.Events.isProfileCall(entry)) {\n    return false;\n  }\n  const {url, ignoreListOptions} = getUrlAndIgnoreListOptions(entry);\n  return isIgnoreListedURL(url, ignoreListOptions);\n}\n\nfunction isIgnoreListedURL(\n    url: Platform.DevToolsPath.UrlString, options?: Workspace.IgnoreListManager.IgnoreListGeneralRules): boolean {\n  return Workspace.IgnoreListManager.IgnoreListManager.instance().isUserIgnoreListedURL(url, options);\n}\n\n/**\n * Returns the ignore reason for the given entry.\n *\n * This function should be called when `isIgnoreListedEntry(entry)` is true\n */\nexport function getIgnoredReasonString(entry: Trace.Types.Events.Event): string {\n  if (!Trace.Types.Events.isProfileCall(entry)) {\n    console.warn('Ignore list feature should only support ProfileCall.');\n    return '';\n  }\n  const {url, ignoreListOptions} = getUrlAndIgnoreListOptions(entry);\n\n  const ignoreListMgr = Workspace.IgnoreListManager.IgnoreListManager.instance();\n  if (ignoreListOptions.isContentScript && ignoreListMgr.skipContentScripts) {\n    return i18nString(UIStrings.skipContentScripts);\n  }\n  if (ignoreListOptions.isKnownThirdParty && ignoreListMgr.automaticallyIgnoreListKnownThirdPartyScripts) {\n    return i18nString(UIStrings.skip3rdPartyScripts);\n  }\n\n  if (!url) {\n    if (ignoreListMgr.skipAnonymousScripts) {\n      return i18nString(UIStrings.skipAnonymousScripts);\n    }\n    // This branch shouldn't be reached because when |skipAnonymousScripts| is false, this url is not ignored.\n    // So just return empty string to make the type check work.\n    return '';\n  }\n  const regex = ignoreListMgr.getFirstMatchedRegex(url);\n  return regex ? regex.source : i18nString(UIStrings.unknown);\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../../models/trace/trace.js';\n\nconst imageCache =\n    new WeakMap<Trace.Types.Events.LegacySyntheticScreenshot|Trace.Types.Events.Screenshot, HTMLImageElement|null>();\nexport const emitter = new EventTarget();\n\n/**\n * Synchronously returns an image, or return `null` while queuing up an async load of that image.\n * If the image load fails, we cache a null to avoid reattempts.\n */\nexport function getOrQueue(screenshot: Trace.Types.Events.LegacySyntheticScreenshot|\n                           Trace.Types.Events.Screenshot): HTMLImageElement|null {\n  if (imageCache.has(screenshot)) {\n    return imageCache.get(screenshot) ?? null;\n  }\n\n  const uri = Trace.Handlers.ModelHandlers.Screenshots.screenshotImageDataUri(screenshot);\n\n  loadImage(uri)\n      .then(imageOrNull => {\n        imageCache.set(screenshot, imageOrNull);\n        emitter.dispatchEvent(new CustomEvent('screenshot-loaded', {detail: {screenshot, image: imageOrNull}}));\n      })\n      .catch(() => {});\n  return null;\n}\n\n/** Load an image (probably data URI). If it fails, resolve with null. */\nfunction loadImage(url: string): Promise<HTMLImageElement|null> {\n  return new Promise(resolve => {\n    const image = new Image();\n    image.addEventListener('load', () => resolve(image));\n    image.addEventListener('error', () => resolve(null));\n    image.src = url;\n  });\n}\n\n/** Populate the cache ahead of use, to allow for getOrQueue to synchronously return images. */\nexport function preload(screenshots: Array<Trace.Types.Events.LegacySyntheticScreenshot|Trace.Types.Events.Screenshot>):\n    Promise<void[]> {\n  const promises = screenshots.map(screenshot => {\n    if (imageCache.has(screenshot)) {\n      return;\n    }\n    const uri = Trace.Handlers.ModelHandlers.Screenshots.screenshotImageDataUri(screenshot);\n    return loadImage(uri).then(image => {\n      imageCache.set(screenshot, image);\n      return;\n    });\n  });\n  return Promise.all(promises);\n}\n\nexport const cacheForTesting = imageCache;\nexport const loadImageForTesting = loadImage;\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../../models/trace/trace.js';\n\nimport {AICallTree} from './AICallTree.js';\n\nexport class AIQueries {\n  /**\n   * Returns the set of network requests that occurred within the timeframe of this Insight.\n   */\n  static networkRequests(\n      insight: Trace.Insights.Types.InsightModel, insightSetBounds: Trace.Types.Timing.TraceWindowMicro,\n      parsedTrace: Trace.Handlers.Types.ParsedTrace): readonly Trace.Types.Events.SyntheticNetworkRequest[] {\n    const bounds = insightBounds(insight, insightSetBounds);\n\n    // Now we find network requests that:\n    // 1. began within the bounds\n    // 2. completed within the bounds\n    const matchedRequests: Trace.Types.Events.SyntheticNetworkRequest[] = [];\n    for (const request of parsedTrace.NetworkRequests.byTime) {\n      // Requests are ordered by time ASC, so if we find one request that is\n      // beyond the max, the rest are guaranteed to be also and we can break early.\n      if (request.ts > bounds.max) {\n        break;\n      }\n      if (request.args.data.url.startsWith('data:')) {\n        // For the sake of the LLM querying data, we don't care about data: URLs.\n        continue;\n      }\n      if (request.ts >= bounds.min && request.ts + request.dur <= bounds.max) {\n        matchedRequests.push(request);\n      }\n    }\n\n    return matchedRequests;\n  }\n\n  /**\n   * Returns the single network request. We do not check to filter this by the\n   * bounds of the insight, because the only way that the LLM has found this\n   * request is by first inspecting a summary of relevant network requests for\n   * the given insight. So if it then looks up a request by URL, we know that\n   * is a valid and relevant request.\n   */\n  static networkRequest(parsedTrace: Trace.Handlers.Types.ParsedTrace, url: string):\n      Trace.Types.Events.SyntheticNetworkRequest|null {\n    return parsedTrace.NetworkRequests.byTime.find(r => r.args.data.url === url) ?? null;\n  }\n\n  static findMainThread(navigationId: string|undefined, parsedTrace: Trace.Handlers.Types.ParsedTrace):\n      Trace.Handlers.Threads.ThreadData|null {\n    /**\n     * We cannot assume that there is one main thread as there are scenarios\n     * where there can be multiple (see crbug.com/402658800) as an example.\n     * Therefore we calculate the main thread by using the thread that the\n     * Insight has been associated to. Most Insights relate to a navigation, so\n     * in this case we can use the navigation's PID/TID as we know that will\n     * have run on the main thread that we are interested in.\n     * If we do not have a navigation, we fall back to looking for the first\n     * thread we find that is of type MAIN_THREAD.\n     * Longer term we should solve this at the Trace Engine level to avoid\n     * look-ups like this; this is the work that is tracked in\n     * crbug.com/402658800.\n     */\n    let mainThreadPID: Trace.Types.Events.ProcessID|null = null;\n    let mainThreadTID: Trace.Types.Events.ThreadID|null = null;\n\n    if (navigationId) {\n      const navigation = parsedTrace.Meta.navigationsByNavigationId.get(navigationId);\n      if (navigation?.args.data?.isOutermostMainFrame) {\n        mainThreadPID = navigation.pid;\n        mainThreadTID = navigation.tid;\n      }\n    }\n\n    const threads = Trace.Handlers.Threads.threadsInTrace(parsedTrace);\n    const thread = threads.find(thread => {\n      if (mainThreadPID && mainThreadTID) {\n        return thread.pid === mainThreadPID && thread.tid === mainThreadTID;\n      }\n      return thread.type === Trace.Handlers.Threads.ThreadType.MAIN_THREAD;\n    });\n\n    return thread ?? null;\n  }\n\n  /**\n   * Returns bottom up activity for the given range.\n   */\n  static mainThreadActivityBottomUp(\n      navigationId: string|undefined, bounds: Trace.Types.Timing.TraceWindowMicro,\n      parsedTrace: Trace.Handlers.Types.ParsedTrace): Trace.Extras.TraceTree.BottomUpRootNode|null {\n    const thread = this.findMainThread(navigationId, parsedTrace);\n    if (!thread) {\n      return null;\n    }\n\n    const events = AICallTree.findEventsForThread({thread, parsedTrace, bounds});\n    if (!events) {\n      return null;\n    }\n\n    // Use the same filtering as front_end/panels/timeline/TimelineTreeView.ts.\n    const visibleEvents = Trace.Helpers.Trace.VISIBLE_TRACE_EVENT_TYPES.values().toArray();\n    const filter = new Trace.Extras.TraceFilter.VisibleEventsFilter(\n        visibleEvents.concat([Trace.Types.Events.Name.SYNTHETIC_NETWORK_REQUEST]));\n\n    // The bottom up root node handles all the \"in Tracebounds\" checks we need for the insight.\n    const startTime = Trace.Helpers.Timing.microToMilli(bounds.min);\n    const endTime = Trace.Helpers.Timing.microToMilli(bounds.max);\n    return new Trace.Extras.TraceTree.BottomUpRootNode(events, {\n      textFilter: new Trace.Extras.TraceFilter.ExclusiveNameFilter([]),\n      filters: [filter],\n      startTime,\n      endTime,\n    });\n  }\n\n  /**\n   * Returns an AI Call Tree representing the activity on the main thread for\n   * the relevant time range of the given insight.\n   */\n  static mainThreadActivityTopDown(\n      navigationId: string|undefined, bounds: Trace.Types.Timing.TraceWindowMicro,\n      parsedTrace: Trace.Handlers.Types.ParsedTrace): AICallTree|null {\n    const thread = this.findMainThread(navigationId, parsedTrace);\n    if (!thread) {\n      return null;\n    }\n\n    return AICallTree.fromTimeOnThread({\n      thread: {\n        pid: thread.pid,\n        tid: thread.tid,\n      },\n      parsedTrace,\n      bounds,\n    });\n  }\n\n  /**\n   * Returns an AI Call Tree representing the activity on the main thread for\n   * the relevant time range of the given insight.\n   */\n  static mainThreadActivityForInsight(\n      insight: Trace.Insights.Types.InsightModel, insightSetBounds: Trace.Types.Timing.TraceWindowMicro,\n      parsedTrace: Trace.Handlers.Types.ParsedTrace): AICallTree|null {\n    const bounds = insightBounds(insight, insightSetBounds);\n    return this.mainThreadActivityTopDown(insight.navigationId, bounds, parsedTrace);\n  }\n\n  /**\n   * Returns the top longest tasks as AI Call Trees.\n   */\n  static longestTasks(\n      navigationId: string|undefined, bounds: Trace.Types.Timing.TraceWindowMicro,\n      parsedTrace: Trace.Handlers.Types.ParsedTrace, limit = 3): AICallTree[]|null {\n    const thread = this.findMainThread(navigationId, parsedTrace);\n    if (!thread) {\n      return null;\n    }\n\n    const tasks = AICallTree.findMainThreadTasks({thread, parsedTrace, bounds});\n    if (!tasks) {\n      return null;\n    }\n\n    const topTasks = tasks.filter(e => e.name === 'RunTask').sort((a, b) => b.dur - a.dur).slice(0, limit);\n    return topTasks\n        .map(task => {\n          const tree = AICallTree.fromEvent(task, parsedTrace);\n          if (tree) {\n            tree.selectedNode = null;\n          }\n          return tree;\n        })\n        .filter(tree => !!tree);\n  }\n}\n\n/**\n * Calculates the trace bounds for the given insight that are relevant.\n *\n * Uses the insight's overlays to determine the relevant trace bounds. If there are\n * no overlays, falls back to the insight set's navigation bounds.\n */\nexport function insightBounds(\n    insight: Trace.Insights.Types.InsightModel,\n    insightSetBounds: Trace.Types.Timing.TraceWindowMicro): Trace.Types.Timing.TraceWindowMicro {\n  const overlays = insight.createOverlays?.() ?? [];\n  const windows = overlays.map(Trace.Helpers.Timing.traceWindowFromOverlay).filter(bounds => !!bounds);\n  const overlaysBounds = Trace.Helpers.Timing.combineTraceWindowsMicro(windows);\n  if (overlaysBounds) {\n    return overlaysBounds;\n  }\n\n  return insightSetBounds;\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Trace from '../../../models/trace/trace.js';\n\ninterface TreemapNode {\n  /** Could be a url, a path component from a source map, or an arbitrary string. */\n  name: string;\n  resourceBytes: number;\n  /** Transfer size of the script. Only set for non-inline top-level script nodes. */\n  encodedBytes?: number;\n  /** If present, this module is a duplicate. String is normalized source path. See ScriptDuplication.normalizeSource */\n  duplicatedNormalizedModuleName?: string;\n  children?: TreemapNode[];\n}\n\nexport type TreemapData = TreemapNode[];\ntype SourceData = Omit<TreemapNode, 'name'|'children'>;\n\n/**\n * Takes an UTF-8, gzips then base64's it.\n */\nasync function toCompressedBase64(string: string): Promise<string> {\n  const compAb = await Common.Gzip.compress(string);\n  const strb64 = await Common.Base64.encode(compAb);\n  return strb64;\n}\n\n/**\n * Opens a new tab to an external page and sends data via base64 encoded url params.\n */\nasync function openTabWithUrlData(data: object, urlString: string, windowName: string): Promise<void> {\n  const url = new URL(urlString);\n  url.hash = await toCompressedBase64(JSON.stringify(data));\n  url.searchParams.set('gzip', '1');\n  window.open(url.toString(), windowName);\n}\n\n/**\n * Opens a new tab to the treemap app and sends the data using URL.fragment\n */\nexport function openTreemap(treemapData: TreemapData, mainDocumentUrl: string, windowNameSuffix: string): void {\n  const treemapOptions = {\n    lhr: {\n      mainDocumentUrl,\n      audits: {\n        'script-treemap-data': {\n          details: {\n            type: 'treemap-data',\n            nodes: treemapData,\n          },\n        },\n      },\n      configSettings: {\n        locale: i18n.DevToolsLocale.DevToolsLocale.instance().locale,\n      },\n    },\n    initialView: 'duplicate-modules',\n  };\n  const url = 'https://googlechrome.github.io/lighthouse/treemap/';\n  const windowName = `treemap-${windowNameSuffix}`;\n\n  void openTabWithUrlData(treemapOptions, url, windowName);\n}\n\n/**\n * Returns a tree data structure where leaf nodes are sources (ie. real files from\n * source tree) from a source map, and non-leaf nodes are directories. Leaf nodes\n * have data for bytes, coverage, etc., when available, and non-leaf nodes have the\n * same data as the sum of all descendant leaf nodes.\n */\nexport function makeScriptNode(src: string, sourceRoot: string, sourcesData: Record<string, SourceData>): TreemapNode {\n  function newNode(name: string): TreemapNode {\n    return {\n      name,\n      resourceBytes: 0,\n      encodedBytes: undefined,\n    };\n  }\n\n  const sourceRootNode = newNode(sourceRoot);\n\n  /**\n   * Given a slash-delimited path, traverse the Node structure and increment\n   * the data provided for each node in the chain. Creates nodes as needed.\n   * Ex: path/to/file.js will find or create \"path\" on `node`, increment the data fields,\n   *     and continue with \"to\", and so on.\n   */\n  function addAllNodesInSourcePath(source: string, data: SourceData): void {\n    let node = sourceRootNode;\n\n    // Apply the data to the sourceRootNode.\n    sourceRootNode.resourceBytes += data.resourceBytes;\n\n    // Strip off the shared root.\n    const sourcePathSegments = source.replace(sourceRoot, '').split(/\\/+/);\n    sourcePathSegments.forEach((sourcePathSegment, i) => {\n      if (sourcePathSegment.length === 0) {\n        return;\n      }\n\n      const isLeaf = i === sourcePathSegments.length - 1;\n\n      let child = node.children?.find(child => child.name === sourcePathSegment);\n      if (!child) {\n        child = newNode(sourcePathSegment);\n        node.children = node.children || [];\n        node.children.push(child);\n      }\n      node = child;\n\n      // Now that we've found or created the next node in the path, apply the data.\n      node.resourceBytes += data.resourceBytes;\n\n      // Only leaf nodes might have duplication data.\n      if (isLeaf && data.duplicatedNormalizedModuleName !== undefined) {\n        node.duplicatedNormalizedModuleName = data.duplicatedNormalizedModuleName;\n      }\n    });\n  }\n\n  // For every source file, apply the data to all components\n  // of the source path, creating nodes as necessary.\n  for (const [source, data] of Object.entries(sourcesData)) {\n    addAllNodesInSourcePath(source, data);\n  }\n\n  /**\n   * Collapse nodes that have only one child.\n   */\n  function collapseAll(node: TreemapNode): void {\n    while (node.children && node.children.length === 1) {\n      const child = node.children[0];\n      node.name += '/' + child.name;\n      if (child.duplicatedNormalizedModuleName) {\n        node.duplicatedNormalizedModuleName = child.duplicatedNormalizedModuleName;\n      }\n      node.children = child.children;\n    }\n\n    if (node.children) {\n      for (const child of node.children) {\n        collapseAll(child);\n      }\n    }\n  }\n  collapseAll(sourceRootNode);\n\n  // If sourceRootNode.name is falsy (no defined sourceRoot + no collapsed common prefix),\n  // collapse the sourceRootNode children into the scriptNode.\n  // Otherwise, we add another node.\n  if (!sourceRootNode.name) {\n    return {\n      ...sourceRootNode,\n      name: src,\n      children: sourceRootNode.children,\n    };\n  }\n\n  // Script node should be just the script src.\n  const scriptNode = {...sourceRootNode};\n  scriptNode.name = src;\n  scriptNode.children = [sourceRootNode];\n  return scriptNode;\n}\n\nfunction getNetworkRequestSizes(request: Trace.Types.Events.SyntheticNetworkRequest):\n    {resourceSize: number, transferSize: number, headersTransferSize: number} {\n  const resourceSize = request.args.data.decodedBodyLength;\n  const transferSize = request.args.data.encodedDataLength;\n  // TODO: add something like `responseHeadersTransferSize` to trace\n  // SyntheticNetworkRequest (see Lighthouse). For now, incorrectly include the size\n  // of the headers here.\n  const headersTransferSize = 0;\n  return {resourceSize, transferSize, headersTransferSize};\n}\n\n/**\n * Returns an array of nodes, where the first level of nodes represents every script.\n *\n * Every external script has a node.\n * All inline scripts are combined into a single node.\n * If a script has a source map, that node will be created by makeScriptNode.\n *\n * Example return result:\n *  - index.html (inline scripts)\n *  - main.js\n *  - - webpack://\n *  - - - react.js\n *  - - - app.js\n *  - i-have-no-map.js\n */\nexport function createTreemapData(\n    scripts: Trace.Handlers.ModelHandlers.Scripts.ScriptsData,\n    duplication: Trace.Extras.ScriptDuplication.ScriptDuplication): TreemapData {\n  const nodes: TreemapNode[] = [];\n  const htmlNodesByFrameId = new Map<string, TreemapNode>();\n\n  for (const script of scripts.scripts) {\n    if (!script.url) {\n      continue;\n    }\n\n    const name = script.url;\n    const sizes = Trace.Handlers.ModelHandlers.Scripts.getScriptGeneratedSizes(script);\n\n    let node: TreemapNode;\n    if (script.sourceMap && sizes && !('errorMessage' in sizes)) {\n      // Create nodes for each module in a bundle.\n\n      const sourcesData: Record<string, SourceData> = {};\n      for (const [source, resourceBytes] of Object.entries(sizes.files)) {\n        const sourceData: SourceData = {\n          resourceBytes,\n          encodedBytes: undefined,\n        };\n\n        const key = Trace.Extras.ScriptDuplication.normalizeSource(source);\n        if (duplication.has(key)) {\n          sourceData.duplicatedNormalizedModuleName = key;\n        }\n\n        sourcesData[source] = sourceData;\n      }\n\n      if (sizes.unmappedBytes) {\n        const sourceData: SourceData = {\n          resourceBytes: sizes.unmappedBytes,\n        };\n        sourcesData['(unmapped)'] = sourceData;\n      }\n\n      node = makeScriptNode(script.url, script.url, sourcesData);\n    } else {\n      // No valid source map for this script, so we can only produce a single node.\n      node = {\n        name,\n        resourceBytes: script.content?.length ?? 0,\n        encodedBytes: undefined,\n      };\n    }\n\n    // If this is an inline script, place the node inside a top-level (aka depth-one)\n    // node. Also separate each iframe / the main page's inline scripts into their\n    // own top-level nodes.\n    if (script.inline) {\n      let htmlNode = htmlNodesByFrameId.get(script.frame);\n      if (!htmlNode) {\n        htmlNode = {\n          name,\n          resourceBytes: 0,\n          encodedBytes: undefined,\n          children: [],\n        };\n        htmlNodesByFrameId.set(script.frame, htmlNode);\n        nodes.push(htmlNode);\n      }\n      htmlNode.resourceBytes += node.resourceBytes;\n      node.name = script.content ? '(inline) ' + script.content.trimStart().substring(0, 15) + '…' : '(inline)';\n      htmlNode.children?.push(node);\n    } else {\n      // Non-inline scripts each have their own top-level node.\n      nodes.push(node);\n\n      if (script.request) {\n        const {transferSize, headersTransferSize} = getNetworkRequestSizes(script.request);\n        const bodyTransferSize = transferSize - headersTransferSize;\n        node.encodedBytes = bodyTransferSize;\n      } else {\n        node.encodedBytes = node.resourceBytes;\n      }\n    }\n  }\n\n  // For the HTML nodes, set encodedBytes to be the size of all the inline\n  // scripts multiplied by the average compression ratio of the HTML document.\n  for (const [frameId, node] of htmlNodesByFrameId) {\n    const script = scripts.scripts.find(\n        s => s.request?.args.data.resourceType === 'Document' && s.request?.args.data.frame === frameId);\n    if (script?.request) {\n      const {resourceSize, transferSize, headersTransferSize} = getNetworkRequestSizes(script.request);\n      const inlineScriptsPct = node.resourceBytes / resourceSize;\n      const bodyTransferSize = transferSize - headersTransferSize;\n      node.encodedBytes = Math.floor(bodyTransferSize * inlineScriptsPct);\n    } else {\n      node.encodedBytes = node.resourceBytes;\n    }\n  }\n\n  return nodes;\n}\n"],
  "mappings": "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",
  "names": ["Trace", "i18n", "Trace", "EventCategory", "UIStrings", "str_", "i18nString", "Trace", "Trace", "SDK", "Trace", "Trace", "SDK", "i18n", "Trace", "Workspace", "UIStrings", "str_", "i18nString", "Trace", "Trace", "thread", "Common", "i18n", "Trace", "child"]
}
