{"version":3,"file":"InsightAIContext.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/InsightAIContext.ts"],"names":[],"mappings":"AAKA;;;;;;;GAOG;AACH,MAAM,OAAO,aAAa;IACxB,QAAQ,CAA4C;IACpD,2DAA2D;IAC3D,YAAY,CAAmC;IAE/C,YAAY,OAAkD,EAAE,WAA6C;QAC3G,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IAClC,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC7B,CAAC;CACF","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as Trace from '../../../models/trace/trace.js';\n\n/**\n * This class holds the Insight that is active when the user has entered the\n * Ask AI flow from the Insights sidebar.\n * Ideally we would just use the InsightModel instance itself, but we need to\n * also store a reference to the parsed trace as we use that to populate the\n * data provided to the LLM, so we use this class as a container for the insight\n * and the parsed trace.\n */\nexport class ActiveInsight {\n  #insight: Trace.Insights.Types.InsightModel<{}, {}>;\n  // eslint-disable-next-line no-unused-private-class-members\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace;\n\n  constructor(insight: Trace.Insights.Types.InsightModel<{}, {}>, parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    this.#insight = insight;\n    this.#parsedTrace = parsedTrace;\n  }\n\n  title(): string {\n    return this.#insight.title;\n  }\n}\n"]}