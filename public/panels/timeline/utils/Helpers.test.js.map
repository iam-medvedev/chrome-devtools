{"version":3,"file":"Helpers.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/Helpers.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Trace from '../../../models/trace/trace.js';\n\nimport * as Helpers from './Helpers.js';\n\ndescribe('Helpers', () => {\n  it('createUrlLabels', function() {\n    function fn(urls: string[], expected: string[]) {\n      assert.deepEqual(Helpers.createUrlLabels(urls.map(url => new URL(url))), expected);\n    }\n\n    fn([], []);\n\n    // Initial url is elided.\n    fn(['https://www.example.com'], ['/']);\n    fn(['https://www.example.com?k=1234567890&k2=1234567890&k3=0123'], ['/?k=1234567…&k2=1234567…&k3=0123']);\n    fn(['https://www.example.com/blah?test=me'], ['/blah?test=me']);\n\n    // Subsequent urls are elided if the same protocol+domain.\n    fn(['https://www.example.com', 'https://www.example.com/blah?test=me'], ['/', '/blah?test=me']);\n\n    // Subsequent urls are not elided if the protocol or the domain changes.\n    fn(['https://www.example.com', 'https://www.google.com'], ['/', 'www.google.com']);\n    fn(['https://www.example.com', 'https://www.google.com/search'], ['/', 'www.google.com/search']);\n    fn(['https://www.example.com', 'https://www.google.com/search', 'https://www.google.com/search2'],\n       ['/', 'www.google.com/search', '/search2']);\n\n    // If only https protocol is present, elide protocol. Otherwise always show the full URL (but still elide the search params).\n    fn(['https://www.example.com', 'http://www.example.com'], ['https://www.example.com', 'http://www.example.com']);\n    fn(['http://www.example.com', 'https://www.example.com'], ['http://www.example.com', 'https://www.example.com']);\n    fn(['http://www.example.com?k=1234567890', 'https://www.example.com?k=1234567890'],\n       ['http://www.example.com/?k=1234567…', 'https://www.example.com/?k=1234567…']);\n    fn(['https://www.example.com', 'https://www.example2.com'], ['/', 'www.example2.com']);\n  });\n\n  it('shortenUrl', function() {\n    const url = new URL('https://cdn.permutive.com/models/v2/d2fb08da-1c03-4c8a-978f-ad8a96b4c31f-models.bin');\n    // Shows lastPath and then reveals more of it, per maxCharacters\n    assert.strictEqual(Helpers.shortenUrl(url, 40), 'd2fb08da-1c03-4c8a-9…96b4c31f-models.bin');\n    assert.strictEqual(Helpers.shortenUrl(url, 70), '/models/v2/d2fb08da-1c03-4c8a-978f-ad8a96b4c31f-models.bin');\n  });\n  describe('formatOriginWithEntity', () => {\n    it('recognized entities', function() {\n      const url = new URL('https://securepubads.g.doubleclick.net/tag/js/gpt.js');\n      const mockEntity: Trace.Handlers.Helpers.Entity = {\n        name: 'Google/Doubleclick Ads',\n        company: url.toString(),\n        category: '',\n        categories: [],\n        domains: [url.toString()],\n        averageExecutionTime: 0,\n        totalExecutionTime: 0,\n        totalOccurrences: 0,\n      };\n      let originWithEntity = Helpers.formatOriginWithEntity(url, mockEntity);\n      assert.deepEqual('securepubads.g.doubleclick.net - Google/Doubleclick Ads', originWithEntity);\n\n      originWithEntity = Helpers.formatOriginWithEntity(url, mockEntity, true);\n      assert.deepEqual('securepubads.g.doubleclick.net (Google/Doubleclick Ads)', originWithEntity);\n    });\n    it('unrecognized entities', function() {\n      const url = new URL('https://securepubads.g.doubleclick.net/tag/js/gpt.js');\n      const mockEntity: Trace.Handlers.Helpers.Entity = {\n        name: 'securepubads.g.doubleclick.net',\n        company: url.toString(),\n        category: '',\n        categories: [],\n        domains: [url.toString()],\n        averageExecutionTime: 0,\n        totalExecutionTime: 0,\n        totalOccurrences: 0,\n        isUnrecognized: true,\n      };\n      // Shouldn't return the entity with the origin.\n      let originWithEntity = Helpers.formatOriginWithEntity(url, mockEntity);\n      assert.deepEqual('securepubads.g.doubleclick.net', originWithEntity);\n\n      originWithEntity = Helpers.formatOriginWithEntity(url, mockEntity, true);\n      assert.deepEqual('securepubads.g.doubleclick.net', originWithEntity);\n    });\n  });\n});\n"]}