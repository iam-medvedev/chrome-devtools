{"version":3,"file":"SourceMapsResolver.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/SourceMapsResolver.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {Chrome} from '../../../../extension-api/ExtensionAPI.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Bindings from '../../../models/bindings/bindings.js';\nimport * as Trace from '../../../models/trace/trace.js';\nimport * as Workspace from '../../../models/workspace/workspace.js';\nimport {createTarget} from '../../../testing/EnvironmentHelpers.js';\nimport {TestPlugin} from '../../../testing/LanguagePluginHelpers.js';\nimport {\n  describeWithMockConnection,\n} from '../../../testing/MockConnection.js';\nimport {MockProtocolBackend} from '../../../testing/MockScopeChain.js';\nimport {encodeSourceMap} from '../../../testing/SourceMapEncoder.js';\nimport {loadBasicSourceMapExample} from '../../../testing/SourceMapHelpers.js';\nimport {\n  makeMockRendererHandlerData,\n  makeMockSamplesHandlerData,\n  makeProfileCall,\n} from '../../../testing/TraceHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\n\nimport * as Utils from './utils.js';\n\nconst {urlString} = Platform.DevToolsPath;\nconst MINIFIED_FUNCTION_NAME = 'minified';\nconst AUTHORED_FUNCTION_NAME = 'someFunction';\n\nexport async function loadCodeLocationResolvingScenario(): Promise<{\n  authoredScriptURL: string,\n  genScriptURL: string,\n  scriptId: Protocol.Runtime.ScriptId,\n  ignoreListedURL: string,\n  contentScriptURL: string,\n  contentScriptId: Protocol.Runtime.ScriptId,\n}> {\n  const target = createTarget();\n\n  const targetManager = SDK.TargetManager.TargetManager.instance();\n  const workspace = Workspace.Workspace.WorkspaceImpl.instance({forceNew: true});\n  const resourceMapping = new Bindings.ResourceMapping.ResourceMapping(targetManager, workspace);\n  const debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance(\n      {forceNew: true, resourceMapping, targetManager});\n  Bindings.IgnoreListManager.IgnoreListManager.instance({\n    forceNew: true,\n    debuggerWorkspaceBinding,\n  });\n\n  const backend = new MockProtocolBackend();\n\n  // The following mock data creates a source mapping from two authored\n  // scripts to a single complied script. One of the sources\n  // (ignored.ts) is marked as ignore listed in the source map.\n  const sourceRoot = 'http://example.com';\n  const scriptInfo = {\n    url: `${sourceRoot}/test.out.js`,\n    content: 'function f(x) {\\n  console.log(x);\\n}\\nfunction ignore(y){\\n console.log(y);\\n}',\n  };\n  const authoredScriptName = 'test.ts';\n  const ignoredScriptName = 'ignored.ts';\n  const authoredScriptURL = `${sourceRoot}/${authoredScriptName}`;\n  const ignoreListedScriptURL = `${sourceRoot}/${ignoredScriptName}`;\n  const sourceMap = encodeSourceMap(\n      [\n        `0:9 => ${authoredScriptName}:0:1`,\n        `1:0 => ${authoredScriptName}:4:0`,\n        `1:2 => ${authoredScriptName}:4:2`,\n        `2:0 => ${authoredScriptName}:2:0`,\n        `3:0 => ${ignoredScriptName}:3:0`,\n      ],\n      sourceRoot);\n  sourceMap.sources = [authoredScriptURL, ignoreListedScriptURL];\n  sourceMap.ignoreList = [1];\n  const sourceMapInfo = {\n    url: `${scriptInfo.url}.map`,\n    content: sourceMap,\n  };\n\n  // The following mock data creates content script\n  const contentScriptInfo = {\n    url: `${sourceRoot}/content-script.js`,\n    content: 'console.log(\"content script loaded\");',\n    isContentScript: true,\n  };\n\n  // Load mock data in devtools\n  const [, , script, , contentScript] = await Promise.all([\n    debuggerWorkspaceBinding.waitForUISourceCodeAdded(urlString`${authoredScriptURL}`, target),\n    debuggerWorkspaceBinding.waitForUISourceCodeAdded(urlString`${ignoreListedScriptURL}`, target),\n    backend.addScript(target, scriptInfo, sourceMapInfo),\n    debuggerWorkspaceBinding.waitForUISourceCodeAdded(urlString`${contentScriptInfo.url}`, target),\n    backend.addScript(target, contentScriptInfo, null),\n  ]);\n\n  return {\n    authoredScriptURL,\n    scriptId: script.scriptId,\n    genScriptURL: scriptInfo.url,\n    ignoreListedURL: ignoreListedScriptURL,\n    contentScriptURL: contentScriptInfo.url,\n    contentScriptId: contentScript.scriptId,\n  };\n}\n\nfunction parsedTraceFromProfileCalls(profileCalls: Trace.Types.Events.SyntheticProfileCall[]):\n    Trace.Handlers.Types.ParsedTrace {\n  const workersData: Trace.Handlers.ModelHandlers.Workers.WorkersData = {\n    workerSessionIdEvents: [],\n    workerIdByThread: new Map(),\n    workerURLById: new Map(),\n  };\n  // This only includes data used in the SourceMapsResolver\n  return {\n    Samples: makeMockSamplesHandlerData(profileCalls),\n    Workers: workersData,\n    Renderer: makeMockRendererHandlerData(profileCalls),\n    NetworkRequests:\n        {entityMappings: {entityByEvent: new Map(), eventsByEntity: new Map(), createdEntityCache: new Map()}},\n    Meta: {mainFrameURL: 'https://example.com', navigationsByNavigationId: new Map()},\n  } as Trace.Handlers.Types.ParsedTrace;\n}\n\ndescribeWithMockConnection('SourceMapsResolver', () => {\n  describe('function name resolving', () => {\n    let target: SDK.Target.Target;\n    let script: SDK.Script.Script;\n    let parsedTrace: Trace.Handlers.Types.ParsedTrace;\n    let profileCallForNameResolving: Trace.Types.Events.SyntheticProfileCall;\n    beforeEach(async function() {\n      target = createTarget();\n      script = (await loadBasicSourceMapExample(target)).script;\n\n      profileCallForNameResolving =\n          makeProfileCall('function', 10, 100, Trace.Types.Events.ProcessID(1), Trace.Types.Events.ThreadID(1));\n\n      profileCallForNameResolving.callFrame = {\n        columnNumber: 51,\n        functionName: 'minified',\n        lineNumber: 0,\n        scriptId: script.scriptId,\n        url: 'file://gen.js',\n      };\n      parsedTrace = parsedTraceFromProfileCalls([profileCallForNameResolving]);\n    });\n\n    it('renames nodes from the profile models when the corresponding scripts and source maps have loaded',\n       async function() {\n         const resolver = new Utils.SourceMapsResolver.SourceMapsResolver(parsedTrace);\n\n         // Test the node's name is minified before the script and source maps load.\n         assert.strictEqual(\n             Trace.Handlers.ModelHandlers.Samples.getProfileCallFunctionName(\n                 parsedTrace.Samples, profileCallForNameResolving),\n             MINIFIED_FUNCTION_NAME);\n\n         await resolver.install();\n\n         // Now that the script and source map have loaded, test that the model has been automatically\n         // reparsed to resolve function names.\n         assert.strictEqual(\n             Trace.Handlers.ModelHandlers.Samples.getProfileCallFunctionName(\n                 parsedTrace.Samples, profileCallForNameResolving),\n             AUTHORED_FUNCTION_NAME);\n\n         // Ensure we populate the cache\n         assert.strictEqual(\n             Utils.SourceMapsResolver.SourceMapsResolver.resolvedCodeLocationForEntry(profileCallForNameResolving)\n                 ?.name,\n             AUTHORED_FUNCTION_NAME);\n       });\n\n    it('resolves function names using a plugin when available', async () => {\n      const PLUGIN_FUNCTION_NAME = 'PLUGIN_FUNCTION_NAME';\n      class Plugin extends TestPlugin {\n        constructor() {\n          super('InstrumentationBreakpoints');\n        }\n\n        override getFunctionInfo(_rawLocation: Chrome.DevTools.RawLocation):\n            Promise<{frames: Chrome.DevTools.FunctionInfo[], missingSymbolFiles?: string[]|undefined}> {\n          return Promise.resolve({frames: [{name: PLUGIN_FUNCTION_NAME}]});\n        }\n        override handleScript(_: SDK.Script.Script) {\n          return true;\n        }\n      }\n\n      const {pluginManager} = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n      pluginManager.addPlugin(new Plugin());\n      const resolver = new Utils.SourceMapsResolver.SourceMapsResolver(parsedTrace);\n      await resolver.install();\n      assert.strictEqual(\n          Trace.Handlers.ModelHandlers.Samples.getProfileCallFunctionName(\n              parsedTrace.Samples, profileCallForNameResolving),\n          PLUGIN_FUNCTION_NAME);\n    });\n  });\n  describe('code location resolving', () => {\n    it('correctly stores url mappings using source maps', async () => {\n      const {authoredScriptURL, genScriptURL, scriptId} = await loadCodeLocationResolvingScenario();\n      const profileCallWithMappings =\n          makeProfileCall('function', 10, 100, Trace.Types.Events.ProcessID(1), Trace.Types.Events.ThreadID(1));\n      const LINE_NUMBER = 0;\n      const COLUMN_NUMBER = 9;\n      profileCallWithMappings.callFrame = {\n        lineNumber: LINE_NUMBER,\n        columnNumber: COLUMN_NUMBER,\n        functionName: 'minified',\n        scriptId,\n        url: genScriptURL,\n      };\n\n      const profileCallWithNoMappings =\n          makeProfileCall('function', 10, 100, Trace.Types.Events.ProcessID(1), Trace.Types.Events.ThreadID(1));\n      profileCallWithNoMappings.callFrame = {\n        // Purposefully pick a location for which there is no mapping\n        // in the source map we just added.\n        lineNumber: 0,\n        columnNumber: 1,\n        functionName: 'minified',\n        scriptId,\n        url: authoredScriptURL,\n      };\n\n      // For a profile call with mappings, it must return the mapped script.\n      const traceWithMappings = parsedTraceFromProfileCalls([profileCallWithMappings]);\n      const mapperWithMappings = new Utils.EntityMapper.EntityMapper(traceWithMappings);\n      let resolver = new Utils.SourceMapsResolver.SourceMapsResolver(traceWithMappings, mapperWithMappings);\n      await resolver.install();\n      let sourceMappedURL =\n          Utils.SourceMapsResolver.SourceMapsResolver.resolvedURLForEntry(traceWithMappings, profileCallWithMappings);\n      assert.strictEqual(sourceMappedURL, authoredScriptURL);\n\n      // For a profile call without mappings, it must return the original URL\n      const traceWithoutMappings = parsedTraceFromProfileCalls([profileCallWithNoMappings]);\n      const mapperWithoutMappings = new Utils.EntityMapper.EntityMapper(traceWithoutMappings);\n      resolver = new Utils.SourceMapsResolver.SourceMapsResolver(traceWithoutMappings, mapperWithoutMappings);\n      await resolver.install();\n      sourceMappedURL = Utils.SourceMapsResolver.SourceMapsResolver.resolvedURLForEntry(\n          traceWithoutMappings, profileCallWithNoMappings);\n      assert.strictEqual(sourceMappedURL, genScriptURL);\n    });\n  });\n  describe('unnecessary work detection', () => {\n    it('does not dispatch a SourceMappingsUpdated event if relevant mappings were not updated', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'user-timings.json.gz');\n      const listener = sinon.spy();\n\n      const sourceMapsResolver = new Utils.SourceMapsResolver.SourceMapsResolver(parsedTrace);\n      sourceMapsResolver.addEventListener(Utils.SourceMapsResolver.SourceMappingsUpdated.eventName, listener);\n      await sourceMapsResolver.install();\n      assert.isTrue(listener.notCalled);\n    });\n  });\n  describe('updating entity mapping', () => {\n    it('correctly updates mapping for event that maps to a script', async function() {\n      const {scriptId} = await loadCodeLocationResolvingScenario();\n\n      const profileCall =\n          makeProfileCall('function', 10, 100, Trace.Types.Events.ProcessID(1), Trace.Types.Events.ThreadID(1));\n      const LINE_NUMBER = 0;\n      const COLUMN_NUMBER = 9;\n      profileCall.callFrame = {\n        lineNumber: LINE_NUMBER,\n        columnNumber: COLUMN_NUMBER,\n        functionName: 'minified',\n        scriptId,\n        url: 'http://example-domain.com/',\n      };\n      const profileCallUnmapped =\n          makeProfileCall('function', 10, 100, Trace.Types.Events.ProcessID(1), Trace.Types.Events.ThreadID(1));\n      profileCallUnmapped.callFrame = {\n        lineNumber: 2,\n        columnNumber: 0,\n        functionName: '',\n        scriptId,\n        url: 'http://example-domain.com/',\n      };\n\n      const trace = parsedTraceFromProfileCalls([profileCall, profileCallUnmapped]);\n      const mapper = new Utils.EntityMapper.EntityMapper(trace);\n\n      const testEntity = {\n        name: 'example-domain.com',\n        company: 'example-domain.com',\n        category: '',\n        categories: [],\n        domains: ['example-domain.com'],\n        averageExecutionTime: 0,\n        totalExecutionTime: 0,\n        totalOccurrences: 0,\n        isUnrecognized: true,\n      };\n      // Set a fake entity for this event that should get overridden. Initially\n      // both traces are mapped together, after the sourcemap that should change\n      mapper.mappings().entityByEvent.set(profileCall, testEntity);\n      mapper.mappings().entityByEvent.set(profileCallUnmapped, testEntity);\n      mapper.mappings().eventsByEntity.set(testEntity, [profileCall, profileCallUnmapped]);\n      mapper.mappings().createdEntityCache.set('example-domain.com', testEntity);\n\n      const resolver = new Utils.SourceMapsResolver.SourceMapsResolver(trace, mapper);\n      // This should update the entities\n      await resolver.install();\n      const afterEntityOfEvent = mapper.entityForEvent(profileCall);\n      const expected = {\n        name: 'example.com',\n        company: 'example.com',\n        category: '',\n        categories: [],\n        domains: ['example.com'],\n        averageExecutionTime: 0,\n        totalExecutionTime: 0,\n        totalOccurrences: 0,\n        isUnrecognized: true,\n      };\n      assert.exists(afterEntityOfEvent);\n      assert.deepEqual(afterEntityOfEvent, expected);\n      // The mapped event should now map to its new entity.\n      const gotEventsMapped = mapper.eventsForEntity(afterEntityOfEvent) ?? [];\n      assert.deepEqual(gotEventsMapped, [profileCall]);\n\n      // The unmapped event should keep its original entity.\n      const gotEventsUnmapped = mapper.eventsForEntity(testEntity) ?? [];\n      assert.deepEqual(gotEventsUnmapped, [profileCallUnmapped]);\n      const gotUnmappedEntity = mapper.entityForEvent(profileCallUnmapped);\n      assert.deepEqual(gotUnmappedEntity, testEntity);\n    });\n  });\n});\n"]}