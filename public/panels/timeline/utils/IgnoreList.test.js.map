{"version":3,"file":"IgnoreList.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/IgnoreList.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as Bindings from '../../../models/bindings/bindings.js';\nimport * as Trace from '../../../models/trace/trace.js';\nimport * as Workspace from '../../../models/workspace/workspace.js';\nimport {\n  describeWithMockConnection,\n} from '../../../testing/MockConnection.js';\nimport {\n  makeMockSamplesHandlerData,\n  makeProfileCall,\n} from '../../../testing/TraceHelpers.js';\n\nimport { // eslint-disable-line rulesdir/es-modules-import\n  loadCodeLocationResolvingScenario,\n} from './SourceMapsResolver.test.js';\nimport * as Utils from './utils.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\ndescribeWithMockConnection('isIgnoreListedEntry', () => {\n  it('uses url mappings to determine if an url is ignore listed', async () => {\n    const {authoredScriptURL, genScriptURL, scriptId} = await loadCodeLocationResolvingScenario();\n\n    const LINE_NUMBER = 0;\n    const COLUMN_NUMBER = 9;\n\n    const profileCallWithMappings =\n        makeProfileCall('function', 10, 100, Trace.Types.Events.ProcessID(1), Trace.Types.Events.ThreadID(1));\n    profileCallWithMappings.callFrame = {\n      lineNumber: LINE_NUMBER,\n      columnNumber: COLUMN_NUMBER,\n      functionName: 'minified',\n      scriptId,\n      url: genScriptURL,\n    };\n\n    const workersData: Trace.Handlers.ModelHandlers.Workers.WorkersData = {\n      workerSessionIdEvents: [],\n      workerIdByThread: new Map(),\n      workerURLById: new Map(),\n    };\n\n    Bindings.IgnoreListManager.IgnoreListManager.instance().ignoreListURL(urlString`${authoredScriptURL}`);\n    const traceWithMappings = {\n      Samples: makeMockSamplesHandlerData([profileCallWithMappings]),\n      Workers: workersData,\n    } as Trace.Handlers.Types.ParsedTrace;\n    const resolver = new Utils.SourceMapsResolver.SourceMapsResolver(traceWithMappings);\n    await resolver.install();\n    assert.isTrue(Utils.IgnoreList.isIgnoreListedEntry(profileCallWithMappings));\n  });\n\n  it('ignores entries with a url in the source map\\'s ignoreList field when the user enables known third party ignoring',\n     async () => {\n       const {ignoreListedURL, scriptId} = await loadCodeLocationResolvingScenario();\n\n       // This matches the location mapping added to the sourcemap.\n       const LINE_NUMBER = 3;\n       const COLUMN_NUMBER = 0;\n\n       const profileCallWithMappings =\n           makeProfileCall('function', 10, 100, Trace.Types.Events.ProcessID(1), Trace.Types.Events.ThreadID(1));\n       profileCallWithMappings.callFrame = {\n         lineNumber: LINE_NUMBER,\n         columnNumber: COLUMN_NUMBER,\n         functionName: 'ignore',\n         scriptId,\n         url: ignoreListedURL,\n       };\n\n       const workersData: Trace.Handlers.ModelHandlers.Workers.WorkersData = {\n         workerSessionIdEvents: [],\n         workerIdByThread: new Map(),\n         workerURLById: new Map(),\n       };\n       const traceWithMappings = {\n         Samples: makeMockSamplesHandlerData([profileCallWithMappings]),\n         Workers: workersData,\n       } as Trace.Handlers.Types.ParsedTrace;\n       const resolver = new Utils.SourceMapsResolver.SourceMapsResolver(traceWithMappings);\n       await resolver.install();\n       assert.isTrue(Utils.IgnoreList.isIgnoreListedEntry(profileCallWithMappings));\n       const ignoreKnownThirdPartySetting =\n           Common.Settings.Settings.instance().moduleSetting('automatically-ignore-list-known-third-party-scripts');\n       const ignoreKnownThirdPartySettingValue = ignoreKnownThirdPartySetting.get();\n\n       ignoreKnownThirdPartySetting.set(true);\n       assert.isTrue(Utils.IgnoreList.isIgnoreListedEntry(profileCallWithMappings));\n       assert.strictEqual(\n           'Marked with ignoreList in source map', Utils.IgnoreList.getIgnoredReasonString(profileCallWithMappings));\n\n       ignoreKnownThirdPartySetting.set(false);\n       assert.isFalse(Utils.IgnoreList.isIgnoreListedEntry(profileCallWithMappings));\n\n       // restore to the original value.\n       ignoreKnownThirdPartySetting.set(ignoreKnownThirdPartySettingValue);\n     });\n  it('ignores entries belonging to content script when the user enables content script ignoring', async () => {\n    const {contentScriptURL, contentScriptId: scriptId} = await loadCodeLocationResolvingScenario();\n\n    const LINE_NUMBER = 0;\n    const COLUMN_NUMBER = 0;\n\n    const profileCallWithContentScript =\n        makeProfileCall('function', 10, 100, Trace.Types.Events.ProcessID(1), Trace.Types.Events.ThreadID(1));\n    profileCallWithContentScript.callFrame = {\n      lineNumber: LINE_NUMBER,\n      columnNumber: COLUMN_NUMBER,\n      functionName: '',\n      scriptId,\n      url: contentScriptURL,\n    };\n\n    const workersData: Trace.Handlers.ModelHandlers.Workers.WorkersData = {\n      workerSessionIdEvents: [],\n      workerIdByThread: new Map(),\n      workerURLById: new Map(),\n    };\n    const traceWithMappings = {\n      Samples: makeMockSamplesHandlerData([profileCallWithContentScript]),\n      Workers: workersData,\n    } as Trace.Handlers.Types.ParsedTrace;\n    const resolver = new Utils.SourceMapsResolver.SourceMapsResolver(traceWithMappings);\n    await resolver.install();\n    assert.isTrue(Utils.IgnoreList.isIgnoreListedEntry(profileCallWithContentScript));\n\n    const ignoreContentScriptSetting = Common.Settings.Settings.instance().moduleSetting('skip-content-scripts');\n    const ignoreContentScriptSettingValue = ignoreContentScriptSetting.get();\n\n    ignoreContentScriptSetting.set(true);\n    assert.isTrue(Utils.IgnoreList.isIgnoreListedEntry(profileCallWithContentScript));\n    assert.strictEqual('Content script', Utils.IgnoreList.getIgnoredReasonString(profileCallWithContentScript));\n\n    ignoreContentScriptSetting.set(false);\n    assert.isFalse(Utils.IgnoreList.isIgnoreListedEntry(profileCallWithContentScript));\n\n    // restore to the original value.\n    ignoreContentScriptSetting.set(ignoreContentScriptSettingValue);\n  });\n\n  it('get the first matched rule for the ignored script', async () => {\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    const workspace = Workspace.Workspace.WorkspaceImpl.instance({forceNew: true});\n    const resourceMapping = new Bindings.ResourceMapping.ResourceMapping(targetManager, workspace);\n    const debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance(\n        {forceNew: true, resourceMapping, targetManager});\n    Bindings.IgnoreListManager.IgnoreListManager.instance({\n      forceNew: true,\n      debuggerWorkspaceBinding,\n    });\n    ignoreRegex('youtube*');\n    const url = urlString`https://www.youtube.com/s/desktop/2ebf714b/jsbin/desktop_polymer.vflset/desktop_polymer.js`;\n    Bindings.IgnoreListManager.IgnoreListManager.instance().ignoreListURL(url);\n\n    const entry = makeProfileCall(\n        'function name', 10, 100, Trace.Types.Events.ProcessID(1), Trace.Types.Events.ThreadID(1), /* nodeId= */ 1,\n        url);\n    // There are two matched rules (in order)\n    // - youtube*\n    // - \\\\/desktop_polymer\\\\.js$ (generated by the URL)\n    // So the first matched one is `youtube*`\n    assert.strictEqual('youtube*', Utils.IgnoreList.getIgnoredReasonString(entry));\n\n    unignoreRegex('youtube*');\n    // Now There is only one matched rule.\n    assert.strictEqual('\\\\/desktop_polymer\\\\.js$', Utils.IgnoreList.getIgnoredReasonString(entry));\n  });\n});\n\nfunction ignoreRegex(regexValue: string): void {\n  const regexPatterns =\n      (Common.Settings.Settings.instance().moduleSetting('skip-stack-frames-pattern') as Common.Settings.RegExpSetting)\n          .getAsArray();\n  regexPatterns.push({pattern: regexValue, disabled: false});\n}\n\nfunction unignoreRegex(regexValue: string): void {\n  const regexPatterns =\n      (Common.Settings.Settings.instance().moduleSetting('skip-stack-frames-pattern') as Common.Settings.RegExpSetting)\n          .getAsArray();\n  const result = regexPatterns.filter(regexPattern => regexPattern.pattern !== regexValue);\n\n  (Common.Settings.Settings.instance().moduleSetting('skip-stack-frames-pattern') as Common.Settings.RegExpSetting)\n      .setAsArray(result);\n}\n"]}