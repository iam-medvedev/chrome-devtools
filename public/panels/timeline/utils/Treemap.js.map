{"version":3,"file":"Treemap.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/Treemap.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Trace from '../../../models/trace/trace.js';\n\ninterface TreemapNode {\n  /** Could be a url, a path component from a source map, or an arbitrary string. */\n  name: string;\n  resourceBytes: number;\n  /** Transfer size of the script. Only set for non-inline top-level script nodes. */\n  encodedBytes?: number;\n  /** If present, this module is a duplicate. String is normalized source path. See ScriptDuplication.normalizeSource */\n  duplicatedNormalizedModuleName?: string;\n  children?: TreemapNode[];\n}\n\nexport type TreemapData = TreemapNode[];\ntype SourceData = Omit<TreemapNode, 'name'|'children'>;\n\n/**\n * Takes an UTF-8, gzips then base64's it.\n */\nasync function toCompressedBase64(string: string): Promise<string> {\n  const compAb = await Common.Gzip.compress(string);\n  const strb64 = await Common.Base64.encode(compAb);\n  return strb64;\n}\n\n/**\n * Opens a new tab to an external page and sends data via base64 encoded url params.\n */\nasync function openTabWithUrlData(data: object, urlString: string, windowName: string): Promise<void> {\n  const url = new URL(urlString);\n  url.hash = await toCompressedBase64(JSON.stringify(data));\n  url.searchParams.set('gzip', '1');\n  window.open(url.toString(), windowName);\n}\n\n/**\n * Opens a new tab to the treemap app and sends the data using URL.fragment\n */\nexport function openTreemap(treemapData: TreemapData, mainDocumentUrl: string, windowNameSuffix: string): void {\n  const treemapOptions = {\n    lhr: {\n      mainDocumentUrl,\n      audits: {\n        'script-treemap-data': {\n          details: {\n            type: 'treemap-data',\n            nodes: treemapData,\n          },\n        },\n      },\n      configSettings: {\n        locale: i18n.DevToolsLocale.DevToolsLocale.instance().locale,\n      },\n    },\n    initialView: 'duplicate-modules',\n  };\n  const url = 'https://googlechrome.github.io/lighthouse/treemap/';\n  const windowName = `treemap-${windowNameSuffix}`;\n\n  void openTabWithUrlData(treemapOptions, url, windowName);\n}\n\n/**\n * Returns a tree data structure where leaf nodes are sources (ie. real files from\n * source tree) from a source map, and non-leaf nodes are directories. Leaf nodes\n * have data for bytes, coverage, etc., when available, and non-leaf nodes have the\n * same data as the sum of all descendant leaf nodes.\n */\nexport function makeScriptNode(src: string, sourceRoot: string, sourcesData: Record<string, SourceData>): TreemapNode {\n  function newNode(name: string): TreemapNode {\n    return {\n      name,\n      resourceBytes: 0,\n      encodedBytes: undefined,\n    };\n  }\n\n  const sourceRootNode = newNode(sourceRoot);\n\n  /**\n   * Given a slash-delimited path, traverse the Node structure and increment\n   * the data provided for each node in the chain. Creates nodes as needed.\n   * Ex: path/to/file.js will find or create \"path\" on `node`, increment the data fields,\n   *     and continue with \"to\", and so on.\n   */\n  function addAllNodesInSourcePath(source: string, data: SourceData): void {\n    let node = sourceRootNode;\n\n    // Apply the data to the sourceRootNode.\n    sourceRootNode.resourceBytes += data.resourceBytes;\n\n    // Strip off the shared root.\n    const sourcePathSegments = source.replace(sourceRoot, '').split(/\\/+/);\n    sourcePathSegments.forEach((sourcePathSegment, i) => {\n      if (sourcePathSegment.length === 0) {\n        return;\n      }\n\n      const isLeaf = i === sourcePathSegments.length - 1;\n\n      let child = node.children?.find(child => child.name === sourcePathSegment);\n      if (!child) {\n        child = newNode(sourcePathSegment);\n        node.children = node.children || [];\n        node.children.push(child);\n      }\n      node = child;\n\n      // Now that we've found or created the next node in the path, apply the data.\n      node.resourceBytes += data.resourceBytes;\n\n      // Only leaf nodes might have duplication data.\n      if (isLeaf && data.duplicatedNormalizedModuleName !== undefined) {\n        node.duplicatedNormalizedModuleName = data.duplicatedNormalizedModuleName;\n      }\n    });\n  }\n\n  // For every source file, apply the data to all components\n  // of the source path, creating nodes as necessary.\n  for (const [source, data] of Object.entries(sourcesData)) {\n    addAllNodesInSourcePath(source, data);\n  }\n\n  /**\n   * Collapse nodes that have only one child.\n   */\n  function collapseAll(node: TreemapNode): void {\n    while (node.children && node.children.length === 1) {\n      const child = node.children[0];\n      node.name += '/' + child.name;\n      if (child.duplicatedNormalizedModuleName) {\n        node.duplicatedNormalizedModuleName = child.duplicatedNormalizedModuleName;\n      }\n      node.children = child.children;\n    }\n\n    if (node.children) {\n      for (const child of node.children) {\n        collapseAll(child);\n      }\n    }\n  }\n  collapseAll(sourceRootNode);\n\n  // If sourceRootNode.name is falsy (no defined sourceRoot + no collapsed common prefix),\n  // collapse the sourceRootNode children into the scriptNode.\n  // Otherwise, we add another node.\n  if (!sourceRootNode.name) {\n    return {\n      ...sourceRootNode,\n      name: src,\n      children: sourceRootNode.children,\n    };\n  }\n\n  // Script node should be just the script src.\n  const scriptNode = {...sourceRootNode};\n  scriptNode.name = src;\n  scriptNode.children = [sourceRootNode];\n  return scriptNode;\n}\n\nfunction getNetworkRequestSizes(request: Trace.Types.Events.SyntheticNetworkRequest):\n    {resourceSize: number, transferSize: number, headersTransferSize: number} {\n  const resourceSize = request.args.data.decodedBodyLength;\n  const transferSize = request.args.data.encodedDataLength;\n  // TODO: add something like `responseHeadersTransferSize` to trace\n  // SyntheticNetworkRequest (see Lighthouse). For now, incorrectly include the size\n  // of the headers here.\n  const headersTransferSize = 0;\n  return {resourceSize, transferSize, headersTransferSize};\n}\n\n/**\n * Returns an array of nodes, where the first level of nodes represents every script.\n *\n * Every external script has a node.\n * All inline scripts are combined into a single node.\n * If a script has a source map, that node will be created by makeScriptNode.\n *\n * Example return result:\n *  - index.html (inline scripts)\n *  - main.js\n *  - - webpack://\n *  - - - react.js\n *  - - - app.js\n *  - i-have-no-map.js\n */\nexport function createTreemapData(\n    scripts: Trace.Handlers.ModelHandlers.Scripts.ScriptsData,\n    duplication: Trace.Extras.ScriptDuplication.ScriptDuplication): TreemapData {\n  const nodes: TreemapNode[] = [];\n  const htmlNodesByFrameId = new Map<string, TreemapNode>();\n\n  for (const script of scripts.scripts) {\n    if (!script.url) {\n      continue;\n    }\n\n    const name = script.url;\n    const sizes = Trace.Handlers.ModelHandlers.Scripts.getScriptGeneratedSizes(script);\n\n    let node: TreemapNode;\n    if (script.sourceMap && sizes && !('errorMessage' in sizes)) {\n      // Create nodes for each module in a bundle.\n\n      const sourcesData: Record<string, SourceData> = {};\n      for (const [source, resourceBytes] of Object.entries(sizes.files)) {\n        const sourceData: SourceData = {\n          resourceBytes,\n          encodedBytes: undefined,\n        };\n\n        const key = Trace.Extras.ScriptDuplication.normalizeSource(source);\n        if (duplication.has(key)) {\n          sourceData.duplicatedNormalizedModuleName = key;\n        }\n\n        sourcesData[source] = sourceData;\n      }\n\n      if (sizes.unmappedBytes) {\n        const sourceData: SourceData = {\n          resourceBytes: sizes.unmappedBytes,\n        };\n        sourcesData['(unmapped)'] = sourceData;\n      }\n\n      node = makeScriptNode(script.url, script.url, sourcesData);\n    } else {\n      // No valid source map for this script, so we can only produce a single node.\n      node = {\n        name,\n        resourceBytes: script.content?.length ?? 0,\n        encodedBytes: undefined,\n      };\n    }\n\n    // If this is an inline script, place the node inside a top-level (aka depth-one)\n    // node. Also separate each iframe / the main page's inline scripts into their\n    // own top-level nodes.\n    if (script.inline) {\n      let htmlNode = htmlNodesByFrameId.get(script.frame);\n      if (!htmlNode) {\n        htmlNode = {\n          name,\n          resourceBytes: 0,\n          encodedBytes: undefined,\n          children: [],\n        };\n        htmlNodesByFrameId.set(script.frame, htmlNode);\n        nodes.push(htmlNode);\n      }\n      htmlNode.resourceBytes += node.resourceBytes;\n      node.name = script.content ? '(inline) ' + script.content.trimStart().substring(0, 15) + '…' : '(inline)';\n      htmlNode.children?.push(node);\n    } else {\n      // Non-inline scripts each have their own top-level node.\n      nodes.push(node);\n\n      if (script.request) {\n        const {transferSize, headersTransferSize} = getNetworkRequestSizes(script.request);\n        const bodyTransferSize = transferSize - headersTransferSize;\n        node.encodedBytes = bodyTransferSize;\n      } else {\n        node.encodedBytes = node.resourceBytes;\n      }\n    }\n  }\n\n  // For the HTML nodes, set encodedBytes to be the size of all the inline\n  // scripts multiplied by the average compression ratio of the HTML document.\n  for (const [frameId, node] of htmlNodesByFrameId) {\n    const script = scripts.scripts.find(\n        s => s.request?.args.data.resourceType === 'Document' && s.request?.args.data.frame === frameId);\n    if (script?.request) {\n      const {resourceSize, transferSize, headersTransferSize} = getNetworkRequestSizes(script.request);\n      const inlineScriptsPct = node.resourceBytes / resourceSize;\n      const bodyTransferSize = transferSize - headersTransferSize;\n      node.encodedBytes = Math.floor(bodyTransferSize * inlineScriptsPct);\n    } else {\n      node.encodedBytes = node.resourceBytes;\n    }\n  }\n\n  return nodes;\n}\n"]}