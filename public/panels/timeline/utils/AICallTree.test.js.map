{"version":3,"file":"AICallTree.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/AICallTree.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,uBAAuB,EAAC,MAAM,wCAAwC,CAAC;AAC/E,OAAO,EAAC,WAAW,EAAC,MAAM,iCAAiC,CAAC;AAE5D,OAAO,KAAK,KAAK,MAAM,YAAY,CAAC;AAEpC,uBAAuB,CAAC,YAAY,EAAE,GAAG,EAAE;IACzC,EAAE,CAAC,0BAA0B,EAAE,KAAK;QAClC,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,kCAAkC,CAAC,CAAC;QAC9F,MAAM,UAAU,GAAG,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC;QACxD,2DAA2D;QAC3D,MAAM,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,YAAY,CAAC,CAAC;QAC1E,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACpD,CAAC;QACD,MAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;QAC1F,MAAM,YAAY,GAAG,IAAI;YACrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwCP,CAAC,IAAI,EAAE,CAAC;QACL,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,YAAY,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK;QAClD,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,gCAAgC,CAAC,CAAC;QAC5F,MAAM,UAAU,GAAG,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC;QACxD,MAAM,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,YAAY,CAAC,CAAC;QAC1E,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACpD,CAAC;QACD,MAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;QAE1F,uEAAuE;QACvE,MAAM,OAAO,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;QACrC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAClC,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC;QAC7E,MAAM,CAAC,MAAM,CAAC,YAAY,GAAG,EAAE,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\n\nimport * as Utils from './utils.js';\n\ndescribeWithEnvironment('AICallTree', () => {\n  it('serializes a simple tree', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev-outermost-frames.json.gz');\n    const mainEvents = parsedTrace.Renderer.allTraceEntries;\n    // A function '_ds.q.ns'. Has a very small tree by default.\n    const selectedEvent = mainEvents.find(event => event.ts === 465457308823);\n    if (!selectedEvent) {\n      throw new Error('Could not find expected event.');\n    }\n    const callTree = Utils.AICallTree.AICallTree.from(selectedEvent, mainEvents, parsedTrace);\n    const expectedData = '\\n' +\n        `\n\n# All URL #s:\n\n  * 0: https://www.gstatic.com/devrel-devsite/prod/vafe2e13ca17bb026e70df42a2ead1c8192750e86a12923a88eda839025dabf95/js/devsite_app_module.js\n\n# Call tree:\n\nNode: 1 – Task\ndur: 0.2\nChildren:\n  * 2 – Timer fired\n\nNode: 2 – Timer fired\ndur: 0.2\nChildren:\n  * 3 – Function call\n\nNode: 3 – Function call\ndur: 0.2\nURL #: 0\nChildren:\n  * 4 – _ds.q.ns\n\nNode: 4 – _ds.q.ns\nSelected: true\ndur: 0.2\nURL #: 0\nChildren:\n  * 5 – clearTimeout\n\nNode: 5 – clearTimeout\ndur: 0.2\nself: 0\nChildren:\n  * 6 – Recalculate style\n\nNode: 6 – Recalculate style\ndur: 0.2\nself: 0.2\n`.trim();\n    assert.strictEqual(callTree.serialize(), expectedData);\n  });\n\n  it('serializes a tree with lots of recursion', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'one-second-interaction.json.gz');\n    const mainEvents = parsedTrace.Renderer.allTraceEntries;\n    const selectedEvent = mainEvents.find(event => event.ts === 141251951589);\n    if (!selectedEvent) {\n      throw new Error('Could not find expected event.');\n    }\n    const callTree = Utils.AICallTree.AICallTree.from(selectedEvent, mainEvents, parsedTrace);\n\n    // We don't need to validate the whole tree, just that it has recursion\n    const treeStr = callTree.serialize();\n    const lines = treeStr.split('\\n');\n    const fibCallCount = lines.filter(line => line.includes('fibonacci')).length;\n    assert.isTrue(fibCallCount > 10);\n  });\n});\n"]}