{"version":3,"file":"Helpers.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/Helpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\n\nfunction createTrimmedUrlSearch(url: URL): string {\n  const maxSearchValueLength = 8;\n  let search = '';\n\n  for (const [key, value] of url.searchParams) {\n    if (search) {\n      search += '&';\n    }\n    if (value) {\n      search += `${key}=${Platform.StringUtilities.trimEndWithMaxLength(value, maxSearchValueLength)}`;\n    } else {\n      search += key;\n    }\n  }\n  if (search) {\n    search = '?' + search;\n  }\n\n  return search;\n}\n\n/**\n * Shortens URLs as much as possible while keeping important context.\n *\n * - Elides the host if the previous url is the same host+protocol\n * - Always elide search param values\n * - Always includes protocol/domain if there is a mix of protocols\n * - First URL is elided fully to show just the pathname, unless there is a mix of protocols (see above)\n */\nexport function createUrlLabels(urls: URL[]): string[] {\n  const labels: string[] = [];\n  const isAllHttps = urls.every(url => url.protocol === 'https:');\n\n  for (const [index, url] of urls.entries()) {\n    const previousUrl = urls[index - 1];\n    const sameHostAndProtocol = previousUrl && url.host === previousUrl.host && url.protocol === previousUrl.protocol;\n    let elideHost = sameHostAndProtocol;\n    let elideProtocol = isAllHttps;\n\n    // For the first URL, show just the pathname and search - this will be relative to the domain as seen in the\n    // trace dropdown selector. Exception is if there are non-https protocols, in which case we're only going to elide\n    // parts of the query string.\n    if (index === 0 && isAllHttps) {\n      elideHost = true;\n      elideProtocol = true;\n    }\n\n    const search = createTrimmedUrlSearch(url);\n    if (!elideProtocol) {\n      labels.push(`${url.protocol}//${url.host}${url.pathname}${search}`);\n    } else if (!elideHost) {\n      labels.push(`${url.host}${url.pathname}${search}`);\n    } else {\n      labels.push(`${url.pathname}${search}`);\n    }\n  }\n\n  // Lastly, remove any trailing `/`.\n  return labels.map(label => label.length > 1 && label.endsWith('/') ? label.substring(0, label.length - 1) : label);\n}\n\n/**\n * Shortens the provided URL for use within a narrow display usecase.\n *\n * The resulting string will at least contain the last path component of the URL.\n * More components are included until a limit of maxChars (default 20) is reached.\n * No querystring is included.\n *\n * If the last path component is larger than maxChars characters, the middle is elided.\n */\nexport function shortenUrl(url: URL, maxChars = 20): string {\n  const parts = url.pathname.split('/');\n  let shortenedUrl = parts.at(-1) ?? '';\n\n  if (shortenedUrl.length > maxChars) {\n    return Platform.StringUtilities.trimMiddle(shortenedUrl, maxChars);\n  }\n\n  let i = parts.length - 1;\n  while (--i >= 0) {\n    if (shortenedUrl.length + parts[i].length <= maxChars) {\n      shortenedUrl = `${parts[i]}/${shortenedUrl}`;\n    }\n  }\n\n  return shortenedUrl;\n}\n"]}