{"version":3,"file":"AICallTree.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/AICallTree.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../../models/trace/trace.js';\n\nimport {nameForEntry} from './EntryName.js';\nimport {visibleTypes} from './EntryStyles.js';\nimport {SourceMapsResolver} from './SourceMapsResolver.js';\n\n/** Iterates from a node down through its descendents. If the callback returns true, the loop stops. */\nfunction depthFirstWalk(\n    nodes: MapIterator<Trace.Extras.TraceTree.Node>, callback: (arg0: Trace.Extras.TraceTree.Node) => void|true): void {\n  for (const node of nodes) {\n    if (callback?.(node)) {\n      break;\n    }\n    depthFirstWalk(node.children().values(), callback);  // Go deeper.\n  }\n}\n\nexport class AICallTree {\n  constructor(\n      public selectedNode: Trace.Extras.TraceTree.Node|null,\n      public rootNode: Trace.Extras.TraceTree.TopDownRootNode,\n      // TODO: see if we can avoid passing around this entire thing.\n      public parsedTrace: Trace.Handlers.Types.ParsedTrace,\n  ) {\n  }\n\n  /**\n   * Builds a call tree representing all calls within the given timeframe.\n   * Only includes events that:\n   * 1. Are on the main thread\n   * 2. Are known to the Renderer / Samples handler.\n   * 3. Are at least 0.05% in duration of the total range.\n   */\n  static fromTime(\n      start: Trace.Types.Timing.Micro, end: Trace.Types.Timing.Micro,\n      parsedTrace: Trace.Handlers.Types.ParsedTrace): AICallTree|null {\n    const threads = Trace.Handlers.Threads.threadsInTrace(parsedTrace);\n    let mainThread = threads.find(thread => {\n      return thread.type === Trace.Handlers.Threads.ThreadType.MAIN_THREAD;\n    });\n    if (!mainThread) {\n      // Pull out the first (and most likely only) CPU Profile to support Node CPU Profiles\n      mainThread = threads.find(thread => {\n        return thread.type === Trace.Handlers.Threads.ThreadType.CPU_PROFILE;\n      });\n    }\n    if (!mainThread) {\n      return null;\n    }\n\n    const selectedEventBounds = Trace.Helpers.Timing.traceWindowFromMicroSeconds(start, end);\n    const threadEvents = parsedTrace.Renderer.processes.get(mainThread.pid)?.threads.get(mainThread.tid)?.entries;\n\n    if (!threadEvents) {\n      return null;\n    }\n    const overlappingEvents = threadEvents.filter(e => Trace.Helpers.Timing.eventIsInBounds(e, selectedEventBounds));\n\n    const visibleEventsFilter = new Trace.Extras.TraceFilter.VisibleEventsFilter(visibleTypes());\n\n    // By default, we remove events whose duration is less than 0.5% of the total\n    // range. So if the range is 10s, an event must be 0.05s+ to be included.\n    // This does risk eliminating useful data when we pass it to the LLM, but\n    // we are trying to balance context window sizes and not using it up too\n    // eagerly. We will experiment with this filter and likely make it smarter\n    // or tweak it based on range size rather than using a blanket value. Or we\n    // could consider limiting the depth when we serialize. Or some\n    // combination!\n    const rangeDuration = end - start;\n    const minDuration = Trace.Types.Timing.Micro(rangeDuration * 0.005);\n    const minDurationFilter = new MinDurationFilter(minDuration);\n    const compileCodeFilter = new ExcludeCompileCodeFilter();\n    // Build a tree bounded by the selected event's timestamps, and our other filters applied\n    const rootNode = new Trace.Extras.TraceTree.TopDownRootNode(overlappingEvents, {\n      filters: [compileCodeFilter, visibleEventsFilter, minDurationFilter],\n      startTime: Trace.Helpers.Timing.microToMilli(start),\n      endTime: Trace.Helpers.Timing.microToMilli(end),\n      doNotAggregate: true,\n      includeInstantEvents: true,\n    });\n\n    const instance = new AICallTree(null /* no selected node*/, rootNode, parsedTrace);\n    return instance;\n  }\n  /**\n   * Attempts to build an AICallTree from a given selected event. It also\n   * validates that this event is one that we support being used with the AI\n   * Assistance panel, which [as of January 2025] means:\n   * 1. It is on the main thread.\n   * 2. It exists in either the Renderer or Sample handler's entryToNode map.\n   * This filters out other events we make such as SyntheticLayoutShifts which are not valid\n   * If the event is not valid, or there is an unexpected error building the tree, `null` is returned.\n   */\n  static fromEvent(selectedEvent: Trace.Types.Events.Event, parsedTrace: Trace.Handlers.Types.ParsedTrace): AICallTree\n      |null {\n    // First: check that the selected event is on the thread we have identified as the main thread.\n    const threads = Trace.Handlers.Threads.threadsInTrace(parsedTrace);\n    const thread = threads.find(t => t.pid === selectedEvent.pid && t.tid === selectedEvent.tid);\n    if (!thread) {\n      return null;\n    }\n    // We allow two thread types to deal with the NodeJS use case.\n    // MAIN_THREAD is used when a trace has been generated through Chrome\n    //   tracing on a website (and we have a renderer)\n    // CPU_PROFILE is used only when we have received a CPUProfile - in this\n    //   case all the threads are CPU_PROFILE so we allow those. If we only allow\n    //   MAIN_THREAD then we wouldn't ever allow NodeJS users to use the AI\n    //   integration.\n    if (thread.type !== Trace.Handlers.Threads.ThreadType.MAIN_THREAD &&\n        thread.type !== Trace.Handlers.Threads.ThreadType.CPU_PROFILE) {\n      return null;\n    }\n\n    // Ensure that the event is known to either the Renderer or Samples\n    // handler. This helps exclude synthetic events we build up for other\n    // information such as Layout Shift clusters.\n    // We check Renderer + Samples to ensure we support CPU Profiles (which do\n    // not populate the Renderer Handler)\n    if (!parsedTrace.Renderer.entryToNode.has(selectedEvent) && !parsedTrace.Samples.entryToNode.has(selectedEvent)) {\n      return null;\n    }\n\n    const {startTime, endTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(selectedEvent);\n\n    const selectedEventBounds = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n        Trace.Helpers.Timing.milliToMicro(startTime), Trace.Helpers.Timing.milliToMicro(endTime));\n    let threadEvents = parsedTrace.Renderer.processes.get(selectedEvent.pid)?.threads.get(selectedEvent.tid)?.entries;\n    if (!threadEvents) {\n      // None from the renderer: try the samples handler, this might be a CPU trace.\n      threadEvents = parsedTrace.Samples.profilesInProcess.get(selectedEvent.pid)?.get(selectedEvent.tid)?.profileCalls;\n    }\n\n    if (!threadEvents) {\n      console.warn(`AICallTree: could not find thread for selected entry: ${selectedEvent}`);\n      return null;\n    }\n    const overlappingEvents = threadEvents.filter(e => Trace.Helpers.Timing.eventIsInBounds(e, selectedEventBounds));\n\n    const visibleEventsFilter = new Trace.Extras.TraceFilter.VisibleEventsFilter(visibleTypes());\n    const customFilter = new SelectedEventDurationFilter(selectedEvent);\n    const compileCodeFilter = new ExcludeCompileCodeFilter(selectedEvent);\n    // Build a tree bounded by the selected event's timestamps, and our other filters applied\n\n    const rootNode = new Trace.Extras.TraceTree.TopDownRootNode(overlappingEvents, {\n      filters: [compileCodeFilter, visibleEventsFilter, customFilter],\n      startTime,\n      endTime,\n      includeInstantEvents: true,\n    });\n\n    // Walk the tree to find selectedNode\n    let selectedNode: Trace.Extras.TraceTree.Node|null = null;\n    depthFirstWalk([rootNode].values(), node => {\n      if (node.event === selectedEvent) {\n        selectedNode = node;\n        return true;\n      }\n      return;\n    });\n\n    if (selectedNode === null) {\n      console.warn(`Selected event ${selectedEvent} not found within its own tree.`);\n      return null;\n    }\n    const instance = new AICallTree(selectedNode, rootNode, parsedTrace);\n    // instance.logDebug();\n    return instance;\n  }\n\n  /** Define precisely how the call tree is serialized. Typically called from within `PerformanceAgent` */\n  serialize(): string {\n    const nodeToIdMap = new Map<Trace.Extras.TraceTree.Node, number>();\n    // Keep a map of URLs. We'll output a LUT to keep size down.\n    const allUrls: string[] = [];\n\n    let nodesStr = '';\n    depthFirstWalk(this.rootNode.children().values(), node => {\n      nodesStr += AICallTree.stringifyNode(node, this.parsedTrace, this.selectedNode, nodeToIdMap, allUrls);\n    });\n\n    let output = '';\n    if (allUrls.length) {\n      // Output lookup table of URLs within this tree\n      output += '\\n# All URL #s:\\n\\n' + allUrls.map((url, index) => `  * ${index}: ${url}`).join('\\n');\n    }\n    output += '\\n\\n# Call tree:' + nodesStr;\n    return output;\n  }\n\n  /* This custom YAML-like format with an adjacency list for children is 35% more token efficient than JSON */\n  static stringifyNode(\n      node: Trace.Extras.TraceTree.Node, parsedTrace: Trace.Handlers.Types.ParsedTrace,\n      selectedNode: Trace.Extras.TraceTree.Node|null, nodeToIdMap: Map<Trace.Extras.TraceTree.Node, number>,\n      allUrls: string[]): string {\n    const event = node.event;\n    if (!event) {\n      throw new Error('Event required');\n    }\n\n    const url = SourceMapsResolver.resolvedURLForEntry(parsedTrace, event);\n    // Get the index of the URL within allUrls, and push if needed. Set to -1 if there's no URL here.\n    const urlIndex = !url ? -1 : allUrls.indexOf(url) === -1 ? allUrls.push(url) - 1 : allUrls.indexOf(url);\n    const children = Array.from(node.children().values());\n\n    // Identifier string includes an id and name:\n    //   eg \"[13] Parse HTML\" or \"[45] parseCPUProfileFormatFromFile\"\n    const getIdentifier = (node: Trace.Extras.TraceTree.Node): string => {\n      if (!nodeToIdMap.has(node)) {\n        nodeToIdMap.set(node, nodeToIdMap.size + 1);\n      }\n      return `${nodeToIdMap.get(node)} – ${nameForEntry(node.event, parsedTrace)}`;\n    };\n\n    // Round milliseconds because we don't need the precision\n    const roundToTenths = (num: number): number => Math.round(num * 10) / 10;\n\n    // Build a multiline string describing this callframe node\n    const lines = [\n      `\\n\\nNode: ${getIdentifier(node)}`,\n      selectedNode === node && 'Selected: true',\n      node.totalTime && `dur: ${roundToTenths(node.totalTime)}`,\n      // node.functionSource && `snippet: ${node.functionSource.slice(0, 250)}`,\n      node.selfTime && `self: ${roundToTenths(node.selfTime)}`,\n      urlIndex !== -1 && `URL #: ${urlIndex}`,\n    ];\n    if (children.length) {\n      lines.push('Children:');\n      lines.push(...children.map(node => `  * ${getIdentifier(node)}`));\n    }\n    return lines.filter(Boolean).join('\\n');\n  }\n\n  // Only used for debugging.\n  logDebug(): void {\n    const str = this.serialize();\n    // eslint-disable-next-line no-console\n    console.log('🎆', str);\n    if (str.length > 45_000) {\n      // Manual testing shows 45k fits. 50k doesnt.\n      // Max is 32k _tokens_, but tokens to bytes is wishywashy, so... hard to know for sure.\n      console.warn('Output will likely not fit in the context window. Expect an AIDA error.');\n    }\n  }\n}\n\n/**\n * These events are very noisy and take up room in the context window for no real benefit.\n */\nexport class ExcludeCompileCodeFilter extends Trace.Extras.TraceFilter.TraceFilter {\n  #selectedEvent: Trace.Types.Events.Event|null = null;\n  constructor(selectedEvent?: Trace.Types.Events.Event) {\n    super();\n    this.#selectedEvent = selectedEvent ?? null;\n  }\n\n  accept(event: Trace.Types.Events.Event): boolean {\n    if (this.#selectedEvent && event === this.#selectedEvent) {\n      // If the user selects this event, we should accept it, else the\n      // behaviour is confusing when the selected event is not used.\n      return true;\n    }\n    return event.name !== Trace.Types.Events.Name.COMPILE_CODE;\n  }\n}\n\nexport class SelectedEventDurationFilter extends Trace.Extras.TraceFilter.TraceFilter {\n  #minDuration: Trace.Types.Timing.Micro;\n  #selectedEvent: Trace.Types.Events.Event;\n  constructor(selectedEvent: Trace.Types.Events.Event) {\n    super();\n    // The larger the selected event is, the less small ones matter. We'll exclude items under ½% of the selected event's size\n    this.#minDuration = Trace.Types.Timing.Micro((selectedEvent.dur ?? 1) * 0.005);\n    this.#selectedEvent = selectedEvent;\n  }\n  accept(event: Trace.Types.Events.Event): boolean {\n    if (event === this.#selectedEvent) {\n      return true;\n    }\n    return event.dur ? event.dur >= this.#minDuration : false;\n  }\n}\n\nexport class MinDurationFilter extends Trace.Extras.TraceFilter.TraceFilter {\n  #minDuration: Trace.Types.Timing.Micro;\n\n  constructor(minDuration: Trace.Types.Timing.Micro) {\n    super();\n    this.#minDuration = minDuration;\n  }\n\n  accept(event: Trace.Types.Events.Event): boolean {\n    return event.dur ? event.dur >= this.#minDuration : false;\n  }\n}\n"]}