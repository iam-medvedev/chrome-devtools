{"version":3,"file":"IgnoreList.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/IgnoreList.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as Bindings from '../../../models/bindings/bindings.js';\nimport * as Trace from '../../../models/trace/trace.js';\n\nimport {SourceMapsResolver} from './SourceMapsResolver.js';\n\nconst UIStrings = {\n  /**\n   * @description Refers to when skipping content scripts is enabled and the current script is ignored because it's a content script.\n   */\n  skipContentScripts: 'Content script',\n  /**\n   * @description Refers to when skipping known third party scripts is enabled and the current script is ignored because it's a known third party script.\n   */\n  skip3rdPartyScripts: 'Marked with ignoreList in source map',\n  /**\n   * @description Refers to when skipping anonymous scripts is enabled and the current script is ignored because is an anonymous script.\n   */\n  skipAnonymousScripts: 'Anonymous script',\n  /**\n   * @description Refers to when the current script is ignored because of an unknown rule.\n   */\n  unknown: 'Unknown',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/utils/IgnoreList.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nfunction getUrlAndIgnoreListOptions(entry: Trace.Types.Events.SyntheticProfileCall):\n    {url: Platform.DevToolsPath.UrlString, ignoreListOptions: Bindings.IgnoreListManager.IgnoreListGeneralRules} {\n  const rawUrl = entry.callFrame.url as Platform.DevToolsPath.UrlString;\n\n  const sourceMappedData = SourceMapsResolver.resolvedCodeLocationForEntry(entry);\n  const script = sourceMappedData?.script;\n  const uiSourceCode = sourceMappedData?.devtoolsLocation?.uiSourceCode;\n  const resolvedUrl = uiSourceCode?.url();\n  const isKnownThirdParty = uiSourceCode?.isKnownThirdParty();\n  const isContentScript = script?.isContentScript();\n  const ignoreListOptions: Bindings.IgnoreListManager.IgnoreListGeneralRules = {isContentScript, isKnownThirdParty};\n  const url = resolvedUrl || rawUrl;\n  return {url, ignoreListOptions};\n}\n\nexport function isIgnoreListedEntry(entry: Trace.Types.Events.Event): boolean {\n  if (!Trace.Types.Events.isProfileCall(entry)) {\n    return false;\n  }\n  const {url, ignoreListOptions} = getUrlAndIgnoreListOptions(entry);\n  return isIgnoreListedURL(url, ignoreListOptions);\n}\n\nfunction isIgnoreListedURL(\n    url: Platform.DevToolsPath.UrlString, options?: Bindings.IgnoreListManager.IgnoreListGeneralRules): boolean {\n  return Bindings.IgnoreListManager.IgnoreListManager.instance().isUserIgnoreListedURL(url, options);\n}\n\n/**\n * Returns the ignore reason for the given entry.\n *\n * This function should be called when `isIgnoreListedEntry(entry)` is true\n */\nexport function getIgnoredReasonString(entry: Trace.Types.Events.Event): string {\n  if (!Trace.Types.Events.isProfileCall(entry)) {\n    console.warn('Ignore list feature should only support ProfileCall.');\n    return '';\n  }\n  const {url, ignoreListOptions} = getUrlAndIgnoreListOptions(entry);\n\n  const ignoreListMgr = Bindings.IgnoreListManager.IgnoreListManager.instance();\n  if (ignoreListOptions.isContentScript && ignoreListMgr.skipContentScripts) {\n    return i18nString(UIStrings.skipContentScripts);\n  }\n  if (ignoreListOptions.isKnownThirdParty && ignoreListMgr.automaticallyIgnoreListKnownThirdPartyScripts) {\n    return i18nString(UIStrings.skip3rdPartyScripts);\n  }\n\n  if (!url) {\n    if (ignoreListMgr.skipAnonymousScripts) {\n      return i18nString(UIStrings.skipAnonymousScripts);\n    }\n    // This branch shouldn't be reached because when |skipAnonymousScripts| is false, this url is not ignored.\n    // So just return empty string to make the type check work.\n    return '';\n  }\n  const regex = ignoreListMgr.getFirstMatchedRegex(url);\n  return regex ? regex.source : i18nString(UIStrings.unknown);\n}\n"]}