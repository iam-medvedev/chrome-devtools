{"version":3,"file":"AIContext.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/AIContext.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,KAAK,MAAM,gCAAgC,CAAC;AA0BxD,SAAS,kBAAkB,CAAC,QAA+C;IACzE,qFAAqF;IACrF,+EAA+E;IAC/E,gEAAgE;IAChE,OAAO,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;AAC1F,CAAC;AAED,MAAM,OAAO,UAAU;IACrB,MAAM,CAAC,IAAI,CAAC,WAAyC;QACnD,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC;QAED,MAAM,UAAU,GAAG,kBAAkB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC5D,OAAO,IAAI,UAAU,CAAC;YACpB,IAAI,EAAE,MAAM;YACZ,WAAW;YACX,UAAU;SACX,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,WAAyC,EAAE,OAA0C;QAEtG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC;QAED,MAAM,UAAU,GAAG,kBAAkB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC5D,OAAO,IAAI,UAAU,CAAC;YACpB,IAAI,EAAE,SAAS;YACf,WAAW;YACX,UAAU;YACV,OAAO;SACR,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,QAAoB;QACtC,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC;QAE/C,mDAAmD;QACnD,4DAA4D;QAC5D,IAAI,UAAU,GAAG,IAAI,CAAC;QACtB,IAAI,QAAQ,EAAE,CAAC;YACb,MAAM,iBAAiB,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC7F,UAAU,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,sBAAsB,CAAC;gBACrF,SAAS,EAAE,iBAAiB;gBAC5B,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;gBACC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC;QAED,OAAO,IAAI,UAAU,CAAC,EAAC,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAC,CAAC,CAAC;IACtG,CAAC;IAED,KAAK,CAAiB;IAEtB,YAAY,IAAoB;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF;AAED,MAAM,UAAU,iCAAiC,CAAC,KAA6B;IAC7E,MAAM,WAAW,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;IACxC,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACtC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../../models/trace/trace.js';\n\nimport type {AICallTree} from './AICallTree.js';\n\nexport interface AgentFocusDataFull {\n  type: 'full';\n  parsedTrace: Trace.TraceModel.ParsedTrace;\n  insightSet: Trace.Insights.Types.InsightSet|null;\n}\n\ninterface AgentFocusDataCallTree {\n  type: 'call-tree';\n  parsedTrace: Trace.TraceModel.ParsedTrace;\n  insightSet: Trace.Insights.Types.InsightSet|null;\n  callTree: AICallTree;\n}\n\nexport interface AgentFocusDataInsight {\n  type: 'insight';\n  parsedTrace: Trace.TraceModel.ParsedTrace;\n  insightSet: Trace.Insights.Types.InsightSet|null;\n  insight: Trace.Insights.Types.InsightModel;\n}\n\ntype AgentFocusData = AgentFocusDataCallTree|AgentFocusDataInsight|AgentFocusDataFull;\n\nfunction getFirstInsightSet(insights: Trace.Insights.Types.TraceInsightSets): Trace.Insights.Types.InsightSet|null {\n  // Currently only support a single insight set. Pick the first one with a navigation.\n  // TODO(cjamcl): we should just give the agent the entire insight set, and give\n  // summary detail about all of them + the ability to query each.\n  return [...insights.values()].filter(insightSet => insightSet.navigation).at(0) ?? null;\n}\n\nexport class AgentFocus {\n  static full(parsedTrace: Trace.TraceModel.ParsedTrace): AgentFocus {\n    if (!parsedTrace.insights) {\n      throw new Error('missing insights');\n    }\n\n    const insightSet = getFirstInsightSet(parsedTrace.insights);\n    return new AgentFocus({\n      type: 'full',\n      parsedTrace,\n      insightSet,\n    });\n  }\n\n  static fromInsight(parsedTrace: Trace.TraceModel.ParsedTrace, insight: Trace.Insights.Types.InsightModel):\n      AgentFocus {\n    if (!parsedTrace.insights) {\n      throw new Error('missing insights');\n    }\n\n    const insightSet = getFirstInsightSet(parsedTrace.insights);\n    return new AgentFocus({\n      type: 'insight',\n      parsedTrace,\n      insightSet,\n      insight,\n    });\n  }\n\n  static fromCallTree(callTree: AICallTree): AgentFocus {\n    const insights = callTree.parsedTrace.insights;\n\n    // Select the insight set containing the call tree.\n    // If for some reason that fails, fallback to the first one.\n    let insightSet = null;\n    if (insights) {\n      const callTreeTimeRange = Trace.Helpers.Timing.traceWindowFromEvent(callTree.rootNode.event);\n      insightSet = insights.values().find(set => Trace.Helpers.Timing.boundsIncludeTimeRange({\n        timeRange: callTreeTimeRange,\n        bounds: set.bounds,\n      })) ??\n          getFirstInsightSet(insights);\n    }\n\n    return new AgentFocus({type: 'call-tree', parsedTrace: callTree.parsedTrace, insightSet, callTree});\n  }\n\n  #data: AgentFocusData;\n\n  constructor(data: AgentFocusData) {\n    this.#data = data;\n  }\n\n  get data(): AgentFocusData {\n    return this.#data;\n  }\n}\n\nexport function getPerformanceAgentFocusFromModel(model: Trace.TraceModel.Model): AgentFocus|null {\n  const parsedTrace = model.parsedTrace();\n  if (!parsedTrace) {\n    return null;\n  }\n\n  return AgentFocus.full(parsedTrace);\n}\n"]}