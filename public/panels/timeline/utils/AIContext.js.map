{"version":3,"file":"AIContext.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/AIContext.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AA6B7B,MAAM,OAAO,UAAU;IACrB,MAAM,CAAC,IAAI,CACP,WAA6C,EAAE,QAA+C,EAC9F,aAAwC;QAC1C,qFAAqF;QACrF,MAAM,UAAU,GAAG,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;QACpG,OAAO,IAAI,UAAU,CAAC;YACpB,IAAI,EAAE,MAAM;YACZ,WAAW;YACX,UAAU;YACV,aAAa;SACd,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,WAAW,CACd,WAA6C,EAAE,QAA+C,EAC9F,aAAwC,EAAE,OAA0C;QACtF,qFAAqF;QACrF,MAAM,UAAU,GAAG,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;QACpG,OAAO,IAAI,UAAU,CAAC;YACpB,IAAI,EAAE,SAAS;YACf,WAAW;YACX,UAAU;YACV,aAAa;YACb,OAAO;SACR,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,QAAoB;QACtC,OAAO,IAAI,UAAU,CAAC,EAAC,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAE,QAAQ,EAAC,CAAC,CAAC;IAC1F,CAAC;IAED,KAAK,CAAiB;IAEtB,YAAY,IAAoB;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF;AAED,MAAM,UAAU,iCAAiC,CAAC,KAA6B;IAC7E,MAAM,WAAW,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;IACxC,MAAM,QAAQ,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;IACvC,MAAM,aAAa,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;IACvC,IAAI,CAAC,QAAQ,IAAI,CAAC,WAAW,IAAI,CAAC,aAAa,EAAE,CAAC;QAChD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;AAC/D,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Trace from '../../../models/trace/trace.js';\n\nimport type {AICallTree} from './AICallTree.js';\n\nexport interface AgentFocusDataFull {\n  type: 'full';\n  parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  insightSet: Trace.Insights.Types.InsightSet|null;\n  traceMetadata: Trace.Types.File.MetaData;\n}\n\ninterface AgentFocusDataCallTree {\n  type: 'call-tree';\n  parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  callTree: AICallTree;\n}\n\nexport interface AgentFocusDataInsight {\n  type: 'insight';\n  parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  insightSet: Trace.Insights.Types.InsightSet|null;\n  traceMetadata: Trace.Types.File.MetaData;\n  insight: Trace.Insights.Types.InsightModel;\n}\n\ntype AgentFocusData = AgentFocusDataCallTree|AgentFocusDataInsight|AgentFocusDataFull;\n\nexport class AgentFocus {\n  static full(\n      parsedTrace: Trace.Handlers.Types.ParsedTrace, insights: Trace.Insights.Types.TraceInsightSets,\n      traceMetadata: Trace.Types.File.MetaData): AgentFocus {\n    // Currently only support a single insight set. Pick the first one with a navigation.\n    const insightSet = [...insights.values()].filter(insightSet => insightSet.navigation).at(0) ?? null;\n    return new AgentFocus({\n      type: 'full',\n      parsedTrace,\n      insightSet,\n      traceMetadata,\n    });\n  }\n\n  static fromInsight(\n      parsedTrace: Trace.Handlers.Types.ParsedTrace, insights: Trace.Insights.Types.TraceInsightSets,\n      traceMetadata: Trace.Types.File.MetaData, insight: Trace.Insights.Types.InsightModel): AgentFocus {\n    // Currently only support a single insight set. Pick the first one with a navigation.\n    const insightSet = [...insights.values()].filter(insightSet => insightSet.navigation).at(0) ?? null;\n    return new AgentFocus({\n      type: 'insight',\n      parsedTrace,\n      insightSet,\n      traceMetadata,\n      insight,\n    });\n  }\n\n  static fromCallTree(callTree: AICallTree): AgentFocus {\n    return new AgentFocus({type: 'call-tree', parsedTrace: callTree.parsedTrace, callTree});\n  }\n\n  #data: AgentFocusData;\n\n  constructor(data: AgentFocusData) {\n    this.#data = data;\n  }\n\n  get data(): AgentFocusData {\n    return this.#data;\n  }\n}\n\nexport function getPerformanceAgentFocusFromModel(model: Trace.TraceModel.Model): AgentFocus|null {\n  const parsedTrace = model.parsedTrace();\n  const insights = model.traceInsights();\n  const traceMetadata = model.metadata();\n  if (!insights || !parsedTrace || !traceMetadata) {\n    return null;\n  }\n\n  return AgentFocus.full(parsedTrace, insights, traceMetadata);\n}\n"]}