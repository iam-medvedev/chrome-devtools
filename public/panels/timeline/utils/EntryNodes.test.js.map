{"version":3,"file":"EntryNodes.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/EntryNodes.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Trace from '../../../models/trace/trace.js';\nimport {createTarget} from '../../../testing/EnvironmentHelpers.js';\nimport {\n  clearAllMockConnectionResponseHandlers,\n  describeWithMockConnection,\n  setMockConnectionResponseHandler,\n} from '../../../testing/MockConnection.js';\nimport {allThreadEntriesInTrace} from '../../../testing/TraceHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\n\nimport * as Utils from './utils.js';\n\ndescribeWithMockConnection('EntryNodes', function() {\n  beforeEach(async () => {\n    clearAllMockConnectionResponseHandlers();\n  });\n\n  describe('nodeIdsForEvent', () => {\n    it('identifies node ids for a Layout event', async function() {\n      const parsedTrace = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n      const layoutEvent = allThreadEntriesInTrace(parsedTrace).find(Trace.Types.Events.isLayout);\n      assert.isOk(layoutEvent);\n      const nodeIds = Utils.EntryNodes.nodeIdsForEvent(parsedTrace, layoutEvent);\n      assert.deepEqual(Array.from(nodeIds), [2]);\n    });\n\n    it('identifies node ids for a LayoutShift event', async function() {\n      const parsedTrace = await TraceLoader.traceEngine(this, 'web-dev-initial-url.json.gz');\n      const layoutShiftEvent = parsedTrace.data.LayoutShifts.clusters[0].events.at(0);\n      assert.isOk(layoutShiftEvent);\n      const nodeIds = Utils.EntryNodes.nodeIdsForEvent(parsedTrace, layoutShiftEvent);\n      assert.deepEqual(Array.from(nodeIds), [\n        193,\n        195,\n        178,\n        189,\n        188,\n      ]);\n    });\n\n    it('identifies node ids for a Paint event', async function() {\n      const parsedTrace = await TraceLoader.traceEngine(this, 'web-dev-initial-url.json.gz');\n      const paintEvent = allThreadEntriesInTrace(parsedTrace).find(Trace.Types.Events.isPaint);\n      assert.isOk(paintEvent);\n      const nodeIds = Utils.EntryNodes.nodeIdsForEvent(parsedTrace, paintEvent);\n      assert.deepEqual(Array.from(nodeIds), [75]);\n    });\n\n    it('identifies node ids for a PaintImage event', async function() {\n      const parsedTrace = await TraceLoader.traceEngine(this, 'web-dev-initial-url.json.gz');\n      const paintImageEvent = allThreadEntriesInTrace(parsedTrace).find(Trace.Types.Events.isPaintImage);\n      assert.isOk(paintImageEvent);\n      const nodeIds = Utils.EntryNodes.nodeIdsForEvent(parsedTrace, paintImageEvent);\n      assert.deepEqual(Array.from(nodeIds), [107]);\n    });\n\n    it('identifies node ids for a ScrollLayer event', async function() {\n      // This trace chosen as it happens to have ScrollLayer events, unlike the\n      // web-dev traces used in tests above.\n      const parsedTrace = await TraceLoader.traceEngine(this, 'extension-tracks-and-marks.json.gz');\n      const scrollLayerEvent = allThreadEntriesInTrace(parsedTrace).find(Trace.Types.Events.isScrollLayer);\n      assert.isOk(scrollLayerEvent);\n      const nodeIds = Utils.EntryNodes.nodeIdsForEvent(parsedTrace, scrollLayerEvent);\n      assert.deepEqual(Array.from(nodeIds), [4]);\n    });\n\n    it('identifies node ids for a DecodeImage event', async function() {\n      const parsedTrace = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n      const decodeImageEvent = allThreadEntriesInTrace(parsedTrace).find(Trace.Types.Events.isDecodeImage);\n      assert.isOk(decodeImageEvent);\n      const nodeIds = Utils.EntryNodes.nodeIdsForEvent(parsedTrace, decodeImageEvent);\n      assert.deepEqual(Array.from(nodeIds), [240]);\n    });\n\n    it('identifies node ids for a DrawLazyPixelRef event', async function() {\n      const parsedTrace = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n      const drawLazyPixelRefEvent = allThreadEntriesInTrace(parsedTrace).find(Trace.Types.Events.isDrawLazyPixelRef);\n      assert.isOk(drawLazyPixelRefEvent);\n      const nodeIds = Utils.EntryNodes.nodeIdsForEvent(parsedTrace, drawLazyPixelRefEvent);\n      assert.deepEqual(Array.from(nodeIds), [212]);\n    });\n\n    it('identifies node ids for a MarkLCP event', async function() {\n      const parsedTrace = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n      const lcpCandidateEvent =\n          parsedTrace.data.PageLoadMetrics.allMarkerEvents.find(Trace.Types.Events.isLargestContentfulPaintCandidate);\n      assert.isOk(lcpCandidateEvent);\n      const nodeIds = Utils.EntryNodes.nodeIdsForEvent(parsedTrace, lcpCandidateEvent);\n      assert.deepEqual(Array.from(nodeIds), [209]);\n    });\n  });\n\n  describe('relatedDomNodesForEvent', () => {\n    function nodeId(x: number): Protocol.DOM.NodeId {\n      return x as Protocol.DOM.NodeId;\n    }\n    function backendNodeId(x: number): Protocol.DOM.BackendNodeId {\n      return x as Protocol.DOM.BackendNodeId;\n    }\n\n    it('returns the related DOM nodes', async function() {\n      // Load in a trace and find an event that has one related node with an ID of 2.\n      const parsedTrace = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n      const layoutEvent = allThreadEntriesInTrace(parsedTrace).find(Trace.Types.Events.isLayout);\n      assert.isOk(layoutEvent);\n      const nodeIds = Utils.EntryNodes.nodeIdsForEvent(parsedTrace, layoutEvent);\n      assert.deepEqual(Array.from(nodeIds), [2]);\n\n      // Create a mock target, dom model, document and node, using the ID of 2 to match with the event above\n      const target = createTarget();\n      const domModel = target.model(SDK.DOMModel.DOMModel);\n      assert.exists(domModel);\n      const documentNode = {nodeId: nodeId(1)};\n      const domNode = new SDK.DOMModel.DOMNode(domModel);\n      domNode.id = nodeId(2);\n\n      // Set related CDP methods responses to return our mock document and node.\n      setMockConnectionResponseHandler('DOM.pushNodesByBackendIdsToFrontend', () => ({nodeIds: [domNode.id]}));\n      setMockConnectionResponseHandler('DOM.getDocument', () => ({root: documentNode}));\n\n      // Register the mock document and node in DOMModel, these use the mock responses set above.\n      await domModel.requestDocument();\n      domModel.registerNode(domNode);\n\n      const result = await Utils.EntryNodes.relatedDOMNodesForEvent(parsedTrace, layoutEvent);\n      assert.isNotNull(result);\n      const entries = Array.from(result.entries());\n      assert.deepEqual(entries, [[backendNodeId(2), domNode]]);\n    });\n  });\n});\n"]}