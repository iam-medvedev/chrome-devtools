{"version":3,"file":"EntityMapper.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/EntityMapper.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,KAAK,MAAM,gCAAgC,CAAC;AACxD,OAAO,EAAC,uBAAuB,EAAC,MAAM,wCAAwC,CAAC;AAC/E,OAAO,EAAC,WAAW,EAAC,MAAM,iCAAiC,CAAC;AAE5D,OAAO,KAAK,KAAK,MAAM,YAAY,CAAC;AAEpC,uBAAuB,CAAC,cAAc,EAAE;IACtC,EAAE,CAAC,+BAA+B,EAAE,KAAK;QACvC,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC;QAExF,MAAM,YAAY,GAAG,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC;QACxE,MAAM,WAAW,GAAG,WAAW,CAAC,eAAe,CAAC,cAAc,CAAC,cAAc,CAAC;QAE9E,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;QAChE,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAEnC,wFAAwF;QACxF,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAElD,iFAAiF;QACjF,YAAY,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,EAAE;YAClD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;YACnD,MAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YAC5D,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACjB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,wFAAwF;QACxF,WAAW,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,EAAE;YACjD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;YACnD,MAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YAC5D,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACjB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,mEAAmE;QACnE,MAAM,CAAC,SAAS,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,YAAY,EAAE,QAAQ,CAAC,cAAc,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,gDAAgD,EAAE,KAAK;YACxD,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC;YACxF,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YAEhE,uCAAuC;YACvC,MAAM,IAAI,GAAG,WAAW,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE,GAAG,IAAI,EAAE,CAAC;YACtF,IAAI,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;YAEnD,MAAM,OAAO,GAAG,WAAW,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE,GAAG,IAAI,EAAE,CAAC;YACzF,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK;YACvD,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC;YACxF,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YAEhE,MAAM,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;YACtG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAExB,yDAAyD;YACzD,MAAM,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,gDAAgD,EAAE,KAAK;YACxD,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC;YACxF,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YAEhE,MAAM,IAAI,GAAG,WAAW,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE,GAAG,IAAI,EAAE,CAAC;YACtF,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACtB,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;YAE/C,mDAAmD;YACnD,MAAM,SAAS,GAAG,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YACjD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACjB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,2CAA2C,EAAE,KAAK;YACnD,MAAM,EAAC,WAAW,EAAE,cAAc,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC;YACjG,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;YACjE,IAAI,GAAG,GAAG,MAAM,CAAC,gBAAgB,EAAE,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;YAEzC,MAAM,EAAC,WAAW,EAAE,SAAS,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC;YACnG,MAAM,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YACxD,GAAG,GAAG,MAAM,CAAC,gBAAgB,EAAE,CAAC;YAChC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;YAE7C,MAAM,EAAC,WAAW,EAAE,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;YAC1F,MAAM,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YAC1D,GAAG,GAAG,MAAM,CAAC,gBAAgB,EAAE,CAAC;YAChC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,8BAA8B,EAAE,KAAK;YACtC,MAAM,EAAC,WAAW,EAAE,SAAS,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC;YACnG,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YAC9D,MAAM,GAAG,GAAG,MAAM,CAAC,gBAAgB,EAAE,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACnB,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;YAC5C,MAAM,gBAAgB,GAAG,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;YACrD,MAAM,mBAAmB,GAAG,MAAM,CAAC,gBAAgB,EAAE,CAAC;YACtD,+EAA+E;YAC/E,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBAC9B,MAAM,CAAC,MAAM,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../../models/trace/trace.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\n\nimport * as Utils from './utils.js';\n\ndescribeWithEnvironment('EntityMapper', function() {\n  it('correctly merges handler data', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'lantern/paul/trace.json.gz');\n\n    const fromRenderer = parsedTrace.Renderer.entityMappings.eventsByEntity;\n    const fromNetwork = parsedTrace.NetworkRequests.entityMappings.eventsByEntity;\n\n    const mapper = new Utils.EntityMapper.EntityMapper(parsedTrace);\n    const mappings = mapper.mappings();\n\n    // [paulirish.com, Google Tag Manager, Google Fonts, Google Analytics, Disqus, Firebase]\n    assert.deepEqual(mappings.eventsByEntity.size, 6);\n\n    // Check that mappings.eventsByEntity includes all the events of RendererHandler.\n    fromRenderer.entries().forEach(([entity, events]) => {\n      assert.isTrue(mappings.eventsByEntity.has(entity));\n      const gotEvents = mappings.eventsByEntity.get(entity) ?? [];\n      events.forEach(e => {\n        assert.isTrue(gotEvents.includes(e));\n      });\n    });\n\n    // Check that mappings.eventsByEntity includes all the events of NetworkRequestsHandler.\n    fromNetwork.entries().forEach(([entity, events]) => {\n      assert.isTrue(mappings.eventsByEntity.has(entity));\n      const gotEvents = mappings.eventsByEntity.get(entity) ?? [];\n      events.forEach(e => {\n        assert.isTrue(gotEvents.includes(e));\n      });\n    });\n\n    // These would be the same object identity, if not for shallowClone\n    assert.deepEqual(fromRenderer, fromNetwork);\n    assert.deepEqual(fromRenderer, mappings.eventsByEntity);\n  });\n\n  describe('entityForEvent', () => {\n    it('correctly contains network req entity mappings', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'lantern/paul/trace.json.gz');\n      const mapper = new Utils.EntityMapper.EntityMapper(parsedTrace);\n\n      // Check entities for network requests.\n      const reqs = parsedTrace.NetworkRequests.byOrigin.get('www.paulirish.com')?.all ?? [];\n      let gotEntity = mapper.entityForEvent(reqs[0]);\n      assert.deepEqual(gotEntity?.name, 'paulirish.com');\n\n      const gstatic = parsedTrace.NetworkRequests.byOrigin.get('fonts.gstatic.com')?.all ?? [];\n      gotEntity = mapper.entityForEvent(gstatic[0]);\n      assert.deepEqual(gotEntity?.name, 'Google Fonts');\n    });\n\n    it('correctly contains main event entity mappings', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'lantern/paul/trace.json.gz');\n      const mapper = new Utils.EntityMapper.EntityMapper(parsedTrace);\n\n      const funcCall = parsedTrace.Renderer.allTraceEntries.find(e => Trace.Types.Events.isFunctionCall(e));\n      assert.exists(funcCall);\n\n      // This function call should map to paulirish.com entity.\n      const gotEntity = mapper.entityForEvent(funcCall);\n      assert.deepEqual(gotEntity?.name, 'paulirish.com');\n    });\n  });\n  describe('eventsForEntity', () => {\n    it('correctly contains network req entity mappings', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'lantern/paul/trace.json.gz');\n      const mapper = new Utils.EntityMapper.EntityMapper(parsedTrace);\n\n      const reqs = parsedTrace.NetworkRequests.byOrigin.get('www.paulirish.com')?.all ?? [];\n      const entity = mapper.entityForEvent(reqs[0]);\n      assert.exists(entity);\n      assert.deepEqual(entity.name, 'paulirish.com');\n\n      // Reqs should all be mapped to the correct entity.\n      const gotEvents = mapper.eventsForEntity(entity);\n      reqs.forEach(req => {\n        assert.isTrue(gotEvents.includes(req));\n      });\n    });\n  });\n  describe('first party', () => {\n    it('correctly captures the first party entity', async function() {\n      const {parsedTrace: localhostTrace} = await TraceLoader.traceEngine(this, 'load-simple.json.gz');\n      let mapper = new Utils.EntityMapper.EntityMapper(localhostTrace);\n      let got = mapper.firstPartyEntity();\n      assert.deepEqual(got?.name, 'localhost');\n\n      const {parsedTrace: paulTrace} = await TraceLoader.traceEngine(this, 'lantern/paul/trace.json.gz');\n      mapper = new Utils.EntityMapper.EntityMapper(paulTrace);\n      got = mapper.firstPartyEntity();\n      assert.deepEqual(got?.name, 'paulirish.com');\n\n      const {parsedTrace: webDevTrace} = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n      mapper = new Utils.EntityMapper.EntityMapper(webDevTrace);\n      got = mapper.firstPartyEntity();\n      assert.deepEqual(got?.name, 'web.dev');\n    });\n    it('correctly captures 3p events', async function() {\n      const {parsedTrace: paulTrace} = await TraceLoader.traceEngine(this, 'lantern/paul/trace.json.gz');\n      const mapper = new Utils.EntityMapper.EntityMapper(paulTrace);\n      const got = mapper.firstPartyEntity();\n      assert.exists(got);\n      assert.deepEqual(got.name, 'paulirish.com');\n      const firstPartyEvents = mapper.eventsForEntity(got);\n      const gotThirdPartyEvents = mapper.thirdPartyEvents();\n      // If any failure is found in here, the event is categorized as both 1p AND 3p.\n      gotThirdPartyEvents.forEach(e => {\n        assert.isTrue(!firstPartyEvents.includes(e));\n      });\n    });\n  });\n});\n"]}