{"version":3,"file":"NetworkRequest.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/utils/NetworkRequest.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAC7B,OAAO,KAAK,MAAM,MAAM,gCAAgC,CAAC;AAGzD,OAAO,KAAK,QAAQ,MAAM,sCAAsC,CAAC;AAGjE,8GAA8G;AAC9G,oHAAoH;AACpH,mHAAmH;AACnH,kHAAkH;AAClH,MAAM,OAAO,sBAAsB;IACjC,QAAQ,CAAyC;IACjD,YAAY,cAAqE;QAC/E,MAAM,GAAG,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,GAAsC,CAAC;QAC5E,MAAM,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,cAAc,CAAC,GAAG,CAAoC,CAAC;QACzG,MAAM,QAAQ,GACV,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QACxG,IAAI,CAAC,QAAQ,GAAG,QAAQ,EAAE,OAAO,IAAI,IAAI,CAAC;IAC5C,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;CACF","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../../core/common/common.js';\nimport type * as Platform from '../../../core/platform/platform.js';\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport * as Bindings from '../../../models/bindings/bindings.js';\nimport type * as TraceEngine from '../../../models/trace/trace.js';\n\n// Add a wrapper class here. The reason is the `Reveal in Network panel` option is handled by the context menu\n// provider, which will add this option for all supporting types. And there are a lot of context menu providers that\n// support `SDK.NetworkRequest.NetworkRequest`, for example `Override content` by PersistenceActions, but we so far\n// just want the one to reveal in network panel, so add a new class which will only be supported by Network panel.\nexport class TimelineNetworkRequest {\n  #request: SDK.NetworkRequest.NetworkRequest|null;\n  constructor(networkRequest: TraceEngine.Types.TraceEvents.SyntheticNetworkRequest) {\n    const url = networkRequest.args.data.url as Platform.DevToolsPath.UrlString;\n    const urlWithoutHash = Common.ParsedURL.ParsedURL.urlWithoutHash(url) as Platform.DevToolsPath.UrlString;\n    const resource =\n        Bindings.ResourceUtils.resourceForURL(url) || Bindings.ResourceUtils.resourceForURL(urlWithoutHash);\n    this.#request = resource?.request ?? null;\n  }\n\n  get request(): SDK.NetworkRequest.NetworkRequest|null {\n    return this.#request;\n  }\n}\n"]}