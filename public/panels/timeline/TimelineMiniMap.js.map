{"version":3,"file":"TimelineMiniMap.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/TimelineMiniMap.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as TraceBounds from '../../services/trace_bounds/trace_bounds.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as TimelineComponents from './components/components.js';\nimport {ModificationsManager} from './ModificationsManager.js';\nimport {\n  type TimelineEventOverview,\n  TimelineEventOverviewCPUActivity,\n  TimelineEventOverviewMemory,\n  TimelineEventOverviewNetwork,\n  TimelineEventOverviewResponsiveness,\n  TimelineFilmStripOverview,\n} from './TimelineEventOverview.js';\nimport miniMapStyles from './timelineMiniMap.css.js';\nimport {TimelineUIUtils} from './TimelineUIUtils.js';\n\nexport interface OverviewData {\n  parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  isCpuProfile?: boolean;\n  settings: {\n    showScreenshots: boolean,\n    showMemory: boolean,\n  };\n}\n\n/**\n * This component wraps the generic PerfUI Overview component and configures it\n * specifically for the Performance Panel, including injecting the CSS we use\n * to customise how the components render within the Performance Panel.\n *\n * It is also responsible for listening to events from the OverviewPane to\n * update the visible trace window, and when this happens it will update the\n * TraceBounds service with the new values.\n */\nexport class TimelineMiniMap extends\n    Common.ObjectWrapper.eventMixin<PerfUI.TimelineOverviewPane.EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox) {\n  #overviewComponent = new PerfUI.TimelineOverviewPane.TimelineOverviewPane('timeline');\n  #controls: TimelineEventOverview[] = [];\n  breadcrumbs: TimelineComponents.Breadcrumbs.Breadcrumbs|null = null;\n  #breadcrumbsUI: TimelineComponents.BreadcrumbsUI.BreadcrumbsUI;\n  #data: OverviewData|null = null;\n\n  #onTraceBoundsChangeBound = this.#onTraceBoundsChange.bind(this);\n\n  constructor() {\n    super();\n    this.registerRequiredCSS(miniMapStyles);\n    this.element.classList.add('timeline-minimap');\n    this.#breadcrumbsUI = new TimelineComponents.BreadcrumbsUI.BreadcrumbsUI();\n    this.element.prepend(this.#breadcrumbsUI);\n\n    this.#overviewComponent.show(this.element);\n\n    this.#overviewComponent.addEventListener(PerfUI.TimelineOverviewPane.Events.OVERVIEW_PANE_WINDOW_CHANGED, event => {\n      this.#onOverviewPanelWindowChanged(event);\n    });\n    this.#overviewComponent.addEventListener(\n        PerfUI.TimelineOverviewPane.Events.OVERVIEW_PANE_BREADCRUMB_ADDED, event => {\n          this.addBreadcrumb(event.data);\n        });\n\n    // We want to add/remove an overlay for these two events, and the overlay system is controlled by\n    // `TimelineFlameChartView`, so we need to dispatch them up to the `TimelinePanel` level to call\n    // `TimelineFlameChartView` -> `addOverlay()/removeOverlay()`.\n    this.#overviewComponent.addEventListener(PerfUI.TimelineOverviewPane.Events.OVERVIEW_PANE_MOUSE_MOVE, event => {\n      this.dispatchEventToListeners(PerfUI.TimelineOverviewPane.Events.OVERVIEW_PANE_MOUSE_MOVE, event.data);\n    });\n    this.#overviewComponent.addEventListener(PerfUI.TimelineOverviewPane.Events.OVERVIEW_PANE_MOUSE_LEAVE, () => {\n      this.dispatchEventToListeners(PerfUI.TimelineOverviewPane.Events.OVERVIEW_PANE_MOUSE_LEAVE);\n    });\n\n    this.#breadcrumbsUI.addEventListener(TimelineComponents.BreadcrumbsUI.BreadcrumbActivatedEvent.eventName, event => {\n      const {breadcrumb, childBreadcrumbsRemoved} =\n          (event as TimelineComponents.BreadcrumbsUI.BreadcrumbActivatedEvent);\n      this.#activateBreadcrumb(\n          breadcrumb, {removeChildBreadcrumbs: Boolean(childBreadcrumbsRemoved), updateVisibleWindow: true});\n    });\n    this.#overviewComponent.enableCreateBreadcrumbsButton();\n\n    TraceBounds.TraceBounds.onChange(this.#onTraceBoundsChangeBound);\n  }\n\n  #onOverviewPanelWindowChanged(\n      event: Common.EventTarget.EventTargetEvent<PerfUI.TimelineOverviewPane.OverviewPaneWindowChangedEvent>): void {\n    const parsedTrace = this.#data?.parsedTrace;\n    if (!parsedTrace) {\n      return;\n    }\n\n    const traceBoundsState = TraceBounds.TraceBounds.BoundsManager.instance().state();\n    if (!traceBoundsState) {\n      return;\n    }\n\n    const left = (event.data.startTime > 0) ? event.data.startTime : traceBoundsState.milli.entireTraceBounds.min;\n    const right =\n        Number.isFinite(event.data.endTime) ? event.data.endTime : traceBoundsState.milli.entireTraceBounds.max;\n\n    TraceBounds.TraceBounds.BoundsManager.instance().setTimelineVisibleWindow(\n        Trace.Helpers.Timing.traceWindowFromMilliSeconds(\n            Trace.Types.Timing.Milli(left),\n            Trace.Types.Timing.Milli(right),\n            ),\n        {\n          shouldAnimate: true,\n        },\n    );\n  }\n\n  #onTraceBoundsChange(event: TraceBounds.TraceBounds.StateChangedEvent): void {\n    if (event.updateType === 'RESET' || event.updateType === 'VISIBLE_WINDOW') {\n      this.#overviewComponent.setWindowTimes(\n          event.state.milli.timelineTraceWindow.min, event.state.milli.timelineTraceWindow.max);\n\n      // If the visible window has changed because we are revealing a certain\n      // time period to the user, we need to ensure that this new time\n      // period fits within the current minimap bounds. If it doesn't, we\n      // do some work to update the minimap bounds. Note that this only\n      // applies if the user has created breadcrumbs, which scope the\n      // minimap. If they have not, the entire trace is the minimap, and\n      // therefore there is no work to be done.\n      const newWindowFitsBounds = Trace.Helpers.Timing.windowFitsInsideBounds({\n        window: event.state.micro.timelineTraceWindow,\n        bounds: event.state.micro.minimapTraceBounds,\n      });\n\n      if (!newWindowFitsBounds) {\n        this.#updateMiniMapBoundsToFitNewWindow(event.state.micro.timelineTraceWindow);\n      }\n    }\n    if (event.updateType === 'RESET' || event.updateType === 'MINIMAP_BOUNDS') {\n      this.#overviewComponent.setBounds(\n          event.state.milli.minimapTraceBounds.min, event.state.milli.minimapTraceBounds.max);\n    }\n  }\n\n  #updateMiniMapBoundsToFitNewWindow(newWindow: Trace.Types.Timing.TraceWindowMicro): void {\n    if (!this.breadcrumbs) {\n      return;\n    }\n    // Find the smallest breadcrumb that fits this window.\n    // Breadcrumbs are a linked list from largest to smallest so we have to\n    // walk through until we find one that does not fit, and pick the last\n    // before that.\n    let currentBreadcrumb: Trace.Types.File.Breadcrumb|null = this.breadcrumbs.initialBreadcrumb;\n    let lastBreadcrumbThatFits: Trace.Types.File.Breadcrumb = this.breadcrumbs.initialBreadcrumb;\n\n    while (currentBreadcrumb) {\n      const fits = Trace.Helpers.Timing.windowFitsInsideBounds({\n        window: newWindow,\n        bounds: currentBreadcrumb.window,\n      });\n      if (fits) {\n        lastBreadcrumbThatFits = currentBreadcrumb;\n      } else {\n        // If this breadcrumb does not fit, none of its children (which are all\n        // smaller by definition) will, so we can exit the loop early.\n        break;\n      }\n      currentBreadcrumb = currentBreadcrumb.child;\n    }\n\n    // Activate the breadcrumb that fits the visible window. We do not update\n    // the visible window here as we are doing this work as a reaction to\n    // something else triggering a change in the window visibility.\n    this.#activateBreadcrumb(lastBreadcrumbThatFits, {removeChildBreadcrumbs: false, updateVisibleWindow: false});\n  }\n\n  addBreadcrumb({startTime, endTime}: PerfUI.TimelineOverviewPane.OverviewPaneBreadcrumbAddedEvent): void {\n    if (!this.breadcrumbs) {\n      console.warn('ModificationsManager has not been created, therefore Breadcrumbs can not be added');\n      return;\n    }\n    const traceBoundsState = TraceBounds.TraceBounds.BoundsManager.instance().state();\n    if (!traceBoundsState) {\n      return;\n    }\n    const bounds = traceBoundsState.milli.minimapTraceBounds;\n\n    // The OverviewPane can emit 0 and Infinity as numbers for the range; in\n    // this case we change them to be the min and max values of the minimap\n    // bounds.\n    const breadcrumbTimes = {\n      startTime: Trace.Types.Timing.Milli(Math.max(startTime, bounds.min)),\n      endTime: Trace.Types.Timing.Milli(Math.min(endTime, bounds.max)),\n    };\n\n    const newVisibleTraceWindow =\n        Trace.Helpers.Timing.traceWindowFromMilliSeconds(breadcrumbTimes.startTime, breadcrumbTimes.endTime);\n\n    const addedBreadcrumb = this.breadcrumbs.add(newVisibleTraceWindow);\n\n    this.#breadcrumbsUI.data = {\n      initialBreadcrumb: this.breadcrumbs.initialBreadcrumb,\n      activeBreadcrumb: addedBreadcrumb,\n    };\n  }\n\n  highlightBounds(bounds: Trace.Types.Timing.TraceWindowMicro, withBracket = false): void {\n    this.#overviewComponent.highlightBounds(bounds, withBracket);\n  }\n  clearBoundsHighlight(): void {\n    this.#overviewComponent.clearBoundsHighlight();\n  }\n\n  /**\n   * Activates a given breadcrumb.\n   * @param options.removeChildBreadcrumbs - if true, any child breadcrumbs will be removed.\n   * @param options.updateVisibleWindow - if true, the visible window will be updated to match the bounds of the breadcrumb\n   */\n  #activateBreadcrumb(\n      breadcrumb: Trace.Types.File.Breadcrumb,\n      options: TimelineComponents.Breadcrumbs.SetActiveBreadcrumbOptions): void {\n    if (!this.breadcrumbs) {\n      return;\n    }\n\n    this.breadcrumbs.setActiveBreadcrumb(breadcrumb, options);\n    // Only the initial breadcrumb is passed in because breadcrumbs are stored in a linked list and breadcrumbsUI component iterates through them\n    this.#breadcrumbsUI.data = {\n      initialBreadcrumb: this.breadcrumbs.initialBreadcrumb,\n      activeBreadcrumb: breadcrumb,\n    };\n  }\n\n  reset(): void {\n    this.#data = null;\n    this.#overviewComponent.reset();\n  }\n\n  #setMarkers(parsedTrace: Trace.Handlers.Types.ParsedTrace): void {\n    const markers = new Map<number, HTMLDivElement>();\n\n    const {Meta} = parsedTrace;\n\n    // Only add markers for navigation start times.\n    const navStartEvents = Meta.mainFrameNavigations;\n    const minTimeInMilliseconds = Trace.Helpers.Timing.microToMilli(Meta.traceBounds.min);\n\n    for (const event of navStartEvents) {\n      const {startTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(event);\n      markers.set(startTime, TimelineUIUtils.createEventDivider(event, minTimeInMilliseconds));\n    }\n\n    this.#overviewComponent.setMarkers(markers);\n  }\n\n  #setNavigationStartEvents(parsedTrace: Trace.Handlers.Types.ParsedTrace): void {\n    this.#overviewComponent.setNavStartTimes(parsedTrace.Meta.mainFrameNavigations);\n  }\n\n  getControls(): TimelineEventOverview[] {\n    return this.#controls;\n  }\n\n  setData(data: OverviewData): void {\n    if (this.#data?.parsedTrace === data.parsedTrace) {\n      return;\n    }\n    this.#data = data;\n    this.#controls = [];\n\n    this.#setMarkers(data.parsedTrace);\n    this.#setNavigationStartEvents(data.parsedTrace);\n    this.#controls.push(new TimelineEventOverviewResponsiveness(data.parsedTrace));\n    this.#controls.push(new TimelineEventOverviewCPUActivity(data.parsedTrace));\n\n    this.#controls.push(new TimelineEventOverviewNetwork(data.parsedTrace));\n    if (data.settings.showScreenshots) {\n      const filmStrip = Trace.Extras.FilmStrip.fromParsedTrace(data.parsedTrace);\n      if (filmStrip.frames.length) {\n        this.#controls.push(new TimelineFilmStripOverview(filmStrip));\n      }\n    }\n    if (data.settings.showMemory) {\n      this.#controls.push(new TimelineEventOverviewMemory(data.parsedTrace));\n    }\n    this.#overviewComponent.setOverviewControls(this.#controls);\n    this.#overviewComponent.showingScreenshots = data.settings.showScreenshots;\n    this.#setInitialBreadcrumb();\n  }\n\n  #setInitialBreadcrumb(): void {\n    // Set the initial breadcrumb that ModificationsManager created from the initial full window\n    // or loaded from the file.\n    this.breadcrumbs = ModificationsManager.activeManager()?.getTimelineBreadcrumbs() ?? null;\n\n    if (!this.breadcrumbs) {\n      return;\n    }\n\n    let lastBreadcrumb = this.breadcrumbs.initialBreadcrumb;\n    while (lastBreadcrumb.child !== null) {\n      lastBreadcrumb = lastBreadcrumb.child;\n    }\n\n    this.#breadcrumbsUI.data = {\n      initialBreadcrumb: this.breadcrumbs.initialBreadcrumb,\n      activeBreadcrumb: lastBreadcrumb,\n    };\n  }\n}\n"]}