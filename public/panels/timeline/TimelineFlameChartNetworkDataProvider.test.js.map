{"version":3,"file":"TimelineFlameChartNetworkDataProvider.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/TimelineFlameChartNetworkDataProvider.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\nimport type * as PerfUi from '../../ui/legacy/components/perf_ui/perf_ui.js';\n\nimport * as Timeline from './timeline.js';\n\ndescribeWithEnvironment('TimelineFlameChartNetworkDataProvider', function() {\n  it('renders the network track correctly', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartNetworkDataProvider.TimelineFlameChartNetworkDataProvider();\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'load-simple.json.gz');\n    const entityMapper = new Timeline.Utils.EntityMapper.EntityMapper(parsedTrace);\n\n    const minTime = Trace.Helpers.Timing.microToMilli(parsedTrace.Meta.traceBounds.min);\n    const maxTime = Trace.Helpers.Timing.microToMilli(parsedTrace.Meta.traceBounds.max);\n\n    dataProvider.setModel(parsedTrace, entityMapper);\n    dataProvider.setWindowTimes(minTime, maxTime);\n\n    // TimelineFlameChartNetworkDataProvider only has network track, so should always be one track group.\n    assert.lengthOf(dataProvider.timelineData().groups, 1);\n    const networkTrackGroup = dataProvider.timelineData().groups[0];\n\n    assert.deepEqual(dataProvider.minimumBoundary(), minTime);\n    assert.deepEqual(dataProvider.totalTime(), maxTime - minTime);\n\n    const networkEvents = parsedTrace.NetworkRequests.byTime;\n    const networkEventsStartTimes = networkEvents.map(request => Trace.Helpers.Timing.microToMilli(request.ts));\n    const networkEventsTotalTimes = networkEvents.map(request => {\n      const {startTime, endTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(request);\n      return endTime - startTime;\n    });\n    assert.lengthOf(dataProvider.timelineData().entryLevels, 6);\n    assert.deepEqual(dataProvider.timelineData().entryLevels, [0, 1, 1, 1, 1, 2]);\n    assertTimestampsEqual(dataProvider.timelineData().entryStartTimes, networkEventsStartTimes);\n    assertTimestampsEqual(dataProvider.timelineData().entryTotalTimes, networkEventsTotalTimes);\n\n    assert.deepEqual(dataProvider.maxStackDepth(), 3);\n\n    // The decorateEntry() will be handled in the TimelineFlameChartNetworkDataProvider, so this function always returns true.\n    assert.isTrue(dataProvider.forceDecoration(0));\n\n    assert.isFalse(dataProvider.isEmpty());\n\n    // The network track is default to collapsed.\n    assert.isFalse(dataProvider.isExpanded());\n    // The height of collapsed network track style is 17.\n    assert.strictEqual(dataProvider.preferredHeight(), 17);\n    networkTrackGroup.expanded = true;\n    assert.isTrue(dataProvider.isExpanded());\n    // The max level here is 3, so `clamp(this.#maxLevel + 1, 7, 8.5)` = 7\n    assert.strictEqual(dataProvider.preferredHeight(), 17 * 7);\n  });\n\n  it('renders initiators and clears them when events are deselected', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartNetworkDataProvider.TimelineFlameChartNetworkDataProvider();\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n    const entityMapper = new Timeline.Utils.EntityMapper.EntityMapper(parsedTrace);\n    dataProvider.setModel(parsedTrace, entityMapper);\n    const timelineData1 = dataProvider.timelineData();\n    assert.lengthOf(timelineData1.initiatorsData, 0);  // no initiators by default\n\n    // A network event that has an initiator - nothing special about the exact event.\n    const event = parsedTrace.NetworkRequests.byId.get('90829.57');\n    assert.exists(event);\n    const index = dataProvider.indexForEvent(event);\n    assert.isNotNull(index);\n\n    dataProvider.buildFlowForInitiator(index);\n    const timelineData2 = dataProvider.timelineData();\n    // The selected event kicks off a chain of 3 initiators.\n    assert.lengthOf(timelineData2.initiatorsData, 3);\n\n    // Deselect and ensure they are removed\n    dataProvider.buildFlowForInitiator(-1);\n    const timelineData3 = dataProvider.timelineData();\n    assert.lengthOf(timelineData3.initiatorsData, 0);\n  });\n\n  it('can return the group for a given entryIndex', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartNetworkDataProvider.TimelineFlameChartNetworkDataProvider();\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'load-simple.json.gz');\n    const entityMapper = new Timeline.Utils.EntityMapper.EntityMapper(parsedTrace);\n    dataProvider.setModel(parsedTrace, entityMapper);\n    dataProvider.timelineData();\n\n    assert.strictEqual(\n        dataProvider.groupForEvent(0)?.name,\n        'Network',\n    );\n  });\n\n  it('filters navigations to only return those that happen on the main frame', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartNetworkDataProvider.TimelineFlameChartNetworkDataProvider();\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'multiple-navigations-with-iframes.json.gz');\n    const entityMapper = new Timeline.Utils.EntityMapper.EntityMapper(parsedTrace);\n\n    const minTime = Trace.Helpers.Timing.microToMilli(parsedTrace.Meta.traceBounds.min);\n    const maxTime = Trace.Helpers.Timing.microToMilli(parsedTrace.Meta.traceBounds.max);\n\n    dataProvider.setModel(parsedTrace, entityMapper);\n    dataProvider.setWindowTimes(minTime, maxTime);\n\n    const mainFrameID = parsedTrace.Meta.mainFrameId;\n    const navigationEvents = dataProvider.mainFrameNavigationStartEvents();\n    // Ensure that every navigation event that we return is for the main frame.\n    assert.isTrue(navigationEvents.every(navEvent => {\n      return navEvent.args.frame === mainFrameID;\n    }));\n  });\n\n  it('can provide the index for an event and the event for a given index', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartNetworkDataProvider.TimelineFlameChartNetworkDataProvider();\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n    const entityMapper = new Timeline.Utils.EntityMapper.EntityMapper(parsedTrace);\n    dataProvider.setModel(parsedTrace, entityMapper);\n\n    const event = dataProvider.eventByIndex(0);\n    assert.isOk(event);\n    assert.strictEqual(dataProvider.indexForEvent(event), 0);\n  });\n\n  it('does not render the network track if there is no network requests', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartNetworkDataProvider.TimelineFlameChartNetworkDataProvider();\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'basic.json.gz');\n    const entityMapper = new Timeline.Utils.EntityMapper.EntityMapper(parsedTrace);\n\n    const minTime = Trace.Helpers.Timing.microToMilli(parsedTrace.Meta.traceBounds.min);\n    const maxTime = Trace.Helpers.Timing.microToMilli(parsedTrace.Meta.traceBounds.max);\n\n    dataProvider.setModel(parsedTrace, entityMapper);\n    dataProvider.setWindowTimes(minTime, maxTime);\n\n    // Network track appender won't append the network track if there is no network requests.\n    assert.lengthOf(dataProvider.timelineData().groups, 0);\n\n    assert.deepEqual(dataProvider.minimumBoundary(), minTime);\n    assert.deepEqual(dataProvider.totalTime(), maxTime - minTime);\n\n    assert.deepEqual(dataProvider.timelineData().entryLevels, []);\n    assert.deepEqual(dataProvider.timelineData().entryStartTimes, []);\n    assert.deepEqual(dataProvider.timelineData().entryTotalTimes, []);\n\n    assert.deepEqual(dataProvider.maxStackDepth(), 0);\n\n    // The decorateEntry() will be handled in the TimelineFlameChartNetworkDataProvider, so this function always returns true.\n    assert.isTrue(dataProvider.forceDecoration(0));\n\n    // The network track won't show if it is empty.\n    assert.isTrue(dataProvider.isEmpty());\n\n    assert.strictEqual(dataProvider.preferredHeight(), 0);\n  });\n\n  it('decorate a event correctly', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartNetworkDataProvider.TimelineFlameChartNetworkDataProvider();\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'cls-cluster-max-timeout.json.gz');\n    // The field that is important of this test:\n    // {\n    // \"ts\": 183752441.977,\n    // \"dur\": 183752670.454,\n    // \"finishTime\": 183752669.23299998,\n    // ...\n    // \"timing\": {\n    //     \"pushStart\": 0,\n    //     \"receiveHeadersEnd\": 218.084,\n    //     \"requestTime\": 183752.449687,\n    //     \"sendEnd\": 13.01,\n    //     \"sendStart\": 12.792,\n    //     ...\n    //   },\n    //   \"priority\": \"VeryHigh\",\n    //   \"responseTime\": 1634222299.776\n    // ...\n    // }\n    const event = parsedTrace.NetworkRequests.byTime[1];\n    // So for this request:\n    // The earliest event belonging to this request starts at 183752441.977.\n    // This is used in flamechart to calculate unclippedBarX.\n    // Start time is 183752441.977\n    // End time is 183752670.454\n    // Finish time is 183752669.233\n    // request time is 183752.449687, but it is in second, so 183752449.687\n    // in milliseconds.\n    // sendStartTime is requestTime + sendStart = 183752462.479\n    // headersEndTime is requestTime + receiveHeadersEnd = 183752667.771\n    //\n    // To calculate the pixel of a timestamp, we substrate the begin time  from\n    // it, then multiple the timeToPixelRatio and then add the unclippedBarX.\n    // Then get the floor of the pixel.\n    // So the pixel of sendStart is (183752462.479 - 183752441.977) + 10, in ts it will be 30.502000004053116.\n    // So the pixel of headersEnd is (183752667.771 - 183752441.977) + 10, in ts it will be 235.79399999976158.\n    // So the pixel of finish is (183752669.233 - 183752441.977) + 10, in ts it will be 237.25600001215935.\n    // So the pixel of start is (183752441.977 - 183752441.977) + 10 = 10.\n    // So the pixel of end is (183752670.454 - 183752441.977) + 10, in ts it will be 238.47699999809265.\n    assert.deepEqual(dataProvider.getDecorationPixels(event, /* unclippedBarX= */ 10, /* timeToPixelRatio= */ 1), {\n      sendStart: (183752462.479 - 183752441.977) + 10,\n      headersEnd: (183752667.771 - 183752441.977) + 10,\n      finish: (183752669.233 - 183752441.977) + 10,\n      start: 10,\n      end: (183752670.454 - 183752441.977) + 10,\n    });\n  });\n\n  it('can search for entries within a given time-range', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartNetworkDataProvider.TimelineFlameChartNetworkDataProvider();\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n    const entityMapper = new Timeline.Utils.EntityMapper.EntityMapper(parsedTrace);\n    dataProvider.setModel(parsedTrace, entityMapper);\n    const boundsMs = Trace.Helpers.Timing.traceWindowMilliSeconds(parsedTrace.Meta.traceBounds);\n    dataProvider.setWindowTimes(boundsMs.min, boundsMs.max);\n\n    const filter = new Timeline.TimelineFilters.TimelineRegExp(/app\\.js/i);\n    const results = dataProvider.search(parsedTrace.Meta.traceBounds, filter);\n    assert.lengthOf(results, 1);\n    assert.deepEqual(results[0], {index: 8, startTimeMilli: 122411056.533, provider: 'network'});\n  });\n\n  it('persists track configurations to the setting if it is provided with one', async function() {\n    const {Settings} = Common.Settings;\n    const setting =\n        Settings.instance().createSetting<PerfUi.FlameChart.PersistedGroupConfig[]|null>('persist-flame-config', null);\n\n    const dataProvider = new Timeline.TimelineFlameChartNetworkDataProvider.TimelineFlameChartNetworkDataProvider();\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n    const entityMapper = new Timeline.Utils.EntityMapper.EntityMapper(parsedTrace);\n    dataProvider.setModel(parsedTrace, entityMapper);\n    dataProvider.setPersistedGroupConfigSetting(setting);\n\n    const groups = dataProvider.timelineData().groups;\n    assert.lengthOf(groups, 1);\n    assert.isUndefined(groups[0].expanded);\n\n    // Pretend the user has expanded the group\n    groups[0].expanded = true;\n    dataProvider.handleTrackConfigurationChange(groups, [0]);\n\n    const newSetting = setting.get();\n    assert.deepEqual(newSetting, [\n      {\n        expanded: true,\n        hidden: false,\n        originalIndex: 0,\n        visualIndex: 0,\n        trackName: 'Network',\n      },\n    ]);\n  });\n});\n\nfunction assertTimestampEqual(actual: number, expected: number): void {\n  assert.strictEqual(actual.toFixed(2), expected.toFixed(2));\n}\n\nfunction assertTimestampsEqual(actual: number[]|Float32Array|Float64Array, expected: number[]): void {\n  assert.strictEqual(actual.length, expected.length);\n\n  for (let i = 0; i < actual.length; i++) {\n    assertTimestampEqual(actual[i], expected[i]);\n  }\n}\n"]}