{"version":3,"file":"TimingsTrackAppender.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/TimingsTrackAppender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Trace from '../../models/trace/trace.js';\n\nimport {buildGroupStyle, buildTrackHeader, getDurationString} from './AppenderUtils.js';\nimport {\n  type CompatibilityTracksAppender,\n  type PopoverInfo,\n  type TrackAppender,\n  type TrackAppenderName,\n  VisualLoggingTrackName,\n} from './CompatibilityTracksAppender.js';\nimport * as Extensions from './extensions/extensions.js';\nimport {TimelineFlameChartMarker} from './TimelineFlameChartView.js';\nimport {TimelinePanel} from './TimelinePanel.js';\nimport type {TimelineMarkerStyle} from './TimelineUIUtils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  timings: 'Timings',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimingsTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * This defines the order these markers will be rendered if they are at the\n * same timestamp. The smaller number will be shown first - e.g. so if MarkFCP,\n * MarkDOMContent and MarkLCPCandidate have the same timestamp, visually we\n * will render [FCP][DCL][LCP] everytime.\n */\nexport const SORT_ORDER_PAGE_LOAD_MARKERS: Readonly<Record<string, number>> = {\n  [Trace.Types.Events.Name.NAVIGATION_START]: 0,\n  [Trace.Types.Events.Name.MARK_LOAD]: 1,\n  [Trace.Types.Events.Name.MARK_FCP]: 2,\n  [Trace.Types.Events.Name.MARK_FIRST_PAINT]: 2,\n  [Trace.Types.Events.Name.MARK_DOM_CONTENT]: 3,\n  [Trace.Types.Events.Name.MARK_LCP_CANDIDATE]: 4,\n};\n\nexport class TimingsTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'Timings';\n\n  #colorGenerator: Common.Color.Generator;\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  #parsedTrace: Readonly<Trace.Handlers.Types.ParsedTrace>;\n  #extensionMarkers: readonly Trace.Types.Extensions.SyntheticExtensionMarker[];\n  constructor(\n      compatibilityBuilder: CompatibilityTracksAppender, parsedTrace: Trace.Handlers.Types.ParsedTrace,\n      colorGenerator: Common.Color.Generator) {\n    this.#compatibilityBuilder = compatibilityBuilder;\n    this.#colorGenerator = colorGenerator;\n    this.#parsedTrace = parsedTrace;\n    const extensionDataEnabled = TimelinePanel.extensionDataVisibilitySetting().get();\n    this.#extensionMarkers = extensionDataEnabled ? this.#parsedTrace.ExtensionTraceData.extensionMarkers : [];\n  }\n\n  /**\n   * Appends into the flame chart data the data corresponding to the\n   * timings track.\n   * @param trackStartLevel the horizontal level of the flame chart events where\n   * the track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean): number {\n    const extensionMarkersAreEmpty = this.#extensionMarkers.length === 0;\n    const performanceMarks = this.#parsedTrace.UserTimings.performanceMarks.filter(\n        m => !Trace.Handlers.ModelHandlers.ExtensionTraceData.extensionDataInPerformanceTiming(m));\n    const performanceMeasures = this.#parsedTrace.UserTimings.performanceMeasures.filter(\n        m => !Trace.Handlers.ModelHandlers.ExtensionTraceData.extensionDataInPerformanceTiming(m));\n    const timestampEvents = this.#parsedTrace.UserTimings.timestampEvents;\n    const consoleTimings = this.#parsedTrace.UserTimings.consoleTimings;\n\n    if (extensionMarkersAreEmpty && performanceMarks.length === 0 && performanceMeasures.length === 0 &&\n        timestampEvents.length === 0 && consoleTimings.length === 0) {\n      return trackStartLevel;\n    }\n    this.#appendTrackHeaderAtLevel(trackStartLevel, expanded);\n    let newLevel = this.#appendExtensionsAtLevel(trackStartLevel);\n    newLevel = this.#compatibilityBuilder.appendEventsAtLevel(performanceMarks, newLevel, this);\n    newLevel = this.#compatibilityBuilder.appendEventsAtLevel(performanceMeasures, newLevel, this);\n    newLevel = this.#compatibilityBuilder.appendEventsAtLevel(timestampEvents, newLevel, this);\n    return this.#compatibilityBuilder.appendEventsAtLevel(consoleTimings, newLevel, this);\n  }\n\n  /**\n   * Adds into the flame chart data the header corresponding to the\n   * timings track. A header is added in the shape of a group in the\n   * flame chart data. A group has a predefined style and a reference\n   * to the definition of the legacy track (which should be removed\n   * in the future).\n   * @param currentLevel the flame chart level at which the header is\n   * appended.\n   */\n  #appendTrackHeaderAtLevel(currentLevel: number, expanded?: boolean): void {\n    const trackIsCollapsible = this.#parsedTrace.UserTimings.performanceMeasures.length > 0;\n    const style = buildGroupStyle({useFirstLineForOverview: true, collapsible: trackIsCollapsible});\n    const group = buildTrackHeader(\n        VisualLoggingTrackName.TIMINGS, currentLevel, i18nString(UIStrings.timings), style, /* selectable= */ true,\n        expanded);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n  /**\n   * Adds into the flame chart data the ExtensionMarkers.\n   * @param currentLevel the flame chart level from which markers will\n   * be appended.\n   * @returns the next level after the last occupied by the appended\n   * extension markers (the first available level to append more data).\n   */\n  #appendExtensionsAtLevel(currentLevel: number): number {\n    let markers: Trace.Types.Extensions.SyntheticExtensionMarker[] = [];\n    markers = markers.concat(this.#extensionMarkers).sort((m1, m2) => m1.ts - m2.ts);\n    if (markers.length === 0) {\n      return currentLevel;\n    }\n    for (const marker of markers) {\n      const index = this.#compatibilityBuilder.appendEventAtLevel(marker, currentLevel, this);\n      // Marker events do not have a duration: rendering code in\n      // FlameChart.ts relies on us setting this to NaN\n      this.#compatibilityBuilder.getFlameChartTimelineData().entryTotalTimes[index] = Number.NaN;\n    }\n\n    const minTimeMs = Trace.Helpers.Timing.microToMilli(this.#parsedTrace.Meta.traceBounds.min);\n    const flameChartMarkers = markers.map(marker => {\n      // The timestamp for user timing trace events is set to the\n      // start time passed by the user at the call site of the timing\n      // (based on the UserTiming spec), meaning we can use event.ts\n      // directly.\n      // https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/timing/performance_user_timing.cc;l=236;drc=494419358caf690316f160a1f27d9e771a14c033\n      const startTimeMs = Trace.Helpers.Timing.microToMilli(marker.ts);\n      const style = this.markerStyleForExtensionMarker(marker);\n      return new TimelineFlameChartMarker(startTimeMs, startTimeMs - minTimeMs, style);\n    });\n    this.#compatibilityBuilder.getFlameChartTimelineData().markers.push(...flameChartMarkers);\n    // TODO: we would like to have markers share the level with the rest but...\n    //  due to how CompatTrackAppender.appendEventsAtLevel tweaks the legacyEntryTypeByLevel array, it would take some work\n    return ++currentLevel;\n  }\n\n  /*\n    ------------------------------------------------------------------------------------\n     The following methods  are invoked by the flame chart renderer to query features about\n     events on rendering.\n    ------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Gets the style for a page load marker event.\n   */\n  markerStyleForPageLoadEvent(markerEvent: Trace.Types.Events.PageLoadEvent): TimelineMarkerStyle {\n    const tallMarkerDashStyle = [6, 4];\n    let title = '';\n    let color = 'grey';\n    if (Trace.Types.Events.isMarkDOMContent(markerEvent)) {\n      color = '#0867CB';\n      title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.DCL;\n    }\n    if (Trace.Types.Events.isMarkLoad(markerEvent)) {\n      color = '#B31412';\n      title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.L;\n    }\n    if (Trace.Types.Events.isFirstPaint(markerEvent)) {\n      color = '#228847';\n      title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FP;\n    }\n    if (Trace.Types.Events.isFirstContentfulPaint(markerEvent)) {\n      color = '#1A6937';\n      title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FCP;\n    }\n    if (Trace.Types.Events.isLargestContentfulPaintCandidate(markerEvent)) {\n      color = '#1A3422';\n      title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP;\n    }\n    if (Trace.Types.Events.isNavigationStart(markerEvent)) {\n      color = '#FF9800';\n      title = '';\n    }\n    return {\n      title,\n      dashStyle: tallMarkerDashStyle,\n      lineWidth: 0.5,\n      color,\n      tall: true,\n      lowPriority: false,\n    };\n  }\n\n  markerStyleForExtensionMarker(markerEvent: Trace.Types.Extensions.SyntheticExtensionMarker): TimelineMarkerStyle {\n    const tallMarkerDashStyle = [6, 4];\n    const title = markerEvent.name;\n    const color = Extensions.ExtensionUI.extensionEntryColor(markerEvent);\n    return {\n      title,\n      dashStyle: tallMarkerDashStyle,\n      lineWidth: 0.5,\n      color,\n      tall: true,\n      lowPriority: false,\n    };\n  }\n\n  /**\n   * Gets the color an event added by this appender should be rendered with.\n   */\n  colorForEvent(event: Trace.Types.Events.Event): string {\n    if (Trace.Types.Events.eventIsPageLoadEvent(event)) {\n      return this.markerStyleForPageLoadEvent(event).color;\n    }\n    if (Trace.Types.Extensions.isSyntheticExtensionEntry(event)) {\n      return Extensions.ExtensionUI.extensionEntryColor(event);\n    }\n    // Performance and console timings.\n    return this.#colorGenerator.colorForID(event.name);\n  }\n\n  /**\n   * Gets the title an event added by this appender should be rendered with.\n   */\n  titleForEvent(event: Trace.Types.Events.Event): string {\n    const metricsHandler = Trace.Handlers.ModelHandlers.PageLoadMetrics;\n    if (Trace.Types.Events.eventIsPageLoadEvent(event)) {\n      switch (event.name) {\n        case 'MarkDOMContent':\n          return metricsHandler.MetricName.DCL;\n        case 'MarkLoad':\n          return metricsHandler.MetricName.L;\n        case 'firstContentfulPaint':\n          return metricsHandler.MetricName.FCP;\n        case 'firstPaint':\n          return metricsHandler.MetricName.FP;\n        case 'largestContentfulPaint::Candidate':\n          return metricsHandler.MetricName.LCP;\n        case 'navigationStart':\n          return '';\n        default:\n          return event.name;\n      }\n    }\n    if (Trace.Types.Events.isConsoleTimeStamp(event)) {\n      return `TimeStamp: ${event.args.data?.name ?? '(name unknown)'}`;\n    }\n    if (Trace.Types.Events.isPerformanceMark(event)) {\n      return `[mark]: ${event.name}`;\n    }\n    if (Trace.Types.Extensions.isSyntheticExtensionEntry(event) && event.args.tooltipText) {\n      return event.args.tooltipText;\n    }\n    return event.name;\n  }\n\n  setPopoverInfo(event: Trace.Types.Events.Event, info: PopoverInfo): void {\n    // If an event is a marker event, rather than show a duration of 0, we can instead show the time that the event happened, which is much more useful. We do this currently for:\n    // Page load events: DCL, FCP and LCP\n    // performance.mark() events\n    // console.timestamp() events\n    if (Trace.Types.Events.isMarkerEvent(event) || Trace.Types.Events.isPerformanceMark(event) ||\n        Trace.Types.Events.isConsoleTimeStamp(event)) {\n      const timeOfEvent = Trace.Helpers.Timing.timeStampForEventAdjustedByClosestNavigation(\n          event,\n          this.#parsedTrace.Meta.traceBounds,\n          this.#parsedTrace.Meta.navigationsByNavigationId,\n          this.#parsedTrace.Meta.navigationsByFrameId,\n      );\n      info.formattedTime = getDurationString(timeOfEvent);\n    }\n  }\n}\n"]}