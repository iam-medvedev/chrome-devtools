{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/timeline/AnimationsTrackAppender.ts", "../../../../../../front_end/panels/timeline/AppenderUtils.ts", "../../../../../../front_end/panels/timeline/AnnotationHelpers.ts", "../../../../../../front_end/panels/timeline/BenchmarkEvents.ts", "../../../../../../front_end/panels/timeline/CLSLinkifier.ts", "../../../../../../front_end/panels/timeline/CompatibilityTracksAppender.ts", "../../../../../../front_end/panels/timeline/ExtensionTrackAppender.ts", "../../../../../../front_end/panels/timeline/GPUTrackAppender.ts", "../../../../../../front_end/panels/timeline/InteractionsTrackAppender.ts", "../../../../../../front_end/panels/timeline/LayoutShiftsTrackAppender.ts", "../../../../../../front_end/panels/timeline/ThreadAppender.ts", "../../../../../../front_end/panels/timeline/ModificationsManager.ts", "../../../../../../front_end/panels/timeline/EntriesFilter.ts", "../../../../../../front_end/panels/timeline/EventsSerializer.ts", "../../../../../../front_end/panels/timeline/TimelineFlameChartDataProvider.ts", "../../../../../../front_end/panels/timeline/Initiators.ts", "timelineFlamechartPopover.css.js", "../../../../../../front_end/panels/timeline/TimelineFlameChartView.ts", "../../../../../../front_end/panels/timeline/CountersGraph.ts", "EasterEgg.js", "../../../../../../front_end/panels/timeline/TargetForEvent.ts", "../../../../../../front_end/panels/timeline/TimelineDetailsView.ts", "../../../../../../front_end/panels/timeline/EventsTimelineTreeView.ts", "../../../../../../front_end/panels/timeline/TimelineFilters.ts", "../../../../../../front_end/panels/timeline/TimelineUIUtils.ts", "../../ui/components/code_highlighter/codeHighlighter.css.js", "../../ui/legacy/components/utils/imagePreview.css.js", "../../../../../../front_end/panels/timeline/FreshRecording.ts", "../../../../../../front_end/panels/timeline/ThirdPartyTreeView.ts", "thirdPartyTreeView.css.js", "../../../../../../front_end/panels/timeline/TimelineTreeView.ts", "../../../../../../front_end/panels/timeline/ActiveFilters.ts", "../../../../../../front_end/panels/timeline/TimelineSelection.ts", "timelineTreeView.css.js", "../../../../../../front_end/panels/timeline/TimelinePanel.ts", "../../../../../../front_end/panels/timeline/IsolateSelector.ts", "../../../../../../front_end/panels/timeline/SaveFileFormatter.ts", "../../../../../../front_end/panels/timeline/StatusDialog.ts", "timelineStatusDialog.css.js", "../../../../../../front_end/panels/timeline/TimelineController.ts", "../../../../../../front_end/panels/timeline/RecordingMetadata.ts", "../../../../../../front_end/panels/timeline/TimelineHistoryManager.ts", "../../../../../../front_end/panels/timeline/TimelineEventOverview.ts", "timelineHistoryManager.css.js", "../../../../../../front_end/panels/timeline/TimelineLoader.ts", "../../../../../../front_end/panels/timeline/TimelineMiniMap.ts", "timelineMiniMap.css.js", "timelinePanel.css.js", "../../../../../../front_end/panels/timeline/UIDevtoolsController.ts", "../../../../../../front_end/panels/timeline/UIDevtoolsUtils.ts", "../../../../../../front_end/panels/timeline/TimelineLayersView.ts", "../../../../../../front_end/panels/timeline/TimelinePaintProfilerView.ts", "timelinePaintProfiler.css.js", "../../../../../../front_end/panels/timeline/TracingLayerTree.ts", "../../../../../../front_end/panels/timeline/TimelineSelectorStatsView.ts", "timelineSelectorStatsView.css.js", "../../../../../../front_end/panels/timeline/TimelineFlameChartNetworkDataProvider.ts", "../../../../../../front_end/panels/timeline/NetworkTrackAppender.ts", "../../../../../../front_end/panels/timeline/TrackConfiguration.ts", "timelineFlameChartView.css.js", "../../../../../../front_end/panels/timeline/TimingsTrackAppender.ts", "timeline.prebundle.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport {addDecorationToEvent, buildGroupStyle, buildTrackHeader} from './AppenderUtils.js';\nimport {\n  type CompatibilityTracksAppender,\n  type TrackAppender,\n  type TrackAppenderName,\n  VisualLoggingTrackName,\n} from './CompatibilityTracksAppender.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  animations: 'Animations',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/AnimationsTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class AnimationsTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'Animations';\n\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  #parsedTrace: Readonly<Trace.Handlers.Types.ParsedTrace>;\n  #eventAppendedCallback = this.#eventAppendedCallbackFunction.bind(this);\n\n  constructor(compatibilityBuilder: CompatibilityTracksAppender, parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    this.#compatibilityBuilder = compatibilityBuilder;\n    this.#parsedTrace = parsedTrace;\n  }\n\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean|undefined): number {\n    const animations = this.#parsedTrace.Animations.animations;\n    if (animations.length === 0) {\n      return trackStartLevel;\n    }\n    this.#appendTrackHeaderAtLevel(trackStartLevel, expanded);\n    return this.#compatibilityBuilder.appendEventsAtLevel(\n        animations, trackStartLevel, this, this.#eventAppendedCallback);\n  }\n\n  #appendTrackHeaderAtLevel(currentLevel: number, expanded?: boolean): void {\n    const style = buildGroupStyle({useFirstLineForOverview: false});\n    const group = buildTrackHeader(\n        VisualLoggingTrackName.ANIMATIONS, currentLevel, i18nString(UIStrings.animations), style,\n        /* selectable= */ true, expanded);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  #eventAppendedCallbackFunction(event: Trace.Types.Events.Event, index: number): void {\n    if (event && Trace.Types.Events.isSyntheticAnimation(event)) {\n      const failures = Trace.Insights.Models.CLSCulprits.getNonCompositedFailure(event);\n      if (failures.length) {\n        addDecorationToEvent(this.#compatibilityBuilder.getFlameChartTimelineData(), index, {\n          type: PerfUI.FlameChart.FlameChartDecorationType.WARNING_TRIANGLE,\n        });\n      }\n    }\n  }\n\n  colorForEvent(): string {\n    return ThemeSupport.ThemeSupport.instance().getComputedValue('--app-color-rendering');\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport type * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport type {VisualLoggingTrackName} from './CompatibilityTracksAppender.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in the Performance panel to show how long was spent in a particular part of the code.\n   * The first placeholder is the total time taken for this node and all children, the second is the self time\n   * (time taken in this node, without children included).\n   *@example {10ms} PH1\n   *@example {10ms} PH2\n   */\n  sSelfS: '{PH1} (self {PH2})',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/AppenderUtils.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/** An array, indexed by entry levels, where the values are the last timestamp (typically `endTime`) of data within that level. */\nexport type LastTimestampByLevel = number[];\n\n/**\n * Builds the style for the group.\n * Each group has a predefined style and a reference to the definition of the legacy track (which should be removed in the future).\n * @param extra the customized fields with value.\n * @returns the built GroupStyle\n */\nexport function buildGroupStyle(extra?: Partial<PerfUI.FlameChart.GroupStyle>): PerfUI.FlameChart.GroupStyle {\n  const defaultGroupStyle: PerfUI.FlameChart.GroupStyle = {\n    padding: 4,\n    height: 17,\n    collapsible: true,\n    color: ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-on-surface'),\n    backgroundColor: ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-cdt-base-container'),\n    nestingLevel: 0,\n    shareHeaderLine: true,\n  };\n  return Object.assign(defaultGroupStyle, extra);\n}\n\n/**\n * Builds the header corresponding to the track. A header is added in the shape of a group in the flame chart data.\n * @param jslogContext the text that will be set as the logging context\n *                          for the Visual Elements logging framework. Pass\n *                          `null` to not set a context and consequently\n *                          cause this group not to be logged.\n * @param startLevel the flame chart level at which the track header is appended.\n * @param name the display name of the track.\n * @param style the GroupStyle for the track header.\n * @param selectable if the track is selectable.\n * @param expanded if the track is expanded.\n * @param track this is set only when `selectable` is true, and it is used for selecting a track in the details panel.\n * @param showStackContextMenu whether menu with options to merge/collapse entries in track is shown.\n * @returns the group that built from the give data\n */\nexport function buildTrackHeader(\n    jslogContext: VisualLoggingTrackName|null, startLevel: number, name: string, style: PerfUI.FlameChart.GroupStyle,\n    selectable: boolean, expanded?: boolean, showStackContextMenu?: boolean): PerfUI.FlameChart.Group {\n  const group: PerfUI.FlameChart.Group = {\n    startLevel,\n    name: name as Common.UIString.LocalizedString,\n    style,\n    selectable,\n    expanded,\n    showStackContextMenu,\n  };\n  if (jslogContext !== null) {\n    group.jslogContext = jslogContext;\n  }\n  return group;\n}\n\n/**\n * Returns the time info shown when an event is hovered in the timeline.\n * @param totalTime the total time of the hovered event.\n * @param selfTime the self time of the hovered event.\n * @returns the formatted time string for popoverInfo\n */\n\nexport function getDurationString(totalTime?: Trace.Types.Timing.Micro, selfTime?: Trace.Types.Timing.Micro): string {\n  if (!totalTime) {\n    return '';\n  }\n  const totalMs = Trace.Helpers.Timing.microToMilli(totalTime);\n  if (selfTime === undefined) {\n    return i18n.TimeUtilities.millisToString(totalMs, true);\n  }\n\n  const selfMs = Trace.Helpers.Timing.microToMilli(selfTime);\n  // This minSelfTimeSignificance is 0.001µs, aka 1 nanosecond.\n  // TODO(paulirish): change to 0.09ms, aka 90 microseconds and revise logic below.\n  const minSelfTimeSignificance = Trace.Types.Timing.Milli(0.000001);\n  const formattedTime = Math.abs(totalMs - selfMs) > minSelfTimeSignificance && selfMs > minSelfTimeSignificance ?\n      i18nString(UIStrings.sSelfS, {\n        PH1: i18n.TimeUtilities.millisToString(totalMs, true),\n        PH2: i18n.TimeUtilities.millisToString(selfMs, true),\n      }) :\n      i18n.TimeUtilities.millisToString(totalMs, true);\n\n  return formattedTime;\n}\n\n/**\n * Returns the first level that is available for an event.\n * Important: if you are walking through an array of events and calling this,\n * the events MUST be sorted.\n */\nexport function getEventLevel(event: Trace.Types.Events.Event, lastTimestampByLevel: LastTimestampByLevel): number {\n  let level = 0;\n  const startTime = event.ts;\n  const endTime = event.ts + (event.dur || 0);\n  // Look vertically for the first level where this event fits,\n  // that is, where it wouldn't overlap with other events.\n  while (level < lastTimestampByLevel.length && startTime < lastTimestampByLevel[level]) {\n    // For each event, we look each level from top, and see if start timestamp of this\n    // event is used by current level already. If yes, we will go to check next level.\n    ++level;\n  }\n  lastTimestampByLevel[level] = endTime;\n  return level;\n}\n\nexport function addDecorationToEvent(\n    timelineData: PerfUI.FlameChart.FlameChartTimelineData, eventIndex: number,\n    decoration: PerfUI.FlameChart.FlameChartDecoration): void {\n  const decorationsForEvent = timelineData.entryDecorations[eventIndex] || [];\n  decorationsForEvent.push(decoration);\n  timelineData.entryDecorations[eventIndex] = decorationsForEvent;\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as TraceBounds from '../../services/trace_bounds/trace_bounds.js';\n\nimport type {AnnotationModifiedEvent} from './ModificationsManager.js';\nimport type * as Overlays from './overlays/overlays.js';\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   *@description text used to announce to a screen reader that they have entered the mode to edit the label\n   */\n  srEnterLabelEditMode: 'Editing the annotation label text',\n  /**\n   *@description text used to announce to a screen reader that the entry label text has been updated\n   *@example {Hello world} PH1\n   */\n  srLabelTextUpdated: 'Label updated to {PH1}',\n  /**\n   *@description text used to announce to a screen reader that the bounds of a time range annotation have been upodated\n   *@example {13ms} PH1\n   *@example {20ms} PH2\n   */\n  srTimeRangeBoundsUpdated: 'Time range updated, starting at {PH1} and ending at {PH2}',\n  /**\n   *@description label for a time range overlay\n   */\n  timeRange: 'time range',\n  /**\n   *@description label for a entry label overlay\n   */\n  entryLabel: 'entry label',\n  /**\n   *@description label for a connected entries overlay\n   */\n  entriesLink: 'connected entries',\n  /**\n   *@description screen reader text to announce that an annotation has been removed\n   *@example {Entry Label} PH1\n   */\n  srAnnotationRemoved: 'The {PH1} annotation has been removed',\n  /**\n   *@description screen reader text to announce that an annotation has been added\n   *@example {Entry Label} PH1\n   */\n  srAnnotationAdded: 'The {PH1} annotation has been added',\n  /**\n   *@description screen reader text to announce the two events that the connected entries annotation links to\n   *@example {Paint} PH1\n   *@example {Function call} PH2\n   */\n  srEntriesLinked: 'The connected entries annotation now links from {PH1} to {PH2}',\n\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/AnnotationHelpers.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function getAnnotationEntries(\n    annotation: Trace.Types.File.Annotation,\n    ): Trace.Types.Events.Event[] {\n  const entries: Trace.Types.Events.Event[] = [];\n  switch (annotation.type) {\n    case 'ENTRY_LABEL':\n      entries.push(annotation.entry);\n      break;\n    case 'TIME_RANGE':\n      break;\n    case 'ENTRIES_LINK':\n      entries.push(annotation.entryFrom);\n      if (annotation.entryTo) {\n        entries.push(annotation.entryTo);\n      }\n      break;\n    default:\n      Platform.assertNever(annotation, 'Unsupported annotation type');\n  }\n  return entries;\n}\n\n/**\n * Gets a trace window that contains the given annotation. May return `null`\n * if there is no valid window (an ENTRIES_LINK without a `to` entry for\n * example.)\n */\nexport function getAnnotationWindow(\n    annotation: Trace.Types.File.Annotation,\n    ): Trace.Types.Timing.TraceWindowMicro|null {\n  let annotationWindow: Trace.Types.Timing.TraceWindowMicro|null = null;\n  const minVisibleEntryDuration = Trace.Types.Timing.Milli(1);\n\n  switch (annotation.type) {\n    case 'ENTRY_LABEL': {\n      const eventDuration = annotation.entry.dur ?? Trace.Helpers.Timing.milliToMicro(minVisibleEntryDuration);\n\n      annotationWindow = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          annotation.entry.ts,\n          Trace.Types.Timing.Micro(annotation.entry.ts + eventDuration),\n      );\n\n      break;\n    }\n    case 'TIME_RANGE': {\n      annotationWindow = annotation.bounds;\n      break;\n    }\n    case 'ENTRIES_LINK': {\n      // If entryTo does not exist, the annotation is in the process of being created.\n      // Do not allow to zoom into it in this case.\n      if (!annotation.entryTo) {\n        break;\n      }\n\n      const fromEventDuration = (annotation.entryFrom.dur) ?? minVisibleEntryDuration;\n      const toEventDuration = annotation.entryTo.dur ?? minVisibleEntryDuration;\n\n      // To choose window max, check which entry ends later\n      const fromEntryEndTS = (annotation.entryFrom.ts + fromEventDuration);\n      const toEntryEndTS = (annotation.entryTo.ts + toEventDuration);\n      const maxTimestamp = Math.max(fromEntryEndTS, toEntryEndTS);\n\n      annotationWindow = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          annotation.entryFrom.ts,\n          Trace.Types.Timing.Micro(maxTimestamp),\n      );\n      break;\n    }\n    default:\n      Platform.assertNever(annotation, 'Unsupported annotation type');\n  }\n\n  return annotationWindow;\n}\n\nexport function isTimeRangeLabel(overlay: Overlays.Overlays.TimelineOverlay):\n    overlay is Overlays.Overlays.TimeRangeLabel {\n  return overlay.type === 'TIME_RANGE';\n}\n\nexport function isEntriesLink(overlay: Overlays.Overlays.TimelineOverlay): overlay is Overlays.Overlays.EntriesLink {\n  return overlay.type === 'ENTRIES_LINK';\n}\n\nexport function isEntryLabel(overlay: Overlays.Overlays.TimelineOverlay): overlay is Overlays.Overlays.EntryLabel {\n  return overlay.type === 'ENTRY_LABEL';\n}\n\nfunction labelForOverlay(overlay: Overlays.Overlays.TimelineOverlay): string|null {\n  if (isTimeRangeLabel(overlay) || isEntryLabel(overlay)) {\n    return overlay.label;\n  }\n  return null;\n}\n\nexport function ariaDescriptionForOverlay(overlay: Overlays.Overlays.TimelineOverlay): string|null {\n  if (isTimeRangeLabel(overlay)) {\n    return i18nString(UIStrings.timeRange);\n  }\n  if (isEntriesLink(overlay)) {\n    return i18nString(UIStrings.entriesLink);\n  }\n  if (isEntryLabel(overlay)) {\n    // Don't announce an empty label\n    return overlay.label.length > 0 ? i18nString(UIStrings.entryLabel) : null;\n  }\n\n  // Not an annotation overlay: ignore.\n  return null;\n}\n\nexport function ariaAnnouncementForModifiedEvent(event: AnnotationModifiedEvent): string|null {\n  const {overlay, action} = event;\n  switch (action) {\n    case 'Remove': {\n      const text = ariaDescriptionForOverlay(overlay);\n      if (text) {\n        return (i18nString(UIStrings.srAnnotationRemoved, {PH1: text}));\n      }\n      break;\n    }\n    case 'Add': {\n      const text = ariaDescriptionForOverlay(overlay);\n      if (text) {\n        return (i18nString(UIStrings.srAnnotationAdded, {PH1: text}));\n      }\n      break;\n    }\n    case 'UpdateLabel': {\n      const label = labelForOverlay(overlay);\n      if (label) {\n        return i18nString(UIStrings.srLabelTextUpdated, {PH1: label});\n      }\n      break;\n    }\n    case 'UpdateTimeRange': {\n      if (overlay.type !== 'TIME_RANGE') {\n        return '';\n      }\n      const traceBounds = TraceBounds.TraceBounds.BoundsManager.instance().state()?.micro.entireTraceBounds;\n      if (!traceBounds) {\n        return '';\n      }\n\n      const {min, max} = overlay.bounds;\n      const minText = i18n.TimeUtilities.formatMicroSecondsAsMillisFixed(\n          Trace.Types.Timing.Micro(min - traceBounds.min),\n      );\n      const maxText =\n          i18n.TimeUtilities.formatMicroSecondsAsMillisFixed(Trace.Types.Timing.Micro(max - traceBounds.min));\n\n      return i18nString(UIStrings.srTimeRangeBoundsUpdated, {\n        PH1: minText,\n        PH2: maxText,\n      });\n    }\n    case 'UpdateLinkToEntry': {\n      if (isEntriesLink(overlay) && overlay.entryFrom && overlay.entryTo) {\n        const from = Utils.EntryName.nameForEntry(overlay.entryFrom);\n        const to = Utils.EntryName.nameForEntry(overlay.entryTo);\n        return (i18nString(UIStrings.srEntriesLinked, {PH1: from, PH2: to}));\n      }\n      break;\n    }\n    case 'EnterLabelEditState': {\n      return (i18nString(UIStrings.srEnterLabelEditMode));\n    }\n    case 'LabelBringForward': {\n      break;\n    }\n    default:\n      Platform.assertNever(action, 'Unsupported action for AnnotationModifiedEvent');\n  }\n\n  return null;\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Trace from '../../models/trace/trace.js';\n\nexport class TraceLoadEvent extends Event {\n  static readonly eventName = 'traceload';\n\n  constructor(public duration: Trace.Types.Timing.Milli) {\n    super(TraceLoadEvent.eventName, {bubbles: true, composed: true});\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    [TraceLoadEvent.eventName]: TraceLoadEvent;\n  }\n}\n", "// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport type * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\ninterface Color {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport class CLSRect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  color: Color;\n  outlineColor: Color;\n  constructor([x, y, width, height]: [number, number, number, number]) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.color = {r: 238, g: 111, b: 99, a: 0.4};\n    this.outlineColor = {r: 238, g: 111, b: 99, a: 0.7};\n  }\n}\n\nlet linkifierInstance: Linkifier;\n\nexport class Linkifier implements Common.Linkifier.Linkifier {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): Linkifier {\n    const {forceNew} = opts;\n    if (!linkifierInstance || forceNew) {\n      linkifierInstance = new Linkifier();\n    }\n\n    return linkifierInstance;\n  }\n\n  linkify(object: Object, _options?: Common.Linkifier.Options): Node {\n    const link = document.createElement('span');\n    const rect = (object as CLSRect);\n    const {x, y, width, height} = rect;\n    link.textContent = `Location: [${x},${y}], Size: [${width}x${height}]`;\n\n    link.addEventListener('mouseover', () => SDK.OverlayModel.OverlayModel.highlightRect(rect));\n    link.addEventListener('mouseleave', () => SDK.OverlayModel.OverlayModel.clearHighlight());\n\n    return link;\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport type * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport {AnimationsTrackAppender} from './AnimationsTrackAppender.js';\nimport {getDurationString, getEventLevel, type LastTimestampByLevel} from './AppenderUtils.js';\nimport * as TimelineComponents from './components/components.js';\nimport {ExtensionTrackAppender} from './ExtensionTrackAppender.js';\nimport {GPUTrackAppender} from './GPUTrackAppender.js';\nimport {InteractionsTrackAppender} from './InteractionsTrackAppender.js';\nimport {LayoutShiftsTrackAppender} from './LayoutShiftsTrackAppender.js';\nimport {ThreadAppender} from './ThreadAppender.js';\nimport {\n  EntryType,\n  InstantEventVisibleDurationMs,\n} from './TimelineFlameChartDataProvider.js';\nimport {TimelinePanel} from './TimelinePanel.js';\nimport {TimingsTrackAppender} from './TimingsTrackAppender.js';\nimport * as TimelineUtils from './utils/utils.js';\n\nexport interface PopoverInfo {\n  title: string;\n  formattedTime: string;\n  url: string|null;\n  warningElements: HTMLSpanElement[];\n  additionalElements: HTMLElement[];\n}\n\nlet showPostMessageEvents: boolean|undefined;\nfunction isShowPostMessageEventsEnabled(): boolean {\n  // Everytime the experiment is toggled devtools is reloaded so the\n  // cache is updated automatically.\n  if (showPostMessageEvents === undefined) {\n    showPostMessageEvents =\n        Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_SHOW_POST_MESSAGE_EVENTS);\n  }\n  return showPostMessageEvents;\n}\n\nexport function entryIsVisibleInTimeline(\n    entry: Trace.Types.Events.Event, parsedTrace?: Trace.Handlers.Types.ParsedTrace): boolean {\n  if (parsedTrace?.Meta.traceIsGeneric) {\n    return true;\n  }\n\n  if (Trace.Types.Events.isUpdateCounters(entry)) {\n    // These events are not \"visible\" on the timeline because they are instant events with 0 duration.\n    // However, the Memory view (CountersGraph in the codebase) relies on\n    // finding the UpdateCounters events within the user's active trace\n    // selection in order to show the memory usage for the selected time\n    // period.\n    // Therefore we mark them as visible so they are appended onto the Thread\n    // track, and hence accessible by the CountersGraph view.\n    return true;\n  }\n\n  if (isShowPostMessageEventsEnabled()) {\n    if (Trace.Types.Events.isSchedulePostMessage(entry) || Trace.Types.Events.isHandlePostMessage(entry)) {\n      return true;\n    }\n  }\n\n  if (Trace.Types.Extensions.isSyntheticExtensionEntry(entry)) {\n    return true;\n  }\n\n  // Default styles are globally defined for each event name. Some\n  // events are hidden by default.\n  const eventStyle = TimelineUtils.EntryStyles.getEventStyle(entry.name as Trace.Types.Events.Name);\n  const eventIsTiming = Trace.Types.Events.isConsoleTime(entry) || Trace.Types.Events.isPerformanceMeasure(entry) ||\n      Trace.Types.Events.isPerformanceMark(entry) || Trace.Types.Events.isConsoleTimeStamp(entry);\n  return (eventStyle && !eventStyle.hidden) || eventIsTiming;\n}\n\n/**\n * Track appenders add the data of each track into the timeline flame\n * chart. Each track appender also implements functions tha allow the\n * canvas renderer to gather more information about an event in a track,\n * like its display name or color.\n *\n * At the moment, tracks in the timeline flame chart are appended in\n * two locations: in the TimelineFlameChartDataProvider and in the track\n * appenders exported by this module. As part of the work to use a new\n * trace parsing engine, a track appender will be defined with this API\n * for each of the tracks in the timeline. With this implementation in\n * place its counterpart in the TimelineFlameChartDataProvider can be\n * removed. This processes of doing this for a track is referred to as\n * \"migrating the track\" to the new system.\n *\n * The migration implementation will result beneficial among other\n * things because the complexity of rendering the details of each track\n * is distributed among multiple standalone modules.\n * Read more at go/rpp-flamechart-arch\n */\n\nexport interface TrackAppender {\n  /**\n   * The unique name given to the track appender.\n   */\n  appenderName: TrackAppenderName;\n\n  /**\n   * Appends into the flame chart data the data corresponding to a track.\n   * @param level the horizontal level of the flame chart events where the\n   * track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(level: number, expanded?: boolean): number;\n  /**\n   * Returns the color an event is shown with in the timeline.\n   */\n  colorForEvent(event: Trace.Types.Events.Event): string;\n  /**\n   * Returns the title an event is shown with in the timeline.\n   */\n  titleForEvent?(event: Trace.Types.Events.Event): string;\n  /**\n   * Updates the standard popover (AKA tooltip) some appender specific details.\n   */\n  setPopoverInfo?(event: Trace.Types.Events.Event, info: PopoverInfo): void;\n  /**\n   * Returns the a callback function to draw an event to overrides the normal rectangle draw operation.\n   */\n  getDrawOverride?(event: Trace.Types.Events.Event): DrawOverride|undefined;\n}\n\nexport const TrackNames = [\n  'Animations',\n  'Timings',\n  'Interactions',\n  'GPU',\n  'LayoutShifts',\n  'Thread',\n  'Thread_AuctionWorklet',\n  'Extension',\n  'ServerTimings',\n] as const;\n// Network track will use TrackAppender interface, but it won't be shown in Main flamechart.\n// So manually add it to TrackAppenderName.\nexport type TrackAppenderName = typeof TrackNames[number]|'Network';\n\nexport type DrawOverride = PerfUI.FlameChart.DrawOverride;\n\n/**\n * Used as the context when a track (aka group) is selected and we log\n * something to the VE Logging framework.\n * This enum broadly corresponds with the list of TrackNames, but can be more\n * specific in some situations such as when we want to identify the thread type\n * rather than log \"thread\" - it is useful to know if the thread is the main\n * thread or not.\n * VE context needs to be kebab-case, and not contain any PII, which is why we\n * log this set list rather than full track names, which in the case of threads\n * can contain URLswhich we do not want to log.\n */\nexport const enum VisualLoggingTrackName {\n  ANIMATIONS = 'animations',\n  TIMINGS = 'timings',\n  INTERACTIONS = 'interactions',\n  GPU = 'gpu',\n  LAYOUT_SHIFTS = 'layout-shifts',\n  SERVER_TIMINGS = 'server.timings',\n  THREAD_CPU_PROFILE = 'thread.cpu-profile',\n  THREAD_MAIN = 'thread.main',\n  THREAD_FRAME = 'thread.frame',\n  THREAD_WORKER = 'thread.worker',\n  THREAD_AUCTION_WORKLET = 'thread.auction-worklet',\n  THREAD_RASTERIZER = 'thread.rasterizer',\n  THREAD_POOL = 'thread.pool',\n  THREAD_OTHER = 'thread.other',\n  EXTENSION = 'extension',\n  ANGULAR_TRACK = 'angular-track',\n  NETWORK = 'network',\n}\n\nexport class CompatibilityTracksAppender {\n  #trackForLevel = new Map<number, TrackAppender>();\n  #trackForGroup = new Map<PerfUI.FlameChart.Group, TrackAppender>();\n  #eventsForTrack = new Map<TrackAppender, Trace.Types.Events.Event[]>();\n  #trackEventsForTreeview = new Map<TrackAppender, Trace.Types.Events.Event[]>();\n  #flameChartData: PerfUI.FlameChart.FlameChartTimelineData;\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  #entryData: Trace.Types.Events.Event[];\n  #colorGenerator: Common.Color.Generator;\n  #allTrackAppenders: TrackAppender[] = [];\n  #visibleTrackNames = new Set<TrackAppenderName>([...TrackNames]);\n\n  #legacyEntryTypeByLevel: EntryType[];\n  #timingsTrackAppender: TimingsTrackAppender;\n  #animationsTrackAppender: AnimationsTrackAppender;\n  #interactionsTrackAppender: InteractionsTrackAppender;\n  #gpuTrackAppender: GPUTrackAppender;\n  #layoutShiftsTrackAppender: LayoutShiftsTrackAppender;\n  #threadAppenders: ThreadAppender[] = [];\n  #entityMapper: TimelineUtils.EntityMapper.EntityMapper|null;\n\n  /**\n   * @param flameChartData the data used by the flame chart renderer on\n   * which the track data will be appended.\n   * @param parsedTrace the trace parsing engines output.\n   * @param entryData the array containing all event to be rendered in\n   * the flamechart.\n   * @param legacyEntryTypeByLevel an array containing the type of\n   * each entry in the entryData array. Indexed by the position the\n   * corresponding entry occupies in the entryData array. This reference\n   * is needed only for compatibility with the legacy flamechart\n   * architecture and should be removed once all tracks use the new\n   * system.\n   * @param entityMapper 3P entity data for the trace.\n   */\n  constructor(\n      flameChartData: PerfUI.FlameChart.FlameChartTimelineData, parsedTrace: Trace.Handlers.Types.ParsedTrace,\n      entryData: Trace.Types.Events.Event[], legacyEntryTypeByLevel: EntryType[],\n      entityMapper: TimelineUtils.EntityMapper.EntityMapper|null) {\n    this.#flameChartData = flameChartData;\n    this.#parsedTrace = parsedTrace;\n    this.#entityMapper = entityMapper;\n    this.#entryData = entryData;\n    this.#colorGenerator = new Common.Color.Generator(\n        /* hueSpace= */ {min: 30, max: 55, count: undefined},\n        /* satSpace= */ {min: 70, max: 100, count: 6},\n        /* lightnessSpace= */ 50,\n        /* alphaSpace= */ 0.7);\n    this.#legacyEntryTypeByLevel = legacyEntryTypeByLevel;\n    this.#timingsTrackAppender = new TimingsTrackAppender(this, this.#parsedTrace, this.#colorGenerator);\n    this.#allTrackAppenders.push(this.#timingsTrackAppender);\n\n    this.#interactionsTrackAppender = new InteractionsTrackAppender(this, this.#parsedTrace, this.#colorGenerator);\n    this.#allTrackAppenders.push(this.#interactionsTrackAppender);\n\n    this.#animationsTrackAppender = new AnimationsTrackAppender(this, this.#parsedTrace);\n    this.#allTrackAppenders.push(this.#animationsTrackAppender);\n\n    this.#gpuTrackAppender = new GPUTrackAppender(this, this.#parsedTrace);\n    this.#allTrackAppenders.push(this.#gpuTrackAppender);\n\n    this.#layoutShiftsTrackAppender = new LayoutShiftsTrackAppender(this, this.#parsedTrace);\n    this.#allTrackAppenders.push(this.#layoutShiftsTrackAppender);\n\n    this.#addThreadAppenders();\n    this.#addExtensionAppenders();\n\n    this.onThemeChange = this.onThemeChange.bind(this);\n    ThemeSupport.ThemeSupport.instance().addEventListener(ThemeSupport.ThemeChangeEvent.eventName, this.onThemeChange);\n  }\n\n  reset(): void {\n    ThemeSupport.ThemeSupport.instance().removeEventListener(\n        ThemeSupport.ThemeChangeEvent.eventName, this.onThemeChange);\n  }\n\n  setFlameChartDataAndEntryData(\n      flameChartData: PerfUI.FlameChart.FlameChartTimelineData, entryData: Trace.Types.Events.Event[],\n      legacyEntryTypeByLevel: EntryType[]): void {\n    this.#trackForGroup.clear();\n    this.#flameChartData = flameChartData;\n    this.#entryData = entryData;\n    this.#legacyEntryTypeByLevel = legacyEntryTypeByLevel;\n  }\n\n  getFlameChartTimelineData(): PerfUI.FlameChart.FlameChartTimelineData {\n    return this.#flameChartData;\n  }\n\n  private onThemeChange(): void {\n    for (const group of this.#flameChartData.groups) {\n      // We only need to update the color here, because FlameChart will call `scheduleUpdate()` when theme is changed.\n      group.style.color = ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-on-surface');\n      group.style.backgroundColor =\n          ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-cdt-base-container');\n    }\n  }\n\n  #addExtensionAppenders(): void {\n    if (!TimelinePanel.extensionDataVisibilitySetting().get()) {\n      return;\n    }\n    const tracks = this.#parsedTrace.ExtensionTraceData.extensionTrackData;\n    for (const trackData of tracks) {\n      this.#allTrackAppenders.push(new ExtensionTrackAppender(this, trackData));\n    }\n  }\n\n  #addThreadAppenders(): void {\n    const threadTrackOrder = (appender: ThreadAppender): number => {\n      switch (appender.threadType) {\n        case Trace.Handlers.Threads.ThreadType.MAIN_THREAD: {\n          if (appender.isOnMainFrame) {\n            // Ensure `about:blank` or `chrome://new-tab-page` are deprioritized, as they're likely not the profiling targets\n            const url = appender.getUrl();\n            if (url.startsWith('about:') || url.startsWith('chrome:')) {\n              return 2;\n            }\n            return 0;\n          }\n          return 1;\n        }\n        case Trace.Handlers.Threads.ThreadType.WORKER:\n          return 3;\n        case Trace.Handlers.Threads.ThreadType.AUCTION_WORKLET:\n          return 3;\n        case Trace.Handlers.Threads.ThreadType.RASTERIZER:\n          return 4;\n        case Trace.Handlers.Threads.ThreadType.THREAD_POOL:\n          return 5;\n        case Trace.Handlers.Threads.ThreadType.OTHER:\n          return 7;\n        default:\n          return 8;\n      }\n    };\n    const threads = Trace.Handlers.Threads.threadsInTrace(this.#parsedTrace);\n    const showAllEvents = Root.Runtime.experiments.isEnabled('timeline-show-all-events');\n\n    for (const {pid, tid, name, type, entries, tree} of threads) {\n      if (this.#parsedTrace.Meta.traceIsGeneric) {\n        // If the trace is generic, we just push all of the threads with no effort to differentiate them, hence\n        // overriding the thread type to be OTHER for all threads.\n        this.#threadAppenders.push(new ThreadAppender(\n            this, this.#parsedTrace, pid, tid, name, Trace.Handlers.Threads.ThreadType.OTHER, entries, tree));\n        continue;\n      }\n      // These threads have no useful information. Omit them\n      if ((name === 'Chrome_ChildIOThread' || name === 'Compositor' || name === 'GpuMemoryThread') && !showAllEvents) {\n        continue;\n      }\n\n      const matchingWorklet = this.#parsedTrace.AuctionWorklets.worklets.get(pid);\n      if (matchingWorklet) {\n        // Each AuctionWorklet has two key threads:\n        // 1. the Utility Thread\n        // 2. the V8 Helper Thread - either a bidder or seller. see buildNameForAuctionWorklet()\n        // There are other threads in a worklet process, but we don't render them.\n        const tids = [matchingWorklet.args.data.utilityThread.tid, matchingWorklet.args.data.v8HelperThread.tid];\n        if (tids.includes(tid)) {\n          this.#threadAppenders.push(new ThreadAppender(\n              this, this.#parsedTrace, pid, tid, '', Trace.Handlers.Threads.ThreadType.AUCTION_WORKLET, entries, tree));\n        }\n        continue;\n      }\n\n      // The Common case… Add the main thread, or iframe, or thread pool, etc.\n      this.#threadAppenders.push(new ThreadAppender(this, this.#parsedTrace, pid, tid, name, type, entries, tree));\n    }\n    // Sort first by track order, then break ties by placing busier tracks first.\n    this.#threadAppenders.sort(\n        (a, b) => (threadTrackOrder(a) - threadTrackOrder(b)) || (b.getEntries().length - a.getEntries().length));\n    this.#allTrackAppenders.push(...this.#threadAppenders);\n  }\n\n  timingsTrackAppender(): TimingsTrackAppender {\n    return this.#timingsTrackAppender;\n  }\n\n  animationsTrackAppender(): AnimationsTrackAppender {\n    return this.#animationsTrackAppender;\n  }\n\n  interactionsTrackAppender(): InteractionsTrackAppender {\n    return this.#interactionsTrackAppender;\n  }\n\n  gpuTrackAppender(): GPUTrackAppender {\n    return this.#gpuTrackAppender;\n  }\n\n  layoutShiftsTrackAppender(): LayoutShiftsTrackAppender {\n    return this.#layoutShiftsTrackAppender;\n  }\n\n  threadAppenders(): ThreadAppender[] {\n    return this.#threadAppenders;\n  }\n\n  eventsInTrack(trackAppender: TrackAppender): Trace.Types.Events.Event[] {\n    const cachedData = this.#eventsForTrack.get(trackAppender);\n    if (cachedData) {\n      return cachedData;\n    }\n\n    // Calculate the levels occupied by a track.\n    let trackStartLevel = null;\n    let trackEndLevel = null;\n    for (const [level, track] of this.#trackForLevel) {\n      if (track !== trackAppender) {\n        continue;\n      }\n      if (trackStartLevel === null) {\n        trackStartLevel = level;\n      }\n      trackEndLevel = level;\n    }\n\n    if (trackStartLevel === null || trackEndLevel === null) {\n      throw new Error(`Could not find events for track: ${trackAppender}`);\n    }\n    const entryLevels = this.#flameChartData.entryLevels;\n    const events = [];\n    for (let i = 0; i < entryLevels.length; i++) {\n      if (trackStartLevel <= entryLevels[i] && entryLevels[i] <= trackEndLevel) {\n        events.push(this.#entryData[i]);\n      }\n    }\n    events.sort((a, b) => a.ts - b.ts);  // TODO(paulirish): Remove as I'm 90% it's already sorted.\n\n    this.#eventsForTrack.set(trackAppender, events);\n    return events;\n  }\n\n  /**\n   * Gets the events to be shown in the tree views of the details pane\n   * (Bottom-up, Call tree, etc.). These are the events from the track\n   * that can be arranged in a tree shape.\n   */\n  eventsForTreeView(trackAppender: TrackAppender): Trace.Types.Events.Event[] {\n    const cachedData = this.#trackEventsForTreeview.get(trackAppender);\n    if (cachedData) {\n      return cachedData;\n    }\n\n    let trackEvents = this.eventsInTrack(trackAppender);\n    if (!Trace.Helpers.TreeHelpers.canBuildTreesFromEvents(trackEvents)) {\n      // Some tracks can include both async and sync events. When this\n      // happens, we use all events for the tree views if a trees can be\n      // built from both sync and async events. If this is not possible,\n      // async events are filtered out and only sync events are used\n      // (it's assumed a tree can always be built using a tracks sync\n      // events).\n      trackEvents = trackEvents.filter(e => !Trace.Types.Events.isPhaseAsync(e.ph));\n    }\n    this.#trackEventsForTreeview.set(trackAppender, trackEvents);\n    return trackEvents;\n  }\n\n  /**\n   * Caches the track appender that owns a flame chart group. FlameChart\n   * groups are created for each track in the timeline. When an user\n   * selects a track in the UI, the track's group is passed to the model\n   * layer to inform about the selection.\n   */\n  registerTrackForGroup(group: PerfUI.FlameChart.Group, appender: TrackAppender): void {\n    this.#flameChartData.groups.push(group);\n    this.#trackForGroup.set(group, appender);\n  }\n\n  /**\n   * Returns number of tracks of given type already appended.\n   * Used to name the \"Raster Thread 6\" tracks, etc\n   */\n  getCurrentTrackCountForThreadType(\n      threadType: Trace.Handlers.Threads.ThreadType.RASTERIZER|Trace.Handlers.Threads.ThreadType.THREAD_POOL): number {\n    return this.#threadAppenders.filter(appender => appender.threadType === threadType && appender.headerAppended())\n        .length;\n  }\n\n  /**\n   * Looks up a FlameChart group for a given appender.\n   */\n  groupForAppender(targetAppender: TrackAppender): PerfUI.FlameChart.Group|null {\n    let foundGroup: PerfUI.FlameChart.Group|null = null;\n    for (const [group, appender] of this.#trackForGroup) {\n      if (appender === targetAppender) {\n        foundGroup = group;\n        break;\n      }\n    }\n    return foundGroup;\n  }\n\n  /**\n   * Given a FlameChart group, gets the events to be shown in the tree\n   * views if that group was registered by the appender system.\n   */\n  groupEventsForTreeView(group: PerfUI.FlameChart.Group): Trace.Types.Events.Event[]|null {\n    const track = this.#trackForGroup.get(group);\n    if (!track) {\n      return null;\n    }\n    return this.eventsForTreeView(track);\n  }\n\n  groupForLevel(level: number): PerfUI.FlameChart.Group|null {\n    const appenderForLevel = this.#trackForLevel.get(level);\n    if (!appenderForLevel) {\n      return null;\n    }\n    return this.groupForAppender(appenderForLevel);\n  }\n\n  /**\n   * Adds an event to the flame chart data at a defined level.\n   * @param event the event to be appended,\n   * @param level the level to append the event,\n   * @param appender the track which the event belongs to.\n   * @returns the index of the event in all events to be rendered in the flamechart.\n   */\n  appendEventAtLevel(event: Trace.Types.Events.Event, level: number, appender: TrackAppender): number {\n    // TODO(crbug.com/1442454) Figure out how to avoid the circular calls.\n    this.#trackForLevel.set(level, appender);\n    const index = this.#entryData.length;\n    this.#entryData.push(event);\n    this.#legacyEntryTypeByLevel[level] = EntryType.TRACK_APPENDER;\n    this.#flameChartData.entryLevels[index] = level;\n    this.#flameChartData.entryStartTimes[index] = Trace.Helpers.Timing.microToMilli(event.ts);\n    const dur = event.dur || Trace.Helpers.Timing.milliToMicro(InstantEventVisibleDurationMs);\n    this.#flameChartData.entryTotalTimes[index] = Trace.Helpers.Timing.microToMilli(dur);\n    return index;\n  }\n\n  /**\n   * Adds into the flame chart data a list of trace events.\n   * @param events the trace events that will be appended to the flame chart.\n   * The events should be taken straight from the trace handlers. The handlers\n   * should sort the events by start time, and the parent event is before the\n   * child.\n   * @param trackStartLevel the flame chart level from which the events will\n   * be appended.\n   * @param appender the track that the trace events belong to.\n   * @param eventAppendedCallback an optional function called after the\n   * event has been added to the timeline data. This allows the caller\n   * to know f.e. the position of the event in the entry data. Use this\n   * hook to customize the data after it has been appended, f.e. to add\n   * decorations to a set of the entries.\n   * @returns the next level after the last occupied by the appended these\n   * trace events (the first available level to append next track).\n   */\n  appendEventsAtLevel<T extends Trace.Types.Events.Event>(\n      events: readonly T[], trackStartLevel: number, appender: TrackAppender,\n      eventAppendedCallback?: (event: T, index: number) => void): number {\n    const lastTimestampByLevel: LastTimestampByLevel = [];\n    for (let i = 0; i < events.length; ++i) {\n      const event = events[i];\n      if (!entryIsVisibleInTimeline(event, this.#parsedTrace)) {\n        continue;\n      }\n\n      const level = getEventLevel(event, lastTimestampByLevel);\n      const index = this.appendEventAtLevel(event, trackStartLevel + level, appender);\n      eventAppendedCallback?.(event, index);\n    }\n\n    this.#legacyEntryTypeByLevel.length = trackStartLevel + lastTimestampByLevel.length;\n    this.#legacyEntryTypeByLevel.fill(EntryType.TRACK_APPENDER, trackStartLevel);\n    return trackStartLevel + lastTimestampByLevel.length;\n  }\n\n  /**\n   * Gets the all track appenders that have been set to be visible.\n   */\n  allVisibleTrackAppenders(): TrackAppender[] {\n    return this.#allTrackAppenders.filter(track => this.#visibleTrackNames.has(track.appenderName));\n  }\n\n  allThreadAppendersByProcess(): Map<Trace.Types.Events.ProcessID, ThreadAppender[]> {\n    const appenders = this.allVisibleTrackAppenders();\n    const result = new Map<Trace.Types.Events.ProcessID, ThreadAppender[]>();\n    for (const appender of appenders) {\n      if (!(appender instanceof ThreadAppender)) {\n        continue;\n      }\n      const existing = result.get(appender.processId()) ?? [];\n      existing.push(appender);\n      result.set(appender.processId(), existing);\n    }\n    return result;\n  }\n\n  getDrawOverride(event: Trace.Types.Events.Event, level: number): DrawOverride|undefined {\n    const track = this.#trackForLevel.get(level);\n    if (!track) {\n      throw new Error('Track not found for level');\n    }\n    return track.getDrawOverride?.(event);\n  }\n\n  /**\n   * Returns the color an event is shown with in the timeline.\n   */\n  colorForEvent(event: Trace.Types.Events.Event, level: number): string {\n    const track = this.#trackForLevel.get(level);\n    if (!track) {\n      throw new Error('Track not found for level');\n    }\n    return track.colorForEvent(event);\n  }\n  /**\n   * Returns the title an event is shown with in the timeline.\n   */\n  titleForEvent(event: Trace.Types.Events.Event, level: number): string {\n    const track = this.#trackForLevel.get(level);\n    if (!track) {\n      throw new Error('Track not found for level');\n    }\n\n    // Historically all tracks would have a titleForEvent() method. However a\n    // lot of these were duplicated so we worked on removing them in favour of\n    // the EntryName.nameForEntry method called below (see crbug.com/365047728).\n    // However, sometimes an appender needs to customise the titles slightly;\n    // for example the LayoutShiftsTrackAppender does not show any titles as we\n    // use diamonds to represent layout shifts.\n    // So whilst we expect most appenders to not define this method, we do\n    // allow appenders to override it.\n    if (track.titleForEvent) {\n      return track.titleForEvent(event);\n    }\n    return TimelineUtils.EntryName.nameForEntry(event, this.#parsedTrace);\n  }\n  /**\n   * Returns the info shown when an event in the timeline is hovered.\n   */\n  popoverInfo(event: Trace.Types.Events.Event, level: number): PopoverInfo {\n    const track = this.#trackForLevel.get(level);\n    if (!track) {\n      throw new Error('Track not found for level');\n    }\n\n    // Defaults here, though tracks may chose to redefine title/formattedTime\n    const info: PopoverInfo = {\n      title: this.titleForEvent(event, level),\n      formattedTime: getDurationString(event.dur),\n      warningElements: TimelineComponents.DetailsView.buildWarningElementsForEvent(event, this.#parsedTrace),\n      additionalElements: [],\n      url: null,\n    };\n\n    // If the track defines its own popoverInfo(), it'll update values within\n    if (track.setPopoverInfo) {\n      track.setPopoverInfo(event, info);\n    }\n\n    // If there's a url associated, add into additionalElements\n    const url = URL.parse(\n        info.url ?? TimelineUtils.SourceMapsResolver.SourceMapsResolver.resolvedURLForEntry(this.#parsedTrace, event) ??\n        '');\n    if (url) {\n      const MAX_PATH_LENGTH = 45;\n      const path = Platform.StringUtilities.trimMiddle(url.href.replace(url.origin, ''), MAX_PATH_LENGTH);\n      const urlElems = document.createElement('div');\n      urlElems.createChild('span', 'popoverinfo-url-path').textContent = path;\n      const entity = this.#entityMapper ? this.#entityMapper.entityForEvent(event) : null;\n      // Include entity with origin if it's non made-up entity, otherwise there'd be\n      // repetition with the origin.\n      const originWithEntity = TimelineUtils.Helpers.formatOriginWithEntity(url, entity);\n      urlElems.createChild('span', 'popoverinfo-url-origin').textContent = `(${originWithEntity})`;\n      info.additionalElements.push(urlElems);\n    }\n\n    return info;\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport {buildGroupStyle, buildTrackHeader, getDurationString} from './AppenderUtils.js';\nimport {\n  type CompatibilityTracksAppender,\n  type PopoverInfo,\n  type TrackAppender,\n  type TrackAppenderName,\n  VisualLoggingTrackName,\n} from './CompatibilityTracksAppender.js';\nimport * as Extensions from './extensions/extensions.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  customTrackDescription: 'This is a custom track added by a third party.',\n  /**\n   * @description The name of a track, which is a horizontal division of the timeline, synonym with \"swimlane\".\n   * @example {A track name} PH1\n   */\n  customTrackName: '{PH1} — Custom track',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/ExtensionTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ExtensionTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'Extension';\n\n  #extensionTopLevelTrack: Trace.Types.Extensions.ExtensionTrackData;\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  constructor(\n      compatibilityBuilder: CompatibilityTracksAppender, extensionTracks: Trace.Types.Extensions.ExtensionTrackData) {\n    this.#extensionTopLevelTrack = extensionTracks;\n    this.#compatibilityBuilder = compatibilityBuilder;\n  }\n\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean): number {\n    const totalEntryCount =\n        Object.values(this.#extensionTopLevelTrack.entriesByTrack).reduce((prev, current) => current.length + prev, 0);\n    if (totalEntryCount === 0) {\n      return trackStartLevel;\n    }\n    this.#appendTopLevelHeaderAtLevel(trackStartLevel, expanded);\n    return this.#appendExtensionTrackData(trackStartLevel);\n  }\n\n  /**\n   * Appends the top level header for a track. Extension entries can be\n   * added to tracks or sub-tracks. In the former case, the top level\n   * header corresponds to the track name, in the latter it corresponds\n   * to the track group name.\n   */\n  #appendTopLevelHeaderAtLevel(currentLevel: number, expanded?: boolean): void {\n    const style = buildGroupStyle({shareHeaderLine: false, collapsible: true});\n    const headerTitle = i18nString(UIStrings.customTrackName, {PH1: this.#extensionTopLevelTrack.name});\n    const jsLogContext = this.#extensionTopLevelTrack.name === '🅰️ Angular' ? VisualLoggingTrackName.ANGULAR_TRACK :\n                                                                             VisualLoggingTrackName.EXTENSION;\n    const group = buildTrackHeader(\n        jsLogContext, currentLevel, headerTitle, style,\n        /* selectable= */ true, expanded);\n    group.description = i18nString(UIStrings.customTrackDescription);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  /**\n   * Appends the second level header for a grouped track, which\n   * corresponds to the track name itself, instead of the track name.\n   */\n  #appendSecondLevelHeader(trackStartLevel: number, headerTitle: string): void {\n    const style = buildGroupStyle({shareHeaderLine: false, padding: 2, nestingLevel: 1, collapsible: true});\n    const group = buildTrackHeader(\n        VisualLoggingTrackName.EXTENSION, trackStartLevel, headerTitle, style,\n        /* selectable= */ true);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  #appendExtensionTrackData(trackStartLevel: number): number {\n    let currentStartLevel = trackStartLevel;\n    for (const [trackName, entries] of Object.entries(this.#extensionTopLevelTrack.entriesByTrack)) {\n      if (this.#extensionTopLevelTrack.isTrackGroup) {\n        // Second level header is used for only sub-tracks.\n        this.#appendSecondLevelHeader(currentStartLevel, trackName);\n      }\n      currentStartLevel = this.#compatibilityBuilder.appendEventsAtLevel(entries, currentStartLevel, this);\n    }\n    return currentStartLevel;\n  }\n\n  colorForEvent(event: Trace.Types.Events.Event): string {\n    const defaultColor = ThemeSupport.ThemeSupport.instance().getComputedValue('--app-color-rendering');\n    if (!Trace.Types.Extensions.isSyntheticExtensionEntry(event)) {\n      return defaultColor;\n    }\n    return Extensions.ExtensionUI.extensionEntryColor(event);\n  }\n\n  titleForEvent(event: Trace.Types.Events.Event): string {\n    return event.name;\n  }\n\n  setPopoverInfo(event: Trace.Types.Events.Event, info: PopoverInfo): void {\n    info.title = Trace.Types.Extensions.isSyntheticExtensionEntry(event) && event.args.tooltipText ?\n        event.args.tooltipText :\n        this.titleForEvent(event);\n    info.formattedTime = getDurationString(event.dur);\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport {buildGroupStyle, buildTrackHeader} from './AppenderUtils.js';\nimport {\n  type CompatibilityTracksAppender,\n  type TrackAppender,\n  type TrackAppenderName,\n  VisualLoggingTrackName,\n} from './CompatibilityTracksAppender.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  gpu: 'GPU',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/GPUTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class GPUTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'GPU';\n\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  #parsedTrace: Readonly<Trace.Handlers.Types.ParsedTrace>;\n\n  constructor(compatibilityBuilder: CompatibilityTracksAppender, parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    this.#compatibilityBuilder = compatibilityBuilder;\n    this.#parsedTrace = parsedTrace;\n  }\n\n  /**\n   * Appends into the flame chart data the data corresponding to the\n   * GPU track.\n   * @param trackStartLevel the horizontal level of the flame chart events where\n   * the track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean|undefined): number {\n    const gpuEvents = this.#parsedTrace.GPU.mainGPUThreadTasks;\n    if (gpuEvents.length === 0) {\n      return trackStartLevel;\n    }\n    this.#appendTrackHeaderAtLevel(trackStartLevel, expanded);\n    return this.#compatibilityBuilder.appendEventsAtLevel(gpuEvents, trackStartLevel, this);\n  }\n\n  /**\n   * Adds into the flame chart data the header corresponding to the\n   * GPU track. A header is added in the shape of a group in the\n   * flame chart data. A group has a predefined style and a reference\n   * to the definition of the legacy track (which should be removed\n   * in the future).\n   * @param currentLevel the flame chart level at which the header is\n   * appended.\n   * @param expanded wether the track should be rendered expanded.\n   */\n  #appendTrackHeaderAtLevel(currentLevel: number, expanded?: boolean): void {\n    const style = buildGroupStyle({collapsible: false});\n    const group = buildTrackHeader(\n        VisualLoggingTrackName.GPU, currentLevel, i18nString(UIStrings.gpu), style, /* selectable= */ true, expanded);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  /*\n    ------------------------------------------------------------------------------------\n     The following methods  are invoked by the flame chart renderer to query features about\n     events on rendering.\n    ------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Gets the color an event added by this appender should be rendered with.\n   */\n  colorForEvent(event: Trace.Types.Events.Event): string {\n    if (!Trace.Types.Events.isGPUTask(event)) {\n      throw new Error(`Unexpected GPU Task: The event's type is '${event.name}'`);\n    }\n    return ThemeSupport.ThemeSupport.instance().getComputedValue('--app-color-painting');\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\n\nimport {buildGroupStyle, buildTrackHeader} from './AppenderUtils.js';\nimport {\n  type CompatibilityTracksAppender,\n  type PopoverInfo,\n  type TrackAppender,\n  type TrackAppenderName,\n  VisualLoggingTrackName,\n} from './CompatibilityTracksAppender.js';\nimport * as Components from './components/components.js';\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  interactions: 'Interactions',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/InteractionsTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class InteractionsTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'Interactions';\n\n  #colorGenerator: Common.Color.Generator;\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  #parsedTrace: Readonly<Trace.Handlers.Types.ParsedTrace>;\n\n  constructor(\n      compatibilityBuilder: CompatibilityTracksAppender, parsedTrace: Trace.Handlers.Types.ParsedTrace,\n      colorGenerator: Common.Color.Generator) {\n    this.#compatibilityBuilder = compatibilityBuilder;\n    this.#colorGenerator = colorGenerator;\n    this.#parsedTrace = parsedTrace;\n  }\n\n  /**\n   * Appends into the flame chart data the data corresponding to the\n   * interactions track.\n   * @param trackStartLevel the horizontal level of the flame chart events where\n   * the track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean): number {\n    if (this.#parsedTrace.UserInteractions.interactionEvents.length === 0) {\n      return trackStartLevel;\n    }\n    this.#appendTrackHeaderAtLevel(trackStartLevel, expanded);\n    return this.#appendInteractionsAtLevel(trackStartLevel);\n  }\n\n  /**\n   * Adds into the flame chart data the header corresponding to the\n   * interactions track. A header is added in the shape of a group in the\n   * flame chart data. A group has a predefined style and a reference\n   * to the definition of the legacy track (which should be removed\n   * in the future).\n   * @param currentLevel the flame chart level at which the header is\n   * appended.\n   */\n  #appendTrackHeaderAtLevel(currentLevel: number, expanded?: boolean): void {\n    const trackIsCollapsible = this.#parsedTrace.UserInteractions.interactionEvents.length > 0;\n    const style = buildGroupStyle({collapsible: trackIsCollapsible, useDecoratorsForOverview: true});\n    const group = buildTrackHeader(\n        VisualLoggingTrackName.INTERACTIONS, currentLevel, i18nString(UIStrings.interactions), style,\n        /* selectable= */ true, expanded);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  /**\n   * Adds into the flame chart data the trace events dispatched by the\n   * performance.measure API. These events are taken from the UserInteractions\n   * handler.\n   * @param currentLevel the flame chart level from which interactions will\n   * be appended.\n   * @returns the next level after the last occupied by the appended\n   * interactions (the first available level to append more data).\n   */\n  #appendInteractionsAtLevel(trackStartLevel: number): number {\n    const {interactionEventsWithNoNesting, interactionsOverThreshold} = this.#parsedTrace.UserInteractions;\n\n    const addCandyStripeToLongInteraction =\n        (event: Trace.Types.Events.SyntheticInteractionPair, index: number): void => {\n          // Each interaction that we drew that is over the INP threshold needs to be\n          // candy-striped.\n          const overThreshold = interactionsOverThreshold.has(event);\n          if (!overThreshold) {\n            return;\n          }\n          if (index !== undefined) {\n            this.#addCandyStripeAndWarningForLongInteraction(event, index);\n          }\n        };\n    // Render all top level interactions (see UserInteractionsHandler for an explanation on the nesting) onto the track.\n    const newLevel = this.#compatibilityBuilder.appendEventsAtLevel(\n        interactionEventsWithNoNesting, trackStartLevel, this, addCandyStripeToLongInteraction);\n\n    return newLevel;\n  }\n\n  #addCandyStripeAndWarningForLongInteraction(entry: Trace.Types.Events.SyntheticInteractionPair, eventIndex: number):\n      void {\n    const decorationsForEvent =\n        this.#compatibilityBuilder.getFlameChartTimelineData().entryDecorations[eventIndex] || [];\n    decorationsForEvent.push(\n        {\n          type: PerfUI.FlameChart.FlameChartDecorationType.CANDY,\n          startAtTime: Trace.Handlers.ModelHandlers.UserInteractions.LONG_INTERACTION_THRESHOLD,\n          // Interaction events have whiskers, so we do not want to candy stripe\n          // the entire duration. The box represents processing duration, so we only\n          // candystripe up to the end of processing.\n          endAtTime: entry.processingEnd,\n        },\n        {\n          type: PerfUI.FlameChart.FlameChartDecorationType.WARNING_TRIANGLE,\n          customEndTime: entry.processingEnd,\n        });\n    this.#compatibilityBuilder.getFlameChartTimelineData().entryDecorations[eventIndex] = decorationsForEvent;\n  }\n\n  /*\n    ------------------------------------------------------------------------------------\n     The following methods  are invoked by the flame chart renderer to query features about\n     events on rendering.\n    ------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Gets the color an event added by this appender should be rendered with.\n   */\n  colorForEvent(event: Trace.Types.Events.Event): string {\n    let idForColorGeneration = Utils.EntryName.nameForEntry(event, this.#parsedTrace);\n    if (Trace.Types.Events.isSyntheticInteraction(event)) {\n      // Append the ID so that we vary the colours, ensuring that two events of\n      // the same type are coloured differently.\n      idForColorGeneration += event.interactionId;\n    }\n    return this.#colorGenerator.colorForID(idForColorGeneration);\n  }\n\n  setPopoverInfo(event: Trace.Types.Events.Event, info: PopoverInfo): void {\n    if (Trace.Types.Events.isSyntheticInteraction(event)) {\n      const breakdown = new Components.InteractionBreakdown.InteractionBreakdown();\n      breakdown.entry = event;\n      info.additionalElements.push(breakdown);\n    }\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as ComponentHelpers from '../../ui/components/helpers/helpers.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport {buildGroupStyle, buildTrackHeader} from './AppenderUtils.js';\nimport {\n  type CompatibilityTracksAppender,\n  type DrawOverride,\n  type PopoverInfo,\n  type TrackAppender,\n  type TrackAppenderName,\n  VisualLoggingTrackName,\n} from './CompatibilityTracksAppender.js';\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  layoutShifts: 'Layout shifts',\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  layoutShiftCluster: 'Layout shift cluster',\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  layoutShift: 'Layout shift',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/LayoutShiftsTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// Bit of a hack: LayoutShifts are instant events, so have no duration. But\n// OPP doesn't do well at making tiny events easy to spot and click. So we\n// set it to a small duration so that the user is able to see and click\n// them more easily. Long term we will explore a better UI solution to\n// allow us to do this properly and not hack around it.\n// TODO: Delete this once the new Layout Shift UI ships out of the TIMELINE_LAYOUT_SHIFT_DETAILS experiment\nexport const LAYOUT_SHIFT_SYNTHETIC_DURATION = Trace.Types.Timing.Micro(5_000);\n\nexport class LayoutShiftsTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'LayoutShifts';\n\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  #parsedTrace: Readonly<Trace.Handlers.Types.ParsedTrace>;\n\n  constructor(compatibilityBuilder: CompatibilityTracksAppender, parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    this.#compatibilityBuilder = compatibilityBuilder;\n    this.#parsedTrace = parsedTrace;\n  }\n\n  /**\n   * Appends into the flame chart data the data corresponding to the\n   * layout shifts track.\n   * @param trackStartLevel the horizontal level of the flame chart events where\n   * the track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean): number {\n    if (this.#parsedTrace.LayoutShifts.clusters.length === 0) {\n      return trackStartLevel;\n    }\n    this.#appendTrackHeaderAtLevel(trackStartLevel, expanded);\n    return this.#appendLayoutShiftsAtLevel(trackStartLevel);\n  }\n\n  /**\n   * Adds into the flame chart data the header corresponding to the\n   * layout shifts track. A header is added in the shape of a group in the\n   * flame chart data. A group has a predefined style and a reference\n   * to the definition of the legacy track (which should be removed\n   * in the future).\n   * @param currentLevel the flame chart level at which the header is\n   * appended.\n   */\n  #appendTrackHeaderAtLevel(currentLevel: number, expanded?: boolean): void {\n    const style = buildGroupStyle({collapsible: false});\n    const group = buildTrackHeader(\n        VisualLoggingTrackName.LAYOUT_SHIFTS, currentLevel, i18nString(UIStrings.layoutShifts), style,\n        /* selectable= */ true, expanded);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  /**\n   * Adds into the flame chart data all the layout shifts. These are taken from\n   * the clusters that are collected in the LayoutShiftsHandler.\n   * @param currentLevel the flame chart level from which layout shifts will\n   * be appended.\n   * @returns the next level after the last occupied by the appended\n   * layout shifts (the first available level to append more data).\n   */\n  #appendLayoutShiftsAtLevel(currentLevel: number): number {\n    const allClusters = this.#parsedTrace.LayoutShifts.clusters;\n    this.#compatibilityBuilder.appendEventsAtLevel(allClusters, currentLevel, this);\n\n    const allLayoutShifts = this.#parsedTrace.LayoutShifts.clusters.flatMap(cluster => cluster.events);\n    void this.preloadScreenshots(allLayoutShifts);\n    return this.#compatibilityBuilder.appendEventsAtLevel(allLayoutShifts, currentLevel, this);\n  }\n\n  /*\n    ------------------------------------------------------------------------------------\n     The following methods  are invoked by the flame chart renderer to query features about\n     events on rendering.\n    ------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Gets the color an event added by this appender should be rendered with.\n   */\n  colorForEvent(event: Trace.Types.Events.Event): string {\n    const renderingColor = ThemeSupport.ThemeSupport.instance().getComputedValue('--app-color-rendering');\n    if (Trace.Types.Events.isSyntheticLayoutShiftCluster(event)) {\n      const parsedColor = Common.Color.parse(renderingColor);\n      if (parsedColor) {\n        const colorWithAlpha = parsedColor.setAlpha(0.5).asString(Common.Color.Format.RGBA);\n        return colorWithAlpha;\n      }\n    }\n    return renderingColor;\n  }\n\n  setPopoverInfo(event: Trace.Types.Events.Event, info: PopoverInfo): void {\n    const score = Trace.Types.Events.isSyntheticLayoutShift(event) ? event.args.data?.weighted_score_delta ?? 0 :\n        Trace.Types.Events.isSyntheticLayoutShiftCluster(event)    ? event.clusterCumulativeScore :\n                                                                     -1;\n    // Score isn't a duration, but the UI works anyhow.\n    info.formattedTime = score.toFixed(4);\n    info.title = Trace.Types.Events.isSyntheticLayoutShift(event) ? i18nString(UIStrings.layoutShift) :\n        Trace.Types.Events.isSyntheticLayoutShiftCluster(event)   ? i18nString(UIStrings.layoutShiftCluster) :\n                                                                    event.name;\n\n    if (Trace.Types.Events.isSyntheticLayoutShift(event)) {\n      // Screenshots are max 500x500 naturally, but on a laptop in dock-to-right, 500px tall usually doesn't fit.\n      // In the future, we may investigate a way to dynamically scale this tooltip content per available space.\n      const maxSize = new UI.Geometry.Size(510, 400);\n      const vizElem = LayoutShiftsTrackAppender.createShiftViz(event, this.#parsedTrace, maxSize);\n      if (vizElem) {\n        info.additionalElements.push(vizElem);\n      }\n    }\n  }\n\n  getDrawOverride(event: Trace.Types.Events.Event): DrawOverride|undefined {\n    if (Trace.Types.Events.isSyntheticLayoutShift(event)) {\n      const score = event.args.data?.weighted_score_delta || 0;\n\n      // `buffer` is how much space is between the actual diamond shape and the\n      // edge of its select box. The select box will have a constant size\n      // so a larger `buffer` will create a smaller diamond.\n      //\n      // This logic will scale the size of the diamond based on the layout shift score.\n      // A LS score of >=0.1 will create a diamond of maximum size\n      // A LS score of ~0 will create a diamond of minimum size (exactly 0 should not happen in practice)\n      const bufferScale = 1 - Math.min(score / 0.10, 1);\n\n      return (context, x, y, _width, levelHeight, _, transformColor) => {\n        // levelHeight is 17px, so this math translates to a minimum diamond size of 5.6px tall.\n        const maxBuffer = levelHeight / 3;\n        const buffer = bufferScale * maxBuffer;\n\n        const boxSize = levelHeight;\n        const halfSize = boxSize / 2;\n        context.save();\n        context.beginPath();\n        context.moveTo(x, y + buffer);\n        context.lineTo(x + halfSize - buffer, y + halfSize);\n        context.lineTo(x, y + levelHeight - buffer);\n        context.lineTo(x - halfSize + buffer, y + halfSize);\n        context.closePath();\n        context.fillStyle = transformColor(this.colorForEvent(event));\n\n        context.fill();\n        context.restore();\n        return {\n          x: x - halfSize,\n          width: boxSize,\n        };\n      };\n    }\n    if (Trace.Types.Events.isSyntheticLayoutShiftCluster(event)) {\n      return (context, x, y, width, levelHeight, _, transformColor) => {\n        const barHeight = levelHeight * 0.2;\n        const barY = y + (levelHeight - barHeight) / 2 + 0.5;\n        context.fillStyle = transformColor(this.colorForEvent(event));\n        context.fillRect(x, barY, width - 0.5, barHeight - 1);\n        return {x, width, z: -1};\n      };\n    }\n    return;\n  }\n\n  preloadScreenshots(events: Trace.Types.Events.SyntheticLayoutShift[]): Promise<Array<void|undefined>> {\n    const screenshotsToLoad = new Set<Trace.Types.Events.LegacySyntheticScreenshot|Trace.Types.Events.Screenshot>();\n    for (const event of events) {\n      const shots = event.parsedData.screenshots;\n      shots.before && screenshotsToLoad.add(shots.before);\n      shots.after && screenshotsToLoad.add(shots.after);\n    }\n\n    const screenshots = Array.from(screenshotsToLoad);\n    return Utils.ImageCache.preload(screenshots);\n  }\n\n  titleForEvent(_event: Trace.Types.Events.Event): string {\n    /**\n     * This method defines the titles drawn on the track for the events in this\n     * appender. In the case of the Layout Shifts, we do not draw any titles. We\n     * draw layout shifts which are represented as diamonds, and clusters, which\n     * are represented as the purple lines through the diamonds. We do not want\n     * to put any text on top of these, hence overriding this method to return\n     * the empty string.\n     */\n    return '';\n  }\n\n  static createShiftViz(\n      event: Trace.Types.Events.SyntheticLayoutShift, parsedTrace: Trace.Handlers.Types.ParsedTrace,\n      maxSize: UI.Geometry.Size): HTMLElement|undefined {\n    const screenshots = event.parsedData.screenshots;\n    const {viewportRect, devicePixelRatio: dpr} = parsedTrace.Meta;\n    const vizContainer = document.createElement('div');\n    vizContainer.classList.add('layout-shift-viz');\n\n    const beforeImg = screenshots.before && Utils.ImageCache.getOrQueue(screenshots.before);\n    const afterImg = screenshots.after && Utils.ImageCache.getOrQueue(screenshots.after);\n\n    if (!beforeImg || !afterImg || !viewportRect || dpr === undefined) {\n      return;\n    }\n\n    /** 1 of 3 scaling factors.\n     * The Layout Instability API in Blink, which reports the LayoutShift trace events, is not based on CSS pixels but\n     * physical pixels. As such the values in the impacted_nodes field need to be normalized to CSS units in order to\n     * map them to the viewport dimensions, which we get in CSS pixels. We do that by dividing the values by the devicePixelRatio.\n     * See https://crbug.com/1300309\n     */\n    const toCssPixelRect = (rect: Trace.Types.Events.TraceRect): DOMRect => {\n      return new DOMRect(rect[0] / dpr, rect[1] / dpr, rect[2] / dpr, rect[3] / dpr);\n    };\n\n    // 2 of 3 scaling factors. Turns CSS pixels into pixels relative to the size of the screenshot image's natural size.\n    const screenshotImageScaleFactor =\n        Math.min(beforeImg.naturalWidth / viewportRect.width, beforeImg.naturalHeight / viewportRect.height, 1);\n\n    // 3 of 3 scaling factors. We can constrain this UI by a maxSize in case we want it smaller.\n    // If this is being size constrained, it needs to be done in JS (rather than css max-width, etc)....\n    // That's because this function is complete before it's added to the DOM.. so we can't query offsetHeight for its resolved size…\n    const maxSizeScaleFactor =\n        Math.min(maxSize.width / beforeImg.naturalWidth, maxSize.height / beforeImg.naturalHeight, 1);\n    for (const elem of [vizContainer, afterImg, beforeImg]) {\n      elem.style.width = `${beforeImg.naturalWidth * maxSizeScaleFactor}px`;\n      elem.style.height = `${beforeImg.naturalHeight * maxSizeScaleFactor}px`;\n    }\n\n    const beforeRects = event.args.data?.impacted_nodes?.map(node => toCssPixelRect(node.old_rect)) ?? [];\n    const afterRects = event.args.data?.impacted_nodes?.map(node => toCssPixelRect(node.new_rect)) ?? [];\n\n    function startVizAnimation(): void {\n      if (!beforeImg || !afterImg) {\n        return;\n      }\n\n      // If image is reused, drop existing anims\n      [beforeImg, afterImg].flatMap(img => img.getAnimations()).forEach(a => a.cancel());\n\n      const easing = 'ease-out';\n      const vizAnimOpts: KeyframeAnimationOptions = {\n        duration: 3000,\n        iterations: Infinity,\n        fill: 'forwards',\n        easing,\n      };\n      // Using keyframe offsets to add \"delay\" to both the start and the end.\n      // https://drafts.csswg.org/web-animations-1/#:~:text=Keyframe%20offsets%20can%20be%20specified%20using%20either%20form%20as%20illustrated%20below%3A\n      // Animate the \"after\" screenshot's opacity in.\n      afterImg.animate({opacity: [0, 0, 1, 1, 1], easing}, vizAnimOpts);\n\n      const getRectPosition = (rect: DOMRect): Keyframe => ({\n        left: `${rect.x * maxSizeScaleFactor * screenshotImageScaleFactor}px`,\n        top: `${rect.y * maxSizeScaleFactor * screenshotImageScaleFactor}px`,\n        width: `${rect.width * maxSizeScaleFactor * screenshotImageScaleFactor}px`,\n        height: `${rect.height * maxSizeScaleFactor * screenshotImageScaleFactor}px`,\n        opacity: 0.7,\n        outlineWidth: '1px',\n        easing,\n      });\n\n      // Create and position individual rects representing each impacted_node within a shift\n      beforeRects.forEach((beforeRect, i) => {\n        const afterRect = afterRects[i];\n        const rectEl = document.createElement('div');\n        rectEl.classList.add('layout-shift-viz-rect');\n        vizContainer.appendChild(rectEl);\n\n        let beforePos = getRectPosition(beforeRect);\n        let afterPos = getRectPosition(afterRect);\n        afterPos.opacity = 0.4;\n\n        // Edge case: if either before or after is 0x0x0x0, then we'll fade it in/out in the same location.\n        if ([beforeRect.width, beforeRect.height, beforeRect.x, beforeRect.y].every(v => v === 0)) {\n          beforePos = {...afterPos};\n          beforePos.opacity = '0';\n        }\n        if ([afterRect.width, afterRect.height, afterRect.x, afterRect.y].every(v => v === 0)) {\n          afterPos = {...beforePos};\n          afterPos.opacity = '0';\n        }\n\n        // Keep these keyframe offsets sync'd with other animate() ones above.\n        // The 4px outline slightly pulses the rect so it's easier to distinguish\n        rectEl.animate([beforePos, beforePos, {...afterPos, outlineWidth: '4px'}, afterPos, afterPos], vizAnimOpts);\n      });\n    }\n\n    // If not done within the render lifecycle, getAnimations() falsely returns [] which allows animations to pile up on the same screenshot\n    void ComponentHelpers.ScheduledRender.scheduleRender(vizContainer, () => startVizAnimation());\n\n    vizContainer.append(beforeImg, afterImg);\n    return vizContainer;\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\n\nimport {\n  addDecorationToEvent,\n  buildGroupStyle,\n  buildTrackHeader,\n  getDurationString,\n} from './AppenderUtils.js';\nimport {\n  type CompatibilityTracksAppender,\n  entryIsVisibleInTimeline,\n  type PopoverInfo,\n  type TrackAppender,\n  type TrackAppenderName,\n  VisualLoggingTrackName,\n} from './CompatibilityTracksAppender.js';\nimport * as ModificationsManager from './ModificationsManager.js';\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   * @description Text shown for an entry in the flame chart that is ignored because it matches\n   * a predefined ignore list.\n   * @example {/analytics\\.js$} rule\n   */\n  onIgnoreList: 'On ignore list ({rule})',\n  /**\n   * @description Refers to the \"Main frame\", meaning the top level frame. See https://www.w3.org/TR/html401/present/frames.html\n   * @example{example.com} PH1\n   */\n  mainS: 'Main — {PH1}',\n  /**\n   * @description Refers to the main thread of execution of a program. See https://developer.mozilla.org/en-US/docs/Glossary/Main_thread\n   */\n  main: 'Main',\n  /**\n   * @description Refers to any frame in the page. See https://www.w3.org/TR/html401/present/frames.html\n   * @example {https://example.com} PH1\n   */\n  frameS: 'Frame — {PH1}',\n  /**\n   *@description A web worker in the page. See https://developer.mozilla.org/en-US/docs/Web/API/Worker\n   *@example {https://google.com} PH1\n   */\n  workerS: '`Worker` — {PH1}',\n  /**\n   *@description A web worker in the page. See https://developer.mozilla.org/en-US/docs/Web/API/Worker\n   *@example {FormatterWorker} PH1\n   *@example {https://google.com} PH2\n   */\n  workerSS: '`Worker`: {PH1} — {PH2}',\n  /**\n   *@description Label for a web worker exclusively allocated for a purpose.\n   */\n  dedicatedWorker: 'Dedicated `Worker`',\n  /**\n   *@description A generic name given for a thread running in the browser (sequence of programmed instructions).\n   * The placeholder is an enumeration given to the thread.\n   *@example {1} PH1\n   */\n  threadS: 'Thread {PH1}',\n  /**\n   *@description Rasterization in computer graphics.\n   */\n  raster: 'Raster',\n  /**\n   *@description Threads used for background tasks.\n   */\n  threadPool: 'Thread pool',\n  /**\n   *@description Name for a thread that rasterizes graphics in a website.\n   *@example {2} PH1\n   */\n  rasterizerThreadS: 'Rasterizer thread {PH1}',\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   *@example {2} PH1\n   */\n  threadPoolThreadS: 'Thread pool worker {PH1}',\n  /**\n   *@description Title of a bidder auction worklet with known URL in the timeline flame chart of the Performance panel\n   *@example {https://google.com} PH1\n   */\n  bidderWorkletS: 'Bidder Worklet — {PH1}',\n  /**\n   *@description Title of a bidder auction worklet in the timeline flame chart of the Performance panel with an unknown URL\n   */\n  bidderWorklet: 'Bidder Worklet',\n\n  /**\n   *@description Title of a seller auction worklet in the timeline flame chart of the Performance panel with an unknown URL\n   */\n  sellerWorklet: 'Seller Worklet',\n\n  /**\n   *@description Title of an auction worklet in the timeline flame chart of the Performance panel with an unknown URL\n   */\n  unknownWorklet: 'Auction Worklet',\n\n  /**\n   *@description Title of control thread of a service process for an auction worklet in the timeline flame chart of the Performance panel with an unknown URL\n   */\n  workletService: 'Auction Worklet service',\n\n  /**\n   *@description Title of a seller auction worklet with known URL in the timeline flame chart of the Performance panel\n   *@example {https://google.com} PH1\n   */\n  sellerWorkletS: 'Seller Worklet — {PH1}',\n\n  /**\n   *@description Title of an auction worklet with known URL in the timeline flame chart of the Performance panel\n   *@example {https://google.com} PH1\n   */\n  unknownWorkletS: 'Auction Worklet — {PH1}',\n\n  /**\n   *@description Title of control thread of a service process for an auction worklet with known URL in the timeline flame chart of the Performance panel\n   * @example {https://google.com} PH1\n   */\n  workletServiceS: 'Auction Worklet service — {PH1}',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/ThreadAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// This appender is only triggered when the Renderer handler is run. At\n// the moment this only happens in the basic component server example.\n// In the future, once this appender fully supports the behaviour of the\n// old engine's thread/sync tracks we can always run it by enabling the\n// Renderer and Samples handler by default.\nexport class ThreadAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'Thread';\n\n  #colorGenerator: Common.Color.Generator;\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace;\n\n  #entries: readonly Trace.Types.Events.Event[] = [];\n  #tree: Trace.Helpers.TreeHelpers.TraceEntryTree;\n  #processId: Trace.Types.Events.ProcessID;\n  #threadId: Trace.Types.Events.ThreadID;\n  #threadDefaultName: string;\n  #expanded = false;\n  #headerAppended = false;\n  readonly threadType: Trace.Handlers.Threads.ThreadType = Trace.Handlers.Threads.ThreadType.MAIN_THREAD;\n  readonly isOnMainFrame: boolean;\n  #showAllEventsEnabled = Root.Runtime.experiments.isEnabled('timeline-show-all-events');\n  #url = '';\n  #headerNestingLevel: number|null = null;\n  constructor(\n      compatibilityBuilder: CompatibilityTracksAppender, parsedTrace: Trace.Handlers.Types.ParsedTrace,\n      processId: Trace.Types.Events.ProcessID, threadId: Trace.Types.Events.ThreadID, threadName: string|null,\n      type: Trace.Handlers.Threads.ThreadType, entries: readonly Trace.Types.Events.Event[],\n      tree: Trace.Helpers.TreeHelpers.TraceEntryTree) {\n    this.#compatibilityBuilder = compatibilityBuilder;\n    // TODO(crbug.com/1456706):\n    // The values for this color generator have been taken from the old\n    // engine to keep the colors the same after the migration. This\n    // generator is used here to create colors for js frames (profile\n    // calls) in the flamechart by hashing the script's url. We might\n    // need to reconsider this generator when migrating to GM3 colors.\n    this.#colorGenerator =\n        new Common.Color.Generator({min: 30, max: 330, count: undefined}, {min: 50, max: 80, count: 3}, 85);\n    // Add a default color for call frames with no url.\n    this.#colorGenerator.setColorForID('', '#f2ecdc');\n    this.#parsedTrace = parsedTrace;\n    this.#processId = processId;\n    this.#threadId = threadId;\n\n    if (!entries || !tree) {\n      throw new Error(`Could not find data for thread with id ${threadId} in process with id ${processId}`);\n    }\n    this.#entries = entries;\n    this.#tree = tree;\n    this.#threadDefaultName = threadName || i18nString(UIStrings.threadS, {PH1: threadId});\n    this.isOnMainFrame = Boolean(this.#parsedTrace.Renderer?.processes.get(processId)?.isOnMainFrame);\n    this.threadType = type;\n    // AuctionWorklets are threads, so we re-use this appender rather than\n    // duplicate it, but we change the name because we want to render these\n    // lower down than other threads.\n    if (this.#parsedTrace.AuctionWorklets.worklets.has(processId)) {\n      this.appenderName = 'Thread_AuctionWorklet';\n    }\n    this.#url = this.#parsedTrace.Renderer?.processes.get(this.#processId)?.url || '';\n  }\n\n  processId(): Trace.Types.Events.ProcessID {\n    return this.#processId;\n  }\n\n  threadId(): Trace.Types.Events.ThreadID {\n    return this.#threadId;\n  }\n\n  /**\n   * Appends into the flame chart data the data corresponding to the\n   * this thread.\n   * @param trackStartLevel the horizontal level of the flame chart events where\n   * the track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(trackStartLevel: number, expanded = false): number {\n    if (this.#entries.length === 0) {\n      return trackStartLevel;\n    }\n    this.#expanded = expanded;\n    return this.#appendTreeAtLevel(trackStartLevel);\n  }\n\n  setHeaderNestingLevel(level: number): void {\n    this.#headerNestingLevel = level;\n  }\n  /**\n   * Track header is appended only if there are events visible on it.\n   * Otherwise we don't append any track. So, instead of preemptively\n   * appending a track before appending its events, we only do so once\n   * we have detected that the track contains an event that is visible.\n   */\n  #ensureTrackHeaderAppended(trackStartLevel: number): void {\n    if (this.#headerAppended) {\n      return;\n    }\n    if (this.threadType === Trace.Handlers.Threads.ThreadType.RASTERIZER ||\n        this.threadType === Trace.Handlers.Threads.ThreadType.THREAD_POOL) {\n      this.#appendGroupedTrackHeaderAndTitle(trackStartLevel, this.threadType);\n    } else {\n      this.#appendTrackHeaderAtLevel(trackStartLevel);\n    }\n    this.#headerAppended = true;\n  }\n\n  setHeaderAppended(headerAppended: boolean): void {\n    this.#headerAppended = headerAppended;\n  }\n\n  headerAppended(): boolean {\n    return this.#headerAppended;\n  }\n\n  /**\n   * Adds into the flame chart data the header corresponding to this\n   * thread. A header is added in the shape of a group in the flame\n   * chart data. A group has a predefined style and a reference to the\n   * definition of the legacy track (which should be removed in the\n   * future).\n   * @param currentLevel the flame chart level at which the header is\n   * appended.\n   */\n  #appendTrackHeaderAtLevel(currentLevel: number): void {\n    const trackIsCollapsible = this.#entries.length > 0;\n    const style = buildGroupStyle({shareHeaderLine: false, collapsible: trackIsCollapsible});\n    if (this.#headerNestingLevel !== null) {\n      style.nestingLevel = this.#headerNestingLevel;\n    }\n    const visualLoggingName = this.#visualLoggingNameForThread();\n    const group = buildTrackHeader(\n        visualLoggingName, currentLevel, this.trackName(), style, /* selectable= */ true, this.#expanded,\n        /* showStackContextMenu= */ true);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  #visualLoggingNameForThread(): VisualLoggingTrackName|null {\n    switch (this.threadType) {\n      case Trace.Handlers.Threads.ThreadType.MAIN_THREAD:\n        return this.isOnMainFrame ? VisualLoggingTrackName.THREAD_MAIN : VisualLoggingTrackName.THREAD_FRAME;\n      case Trace.Handlers.Threads.ThreadType.WORKER:\n        return VisualLoggingTrackName.THREAD_WORKER;\n      case Trace.Handlers.Threads.ThreadType.RASTERIZER:\n        return VisualLoggingTrackName.THREAD_RASTERIZER;\n      case Trace.Handlers.Threads.ThreadType.AUCTION_WORKLET:\n        return VisualLoggingTrackName.THREAD_AUCTION_WORKLET;\n      case Trace.Handlers.Threads.ThreadType.OTHER:\n        return VisualLoggingTrackName.THREAD_OTHER;\n      case Trace.Handlers.Threads.ThreadType.CPU_PROFILE:\n        return VisualLoggingTrackName.THREAD_CPU_PROFILE;\n      case Trace.Handlers.Threads.ThreadType.THREAD_POOL:\n        return VisualLoggingTrackName.THREAD_POOL;\n      default:\n        return null;\n    }\n  }\n  /**\n   * Raster threads are rendered under a single header in the\n   * flamechart. However, each thread has a unique title which needs to\n   * be added to the flamechart data.\n   */\n  #appendGroupedTrackHeaderAndTitle(\n      trackStartLevel: number,\n      threadType: Trace.Handlers.Threads.ThreadType.RASTERIZER|Trace.Handlers.Threads.ThreadType.THREAD_POOL): void {\n    const currentTrackCount = this.#compatibilityBuilder.getCurrentTrackCountForThreadType(threadType);\n    if (currentTrackCount === 0) {\n      const trackIsCollapsible = this.#entries.length > 0;\n      const headerStyle = buildGroupStyle({shareHeaderLine: false, collapsible: trackIsCollapsible});\n\n      // Don't set any jslogcontext (first argument) because this is a shared\n      // header group. Each child will have its context set.\n      const headerGroup = buildTrackHeader(\n          null, trackStartLevel, this.trackName(), headerStyle, /* selectable= */ false, this.#expanded);\n      this.#compatibilityBuilder.getFlameChartTimelineData().groups.push(headerGroup);\n    }\n\n    // Nesting is set to 1 because the track is appended inside the\n    // header for all raster threads.\n    const titleStyle = buildGroupStyle({padding: 2, nestingLevel: 1, collapsible: false});\n    const rasterizerTitle = this.threadType === Trace.Handlers.Threads.ThreadType.RASTERIZER ?\n        i18nString(UIStrings.rasterizerThreadS, {PH1: currentTrackCount + 1}) :\n        i18nString(UIStrings.threadPoolThreadS, {PH1: currentTrackCount + 1});\n\n    const visualLoggingName = this.#visualLoggingNameForThread();\n    const titleGroup = buildTrackHeader(\n        visualLoggingName, trackStartLevel, rasterizerTitle, titleStyle, /* selectable= */ true, this.#expanded);\n    this.#compatibilityBuilder.registerTrackForGroup(titleGroup, this);\n  }\n\n  trackName(): string {\n    let threadTypeLabel: string|null = null;\n    switch (this.threadType) {\n      case Trace.Handlers.Threads.ThreadType.MAIN_THREAD:\n        threadTypeLabel = this.isOnMainFrame ? i18nString(UIStrings.mainS, {PH1: this.#url}) :\n                                               i18nString(UIStrings.frameS, {PH1: this.#url});\n        break;\n      case Trace.Handlers.Threads.ThreadType.CPU_PROFILE:\n        threadTypeLabel = i18nString(UIStrings.main);\n        break;\n      case Trace.Handlers.Threads.ThreadType.WORKER:\n        threadTypeLabel = this.#buildNameForWorker();\n        break;\n      case Trace.Handlers.Threads.ThreadType.RASTERIZER:\n        threadTypeLabel = i18nString(UIStrings.raster);\n        break;\n      case Trace.Handlers.Threads.ThreadType.THREAD_POOL:\n        threadTypeLabel = i18nString(UIStrings.threadPool);\n        break;\n      case Trace.Handlers.Threads.ThreadType.OTHER:\n        break;\n      case Trace.Handlers.Threads.ThreadType.AUCTION_WORKLET:\n        threadTypeLabel = this.#buildNameForAuctionWorklet();\n        break;\n      default:\n        return Platform.assertNever(this.threadType, `Unknown thread type: ${this.threadType}`);\n    }\n    let suffix = '';\n    if (this.#parsedTrace.Meta.traceIsGeneric) {\n      suffix = suffix + ` (${this.threadId()})`;\n    }\n    return (threadTypeLabel || this.#threadDefaultName) + suffix;\n  }\n\n  getUrl(): string {\n    return this.#url;\n  }\n\n  getEntries(): readonly Trace.Types.Events.Event[] {\n    return this.#entries;\n  }\n\n  #buildNameForAuctionWorklet(): string {\n    const workletMetadataEvent = this.#parsedTrace.AuctionWorklets.worklets.get(this.#processId);\n    // We should always have this event - if we do not, we were instantiated with invalid data.\n    if (!workletMetadataEvent) {\n      return i18nString(UIStrings.unknownWorklet);\n    }\n\n    // Host could be empty - in which case we do not want to add it.\n    const host = workletMetadataEvent.host ? `https://${workletMetadataEvent.host}` : '';\n    const shouldAddHost = host.length > 0;\n\n    // For each Auction Worklet in a page there are two threads we care about on the same process.\n    // 1. The \"Worklet Service\" which is a generic helper service. This thread\n    // is always named \"auction_worklet.CrUtilityMain\".\n    //\n    // 2. The \"Seller/Bidder\" service. This thread is always named\n    // \"AuctionV8HelperThread\". The AuctionWorkets handler does the job of\n    // figuring this out for us - the metadata event it provides for each\n    // worklet process will have a `type` already set.\n    //\n    // Therefore, for this given thread, which we know is part of\n    // an AuctionWorklet process, we need to figure out if this thread is the\n    // generic service, or a seller/bidder worklet.\n    //\n    // Note that the worklet could also have the \"unknown\" type - this is not\n    // expected but implemented to prevent trace event changes causing DevTools\n    // to break with unknown worklet types.\n    const isUtilityThread = workletMetadataEvent.args.data.utilityThread.tid === this.#threadId;\n    const isBidderOrSeller = workletMetadataEvent.args.data.v8HelperThread.tid === this.#threadId;\n\n    if (isUtilityThread) {\n      return shouldAddHost ? i18nString(UIStrings.workletServiceS, {PH1: host}) : i18nString(UIStrings.workletService);\n    }\n\n    if (isBidderOrSeller) {\n      switch (workletMetadataEvent.type) {\n        case Trace.Types.Events.AuctionWorkletType.SELLER:\n          return shouldAddHost ? i18nString(UIStrings.sellerWorkletS, {PH1: host}) :\n                                 i18nString(UIStrings.sellerWorklet);\n        case Trace.Types.Events.AuctionWorkletType.BIDDER:\n          return shouldAddHost ? i18nString(UIStrings.bidderWorkletS, {PH1: host}) :\n                                 i18nString(UIStrings.bidderWorklet);\n        case Trace.Types.Events.AuctionWorkletType.UNKNOWN:\n          return shouldAddHost ? i18nString(UIStrings.unknownWorkletS, {PH1: host}) :\n                                 i18nString(UIStrings.unknownWorklet);\n        default:\n          Platform.assertNever(\n              workletMetadataEvent.type, `Unexpected Auction Worklet Type ${workletMetadataEvent.type}`);\n      }\n    }\n    // We should never reach here, but just in case!\n    return shouldAddHost ? i18nString(UIStrings.unknownWorkletS, {PH1: host}) : i18nString(UIStrings.unknownWorklet);\n  }\n\n  #buildNameForWorker(): string {\n    const url = this.#parsedTrace.Renderer?.processes.get(this.#processId)?.url || '';\n    const workerId = this.#parsedTrace.Workers.workerIdByThread.get(this.#threadId);\n    const workerURL = workerId ? this.#parsedTrace.Workers.workerURLById.get(workerId) : url;\n    // Try to create a name using the worker url if present. If not, use a generic label.\n    let workerName =\n        workerURL ? i18nString(UIStrings.workerS, {PH1: workerURL}) : i18nString(UIStrings.dedicatedWorker);\n    const workerTarget = workerId !== undefined && SDK.TargetManager.TargetManager.instance().targetById(workerId);\n    if (workerTarget) {\n      // Get the worker name from the target, which corresponds to the name\n      // assigned to the worker when it was constructed.\n      workerName = i18nString(UIStrings.workerSS, {PH1: workerTarget.name(), PH2: url});\n    }\n    return workerName;\n  }\n\n  /**\n   * Adds into the flame chart data the entries of this thread, which\n   * includes trace events and JS calls.\n   * @param currentLevel the flame chart level from which entries will\n   * be appended.\n   * @returns the next level after the last occupied by the appended\n   * entries (the first available level to append more data).\n   */\n  #appendTreeAtLevel(trackStartLevel: number): number {\n    // We can not used the tree maxDepth in the tree from the\n    // RendererHandler because ignore listing and visibility of events\n    // alter the final depth of the flame chart.\n    return this.#appendNodesAtLevel(this.#tree.roots, trackStartLevel);\n  }\n\n  /**\n   * Traverses the trees formed by the provided nodes in breadth first\n   * fashion and appends each node's entry on each iteration. As each\n   * entry is handled, a check for the its visibility or if it's ignore\n   * listed is done before appending.\n   */\n  #appendNodesAtLevel(\n      nodes: Iterable<Trace.Helpers.TreeHelpers.TraceEntryNode>, startingLevel: number,\n      parentIsIgnoredListed = false): number {\n    const invisibleEntries =\n        ModificationsManager.ModificationsManager.activeManager()?.getEntriesFilter().invisibleEntries() ?? [];\n    let maxDepthInTree = startingLevel;\n    for (const node of nodes) {\n      let nextLevel = startingLevel;\n      const entry = node.entry;\n      const entryIsIgnoreListed = Utils.IgnoreList.isIgnoreListedEntry(entry);\n      // Events' visibility is determined from their predefined styles,\n      // which is something that's not available in the engine data.\n      // Thus it needs to be checked in the appenders, but preemptively\n      // checking if there are visible events and returning early if not\n      // is potentially expensive since, in theory, we would be adding\n      // another traversal to the entries array (which could grow\n      // large). To avoid the extra cost we  add the check in the\n      // traversal we already need to append events.\n      const entryIsVisible = !invisibleEntries.includes(entry) &&\n          (entryIsVisibleInTimeline(entry, this.#parsedTrace) || this.#showAllEventsEnabled);\n      // For ignore listing support, these two conditions need to be met\n      // to not append a profile call to the flame chart:\n      // 1. It is ignore listed\n      // 2. It is NOT the bottom-most call in an ignore listed stack (a\n      //    set of chained profile calls that belong to ignore listed\n      //    URLs).\n      // This means that all of the ignore listed calls are ignored (not\n      // appended), except if it is the bottom call of an ignored stack.\n      // This is becaue to represent ignore listed stack frames, we add\n      // a flame chart entry with the length and position of the bottom\n      // frame, which is distictively marked to denote an ignored listed\n      // stack.\n      const skipEventDueToIgnoreListing = entryIsIgnoreListed && parentIsIgnoredListed;\n      if (entryIsVisible && !skipEventDueToIgnoreListing) {\n        this.#appendEntryAtLevel(entry, startingLevel);\n        nextLevel++;\n      }\n\n      const depthInChildTree = this.#appendNodesAtLevel(node.children, nextLevel, entryIsIgnoreListed);\n      maxDepthInTree = Math.max(depthInChildTree, maxDepthInTree);\n    }\n    return maxDepthInTree;\n  }\n\n  #appendEntryAtLevel(entry: Trace.Types.Events.Event, level: number): void {\n    this.#ensureTrackHeaderAppended(level);\n    const index = this.#compatibilityBuilder.appendEventAtLevel(entry, level, this);\n    this.#addDecorationsToEntry(entry, index);\n  }\n\n  #addDecorationsToEntry(entry: Trace.Types.Events.Event, index: number): void {\n    const flameChartData = this.#compatibilityBuilder.getFlameChartTimelineData();\n    if (ModificationsManager.ModificationsManager.activeManager()?.getEntriesFilter().isEntryExpandable(entry)) {\n      addDecorationToEvent(\n          flameChartData, index, {type: PerfUI.FlameChart.FlameChartDecorationType.HIDDEN_DESCENDANTS_ARROW});\n    }\n    const warnings = this.#parsedTrace.Warnings.perEvent.get(entry);\n    if (!warnings) {\n      return;\n    }\n    addDecorationToEvent(flameChartData, index, {type: PerfUI.FlameChart.FlameChartDecorationType.WARNING_TRIANGLE});\n    if (!warnings.includes('LONG_TASK')) {\n      return;\n    }\n    addDecorationToEvent(flameChartData, index, {\n      type: PerfUI.FlameChart.FlameChartDecorationType.CANDY,\n      startAtTime: Trace.Handlers.ModelHandlers.Warnings.LONG_MAIN_THREAD_TASK_THRESHOLD,\n    });\n  }\n\n  /*\n    ------------------------------------------------------------------------------------\n     The following methods  are invoked by the flame chart renderer to query features about\n     events on rendering.\n    ------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Gets the color an event added by this appender should be rendered with.\n   */\n  colorForEvent(event: Trace.Types.Events.Event): string {\n    if (this.#parsedTrace.Meta.traceIsGeneric) {\n      return event.name ? `hsl(${Platform.StringUtilities.hashCode(event.name) % 300 + 30}, 40%, 70%)` : '#ccc';\n    }\n\n    if (Trace.Types.Events.isProfileCall(event)) {\n      if (event.callFrame.functionName === '(idle)') {\n        return Utils.EntryStyles.getCategoryStyles().idle.getComputedColorValue();\n      }\n      if (event.callFrame.functionName === '(program)') {\n        return Utils.EntryStyles.getCategoryStyles().other.getComputedColorValue();\n      }\n      if (event.callFrame.scriptId === '0') {\n        // If we can not match this frame to a script, return the\n        // generic \"scripting\" color.\n        return Utils.EntryStyles.getCategoryStyles().scripting.getComputedColorValue();\n      }\n      // Otherwise, return a color created based on its URL.\n      return this.#colorGenerator.colorForID(event.callFrame.url);\n    }\n    const defaultColor =\n        Utils.EntryStyles.getEventStyle(event.name as Trace.Types.Events.Name)?.category.getComputedColorValue();\n    return defaultColor || Utils.EntryStyles.getCategoryStyles().other.getComputedColorValue();\n  }\n\n  /**\n   * Gets the title an event added by this appender should be rendered with.\n   */\n  titleForEvent(entry: Trace.Types.Events.Event): string {\n    if (Utils.IgnoreList.isIgnoreListedEntry(entry)) {\n      const rule = Utils.IgnoreList.getIgnoredReasonString(entry);\n      return i18nString(UIStrings.onIgnoreList, {rule});\n    }\n    return Utils.EntryName.nameForEntry(entry, this.#parsedTrace);\n  }\n\n  setPopoverInfo(event: Trace.Types.Events.Event, info: PopoverInfo): void {\n    if (Trace.Types.Events.isParseHTML(event)) {\n      const startLine = event.args['beginData']['startLine'];\n      const endLine = event.args['endData']?.['endLine'];\n      const eventURL = event.args['beginData']['url'] as Platform.DevToolsPath.UrlString;\n      const url = Bindings.ResourceUtils.displayNameForURL(eventURL);\n      const range = (endLine !== -1 || endLine === startLine) ? `${startLine}...${endLine}` : startLine;\n      info.title += ` - ${url} [${range}]`;\n    }\n    const selfTime = this.#parsedTrace.Renderer.entryToNode.get(event)?.selfTime;\n    info.formattedTime = getDurationString(event.dur, selfTime);\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as TimelineComponents from '../../panels/timeline/components/components.js';\n\nimport * as AnnotationHelpers from './AnnotationHelpers.js';\nimport {EntriesFilter} from './EntriesFilter.js';\nimport {EventsSerializer} from './EventsSerializer.js';\nimport type * as Overlays from './overlays/overlays.js';\n\nconst modificationsManagerByTraceIndex: ModificationsManager[] = [];\nlet activeManager: ModificationsManager|null;\n\nexport type UpdateAction =\n    'Remove'|'Add'|'UpdateLabel'|'UpdateTimeRange'|'UpdateLinkToEntry'|'EnterLabelEditState'|'LabelBringForward';\n\n// Event dispatched after an annotation was added, removed or updated.\n// The event argument is the Overlay that needs to be created,removed\n// or updated by `Overlays.ts` and the action that needs to be applied to it.\nexport class AnnotationModifiedEvent extends Event {\n  static readonly eventName = 'annotationmodifiedevent';\n\n  constructor(public overlay: Overlays.Overlays.TimelineOverlay, public action: UpdateAction) {\n    super(AnnotationModifiedEvent.eventName);\n  }\n}\n\ninterface ModificationsManagerData {\n  parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  traceBounds: Trace.Types.Timing.TraceWindowMicro;\n  rawTraceEvents: readonly Trace.Types.Events.Event[];\n  syntheticEvents: Trace.Types.Events.SyntheticBased[];\n  modifications?: Trace.Types.File.Modifications;\n}\n\nexport class ModificationsManager extends EventTarget {\n  #entriesFilter: EntriesFilter;\n  #timelineBreadcrumbs: TimelineComponents.Breadcrumbs.Breadcrumbs;\n  #modifications: Trace.Types.File.Modifications|null = null;\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  #eventsSerializer: EventsSerializer;\n  #overlayForAnnotation: Map<Trace.Types.File.Annotation, Overlays.Overlays.TimelineOverlay>;\n  readonly #annotationsHiddenSetting: Common.Settings.Setting<boolean>;\n\n  /**\n   * Gets the ModificationsManager instance corresponding to a trace\n   * given its index used in Model#traces. If no index is passed gets\n   * the manager instance for the last trace. If no instance is found,\n   * throws.\n   */\n  static activeManager(): ModificationsManager|null {\n    return activeManager;\n  }\n\n  static reset(): void {\n    modificationsManagerByTraceIndex.length = 0;\n    activeManager = null;\n  }\n\n  /**\n   * Initializes a ModificationsManager instance for a parsed trace or changes the active manager for an existing one.\n   * This needs to be called if and a trace has been parsed or switched to.\n   */\n  static initAndActivateModificationsManager(traceModel: Trace.TraceModel.Model, traceIndex: number):\n      ModificationsManager|null {\n    // If a manager for a given index has already been created, active it.\n    if (modificationsManagerByTraceIndex[traceIndex]) {\n      if (activeManager === modificationsManagerByTraceIndex[traceIndex]) {\n        return activeManager;\n      }\n\n      activeManager = modificationsManagerByTraceIndex[traceIndex];\n      ModificationsManager.activeManager()?.applyModificationsIfPresent();\n    }\n    const parsedTrace = traceModel.parsedTrace(traceIndex);\n    if (!parsedTrace) {\n      throw new Error('ModificationsManager was initialized without a corresponding trace data');\n    }\n    const traceBounds = parsedTrace.Meta.traceBounds;\n    const traceEvents = traceModel.rawTraceEvents(traceIndex);\n    if (!traceEvents) {\n      throw new Error('ModificationsManager was initialized without a corresponding raw trace events array');\n    }\n    const syntheticEventsManager = traceModel.syntheticTraceEventsManager(traceIndex);\n    if (!syntheticEventsManager) {\n      throw new Error('ModificationsManager was initialized without a corresponding SyntheticEventsManager');\n    }\n    const metadata = traceModel.metadata(traceIndex);\n    const newModificationsManager = new ModificationsManager({\n      parsedTrace,\n      traceBounds,\n      rawTraceEvents: traceEvents,\n      modifications: metadata?.modifications,\n      syntheticEvents: syntheticEventsManager.getSyntheticTraces(),\n    });\n    modificationsManagerByTraceIndex[traceIndex] = newModificationsManager;\n    activeManager = newModificationsManager;\n    ModificationsManager.activeManager()?.applyModificationsIfPresent();\n    return this.activeManager();\n  }\n\n  private constructor({parsedTrace, traceBounds, modifications}: ModificationsManagerData) {\n    super();\n    this.#entriesFilter = new EntriesFilter(parsedTrace);\n    // Create first breadcrumb from the initial full window\n    this.#timelineBreadcrumbs = new TimelineComponents.Breadcrumbs.Breadcrumbs(traceBounds);\n    this.#modifications = modifications || null;\n    this.#parsedTrace = parsedTrace;\n    this.#eventsSerializer = new EventsSerializer();\n    // This method is also called in SidebarAnnotationsTab, but calling this multiple times doesn't recreate the setting.\n    // Instead, after the second call, the cached setting is returned.\n    this.#annotationsHiddenSetting = Common.Settings.Settings.instance().moduleSetting('annotations-hidden');\n    // TODO: Assign annotations loaded from the trace file\n    this.#overlayForAnnotation = new Map();\n  }\n\n  getEntriesFilter(): EntriesFilter {\n    return this.#entriesFilter;\n  }\n\n  getTimelineBreadcrumbs(): TimelineComponents.Breadcrumbs.Breadcrumbs {\n    return this.#timelineBreadcrumbs;\n  }\n\n  deleteEmptyRangeAnnotations(): void {\n    for (const annotation of this.#overlayForAnnotation.keys()) {\n      if (annotation.type === 'TIME_RANGE' && annotation.label.length === 0) {\n        this.removeAnnotation(annotation);\n      }\n    }\n  }\n\n  /**\n   * Stores the annotation and creates its overlay.\n   * @returns the Overlay that gets created and associated with this annotation.\n   */\n  createAnnotation(newAnnotation: Trace.Types.File.Annotation, loadedFromFile = false):\n      Overlays.Overlays.TimelineOverlay {\n    // If a label already exists on an entry and a user is trying to create a new one, start editing an existing label instead.\n    if (newAnnotation.type === 'ENTRY_LABEL') {\n      const overlay = this.#findLabelOverlayForEntry(newAnnotation.entry);\n      if (overlay) {\n        this.dispatchEvent(new AnnotationModifiedEvent(overlay, 'EnterLabelEditState'));\n        return overlay;\n      }\n    }\n\n    // If the new annotation created was not loaded from the file, set the annotations visibility setting to true. That way we make sure\n    // the annotations are on when a new one is created.\n    if (!loadedFromFile) {\n      // Time range annotation could also be used to check the length of a selection in the timeline. Therefore, only set the annotations\n      // hidden to true if annotations label is added. This is done in OverlaysImpl.\n      if (newAnnotation.type !== 'TIME_RANGE') {\n        this.#annotationsHiddenSetting.set(false);\n      }\n    }\n    const newOverlay = this.#createOverlayFromAnnotation(newAnnotation);\n    this.#overlayForAnnotation.set(newAnnotation, newOverlay);\n    this.dispatchEvent(new AnnotationModifiedEvent(newOverlay, 'Add'));\n    return newOverlay;\n  }\n\n  linkAnnotationBetweenEntriesExists(entryFrom: Trace.Types.Events.Event, entryTo: Trace.Types.Events.Event): boolean {\n    for (const annotation of this.#overlayForAnnotation.keys()) {\n      if (annotation.type === 'ENTRIES_LINK' &&\n          ((annotation.entryFrom === entryFrom && annotation.entryTo === entryTo) ||\n           (annotation.entryFrom === entryTo && annotation.entryTo === entryFrom))) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  #findLabelOverlayForEntry(entry: Trace.Types.Events.Event): Overlays.Overlays.TimelineOverlay|null {\n    for (const [annotation, overlay] of this.#overlayForAnnotation.entries()) {\n      if (annotation.type === 'ENTRY_LABEL' && annotation.entry === entry) {\n        return overlay;\n      }\n    }\n\n    return null;\n  }\n\n  bringEntryLabelForwardIfExists(entry: Trace.Types.Events.Event): void {\n    const overlay = this.#findLabelOverlayForEntry(entry);\n    if (overlay?.type === 'ENTRY_LABEL') {\n      this.dispatchEvent(new AnnotationModifiedEvent(overlay, 'LabelBringForward'));\n    }\n  }\n\n  #createOverlayFromAnnotation(annotation: Trace.Types.File.Annotation): Overlays.Overlays.EntryLabel\n      |Overlays.Overlays.TimeRangeLabel|Overlays.Overlays.EntriesLink {\n    switch (annotation.type) {\n      case 'ENTRY_LABEL':\n        return {\n          type: 'ENTRY_LABEL',\n          entry: annotation.entry,\n          label: annotation.label,\n        };\n      case 'TIME_RANGE':\n        return {\n          type: 'TIME_RANGE',\n          label: annotation.label,\n          showDuration: true,\n          bounds: annotation.bounds,\n        };\n      case 'ENTRIES_LINK':\n        return {\n          type: 'ENTRIES_LINK',\n          state: annotation.state,\n          entryFrom: annotation.entryFrom,\n          entryTo: annotation.entryTo,\n        };\n      default:\n        Platform.assertNever(annotation, 'Overlay for provided annotation cannot be created');\n    }\n  }\n\n  removeAnnotation(removedAnnotation: Trace.Types.File.Annotation): void {\n    const overlayToRemove = this.#overlayForAnnotation.get(removedAnnotation);\n    if (!overlayToRemove) {\n      console.warn('Overlay for deleted Annotation does not exist', removedAnnotation);\n      return;\n    }\n    this.#overlayForAnnotation.delete(removedAnnotation);\n    this.dispatchEvent(new AnnotationModifiedEvent(overlayToRemove, 'Remove'));\n  }\n\n  removeAnnotationOverlay(removedOverlay: Overlays.Overlays.TimelineOverlay): void {\n    const annotationForRemovedOverlay = this.getAnnotationByOverlay(removedOverlay);\n    if (!annotationForRemovedOverlay) {\n      console.warn('Annotation for deleted Overlay does not exist', removedOverlay);\n      return;\n    }\n    this.removeAnnotation(annotationForRemovedOverlay);\n  }\n\n  updateAnnotation(updatedAnnotation: Trace.Types.File.Annotation): void {\n    const overlay = this.#overlayForAnnotation.get(updatedAnnotation);\n\n    if (overlay && AnnotationHelpers.isTimeRangeLabel(overlay) &&\n        Trace.Types.File.isTimeRangeAnnotation(updatedAnnotation)) {\n      overlay.label = updatedAnnotation.label;\n      overlay.bounds = updatedAnnotation.bounds;\n      this.dispatchEvent(new AnnotationModifiedEvent(overlay, 'UpdateTimeRange'));\n\n    } else if (\n        overlay && AnnotationHelpers.isEntriesLink(overlay) &&\n        Trace.Types.File.isEntriesLinkAnnotation(updatedAnnotation)) {\n      overlay.state = updatedAnnotation.state;\n      overlay.entryFrom = updatedAnnotation.entryFrom;\n      overlay.entryTo = updatedAnnotation.entryTo;\n      this.dispatchEvent(new AnnotationModifiedEvent(overlay, 'UpdateLinkToEntry'));\n\n    } else {\n      console.error('Annotation could not be updated');\n    }\n  }\n\n  updateAnnotationOverlay(updatedOverlay: Overlays.Overlays.TimelineOverlay): void {\n    const annotationForUpdatedOverlay = this.getAnnotationByOverlay(updatedOverlay);\n    if (!annotationForUpdatedOverlay) {\n      console.warn('Annotation for updated Overlay does not exist');\n      return;\n    }\n\n    if ((updatedOverlay.type === 'ENTRY_LABEL' && annotationForUpdatedOverlay.type === 'ENTRY_LABEL') ||\n        (updatedOverlay.type === 'TIME_RANGE' && annotationForUpdatedOverlay.type === 'TIME_RANGE')) {\n      this.#annotationsHiddenSetting.set(false);\n      annotationForUpdatedOverlay.label = updatedOverlay.label;\n      this.dispatchEvent(new AnnotationModifiedEvent(updatedOverlay, 'UpdateLabel'));\n    }\n\n    if ((updatedOverlay.type === 'ENTRIES_LINK' && annotationForUpdatedOverlay.type === 'ENTRIES_LINK')) {\n      this.#annotationsHiddenSetting.set(false);\n      annotationForUpdatedOverlay.state = updatedOverlay.state;\n    }\n  }\n\n  getAnnotationByOverlay(overlay: Overlays.Overlays.TimelineOverlay): Trace.Types.File.Annotation|null {\n    for (const [annotation, currOverlay] of this.#overlayForAnnotation.entries()) {\n      if (currOverlay === overlay) {\n        return annotation;\n      }\n    }\n    return null;\n  }\n\n  getAnnotations(): Trace.Types.File.Annotation[] {\n    return [...this.#overlayForAnnotation.keys()];\n  }\n\n  getOverlays(): Overlays.Overlays.TimelineOverlay[] {\n    return [...this.#overlayForAnnotation.values()];\n  }\n\n  applyAnnotationsFromCache(): void {\n    this.#modifications = this.toJSON();\n    // The cache is filled by applyModificationsIfPresent, so we clear\n    // it beforehand to prevent duplicate entries.\n    this.#overlayForAnnotation.clear();\n    this.#applyStoredAnnotations(this.#modifications.annotations);\n  }\n\n  /**\n   * Builds all modifications into a serializable object written into\n   * the 'modifications' trace file metadata field.\n   */\n  toJSON(): Trace.Types.File.Modifications {\n    const hiddenEntries = this.#entriesFilter.invisibleEntries()\n                              .map(entry => this.#eventsSerializer.keyForEvent(entry))\n                              .filter(entry => entry !== null);\n    const expandableEntries = this.#entriesFilter.expandableEntries()\n                                  .map(entry => this.#eventsSerializer.keyForEvent(entry))\n                                  .filter(entry => entry !== null);\n    this.#modifications = {\n      entriesModifications: {\n        hiddenEntries,\n        expandableEntries,\n      },\n      initialBreadcrumb: this.#timelineBreadcrumbs.initialBreadcrumb,\n      annotations: this.#annotationsJSON(),\n    };\n    return this.#modifications;\n  }\n\n  #annotationsJSON(): Trace.Types.File.SerializedAnnotations {\n    const annotations = this.getAnnotations();\n    const entryLabelsSerialized: Trace.Types.File.EntryLabelAnnotationSerialized[] = [];\n    const labelledTimeRangesSerialized: Trace.Types.File.TimeRangeAnnotationSerialized[] = [];\n    const linksBetweenEntriesSerialized: Trace.Types.File.EntriesLinkAnnotationSerialized[] = [];\n\n    for (let i = 0; i < annotations.length; i++) {\n      const currAnnotation = annotations[i];\n      if (Trace.Types.File.isEntryLabelAnnotation(currAnnotation)) {\n        const serializedEvent = this.#eventsSerializer.keyForEvent(currAnnotation.entry);\n        if (serializedEvent) {\n          entryLabelsSerialized.push({\n            entry: serializedEvent,\n            label: currAnnotation.label,\n          });\n        }\n      } else if (Trace.Types.File.isTimeRangeAnnotation(currAnnotation)) {\n        labelledTimeRangesSerialized.push({\n          bounds: currAnnotation.bounds,\n          label: currAnnotation.label,\n        });\n      } else if (Trace.Types.File.isEntriesLinkAnnotation(currAnnotation)) {\n        // Only save the links between entries that are fully created and have the entry that it is pointing to set\n        if (currAnnotation.entryTo) {\n          const serializedFromEvent = this.#eventsSerializer.keyForEvent(currAnnotation.entryFrom);\n          const serializedToEvent = this.#eventsSerializer.keyForEvent(currAnnotation.entryTo);\n          if (serializedFromEvent && serializedToEvent) {\n            linksBetweenEntriesSerialized.push({\n              entryFrom: serializedFromEvent,\n              entryTo: serializedToEvent,\n            });\n          }\n        }\n      }\n    }\n\n    return {\n      entryLabels: entryLabelsSerialized,\n      labelledTimeRanges: labelledTimeRangesSerialized,\n      linksBetweenEntries: linksBetweenEntriesSerialized,\n    };\n  }\n\n  applyModificationsIfPresent(): void {\n    if (!this.#modifications || !this.#modifications.annotations) {\n      return;\n    }\n\n    const hiddenEntries = this.#modifications.entriesModifications.hiddenEntries;\n    const expandableEntries = this.#modifications.entriesModifications.expandableEntries;\n\n    this.#timelineBreadcrumbs.setInitialBreadcrumbFromLoadedModifications(this.#modifications.initialBreadcrumb);\n    this.#applyEntriesFilterModifications(hiddenEntries, expandableEntries);\n    this.#applyStoredAnnotations(this.#modifications.annotations);\n  }\n\n  #applyStoredAnnotations(annotations: Trace.Types.File.SerializedAnnotations): void {\n    try {\n      // Assign annotations to an empty array if they don't exist to not\n      // break the traces that were saved before those annotations were implemented\n      const entryLabels = annotations.entryLabels ?? [];\n      entryLabels.forEach(entryLabel => {\n        this.createAnnotation(\n            {\n              type: 'ENTRY_LABEL',\n              entry: this.#eventsSerializer.eventForKey(entryLabel.entry, this.#parsedTrace),\n              label: entryLabel.label,\n            },\n            true);\n      });\n\n      const timeRanges = annotations.labelledTimeRanges ?? [];\n      timeRanges.forEach(timeRange => {\n        this.createAnnotation(\n            {\n              type: 'TIME_RANGE',\n              bounds: timeRange.bounds,\n              label: timeRange.label,\n            },\n            true);\n      });\n\n      const linksBetweenEntries = annotations.linksBetweenEntries ?? [];\n      linksBetweenEntries.forEach(linkBetweenEntries => {\n        this.createAnnotation(\n            {\n              type: 'ENTRIES_LINK',\n              state: Trace.Types.File.EntriesLinkState.CONNECTED,\n              entryFrom: this.#eventsSerializer.eventForKey(linkBetweenEntries.entryFrom, this.#parsedTrace),\n              entryTo: this.#eventsSerializer.eventForKey(linkBetweenEntries.entryTo, this.#parsedTrace),\n            },\n            true);\n      });\n    } catch (err) {\n      // This function is wrapped in a try/catch just in case we get any incoming\n      // trace files with broken event keys. Shouldn't happen of course, but if\n      // it does, we can discard all the data and then continue loading the\n      // trace, rather than have the panel entirely break. This also prevents any\n      // issue where we accidentally break the event serializer and break people\n      // loading traces; let's at least make sure they can load the panel, even\n      // if their annotations are gone.\n      console.warn('Failed to apply stored annotations', err);\n    }\n  }\n\n  #applyEntriesFilterModifications(\n      hiddenEntriesKeys: Trace.Types.File.SerializableKey[],\n      expandableEntriesKeys: Trace.Types.File.SerializableKey[]): void {\n    try {\n      const hiddenEntries = hiddenEntriesKeys.map(key => this.#eventsSerializer.eventForKey(key, this.#parsedTrace));\n      const expandableEntries =\n          expandableEntriesKeys.map(key => this.#eventsSerializer.eventForKey(key, this.#parsedTrace));\n      this.#entriesFilter.setHiddenAndExpandableEntries(hiddenEntries, expandableEntries);\n    } catch (err) {\n      console.warn('Failed to apply entriesFilter modifications', err);\n      // If there was some invalid data, let's just back out and clear it\n      // entirely. This is better than applying a subset of all the hidden\n      // entries, which could cause an odd state in the flamechart.\n      this.#entriesFilter.setHiddenAndExpandableEntries([], []);\n    }\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\n\nimport {\n  entryIsVisibleInTimeline,\n} from './CompatibilityTracksAppender.js';\n\n/**\n * This class can take in a thread that has been generated by the\n * RendererHandler and apply certain actions to it in order to modify what is\n * shown to the user. These actions can be automatically applied by DevTools or\n * applied by the user.\n *\n * Once actions are applied, the invisibleEntries() method will return the\n * entries that are invisible, and this is the list of entries that should be\n * removed before rendering the resulting thread on the timeline.\n */\nexport class EntriesFilter {\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  // Track the set of invisible entries.\n  #invisibleEntries: Trace.Types.Events.Event[] = [];\n  // List of entries whose children are hidden. This list is used to\n  // keep track of entries that should be identified in the UI as \"expandable\",\n  // since they can be clicked to reveal their hidden children.\n  #expandableEntries: Trace.Types.Events.Event[] = [];\n  // Cache for descendants of entry that have already been gathered. The descendants\n  // will never change so we can avoid running the potentially expensive search again.\n  #entryToDescendantsMap = new Map<Trace.Helpers.TreeHelpers.TraceEntryNode, Trace.Types.Events.Event[]>();\n\n  constructor(parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    this.#parsedTrace = parsedTrace;\n  }\n\n  #getEntryNode(entry: Trace.Types.Events.Event): Trace.Helpers.TreeHelpers.TraceEntryNode|undefined {\n    // The entry might be either from the Samples handler or Renderer handler. So we need to check both handlers to find\n    // the EntryNode.\n    return this.#parsedTrace.Samples.entryToNode.get(entry) ?? this.#parsedTrace.Renderer.entryToNode.get(entry);\n  }\n\n  /**\n   * Checks which actions can be applied on an entry. This allows us to only show possible actions in the Context Menu.\n   * For example, if an entry has no children, COLLAPSE_FUNCTION will not change the FlameChart, therefore there is no need to show this action as an option.\n   */\n  findPossibleActions(entry: Trace.Types.Events.Event): PerfUI.FlameChart.PossibleFilterActions {\n    const entryNode = this.#getEntryNode(entry);\n    if (!entryNode) {\n      // Invalid node was given, return no possible actions.\n      return {\n        [PerfUI.FlameChart.FilterAction.MERGE_FUNCTION]: false,\n        [PerfUI.FlameChart.FilterAction.COLLAPSE_FUNCTION]: false,\n        [PerfUI.FlameChart.FilterAction.COLLAPSE_REPEATING_DESCENDANTS]: false,\n        [PerfUI.FlameChart.FilterAction.RESET_CHILDREN]: false,\n        [PerfUI.FlameChart.FilterAction.UNDO_ALL_ACTIONS]: false,\n      };\n    }\n    const entryParent = entryNode.parent;\n    const allVisibleDescendants =\n        this.#findAllDescendantsOfNode(entryNode).filter(descendant => !this.#invisibleEntries.includes(descendant));\n    const allVisibleRepeatingDescendants = this.#findAllRepeatingDescendantsOfNext(entryNode).filter(\n        descendant => !this.#invisibleEntries.includes(descendant));\n    const allInVisibleDescendants =\n        this.#findAllDescendantsOfNode(entryNode).filter(descendant => this.#invisibleEntries.includes(descendant));\n\n    // If there are children to hide, indicate action as possible\n    const possibleActions: PerfUI.FlameChart.PossibleFilterActions = {\n      [PerfUI.FlameChart.FilterAction.MERGE_FUNCTION]: entryParent !== null,\n      [PerfUI.FlameChart.FilterAction.COLLAPSE_FUNCTION]: allVisibleDescendants.length > 0,\n      [PerfUI.FlameChart.FilterAction.COLLAPSE_REPEATING_DESCENDANTS]: allVisibleRepeatingDescendants.length > 0,\n      [PerfUI.FlameChart.FilterAction.RESET_CHILDREN]: allInVisibleDescendants.length > 0,\n      [PerfUI.FlameChart.FilterAction.UNDO_ALL_ACTIONS]: this.#invisibleEntries.length > 0,\n    };\n    return possibleActions;\n  }\n\n  /**\n   * Returns the amount of entry descendants that belong to the hidden entries array.\n   * */\n  findHiddenDescendantsAmount(entry: Trace.Types.Events.Event): number {\n    const entryNode = this.#getEntryNode(entry);\n    if (!entryNode) {\n      return 0;\n    }\n    const allDescendants = this.#findAllDescendantsOfNode(entryNode);\n    return allDescendants.filter(descendant => this.invisibleEntries().includes(descendant)).length;\n  }\n\n  /**\n   * Returns the set of entries that are invisible given the set of applied actions.\n   */\n  invisibleEntries(): Trace.Types.Events.Event[] {\n    return this.#invisibleEntries;\n  }\n\n  /**\n   * Sets hidden and expandable. Called when a trace with modifications is loaded and some entries are set as hidden and expandable.\n   * Both arrays are set together because if there is one, the other must be present too.\n   */\n  setHiddenAndExpandableEntries(\n      invisibleEntries: Trace.Types.Events.Event[], expandableEntries: Trace.Types.Events.Event[]): void {\n    this.#invisibleEntries.push(...invisibleEntries);\n    this.#expandableEntries.push(...expandableEntries);\n  }\n\n  entryIsInvisible(entry: Trace.Types.Events.Event): boolean {\n    return this.#invisibleEntries.includes(entry);\n  }\n\n  /**\n   * Returns the array of entries that have a sign indicating that entries below are hidden,\n   * and so that they can be \"expanded\" to reveal their hidden children.\n   */\n  expandableEntries(): Trace.Types.Events.Event[] {\n    return this.#expandableEntries;\n  }\n\n  /**\n   * Applies an action to hide entries or removes entries\n   * from hidden entries array depending on the action.\n   */\n  applyFilterAction(action: PerfUI.FlameChart.UserFilterAction): Trace.Types.Events.Event[] {\n    // We apply new user action to the set of all entries, and mark\n    // any that should be hidden by adding them to this set.\n    // Another approach would be to use splice() to remove items from the\n    // array, but doing this would be a mutation of the arry for every hidden\n    // event. Instead, we add entries to this set and return it as an array at the end.\n    const entriesToHide = new Set<Trace.Types.Events.Event>();\n\n    switch (action.type) {\n      case PerfUI.FlameChart.FilterAction.MERGE_FUNCTION: {\n        // The entry that was clicked on is merged into its parent. All its\n        // children remain visible, so we just have to hide the entry that was\n        // selected.\n        entriesToHide.add(action.entry);\n        // If parent node exists, add it to expandableEntries, so it would be possible to uncollapse its children.\n        const actionNode = this.#getEntryNode(action.entry) || null;\n        const parentNode = actionNode && this.#firstVisibleParentNodeForEntryNode(actionNode);\n        if (parentNode) {\n          this.#addExpandableEntry(parentNode.entry);\n        }\n        break;\n      }\n      case PerfUI.FlameChart.FilterAction.COLLAPSE_FUNCTION: {\n        // The entry itself remains visible, but all of its descendants are hidden.\n        const entryNode = this.#getEntryNode(action.entry);\n        if (!entryNode) {\n          // Invalid node was given, just ignore and move on.\n          break;\n        }\n        const allDescendants = this.#findAllDescendantsOfNode(entryNode);\n        allDescendants.forEach(descendant => entriesToHide.add(descendant));\n        this.#addExpandableEntry(action.entry);\n        break;\n      }\n      case PerfUI.FlameChart.FilterAction.COLLAPSE_REPEATING_DESCENDANTS: {\n        const entryNode = this.#getEntryNode(action.entry);\n        if (!entryNode) {\n          // Invalid node was given, just ignore and move on.\n          break;\n        }\n        const allRepeatingDescendants = this.#findAllRepeatingDescendantsOfNext(entryNode);\n        allRepeatingDescendants.forEach(descendant => entriesToHide.add(descendant));\n        if (entriesToHide.size > 0) {\n          this.#addExpandableEntry(action.entry);\n        }\n        break;\n      }\n      case PerfUI.FlameChart.FilterAction.UNDO_ALL_ACTIONS: {\n        this.#invisibleEntries = [];\n        this.#expandableEntries = [];\n        break;\n      }\n      case PerfUI.FlameChart.FilterAction.RESET_CHILDREN: {\n        this.#makeEntryChildrenVisible(action.entry);\n        break;\n      }\n      default:\n        Platform.assertNever(action.type, `Unknown EntriesFilter action: ${action.type}`);\n    }\n\n    this.#invisibleEntries.push(...entriesToHide);\n\n    return this.#invisibleEntries;\n  }\n\n  /**\n   * Add an entry to the array of entries that have a sign indicating that entries below are hidden.\n   * Also, remove all of the child entries of the new expandable entry from the expandable array. Do that because\n   * to draw the initiator from the closest visible entry, we need to get the closest entry that is\n   * marked as expandable and we do not want to get some that are hidden.\n   */\n  #addExpandableEntry(entry: Trace.Types.Events.Event): void {\n    this.#expandableEntries.push(entry);\n    const entryNode = this.#getEntryNode(entry);\n    if (!entryNode) {\n      // Invalid node was given, just ignore and move on.\n      return;\n    }\n    const allDescendants = this.#findAllDescendantsOfNode(entryNode);\n    if (allDescendants.length > 0) {\n      this.#expandableEntries = this.#expandableEntries.filter(entry => {\n        return !allDescendants.includes(entry);\n      });\n    }\n  }\n\n  firstVisibleParentEntryForEntry(entry: Trace.Types.Events.Event): Trace.Types.Events.Event|null {\n    const node = this.#getEntryNode(entry);\n    if (!node) {\n      return null;\n    }\n    const parent = this.#firstVisibleParentNodeForEntryNode(node);\n    return parent ? parent.entry : null;\n  }\n\n  // The direct parent might be hidden by other actions, therefore we look for the next visible parent.\n  #firstVisibleParentNodeForEntryNode(node: Trace.Helpers.TreeHelpers.TraceEntryNode):\n      Trace.Helpers.TreeHelpers.TraceEntryNode|null {\n    let parent = node.parent;\n    while ((parent && this.#invisibleEntries.includes(parent.entry)) ||\n           (parent && !entryIsVisibleInTimeline(parent.entry))) {\n      parent = parent.parent;\n    }\n    return parent;\n  }\n\n  #findAllDescendantsOfNode(root: Trace.Helpers.TreeHelpers.TraceEntryNode): Trace.Types.Events.Event[] {\n    const cachedDescendants = this.#entryToDescendantsMap.get(root);\n    if (cachedDescendants) {\n      return cachedDescendants;\n    }\n\n    const descendants: Trace.Types.Events.Event[] = [];\n\n    // Walk through all the descendants, starting at the root node.\n    const children: Trace.Helpers.TreeHelpers.TraceEntryNode[] = [...root.children];\n    while (children.length > 0) {\n      const childNode = children.shift();\n      if (childNode) {\n        descendants.push(childNode.entry);\n        const childNodeCachedDescendants = this.#entryToDescendantsMap.get(childNode);\n        // If the descendants of a child are cached, get them from the cache instead of iterating through them again\n        if (childNodeCachedDescendants) {\n          descendants.push(...childNodeCachedDescendants);\n        } else {\n          children.push(...childNode.children);\n        }\n      }\n    }\n\n    this.#entryToDescendantsMap.set(root, descendants);\n    return descendants;\n  }\n\n  #findAllRepeatingDescendantsOfNext(root: Trace.Helpers.TreeHelpers.TraceEntryNode): Trace.Types.Events.Event[] {\n    // Walk through all the ancestors, starting at the root node.\n    const children: Trace.Helpers.TreeHelpers.TraceEntryNode[] = [...root.children];\n    const repeatingNodes: Trace.Types.Events.Event[] = [];\n    const rootIsProfileCall = Trace.Types.Events.isProfileCall(root.entry);\n\n    while (children.length > 0) {\n      const childNode = children.shift();\n      if (childNode) {\n        const childIsProfileCall = Trace.Types.Events.isProfileCall(childNode.entry);\n        if (/* Handle SyntheticProfileCalls */ rootIsProfileCall && childIsProfileCall) {\n          const rootNodeEntry = root.entry as Trace.Types.Events.SyntheticProfileCall;\n          const childNodeEntry = childNode.entry as Trace.Types.Events.SyntheticProfileCall;\n\n          if (Trace.Helpers.SamplesIntegrator.SamplesIntegrator.framesAreEqual(\n                  rootNodeEntry.callFrame, childNodeEntry.callFrame)) {\n            repeatingNodes.push(childNode.entry);\n          }\n        } /* Handle Renderer events */ else if (!rootIsProfileCall && !childIsProfileCall) {\n          if (root.entry.name === childNode.entry.name) {\n            repeatingNodes.push(childNode.entry);\n          }\n        }\n        children.push(...childNode.children);\n      }\n    }\n\n    return repeatingNodes;\n  }\n\n  /**\n   * If an entry was selected from a link instead of clicking on it,\n   * it might be in the invisible entries array.\n   * If it is, reveal it by resetting clidren the closest expandable entry,\n   */\n  revealEntry(entry: Trace.Types.Events.Event): void {\n    const entryNode = this.#getEntryNode(entry);\n    if (!entryNode) {\n      // Invalid node was given, just ignore and move on.\n      return;\n    }\n    let closestExpandableParent = entryNode;\n    while (closestExpandableParent.parent && !this.#expandableEntries.includes(closestExpandableParent.entry)) {\n      closestExpandableParent = closestExpandableParent.parent;\n    }\n    this.#makeEntryChildrenVisible(closestExpandableParent.entry);\n  }\n\n  /**\n   * Removes all of the entry children from the\n   * invisible entries array to make them visible.\n   */\n  #makeEntryChildrenVisible(entry: Trace.Types.Events.Event): void {\n    const entryNode = this.#getEntryNode(entry);\n    if (!entryNode) {\n      // Invalid node was given, just ignore and move on.\n      return;\n    }\n    const descendants = this.#findAllDescendantsOfNode(entryNode);\n\n    /**\n     * Filter out all descendant of the node\n     * from the invisible entries list.\n     */\n    this.#invisibleEntries = this.#invisibleEntries.filter(entry => {\n      if (descendants.includes(entry)) {\n        return false;\n      }\n      return true;\n    });\n\n    /**\n     * Filter out all descentants and entry from expandable entries\n     * list to not show that some entries below those are hidden.\n     */\n    this.#expandableEntries = this.#expandableEntries.filter(iterEntry => {\n      if (descendants.includes(iterEntry) || iterEntry === entry) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  isEntryExpandable(event: Trace.Types.Events.Event): boolean {\n    return this.#expandableEntries.includes(event);\n  }\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../models/trace/trace.js';\n\nexport class EventsSerializer {\n  #modifiedProfileCallByKey = new Map<Trace.Types.File.ProfileCallKeyValues, Trace.Types.Events.SyntheticProfileCall>();\n\n  keyForEvent(event: Trace.Types.Events.Event): Trace.Types.File.SerializableKey|null {\n    if (Trace.Types.Events.isProfileCall(event)) {\n      return `${Trace.Types.File.EventKeyType.PROFILE_CALL}-${event.pid}-${event.tid}-${\n          Trace.Types.Events.SampleIndex(event.sampleIndex)}-${event.nodeId}`;\n    }\n\n    if (Trace.Types.Events.isLegacyTimelineFrame(event)) {\n      return `${Trace.Types.File.EventKeyType.LEGACY_TIMELINE_FRAME}-${event.index}`;\n    }\n\n    const rawEvents = Trace.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getRawTraceEvents();\n    const key: Trace.Types.File.SyntheticEventKey|Trace.Types.File.RawEventKey =\n        Trace.Types.Events.isSyntheticBased(event) ?\n        `${Trace.Types.File.EventKeyType.SYNTHETIC_EVENT}-${rawEvents.indexOf(event.rawSourceEvent)}` :\n        `${Trace.Types.File.EventKeyType.RAW_EVENT}-${rawEvents.indexOf(event)}`;\n    if (key.length < 3) {\n      return null;\n    }\n    return key;\n  }\n\n  eventForKey(key: Trace.Types.File.SerializableKey, parsedTrace: Trace.Handlers.Types.ParsedTrace):\n      Trace.Types.Events.Event {\n    const eventValues = Trace.Types.File.traceEventKeyToValues(key);\n\n    if (EventsSerializer.isProfileCallKey(eventValues)) {\n      return this.#getModifiedProfileCallByKeyValues(eventValues, parsedTrace);\n    }\n\n    if (EventsSerializer.isLegacyTimelineFrameKey(eventValues)) {\n      const event = parsedTrace.Frames.frames.at(eventValues.rawIndex);\n      if (!event) {\n        throw new Error(`Could not find frame with index ${eventValues.rawIndex}`);\n      }\n      return event;\n    }\n\n    if (EventsSerializer.isSyntheticEventKey(eventValues)) {\n      const syntheticEvents =\n          Trace.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getSyntheticTraces();\n      const syntheticEvent = syntheticEvents.at(eventValues.rawIndex);\n      if (!syntheticEvent) {\n        throw new Error(`Attempted to get a synthetic event from an unknown raw event index: ${eventValues.rawIndex}`);\n      }\n      return syntheticEvent;\n    }\n\n    if (EventsSerializer.isRawEventKey(eventValues)) {\n      const rawEvents = Trace.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getRawTraceEvents();\n      return rawEvents[eventValues.rawIndex];\n    }\n    throw new Error(`Unknown trace event serializable key values: ${(eventValues as unknown[]).join('-')}`);\n  }\n\n  static isProfileCallKey(key: Trace.Types.File.SerializableKeyValues): key is Trace.Types.File.ProfileCallKeyValues {\n    return key.type === Trace.Types.File.EventKeyType.PROFILE_CALL;\n  }\n  static isLegacyTimelineFrameKey(key: Trace.Types.File.SerializableKeyValues):\n      key is Trace.Types.File.LegacyTimelineFrameKeyValues {\n    return key.type === Trace.Types.File.EventKeyType.LEGACY_TIMELINE_FRAME;\n  }\n\n  static isRawEventKey(key: Trace.Types.File.SerializableKeyValues): key is Trace.Types.File.RawEventKeyValues {\n    return key.type === Trace.Types.File.EventKeyType.RAW_EVENT;\n  }\n  static isSyntheticEventKey(key: Trace.Types.File.SerializableKeyValues):\n      key is Trace.Types.File.SyntheticEventKeyValues {\n    return key.type === Trace.Types.File.EventKeyType.SYNTHETIC_EVENT;\n  }\n\n  #getModifiedProfileCallByKeyValues(\n      key: Trace.Types.File.ProfileCallKeyValues,\n      parsedTrace: Trace.Handlers.Types.ParsedTrace): Trace.Types.Events.SyntheticProfileCall {\n    const cacheResult = this.#modifiedProfileCallByKey.get(key);\n    if (cacheResult) {\n      return cacheResult;\n    }\n    const profileCallsInThread =\n        parsedTrace.Renderer.processes.get(key.processID)?.threads.get(key.threadID)?.profileCalls;\n    if (!profileCallsInThread) {\n      throw new Error(`Unknown profile call serializable key: ${(key)}`);\n    }\n\n    const match = profileCallsInThread?.find(e => {\n      return e.sampleIndex === key.sampleIndex && e.nodeId === key.protocol;\n    });\n    if (!match) {\n      throw new Error(`Unknown profile call serializable key: ${(JSON.stringify(key))}`);\n    }\n    // Cache to avoid looking up in subsequent calls.\n    this.#modifiedProfileCallByKey.set(key, match);\n    return match;\n  }\n}\n", "/*\n * Copyright (C) 2014 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport {CompatibilityTracksAppender, type DrawOverride, type TrackAppenderName} from './CompatibilityTracksAppender.js';\nimport {initiatorsDataToDraw} from './Initiators.js';\nimport {ModificationsManager} from './ModificationsManager.js';\nimport {ThreadAppender} from './ThreadAppender.js';\nimport timelineFlamechartPopoverStyles from './timelineFlamechartPopover.css.js';\nimport {FlameChartStyle, Selection} from './TimelineFlameChartView.js';\nimport {\n  selectionFromEvent,\n  selectionIsRange,\n  selectionsEqual,\n  type TimelineSelection,\n} from './TimelineSelection.js';\nimport {buildPersistedConfig, keyForTraceConfig} from './TrackConfiguration.js';\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text for rendering frames\n   */\n  frames: 'Frames',\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  idleFrame: 'Idle frame',\n  /**\n   *@description Text in Timeline Frame Chart Data Provider of the Performance panel\n   */\n  droppedFrame: 'Dropped frame',\n  /**\n   *@description Text in Timeline Frame Chart Data Provider of the Performance panel\n   */\n  partiallyPresentedFrame: 'Partially-presented frame',\n  /**\n   *@description Text for a rendering frame\n   */\n  frame: 'Frame',\n  /**\n   *@description Text for Hiding a function from the Flame Chart\n   */\n  hideFunction: 'Hide function',\n  /**\n   *@description Text for Hiding all children of a function from the Flame Chart\n   */\n  hideChildren: 'Hide children',\n  /**\n   *@description Text for Hiding all child entries that are identical to the selected entry from the Flame Chart\n   */\n  hideRepeatingChildren: 'Hide repeating children',\n  /**\n   *@description Text for remove script from ignore list from the Flame Chart\n   */\n  removeScriptFromIgnoreList: 'Remove script from ignore list',\n  /**\n   *@description Text for add script to ignore list from the Flame Chart\n   */\n  addScriptToIgnoreList: 'Add script to ignore list',\n  /**\n   *@description Text for an action that shows all of the hidden children of an entry\n   */\n  resetChildren: 'Reset children',\n  /**\n   *@description Text for an action that shows all of the hidden entries of the Flame Chart\n   */\n  resetTrace: 'Reset trace',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineFlameChartDataProvider.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class TimelineFlameChartDataProvider extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    PerfUI.FlameChart.FlameChartDataProvider {\n  private droppedFramePattern: CanvasPattern|null;\n  private partialFramePattern: CanvasPattern|null;\n  private timelineDataInternal: PerfUI.FlameChart.FlameChartTimelineData|null = null;\n  private currentLevel = 0;\n\n  private compatibilityTracksAppender: CompatibilityTracksAppender|null = null;\n  private parsedTrace: Trace.Handlers.Types.ParsedTrace|null = null;\n\n  #minimumBoundary = 0;\n  private timeSpan = 0;\n  private readonly framesGroupStyle: PerfUI.FlameChart.GroupStyle;\n  private readonly screenshotsGroupStyle: PerfUI.FlameChart.GroupStyle;\n\n  // Contains all the entries that are DRAWN onto the track. Entries that have\n  // been hidden - either by a user action, or because they aren't visible at\n  // all - will not appear in this array and it will change per-render. For\n  // example, if a user collapses an icicle in the flamechart, those entries\n  // that are now hidden will no longer be in this array.\n  // This also includes entrys that used to be special cased (e.g.\n  // TimelineFrames) that are now of type Types.Events.Event and so the old\n  // `TimelineFlameChartEntry` type has been removed in faovur of using\n  // Trace.Types.Events.Event directly. See crrev.com/c/5973695 for details.\n  private entryData: Trace.Types.Events.Event[] = [];\n\n  private entryTypeByLevel: EntryType[] = [];\n  private entryIndexToTitle: string[] = [];\n  #lastInitiatorEntryIndex = -1;\n\n  private lastSelection: Selection|null = null;\n  readonly #font = `${PerfUI.Font.DEFAULT_FONT_SIZE} ${PerfUI.Font.getFontFamilyForCanvas()}`;\n  #eventIndexByEvent = new WeakMap<Trace.Types.Events.Event, number|null>();\n  #entityMapper: Utils.EntityMapper.EntityMapper|null = null;\n\n  /**\n   * When we create initiator chains for a selected event, we store those\n   * chains in this map so that if the user reselects the same event we do not\n   * have to recalculate. This is reset when the trace changes.\n   */\n  #initiatorsCache = new Map<number, PerfUI.FlameChart.FlameChartInitiatorData[]>();\n  #persistedGroupConfigSetting: Common.Settings.Setting<PerfUI.FlameChart.PersistedConfigPerTrace>|null = null;\n\n  constructor() {\n    super();\n    this.reset();\n\n    [this.droppedFramePattern, this.partialFramePattern] = this.preparePatternCanvas();\n\n    this.framesGroupStyle = this.buildGroupStyle({useFirstLineForOverview: true});\n    this.screenshotsGroupStyle =\n        this.buildGroupStyle({useFirstLineForOverview: true, nestingLevel: 1, collapsible: false, itemsHeight: 150});\n\n    ThemeSupport.ThemeSupport.instance().addEventListener(ThemeSupport.ThemeChangeEvent.eventName, () => {\n      const headers = [\n        this.framesGroupStyle,\n        this.screenshotsGroupStyle,\n      ];\n      for (const header of headers) {\n        header.color = ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-on-surface');\n        header.backgroundColor =\n            ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-cdt-base-container');\n      }\n    });\n    Utils.ImageCache.emitter.addEventListener(\n        'screenshot-loaded', () => this.dispatchEventToListeners(Events.DATA_CHANGED));\n\n    Common.Settings.Settings.instance()\n        .moduleSetting('skip-stack-frames-pattern')\n        .addChangeListener(this.#onIgnoreListChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('skip-content-scripts')\n        .addChangeListener(this.#onIgnoreListChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('automatically-ignore-list-known-third-party-scripts')\n        .addChangeListener(this.#onIgnoreListChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('enable-ignore-listing')\n        .addChangeListener(this.#onIgnoreListChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('skip-anonymous-scripts')\n        .addChangeListener(this.#onIgnoreListChanged.bind(this));\n  }\n\n  handleTrackConfigurationChange(groups: readonly PerfUI.FlameChart.Group[], indexesInVisualOrder: number[]): void {\n    if (!this.#persistedGroupConfigSetting) {\n      return;\n    }\n    if (!this.parsedTrace) {\n      return;\n    }\n    const persistedDataForTrace = buildPersistedConfig(groups, indexesInVisualOrder);\n    const traceKey = keyForTraceConfig(this.parsedTrace);\n\n    const setting = this.#persistedGroupConfigSetting.get();\n    setting[traceKey] = persistedDataForTrace;\n    this.#persistedGroupConfigSetting.set(setting);\n  }\n\n  setPersistedGroupConfigSetting(setting: Common.Settings.Setting<PerfUI.FlameChart.PersistedConfigPerTrace>): void {\n    this.#persistedGroupConfigSetting = setting;\n  }\n\n  hasTrackConfigurationMode(): boolean {\n    return true;\n  }\n\n  getPossibleActions(entryIndex: number, groupIndex: number): PerfUI.FlameChart.PossibleFilterActions|void {\n    const data = this.timelineData();\n    if (!data) {\n      return;\n    }\n    const group = data.groups.at(groupIndex);\n    // Early exit here if there is no group or:\n    // 1. The group is not expanded: it needs to be expanded to allow the\n    //    context menu actions to occur.\n    // 2. The group does not have the showStackContextMenu flag which indicates\n    //    that it does not show entries that support the stack actions.\n    if (!group || !group.expanded || !group.showStackContextMenu) {\n      return;\n    }\n\n    // Check which actions are possible on an entry.\n    // If an action would not change the entries (for example it has no children to collapse), we do not need to show it.\n    return this.findPossibleContextMenuActions(entryIndex);\n  }\n\n  customizedContextMenu(mouseEvent: MouseEvent, entryIndex: number, groupIndex: number): UI.ContextMenu.ContextMenu\n      |undefined {\n    const entry = this.eventByIndex(entryIndex);\n    if (!entry) {\n      return;\n    }\n\n    const possibleActions = this.getPossibleActions(entryIndex, groupIndex);\n\n    // This action and its 'execute' is defined in `freestyler-meta`\n    const PERF_AI_ACTION_ID = 'drjones.performance-panel-context';\n    const perfAIEntryPointEnabled =\n        Boolean(entry && this.parsedTrace && UI.ActionRegistry.ActionRegistry.instance().hasAction(PERF_AI_ACTION_ID));\n\n    if (!possibleActions && !perfAIEntryPointEnabled) {\n      // Early exit: no possible actions (e.g. collapsing children) and no AI\n      // entrypoint, so we don't need to do anything.\n      return;\n    }\n\n    const contextMenu = new UI.ContextMenu.ContextMenu(mouseEvent);\n    if (perfAIEntryPointEnabled && this.parsedTrace) {\n      const aiCallTree = Utils.AICallTree.AICallTree.fromEvent(entry, this.parsedTrace);\n      if (aiCallTree) {\n        const action = UI.ActionRegistry.ActionRegistry.instance().getAction(PERF_AI_ACTION_ID);\n        contextMenu.footerSection().appendItem(action.title(), () => {\n          const event = this.eventByIndex(entryIndex);\n          if (!event || !this.parsedTrace) {\n            return;\n          }\n          // The other side of setFlavor is handleTraceEntryNodeFlavorChange() in FreestylerPanel\n          UI.Context.Context.instance().setFlavor(Utils.AICallTree.AICallTree, aiCallTree);\n          return action.execute();\n        }, {jslogContext: PERF_AI_ACTION_ID});\n      }\n    }\n\n    if (!possibleActions) {\n      // All the code below here adds possible actions to the context menu,\n      // some of which may be marked as disabled. If we didn't get any possible\n      // actions, rather than add them all and mark all of them as disabled, we\n      // early exit + don't add any of them.\n      return contextMenu;\n    }\n\n    const hideEntryOption = contextMenu.defaultSection().appendItem(i18nString(UIStrings.hideFunction), () => {\n      this.modifyTree(PerfUI.FlameChart.FilterAction.MERGE_FUNCTION, entryIndex);\n    }, {\n      disabled: !possibleActions?.[PerfUI.FlameChart.FilterAction.MERGE_FUNCTION],\n      jslogContext: 'hide-function',\n    });\n    hideEntryOption.setAccelerator(UI.KeyboardShortcut.Keys.H, [UI.KeyboardShortcut.Modifiers.None]);\n    hideEntryOption.setIsDevToolsPerformanceMenuItem(true);\n\n    const hideChildrenOption = contextMenu.defaultSection().appendItem(i18nString(UIStrings.hideChildren), () => {\n      this.modifyTree(PerfUI.FlameChart.FilterAction.COLLAPSE_FUNCTION, entryIndex);\n    }, {\n      disabled: !possibleActions?.[PerfUI.FlameChart.FilterAction.COLLAPSE_FUNCTION],\n      jslogContext: 'hide-children',\n    });\n    hideChildrenOption.setAccelerator(UI.KeyboardShortcut.Keys.C, [UI.KeyboardShortcut.Modifiers.None]);\n    hideChildrenOption.setIsDevToolsPerformanceMenuItem(true);\n\n    const hideRepeatingChildrenOption =\n        contextMenu.defaultSection().appendItem(i18nString(UIStrings.hideRepeatingChildren), () => {\n          this.modifyTree(PerfUI.FlameChart.FilterAction.COLLAPSE_REPEATING_DESCENDANTS, entryIndex);\n        }, {\n          disabled: !possibleActions?.[PerfUI.FlameChart.FilterAction.COLLAPSE_REPEATING_DESCENDANTS],\n          jslogContext: 'hide-repeating-children',\n        });\n    hideRepeatingChildrenOption.setAccelerator(UI.KeyboardShortcut.Keys.R, [UI.KeyboardShortcut.Modifiers.None]);\n    hideRepeatingChildrenOption.setIsDevToolsPerformanceMenuItem(true);\n\n    const resetChildrenOption = contextMenu.defaultSection().appendItem(i18nString(UIStrings.resetChildren), () => {\n      this.modifyTree(PerfUI.FlameChart.FilterAction.RESET_CHILDREN, entryIndex);\n    }, {\n      disabled: !possibleActions?.[PerfUI.FlameChart.FilterAction.RESET_CHILDREN],\n      jslogContext: 'reset-children',\n    });\n    resetChildrenOption.setAccelerator(UI.KeyboardShortcut.Keys.U, [UI.KeyboardShortcut.Modifiers.None]);\n    resetChildrenOption.setIsDevToolsPerformanceMenuItem(true);\n\n    contextMenu.defaultSection().appendItem(i18nString(UIStrings.resetTrace), () => {\n      this.modifyTree(PerfUI.FlameChart.FilterAction.UNDO_ALL_ACTIONS, entryIndex);\n    }, {\n      disabled: !possibleActions?.[PerfUI.FlameChart.FilterAction.UNDO_ALL_ACTIONS],\n      jslogContext: 'reset-trace',\n    });\n\n    if (!this.parsedTrace || Trace.Types.Events.isLegacyTimelineFrame(entry)) {\n      return contextMenu;\n    }\n\n    const url = Utils.SourceMapsResolver.SourceMapsResolver.resolvedURLForEntry(this.parsedTrace, entry);\n    if (!url) {\n      return contextMenu;\n    }\n    if (Utils.IgnoreList.isIgnoreListedEntry(entry)) {\n      contextMenu.defaultSection().appendItem(i18nString(UIStrings.removeScriptFromIgnoreList), () => {\n        Bindings.IgnoreListManager.IgnoreListManager.instance().unIgnoreListURL(url);\n        this.#onIgnoreListChanged();\n      }, {\n        jslogContext: 'remove-from-ignore-list',\n      });\n    } else {\n      contextMenu.defaultSection().appendItem(i18nString(UIStrings.addScriptToIgnoreList), () => {\n        Bindings.IgnoreListManager.IgnoreListManager.instance().ignoreListURL(url);\n        this.#onIgnoreListChanged();\n      }, {\n        jslogContext: 'add-to-ignore-list',\n      });\n    }\n\n    return contextMenu;\n  }\n\n  #onIgnoreListChanged(): void {\n    this.timelineData(/* rebuild= */ true);\n    this.dispatchEventToListeners(Events.DATA_CHANGED);\n  }\n\n  modifyTree(action: PerfUI.FlameChart.FilterAction, entryIndex: number): void {\n    const entry = this.entryData[entryIndex];\n\n    ModificationsManager.activeManager()?.getEntriesFilter().applyFilterAction({type: action, entry});\n    this.timelineData(true);\n    this.buildFlowForInitiator(entryIndex);\n    this.dispatchEventToListeners(Events.DATA_CHANGED);\n  }\n\n  findPossibleContextMenuActions(entryIndex: number): PerfUI.FlameChart.PossibleFilterActions|void {\n    const entry = this.entryData[entryIndex];\n    return ModificationsManager.activeManager()?.getEntriesFilter().findPossibleActions(entry);\n  }\n\n  handleFlameChartTransformKeyboardEvent(event: KeyboardEvent, entryIndex: number, groupIndex: number): void {\n    const possibleActions = this.getPossibleActions(entryIndex, groupIndex);\n    if (!possibleActions) {\n      return;\n    }\n\n    let handled = false;\n\n    if (event.code === 'KeyH' && possibleActions[PerfUI.FlameChart.FilterAction.MERGE_FUNCTION]) {\n      this.modifyTree(PerfUI.FlameChart.FilterAction.MERGE_FUNCTION, entryIndex);\n      handled = true;\n    } else if (event.code === 'KeyC' && possibleActions[PerfUI.FlameChart.FilterAction.COLLAPSE_FUNCTION]) {\n      this.modifyTree(PerfUI.FlameChart.FilterAction.COLLAPSE_FUNCTION, entryIndex);\n      handled = true;\n    } else if (\n        event.code === 'KeyR' && possibleActions[PerfUI.FlameChart.FilterAction.COLLAPSE_REPEATING_DESCENDANTS]) {\n      this.modifyTree(PerfUI.FlameChart.FilterAction.COLLAPSE_REPEATING_DESCENDANTS, entryIndex);\n      handled = true;\n    } else if (event.code === 'KeyU') {\n      this.modifyTree(PerfUI.FlameChart.FilterAction.RESET_CHILDREN, entryIndex);\n      handled = true;\n    }\n\n    if (handled) {\n      event.consume(true);\n    }\n  }\n\n  private buildGroupStyle(extra: Object): PerfUI.FlameChart.GroupStyle {\n    const defaultGroupStyle = {\n      padding: 4,\n      height: 17,\n      collapsible: true,\n      color: ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-on-surface'),\n      backgroundColor: ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-cdt-base-container'),\n      nestingLevel: 0,\n      shareHeaderLine: true,\n    };\n    return Object.assign(defaultGroupStyle, extra);\n  }\n\n  setModel(parsedTrace: Trace.Handlers.Types.ParsedTrace, entityMapper: Utils.EntityMapper.EntityMapper): void {\n    this.reset();\n    this.parsedTrace = parsedTrace;\n    const {traceBounds} = parsedTrace.Meta;\n    const minTime = Trace.Helpers.Timing.microToMilli(traceBounds.min);\n    const maxTime = Trace.Helpers.Timing.microToMilli(traceBounds.max);\n    this.#minimumBoundary = minTime;\n    this.timeSpan = minTime === maxTime ? 1000 : maxTime - this.#minimumBoundary;\n    this.#entityMapper = entityMapper;\n  }\n\n  /**\n   * Instances and caches a CompatibilityTracksAppender using the\n   * internal flame chart data and the trace parsed data coming from the\n   * trace engine.\n   * The model data must have been set to the data provider instance before\n   * attempting to instance the CompatibilityTracksAppender.\n   */\n  compatibilityTracksAppenderInstance(forceNew = false): CompatibilityTracksAppender {\n    if (!this.compatibilityTracksAppender || forceNew) {\n      if (!this.parsedTrace) {\n        throw new Error(\n            'Attempted to instantiate a CompatibilityTracksAppender without having set the trace parse data first.');\n      }\n      this.timelineDataInternal = this.#instantiateTimelineData();\n      this.compatibilityTracksAppender = new CompatibilityTracksAppender(\n          this.timelineDataInternal, this.parsedTrace, this.entryData, this.entryTypeByLevel, this.#entityMapper);\n    }\n    return this.compatibilityTracksAppender;\n  }\n\n  /**\n   * Returns the instance of the timeline flame chart data, without\n   * adding data to it. In case the timeline data hasn't been instanced\n   * creates a new instance and returns it.\n   */\n  #instantiateTimelineData(): PerfUI.FlameChart.FlameChartTimelineData {\n    if (!this.timelineDataInternal) {\n      this.timelineDataInternal = PerfUI.FlameChart.FlameChartTimelineData.createEmpty();\n    }\n    return this.timelineDataInternal;\n  }\n\n  /**\n   * Builds the flame chart data whilst allowing for a custom filtering of track appenders.\n   * This is ONLY to be used in test environments.\n   */\n  buildWithCustomTracksForTest(options?: {\n    /**\n     * Filters the track by the given name. Only tracks that match this filter will be drawn.\n     */\n    filterTracks?: (name: string, trackIndex: number) => boolean,\n    /**\n     * Choose if a given track is expanded based on the name\n     */\n    expandTracks?: (name: string, trackIndex: number) => boolean,\n  }): void {\n    const compatAppender = this.compatibilityTracksAppenderInstance();  // Make sure the instance exists in tests\n    const appenders = compatAppender.allVisibleTrackAppenders();\n    let visibleTrackIndexCounter = 0;\n    for (const appender of appenders) {\n      const trackName = appender instanceof ThreadAppender ? appender.trackName() : appender.appenderName;\n\n      const shouldIncludeTrack = options?.filterTracks?.call(null, trackName, visibleTrackIndexCounter) ?? true;\n      if (!shouldIncludeTrack) {\n        continue;\n      }\n\n      const shouldExpandTrack = options?.expandTracks?.call(null, trackName, visibleTrackIndexCounter) ?? true;\n      this.currentLevel = appender.appendTrackAtLevel(this.currentLevel, shouldExpandTrack);\n      visibleTrackIndexCounter++;\n    }\n  }\n\n  groupTreeEvents(group: PerfUI.FlameChart.Group): Trace.Types.Events.Event[]|null {\n    return this.compatibilityTracksAppender?.groupEventsForTreeView(group) ?? null;\n  }\n\n  mainFrameNavigationStartEvents(): readonly Trace.Types.Events.NavigationStart[] {\n    if (!this.parsedTrace) {\n      return [];\n    }\n    return this.parsedTrace.Meta.mainFrameNavigations;\n  }\n\n  entryTitle(entryIndex: number): string|null {\n    const entryType = this.#entryTypeForIndex(entryIndex);\n    if (entryType === EntryType.SCREENSHOT) {\n      return '';\n    }\n    if (entryType === EntryType.TRACK_APPENDER) {\n      const timelineData = (this.timelineDataInternal as PerfUI.FlameChart.FlameChartTimelineData);\n      const eventLevel = timelineData.entryLevels[entryIndex];\n      const event = (this.entryData[entryIndex]);\n      return this.compatibilityTracksAppender?.titleForEvent(event, eventLevel) || null;\n    }\n    let title: Common.UIString.LocalizedString|string = this.entryIndexToTitle[entryIndex];\n    if (!title) {\n      title = `Unexpected entryIndex ${entryIndex}`;\n      console.error(title);\n    }\n    return title;\n  }\n\n  textColor(index: number): string {\n    const event = this.entryData[index];\n    return Utils.IgnoreList.isIgnoreListedEntry(event) ? '#888' : FlameChartStyle.textColor;\n  }\n\n  entryFont(_index: number): string|null {\n    return this.#font;\n  }\n\n  /**\n   * Clear the cache and rebuild the timeline data This should be called\n   * when the trace file is the same but we want to rebuild the timeline\n   * data. Some possible example: when we hide/unhide an event, or the\n   * ignore list is changed etc.\n   */\n  rebuildTimelineData(): void {\n    this.currentLevel = 0;\n    this.entryData = [];\n    this.entryTypeByLevel = [];\n    this.entryIndexToTitle = [];\n    this.#eventIndexByEvent = new Map();\n\n    if (this.timelineDataInternal) {\n      this.compatibilityTracksAppender?.setFlameChartDataAndEntryData(\n          this.timelineDataInternal, this.entryData, this.entryTypeByLevel);\n      this.compatibilityTracksAppender?.threadAppenders().forEach(\n          threadAppender => threadAppender.setHeaderAppended(false));\n    }\n  }\n\n  /**\n   * Reset all data other than the UI elements.\n   * This should be called when\n   * - initialized the data provider\n   * - a new trace file is coming (when `setModel()` is called)\n   * etc.\n   */\n  reset(): void {\n    this.currentLevel = 0;\n    this.entryData = [];\n    this.entryTypeByLevel = [];\n    this.entryIndexToTitle = [];\n    this.#eventIndexByEvent = new Map();\n    this.#minimumBoundary = 0;\n    this.timeSpan = 0;\n\n    this.compatibilityTracksAppender?.reset();\n    this.compatibilityTracksAppender = null;\n    this.timelineDataInternal = null;\n    this.parsedTrace = null;\n    this.#entityMapper = null;\n    this.#lastInitiatorEntryIndex = -1;\n    this.#initiatorsCache.clear();\n  }\n\n  maxStackDepth(): number {\n    return this.currentLevel;\n  }\n\n  /**\n   * Builds the flame chart data using the tracks appender (which use\n   * the new trace engine). The result built data is cached and returned.\n   */\n  timelineData(rebuild = false): PerfUI.FlameChart.FlameChartTimelineData {\n    if (!rebuild && this.timelineDataInternal && this.timelineDataInternal.entryLevels.length !== 0) {\n      // If the flame chart data is built already and we don't want to rebuild, we can return the cached data.\n      // |entryLevels.length| is used to check if the cached data is not empty (correctly built),\n      return this.timelineDataInternal;\n    }\n\n    this.timelineDataInternal = PerfUI.FlameChart.FlameChartTimelineData.createEmpty();\n\n    if (rebuild) {\n      // This function will interact with the |compatibilityTracksAppender|, which needs the reference of\n      // |timelineDataInternal|, so make sure this is called after the correct |timelineDataInternal|.\n      this.rebuildTimelineData();\n    }\n\n    this.currentLevel = 0;\n\n    if (this.parsedTrace) {\n      this.compatibilityTracksAppender = this.compatibilityTracksAppenderInstance();\n      // Note for readers: NodeJS CpuProfiles are purposefully NOT generic.\n      // We wrap them in a `TracingStartedInPage` event, which causes them to\n      // be treated like \"real\" Chrome traces. This is by design!\n      if (this.parsedTrace.Meta.traceIsGeneric) {\n        this.#processGenericTrace();\n      } else {\n        this.#processInspectorTrace();\n      }\n    }\n    return this.timelineDataInternal;\n  }\n\n  #processGenericTrace(): void {\n    if (!this.compatibilityTracksAppender) {\n      return;\n    }\n\n    const appendersByProcess = this.compatibilityTracksAppender.allThreadAppendersByProcess();\n\n    for (const [pid, threadAppenders] of appendersByProcess) {\n      const processGroupStyle = this.buildGroupStyle({shareHeaderLine: false});\n      const processName = this.parsedTrace?.Meta.processNames.get(pid)?.args.name || 'Process';\n      this.appendHeader(`${processName} (${pid})`, processGroupStyle, true, false);\n      for (const appender of threadAppenders) {\n        appender.setHeaderNestingLevel(1);\n        this.currentLevel = appender.appendTrackAtLevel(this.currentLevel);\n      }\n    }\n  }\n\n  #processInspectorTrace(): void {\n    // In CPU Profiles the trace data will not have frames nor\n    // screenshots, so we can keep this call as it will be a no-op in\n    // these cases.\n    this.#appendFramesAndScreenshotsTrack();\n\n    const weight = (track: {type?: string, forMainFrame?: boolean, appenderName?: TrackAppenderName}): number => {\n      switch (track.appenderName) {\n        case 'Animations':\n          return 0;\n        case 'Timings':\n          return 1;\n        case 'Interactions':\n          return 2;\n        case 'LayoutShifts':\n          return 3;\n        case 'Extension':\n          return 4;\n        case 'Thread':\n          return 5;\n        case 'ServerTimings':\n          return 6;\n        case 'GPU':\n          return 7;\n        case 'Thread_AuctionWorklet':\n          return 8;\n        default:\n          return 9;\n      }\n    };\n\n    const allTrackAppenders =\n        this.compatibilityTracksAppender ? this.compatibilityTracksAppender.allVisibleTrackAppenders() : [];\n\n    allTrackAppenders.sort((a, b) => weight(a) - weight(b));\n\n    for (const appender of allTrackAppenders) {\n      if (!this.parsedTrace) {\n        continue;\n      }\n\n      this.currentLevel = appender.appendTrackAtLevel(this.currentLevel);\n\n      // If there is not a selected group, we want to default to selecting the\n      // main thread track. Therefore in this check we look to see if the\n      // current appender is a ThreadAppender and represnets the Main Thread.\n      // If it is, we mark the group as selected.\n      if (this.timelineDataInternal && !this.timelineDataInternal.selectedGroup) {\n        if (appender instanceof ThreadAppender &&\n            (appender.threadType === Trace.Handlers.Threads.ThreadType.MAIN_THREAD ||\n             appender.threadType === Trace.Handlers.Threads.ThreadType.CPU_PROFILE)) {\n          const group = this.compatibilityTracksAppender?.groupForAppender(appender);\n          if (group) {\n            this.timelineDataInternal.selectedGroup = group;\n          }\n        }\n      }\n    }\n    if (this.timelineDataInternal?.selectedGroup) {\n      this.timelineDataInternal.selectedGroup.expanded = true;\n    }\n  }\n\n  minimumBoundary(): number {\n    return this.#minimumBoundary;\n  }\n\n  totalTime(): number {\n    return this.timeSpan;\n  }\n\n  search(visibleWindow: Trace.Types.Timing.TraceWindowMicro, filter?: Trace.Extras.TraceFilter.TraceFilter):\n      PerfUI.FlameChart.DataProviderSearchResult[] {\n    const results: PerfUI.FlameChart.DataProviderSearchResult[] = [];\n    this.timelineData();\n    for (let i = 0; i < this.entryData.length; ++i) {\n      const entry = this.entryData[i];\n      if (!entry) {\n        continue;\n      }\n\n      if (Trace.Types.Events.isLegacyTimelineFrame(entry)) {\n        continue;\n      }\n\n      if (Trace.Types.Events.isLegacyScreenshot(entry)) {\n        // Screenshots are represented as trace events, but you can't search for them, so skip.\n        continue;\n      }\n      if (!Trace.Helpers.Timing.eventIsInBounds(entry, visibleWindow)) {\n        continue;\n      }\n      if (!filter || filter.accept(entry, this.parsedTrace || undefined)) {\n        const startTimeMilli = Trace.Helpers.Timing.microToMilli(entry.ts);\n        results.push({index: i, startTimeMilli, provider: 'main'});\n      }\n    }\n    return results;\n  }\n\n  getEntryTypeForLevel(level: number): EntryType {\n    return this.entryTypeByLevel[level];\n  }\n\n  /**\n   * The frames and screenshots track is special cased because it is rendered\n   * differently to the rest of the tracks and not as a series of events. This\n   * is why it is not done via the appender system; we track frames &\n   * screenshots as a different EntryType to the TrackAppender entries,\n   * because then when it comes to drawing we can decorate them differently.\n   **/\n  #appendFramesAndScreenshotsTrack(): void {\n    if (!this.parsedTrace) {\n      return;\n    }\n    const filmStrip = Trace.Extras.FilmStrip.fromParsedTrace(this.parsedTrace);\n    const hasScreenshots = filmStrip.frames.length > 0;\n    const hasFrames = this.parsedTrace.Frames.frames.length > 0;\n    if (!hasFrames && !hasScreenshots) {\n      return;\n    }\n\n    this.framesGroupStyle.collapsible = hasScreenshots;\n    const expanded = Root.Runtime.Runtime.queryParam('flamechart-force-expand') === 'frames';\n\n    this.appendHeader(i18nString(UIStrings.frames), this.framesGroupStyle, false /* selectable */, expanded);\n\n    this.entryTypeByLevel[this.currentLevel] = EntryType.FRAME;\n    for (const frame of this.parsedTrace.Frames.frames) {\n      this.#appendFrame(frame);\n    }\n    ++this.currentLevel;\n\n    if (!hasScreenshots) {\n      return;\n    }\n    this.#appendScreenshots(filmStrip);\n  }\n\n  #appendScreenshots(filmStrip: Trace.Extras.FilmStrip.Data): void {\n    if (!this.timelineDataInternal || !this.parsedTrace) {\n      return;\n    }\n    this.appendHeader('', this.screenshotsGroupStyle, false /* selectable */);\n    this.entryTypeByLevel[this.currentLevel] = EntryType.SCREENSHOT;\n    let prevTimestamp: Trace.Types.Timing.Milli|undefined = undefined;\n\n    for (const filmStripFrame of filmStrip.frames) {\n      const screenshotTimeInMilliSeconds = Trace.Helpers.Timing.microToMilli(filmStripFrame.screenshotEvent.ts);\n      this.entryData.push(filmStripFrame.screenshotEvent);\n      (this.timelineDataInternal.entryLevels as number[]).push(this.currentLevel);\n      (this.timelineDataInternal.entryStartTimes as number[]).push(screenshotTimeInMilliSeconds);\n      if (prevTimestamp) {\n        (this.timelineDataInternal.entryTotalTimes as number[]).push(screenshotTimeInMilliSeconds - prevTimestamp);\n      }\n      prevTimestamp = screenshotTimeInMilliSeconds;\n    }\n    if (filmStrip.frames.length && prevTimestamp !== undefined) {\n      const maxRecordTimeMillis = Trace.Helpers.Timing.traceWindowMilliSeconds(this.parsedTrace.Meta.traceBounds).max;\n\n      // Set the total time of the final screenshot so it takes up the remainder of the trace.\n      (this.timelineDataInternal.entryTotalTimes as number[]).push(maxRecordTimeMillis - prevTimestamp);\n    }\n    ++this.currentLevel;\n  }\n\n  #entryTypeForIndex(entryIndex: number): EntryType {\n    const level = this.timelineData().entryLevels[entryIndex];\n    return this.entryTypeByLevel[level];\n  }\n\n  preparePopoverElement(entryIndex: number): Element|null {\n    let time = '';\n    let title;\n    let warningElements: Element[] = [];\n    let timeElementClassName = 'popoverinfo-time';\n    const additionalContent: HTMLElement[] = [];\n\n    const entryType = this.#entryTypeForIndex(entryIndex);\n    if (entryType === EntryType.TRACK_APPENDER) {\n      if (!this.compatibilityTracksAppender) {\n        return null;\n      }\n      const event = (this.entryData[entryIndex]);\n      const timelineData = (this.timelineDataInternal as PerfUI.FlameChart.FlameChartTimelineData);\n      const eventLevel = timelineData.entryLevels[entryIndex];\n      const popoverInfo = this.compatibilityTracksAppender.popoverInfo(event, eventLevel);\n      title = popoverInfo.title;\n      time = popoverInfo.formattedTime;\n      warningElements = popoverInfo.warningElements || warningElements;\n      if (popoverInfo.additionalElements?.length) {\n        additionalContent.push(...popoverInfo.additionalElements);\n      }\n\n      this.dispatchEventToListeners(Events.FLAME_CHART_ITEM_HOVERED, event);\n\n    } else if (entryType === EntryType.FRAME) {\n      const frame = (this.entryData[entryIndex] as Trace.Types.Events.LegacyTimelineFrame);\n      time = i18n.TimeUtilities.preciseMillisToString(Trace.Helpers.Timing.microToMilli(frame.duration), 1);\n\n      if (frame.idle) {\n        title = i18nString(UIStrings.idleFrame);\n      } else if (frame.dropped) {\n        title = frame.isPartial ? i18nString(UIStrings.partiallyPresentedFrame) : i18nString(UIStrings.droppedFrame);\n        timeElementClassName = 'popoverinfo-warning';\n      } else {\n        title = i18nString(UIStrings.frame);\n      }\n    } else {\n      this.dispatchEventToListeners(Events.FLAME_CHART_ITEM_HOVERED, null);\n      return null;\n    }\n\n    const popoverElement = document.createElement('div');\n    const root = UI.UIUtils.createShadowRootWithCoreStyles(popoverElement, {cssFile: timelineFlamechartPopoverStyles});\n    const popoverContents = root.createChild('div', 'timeline-flamechart-popover');\n    popoverContents.createChild('span', timeElementClassName).textContent = time;\n    popoverContents.createChild('span', 'popoverinfo-title').textContent = title;\n    for (const warningElement of warningElements) {\n      warningElement.classList.add('popoverinfo-warning');\n      popoverContents.appendChild(warningElement);\n    }\n    for (const elem of additionalContent) {\n      popoverContents.appendChild(elem);\n    }\n    return popoverElement;\n  }\n\n  preparePopoverForCollapsedArrow(entryIndex: number): Element|null {\n    const element = document.createElement('div');\n    const root = UI.UIUtils.createShadowRootWithCoreStyles(element, {cssFile: timelineFlamechartPopoverStyles});\n\n    const entry = this.entryData[entryIndex];\n    const hiddenEntriesAmount =\n        ModificationsManager.activeManager()?.getEntriesFilter().findHiddenDescendantsAmount(entry);\n\n    if (!hiddenEntriesAmount) {\n      return null;\n    }\n    const contents = root.createChild('div', 'timeline-flamechart-popover');\n    contents.createChild('span', 'popoverinfo-title').textContent = hiddenEntriesAmount + ' hidden';\n\n    return element;\n  }\n\n  getDrawOverride(entryIndex: number): DrawOverride|undefined {\n    const entryType = this.#entryTypeForIndex(entryIndex);\n    if (entryType !== EntryType.TRACK_APPENDER) {\n      return;\n    }\n\n    const timelineData = (this.timelineDataInternal as PerfUI.FlameChart.FlameChartTimelineData);\n    const eventLevel = timelineData.entryLevels[entryIndex];\n    const event = (this.entryData[entryIndex]);\n    return this.compatibilityTracksAppender?.getDrawOverride(event, eventLevel);\n  }\n\n  #entryColorForFrame(entryIndex: number): string {\n    const frame = (this.entryData[entryIndex] as Trace.Types.Events.LegacyTimelineFrame);\n    if (frame.idle) {\n      return 'white';\n    }\n    if (frame.dropped) {\n      if (frame.isPartial) {\n        // For partially presented frame boxes, paint a yellow background with\n        // a sparse white dashed-line pattern overlay.\n        return '#f0e442';\n      }\n      // For dropped frame boxes, paint a red background with a dense white\n      // solid-line pattern overlay.\n      return '#f08080';\n    }\n    return '#d7f0d1';\n  }\n\n  entryColor(entryIndex: number): string {\n    const entryType = this.#entryTypeForIndex(entryIndex);\n    if (entryType === EntryType.FRAME) {\n      return this.#entryColorForFrame(entryIndex);\n    }\n    if (entryType === EntryType.TRACK_APPENDER) {\n      const timelineData = (this.timelineDataInternal as PerfUI.FlameChart.FlameChartTimelineData);\n      const eventLevel = timelineData.entryLevels[entryIndex];\n      const event = (this.entryData[entryIndex]);\n      return this.compatibilityTracksAppender?.colorForEvent(event, eventLevel) || '';\n    }\n    return '';\n  }\n\n  private preparePatternCanvas(): Array<CanvasPattern|null> {\n    // Set the candy stripe pattern to 17px so it repeats well.\n    const size = 17;\n    const droppedFrameCanvas = document.createElement('canvas');\n    const partialFrameCanvas = document.createElement('canvas');\n    droppedFrameCanvas.width = droppedFrameCanvas.height = size;\n    partialFrameCanvas.width = partialFrameCanvas.height = size;\n\n    const ctx = droppedFrameCanvas.getContext('2d', {willReadFrequently: true}) as CanvasRenderingContext2D;\n    // Make a dense solid-line pattern.\n    ctx.translate(size * 0.5, size * 0.5);\n    ctx.rotate(Math.PI * 0.25);\n    ctx.translate(-size * 0.5, -size * 0.5);\n\n    ctx.fillStyle = 'rgb(255, 255, 255)';\n    for (let x = -size; x < size * 2; x += 3) {\n      ctx.fillRect(x, -size, 1, size * 3);\n    }\n    const droppedFramePattern = ctx.createPattern(droppedFrameCanvas, 'repeat');\n\n    const ctx2 = partialFrameCanvas.getContext('2d', {willReadFrequently: true}) as CanvasRenderingContext2D;\n    // Make a sparse dashed-line pattern.\n    ctx2.strokeStyle = 'rgb(255, 255, 255)';\n    ctx2.lineWidth = 2;\n    ctx2.beginPath();\n    ctx2.moveTo(17, 0);\n    ctx2.lineTo(10, 7);\n    ctx2.moveTo(8, 9);\n    ctx2.lineTo(2, 15);\n    ctx2.stroke();\n    const partialFramePattern = ctx.createPattern(partialFrameCanvas, 'repeat');\n    return [droppedFramePattern, partialFramePattern];\n  }\n\n  private drawFrame(\n      entryIndex: number, context: CanvasRenderingContext2D, barX: number, barY: number, barWidth: number,\n      barHeight: number, transformColor: (color: string) => string): void {\n    const hPadding = 1;\n    const frame = this.entryData[entryIndex] as Trace.Types.Events.LegacyTimelineFrame;\n    barX += hPadding;\n    barWidth -= 2 * hPadding;\n    context.fillStyle = transformColor(this.entryColor(entryIndex));\n\n    if (frame.dropped) {\n      context.fillRect(barX, barY, barWidth, barHeight);\n      if (frame.isPartial) {\n        // For partially presented frame boxes, paint a yellow background with\n        // a sparse white dashed-line pattern overlay.\n        context.fillStyle = this.partialFramePattern || context.fillStyle;\n      } else {\n        // For dropped frame boxes, paint a red background with a dense white\n        // solid-line pattern overlay.\n        context.fillStyle = this.droppedFramePattern || context.fillStyle;\n      }\n    }\n    context.fillRect(barX, barY, barWidth, barHeight);\n\n    const frameDurationText =\n        i18n.TimeUtilities.preciseMillisToString(Trace.Helpers.Timing.microToMilli(frame.duration), 1);\n    const textWidth = context.measureText(frameDurationText).width;\n    if (textWidth <= barWidth) {\n      context.fillStyle = this.textColor(entryIndex);\n      context.fillText(frameDurationText, barX + (barWidth - textWidth) / 2, barY + barHeight - 4);\n    }\n  }\n\n  private async drawScreenshot(\n      entryIndex: number, context: CanvasRenderingContext2D, barX: number, barY: number, barWidth: number,\n      barHeight: number): Promise<void> {\n    const screenshot = (this.entryData[entryIndex] as Trace.Types.Events.LegacySyntheticScreenshot);\n    const image = Utils.ImageCache.getOrQueue(screenshot);\n    if (!image) {\n      return;\n    }\n    const imageX = barX + 1;\n    const imageY = barY + 1;\n    const imageHeight = barHeight - 2;\n    const scale = imageHeight / image.naturalHeight;\n    const imageWidth = Math.floor(image.naturalWidth * scale);\n    context.save();\n    context.beginPath();\n    context.rect(barX, barY, barWidth, barHeight);\n    context.clip();\n    context.drawImage(image, imageX, imageY, imageWidth, imageHeight);\n    context.strokeStyle = '#ccc';\n    context.strokeRect(imageX - 0.5, imageY - 0.5, Math.min(barWidth - 1, imageWidth + 1), imageHeight);\n    context.restore();\n  }\n\n  decorateEntry(\n      entryIndex: number, context: CanvasRenderingContext2D, text: string|null, barX: number, barY: number,\n      barWidth: number, barHeight: number, unclippedBarX: number, timeToPixelRatio: number,\n      transformColor: (color: string) => string): boolean {\n    const entryType = this.#entryTypeForIndex(entryIndex);\n\n    if (entryType === EntryType.FRAME) {\n      this.drawFrame(entryIndex, context, barX, barY, barWidth, barHeight, transformColor);\n      return true;\n    }\n\n    if (entryType === EntryType.SCREENSHOT) {\n      void this.drawScreenshot(entryIndex, context, barX, barY, barWidth, barHeight);\n      return true;\n    }\n\n    if (entryType === EntryType.TRACK_APPENDER) {\n      const entry = this.entryData[entryIndex];\n      if (Trace.Types.Events.isSyntheticInteraction(entry)) {\n        this.#drawInteractionEventWithWhiskers(\n            context, entryIndex, text, entry, barX, barY, unclippedBarX, barWidth, barHeight, timeToPixelRatio);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Draws the left and right whiskers around an interaction in the timeline.\n   * @param context - the canvas that will be drawn onto\n   * @param entryIndex\n   * @param entryTitle - the title of the entry\n   * @param entry - the entry itself\n   * @param barX - the starting X pixel position of the bar representing this event. This is clipped: if the bar is off the left side of the screen, this value will be 0\n   * @param barY - the starting Y pixel position of the bar representing this event.\n   * @param unclippedBarXStartPixel - the starting X pixel position of the bar representing this event, not clipped. This means if the bar is off the left of the screen this will be a negative number.\n   * @param barWidth - the width of the full bar in pixels\n   * @param barHeight - the height of the full bar in pixels\n   * @param timeToPixelRatio - the ratio required to convert a millisecond time to a pixel value.\n   **/\n  #drawInteractionEventWithWhiskers(\n      context: CanvasRenderingContext2D, entryIndex: number, entryTitle: string|null,\n      entry: Trace.Types.Events.SyntheticInteractionPair, barX: number, barY: number, unclippedBarXStartPixel: number,\n      barWidth: number, barHeight: number, timeToPixelRatio: number): void {\n    /**\n     * An interaction is drawn with whiskers as so:\n     * |----------[=======]-------------|\n     * => The left whisker is the event's start time (event.ts)\n     * => The box start is the event's processingStart time\n     * => The box end is the event's processingEnd time\n     * => The right whisker is the event's end time (event.ts + event.dur)\n     *\n     * When we draw the event in the InteractionsAppender, we draw a huge box\n     * that spans the entire of the above. So here we need to draw over the\n     * rectangle that is outside of {processingStart, processingEnd} and\n     * replace it with the whiskers.\n     * TODO(crbug.com/1495248): rework how we draw whiskers to avoid this inefficiency\n     */\n\n    const beginTime = Trace.Helpers.Timing.microToMilli(entry.ts);\n    const entireBarEndXPixel = barX + barWidth;\n\n    function timeToPixel(time: Trace.Types.Timing.Micro): number {\n      const timeMilli = Trace.Helpers.Timing.microToMilli(time);\n      return Math.floor(unclippedBarXStartPixel + (timeMilli - beginTime) * timeToPixelRatio);\n    }\n\n    context.save();\n\n    // Clear portions of initial rect to prepare for the ticks.\n    context.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-cdt-base-container');\n    let desiredBoxStartX = timeToPixel(entry.processingStart);\n    const desiredBoxEndX = timeToPixel(entry.processingEnd);\n\n    // If the entry has no processing duration, ensure the box is 1px wide so at least it is visible.\n    if (entry.processingEnd - entry.processingStart === 0) {\n      desiredBoxStartX -= 1;\n    }\n\n    context.fillRect(barX, barY - 0.5, desiredBoxStartX - barX, barHeight);\n    context.fillRect(desiredBoxEndX, barY - 0.5, entireBarEndXPixel - desiredBoxEndX, barHeight);\n\n    // Draws left and right whiskers\n    function drawTick(begin: number, end: number, y: number): void {\n      const tickHeightPx = 6;\n      context.moveTo(begin, y - tickHeightPx / 2);\n      context.lineTo(begin, y + tickHeightPx / 2);\n      context.moveTo(begin, y);\n      context.lineTo(end, y);\n    }\n\n    // The left whisker starts at the enty timestamp, and continues until the start of the box (processingStart).\n    const leftWhiskerX = timeToPixel(entry.ts);\n    // The right whisker ends at (entry.ts + entry.dur). We draw the line from the end of the box (processingEnd).\n    const rightWhiskerX = timeToPixel(Trace.Types.Timing.Micro(entry.ts + entry.dur));\n    context.beginPath();\n    context.lineWidth = 1;\n    context.strokeStyle = '#ccc';\n    const lineY = Math.floor(barY + barHeight / 2) + 0.5;\n    const leftTick = leftWhiskerX + 0.5;\n    const rightTick = rightWhiskerX - 0.5;\n    drawTick(leftTick, desiredBoxStartX, lineY);\n    drawTick(rightTick, desiredBoxEndX, lineY);\n    context.stroke();\n\n    if (entryTitle) {\n      // BarX will be set to 0 if the start of the box if off the screen to the\n      // left. If this happens, the desiredBoxStartX will be negative. In that\n      // case, we fallback to the BarX. This ensures that even if the box\n      // starts off-screen, we draw the text at the first visible on screen\n      // pixels, so the user can still see the event's title.\n      const textStartX = desiredBoxStartX > 0 ? desiredBoxStartX : barX;\n      context.font = this.#font;\n      const textWidth = UI.UIUtils.measureTextWidth(context, entryTitle);\n\n      // These numbers are duplicated from FlameChart.ts.\n      const textPadding = 5;\n      const textBaseline = 5;\n\n      // Only draw the text if it can fit in the amount of box that is visible.\n      if (textWidth <= desiredBoxEndX - textStartX + textPadding) {\n        context.fillStyle = this.textColor(entryIndex);\n        context.fillText(entryTitle, textStartX + textPadding, barY + barHeight - textBaseline);\n      }\n    }\n    context.restore();\n  }\n\n  forceDecoration(entryIndex: number): boolean {\n    const entryType = this.#entryTypeForIndex(entryIndex);\n    if (entryType === EntryType.FRAME) {\n      return true;\n    }\n    if (entryType === EntryType.SCREENSHOT) {\n      return true;\n    }\n    const event = (this.entryData[entryIndex]);\n\n    if (Trace.Types.Events.isSyntheticInteraction(event)) {\n      // We draw interactions with whiskers, which are done via the\n      // decorateEntry() method, hence we always want to force these to be\n      // decorated.\n      return true;\n    }\n    return Boolean(this.parsedTrace?.Warnings.perEvent.get(event));\n  }\n\n  private appendHeader(title: string, style: PerfUI.FlameChart.GroupStyle, selectable: boolean, expanded?: boolean):\n      PerfUI.FlameChart.Group {\n    const group =\n        ({startLevel: this.currentLevel, name: title, style, selectable, expanded} as PerfUI.FlameChart.Group);\n    (this.timelineDataInternal as PerfUI.FlameChart.FlameChartTimelineData).groups.push(group);\n    return group;\n  }\n\n  #appendFrame(frame: Trace.Types.Events.LegacyTimelineFrame): void {\n    const index = this.entryData.length;\n    this.entryData.push(frame);\n    const durationMilliseconds = Trace.Helpers.Timing.microToMilli(frame.duration);\n    this.entryIndexToTitle[index] = i18n.TimeUtilities.millisToString(durationMilliseconds, true);\n    if (!this.timelineDataInternal) {\n      return;\n    }\n    this.timelineDataInternal.entryLevels[index] = this.currentLevel;\n    this.timelineDataInternal.entryTotalTimes[index] = durationMilliseconds;\n    this.timelineDataInternal.entryStartTimes[index] = Trace.Helpers.Timing.microToMilli(frame.startTime);\n  }\n\n  createSelection(entryIndex: number): TimelineSelection|null {\n    const entry = this.entryData[entryIndex];\n    const timelineSelection: TimelineSelection|null = entry ? selectionFromEvent(entry) : null;\n    if (timelineSelection) {\n      this.lastSelection = new Selection(timelineSelection, entryIndex);\n    }\n    return timelineSelection;\n  }\n\n  formatValue(value: number, precision?: number): string {\n    return i18n.TimeUtilities.preciseMillisToString(value, precision);\n  }\n\n  groupForEvent(entryIndex: number): PerfUI.FlameChart.Group|null {\n    if (!this.compatibilityTracksAppender) {\n      return null;\n    }\n    const level = this.timelineDataInternal?.entryLevels[entryIndex] ?? null;\n    if (level === null) {\n      return null;\n    }\n    const groupForLevel = this.compatibilityTracksAppender.groupForLevel(level);\n    if (!groupForLevel) {\n      return null;\n    }\n    return groupForLevel;\n  }\n\n  canJumpToEntry(_entryIndex: number): boolean {\n    return false;\n  }\n\n  entryIndexForSelection(selection: TimelineSelection|null): number {\n    if (!selection || selectionIsRange(selection) || Trace.Types.Events.isNetworkTrackEntry(selection.event)) {\n      return -1;\n    }\n\n    if (this.lastSelection && selectionsEqual(this.lastSelection.timelineSelection, selection)) {\n      return this.lastSelection.entryIndex;\n    }\n\n    const index = this.entryData.indexOf(selection.event);\n    // If the index is -1 and the selection is a TraceEvent, it might be\n    // the case that this Entry is hidden by the Context Menu action.\n    // Try revealing the entry and getting the index again.\n    if (index === -1) {\n      if (this.timelineDataInternal?.selectedGroup) {\n        ModificationsManager.activeManager()?.getEntriesFilter().revealEntry(selection.event);\n        this.timelineData(true);\n      }\n    }\n\n    if (index !== -1) {\n      this.lastSelection = new Selection(selection, index);\n    }\n    return index;\n  }\n\n  /**\n   * Return the index for the given entry. Note that this method assumes that\n   * timelineData() has been generated. If it hasn't, this method will return\n   * null.\n   */\n  indexForEvent(targetEvent: Trace.Types.Events.Event): number|null {\n    // Gets the index for the given event by walking through the array of entryData.\n    // This may seem inefficient - but we have seen that by building up large\n    // maps keyed by trace events that this has a significant impact on the\n    // performance of the panel.\n    // Therefore, we strike a middle ground: look up the event the first time,\n    // but then cache the result.\n    const fromCache = this.#eventIndexByEvent.get(targetEvent);\n    if (typeof fromCache === 'number') {\n      return fromCache;\n    }\n    const index = this.entryData.indexOf(targetEvent);\n    const result = index > -1 ? index : null;\n    this.#eventIndexByEvent.set(targetEvent, result);\n    return result;\n  }\n\n  /**\n   * Build the data for initiators and initiated entries.\n   * @param entryIndex\n   * @returns if we should re-render the flame chart (canvas)\n   */\n  buildFlowForInitiator(entryIndex: number): boolean {\n    if (!this.parsedTrace || !this.compatibilityTracksAppender || !this.timelineDataInternal) {\n      return false;\n    }\n\n    if (this.#lastInitiatorEntryIndex === entryIndex) {\n      // If the user clicks on an entry twice by mistake, this can fire. But if\n      // the entry matches the selected entry, then there is nothing more for\n      // us to do.\n      return false;\n    }\n\n    this.#lastInitiatorEntryIndex = entryIndex;\n\n    const previousInitiatorsDataLength = this.timelineDataInternal.initiatorsData.length;\n\n    if (entryIndex === -1) {\n      // User has deselected an event, so if it had any initiators we need to clear them.\n      if (this.timelineDataInternal.initiatorsData.length === 0) {\n        // The previous selected entry had no initiators, so we can early exit and not redraw anything.\n        return false;\n      }\n      // Clear initiator data and trigger a re-render.\n      this.timelineDataInternal.emptyInitiators();\n      return true;\n    }\n\n    // If the user hasn't clicked on an event, bail, as there are no initiators\n    // for screenshots or frames.\n    const entryType = this.#entryTypeForIndex(entryIndex);\n    if (entryType !== EntryType.TRACK_APPENDER) {\n      return false;\n    }\n\n    // Avoid re-building the initiators if we already did it previously.\n    const cached = this.#initiatorsCache.get(entryIndex);\n    if (cached) {\n      this.timelineDataInternal.initiatorsData = cached;\n      return true;\n    }\n\n    // At this point, we know we:\n    // 1. Have an event to build initiators for.\n    // 2. Know that it's not an event with initiators that are cached.\n    const event = this.entryData[entryIndex];\n    // Reset to clear any previous arrows from the last event.\n    this.timelineDataInternal.emptyInitiators();\n\n    const hiddenEvents: Trace.Types.Events.Event[] =\n        ModificationsManager.activeManager()?.getEntriesFilter().invisibleEntries() ?? [];\n    const expandableEntries: Trace.Types.Events.Event[] =\n        ModificationsManager.activeManager()?.getEntriesFilter().expandableEntries() ?? [];\n\n    const initiatorsData = initiatorsDataToDraw(\n        this.parsedTrace,\n        event,\n        hiddenEvents,\n        expandableEntries,\n    );\n\n    if (initiatorsData.length === 0) {\n      // Small optimization: cache if this entry has 0 initiators, meaning if\n      // it gets reselected we don't redo the work to find out it has 0\n      // initiators.\n      this.#initiatorsCache.set(entryIndex, []);\n    }\n\n    // Previous event had 0 initiators, new event has 0, therefore exit early and don't render.\n    if (previousInitiatorsDataLength === 0 && initiatorsData.length === 0) {\n      return false;\n    }\n\n    for (const initiatorData of initiatorsData) {\n      const eventIndex = this.indexForEvent(initiatorData.event);\n      const initiatorIndex = this.indexForEvent(initiatorData.initiator);\n      if (eventIndex === null || initiatorIndex === null) {\n        continue;\n      }\n      this.timelineDataInternal.initiatorsData.push({\n        initiatorIndex,\n        eventIndex,\n        isInitiatorHidden: initiatorData.isInitiatorHidden,\n        isEntryHidden: initiatorData.isEntryHidden,\n      });\n    }\n    this.#initiatorsCache.set(entryIndex, this.timelineDataInternal.initiatorsData);\n    return true;\n  }\n\n  eventByIndex(entryIndex: number): Trace.Types.Events.Event|null {\n    if (entryIndex < 0) {\n      return null;\n    }\n    const entryType = this.#entryTypeForIndex(entryIndex);\n    if (entryType === EntryType.TRACK_APPENDER) {\n      return this.entryData[entryIndex];\n    }\n    if (entryType === EntryType.FRAME) {\n      return this.entryData[entryIndex] as Trace.Types.Events.LegacyTimelineFrame;\n    }\n    return null;\n  }\n}\n\nexport const InstantEventVisibleDurationMs = Trace.Types.Timing.Milli(0.001);\n\nexport const enum Events {\n  DATA_CHANGED = 'DataChanged',\n  FLAME_CHART_ITEM_HOVERED = 'FlameChartItemHovered',\n}\n\nexport interface EventTypes {\n  [Events.DATA_CHANGED]: void;\n  [Events.FLAME_CHART_ITEM_HOVERED]: Trace.Types.Events.Event|null;\n}\n\n// an entry is a trace event, they are classified into \"entry types\"\n// because some events are rendered differently. For example, screenshot\n// events are rendered as images. Checks for entry types allow to have\n// different styles, names, etc. for events that look differently.\n// In the future we won't have this checks: instead we will forward\n// the event to the corresponding \"track appender\" and it will determine\n// how the event shall be rendered.\nexport const enum EntryType {\n  FRAME = 'Frame',\n  TRACK_APPENDER = 'TrackAppender',\n  SCREENSHOT = 'Screenshot',\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Trace from '../../models/trace/trace.js';\n\nexport interface InitiatorData {\n  event: Trace.Types.Events.Event;\n  initiator: Trace.Types.Events.Event;\n  isEntryHidden?: boolean;\n  isInitiatorHidden?: boolean;\n}\n/**\n * Given an event that the user has selected, this function returns all the\n * data of events and their initiators that need to be drawn on the flamechart.\n * The reason that this can return multiple InitiatorEntry objects is because we draw the\n * entire chain: for each, we see if it had an initiator, and\n * work backwards to draw each one, as well as the events initiated directly by the entry.\n */\nexport function initiatorsDataToDraw(\n    parsedTrace: Trace.Handlers.Types.ParsedTrace,\n    selectedEvent: Trace.Types.Events.Event,\n    hiddenEntries: Trace.Types.Events.Event[],\n    expandableEntries: Trace.Types.Events.Event[],\n    ): readonly InitiatorData[] {\n  const initiatorsData = [\n    ...findInitiatorDataPredecessors(parsedTrace, selectedEvent, parsedTrace.Initiators.eventToInitiator),\n    ...findInitiatorDataDirectSuccessors(selectedEvent, parsedTrace.Initiators.initiatorToEvents),\n  ];\n\n  // For each InitiatorData, call a function that makes sure that neither the initiator or initiated entry is hidden.\n  // If they are, it will reassign the event or initiator to the closest ancestor.\n  initiatorsData.forEach(\n      initiatorData =>\n          getClosestVisibleInitiatorEntriesAncestors(initiatorData, expandableEntries, hiddenEntries, parsedTrace));\n  return initiatorsData;\n}\n\nexport function initiatorsDataToDrawForNetwork(\n    parsedTrace: Trace.Handlers.Types.ParsedTrace,\n    selectedEvent: Trace.Types.Events.Event,\n    ): readonly InitiatorData[] {\n  return findInitiatorDataPredecessors(parsedTrace, selectedEvent, parsedTrace.NetworkRequests.eventToInitiator);\n}\n\nfunction findInitiatorDataPredecessors(\n    parsedTrace: Trace.Handlers.Types.ParsedTrace,\n    selectedEvent: Trace.Types.Events.Event,\n    eventToInitiator: Map<Trace.Types.Events.Event, Trace.Types.Events.Event>,\n    ): readonly InitiatorData[] {\n  const initiatorsData: InitiatorData[] = [];\n\n  let currentEvent: Trace.Types.Events.Event|null = selectedEvent;\n  const visited = new Set<Trace.Types.Events.Event>();\n  visited.add(currentEvent);\n\n  // Build event initiator data up to the selected one\n  while (currentEvent) {\n    const currentInitiator = eventToInitiator.get(currentEvent);\n\n    if (currentInitiator) {\n      if (visited.has(currentInitiator)) {\n        break;\n      }\n      // Store the current initiator data, and then set the initiator to\n      // be the current event, so we work back through the\n      // trace and find the initiator of the initiator, and so\n      // on...\n      initiatorsData.push({event: currentEvent, initiator: currentInitiator});\n      currentEvent = currentInitiator;\n      visited.add(currentEvent);\n      continue;\n    }\n\n    const nodeForCurrentEvent = parsedTrace.Renderer.entryToNode.get(currentEvent);\n    if (!nodeForCurrentEvent) {\n      // Should not happen - if it does something odd is going\n      // on so let's give up.\n      currentEvent = null;\n      break;\n    }\n\n    // Go up to the parent, and loop again.\n    currentEvent = nodeForCurrentEvent.parent?.entry || null;\n  }\n\n  return initiatorsData;\n}\n\nfunction findInitiatorDataDirectSuccessors(\n    selectedEvent: Trace.Types.Events.Event,\n    initiatorToEvents: Map<Trace.Types.Events.Event, Trace.Types.Events.Event[]>,\n    ): readonly InitiatorData[] {\n  const initiatorsData: InitiatorData[] = [];\n\n  // Add all of the initiated events to the initiatorsData array.\n  const eventsInitiatedByCurrent = initiatorToEvents.get(selectedEvent);\n  if (eventsInitiatedByCurrent) {\n    eventsInitiatedByCurrent.forEach(event => {\n      initiatorsData.push({event, initiator: selectedEvent});\n    });\n  }\n\n  return initiatorsData;\n}\n\n/**\n * Given an InitiatorData object that contains an initiator and event, this function returns\n * the closest visible ancestors. We need to apply this to each initiatorData because\n * the actual initiator or initiated event might be hidden form the flame chart.\n * If neither entry is hidden, this function returns the initial initiatorData object.\n */\nfunction getClosestVisibleInitiatorEntriesAncestors(\n    initiatorData: InitiatorData, expandableEntries: Trace.Types.Events.Event[],\n    hiddenEntries: Trace.Types.Events.Event[], parsedTrace: Trace.Handlers.Types.ParsedTrace): InitiatorData {\n  if (hiddenEntries.includes(initiatorData.event)) {\n    let nextParent = parsedTrace.Renderer.entryToNode.get(initiatorData.event)?.parent;\n    while (nextParent?.entry && !expandableEntries.includes(nextParent?.entry)) {\n      nextParent = nextParent.parent ?? undefined;\n    }\n    initiatorData.event = nextParent?.entry ?? initiatorData.event;\n    initiatorData.isEntryHidden = true;\n  }\n\n  if (hiddenEntries.includes(initiatorData.initiator)) {\n    let nextParent = parsedTrace.Renderer.entryToNode.get(initiatorData.initiator)?.parent;\n    while (nextParent?.entry && !expandableEntries.includes(nextParent?.entry)) {\n      nextParent = nextParent.parent ?? undefined;\n    }\n    initiatorData.initiator = nextParent?.entry ?? initiatorData.initiator;\n    initiatorData.isInitiatorHidden = true;\n  }\n\n  return initiatorData;\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright (c) 2015 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.timeline-flamechart-popover {\n  overflow: hidden;\n  /* extend padding into the parent element to avoid clipping the focus-visible outline. */\n  padding: 4px;\n  margin: -4px;\n}\n\n.timeline-flamechart-popover devtools-interaction-breakdown {\n  margin-top: 10px;\n}\n\n.timeline-flamechart-popover span {\n  margin-right: 5px;\n}\n\n.timeline-flamechart-popover span.popoverinfo-network-time {\n  color: var(--sys-color-primary);\n}\n\n.timeline-flamechart-popover span.popoverinfo-time {\n  color: var(--sys-color-green);\n}\n\n.timeline-flamechart-popover span.popoverinfo-warning {\n  color: var(--sys-color-error);\n}\n\n.timeline-flamechart-popover span.popoverinfo-url-path,\n.timeline-flamechart-popover span.popoverinfo-url-origin {\n  color: var(--sys-color-token-subtle);\n  font-size: 11px;\n}\n\n.timeline-flamechart-popover span.popoverinfo-url-origin {\n  font-style: italic;\n}\n\n.timeline-flamechart-popover span.popoverinfo-warning * {\n  color: inherit;\n}\n\n.layout-shift-viz {\n  position: relative;\n  margin: var(--sys-size-8) var(--sys-size-5);\n  outline: 1px solid var(--sys-color-divider);\n}\n\n.layout-shift-viz-rect {\n  outline: 1px solid color-mix(in srgb, var(--color-background-inverted) 20%, var(--app-color-rendering));\n  background-color: color-mix(in srgb, var(--color-background-inverted-opacity-0) 50%, var(--app-color-rendering-children));\n  position: absolute;\n  z-index: 100;\n}\n\n.layout-shift-viz > img {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n/*# sourceURL=${import.meta.resolve('./timelineFlamechartPopover.css')} */`;", "// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as CrUXManager from '../../models/crux-manager/crux-manager.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as TraceBounds from '../../services/trace_bounds/trace_bounds.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {getAnnotationEntries, getAnnotationWindow} from './AnnotationHelpers.js';\nimport type * as TimelineComponents from './components/components.js';\nimport * as TimelineInsights from './components/insights/insights.js';\nimport {CountersGraph} from './CountersGraph.js';\nimport {SHOULD_SHOW_EASTER_EGG} from './EasterEgg.js';\nimport {ModificationsManager} from './ModificationsManager.js';\nimport * as OverlayComponents from './overlays/components/components.js';\nimport * as Overlays from './overlays/overlays.js';\nimport {targetForEvent} from './TargetForEvent.js';\nimport {type Tab, TimelineDetailsPane} from './TimelineDetailsView.js';\nimport {TimelineRegExp} from './TimelineFilters.js';\nimport {\n  Events as TimelineFlameChartDataProviderEvents,\n  TimelineFlameChartDataProvider,\n} from './TimelineFlameChartDataProvider.js';\nimport {TimelineFlameChartNetworkDataProvider} from './TimelineFlameChartNetworkDataProvider.js';\nimport timelineFlameChartViewStyles from './timelineFlameChartView.css.js';\nimport type {TimelineModeViewDelegate} from './TimelinePanel.js';\nimport {\n  rangeForSelection,\n  selectionFromEvent,\n  selectionFromRangeMilliSeconds,\n  selectionIsEvent,\n  selectionIsRange,\n  selectionsEqual,\n  type TimelineSelection\n} from './TimelineSelection.js';\nimport {AggregatedTimelineTreeView, TimelineTreeView} from './TimelineTreeView.js';\nimport type {TimelineMarkerStyle} from './TimelineUIUtils.js';\nimport {keyForTraceConfig} from './TrackConfiguration.js';\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart View of the Performance panel\n   *@example {Frame} PH1\n   *@example {10ms} PH2\n   */\n  sAtS: '{PH1} at {PH2}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineFlameChartView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * This defines the order these markers will be rendered if they are at the\n * same timestamp. The smaller number will be shown first - e.g. so if NavigationStart, MarkFCP,\n * MarkLCPCandidate have the same timestamp, visually we\n * will render [Nav][FCP][DCL][LCP] everytime.\n */\nexport const SORT_ORDER_PAGE_LOAD_MARKERS: Readonly<Record<string, number>> = {\n  [Trace.Types.Events.Name.NAVIGATION_START]: 0,\n  [Trace.Types.Events.Name.MARK_LOAD]: 1,\n  [Trace.Types.Events.Name.MARK_FCP]: 2,\n  [Trace.Types.Events.Name.MARK_DOM_CONTENT]: 3,\n  [Trace.Types.Events.Name.MARK_LCP_CANDIDATE]: 4,\n};\n\n// Threshold to match up overlay markers that are off by a tiny amount so they aren't rendered\n// on top of each other.\nconst TIMESTAMP_THRESHOLD_MS = Trace.Types.Timing.Micro(10);\n\ninterface FlameChartDimmer {\n  active: boolean;\n  mainChartIndices: number[];\n  networkChartIndices: number[];\n  /** When true, the provided indices will be dimmed. When false, all others will be dimmed. */\n  inclusive: boolean;\n  /** When true, all undimmed entries are outlined. When a number array, only those indices are outlined (if not dimmed). */\n  outline: boolean|{main: number[] | boolean, network: number[]|boolean};\n}\n\nexport class TimelineFlameChartView extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(\n    UI.Widget.VBox) implements PerfUI.FlameChart.FlameChartDelegate, UI.SearchableView.Searchable {\n  private readonly delegate: TimelineModeViewDelegate;\n  /**\n   * Tracks the indexes of matched entries when the user searches the panel.\n   * Defaults to undefined which indicates the user has not searched.\n   */\n  private searchResults: PerfUI.FlameChart.DataProviderSearchResult[]|undefined = undefined;\n  private eventListeners: Common.EventTarget.EventDescriptor[];\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  private readonly networkSplitWidget: UI.SplitWidget.SplitWidget;\n  private mainDataProvider: TimelineFlameChartDataProvider;\n  private readonly mainFlameChart: PerfUI.FlameChart.FlameChart;\n  private networkDataProvider: TimelineFlameChartNetworkDataProvider;\n  private readonly networkFlameChart: PerfUI.FlameChart.FlameChart;\n  private readonly networkPane: UI.Widget.VBox;\n  private readonly splitResizer: HTMLElement;\n  private readonly chartSplitWidget: UI.SplitWidget.SplitWidget;\n  private brickGame?: PerfUI.BrickBreaker.BrickBreaker;\n  private readonly countersView: CountersGraph;\n  private readonly detailsSplitWidget: UI.SplitWidget.SplitWidget;\n  private readonly detailsView: TimelineDetailsPane;\n  private readonly onMainAddEntryLabelAnnotation: (event: Common.EventTarget.EventTargetEvent<{\n    entryIndex: number,\n    withLinkCreationButton: boolean,\n  }>) => void;\n  private readonly onNetworkAddEntryLabelAnnotation: (event: Common.EventTarget.EventTargetEvent<{\n    entryIndex: number,\n    withLinkCreationButton: boolean,\n  }>) => void;\n  readonly #onMainEntriesLinkAnnotationCreated:\n      (event: Common.EventTarget.EventTargetEvent<{entryFromIndex: number}>) => void;\n  readonly #onNetworkEntriesLinkAnnotationCreated:\n      (event: Common.EventTarget.EventTargetEvent<{entryFromIndex: number}>) => void;\n  private readonly onMainEntrySelected: (event: Common.EventTarget.EventTargetEvent<number>) => void;\n  private readonly onNetworkEntrySelected: (event: Common.EventTarget.EventTargetEvent<number>) => void;\n  readonly #boundRefreshAfterIgnoreList: () => void;\n  #selectedEvents: Trace.Types.Events.Event[]|null;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly groupBySetting: Common.Settings.Setting<any>;\n  private searchableView!: UI.SearchableView.SearchableView;\n  private needsResizeToPreferredHeights?: boolean;\n  private selectedSearchResult?: PerfUI.FlameChart.DataProviderSearchResult;\n  private searchRegex?: RegExp;\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace|null;\n  #traceMetadata: Trace.Types.File.MetaData|null;\n  #traceInsightSets: Trace.Insights.Types.TraceInsightSets|null = null;\n  #eventToRelatedInsightsMap: TimelineComponents.RelatedInsightChips.EventToRelatedInsightsMap|null = null;\n  #selectedGroupName: string|null = null;\n  #onTraceBoundsChangeBound = this.#onTraceBoundsChange.bind(this);\n  #gameKeyMatches = 0;\n  #gameTimeout = setTimeout(() => ({}), 0);\n\n  #overlaysContainer: HTMLElement = document.createElement('div');\n  #overlays: Overlays.Overlays.Overlays;\n\n  // Tracks the in-progress time range annotation when the user alt/option clicks + drags, or when the user uses the keyboard\n  #timeRangeSelectionAnnotation: Trace.Types.File.TimeRangeAnnotation|null = null;\n\n  // Keep track of the link annotation that hasn't been fully selected yet.\n  // We only store it here when only 'entryFrom' has been selected and\n  // 'EntryTo' selection still needs to be updated.\n  #linkSelectionAnnotation: Trace.Types.File.EntriesLinkAnnotation|null = null;\n\n  #currentInsightOverlays: Overlays.Overlays.TimelineOverlay[] = [];\n  #activeInsight: TimelineComponents.Sidebar.ActiveInsight|null = null;\n  #markers: Overlays.Overlays.TimingsMarker[] = [];\n\n  #tooltipElement = document.createElement('div');\n\n  // We use an symbol as the loggable for each group. This is because\n  // groups can get re-built at times and we need a common reference to act as\n  // the reference for each group that we log. By storing these symbols in\n  // a map keyed off the context of the group, we ensure we persist the\n  // loggable even if the group gets rebuilt at some point in time.\n  #loggableForGroupByLogContext = new Map<string, symbol>();\n\n  #onMainEntryInvoked: (event: Common.EventTarget.EventTargetEvent<number>) => void;\n  #onNetworkEntryInvoked: (event: Common.EventTarget.EventTargetEvent<number>) => void;\n  #currentSelection: TimelineSelection|null = null;\n  #entityMapper: Utils.EntityMapper.EntityMapper|null = null;\n\n  // Only one dimmer is used at a time. The first dimmer, as defined by the following\n  // order, that is `active` within this array is used.\n  #flameChartDimmers: FlameChartDimmer[] = [];\n  #searchDimmer = this.#registerFlameChartDimmer({inclusive: false, outline: true});\n  #treeRowHoverDimmer = this.#registerFlameChartDimmer({inclusive: false, outline: true});\n  #treeRowClickDimmer = this.#registerFlameChartDimmer({inclusive: false, outline: false});\n  #activeInsightDimmer = this.#registerFlameChartDimmer({inclusive: false, outline: true});\n  #thirdPartyCheckboxDimmer = this.#registerFlameChartDimmer({inclusive: true, outline: false});\n  /**\n   * Determines if we respect the user's prefers-reduced-motion setting. We\n   * absolutely should care about this; the only time we don't is in unit tests\n   * when we need to force animations on and don't want the environment to\n   * determine if they are on or not.\n   * It is not expected that this flag is ever disabled in non-test environments.\n   */\n  #checkReducedMotion = true;\n\n  /**\n   * Persist the visual configuration of the tracks/groups into memory.\n   */\n  #networkPersistedGroupConfigSetting: Common.Settings.Setting<PerfUI.FlameChart.PersistedConfigPerTrace>;\n  #mainPersistedGroupConfigSetting: Common.Settings.Setting<PerfUI.FlameChart.PersistedConfigPerTrace>;\n\n  constructor(delegate: TimelineModeViewDelegate) {\n    super();\n    this.registerRequiredCSS(timelineFlameChartViewStyles);\n    this.element.classList.add('timeline-flamechart');\n\n    this.delegate = delegate;\n    this.eventListeners = [];\n    this.#parsedTrace = null;\n    this.#traceMetadata = null;\n\n    const flameChartsContainer = new UI.Widget.VBox();\n    flameChartsContainer.element.classList.add('flame-charts-container');\n\n    // Create main and network flamecharts.\n    this.networkSplitWidget = new UI.SplitWidget.SplitWidget(false, false, 'timeline-flamechart-main-view', 150);\n    this.networkSplitWidget.show(flameChartsContainer.element);\n\n    this.#overlaysContainer.classList.add('timeline-overlays-container');\n    flameChartsContainer.element.appendChild(this.#overlaysContainer);\n\n    this.#tooltipElement.classList.add('timeline-entry-tooltip-element');\n    flameChartsContainer.element.appendChild(this.#tooltipElement);\n\n    // Ensure that the network panel & resizer appears above the main thread.\n    this.networkSplitWidget.sidebarElement().style.zIndex = '120';\n\n    this.#mainPersistedGroupConfigSetting =\n        Common.Settings.Settings.instance().createSetting<PerfUI.FlameChart.PersistedConfigPerTrace>(\n            'timeline-main-flame-group-config', {});\n\n    this.#networkPersistedGroupConfigSetting =\n        Common.Settings.Settings.instance().createSetting<PerfUI.FlameChart.PersistedConfigPerTrace>(\n            'timeline-network-flame-group-config', {});\n\n    this.mainDataProvider = new TimelineFlameChartDataProvider();\n    this.mainDataProvider.setPersistedGroupConfigSetting(this.#mainPersistedGroupConfigSetting);\n    this.mainDataProvider.addEventListener(\n        TimelineFlameChartDataProviderEvents.DATA_CHANGED, () => this.mainFlameChart.scheduleUpdate());\n    this.mainDataProvider.addEventListener(\n        TimelineFlameChartDataProviderEvents.FLAME_CHART_ITEM_HOVERED,\n        e => this.detailsView.revealEventInTreeView(e.data));\n\n    this.mainFlameChart = new PerfUI.FlameChart.FlameChart(this.mainDataProvider, this, {\n      // The TimelineOverlays are used for selected elements\n      selectedElementOutline: false,\n      tooltipElement: this.#tooltipElement,\n      useOverlaysForCursorRuler: true,\n    });\n    this.mainFlameChart.alwaysShowVerticalScroll();\n    this.mainFlameChart.enableRuler(false);\n\n    this.mainFlameChart.addEventListener(PerfUI.FlameChart.Events.LATEST_DRAW_DIMENSIONS, dimensions => {\n      this.#overlays.updateChartDimensions('main', dimensions.data.chart);\n      this.#overlays.updateVisibleWindow(dimensions.data.traceWindow);\n      void this.#overlays.update();\n    });\n\n    this.networkDataProvider = new TimelineFlameChartNetworkDataProvider();\n    this.networkDataProvider.setPersistedGroupConfigSetting(this.#networkPersistedGroupConfigSetting);\n    this.networkFlameChart = new PerfUI.FlameChart.FlameChart(this.networkDataProvider, this, {\n      // The TimelineOverlays are used for selected elements\n      selectedElementOutline: false,\n      tooltipElement: this.#tooltipElement,\n      useOverlaysForCursorRuler: true,\n    });\n    this.networkFlameChart.alwaysShowVerticalScroll();\n    this.networkFlameChart.addEventListener(PerfUI.FlameChart.Events.LATEST_DRAW_DIMENSIONS, dimensions => {\n      this.#overlays.updateChartDimensions('network', dimensions.data.chart);\n      this.#overlays.updateVisibleWindow(dimensions.data.traceWindow);\n      void this.#overlays.update();\n\n      // If the height of the network chart has changed, we need to tell the\n      // main flame chart because its tooltips are positioned based in part on\n      // the height of the network chart.\n      this.mainFlameChart.setTooltipYPixelAdjustment(this.#overlays.networkChartOffsetHeight());\n    });\n\n    this.mainFlameChart.addEventListener(PerfUI.FlameChart.Events.MOUSE_MOVE, event => {\n      void this.#processFlameChartMouseMoveEvent(event.data);\n    });\n\n    this.networkFlameChart.addEventListener(PerfUI.FlameChart.Events.MOUSE_MOVE, event => {\n      void this.#processFlameChartMouseMoveEvent(event.data);\n    });\n\n    this.#overlays = new Overlays.Overlays.Overlays({\n      container: this.#overlaysContainer,\n      flameChartsContainers: {\n        main: this.mainFlameChart.element,\n        network: this.networkFlameChart.element,\n      },\n      charts: {\n        mainChart: this.mainFlameChart,\n        mainProvider: this.mainDataProvider,\n        networkChart: this.networkFlameChart,\n        networkProvider: this.networkDataProvider,\n      },\n      entryQueries: {\n        parsedTrace: () => {\n          return this.#parsedTrace;\n        },\n        isEntryCollapsedByUser: (entry: Trace.Types.Events.Event): boolean => {\n          return ModificationsManager.activeManager()?.getEntriesFilter().entryIsInvisible(entry) ?? false;\n        },\n        firstVisibleParentForEntry(entry) {\n          return ModificationsManager.activeManager()?.getEntriesFilter().firstVisibleParentEntryForEntry(entry) ??\n              null;\n        },\n      },\n    });\n\n    this.#overlays.addEventListener(Overlays.Overlays.ConsentDialogVisibilityChange.eventName, e => {\n      const event = e as Overlays.Overlays.ConsentDialogVisibilityChange;\n      if (event.isVisible) {\n        // If the dialog is visible, we do not want anything in the performance\n        // panel capturing tab focus.\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert\n        this.element.setAttribute('inert', 'inert');\n      } else {\n        this.element.removeAttribute('inert');\n      }\n    });\n\n    this.#overlays.addEventListener(Overlays.Overlays.EntryLabelMouseClick.eventName, event => {\n      const {overlay} = (event as Overlays.Overlays.EntryLabelMouseClick);\n      this.dispatchEventToListeners(\n          Events.ENTRY_LABEL_ANNOTATION_CLICKED,\n          {\n            entry: overlay.entry,\n          },\n      );\n    });\n\n    this.#overlays.addEventListener(Overlays.Overlays.AnnotationOverlayActionEvent.eventName, event => {\n      const {overlay, action} = (event as Overlays.Overlays.AnnotationOverlayActionEvent);\n      if (action === 'Remove') {\n        // If the overlay removed is the current time range, set it to null so that\n        // we would create a new time range overlay and annotation on the next time range selection instead\n        // of trying to update the current overlay that does not exist.\n        if (ModificationsManager.activeManager()?.getAnnotationByOverlay(overlay) ===\n            this.#timeRangeSelectionAnnotation) {\n          this.#timeRangeSelectionAnnotation = null;\n        }\n        ModificationsManager.activeManager()?.removeAnnotationOverlay(overlay);\n      } else if (action === 'Update') {\n        ModificationsManager.activeManager()?.updateAnnotationOverlay(overlay);\n      }\n    });\n\n    this.element.addEventListener(OverlayComponents.EntriesLinkOverlay.EntryLinkStartCreating.eventName, () => {\n      /**\n       * When the user creates an entries link, they click on the arrow icon to\n       * begin creating it. At this point the arrow icon gets deleted. This\n       * causes the focus of the page by default to jump to the entire Timeline\n       * Panel. This is a bit aggressive; and problematic as it means we cannot\n       * use <ESC> to cancel the creation of the entry. So instead we focus the\n       * TimelineFlameChartView instead. This means that the user's <ESC> gets\n       * dealt with in its keydown.\n       * If the user goes ahead and creates the entry, they will end up\n       * focused on whichever target entry they pick, so this only matters for\n       * the case where the user hits <ESC> to cancel.\n       */\n      this.focus();\n    });\n\n    this.element.setAttribute('jslog', `${VisualLogging.section('timeline.flame-chart-view')}`);\n\n    this.networkPane = new UI.Widget.VBox();\n    this.networkPane.setMinimumSize(23, 23);\n    this.networkFlameChart.show(this.networkPane.element);\n    this.splitResizer = this.networkPane.element.createChild('div', 'timeline-flamechart-resizer');\n    this.networkSplitWidget.hideDefaultResizer(true);\n    this.networkSplitWidget.installResizer(this.splitResizer);\n    this.networkSplitWidget.setMainWidget(this.mainFlameChart);\n    this.networkSplitWidget.setSidebarWidget(this.networkPane);\n\n    // Create counters chart splitter.\n    this.chartSplitWidget = new UI.SplitWidget.SplitWidget(false, true, 'timeline-counters-split-view-state');\n    this.countersView = new CountersGraph(this.delegate);\n    this.chartSplitWidget.setMainWidget(flameChartsContainer);\n    this.chartSplitWidget.setSidebarWidget(this.countersView);\n    this.chartSplitWidget.hideDefaultResizer();\n    this.chartSplitWidget.installResizer((this.countersView.resizerElement() as Element));\n\n    // Create top level properties splitter.\n    this.detailsSplitWidget = new UI.SplitWidget.SplitWidget(false, true, 'timeline-panel-details-split-view-state');\n    this.detailsSplitWidget.element.classList.add('timeline-details-split');\n    this.detailsView = new TimelineDetailsPane(delegate);\n    this.detailsSplitWidget.installResizer(this.detailsView.headerElement());\n    this.detailsSplitWidget.setMainWidget(this.chartSplitWidget);\n    this.detailsSplitWidget.setSidebarWidget(this.detailsView);\n    this.detailsSplitWidget.show(this.element);\n\n    // Event listeners for annotations.\n    this.onMainAddEntryLabelAnnotation = this.onAddEntryLabelAnnotation.bind(this, this.mainDataProvider);\n    this.onNetworkAddEntryLabelAnnotation = this.onAddEntryLabelAnnotation.bind(this, this.networkDataProvider);\n    this.#onMainEntriesLinkAnnotationCreated = event =>\n        this.onEntriesLinkAnnotationCreate(this.mainDataProvider, event.data.entryFromIndex);\n    this.#onNetworkEntriesLinkAnnotationCreated = event =>\n        this.onEntriesLinkAnnotationCreate(this.networkDataProvider, event.data.entryFromIndex);\n    this.mainFlameChart.addEventListener(\n        PerfUI.FlameChart.Events.ENTRY_LABEL_ANNOTATION_ADDED, this.onMainAddEntryLabelAnnotation, this);\n    this.networkFlameChart.addEventListener(\n        PerfUI.FlameChart.Events.ENTRY_LABEL_ANNOTATION_ADDED, this.onNetworkAddEntryLabelAnnotation, this);\n\n    this.mainFlameChart.addEventListener(\n        PerfUI.FlameChart.Events.ENTRIES_LINK_ANNOTATION_CREATED, this.#onMainEntriesLinkAnnotationCreated, this);\n    this.networkFlameChart.addEventListener(\n        PerfUI.FlameChart.Events.ENTRIES_LINK_ANNOTATION_CREATED, this.#onNetworkEntriesLinkAnnotationCreated, this);\n\n    this.mainFlameChart.addEventListener(PerfUI.FlameChart.Events.TRACKS_REORDER_STATE_CHANGED, event => {\n      this.#overlays.toggleAllOverlaysDisplayed(!event.data);\n    });\n\n    this.detailsView.addEventListener(TimelineTreeView.Events.TREE_ROW_HOVERED, e => {\n      if (e.data.events) {\n        this.#updateFlameChartDimmerWithEvents(this.#treeRowHoverDimmer, e.data.events);\n        return;\n      }\n      const events = e?.data?.node?.events ?? null;\n      this.#updateFlameChartDimmerWithEvents(this.#treeRowHoverDimmer, events);\n    });\n\n    this.detailsView.addEventListener(TimelineTreeView.Events.TREE_ROW_CLICKED, e => {\n      if (e.data.events) {\n        this.#updateFlameChartDimmerWithEvents(this.#treeRowClickDimmer, e.data.events);\n        return;\n      }\n      const events = e?.data?.node?.events ?? null;\n      this.#updateFlameChartDimmerWithEvents(this.#treeRowClickDimmer, events);\n    });\n\n    /**\n     * NOTE: ENTRY_SELECTED, ENTRY_INVOKED and ENTRY_HOVERED are not always super obvious:\n     * ENTRY_SELECTED: is KEYBOARD ONLY selection of events (e.g. navigating through the flamechart with your arrow keys)\n     * ENTRY_HOVERED: is MOUSE ONLY when an event is hovered over with the mouse.\n     * ENTRY_INVOKED: is when the user clicks on an event, or hits the \"enter\" key whilst an event is selected.\n     */\n    this.onMainEntrySelected = this.onEntrySelected.bind(this, this.mainDataProvider);\n    this.onNetworkEntrySelected = this.onEntrySelected.bind(this, this.networkDataProvider);\n    this.mainFlameChart.addEventListener(PerfUI.FlameChart.Events.ENTRY_SELECTED, this.onMainEntrySelected, this);\n    this.networkFlameChart.addEventListener(PerfUI.FlameChart.Events.ENTRY_SELECTED, this.onNetworkEntrySelected, this);\n\n    this.#onMainEntryInvoked = this.#onEntryInvoked.bind(this, this.mainDataProvider);\n    this.#onNetworkEntryInvoked = this.#onEntryInvoked.bind(this, this.networkDataProvider);\n    this.mainFlameChart.addEventListener(PerfUI.FlameChart.Events.ENTRY_INVOKED, this.#onMainEntryInvoked, this);\n    this.networkFlameChart.addEventListener(PerfUI.FlameChart.Events.ENTRY_INVOKED, this.#onNetworkEntryInvoked, this);\n\n    this.mainFlameChart.addEventListener(PerfUI.FlameChart.Events.ENTRY_HOVERED, event => {\n      this.onEntryHovered(event);\n      this.updateLinkSelectionAnnotationWithToEntry(this.mainDataProvider, event.data);\n    }, this);\n    this.networkFlameChart.addEventListener(PerfUI.FlameChart.Events.ENTRY_HOVERED, event => {\n      this.updateLinkSelectionAnnotationWithToEntry(this.networkDataProvider, event.data);\n    }, this);\n\n    // This listener is used for timings marker, when they are clicked, open the details view for them. They are\n    // rendered in the overlays system, not in flame chart (canvas), so need this extra handling.\n    this.#overlays.addEventListener(Overlays.Overlays.EventReferenceClick.eventName, event => {\n      const eventRef = (event as Overlays.Overlays.EventReferenceClick);\n      const fromTraceEvent = selectionFromEvent(eventRef.event);\n      this.openSelectionDetailsView(fromTraceEvent);\n    });\n\n    // This is for the detail view of layout shift.\n    this.element.addEventListener(TimelineInsights.EventRef.EventReferenceClick.eventName, event => {\n      this.setSelectionAndReveal(selectionFromEvent(event.event));\n    });\n\n    this.element.addEventListener('keydown', this.#keydownHandler.bind(this));\n    this.element.addEventListener('pointerdown', this.#pointerDownHandler.bind(this));\n    this.#boundRefreshAfterIgnoreList = this.#refreshAfterIgnoreList.bind(this);\n    this.#selectedEvents = null;\n\n    this.groupBySetting = Common.Settings.Settings.instance().createSetting(\n        'timeline-tree-group-by', AggregatedTimelineTreeView.GroupBy.None);\n    this.groupBySetting.addChangeListener(this.refreshMainFlameChart, this);\n    this.refreshMainFlameChart();\n\n    TraceBounds.TraceBounds.onChange(this.#onTraceBoundsChangeBound);\n  }\n\n  containingElement(): HTMLElement {\n    return this.element;\n  }\n\n  // Activates or disables dimming when setting is toggled.\n  dimThirdPartiesIfRequired(): void {\n    if (!this.#parsedTrace) {\n      return;\n    }\n    const dim = Common.Settings.Settings.instance().createSetting('timeline-dim-third-parties', false).get();\n    const thirdPartyEvents = this.#entityMapper?.thirdPartyEvents() ?? [];\n    if (dim && thirdPartyEvents.length) {\n      this.#updateFlameChartDimmerWithEvents(this.#thirdPartyCheckboxDimmer, thirdPartyEvents);\n    } else {\n      this.#updateFlameChartDimmerWithEvents(this.#thirdPartyCheckboxDimmer, null);\n    }\n  }\n\n  #registerFlameChartDimmer(opts: {inclusive: boolean, outline: boolean}): FlameChartDimmer {\n    const dimmer: FlameChartDimmer = {\n      active: false,\n      mainChartIndices: [],\n      networkChartIndices: [],\n      inclusive: opts.inclusive,\n      outline: opts.outline\n    };\n    this.#flameChartDimmers.push(dimmer);\n    return dimmer;\n  }\n\n  #updateFlameChartDimmerWithEvents(dimmer: FlameChartDimmer, events: Trace.Types.Events.Event[]|null): void {\n    if (events) {\n      dimmer.active = true;\n      dimmer.mainChartIndices = events.map(event => this.mainDataProvider.indexForEvent(event) ?? -1);\n      dimmer.networkChartIndices = events.map(event => this.networkDataProvider.indexForEvent(event) ?? -1);\n    } else {\n      dimmer.active = false;\n      dimmer.mainChartIndices = [];\n      dimmer.networkChartIndices = [];\n    }\n\n    this.#refreshDimming();\n  }\n\n  #updateFlameChartDimmerWithIndices(\n      dimmer: FlameChartDimmer, mainChartIndices: number[], networkChartIndices: number[]): void {\n    dimmer.active = true;\n    dimmer.mainChartIndices = mainChartIndices;\n    dimmer.networkChartIndices = networkChartIndices;\n\n    this.#refreshDimming();\n  }\n\n  #refreshDimming(): void {\n    const dimmer = this.#flameChartDimmers.find(dimmer => dimmer.active);\n\n    // This checkbox should only be enabled if its dimmer is being used.\n    this.delegate.set3PCheckboxDisabled(Boolean(dimmer && dimmer !== this.#thirdPartyCheckboxDimmer));\n\n    if (!dimmer) {\n      this.mainFlameChart.disableDimming();\n      this.networkFlameChart.disableDimming();\n      return;\n    }\n\n    const mainOutline = typeof dimmer.outline === 'boolean' ? dimmer.outline : dimmer.outline.main;\n    const networkOutline = typeof dimmer.outline === 'boolean' ? dimmer.outline : dimmer.outline.network;\n\n    this.mainFlameChart.enableDimming(dimmer.mainChartIndices, dimmer.inclusive, mainOutline);\n    this.networkFlameChart.enableDimming(dimmer.networkChartIndices, dimmer.inclusive, networkOutline);\n  }\n\n  #dimInsightRelatedEvents(relatedEvents: Trace.Types.Events.Event[]): void {\n    // Dim all events except those related to the active insight.\n    const relatedMainIndices = relatedEvents.map(event => this.mainDataProvider.indexForEvent(event) ?? -1);\n    const relatedNetworkIndices = relatedEvents.map(event => this.networkDataProvider.indexForEvent(event) ?? -1);\n\n    // Only outline the events that are individually/specifically identified as being related. Don't outline\n    // the events covered by range overlays.\n    this.#activeInsightDimmer.outline = {\n      main: [...relatedMainIndices],\n      network: [...relatedNetworkIndices],\n    };\n\n    // Further, overlays defining a trace bounds do not dim an event that falls within those bounds.\n    for (const overlay of this.#currentInsightOverlays) {\n      let bounds;\n      if (overlay.type === 'TIMESPAN_BREAKDOWN') {\n        const firstSection = overlay.sections.at(0);\n        const lastSection = overlay.sections.at(-1);\n        if (firstSection && lastSection) {\n          bounds = Trace.Helpers.Timing.traceWindowFromMicroSeconds(firstSection.bounds.min, lastSection.bounds.max);\n        }\n      } else if (overlay.type === 'TIME_RANGE') {\n        bounds = overlay.bounds;\n      }\n\n      if (!bounds) {\n        continue;\n      }\n\n      let provider, relevantEvents;\n\n      // Using a relevant event for the overlay, determine which provider this overlay is for.\n      const overlayEvent = Overlays.Overlays.entriesForOverlay(overlay).at(0);\n      if (overlayEvent) {\n        if (this.mainDataProvider.indexForEvent(overlayEvent) !== null) {\n          provider = this.mainDataProvider;\n          relevantEvents = relatedMainIndices;\n        } else if (this.networkDataProvider.indexForEvent(overlayEvent) !== null) {\n          provider = this.networkDataProvider;\n          relevantEvents = relatedNetworkIndices;\n        }\n      } else if (overlay.type === 'TIMESPAN_BREAKDOWN') {\n        // For this overlay type, if there is no associated event it is rendered on mainFlameChart.\n        provider = this.mainDataProvider;\n        relevantEvents = relatedMainIndices;\n      }\n\n      if (!provider || !relevantEvents) {\n        continue;\n      }\n\n      relevantEvents.push(...provider.search(bounds).map(r => r.index));\n    }\n\n    this.#updateFlameChartDimmerWithIndices(this.#activeInsightDimmer, relatedMainIndices, relatedNetworkIndices);\n  }\n\n  #sortMarkersForPreferredVisualOrder(markers: Trace.Types.Events.Event[]): void {\n    markers.sort((m1, m2) => {\n      const m1Index = SORT_ORDER_PAGE_LOAD_MARKERS[m1.name] ?? Infinity;\n      const m2Index = SORT_ORDER_PAGE_LOAD_MARKERS[m2.name] ?? Infinity;\n      return m1Index - m2Index;\n    });\n  }\n\n  #amendMarkerWithFieldData(): void {\n    if (!this.#traceMetadata?.cruxFieldData || !this.#traceInsightSets) {\n      return;\n    }\n\n    const fieldMetricResultsByNavigationId = new Map<string, Trace.Insights.Common.CrUXFieldMetricResults|null>();\n    for (const [key, insightSet] of this.#traceInsightSets) {\n      if (insightSet.navigation) {\n        fieldMetricResultsByNavigationId.set(\n            key,\n            Trace.Insights.Common.getFieldMetricsForInsightSet(\n                insightSet, this.#traceMetadata, CrUXManager.CrUXManager.instance().getSelectedScope()));\n      }\n    }\n\n    for (const marker of this.#markers) {\n      for (const event of marker.entries) {\n        const navigationId = event.args?.data?.navigationId;\n        if (!navigationId) {\n          continue;\n        }\n\n        const fieldMetricResults = fieldMetricResultsByNavigationId.get(navigationId);\n        if (!fieldMetricResults) {\n          continue;\n        }\n\n        let fieldMetricResult;\n        if (event.name === Trace.Types.Events.Name.MARK_FCP) {\n          fieldMetricResult = fieldMetricResults.fcp;\n        } else if (event.name === Trace.Types.Events.Name.MARK_LCP_CANDIDATE) {\n          fieldMetricResult = fieldMetricResults.lcp;\n        }\n\n        if (!fieldMetricResult) {\n          continue;\n        }\n\n        marker.entryToFieldResult.set(event, fieldMetricResult);\n      }\n    }\n  }\n\n  setMarkers(parsedTrace: Trace.Handlers.Types.ParsedTrace|null): void {\n    if (!parsedTrace) {\n      return;\n    }\n    // Clear out any markers.\n    this.bulkRemoveOverlays(this.#markers);\n    const markerEvents = parsedTrace.PageLoadMetrics.allMarkerEvents;\n    // Set markers for Navigations, LCP, FCP, DCL, L.\n    const markers = markerEvents.filter(\n        event => event.name === Trace.Types.Events.Name.NAVIGATION_START ||\n            event.name === Trace.Types.Events.Name.MARK_LCP_CANDIDATE ||\n            event.name === Trace.Types.Events.Name.MARK_FCP ||\n            event.name === Trace.Types.Events.Name.MARK_DOM_CONTENT ||\n            event.name === Trace.Types.Events.Name.MARK_LOAD);\n\n    this.#sortMarkersForPreferredVisualOrder(markers);\n    const overlayByTs = new Map<Trace.Types.Timing.Micro, Overlays.Overlays.TimingsMarker>();\n    markers.forEach(marker => {\n      const adjustedTimestamp = Trace.Helpers.Timing.timeStampForEventAdjustedByClosestNavigation(\n          marker,\n          parsedTrace.Meta.traceBounds,\n          parsedTrace.Meta.navigationsByNavigationId,\n          parsedTrace.Meta.navigationsByFrameId,\n      );\n      // If any of the markers overlap in timing, lets put them on the same marker.\n      let matchingOverlay = false;\n      for (const [ts, overlay] of overlayByTs.entries()) {\n        if (Math.abs(marker.ts - ts) <= TIMESTAMP_THRESHOLD_MS) {\n          overlay.entries.push(marker);\n          matchingOverlay = true;\n          break;\n        }\n      }\n      if (!matchingOverlay) {\n        const overlay: Overlays.Overlays.TimingsMarker = {\n          type: 'TIMINGS_MARKER',\n          entries: [marker],\n          entryToFieldResult: new Map(),\n          adjustedTimestamp,\n        };\n        overlayByTs.set(marker.ts, overlay);\n      }\n    });\n    const markerOverlays: Overlays.Overlays.TimingsMarker[] = [...overlayByTs.values()];\n    this.#markers = markerOverlays;\n    if (this.#markers.length === 0) {\n      return;\n    }\n\n    this.#amendMarkerWithFieldData();\n    this.bulkAddOverlays(this.#markers);\n  }\n\n  setOverlays(overlays: Overlays.Overlays.TimelineOverlay[], options: Overlays.Overlays.TimelineOverlaySetOptions):\n      void {\n    this.bulkRemoveOverlays(this.#currentInsightOverlays);\n\n    this.#currentInsightOverlays = overlays;\n    if (this.#currentInsightOverlays.length === 0) {\n      return;\n    }\n\n    const traceBounds = TraceBounds.TraceBounds.BoundsManager.instance().state()?.micro.entireTraceBounds;\n    if (!traceBounds) {\n      return;\n    }\n\n    this.bulkAddOverlays(this.#currentInsightOverlays);\n\n    const entries: Trace.Types.Events.Event[] = [];\n    for (const overlay of this.#currentInsightOverlays) {\n      entries.push(...Overlays.Overlays.entriesForOverlay(overlay));\n    }\n\n    // The insight's `relatedEvents` property likely already includes the events associated with\n    // an overlay, but just in case not, include both arrays. Duplicates are fine.\n    let relatedEventsList = this.#activeInsight?.model.relatedEvents;\n    if (!relatedEventsList) {\n      relatedEventsList = [];\n    } else if (relatedEventsList instanceof Map) {\n      relatedEventsList = Array.from(relatedEventsList.keys());\n    }\n    this.#dimInsightRelatedEvents([...entries, ...relatedEventsList]);\n\n    if (options.updateTraceWindow) {\n      // We should only expand the entry track when we are updating the trace window\n      // (eg. when insight cards are initially opened).\n      // Otherwise the track will open when not intending to.\n      for (const entry of entries) {\n        // Ensure that the track for the entries are open.\n        this.#expandEntryTrack(entry);\n      }\n      const overlaysBounds = Overlays.Overlays.traceWindowContainingOverlays(this.#currentInsightOverlays);\n      if (overlaysBounds) {\n        // Trace window covering all overlays expanded by 50% so that the overlays cover 2/3 (100/150) of the visible window. (Or use provided override)\n        const percentage = options.updateTraceWindowPercentage ?? 50;\n        const expandedBounds =\n            Trace.Helpers.Timing.expandWindowByPercentOrToOneMillisecond(overlaysBounds, traceBounds, percentage);\n\n        // Set the timeline visible window and ignore the minimap bounds. This\n        // allows us to pick a visible window even if the overlays are outside of\n        // the current breadcrumb. If this happens, the event listener for\n        // BoundsManager changes in TimelineMiniMap will detect it and activate\n        // the correct breadcrumb for us.\n        TraceBounds.TraceBounds.BoundsManager.instance().setTimelineVisibleWindow(\n            expandedBounds, {ignoreMiniMapBounds: true, shouldAnimate: true});\n      }\n    }\n\n    // Reveal entry if we have one.\n    if (entries.length !== 0) {\n      const earliestEntry =\n          entries.reduce((earliest, current) => (earliest.ts < current.ts ? earliest : current), entries[0]);\n      this.revealEventVertically(earliestEntry);\n    }\n  }\n\n  revealAnnotation(annotation: Trace.Types.File.Annotation): void {\n    const traceBounds = TraceBounds.TraceBounds.BoundsManager.instance().state()?.micro.entireTraceBounds;\n    if (!traceBounds) {\n      return;\n    }\n\n    const annotationWindow = getAnnotationWindow(annotation);\n    if (!annotationWindow) {\n      return;\n    }\n\n    const annotationEntries = getAnnotationEntries(annotation);\n\n    for (const entry of annotationEntries) {\n      this.#expandEntryTrack(entry);\n    }\n    const firstEntry = annotationEntries.at(0);\n    if (firstEntry) {\n      this.revealEventVertically(firstEntry);\n    }\n\n    // Trace window covering all overlays expanded by 100% so that the overlays cover 50% of the visible window.\n    const expandedBounds =\n        Trace.Helpers.Timing.expandWindowByPercentOrToOneMillisecond(annotationWindow, traceBounds, 100);\n    TraceBounds.TraceBounds.BoundsManager.instance().setTimelineVisibleWindow(\n        expandedBounds, {ignoreMiniMapBounds: true, shouldAnimate: true});\n  }\n\n  setActiveInsight(insight: TimelineComponents.Sidebar.ActiveInsight|null): void {\n    this.#activeInsight = insight;\n    this.bulkRemoveOverlays(this.#currentInsightOverlays);\n\n    if (!this.#activeInsight) {\n      this.#updateFlameChartDimmerWithEvents(this.#activeInsightDimmer, null);\n    }\n  }\n\n  /**\n   * Expands the track / group that the given entry is in.\n   */\n  #expandEntryTrack(entry: Trace.Types.Events.Event): void {\n    const chartName = Overlays.Overlays.chartForEntry(entry);\n    const provider = chartName === 'main' ? this.mainDataProvider : this.networkDataProvider;\n    const entryChart = chartName === 'main' ? this.mainFlameChart : this.networkFlameChart;\n\n    const entryIndex = provider.indexForEvent?.(entry) ?? null;\n    if (entryIndex === null) {\n      return;\n    }\n\n    const group = provider.groupForEvent?.(entryIndex) ?? null;\n    if (!group) {\n      return;\n    }\n    const groupIndex = provider.timelineData().groups.indexOf(group);\n\n    if (!group.expanded && groupIndex > -1) {\n      entryChart.toggleGroupExpand(groupIndex);\n    }\n  }\n\n  addTimestampMarkerOverlay(timestamp: Trace.Types.Timing.Micro): void {\n    // TIMESTAMP_MARKER is a singleton. If one already exists, it will\n    // be updated instead of creating a new one.\n    this.addOverlay({\n      type: 'TIMESTAMP_MARKER',\n      timestamp,\n    });\n  }\n\n  async removeTimestampMarkerOverlay(): Promise<void> {\n    const removedCount = this.#overlays.removeOverlaysOfType('TIMESTAMP_MARKER');\n    if (removedCount > 0) {\n      // Don't trigger lots of updates on a mouse move if we didn't actually\n      // remove any overlays.\n      await this.#overlays.update();\n    }\n  }\n\n  async #processFlameChartMouseMoveEvent(data: PerfUI.FlameChart.EventTypes['MouseMove']): Promise<void> {\n    const {mouseEvent, timeInMicroSeconds} = data;\n    // If the user is no longer holding shift, remove any existing marker.\n    if (!mouseEvent.shiftKey) {\n      await this.removeTimestampMarkerOverlay();\n    }\n\n    if (!mouseEvent.metaKey && mouseEvent.shiftKey) {\n      this.addTimestampMarkerOverlay(timeInMicroSeconds);\n    }\n  }\n\n  #pointerDownHandler(event: PointerEvent): void {\n    /**\n     * If the user is in the middle of creating an entry link annotation and\n     * right clicks, let's take that as a sign to exit and cancel.\n     * (buttons === 2 indicates a right click)\n     */\n    if (event.buttons === 2 && this.#linkSelectionAnnotation) {\n      this.#clearLinkSelectionAnnotation(true);\n      event.stopPropagation();\n    }\n  }\n\n  #clearLinkSelectionAnnotation(deleteCurrentLink: boolean): void {\n    if (this.#linkSelectionAnnotation === null) {\n      return;\n    }\n    // If the link in progress in cleared, make sure it's creation is complete. If not, delete it.\n    if (deleteCurrentLink || this.#linkSelectionAnnotation.state !== Trace.Types.File.EntriesLinkState.CONNECTED) {\n      ModificationsManager.activeManager()?.removeAnnotation(this.#linkSelectionAnnotation);\n    }\n    this.mainFlameChart.setLinkSelectionAnnotationIsInProgress(false);\n    this.networkFlameChart.setLinkSelectionAnnotationIsInProgress(false);\n    this.#linkSelectionAnnotation = null;\n  }\n\n  #setLinkSelectionAnnotation(linkSelectionAnnotation: Trace.Types.File.EntriesLinkAnnotation): void {\n    this.mainFlameChart.setLinkSelectionAnnotationIsInProgress(true);\n    this.networkFlameChart.setLinkSelectionAnnotationIsInProgress(true);\n    this.#linkSelectionAnnotation = linkSelectionAnnotation;\n  }\n\n  #createNewTimeRangeFromKeyboard(startTime: Trace.Types.Timing.Micro, endTime: Trace.Types.Timing.Micro): void {\n    if (this.#timeRangeSelectionAnnotation) {\n      return;\n    }\n\n    this.#timeRangeSelectionAnnotation = {\n      bounds: Trace.Helpers.Timing.traceWindowFromMicroSeconds(startTime, endTime),\n      type: 'TIME_RANGE',\n      label: '',\n    };\n    ModificationsManager.activeManager()?.createAnnotation(this.#timeRangeSelectionAnnotation);\n  }\n\n  /**\n   * Handles key presses that could impact the creation of a time range overlay with the keyboard.\n   * @returns `true` if the event should not be propogated + have its default behaviour stopped.\n   */\n  #handleTimeRangeKeyboardCreation(event: KeyboardEvent): boolean {\n    const visibleWindow = TraceBounds.TraceBounds.BoundsManager.instance().state()?.micro.timelineTraceWindow;\n    if (!visibleWindow) {\n      return false;\n    }\n\n    // The amount we increment the time range by when using the arrow keys is\n    // 2% of the visible window.\n    const timeRangeIncrementValue = visibleWindow.range * 0.02;\n\n    switch (event.key) {\n      // ArrowLeft + ArrowRight adjusts the right hand bound (the max) of the time range\n      // alt/option + ArrowRight also starts a range if there isn't one already\n      case 'ArrowRight': {\n        if (!this.#timeRangeSelectionAnnotation) {\n          if (event.altKey) {\n            let startTime = visibleWindow.min;\n            // Prefer the start time of the selected event, if there is one.\n            if (this.#currentSelection) {\n              startTime = rangeForSelection(this.#currentSelection).min;\n            }\n            this.#createNewTimeRangeFromKeyboard(\n                startTime, Trace.Types.Timing.Micro(startTime + timeRangeIncrementValue));\n            return true;\n          }\n          return false;\n        }\n\n        // Grow the RHS of the range, but limit it to the visible window.\n        this.#timeRangeSelectionAnnotation.bounds.max = Trace.Types.Timing.Micro(\n            Math.min(this.#timeRangeSelectionAnnotation.bounds.max + timeRangeIncrementValue, visibleWindow.max),\n        );\n        this.#timeRangeSelectionAnnotation.bounds.range = Trace.Types.Timing.Micro(\n            this.#timeRangeSelectionAnnotation.bounds.max - this.#timeRangeSelectionAnnotation.bounds.min,\n        );\n        ModificationsManager.activeManager()?.updateAnnotation(this.#timeRangeSelectionAnnotation);\n        return true;\n      }\n      case 'ArrowLeft': {\n        if (!this.#timeRangeSelectionAnnotation) {\n          return false;\n        }\n        this.#timeRangeSelectionAnnotation.bounds.max = Trace.Types.Timing.Micro(\n            // Shrink the RHS of the range, but make sure it cannot go below the min value.\n            Math.max(\n                this.#timeRangeSelectionAnnotation.bounds.max - timeRangeIncrementValue,\n                this.#timeRangeSelectionAnnotation.bounds.min + 1),\n        );\n        this.#timeRangeSelectionAnnotation.bounds.range = Trace.Types.Timing.Micro(\n            this.#timeRangeSelectionAnnotation.bounds.max - this.#timeRangeSelectionAnnotation.bounds.min,\n        );\n        ModificationsManager.activeManager()?.updateAnnotation(this.#timeRangeSelectionAnnotation);\n        return true;\n      }\n        // ArrowDown + ArrowUp adjusts the left hand bound (the min) of the time range\n      case 'ArrowUp': {\n        if (!this.#timeRangeSelectionAnnotation) {\n          return false;\n        }\n        this.#timeRangeSelectionAnnotation.bounds.min = Trace.Types.Timing.Micro(\n            // Increase the LHS of the range, but make sure it cannot go above the max value.\n            Math.min(\n                this.#timeRangeSelectionAnnotation.bounds.min + timeRangeIncrementValue,\n                this.#timeRangeSelectionAnnotation.bounds.max - 1),\n        );\n        this.#timeRangeSelectionAnnotation.bounds.range = Trace.Types.Timing.Micro(\n            this.#timeRangeSelectionAnnotation.bounds.max - this.#timeRangeSelectionAnnotation.bounds.min,\n        );\n        ModificationsManager.activeManager()?.updateAnnotation(this.#timeRangeSelectionAnnotation);\n        return true;\n      }\n      case 'ArrowDown': {\n        if (!this.#timeRangeSelectionAnnotation) {\n          return false;\n        }\n        this.#timeRangeSelectionAnnotation.bounds.min = Trace.Types.Timing.Micro(\n            // Decrease the LHS, but make sure it cannot go beyond the minimum visible window.\n            Math.max(this.#timeRangeSelectionAnnotation.bounds.min - timeRangeIncrementValue, visibleWindow.min),\n        );\n        this.#timeRangeSelectionAnnotation.bounds.range = Trace.Types.Timing.Micro(\n            this.#timeRangeSelectionAnnotation.bounds.max - this.#timeRangeSelectionAnnotation.bounds.min,\n        );\n        ModificationsManager.activeManager()?.updateAnnotation(this.#timeRangeSelectionAnnotation);\n        return true;\n      }\n      default: {\n        // If we get any other key, we take that as a sign the user is done. Most likely the keys come from them typing into the label :)\n        // If they do not type into the label, then the time range is not created.\n        this.#timeRangeSelectionAnnotation = null;\n\n        return false;\n      }\n    }\n  }\n\n  #keydownHandler(event: KeyboardEvent): void {\n    const keyCombo = 'fixme';\n\n    // `CREATION_NOT_STARTED` is only true in the state when both empty label and button to create connection are\n    // created at the same time. If any key is typed in that state, it means that the label is in focus and the key\n    // is typed into the label. This tells us that the user chose to create the\n    // label, not the connection. In that case, delete the connection.\n    if (this.#linkSelectionAnnotation &&\n        this.#linkSelectionAnnotation.state === Trace.Types.File.EntriesLinkState.CREATION_NOT_STARTED) {\n      this.#clearLinkSelectionAnnotation(true);\n      // We have dealt with the keypress as the user is typing into the label, so do not let it propogate up.\n      // This also ensures that if the user uses \"Escape\" they don't toggle the DevTools drawer.\n      event.stopPropagation();\n    }\n\n    /**\n     * If the user is in the middle of creating an entry link and hits Esc,\n     * cancel and clear out the pending annotation.\n     */\n    if (event.key === 'Escape' && this.#linkSelectionAnnotation) {\n      this.#clearLinkSelectionAnnotation(true);\n      event.stopPropagation();\n      event.preventDefault();\n    }\n\n    const eventHandledByKeyboardTimeRange = this.#handleTimeRangeKeyboardCreation(event);\n    if (eventHandledByKeyboardTimeRange) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    if (event.key === keyCombo[this.#gameKeyMatches]) {\n      this.#gameKeyMatches++;\n      clearTimeout(this.#gameTimeout);\n      this.#gameTimeout = setTimeout(() => {\n        this.#gameKeyMatches = 0;\n      }, 2000);\n    } else {\n      this.#gameKeyMatches = 0;\n      clearTimeout(this.#gameTimeout);\n    }\n    if (this.#gameKeyMatches !== keyCombo.length) {\n      return;\n    }\n    this.runBrickBreakerGame();\n  }\n\n  forceAnimationsForTest(): void {\n    this.#checkReducedMotion = false;\n  }\n  runBrickBreakerGame(): void {\n    if (!SHOULD_SHOW_EASTER_EGG) {\n      return;\n    }\n    if ([...this.element.childNodes].find(child => child instanceof PerfUI.BrickBreaker.BrickBreaker)) {\n      return;\n    }\n    this.brickGame = new PerfUI.BrickBreaker.BrickBreaker(this.mainFlameChart);\n    this.brickGame.classList.add('brick-game');\n    this.element.append(this.brickGame);\n  }\n\n  #onTraceBoundsChange(event: TraceBounds.TraceBounds.StateChangedEvent): void {\n    if (event.updateType === 'MINIMAP_BOUNDS') {\n      // If the update type was a changing of the minimap bounds, we do not\n      // need to redraw the timeline.\n      return;\n    }\n\n    const visibleWindow = event.state.milli.timelineTraceWindow;\n\n    // If the user has set a preference for reduced motion, we disable any animations.\n    const userHasReducedMotionSet = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n    const shouldAnimate =\n        Boolean(event.options.shouldAnimate) && (this.#checkReducedMotion ? !userHasReducedMotionSet : true);\n\n    this.mainFlameChart.setWindowTimes(visibleWindow.min, visibleWindow.max, shouldAnimate);\n    this.networkDataProvider.setWindowTimes(visibleWindow.min, visibleWindow.max);\n    this.networkFlameChart.setWindowTimes(visibleWindow.min, visibleWindow.max, shouldAnimate);\n    // Updating search results can be very expensive. Debounce to avoid over-calling it.\n    const debouncedUpdate = Common.Debouncer.debounce(() => {\n      this.updateSearchResults(false, false);\n    }, 100);\n    debouncedUpdate();\n  }\n\n  getLinkSelectionAnnotation(): Trace.Types.File.EntriesLinkAnnotation|null {\n    return this.#linkSelectionAnnotation;\n  }\n\n  getMainDataProvider(): TimelineFlameChartDataProvider {\n    return this.mainDataProvider;\n  }\n\n  getNetworkDataProvider(): TimelineFlameChartNetworkDataProvider {\n    return this.networkDataProvider;\n  }\n\n  refreshMainFlameChart(): void {\n    this.mainFlameChart.update();\n  }\n\n  windowChanged(windowStartTime: Trace.Types.Timing.Milli, windowEndTime: Trace.Types.Timing.Milli, animate: boolean):\n      void {\n    TraceBounds.TraceBounds.BoundsManager.instance().setTimelineVisibleWindow(\n        Trace.Helpers.Timing.traceWindowFromMilliSeconds(\n            Trace.Types.Timing.Milli(windowStartTime),\n            Trace.Types.Timing.Milli(windowEndTime),\n            ),\n        {shouldAnimate: animate},\n    );\n  }\n\n  /**\n   * @param startTime - the start time of the selection in MilliSeconds\n   * @param endTime - the end time of the selection in MilliSeconds\n   * TODO(crbug.com/346312365): update the type definitions in ChartViewport.ts\n   */\n  updateRangeSelection(startTime: number, endTime: number): void {\n    this.delegate.select(\n        selectionFromRangeMilliSeconds(Trace.Types.Timing.Milli(startTime), Trace.Types.Timing.Milli(endTime)));\n\n    // We need to check if the user is updating the range because they are\n    // creating a time range annotation.\n    const bounds = Trace.Helpers.Timing.traceWindowFromMilliSeconds(\n        Trace.Types.Timing.Milli(startTime),\n        Trace.Types.Timing.Milli(endTime),\n    );\n\n    // If the current time range annotation exists, the range selection\n    // for it is in progress and we need to update its bounds.\n    //\n    // When the range selection is finished, the current range is set to null.\n    // If the current selection is null, create a new time range annotations.\n    if (this.#timeRangeSelectionAnnotation) {\n      this.#timeRangeSelectionAnnotation.bounds = bounds;\n      ModificationsManager.activeManager()?.updateAnnotation(this.#timeRangeSelectionAnnotation);\n    } else {\n      this.#timeRangeSelectionAnnotation = {\n        type: 'TIME_RANGE',\n        label: '',\n        bounds,\n      };\n      // Before creating a new range, make sure to delete the empty ranges.\n      ModificationsManager.activeManager()?.deleteEmptyRangeAnnotations();\n      ModificationsManager.activeManager()?.createAnnotation(this.#timeRangeSelectionAnnotation);\n    }\n  }\n\n  getMainFlameChart(): PerfUI.FlameChart.FlameChart {\n    return this.mainFlameChart;\n  }\n\n  // This function is public for test purpose.\n  getNetworkFlameChart(): PerfUI.FlameChart.FlameChart {\n    return this.networkFlameChart;\n  }\n\n  updateSelectedGroup(flameChart: PerfUI.FlameChart.FlameChart, group: PerfUI.FlameChart.Group|null): void {\n    if (flameChart !== this.mainFlameChart || this.#selectedGroupName === group?.name) {\n      return;\n    }\n    this.#selectedGroupName = group?.name || null;\n    this.#selectedEvents = group ? this.mainDataProvider.groupTreeEvents(group) : null;\n    this.#updateDetailViews();\n  }\n\n  setModel(newParsedTrace: Trace.Handlers.Types.ParsedTrace, traceMetadata: Trace.Types.File.MetaData|null): void {\n    if (newParsedTrace === this.#parsedTrace) {\n      return;\n    }\n\n    this.#parsedTrace = newParsedTrace;\n    this.#traceMetadata = traceMetadata;\n    if (traceMetadata?.visualTrackConfig) {\n      this.#addPersistedConfigToSettings(newParsedTrace, traceMetadata.visualTrackConfig);\n    }\n    for (const dimmer of this.#flameChartDimmers) {\n      dimmer.active = false;\n      dimmer.mainChartIndices = [];\n      dimmer.networkChartIndices = [];\n    }\n    this.rebuildDataForTrace();\n  }\n\n  /**\n   * When the user imports a new trace and it has the visual config metadata, we add that data into the DevTools setting.\n   * NOTE: if the user has modifications for this trace already in memory,\n   * those are preferred over the modifications stored in the trace file itself.\n   */\n  #addPersistedConfigToSettings(\n      trace: Trace.Handlers.Types.ParsedTrace,\n      visualConfigForTrace: Trace.Types.File.PersistedTraceVisualConfig): void {\n    const key = keyForTraceConfig(trace);\n\n    if (visualConfigForTrace.main) {\n      const mainSetting = this.#mainPersistedGroupConfigSetting.get();\n      mainSetting[key] = mainSetting[key] ?? visualConfigForTrace.main;\n      this.#mainPersistedGroupConfigSetting.set(mainSetting);\n    }\n    if (visualConfigForTrace.network) {\n      const networkSetting = this.#networkPersistedGroupConfigSetting.get();\n      networkSetting[key] = networkSetting[key] ?? visualConfigForTrace.network;\n      this.#networkPersistedGroupConfigSetting.set(networkSetting);\n    }\n  }\n\n  /**\n   * Resets the state of the UI data and initializes it again with the\n   * current parsed trace.\n   */\n  rebuildDataForTrace(): void {\n    if (!this.#parsedTrace) {\n      return;\n    }\n\n    this.#selectedGroupName = null;\n    Common.EventTarget.removeEventListeners(this.eventListeners);\n    this.#selectedEvents = null;\n    this.#entityMapper = new Utils.EntityMapper.EntityMapper(this.#parsedTrace);\n    // order is important: |reset| needs to be called after the trace\n    // model has been set in the data providers.\n    this.mainDataProvider.setModel(this.#parsedTrace, this.#entityMapper);\n    this.networkDataProvider.setModel(this.#parsedTrace, this.#entityMapper);\n    this.reset();\n\n    // The order here is quite subtle; but the reset() call above clears out\n    // any state in the flame charts. We then need to provide it with any\n    // persisted group settings here, before it recalculates the timeline data\n    // and draws the UI.\n    const mainChartConfig = this.#getPersistedConfigForTrace(this.#parsedTrace, this.#mainPersistedGroupConfigSetting);\n    if (mainChartConfig) {\n      this.mainFlameChart.setPersistedConfig(mainChartConfig);\n    }\n    const networkChartConfig =\n        this.#getPersistedConfigForTrace(this.#parsedTrace, this.#networkPersistedGroupConfigSetting);\n    if (networkChartConfig) {\n      this.networkFlameChart.setPersistedConfig(networkChartConfig);\n    }\n\n    // setupWindowTimes() will trigger timelineData to be regenerated.\n    this.setupWindowTimes();\n    this.updateSearchResults(false, false);\n    this.#updateFlameCharts();\n    this.resizeToPreferredHeights();\n    this.setMarkers(this.#parsedTrace);\n    this.dimThirdPartiesIfRequired();\n    ModificationsManager.activeManager()?.applyAnnotationsFromCache();\n  }\n\n  /**\n   * Gets the persisted config (if the user has made any visual changes) in\n   * order to save it to disk as part of the trace.\n   */\n  getPersistedConfigMetadata(\n      trace: Trace.Handlers.Types.ParsedTrace,\n      ): Trace.Types.File.PersistedTraceVisualConfig {\n    const main = this.#getPersistedConfigForTrace(trace, this.#mainPersistedGroupConfigSetting);\n    const network = this.#getPersistedConfigForTrace(trace, this.#networkPersistedGroupConfigSetting);\n    return {main, network};\n  }\n\n  #getPersistedConfigForTrace(\n      trace: Trace.Handlers.Types.ParsedTrace,\n      setting: Common.Settings.Setting<PerfUI.FlameChart.PersistedConfigPerTrace>):\n      PerfUI.FlameChart.PersistedGroupConfig[]|null {\n    const value = setting.get();\n    const key = trace.Meta.traceBounds.min;\n    if (value[key]) {\n      return value[key];\n    }\n    return null;\n  }\n\n  setInsights(\n      insights: Trace.Insights.Types.TraceInsightSets|null,\n      eventToRelatedInsightsMap: TimelineComponents.RelatedInsightChips.EventToRelatedInsightsMap): void {\n    if (this.#traceInsightSets === insights) {\n      return;\n    }\n\n    this.#traceInsightSets = insights;\n    this.#eventToRelatedInsightsMap = eventToRelatedInsightsMap;\n    // The DetailsView is provided with the InsightSets, so make sure we update it.\n    this.#updateDetailViews();\n  }\n\n  reset(): void {\n    if (this.networkDataProvider.isEmpty()) {\n      this.mainFlameChart.enableRuler(true);\n      this.networkSplitWidget.hideSidebar();\n    } else {\n      this.mainFlameChart.enableRuler(false);\n      this.networkSplitWidget.showBoth();\n      this.resizeToPreferredHeights();\n    }\n    this.#overlays.reset();\n    this.mainFlameChart.reset();\n    this.networkFlameChart.reset();\n    this.updateSearchResults(false, false);\n  }\n\n  // TODO(paulirish): It's possible this is being called more than necessary. Attempt to clean up the lifecycle.\n  setupWindowTimes(): void {\n    const traceBoundsState = TraceBounds.TraceBounds.BoundsManager.instance().state();\n    if (!traceBoundsState) {\n      throw new Error('TimelineFlameChartView could not set the window bounds.');\n    }\n    const visibleWindow = traceBoundsState.milli.timelineTraceWindow;\n    this.mainFlameChart.setWindowTimes(visibleWindow.min, visibleWindow.max);\n    this.networkDataProvider.setWindowTimes(visibleWindow.min, visibleWindow.max);\n    this.networkFlameChart.setWindowTimes(visibleWindow.min, visibleWindow.max);\n  }\n\n  #refreshAfterIgnoreList(): void {\n    // The ignore list will only affect Thread tracks, which will only be in main flame chart.\n    // So just force recalculate and redraw the main flame chart here.\n    this.mainDataProvider.timelineData(true);\n    this.mainFlameChart.scheduleUpdate();\n  }\n\n  #updateDetailViews(): void {\n    this.countersView.setModel(this.#parsedTrace, this.#selectedEvents);\n    void this.detailsView.setModel({\n      parsedTrace: this.#parsedTrace,\n      selectedEvents: this.#selectedEvents,\n      traceInsightsSets: this.#traceInsightSets,\n      eventToRelatedInsightsMap: this.#eventToRelatedInsightsMap,\n      entityMapper: this.#entityMapper,\n    });\n  }\n\n  #updateFlameCharts(): void {\n    this.mainFlameChart.scheduleUpdate();\n    this.networkFlameChart.scheduleUpdate();\n\n    this.#registerLoggableGroups();\n  }\n\n  #registerLoggableGroups(): void {\n    const groups = [\n      ...this.mainFlameChart.timelineData()?.groups ?? [],\n      ...this.networkFlameChart.timelineData()?.groups ?? [],\n    ];\n    for (const group of groups) {\n      if (!group.jslogContext) {\n        continue;\n      }\n      const loggable = this.#loggableForGroupByLogContext.get(group.jslogContext) ?? Symbol(group.jslogContext);\n\n      if (!this.#loggableForGroupByLogContext.has(group.jslogContext)) {\n        // This is the first time this group has been created, so register its loggable.\n        this.#loggableForGroupByLogContext.set(group.jslogContext, loggable);\n        VisualLogging.registerLoggable(\n            loggable, `${VisualLogging.section().context(`timeline.${group.jslogContext}`)}`, this.delegate.element,\n            new DOMRect(0, 0, 200, 100));\n      }\n    }\n  }\n\n  // If an entry is hovered over and a creation of link annotation is in progress, update that annotation with a hovered entry.\n  updateLinkSelectionAnnotationWithToEntry(\n      dataProvider: TimelineFlameChartDataProvider|TimelineFlameChartNetworkDataProvider, entryIndex: number): void {\n    if (!this.#linkSelectionAnnotation ||\n        this.#linkSelectionAnnotation.state === Trace.Types.File.EntriesLinkState.CREATION_NOT_STARTED) {\n      return;\n    }\n    const toSelectionObject = this.#selectionIfTraceEvent(entryIndex, dataProvider);\n\n    if (toSelectionObject) {\n      // Prevent the user from creating a link that connects an entry to itself.\n      if (toSelectionObject === this.#linkSelectionAnnotation.entryFrom) {\n        return;\n      }\n      // Prevent the user from creating a link that connects an entry it's already connected to.\n      const linkBetweenEntriesExists = ModificationsManager.activeManager()?.linkAnnotationBetweenEntriesExists(\n          this.#linkSelectionAnnotation.entryFrom, toSelectionObject);\n      if (linkBetweenEntriesExists) {\n        return;\n      }\n\n      this.#linkSelectionAnnotation.state = Trace.Types.File.EntriesLinkState.CONNECTED;\n      this.#linkSelectionAnnotation.entryTo = toSelectionObject;\n    } else {\n      this.#linkSelectionAnnotation.state = Trace.Types.File.EntriesLinkState.PENDING_TO_EVENT;\n      delete this.#linkSelectionAnnotation['entryTo'];\n    }\n    ModificationsManager.activeManager()?.updateAnnotation(this.#linkSelectionAnnotation);\n  }\n\n  private onEntryHovered(commonEvent: Common.EventTarget.EventTargetEvent<number>): void {\n    SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    const entryIndex = commonEvent.data;\n    const event = this.mainDataProvider.eventByIndex(entryIndex);\n    if (!event || !this.#parsedTrace) {\n      return;\n    }\n    if (Trace.Types.Events.isLegacyTimelineFrame(event)) {\n      return;\n    }\n\n    const target = targetForEvent(this.#parsedTrace, event);\n    if (!target) {\n      return;\n    }\n\n    const nodeIds = Utils.EntryNodes.nodeIdsForEvent(this.#parsedTrace, event);\n    for (const nodeId of nodeIds) {\n      new SDK.DOMModel.DeferredDOMNode(target, nodeId).highlight();\n    }\n  }\n\n  highlightEvent(event: Trace.Types.Events.Event|null): void {\n    const entryIndex = event ? this.mainDataProvider.entryIndexForSelection(selectionFromEvent(event)) : -1;\n    if (entryIndex >= 0) {\n      this.mainFlameChart.highlightEntry(entryIndex);\n    } else {\n      this.mainFlameChart.hideHighlight();\n    }\n  }\n\n  override willHide(): void {\n    this.#networkPersistedGroupConfigSetting.removeChangeListener(this.resizeToPreferredHeights, this);\n    Bindings.IgnoreListManager.IgnoreListManager.instance().removeChangeListener(this.#boundRefreshAfterIgnoreList);\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.#networkPersistedGroupConfigSetting.addChangeListener(this.resizeToPreferredHeights, this);\n    Bindings.IgnoreListManager.IgnoreListManager.instance().addChangeListener(this.#boundRefreshAfterIgnoreList);\n    if (this.needsResizeToPreferredHeights) {\n      this.resizeToPreferredHeights();\n    }\n    this.#updateFlameCharts();\n  }\n\n  updateCountersGraphToggle(showMemoryGraph: boolean): void {\n    if (showMemoryGraph) {\n      this.chartSplitWidget.showBoth();\n    } else {\n      this.chartSplitWidget.hideSidebar();\n    }\n  }\n\n  revealEvent(event: Trace.Types.Events.Event): void {\n    const mainIndex = this.mainDataProvider.indexForEvent(event);\n    const networkIndex = this.networkDataProvider.indexForEvent(event);\n    if (mainIndex !== null) {\n      this.mainFlameChart.revealEntry(mainIndex);\n    } else if (networkIndex !== null) {\n      this.networkFlameChart.revealEntry(networkIndex);\n    }\n  }\n\n  // Given an event, it reveals its position vertically\n  revealEventVertically(event: Trace.Types.Events.Event): void {\n    const mainIndex = this.mainDataProvider.indexForEvent(event);\n    const networkIndex = this.networkDataProvider.indexForEvent(event);\n    if (mainIndex !== null) {\n      this.mainFlameChart.revealEntryVertically(mainIndex);\n    } else if (networkIndex !== null) {\n      this.networkFlameChart.revealEntryVertically(networkIndex);\n    }\n  }\n\n  setSelectionAndReveal(selection: TimelineSelection|null): void {\n    if (selection && this.#currentSelection && selectionsEqual(selection, this.#currentSelection)) {\n      return;\n    }\n\n    this.#currentSelection = selection;\n\n    // Clear any existing entry selection.\n    this.#overlays.removeOverlaysOfType('ENTRY_SELECTED');\n    // If:\n    // 1. There is no selection, or the selection is not a range selection\n    // AND 2. we have an active time range selection overlay\n    // AND 3. The label of the selection is empty\n    // then we need to remove it.\n    if ((selection === null || !selectionIsRange(selection)) && this.#timeRangeSelectionAnnotation &&\n        !this.#timeRangeSelectionAnnotation.label) {\n      ModificationsManager.activeManager()?.removeAnnotation(this.#timeRangeSelectionAnnotation);\n      this.#timeRangeSelectionAnnotation = null;\n    }\n\n    // If we don't have a selection, update the tree view row click dimmer events to null.\n    // This is a user disabling the persistent hovering from a row click, ensure the events are cleared.\n    if ((selection === null)) {\n      this.#updateFlameChartDimmerWithEvents(this.#treeRowClickDimmer, null);\n    }\n\n    // Check if this is an entry from main flame chart or network flame chart.\n    // If so build the initiators and select the entry.\n    // Otherwise clear the initiators and the selection.\n    //   - This is done by the same functions, when the index is -1, it will clear everything.\n    const mainIndex = this.mainDataProvider.entryIndexForSelection(selection);\n    this.mainDataProvider.buildFlowForInitiator(mainIndex);\n    this.mainFlameChart.setSelectedEntry(mainIndex);\n    const networkIndex = this.networkDataProvider.entryIndexForSelection(selection);\n    this.networkDataProvider.buildFlowForInitiator(networkIndex);\n    this.networkFlameChart.setSelectedEntry(networkIndex);\n\n    if (this.detailsView) {\n      // TODO(crbug.com/1459265):  Change to await after migration work.\n      void this.detailsView.setSelection(selection);\n    }\n\n    // Create the entry selected overlay if the selection represents a trace event\n    if (selectionIsEvent(selection)) {\n      this.addOverlay({\n        type: 'ENTRY_SELECTED',\n        entry: selection.event,\n      });\n    }\n\n    if (this.#linkSelectionAnnotation &&\n        this.#linkSelectionAnnotation.state === Trace.Types.File.EntriesLinkState.CREATION_NOT_STARTED) {\n      this.#clearLinkSelectionAnnotation(true);\n    }\n\n    // If the user has selected an event which the Performance AI Assistance\n    // supports (currently, only main thread events), then set the context's\n    // \"flavor\" to be the AI Call Tree of the active event.\n    // This is listened to by the AI Assistance panel to update its state.\n    // Note that we do not change the Context back to `null` if the user picks\n    // an invalid event - we don't want to reset it back as it may be they are\n    // clicking around in order to understand something.\n    // We also do this in a rAF to not block the UI updating to show the selected event first.\n    if (selectionIsEvent(selection) && this.#parsedTrace) {\n      requestAnimationFrame(() => {\n        if (!this.#parsedTrace) {\n          return;\n        }\n        const aiCallTree = Utils.AICallTree.AICallTree.fromEvent(selection.event, this.#parsedTrace);\n        if (aiCallTree) {\n          UI.Context.Context.instance().setFlavor(Utils.AICallTree.AICallTree, aiCallTree);\n        }\n      });\n    }\n  }\n\n  // Only opens the details view of a selection. This is used for Timing Markers. Timing markers replace\n  // their entry with a new UI. Becuase of that, thier entries can no longer be \"selected\" in the timings track,\n  // so if clicked, we only open their details view.\n  openSelectionDetailsView(selection: TimelineSelection|null): void {\n    if (this.detailsView) {\n      void this.detailsView.setSelection(selection);\n    }\n  }\n\n  /**\n   * Used to create multiple overlays at once without triggering a redraw for each one.\n   */\n  bulkAddOverlays(overlays: Overlays.Overlays.TimelineOverlay[]): void {\n    for (const overlay of overlays) {\n      this.#overlays.add(overlay);\n    }\n    void this.#overlays.update();\n  }\n\n  addOverlay<T extends Overlays.Overlays.TimelineOverlay>(newOverlay: T): T {\n    const overlay = this.#overlays.add(newOverlay);\n    void this.#overlays.update();\n    return overlay;\n  }\n\n  bulkRemoveOverlays(overlays: Overlays.Overlays.TimelineOverlay[]): void {\n    if (!overlays.length) {\n      return;\n    }\n\n    for (const overlay of overlays) {\n      this.#overlays.remove(overlay);\n    }\n    void this.#overlays.update();\n  }\n\n  removeOverlay(removedOverlay: Overlays.Overlays.TimelineOverlay): void {\n    this.#overlays.remove(removedOverlay);\n    void this.#overlays.update();\n  }\n\n  updateExistingOverlay<T extends Overlays.Overlays.TimelineOverlay>(existingOverlay: T, newData: Partial<T>): void {\n    this.#overlays.updateExisting(existingOverlay, newData);\n    void this.#overlays.update();\n  }\n\n  enterLabelEditMode(overlay: Overlays.Overlays.EntryLabel): void {\n    this.#overlays.enterLabelEditMode(overlay);\n  }\n\n  bringLabelForward(overlay: Overlays.Overlays.EntryLabel): void {\n    this.#overlays.bringLabelForward(overlay);\n  }\n\n  private onAddEntryLabelAnnotation(\n      dataProvider: TimelineFlameChartDataProvider|TimelineFlameChartNetworkDataProvider,\n      event: Common.EventTarget.EventTargetEvent<{entryIndex: number, withLinkCreationButton: boolean}>): void {\n    const selection = dataProvider.createSelection(event.data.entryIndex);\n    if (selectionIsEvent(selection)) {\n      this.setSelectionAndReveal(selection);\n      ModificationsManager.activeManager()?.createAnnotation({\n        type: 'ENTRY_LABEL',\n        entry: selection.event,\n        label: '',\n      });\n      if (event.data.withLinkCreationButton) {\n        this.onEntriesLinkAnnotationCreate(dataProvider, event.data.entryIndex, true);\n      }\n    }\n  }\n\n  onEntriesLinkAnnotationCreate(\n      dataProvider: TimelineFlameChartDataProvider|TimelineFlameChartNetworkDataProvider, entryFromIndex: number,\n      linkCreateButton?: boolean): void {\n    const fromSelectionObject = (entryFromIndex) ? this.#selectionIfTraceEvent(entryFromIndex, dataProvider) : null;\n\n    if (fromSelectionObject) {\n      this.#setLinkSelectionAnnotation({\n        type: 'ENTRIES_LINK',\n        entryFrom: fromSelectionObject,\n        state: (linkCreateButton) ? Trace.Types.File.EntriesLinkState.CREATION_NOT_STARTED :\n                                    Trace.Types.File.EntriesLinkState.PENDING_TO_EVENT,\n      });\n      if (this.#linkSelectionAnnotation) {\n        ModificationsManager.activeManager()?.createAnnotation(this.#linkSelectionAnnotation);\n      }\n    }\n  }\n\n  #selectionIfTraceEvent(\n      index: number, dataProvider: TimelineFlameChartDataProvider|TimelineFlameChartNetworkDataProvider):\n      Trace.Types.Events.Event|null {\n    const selection = dataProvider.createSelection(index);\n    return selectionIsEvent(selection) ? selection.event : null;\n  }\n\n  /**\n   * Called when the user either:\n   * 1. clicks with their mouse on an entry\n   * 2. Uses the keyboard and presses \"enter\" whilst an entry is selected\n   */\n  #onEntryInvoked(\n      dataProvider: TimelineFlameChartDataProvider|TimelineFlameChartNetworkDataProvider,\n      event: Common.EventTarget.EventTargetEvent<number>): void {\n    this.#updateSelectedEntryStatus(dataProvider, event);\n\n    const entryIndex = event.data;\n    // If we have a pending link connection, create it if we can now the final entry has been pressed.\n    if (this.#linkSelectionAnnotation) {\n      this.handleToEntryOfLinkBetweenEntriesSelection(entryIndex);\n    }\n  }\n\n  #updateSelectedEntryStatus(\n      dataProvider: TimelineFlameChartDataProvider|TimelineFlameChartNetworkDataProvider,\n      event: Common.EventTarget.EventTargetEvent<number>): void {\n    const data = dataProvider.timelineData();\n    if (!data) {\n      return;\n    }\n    const entryIndex = event.data;\n    const entryLevel = data.entryLevels[entryIndex];\n\n    // Find the group that contains this level and log a click for it.\n    const group = groupForLevel(data.groups, entryLevel);\n    if (group?.jslogContext) {\n      const loggable = this.#loggableForGroupByLogContext.get(group.jslogContext) ?? null;\n      if (loggable) {\n        VisualLogging.logClick(loggable, new MouseEvent('click'));\n      }\n    }\n\n    this.delegate.select(dataProvider.createSelection(entryIndex));\n\n    // If the selected entry has a label, bring it forward.\n    const traceEventForSelection = dataProvider.eventByIndex(entryIndex);\n    if (traceEventForSelection) {\n      ModificationsManager.activeManager()?.bringEntryLabelForwardIfExists(traceEventForSelection);\n    }\n  }\n\n  /**\n   * This is invoked when the user uses their KEYBOARD ONLY to navigate between\n   * events.\n   * It IS NOT called when the user uses the mouse. See `onEntryInvoked`.\n   */\n  private onEntrySelected(\n      dataProvider: TimelineFlameChartDataProvider|TimelineFlameChartNetworkDataProvider,\n      event: Common.EventTarget.EventTargetEvent<number>): void {\n    this.#updateSelectedEntryStatus(dataProvider, event);\n\n    // Update any pending link selection to point the entryTo to what the user has selected.\n    const entryIndex = event.data;\n    const toSelectionObject = this.#selectionIfTraceEvent(entryIndex, dataProvider);\n    if (toSelectionObject && toSelectionObject !== this.#linkSelectionAnnotation?.entryTo) {\n      this.updateLinkSelectionAnnotationWithToEntry(dataProvider, entryIndex);\n    }\n  }\n\n  handleToEntryOfLinkBetweenEntriesSelection(toIndex: number): void {\n    // If there is a link annotation in the process of being created when an empty\n    // space in the Flamechart is clicked, delete the link being created.\n    //\n    // If an entry is clicked when a link between entries in created and the entry that an arrow\n    // is pointing to is earlier than the one it starts from, switch 'to' and 'from' entries to\n    // reverse the arrow.\n    if (this.#linkSelectionAnnotation && toIndex === -1) {\n      ModificationsManager.activeManager()?.removeAnnotation(this.#linkSelectionAnnotation);\n    } else if (\n        this.#linkSelectionAnnotation && this.#linkSelectionAnnotation?.entryTo &&\n        (this.#linkSelectionAnnotation?.entryFrom.ts > this.#linkSelectionAnnotation?.entryTo.ts)) {\n      const entryFrom = this.#linkSelectionAnnotation.entryFrom;\n      const entryTo = this.#linkSelectionAnnotation.entryTo;\n      this.#linkSelectionAnnotation.entryTo = entryFrom;\n      this.#linkSelectionAnnotation.entryFrom = entryTo;\n      ModificationsManager.activeManager()?.updateAnnotation(this.#linkSelectionAnnotation);\n    }\n    // Regardless of if the link in progress was deleted or the clicked entry is the final selection,\n    // set the link selection in progress to null so a new one is created if the an event to create\n    // of update the current link is dispatched.\n    this.#clearLinkSelectionAnnotation(false);\n  }\n\n  resizeToPreferredHeights(): void {\n    if (!this.isShowing()) {\n      this.needsResizeToPreferredHeights = true;\n      return;\n    }\n    this.needsResizeToPreferredHeights = false;\n    this.networkPane.element.classList.toggle(\n        'timeline-network-resizer-disabled', !this.networkDataProvider.isExpanded());\n    this.networkSplitWidget.setSidebarSize(\n        this.networkDataProvider.preferredHeight() + this.splitResizer.clientHeight + PerfUI.FlameChart.RulerHeight +\n        2);\n  }\n\n  setSearchableView(searchableView: UI.SearchableView.SearchableView): void {\n    this.searchableView = searchableView;\n  }\n\n  // UI.SearchableView.Searchable implementation\n\n  jumpToNextSearchResult(): void {\n    if (!this.searchResults?.length) {\n      return;\n    }\n    const index =\n        typeof this.selectedSearchResult !== 'undefined' ? this.searchResults.indexOf(this.selectedSearchResult) : -1;\n    this.#selectSearchResult(Platform.NumberUtilities.mod(index + 1, this.searchResults.length));\n  }\n\n  jumpToPreviousSearchResult(): void {\n    if (!this.searchResults?.length) {\n      return;\n    }\n    const index =\n        typeof this.selectedSearchResult !== 'undefined' ? this.searchResults.indexOf(this.selectedSearchResult) : 0;\n    this.#selectSearchResult(Platform.NumberUtilities.mod(index - 1, this.searchResults.length));\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsRegexSearch(): boolean {\n    return true;\n  }\n\n  #selectSearchResult(searchResultIndex: number): void {\n    this.searchableView.updateCurrentMatchIndex(searchResultIndex);\n    const matchedResult = this.searchResults?.at(searchResultIndex) ?? null;\n    if (!matchedResult) {\n      return;\n    }\n\n    switch (matchedResult.provider) {\n      case 'main': {\n        this.delegate.select(this.mainDataProvider.createSelection(matchedResult.index));\n        this.mainFlameChart.showPopoverForSearchResult(matchedResult.index);\n        break;\n      }\n      case 'network': {\n        this.delegate.select(this.networkDataProvider.createSelection(matchedResult.index));\n        this.networkFlameChart.showPopoverForSearchResult(matchedResult.index);\n        break;\n      }\n      case 'other':\n        // TimelineFlameChartView only has main/network so we can ignore.\n        break;\n      default:\n        Platform.assertNever(matchedResult.provider, `Unknown SearchResult[provider]: ${matchedResult.provider}`);\n    }\n    this.selectedSearchResult = matchedResult;\n  }\n\n  private updateSearchResults(shouldJump: boolean, jumpBackwards?: boolean): void {\n    const traceBoundsState = TraceBounds.TraceBounds.BoundsManager.instance().state();\n    if (!traceBoundsState) {\n      return;\n    }\n\n    const oldSelectedSearchResult = this.selectedSearchResult;\n    delete this.selectedSearchResult;\n    this.searchResults = [];\n    if (!this.searchRegex) {\n      return;\n    }\n\n    const regExpFilter = new TimelineRegExp(this.searchRegex);\n    const visibleWindow = traceBoundsState.micro.timelineTraceWindow;\n\n    /**\n     * Get the matches for the user's search result. We search both providers\n     * but before storing the results we need to \"tag\" the results with the\n     * provider they came from. We do this so that when the user highlights a\n     * search result we know which flame chart to talk to to highlight it.\n     */\n    const mainMatches = this.mainDataProvider.search(visibleWindow, regExpFilter);\n    const networkMatches = this.networkDataProvider.search(visibleWindow, regExpFilter);\n\n    // Merge both result sets into one, sorted by start time. This means as the\n    // user navigates back/forwards they will do so in time order and not do\n    // all the main results before the network results, or some other\n    // unexpected ordering.\n    this.searchResults = mainMatches.concat(networkMatches).sort((m1, m2) => {\n      return m1.startTimeMilli - m2.startTimeMilli;\n    });\n\n    this.searchableView.updateSearchMatchesCount(this.searchResults.length);\n\n    this.#updateFlameChartDimmerWithIndices(\n        this.#searchDimmer, mainMatches.map(m => m.index), networkMatches.map(m => m.index));\n\n    if (!shouldJump || !this.searchResults.length) {\n      return;\n    }\n\n    let selectedIndex = this.#indexOfSearchResult(oldSelectedSearchResult);\n    if (selectedIndex === -1) {\n      selectedIndex = jumpBackwards ? this.searchResults.length - 1 : 0;\n    }\n    this.#selectSearchResult(selectedIndex);\n  }\n\n  #indexOfSearchResult(target?: PerfUI.FlameChart.DataProviderSearchResult): number {\n    if (!target) {\n      return -1;\n    }\n\n    return this.searchResults?.findIndex(result => {\n      return result.provider === target.provider && result.index === target.index;\n    }) ??\n        -1;\n  }\n\n  /**\n   * Returns the indexes of the elements that matched the most recent\n   * query. Elements are indexed by the data provider and correspond\n   * to their position in the data provider entry data array.\n   * Public only for tests.\n   */\n  getSearchResults(): PerfUI.FlameChart.DataProviderSearchResult[]|undefined {\n    return this.searchResults;\n  }\n\n  onSearchCanceled(): void {\n    if (typeof this.selectedSearchResult !== 'undefined') {\n      this.delegate.select(null);\n    }\n    delete this.searchResults;\n    delete this.selectedSearchResult;\n    delete this.searchRegex;\n    this.mainFlameChart.showPopoverForSearchResult(null);\n    this.networkFlameChart.showPopoverForSearchResult(null);\n    this.#updateFlameChartDimmerWithEvents(this.#searchDimmer, null);\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void {\n    this.searchRegex = searchConfig.toSearchRegex().regex;\n    this.updateSearchResults(shouldJump, jumpBackwards);\n  }\n\n  togglePopover({event, show}: {event: Trace.Types.Events.Event, show: boolean}): void {\n    const entryIndex = this.mainDataProvider.indexForEvent(event);\n    if (show && entryIndex) {\n      this.mainFlameChart.setSelectedEntry(entryIndex);\n      this.mainFlameChart.showPopoverForSearchResult(entryIndex);\n    } else {\n      this.mainFlameChart.hideHighlight();\n    }\n  }\n\n  overlays(): Overlays.Overlays.Overlays {\n    return this.#overlays;\n  }\n\n  selectDetailsViewTab(tabName: Tab, node: Trace.Extras.TraceTree.Node|null): void {\n    this.detailsView.selectTab(tabName, node);\n  }\n}\n\nexport class Selection {\n  timelineSelection: TimelineSelection;\n  entryIndex: number;\n  constructor(selection: TimelineSelection, entryIndex: number) {\n    this.timelineSelection = selection;\n    this.entryIndex = entryIndex;\n  }\n}\n\nexport const FlameChartStyle = {\n  textColor: '#333',\n};\n\nexport class TimelineFlameChartMarker implements PerfUI.FlameChart.FlameChartMarker {\n  private readonly startTimeInternal: number;\n  private readonly startOffset: number;\n  private style: TimelineMarkerStyle;\n  constructor(startTime: number, startOffset: number, style: TimelineMarkerStyle) {\n    this.startTimeInternal = startTime;\n    this.startOffset = startOffset;\n    this.style = style;\n  }\n\n  startTime(): number {\n    return this.startTimeInternal;\n  }\n\n  color(): string {\n    return this.style.color;\n  }\n\n  title(): string|null {\n    if (this.style.lowPriority) {\n      return null;\n    }\n    const startTime = i18n.TimeUtilities.millisToString(this.startOffset);\n    return i18nString(UIStrings.sAtS, {PH1: this.style.title, PH2: startTime});\n  }\n\n  draw(context: CanvasRenderingContext2D, x: number, _height: number, pixelsPerMillisecond: number): void {\n    const lowPriorityVisibilityThresholdInPixelsPerMs = 4;\n\n    if (this.style.lowPriority && pixelsPerMillisecond < lowPriorityVisibilityThresholdInPixelsPerMs) {\n      return;\n    }\n\n    if (!this.style.tall) {\n      return;\n    }\n\n    context.save();\n\n    context.strokeStyle = this.style.color;\n    context.lineWidth = this.style.lineWidth;\n    context.translate(this.style.lineWidth < 1 || (this.style.lineWidth & 1) ? 0.5 : 0, 0.5);\n    context.beginPath();\n    context.moveTo(x, 0);\n    context.setLineDash(this.style.dashStyle);\n    context.lineTo(x, context.canvas.height);\n    context.stroke();\n\n    context.restore();\n  }\n}\n\nexport const enum ColorBy {\n  URL = 'URL',\n}\n\n/**\n * Find the Group that contains the provided level, or `null` if no group is\n * found.\n */\nexport function groupForLevel(groups: PerfUI.FlameChart.Group[], level: number): PerfUI.FlameChart.Group|null {\n  const groupForLevel = groups.find((group, groupIndex) => {\n    const nextGroup = groups.at(groupIndex + 1);\n    const groupEndLevel = nextGroup ? nextGroup.startLevel - 1 : Infinity;\n\n    return group.startLevel <= level && groupEndLevel >= level;\n  });\n  return groupForLevel ?? null;\n}\n\nexport const enum Events {\n  ENTRY_LABEL_ANNOTATION_CLICKED = 'EntryLabelAnnotationClicked',\n}\nexport interface EventTypes {\n  [Events.ENTRY_LABEL_ANNOTATION_CLICKED]: {\n    entry: Trace.Types.Events.Event,\n  };\n}\n", "/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport '../../ui/legacy/legacy.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as TraceBounds from '../../services/trace_bounds/trace_bounds.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {TimelineModeViewDelegate} from './TimelinePanel.js';\n\nconst UIStrings = {\n  /**\n   *@description Text for a heap profile type\n   */\n  jsHeap: 'JS heap',\n  /**\n   *@description Text for documents, a type of resources\n   */\n  documents: 'Documents',\n  /**\n   *@description Text in Counters Graph of the Performance panel\n   */\n  nodes: 'Nodes',\n  /**\n   *@description Text in Counters Graph of the Performance panel\n   */\n  listeners: 'Listeners',\n  /**\n   *@description Text in Counters Graph of the Performance panel\n   */\n  gpuMemory: 'GPU memory',\n  /**\n   *@description Range text content in Counters Graph of the Performance panel\n   *@example {2} PH1\n   *@example {10} PH2\n   */\n  ss: '[{PH1} – {PH2}]',\n  /**\n   * @description text shown when no counter events are found and the graph is empty\n   */\n  noEventsFound: 'No memory usage data found within selected events.',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/CountersGraph.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class CountersGraph extends UI.Widget.VBox {\n  private readonly delegate: TimelineModeViewDelegate;\n  private readonly calculator: Calculator;\n  private readonly header: UI.Widget.HBox;\n  readonly toolbar: UI.Toolbar.Toolbar;\n  private graphsContainer: UI.Widget.VBox;\n  canvasContainer: typeof UI.Widget.Widget.prototype.element;\n  private canvas: HTMLCanvasElement;\n  private readonly timelineGrid: PerfUI.TimelineGrid.TimelineGrid;\n  private readonly counters: Counter[];\n  private readonly counterUI: CounterUI[];\n  private readonly countersByName: Map<string, Counter>;\n  private readonly gpuMemoryCounter: Counter;\n  #events: Trace.Types.Events.Event[]|null = null;\n  currentValuesBar?: HTMLElement;\n  private markerXPosition?: number;\n  #onTraceBoundsChangeBound = this.#onTraceBoundsChange.bind(this);\n\n  #noEventsFoundMessage = document.createElement('div');\n  #showNoEventsMessage = false;\n\n  constructor(delegate: TimelineModeViewDelegate) {\n    super();\n    this.element.id = 'memory-graphs-container';\n\n    this.delegate = delegate;\n    this.calculator = new Calculator();\n\n    // Create selectors\n    this.header = new UI.Widget.HBox();\n    this.header.element.classList.add('timeline-memory-header');\n    this.header.show(this.element);\n    this.toolbar = this.header.element.createChild('devtools-toolbar', 'timeline-memory-toolbar');\n\n    this.graphsContainer = new UI.Widget.VBox();\n    this.graphsContainer.show(this.element);\n    const canvasWidget = new UI.Widget.VBoxWithResizeCallback(this.resize.bind(this));\n    canvasWidget.show(this.graphsContainer.element);\n    this.createCurrentValuesBar();\n    this.canvasContainer = canvasWidget.element;\n    this.canvasContainer.id = 'memory-graphs-canvas-container';\n    this.canvas = document.createElement('canvas');\n    this.canvasContainer.appendChild(this.canvas);\n    this.canvas.id = 'memory-counters-graph';\n\n    const noEventsFound = document.createElement('p');\n    noEventsFound.innerText = i18nString(UIStrings.noEventsFound);\n    this.#noEventsFoundMessage.classList.add('no-events-found');\n    this.#noEventsFoundMessage.setAttribute('hidden', 'hidden');\n    this.#noEventsFoundMessage.appendChild(noEventsFound);\n    this.canvasContainer.appendChild(this.#noEventsFoundMessage);\n\n    this.canvasContainer.addEventListener('mouseover', this.onMouseMove.bind(this), true);\n    this.canvasContainer.addEventListener('mousemove', this.onMouseMove.bind(this), true);\n    this.canvasContainer.addEventListener('mouseleave', this.onMouseLeave.bind(this), true);\n    this.canvasContainer.addEventListener('click', this.onClick.bind(this), true);\n    // We create extra timeline grid here to reuse its event dividers.\n    this.timelineGrid = new PerfUI.TimelineGrid.TimelineGrid();\n    this.canvasContainer.appendChild(this.timelineGrid.dividersElement);\n\n    this.counters = [];\n    this.counterUI = [];\n\n    this.countersByName = new Map();\n    this.countersByName.set(\n        'jsHeapSizeUsed',\n        this.createCounter(\n            i18nString(UIStrings.jsHeap), 'js-heap-size-used', 'hsl(220, 90%, 43%)', i18n.ByteUtilities.bytesToString));\n    this.countersByName.set(\n        'documents', this.createCounter(i18nString(UIStrings.documents), 'documents', 'hsl(0, 90%, 43%)'));\n    this.countersByName.set('nodes', this.createCounter(i18nString(UIStrings.nodes), 'nodes', 'hsl(120, 90%, 43%)'));\n    this.countersByName.set(\n        'jsEventListeners',\n        this.createCounter(i18nString(UIStrings.listeners), 'js-event-listeners', 'hsl(38, 90%, 43%)'));\n\n    this.gpuMemoryCounter = this.createCounter(\n        i18nString(UIStrings.gpuMemory), 'gpu-memory-used-kb', 'hsl(300, 90%, 43%)', i18n.ByteUtilities.bytesToString);\n    this.countersByName.set('gpuMemoryUsedKB', this.gpuMemoryCounter);\n\n    TraceBounds.TraceBounds.onChange(this.#onTraceBoundsChangeBound);\n  }\n\n  #onTraceBoundsChange(event: TraceBounds.TraceBounds.StateChangedEvent): void {\n    if (event.updateType === 'RESET' || event.updateType === 'VISIBLE_WINDOW') {\n      const newWindow = event.state.milli.timelineTraceWindow;\n      this.calculator.setWindow(newWindow.min, newWindow.max);\n      this.#scheduleRefresh();\n    }\n  }\n\n  setModel(parsedTrace: Trace.Handlers.Types.ParsedTrace|null, events: Trace.Types.Events.Event[]|null): void {\n    this.#events = events;\n    if (!events || !parsedTrace) {\n      return;\n    }\n    const minTime = Trace.Helpers.Timing.traceWindowMilliSeconds(parsedTrace.Meta.traceBounds).min;\n    this.calculator.setZeroTime(minTime);\n\n    for (let i = 0; i < this.counters.length; ++i) {\n      this.counters[i].reset();\n      this.counterUI[i].reset();\n    }\n    this.#scheduleRefresh();\n    let counterEventsFound = 0;\n    for (let i = 0; i < events.length; ++i) {\n      const event = events[i];\n      if (!Trace.Types.Events.isUpdateCounters(event)) {\n        continue;\n      }\n      counterEventsFound++;\n\n      const counters = event.args.data;\n      if (!counters) {\n        return;\n      }\n      for (const name in counters) {\n        const counter = this.countersByName.get(name);\n        if (counter) {\n          const {startTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(event);\n          counter.appendSample(\n              startTime, counters[name as 'documents' | 'jsEventListeners' | 'jsHeapSizeUsed' | 'nodes']);\n        }\n      }\n\n      if (typeof counters.gpuMemoryLimitKB !== 'undefined') {\n        this.gpuMemoryCounter.setLimit(counters.gpuMemoryLimitKB);\n      }\n    }\n    this.#showNoEventsMessage = counterEventsFound === 0;\n  }\n\n  private createCurrentValuesBar(): void {\n    this.currentValuesBar = this.graphsContainer.element.createChild('div');\n    this.currentValuesBar.id = 'counter-values-bar';\n  }\n\n  private createCounter(\n      uiName: Common.UIString.LocalizedString, settingsKey: string, color: string,\n      formatter?: ((arg0: number) => string)): Counter {\n    const counter = new Counter();\n    this.counters.push(counter);\n    this.counterUI.push(new CounterUI(this, uiName, settingsKey, color, counter, formatter));\n    return counter;\n  }\n\n  resizerElement(): Element|null {\n    return this.header.element;\n  }\n\n  private resize(): void {\n    const parentElement = (this.canvas.parentElement as HTMLElement);\n    this.canvas.width = parentElement.clientWidth * window.devicePixelRatio;\n    this.canvas.height = parentElement.clientHeight * window.devicePixelRatio;\n    this.calculator.setDisplayWidth(this.canvas.width);\n    this.refresh();\n  }\n\n  #scheduleRefresh(): void {\n    UI.UIUtils.invokeOnceAfterBatchUpdate(this, this.refresh);\n  }\n\n  draw(): void {\n    this.clear();\n    if (this.#showNoEventsMessage) {\n      this.#noEventsFoundMessage.removeAttribute('hidden');\n    } else {\n      this.#noEventsFoundMessage.setAttribute('hidden', 'hidden');\n    }\n    for (const counter of this.counters) {\n      counter.calculateVisibleIndexes(this.calculator);\n      counter.calculateXValues(this.canvas.width);\n    }\n    for (const counterUI of this.counterUI) {\n      counterUI.drawGraph(this.canvas);\n    }\n  }\n\n  private onClick(event: Event): void {\n    const x = (event as MouseEvent).x - this.canvasContainer.getBoundingClientRect().left;\n    let minDistance = Infinity;\n    let bestTime;\n    for (const counterUI of this.counterUI) {\n      if (!counterUI.counter.times.length) {\n        continue;\n      }\n      const index = counterUI.recordIndexAt(x);\n      const distance = Math.abs(x * window.devicePixelRatio - counterUI.counter.x[index]);\n      if (distance < minDistance) {\n        minDistance = distance;\n        bestTime = counterUI.counter.times[index];\n      }\n    }\n    if (bestTime !== undefined && this.#events) {\n      this.delegate.selectEntryAtTime(this.#events, bestTime);\n    }\n  }\n\n  private onMouseLeave(_event: Event): void {\n    delete this.markerXPosition;\n    this.clearCurrentValueAndMarker();\n  }\n\n  private clearCurrentValueAndMarker(): void {\n    for (let i = 0; i < this.counterUI.length; i++) {\n      this.counterUI[i].clearCurrentValueAndMarker();\n    }\n  }\n\n  private onMouseMove(event: Event): void {\n    const x = (event as MouseEvent).x - this.canvasContainer.getBoundingClientRect().left;\n    this.markerXPosition = x;\n    this.refreshCurrentValues();\n  }\n\n  private refreshCurrentValues(): void {\n    if (this.markerXPosition === undefined) {\n      return;\n    }\n    for (let i = 0; i < this.counterUI.length; ++i) {\n      this.counterUI[i].updateCurrentValue(this.markerXPosition);\n    }\n  }\n\n  refresh(): void {\n    this.timelineGrid.updateDividers(this.calculator);\n    this.draw();\n    this.refreshCurrentValues();\n  }\n\n  private clear(): void {\n    const ctx = this.canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Unable to get canvas context');\n    }\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  }\n}\n\nexport class Counter {\n  times: number[];\n  values: number[];\n  x: number[];\n  minimumIndex: number;\n  maximumIndex: number;\n  private maxTime: number;\n  private minTime: number;\n  limitValue?: number;\n\n  constructor() {\n    this.times = [];\n    this.values = [];\n    this.x = [];\n    this.minimumIndex = 0;\n    this.maximumIndex = 0;\n    this.maxTime = 0;\n    this.minTime = 0;\n  }\n\n  appendSample(time: number, value: number): void {\n    if (this.values.length && this.values[this.values.length - 1] === value) {\n      return;\n    }\n    this.times.push(time);\n    this.values.push(value);\n  }\n\n  reset(): void {\n    this.times = [];\n    this.values = [];\n  }\n\n  setLimit(value: number): void {\n    this.limitValue = value;\n  }\n\n  calculateBounds(): {\n    min: number,\n    max: number,\n  } {\n    let maxValue;\n    let minValue;\n    for (let i = this.minimumIndex; i <= this.maximumIndex; i++) {\n      const value = this.values[i];\n      if (minValue === undefined || value < minValue) {\n        minValue = value;\n      }\n      if (maxValue === undefined || value > maxValue) {\n        maxValue = value;\n      }\n    }\n    minValue = minValue || 0;\n    maxValue = maxValue || 1;\n    if (this.limitValue) {\n      if (maxValue > this.limitValue * 0.5) {\n        maxValue = Math.max(maxValue, this.limitValue);\n      }\n      minValue = Math.min(minValue, this.limitValue);\n    }\n    return {min: minValue, max: maxValue};\n  }\n\n  calculateVisibleIndexes(calculator: Calculator): void {\n    const start = calculator.minimumBoundary();\n    const end = calculator.maximumBoundary();\n\n    // Maximum index of element whose time <= start.\n    this.minimumIndex = Platform.NumberUtilities.clamp(\n        Platform.ArrayUtilities.upperBound(this.times, start, Platform.ArrayUtilities.DEFAULT_COMPARATOR) - 1, 0,\n        this.times.length - 1);\n\n    // Minimum index of element whose time >= end.\n    this.maximumIndex = Platform.NumberUtilities.clamp(\n        Platform.ArrayUtilities.lowerBound(this.times, end, Platform.ArrayUtilities.DEFAULT_COMPARATOR), 0,\n        this.times.length - 1);\n\n    // Current window bounds.\n    this.minTime = start;\n    this.maxTime = end;\n  }\n\n  calculateXValues(width: number): void {\n    if (!this.values.length) {\n      return;\n    }\n\n    const xFactor = width / (this.maxTime - this.minTime);\n\n    this.x = new Array(this.values.length);\n    for (let i = this.minimumIndex + 1; i <= this.maximumIndex; i++) {\n      this.x[i] = xFactor * (this.times[i] - this.minTime);\n    }\n  }\n}\n\nexport class CounterUI {\n  private readonly countersPane: CountersGraph;\n  counter: Counter;\n  private readonly formatter: (arg0: number) => string;\n  private readonly setting: Common.Settings.Setting<boolean>;\n  private readonly filter: UI.Toolbar.ToolbarSettingCheckbox;\n  private readonly value: HTMLElement;\n  graphColor: string;\n  limitColor: string|null|undefined;\n  graphYValues: number[];\n  private readonly verticalPadding: number;\n  private readonly counterName: Common.UIString.LocalizedString;\n  private readonly marker: HTMLElement;\n\n  constructor(\n      countersPane: CountersGraph, title: Common.UIString.LocalizedString, settingsKey: string, graphColor: string,\n      counter: Counter, formatter?: (arg0: number) => string) {\n    this.countersPane = countersPane;\n    this.counter = counter;\n    this.formatter = formatter || Platform.NumberUtilities.withThousandsSeparator;\n\n    this.setting = Common.Settings.Settings.instance().createSetting('timeline-counters-graph-' + settingsKey, true);\n    this.setting.setTitle(title);\n    this.filter = new UI.Toolbar.ToolbarSettingCheckbox(this.setting, title);\n    const parsedColor = Common.Color.parse(graphColor);\n    if (parsedColor) {\n      const colorWithAlpha = parsedColor.setAlpha(0.5).asString(Common.Color.Format.RGBA);\n      const htmlElement = (this.filter.element);\n      if (colorWithAlpha) {\n        htmlElement.style.backgroundColor = colorWithAlpha;\n      }\n      htmlElement.style.borderColor = 'transparent';\n    }\n    this.filter.element.addEventListener('click', this.toggleCounterGraph.bind(this));\n    countersPane.toolbar.appendToolbarItem(this.filter);\n\n    this.value = (countersPane.currentValuesBar as HTMLElement).createChild('span', 'memory-counter-value');\n    this.value.style.color = graphColor;\n    this.graphColor = graphColor;\n    if (parsedColor) {\n      this.limitColor = parsedColor.setAlpha(0.3).asString(Common.Color.Format.RGBA);\n    }\n    this.graphYValues = [];\n    this.verticalPadding = 10;\n\n    this.counterName = title;\n    this.marker = countersPane.canvasContainer.createChild('div', 'memory-counter-marker');\n    this.marker.style.backgroundColor = graphColor;\n    this.clearCurrentValueAndMarker();\n  }\n\n  /**\n   * Updates both the user visible text and the title & aria-label for the\n   * checkbox label shown in the toolbar\n   */\n  #updateFilterLabel(text: Common.UIString.LocalizedString): void {\n    this.filter.setLabelText(text);\n    this.filter.setTitle(text);\n  }\n\n  reset(): void {\n    this.#updateFilterLabel(this.counterName);\n  }\n\n  setRange(minValue: number, maxValue: number): void {\n    const min = this.formatter(minValue);\n    const max = this.formatter(maxValue);\n    const rangeText = i18nString(UIStrings.ss, {PH1: min, PH2: max});\n    const newLabelText = `${this.counterName} ${rangeText}` as Common.UIString.LocalizedString;\n    this.#updateFilterLabel(newLabelText);\n  }\n\n  private toggleCounterGraph(): void {\n    this.value.classList.toggle('hidden', !this.filter.checked());\n    this.countersPane.refresh();\n  }\n\n  recordIndexAt(x: number): number {\n    return Platform.ArrayUtilities.upperBound(\n               this.counter.x, x * window.devicePixelRatio, Platform.ArrayUtilities.DEFAULT_COMPARATOR,\n               this.counter.minimumIndex + 1, this.counter.maximumIndex + 1) -\n        1;\n  }\n\n  updateCurrentValue(x: number): void {\n    if (!this.visible() || !this.counter.values.length || !this.counter.x) {\n      return;\n    }\n    const index = this.recordIndexAt(x);\n    const value = Platform.NumberUtilities.withThousandsSeparator(this.counter.values[index]);\n    this.value.textContent = `${this.counterName}: ${value}`;\n    const y = this.graphYValues[index] / window.devicePixelRatio;\n    this.marker.style.left = x + 'px';\n    this.marker.style.top = y + 'px';\n    this.marker.classList.remove('hidden');\n  }\n\n  clearCurrentValueAndMarker(): void {\n    this.value.textContent = '';\n    this.marker.classList.add('hidden');\n  }\n\n  drawGraph(canvas: HTMLCanvasElement): void {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Unable to get canvas context');\n    }\n    const width = canvas.width;\n    const height = canvas.height - 2 * this.verticalPadding;\n    if (height <= 0) {\n      this.graphYValues = [];\n      return;\n    }\n    const originY = this.verticalPadding;\n    const counter = this.counter;\n    const values = counter.values;\n\n    if (!values.length) {\n      return;\n    }\n\n    const bounds = counter.calculateBounds();\n    const minValue = bounds.min;\n    const maxValue = bounds.max;\n    this.setRange(minValue, maxValue);\n\n    if (!this.visible()) {\n      return;\n    }\n\n    const yValues = this.graphYValues;\n    const maxYRange = maxValue - minValue;\n    const yFactor = maxYRange ? height / (maxYRange) : 1;\n\n    ctx.save();\n    ctx.lineWidth = window.devicePixelRatio;\n    if (ctx.lineWidth % 2) {\n      ctx.translate(0.5, 0.5);\n    }\n    ctx.beginPath();\n    let value: number = values[counter.minimumIndex];\n    let currentY = Math.round(originY + height - (value - minValue) * yFactor);\n    ctx.moveTo(0, currentY);\n    let i = counter.minimumIndex;\n    for (; i <= counter.maximumIndex; i++) {\n      const x = Math.round(counter.x[i]);\n      ctx.lineTo(x, currentY);\n      const currentValue = values[i];\n      if (typeof currentValue !== 'undefined') {\n        value = currentValue;\n      }\n      currentY = Math.round(originY + height - (value - minValue) * yFactor);\n      ctx.lineTo(x, currentY);\n      yValues[i] = currentY;\n    }\n    yValues.length = i;\n    ctx.lineTo(width, currentY);\n    ctx.strokeStyle = this.graphColor;\n    ctx.stroke();\n    if (counter.limitValue) {\n      const limitLineY = Math.round(originY + height - (counter.limitValue - minValue) * yFactor);\n      ctx.moveTo(0, limitLineY);\n      ctx.lineTo(width, limitLineY);\n      if (this.limitColor) {\n        ctx.strokeStyle = this.limitColor;\n      }\n      ctx.stroke();\n    }\n    ctx.closePath();\n    ctx.restore();\n  }\n\n  visible(): boolean {\n    return this.filter.checked();\n  }\n}\n\nexport class Calculator implements PerfUI.TimelineGrid.Calculator {\n  private minimumBoundaryInternal: number;\n  private maximumBoundaryInternal: number;\n  private workingArea: number;\n  private zeroTimeInternal: number;\n\n  constructor() {\n    this.minimumBoundaryInternal = 0;\n    this.maximumBoundaryInternal = 0;\n    this.workingArea = 0;\n    this.zeroTimeInternal = 0;\n  }\n  setZeroTime(time: number): void {\n    this.zeroTimeInternal = time;\n  }\n\n  computePosition(time: number): number {\n    return (time - this.minimumBoundaryInternal) / this.boundarySpan() * this.workingArea;\n  }\n\n  setWindow(minimumBoundary: number, maximumBoundary: number): void {\n    this.minimumBoundaryInternal = minimumBoundary;\n    this.maximumBoundaryInternal = maximumBoundary;\n  }\n\n  setDisplayWidth(clientWidth: number): void {\n    this.workingArea = clientWidth;\n  }\n\n  formatValue(value: number, precision?: number): string {\n    return i18n.TimeUtilities.preciseMillisToString(value - this.zeroTime(), precision);\n  }\n\n  maximumBoundary(): number {\n    return this.maximumBoundaryInternal;\n  }\n\n  minimumBoundary(): number {\n    return this.minimumBoundaryInternal;\n  }\n\n  zeroTime(): number {\n    return this.zeroTimeInternal;\n  }\n\n  boundarySpan(): number {\n    return this.maximumBoundaryInternal - this.minimumBoundaryInternal;\n  }\n}\n", "export const SHOULD_SHOW_EASTER_EGG = false;", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Trace from '../../models/trace/trace.js';\n\n/**\n * If the event's thread was identified as belonging to a worker, this will\n * return the target representing that worker. Otherwise, we return the primary\n * page's target.\n **/\nexport function targetForEvent(\n    parsedTrace: Trace.Handlers.Types.ParsedTrace, event: Trace.Types.Events.Event): SDK.Target.Target|null {\n  const targetManager = SDK.TargetManager.TargetManager.instance();\n  const workerId = parsedTrace.Workers.workerIdByThread.get(event.tid);\n  if (workerId) {\n    return targetManager.targetById(workerId);\n  }\n\n  return targetManager.primaryPageTarget();\n}\n", "// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as TraceBounds from '../../services/trace_bounds/trace_bounds.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport * as TimelineComponents from './components/components.js';\nimport {EventsTimelineTreeView} from './EventsTimelineTreeView.js';\nimport {Tracker} from './FreshRecording.js';\nimport {targetForEvent} from './TargetForEvent.js';\nimport {ThirdPartyTreeViewWidget} from './ThirdPartyTreeView.js';\nimport {TimelineLayersView} from './TimelineLayersView.js';\nimport {TimelinePaintProfilerView} from './TimelinePaintProfilerView.js';\nimport type {TimelineModeViewDelegate} from './TimelinePanel.js';\nimport {\n  selectionFromRangeMilliSeconds,\n  selectionIsEvent,\n  selectionIsRange,\n  type TimelineSelection,\n} from './TimelineSelection.js';\nimport {TimelineSelectorStatsView} from './TimelineSelectorStatsView.js';\nimport {\n  AggregatedTimelineTreeView,\n  BottomUpTimelineTreeView,\n  CallTreeTimelineTreeView,\n  TimelineStackView,\n  TimelineTreeView\n} from './TimelineTreeView.js';\nimport {TimelineUIUtils} from './TimelineUIUtils.js';\nimport {TracingFrameLayerTree} from './TracingLayerTree.js';\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text for the summary view\n   */\n  summary: 'Summary',\n  /**\n   *@description Text in Timeline Details View of the Performance panel\n   */\n  bottomup: 'Bottom-up',\n  /**\n   *@description Text in Timeline Details View of the Performance panel\n   */\n  callTree: 'Call tree',\n  /**\n   *@description Text in Timeline Details View of the Performance panel\n   */\n  eventLog: 'Event log',\n  /**\n   *@description Title of the paint profiler, old name of the performance pane\n   */\n  paintProfiler: 'Paint profiler',\n  /**\n   *@description Title of the Layers tool\n   */\n  layers: 'Layers',\n  /**\n   *@description Title of the selector stats tab\n   */\n  selectorStats: 'Selector stats',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineDetailsView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class TimelineDetailsPane extends\n    Common.ObjectWrapper.eventMixin<TimelineTreeView.EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox) {\n  private readonly detailsLinkifier: Components.Linkifier.Linkifier;\n  private tabbedPane: UI.TabbedPane.TabbedPane;\n  private readonly defaultDetailsWidget: UI.Widget.VBox;\n  private defaultDetailsContentWidget: UI.Widget.VBox;\n  private rangeDetailViews: Map<string, TimelineTreeView>;\n  #selectedEvents?: Trace.Types.Events.Event[]|null;\n  private lazyPaintProfilerView?: TimelinePaintProfilerView|null;\n  private lazyLayersView?: TimelineLayersView|null;\n  private preferredTabId?: string;\n  private selection?: TimelineSelection|null;\n  private updateContentsScheduled: boolean;\n  private lazySelectorStatsView: TimelineSelectorStatsView|null;\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace|null = null;\n  #traceInsightsSets: Trace.Insights.Types.TraceInsightSets|null = null;\n\n  #eventToRelatedInsightsMap: TimelineComponents.RelatedInsightChips.EventToRelatedInsightsMap|null = null;\n  #filmStrip: Trace.Extras.FilmStrip.Data|null = null;\n  #networkRequestDetails: TimelineComponents.NetworkRequestDetails.NetworkRequestDetails;\n  #layoutShiftDetails: TimelineComponents.LayoutShiftDetails.LayoutShiftDetails;\n  #onTraceBoundsChangeBound = this.#onTraceBoundsChange.bind(this);\n  #relatedInsightChips = new TimelineComponents.RelatedInsightChips.RelatedInsightChips();\n  #thirdPartyTree = new ThirdPartyTreeViewWidget();\n  #entityMapper: Utils.EntityMapper.EntityMapper|null = null;\n\n  constructor(delegate: TimelineModeViewDelegate) {\n    super();\n    this.element.classList.add('timeline-details');\n\n    this.detailsLinkifier = new Components.Linkifier.Linkifier();\n\n    this.tabbedPane = new UI.TabbedPane.TabbedPane();\n    this.tabbedPane.show(this.element);\n    this.tabbedPane.headerElement().setAttribute(\n        'jslog',\n        `${VisualLogging.toolbar('sidebar').track({keydown: 'ArrowUp|ArrowLeft|ArrowDown|ArrowRight|Enter|Space'})}`);\n\n    this.defaultDetailsWidget = new UI.Widget.VBox();\n    this.defaultDetailsWidget.element.classList.add('timeline-details-view');\n    this.defaultDetailsWidget.element.setAttribute('jslog', `${VisualLogging.pane('details').track({resize: true})}`);\n    this.defaultDetailsContentWidget = this.#createContentWidget();\n    this.appendTab(Tab.Details, i18nString(UIStrings.summary), this.defaultDetailsWidget);\n    this.setPreferredTab(Tab.Details);\n\n    this.rangeDetailViews = new Map();\n    this.updateContentsScheduled = false;\n\n    const bottomUpView = new BottomUpTimelineTreeView();\n    this.appendTab(Tab.BottomUp, i18nString(UIStrings.bottomup), bottomUpView);\n    this.rangeDetailViews.set(Tab.BottomUp, bottomUpView);\n\n    const callTreeView = new CallTreeTimelineTreeView();\n    this.appendTab(Tab.CallTree, i18nString(UIStrings.callTree), callTreeView);\n    this.rangeDetailViews.set(Tab.CallTree, callTreeView);\n\n    const eventsView = new EventsTimelineTreeView(delegate);\n    this.appendTab(Tab.EventLog, i18nString(UIStrings.eventLog), eventsView);\n    this.rangeDetailViews.set(Tab.EventLog, eventsView);\n\n    // Listeners for hover dimming\n    this.rangeDetailViews.values().forEach(view => {\n      view.addEventListener(\n          TimelineTreeView.Events.TREE_ROW_HOVERED,\n          node => this.dispatchEventToListeners(TimelineTreeView.Events.TREE_ROW_HOVERED, node.data));\n\n      view.addEventListener(TimelineTreeView.Events.TREE_ROW_CLICKED, node => {\n        // Re-dispatch to reach the tree row dimmer.\n        this.dispatchEventToListeners(TimelineTreeView.Events.TREE_ROW_CLICKED, node.data);\n      });\n\n      // If there's a heaviest stack sidebar view, also listen to hover within it.\n      if (view instanceof AggregatedTimelineTreeView) {\n        view.stackView.addEventListener(\n            TimelineStackView.Events.TREE_ROW_HOVERED,\n            node => this.dispatchEventToListeners(TimelineTreeView.Events.TREE_ROW_HOVERED, {node: node.data}));\n      }\n    });\n    this.#thirdPartyTree.addEventListener(TimelineTreeView.Events.TREE_ROW_HOVERED, node => {\n      // Re-dispatch through 3P event to get 3P dimmer.\n      this.dispatchEventToListeners(\n          TimelineTreeView.Events.TREE_ROW_HOVERED, {node: node.data.node, events: node.data.events ?? undefined});\n    });\n\n    this.#thirdPartyTree.addEventListener(TimelineTreeView.Events.BOTTOM_UP_BUTTON_CLICKED, node => {\n      this.selectTab(Tab.BottomUp, node.data, AggregatedTimelineTreeView.GroupBy.ThirdParties);\n    });\n    this.#thirdPartyTree.addEventListener(TimelineTreeView.Events.TREE_ROW_CLICKED, node => {\n      // Re-dispatch through 3P event to get 3P dimmer.\n      this.dispatchEventToListeners(\n          TimelineTreeView.Events.TREE_ROW_CLICKED, {node: node.data.node, events: node.data.events ?? undefined});\n    });\n\n    this.#networkRequestDetails =\n        new TimelineComponents.NetworkRequestDetails.NetworkRequestDetails(this.detailsLinkifier);\n\n    this.#layoutShiftDetails = new TimelineComponents.LayoutShiftDetails.LayoutShiftDetails();\n\n    this.tabbedPane.addEventListener(UI.TabbedPane.Events.TabSelected, this.tabSelected, this);\n\n    TraceBounds.TraceBounds.onChange(this.#onTraceBoundsChangeBound);\n\n    this.lazySelectorStatsView = null;\n  }\n\n  /**\n   * This selects a given tabbedPane tab.\n   * Additionally, if provided a node, we open that node and\n   * if a groupBySetting is included, we groupBy.\n   */\n  selectTab(tabName: Tab, node: Trace.Extras.TraceTree.Node|null, groupBySetting?: AggregatedTimelineTreeView.GroupBy):\n      void {\n    this.tabbedPane.selectTab(tabName, true, true);\n    /**\n     * For a11y, ensure that the header is focused.\n     */\n    this.tabbedPane.focusSelectedTabHeader();\n\n    // We currently only support selecting Details and BottomUp via the 3P insight.\n    switch (tabName) {\n      case Tab.CallTree:\n      case Tab.EventLog:\n      case Tab.PaintProfiler:\n      case Tab.LayerViewer:\n      case Tab.SelectorStats: {\n        break;\n      }\n      case Tab.Details: {\n        this.updateContentsFromWindow();\n        break;\n      }\n      case Tab.BottomUp: {\n        if (!(this.tabbedPane.visibleView instanceof BottomUpTimelineTreeView)) {\n          return;\n        }\n        // Set grouping if necessary.\n        const bottomUp = this.tabbedPane.visibleView;\n        if (groupBySetting) {\n          bottomUp.setGroupBySetting(groupBySetting);\n          bottomUp.refreshTree();\n        }\n\n        if (!node) {\n          return;\n        }\n\n        // Look for the equivalent GroupNode in the bottomUp tree using the node's reference `event`.\n        // Conceivably, we could match using the group ID instead.\n        const treeNode = bottomUp.eventToTreeNode.get(node.event);\n        if (!treeNode) {\n          return;\n        }\n        bottomUp.selectProfileNode(treeNode, true);\n        // Reveal/expand the bottom up tree grid node.\n        const gridNode = bottomUp.dataGridNodeForTreeNode(treeNode);\n        if (gridNode) {\n          gridNode.expand();\n        }\n        break;\n      }\n      default: {\n        Platform.assertNever(tabName, `Unknown Tab: ${tabName}. Add new case to switch.`);\n      }\n    }\n  }\n\n  #createContentWidget(): UI.Widget.VBox {\n    const defaultDetailsContentWidget = new UI.Widget.VBox();\n    defaultDetailsContentWidget.element.classList.add('timeline-details-view-body');\n    defaultDetailsContentWidget.show(this.defaultDetailsWidget.element);\n    return defaultDetailsContentWidget;\n  }\n\n  private selectorStatsView(): TimelineSelectorStatsView {\n    if (this.lazySelectorStatsView) {\n      return this.lazySelectorStatsView;\n    }\n\n    this.lazySelectorStatsView = new TimelineSelectorStatsView(\n        this.#parsedTrace,\n    );\n    return this.lazySelectorStatsView;\n  }\n\n  getDetailsContentElementForTest(): HTMLElement {\n    return this.defaultDetailsContentWidget.element;\n  }\n\n  revealEventInTreeView(event: Trace.Types.Events.Event|null): void {\n    if (this.tabbedPane.visibleView instanceof TimelineTreeView) {\n      this.tabbedPane.visibleView.highlightEventInTree(event);\n    }\n  }\n\n  async #onTraceBoundsChange(event: TraceBounds.TraceBounds.StateChangedEvent): Promise<void> {\n    if (event.updateType === 'MINIMAP_BOUNDS') {\n      // If new minimap bounds are set, we might need to update the selected entry summary because\n      // the links to other entries (ex. initiator) might be outside of the new breadcrumb.\n      if (this.selection) {\n        await this.setSelection(this.selection);\n      }\n    }\n\n    if (event.updateType === 'RESET' || event.updateType === 'VISIBLE_WINDOW') {\n      // If the update type was a changing of the minimap bounds, we do not\n      // need to redraw.\n      if (!this.selection) {\n        this.scheduleUpdateContentsFromWindow();\n      }\n    }\n  }\n\n  async setModel(data: {\n    parsedTrace: Trace.Handlers.Types.ParsedTrace|null,\n    selectedEvents: Trace.Types.Events.Event[]|null,\n    traceInsightsSets: Trace.Insights.Types.TraceInsightSets|null,\n    eventToRelatedInsightsMap: TimelineComponents.RelatedInsightChips.EventToRelatedInsightsMap|null,\n    entityMapper: Utils.EntityMapper.EntityMapper|null,\n  }): Promise<void> {\n    if (this.#parsedTrace !== data.parsedTrace) {\n      // Clear the selector stats view, so the next time the user views it we\n      // reconstruct it with the new trace data.\n      this.lazySelectorStatsView = null;\n\n      this.#parsedTrace = data.parsedTrace;\n    }\n    if (data.parsedTrace) {\n      this.#filmStrip = Trace.Extras.FilmStrip.fromParsedTrace(data.parsedTrace);\n      this.#entityMapper = new Utils.EntityMapper.EntityMapper(data.parsedTrace);\n    }\n    this.#selectedEvents = data.selectedEvents;\n    this.#traceInsightsSets = data.traceInsightsSets;\n    this.#eventToRelatedInsightsMap = data.eventToRelatedInsightsMap;\n    if (data.eventToRelatedInsightsMap) {\n      this.#relatedInsightChips.eventToRelatedInsightsMap = data.eventToRelatedInsightsMap;\n    }\n    this.tabbedPane.closeTabs([Tab.PaintProfiler, Tab.LayerViewer], false);\n    for (const view of this.rangeDetailViews.values()) {\n      view.setModelWithEvents(data.selectedEvents, data.parsedTrace, data.entityMapper);\n    }\n    // Set the 3p tree model.\n    this.#thirdPartyTree.setModelWithEvents(data.selectedEvents, data.parsedTrace, data.entityMapper);\n    this.lazyPaintProfilerView = null;\n    this.lazyLayersView = null;\n    await this.setSelection(null);\n  }\n\n  private setSummaryContent(node: Node): void {\n    const allTabs = this.tabbedPane.otherTabs(Tab.Details);\n    for (let i = 0; i < allTabs.length; ++i) {\n      if (!this.rangeDetailViews.has(allTabs[i])) {\n        this.tabbedPane.closeTab(allTabs[i]);\n      }\n    }\n\n    // Append relatedChips inside of the node being shown.\n    const chipParent = (node instanceof Element && node.shadowRoot || node);\n    chipParent.appendChild(this.#relatedInsightChips);\n\n    this.defaultDetailsContentWidget.detach();\n    this.defaultDetailsContentWidget = this.#createContentWidget();\n    this.defaultDetailsContentWidget.contentElement.append(node);\n  }\n\n  private updateContents(): void {\n    const traceBoundsState = TraceBounds.TraceBounds.BoundsManager.instance().state();\n    if (!traceBoundsState) {\n      return;\n    }\n    const visibleWindow = traceBoundsState.milli.timelineTraceWindow;\n    // Update the view that we currently have selected.\n    const view = this.rangeDetailViews.get(this.tabbedPane.selectedTabId || '');\n    if (view) {\n      view.updateContents(this.selection || selectionFromRangeMilliSeconds(visibleWindow.min, visibleWindow.max));\n    }\n  }\n\n  private appendTab(id: string, tabTitle: string, view: UI.Widget.Widget, isCloseable?: boolean): void {\n    this.tabbedPane.appendTab(id, tabTitle, view, undefined, undefined, isCloseable);\n    if (this.preferredTabId !== this.tabbedPane.selectedTabId) {\n      this.tabbedPane.selectTab(id);\n    }\n  }\n\n  headerElement(): Element {\n    return this.tabbedPane.headerElement();\n  }\n\n  setPreferredTab(tabId: string): void {\n    this.preferredTabId = tabId;\n  }\n\n  /**\n   * This forces a recalculation and rerendering of the timings\n   * breakdown of a track.\n   * User actions like zooming or scrolling can trigger many updates in\n   * short time windows, so we debounce the calls in those cases. Single\n   * sporadic calls (like selecting a new track) don't need to be\n   * debounced. The forceImmediateUpdate param configures the debouncing\n   * behaviour.\n   */\n  private scheduleUpdateContentsFromWindow(forceImmediateUpdate = false): void {\n    if (!this.#parsedTrace) {\n      this.setSummaryContent(UI.Fragment.html`<div/>`);\n      return;\n    }\n    if (forceImmediateUpdate) {\n      this.updateContentsFromWindow();\n      return;\n    }\n\n    // Debounce this update as it's not critical.\n    if (!this.updateContentsScheduled) {\n      this.updateContentsScheduled = true;\n      setTimeout(() => {\n        if (!this.updateContentsScheduled) {\n          return;\n        }\n        this.updateContentsScheduled = false;\n        this.updateContentsFromWindow();\n      }, 100);\n    }\n  }\n\n  private updateContentsFromWindow(): void {\n    const traceBoundsState = TraceBounds.TraceBounds.BoundsManager.instance().state();\n    if (!traceBoundsState) {\n      return;\n    }\n    const visibleWindow = traceBoundsState.milli.timelineTraceWindow;\n    this.updateSelectedRangeStats(visibleWindow.min, visibleWindow.max);\n    this.updateContents();\n  }\n\n  #getFilmStripFrame(frame: Trace.Types.Events.LegacyTimelineFrame): Trace.Extras.FilmStrip.Frame|null {\n    if (!this.#filmStrip) {\n      return null;\n    }\n\n    const screenshotTime = (frame.idle ? frame.startTime : frame.endTime);\n    const filmStripFrame = Trace.Extras.FilmStrip.frameClosestToTimestamp(this.#filmStrip, screenshotTime);\n    if (!filmStripFrame) {\n      return null;\n    }\n\n    const frameTimeMilliSeconds = Trace.Helpers.Timing.microToMilli(filmStripFrame.screenshotEvent.ts);\n    const frameEndTimeMilliSeconds = Trace.Helpers.Timing.microToMilli(frame.endTime);\n    return frameTimeMilliSeconds - frameEndTimeMilliSeconds < 10 ? filmStripFrame : null;\n  }\n\n  #setSelectionForTimelineFrame(frame: Trace.Types.Events.LegacyTimelineFrame): void {\n    const matchedFilmStripFrame = this.#getFilmStripFrame(frame);\n    this.setSummaryContent(\n        TimelineUIUtils.generateDetailsContentForFrame(frame, this.#filmStrip, matchedFilmStripFrame));\n    const target = SDK.TargetManager.TargetManager.instance().rootTarget();\n    if (frame.layerTree && target) {\n      const layerTreeForFrame = new TracingFrameLayerTree(target, frame.layerTree);\n      const layersView = this.layersView();\n      layersView.showLayerTree(layerTreeForFrame);\n      if (!this.tabbedPane.hasTab(Tab.LayerViewer)) {\n        this.appendTab(Tab.LayerViewer, i18nString(UIStrings.layers), layersView);\n      }\n    }\n  }\n\n  async #setSelectionForNetworkEvent(networkRequest: Trace.Types.Events.SyntheticNetworkRequest): Promise<void> {\n    if (!this.#parsedTrace) {\n      return;\n    }\n    const maybeTarget = targetForEvent(this.#parsedTrace, networkRequest);\n    await this.#networkRequestDetails.setData(this.#parsedTrace, networkRequest, maybeTarget, this.#entityMapper);\n    this.#relatedInsightChips.activeEvent = networkRequest;\n    if (this.#eventToRelatedInsightsMap) {\n      this.#relatedInsightChips.eventToRelatedInsightsMap = this.#eventToRelatedInsightsMap;\n    }\n\n    this.setSummaryContent(this.#networkRequestDetails);\n  }\n\n  async #setSelectionForTraceEvent(event: Trace.Types.Events.Event): Promise<void> {\n    if (!this.#parsedTrace) {\n      return;\n    }\n\n    this.#relatedInsightChips.activeEvent = event;\n    if (this.#eventToRelatedInsightsMap) {\n      this.#relatedInsightChips.eventToRelatedInsightsMap = this.#eventToRelatedInsightsMap;\n    }\n\n    // Special case: if the user selects a layout shift or a layout shift cluster,\n    // render the new layout shift details component.\n    if (Trace.Types.Events.isSyntheticLayoutShift(event) || Trace.Types.Events.isSyntheticLayoutShiftCluster(event)) {\n      const isFreshRecording = Boolean(this.#parsedTrace && Tracker.instance().recordingIsFresh(this.#parsedTrace));\n      this.#layoutShiftDetails.setData(event, this.#traceInsightsSets, this.#parsedTrace, isFreshRecording);\n      this.setSummaryContent(this.#layoutShiftDetails);\n      return;\n    }\n\n    // Otherwise, build the generic trace event details UI.\n    const traceEventDetails = await TimelineUIUtils.buildTraceEventDetails(\n        this.#parsedTrace, event, this.detailsLinkifier, true, this.#entityMapper);\n    this.appendDetailsTabsForTraceEventAndShowDetails(event, traceEventDetails);\n  }\n\n  async setSelection(selection: TimelineSelection|null): Promise<void> {\n    if (!this.#parsedTrace) {\n      // You can't make a selection if we have no trace data.\n      return;\n    }\n    this.detailsLinkifier.reset();\n    this.selection = selection;\n    this.#relatedInsightChips.activeEvent = null;\n    if (!this.selection) {\n      // Update instantly using forceImmediateUpdate, since we are only\n      // making a single call and don't need to debounce.\n      this.scheduleUpdateContentsFromWindow(/* forceImmediateUpdate */ true);\n      return;\n    }\n\n    if (selectionIsEvent(selection)) {\n      // Cancel any pending debounced range stats update\n      this.updateContentsScheduled = false;\n\n      if (Trace.Types.Events.isSyntheticNetworkRequest(selection.event)) {\n        await this.#setSelectionForNetworkEvent(selection.event);\n      } else if (Trace.Types.Events.isLegacyTimelineFrame(selection.event)) {\n        this.#setSelectionForTimelineFrame(selection.event);\n      } else {\n        await this.#setSelectionForTraceEvent(selection.event);\n      }\n    } else if (selectionIsRange(selection)) {\n      const timings = Trace.Helpers.Timing.traceWindowMicroSecondsToMilliSeconds(selection.bounds);\n      this.updateSelectedRangeStats(timings.min, timings.max);\n    }\n\n    this.updateContents();\n  }\n\n  private tabSelected(event: Common.EventTarget.EventTargetEvent<UI.TabbedPane.EventData>): void {\n    if (!event.data.isUserGesture) {\n      return;\n    }\n    this.setPreferredTab(event.data.tabId);\n    this.updateContents();\n  }\n\n  private layersView(): TimelineLayersView {\n    if (this.lazyLayersView) {\n      return this.lazyLayersView;\n    }\n    this.lazyLayersView = new TimelineLayersView(this.showSnapshotInPaintProfiler.bind(this));\n    return this.lazyLayersView;\n  }\n\n  private paintProfilerView(): TimelinePaintProfilerView|null {\n    if (this.lazyPaintProfilerView) {\n      return this.lazyPaintProfilerView;\n    }\n    if (!this.#parsedTrace) {\n      return null;\n    }\n    this.lazyPaintProfilerView = new TimelinePaintProfilerView(this.#parsedTrace);\n    return this.lazyPaintProfilerView;\n  }\n\n  private showSnapshotInPaintProfiler(snapshot: SDK.PaintProfiler.PaintProfilerSnapshot): void {\n    const paintProfilerView = this.paintProfilerView();\n    if (!paintProfilerView) {\n      return;\n    }\n    paintProfilerView.setSnapshot(snapshot);\n    if (!this.tabbedPane.hasTab(Tab.PaintProfiler)) {\n      this.appendTab(Tab.PaintProfiler, i18nString(UIStrings.paintProfiler), paintProfilerView, true);\n    }\n    this.tabbedPane.selectTab(Tab.PaintProfiler, true);\n  }\n\n  private showSelectorStatsForIndividualEvent(event: Trace.Types.Events.UpdateLayoutTree): void {\n    this.showAggregatedSelectorStats([event]);\n  }\n\n  private showAggregatedSelectorStats(events: Trace.Types.Events.UpdateLayoutTree[]): void {\n    const selectorStatsView = this.selectorStatsView();\n\n    selectorStatsView.setAggregatedEvents(events);\n\n    if (!this.tabbedPane.hasTab(Tab.SelectorStats)) {\n      this.appendTab(Tab.SelectorStats, i18nString(UIStrings.selectorStats), selectorStatsView);\n    }\n  }\n\n  private appendDetailsTabsForTraceEventAndShowDetails(event: Trace.Types.Events.Event, content: Node): void {\n    this.setSummaryContent(content);\n    if (Trace.Types.Events.isPaint(event) || Trace.Types.Events.isRasterTask(event)) {\n      this.showEventInPaintProfiler(event);\n    }\n\n    if (Trace.Types.Events.isUpdateLayoutTree(event)) {\n      this.showSelectorStatsForIndividualEvent(event);\n    }\n  }\n\n  private showEventInPaintProfiler(event: Trace.Types.Events.Event): void {\n    const paintProfilerModel =\n        SDK.TargetManager.TargetManager.instance().models(SDK.PaintProfiler.PaintProfilerModel)[0];\n    if (!paintProfilerModel) {\n      return;\n    }\n    const paintProfilerView = this.paintProfilerView();\n    if (!paintProfilerView) {\n      return;\n    }\n    const hasProfileData = paintProfilerView.setEvent(paintProfilerModel, event);\n    if (!hasProfileData) {\n      return;\n    }\n    if (this.tabbedPane.hasTab(Tab.PaintProfiler)) {\n      return;\n    }\n    this.appendTab(Tab.PaintProfiler, i18nString(UIStrings.paintProfiler), paintProfilerView);\n  }\n\n  private updateSelectedRangeStats(startTime: Trace.Types.Timing.Milli, endTime: Trace.Types.Timing.Milli): void {\n    if (!this.#selectedEvents || !this.#parsedTrace || !this.#entityMapper) {\n      return;\n    }\n\n    const minBoundsMilli = Trace.Helpers.Timing.traceWindowMilliSeconds(this.#parsedTrace.Meta.traceBounds).min;\n    const aggregatedStats = TimelineUIUtils.statsForTimeRange(this.#selectedEvents, startTime, endTime);\n    const startOffset = startTime - minBoundsMilli;\n    const endOffset = endTime - minBoundsMilli;\n    const summaryDetailElem = TimelineUIUtils.generateSummaryDetails(\n        aggregatedStats, startOffset, endOffset, this.#selectedEvents, this.#thirdPartyTree);\n\n    this.#thirdPartyTree.updateContents(this.selection || selectionFromRangeMilliSeconds(startTime, endTime));\n\n    this.setSummaryContent(summaryDetailElem);\n\n    // Find all recalculate style events data from range\n    const isSelectorStatsEnabled =\n        Common.Settings.Settings.instance().createSetting('timeline-capture-selector-stats', false).get();\n    if (this.#selectedEvents && isSelectorStatsEnabled) {\n      const eventsInRange = Trace.Helpers.Trace.findUpdateLayoutTreeEvents(\n          this.#selectedEvents,\n          Trace.Helpers.Timing.milliToMicro(startTime),\n          Trace.Helpers.Timing.milliToMicro(endTime),\n      );\n      if (eventsInRange.length > 0) {\n        this.showAggregatedSelectorStats(eventsInRange);\n      }\n    }\n  }\n}\n\nexport enum Tab {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  Details = 'details',\n  EventLog = 'event-log',\n  CallTree = 'call-tree',\n  BottomUp = 'bottom-up',\n  PaintProfiler = 'paint-profiler',\n  LayerViewer = 'layer-viewer',\n  SelectorStats = 'selector-stats',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n", "// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {Category, IsLong} from './TimelineFilters.js';\nimport type {TimelineModeViewDelegate} from './TimelinePanel.js';\nimport {selectionIsEvent, type TimelineSelection} from './TimelineSelection.js';\nimport {TimelineTreeView} from './TimelineTreeView.js';\nimport {TimelineUIUtils} from './TimelineUIUtils.js';\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text for the start time of an activity\n   */\n  startTime: 'Start time',\n  /**\n   *@description Screen reader label for a select box that filters the Performance panel Event Log by duration.\n   */\n  durationFilter: 'Duration filter',\n  /**\n   *@description Text for everything\n   */\n  all: 'All',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/EventsTimelineTreeView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class EventsTimelineTreeView extends TimelineTreeView {\n  private readonly filtersControl: Filters;\n  private readonly delegate: TimelineModeViewDelegate;\n  private currentTree!: Trace.Extras.TraceTree.Node;\n  constructor(delegate: TimelineModeViewDelegate) {\n    super();\n    this.element.setAttribute('jslog', `${VisualLogging.pane('event-log').track({resize: true})}`);\n    this.filtersControl = new Filters();\n    this.filtersControl.addEventListener(Events.FILTER_CHANGED, this.onFilterChanged, this);\n    this.init();\n    this.delegate = delegate;\n    this.dataGrid.markColumnAsSortedBy('start-time', DataGrid.DataGrid.Order.Ascending);\n    this.splitWidget.showBoth();\n  }\n\n  override filters(): Trace.Extras.TraceFilter.TraceFilter[] {\n    return [...super.filters(), ...this.filtersControl.filters()];\n  }\n\n  override updateContents(selection: TimelineSelection): void {\n    super.updateContents(selection);\n    if (selectionIsEvent(selection)) {\n      this.selectEvent(selection.event, true);\n    }\n  }\n\n  override buildTree(): Trace.Extras.TraceTree.Node {\n    this.currentTree = this.buildTopDownTree(true, null);\n    return this.currentTree;\n  }\n\n  private onFilterChanged(): void {\n    const lastSelectedNode = this.lastSelectedNode();\n    const selectedEvent = lastSelectedNode?.event;\n    this.refreshTree();\n    if (selectedEvent) {\n      this.selectEvent(selectedEvent, false);\n    }\n  }\n\n  private selectEvent(event: Trace.Types.Events.Event, expand?: boolean): void {\n    const node = this.eventToTreeNode.get(event);\n    if (!node) {\n      return;\n    }\n    this.selectProfileNode(node, false);\n    if (expand) {\n      const dataGridNode = this.dataGridNodeForTreeNode(node);\n      if (dataGridNode) {\n        dataGridNode.expand();\n      }\n    }\n  }\n\n  override populateColumns(columns: DataGrid.DataGrid.ColumnDescriptor[]): void {\n    columns.push(({\n      id: 'start-time',\n      title: i18nString(UIStrings.startTime),\n      width: '80px',\n      fixedWidth: true,\n      sortable: true,\n    } as DataGrid.DataGrid.ColumnDescriptor));\n    super.populateColumns(columns);\n    columns.filter(c => c.fixedWidth).forEach(c => {\n      c.width = '80px';\n    });\n  }\n\n  override populateToolbar(toolbar: UI.Toolbar.Toolbar): void {\n    super.populateToolbar(toolbar);\n    this.filtersControl.populateToolbar(toolbar);\n  }\n\n  override showDetailsForNode(node: Trace.Extras.TraceTree.Node): boolean {\n    const parsedTrace = this.parsedTrace();\n    if (!parsedTrace) {\n      return false;\n    }\n    const traceEvent = node.event;\n    if (!traceEvent) {\n      return false;\n    }\n    void TimelineUIUtils.buildTraceEventDetails(parsedTrace, traceEvent, this.linkifier, false, null)\n        .then(fragment => this.detailsView.element.appendChild(fragment));\n    return true;\n  }\n\n  override onHover(node: Trace.Extras.TraceTree.Node|null): void {\n    this.delegate.highlightEvent(node?.event ?? null);\n  }\n}\n\nexport class Filters extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly categoryFilter: Category;\n  private readonly durationFilter: IsLong;\n  private readonly filtersInternal: Array<IsLong|Category>;\n  constructor() {\n    super();\n    this.categoryFilter = new Category();\n    this.durationFilter = new IsLong();\n    this.filtersInternal = [this.categoryFilter, this.durationFilter];\n  }\n\n  filters(): Trace.Extras.TraceFilter.TraceFilter[] {\n    return this.filtersInternal;\n  }\n\n  populateToolbar(toolbar: UI.Toolbar.Toolbar): void {\n    const durationFilterUI = new UI.Toolbar.ToolbarComboBox(\n        durationFilterChanged.bind(this), i18nString(UIStrings.durationFilter), undefined, 'duration');\n    for (const durationMs of Filters.durationFilterPresetsMs) {\n      durationFilterUI.addOption(durationFilterUI.createOption(\n          durationMs ? `≥ ${i18n.TimeUtilities.millisToString(durationMs)}` : i18nString(UIStrings.all),\n          String(durationMs)));\n    }\n    toolbar.appendToolbarItem(durationFilterUI);\n\n    const categoryFiltersUI = new Map<string, UI.Toolbar.ToolbarCheckbox>();\n    const categories = Utils.EntryStyles.getCategoryStyles();\n    for (const categoryName in categories) {\n      const category = categories[categoryName as Utils.EntryStyles.EventCategory];\n      if (!category.visible) {\n        continue;\n      }\n      const checkbox = new UI.Toolbar.ToolbarCheckbox(\n          category.title, undefined,\n          categoriesFilterChanged.bind(this, categoryName as Utils.EntryStyles.EventCategory), categoryName);\n      checkbox.setChecked(true);\n      categoryFiltersUI.set(category.name, checkbox);\n      toolbar.appendToolbarItem(checkbox);\n    }\n\n    function durationFilterChanged(this: Filters): void {\n      const duration = (durationFilterUI.selectedOption() as HTMLOptionElement).value;\n      const minimumRecordDuration = parseInt(duration, 10);\n      this.durationFilter.setMinimumRecordDuration(Trace.Types.Timing.Milli(minimumRecordDuration));\n      this.notifyFiltersChanged();\n    }\n\n    function categoriesFilterChanged(this: Filters, name: Utils.EntryStyles.EventCategory): void {\n      const categories = Utils.EntryStyles.getCategoryStyles();\n      const checkBox = categoryFiltersUI.get(name);\n      categories[name].hidden = !checkBox?.checked();\n      this.notifyFiltersChanged();\n    }\n  }\n\n  private notifyFiltersChanged(): void {\n    this.dispatchEventToListeners(Events.FILTER_CHANGED);\n  }\n\n  private static readonly durationFilterPresetsMs = [0, 1, 15];\n}\n\nconst enum Events {\n  FILTER_CHANGED = 'FilterChanged',\n}\n\ninterface EventTypes {\n  [Events.FILTER_CHANGED]: void;\n}\n", "// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../models/trace/trace.js';\n\nimport {TimelineUIUtils} from './TimelineUIUtils.js';\n\nexport class IsLong extends Trace.Extras.TraceFilter.TraceFilter {\n  #minimumRecordDurationMilli = Trace.Types.Timing.Milli(0);\n\n  setMinimumRecordDuration(value: Trace.Types.Timing.Milli): void {\n    this.#minimumRecordDurationMilli = value;\n  }\n\n  accept(event: Trace.Types.Events.Event): boolean {\n    const {duration} = Trace.Helpers.Timing.eventTimingsMilliSeconds(event);\n    return duration >= this.#minimumRecordDurationMilli;\n  }\n}\n\nexport class Category extends Trace.Extras.TraceFilter.TraceFilter {\n  accept(event: Trace.Types.Events.Event): boolean {\n    return !TimelineUIUtils.eventStyle(event).category.hidden;\n  }\n}\n\nexport class TimelineRegExp extends Trace.Extras.TraceFilter.TraceFilter {\n  private regExpInternal!: RegExp|null;\n  constructor(regExp?: RegExp) {\n    super();\n    this.setRegExp(regExp || null);\n  }\n\n  setRegExp(regExp: RegExp|null): void {\n    this.regExpInternal = regExp;\n  }\n\n  regExp(): RegExp|null {\n    return this.regExpInternal;\n  }\n\n  accept(event: Trace.Types.Events.Event, parsedTrace?: Trace.Handlers.Types.ParsedTrace): boolean {\n    return !this.regExpInternal || TimelineUIUtils.testContentMatching(event, this.regExpInternal, parsedTrace);\n  }\n}\n", "// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\n/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n * Copyright (C) 2012 Intel Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as TraceBounds from '../../services/trace_bounds/trace_bounds.js';\nimport * as CodeHighlighter from '../../ui/components/code_highlighter/code_highlighter.js';\n// eslint-disable-next-line rulesdir/es-modules-import\nimport codeHighlighterStyles from '../../ui/components/code_highlighter/codeHighlighter.css.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\n// eslint-disable-next-line rulesdir/es-modules-import\nimport imagePreviewStyles from '../../ui/legacy/components/utils/imagePreview.css.js';\nimport * as LegacyComponents from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {getDurationString} from './AppenderUtils.js';\nimport * as TimelineComponents from './components/components.js';\nimport * as Extensions from './extensions/extensions.js';\nimport {Tracker} from './FreshRecording.js';\nimport {ModificationsManager} from './ModificationsManager.js';\nimport {targetForEvent} from './TargetForEvent.js';\nimport * as ThirdPartyTreeView from './ThirdPartyTreeView.js';\nimport {TimelinePanel} from './TimelinePanel.js';\nimport {selectionFromEvent} from './TimelineSelection.js';\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text that only contain a placeholder\n   *@example {100ms (at 200ms)} PH1\n   */\n  emptyPlaceholder: '{PH1}',  // eslint-disable-line rulesdir/l10n-no-locked-or-placeholder-only-phrase\n  /**\n   *@description Text for timestamps of items\n   */\n  timestamp: 'Timestamp',\n  /**\n   *@description Text shown next to the interaction event's ID in the detail view.\n   */\n  interactionID: 'ID',\n  /**\n   *@description Text shown next to the interaction event's input delay time in the detail view.\n   */\n  inputDelay: 'Input delay',\n  /**\n   *@description Text shown next to the interaction event's thread processing duration in the detail view.\n   */\n  processingDuration: 'Processing duration',\n  /**\n   *@description Text shown next to the interaction event's presentation delay time in the detail view.\n   */\n  presentationDelay: 'Presentation delay',\n  /**\n   *@description Text shown when the user has selected an event that represents script compiliation.\n   */\n  compile: 'Compile',\n  /**\n   *@description Text shown when the user selects an event that represents script parsing.\n   */\n  parse: 'Parse',\n  /**\n   *@description Text with two placeholders separated by a colon\n   *@example {Node removed} PH1\n   *@example {div#id1} PH2\n   */\n  sS: '{PH1}: {PH2}',\n  /**\n   *@description Text that is usually a hyperlink to more documentation\n   */\n  learnMore: 'Learn more',\n  /**\n   *@description Text referring to the status of the browser's compilation cache.\n   */\n  compilationCacheStatus: 'Compilation cache status',\n  /**\n   *@description Text referring to the size of the browser's compiliation cache.\n   */\n  compilationCacheSize: 'Compilation cache size',\n  /**\n   *@description Text in Timeline UIUtils of the Performance panel. \"Compilation\n   * cache\" refers to the code cache described at\n   * https://v8.dev/blog/code-caching-for-devs . This label is followed by the\n   * type of code cache data used, either \"normal\" or \"full\" as described in the\n   * linked article.\n   */\n  compilationCacheKind: 'Compilation cache kind',\n  /**\n   *@description Text used to inform the user that the script they are looking\n   *             at was loaded from the browser's cache.\n   */\n  scriptLoadedFromCache: 'script loaded from cache',\n  /**\n   *@description Text to inform the user that the script they are looking at\n   *             was unable to be loaded from the browser's cache.\n   */\n  failedToLoadScriptFromCache: 'failed to load script from cache',\n  /**\n   *@description Text to inform the user that the script they are looking at was not eligible to be loaded from the browser's cache.\n   */\n  scriptNotEligibleToBeLoadedFromCache: 'script not eligible',\n  /**\n   *@description Label in the summary view in the Performance panel for a number which indicates how much managed memory has been reclaimed by performing Garbage Collection\n   */\n  collected: 'Collected',\n  /**\n   *@description Text for a programming function\n   */\n  function: 'Function',\n  /**\n   *@description Text for referring to the ID of a timer.\n   */\n  timerId: 'Timer ID',\n  /**\n   *@description Text for referring to a timer that has timed-out and therefore is being removed.\n   */\n  timeout: 'Timeout',\n  /**\n   *@description Text used to indicate that a timer is repeating (e.g. every X seconds) rather than a one off.\n   */\n  repeats: 'Repeats',\n  /**\n   *@description Text for referring to the ID of a callback function installed by an event.\n   */\n  callbackId: 'Callback ID',\n  /**\n   *@description Text for a module, the programming concept\n   */\n  module: 'Module',\n  /**\n   *@description Label for a group of JavaScript files\n   */\n  script: 'Script',\n  /**\n   *@description Text used to tell a user that a compilation trace event was streamed.\n   */\n  streamed: 'Streamed',\n  /**\n   *@description Text to indicate if a compilation event was eager.\n   */\n  eagerCompile: 'Compiling all functions eagerly',\n  /**\n   *@description Text to refer to the URL associated with a given event.\n   */\n  url: 'Url',\n  /**\n   *@description Text to indicate to the user the size of the cache (as a filesize - e.g. 5mb).\n   */\n  producedCacheSize: 'Produced cache size',\n  /**\n   *@description Text to indicate to the user the amount of the cache (as a filesize - e.g. 5mb) that has been used.\n   */\n  consumedCacheSize: 'Consumed cache size',\n  /**\n   *@description Related node label in Timeline UIUtils of the Performance panel\n   */\n  layerRoot: 'Layer root',\n  /**\n   *@description Related node label in Timeline UIUtils of the Performance panel\n   */\n  ownerElement: 'Owner element',\n  /**\n   *@description Text used to show the user the URL of the image they are viewing.\n   */\n  imageUrl: 'Image URL',\n  /**\n   *@description Text used to show the user that the URL they are viewing is loading a CSS stylesheet.\n   */\n  stylesheetUrl: 'Stylesheet URL',\n  /**\n   *@description Text used next to a number to show the user how many elements were affected.\n   */\n  elementsAffected: 'Elements affected',\n  /**\n   *@description Text used next to a number to show the user how many nodes required the browser to update and re-layout the page.\n   */\n  nodesThatNeedLayout: 'Nodes that need layout',\n  /**\n   *@description Text used to show the amount in a subset - e.g. \"2 of 10\".\n   *@example {2} PH1\n   *@example {10} PH2\n   */\n  sOfS: '{PH1} of {PH2}',\n  /**\n   *@description Related node label in Timeline UIUtils of the Performance panel\n   */\n  layoutRoot: 'Layout root',\n  /**\n   *@description Text used when viewing an event that can have a custom message attached.\n   */\n  message: 'Message',\n  /**\n   *@description Text used to tell the user they are viewing an event that has a function embedded in it, which is referred to as the \"callback function\".\n   */\n  callbackFunction: 'Callback function',\n  /**\n   *@description Text used to show the relevant range of a file - e.g. \"lines 2-10\".\n   */\n  range: 'Range',\n  /**\n   *@description Text used to refer to the amount of time some event or code was given to complete within.\n   */\n  allottedTime: 'Allotted time',\n  /**\n   *@description Text used to tell a user that a particular event or function was automatically run by a timeout.\n   */\n  invokedByTimeout: 'Invoked by timeout',\n  /**\n   *@description Text that refers to some types\n   */\n  type: 'Type',\n  /**\n   *@description Text for the size of something\n   */\n  size: 'Size',\n  /**\n   *@description Text for the details of something\n   */\n  details: 'Details',\n  /**\n   *@description Text to indicate an item is a warning\n   */\n  warning: 'Warning',\n  /**\n   *@description Text that indicates a particular HTML element or node is related to what the user is viewing.\n   */\n  relatedNode: 'Related node',\n  /**\n   *@description Text for previewing items\n   */\n  preview: 'Preview',\n  /**\n   *@description Text used to refer to the total time summed up across multiple events.\n   */\n  aggregatedTime: 'Aggregated time',\n  /**\n   *@description Text for the duration of something\n   */\n  duration: 'Duration',\n  /**\n   *@description Text for the stack trace of the initiator of something. The Initiator is the event or factor that directly triggered or precipitated a subsequent action.\n   */\n  initiatorStackTrace: 'Initiator stack trace',\n  /**\n   *@description Text for the event initiated by another one\n   */\n  initiatedBy: 'Initiated by',\n  /**\n   *@description Text for the event that is an initiator for another one\n   */\n  initiatorFor: 'Initiator for',\n  /**\n   *@description Text for the underlying data behing a specific flamechart selection. Trace events are the browser instrumentation that are emitted as JSON objects.\n   */\n  traceEvent: 'Trace event',\n  /**\n   *@description Call site stack label in Timeline UIUtils of the Performance panel\n   */\n  timerInstalled: 'Timer installed',\n  /**\n   *@description Call site stack label in Timeline UIUtils of the Performance panel\n   */\n  animationFrameRequested: 'Animation frame requested',\n  /**\n   *@description Call site stack label in Timeline UIUtils of the Performance panel\n   */\n  idleCallbackRequested: 'Idle callback requested',\n  /**\n   *@description Stack label in Timeline UIUtils of the Performance panel\n   */\n  recalculationForced: 'Recalculation forced',\n  /**\n   *@description Call site stack label in Timeline UIUtils of the Performance panel\n   */\n  firstLayoutInvalidation: 'First layout invalidation',\n  /**\n   *@description Stack label in Timeline UIUtils of the Performance panel\n   */\n  layoutForced: 'Layout forced',\n  /**\n   *@description Label in front of CSS property (eg `opacity`) being animated or a CSS animation name (eg `layer-4-fade-in-out`)\n   */\n  animating: 'Animating',\n  /**\n   *@description Label in front of reasons why a CSS animation wasn't composited (aka hardware accelerated)\n   */\n  compositingFailed: 'Compositing failed',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to accelerated animations being disabled. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedAcceleratedAnimationsDisabled: 'Accelerated animations disabled',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to DevTools suppressing the effect. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedEffectSuppressedByDevtools: 'Effect suppressed by DevTools ',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to the animation or effect being invalid. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedInvalidAnimationOrEffect: 'Invalid animation or effect',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to an effect having unsupported timing parameters. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedEffectHasUnsupportedTimingParams: 'Effect has unsupported timing parameters',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to an effect having a composite mode which is not `replace`. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedEffectHasNonReplaceCompositeMode: 'Effect has composite mode other than \"replace\"',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to the target being in an invalid compositing state. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedTargetHasInvalidCompositingState: 'Target has invalid compositing state',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to another animation on the same target being incompatible. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedTargetHasIncompatibleAnimations: 'Target has another animation which is incompatible',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to the target having a CSS offset. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedTargetHasCSSOffset: 'Target has CSS offset',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to the animation affecting non-CSS properties. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedAnimationAffectsNonCSSProperties: 'Animation affects non-CSS properties',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to the transform-related property not being able to be animated on the target. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedTransformRelatedPropertyCannotBeAcceleratedOnTarget:\n      'Transform-related property cannot be accelerated on target',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to a `transform` property being dependent on the size of the element itself. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedTransformDependsBoxSize: 'Transform-related property depends on box size',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to a `filter` property possibly moving pixels. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedFilterRelatedPropertyMayMovePixels: 'Filter-related property may move pixels',\n  /**\n   * @description [ICU Syntax] Descriptive reason for why a user-provided animation failed to be optimized by the browser due to the animated CSS property not being supported on the compositor. Shown in a table with a list of other potential failure reasons.\n   * @example {height, width} properties\n   */\n  compositingFailedUnsupportedCSSProperty: `{propertyCount, plural,\n    =1 {Unsupported CSS property: {properties}}\n    other {Unsupported CSS properties: {properties}}\n  }`,\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to mixing keyframe value types. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedMixedKeyframeValueTypes: 'Mixed keyframe value types',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to the timeline source being in an invalid compositing state. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedTimelineSourceHasInvalidCompositingState: 'Timeline source has invalid compositing state',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to the animation having no visible change. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedAnimationHasNoVisibleChange: 'Animation has no visible change',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to an effect affecting an important property. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedAffectsImportantProperty: 'Effect affects a property with !important',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to the SVG target having an independent transfrom property. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedSVGTargetHasIndependentTransformProperty: 'SVG target has independent transform property',\n  /** Descriptive reason for why a user-provided animation failed to be optimized by the browser due to an unknown reason. Shown in a table with a list of other potential failure reasons.  */\n  compositingFailedUnknownReason: 'Unknown Reason',\n\n  /**\n   *@description Text for the execution stack trace\n   */\n  stackTrace: 'Stack trace',\n  /**\n   *@description Text used to show any invalidations for a particular event that caused the browser to have to do more work to update the page.\n   * @example {2} PH1\n   */\n  invalidations: 'Invalidations ({PH1} total)',\n  /**\n   * @description Text in Timeline UIUtils of the Performance panel. Phrase is followed by a number of milliseconds.\n   * Some events or tasks might have been only started, but have not ended yet. Such events or tasks are considered\n   * \"pending\".\n   */\n  pendingFor: 'Pending for',\n  /**\n   *@description Noun label for a stack trace which indicates the first time some condition was invalidated.\n   */\n  firstInvalidated: 'First invalidated',\n  /**\n   *@description Title of the paint profiler, old name of the performance pane\n   */\n  paintProfiler: 'Paint profiler',\n  /**\n   *@description Text in Timeline Flame Chart View of the Performance panel\n   *@example {Frame} PH1\n   *@example {10ms} PH2\n   */\n  sAtS: '{PH1} at {PH2}',\n  /**\n   *@description Text used next to a time to indicate that the particular event took that much time itself. In context this might look like \"3ms blink.console (self)\"\n   *@example {blink.console} PH1\n   */\n  sSelf: '{PH1} (self)',\n  /**\n   *@description Text used next to a time to indicate that the event's children took that much time. In context this might look like \"3ms blink.console (children)\"\n   *@example {blink.console} PH1\n   */\n  sChildren: '{PH1} (children)',\n  /**\n   *@description Text used to show the user how much time the browser spent on rendering (drawing the page onto the screen).\n   */\n  timeSpentInRendering: 'Time spent in rendering',\n  /**\n   *@description Text for a rendering frame\n   */\n  frame: 'Frame',\n  /**\n   *@description Text used to refer to the duration of an event at a given offset - e.g. \"2ms at 10ms\" which can be read as \"2ms starting after 10ms\".\n   *@example {10ms} PH1\n   *@example {10ms} PH2\n   */\n  sAtSParentheses: '{PH1} (at {PH2})',\n  /**\n   *@description Text of a DOM element in Timeline UIUtils of the Performance panel\n   */\n  UnknownNode: '[ unknown node ]',\n  /**\n   *@description Text used to refer to a particular element and the file it was referred to in.\n   *@example {node} PH1\n   *@example {app.js} PH2\n   */\n  invalidationWithCallFrame: '{PH1} at {PH2}',\n  /**\n   *@description Text indicating that something is outside of the Performace Panel Timeline Minimap range\n   */\n  outsideBreadcrumbRange: '(outside of the breadcrumb range)',\n  /**\n   *@description Text indicating that something is hidden from the Performace Panel Timeline\n   */\n  entryIsHidden: '(entry is hidden)',\n  /**\n   * @description Title of a row in the details view for a `Recalculate Styles` event that contains more info about selector stats tracing.\n   */\n  selectorStatsTitle: 'Selector stats',\n  /**\n   * @description Info text that explains to the user how to enable selector stats tracing.\n   * @example {Setting Name} PH1\n   */\n  sSelectorStatsInfo: 'Select \"{PH1}\" to collect detailed CSS selector matching statistics.',\n  /**\n   * @description Label for a numeric value that was how long to wait before a function was run.\n   */\n  delay: 'Delay',\n  /**\n   * @description Label for a string that describes the priority at which a task was scheduled, like 'background' for low-priority tasks, and 'user-blocking' for high priority.\n   */\n  priority: 'Priority',\n  /**\n   * @description Label for third party table.\n   */\n  thirdPartyTable: '1st / 3rd party table',\n  /**\n   * @description Label for the a source URL.\n   */\n  source: 'Source',\n  /**\n   * @description Label for a URL origin.\n   */\n  origin: 'Origin',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineUIUtils.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet eventDispatchDesciptors: EventDispatchTypeDescriptor[];\n\nlet colorGenerator: Common.Color.Generator;\n\ninterface LinkifyLocationOptions {\n  scriptId: Protocol.Runtime.ScriptId|null;\n  url: string;\n  lineNumber: number;\n  target: SDK.Target.Target|null;\n  linkifier: LegacyComponents.Linkifier.Linkifier;\n  isFreshRecording?: boolean;\n  columnNumber?: number;\n  omitOrigin?: boolean;\n}\n\ntype TimeRangeCategoryStats = Record<string, number>;\n\nconst {SamplesIntegrator} = Trace.Helpers.SamplesIntegrator;\n\nexport class TimelineUIUtils {\n  /**\n   * use getGetDebugModeEnabled() to query this variable.\n   */\n  static debugModeEnabled: boolean|undefined = undefined;\n  static getGetDebugModeEnabled(): boolean {\n    if (TimelineUIUtils.debugModeEnabled === undefined) {\n      TimelineUIUtils.debugModeEnabled =\n          Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_DEBUG_MODE);\n    }\n    return TimelineUIUtils.debugModeEnabled;\n  }\n  static frameDisplayName(frame: Protocol.Runtime.CallFrame): string {\n    const maybeResolvedData = Utils.SourceMapsResolver.SourceMapsResolver.resolvedCodeLocationForCallFrame(frame);\n    const functionName = maybeResolvedData?.name || frame.functionName;\n    if (!SamplesIntegrator.isNativeRuntimeFrame(frame)) {\n      return UI.UIUtils.beautifyFunctionName(functionName);\n    }\n    const nativeGroup = SamplesIntegrator.nativeGroup(functionName);\n    switch (nativeGroup) {\n      case SamplesIntegrator.NativeGroups.COMPILE:\n        return i18nString(UIStrings.compile);\n      case SamplesIntegrator.NativeGroups.PARSE:\n        return i18nString(UIStrings.parse);\n    }\n    return functionName;\n  }\n\n  static testContentMatching(\n      traceEvent: Trace.Types.Events.Event, regExp: RegExp, parsedTrace?: Trace.Handlers.Types.ParsedTrace): boolean {\n    const title = TimelineUIUtils.eventStyle(traceEvent).title;\n    const tokens = [title];\n\n    if (Trace.Types.Events.isProfileCall(traceEvent)) {\n      // In the future this case will not be possible - wherever we call this\n      // function we will be able to pass in the data from the new engine. But\n      // currently this is called in a variety of places including from the\n      // legacy model which does not have a reference to the new engine's data.\n      // So if we are missing the data, we just fallback to the name from the\n      // callFrame.\n      if (!parsedTrace?.Samples) {\n        tokens.push(traceEvent.callFrame.functionName);\n      } else {\n        tokens.push(Trace.Handlers.ModelHandlers.Samples.getProfileCallFunctionName(parsedTrace.Samples, traceEvent));\n      }\n    }\n    if (parsedTrace) {\n      const url = Trace.Handlers.Helpers.getNonResolvedURL(traceEvent, parsedTrace);\n      if (url) {\n        tokens.push(url);\n      }\n    }\n    if (TimelineUIUtils.getGetDebugModeEnabled()) {\n      // When in debug mode append top level properties (like timestamp)\n      // and deeply nested properties.\n      appendObjectProperties(traceEvent as unknown as ContentObject, 4);\n    } else {\n      appendObjectProperties(traceEvent.args as ContentObject, 2);\n    }\n    const result = tokens.join('|').match(regExp);\n    return result ? result.length > 0 : false;\n\n    interface ContentObject {\n      [x: string]: number|string|ContentObject;\n    }\n    function appendObjectProperties(object: ContentObject, depth: number): void {\n      if (!depth) {\n        return;\n      }\n      for (const key in object) {\n        const value = object[key];\n        if (typeof value === 'string') {\n          tokens.push(value);\n        } else if (typeof value === 'number') {\n          tokens.push(String(value));\n        } else if (typeof value === 'object' && value !== null) {\n          appendObjectProperties(value, depth - 1);\n        }\n      }\n    }\n  }\n\n  static eventStyle(event: Trace.Types.Events.Event): Utils.EntryStyles.TimelineRecordStyle {\n    if (Trace.Types.Events.isProfileCall(event) && event.callFrame.functionName === '(idle)') {\n      return new Utils.EntryStyles.TimelineRecordStyle(event.name, Utils.EntryStyles.getCategoryStyles().idle);\n    }\n\n    if (event.cat === Trace.Types.Events.Categories.Console || event.cat === Trace.Types.Events.Categories.UserTiming) {\n      return new Utils.EntryStyles.TimelineRecordStyle(event.name, Utils.EntryStyles.getCategoryStyles()['scripting']);\n    }\n\n    return Utils.EntryStyles.getEventStyle(event.name as Trace.Types.Events.Name) ??\n        new Utils.EntryStyles.TimelineRecordStyle(event.name, Utils.EntryStyles.getCategoryStyles().other);\n  }\n\n  static eventColor(event: Trace.Types.Events.Event): string {\n    if (Trace.Types.Events.isProfileCall(event)) {\n      const frame = event.callFrame;\n      if (TimelineUIUtils.isUserFrame(frame)) {\n        // TODO(andoli): This should use the resolved (sourcemapped) URL\n        return TimelineUIUtils.colorForId(frame.url);\n      }\n    }\n    if (Trace.Types.Extensions.isSyntheticExtensionEntry(event)) {\n      return Extensions.ExtensionUI.extensionEntryColor(event);\n    }\n    let parsedColor = TimelineUIUtils.eventStyle(event).category.getComputedColorValue();\n    // This event is considered idle time but still rendered as a scripting event here\n    // to connect the StreamingCompileScriptParsing events it belongs to.\n    if (event.name === Trace.Types.Events.Name.STREAMING_COMPILE_SCRIPT_WAITING) {\n      parsedColor = Utils.EntryStyles.getCategoryStyles().scripting.getComputedColorValue();\n      if (!parsedColor) {\n        throw new Error('Unable to parse color from getCategoryStyles().scripting.color');\n      }\n    }\n    return parsedColor;\n  }\n\n  static eventTitle(event: Trace.Types.Events.Event): string {\n    // Profile call events do not have a args.data property, thus, we\n    // need to check for profile calls in the beginning of this\n    // function.\n    if (Trace.Types.Events.isProfileCall(event)) {\n      const maybeResolvedData = Utils.SourceMapsResolver.SourceMapsResolver.resolvedCodeLocationForEntry(event);\n      const displayName = maybeResolvedData?.name || TimelineUIUtils.frameDisplayName(event.callFrame);\n      return displayName;\n    }\n    if (event.name === 'EventTiming' && Trace.Types.Events.isSyntheticInteraction(event)) {\n      // TODO(crbug.com/365047728): replace this entire method with this call.\n      return Utils.EntryName.nameForEntry(event);\n    }\n    const title = TimelineUIUtils.eventStyle(event).title;\n    if (Trace.Helpers.Trace.eventHasCategory(event, Trace.Types.Events.Categories.Console)) {\n      return title;\n    }\n    if (Trace.Types.Events.isConsoleTimeStamp(event) && event.args.data) {\n      return i18nString(UIStrings.sS, {PH1: title, PH2: event.args.data.name ?? event.args.data.message});\n    }\n    if (Trace.Types.Events.isAnimation(event) && event.args.data.name) {\n      return i18nString(UIStrings.sS, {PH1: title, PH2: event.args.data.name});\n    }\n    if (Trace.Types.Events.isDispatch(event)) {\n      return i18nString(UIStrings.sS, {PH1: title, PH2: event.args.data.type});\n    }\n    return title;\n  }\n\n  static isUserFrame(frame: Protocol.Runtime.CallFrame): boolean {\n    return frame.scriptId !== '0' && !(frame.url?.startsWith('native '));\n  }\n\n  static async buildDetailsNodeForTraceEvent(\n      event: Trace.Types.Events.Event, target: SDK.Target.Target|null, linkifier: LegacyComponents.Linkifier.Linkifier,\n      isFreshRecording = false, parsedTrace: Trace.Handlers.Types.ParsedTrace): Promise<Node|null> {\n    let details: HTMLElement|HTMLSpanElement|(Element | null)|Text|null = null;\n    let detailsText;\n    // TODO(40287735): update this code with type-safe data checks.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const unsafeEventArgs = event.args as Record<string, any>;\n    // TODO(40287735): update this code with type-safe data checks.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const unsafeEventData = event.args?.data as Record<string, any>;\n\n    switch (event.name) {\n      case Trace.Types.Events.Name.PAINT_IMAGE:\n      case Trace.Types.Events.Name.DECODE_IMAGE:\n      case Trace.Types.Events.Name.DECODE_LAZY_PIXEL_REF:\n      case Trace.Types.Events.Name.XHR_READY_STATE_CHANGED:\n      case Trace.Types.Events.Name.XHR_LOAD:\n      case Trace.Types.Events.Name.RESOURCE_WILL_SEND_REQUEST:\n      case Trace.Types.Events.Name.RESOURCE_SEND_REQUEST:\n      case Trace.Types.Events.Name.RESOURCE_RECEIVE_DATA:\n      case Trace.Types.Events.Name.RESOURCE_RECEIVE_RESPONSE:\n      case Trace.Types.Events.Name.RESOURCE_FINISH: {\n        const url = Trace.Handlers.Helpers.getNonResolvedURL(event, parsedTrace);\n        if (url) {\n          const options = {\n            tabStop: true,\n            showColumnNumber: false,\n            inlineFrameIndex: 0,\n          };\n          details = LegacyComponents.Linkifier.Linkifier.linkifyURL(url, options);\n        }\n        break;\n      }\n\n      case Trace.Types.Events.Name.FUNCTION_CALL: {\n        details = document.createElement('span');\n\n        // FunctionCall events have an args.data that could be a CallFrame, if all the details are present, so we check for that.\n        const callFrame = Trace.Helpers.Trace.getZeroIndexedStackTraceInEventPayload(event)?.at(0);\n        if (Trace.Types.Events.isFunctionCall(event) && callFrame) {\n          UI.UIUtils.createTextChild(\n              details,\n              TimelineUIUtils.frameDisplayName(\n                  {...callFrame, scriptId: String(callFrame.scriptId) as Protocol.Runtime.ScriptId}));\n        }\n        const location = this.linkifyLocation({\n          scriptId: unsafeEventData['scriptId'],\n          url: unsafeEventData['url'],\n          lineNumber: callFrame?.lineNumber || 0,\n          columnNumber: callFrame?.columnNumber,\n          target,\n          isFreshRecording,\n          linkifier,\n          omitOrigin: true,\n        });\n        if (location) {\n          UI.UIUtils.createTextChild(details, ' @ ');\n          details.appendChild(location);\n        }\n        break;\n      }\n\n      case Trace.Types.Events.Name.COMPILE_MODULE:\n      case Trace.Types.Events.Name.CACHE_MODULE: {\n        details = this.linkifyLocation({\n          scriptId: null,\n          url: unsafeEventArgs['fileName'],\n          lineNumber: 0,\n          columnNumber: 0,\n          target,\n          isFreshRecording,\n          linkifier,\n        });\n        break;\n      }\n\n      case Trace.Types.Events.Name.COMPILE_SCRIPT:\n      case Trace.Types.Events.Name.CACHE_SCRIPT:\n      case Trace.Types.Events.Name.EVALUATE_SCRIPT: {\n        const url = unsafeEventData['url'];\n        if (url) {\n          const {lineNumber} = Trace.Helpers.Trace.getZeroIndexedLineAndColumnForEvent(event);\n          details = this.linkifyLocation({\n            scriptId: null,\n            url,\n            lineNumber: lineNumber || 0,\n            columnNumber: 0,\n            target,\n            isFreshRecording,\n            linkifier,\n            omitOrigin: true,\n          });\n        }\n        break;\n      }\n\n      case Trace.Types.Events.Name.BACKGROUND_DESERIALIZE:\n      case Trace.Types.Events.Name.STREAMING_COMPILE_SCRIPT: {\n        const url = unsafeEventData['url'];\n        if (url) {\n          details = this.linkifyLocation({\n            scriptId: null,\n            url,\n            lineNumber: 0,\n            columnNumber: 0,\n            target,\n            isFreshRecording,\n            linkifier,\n            omitOrigin: true,\n          });\n        }\n        break;\n      }\n\n      default: {\n        /**\n         * Some events have a stack trace which is extracted by default at @see TimelineUIUtils.generateCauses\n         * thus, we prevent extracting the stack trace again here.\n         */\n        if (Trace.Helpers.Trace.eventHasCategory(event, Trace.Types.Events.Categories.Console) ||\n            Trace.Types.Events.isUserTiming(event) || Trace.Types.Extensions.isSyntheticExtensionEntry(event) ||\n            Trace.Types.Events.isProfileCall(event)) {\n          detailsText = null;\n        } else {\n          details = this.linkifyTopCallFrame(event, target, linkifier, isFreshRecording) ?? null;\n        }\n        break;\n      }\n    }\n\n    if (!details && detailsText) {\n      details = document.createTextNode(detailsText);\n    }\n    return details;\n  }\n\n  static linkifyLocation(linkifyOptions: LinkifyLocationOptions): Element|null {\n    const {scriptId, url, lineNumber, columnNumber, isFreshRecording, linkifier, target, omitOrigin} = linkifyOptions;\n    const options = {\n      lineNumber,\n      columnNumber,\n      showColumnNumber: true,\n      inlineFrameIndex: 0,\n      className: 'timeline-details',\n      tabStop: true,\n      omitOrigin,\n    };\n    if (isFreshRecording) {\n      return linkifier.linkifyScriptLocation(\n          target, scriptId, url as Platform.DevToolsPath.UrlString, lineNumber, options);\n    }\n    return LegacyComponents.Linkifier.Linkifier.linkifyURL(url as Platform.DevToolsPath.UrlString, options);\n  }\n\n  static linkifyTopCallFrame(\n      event: Trace.Types.Events.Event, target: SDK.Target.Target|null, linkifier: LegacyComponents.Linkifier.Linkifier,\n      isFreshRecording = false): Element|null {\n    let frame = Trace.Helpers.Trace.getZeroIndexedStackTraceInEventPayload(event)?.[0];\n    if (Trace.Types.Events.isProfileCall(event)) {\n      frame = event.callFrame;\n    }\n    if (!frame) {\n      return null;\n    }\n    const options = {\n      className: 'timeline-details',\n      tabStop: true,\n      inlineFrameIndex: 0,\n      showColumnNumber: true,\n      columnNumber: frame.columnNumber,\n      lineNumber: frame.lineNumber,\n    };\n    if (isFreshRecording) {\n      return linkifier.maybeLinkifyConsoleCallFrame(target, frame, {showColumnNumber: true, inlineFrameIndex: 0});\n    }\n    return LegacyComponents.Linkifier.Linkifier.linkifyURL(frame.url as Platform.DevToolsPath.UrlString, options);\n  }\n\n  static buildDetailsNodeForMarkerEvents(event: Trace.Types.Events.MarkerEvent): HTMLElement {\n    let link = 'https://web.dev/user-centric-performance-metrics/';\n    let name = 'page performance metrics';\n    switch (event.name) {\n      case Trace.Types.Events.Name.MARK_LCP_CANDIDATE:\n        link = 'https://web.dev/lcp/';\n        name = 'largest contentful paint';\n        break;\n      case Trace.Types.Events.Name.MARK_FCP:\n        link = 'https://web.dev/first-contentful-paint/';\n        name = 'first contentful paint';\n        break;\n      default:\n        break;\n    }\n\n    const html = UI.Fragment.html`<div>${\n        UI.XLink.XLink.create(\n            link, i18nString(UIStrings.learnMore), undefined, undefined, 'learn-more')} about ${name}.</div>`;\n    return html as HTMLElement;\n  }\n\n  static buildConsumeCacheDetails(\n      eventData: {\n        consumedCacheSize?: number,\n        cacheRejected?: boolean,\n        cacheKind?: string,\n      },\n      contentHelper: TimelineDetailsContentHelper): void {\n    if (typeof eventData.consumedCacheSize === 'number') {\n      contentHelper.appendTextRow(\n          i18nString(UIStrings.compilationCacheStatus), i18nString(UIStrings.scriptLoadedFromCache));\n      contentHelper.appendTextRow(\n          i18nString(UIStrings.compilationCacheSize), i18n.ByteUtilities.bytesToString(eventData.consumedCacheSize));\n      const cacheKind = eventData.cacheKind;\n      if (cacheKind) {\n        contentHelper.appendTextRow(i18nString(UIStrings.compilationCacheKind), cacheKind);\n      }\n    } else if ('cacheRejected' in eventData && eventData['cacheRejected']) {\n      // Version mismatch or similar.\n      contentHelper.appendTextRow(\n          i18nString(UIStrings.compilationCacheStatus), i18nString(UIStrings.failedToLoadScriptFromCache));\n    } else {\n      contentHelper.appendTextRow(\n          i18nString(UIStrings.compilationCacheStatus), i18nString(UIStrings.scriptNotEligibleToBeLoadedFromCache));\n    }\n  }\n\n  static async buildTraceEventDetails(\n      parsedTrace: Trace.Handlers.Types.ParsedTrace,\n      event: Trace.Types.Events.Event,\n      linkifier: LegacyComponents.Linkifier.Linkifier,\n      canShowPieChart: boolean,\n      entityMapper: Utils.EntityMapper.EntityMapper|null,\n      ): Promise<DocumentFragment> {\n    const maybeTarget = targetForEvent(parsedTrace, event);\n    const {duration} = Trace.Helpers.Timing.eventTimingsMicroSeconds(event);\n    const selfTime = getEventSelfTime(event, parsedTrace);\n    const relatedNodesMap = await Utils.EntryNodes.relatedDOMNodesForEvent(\n        parsedTrace,\n        event,\n    );\n    let entityAppended = false;\n\n    if (maybeTarget) {\n      // @ts-expect-error TODO(crbug.com/1011811): Remove symbol usage.\n      if (typeof event[previewElementSymbol] === 'undefined') {\n        let previewElement: (Element|null)|null = null;\n        const url = Trace.Handlers.Helpers.getNonResolvedURL(event, parsedTrace);\n        if (url) {\n          previewElement = await LegacyComponents.ImagePreview.ImagePreview.build(url, false, {\n            imageAltText: LegacyComponents.ImagePreview.ImagePreview.defaultAltTextForImageURL(url),\n            precomputedFeatures: undefined,\n            align: LegacyComponents.ImagePreview.Align.START,\n          });\n        } else if (Trace.Types.Events.isPaint(event)) {\n          previewElement = await TimelineUIUtils.buildPicturePreviewContent(parsedTrace, event, maybeTarget);\n        }\n        // @ts-expect-error TODO(crbug.com/1011811): Remove symbol usage.\n        event[previewElementSymbol] = previewElement;\n      }\n    }\n\n    // This message may vary per event.name;\n    let relatedNodeLabel;\n\n    const contentHelper = new TimelineDetailsContentHelper(targetForEvent(parsedTrace, event), linkifier);\n\n    const defaultColorForEvent = this.eventColor(event);\n    const isMarker = parsedTrace && isMarkerEvent(parsedTrace, event);\n    const color = isMarker ? TimelineUIUtils.markerStyleForEvent(event).color : defaultColorForEvent;\n\n    contentHelper.addSection(TimelineUIUtils.eventTitle(event), color);\n\n    // TODO: as part of the removal of the old engine, produce a typesafe way\n    // to look up args and data for events.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const unsafeEventArgs = event.args as Record<string, any>;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const unsafeEventData = event.args?.data as Record<string, any>;\n    const initiator = parsedTrace.Initiators.eventToInitiator.get(event) ?? null;\n    const initiatorFor = parsedTrace.Initiators.initiatorToEvents.get(event) ?? null;\n\n    let url: Platform.DevToolsPath.UrlString|null = null;\n\n    if (parsedTrace) {\n      const warnings = TimelineComponents.DetailsView.buildWarningElementsForEvent(event, parsedTrace);\n      for (const warning of warnings) {\n        contentHelper.appendElementRow(i18nString(UIStrings.warning), warning, true);\n      }\n    }\n\n    // Add timestamp to user timings.\n    if (Trace.Helpers.Trace.eventHasCategory(event, Trace.Types.Events.Categories.UserTiming)) {\n      const adjustedEventTimeStamp = timeStampForEventAdjustedForClosestNavigationIfPossible(\n          event,\n          parsedTrace,\n      );\n      contentHelper.appendTextRow(\n          i18nString(UIStrings.timestamp), i18n.TimeUtilities.preciseMillisToString(adjustedEventTimeStamp, 1));\n    }\n\n    // Only show total time and self time for events with non-zero durations.\n    if (duration !== 0 && !Number.isNaN(duration)) {\n      const timeStr = getDurationString(duration, selfTime);\n      contentHelper.appendTextRow(i18nString(UIStrings.duration), timeStr);\n    }\n\n    if (Trace.Types.Events.isPerformanceMark(event) && event.args.data?.detail) {\n      const detailContainer = TimelineUIUtils.renderObjectJson(JSON.parse(event.args.data?.detail));\n      contentHelper.appendElementRow(i18nString(UIStrings.details), detailContainer);\n    }\n    if (Trace.Types.Events.isSyntheticUserTiming(event) && event.args?.data?.beginEvent.args.detail) {\n      const detailContainer = TimelineUIUtils.renderObjectJson(JSON.parse(event.args?.data?.beginEvent.args.detail));\n      contentHelper.appendElementRow(i18nString(UIStrings.details), detailContainer);\n    }\n\n    if (parsedTrace.Meta.traceIsGeneric) {\n      TimelineUIUtils.renderEventJson(event, contentHelper);\n      return contentHelper.fragment;\n    }\n\n    if (Trace.Types.Events.isV8Compile(event)) {\n      url = event.args.data?.url as Platform.DevToolsPath.UrlString;\n      if (url) {\n        const {lineNumber, columnNumber} = Trace.Helpers.Trace.getZeroIndexedLineAndColumnForEvent(event);\n        contentHelper.appendLocationRow(\n            i18nString(UIStrings.script), url, lineNumber || 0, columnNumber, undefined, true);\n        const originWithEntity = this.getOriginWithEntity(entityMapper, parsedTrace, event);\n        if (originWithEntity) {\n          contentHelper.appendElementRow(i18nString(UIStrings.origin), originWithEntity);\n        }\n        entityAppended = true;\n      }\n      const isEager = Boolean(event.args.data?.eager);\n      if (isEager) {\n        contentHelper.appendTextRow(i18nString(UIStrings.eagerCompile), true);\n      }\n\n      const isStreamed = Boolean(event.args.data?.streamed);\n      contentHelper.appendTextRow(\n          i18nString(UIStrings.streamed),\n          isStreamed + (isStreamed ? '' : `: ${event.args.data?.notStreamedReason || ''}`));\n      if (event.args.data) {\n        TimelineUIUtils.buildConsumeCacheDetails(event.args.data, contentHelper);\n      }\n    }\n\n    if (Trace.Types.Extensions.isSyntheticExtensionEntry(event)) {\n      for (const [key, value] of event.args.properties || []) {\n        contentHelper.appendTextRow(key, String(value));\n      }\n    }\n\n    const isFreshRecording = Boolean(parsedTrace && Tracker.instance().recordingIsFresh(parsedTrace));\n\n    switch (event.name) {\n      case Trace.Types.Events.Name.GC:\n      case Trace.Types.Events.Name.MAJOR_GC:\n      case Trace.Types.Events.Name.MINOR_GC: {\n        const delta = unsafeEventArgs['usedHeapSizeBefore'] - unsafeEventArgs['usedHeapSizeAfter'];\n        contentHelper.appendTextRow(i18nString(UIStrings.collected), i18n.ByteUtilities.bytesToString(delta));\n        break;\n      }\n\n      case Trace.Types.Events.Name.PROFILE_CALL: {\n        const profileCall = event as Trace.Types.Events.SyntheticProfileCall;\n        const resolvedURL = Utils.SourceMapsResolver.SourceMapsResolver.resolvedURLForEntry(parsedTrace, profileCall);\n        if (!resolvedURL) {\n          break;\n        }\n        const callFrame = profileCall.callFrame;\n        // Render the URL with its location content.\n        contentHelper.appendLocationRow(\n            i18nString(UIStrings.source), resolvedURL, callFrame.lineNumber || 0, callFrame.columnNumber, undefined,\n            true);\n        const originWithEntity = this.getOriginWithEntity(entityMapper, parsedTrace, profileCall);\n        if (originWithEntity) {\n          contentHelper.appendElementRow(i18nString(UIStrings.origin), originWithEntity);\n        }\n        entityAppended = true;\n        break;\n      }\n      case Trace.Types.Events.Name.FUNCTION_CALL: {\n        const detailsNode = await TimelineUIUtils.buildDetailsNodeForTraceEvent(\n            event, targetForEvent(parsedTrace, event), linkifier, isFreshRecording, parsedTrace);\n        if (detailsNode) {\n          contentHelper.appendElementRow(i18nString(UIStrings.function), detailsNode);\n          const originWithEntity = this.getOriginWithEntity(entityMapper, parsedTrace, event);\n          if (originWithEntity) {\n            contentHelper.appendElementRow(i18nString(UIStrings.origin), originWithEntity);\n          }\n          entityAppended = true;\n        }\n        break;\n      }\n\n      case Trace.Types.Events.Name.TIMER_FIRE:\n      case Trace.Types.Events.Name.TIMER_INSTALL:\n      case Trace.Types.Events.Name.TIMER_REMOVE: {\n        contentHelper.appendTextRow(i18nString(UIStrings.timerId), unsafeEventData.timerId);\n\n        if (event.name === Trace.Types.Events.Name.TIMER_INSTALL) {\n          contentHelper.appendTextRow(\n              i18nString(UIStrings.timeout), i18n.TimeUtilities.millisToString(unsafeEventData['timeout']));\n          contentHelper.appendTextRow(i18nString(UIStrings.repeats), !unsafeEventData['singleShot']);\n        }\n        break;\n      }\n\n      case Trace.Types.Events.Name.SCHEDULE_POST_TASK_CALLBACK:\n      case Trace.Types.Events.Name.RUN_POST_TASK_CALLBACK: {\n        contentHelper.appendTextRow(\n            i18nString(UIStrings.delay), i18n.TimeUtilities.millisToString(unsafeEventData['delay']));\n        contentHelper.appendTextRow(i18nString(UIStrings.priority), unsafeEventData['priority']);\n        break;\n      }\n\n      case Trace.Types.Events.Name.FIRE_ANIMATION_FRAME: {\n        contentHelper.appendTextRow(i18nString(UIStrings.callbackId), unsafeEventData['id']);\n        break;\n      }\n\n      case Trace.Types.Events.Name.COMPILE_MODULE: {\n        contentHelper.appendLocationRow(i18nString(UIStrings.module), unsafeEventArgs['fileName'], 0);\n        break;\n      }\n      case Trace.Types.Events.Name.COMPILE_SCRIPT: {\n        // This case is handled above\n        break;\n      }\n\n      case Trace.Types.Events.Name.CACHE_MODULE: {\n        url = unsafeEventData && unsafeEventData['url'] as Platform.DevToolsPath.UrlString;\n        contentHelper.appendTextRow(\n            i18nString(UIStrings.compilationCacheSize),\n            i18n.ByteUtilities.bytesToString(unsafeEventData['producedCacheSize']));\n        break;\n      }\n\n      case Trace.Types.Events.Name.CACHE_SCRIPT: {\n        url = unsafeEventData && unsafeEventData['url'] as Platform.DevToolsPath.UrlString;\n        if (url) {\n          const {lineNumber, columnNumber} = Trace.Helpers.Trace.getZeroIndexedLineAndColumnForEvent(event);\n          contentHelper.appendLocationRow(\n              i18nString(UIStrings.script), url, lineNumber || 0, columnNumber, undefined, true);\n          const originWithEntity = this.getOriginWithEntity(entityMapper, parsedTrace, event);\n          if (originWithEntity) {\n            contentHelper.appendElementRow(i18nString(UIStrings.origin), originWithEntity);\n          }\n          entityAppended = true;\n        }\n        contentHelper.appendTextRow(\n            i18nString(UIStrings.compilationCacheSize),\n            i18n.ByteUtilities.bytesToString(unsafeEventData['producedCacheSize']));\n        break;\n      }\n\n      case Trace.Types.Events.Name.EVALUATE_SCRIPT: {\n        url = unsafeEventData && unsafeEventData['url'] as Platform.DevToolsPath.UrlString;\n        if (url) {\n          const {lineNumber, columnNumber} = Trace.Helpers.Trace.getZeroIndexedLineAndColumnForEvent(event);\n          contentHelper.appendLocationRow(\n              i18nString(UIStrings.script), url, lineNumber || 0, columnNumber, undefined, true);\n          const originWithEntity = this.getOriginWithEntity(entityMapper, parsedTrace, event);\n          if (originWithEntity) {\n            contentHelper.appendElementRow(i18nString(UIStrings.origin), originWithEntity);\n          }\n          entityAppended = true;\n        }\n        break;\n      }\n\n      case Trace.Types.Events.Name.WASM_STREAM_FROM_RESPONSE_CALLBACK:\n      case Trace.Types.Events.Name.WASM_COMPILED_MODULE:\n      case Trace.Types.Events.Name.WASM_CACHED_MODULE:\n      case Trace.Types.Events.Name.WASM_MODULE_CACHE_HIT:\n      case Trace.Types.Events.Name.WASM_MODULE_CACHE_INVALID: {\n        if (unsafeEventData) {\n          url = unsafeEventArgs['url'] as Platform.DevToolsPath.UrlString;\n          if (url) {\n            contentHelper.appendTextRow(i18nString(UIStrings.url), url);\n          }\n          const producedCachedSize = unsafeEventArgs['producedCachedSize'];\n          if (producedCachedSize) {\n            contentHelper.appendTextRow(i18nString(UIStrings.producedCacheSize), producedCachedSize);\n          }\n          const consumedCachedSize = unsafeEventArgs['consumedCachedSize'];\n          if (consumedCachedSize) {\n            contentHelper.appendTextRow(i18nString(UIStrings.consumedCacheSize), consumedCachedSize);\n          }\n        }\n        break;\n      }\n\n      case Trace.Types.Events.Name.PAINT:\n      case Trace.Types.Events.Name.PAINT_SETUP:\n      case Trace.Types.Events.Name.RASTERIZE:\n      case Trace.Types.Events.Name.SCROLL_LAYER: {\n        relatedNodeLabel = i18nString(UIStrings.layerRoot);\n        break;\n      }\n\n      case Trace.Types.Events.Name.PAINT_IMAGE:\n      case Trace.Types.Events.Name.DECODE_LAZY_PIXEL_REF:\n      case Trace.Types.Events.Name.DECODE_IMAGE:\n      case Trace.Types.Events.Name.DRAW_LAZY_PIXEL_REF: {\n        relatedNodeLabel = i18nString(UIStrings.ownerElement);\n        url = Trace.Handlers.Helpers.getNonResolvedURL(event, parsedTrace);\n        if (url) {\n          const options = {\n            tabStop: true,\n            showColumnNumber: false,\n            inlineFrameIndex: 0,\n          };\n          contentHelper.appendElementRow(\n              i18nString(UIStrings.imageUrl), LegacyComponents.Linkifier.Linkifier.linkifyURL(url, options));\n        }\n        break;\n      }\n\n      case Trace.Types.Events.Name.PARSE_AUTHOR_STYLE_SHEET: {\n        url = unsafeEventData['styleSheetUrl'] as Platform.DevToolsPath.UrlString;\n        if (url) {\n          const options = {\n            tabStop: true,\n            showColumnNumber: false,\n            inlineFrameIndex: 0,\n          };\n          contentHelper.appendElementRow(\n              i18nString(UIStrings.stylesheetUrl), LegacyComponents.Linkifier.Linkifier.linkifyURL(url, options));\n        }\n        break;\n      }\n\n      case Trace.Types.Events.Name.UPDATE_LAYOUT_TREE: {\n        contentHelper.appendTextRow(i18nString(UIStrings.elementsAffected), unsafeEventArgs['elementCount']);\n\n        const selectorStatsSetting =\n            Common.Settings.Settings.instance().createSetting('timeline-capture-selector-stats', false);\n        if (!selectorStatsSetting.get()) {\n          const note = document.createElement('span');\n          note.textContent = i18nString(UIStrings.sSelectorStatsInfo, {PH1: selectorStatsSetting.title()});\n          contentHelper.appendElementRow(i18nString(UIStrings.selectorStatsTitle), note);\n        }\n\n        break;\n      }\n\n      case Trace.Types.Events.Name.LAYOUT: {\n        const beginData = unsafeEventArgs['beginData'];\n        contentHelper.appendTextRow(\n            i18nString(UIStrings.nodesThatNeedLayout),\n            i18nString(UIStrings.sOfS, {PH1: beginData['dirtyObjects'], PH2: beginData['totalObjects']}));\n        relatedNodeLabel = i18nString(UIStrings.layoutRoot);\n        break;\n      }\n\n      case Trace.Types.Events.Name.CONSOLE_TIME: {\n        contentHelper.appendTextRow(i18nString(UIStrings.message), event.name);\n        break;\n      }\n\n      case Trace.Types.Events.Name.WEB_SOCKET_CREATE:\n      case Trace.Types.Events.Name.WEB_SOCKET_SEND_HANDSHAKE_REQUEST:\n      case Trace.Types.Events.Name.WEB_SOCKET_RECEIVE_HANDSHAKE_REQUEST:\n      case Trace.Types.Events.Name.WEB_SOCKET_SEND:\n      case Trace.Types.Events.Name.WEB_SOCKET_RECEIVE:\n      case Trace.Types.Events.Name.WEB_SOCKET_DESTROY: {\n        if (Trace.Types.Events.isWebSocketTraceEvent(event)) {\n          const rows = TimelineComponents.DetailsView.buildRowsForWebSocketEvent(event, parsedTrace);\n          for (const {key, value} of rows) {\n            contentHelper.appendTextRow(key, value);\n          }\n        }\n        break;\n      }\n\n      case Trace.Types.Events.Name.EMBEDDER_CALLBACK: {\n        contentHelper.appendTextRow(i18nString(UIStrings.callbackFunction), unsafeEventData['callbackName']);\n        break;\n      }\n\n      case Trace.Types.Events.Name.ANIMATION: {\n        if (!Trace.Types.Events.isSyntheticAnimation(event)) {\n          break;\n        }\n        const {displayName, nodeName} = event.args.data.beginEvent.args.data;\n        displayName && contentHelper.appendTextRow(i18nString(UIStrings.animating), displayName);\n        // If relatedNodes is empty (maybe saved trace), then print the text description of the DOM node.\n        if (!relatedNodesMap?.size && nodeName) {\n          contentHelper.appendTextRow(i18nString(UIStrings.relatedNode), nodeName);\n        }\n\n        const CLSInsight = Trace.Insights.Models.CLSCulprits;\n        const failures = CLSInsight.getNonCompositedFailure(event);\n        if (!failures.length) {\n          break;\n        }\n\n        const failureReasons = new Set(failures.map(f => f.failureReasons).flat().filter(Boolean));\n        const unsupportedProperties =\n            new Set(failures.map(f => f.unsupportedProperties).flat().filter(Boolean)) as Set<string>;\n\n        // The failureReasons can be empty when Blink added a new failure reason that is\n        // not supported by DevTools yet\n        if (failureReasons.size === 0) {\n          contentHelper.appendElementRow(\n              i18nString(UIStrings.compositingFailed), i18nString(UIStrings.compositingFailedUnknownReason), true);\n        } else {\n          for (const reason of failureReasons) {\n            let str;\n            switch (reason) {\n              case CLSInsight.AnimationFailureReasons.ACCELERATED_ANIMATIONS_DISABLED:\n                str = i18nString(UIStrings.compositingFailedAcceleratedAnimationsDisabled);\n                break;\n              case CLSInsight.AnimationFailureReasons.EFFECT_SUPPRESSED_BY_DEVTOOLS:\n                str = i18nString(UIStrings.compositingFailedEffectSuppressedByDevtools);\n                break;\n              case CLSInsight.AnimationFailureReasons.INVALID_ANIMATION_OR_EFFECT:\n                str = i18nString(UIStrings.compositingFailedInvalidAnimationOrEffect);\n                break;\n              case CLSInsight.AnimationFailureReasons.EFFECT_HAS_UNSUPPORTED_TIMING_PARAMS:\n                str = i18nString(UIStrings.compositingFailedEffectHasUnsupportedTimingParams);\n                break;\n              case CLSInsight.AnimationFailureReasons.EFFECT_HAS_NON_REPLACE_COMPOSITE_MODE:\n                str = i18nString(UIStrings.compositingFailedEffectHasNonReplaceCompositeMode);\n                break;\n              case CLSInsight.AnimationFailureReasons.TARGET_HAS_INVALID_COMPOSITING_STATE:\n                str = i18nString(UIStrings.compositingFailedTargetHasInvalidCompositingState);\n                break;\n              case CLSInsight.AnimationFailureReasons.TARGET_HAS_INCOMPATIBLE_ANIMATIONS:\n                str = i18nString(UIStrings.compositingFailedTargetHasIncompatibleAnimations);\n                break;\n              case CLSInsight.AnimationFailureReasons.TARGET_HAS_CSS_OFFSET:\n                str = i18nString(UIStrings.compositingFailedTargetHasCSSOffset);\n                break;\n              case CLSInsight.AnimationFailureReasons.ANIMATION_AFFECTS_NON_CSS_PROPERTIES:\n                str = i18nString(UIStrings.compositingFailedAnimationAffectsNonCSSProperties);\n                break;\n              case CLSInsight.AnimationFailureReasons.TRANSFORM_RELATED_PROPERTY_CANNOT_BE_ACCELERATED_ON_TARGET:\n                str = i18nString(UIStrings.compositingFailedTransformRelatedPropertyCannotBeAcceleratedOnTarget);\n                break;\n              case CLSInsight.AnimationFailureReasons.TRANSFROM_BOX_SIZE_DEPENDENT:\n                str = i18nString(UIStrings.compositingFailedTransformDependsBoxSize);\n                break;\n              case CLSInsight.AnimationFailureReasons.FILTER_RELATED_PROPERTY_MAY_MOVE_PIXELS:\n                str = i18nString(UIStrings.compositingFailedFilterRelatedPropertyMayMovePixels);\n                break;\n              case CLSInsight.AnimationFailureReasons.UNSUPPORTED_CSS_PROPERTY:\n                str = i18nString(UIStrings.compositingFailedUnsupportedCSSProperty, {\n                  propertyCount: unsupportedProperties.size,\n                  properties: new Intl.ListFormat(undefined, {style: 'short', type: 'conjunction'})\n                                  .format(unsupportedProperties),\n                });\n                break;\n              case CLSInsight.AnimationFailureReasons.MIXED_KEYFRAME_VALUE_TYPES:\n                str = i18nString(UIStrings.compositingFailedMixedKeyframeValueTypes);\n                break;\n              case CLSInsight.AnimationFailureReasons.TIMELINE_SOURCE_HAS_INVALID_COMPOSITING_STATE:\n                str = i18nString(UIStrings.compositingFailedTimelineSourceHasInvalidCompositingState);\n                break;\n              case CLSInsight.AnimationFailureReasons.ANIMATION_HAS_NO_VISIBLE_CHANGE:\n                str = i18nString(UIStrings.compositingFailedAnimationHasNoVisibleChange);\n                break;\n              case CLSInsight.AnimationFailureReasons.AFFECTS_IMPORTANT_PROPERTY:\n                str = i18nString(UIStrings.compositingFailedAffectsImportantProperty);\n                break;\n              case CLSInsight.AnimationFailureReasons.SVG_TARGET_HAS_INDEPENDENT_TRANSFORM_PROPERTY:\n                str = i18nString(UIStrings.compositingFailedSVGTargetHasIndependentTransformProperty);\n                break;\n              default:\n                // We should never actually end up here, as adding a new AnimationFailureReason\n                // should also require adding a UIString that describes it\n                str = i18nString(UIStrings.compositingFailedUnknownReason);\n                break;\n            }\n            str && contentHelper.appendElementRow(i18nString(UIStrings.compositingFailed), str, true);\n          }\n        }\n\n        break;\n      }\n\n      case Trace.Types.Events.Name.PARSE_HTML: {\n        const beginData = unsafeEventArgs['beginData'];\n        const startLine = beginData['startLine'] - 1;\n        const endLine = unsafeEventArgs['endData'] ? unsafeEventArgs['endData']['endLine'] - 1 : undefined;\n        url = beginData['url'];\n        if (url) {\n          contentHelper.appendLocationRange(i18nString(UIStrings.range), url, startLine, endLine);\n        }\n        break;\n      }\n\n      // @ts-expect-error Fall-through intended.\n      case Trace.Types.Events.Name.FIRE_IDLE_CALLBACK: {\n        contentHelper.appendTextRow(\n            i18nString(UIStrings.allottedTime),\n            i18n.TimeUtilities.millisToString(unsafeEventData['allottedMilliseconds']));\n        contentHelper.appendTextRow(i18nString(UIStrings.invokedByTimeout), unsafeEventData['timedOut']);\n      }\n\n      case Trace.Types.Events.Name.REQUEST_IDLE_CALLBACK:\n      case Trace.Types.Events.Name.CANCEL_IDLE_CALLBACK: {\n        contentHelper.appendTextRow(i18nString(UIStrings.callbackId), unsafeEventData['id']);\n        break;\n      }\n\n      case Trace.Types.Events.Name.EVENT_DISPATCH: {\n        contentHelper.appendTextRow(i18nString(UIStrings.type), unsafeEventData['type']);\n        break;\n      }\n\n      // @ts-expect-error Fall-through intended.\n      case Trace.Types.Events.Name.MARK_LCP_CANDIDATE: {\n        contentHelper.appendTextRow(i18nString(UIStrings.type), String(unsafeEventData['type']));\n        contentHelper.appendTextRow(i18nString(UIStrings.size), String(unsafeEventData['size']));\n      }\n\n      case Trace.Types.Events.Name.MARK_FIRST_PAINT:\n      case Trace.Types.Events.Name.MARK_FCP:\n      case Trace.Types.Events.Name.MARK_LOAD:\n      case Trace.Types.Events.Name.MARK_DOM_CONTENT: {\n        const adjustedEventTimeStamp = timeStampForEventAdjustedForClosestNavigationIfPossible(\n            event,\n            parsedTrace,\n        );\n\n        contentHelper.appendTextRow(\n            i18nString(UIStrings.timestamp), i18n.TimeUtilities.preciseMillisToString(adjustedEventTimeStamp, 1));\n\n        if (Trace.Types.Events.isMarkerEvent(event)) {\n          contentHelper.appendElementRow(\n              i18nString(UIStrings.details), TimelineUIUtils.buildDetailsNodeForMarkerEvents(event));\n        }\n\n        break;\n      }\n\n      case Trace.Types.Events.Name.EVENT_TIMING: {\n        const detailsNode = await TimelineUIUtils.buildDetailsNodeForTraceEvent(\n            event, targetForEvent(parsedTrace, event), linkifier, isFreshRecording, parsedTrace);\n        if (detailsNode) {\n          contentHelper.appendElementRow(i18nString(UIStrings.details), detailsNode);\n        }\n        if (Trace.Types.Events.isSyntheticInteraction(event)) {\n          const inputDelay = i18n.TimeUtilities.formatMicroSecondsAsMillisFixed(event.inputDelay);\n          const mainThreadTime = i18n.TimeUtilities.formatMicroSecondsAsMillisFixed(event.mainThreadHandling);\n          const presentationDelay = i18n.TimeUtilities.formatMicroSecondsAsMillisFixed(event.presentationDelay);\n          contentHelper.appendTextRow(i18nString(UIStrings.interactionID), event.interactionId);\n          contentHelper.appendTextRow(i18nString(UIStrings.inputDelay), inputDelay);\n          contentHelper.appendTextRow(i18nString(UIStrings.processingDuration), mainThreadTime);\n          contentHelper.appendTextRow(i18nString(UIStrings.presentationDelay), presentationDelay);\n        }\n        break;\n      }\n\n      default: {\n        const detailsNode = await TimelineUIUtils.buildDetailsNodeForTraceEvent(\n            event, targetForEvent(parsedTrace, event), linkifier, isFreshRecording, parsedTrace);\n        if (detailsNode) {\n          contentHelper.appendElementRow(i18nString(UIStrings.details), detailsNode);\n        }\n        break;\n      }\n    }\n    const relatedNodes = relatedNodesMap?.values() || [];\n    for (const relatedNode of relatedNodes) {\n      if (relatedNode) {\n        const nodeSpan = await Common.Linkifier.Linkifier.linkify(relatedNode);\n        contentHelper.appendElementRow(relatedNodeLabel || i18nString(UIStrings.relatedNode), nodeSpan);\n      }\n    }\n\n    // @ts-expect-error TODO(crbug.com/1011811): Remove symbol usage.\n    if (event[previewElementSymbol]) {\n      contentHelper.addSection(i18nString(UIStrings.preview));\n      // @ts-expect-error TODO(crbug.com/1011811): Remove symbol usage.\n      contentHelper.appendElementRow('', event[previewElementSymbol]);\n    }\n\n    if (!entityAppended) {\n      const originWithEntity = this.getOriginWithEntity(entityMapper, parsedTrace, event);\n      if (originWithEntity) {\n        contentHelper.appendElementRow(i18nString(UIStrings.origin), originWithEntity);\n      }\n    }\n\n    const stackTrace = Trace.Helpers.Trace.getZeroIndexedStackTraceInEventPayload(event);\n    if (Trace.Types.Events.isUserTiming(event) || Trace.Types.Extensions.isSyntheticExtensionEntry(event) ||\n        Trace.Types.Events.isProfileCall(event) || initiator || initiatorFor || stackTrace ||\n        parsedTrace?.Invalidations.invalidationsForEvent.get(event)) {\n      await TimelineUIUtils.generateCauses(event, contentHelper, parsedTrace);\n    }\n\n    if (Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_DEBUG_MODE)) {\n      TimelineUIUtils.renderEventJson(event, contentHelper);\n    }\n\n    const stats: TimeRangeCategoryStats = {};\n    const showPieChart =\n        canShowPieChart && parsedTrace && TimelineUIUtils.aggregatedStatsForTraceEvent(stats, parsedTrace, event);\n    if (showPieChart) {\n      contentHelper.addSection(i18nString(UIStrings.aggregatedTime));\n      const pieChart = TimelineUIUtils.generatePieChart(stats, TimelineUIUtils.eventStyle(event).category, selfTime);\n      contentHelper.appendElementRow('', pieChart);\n    }\n\n    return contentHelper.fragment;\n  }\n\n  static statsForTimeRange(\n      events: Trace.Types.Events.Event[], startTime: Trace.Types.Timing.Milli,\n      endTime: Trace.Types.Timing.Milli): TimeRangeCategoryStats {\n    if (!events.length) {\n      return {idle: endTime - startTime};\n    }\n\n    buildRangeStatsCacheIfNeeded(events);\n    const aggregatedStats = subtractStats(aggregatedStatsAtTime(endTime), aggregatedStatsAtTime(startTime));\n    const aggregatedTotal = Object.values(aggregatedStats).reduce((a, b) => a + b, 0);\n    aggregatedStats['idle'] = Math.max(0, endTime - startTime - aggregatedTotal);\n    return aggregatedStats;\n\n    function aggregatedStatsAtTime(time: number): TimeRangeCategoryStats {\n      const stats: TimeRangeCategoryStats = {};\n      // @ts-expect-error TODO(crbug.com/1011811): Remove symbol usage.\n      const cache = events[categoryBreakdownCacheSymbol];\n      for (const category in cache) {\n        const categoryCache = cache[category];\n        const index =\n            Platform.ArrayUtilities.upperBound(categoryCache.time, time, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n        let value;\n        if (index === 0) {\n          value = 0;\n        } else if (index === categoryCache.time.length) {\n          value = categoryCache.value[categoryCache.value.length - 1];\n        } else {\n          const t0 = categoryCache.time[index - 1];\n          const t1 = categoryCache.time[index];\n          const v0 = categoryCache.value[index - 1];\n          const v1 = categoryCache.value[index];\n          value = v0 + (v1 - v0) * (time - t0) / (t1 - t0);\n        }\n        stats[category] = value;\n      }\n      return stats;\n    }\n\n    function subtractStats(a: TimeRangeCategoryStats, b: TimeRangeCategoryStats): TimeRangeCategoryStats {\n      const result = Object.assign({}, a);\n      for (const key in b) {\n        result[key] -= b[key];\n      }\n      return result;\n    }\n\n    function buildRangeStatsCacheIfNeeded(events: Trace.Types.Events.Event[]): void {\n      // @ts-expect-error TODO(crbug.com/1011811): Remove symbol usage.\n      if (events[categoryBreakdownCacheSymbol]) {\n        return;\n      }\n\n      // aggregatedStats is a map by categories. For each category there's an array\n      // containing sorted time points which records accumulated value of the category.\n      const aggregatedStats: Record<string, {\n        time: number[],\n        value: number[],\n      }> = {};\n      const categoryStack: string[] = [];\n      let lastTime = 0;\n      Trace.Helpers.Trace.forEachEvent(events, {\n        onStartEvent,\n        onEndEvent,\n      });\n\n      function updateCategory(category: string, time: number): void {\n        let statsArrays: {\n          time: number[],\n          value: number[],\n        } = aggregatedStats[category];\n        if (!statsArrays) {\n          statsArrays = {time: [], value: []};\n          aggregatedStats[category] = statsArrays;\n        }\n        if (statsArrays.time.length && statsArrays.time[statsArrays.time.length - 1] === time || lastTime > time) {\n          return;\n        }\n        const lastValue = statsArrays.value.length > 0 ? statsArrays.value[statsArrays.value.length - 1] : 0;\n        statsArrays.value.push(lastValue + time - lastTime);\n        statsArrays.time.push(time);\n      }\n\n      function categoryChange(from: string|null, to: string|null, time: number): void {\n        if (from) {\n          updateCategory(from, time);\n        }\n        lastTime = time;\n        if (to) {\n          updateCategory(to, time);\n        }\n      }\n\n      function onStartEvent(e: Trace.Types.Events.Event): void {\n        const {startTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(e);\n        const category = Utils.EntryStyles.getEventStyle(e.name as Trace.Types.Events.Name)?.category.name ||\n            Utils.EntryStyles.getCategoryStyles().other.name;\n        const parentCategory = categoryStack.length ? categoryStack[categoryStack.length - 1] : null;\n        if (category !== parentCategory) {\n          categoryChange(parentCategory || null, category, startTime);\n        }\n        categoryStack.push(category);\n      }\n\n      function onEndEvent(e: Trace.Types.Events.Event): void {\n        const {endTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(e);\n        const category = categoryStack.pop();\n        const parentCategory = categoryStack.length ? categoryStack[categoryStack.length - 1] : null;\n        if (category !== parentCategory) {\n          categoryChange(category || null, parentCategory || null, endTime || 0);\n        }\n      }\n\n      const obj = (events as Object);\n      // @ts-expect-error TODO(crbug.com/1011811): Remove symbol usage.\n      obj[categoryBreakdownCacheSymbol] = aggregatedStats;\n    }\n  }\n\n  private static renderEventJson(event: Trace.Types.Events.Event, contentHelper: TimelineDetailsContentHelper): void {\n    contentHelper.addSection(i18nString(UIStrings.traceEvent));\n\n    const eventWithArgsFirst = {\n      ...{args: event.args},\n      ...event,\n    };\n    const highlightContainer = TimelineUIUtils.renderObjectJson(eventWithArgsFirst);\n    contentHelper.appendElementRow('', highlightContainer);\n  }\n\n  private static renderObjectJson(obj: Object): HTMLDivElement {\n    const indentLength = Common.Settings.Settings.instance().moduleSetting('text-editor-indent').get().length;\n    // Elide if the data is huge. Then remove the initial new-line for a denser UI\n    const eventStr = JSON.stringify(obj, null, indentLength).slice(0, 10_000).replace(/{\\n  /, '{ ');\n\n    // Use CodeHighlighter for syntax highlighting.\n    const highlightContainer = document.createElement('div');\n    const shadowRoot = UI.UIUtils.createShadowRootWithCoreStyles(highlightContainer, {cssFile: codeHighlighterStyles});\n    const elem = shadowRoot.createChild('div');\n    elem.classList.add('monospace', 'source-code');\n    elem.textContent = eventStr;\n    void CodeHighlighter.CodeHighlighter.highlightNode(elem, 'text/javascript');\n    return highlightContainer;\n  }\n\n  static stackTraceFromCallFrames(callFrames: Protocol.Runtime.CallFrame[]|Trace.Types.Events.CallFrame[]):\n      Protocol.Runtime.StackTrace {\n    return {callFrames} as Protocol.Runtime.StackTrace;\n  }\n\n  static async generateCauses(\n      event: Trace.Types.Events.Event, contentHelper: TimelineDetailsContentHelper,\n      parsedTrace: Trace.Handlers.Types.ParsedTrace): Promise<void> {\n    const {startTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(event);\n    let initiatorStackLabel = i18nString(UIStrings.initiatorStackTrace);\n    let stackLabel = i18nString(UIStrings.stackTrace);\n    const stackTraceForEvent = Trace.Extras.StackTraceForEvent.get(event, parsedTrace);\n    if (stackTraceForEvent?.callFrames.length || stackTraceForEvent?.description || stackTraceForEvent?.parent) {\n      contentHelper.addSection(i18nString(UIStrings.stackTrace));\n      contentHelper.createChildStackTraceElement(stackTraceForEvent);\n      // TODO(andoli): also build stack trace component for other events\n      // that have a stack trace using the StackTraceForEvent helper.\n    } else {\n      const stackTrace = Trace.Helpers.Trace.getZeroIndexedStackTraceInEventPayload(event);\n      if (stackTrace?.length) {\n        contentHelper.addSection(stackLabel);\n        contentHelper.createChildStackTraceElement(TimelineUIUtils.stackTraceFromCallFrames(stackTrace));\n      }\n    }\n    switch (event.name) {\n      case Trace.Types.Events.Name.TIMER_FIRE:\n        initiatorStackLabel = i18nString(UIStrings.timerInstalled);\n        break;\n      case Trace.Types.Events.Name.FIRE_ANIMATION_FRAME:\n        initiatorStackLabel = i18nString(UIStrings.animationFrameRequested);\n        break;\n      case Trace.Types.Events.Name.FIRE_IDLE_CALLBACK:\n        initiatorStackLabel = i18nString(UIStrings.idleCallbackRequested);\n        break;\n      case Trace.Types.Events.Name.UPDATE_LAYOUT_TREE:\n        initiatorStackLabel = i18nString(UIStrings.firstInvalidated);\n        stackLabel = i18nString(UIStrings.recalculationForced);\n        break;\n      case Trace.Types.Events.Name.LAYOUT:\n        initiatorStackLabel = i18nString(UIStrings.firstLayoutInvalidation);\n        stackLabel = i18nString(UIStrings.layoutForced);\n        break;\n    }\n\n    const initiator = parsedTrace.Initiators.eventToInitiator.get(event);\n    const initiatorFor = parsedTrace.Initiators.initiatorToEvents.get(event);\n    const invalidations = parsedTrace.Invalidations.invalidationsForEvent.get(event);\n\n    if (initiator) {\n      // If we have an initiator for the event, we can show its stack trace, a link to reveal the initiator,\n      // and the time since the initiator (Pending For).\n      const stackTrace = Trace.Helpers.Trace.getZeroIndexedStackTraceInEventPayload(initiator);\n      if (stackTrace) {\n        contentHelper.addSection(initiatorStackLabel);\n        contentHelper.createChildStackTraceElement(TimelineUIUtils.stackTraceFromCallFrames(stackTrace.map(frame => {\n          return {\n            ...frame,\n            scriptId: String(frame.scriptId) as Protocol.Runtime.ScriptId,\n          };\n        })));\n      }\n\n      const link = this.createEntryLink(initiator);\n      contentHelper.appendElementRow(i18nString(UIStrings.initiatedBy), link);\n\n      const {startTime: initiatorStartTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(initiator);\n      const delay = startTime - initiatorStartTime;\n      contentHelper.appendTextRow(i18nString(UIStrings.pendingFor), i18n.TimeUtilities.preciseMillisToString(delay, 1));\n    }\n\n    if (initiatorFor) {\n      // If the event is an initiator for some entries, add links to reveal them.\n      const links = document.createElement('div');\n      initiatorFor.map((initiator, i) => {\n        links.appendChild(this.createEntryLink(initiator));\n        // Add space between each link if it's not last\n        if (i < initiatorFor.length - 1) {\n          links.append(' ');\n        }\n      });\n      contentHelper.appendElementRow(UIStrings.initiatorFor, links);\n    }\n\n    if (invalidations?.length) {\n      const totalInvalidations = parsedTrace.Invalidations.invalidationCountForEvent.get(event) ??\n          0;  // Won't be 0, but saves us dealing with undefined.\n      contentHelper.addSection(i18nString(UIStrings.invalidations, {PH1: totalInvalidations}));\n      await TimelineUIUtils.generateInvalidationsList(invalidations, contentHelper);\n    }\n  }\n\n  private static createEntryLink(entry: Trace.Types.Events.Event): HTMLElement {\n    const link = document.createElement('span');\n\n    const traceBoundsState = TraceBounds.TraceBounds.BoundsManager.instance().state();\n\n    if (!traceBoundsState) {\n      console.error('Tried to link to an entry without any traceBoundsState. This should never happen.');\n      return link;\n    }\n\n    // Check is the entry is outside of the current breadcrumb. If it is, don't create a link to navigate to it because there is no way to navigate outside breadcrumb without removing it. Instead, just display the name and \"outside breadcrumb\" text\n    // Consider entry outside breadcrumb only if it is fully outside. If a part of it is visible, we can still select it.\n    const isEntryOutsideBreadcrumb = traceBoundsState.micro.minimapTraceBounds.min > entry.ts + (entry.dur || 0) ||\n        traceBoundsState.micro.minimapTraceBounds.max < entry.ts;\n\n    // Check if it is in the hidden array\n    const isEntryHidden = ModificationsManager.activeManager()?.getEntriesFilter().entryIsInvisible(entry);\n\n    if (!isEntryOutsideBreadcrumb) {\n      link.classList.add('timeline-link');\n      UI.ARIAUtils.markAsLink(link);\n      link.tabIndex = 0;\n      link.addEventListener('click', () => {\n        TimelinePanel.instance().select(selectionFromEvent(entry));\n      });\n\n      link.addEventListener('keydown', event => {\n        if (event.key === Platform.KeyboardUtilities.ENTER_KEY) {\n          TimelinePanel.instance().select(selectionFromEvent(entry));\n          event.consume(true);\n        }\n      });\n    }\n\n    if (isEntryHidden) {\n      link.textContent = this.eventTitle(entry) + ' ' + i18nString(UIStrings.entryIsHidden);\n    } else if (isEntryOutsideBreadcrumb) {\n      link.textContent = this.eventTitle(entry) + ' ' + i18nString(UIStrings.outsideBreadcrumbRange);\n    } else {\n      link.textContent = this.eventTitle(entry);\n    }\n\n    return link;\n  }\n\n  private static async generateInvalidationsList(\n      invalidations: Trace.Types.Events.InvalidationTrackingEvent[],\n      contentHelper: TimelineDetailsContentHelper): Promise<void> {\n    const {groupedByReason, backendNodeIds} = TimelineComponents.DetailsView.generateInvalidationsList(invalidations);\n\n    let relatedNodesMap: Map<number, SDK.DOMModel.DOMNode|null>|null = null;\n    const target = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    const domModel = target?.model(SDK.DOMModel.DOMModel);\n    if (domModel) {\n      relatedNodesMap = await domModel.pushNodesByBackendIdsToFrontend(backendNodeIds);\n    }\n\n    Object.keys(groupedByReason).forEach(reason => {\n      TimelineUIUtils.generateInvalidationsForReason(reason, groupedByReason[reason], relatedNodesMap, contentHelper);\n    });\n  }\n\n  private static generateInvalidationsForReason(\n      reason: string, invalidations: Trace.Types.Events.InvalidationTrackingEvent[],\n      relatedNodesMap: Map<number, SDK.DOMModel.DOMNode|null>|null, contentHelper: TimelineDetailsContentHelper): void {\n    function createLinkForInvalidationNode(invalidation: Trace.Types.Events.InvalidationTrackingEvent):\n        HTMLSpanElement {\n      const node = (invalidation.args.data.nodeId && relatedNodesMap) ?\n          relatedNodesMap.get(invalidation.args.data.nodeId) :\n          null;\n      if (node) {\n        const nodeSpan = document.createElement('span');\n        void Common.Linkifier.Linkifier.linkify(node).then(link => nodeSpan.appendChild(link));\n        return nodeSpan;\n      }\n      if (invalidation.args.data.nodeName) {\n        const nodeSpan = document.createElement('span');\n        nodeSpan.textContent = invalidation.args.data.nodeName;\n        return nodeSpan;\n      }\n      const nodeSpan = document.createElement('span');\n      UI.UIUtils.createTextChild(nodeSpan, i18nString(UIStrings.UnknownNode));\n      return nodeSpan;\n    }\n\n    const generatedItems = new Set<string>();\n\n    for (const invalidation of invalidations) {\n      const stackTrace = Trace.Helpers.Trace.getZeroIndexedStackTraceInEventPayload(invalidation);\n      let scriptLink: HTMLElement|null = null;\n      const callFrame = stackTrace?.at(0);\n      if (callFrame) {\n        scriptLink = contentHelper.linkifier()?.maybeLinkifyScriptLocation(\n                         SDK.TargetManager.TargetManager.instance().rootTarget(),\n                         callFrame.scriptId as Protocol.Runtime.ScriptId,\n                         callFrame.url as Platform.DevToolsPath.UrlString,\n                         callFrame.lineNumber,\n                         ) ||\n            null;\n      }\n\n      const niceNodeLink = createLinkForInvalidationNode(invalidation);\n\n      const text = scriptLink ?\n          i18n.i18n.getFormatLocalizedString(\n              str_, UIStrings.invalidationWithCallFrame, {PH1: niceNodeLink, PH2: scriptLink}) as HTMLElement :\n          niceNodeLink;\n\n      // Sometimes we can get different Invalidation events which cause\n      // the same text for the same element for the same reason to be\n      // generated. Rather than show the user duplicates, if we have\n      // generated text that looks identical to this before, we will\n      // bail.\n      const generatedText: string = (typeof text === 'string' ? text : text.innerText);\n      if (generatedItems.has(generatedText)) {\n        continue;\n      }\n\n      generatedItems.add(generatedText);\n      contentHelper.appendElementRow(reason, text);\n    }\n  }\n\n  /** Populates the passed object then returns true/false if it makes sense to show the pie chart */\n  private static aggregatedStatsForTraceEvent(\n      total: TimeRangeCategoryStats, parsedTrace: Trace.Handlers.Types.ParsedTrace,\n      event: Trace.Types.Events.Event): boolean {\n    const events = parsedTrace.Renderer?.allTraceEntries || [];\n    const {startTime, endTime} = Trace.Helpers.Timing.eventTimingsMicroSeconds(event);\n    function eventComparator(startTime: number, e: Trace.Types.Events.Event): number {\n      return startTime - e.ts;\n    }\n    // Find index of selected event amongst allTraceEntries.\n    const index = Platform.ArrayUtilities.binaryIndexOf(events, startTime, eventComparator);\n    // Not a main thread event?\n    if (index < 0) {\n      return false;\n    }\n    let hasChildren = false;\n    if (endTime) {\n      for (let i = index; i < events.length; i++) {\n        const nextEvent = events[i];\n        if (nextEvent.ts >= endTime) {\n          break;\n        }\n        const nextEventSelfTime = getEventSelfTime(nextEvent, parsedTrace);\n        if (!nextEventSelfTime) {\n          continue;\n        }\n        if (nextEvent.tid !== event.tid) {\n          continue;\n        }\n        if (i > index) {\n          hasChildren = true;\n        }\n        const categoryName = TimelineUIUtils.eventStyle(nextEvent).category.name;\n        total[categoryName] = (total[categoryName] || 0) + nextEventSelfTime;\n      }\n    }\n    if (Trace.Types.Events.isPhaseAsync(event.ph)) {\n      if (endTime) {\n        let aggregatedTotal = 0;\n        for (const categoryName in total) {\n          aggregatedTotal += total[categoryName];\n        }\n\n        const deltaInMicro = (endTime - startTime) as Trace.Types.Timing.Micro;\n        total['idle'] = Math.max(0, deltaInMicro - aggregatedTotal);\n      }\n      return false;\n    }\n\n    for (const categoryName in total) {\n      const value = total[categoryName] as Trace.Types.Timing.Micro;\n      // Up until now we've kept the math all in micro integers. Finally switch these sums to milli.\n      total[categoryName] = Trace.Helpers.Timing.microToMilli(value);\n    }\n\n    return hasChildren;\n  }\n\n  static async buildPicturePreviewContent(\n      parsedTrace: Trace.Handlers.Types.ParsedTrace, event: Trace.Types.Events.Paint,\n      target: SDK.Target.Target): Promise<Element|null> {\n    const snapshotEvent = parsedTrace.LayerTree.paintsToSnapshots.get(event);\n    if (!snapshotEvent) {\n      return null;\n    }\n\n    const paintProfilerModel = target.model(SDK.PaintProfiler.PaintProfilerModel);\n    if (!paintProfilerModel) {\n      return null;\n    }\n    const snapshot = await paintProfilerModel.loadSnapshot(snapshotEvent.args.snapshot.skp64);\n    if (!snapshot) {\n      return null;\n    }\n\n    const snapshotWithRect = {\n      snapshot,\n      rect: snapshotEvent.args.snapshot.params?.layer_rect,\n    };\n\n    if (!snapshotWithRect) {\n      return null;\n    }\n    const imageURLPromise = snapshotWithRect.snapshot.replay();\n    snapshotWithRect.snapshot.release();\n    const imageURL = await imageURLPromise as Platform.DevToolsPath.UrlString;\n    if (!imageURL) {\n      return null;\n    }\n    const stylesContainer = document.createElement('div');\n    const shadowRoot = stylesContainer.attachShadow({mode: 'open'});\n    shadowRoot.createChild('style').textContent = imagePreviewStyles;\n    const container = shadowRoot.createChild('div');\n    container.classList.add('image-preview-container', 'vbox', 'link');\n    const img = container.createChild('img');\n    img.src = imageURL;\n    img.alt = LegacyComponents.ImagePreview.ImagePreview.defaultAltTextForImageURL(imageURL);\n    const paintProfilerButton = container.createChild('a');\n    paintProfilerButton.textContent = i18nString(UIStrings.paintProfiler);\n    UI.ARIAUtils.markAsLink(container);\n    container.tabIndex = 0;\n    container.addEventListener('click', () => TimelinePanel.instance().select(selectionFromEvent(event)), false);\n    container.addEventListener('keydown', keyEvent => {\n      if (keyEvent.key === Platform.KeyboardUtilities.ENTER_KEY) {\n        TimelinePanel.instance().select(selectionFromEvent(event));\n        keyEvent.consume(true);\n      }\n    });\n    return stylesContainer;\n  }\n\n  static createEventDivider(event: Trace.Types.Events.Event, zeroTime: number): HTMLDivElement {\n    const eventDivider = document.createElement('div');\n    eventDivider.classList.add('resources-event-divider');\n    const {startTime: eventStartTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(event);\n\n    const startTime = i18n.TimeUtilities.millisToString(eventStartTime - zeroTime);\n    UI.Tooltip.Tooltip.install(\n        eventDivider, i18nString(UIStrings.sAtS, {PH1: TimelineUIUtils.eventTitle(event), PH2: startTime}));\n    const style = TimelineUIUtils.markerStyleForEvent(event);\n    if (style.tall) {\n      eventDivider.style.backgroundColor = style.color;\n    }\n    return eventDivider;\n  }\n\n  static visibleEventsFilter(): Trace.Extras.TraceFilter.TraceFilter {\n    return new Trace.Extras.TraceFilter.VisibleEventsFilter(Utils.EntryStyles.visibleTypes());\n  }\n\n  // Included only for layout tests.\n  // TODO(crbug.com/1386091): Fix/port layout tests and remove.\n  static categories(): Utils.EntryStyles.CategoryPalette {\n    return Utils.EntryStyles.getCategoryStyles();\n  }\n\n  static generatePieChart(\n      aggregatedStats: TimeRangeCategoryStats, selfCategory?: Utils.EntryStyles.TimelineCategory,\n      selfTime?: Trace.Types.Timing.Micro): Element {\n    let total = 0;\n    for (const categoryName in aggregatedStats) {\n      total += aggregatedStats[categoryName];\n    }\n\n    const element = document.createElement('div');\n    element.classList.add('timeline-details-view-pie-chart-wrapper');\n    element.classList.add('hbox');\n\n    const pieChart = new PerfUI.PieChart.PieChart();\n    const slices: Array<{\n      value: number,\n      color: string,\n      title: string,\n    }> = [];\n\n    function appendLegendRow(title: string, value: number, color: string): void {\n      if (!value) {\n        return;\n      }\n      slices.push({value, color, title});\n    }\n\n    // In case of self time, first add self, then children of the same category.\n    if (selfCategory) {\n      const selfTimeMilli = Trace.Helpers.Timing.microToMilli(selfTime || 0 as Trace.Types.Timing.Micro);\n      if (selfTime) {\n        appendLegendRow(\n            i18nString(UIStrings.sSelf, {PH1: selfCategory.title}),\n            selfTimeMilli,\n            selfCategory.getCSSValue(),\n        );\n      }\n      // Children of the same category.\n      const categoryTime = aggregatedStats[selfCategory.name];\n      const value = categoryTime - (selfTimeMilli || 0);\n      if (value > 0) {\n        appendLegendRow(\n            i18nString(UIStrings.sChildren, {PH1: selfCategory.title}),\n            value,\n            selfCategory.getCSSValue(),\n        );\n      }\n    }\n\n    // Add other categories.\n    for (const categoryName in Utils.EntryStyles.getCategoryStyles()) {\n      const category = Utils.EntryStyles.getCategoryStyles()[categoryName as keyof Utils.EntryStyles.CategoryPalette];\n      if (categoryName === selfCategory?.name) {\n        // Do not add an entry for this event's self category because 2\n        // entries for it where added just before this for loop (for\n        // self and children times).\n        continue;\n      }\n      appendLegendRow(category.title, aggregatedStats[category.name], category.getCSSValue());\n    }\n\n    pieChart.data = {\n      chartName: i18nString(UIStrings.timeSpentInRendering),\n      size: 110,\n      formatter: (value: number) => i18n.TimeUtilities.preciseMillisToString(value),\n      showLegend: true,\n      total,\n      slices,\n    };\n    const pieChartContainer = element.createChild('div', 'vbox');\n    pieChartContainer.appendChild(pieChart);\n\n    return element;\n  }\n  // Generates a Summary component given a aggregated stats for categories.\n  static generateSummaryDetails(\n      aggregatedStats: Record<string, number>, rangeStart: number, rangeEnd: number,\n      selectedEvents: Trace.Types.Events.Event[],\n      thirdPartyTree: ThirdPartyTreeView.ThirdPartyTreeViewWidget): Element {\n    const element = document.createElement('div');\n    element.classList.add('timeline-details-range-summary', 'hbox');\n\n    // First, the category bar chart.\n    let total = 0;\n    let categories: TimelineComponents.TimelineSummary.CategoryData[] = [];\n    // Calculate total of all categories.\n    for (const categoryName in aggregatedStats) {\n      total += aggregatedStats[categoryName];\n    }\n\n    // Get stats values from categories.\n    for (const categoryName in Utils.EntryStyles.getCategoryStyles()) {\n      const category = Utils.EntryStyles.getCategoryStyles()[categoryName as keyof Utils.EntryStyles.CategoryPalette];\n      if (category.name === Utils.EntryStyles.EventCategory.IDLE) {\n        continue;\n      }\n      const value = aggregatedStats[category.name];\n      if (!value) {\n        continue;\n      }\n      const title = category.title;\n      const color = category.getCSSValue();\n      categories.push({value, color, title});\n    }\n\n    // Keeps the most useful categories on top.\n    categories = categories.sort((a, b) => b.value - a.value);\n    const start = Trace.Types.Timing.Milli(rangeStart);\n    const end = Trace.Types.Timing.Milli(rangeEnd);\n    const categorySummaryTable = new TimelineComponents.TimelineSummary.CategorySummary();\n    categorySummaryTable.data = {\n      rangeStart: start,\n      rangeEnd: end,\n      total,\n      categories,\n      selectedEvents,\n    };\n    element.append(categorySummaryTable);\n    // Add the 3p datagrid\n    const treeView = new ThirdPartyTreeView.ThirdPartyTreeElement();\n    treeView.treeView = thirdPartyTree;\n    UI.ARIAUtils.setLabel(treeView, i18nString(UIStrings.thirdPartyTable));\n    element.append(treeView);\n\n    return element;\n  }\n\n  static generateDetailsContentForFrame(\n      frame: Trace.Types.Events.LegacyTimelineFrame, filmStrip: Trace.Extras.FilmStrip.Data|null,\n      filmStripFrame: Trace.Extras.FilmStrip.Frame|null): DocumentFragment {\n    const contentHelper = new TimelineDetailsContentHelper(null, null);\n    contentHelper.addSection(i18nString(UIStrings.frame));\n\n    const duration = TimelineUIUtils.frameDuration(frame);\n    contentHelper.appendElementRow(i18nString(UIStrings.duration), duration);\n    if (filmStrip && filmStripFrame) {\n      const filmStripPreview = document.createElement('div');\n      filmStripPreview.classList.add('timeline-filmstrip-preview');\n      // TODO(paulirish): Adopt Util.ImageCache\n      const uri = Trace.Handlers.ModelHandlers.Screenshots.screenshotImageDataUri(filmStripFrame.screenshotEvent);\n      void UI.UIUtils.loadImage(uri).then(image => image && filmStripPreview.appendChild(image));\n      contentHelper.appendElementRow('', filmStripPreview);\n      filmStripPreview.addEventListener('click', frameClicked.bind(null, filmStrip, filmStripFrame), false);\n    }\n\n    function frameClicked(filmStrip: Trace.Extras.FilmStrip.Data, filmStripFrame: Trace.Extras.FilmStrip.Frame): void {\n      PerfUI.FilmStripView.Dialog.fromFilmStrip(filmStrip, filmStripFrame.index);\n    }\n\n    return contentHelper.fragment;\n  }\n\n  static frameDuration(frame: Trace.Types.Events.LegacyTimelineFrame): Element {\n    const offsetMilli = Trace.Helpers.Timing.microToMilli(frame.startTimeOffset);\n    const durationMilli = Trace.Helpers.Timing.microToMilli(Trace.Types.Timing.Micro(frame.endTime - frame.startTime));\n\n    const durationText = i18nString(UIStrings.sAtSParentheses, {\n      PH1: i18n.TimeUtilities.millisToString(durationMilli, true),\n      PH2: i18n.TimeUtilities.millisToString(offsetMilli, true),\n    });\n    return i18n.i18n.getFormatLocalizedString(str_, UIStrings.emptyPlaceholder, {PH1: durationText});\n  }\n\n  static quadWidth(quad: number[]): number {\n    return Math.round(Math.sqrt(Math.pow(quad[0] - quad[2], 2) + Math.pow(quad[1] - quad[3], 2)));\n  }\n\n  static quadHeight(quad: number[]): number {\n    return Math.round(Math.sqrt(Math.pow(quad[0] - quad[6], 2) + Math.pow(quad[1] - quad[7], 2)));\n  }\n\n  static eventDispatchDesciptors(): EventDispatchTypeDescriptor[] {\n    if (eventDispatchDesciptors) {\n      return eventDispatchDesciptors;\n    }\n    const lightOrange = 'hsl(40,100%,80%)';\n    const orange = 'hsl(40,100%,50%)';\n    const green = 'hsl(90,100%,40%)';\n    const purple = 'hsl(256,100%,75%)';\n    eventDispatchDesciptors = [\n      new EventDispatchTypeDescriptor(\n          1, lightOrange, ['mousemove', 'mouseenter', 'mouseleave', 'mouseout', 'mouseover']),\n      new EventDispatchTypeDescriptor(\n          1, lightOrange, ['pointerover', 'pointerout', 'pointerenter', 'pointerleave', 'pointermove']),\n      new EventDispatchTypeDescriptor(2, green, ['wheel']),\n      new EventDispatchTypeDescriptor(3, orange, ['click', 'mousedown', 'mouseup']),\n      new EventDispatchTypeDescriptor(3, orange, ['touchstart', 'touchend', 'touchmove', 'touchcancel']),\n      new EventDispatchTypeDescriptor(\n          3, orange, ['pointerdown', 'pointerup', 'pointercancel', 'gotpointercapture', 'lostpointercapture']),\n      new EventDispatchTypeDescriptor(3, purple, ['keydown', 'keyup', 'keypress']),\n    ];\n    return eventDispatchDesciptors;\n  }\n\n  static markerStyleForEvent(event: Trace.Types.Events.Event): TimelineMarkerStyle {\n    // Note: keep the colors matching that of `markerDetailsForEvent`.\n\n    const tallMarkerDashStyle = [6, 4];\n    const title = TimelineUIUtils.eventTitle(event);\n\n    if (event.name !== Trace.Types.Events.Name.NAVIGATION_START &&\n        (Trace.Helpers.Trace.eventHasCategory(event, Trace.Types.Events.Categories.Console) ||\n         Trace.Helpers.Trace.eventHasCategory(event, Trace.Types.Events.Categories.UserTiming))) {\n      return {\n        title,\n        dashStyle: tallMarkerDashStyle,\n        lineWidth: 0.5,\n        color: Trace.Helpers.Trace.eventHasCategory(event, Trace.Types.Events.Categories.Console) ? 'purple' : 'orange',\n        tall: false,\n        lowPriority: false,\n      };\n    }\n    let tall = false;\n    let color = 'grey';\n    switch (event.name) {\n      case Trace.Types.Events.Name.NAVIGATION_START:\n        color = 'var(--color-text-primary)';\n        tall = true;\n        break;\n      case Trace.Types.Events.Name.FRAME_STARTED_LOADING:\n        color = 'green';\n        tall = true;\n        break;\n      case Trace.Types.Events.Name.MARK_DOM_CONTENT:\n        color = 'var(--color-text-disabled)';\n        tall = true;\n        break;\n      case Trace.Types.Events.Name.MARK_LOAD:\n        color = 'var(--color-text-disabled)';\n        tall = true;\n        break;\n      case Trace.Types.Events.Name.MARK_FIRST_PAINT:\n        color = '#228847';\n        tall = true;\n        break;\n      case Trace.Types.Events.Name.MARK_FCP:\n        color = 'var(--sys-color-green-bright)';\n        tall = true;\n        break;\n      case Trace.Types.Events.Name.MARK_LCP_CANDIDATE:\n        color = 'var(--sys-color-green)';\n        tall = true;\n        break;\n      case Trace.Types.Events.Name.TIME_STAMP:\n        color = 'orange';\n        break;\n    }\n    return {\n      title,\n      dashStyle: tallMarkerDashStyle,\n      lineWidth: 0.5,\n      color,\n      tall,\n      lowPriority: false,\n    };\n  }\n\n  static colorForId(id: string): string {\n    if (!colorGenerator) {\n      colorGenerator =\n          new Common.Color.Generator({min: 30, max: 330, count: undefined}, {min: 50, max: 80, count: 3}, 85);\n      colorGenerator.setColorForID('', '#f2ecdc');\n    }\n    return colorGenerator.colorForID(id);\n  }\n\n  static displayNameForFrame(frame: Trace.Types.Events.TraceFrame, trimAt = 80): string {\n    const url = frame.url as Platform.DevToolsPath.UrlString;\n    return Common.ParsedURL.schemeIs(url, 'about:') ? `\"${Platform.StringUtilities.trimMiddle(frame.name, trimAt)}\"` :\n                                                      frame.url.slice(0, trimAt);\n  }\n\n  static getOriginWithEntity(\n      entityMapper: Utils.EntityMapper.EntityMapper|null, parsedTrace: Trace.Handlers.Types.ParsedTrace,\n      event: Trace.Types.Events.Event): string|null {\n    const resolvedURL = Utils.SourceMapsResolver.SourceMapsResolver.resolvedURLForEntry(parsedTrace, event);\n    if (!resolvedURL) {\n      return null;\n    }\n    const parsedUrl = URL.parse(resolvedURL);\n    if (!parsedUrl) {\n      return null;\n    }\n\n    const entity = entityMapper?.entityForEvent(event) ?? null;\n    if (!entity) {\n      return null;\n    }\n\n    const originWithEntity = Utils.Helpers.formatOriginWithEntity(parsedUrl, entity, true);\n    return originWithEntity;\n  }\n}\n\nexport const aggregatedStatsKey = Symbol('aggregatedStats');\n\nexport const previewElementSymbol = Symbol('previewElement');\n\nexport class EventDispatchTypeDescriptor {\n  priority: number;\n  color: string;\n  eventTypes: string[];\n\n  constructor(priority: number, color: string, eventTypes: string[]) {\n    this.priority = priority;\n    this.color = color;\n    this.eventTypes = eventTypes;\n  }\n}\n\nexport class TimelineDetailsContentHelper {\n  fragment: DocumentFragment;\n  private linkifierInternal: LegacyComponents.Linkifier.Linkifier|null;\n  private target: SDK.Target.Target|null;\n  element: HTMLDivElement;\n  private tableElement: HTMLElement;\n\n  constructor(target: SDK.Target.Target|null, linkifier: LegacyComponents.Linkifier.Linkifier|null) {\n    this.fragment = document.createDocumentFragment();\n\n    this.linkifierInternal = linkifier;\n    this.target = target;\n\n    this.element = document.createElement('div');\n    this.element.classList.add('timeline-details-view-block');\n    this.tableElement = this.element.createChild('div', 'vbox timeline-details-chip-body');\n    this.fragment.appendChild(this.element);\n  }\n\n  addSection(title: string, swatchColor?: string): void {\n    if (!this.tableElement.hasChildNodes()) {\n      this.element.removeChildren();\n    } else {\n      this.element = document.createElement('div');\n      this.element.classList.add('timeline-details-view-block');\n      this.fragment.appendChild(this.element);\n    }\n\n    if (title) {\n      const titleElement = this.element.createChild('div', 'timeline-details-chip-title');\n      if (swatchColor) {\n        titleElement.createChild('div').style.backgroundColor = swatchColor;\n      }\n      UI.UIUtils.createTextChild(titleElement, title);\n    }\n\n    this.tableElement = this.element.createChild('div', 'vbox timeline-details-chip-body');\n    this.fragment.appendChild(this.element);\n  }\n\n  linkifier(): LegacyComponents.Linkifier.Linkifier|null {\n    return this.linkifierInternal;\n  }\n\n  appendTextRow(title: string, value: string|number|boolean): void {\n    const rowElement = this.tableElement.createChild('div', 'timeline-details-view-row');\n    rowElement.createChild('div', 'timeline-details-view-row-title').textContent = title;\n    rowElement.createChild('div', 'timeline-details-view-row-value').textContent = value.toString();\n  }\n\n  appendElementRow(title: string, content: string|Node, isWarning?: boolean, isStacked?: boolean): void {\n    const rowElement = this.tableElement.createChild('div', 'timeline-details-view-row');\n    rowElement.setAttribute('data-row-title', title);\n    if (isWarning) {\n      rowElement.classList.add('timeline-details-warning');\n    }\n    if (isStacked) {\n      rowElement.classList.add('timeline-details-stack-values');\n    }\n    const titleElement = rowElement.createChild('div', 'timeline-details-view-row-title');\n    titleElement.textContent = title;\n    const valueElement = rowElement.createChild('div', 'timeline-details-view-row-value');\n    if (content instanceof Node) {\n      valueElement.appendChild(content);\n    } else {\n      UI.UIUtils.createTextChild(valueElement, content || '');\n    }\n  }\n\n  appendLocationRow(\n      title: string, url: string, startLine: number, startColumn?: number, text?: string, omitOrigin?: boolean): void {\n    if (!this.linkifierInternal) {\n      return;\n    }\n\n    const options = {\n      tabStop: true,\n      columnNumber: startColumn,\n      showColumnNumber: true,\n      inlineFrameIndex: 0,\n      text,\n      omitOrigin,\n    };\n    const link = this.linkifierInternal.maybeLinkifyScriptLocation(\n        this.target, null, url as Platform.DevToolsPath.UrlString, startLine, options);\n    if (!link) {\n      return;\n    }\n    this.appendElementRow(title, link);\n  }\n\n  appendLocationRange(title: string, url: Platform.DevToolsPath.UrlString, startLine: number, endLine?: number): void {\n    if (!this.linkifierInternal || !this.target) {\n      return;\n    }\n    const locationContent = document.createElement('span');\n    const link = this.linkifierInternal.maybeLinkifyScriptLocation(\n        this.target, null, url, startLine, {tabStop: true, inlineFrameIndex: 0});\n    if (!link) {\n      return;\n    }\n    locationContent.appendChild(link);\n    UI.UIUtils.createTextChild(\n        locationContent, Platform.StringUtilities.sprintf(' [%s…%s]', startLine + 1, (endLine || 0) + 1 || ''));\n    this.appendElementRow(title, locationContent);\n  }\n\n  createChildStackTraceElement(stackTrace: Protocol.Runtime.StackTrace): void {\n    if (!this.linkifierInternal) {\n      return;\n    }\n    const resolvedStackTrace: Protocol.Runtime.StackTrace = structuredClone(stackTrace);\n    let currentResolvedStackTrace: Protocol.Runtime.StackTrace|undefined = resolvedStackTrace;\n    while (currentResolvedStackTrace) {\n      currentResolvedStackTrace.callFrames = currentResolvedStackTrace.callFrames.map(\n          callFrame => ({\n            ...callFrame,\n            functionName:\n                Utils.SourceMapsResolver.SourceMapsResolver.resolvedCodeLocationForCallFrame(callFrame)?.name ||\n                callFrame.functionName,\n          }));\n      currentResolvedStackTrace = currentResolvedStackTrace.parent;\n    }\n    const stackTraceElement =\n        this.tableElement.createChild('div', 'timeline-details-view-row timeline-details-stack-values');\n    const callFrameContents = LegacyComponents.JSPresentationUtils.buildStackTracePreviewContents(\n        this.target, this.linkifierInternal, {stackTrace: resolvedStackTrace, tabStops: true, showColumnNumber: true});\n    stackTraceElement.appendChild(callFrameContents.element);\n  }\n}\n\nexport const categoryBreakdownCacheSymbol = Symbol('categoryBreakdownCache');\nexport interface TimelineMarkerStyle {\n  title: string;\n  color: string;\n  lineWidth: number;\n  dashStyle: number[];\n  tall: boolean;\n  lowPriority: boolean;\n}\n\n/**\n * Given a particular event, this method can adjust its timestamp by\n * substracting the timestamp of the previous navigation. This helps in cases\n * where the user has navigated multiple times in the trace, so that we can show\n * the LCP (for example) relative to the last navigation.\n **/\nexport function timeStampForEventAdjustedForClosestNavigationIfPossible(\n    event: Trace.Types.Events.Event, parsedTrace: Trace.Handlers.Types.ParsedTrace|null): Trace.Types.Timing.Milli {\n  if (!parsedTrace) {\n    const {startTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(event);\n    return startTime;\n  }\n\n  const time = Trace.Helpers.Timing.timeStampForEventAdjustedByClosestNavigation(\n      event,\n      parsedTrace.Meta.traceBounds,\n      parsedTrace.Meta.navigationsByNavigationId,\n      parsedTrace.Meta.navigationsByFrameId,\n  );\n  return Trace.Helpers.Timing.microToMilli(time);\n}\n\n/**\n * Determines if an event is potentially a marker event. A marker event here\n * is a single moment in time that we want to highlight on the timeline, such as\n * the LCP time. This method does not filter out events: for example, it treats\n * every LCP Candidate event as a potential marker event.\n **/\nexport function isMarkerEvent(parsedTrace: Trace.Handlers.Types.ParsedTrace, event: Trace.Types.Events.Event): boolean {\n  const {Name} = Trace.Types.Events;\n\n  if (event.name === Name.TIME_STAMP || event.name === Name.NAVIGATION_START) {\n    return true;\n  }\n\n  if (Trace.Types.Events.isFirstContentfulPaint(event) || Trace.Types.Events.isFirstPaint(event)) {\n    return event.args.frame === parsedTrace.Meta.mainFrameId;\n  }\n\n  if (Trace.Types.Events.isMarkDOMContent(event) || Trace.Types.Events.isMarkLoad(event) ||\n      Trace.Types.Events.isLargestContentfulPaintCandidate(event)) {\n    // isOutermostMainFrame was added in 2022, so we fallback to isMainFrame\n    // for older traces.\n    if (!event.args.data) {\n      return false;\n    }\n    const {isOutermostMainFrame, isMainFrame} = event.args.data;\n    if (typeof isOutermostMainFrame !== 'undefined') {\n      // If isOutermostMainFrame is defined we want to use that and not\n      // fallback to isMainFrame, even if isOutermostMainFrame is false. Hence\n      // this check.\n      return isOutermostMainFrame;\n    }\n    return Boolean(isMainFrame);\n  }\n\n  return false;\n}\n\nfunction getEventSelfTime(\n    event: Trace.Types.Events.Event, parsedTrace: Trace.Handlers.Types.ParsedTrace): Trace.Types.Timing.Micro {\n  const mapToUse = Trace.Types.Extensions.isSyntheticExtensionEntry(event) ?\n      parsedTrace.ExtensionTraceData.entryToNode :\n      parsedTrace.Renderer.entryToNode;\n  const selfTime = mapToUse.get(event)?.selfTime;\n  return selfTime ? selfTime : Trace.Types.Timing.Micro(0);\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2021 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.token-variable {\n  color: var(--sys-color-token-variable);\n}\n\n.token-property {\n  color: var(--sys-color-token-property);\n}\n\n.token-type {\n  color: var(--sys-color-token-type);\n}\n\n.token-variable-special {\n  color: var(--sys-color-token-variable-special);\n}\n\n.token-definition {\n  color: var(--sys-color-token-definition);\n}\n\n.token-builtin {\n  color: var(--sys-color-token-builtin);\n}\n\n.token-number {\n  color: var(--sys-color-token-number);\n}\n\n.token-string {\n  color: var(--sys-color-token-string);\n}\n\n.token-string-special {\n  color: var(--sys-color-token-string-special);\n}\n\n.token-atom {\n  color: var(--sys-color-token-atom);\n}\n\n.token-keyword {\n  color: var(--sys-color-token-keyword);\n}\n\n.token-comment {\n  color: var(--sys-color-token-comment);\n}\n\n.token-meta {\n  color: var(--sys-color-token-meta);\n}\n\n.token-invalid {\n  color: var(--sys-color-error);\n}\n\n.token-tag {\n  color: var(--sys-color-token-tag);\n}\n\n.token-attribute {\n  color: var(--sys-color-token-attribute);\n}\n\n.token-attribute-value {\n  color: var(--sys-color-token-attribute-value);\n}\n\n.token-inserted {\n  color: var(--sys-color-token-inserted);\n}\n\n.token-deleted {\n  color: var(--sys-color-token-deleted);\n}\n\n.token-heading {\n  color: var(--sys-color-token-variable-special);\n  font-weight: bold;\n}\n\n.token-link {\n  color: var(--sys-color-token-variable-special);\n  text-decoration: underline;\n}\n\n.token-strikethrough {\n  text-decoration: line-through;\n}\n\n.token-strong {\n  font-weight: bold;\n}\n\n.token-emphasis {\n  font-style: italic;\n}\n\n/*# sourceURL=${import.meta.resolve('./codeHighlighter.css')} */`;", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2017 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.image-preview-container {\n  background: transparent;\n  text-align: center;\n  border-spacing: 0;\n}\n\n.image-preview-container img {\n  margin: 6px 0;\n  max-width: 100px;\n  max-height: 100px;\n  background-image: var(--image-file-checker);\n  user-select: text;\n  vertical-align: top;\n  -webkit-user-drag: auto;\n}\n\n.image-container {\n  padding: 0;\n}\n\n.image-container > div {\n  min-height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n\n.image-container > div.start {\n  justify-content: start;\n}\n\n.image-preview-container .row {\n  line-height: 1.2;\n  vertical-align: baseline;\n}\n\n.image-preview-container .title {\n  padding-right: 0.5em;\n  color: var(--sys-color-token-subtle);\n  white-space: nowrap;\n\n  &.start {\n    text-align: start;\n  }\n\n  &.center {\n    text-align: end;\n  }\n}\n\n.image-preview-container .description {\n  white-space: nowrap;\n  text-align: left;\n  color: var(--sys-color-on-surface);\n}\n\n.image-preview-container .description-link {\n  max-width: 20em;\n}\n\n.image-preview-container .source-link {\n  white-space: normal;\n  word-break: break-all;\n  color: var(--sys-color-primary);\n  cursor: pointer;\n}\n\n/*# sourceURL=${import.meta.resolve('./imagePreview.css')} */`;", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as Trace from '../../models/trace/trace.js';\n\nlet instance: Tracker|null = null;\n\n/**\n * In multiple places we need to know if the trace we are working on is fresh\n * or not. We cannot store that data in the trace file's metadata (otherwise a\n * loaded trace file could claim to be fresh), so we store it here. When a new trace\n * is loaded, we set this flag accordingly.\n **/\nexport class Tracker {\n  #freshRecordings = new WeakSet<Trace.Handlers.Types.ParsedTrace>();\n\n  static instance(opts: {forceNew: boolean} = {forceNew: false}): Tracker {\n    if (!instance || opts.forceNew) {\n      instance = new Tracker();\n    }\n    return instance;\n  }\n\n  registerFreshRecording(data: Trace.Handlers.Types.ParsedTrace): void {\n    this.#freshRecordings.add(data);\n  }\n\n  recordingIsFresh(data: Trace.Handlers.Types.ParsedTrace): boolean {\n    return this.#freshRecordings.has(data);\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport thirdPartyTreeViewStyles from './thirdPartyTreeView.css.js';\nimport * as TimelineTreeView from './TimelineTreeView.js';\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   *@description Unattributed text for an unattributed entity.\n   */\n  unattributed: '[unattributed]',\n  /**\n   *@description Title for the name of either 1st or 3rd Party entities.\n   */\n  firstOrThirdPartyName: '1st / 3rd party',\n  /**\n   *@description Title referencing transfer size.\n   */\n  transferSize: 'Transfer size',\n  /**\n   *@description Title referencing main thread time.\n   */\n  mainThreadTime: 'Main thread time',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/ThirdPartyTreeView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ThirdPartyTreeViewWidget extends TimelineTreeView.TimelineTreeView {\n  // By default the TimelineTreeView will auto-select the first row\n  // when the grid is refreshed but for the ThirdParty view we only\n  // want to do this when the user hovers.\n  protected override autoSelectFirstChildOnRefresh = false;\n\n  constructor() {\n    super();\n    this.element.setAttribute('jslog', `${VisualLogging.pane('third-party-tree').track({hover: true})}`);\n    this.init();\n    this.dataGrid.markColumnAsSortedBy('self', DataGrid.DataGrid.Order.Descending);\n    this.dataGrid.setResizeMethod(DataGrid.DataGrid.ResizeMethod.NEAREST);\n    /**\n     * By default data grids always expand when arrowing.\n     * For 3P table, we don't use this feature.\n     */\n    this.dataGrid.expandNodesWhenArrowing = false;\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.registerRequiredCSS(thirdPartyTreeViewStyles);\n  }\n\n  override setModelWithEvents(\n      selectedEvents: Trace.Types.Events.Event[]|null, parsedTrace?: Trace.Handlers.Types.ParsedTrace|null,\n      entityMappings?: Utils.EntityMapper.EntityMapper|null): void {\n    super.setModelWithEvents(selectedEvents, parsedTrace, entityMappings);\n\n    const hasEvents = Boolean(selectedEvents && selectedEvents.length > 0);\n    this.element.classList.toggle('empty-table', !hasEvents);\n  }\n\n  override buildTree(): Trace.Extras.TraceTree.Node {\n    const parsedTrace = this.parsedTrace();\n    const entityMapper = this.entityMapper();\n\n    if (!parsedTrace || !entityMapper) {\n      return new Trace.Extras.TraceTree.BottomUpRootNode([], {\n        textFilter: this.textFilter(),\n        filters: this.filtersWithoutTextFilter(),\n        startTime: this.startTime,\n        endTime: this.endTime,\n        eventGroupIdCallback: this.groupingFunction.bind(this),\n      });\n    }\n\n    // const events = this.#thirdPartySummaries.entityByEvent.keys();\n    const relatedEvents = this.selectedEvents().sort(Trace.Helpers.Trace.eventTimeComparator);\n\n    // The filters for this view are slightly different; we want to use the set\n    // of visible event types, but also include network events, which by\n    // default are not in the set of visible entries (as they are not shown on\n    // the main flame chart).\n    const filter = new Trace.Extras.TraceFilter.VisibleEventsFilter(\n        Utils.EntryStyles.visibleTypes().concat([Trace.Types.Events.Name.SYNTHETIC_NETWORK_REQUEST]));\n\n    const node = new Trace.Extras.TraceTree.BottomUpRootNode(relatedEvents, {\n      textFilter: this.textFilter(),\n      filters: [filter],\n      startTime: this.startTime,\n      endTime: this.endTime,\n      eventGroupIdCallback: this.groupingFunction.bind(this),\n      calculateTransferSize: true,\n      // Ensure we group by 3P alongside eventID for correct 3P grouping.\n      forceGroupIdCallback: true,\n    });\n    return node;\n  }\n\n  /**\n   * Third party tree view doesn't require the select feature, as this expands the node.\n   */\n  override selectProfileNode(): void {\n    return;\n  }\n\n  private groupingFunction(event: Trace.Types.Events.Event): string {\n    const entity = this.entityMapper()?.entityForEvent(event);\n    if (!entity) {\n      return '';\n    }\n\n    return entity.name;\n  }\n\n  override populateColumns(columns: DataGrid.DataGrid.ColumnDescriptor[]): void {\n    columns.push(\n        {\n          id: 'site',\n          title: i18nString(UIStrings.firstOrThirdPartyName),\n          // It's important that this width is the `.widget.vbox.timeline-tree-view` max-width (550)\n          // minus the two fixed sizes below. (550-100-105) == 345\n          width: '345px',\n          // And with this column not-fixed-width and resizingMethod NEAREST, the name-column will appropriately flex.\n          sortable: true,\n        },\n        {\n          id: 'transfer-size',\n          title: i18nString(UIStrings.transferSize),\n          width: '100px',  // Mostly so there's room for the header plus sorting triangle\n          fixedWidth: true,\n          sortable: true,\n        },\n        {\n          id: 'self',\n          title: i18nString(UIStrings.mainThreadTime),\n          width: '120px',  // Mostly to fit large self-time/main thread time plus devtools-button\n          fixedWidth: true,\n          sortable: true,\n        });\n  }\n\n  override populateToolbar(): void {\n    return;\n  }\n\n  private compareTransferSize(\n      a: DataGrid.SortableDataGrid.SortableDataGridNode<TimelineTreeView.GridNode>,\n      b: DataGrid.SortableDataGrid.SortableDataGridNode<TimelineTreeView.GridNode>): number {\n    const nodeA = a as TimelineTreeView.TreeGridNode;\n    const nodeB = b as TimelineTreeView.TreeGridNode;\n    const transferA = nodeA.profileNode.transferSize ?? 0;\n    const transferB = nodeB.profileNode.transferSize ?? 0;\n    return transferA - transferB;\n  }\n\n  override sortingChanged(): void {\n    const columnId = this.dataGrid.sortColumnId();\n    if (!columnId) {\n      return;\n    }\n\n    let sortFunction:\n        ((a: DataGrid.SortableDataGrid.SortableDataGridNode<TimelineTreeView.GridNode>,\n          b: DataGrid.SortableDataGrid.SortableDataGridNode<TimelineTreeView.GridNode>) => number)|null;\n    switch (columnId) {\n      case 'transfer-size':\n        sortFunction = this.compareTransferSize.bind(this);\n        break;\n      default:\n        sortFunction = super.getSortingFunction(columnId);\n        break;\n    }\n\n    if (sortFunction) {\n      this.dataGrid.sortNodes(sortFunction, !this.dataGrid.isSortOrderAscending());\n    }\n  }\n\n  override onHover(node: Trace.Extras.TraceTree.Node|null): void {\n    if (!node) {\n      this.dispatchEventToListeners(TimelineTreeView.TimelineTreeView.Events.TREE_ROW_HOVERED, {node: null});\n      return;\n    }\n    this.#getEventsForEventDispatch(node);\n    const events = this.#getEventsForEventDispatch(node);\n    this.dispatchEventToListeners(\n        TimelineTreeView.TimelineTreeView.Events.TREE_ROW_HOVERED,\n        {node, events: events && events.length > 0 ? events : undefined});\n  }\n\n  override onClick(node: Trace.Extras.TraceTree.Node|null): void {\n    if (!node) {\n      this.dispatchEventToListeners(TimelineTreeView.TimelineTreeView.Events.TREE_ROW_CLICKED, {node: null});\n      return;\n    }\n    const events = this.#getEventsForEventDispatch(node);\n    this.dispatchEventToListeners(\n        TimelineTreeView.TimelineTreeView.Events.TREE_ROW_CLICKED,\n        {node, events: events && events.length > 0 ? events : undefined});\n  }\n\n  // For ThirdPartyTree, we should include everything in our entity mapper for full coverage.\n  #getEventsForEventDispatch(node: Trace.Extras.TraceTree.Node): Trace.Types.Events.Event[]|null {\n    const mapper = this.entityMapper();\n    if (!mapper) {\n      return null;\n    }\n\n    const entity = mapper.entityForEvent(node.event);\n    return entity ? mapper.eventsForEntity(entity) ?? [] : [];\n  }\n\n  displayInfoForGroupNode(node: Trace.Extras.TraceTree.Node): {\n    name: string,\n    color: string,\n    icon: (Element|undefined),\n  } {\n    const color = 'gray';\n    const unattributed = i18nString(UIStrings.unattributed);\n    const id = typeof node.id === 'symbol' ? undefined : node.id;\n    // This `undefined` is [unattributed]\n    // TODO(paulirish,aixba): Improve attribution to reduce amount of items in [unattributed].\n    const domainName = id ? this.entityMapper()?.entityForEvent(node.event)?.name || id : undefined;\n    return {name: domainName || unattributed, color, icon: undefined};\n  }\n\n  nodeIsFirstParty(node: Trace.Extras.TraceTree.Node): boolean {\n    const mapper = this.entityMapper();\n    if (!mapper) {\n      return false;\n    }\n    const firstParty = mapper.firstPartyEntity();\n    return firstParty === mapper.entityForEvent(node.event);\n  }\n\n  nodeIsExtension(node: Trace.Extras.TraceTree.Node): boolean {\n    const mapper = this.entityMapper();\n    if (!mapper) {\n      return false;\n    }\n    const entity = mapper.entityForEvent(node.event);\n    return Boolean(entity) && entity?.category === 'Chrome Extension';\n  }\n}\n\nexport class ThirdPartyTreeElement extends UI.Widget.WidgetElement<UI.Widget.Widget> {\n  #treeView?: ThirdPartyTreeViewWidget;\n\n  set treeView(treeView: ThirdPartyTreeViewWidget) {\n    this.#treeView = treeView;\n  }\n\n  constructor() {\n    super();\n    this.style.display = 'contents';\n  }\n\n  override createWidget(): UI.Widget.Widget {\n    const containerWidget = new UI.Widget.Widget(false, undefined, this);\n    containerWidget.contentElement.style.display = 'contents';\n    if (this.#treeView) {\n      this.#treeView.show(containerWidget.contentElement);\n    }\n    return containerWidget;\n  }\n}\n\ncustomElements.define('devtools-performance-third-party-tree-view', ThirdPartyTreeElement);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-third-party-tree-view': ThirdPartyTreeElement;\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2025 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.empty-table {\n  display: none;\n}\n\n/*# sourceURL=${import.meta.resolve('./thirdPartyTreeView.css')} */`;", "// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport '../../ui/legacy/legacy.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {ActiveFilters} from './ActiveFilters.js';\nimport * as Extensions from './extensions/extensions.js';\nimport {Tracker} from './FreshRecording.js';\nimport {targetForEvent} from './TargetForEvent.js';\nimport * as ThirdPartyTreeView from './ThirdPartyTreeView.js';\nimport {TimelineRegExp} from './TimelineFilters.js';\nimport {rangeForSelection, type TimelineSelection} from './TimelineSelection.js';\nimport timelineTreeViewStyles from './timelineTreeView.css.js';\nimport {TimelineUIUtils} from './TimelineUIUtils.js';\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text for the performance of something\n   */\n  performance: 'Performance',\n  /**\n   *@description Time of a single activity, as opposed to the total time\n   */\n  selfTime: 'Self time',\n  /**\n   *@description Text for the total time of something\n   */\n  totalTime: 'Total time',\n  /**\n   *@description Text in Timeline Tree View of the Performance panel\n   */\n  activity: 'Activity',\n  /**\n   *@description Text of a DOM element in Timeline Tree View of the Performance panel\n   */\n  selectItemForDetails: 'Select item for details.',\n  /**\n   *@description Number followed by percent sign\n   *@example {20} PH1\n   */\n  percentPlaceholder: '{PH1} %',\n  /**\n   *@description Text in Timeline Tree View of the Performance panel\n   */\n  chromeExtensionsOverhead: '[`Chrome` extensions overhead]',\n  /**\n   * @description Text in Timeline Tree View of the Performance panel. The text is presented\n   * when developers investigate the performance of a page. 'V8 Runtime' labels the time\n   * spent in (i.e. runtime) the V8 JavaScript engine.\n   */\n  vRuntime: '[`V8` Runtime]',\n  /**\n   *@description Text in Timeline Tree View of the Performance panel\n   */\n  unattributed: '[unattributed]',\n  /**\n   *@description Text that refers to one or a group of webpages\n   */\n  page: 'Page',\n  /**\n   *@description Text in Timeline Tree View of the Performance panel\n   */\n  noGrouping: 'No grouping',\n  /**\n   *@description Text in Timeline Tree View of the Performance panel\n   */\n  groupByActivity: 'Group by activity',\n  /**\n   *@description Text in Timeline Tree View of the Performance panel\n   */\n  groupByCategory: 'Group by category',\n  /**\n   *@description Text in Timeline Tree View of the Performance panel\n   */\n  groupByDomain: 'Group by domain',\n  /**\n   *@description Text in Timeline Tree View of the Performance panel\n   */\n  groupByFrame: 'Group by frame',\n  /**\n   *@description Text in Timeline Tree View of the Performance panel\n   */\n  groupBySubdomain: 'Group by subdomain',\n  /**\n   *@description Text in Timeline Tree View of the Performance panel\n   */\n  groupByUrl: 'Group by URL',\n  /**\n   *@description Text in Timeline Tree View of the Performance panel\n   */\n  groupByThirdParties: 'Group by Third Parties',\n  /**\n   *@description Aria-label for grouping combo box in Timeline Details View\n   */\n  groupBy: 'Group by',\n  /**\n   * @description Title of the sidebar pane in the Performance panel which shows the stack (call\n   * stack) where the program spent the most time (out of all the call stacks) while executing.\n   */\n  heaviestStack: 'Heaviest stack',\n  /**\n   * @description Tooltip for the the Heaviest stack sidebar toggle in the Timeline Tree View of the\n   * Performance panel. Command to open/show the sidebar.\n   */\n  showHeaviestStack: 'Show heaviest stack',\n  /**\n   * @description Tooltip for the the Heaviest stack sidebar toggle in the Timeline Tree View of the\n   * Performance panel. Command to close/hide the sidebar.\n   */\n  hideHeaviestStack: 'Hide heaviest stack',\n  /**\n   * @description Screen reader announcement when the heaviest stack sidebar is shown in the Performance panel.\n   */\n  heaviestStackShown: 'Heaviest stack sidebar shown',\n  /**\n   * @description Screen reader announcement when the heaviest stack sidebar is hidden in the Performance panel.\n   */\n  heaviestStackHidden: 'Heaviest stack sidebar hidden',\n  /**\n   *@description Data grid name for Timeline Stack data grids\n   */\n  timelineStack: 'Timeline stack',\n  /**\n  /*@description Text to search by matching case of the input button\n   */\n  matchCase: 'Match case',\n  /**\n   *@description Text for searching with regular expression button\n   */\n  useRegularExpression: 'Use regular expression',\n  /**\n   * @description Text for Match whole word button\n   */\n  matchWholeWord: 'Match whole word',\n  /**\n   * @description Text for bottom up tree button\n   */\n  bottomUp: 'Bottom-up',\n  /**\n   * @description Text referring to view bottom up tree\n   */\n  viewBottomUp: 'View Bottom-up',\n  /**\n   * @description Text referring to a 1st party entity\n   */\n  firstParty: '1st party',\n  /**\n   * @description Text referring to an entity that is an extension\n   */\n  extension: 'Extension',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineTreeView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * For an overview, read: https://chromium.googlesource.com/devtools/devtools-frontend/+/refs/heads/main/front_end/panels/timeline/README.md#timeline-tree-views\n */\nexport class TimelineTreeView extends\n    Common.ObjectWrapper.eventMixin<TimelineTreeView.EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox)\n        implements UI.SearchableView.Searchable {\n  #selectedEvents: Trace.Types.Events.Event[]|null;\n  private searchResults: Trace.Extras.TraceTree.Node[];\n  linkifier!: Components.Linkifier.Linkifier;\n  dataGrid!: DataGrid.SortableDataGrid.SortableDataGrid<GridNode>;\n  private lastHoveredProfileNode!: Trace.Extras.TraceTree.Node|null;\n  private textFilterInternal!: TimelineRegExp;\n  private taskFilter!: Trace.Extras.TraceFilter.ExclusiveNameFilter;\n  protected startTime!: Trace.Types.Timing.Milli;\n  protected endTime!: Trace.Types.Timing.Milli;\n  splitWidget!: UI.SplitWidget.SplitWidget;\n  detailsView!: UI.Widget.Widget;\n  private searchableView!: UI.SearchableView.SearchableView;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private currentThreadSetting?: Common.Settings.Setting<any>;\n  private lastSelectedNodeInternal?: Trace.Extras.TraceTree.Node|null;\n  private root?: Trace.Extras.TraceTree.Node;\n  private currentResult?: number;\n  textFilterUI?: UI.Toolbar.ToolbarInput;\n  private caseSensitiveButton: UI.Toolbar.ToolbarToggle|undefined;\n  private regexButton: UI.Toolbar.ToolbarToggle|undefined;\n  private matchWholeWord: UI.Toolbar.ToolbarToggle|undefined;\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace|null = null;\n  #entityMapper: Utils.EntityMapper.EntityMapper|null = null;\n  #lastHighlightedEvent: HTMLElement|null = null;\n  eventToTreeNode = new WeakMap<Trace.Types.Events.Event, Trace.Extras.TraceTree.Node>();\n\n  /**\n   * Determines if the first child in the data grid will be selected\n   * by default when refreshTree() gets called.\n   */\n  protected autoSelectFirstChildOnRefresh = true;\n\n  constructor() {\n    super();\n    this.#selectedEvents = null;\n    this.element.classList.add('timeline-tree-view');\n    this.registerRequiredCSS(timelineTreeViewStyles);\n\n    this.searchResults = [];\n  }\n\n  #eventNameForSorting(event: Trace.Types.Events.Event): string {\n    const name = TimelineUIUtils.eventTitle(event) || event.name;\n    if (!this.#parsedTrace) {\n      return name;\n    }\n    return name + ':@' + Trace.Handlers.Helpers.getNonResolvedURL(event, this.#parsedTrace);\n  }\n\n  setSearchableView(searchableView: UI.SearchableView.SearchableView): void {\n    this.searchableView = searchableView;\n  }\n\n  setModelWithEvents(\n      selectedEvents: Trace.Types.Events.Event[]|null,\n      parsedTrace: Trace.Handlers.Types.ParsedTrace|null = null,\n      entityMappings: Utils.EntityMapper.EntityMapper|null = null,\n      ): void {\n    this.#parsedTrace = parsedTrace;\n    this.#selectedEvents = selectedEvents;\n    this.#entityMapper = entityMappings;\n    this.refreshTree();\n  }\n\n  entityMapper(): Utils.EntityMapper.EntityMapper|null {\n    return this.#entityMapper;\n  }\n  parsedTrace(): Trace.Handlers.Types.ParsedTrace|null {\n    return this.#parsedTrace;\n  }\n\n  init(): void {\n    this.linkifier = new Components.Linkifier.Linkifier();\n\n    this.taskFilter = new Trace.Extras.TraceFilter.ExclusiveNameFilter([\n      Trace.Types.Events.Name.RUN_TASK,\n    ]);\n    this.textFilterInternal = new TimelineRegExp();\n\n    this.currentThreadSetting = Common.Settings.Settings.instance().createSetting('timeline-tree-current-thread', 0);\n    this.currentThreadSetting.addChangeListener(this.refreshTree, this);\n\n    const columns = ([] as DataGrid.DataGrid.ColumnDescriptor[]);\n    this.populateColumns(columns);\n\n    this.splitWidget = new UI.SplitWidget.SplitWidget(true, true, 'timeline-tree-view-details-split-widget');\n    const mainView = new UI.Widget.VBox();\n    const toolbar = mainView.element.createChild('devtools-toolbar');\n    toolbar.setAttribute('jslog', `${VisualLogging.toolbar()}`);\n    toolbar.wrappable = true;\n    this.populateToolbar(toolbar);\n\n    this.dataGrid = new DataGrid.SortableDataGrid.SortableDataGrid({\n      displayName: i18nString(UIStrings.performance),\n      columns,\n      refreshCallback: undefined,\n      deleteCallback: undefined,\n    });\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SORTING_CHANGED, this.sortingChanged, this);\n    this.dataGrid.element.addEventListener('mousemove', this.onMouseMove.bind(this), true);\n    this.dataGrid.element.addEventListener(\n        'mouseleave', () => this.dispatchEventToListeners(TimelineTreeView.Events.TREE_ROW_HOVERED, {node: null}));\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.OPENED_NODE, this.onGridNodeOpened, this);\n    this.dataGrid.setResizeMethod(DataGrid.DataGrid.ResizeMethod.LAST);\n    this.dataGrid.setRowContextMenuCallback(this.onContextMenu.bind(this));\n    this.dataGrid.asWidget().show(mainView.element);\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SELECTED_NODE, this.updateDetailsForSelection, this);\n\n    this.detailsView = new UI.Widget.VBox();\n    this.detailsView.element.classList.add('timeline-details-view', 'timeline-details-view-body');\n    this.splitWidget.setMainWidget(mainView);\n    this.splitWidget.setSidebarWidget(this.detailsView);\n    this.splitWidget.hideSidebar();\n    this.splitWidget.show(this.element);\n    this.splitWidget.addEventListener(UI.SplitWidget.Events.SHOW_MODE_CHANGED, this.onShowModeChanged, this);\n  }\n\n  lastSelectedNode(): Trace.Extras.TraceTree.Node|null|undefined {\n    return this.lastSelectedNodeInternal;\n  }\n\n  updateContents(selection: TimelineSelection): void {\n    const timings = rangeForSelection(selection);\n    const timingMilli = Trace.Helpers.Timing.traceWindowMicroSecondsToMilliSeconds(timings);\n    this.setRange(timingMilli.min, timingMilli.max);\n  }\n\n  setRange(startTime: Trace.Types.Timing.Milli, endTime: Trace.Types.Timing.Milli): void {\n    this.startTime = startTime;\n    this.endTime = endTime;\n    this.refreshTree();\n  }\n\n  highlightEventInTree(event: Trace.Types.Events.Event|null): void {\n    // Potentially clear last highlight\n    const dataGridElem = event && this.dataGridElementForEvent(event);\n    if (!event || (dataGridElem && dataGridElem !== this.#lastHighlightedEvent)) {\n      this.#lastHighlightedEvent?.style.setProperty('background-color', '');\n    }\n\n    if (event) {\n      const rowElem = dataGridElem;\n      if (rowElem) {\n        this.#lastHighlightedEvent = rowElem;\n        this.#lastHighlightedEvent.style.backgroundColor = 'var(--sys-color-yellow-container)';\n      }\n    }\n  }\n\n  filters(): Trace.Extras.TraceFilter.TraceFilter[] {\n    return [this.taskFilter, this.textFilterInternal, ...(ActiveFilters.instance().activeFilters())];\n  }\n\n  filtersWithoutTextFilter(): Trace.Extras.TraceFilter.TraceFilter[] {\n    return [this.taskFilter, ...(ActiveFilters.instance().activeFilters())];\n  }\n\n  textFilter(): TimelineRegExp {\n    return this.textFilterInternal;\n  }\n\n  exposePercentages(): boolean {\n    return false;\n  }\n\n  populateToolbar(toolbar: UI.Toolbar.Toolbar): void {\n    this.caseSensitiveButton =\n        new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.matchCase), 'match-case', undefined, 'match-case');\n    this.caseSensitiveButton.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, () => {\n      this.#filterChanged();\n    }, this);\n    toolbar.appendToolbarItem(this.caseSensitiveButton);\n\n    this.regexButton = new UI.Toolbar.ToolbarToggle(\n        i18nString(UIStrings.useRegularExpression), 'regular-expression', undefined, 'regular-expression');\n    this.regexButton.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, () => {\n      this.#filterChanged();\n    }, this);\n    toolbar.appendToolbarItem(this.regexButton);\n\n    this.matchWholeWord = new UI.Toolbar.ToolbarToggle(\n        i18nString(UIStrings.matchWholeWord), 'match-whole-word', undefined, 'match-whole-word');\n    this.matchWholeWord.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, () => {\n      this.#filterChanged();\n    }, this);\n    toolbar.appendToolbarItem(this.matchWholeWord);\n\n    const textFilterUI = new UI.Toolbar.ToolbarFilter();\n    this.textFilterUI = textFilterUI;\n    textFilterUI.addEventListener(UI.Toolbar.ToolbarInput.Event.TEXT_CHANGED, this.#filterChanged, this);\n    toolbar.appendToolbarItem(textFilterUI);\n  }\n\n  selectedEvents(): Trace.Types.Events.Event[] {\n    // TODO: can we make this type readonly?\n    return this.#selectedEvents || [];\n  }\n\n  appendContextMenuItems(_contextMenu: UI.ContextMenu.ContextMenu, _node: Trace.Extras.TraceTree.Node): void {\n  }\n\n  //  TODO(paulirish): rename profileNode to treeNode\n  selectProfileNode(treeNode: Trace.Extras.TraceTree.Node, suppressSelectedEvent: boolean): void {\n    const pathToRoot: Trace.Extras.TraceTree.Node[] = [];\n    let node: (Trace.Extras.TraceTree.Node|null)|Trace.Extras.TraceTree.Node = treeNode;\n    for (; node; node = node.parent) {\n      pathToRoot.push(node);\n    }\n    for (let i = pathToRoot.length - 1; i > 0; --i) {\n      const gridNode = this.dataGridNodeForTreeNode(pathToRoot[i]);\n      if (gridNode?.dataGrid) {\n        gridNode.expand();\n      }\n    }\n    const gridNode = this.dataGridNodeForTreeNode(treeNode);\n    if (gridNode?.dataGrid) {\n      gridNode.reveal();\n      gridNode.select(suppressSelectedEvent);\n    }\n  }\n\n  refreshTree(): void {\n    if (!this.element.parentElement) {\n      // This function can be called in different views (Bottom-Up and\n      // Call Tree) by the same single event whenever the group-by\n      // dropdown changes value. Thus, we bail out whenever the view is\n      // not visible, which we know if the related element is detached\n      // from the document.\n      return;\n    }\n    this.linkifier.reset();\n    this.dataGrid.rootNode().removeChildren();\n    if (!this.#parsedTrace) {\n      this.updateDetailsForSelection();\n      return;\n    }\n    this.root = this.buildTree();\n    const children = this.root.children();\n    let maxSelfTime = 0;\n    let maxTotalTime = 0;\n    const totalUsedTime = this.root.totalTime - this.root.selfTime;\n    for (const child of children.values()) {\n      maxSelfTime = Math.max(maxSelfTime, child.selfTime);\n      maxTotalTime = Math.max(maxTotalTime, child.totalTime);\n    }\n    for (const child of children.values()) {\n      // Exclude the idle time off the total calculation.\n      const gridNode = new TreeGridNode(child, totalUsedTime, maxSelfTime, maxTotalTime, this);\n      for (const e of child.events) {\n        this.eventToTreeNode.set(e, child);\n      }\n      this.dataGrid.insertChild(gridNode);\n    }\n    this.sortingChanged();\n    this.updateDetailsForSelection();\n    if (this.searchableView) {\n      this.searchableView.refreshSearch();\n    }\n    const rootNode = this.dataGrid.rootNode();\n    if (this.autoSelectFirstChildOnRefresh && rootNode.children.length > 0) {\n      rootNode.children[0].select(/* supressSelectedEvent */ true);\n    }\n  }\n\n  buildTree(): Trace.Extras.TraceTree.Node {\n    throw new Error('Not Implemented');\n  }\n\n  buildTopDownTree(doNotAggregate: boolean, eventGroupIdCallback: ((arg0: Trace.Types.Events.Event) => string)|null):\n      Trace.Extras.TraceTree.Node {\n    return new Trace.Extras.TraceTree.TopDownRootNode(this.selectedEvents(), {\n      filters: this.filters(),\n      startTime: this.startTime,\n      endTime: this.endTime,\n      doNotAggregate,\n      eventGroupIdCallback,\n    });\n  }\n\n  populateColumns(columns: DataGrid.DataGrid.ColumnDescriptor[]): void {\n    columns.push(\n        ({id: 'self', title: i18nString(UIStrings.selfTime), width: '120px', fixedWidth: true, sortable: true} as\n         DataGrid.DataGrid.ColumnDescriptor));\n    columns.push(\n        ({id: 'total', title: i18nString(UIStrings.totalTime), width: '120px', fixedWidth: true, sortable: true} as\n         DataGrid.DataGrid.ColumnDescriptor));\n    columns.push(\n        ({id: 'activity', title: i18nString(UIStrings.activity), disclosure: true, sortable: true} as\n         DataGrid.DataGrid.ColumnDescriptor));\n  }\n\n  sortingChanged(): void {\n    const columnId = this.dataGrid.sortColumnId();\n    if (!columnId) {\n      return;\n    }\n    const sortFunction = this.getSortingFunction(columnId);\n    if (sortFunction) {\n      this.dataGrid.sortNodes(sortFunction, !this.dataGrid.isSortOrderAscending());\n    }\n  }\n\n  // Gets the sorting function for the tree view nodes.\n  getSortingFunction(columnId: string):\n      ((a: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>,\n        b: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>) => number)|null {\n    const compareNameSortFn =\n        (a: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>,\n         b: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>): number => {\n          const nodeA = (a as TreeGridNode);\n          const nodeB = (b as TreeGridNode);\n          const eventA = nodeA.profileNode.event;\n          const eventB = nodeB.profileNode.event;\n          if (!eventA || !eventB) {\n            return 0;\n          }\n          const nameA = this.#eventNameForSorting(eventA);\n          const nameB = this.#eventNameForSorting(eventB);\n          return nameA.localeCompare(nameB);\n        };\n\n    switch (columnId) {\n      case 'start-time':\n        return compareStartTime;\n      case 'self':\n        return compareSelfTime;\n      case 'total':\n        return compareTotalTime;\n      case 'activity':\n      case 'site':\n        return compareNameSortFn;\n      default:\n        console.assert(false, 'Unknown sort field: ' + columnId);\n        return null;\n    }\n\n    function compareSelfTime(\n        a: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>,\n        b: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>): number {\n      const nodeA = a as TreeGridNode;\n      const nodeB = b as TreeGridNode;\n      return nodeA.profileNode.selfTime - nodeB.profileNode.selfTime;\n    }\n\n    function compareStartTime(\n        a: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>,\n        b: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>): number {\n      const nodeA = (a as TreeGridNode);\n      const nodeB = (b as TreeGridNode);\n      const eventA = nodeA.profileNode.event;\n      const eventB = nodeB.profileNode.event;\n      // Should not happen, but guard against the nodes not having events.\n      if (!eventA || !eventB) {\n        return 0;\n      }\n      return eventA.ts - eventB.ts;\n    }\n\n    function compareTotalTime(\n        a: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>,\n        b: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>): number {\n      const nodeA = a as TreeGridNode;\n      const nodeB = b as TreeGridNode;\n      return nodeA.profileNode.totalTime - nodeB.profileNode.totalTime;\n    }\n  }\n\n  #filterChanged(): void {\n    const searchQuery = this.textFilterUI?.value();\n    const caseSensitive = this.caseSensitiveButton?.isToggled() ?? false;\n    const isRegex = this.regexButton?.isToggled() ?? false;\n    const matchWholeWord = this.matchWholeWord?.isToggled() ?? false;\n\n    this.textFilterInternal.setRegExp(\n        searchQuery ? Platform.StringUtilities.createSearchRegex(searchQuery, caseSensitive, isRegex, matchWholeWord) :\n                      null);\n    this.refreshTree();\n  }\n\n  private onShowModeChanged(): void {\n    if (this.splitWidget.showMode() === UI.SplitWidget.ShowMode.ONLY_MAIN) {\n      return;\n    }\n    this.lastSelectedNodeInternal = undefined;\n    this.updateDetailsForSelection();\n  }\n\n  protected updateDetailsForSelection(): void {\n    const selectedNode = this.dataGrid.selectedNode ? (this.dataGrid.selectedNode as TreeGridNode).profileNode : null;\n    if (selectedNode === this.lastSelectedNodeInternal) {\n      return;\n    }\n    if (this.splitWidget.showMode() === UI.SplitWidget.ShowMode.ONLY_MAIN) {\n      return;\n    }\n    this.detailsView.detachChildWidgets();\n    this.detailsView.element.removeChildren();\n    this.lastSelectedNodeInternal = selectedNode;\n    if (selectedNode && this.showDetailsForNode(selectedNode)) {\n      return;\n    }\n    const banner = this.detailsView.element.createChild('div', 'empty-state');\n    UI.UIUtils.createTextChild(banner, i18nString(UIStrings.selectItemForDetails));\n  }\n\n  showDetailsForNode(_node: Trace.Extras.TraceTree.Node): boolean {\n    return false;\n  }\n\n  private onMouseMove(event: Event): void {\n    const gridNode =\n        event.target && (event.target instanceof Node) ? (this.dataGrid.dataGridNodeFromNode((event.target))) : null;\n    const profileNode = (gridNode as TreeGridNode)?.profileNode;\n    if (profileNode === this.lastHoveredProfileNode) {\n      return;\n    }\n    this.lastHoveredProfileNode = profileNode;\n    this.onHover(profileNode);\n  }\n\n  onHover(node: Trace.Extras.TraceTree.Node|null): void {\n    this.dispatchEventToListeners(TimelineTreeView.Events.TREE_ROW_HOVERED, {node});\n  }\n\n  onClick(node: Trace.Extras.TraceTree.Node|null): void {\n    this.dispatchEventToListeners(TimelineTreeView.Events.TREE_ROW_CLICKED, {node});\n  }\n\n  override wasShown(): void {\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SELECTED_NODE, this.#onDataGridSelectionChange, this);\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.DESELECTED_NODE, this.#onDataGridDeselection, this);\n  }\n\n  override childWasDetached(_widget: UI.Widget.Widget): void {\n    this.dataGrid.removeEventListener(DataGrid.DataGrid.Events.SELECTED_NODE, this.#onDataGridSelectionChange);\n    this.dataGrid.removeEventListener(DataGrid.DataGrid.Events.DESELECTED_NODE, this.#onDataGridDeselection);\n  }\n\n  /**\n   * This event fires when the user selects a row in the grid, either by\n   * clicking or by using the arrow keys. We want to have the same effect as\n   * when the user hover overs a row.\n   */\n  #onDataGridSelectionChange(event: Common.EventTarget.EventTargetEvent<DataGrid.DataGrid.DataGridNode<GridNode>>):\n      void {\n    this.onClick((event.data as GridNode).profileNode);\n    this.onHover((event.data as GridNode).profileNode);\n  }\n\n  /**\n   * Called when the user deselects a row.\n   * This can either be because they have selected a new row\n   * (you should expect a SELECTED_NODE event after this one)\n   * or because they have deselected without a new selection.\n   */\n  #onDataGridDeselection(): void {\n    this.onClick(null);\n    this.onHover(null);\n  }\n\n  onGridNodeOpened(): void {\n    const gridNode = this.dataGrid.selectedNode as TreeGridNode;\n    // Use tree's hover method in case of unique hover experiences (like ThirdPartyTree).\n    this.onHover(gridNode.profileNode);\n    this.updateDetailsForSelection();\n  }\n\n  private onContextMenu(\n      contextMenu: UI.ContextMenu.ContextMenu, eventGridNode: DataGrid.DataGrid.DataGridNode<GridNode>): void {\n    const gridNode = (eventGridNode as GridNode);\n    if (gridNode.linkElement) {\n      contextMenu.appendApplicableItems(gridNode.linkElement);\n    }\n    const profileNode = gridNode.profileNode;\n    if (profileNode) {\n      this.appendContextMenuItems(contextMenu, profileNode);\n    }\n  }\n\n  dataGridElementForEvent(event: Trace.Types.Events.Event|null): HTMLElement|null {\n    if (!event) {\n      return null;\n    }\n    const treeNode = this.eventToTreeNode.get(event);\n    return (treeNode && this.dataGridNodeForTreeNode(treeNode)?.element()) ?? null;\n  }\n\n  dataGridNodeForTreeNode(treeNode: Trace.Extras.TraceTree.Node): GridNode|null {\n    return treeNodeToGridNode.get(treeNode) || null;\n  }\n\n  // UI.SearchableView.Searchable implementation\n\n  onSearchCanceled(): void {\n    this.searchResults = [];\n    this.currentResult = 0;\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, _shouldJump: boolean, _jumpBackwards?: boolean): void {\n    this.searchResults = [];\n    this.currentResult = 0;\n    if (!this.root) {\n      return;\n    }\n    const searchRegex = searchConfig.toSearchRegex();\n    this.searchResults = this.root.searchTree(\n        event => TimelineUIUtils.testContentMatching(event, searchRegex.regex, this.#parsedTrace || undefined));\n    this.searchableView.updateSearchMatchesCount(this.searchResults.length);\n  }\n\n  jumpToNextSearchResult(): void {\n    if (!this.searchResults.length || this.currentResult === undefined) {\n      return;\n    }\n    this.selectProfileNode(this.searchResults[this.currentResult], false);\n    this.currentResult = Platform.NumberUtilities.mod(this.currentResult + 1, this.searchResults.length);\n  }\n\n  jumpToPreviousSearchResult(): void {\n    if (!this.searchResults.length || this.currentResult === undefined) {\n      return;\n    }\n    this.selectProfileNode(this.searchResults[this.currentResult], false);\n    this.currentResult = Platform.NumberUtilities.mod(this.currentResult - 1, this.searchResults.length);\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsRegexSearch(): boolean {\n    return true;\n  }\n}\n\nexport namespace TimelineTreeView {\n  export const enum Events {\n    TREE_ROW_HOVERED = 'TreeRowHovered',\n    BOTTOM_UP_BUTTON_CLICKED = 'BottomUpButtonClicked',\n    TREE_ROW_CLICKED = 'TreeRowClicked',\n  }\n\n  export interface EventTypes {\n    [Events.TREE_ROW_HOVERED]: {node: Trace.Extras.TraceTree.Node|null, events?: Trace.Types.Events.Event[]};\n    [Events.BOTTOM_UP_BUTTON_CLICKED]: Trace.Extras.TraceTree.Node|null;\n    [Events.TREE_ROW_CLICKED]: {node: Trace.Extras.TraceTree.Node|null, events?: Trace.Types.Events.Event[]};\n  }\n}\n\n/**\n * GridNodes are 1:1 with `TraceTree.Node`s but represent them within the DataGrid. It handles the representation as a row.\n * `TreeGridNode` extends this to maintain relationship to the tree, and handles populate().\n *\n * `TimelineStackView` (aka heaviest stack) uses GridNode directly (as there's no hierarchy there), otherwise these TreeGridNode could probably be consolidated.\n */\nexport class GridNode extends DataGrid.SortableDataGrid.SortableDataGridNode<GridNode> {\n  protected populated: boolean;\n  profileNode: Trace.Extras.TraceTree.Node;\n  protected treeView: TimelineTreeView;\n  protected grandTotalTime: number;\n  protected maxSelfTime: number;\n  protected maxTotalTime: number;\n  linkElement: Element|null;\n\n  constructor(\n      profileNode: Trace.Extras.TraceTree.Node, grandTotalTime: number, maxSelfTime: number, maxTotalTime: number,\n      treeView: TimelineTreeView) {\n    super(null, false);\n    this.populated = false;\n    this.profileNode = profileNode;\n    this.treeView = treeView;\n    this.grandTotalTime = grandTotalTime;\n    this.maxSelfTime = maxSelfTime;\n    this.maxTotalTime = maxTotalTime;\n    this.linkElement = null;\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    if (columnId === 'activity' || columnId === 'site') {\n      return this.createNameCell(columnId);\n    }\n    return this.createValueCell(columnId) || super.createCell(columnId);\n  }\n\n  private createNameCell(columnId: string): HTMLElement {\n    const cell = this.createTD(columnId);\n    const container = cell.createChild('div', 'name-container');\n    const iconContainer = container.createChild('div', 'activity-icon-container');\n    const icon = iconContainer.createChild('div', 'activity-icon');\n    const name = container.createChild('div', 'activity-name');\n    const event = this.profileNode.event;\n    if (this.profileNode.isGroupNode()) {\n      const treeView = (this.treeView as AggregatedTimelineTreeView);\n      const info = treeView.displayInfoForGroupNode(this.profileNode);\n      name.textContent = info.name;\n      icon.style.backgroundColor = info.color;\n      if (info.icon) {\n        iconContainer.insertBefore(info.icon, icon);\n      }\n\n      // Include badges with the name, if relevant.\n      if (columnId === 'site' && this.treeView instanceof ThirdPartyTreeView.ThirdPartyTreeViewWidget) {\n        const thirdPartyTree = this.treeView;\n        let badgeText = '';\n\n        if (thirdPartyTree.nodeIsFirstParty(this.profileNode)) {\n          badgeText = i18nString(UIStrings.firstParty);\n        } else if (thirdPartyTree.nodeIsExtension(this.profileNode)) {\n          badgeText = i18nString(UIStrings.extension);\n        }\n\n        if (badgeText) {\n          const badge = container.createChild('div', 'entity-badge');\n          badge.textContent = badgeText;\n          UI.ARIAUtils.setLabel(badge, badgeText);\n        }\n      }\n    } else if (event) {\n      name.textContent = TimelineUIUtils.eventTitle(event);\n      const parsedTrace = this.treeView.parsedTrace();\n      const target = parsedTrace ? targetForEvent(parsedTrace, event) : null;\n      const linkifier = this.treeView.linkifier;\n      const isFreshRecording = Boolean(parsedTrace && Tracker.instance().recordingIsFresh(parsedTrace));\n      this.linkElement = TimelineUIUtils.linkifyTopCallFrame(event, target, linkifier, isFreshRecording);\n      if (this.linkElement) {\n        container.createChild('div', 'activity-link').appendChild(this.linkElement);\n      }\n      UI.ARIAUtils.setLabel(icon, TimelineUIUtils.eventStyle(event).category.title);\n      icon.style.backgroundColor = TimelineUIUtils.eventColor(event);\n      if (Trace.Types.Extensions.isSyntheticExtensionEntry(event)) {\n        icon.style.backgroundColor = Extensions.ExtensionUI.extensionEntryColor(event);\n      }\n    }\n    return cell;\n  }\n\n  private createValueCell(columnId: string): HTMLElement|null {\n    if (columnId !== 'self' && columnId !== 'total' && columnId !== 'start-time' && columnId !== 'transfer-size') {\n      return null;\n    }\n\n    let showPercents = false;\n    let value: number;\n    let maxTime: number|undefined;\n    let event: Trace.Types.Events.Event|null;\n    let isSize = false;\n    let showBottomUpButton = false;\n    const thirdPartyView = this.treeView;\n    switch (columnId) {\n      case 'start-time': {\n        event = this.profileNode.event;\n        const parsedTrace = this.treeView.parsedTrace();\n        if (!parsedTrace) {\n          throw new Error('Unable to load trace data for tree view');\n        }\n        const timings = event && Trace.Helpers.Timing.eventTimingsMilliSeconds(event);\n        const startTime = timings?.startTime ?? 0;\n        value = startTime - Trace.Helpers.Timing.microToMilli(parsedTrace.Meta.traceBounds.min);\n      } break;\n      case 'self':\n        value = this.profileNode.selfTime;\n        maxTime = this.maxSelfTime;\n        showPercents = true;\n        showBottomUpButton = thirdPartyView instanceof ThirdPartyTreeView.ThirdPartyTreeViewWidget;\n        break;\n      case 'total':\n        value = this.profileNode.totalTime;\n        maxTime = this.maxTotalTime;\n        showPercents = true;\n        break;\n      case 'transfer-size':\n        value = this.profileNode.transferSize;\n        isSize = true;\n        break;\n      default:\n        return null;\n    }\n    const cell = this.createTD(columnId);\n    cell.className = 'numeric-column';\n    let textDiv;\n    if (!isSize) {\n      cell.setAttribute('title', i18n.TimeUtilities.preciseMillisToString(value, 4));\n      textDiv = cell.createChild('div');\n      textDiv.createChild('span').textContent = i18n.TimeUtilities.preciseMillisToString(value, 1);\n    } else {\n      cell.setAttribute('title', i18n.ByteUtilities.formatBytesToKb(value));\n      textDiv = cell.createChild('div');\n      textDiv.createChild('span').textContent = i18n.ByteUtilities.formatBytesToKb(value);\n    }\n\n    if (showPercents && this.treeView.exposePercentages()) {\n      textDiv.createChild('span', 'percent-column').textContent =\n          i18nString(UIStrings.percentPlaceholder, {PH1: (value / this.grandTotalTime * 100).toFixed(1)});\n    }\n    if (maxTime) {\n      textDiv.classList.add('background-bar-text');\n      cell.createChild('div', 'background-bar-container').createChild('div', 'background-bar').style.width =\n          (value * 100 / maxTime).toFixed(1) + '%';\n    }\n    // Generate button on hover for 3P self time cell.\n    if (showBottomUpButton) {\n      this.generateBottomUpButton(textDiv);\n    }\n    return cell;\n  }\n\n  // Generates bottom up tree hover button and appends it to the provided cell element.\n  private generateBottomUpButton(textDiv: HTMLElement): void {\n    const button = new Buttons.Button.Button();\n    button.data = {\n      variant: Buttons.Button.Variant.ICON,\n      iconName: 'account-tree',\n      size: Buttons.Button.Size.SMALL,\n      toggledIconName: i18nString(UIStrings.bottomUp),\n    };\n    UI.ARIAUtils.setLabel(button, i18nString(UIStrings.viewBottomUp));\n    button.addEventListener('click', () => this.#bottomUpButtonClicked());\n    UI.Tooltip.Tooltip.install(button, i18nString(UIStrings.bottomUp));\n\n    // Append the button to the last column\n    textDiv.appendChild(button);\n  }\n\n  #bottomUpButtonClicked(): void {\n    // We should also trigger an event to \"unhover\" the 3P tree row. Since this isn't\n    // triggered when clicking the bottom up button.\n    this.treeView.dispatchEventToListeners(TimelineTreeView.Events.TREE_ROW_HOVERED, {node: null});\n    this.treeView.dispatchEventToListeners(TimelineTreeView.Events.BOTTOM_UP_BUTTON_CLICKED, this.profileNode);\n  }\n}\n\n/**\n * `TreeGridNode` lets a `GridNode` (row) populate based on its tree children.\n */\nexport class TreeGridNode extends GridNode {\n  constructor(\n      profileNode: Trace.Extras.TraceTree.Node, grandTotalTime: number, maxSelfTime: number, maxTotalTime: number,\n      treeView: TimelineTreeView) {\n    super(profileNode, grandTotalTime, maxSelfTime, maxTotalTime, treeView);\n    this.setHasChildren(this.profileNode.hasChildren());\n    treeNodeToGridNode.set(profileNode, this);\n  }\n\n  override populate(): void {\n    if (this.populated) {\n      return;\n    }\n    this.populated = true;\n    if (!this.profileNode.children) {\n      return;\n    }\n    for (const node of this.profileNode.children().values()) {\n      const gridNode = new TreeGridNode(node, this.grandTotalTime, this.maxSelfTime, this.maxTotalTime, this.treeView);\n      for (const e of node.events) {\n        this.treeView.eventToTreeNode.set(e, node);\n      }\n      this.insertChildOrdered(gridNode);\n    }\n  }\n}\n\nconst treeNodeToGridNode = new WeakMap<Trace.Extras.TraceTree.Node, TreeGridNode>();\n\nexport class AggregatedTimelineTreeView extends TimelineTreeView {\n  protected readonly groupBySetting: Common.Settings.Setting<AggregatedTimelineTreeView.GroupBy>;\n  readonly stackView: TimelineStackView;\n\n  constructor() {\n    super();\n    this.groupBySetting = Common.Settings.Settings.instance().createSetting(\n        'timeline-tree-group-by', AggregatedTimelineTreeView.GroupBy.None);\n    this.groupBySetting.addChangeListener(this.refreshTree.bind(this));\n    this.init();\n    this.stackView = new TimelineStackView(this);\n    this.stackView.addEventListener(TimelineStackView.Events.SELECTION_CHANGED, this.onStackViewSelectionChanged, this);\n  }\n\n  setGroupBySetting(groupBy: AggregatedTimelineTreeView.GroupBy): void {\n    this.groupBySetting.set(groupBy);\n  }\n\n  override updateContents(selection: TimelineSelection): void {\n    super.updateContents(selection);\n    const rootNode = this.dataGrid.rootNode();\n    if (rootNode.children.length) {\n      rootNode.children[0].select(/* suppressSelectedEvent */ true);\n    }\n    this.updateDetailsForSelection();\n  }\n\n  private beautifyDomainName(this: AggregatedTimelineTreeView, name: string, node: Trace.Extras.TraceTree.Node):\n      string {\n    if (AggregatedTimelineTreeView.isExtensionInternalURL(name as Platform.DevToolsPath.UrlString)) {\n      name = i18nString(UIStrings.chromeExtensionsOverhead);\n    } else if (AggregatedTimelineTreeView.isV8NativeURL(name as Platform.DevToolsPath.UrlString)) {\n      name = i18nString(UIStrings.vRuntime);\n    } else if (name.startsWith('chrome-extension')) {\n      name = this.entityMapper()?.entityForEvent(node.event)?.name || name;\n    }\n    return name;\n  }\n\n  displayInfoForGroupNode(node: Trace.Extras.TraceTree.Node): {\n    name: string,\n    color: string,\n    icon: (Element|undefined),\n  } {\n    const categories = Utils.EntryStyles.getCategoryStyles();\n    const color = TimelineUIUtils.eventColor(node.event);\n    const unattributed = i18nString(UIStrings.unattributed);\n\n    const id = typeof node.id === 'symbol' ? undefined : node.id;\n\n    switch (this.groupBySetting.get()) {\n      case AggregatedTimelineTreeView.GroupBy.Category: {\n        const idIsValid = id && Utils.EntryStyles.stringIsEventCategory(id);\n        const category = idIsValid ? categories[id] || categories['other'] : {title: unattributed, color: unattributed};\n        return {name: category.title, color: category.color, icon: undefined};\n      }\n\n      case AggregatedTimelineTreeView.GroupBy.Domain:\n      case AggregatedTimelineTreeView.GroupBy.Subdomain:\n      case AggregatedTimelineTreeView.GroupBy.ThirdParties: {\n        // This `undefined` is [unattributed]\n        // TODO(paulirish,aixba): Improve attribution to reduce amount of items in [unattributed].\n        const domainName = id ? this.beautifyDomainName(id, node) : undefined;\n        return {name: domainName || unattributed, color, icon: undefined};\n      }\n\n      case AggregatedTimelineTreeView.GroupBy.EventName: {\n        if (!node.event) {\n          throw new Error('Unable to find event for group by operation');\n        }\n        const name = TimelineUIUtils.eventTitle(node.event);\n        return {\n          name,\n          color,\n          icon: undefined,\n        };\n      }\n\n      case AggregatedTimelineTreeView.GroupBy.URL:\n        break;\n\n      case AggregatedTimelineTreeView.GroupBy.Frame: {\n        const frame = id ? this.parsedTrace()?.PageFrames.frames.get(id) : undefined;\n        const frameName = frame ? TimelineUIUtils.displayNameForFrame(frame) : i18nString(UIStrings.page);\n        return {name: frameName, color, icon: undefined};\n      }\n\n      default:\n        console.assert(false, 'Unexpected grouping type');\n    }\n    return {name: id || unattributed, color, icon: undefined};\n  }\n\n  override populateToolbar(toolbar: UI.Toolbar.Toolbar): void {\n    super.populateToolbar(toolbar);\n    const groupBy = AggregatedTimelineTreeView.GroupBy;\n    const options = [\n      {label: i18nString(UIStrings.noGrouping), value: groupBy.None},\n      {label: i18nString(UIStrings.groupByActivity), value: groupBy.EventName},\n      {label: i18nString(UIStrings.groupByCategory), value: groupBy.Category},\n      {label: i18nString(UIStrings.groupByDomain), value: groupBy.Domain},\n      {label: i18nString(UIStrings.groupByFrame), value: groupBy.Frame},\n      {label: i18nString(UIStrings.groupBySubdomain), value: groupBy.Subdomain},\n      {label: i18nString(UIStrings.groupByUrl), value: groupBy.URL},\n      {label: i18nString(UIStrings.groupByThirdParties), value: groupBy.ThirdParties},\n    ];\n    toolbar.appendToolbarItem(\n        new UI.Toolbar.ToolbarSettingComboBox(options, this.groupBySetting, i18nString(UIStrings.groupBy)));\n    toolbar.appendSpacer();\n    toolbar.appendToolbarItem(this.splitWidget.createShowHideSidebarButton(\n        i18nString(UIStrings.showHeaviestStack), i18nString(UIStrings.hideHeaviestStack),\n        i18nString(UIStrings.heaviestStackShown), i18nString(UIStrings.heaviestStackHidden)));\n  }\n\n  private buildHeaviestStack(treeNode: Trace.Extras.TraceTree.Node): Trace.Extras.TraceTree.Node[] {\n    console.assert(Boolean(treeNode.parent), 'Attempt to build stack for tree root');\n    let result: Trace.Extras.TraceTree.Node[] = [];\n    // Do not add root to the stack, as it's the tree itself.\n    for (let node: Trace.Extras.TraceTree.Node = treeNode; node?.parent; node = node.parent) {\n      result.push(node);\n    }\n    result = result.reverse();\n    for (let node: Trace.Extras.TraceTree.Node = treeNode; node?.children()?.size;) {\n      const children = Array.from(node.children().values());\n      node = children.reduce((a, b) => a.totalTime > b.totalTime ? a : b);\n      result.push(node);\n    }\n    return result;\n  }\n\n  override exposePercentages(): boolean {\n    return true;\n  }\n\n  private onStackViewSelectionChanged(): void {\n    const treeNode = this.stackView.selectedTreeNode();\n    if (treeNode) {\n      this.selectProfileNode(treeNode, true);\n    }\n  }\n\n  override showDetailsForNode(node: Trace.Extras.TraceTree.Node): boolean {\n    const stack = this.buildHeaviestStack(node);\n    this.stackView.setStack(stack, node);\n    this.stackView.show(this.detailsView.element);\n    return true;\n  }\n\n  protected groupingFunction(groupBy: AggregatedTimelineTreeView.GroupBy):\n      ((arg0: Trace.Types.Events.Event) => string)|null {\n    const GroupBy = AggregatedTimelineTreeView.GroupBy;\n    switch (groupBy) {\n      case GroupBy.None:\n        return null;\n      case GroupBy.EventName:\n        return (event: Trace.Types.Events.Event) => TimelineUIUtils.eventStyle(event).title;\n      case GroupBy.Category:\n        return (event: Trace.Types.Events.Event) => TimelineUIUtils.eventStyle(event).category.name;\n      case GroupBy.Subdomain:\n      case GroupBy.Domain:\n      case GroupBy.ThirdParties:\n        return this.domainByEvent.bind(this, groupBy);\n      case GroupBy.URL:\n        return (event: Trace.Types.Events.Event) => {\n          const parsedTrace = this.parsedTrace();\n          return parsedTrace ? Trace.Handlers.Helpers.getNonResolvedURL(event, parsedTrace) ?? '' : '';\n        };\n      case GroupBy.Frame:\n        return (event: Trace.Types.Events.Event) => {\n          const frameId = Trace.Helpers.Trace.frameIDForEvent(event);\n          return frameId || this.parsedTrace()?.Meta.mainFrameId || '';\n        };\n      default:\n        console.assert(false, `Unexpected aggregation setting: ${groupBy}`);\n        return null;\n    }\n  }\n\n  // This is our groupingFunction that returns the eventId in Domain, Subdomain, and ThirdParty groupBy scenarios.\n  // The eventid == the identity of a node that we expect in a bottomUp tree (either without grouping or with the groupBy grouping)\n  // A \"top node\" (in `ungroupedTopNodes`) is aggregated by this. (But so are all the other nodes, except the `GroupNode`s)\n  private domainByEvent(groupBy: AggregatedTimelineTreeView.GroupBy, event: Trace.Types.Events.Event): string {\n    const parsedTrace = this.parsedTrace();\n    if (!parsedTrace) {\n      return '';\n    }\n    const url = Trace.Handlers.Helpers.getNonResolvedURL(event, parsedTrace);\n    if (!url) {\n      // We could have receiveDataEvents (that don't have a url), but that have been\n      // attributed to an entity, let's check for these. This is used for ThirdParty grouping.\n      const entity = this.entityMapper()?.entityForEvent(event);\n      if (groupBy === AggregatedTimelineTreeView.GroupBy.ThirdParties && entity) {\n        if (!entity) {\n          return '';\n        }\n        const firstDomain = entity.domains[0];\n        const parsedURL = Common.ParsedURL.ParsedURL.fromString(firstDomain);\n        // chrome-extension check must come before entity.name.\n        if (parsedURL?.scheme === 'chrome-extension') {\n          return `${parsedURL.scheme}://${parsedURL.host}`;\n        }\n        return entity.name;\n      }\n      return '';\n    }\n    if (AggregatedTimelineTreeView.isExtensionInternalURL(url)) {\n      return AggregatedTimelineTreeView.extensionInternalPrefix;\n    }\n    if (AggregatedTimelineTreeView.isV8NativeURL(url)) {\n      return AggregatedTimelineTreeView.v8NativePrefix;\n    }\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString(url);\n    if (!parsedURL) {\n      return '';\n    }\n    if (parsedURL.scheme === 'chrome-extension') {\n      return parsedURL.scheme + '://' + parsedURL.host;\n    }\n    // This must follow after the extension checks.\n    if (groupBy === AggregatedTimelineTreeView.GroupBy.ThirdParties) {\n      const entity = this.entityMapper()?.entityForEvent(event);\n      if (!entity) {\n        return '';\n      }\n\n      return entity.name;\n    }\n    if (groupBy === AggregatedTimelineTreeView.GroupBy.Subdomain) {\n      return parsedURL.host;\n    }\n    if (/^[.0-9]+$/.test(parsedURL.host)) {\n      return parsedURL.host;\n    }\n    const domainMatch = /([^.]*\\.)?[^.]*$/.exec(parsedURL.host);\n    return domainMatch?.[0] || '';\n  }\n\n  private static isExtensionInternalURL(url: Platform.DevToolsPath.UrlString): boolean {\n    return url.startsWith(AggregatedTimelineTreeView.extensionInternalPrefix);\n  }\n\n  private static isV8NativeURL(url: Platform.DevToolsPath.UrlString): boolean {\n    return url.startsWith(AggregatedTimelineTreeView.v8NativePrefix);\n  }\n\n  private static readonly extensionInternalPrefix = 'extensions::';\n  private static readonly v8NativePrefix = 'native ';\n\n  override onHover(node: Trace.Extras.TraceTree.Node|null): void {\n    if (node !== null && this.groupBySetting.get() === AggregatedTimelineTreeView.GroupBy.ThirdParties) {\n      const events = this.#getThirdPartyEventsForNode(node);\n      this.dispatchEventToListeners(TimelineTreeView.Events.TREE_ROW_HOVERED, {node, events});\n      return;\n    }\n    this.dispatchEventToListeners(TimelineTreeView.Events.TREE_ROW_HOVERED, {node});\n  }\n\n  override onClick(node: Trace.Extras.TraceTree.Node|null): void {\n    if (node !== null && this.groupBySetting.get() === AggregatedTimelineTreeView.GroupBy.ThirdParties) {\n      const events = this.#getThirdPartyEventsForNode(node);\n      this.dispatchEventToListeners(TimelineTreeView.Events.TREE_ROW_CLICKED, {node, events});\n      return;\n    }\n    this.dispatchEventToListeners(TimelineTreeView.Events.TREE_ROW_CLICKED, {node});\n  }\n\n  #getThirdPartyEventsForNode(node: Trace.Extras.TraceTree.Node): Trace.Types.Events.Event[]|undefined {\n    if (!node.event) {\n      return;\n    }\n    const entity = this.entityMapper()?.entityForEvent(node.event);\n    // Should be [unattributed]. Just use the node's events.\n    if (!entity) {\n      return node.events;\n    }\n    const events = this.entityMapper()?.eventsForEntity(entity);\n    return events;\n  }\n}\nexport namespace AggregatedTimelineTreeView {\n  export enum GroupBy {\n    /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n    None = 'None',\n    EventName = 'EventName',\n    Category = 'Category',\n    Domain = 'Domain',\n    Subdomain = 'Subdomain',\n    URL = 'URL',\n    Frame = 'Frame',\n    ThirdParties = 'ThirdParties',\n    /* eslint-enable @typescript-eslint/naming-convention */\n  }\n}\n\nexport class CallTreeTimelineTreeView extends AggregatedTimelineTreeView {\n  constructor() {\n    super();\n    this.element.setAttribute('jslog', `${VisualLogging.pane('call-tree').track({resize: true})}`);\n    this.dataGrid.markColumnAsSortedBy('total', DataGrid.DataGrid.Order.Descending);\n  }\n\n  override buildTree(): Trace.Extras.TraceTree.Node {\n    const grouping = this.groupBySetting.get();\n    return this.buildTopDownTree(false, this.groupingFunction(grouping));\n  }\n}\n\nexport class BottomUpTimelineTreeView extends AggregatedTimelineTreeView {\n  constructor() {\n    super();\n    this.element.setAttribute('jslog', `${VisualLogging.pane('bottom-up').track({resize: true})}`);\n    this.dataGrid.markColumnAsSortedBy('self', DataGrid.DataGrid.Order.Descending);\n  }\n\n  override buildTree(): Trace.Extras.TraceTree.Node {\n    return new Trace.Extras.TraceTree.BottomUpRootNode(this.selectedEvents(), {\n      textFilter: this.textFilter(),\n      filters: this.filtersWithoutTextFilter(),\n      startTime: this.startTime,\n      endTime: this.endTime,\n      eventGroupIdCallback: this.groupingFunction(this.groupBySetting.get()),\n      // To include instant events. When this is set to true, instant events are\n      // considered (to calculate transfer size). This then includes these events in tree nodes.\n      calculateTransferSize: true,\n      // We should forceGroupIdCallback if filtering by 3P for correct 3P grouping.\n      forceGroupIdCallback: this.groupBySetting.get() === AggregatedTimelineTreeView.GroupBy.ThirdParties,\n    });\n  }\n}\n\nexport class TimelineStackView extends\n    Common.ObjectWrapper.eventMixin<TimelineStackView.EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox) {\n  private readonly treeView: TimelineTreeView;\n  private readonly dataGrid: DataGrid.ViewportDataGrid.ViewportDataGrid<unknown>;\n\n  constructor(treeView: TimelineTreeView) {\n    super();\n    const header = this.element.createChild('div', 'timeline-stack-view-header');\n    header.textContent = i18nString(UIStrings.heaviestStack);\n    this.treeView = treeView;\n    const columns = ([\n      {id: 'total', title: i18nString(UIStrings.totalTime), fixedWidth: true, width: '110px'},\n      {id: 'activity', title: i18nString(UIStrings.activity)},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    this.dataGrid = new DataGrid.ViewportDataGrid.ViewportDataGrid({\n      displayName: i18nString(UIStrings.timelineStack),\n      columns,\n      deleteCallback: undefined,\n      refreshCallback: undefined,\n    });\n\n    this.dataGrid.setResizeMethod(DataGrid.DataGrid.ResizeMethod.LAST);\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SELECTED_NODE, this.onSelectionChanged, this);\n\n    // Hover dim behavior within stackview sidebar\n    this.dataGrid.element.addEventListener('mouseenter', this.onMouseMove.bind(this), true);\n    this.dataGrid.element.addEventListener(\n        'mouseleave', () => this.dispatchEventToListeners(TimelineStackView.Events.TREE_ROW_HOVERED, null));\n\n    this.dataGrid.asWidget().show(this.element);\n  }\n\n  setStack(stack: Trace.Extras.TraceTree.Node[], selectedNode: Trace.Extras.TraceTree.Node): void {\n    const rootNode = this.dataGrid.rootNode();\n    rootNode.removeChildren();\n    let nodeToReveal: GridNode|null = null;\n    const totalTime = Math.max.apply(Math, stack.map(node => node.totalTime));\n    for (const node of stack) {\n      const gridNode = new GridNode(node, totalTime, totalTime, totalTime, this.treeView);\n      rootNode.appendChild(gridNode);\n      if (node === selectedNode) {\n        nodeToReveal = gridNode;\n      }\n    }\n    if (nodeToReveal) {\n      nodeToReveal.revealAndSelect();\n    }\n  }\n\n  onMouseMove(event: Event): void {\n    const gridNode = event.target && (event.target instanceof Node) ?\n        (this.dataGrid.dataGridNodeFromNode((event.target as Node))) :\n        null;\n    const profileNode = (gridNode as TreeGridNode)?.profileNode;\n    this.dispatchEventToListeners(TimelineStackView.Events.TREE_ROW_HOVERED, profileNode);\n  }\n\n  selectedTreeNode(): Trace.Extras.TraceTree.Node|null {\n    const selectedNode = this.dataGrid.selectedNode;\n    return selectedNode && (selectedNode as GridNode).profileNode;\n  }\n\n  private onSelectionChanged(): void {\n    this.dispatchEventToListeners(TimelineStackView.Events.SELECTION_CHANGED);\n  }\n}\n\nexport namespace TimelineStackView {\n  export const enum Events {\n    SELECTION_CHANGED = 'SelectionChanged',\n    TREE_ROW_HOVERED = 'TreeRowHovered',\n  }\n\n  export interface EventTypes {\n    [Events.TREE_ROW_HOVERED]: Trace.Extras.TraceTree.Node|null;\n    [Events.SELECTION_CHANGED]: void;\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as Trace from '../../models/trace/trace.js';\n\nlet instance: ActiveFilters|null = null;\n/** Singleton class that contains the set of active filters for the given trace\n * file.\n */\nexport class ActiveFilters {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ActiveFilters {\n    const forceNew = Boolean(opts.forceNew);\n    if (!instance || forceNew) {\n      instance = new ActiveFilters();\n    }\n    return instance;\n  }\n\n  static removeInstance(): void {\n    instance = null;\n  }\n\n  #activeFilters: Trace.Extras.TraceFilter.TraceFilter[] = [];\n\n  activeFilters(): readonly Trace.Extras.TraceFilter.TraceFilter[] {\n    return this.#activeFilters;\n  }\n\n  setFilters(newFilters: Trace.Extras.TraceFilter.TraceFilter[]): void {\n    this.#activeFilters = newFilters;\n  }\n\n  isVisible(event: Trace.Types.Events.Event): boolean {\n    return this.#activeFilters.every(f => f.accept(event));\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Trace from '../../models/trace/trace.js';\n\n// We could add a `type` field here to distinguish them, but it is not needed\n// as we use the existence of \"event\" or \"bounds\" to do that.\nexport interface EventSelection {\n  event: Trace.Types.Events.Event;\n}\n\nexport interface TimeRangeSelection {\n  bounds: Trace.Types.Timing.TraceWindowMicro;\n}\n\nexport type TimelineSelection = EventSelection|TimeRangeSelection;\n\nexport function selectionFromEvent(event: Trace.Types.Events.Event): EventSelection {\n  return {\n    event,\n  };\n}\n\nexport function selectionFromRangeMicroSeconds(\n    min: Trace.Types.Timing.Micro, max: Trace.Types.Timing.Micro): TimeRangeSelection {\n  return {\n    bounds: Trace.Helpers.Timing.traceWindowFromMicroSeconds(min, max),\n  };\n}\n\nexport function selectionFromRangeMilliSeconds(\n    min: Trace.Types.Timing.Milli, max: Trace.Types.Timing.Milli): TimeRangeSelection {\n  return {\n    bounds: Trace.Helpers.Timing.traceWindowFromMilliSeconds(min, max),\n  };\n}\n\nexport function selectionIsEvent(selection: TimelineSelection|null): selection is EventSelection {\n  return Boolean(selection && 'event' in selection);\n}\n\nexport function selectionIsRange(selection: TimelineSelection|null): selection is TimeRangeSelection {\n  return Boolean(selection && 'bounds' in selection);\n}\n\nexport function rangeForSelection(selection: TimelineSelection): Trace.Types.Timing.TraceWindowMicro {\n  if (selectionIsRange(selection)) {\n    return selection.bounds;\n  }\n\n  if (selectionIsEvent(selection)) {\n    const timings = Trace.Helpers.Timing.eventTimingsMicroSeconds(selection.event);\n    return Trace.Helpers.Timing.traceWindowFromMicroSeconds(timings.startTime, timings.endTime);\n  }\n  Platform.assertNever(selection, 'Unknown selection type');\n}\n\nexport function selectionsEqual(s1: TimelineSelection, s2: TimelineSelection): boolean {\n  if (selectionIsEvent(s1) && selectionIsEvent(s2)) {\n    return s1.event === s2.event;\n  }\n\n  if (selectionIsRange(s1) && selectionIsRange(s2)) {\n    return Trace.Helpers.Timing.windowsEqual(s1.bounds, s2.bounds);\n  }\n\n  return false;\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2025 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n.timeline-tree-view {\n  display: flex;\n  overflow: hidden;\n}\n\n.timeline-tree-view devtools-toolbar {\n  background-color: var(--sys-color-cdt-base-container);\n  border-bottom: 1px solid var(--sys-color-divider);\n}\n\n.timeline-tree-view .data-grid {\n  flex: auto;\n}\n\n.timeline-tree-view .data-grid .data-container {\n  overflow-y: scroll;\n}\n\n.timeline-tree-view .data-grid.data-grid-fits-viewport .corner {\n  display: table-cell;\n}\n\n.timeline-tree-view .data-grid table.data {\n  background: var(--sys-color-cdt-base-container);\n}\n\n.timeline-tree-view .data-grid .odd {\n  background-color: var(--sys-color-surface1);\n}\n\n.timeline-tree-view .data-grid tr:hover td:not(.bottom-filler-td) {\n  background-color: var(--sys-color-state-hover-on-subtle);\n}\n\n.timeline-tree-view .data-grid td.numeric-column {\n  text-align: right;\n  position: relative;\n}\n\n.timeline-tree-view .data-grid td.activity-column {\n  padding-left: 0;\n\n  &::before {\n    mask-position: center;\n    mask-repeat: no-repeat;\n    width: var(--sys-size-9);\n    height: 18px;\n    margin: 0 calc(-1 * var(--sys-size-2)) 0 0;\n    top: 0;\n  }\n}\n\n.timeline-tree-view .data-grid div.background-bar-text {\n  position: relative;\n  z-index: 1;\n}\n\n.timeline-tree-view .data-grid span.percent-column {\n  color: var(--sys-color-token-subtle);\n  width: 45px;\n  display: inline-block;\n}\n\n.timeline-tree-view .data-grid tr.selected span {\n  color: inherit;\n}\n\n.timeline-tree-view .data-grid tr.selected {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.timeline-tree-view .data-grid .name-container {\n  display: flex;\n  align-items: center;\n}\n\n.timeline-tree-view .data-grid .name-container .activity-icon {\n  width: 12px;\n  height: 12px;\n  border: 1px solid var(--divider-line);\n  margin: 3px 0;\n}\n\n.timeline-tree-view .data-grid .name-container .activity-icon-container {\n  margin-right: 3px;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  width: 18px;\n  height: 18px;\n  overflow: hidden;\n}\n\n.timeline-tree-view .data-grid .name-container .activity-warning::after {\n  content: \"[deopt]\";\n  margin: 0 4px;\n  line-height: 12px;\n  font-size: 10px;\n  color: var(--sys-color-state-disabled);\n}\n\n.timeline-tree-view .data-grid tr.selected .name-container .activity-warning::after {\n  color: var(--sys-color-on-tonal-container);\n}\n\n.timeline-tree-view .data-grid .name-container .activity-link {\n  flex: auto;\n  text-align: right;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-left: 5px;\n}\n\n.timeline-tree-view .data-grid .background-bar-container {\n  position: absolute;\n  /* Small gap on the left side so the first row (which has a 100% width bar, has a distinguishable bar */\n  inset: 0 0 0 2px;\n}\n\n.timeline-tree-view .data-grid .background-bar {\n  height: 18px;\n  background-color: var(--sys-color-surface-yellow);\n  border-bottom: 1px solid var(--sys-color-yellow-outline);\n  position: absolute;\n  right: 0;\n}\n\n.timeline-tree-view .data-grid .selected .background-bar {\n  background-color: var(--app-color-selected-progress-bar);\n  border-bottom: 1px solid var(--app-border-selected-progress-bar);\n}\n\n.timeline-tree-view .data-grid thead {\n  height: 21px;\n  /* so the header is always above any body rows that the user has scrolled past */\n  z-index: 2;\n}\n\n@media (forced-colors: active) {\n  .timeline-tree-view .data-grid .name-container .activity-icon {\n    forced-color-adjust: none;\n  }\n\n  .timeline-tree-view .data-grid tr.selected span.percent-column,\n  .timeline-tree-view .data-grid tr.selected div.background-bar-text span,\n  .timeline-tree-view .data-grid tr.selected .name-container .activity-link .devtools-link .timeline-link {\n    color: HighlightText;\n  }\n\n  .timeline-tree-view .data-grid .background-bar,\n  .timeline-tree-view .data-grid tr:hover td:not(.bottom-filler-td) {\n    background-color: transparent;\n  }\n\n  .timeline-tree-view .data-grid tr.selected .background-bar {\n    background-color: transparent;\n    border-bottom-color: HighlightText;\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./timelineTreeView.css')} */`;", "// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\n/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n * Copyright (C) 2012 Intel Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport '../../ui/legacy/legacy.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as AiAssistanceModel from '../../models/ai_assistance/ai_assistance.js';\nimport * as CrUXManager from '../../models/crux-manager/crux-manager.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as TraceBounds from '../../services/trace_bounds/trace_bounds.js';\nimport * as Adorners from '../../ui/components/adorners/adorners.js';\nimport * as Dialogs from '../../ui/components/dialogs/dialogs.js';\nimport * as LegacyWrapper from '../../ui/components/legacy_wrapper/legacy_wrapper.js';\nimport * as Snackbars from '../../ui/components/snackbars/snackbars.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport * as MobileThrottling from '../mobile_throttling/mobile_throttling.js';\n\nimport {ActiveFilters} from './ActiveFilters.js';\nimport * as AnnotationHelpers from './AnnotationHelpers.js';\nimport {TraceLoadEvent} from './BenchmarkEvents.js';\nimport * as TimelineComponents from './components/components.js';\nimport * as TimelineInsights from './components/insights/insights.js';\nimport {Tracker} from './FreshRecording.js';\nimport {IsolateSelector} from './IsolateSelector.js';\nimport {AnnotationModifiedEvent, ModificationsManager} from './ModificationsManager.js';\nimport * as Overlays from './overlays/overlays.js';\nimport {cpuprofileJsonGenerator, traceJsonGenerator} from './SaveFileFormatter.js';\nimport {StatusDialog} from './StatusDialog.js';\nimport {type Client, TimelineController} from './TimelineController.js';\nimport {Tab} from './TimelineDetailsView.js';\nimport type {TimelineFlameChartDataProvider} from './TimelineFlameChartDataProvider.js';\nimport {Events as TimelineFlameChartViewEvents, TimelineFlameChartView} from './TimelineFlameChartView.js';\nimport {TimelineHistoryManager} from './TimelineHistoryManager.js';\nimport {TimelineLoader} from './TimelineLoader.js';\nimport {TimelineMiniMap} from './TimelineMiniMap.js';\nimport timelinePanelStyles from './timelinePanel.css.js';\nimport {\n  rangeForSelection,\n  selectionFromEvent,\n  selectionIsRange,\n  selectionsEqual,\n  type TimelineSelection,\n} from './TimelineSelection.js';\nimport {TimelineUIUtils} from './TimelineUIUtils.js';\nimport {UIDevtoolsController} from './UIDevtoolsController.js';\nimport {UIDevtoolsUtils} from './UIDevtoolsUtils.js';\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text that appears when user drag and drop something (for example, a file) in Timeline Panel of the Performance panel\n   */\n  dropTimelineFileOrUrlHere: 'Drop timeline file or URL here',\n  /**\n   *@description Title of capture layers and pictures setting in timeline panel of the performance panel\n   */\n  enableAdvancedPaint: 'Enable advanced paint instrumentation (slow)',\n  /**\n   *@description Title of CSS selector stats setting in timeline panel of the performance panel\n   */\n  enableSelectorStats: 'Enable CSS selector stats (slow)',\n  /**\n   *@description Title of show screenshots setting in timeline panel of the performance panel\n   */\n  screenshots: 'Screenshots',\n  /**\n   *@description Text for the memory of the page\n   */\n  memory: 'Memory',\n  /**\n   *@description Text to clear content\n   */\n  clear: 'Clear',\n  /**\n   *@description A label for a button that fixes something.\n   */\n  fixMe: 'Fix me',\n  /**\n   *@description Tooltip text that appears when hovering over the largeicon load button\n   */\n  loadProfile: 'Load profile…',\n  /**\n   *@description Tooltip text that appears when hovering over the largeicon download button\n   */\n  saveProfile: 'Save profile…',\n  /**\n   *@description An option to save trace with annotations that appears in the menu of the toolbar download button. This is the expected default option, therefore it does not mention annotations.\n   */\n  saveTraceWithAnnotationsMenuOption: 'Save trace',\n  /**\n   *@description An option to save trace without annotations that appears in the menu of the toolbar download button\n   */\n  saveTraceWithoutAnnotationsMenuOption: 'Save trace without annotations',\n  /**\n   *@description Text to take screenshots\n   */\n  captureScreenshots: 'Capture screenshots',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  showMemoryTimeline: 'Show memory timeline',\n  /**\n   *@description Tooltip text that appears when hovering over the largeicon settings gear in show settings pane setting in timeline panel of the performance panel\n   */\n  captureSettings: 'Capture settings',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  capturesAdvancedPaint: 'Captures advanced paint instrumentation, introduces significant performance overhead',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  capturesSelectorStats: 'Captures CSS selector statistics',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  network: 'Network:',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  cpu: 'CPU:',\n  /**\n   *@description Title of the 'Network conditions' tool in the bottom drawer\n   */\n  networkConditions: 'Network conditions',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  CpuThrottlingIsEnabled: '- CPU throttling is enabled',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  NetworkThrottlingIsEnabled: '- Network throttling is enabled',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  SignificantOverheadDueToPaint: '- Significant overhead due to paint instrumentation',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  SelectorStatsEnabled: '- Selector stats is enabled',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  stoppingTimeline: 'Stopping timeline…',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  received: 'Received',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  processed: 'Processed',\n  /**\n   *@description Text to close something\n   */\n  close: 'Close',\n  /**\n   *@description Status text to indicate the recording has failed in the Performance panel\n   */\n  recordingFailed: 'Recording failed',\n  /**\n   *@description Status text to indicate that exporting the trace has failed\n   */\n  exportingFailed: 'Exporting the trace failed',\n  /**\n   * @description Text to indicate the progress of a profile. Informs the user that we are currently\n   * creating a peformance profile.\n   */\n  profiling: 'Profiling…',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  bufferUsage: 'Buffer usage',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  loadingProfile: 'Loading profile…',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  processingProfile: 'Processing profile…',\n  /**\n   *@description Text in Timeline Panel of the Performance panel\n   */\n  initializingProfiler: 'Initializing profiler…',\n  /**\n   *\n   * @description Text for exporting basic traces\n   */\n  exportNormalTraces: 'Basic performance traces',\n  /**\n   *\n   * @description Text for exporting enhanced traces\n   */\n  exportEnhancedTraces: 'Enhanced performance traces',\n  /**\n   *@description Tooltip description for a checkbox that toggles the visibility of data added by extensions of this panel (Performance).\n   */\n  showDataAddedByExtensions: 'Show data added by extensions of the Performance panel',\n  /**\n   Label for a checkbox that toggles the visibility of data added by extensions of this panel (Performance).\n   */\n  showCustomtracks: 'Show custom tracks',\n\n  /**\n   * @description Tooltip for the the sidebar toggle in the Performance panel. Command to open/show the sidebar.\n   */\n  showSidebar: 'Show sidebar',\n  /**\n   * @description Tooltip for the the sidebar toggle in the Performance panel. Command to close the sidebar.\n   */\n  hideSidebar: 'Hide sidebar',\n  /**\n   * @description Screen reader announcement when the sidebar is shown in the Performance panel.\n   */\n  sidebarShown: 'Performance sidebar shown',\n  /**\n   * @description Screen reader announcement when the sidebar is hidden in the Performance panel.\n   */\n  sidebarHidden: 'Performance sidebar hidden',\n  /**\n   * @description Screen reader announcement when the user clears their selection\n   */\n  selectionCleared: 'Selection cleared',\n  /**\n   * @description Screen reader announcement when the user selects a frame.\n   */\n  frameSelected: 'Frame selected',\n  /**\n   * @description Screen reader announcement when the user selects a trace event.\n   * @example {Paint} PH1\n   */\n  eventSelected: 'Event {PH1} selected',\n  /**\n   *@description Text of a hyperlink to documentation.\n   */\n  learnMore: 'Learn more',\n  /**\n   * @description Tooltip text for a button that takes the user back to the default view which shows performance metrics that are live.\n   */\n  backToLiveMetrics: 'Go back to the live metrics page',\n  /**\n   * @description Description of the Timeline zoom keyboard instructions that appear in the shortcuts dialog\n   */\n  timelineZoom: 'Zoom',\n  /**\n   * @description Description of the Timeline scrolling & panning instructions that appear in the shortcuts dialog.\n   */\n  timelineScrollPan: 'Scroll & Pan',\n  /**\n   * @description Title for the Dim 3rd Parties checkbox.\n   */\n  dimThirdParties: 'Dim 3rd parties',\n  /**\n   * @description Description for the Dim 3rd Parties checkbox tooltip describing how 3rd parties are classified.\n   */\n  thirdPartiesByThirdPartyWeb: '3rd parties classified by third-party-web',\n  /**\n   * @description Title of the shortcuts dialog shown to the user that lists keyboard shortcuts.\n   */\n  shortcutsDialogTitle: 'Keyboard shortcuts for flamechart',\n  /**\n   * @description Notification shown to the user whenever DevTools receives an external request.\n   */\n  externalRequestReceived: '`DevTools` received an external request',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelinePanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet timelinePanelInstance: TimelinePanel|undefined;\nlet isNode: boolean;\n\n/**\n * Represents the states that the timeline panel can be in.\n * If you need to change the panel's view, use the {@see #changeView} method.\n * Note that we do not represent the \"Loading/Processing\" view here. The\n * StatusPane is managed in the code that handles file import/recording, and\n * when it is visible it is rendered on top of the UI so obscures what is behind\n * it. When it completes, we will set the view mode to the trace that has been\n * loaded.\n */\ntype ViewMode = {\n  mode: 'LANDING_PAGE',\n}|{\n  mode: 'VIEWING_TRACE',\n  traceIndex: number,\n  forceOpenSidebar: boolean,\n}|{\n  mode: 'STATUS_PANE_OVERLAY',\n};\n\nexport class TimelinePanel extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Panel.Panel>(UI.Panel.Panel)\n    implements Client, TimelineModeViewDelegate {\n  private readonly dropTarget: UI.DropTarget.DropTarget;\n  private readonly recordingOptionUIControls: UI.Toolbar.ToolbarItem[];\n  private state: State;\n  private recordingPageReload: boolean;\n  private readonly millisecondsToRecordAfterLoadEvent: number;\n  private readonly toggleRecordAction: UI.ActionRegistration.Action;\n  private readonly recordReloadAction: UI.ActionRegistration.Action;\n  readonly #historyManager: TimelineHistoryManager;\n  private readonly captureLayersAndPicturesSetting: Common.Settings.Setting<boolean>;\n  private readonly captureSelectorStatsSetting: Common.Settings.Setting<boolean>;\n  readonly #thirdPartyTracksSetting: Common.Settings.Setting<boolean>;\n  private showScreenshotsSetting: Common.Settings.Setting<boolean>;\n  private showMemorySetting: Common.Settings.Setting<boolean>;\n  private readonly panelToolbar: UI.Toolbar.Toolbar;\n  private readonly panelRightToolbar: UI.Toolbar.Toolbar;\n  private readonly timelinePane: UI.Widget.VBox;\n  readonly #minimapComponent = new TimelineMiniMap();\n  #viewMode: ViewMode = {mode: 'LANDING_PAGE'};\n  readonly #dimThirdPartiesSetting: Common.Settings.Setting<boolean>|null = null;\n  #thirdPartyCheckbox: UI.Toolbar.ToolbarSettingCheckbox|null = null;\n\n  /**\n   * We get given any filters for a new trace when it is recorded/imported.\n   * Because the user can then use the dropdown to navigate to another trace,\n   * we store the filters by the trace index, so if the user then navigates back\n   * to a previous trace we can reinstate the filters from this map.\n   */\n  #exclusiveFilterPerTrace = new Map<number, Trace.Extras.TraceFilter.TraceFilter>();\n  /**\n   * This widget holds the timeline sidebar which shows Insights & Annotations,\n   * and the main UI which shows the timeline\n   */\n  readonly #splitWidget = new UI.SplitWidget.SplitWidget(\n      true,                            // isVertical\n      false,                           // secondIsSidebar\n      'timeline-panel-sidebar-state',  // settingName (to persist the open/closed state for the user)\n      TimelineComponents.Sidebar.DEFAULT_SIDEBAR_WIDTH_PX,\n  );\n  private readonly statusPaneContainer: HTMLElement;\n  private readonly flameChart: TimelineFlameChartView;\n  private readonly searchableViewInternal: UI.SearchableView.SearchableView;\n  private showSettingsPaneButton!: UI.Toolbar.ToolbarSettingToggle;\n  private showSettingsPaneSetting!: Common.Settings.Setting<boolean>;\n  private settingsPane?: HTMLElement;\n  private controller!: TimelineController|null;\n  private cpuProfiler!: SDK.CPUProfilerModel.CPUProfilerModel|null;\n  private clearButton!: UI.Toolbar.ToolbarButton;\n  private loadButton!: UI.Toolbar.ToolbarButton;\n  private saveButton!: UI.Toolbar.ToolbarButton|UI.Toolbar.ToolbarMenuButton;\n  private homeButton?: UI.Toolbar.ToolbarButton;\n  private statusDialog: StatusDialog|null = null;\n  private landingPage!: UI.Widget.Widget;\n  private loader?: TimelineLoader;\n  private showScreenshotsToolbarCheckbox?: UI.Toolbar.ToolbarItem;\n  private showMemoryToolbarCheckbox?: UI.Toolbar.ToolbarItem;\n  private networkThrottlingSelect?: MobileThrottling.ThrottlingManager.NetworkThrottlingSelectorWrapper;\n  private cpuThrottlingSelect?: MobileThrottling.ThrottlingManager.CPUThrottlingSelectorWrapper;\n  private fileSelectorElement?: HTMLInputElement;\n  private selection: TimelineSelection|null = null;\n  private traceLoadStart!: Trace.Types.Timing.Milli|null;\n\n  #traceEngineModel: Trace.TraceModel.Model;\n  #sourceMapsResolver: Utils.SourceMapsResolver.SourceMapsResolver|null = null;\n  #entityMapper: Utils.EntityMapper.EntityMapper|null = null;\n  #onSourceMapsNodeNamesResolvedBound = this.#onSourceMapsNodeNamesResolved.bind(this);\n  #sidebarToggleButton = this.#splitWidget.createShowHideSidebarButton(\n      i18nString(UIStrings.showSidebar),\n      i18nString(UIStrings.hideSidebar),\n      // These are used to announce to screen-readers and not shown visibly.\n      i18nString(UIStrings.sidebarShown),\n      i18nString(UIStrings.sidebarHidden),\n      'timeline.sidebar',  // jslog context\n  );\n\n  #sideBar = new TimelineComponents.Sidebar.SidebarWidget();\n\n  /**\n   * Used to track an aria announcement that we need to alert for\n   * screen-readers. We track these because we debounce announcements to not\n   * overwhelm.\n   */\n  #pendingAriaMessage: string|null = null;\n\n  #eventToRelatedInsights: TimelineComponents.RelatedInsightChips.EventToRelatedInsightsMap = new Map();\n  #shortcutsDialog: Dialogs.ShortcutDialog.ShortcutDialog = new Dialogs.ShortcutDialog.ShortcutDialog();\n  /**\n   * Track if the user has opened the shortcuts dialog before. We do this so that the\n   * very first time the performance panel is open after the shortcuts dialog ships, we can\n   * automatically pop it open to aid discovery.\n   */\n  #userHadShortcutsDialogOpenedOnce = Common.Settings.Settings.instance().createSetting<boolean>(\n      'timeline.user-had-shortcuts-dialog-opened-once', false);\n  /**\n   * Navigation radio buttons located in the shortcuts dialog.\n   */\n  #navigationRadioButtons = document.createElement('form');\n  #modernNavRadioButton = UI.UIUtils.createRadioButton(\n      'flamechart-selected-navigation', 'Modern - normal scrolling', 'timeline.select-modern-navigation');\n  #classicNavRadioButton = UI.UIUtils.createRadioButton(\n      'flamechart-selected-navigation', 'Classic - scroll to zoom', 'timeline.select-classic-navigation');\n\n  #onMainEntryHovered: (event: Common.EventTarget.EventTargetEvent<number>) => void;\n\n  constructor(traceModel?: Trace.TraceModel.Model) {\n    super('timeline');\n    this.registerRequiredCSS(timelinePanelStyles);\n    const adornerContent = document.createElement('span');\n    adornerContent.innerHTML = `<div style=\"\n      font-size: 12px;\n      transform: scale(1.25);\n      color: transparent;\n      background: linear-gradient(90deg,CLICK255 0 0 / 100%) 0%, rgb(255 154 0 / 100%) 10%, rgb(208 222 33 / 100%) 20%, rgb(79 220 74 / 100%) 30%, rgb(63 218 216 / 100%) 40%, rgb(47 201 226 / 100%) 50%, rgb(28 127 238 / 100%) 60%, rgb(95 21 242 / 100%) 70%, rgb(186 12 248 / 100%) 80%, rgb(251 7 217 / 100%) 90%, rgb(255 0 0 / 100%) 100%);\n      -webkit-background-clip: text;\n      \">💫</div>`;\n    const adorner = new Adorners.Adorner.Adorner();\n    adorner.classList.add('fix-perf-icon');\n    adorner.data = {\n      name: i18nString(UIStrings.fixMe),\n      content: adornerContent,\n    };\n    this.#traceEngineModel = traceModel || this.#instantiateNewModel();\n    this.#listenForProcessingProgress();\n\n    this.element.addEventListener('contextmenu', this.contextMenu.bind(this), false);\n    this.dropTarget = new UI.DropTarget.DropTarget(\n        this.element, [UI.DropTarget.Type.File, UI.DropTarget.Type.URI],\n        i18nString(UIStrings.dropTimelineFileOrUrlHere), this.handleDrop.bind(this));\n\n    this.recordingOptionUIControls = [];\n    this.state = State.IDLE;\n    this.recordingPageReload = false;\n    this.millisecondsToRecordAfterLoadEvent = 5000;\n    this.toggleRecordAction = UI.ActionRegistry.ActionRegistry.instance().getAction('timeline.toggle-recording');\n    this.recordReloadAction = UI.ActionRegistry.ActionRegistry.instance().getAction('timeline.record-reload');\n\n    this.#historyManager = new TimelineHistoryManager(this.#minimapComponent, isNode);\n\n    this.traceLoadStart = null;\n\n    this.captureLayersAndPicturesSetting = Common.Settings.Settings.instance().createSetting(\n        'timeline-capture-layers-and-pictures', false, Common.Settings.SettingStorageType.SESSION);\n    this.captureLayersAndPicturesSetting.setTitle(i18nString(UIStrings.enableAdvancedPaint));\n    this.captureSelectorStatsSetting = Common.Settings.Settings.instance().createSetting(\n        'timeline-capture-selector-stats', false, Common.Settings.SettingStorageType.SESSION);\n    this.captureSelectorStatsSetting.setTitle(i18nString(UIStrings.enableSelectorStats));\n\n    this.showScreenshotsSetting =\n        Common.Settings.Settings.instance().createSetting('timeline-show-screenshots', isNode ? false : true);\n    this.showScreenshotsSetting.setTitle(i18nString(UIStrings.screenshots));\n    this.showScreenshotsSetting.addChangeListener(this.updateMiniMap, this);\n\n    this.showMemorySetting = Common.Settings.Settings.instance().createSetting(\n        'timeline-show-memory', false, Common.Settings.SettingStorageType.SESSION);\n    this.showMemorySetting.setTitle(i18nString(UIStrings.memory));\n    this.showMemorySetting.addChangeListener(this.onMemoryModeChanged, this);\n\n    this.#dimThirdPartiesSetting = Common.Settings.Settings.instance().createSetting(\n        'timeline-dim-third-parties', false, Common.Settings.SettingStorageType.SESSION);\n    this.#dimThirdPartiesSetting.setTitle(i18nString(UIStrings.dimThirdParties));\n    this.#dimThirdPartiesSetting.addChangeListener(this.onDimThirdPartiesChanged, this);\n\n    this.#thirdPartyTracksSetting = TimelinePanel.extensionDataVisibilitySetting();\n    this.#thirdPartyTracksSetting.addChangeListener(this.#extensionDataVisibilityChanged, this);\n    this.#thirdPartyTracksSetting.setTitle(i18nString(UIStrings.showCustomtracks));\n\n    const timelineToolbarContainer = this.element.createChild('div', 'timeline-toolbar-container');\n    timelineToolbarContainer.setAttribute('jslog', `${VisualLogging.toolbar()}`);\n    timelineToolbarContainer.role = 'toolbar';\n    this.panelToolbar = timelineToolbarContainer.createChild('devtools-toolbar', 'timeline-main-toolbar');\n    this.panelToolbar.role = 'presentation';\n    this.panelToolbar.wrappable = true;\n    this.panelRightToolbar = timelineToolbarContainer.createChild('devtools-toolbar');\n    this.panelRightToolbar.role = 'presentation';\n    if (!isNode) {\n      this.createSettingsPane();\n      this.updateShowSettingsToolbarButton();\n    }\n    this.timelinePane = new UI.Widget.VBox();\n    const topPaneElement = this.timelinePane.element.createChild('div', 'hbox');\n    topPaneElement.id = 'timeline-overview-panel';\n\n    this.#minimapComponent.show(topPaneElement);\n    this.#minimapComponent.addEventListener(PerfUI.TimelineOverviewPane.Events.OVERVIEW_PANE_MOUSE_MOVE, event => {\n      this.flameChart.addTimestampMarkerOverlay(event.data.timeInMicroSeconds);\n    });\n    this.#minimapComponent.addEventListener(PerfUI.TimelineOverviewPane.Events.OVERVIEW_PANE_MOUSE_LEAVE, async () => {\n      await this.flameChart.removeTimestampMarkerOverlay();\n    });\n\n    this.statusPaneContainer = this.timelinePane.element.createChild('div', 'status-pane-container fill');\n\n    this.createFileSelector();\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.Load, this.loadEventFired, this);\n\n    this.flameChart = new TimelineFlameChartView(this);\n    this.element.addEventListener(\n        'toggle-popover', event => this.flameChart.togglePopover((event as CustomEvent).detail));\n\n    this.#onMainEntryHovered = this.#onEntryHovered.bind(this, this.flameChart.getMainDataProvider());\n    this.flameChart.getMainFlameChart().addEventListener(\n        PerfUI.FlameChart.Events.ENTRY_HOVERED, this.#onMainEntryHovered);\n\n    this.flameChart.addEventListener(TimelineFlameChartViewEvents.ENTRY_LABEL_ANNOTATION_CLICKED, event => {\n      const selection = selectionFromEvent(event.data.entry);\n      this.select(selection);\n    });\n\n    this.searchableViewInternal = new UI.SearchableView.SearchableView(this.flameChart, null);\n    this.searchableViewInternal.setMinimumSize(0, 100);\n    this.searchableViewInternal.setMinimalSearchQuerySize(2);  // At 1 it can introduce a bit of jank.\n    this.searchableViewInternal.element.classList.add('searchable-view');\n    this.searchableViewInternal.show(this.timelinePane.element);\n    this.flameChart.show(this.searchableViewInternal.element);\n    this.flameChart.setSearchableView(this.searchableViewInternal);\n    this.searchableViewInternal.hideWidget();\n\n    this.#splitWidget.setMainWidget(this.timelinePane);\n    this.#splitWidget.setSidebarWidget(this.#sideBar);\n    this.#splitWidget.enableShowModeSaving();\n    this.#splitWidget.show(this.element);\n\n    this.flameChart.overlays().addEventListener(Overlays.Overlays.TimeRangeMouseOverEvent.eventName, event => {\n      const {overlay} = event as Overlays.Overlays.TimeRangeMouseOverEvent;\n      const overlayBounds = Overlays.Overlays.traceWindowContainingOverlays([overlay]);\n      if (!overlayBounds) {\n        return;\n      }\n      this.#minimapComponent.highlightBounds(overlayBounds, /* withBracket */ false);\n    });\n\n    this.flameChart.overlays().addEventListener(Overlays.Overlays.TimeRangeMouseOutEvent.eventName, () => {\n      this.#minimapComponent.clearBoundsHighlight();\n    });\n\n    this.#sideBar.element.addEventListener(TimelineInsights.SidebarInsight.InsightDeactivated.eventName, () => {\n      this.#setActiveInsight(null);\n    });\n\n    this.#sideBar.element.addEventListener(TimelineInsights.SidebarInsight.InsightActivated.eventName, event => {\n      const {model, insightSetKey} = event;\n      this.#setActiveInsight({model, insightSetKey});\n\n      // Open the summary panel for the 3p insight.\n      if (model.insightKey === Trace.Insights.Types.InsightKeys.THIRD_PARTIES) {\n        void window.scheduler.postTask(() => {\n          this.#openSummaryTab();\n        }, {priority: 'background'});\n      }\n    });\n\n    this.#sideBar.element.addEventListener(TimelineInsights.SidebarInsight.InsightProvideOverlays.eventName, event => {\n      const {overlays, options} = event;\n\n      void window.scheduler.postTask(() => {\n        this.flameChart.setOverlays(overlays, options);\n\n        const overlaysBounds = Overlays.Overlays.traceWindowContainingOverlays(overlays);\n        if (overlaysBounds) {\n          this.#minimapComponent.highlightBounds(overlaysBounds, /* withBracket */ true);\n        } else {\n          this.#minimapComponent.clearBoundsHighlight();\n        }\n      }, {priority: 'user-visible'});\n    });\n\n    this.#sideBar.contentElement.addEventListener(TimelineInsights.EventRef.EventReferenceClick.eventName, event => {\n      this.select(selectionFromEvent(event.event));\n    });\n\n    this.#sideBar.element.addEventListener(TimelineComponents.Sidebar.RemoveAnnotation.eventName, event => {\n      const {removedAnnotation} = (event as TimelineComponents.Sidebar.RemoveAnnotation);\n      ModificationsManager.activeManager()?.removeAnnotation(removedAnnotation);\n    });\n\n    this.#sideBar.element.addEventListener(TimelineComponents.Sidebar.RevealAnnotation.eventName, event => {\n      this.flameChart.revealAnnotation(event.annotation);\n    });\n\n    this.#sideBar.element.addEventListener(TimelineInsights.SidebarInsight.InsightSetHovered.eventName, event => {\n      if (event.bounds) {\n        this.#minimapComponent.highlightBounds(event.bounds, /* withBracket */ true);\n      } else {\n        this.#minimapComponent.clearBoundsHighlight();\n      }\n    });\n\n    this.#sideBar.element.addEventListener(TimelineInsights.SidebarInsight.InsightSetZoom.eventName, event => {\n      TraceBounds.TraceBounds.BoundsManager.instance().setTimelineVisibleWindow(\n          event.bounds, {ignoreMiniMapBounds: true, shouldAnimate: true});\n    });\n\n    this.onMemoryModeChanged();\n    this.populateToolbar();\n    // The viewMode is set by default to the landing page, so we don't call\n    // `#changeView` here and can instead directly call showLandingPage();\n    this.#showLandingPage();\n    this.updateTimelineControls();\n\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.SUSPEND_STATE_CHANGED, this.onSuspendStateChanged, this);\n    const profilerModels = SDK.TargetManager.TargetManager.instance().models(SDK.CPUProfilerModel.CPUProfilerModel);\n    for (const model of profilerModels) {\n      for (const message of model.registeredConsoleProfileMessages) {\n        this.consoleProfileFinished(message);\n      }\n    }\n    SDK.TargetManager.TargetManager.instance().observeModels(\n        SDK.CPUProfilerModel.CPUProfilerModel,\n        {\n          modelAdded: (model: SDK.CPUProfilerModel.CPUProfilerModel) => {\n            model.addEventListener(\n                SDK.CPUProfilerModel.Events.CONSOLE_PROFILE_FINISHED, event => this.consoleProfileFinished(event.data));\n          },\n          modelRemoved: (_model: SDK.CPUProfilerModel.CPUProfilerModel) => {\n\n          },\n        },\n    );\n  }\n\n  /**\n   * Activates an insight and ensures the sidebar is open too.\n   * Pass `highlightInsight: true` to flash the insight with the background highlight colour.\n   */\n  #setActiveInsight(insight: TimelineComponents.Sidebar.ActiveInsight|null, opts: {\n    highlightInsight: boolean,\n  } = {highlightInsight: false}): void {\n    if (insight) {\n      this.#splitWidget.showBoth();\n    }\n    this.#sideBar.setActiveInsight(insight, {highlight: opts.highlightInsight});\n    this.flameChart.setActiveInsight(insight);\n\n    if (insight) {\n      const selectedInsight = new SelectedInsight(insight);\n      UI.Context.Context.instance().setFlavor(SelectedInsight, selectedInsight);\n    } else {\n      UI.Context.Context.instance().setFlavor(SelectedInsight, null);\n    }\n  }\n\n  /**\n   * This disables the 3P checkbox in the toolbar.\n   * If the checkbox was checked, we flip it to indeterminiate to communicate it doesn't currently apply. */\n  set3PCheckboxDisabled(disabled: boolean): void {\n    this.#thirdPartyCheckbox?.applyEnabledState(!disabled);\n    if (this.#dimThirdPartiesSetting?.get()) {\n      this.#thirdPartyCheckbox?.setIndeterminate(disabled);\n    }\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    isNode: boolean,\n    traceModel?: Trace.TraceModel.Model,\n  }|undefined = {forceNew: null, isNode: false}): TimelinePanel {\n    const {forceNew, isNode: isNodeMode} = opts;\n    isNode = isNodeMode;\n\n    if (!timelinePanelInstance || forceNew) {\n      timelinePanelInstance = new TimelinePanel(opts.traceModel);\n    }\n\n    return timelinePanelInstance;\n  }\n  static removeInstance(): void {\n    // TODO(crbug.com/358583420): Simplify attached data management\n    // so that we don't have to maintain all of these singletons.\n    Utils.SourceMapsResolver.SourceMapsResolver.clearResolvedNodeNames();\n    Trace.Helpers.SyntheticEvents.SyntheticEventsManager.reset();\n    TraceBounds.TraceBounds.BoundsManager.removeInstance();\n    ModificationsManager.reset();\n    ActiveFilters.removeInstance();\n    timelinePanelInstance = undefined;\n  }\n\n  #instantiateNewModel(): Trace.TraceModel.Model {\n    const config = Trace.Types.Configuration.defaults();\n    config.showAllEvents = Root.Runtime.experiments.isEnabled('timeline-show-all-events');\n    config.includeRuntimeCallStats = Root.Runtime.experiments.isEnabled('timeline-v8-runtime-call-stats');\n    config.debugMode = Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_DEBUG_MODE);\n\n    return Trace.TraceModel.Model.createWithAllHandlers(config);\n  }\n\n  static extensionDataVisibilitySetting(): Common.Settings.Setting<boolean> {\n    // Calling this multiple times doesn't recreate the setting.\n    // Instead, after the second call, the cached setting is returned.\n    return Common.Settings.Settings.instance().createSetting('timeline-show-extension-data', true);\n  }\n  override searchableView(): UI.SearchableView.SearchableView|null {\n    return this.searchableViewInternal;\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    UI.Context.Context.instance().setFlavor(TimelinePanel, this);\n    // Record the performance tool load time.\n    Host.userMetrics.panelLoaded('timeline', 'DevTools.Launch.Timeline');\n\n    const cruxManager = CrUXManager.CrUXManager.instance();\n    cruxManager.addEventListener(CrUXManager.Events.FIELD_DATA_CHANGED, this.#onFieldDataChanged, this);\n    this.#onFieldDataChanged();\n  }\n\n  override willHide(): void {\n    UI.Context.Context.instance().setFlavor(TimelinePanel, null);\n    this.#historyManager.cancelIfShowing();\n\n    const cruxManager = CrUXManager.CrUXManager.instance();\n    cruxManager.removeEventListener(CrUXManager.Events.FIELD_DATA_CHANGED, this.#onFieldDataChanged, this);\n  }\n\n  #onFieldDataChanged(): void {\n    const recs = Utils.Helpers.getThrottlingRecommendations();\n    this.cpuThrottlingSelect?.updateRecommendedOption(recs.cpuOption);\n    this.networkThrottlingSelect?.updateRecommendedConditions(recs.networkConditions);\n  }\n\n  loadFromEvents(events: Trace.Types.Events.Event[]): void {\n    if (this.state !== State.IDLE) {\n      return;\n    }\n    this.prepareToLoadTimeline();\n    this.loader = TimelineLoader.loadFromEvents(events, this);\n  }\n\n  loadFromTraceFile(traceFile: Trace.Types.File.TraceFile): void {\n    if (this.state !== State.IDLE) {\n      return;\n    }\n    this.prepareToLoadTimeline();\n    this.loader = TimelineLoader.loadFromTraceFile(traceFile, this);\n  }\n\n  getFlameChart(): TimelineFlameChartView {\n    return this.flameChart;\n  }\n\n  /**\n   * Determine if two view modes are equivalent. Useful because if {@see\n   * #changeView} gets called and the new mode is identical to the current,\n   * we can bail without doing any UI updates.\n   */\n  #viewModesEquivalent(m1: ViewMode, m2: ViewMode): boolean {\n    if (m1.mode === 'LANDING_PAGE' && m2.mode === 'LANDING_PAGE') {\n      return true;\n    }\n\n    if (m1.mode === 'STATUS_PANE_OVERLAY' && m2.mode === 'STATUS_PANE_OVERLAY') {\n      return true;\n    }\n\n    // VIEWING_TRACE views are only equivalent if their traceIndex is the same.\n    if (m1.mode === 'VIEWING_TRACE' && m2.mode === 'VIEWING_TRACE' && m1.traceIndex === m2.traceIndex) {\n      return true;\n    }\n    return false;\n  }\n\n  #uninstallSourceMapsResolver(): void {\n    if (this.#sourceMapsResolver) {\n      // this set of NodeNames is cached by PIDs, so we clear it so we don't\n      // use incorrect names from another trace that might happen to share\n      // PID/TIDs.\n      Utils.SourceMapsResolver.SourceMapsResolver.clearResolvedNodeNames();\n\n      this.#sourceMapsResolver.removeEventListener(\n          Utils.SourceMapsResolver.SourceMappingsUpdated.eventName, this.#onSourceMapsNodeNamesResolvedBound);\n      this.#sourceMapsResolver.uninstall();\n      this.#sourceMapsResolver = null;\n    }\n  }\n\n  #removeStatusPane(): void {\n    if (this.statusDialog) {\n      this.statusDialog.remove();\n    }\n    this.statusDialog = null;\n  }\n\n  hasActiveTrace(): boolean {\n    return this.#viewMode.mode === 'VIEWING_TRACE';\n  }\n\n  #changeView(newMode: ViewMode): void {\n    if (this.#viewModesEquivalent(this.#viewMode, newMode)) {\n      return;\n    }\n\n    if (this.#viewMode.mode === 'VIEWING_TRACE') {\n      // If the current / about to be \"old\" view was viewing a trace\n      // we also uninstall any source maps resolver for the trace that was active.\n      // If the user swaps back to this trace via the history dropdown, this will be reinstated.\n      this.#uninstallSourceMapsResolver();\n\n      // Store any modifications (e.g. annotations) that the user has created\n      // on the current trace before we move away to a new view.\n      this.#saveModificationsForActiveTrace();\n    }\n\n    this.#viewMode = newMode;\n    this.updateTimelineControls();\n\n    /**\n     * Note that the TimelinePanel UI is really rendered in two distinct layers.\n     * 1. status-pane-container: this is what renders both the StatusPane\n     *    loading modal AND the landing page.\n     *    What is important to note is that this renders ON TOP of the\n     *    SearchableView widget, which is what holds the FlameChartView.\n     *\n     * 2. SearchableView: this is the container that renders\n     *    TimelineFlameChartView and the rest of the flame chart code.\n     *\n     * What this layering means is that when we swap to the LANDING_PAGE or\n     * STATUS_PANE_OVERLAY view, we don't actually need to reset the\n     * SearchableView that is rendered behind it, because it won't be visible\n     * and will be hidden behind the StatusPane/Landing Page.\n     *\n     * So the only time we update this SearchableView is when the user goes to\n     * view a trace. That is why in the switch() statement below you won't see\n     * any code that resets the SearchableView because we don't need to. We do\n     * mark it as hidden, but mainly so the user can't accidentally use Cmd-F\n     * to search a hidden view.\n     */\n    switch (newMode.mode) {\n      case 'LANDING_PAGE': {\n        this.#removeStatusPane();\n        this.#showLandingPage();\n        this.dispatchEventToListeners(Events.IS_VIEWING_TRACE, false);\n\n        // Whilst we don't reset this, we hide it, mainly so the user cannot\n        // hit Ctrl/Cmd-F and try to search when it isn't visible.\n        this.searchableViewInternal.hideWidget();\n        return;\n      }\n\n      case 'VIEWING_TRACE': {\n        this.#hideLandingPage();\n        this.#setModelForActiveTrace();\n        this.#removeStatusPane();\n        if (newMode.forceOpenSidebar) {\n          this.#showSidebar();\n        }\n        this.flameChart.dimThirdPartiesIfRequired();\n        this.dispatchEventToListeners(Events.IS_VIEWING_TRACE, true);\n        return;\n      }\n\n      case 'STATUS_PANE_OVERLAY': {\n        // We don't manage the StatusPane UI here; it is done in the\n        // recordingStarted/recordingProgress callbacks, but we do make sure we\n        // hide the landing page.\n        this.#hideLandingPage();\n        this.dispatchEventToListeners(Events.IS_VIEWING_TRACE, false);\n\n        // We also hide the sidebar - else if the user is viewing a trace and\n        // then load/record another, the sidebar remains visible.\n        this.#hideSidebar();\n        return;\n      }\n      default:\n        Platform.assertNever(newMode, 'Unsupported TimelinePanel viewMode');\n    }\n  }\n\n  #activeTraceIndex(): number|null {\n    if (this.#viewMode.mode === 'VIEWING_TRACE') {\n      return this.#viewMode.traceIndex;\n    }\n    return null;\n  }\n\n  /**\n   * Exposed for handling external requests.\n   */\n  get model(): Trace.TraceModel.Model {\n    return this.#traceEngineModel;\n  }\n\n  /**\n   * NOTE: this method only exists to enable some layout tests to be migrated to the new engine.\n   * DO NOT use this method within DevTools. It is marked as deprecated so\n   * within DevTools you are warned when using the method.\n   * @deprecated\n   **/\n  getParsedTraceForLayoutTests(): Trace.Handlers.Types.ParsedTrace {\n    const traceIndex = this.#activeTraceIndex();\n    if (traceIndex === null) {\n      throw new Error('No trace index active.');\n    }\n    const data = this.#traceEngineModel.parsedTrace(traceIndex);\n    if (data === null) {\n      throw new Error('No trace engine data found.');\n    }\n    return data;\n  }\n\n  /**\n   * NOTE: this method only exists to enable some layout tests to be migrated to the new engine.\n   * DO NOT use this method within DevTools. It is marked as deprecated so\n   * within DevTools you are warned when using the method.\n   * @deprecated\n   **/\n  getTraceEngineRawTraceEventsForLayoutTests(): readonly Trace.Types.Events.Event[] {\n    const traceIndex = this.#activeTraceIndex();\n    if (traceIndex === null) {\n      throw new Error('No trace index active.');\n    }\n    const data = this.#traceEngineModel.rawTraceEvents(traceIndex);\n    if (data === null) {\n      throw new Error('No trace engine data found.');\n    }\n    return data;\n  }\n\n  #onEntryHovered(dataProvider: TimelineFlameChartDataProvider, event: Common.EventTarget.EventTargetEvent<number>):\n      void {\n    const entryIndex = event.data;\n    if (entryIndex === -1) {\n      this.#minimapComponent.clearBoundsHighlight();\n      return;\n    }\n    const traceEvent = dataProvider.eventByIndex(entryIndex);\n    if (!traceEvent) {\n      return;\n    }\n    const bounds = Trace.Helpers.Timing.traceWindowFromEvent(traceEvent);\n    this.#minimapComponent.highlightBounds(bounds, /* withBracket */ false);\n  }\n\n  private loadFromCpuProfile(profile: Protocol.Profiler.Profile|null): void {\n    if (this.state !== State.IDLE || profile === null) {\n      return;\n    }\n    this.prepareToLoadTimeline();\n    this.loader = TimelineLoader.loadFromCpuProfile(profile, this);\n  }\n\n  private setState(state: State): void {\n    this.state = state;\n    this.updateTimelineControls();\n  }\n\n  private createSettingCheckbox(setting: Common.Settings.Setting<boolean>, tooltip: Platform.UIString.LocalizedString):\n      UI.Toolbar.ToolbarSettingCheckbox {\n    const checkboxItem = new UI.Toolbar.ToolbarSettingCheckbox(setting, tooltip);\n    this.recordingOptionUIControls.push(checkboxItem);\n    return checkboxItem;\n  }\n\n  #addSidebarIconToToolbar(): void {\n    if (this.panelToolbar.hasItem(this.#sidebarToggleButton)) {\n      return;\n    }\n\n    this.panelToolbar.prependToolbarItem(this.#sidebarToggleButton);\n  }\n\n  /**\n   * Used when the user deletes their last trace and is taken back to the\n   * landing page - we don't add this icon until there is a trace loaded.\n   */\n  #removeSidebarIconFromToolbar(): void {\n    this.panelToolbar.removeToolbarItem(this.#sidebarToggleButton);\n  }\n\n  #populateDownloadMenu(contextMenu: UI.ContextMenu.ContextMenu): void {\n    // If the current trace is annotated, add an option to save it without annotations.\n    const currModificationManager = ModificationsManager.activeManager();\n    const annotationsExist = currModificationManager && currModificationManager.getAnnotations()?.length > 0;\n\n    contextMenu.viewSection().appendItem(i18nString(UIStrings.saveTraceWithAnnotationsMenuOption), () => {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.PerfPanelTraceExported);\n      void this.saveToFile({savingEnhancedTrace: false, addModifications: true});\n    }, {\n      jslogContext: annotationsExist ? 'timeline.save-to-file-with-annotations' :\n                                       'timeline.save-to-file-without-annotations',\n    });\n\n    if (annotationsExist) {\n      contextMenu.viewSection().appendItem(i18nString(UIStrings.saveTraceWithoutAnnotationsMenuOption), () => {\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.PerfPanelTraceExported);\n        void this.saveToFile({\n          savingEnhancedTrace: false,\n          addModifications: false,\n        });\n      }, {\n        jslogContext: 'timeline.save-to-file-without-annotations',\n      });\n    }\n  }\n\n  private populateToolbar(): void {\n    // Record\n    this.panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction));\n    this.panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.recordReloadAction));\n    this.clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clear), 'clear', undefined, 'timeline.clear');\n    this.clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, () => this.onClearButton());\n    this.panelToolbar.appendToolbarItem(this.clearButton);\n\n    // Load / SaveCLICK\n    this.loadButton =\n        new UI.Toolbar.ToolbarButton(i18nString(UIStrings.loadProfile), 'import', undefined, 'timeline.load-from-file');\n    this.loadButton.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, () => {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.PerfPanelTraceImported);\n      this.selectFileToLoad();\n    });\n\n    this.saveButton = new UI.Toolbar.ToolbarMenuButton(\n        this.#populateDownloadMenu.bind(this), true, false, 'timeline.save-to-file-more-options', 'download');\n    this.saveButton.setTitle(i18nString(UIStrings.saveProfile));\n\n    if (Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_ENHANCED_TRACES)) {\n      this.saveButton.element.addEventListener('contextmenu', event => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.ctrlKey || event.button === 2) {\n          const contextMenu = new UI.ContextMenu.ContextMenu(event);\n          contextMenu.saveSection().appendItem(i18nString(UIStrings.exportNormalTraces), () => {\n            void this.saveToFile({savingEnhancedTrace: false, addModifications: false});\n          });\n          contextMenu.saveSection().appendItem(i18nString(UIStrings.exportEnhancedTraces), () => {\n            void this.saveToFile({savingEnhancedTrace: true, addModifications: false});\n          });\n\n          void contextMenu.show();\n        } else {\n          void this.saveToFile({savingEnhancedTrace: false, addModifications: false});\n        }\n      });\n    }\n\n    this.panelToolbar.appendSeparator();\n    this.panelToolbar.appendToolbarItem(this.loadButton);\n    this.panelToolbar.appendToolbarItem(this.saveButton);\n\n    // History\n    this.panelToolbar.appendSeparator();\n\n    if (!isNode) {\n      this.homeButton = new UI.Toolbar.ToolbarButton(\n          i18nString(UIStrings.backToLiveMetrics), 'home', undefined, 'timeline.back-to-live-metrics');\n      this.homeButton.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, () => {\n        this.#changeView({mode: 'LANDING_PAGE'});\n        this.#historyManager.navigateToLandingPage();\n      });\n      this.panelToolbar.appendToolbarItem(this.homeButton);\n      this.panelToolbar.appendSeparator();\n    }\n\n    this.panelToolbar.appendToolbarItem(this.#historyManager.button());\n    this.panelToolbar.appendSeparator();\n\n    // View\n    this.panelToolbar.appendSeparator();\n    if (!isNode) {\n      this.showScreenshotsToolbarCheckbox =\n          this.createSettingCheckbox(this.showScreenshotsSetting, i18nString(UIStrings.captureScreenshots));\n      this.panelToolbar.appendToolbarItem(this.showScreenshotsToolbarCheckbox);\n    }\n\n    this.showMemoryToolbarCheckbox =\n        this.createSettingCheckbox(this.showMemorySetting, i18nString(UIStrings.showMemoryTimeline));\n    this.panelToolbar.appendToolbarItem(this.showMemoryToolbarCheckbox);\n\n    // GC\n    this.panelToolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton('components.collect-garbage'));\n\n    // Ignore list setting\n    this.panelToolbar.appendSeparator();\n    const showIgnoreListSetting = new TimelineComponents.IgnoreListSetting.IgnoreListSetting();\n    this.panelToolbar.appendToolbarItem(new UI.Toolbar.ToolbarItem(showIgnoreListSetting));\n\n    if (this.#dimThirdPartiesSetting) {\n      const dimThirdPartiesCheckbox =\n          this.createSettingCheckbox(this.#dimThirdPartiesSetting, i18nString(UIStrings.thirdPartiesByThirdPartyWeb));\n      this.#thirdPartyCheckbox = dimThirdPartiesCheckbox;\n      this.panelToolbar.appendToolbarItem(dimThirdPartiesCheckbox);\n    }\n\n    // Isolate selector\n    if (isNode) {\n      const isolateSelector = new IsolateSelector();\n      this.panelToolbar.appendSeparator();\n      this.panelToolbar.appendToolbarItem(isolateSelector);\n    }\n\n    // Settings\n    if (!isNode) {\n      this.panelRightToolbar.appendSeparator();\n      this.panelRightToolbar.appendToolbarItem(this.showSettingsPaneButton);\n    }\n  }\n\n  #setupNavigationSetting(): HTMLElement {\n    const currentNavSetting = Common.Settings.moduleSetting('flamechart-selected-navigation').get();\n    const hideTheDialogForTests: string|null = localStorage.getItem('hide-shortcuts-dialog-for-test');\n    const userHadShortcutsDialogOpenedOnce = this.#userHadShortcutsDialogOpenedOnce.get();\n\n    this.#shortcutsDialog.prependElement(this.#navigationRadioButtons);\n    // Add the shortcuts dialog button to the toolbar.\n    const dialogToolbarItem = new UI.Toolbar.ToolbarItem(this.#shortcutsDialog);\n    dialogToolbarItem.element.setAttribute(\n        'jslog', `${VisualLogging.action().track({click: true}).context('timeline.shortcuts-dialog-toggle')}`);\n\n    this.panelRightToolbar.appendToolbarItem(dialogToolbarItem);\n    this.#updateNavigationSettingSelection();\n    // The setting could have been changed from the Devtools Settings. Therefore, we\n    // need to update the radio buttons selection when the dialog is open.\n    this.#shortcutsDialog.addEventListener('click', this.#updateNavigationSettingSelection.bind(this));\n    this.#shortcutsDialog.data = {\n      customTitle: i18nString(UIStrings.shortcutsDialogTitle),\n      shortcuts: this.#getShortcutsInfo(currentNavSetting === 'classic'),\n      open: !userHadShortcutsDialogOpenedOnce && hideTheDialogForTests !== 'true' &&\n          !Host.InspectorFrontendHost.isUnderTest(),\n    };\n\n    this.#navigationRadioButtons.classList.add('nav-radio-buttons');\n    UI.ARIAUtils.markAsRadioGroup(this.#navigationRadioButtons);\n    // Change EventListener is only triggered when the radio button is selected\n    this.#modernNavRadioButton.radio.addEventListener('change', () => {\n      this.#shortcutsDialog.data = {shortcuts: this.#getShortcutsInfo(/* isNavClassic */ false)};\n      Common.Settings.moduleSetting('flamechart-selected-navigation').set('modern');\n    });\n    this.#classicNavRadioButton.radio.addEventListener('change', () => {\n      this.#shortcutsDialog.data = {shortcuts: this.#getShortcutsInfo(/* isNavClassic */ true)};\n      Common.Settings.moduleSetting('flamechart-selected-navigation').set('classic');\n    });\n\n    this.#navigationRadioButtons.appendChild(this.#modernNavRadioButton.label);\n    this.#navigationRadioButtons.appendChild(this.#classicNavRadioButton.label);\n\n    this.#userHadShortcutsDialogOpenedOnce.set(true);\n    return this.#navigationRadioButtons;\n  }\n\n  #updateNavigationSettingSelection(): void {\n    const currentNavSetting = Common.Settings.moduleSetting('flamechart-selected-navigation').get();\n    if (currentNavSetting === 'classic') {\n      this.#classicNavRadioButton.radio.checked = true;\n      Host.userMetrics.navigationSettingAtFirstTimelineLoad(\n          Host.UserMetrics.TimelineNavigationSetting.SWITCHED_TO_CLASSIC);\n    } else if (currentNavSetting === 'modern') {\n      this.#modernNavRadioButton.radio.checked = true;\n      Host.userMetrics.navigationSettingAtFirstTimelineLoad(\n          Host.UserMetrics.TimelineNavigationSetting.SWITCHED_TO_MODERN);\n    }\n  }\n\n  #getShortcutsInfo(isNavClassic: boolean): Dialogs.ShortcutDialog.Shortcut[] {\n    const metaKey = Host.Platform.isMac() ? '⌘' : 'Ctrl';\n    if (isNavClassic) {\n      // Classic navigation = scroll to zoom.\n      return [\n        {\n          title: i18nString(UIStrings.timelineZoom),\n          rows: [\n            [{key: 'Scroll ↕'}], [{key: 'W'}, {key: 'S'}, {joinText: 'or'}, {key: '+'}, {key: '-'}],\n            {footnote: 'hold shift for fast zoom'}\n          ]\n        },\n        {\n          title: i18nString(UIStrings.timelineScrollPan),\n          rows: [\n            [{key: 'Shift'}, {joinText: '+'}, {key: 'Scroll ↕'}],\n            [{key: 'Scroll ↔'}, {joinText: 'or'}, {key: 'A'}, {key: 'D'}],\n            [\n              {key: 'Drag'}, {joinText: 'or'}, {key: 'Shift'}, {joinText: '+'}, {key: '↑'}, {key: '↓'}, {key: '←'},\n              {key: '→'}\n            ],\n          ]\n        }\n      ];\n    }\n\n    // New navigation where scroll = scroll.\n    return [\n      {\n        title: i18nString(UIStrings.timelineZoom),\n        rows: [\n          [{key: metaKey}, {joinText: '+'}, {key: 'Scroll ↕'}],\n          [{key: 'W'}, {key: 'S'}, {joinText: 'or'}, {key: '+'}, {key: '-'}], {footnote: ''}\n        ]\n      },\n      {\n        title: i18nString(UIStrings.timelineScrollPan),\n        rows: [\n          [{key: 'Scroll ↕'}],\n          [\n            {key: 'Shift'}, {joinText: '+'}, {key: 'Scroll ↕'}, {joinText: 'or'}, {key: 'Scroll ↔'}, {joinText: 'or'},\n            {key: 'A'}, {key: 'D'}\n          ],\n          [\n            {key: 'Drag'}, {joinText: 'or'}, {key: 'Shift'}, {joinText: '+'}, {key: '↑'}, {key: '↓'}, {key: '←'},\n            {key: '→'}\n          ],\n        ]\n      }\n    ];\n  }\n\n  private createSettingsPane(): void {\n    this.showSettingsPaneSetting =\n        Common.Settings.Settings.instance().createSetting('timeline-show-settings-toolbar', false);\n    this.showSettingsPaneButton = new UI.Toolbar.ToolbarSettingToggle(\n        this.showSettingsPaneSetting, 'gear', i18nString(UIStrings.captureSettings), 'gear-filled',\n        'timeline-settings-toggle');\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.CONDITIONS_CHANGED, this.updateShowSettingsToolbarButton,\n        this);\n    SDK.CPUThrottlingManager.CPUThrottlingManager.instance().addEventListener(\n        SDK.CPUThrottlingManager.Events.RATE_CHANGED, this.updateShowSettingsToolbarButton, this);\n    this.captureLayersAndPicturesSetting.addChangeListener(this.updateShowSettingsToolbarButton, this);\n    this.captureSelectorStatsSetting.addChangeListener(this.updateShowSettingsToolbarButton, this);\n\n    this.settingsPane = this.element.createChild('div', 'timeline-settings-pane');\n    this.settingsPane.setAttribute('jslog', `${VisualLogging.pane('timeline-settings-pane').track({resize: true})}`);\n\n    const cpuThrottlingPane = this.settingsPane.createChild('div');\n    cpuThrottlingPane.append(i18nString(UIStrings.cpu));\n    this.cpuThrottlingSelect = MobileThrottling.ThrottlingManager.throttlingManager().createCPUThrottlingSelector();\n    cpuThrottlingPane.append(this.cpuThrottlingSelect.control.element);\n\n    this.settingsPane.append(UI.SettingsUI.createSettingCheckbox(\n        this.captureLayersAndPicturesSetting.title(), this.captureLayersAndPicturesSetting,\n        i18nString(UIStrings.capturesAdvancedPaint)));\n\n    const networkThrottlingPane = this.settingsPane.createChild('div');\n    networkThrottlingPane.append(i18nString(UIStrings.network));\n    networkThrottlingPane.append(this.createNetworkConditionsSelectToolbarItem().element);\n\n    this.settingsPane.append(UI.SettingsUI.createSettingCheckbox(\n        this.captureSelectorStatsSetting.title(), this.captureSelectorStatsSetting,\n        i18nString(UIStrings.capturesSelectorStats)));\n\n    const thirdPartyCheckbox =\n        this.createSettingCheckbox(this.#thirdPartyTracksSetting, i18nString(UIStrings.showDataAddedByExtensions));\n\n    const localLink = UI.XLink.XLink.create(\n        'https://developer.chrome.com/docs/devtools/performance/extension', i18nString(UIStrings.learnMore));\n    // Has to be done in JS because the element is inserted into the\n    // checkbox's shadow DOM so any styling into timelinePanel.css would\n    // not apply.\n    localLink.style.marginLeft = '5px';\n    thirdPartyCheckbox.element.shadowRoot?.appendChild(localLink);\n    this.settingsPane.append(thirdPartyCheckbox.element);\n\n    this.showSettingsPaneSetting.addChangeListener(this.updateSettingsPaneVisibility.bind(this));\n    this.updateSettingsPaneVisibility();\n  }\n\n  private createNetworkConditionsSelectToolbarItem(): UI.Toolbar.ToolbarComboBox {\n    const toolbarItem = new UI.Toolbar.ToolbarComboBox(null, i18nString(UIStrings.networkConditions));\n    this.networkThrottlingSelect =\n        MobileThrottling.ThrottlingManager.throttlingManager().createNetworkThrottlingSelector(toolbarItem.element);\n    return toolbarItem;\n  }\n\n  private prepareToLoadTimeline(): void {\n    console.assert(this.state === State.IDLE);\n    this.setState(State.LOADING);\n  }\n\n  private createFileSelector(): void {\n    if (this.fileSelectorElement) {\n      this.fileSelectorElement.remove();\n    }\n    // .gz is far more popular than .gzip, but both are valid.\n    this.fileSelectorElement =\n        UI.UIUtils.createFileSelectorElement(this.loadFromFile.bind(this), '.json,.gz,.gzip,.cpuprofile');\n    this.timelinePane.element.appendChild(this.fileSelectorElement);\n  }\n\n  private contextMenu(event: Event): void {\n    // If we are recording (or transitioning to/from recording, don't let the user use the context menu)\n    if (this.state === State.START_PENDING || this.state === State.RECORDING || this.state === State.STOP_PENDING) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    // Do not show this Context menu on FlameChart entries because we have a different context menu for FlameChart entries\n    const mouseEvent = (event as MouseEvent);\n    if (this.flameChart.getMainFlameChart().coordinatesToEntryIndex(mouseEvent.offsetX, mouseEvent.offsetY) !== -1) {\n      return;\n    }\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.appendItemsAtLocation('timelineMenu');\n    void contextMenu.show();\n  }\n\n  /**\n   * Saves a trace file to disk.\n   * Pass `config.savingEnhancedTrace === true` to include source maps in the resulting metadata.\n   * Pass `config.addModifications === true` to include user modifications to the trace file, which includes:\n   *      1. Annotations\n   *      2. Filtering / collapsing of the flame chart.\n   *      3. Visual track configuration (re-ordering or hiding tracks).\n   */\n  async saveToFile(config: {\n    savingEnhancedTrace: boolean,\n    addModifications: boolean,\n  }): Promise<void> {\n    if (this.state !== State.IDLE) {\n      return;\n    }\n    if (this.#viewMode.mode !== 'VIEWING_TRACE') {\n      return;\n    }\n    const trace = this.#traceEngineModel.parsedTrace(this.#viewMode.traceIndex);\n    if (!trace) {\n      return;\n    }\n    let traceEvents = this.#traceEngineModel.rawTraceEvents(this.#viewMode.traceIndex);\n    if (!traceEvents) {\n      return;\n    }\n\n    const metadata = this.#traceEngineModel.metadata(this.#viewMode.traceIndex) ?? {};\n\n    const shouldRetainScriptSources = config.savingEnhancedTrace &&\n        Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_COMPILED_SOURCES);\n    if (!shouldRetainScriptSources) {\n      traceEvents = traceEvents.map(event => {\n        if (Trace.Types.Events.isAnyScriptCatchupEvent(event) && event.name !== 'StubScriptCatchup') {\n          return {\n            cat: event.cat,\n            name: 'StubScriptCatchup',\n            ts: event.ts,\n            ph: event.ph,\n            pid: event.pid,\n            tid: event.tid,\n            args: {\n              data: {isolate: event.args.data.isolate, scriptId: event.args.data.scriptId},\n            },\n          } as Trace.Types.Events.V8SourceRundownSourcesStubScriptCatchupEvent;\n        }\n\n        return event;\n      });\n    }\n\n    metadata.modifications = config.addModifications ? ModificationsManager.activeManager()?.toJSON() : undefined;\n    if (config.addModifications) {\n      // Get any visual track config\n      const visualConfig = this.flameChart.getPersistedConfigMetadata(trace);\n      // If both these values are null then the user has not made any visual\n      // changes, so we don't need to store it into the saved file.\n      if (visualConfig.main !== null || visualConfig.network !== null) {\n        metadata.visualTrackConfig = visualConfig;\n      }\n    }\n    metadata.enhancedTraceVersion =\n        config.savingEnhancedTrace ? SDK.EnhancedTracesParser.EnhancedTracesParser.enhancedTraceVersion : undefined;\n\n    const traceStart = Platform.DateUtilities.toISO8601Compact(new Date());\n    let fileName: Platform.DevToolsPath.RawPathString;\n    if (metadata?.dataOrigin === Trace.Types.File.DataOrigin.CPU_PROFILE) {\n      fileName = `CPU-${traceStart}.cpuprofile` as Platform.DevToolsPath.RawPathString;\n    } else if (metadata?.enhancedTraceVersion) {\n      fileName = `EnhancedTraces-${traceStart}.json` as Platform.DevToolsPath.RawPathString;\n    } else {\n      fileName = `Trace-${traceStart}.json` as Platform.DevToolsPath.RawPathString;\n    }\n\n    try {\n      // TODO(crbug.com/1456818): Extract this logic and add more tests.\n      let traceAsString;\n      if (metadata?.dataOrigin === Trace.Types.File.DataOrigin.CPU_PROFILE) {\n        const profileEvent = traceEvents.find(e => Trace.Types.Events.isSyntheticCpuProfile(e));\n\n        const profile = profileEvent?.args.data.cpuProfile;\n        if (profile) {\n          // TODO(crbug.com/1456799): Currently use a hack way because we can't differentiate\n          // cpuprofile from trace events when loading a file.\n          // The loader will directly add the fake trace created from CpuProfile to the tracingModel.\n          // And there is where the old saving logic saves the cpuprofile.\n          // This will be solved when the CPUProfileHandler is done. Then we can directly get it\n          // from the new traceEngine\n          traceAsString = cpuprofileJsonGenerator(profile);\n        }\n      } else {\n        const formattedTraceIter = traceJsonGenerator(traceEvents, {\n          ...metadata,\n          sourceMaps: config.savingEnhancedTrace ? metadata?.sourceMaps : undefined,\n        });\n        traceAsString = Array.from(formattedTraceIter).join('');\n      }\n      if (!traceAsString) {\n        throw new Error('Trace content empty');\n      }\n      await Workspace.FileManager.FileManager.instance().save(\n          fileName, new TextUtils.ContentData.ContentData(traceAsString, /* isBase64=*/ false, 'application/json'),\n          /* forceSaveAs=*/ true);\n      Workspace.FileManager.FileManager.instance().close(fileName);\n    } catch (e) {\n      // We expect the error to be an Error class, but this deals with any weird case where it's not.\n      const error = e instanceof Error ? e : new Error(e);\n\n      console.error(error.stack);\n      if (error.name === 'AbortError') {\n        // The user cancelled the action, so this is not an error we need to report.\n        return;\n      }\n\n      this.#showExportTraceErrorDialog(error);\n    }\n  }\n\n  #showExportTraceErrorDialog(error: Error): void {\n    if (this.statusDialog) {\n      this.statusDialog.remove();\n    }\n\n    this.statusDialog = new StatusDialog(\n        {\n          description: error.message ?? error.toString(),\n          buttonText: i18nString(UIStrings.close),\n          hideStopButton: false,\n          showProgress: false,\n          showTimer: false,\n        },\n        async () => {\n          this.statusDialog?.remove();\n          this.statusDialog = null;\n        });\n    this.statusDialog.showPane(this.statusPaneContainer);\n    this.statusDialog.updateStatus(i18nString(UIStrings.exportingFailed));\n  }\n\n  async showHistoryDropdown(): Promise<void> {\n    const recordingData = await this.#historyManager.showHistoryDropDown();\n    if (recordingData) {\n      if (recordingData.type === 'LANDING_PAGE') {\n        this.#changeView({mode: 'LANDING_PAGE'});\n      } else {\n        this.#changeView({\n          mode: 'VIEWING_TRACE',\n          traceIndex: recordingData.parsedTraceIndex,\n          forceOpenSidebar: false,\n        });\n      }\n    }\n  }\n\n  navigateHistory(direction: number): boolean {\n    const recordingData = this.#historyManager.navigate(direction);\n    // When navigating programmatically, you cannot navigate to the landing page\n    // view, so we can discount that possibility here.\n    if (recordingData && recordingData.type === 'TRACE_INDEX') {\n      this.#changeView({\n        mode: 'VIEWING_TRACE',\n        traceIndex: recordingData.parsedTraceIndex,\n        forceOpenSidebar: false,\n      });\n    }\n    return true;\n  }\n\n  #saveModificationsForActiveTrace(): void {\n    if (this.#viewMode.mode !== 'VIEWING_TRACE') {\n      return;\n    }\n    const newModifications = ModificationsManager.activeManager()?.toJSON();\n    if (newModifications) {\n      this.#traceEngineModel.overrideModifications(this.#viewMode.traceIndex, newModifications);\n    }\n  }\n\n  selectFileToLoad(): void {\n    if (this.fileSelectorElement) {\n      this.fileSelectorElement.click();\n    }\n  }\n\n  async loadFromFile(file: File): Promise<void> {\n    if (this.state !== State.IDLE) {\n      return;\n    }\n    const maximumTraceFileLengthToDetermineEnhancedTraces = 5000;\n    // We are expecting to locate the enhanced traces version within the first 5000\n    // characters of the trace file if the given trace file is enhanced traces.\n    // Doing so can avoid serializing the whole trace while needing to serialize\n    // it again in rehydrated session for enhanced traces.\n    const blob = file.slice(0, maximumTraceFileLengthToDetermineEnhancedTraces);\n    const content = await blob.text();\n    if (content.includes('enhancedTraceVersion')) {\n      await window.scheduler.postTask(() => {\n        this.#launchRehydratedSession(file);\n      }, {priority: 'background'});\n    } else {\n      this.loader = await TimelineLoader.loadFromFile(file, this);\n      this.prepareToLoadTimeline();\n    }\n    this.createFileSelector();\n  }\n\n  #launchRehydratedSession(file: File): void {\n    let rehydratingWindow: Window|null = null;\n    let pathToLaunch: string|null = null;\n    const url = new URL(window.location.href);\n    const pathToEntrypoint = url.pathname.slice(0, url.pathname.lastIndexOf('/'));\n    url.pathname = `${pathToEntrypoint}/rehydrated_devtools_app.html`;\n    pathToLaunch = url.toString();\n\n    // Clarifying the window the code is referring to\n    const hostWindow = window;\n    function onMessageHandler(ev: MessageEvent): void {\n      if (url && ev.data && ev.data.type === 'REHYDRATING_WINDOW_READY') {\n        rehydratingWindow?.postMessage({type: 'REHYDRATING_TRACE_FILE', traceFile: file}, url.origin);\n      }\n      hostWindow.removeEventListener('message', onMessageHandler);\n    }\n    hostWindow.addEventListener('message', onMessageHandler);\n    rehydratingWindow = hostWindow.open(pathToLaunch, /* target: */ undefined, 'noopener=false,popup=true');\n  }\n\n  async loadFromURL(url: Platform.DevToolsPath.UrlString): Promise<void> {\n    if (this.state !== State.IDLE) {\n      return;\n    }\n    this.prepareToLoadTimeline();\n    this.loader = await TimelineLoader.loadFromURL(url, this);\n  }\n\n  private updateMiniMap(): void {\n    if (this.#viewMode.mode !== 'VIEWING_TRACE') {\n      return;\n    }\n\n    const parsedTrace = this.#traceEngineModel.parsedTrace(this.#viewMode.traceIndex);\n    const isCpuProfile = this.#traceEngineModel.metadata(this.#viewMode.traceIndex)?.dataOrigin ===\n        Trace.Types.File.DataOrigin.CPU_PROFILE;\n    if (!parsedTrace) {\n      return;\n    }\n\n    this.#minimapComponent.setData({\n      parsedTrace,\n      isCpuProfile,\n      settings: {\n        showScreenshots: this.showScreenshotsSetting.get(),\n        showMemory: this.showMemorySetting.get(),\n      },\n    });\n  }\n\n  private onMemoryModeChanged(): void {\n    this.flameChart.updateCountersGraphToggle(this.showMemorySetting.get());\n    this.updateMiniMap();\n    this.doResize();\n    this.select(null);\n  }\n\n  private onDimThirdPartiesChanged(): void {\n    if (this.#viewMode.mode !== 'VIEWING_TRACE') {\n      return;\n    }\n    this.flameChart.dimThirdPartiesIfRequired();\n  }\n\n  #extensionDataVisibilityChanged(): void {\n    this.flameChart.rebuildDataForTrace();\n  }\n\n  private updateSettingsPaneVisibility(): void {\n    if (isNode) {\n      return;\n    }\n    if (this.showSettingsPaneSetting.get()) {\n      this.showSettingsPaneButton.setToggled(true);\n      this.settingsPane?.classList.remove('hidden');\n    } else {\n      this.showSettingsPaneButton.setToggled(false);\n      this.settingsPane?.classList.add('hidden');\n    }\n  }\n\n  private updateShowSettingsToolbarButton(): void {\n    const messages: string[] = [];\n    if (SDK.CPUThrottlingManager.CPUThrottlingManager.instance().cpuThrottlingRate() !== 1) {\n      messages.push(i18nString(UIStrings.CpuThrottlingIsEnabled));\n    }\n    if (SDK.NetworkManager.MultitargetNetworkManager.instance().isThrottling()) {\n      messages.push(i18nString(UIStrings.NetworkThrottlingIsEnabled));\n    }\n    if (this.captureLayersAndPicturesSetting.get()) {\n      messages.push(i18nString(UIStrings.SignificantOverheadDueToPaint));\n    }\n    if (this.captureSelectorStatsSetting.get()) {\n      messages.push(i18nString(UIStrings.SelectorStatsEnabled));\n    }\n\n    this.showSettingsPaneButton.setChecked(messages.length > 0);\n    this.showSettingsPaneButton.element.style.setProperty('--dot-toggle-top', '16px');\n    this.showSettingsPaneButton.element.style.setProperty('--dot-toggle-left', '15px');\n\n    if (messages.length) {\n      const tooltipElement = document.createElement('div');\n      messages.forEach(message => {\n        tooltipElement.createChild('div').textContent = message;\n      });\n      this.showSettingsPaneButton.setTitle(tooltipElement.textContent || '');\n    } else {\n      this.showSettingsPaneButton.setTitle(i18nString(UIStrings.captureSettings));\n    }\n  }\n\n  private setUIControlsEnabled(enabled: boolean): void {\n    this.recordingOptionUIControls.forEach(control => control.setEnabled(enabled));\n  }\n\n  async #evaluateInspectedURL(): Promise<Platform.DevToolsPath.UrlString> {\n    if (!this.controller) {\n      return Platform.DevToolsPath.EmptyUrlString;\n    }\n\n    // target.inspectedURL is reliably populated, however it lacks any url #hash\n    const inspectedURL = this.controller.primaryPageTarget.inspectedURL();\n\n    // We'll use the navigationHistory to acquire the current URL including hash\n    const resourceTreeModel = this.controller.primaryPageTarget.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    const navHistory = resourceTreeModel && await resourceTreeModel.navigationHistory();\n    if (!resourceTreeModel || !navHistory) {\n      return inspectedURL;\n    }\n\n    const {currentIndex, entries} = navHistory;\n    const navigationEntry = entries[currentIndex];\n    return navigationEntry.url as Platform.DevToolsPath.UrlString;\n  }\n\n  async #navigateToAboutBlank(): Promise<void> {\n    const aboutBlankNavigationComplete = new Promise<void>(async (resolve, reject) => {\n      if (!this.controller) {\n        reject('Could not find TimelineController');\n        return;\n      }\n      const target = this.controller.primaryPageTarget;\n      const resourceModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n      if (!resourceModel) {\n        reject('Could not load resourceModel');\n        return;\n      }\n\n      // To clear out the page and any state from prior test runs, we\n      // navigate to about:blank before initiating the trace recording.\n      // Once we have navigated to about:blank, we start recording and\n      // then navigate to the original page URL, to ensure we profile the\n      // page load.\n      function waitForAboutBlank(event: Common.EventTarget.EventTargetEvent<SDK.ResourceTreeModel.ResourceTreeFrame>):\n          void {\n        if (event.data.url === 'about:blank') {\n          resolve();\n        } else {\n          reject(`Unexpected navigation to ${event.data.url}`);\n        }\n        resourceModel?.removeEventListener(SDK.ResourceTreeModel.Events.FrameNavigated, waitForAboutBlank);\n      }\n      resourceModel.addEventListener(SDK.ResourceTreeModel.Events.FrameNavigated, waitForAboutBlank);\n      await resourceModel.navigate('about:blank' as Platform.DevToolsPath.UrlString);\n    });\n    await aboutBlankNavigationComplete;\n  }\n\n  async #startCPUProfilingRecording(): Promise<void> {\n    try {\n      this.cpuProfiler = UI.Context.Context.instance().flavor(SDK.CPUProfilerModel.CPUProfilerModel);\n      if (!this.cpuProfiler) {\n        // If there is no isolate selected, we will profile the first isolate that devtools connects to.\n        // If we profile all target, but this will cause some bugs like time for the function is calculated wrong,\n        // because the profiles will be concated and sorted together, so the total time will be amplified.\n        // Multiple targets problem might happen when you inspect multiple node servers on different port at same time,\n        // or when you let DevTools listen to both localhost:9229 & 127.0.0.1:9229.\n        const firstNodeTarget =\n            SDK.TargetManager.TargetManager.instance().targets().find(target => target.type() === SDK.Target.Type.NODE);\n        if (!firstNodeTarget) {\n          throw new Error('Could not load any Node target.');\n        }\n        if (firstNodeTarget) {\n          this.cpuProfiler = firstNodeTarget.model(SDK.CPUProfilerModel.CPUProfilerModel);\n        }\n      }\n\n      this.setUIControlsEnabled(false);\n      this.#changeView({mode: 'STATUS_PANE_OVERLAY'});\n      if (!this.cpuProfiler) {\n        throw new Error('No Node target is found.');\n      }\n      await SDK.TargetManager.TargetManager.instance().suspendAllTargets('performance-timeline');\n      await this.cpuProfiler.startRecording();\n\n      this.recordingStarted();\n    } catch (e) {\n      await this.recordingFailed(e.message);\n    }\n  }\n\n  async #startTraceRecording(): Promise<void> {\n    try {\n      // We record against the root target, but also need to use the\n      // primaryPageTarget to inspect the current URL. For more info, see the\n      // JSDoc comment on the TimelineController constructor.\n      const rootTarget = SDK.TargetManager.TargetManager.instance().rootTarget();\n      const primaryPageTarget = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n\n      if (!primaryPageTarget) {\n        throw new Error('Could not load primary page target.');\n      }\n      if (!rootTarget) {\n        throw new Error('Could not load root target.');\n      }\n\n      if (UIDevtoolsUtils.isUiDevTools()) {\n        this.controller = new UIDevtoolsController(rootTarget, primaryPageTarget, this);\n      } else {\n        this.controller = new TimelineController(rootTarget, primaryPageTarget, this);\n      }\n      this.setUIControlsEnabled(false);\n      this.#changeView({mode: 'STATUS_PANE_OVERLAY'});\n      if (!this.controller) {\n        throw new Error('Could not create Timeline controller');\n      }\n\n      const urlToTrace = await this.#evaluateInspectedURL();\n      // If we are doing \"Reload & record\", we first navigate the page to\n      // about:blank. This is to ensure any data on the timeline from any\n      // previous performance recording is lost, avoiding the problem where a\n      // timeline will show data & screenshots from a previous page load that\n      // was not relevant.\n      if (this.recordingPageReload) {\n        await this.#navigateToAboutBlank();\n      }\n      const recordingOptions = {\n        enableJSSampling: true,\n        capturePictures: this.captureLayersAndPicturesSetting.get(),\n        captureFilmStrip: this.showScreenshotsSetting.get(),\n        captureSelectorStats: this.captureSelectorStatsSetting.get(),\n      };\n      // Order is important here: we tell the controller to start recording, which enables tracing.\n      const response = await this.controller.startRecording(recordingOptions);\n      if (response.getError()) {\n        throw new Error(response.getError());\n      }\n      // Once we get here, we know tracing is active.\n      // This is when, if the user has hit \"Reload & Record\" that we now need to navigate to the original URL.\n      // If the user has just hit \"record\", we don't do any navigating.\n      const recordingConfig = this.recordingPageReload ? {navigateToUrl: urlToTrace} : undefined;\n      this.recordingStarted(recordingConfig);\n    } catch (e) {\n      await this.recordingFailed(e.message);\n    }\n  }\n\n  private async startRecording(): Promise<void> {\n    console.assert(!this.statusDialog, 'Status pane is already opened.');\n    this.setState(State.START_PENDING);\n    this.showRecordingStarted();\n\n    if (isNode) {\n      await this.#startCPUProfilingRecording();\n    } else {\n      await this.#startTraceRecording();\n    }\n  }\n\n  private async stopRecording(): Promise<void> {\n    if (this.statusDialog) {\n      this.statusDialog.finish();\n      this.statusDialog.updateStatus(i18nString(UIStrings.stoppingTimeline));\n      this.statusDialog.updateProgressBar(i18nString(UIStrings.received), 0);\n    }\n    this.setState(State.STOP_PENDING);\n    if (this.controller) {\n      await this.controller.stopRecording();\n      this.setUIControlsEnabled(true);\n      await this.controller.dispose();\n      this.controller = null;\n      return;\n    }\n    if (this.cpuProfiler) {\n      const profile = await this.cpuProfiler.stopRecording();\n      this.setState(State.IDLE);\n      this.loadFromCpuProfile(profile);\n\n      this.setUIControlsEnabled(true);\n      this.cpuProfiler = null;\n\n      await SDK.TargetManager.TargetManager.instance().resumeAllTargets();\n    }\n  }\n\n  private async recordingFailed(error: string, rawEvents?: Trace.Types.Events.Event[]): Promise<void> {\n    if (this.statusDialog) {\n      this.statusDialog.remove();\n    }\n    this.statusDialog = new StatusDialog(\n        {\n          description: error,\n          buttonText: i18nString(UIStrings.close),\n          hideStopButton: true,\n          showProgress: undefined,\n          showTimer: undefined,\n        },\n        // When recording failed, we should load null to go back to the landing page.\n        async () => {\n          this.statusDialog?.remove();\n          await this.loadingComplete(\n              /* no collectedEvents */[],\n              /* exclusiveFilter= */ null,\n              /* metadata= */ null);\n        });\n    this.statusDialog.showPane(this.statusPaneContainer);\n    this.statusDialog.updateStatus(i18nString(UIStrings.recordingFailed));\n\n    if (rawEvents) {\n      this.statusDialog.enableDownloadOfEvents(rawEvents);\n    }\n\n    this.setState(State.RECORDING_FAILED);\n    this.traceLoadStart = null;\n    this.setUIControlsEnabled(true);\n    if (this.controller) {\n      await this.controller.dispose();\n      this.controller = null;\n    }\n    // Ensure we resume all targets, otherwise DevTools remains unresponsive in the event of an error.\n    void SDK.TargetManager.TargetManager.instance().resumeAllTargets();\n  }\n\n  private onSuspendStateChanged(): void {\n    this.updateTimelineControls();\n  }\n\n  private consoleProfileFinished(data: SDK.CPUProfilerModel.ProfileFinishedData): void {\n    this.loadFromCpuProfile(data.cpuProfile);\n    void UI.InspectorView.InspectorView.instance().showPanel('timeline');\n  }\n\n  private updateTimelineControls(): void {\n    this.toggleRecordAction.setToggled(this.state === State.RECORDING);\n    this.toggleRecordAction.setEnabled(this.state === State.RECORDING || this.state === State.IDLE);\n    this.recordReloadAction.setEnabled(isNode ? false : this.state === State.IDLE);\n    this.#historyManager.setEnabled(this.state === State.IDLE);\n    this.clearButton.setEnabled(this.state === State.IDLE);\n    this.panelToolbar.setEnabled(this.state !== State.LOADING);\n    this.panelRightToolbar.setEnabled(this.state !== State.LOADING);\n    this.dropTarget.setEnabled(this.state === State.IDLE);\n    this.loadButton.setEnabled(this.state === State.IDLE);\n    this.saveButton.setEnabled(this.state === State.IDLE && this.#hasActiveTrace());\n    this.homeButton?.setEnabled(this.state === State.IDLE && this.#hasActiveTrace());\n    if (this.#viewMode.mode === 'VIEWING_TRACE') {\n      this.#addSidebarIconToToolbar();\n    }\n  }\n\n  async toggleRecording(): Promise<void> {\n    if (this.state === State.IDLE) {\n      this.recordingPageReload = false;\n      await this.startRecording();\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.TimelineStarted);\n    } else if (this.state === State.RECORDING) {\n      await this.stopRecording();\n    }\n  }\n\n  recordReload(): void {\n    if (this.state !== State.IDLE) {\n      return;\n    }\n    this.recordingPageReload = true;\n    void this.startRecording();\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.TimelinePageReloadStarted);\n  }\n\n  private onClearButton(): void {\n    this.#historyManager.clear();\n    this.#traceEngineModel = this.#instantiateNewModel();\n    ModificationsManager.reset();\n    this.#uninstallSourceMapsResolver();\n    this.flameChart.getMainDataProvider().reset();\n    this.flameChart.getNetworkDataProvider().reset();\n    this.flameChart.reset();\n    this.#changeView({mode: 'LANDING_PAGE'});\n    UI.Context.Context.instance().setFlavor(Utils.AICallTree.AICallTree, null);\n    UI.Context.Context.instance().setFlavor(Utils.InsightAIContext.ActiveInsight, null);\n  }\n\n  #hasActiveTrace(): boolean {\n    return this.#viewMode.mode === 'VIEWING_TRACE';\n  }\n\n  #applyActiveFilters(traceIsGeneric: boolean, exclusiveFilter: Trace.Extras.TraceFilter.TraceFilter|null = null):\n      void {\n    if (traceIsGeneric || Root.Runtime.experiments.isEnabled('timeline-show-all-events')) {\n      return;\n    }\n\n    const newActiveFilters = exclusiveFilter ? [exclusiveFilter] : [\n      TimelineUIUtils.visibleEventsFilter(),\n    ];\n\n    ActiveFilters.instance().setFilters(newActiveFilters);\n  }\n\n  /**\n   * If we generate a lot of the same aria announcements very quickly, we don't\n   * want to send them all to the user.\n   */\n  #ariaDebouncer = Common.Debouncer.debounce(() => {\n    if (this.#pendingAriaMessage) {\n      UI.ARIAUtils.alert(this.#pendingAriaMessage);\n      this.#pendingAriaMessage = null;\n    }\n  }, 1_000);\n\n  #makeAriaAnnouncement(message: string): void {\n    // If we already have one pending, don't queue this one.\n    if (message === this.#pendingAriaMessage) {\n      return;\n    }\n\n    // If the pending message is different, immediately announce the pending\n    // message + then update the pending message to the new one.\n    if (this.#pendingAriaMessage) {\n      UI.ARIAUtils.alert(this.#pendingAriaMessage);\n    }\n    this.#pendingAriaMessage = message;\n    this.#ariaDebouncer();\n  }\n\n  /**\n   * Called when we update the active trace that is being shown to the user.\n   * This is called from {@see changeView} when we change the UI to show a\n   * trace - either one the user has just recorded/imported, or one they have\n   * navigated to via the dropdown.\n   *\n   * If you need code to execute whenever the active trace changes, this is the method to use.\n   * If you need code to execute ONLY ON NEW TRACES, then use {@see loadingComplete}\n   * You should not call this method directly if you want the UI to update; use\n   * {@see changeView} to control what is shown to the user.\n   */\n  #setModelForActiveTrace(): void {\n    if (this.#viewMode.mode !== 'VIEWING_TRACE') {\n      return;\n    }\n    const {traceIndex} = this.#viewMode;\n    const parsedTrace = this.#traceEngineModel.parsedTrace(traceIndex);\n    const traceMetadata = this.#traceEngineModel.metadata(traceIndex);\n    const syntheticEventsManager = this.#traceEngineModel.syntheticTraceEventsManager(traceIndex);\n\n    if (!parsedTrace || !syntheticEventsManager) {\n      // This should not happen, because you can only get into the\n      // VIEWING_TRACE viewMode if you have a valid trace index from the\n      // Trace Engine. If it does, let's bail back to the landing page.\n      console.error(`setModelForActiveTrace was called with an invalid trace index: ${traceIndex}`);\n      this.#changeView({mode: 'LANDING_PAGE'});\n      return;\n    }\n\n    Trace.Helpers.SyntheticEvents.SyntheticEventsManager.activate(syntheticEventsManager);\n    // Clear the line level profile that could exist from the previous trace.\n    PerfUI.LineLevelProfile.Performance.instance().reset();\n\n    this.#minimapComponent.reset();\n\n    // Order is important: the bounds must be set before we initiate any UI\n    // rendering.\n    TraceBounds.TraceBounds.BoundsManager.instance().resetWithNewBounds(\n        parsedTrace.Meta.traceBounds,\n    );\n\n    // Set up the modifications manager for the newly active trace.\n    // The order is important: this needs to happen before we trigger a flame chart redraw by setting the model.\n    // (it could happen after, but then we would need to trigger a fresh redraw so let's not do that)\n    const currentManager = ModificationsManager.initAndActivateModificationsManager(this.#traceEngineModel, traceIndex);\n\n    if (!currentManager) {\n      console.error('ModificationsManager could not be created or activated.');\n    }\n    this.statusDialog?.updateProgressBar(i18nString(UIStrings.processed), 70);\n\n    const traceInsightsSets = this.#traceEngineModel.traceInsights(traceIndex);\n    this.flameChart.setInsights(traceInsightsSets, this.#eventToRelatedInsights);\n\n    this.flameChart.setModel(parsedTrace, traceMetadata);\n    this.flameChart.resizeToPreferredHeights();\n    // Reset the visual selection as we've just swapped to a new trace.\n    this.flameChart.setSelectionAndReveal(null);\n    this.#sideBar.setParsedTrace(parsedTrace, traceMetadata);\n\n    this.searchableViewInternal.showWidget();\n\n    const exclusiveFilter = this.#exclusiveFilterPerTrace.get(traceIndex) ?? null;\n    this.#applyActiveFilters(parsedTrace.Meta.traceIsGeneric, exclusiveFilter);\n\n    // Add ModificationsManager listeners for annotations change to update the Annotation Overlays.\n    currentManager?.addEventListener(AnnotationModifiedEvent.eventName, event => {\n      // Update screen readers.\n      const announcementText = AnnotationHelpers.ariaAnnouncementForModifiedEvent(event as AnnotationModifiedEvent);\n      if (announcementText) {\n        this.#makeAriaAnnouncement(announcementText);\n      }\n\n      const {overlay, action} = (event as AnnotationModifiedEvent);\n      if (action === 'Add') {\n        this.flameChart.addOverlay(overlay);\n      } else if (action === 'Remove') {\n        this.flameChart.removeOverlay(overlay);\n      } else if (action === 'UpdateTimeRange' && AnnotationHelpers.isTimeRangeLabel(overlay)) {\n        this.flameChart.updateExistingOverlay(overlay, {\n          bounds: overlay.bounds,\n        });\n      } else if (action === 'UpdateLinkToEntry' && AnnotationHelpers.isEntriesLink(overlay)) {\n        this.flameChart.updateExistingOverlay(overlay, {\n          entryTo: overlay.entryTo,\n        });\n      } else if (action === 'EnterLabelEditState' && AnnotationHelpers.isEntryLabel(overlay)) {\n        this.flameChart.enterLabelEditMode(overlay);\n      } else if (action === 'LabelBringForward' && AnnotationHelpers.isEntryLabel(overlay)) {\n        this.flameChart.bringLabelForward(overlay);\n      }\n\n      const annotations = currentManager.getAnnotations();\n      const annotationEntryToColorMap = this.buildColorsAnnotationsMap(annotations);\n      this.#sideBar.setAnnotations(annotations, annotationEntryToColorMap);\n    });\n\n    // To calculate the activity we might want to zoom in, we use the top-most main-thread track\n    const topMostMainThreadAppender =\n        this.flameChart.getMainDataProvider().compatibilityTracksAppenderInstance().threadAppenders().at(0);\n    if (topMostMainThreadAppender) {\n      const zoomedInBounds = Trace.Extras.MainThreadActivity.calculateWindow(\n          parsedTrace.Meta.traceBounds, topMostMainThreadAppender.getEntries());\n\n      TraceBounds.TraceBounds.BoundsManager.instance().setTimelineVisibleWindow(zoomedInBounds);\n    }\n\n    // Add overlays for annotations loaded from the trace file\n    const currModificationManager = ModificationsManager.activeManager();\n    if (currModificationManager) {\n      const annotations = currModificationManager.getAnnotations();\n      const annotationEntryToColorMap = this.buildColorsAnnotationsMap(annotations);\n      this.#sideBar.setAnnotations(annotations, annotationEntryToColorMap);\n      this.flameChart.bulkAddOverlays(currModificationManager.getOverlays());\n    }\n\n    // Set up line level profiling with CPU profiles, if we found any.\n    PerfUI.LineLevelProfile.Performance.instance().reset();\n    if (parsedTrace?.Samples.profilesInProcess.size) {\n      const primaryPageTarget = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n      // Gather up all CPU Profiles we found when parsing this trace.\n      const cpuProfiles =\n          Array.from(parsedTrace.Samples.profilesInProcess).flatMap(([_processId, threadsInProcess]) => {\n            const profiles = Array.from(threadsInProcess.values()).map(profileData => profileData.parsedProfile);\n            return profiles;\n          });\n      for (const profile of cpuProfiles) {\n        PerfUI.LineLevelProfile.Performance.instance().appendCPUProfile(profile, primaryPageTarget);\n      }\n    }\n\n    // Initialize EntityMapper\n    this.#entityMapper = new Utils.EntityMapper.EntityMapper(parsedTrace);\n\n    // Set up SourceMapsResolver to ensure we resolve any function names in\n    // profile calls.\n    // Pass in the entity mapper.\n    this.#sourceMapsResolver = new Utils.SourceMapsResolver.SourceMapsResolver(parsedTrace, this.#entityMapper);\n    this.#sourceMapsResolver.addEventListener(\n        Utils.SourceMapsResolver.SourceMappingsUpdated.eventName, this.#onSourceMapsNodeNamesResolvedBound);\n    void this.#sourceMapsResolver.install();\n\n    // Initialize EntityMapper\n    this.#entityMapper = new Utils.EntityMapper.EntityMapper(parsedTrace);\n\n    this.statusDialog?.updateProgressBar(i18nString(UIStrings.processed), 80);\n    this.updateMiniMap();\n    this.statusDialog?.updateProgressBar(i18nString(UIStrings.processed), 90);\n    this.updateTimelineControls();\n\n    this.#setActiveInsight(null);\n\n    this.#sideBar.setInsights(traceInsightsSets);\n\n    this.#eventToRelatedInsights.clear();\n    if (traceInsightsSets) {\n      for (const [insightSetKey, insightSet] of traceInsightsSets) {\n        for (const model of Object.values(insightSet.model)) {\n          let relatedEvents = model.relatedEvents;\n          if (!relatedEvents) {\n            relatedEvents = new Map();\n          } else if (Array.isArray(relatedEvents)) {\n            relatedEvents = new Map(relatedEvents.map(e => [e, []]));\n          }\n\n          for (const [event, messages] of relatedEvents.entries()) {\n            const relatedInsights = this.#eventToRelatedInsights.get(event) ?? [];\n            this.#eventToRelatedInsights.set(event, relatedInsights);\n            relatedInsights.push({\n              insightLabel: model.title,\n              messages,\n              activateInsight: () => {\n                this.#setActiveInsight({model, insightSetKey});\n              },\n            });\n          }\n        }\n      }\n    }\n\n    // When the timeline is loaded for the first time, setup the shortcuts dialog and log what navigation setting is selected.\n    // Logging the setting on the first timeline load will allow us to get an estimate number of people using each option.\n    if (this.#traceEngineModel.size() === 1) {\n      this.#setupNavigationSetting();\n      if (Common.Settings.moduleSetting('flamechart-selected-navigation').get() === 'classic') {\n        Host.userMetrics.navigationSettingAtFirstTimelineLoad(\n            Host.UserMetrics.TimelineNavigationSetting.CLASSIC_AT_SESSION_FIRST_TRACE);\n      } else {\n        Host.userMetrics.navigationSettingAtFirstTimelineLoad(\n            Host.UserMetrics.TimelineNavigationSetting.MODERN_AT_SESSION_FIRST_TRACE);\n      }\n    }\n  }\n\n  /**\n   * After the user imports / records a trace, we auto-show the sidebar.\n   */\n  #showSidebar(): void {\n    const disabledByLocalStorageForTests =\n        window.localStorage.getItem('disable-auto-show-rpp-sidebar-for-test') === 'true';\n    if (disabledByLocalStorageForTests) {\n      return;\n    }\n\n    if (!this.#splitWidget.sidebarIsShowing()) {\n      this.#splitWidget.showBoth();\n    }\n  }\n\n  // Build a map mapping annotated entries to the colours that are used to display them in the FlameChart.\n  // We need this map to display the entries in the sidebar with the same colours.\n  private buildColorsAnnotationsMap(annotations: Trace.Types.File.Annotation[]): Map<Trace.Types.Events.Event, string> {\n    const annotationEntryToColorMap = new Map<Trace.Types.Events.Event, string>();\n\n    for (const annotation of annotations) {\n      if (Trace.Types.File.isEntryLabelAnnotation(annotation)) {\n        annotationEntryToColorMap.set(annotation.entry, this.getEntryColorByEntry(annotation.entry));\n      } else if (Trace.Types.File.isEntriesLinkAnnotation(annotation)) {\n        annotationEntryToColorMap.set(annotation.entryFrom, this.getEntryColorByEntry(annotation.entryFrom));\n        if (annotation.entryTo) {\n          annotationEntryToColorMap.set(annotation.entryTo, this.getEntryColorByEntry(annotation.entryTo));\n        }\n      }\n    }\n\n    return annotationEntryToColorMap;\n  }\n\n  private getEntryColorByEntry(entry: Trace.Types.Events.Event): string {\n    const mainIndex = this.flameChart.getMainDataProvider().indexForEvent(entry);\n    const networkIndex = this.flameChart.getNetworkDataProvider().indexForEvent(entry);\n    if (mainIndex !== null) {\n      const color = this.flameChart.getMainDataProvider().entryColor(mainIndex);\n\n      // The color for idle frames will be white in flame chart, which will display weird in the sidebar, so just use a\n      // light gray color instead.\n      if (color === 'white') {\n        return ThemeSupport.ThemeSupport.instance().getComputedValue('--app-color-system');\n      }\n      return color;\n    }\n    if (networkIndex !== null) {\n      const color = this.flameChart.getNetworkDataProvider().entryColor(networkIndex);\n      return color;\n    }\n\n    console.warn('Could not get entry color for ', entry);\n    return ThemeSupport.ThemeSupport.instance().getComputedValue('--app-color-system');\n  }\n\n  private recordingStarted(config?: {navigateToUrl: Platform.DevToolsPath.UrlString}): void {\n    if (config && this.recordingPageReload && this.controller) {\n      // If the user hit \"Reload & record\", by this point we have:\n      // 1. Navigated to about:blank\n      // 2. Initiated tracing.\n      // We therefore now should navigate back to the original URL that the user wants to profile.\n      const resourceModel = this.controller?.primaryPageTarget.model(SDK.ResourceTreeModel.ResourceTreeModel);\n      if (!resourceModel) {\n        void this.recordingFailed('Could not navigate to original URL');\n        return;\n      }\n      // We don't need to await this because we are purposefully showing UI\n      // progress as the page loads & tracing is underway.\n      void resourceModel.navigate(config.navigateToUrl);\n    }\n\n    this.#changeView({mode: 'STATUS_PANE_OVERLAY'});\n    this.setState(State.RECORDING);\n    this.showRecordingStarted();\n    if (this.statusDialog) {\n      this.statusDialog.enableAndFocusButton();\n      this.statusDialog.updateStatus(i18nString(UIStrings.profiling));\n      this.statusDialog.updateProgressBar(i18nString(UIStrings.bufferUsage), 0);\n      this.statusDialog.startTimer();\n    }\n  }\n\n  recordingProgress(usage: number): void {\n    if (this.statusDialog) {\n      this.statusDialog.updateProgressBar(i18nString(UIStrings.bufferUsage), usage * 100);\n    }\n  }\n\n  /**\n   * Hide the sidebar, but persist the user's state, because when they import a\n   * trace we want to revert the sidebar back to what it was.\n   */\n  #hideSidebar(): void {\n    if (this.#splitWidget.sidebarIsShowing()) {\n      this.#splitWidget.hideSidebar();\n    }\n  }\n\n  #showLandingPage(): void {\n    this.updateSettingsPaneVisibility();\n    this.#removeSidebarIconFromToolbar();\n    this.#hideSidebar();\n\n    if (this.landingPage) {\n      this.landingPage.show(this.statusPaneContainer);\n      return;\n    }\n\n    const liveMetrics = new TimelineComponents.LiveMetricsView.LiveMetricsView();\n    liveMetrics.isNode = isNode;\n    this.landingPage = LegacyWrapper.LegacyWrapper.legacyWrapper(UI.Widget.Widget, liveMetrics);\n    this.landingPage.element.classList.add('timeline-landing-page', 'fill');\n    this.landingPage.contentElement.classList.add('fill');\n    this.landingPage.show(this.statusPaneContainer);\n  }\n\n  #hideLandingPage(): void {\n    this.landingPage.detach();\n\n    // Hide pane settings in trace view to conserve UI space, but preserve underlying setting.\n    this.showSettingsPaneButton?.setToggled(false);\n    this.settingsPane?.classList.add('hidden');\n  }\n\n  async loadingStarted(): Promise<void> {\n    this.#changeView({mode: 'STATUS_PANE_OVERLAY'});\n\n    if (this.statusDialog) {\n      this.statusDialog.remove();\n    }\n    this.statusDialog = new StatusDialog(\n        {\n          showProgress: true,\n          showTimer: undefined,\n          hideStopButton: true,\n          buttonText: undefined,\n          description: undefined,\n        },\n        () => this.cancelLoading());\n    this.statusDialog.showPane(this.statusPaneContainer);\n    this.statusDialog.updateStatus(i18nString(UIStrings.loadingProfile));\n    // FIXME: make loading from backend cancelable as well.\n    if (!this.loader) {\n      this.statusDialog.finish();\n    }\n    this.traceLoadStart = Trace.Types.Timing.Milli(performance.now());\n    await this.loadingProgress(0);\n  }\n\n  async loadingProgress(progress?: number): Promise<void> {\n    if (typeof progress === 'number' && this.statusDialog) {\n      this.statusDialog.updateProgressBar(i18nString(UIStrings.received), progress * 100);\n    }\n  }\n\n  async processingStarted(): Promise<void> {\n    this.statusDialog?.updateStatus(i18nString(UIStrings.processingProfile));\n  }\n\n  #listenForProcessingProgress(): void {\n    this.#traceEngineModel.addEventListener(Trace.TraceModel.ModelUpdateEvent.eventName, e => {\n      const updateEvent = e as Trace.TraceModel.ModelUpdateEvent;\n      const str = i18nString(UIStrings.processed);\n\n      // Trace Engine will report progress from [0...1] but we still have more work to do. So, scale them down a bit.\n      const traceParseMaxProgress = 0.7;\n\n      if (updateEvent.data.type === Trace.TraceModel.ModelUpdateType.COMPLETE) {\n        this.statusDialog?.updateProgressBar(str, 100 * traceParseMaxProgress);\n      } else if (updateEvent.data.type === Trace.TraceModel.ModelUpdateType.PROGRESS_UPDATE) {\n        const data = updateEvent.data.data;\n        this.statusDialog?.updateProgressBar(str, data.percent * 100 * traceParseMaxProgress);\n      }\n    });\n  }\n\n  #onSourceMapsNodeNamesResolved(): void {\n    // Source maps can change the way calls hierarchies should look in\n    // the flame chart (f.e. if some calls are ignore listed after\n    // resolving source maps). Thus, we must reappend the flamechart\n    // entries.\n    this.flameChart.getMainDataProvider().timelineData(true);\n    this.flameChart.getMainFlameChart().update();\n  }\n\n  /**\n   * This is called with we are done loading a trace from a file, or after we\n   * have recorded a fresh trace.\n   *\n   * IMPORTANT: All the code in here should be code that is only required when we have\n   * recorded or loaded a brand new trace. If you need the code to run when the\n   * user switches to an existing trace, please @see #setModelForActiveTrace and put your\n   * code in there.\n   **/\n  async loadingComplete(\n      collectedEvents: Trace.Types.Events.Event[], exclusiveFilter: Trace.Extras.TraceFilter.TraceFilter|null = null,\n      metadata: Trace.Types.File.MetaData|null): Promise<void> {\n    this.#traceEngineModel.resetProcessor();\n\n    delete this.loader;\n\n    // If the user just recorded this trace via the record UI, the state will\n    // be StopPending. Whereas if it was an existing trace they loaded via a\n    // file, it will be State.Loading. This means we can tell the recording is\n    // fresh by checking the state value.\n    const recordingIsFresh = this.state === State.STOP_PENDING;\n\n    this.setState(State.IDLE);\n\n    if (collectedEvents.length === 0) {\n      // 0 collected events indicates probably an invalid file was imported.\n      // If the user does not have any already-loaded traces, then we should\n      // just reset the panel back to the landing page. However if they had a\n      // previous trace imported, we should go to that instead.\n      if (this.#traceEngineModel.size()) {\n        this.#changeView({\n          mode: 'VIEWING_TRACE',\n          traceIndex: this.#traceEngineModel.lastTraceIndex(),\n          forceOpenSidebar: false,\n        });\n      } else {\n        this.#changeView({mode: 'LANDING_PAGE'});\n      }\n      return;\n    }\n\n    try {\n      await this.#executeNewTrace(collectedEvents, recordingIsFresh, metadata);\n      const traceIndex = this.#traceEngineModel.lastTraceIndex();\n      if (exclusiveFilter) {\n        this.#exclusiveFilterPerTrace.set(traceIndex, exclusiveFilter);\n      }\n      this.#changeView({\n        mode: 'VIEWING_TRACE',\n        traceIndex,\n        // This is a new trace, so we want to open the insights sidebar automatically.\n        forceOpenSidebar: true,\n      });\n\n      const parsedTrace = this.#traceEngineModel.parsedTrace(traceIndex);\n      if (!parsedTrace) {\n        throw new Error(`Could not get trace data at index ${traceIndex}`);\n      }\n\n      if (recordingIsFresh) {\n        Tracker.instance().registerFreshRecording(parsedTrace);\n      }\n\n      // We store the index of the active trace so we can load it back easily\n      // if the user goes to a different trace then comes back.\n      // However we also pass in the full trace data because we use it to build\n      // the preview overview thumbnail of the trace that gets shown in the UI.\n      this.#historyManager.addRecording({\n        data: {\n          parsedTraceIndex: traceIndex,\n          type: 'TRACE_INDEX',\n        },\n        filmStripForPreview: Trace.Extras.FilmStrip.fromParsedTrace(parsedTrace),\n        parsedTrace,\n        metadata,\n      });\n\n      this.dispatchEventToListeners(Events.RECORDING_COMPLETED, {\n        traceIndex,\n      });\n    } catch (error) {\n      // If we errored during the parsing stage, it\n      // is useful to get access to the raw events to download the trace. This\n      // allows us to debug crashes!\n      void this.recordingFailed(error.message, collectedEvents);\n      console.error(error);\n      this.dispatchEventToListeners(Events.RECORDING_COMPLETED, {errorText: error.message});\n    } finally {\n      this.recordTraceLoadMetric();\n    }\n  }\n\n  recordTraceLoadMetric(): void {\n    if (!this.traceLoadStart) {\n      return;\n    }\n    const start = this.traceLoadStart;\n    // Right *now* is the end of trace parsing and model building, but the flamechart rendering\n    // isn't complete yet. To capture that we'll do a rAF+setTimeout to give the most accurate timestamp\n    // for the first paint of the flamechart\n    requestAnimationFrame(() => {\n      setTimeout(() => {\n        const end = Trace.Types.Timing.Milli(performance.now());\n        const measure = performance.measure('TraceLoad', {start, end});\n        const duration = Trace.Types.Timing.Milli(measure.duration);\n        this.element.dispatchEvent(new TraceLoadEvent(duration));\n        Host.userMetrics.performanceTraceLoad(measure);\n      }, 0);\n    });\n  }\n\n  /**\n   * Store source maps on trace metadata (but just the non-data url ones).\n   *\n   * Many raw source maps are already in memory, but there are some cases where they may\n   * not be and have to be fetched here:\n   *\n   * 1. If the trace processor (via `#createSourceMapResolver`) never fetched it,\n   *    due to `ScriptHandler` skipping the script if it could not find an associated frame.\n   * 2. If the initial fetch failed (perhaps the failure was intermittent and a\n   *    subsequent attempt will work).\n   */\n  async #retainSourceMapsForEnhancedTrace(\n      parsedTrace: Trace.Handlers.Types.ParsedTrace, metadata: Trace.Types.File.MetaData): Promise<void> {\n    const handleScript = async(script: Trace.Handlers.ModelHandlers.Scripts.Script): Promise<void> => {\n      if (script.sourceMapUrlElided) {\n        if (metadata.sourceMaps?.find(m => m.url === script.url)) {\n          return;\n        }\n\n        const rawSourceMap = script.sourceMap?.json();\n        if (rawSourceMap && script.url) {\n          metadata.sourceMaps?.push({url: script.url, sourceMap: rawSourceMap});\n        }\n        return;\n      }\n\n      if (!script.sourceMapUrl || script.sourceMapUrl.startsWith('data:')) {\n        return;\n      }\n\n      if (metadata.sourceMaps?.find(m => m.sourceMapUrl === script.sourceMapUrl)) {\n        return;\n      }\n\n      // TimelineController sets `SDK.SourceMap.SourceMap.retainRawSourceMaps` to true,\n      // which means the raw source map is present (assuming `script.sourceMap` is too).\n      let rawSourceMap = script.sourceMap?.json();\n\n      // If the raw map is not present for some reason, fetch it again.\n      if (!rawSourceMap && !script.sourceMapUrlElided) {\n        const initiator = {\n          target: null,\n          frameId: script.frame as Protocol.Page.FrameId,\n          initiatorUrl: script.url as Platform.DevToolsPath.UrlString\n        };\n        rawSourceMap = await SDK.SourceMapManager.tryLoadSourceMap(\n            script.sourceMapUrl as Platform.DevToolsPath.UrlString, initiator);\n      }\n\n      if (script.url && rawSourceMap) {\n        metadata.sourceMaps?.push({url: script.url, sourceMapUrl: script.sourceMapUrl, sourceMap: rawSourceMap});\n      }\n    };\n\n    metadata.sourceMaps = [];\n\n    const promises = [];\n    for (const script of parsedTrace?.Scripts.scripts.values() ?? []) {\n      promises.push(handleScript(script));\n    }\n    await Promise.all(promises);\n  }\n\n  #createSourceMapResolver(isFreshRecording: boolean, metadata: Trace.Types.File.MetaData|null):\n      Trace.TraceModel.ParseConfig['resolveSourceMap'] {\n    const debuggerModelForFrameId = new Map<string, SDK.DebuggerModel.DebuggerModel>();\n    for (const target of SDK.TargetManager.TargetManager.instance().targets()) {\n      const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      if (!debuggerModel) {\n        continue;\n      }\n\n      const resourceModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n      const activeFrameIds = (resourceModel?.frames() ?? []).map(frame => frame.id);\n      for (const frameId of activeFrameIds) {\n        debuggerModelForFrameId.set(frameId, debuggerModel);\n      }\n    }\n\n    async function getExistingSourceMap(frame: string, scriptId: string, scriptUrl: Platform.DevToolsPath.UrlString):\n        Promise<SDK.SourceMap.SourceMap|undefined> {\n      const debuggerModel = debuggerModelForFrameId.get(frame);\n      if (!debuggerModel) {\n        return;\n      }\n\n      const script = debuggerModel.scriptForId(scriptId);\n      if (!script || (scriptUrl && scriptUrl !== script.sourceURL)) {\n        return;\n      }\n\n      return await debuggerModel.sourceMapManager().sourceMapForClientPromise(script);\n    }\n\n    return async function resolveSourceMap(params: Trace.Types.Configuration.ResolveSourceMapParams) {\n      const {scriptId, scriptUrl, sourceUrl, sourceMapUrl, frame, cachedRawSourceMap} = params;\n\n      if (cachedRawSourceMap) {\n        return new SDK.SourceMap.SourceMap(\n            sourceUrl, sourceMapUrl ?? '' as Platform.DevToolsPath.UrlString, cachedRawSourceMap);\n      }\n\n      // For still-active frames, the source map is likely already fetched or at least in-flight.\n      if (isFreshRecording) {\n        const map = await getExistingSourceMap(frame, scriptId, scriptUrl);\n        if (map) {\n          return map;\n        }\n      }\n\n      if (!sourceMapUrl) {\n        return null;\n      }\n\n      // If loading from disk, check the metadata for source maps.\n      // The metadata doesn't store data url source maps.\n      const isDataUrl = sourceMapUrl.startsWith('data:');\n      if (!isFreshRecording && metadata?.sourceMaps && !isDataUrl) {\n        const cachedSourceMap = metadata.sourceMaps.find(m => m.sourceMapUrl === sourceMapUrl);\n        if (cachedSourceMap) {\n          return new SDK.SourceMap.SourceMap(sourceUrl, sourceMapUrl, cachedSourceMap.sourceMap);\n        }\n      }\n\n      // Never fetch source maps if the trace is not fresh - the source maps may not\n      // reflect what was actually loaded by the page for this trace on disk.\n      if (!isFreshRecording && !isDataUrl) {\n        return null;\n      }\n\n      if (!sourceUrl) {\n        return null;\n      }\n\n      // In all other cases, fetch the source map.\n      //\n      // 1) data urls\n      // 2) fresh recording + source map not for active frame\n      //\n      // For example, since the debugger model is disable during recording, any\n      // non-final navigations during the trace will never have their source maps\n      // fetched by the debugger model. That's only ever done here.\n\n      const initiator = {target: null, frameId: frame, initiatorUrl: sourceUrl};\n      const payload = await SDK.SourceMapManager.tryLoadSourceMap(sourceMapUrl, initiator);\n      return payload ? new SDK.SourceMap.SourceMap(sourceUrl, sourceMapUrl, payload) : null;\n    };\n  }\n\n  async #executeNewTrace(\n      collectedEvents: Trace.Types.Events.Event[], isFreshRecording: boolean,\n      metadata: Trace.Types.File.MetaData|null): Promise<void> {\n    await this.#traceEngineModel.parse(\n        collectedEvents,\n        {\n          metadata: metadata ?? undefined,\n          isFreshRecording,\n          resolveSourceMap: this.#createSourceMapResolver(isFreshRecording, metadata),\n        },\n    );\n\n    // Store all source maps on the trace metadata.\n    // If not fresh, we can't validate the maps are still accurate.\n    if (isFreshRecording && metadata &&\n        Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_ENHANCED_TRACES)) {\n      const traceIndex = this.#traceEngineModel.lastTraceIndex();\n      const parsedTrace = this.#traceEngineModel.parsedTrace(traceIndex);\n      if (parsedTrace) {\n        await this.#retainSourceMapsForEnhancedTrace(parsedTrace, metadata);\n      }\n    }\n  }\n\n  loadingCompleteForTest(): void {\n    // Not implemented, added only for allowing the TimelineTestRunner\n    // to be in sync when a trace load is finished.\n  }\n\n  private showRecordingStarted(): void {\n    this.#changeView({mode: 'STATUS_PANE_OVERLAY'});\n    if (this.statusDialog) {\n      this.statusDialog.remove();\n    }\n    this.statusDialog = new StatusDialog(\n        {\n          showTimer: true,\n          showProgress: true,\n          hideStopButton: false,\n          description: undefined,\n          buttonText: undefined,\n        },\n        () => this.stopRecording());\n    this.statusDialog.showPane(this.statusPaneContainer);\n    this.statusDialog.updateStatus(i18nString(UIStrings.initializingProfiler));\n    this.statusDialog.updateProgressBar(i18nString(UIStrings.bufferUsage), 0);\n  }\n\n  private cancelLoading(): void {\n    if (this.loader) {\n      void this.loader.cancel();\n    }\n  }\n\n  private async loadEventFired(\n      event: Common.EventTarget\n          .EventTargetEvent<{resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel, loadTime: number}>):\n      Promise<void> {\n    if (this.state !== State.RECORDING || !this.recordingPageReload || !this.controller ||\n        this.controller.primaryPageTarget !== event.data.resourceTreeModel.target()) {\n      return;\n    }\n    const controller = this.controller;\n    await new Promise(r => window.setTimeout(r, this.millisecondsToRecordAfterLoadEvent));\n\n    // Check if we're still in the same recording session.\n    if (controller !== this.controller || this.state !== State.RECORDING) {\n      return;\n    }\n    void this.stopRecording();\n  }\n\n  private frameForSelection(selection: TimelineSelection): Trace.Types.Events.LegacyTimelineFrame|null {\n    if (this.#viewMode.mode !== 'VIEWING_TRACE') {\n      return null;\n    }\n    if (selectionIsRange(selection)) {\n      return null;\n    }\n    if (Trace.Types.Events.isSyntheticNetworkRequest(selection.event)) {\n      return null;\n    }\n\n    // If the user has selected a random trace event, the frame we want is the last\n    // frame in that time window, hence why the window we look for is the\n    // endTime to the endTime.\n    const parsedTrace = this.#traceEngineModel.parsedTrace(this.#viewMode.traceIndex);\n    if (!parsedTrace) {\n      return null;\n    }\n    const endTime = rangeForSelection(selection).max;\n    const lastFrameInSelection = Trace.Handlers.ModelHandlers.Frames\n                                     .framesWithinWindow(\n                                         parsedTrace.Frames.frames,\n                                         endTime,\n                                         endTime,\n                                         )\n                                     .at(0);\n    return lastFrameInSelection || null;\n  }\n\n  jumpToFrame(offset: number): true|undefined {\n    if (this.#viewMode.mode !== 'VIEWING_TRACE') {\n      return;\n    }\n    const currentFrame = this.selection && this.frameForSelection(this.selection);\n    if (!currentFrame) {\n      return;\n    }\n    const parsedTrace = this.#traceEngineModel.parsedTrace(this.#viewMode.traceIndex);\n    if (!parsedTrace) {\n      return;\n    }\n    let index = parsedTrace.Frames.frames.indexOf(currentFrame);\n    console.assert(index >= 0, 'Can\\'t find current frame in the frame list');\n    index = Platform.NumberUtilities.clamp(index + offset, 0, parsedTrace.Frames.frames.length - 1);\n    const frame = parsedTrace.Frames.frames[index];\n    this.#revealTimeRange(\n        Trace.Helpers.Timing.microToMilli(frame.startTime), Trace.Helpers.Timing.microToMilli(frame.endTime));\n    this.select(selectionFromEvent(frame));\n    return true;\n  }\n\n  #announceSelectionToAria(oldSelection: TimelineSelection|null, newSelection: TimelineSelection|null): void {\n    if (oldSelection !== null && newSelection === null) {\n      UI.ARIAUtils.alert(i18nString(UIStrings.selectionCleared));\n    }\n    if (newSelection === null) {\n      return;\n    }\n\n    if (oldSelection && selectionsEqual(oldSelection, newSelection)) {\n      // Don't announce to the user if the selection has not changed.\n      return;\n    }\n\n    if (selectionIsRange(newSelection)) {\n      // We don't announce here; within the annotations code we announce when\n      // the user creates a new time range selection. So if we also announce\n      // here we will duplicate and overwhelm rather than be useful.\n      return;\n    }\n\n    // Announce the type of event that was selected (special casing frames.)\n    if (Trace.Types.Events.isLegacyTimelineFrame(newSelection.event)) {\n      UI.ARIAUtils.alert(i18nString(UIStrings.frameSelected));\n      return;\n    }\n    const name = Utils.EntryName.nameForEntry(newSelection.event);\n    UI.ARIAUtils.alert(i18nString(UIStrings.eventSelected, {PH1: name}));\n  }\n\n  select(selection: TimelineSelection|null): void {\n    this.#announceSelectionToAria(this.selection, selection);\n    this.selection = selection;\n    this.flameChart.setSelectionAndReveal(selection);\n  }\n\n  selectEntryAtTime(events: Trace.Types.Events.Event[]|null, time: number): void {\n    if (!events) {\n      return;\n    }\n\n    if (events.length === 0) {\n      this.select(null);\n      return;\n    }\n\n    // Find best match, then backtrack to the first visible entry.\n    for (let index = Platform.ArrayUtilities.upperBound(events, time, (time, event) => time - event.ts) - 1; index >= 0;\n         --index) {\n      const event = events[index];\n      const {endTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(event);\n      if (Trace.Helpers.Trace.isTopLevelEvent(event) && endTime < time) {\n        break;\n      }\n      if (ActiveFilters.instance().isVisible(event) && endTime >= time) {\n        this.select(selectionFromEvent(event));\n        return;\n      }\n    }\n    this.select(null);\n  }\n\n  highlightEvent(event: Trace.Types.Events.Event|null): void {\n    this.flameChart.highlightEvent(event);\n  }\n\n  #revealTimeRange(startTime: Trace.Types.Timing.Milli, endTime: Trace.Types.Timing.Milli): void {\n    const traceBoundsState = TraceBounds.TraceBounds.BoundsManager.instance().state();\n    if (!traceBoundsState) {\n      return;\n    }\n    const traceWindow = traceBoundsState.milli.timelineTraceWindow;\n\n    let offset = 0;\n    if (traceWindow.max < endTime) {\n      offset = endTime - traceWindow.max;\n    } else if (traceWindow.min > startTime) {\n      offset = startTime - traceWindow.min;\n    }\n    TraceBounds.TraceBounds.BoundsManager.instance().setTimelineVisibleWindow(\n        Trace.Helpers.Timing.traceWindowFromMilliSeconds(\n            Trace.Types.Timing.Milli(traceWindow.min + offset),\n            Trace.Types.Timing.Milli(traceWindow.max + offset),\n            ),\n        {\n          shouldAnimate: true,\n        },\n    );\n  }\n\n  private handleDrop(dataTransfer: DataTransfer): void {\n    const items = dataTransfer.items;\n    if (!items.length) {\n      return;\n    }\n    const item = items[0];\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.PerfPanelTraceImported);\n    if (item.kind === 'string') {\n      const url = dataTransfer.getData('text/uri-list') as Platform.DevToolsPath.UrlString;\n      if (new Common.ParsedURL.ParsedURL(url).isValid) {\n        void this.loadFromURL(url);\n      }\n    } else if (item.kind === 'file') {\n      const file = items[0].getAsFile();\n      if (!file) {\n        return;\n      }\n      void this.loadFromFile(file);\n    }\n  }\n\n  #openSummaryTab(): void {\n    // If we have a selection, we should remove it.\n    this.flameChart.setSelectionAndReveal(null);\n    this.flameChart.selectDetailsViewTab(Tab.Details, null);\n  }\n\n  /**\n   * Used to reveal an insight - and is called from the AI Assistance panel when the user clicks on the Insight context button that is shown.\n   * Revealing an insight should:\n   * 1. Ensure the sidebar is open\n   * 2. Ensure the insight is expanded\n   *    (both of these should be true in the AI Assistance case)\n   * 3. Flash the Insight with the highlight colour we use in other panels.\n   */\n  revealInsight(insightModel: Trace.Insights.Types.InsightModel): void {\n    const insightSetKey = insightModel.navigationId ?? Trace.Types.Events.NO_NAVIGATION;\n    this.#setActiveInsight({model: insightModel, insightSetKey}, {highlightInsight: true});\n  }\n\n  static async handleExternalRecordRequest(): Promise<{response: string, devToolsLogs: object[]}> {\n    Snackbars.Snackbar.Snackbar.show({message: i18nString(UIStrings.externalRequestReceived)});\n\n    const panelInstance = TimelinePanel.instance();\n    // Given how the current UX works, it's nice to show the user the Perf\n    // Panel so they see what's happening\n    await UI.ViewManager.ViewManager.instance().showView('timeline');\n\n    function onRecordingCompleted(eventData: EventTypes[Events.RECORDING_COMPLETED]):\n        {response: string, devToolsLogs: object[]} {\n      if ('errorText' in eventData) {\n        return {\n          response: `Error running the trace: ${eventData.errorText}`,\n          devToolsLogs: [],\n        };\n      }\n      const parsedTrace = panelInstance.model.parsedTrace(eventData.traceIndex);\n      const insights = panelInstance.model.traceInsights(eventData.traceIndex);\n      if (!parsedTrace || !insights || insights.size === 0) {\n        return {\n          response: 'The trace was loaded successfully but no Insights were detected.',\n          devToolsLogs: [],\n        };\n      }\n\n      const navigationId = Array.from(insights.keys()).find(k => k !== 'NO_NAVIGATION');\n      if (!navigationId) {\n        return {\n          response: 'The trace was loaded successfully but no navigation was detected.',\n          devToolsLogs: [],\n        };\n      }\n\n      const insightsForNav = insights.get(navigationId);\n      if (!insightsForNav) {\n        return {\n          response: 'The trace was loaded successfully but no Insights were detected.',\n          devToolsLogs: [],\n        };\n      }\n\n      let responseText = '';\n      for (const modelName in insightsForNav.model) {\n        const model = modelName as keyof Trace.Insights.Types.InsightModelsType;\n        const data = insightsForNav.model[model];\n        if (data.state === 'pass') {\n          continue;\n        }\n        const activeInsight = new Utils.InsightAIContext.ActiveInsight(\n            data,\n            parsedTrace,\n        );\n        const formatter = new AiAssistanceModel.PerformanceInsightFormatter(activeInsight);\n        if (!formatter.insightIsSupported()) {\n          // Not all Insights are integrated with \"Ask AI\" yet, let's avoid\n          // filling up the response with those ones because there will be no\n          // useful information.\n          continue;\n        }\n\n        responseText += `${formatter.formatInsight()}\\n\\n`;\n      }\n      return {\n        response: `Insights from this recording:\\n${responseText}`,\n        devToolsLogs: [],\n      };\n    }\n\n    return await new Promise(resolve => {\n      function listener(e: Common.EventTarget.EventTargetEvent<EventTypes[Events.RECORDING_COMPLETED]>): void {\n        resolve(onRecordingCompleted(e.data));\n        panelInstance.removeEventListener(Events.RECORDING_COMPLETED, listener);\n      }\n      panelInstance.addEventListener(Events.RECORDING_COMPLETED, listener);\n\n      panelInstance.recordReload();\n    });\n  }\n}\n\nexport const enum State {\n  IDLE = 'Idle',\n  START_PENDING = 'StartPending',\n  RECORDING = 'Recording',\n  STOP_PENDING = 'StopPending',\n  LOADING = 'Loading',\n  RECORDING_FAILED = 'RecordingFailed',\n}\n\n// Define row and header height, should be in sync with styles for timeline graphs.\nexport const rowHeight = 18;\n\nexport const headerHeight = 20;\nexport interface TimelineModeViewDelegate {\n  select(selection: TimelineSelection|null): void;\n  element: Element;\n  set3PCheckboxDisabled(disabled: boolean): void;\n  selectEntryAtTime(events: Trace.Types.Events.Event[]|null, time: number): void;\n  highlightEvent(event: Trace.Types.Events.Event|null): void;\n}\n\nexport let loadTimelineHandlerInstance: LoadTimelineHandler;\n\nexport class LoadTimelineHandler implements Common.QueryParamHandler.QueryParamHandler {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): LoadTimelineHandler {\n    const {forceNew} = opts;\n    if (!loadTimelineHandlerInstance || forceNew) {\n      loadTimelineHandlerInstance = new LoadTimelineHandler();\n    }\n\n    return loadTimelineHandlerInstance;\n  }\n\n  handleQueryParam(value: string): void {\n    void UI.ViewManager.ViewManager.instance().showView('timeline').then(async () => {\n      await TimelinePanel.instance().loadFromURL(window.decodeURIComponent(value) as Platform.DevToolsPath.UrlString);\n    });\n  }\n}\n\nexport class TraceRevealer implements Common.Revealer.Revealer<SDK.TraceObject.TraceObject> {\n  async reveal(trace: SDK.TraceObject.TraceObject): Promise<void> {\n    await UI.ViewManager.ViewManager.instance().showView('timeline');\n    TimelinePanel.instance().loadFromTraceFile(trace);\n  }\n}\n\nexport class EventRevealer implements Common.Revealer.Revealer<SDK.TraceObject.RevealableEvent> {\n  async reveal(rEvent: SDK.TraceObject.RevealableEvent): Promise<void> {\n    await UI.ViewManager.ViewManager.instance().showView('timeline');\n    TimelinePanel.instance().select(selectionFromEvent(rEvent.event));\n  }\n}\n\nexport class InsightRevealer implements Common.Revealer.Revealer<Utils.InsightAIContext.ActiveInsight> {\n  async reveal(revealable: Utils.InsightAIContext.ActiveInsight): Promise<void> {\n    await UI.ViewManager.ViewManager.instance().showView('timeline');\n    TimelinePanel.instance().revealInsight(revealable.insight);\n  }\n}\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    const panel = context.flavor(TimelinePanel);\n    if (panel === null) {\n      return false;\n    }\n    switch (actionId) {\n      case 'timeline.toggle-recording':\n        void panel.toggleRecording();\n        return true;\n      case 'timeline.record-reload':\n        panel.recordReload();\n        return true;\n      case 'timeline.save-to-file':\n        void panel.saveToFile({savingEnhancedTrace: false, addModifications: false});\n        return true;\n      case 'timeline.load-from-file':\n        panel.selectFileToLoad();\n        return true;\n      case 'timeline.jump-to-previous-frame':\n        panel.jumpToFrame(-1);\n        return true;\n      case 'timeline.jump-to-next-frame':\n        panel.jumpToFrame(1);\n        return true;\n      case 'timeline.show-history':\n        void panel.showHistoryDropdown();\n        return true;\n      case 'timeline.previous-recording':\n        panel.navigateHistory(1);\n        return true;\n      case 'timeline.next-recording':\n        panel.navigateHistory(-1);\n        return true;\n    }\n    return false;\n  }\n}\n\n/**\n * Used to set the UI.Context when the user expands an Insight. This is only\n * relied upon in the AI Agent code to know which agent to pick by default based\n * on the context of the panel.\n */\nexport class SelectedInsight {\n  constructor(public insight: TimelineComponents.Sidebar.ActiveInsight) {\n  }\n}\nexport const enum Events {\n  IS_VIEWING_TRACE = 'IsViewingTrace',\n  RECORDING_COMPLETED = 'RecordingCompleted',\n}\nexport interface EventTypes {\n  [Events.IS_VIEWING_TRACE]: boolean;\n  [Events.RECORDING_COMPLETED]: {traceIndex: number}|{errorText: string};\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Menus from '../../ui/components/menus/menus.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n   *@description Text to show an item is empty\n   */\n  empty: '(empty)',\n  /**\n   *@description Text in isolate selector in Performance panel\n   */\n  selectJavascriptVmInstance: 'Select JavaScript VM instance',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/IsolateSelector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class IsolateSelector extends UI.Toolbar.ToolbarItem implements SDK.IsolateManager.Observer {\n  menu: Menus.SelectMenu.SelectMenu;\n  options?: Array<{index: number, isolate: SDK.IsolateManager.Isolate}>;\n  items?: Menus.Menu.MenuItem[];\n  readonly itemByIsolate = new Map<SDK.IsolateManager.Isolate, Menus.Menu.MenuItem>();\n\n  constructor() {\n    const menu = new Menus.SelectMenu.SelectMenu();\n    super(menu);\n\n    this.menu = menu;\n    menu.buttonTitle = i18nString(UIStrings.selectJavascriptVmInstance);\n    menu.showArrow = true;\n    menu.style.whiteSpace = 'normal';\n\n    menu.addEventListener('selectmenuselected', this.#onSelectMenuSelected.bind(this));\n\n    SDK.IsolateManager.IsolateManager.instance().observeIsolates(this);\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.NAME_CHANGED, this.targetChanged, this);\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.INSPECTED_URL_CHANGED, this.targetChanged, this);\n  }\n\n  #updateIsolateItem(isolate: SDK.IsolateManager.Isolate, itemForIsolate: Menus.Menu.MenuItem): void {\n    const modelCountByName = new Map<string, number>();\n    for (const model of isolate.models()) {\n      const target = model.target();\n      const name = SDK.TargetManager.TargetManager.instance().rootTarget() !== target ? target.name() : '';\n      const parsedURL = new Common.ParsedURL.ParsedURL(target.inspectedURL());\n      const domain = parsedURL.isValid ? parsedURL.domain() : '';\n      const title =\n          target.decorateLabel(domain && name ? `${domain}: ${name}` : name || domain || i18nString(UIStrings.empty));\n      modelCountByName.set(title, (modelCountByName.get(title) || 0) + 1);\n    }\n    itemForIsolate.removeChildren();\n    for (const [name, count] of modelCountByName) {\n      const modelTitle = count > 1 ? `${name} (${count})` : name;\n\n      const modelItem = itemForIsolate.createChild('div');\n      modelItem.textContent = modelTitle;\n    }\n  }\n\n  #onSelectMenuSelected(event: Menus.SelectMenu.SelectMenuItemSelectedEvent): void {\n    this.itemByIsolate.forEach((item, isolate) => {\n      item.selected = item.value === event.itemValue;\n\n      if (item.selected) {\n        // Get the first 29 characters to show in the menu, because the full title is too long and the menu's space is\n        // limited.\n        // Chose 29 because it is the length of the placeholder string \"Select JavaScript VM instance\".\n        const selectedIsolateTitle = item.textContent?.slice(0, 29);\n        this.menu.buttonTitle = selectedIsolateTitle || i18nString(UIStrings.empty);\n\n        const model = isolate.runtimeModel();\n        UI.Context.Context.instance().setFlavor(\n            SDK.CPUProfilerModel.CPUProfilerModel,\n            model?.target().model(SDK.CPUProfilerModel.CPUProfilerModel) ?? null,\n        );\n      }\n    });\n  }\n\n  isolateAdded(isolate: SDK.IsolateManager.Isolate): void {\n    const isolateItem = new Menus.Menu.MenuItem();\n    this.menu.appendChild(isolateItem);\n    isolateItem.value = isolate.id();\n    this.itemByIsolate.set(isolate, isolateItem);\n    this.#updateIsolateItem(isolate, isolateItem);\n  }\n\n  isolateRemoved(isolate: SDK.IsolateManager.Isolate): void {\n    const isolateItem = this.itemByIsolate.get(isolate);\n    if (isolateItem) {\n      if (isolateItem.selected) {\n        this.menu.buttonTitle = i18nString(UIStrings.selectJavascriptVmInstance);\n        UI.Context.Context.instance().setFlavor(SDK.CPUProfilerModel.CPUProfilerModel, null);\n      }\n      this.menu.removeChild(isolateItem);\n    }\n  }\n\n  isolateChanged(isolate: SDK.IsolateManager.Isolate): void {\n    const isolateItem = this.itemByIsolate.get(isolate);\n    if (isolateItem) {\n      this.#updateIsolateItem(isolate, isolateItem);\n    }\n  }\n\n  targetChanged(event: Common.EventTarget.EventTargetEvent<SDK.Target.Target>): void {\n    const target = event.data;\n    const model = target.model(SDK.RuntimeModel.RuntimeModel);\n    if (!model) {\n      return;\n    }\n    const isolate = SDK.IsolateManager.IsolateManager.instance().isolateByModel(model);\n    if (isolate) {\n      this.isolateChanged(isolate);\n    }\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as Trace from '../../models/trace/trace.js';\n/**\n * Generates a JSON representation of an array of objects with the objects\n * printed one per line for improved readability (but not *too* verbose).\n */\nexport function*\n    arrayOfObjectsJsonGenerator(arrayOfObjects: readonly Trace.Types.Events.Event[]): IterableIterator<string> {\n  const ITEMS_PER_ITERATION = 10_000;\n\n  // Stringify and emit items separately to avoid a giant string in memory.\n  yield '[\\n';\n  if (arrayOfObjects.length > 0) {\n    const itemsIterator = arrayOfObjects[Symbol.iterator]();\n    // Emit first item manually to avoid a trailing comma.\n    const firstItem = itemsIterator.next().value;\n    yield `  ${JSON.stringify(firstItem)}`;\n\n    let itemsRemaining = ITEMS_PER_ITERATION;\n    let itemsJSON = '';\n    for (const item of itemsIterator) {\n      itemsJSON += `,\\n  ${JSON.stringify(item)}`;\n      itemsRemaining--;\n      if (itemsRemaining === 0) {\n        yield itemsJSON;\n        itemsRemaining = ITEMS_PER_ITERATION;\n        itemsJSON = '';\n      }\n    }\n    yield itemsJSON;\n  }\n  yield '\\n]';\n}\n/**\n * Generates a JSON representation of the TraceObject file line-by-line for a nicer printed\n * version with one trace event per line.\n */\nexport function*\n    traceJsonGenerator(\n        traceEvents: readonly Trace.Types.Events.Event[],\n        metadata: Readonly<Trace.Types.File.MetaData>|null,\n        ): IterableIterator<string> {\n  // Ensure that enhancedTraceVersion is placed at the top of metadata. See `maximumTraceFileLengthToDetermineEnhancedTraces`\n  if (metadata?.enhancedTraceVersion) {\n    metadata = {\n      enhancedTraceVersion: metadata.enhancedTraceVersion,\n      ...metadata,\n    };\n  }\n\n  yield `{\"metadata\": ${JSON.stringify(metadata || {}, null, 2)}`;\n  yield ',\\n\"traceEvents\": ';\n  yield* arrayOfObjectsJsonGenerator(traceEvents);\n  yield '}\\n';\n}\n\n/**\n * Generates a JSON representation of CPU profile.\n */\nexport function cpuprofileJsonGenerator(cpuprofile: Protocol.Profiler.Profile): string {\n  return JSON.stringify(cpuprofile);\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport '../../ui/legacy/legacy.js';\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Trace from '../../models/trace/trace.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport type * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {traceJsonGenerator} from './SaveFileFormatter.js';\nimport timelineStatusDialogStyles from './timelineStatusDialog.css.js';\n\nconst UIStrings = {\n  /**\n   *@description Text to download the trace file after an error\n   */\n  downloadAfterError: 'Download trace',\n  /**\n   *@description Text for the status of something\n   */\n  status: 'Status',\n  /**\n   *@description Text that refers to the time\n   */\n  time: 'Time',\n  /**\n   *@description Text for the description of something\n   */\n  description: 'Description',\n  /**\n   *@description Text of an item that stops the running task\n   */\n  stop: 'Stop',\n\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/StatusDialog.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * This is the dialog shown whilst a trace is being recorded/imported.\n */\nexport class StatusDialog extends UI.Widget.VBox {\n  private status: HTMLElement;\n  private time: Element|undefined;\n  private progressLabel?: HTMLElement;\n  private progressBar?: HTMLElement;\n  private readonly description: HTMLElement|undefined;\n  private button: Buttons.Button.Button;\n  private downloadTraceButton: Buttons.Button.Button;\n  private startTime!: number;\n  private timeUpdateTimer?: number;\n  #rawEvents?: Trace.Types.Events.Event[];\n\n  constructor(\n      options: {\n        hideStopButton: boolean,\n        showTimer?: boolean,\n        showProgress?: boolean,\n        description?: string,\n        buttonText?: string,\n      },\n      onButtonClickCallback: () => (Promise<void>| void)) {\n    super(true);\n\n    this.contentElement.classList.add('timeline-status-dialog');\n    this.contentElement.setAttribute('jslog', `${VisualLogging.dialog('timeline-status').track({resize: true})}`);\n\n    const statusLine = this.contentElement.createChild('div', 'status-dialog-line status');\n    statusLine.createChild('div', 'label').textContent = i18nString(UIStrings.status);\n    this.status = statusLine.createChild('div', 'content');\n    UI.ARIAUtils.markAsStatus(this.status);\n\n    if (options.showTimer) {\n      const timeLine = this.contentElement.createChild('div', 'status-dialog-line time');\n      timeLine.createChild('div', 'label').textContent = i18nString(UIStrings.time);\n      this.time = timeLine.createChild('div', 'content');\n    }\n\n    if (options.showProgress) {\n      const progressBarContainer = this.contentElement.createChild('div', 'status-dialog-line progress');\n      this.progressLabel = progressBarContainer.createChild('div', 'label');\n      this.progressBar = progressBarContainer.createChild('div', 'indicator-container').createChild('div', 'indicator');\n      UI.ARIAUtils.markAsProgressBar(this.progressBar);\n    }\n\n    if (typeof options.description === 'string') {\n      const descriptionLine = this.contentElement.createChild('div', 'status-dialog-line description');\n      descriptionLine.createChild('div', 'label').textContent = i18nString(UIStrings.description);\n      this.description = descriptionLine.createChild('div', 'content');\n      this.description.innerText = options.description;\n    }\n\n    const buttonContainer = this.contentElement.createChild('div', 'stop-button');\n    this.downloadTraceButton = UI.UIUtils.createTextButton(i18nString(UIStrings.downloadAfterError), () => {\n      void this.#downloadRawTraceAfterError();\n    }, {jslogContext: 'timeline.download-after-error'});\n\n    this.downloadTraceButton.disabled = true;\n    this.downloadTraceButton.classList.add('hidden');\n\n    const buttonText = options.buttonText || i18nString(UIStrings.stop);\n    this.button = UI.UIUtils.createTextButton(buttonText, onButtonClickCallback, {\n      jslogContext: 'timeline.stop-recording',\n    });\n    // Profiling can't be stopped during initialization.\n    this.button.classList.toggle('hidden', options.hideStopButton);\n\n    buttonContainer.append(this.downloadTraceButton);\n    buttonContainer.append(this.button);\n  }\n\n  finish(): void {\n    this.stopTimer();\n    this.button.classList.add('hidden');\n  }\n\n  async #downloadRawTraceAfterError(): Promise<void> {\n    if (!this.#rawEvents || this.#rawEvents.length === 0) {\n      return;\n    }\n    const traceStart = Platform.DateUtilities.toISO8601Compact(new Date());\n    const fileName = `Trace-Load-Error-${traceStart}.json` as Platform.DevToolsPath.RawPathString;\n    const formattedTraceIter = traceJsonGenerator(this.#rawEvents, {});\n    const traceAsString = Array.from(formattedTraceIter).join('');\n    await Workspace.FileManager.FileManager.instance().save(\n        fileName, new TextUtils.ContentData.ContentData(traceAsString, /* isBase64=*/ false, 'application/json'),\n        /* forceSaveAs=*/ true);\n    Workspace.FileManager.FileManager.instance().close(fileName);\n  }\n\n  enableDownloadOfEvents(rawEvents: Trace.Types.Events.Event[]): void {\n    this.#rawEvents = rawEvents;\n    this.downloadTraceButton.disabled = false;\n    this.downloadTraceButton.classList.remove('hidden');\n  }\n\n  remove(): void {\n    (this.element.parentNode as HTMLElement)?.classList.remove('tinted');\n    this.stopTimer();\n    this.element.remove();\n  }\n\n  showPane(parent: Element): void {\n    this.show(parent);\n    parent.classList.add('tinted');\n  }\n\n  enableAndFocusButton(): void {\n    this.button.classList.remove('hidden');\n    this.button.focus();\n  }\n\n  updateStatus(text: string): void {\n    this.status.textContent = text;\n  }\n\n  updateProgressBar(activity: string, percent: number): void {\n    if (this.progressLabel) {\n      this.progressLabel.textContent = activity;\n    }\n    if (this.progressBar) {\n      this.progressBar.style.width = percent.toFixed(1) + '%';\n      UI.ARIAUtils.setValueNow(this.progressBar, percent);\n    }\n    this.updateTimer();\n  }\n\n  startTimer(): void {\n    this.startTime = Date.now();\n    this.timeUpdateTimer = window.setInterval(this.updateTimer.bind(this), 100);\n    this.updateTimer();\n  }\n\n  private stopTimer(): void {\n    if (!this.timeUpdateTimer) {\n      return;\n    }\n    clearInterval(this.timeUpdateTimer);\n    this.updateTimer();\n    delete this.timeUpdateTimer;\n  }\n\n  private updateTimer(): void {\n    if (!this.timeUpdateTimer || !this.time) {\n      return;\n    }\n\n    const seconds = (Date.now() - this.startTime) / 1000;\n    this.time.textContent = i18n.TimeUtilities.preciseSecondsToString(seconds, 1);\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.registerRequiredCSS(timelineStatusDialogStyles);\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright (c) 2015 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.timeline-status-dialog {\n  display: flex;\n  flex-direction: column;\n  padding: 16px 16px 12px;\n  align-self: center;\n  background-color: var(--sys-color-cdt-base-container);\n  box-shadow: var(--drop-shadow);\n  border-radius: 10px;\n}\n\n.status-dialog-line {\n  margin: 2px;\n  height: 14px;\n  min-height: auto;\n  display: flex;\n  align-items: baseline;\n  font-variant-numeric: tabular-nums;\n}\n\n.status-dialog-line .label {\n  display: inline-block;\n  width: 80px;\n  text-align: right;\n  color: var(--sys-color-on-surface);\n  margin-right: 10px;\n}\n\n.timeline-status-dialog .progress .indicator-container {\n  display: inline-block;\n  width: 200px;\n  height: 8px;\n  background-color: var(--sys-color-surface5);\n}\n\n.timeline-status-dialog .progress .indicator {\n  background-color: var(--sys-color-primary);\n  height: 100%;\n  width: 0;\n  margin: 0;\n}\n\n.timeline-status-dialog .stop-button {\n  margin-top: 8px;\n  height: 100%;\n  align-self: flex-end;\n}\n\n.timeline-status-dialog .stop-button button {\n  border-radius: 12px;\n}\n\n@media (forced-colors: active) {\n  .timeline-status-dialog {\n    border: 1px solid canvastext;\n  }\n\n  .timeline-status-dialog .progress .indicator-container {\n    border: 1px solid ButtonText;\n    background-color: ButtonFace;\n  }\n\n  .timeline-status-dialog .progress .indicator {\n    forced-color-adjust: none;\n    background-color: ButtonText;\n  }\n}\n\n:host {\n  container-type: inline-size;\n}\n\n/* 326 is the widths above (200 + 80) + a bunch of padding. calc() can't be used here sadly */\n@container (max-width: 326px) {\n  .timeline-status-dialog {\n    box-shadow: none;\n\n    .stop-button {\n      align-self: center;\n    }\n  }\n\n  .status-dialog-line {\n    flex-direction: column;\n\n    .label {\n      display: none;\n    }\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./timelineStatusDialog.css')} */`;", "// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as CrUXManager from '../../models/crux-manager/crux-manager.js';\nimport * as Extensions from '../../models/extensions/extensions.js';\nimport * as LiveMetrics from '../../models/live-metrics/live-metrics.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as Tracing from '../../services/tracing/tracing.js';\n\nimport * as RecordingMetadata from './RecordingMetadata.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Controller of the Performance panel indicating that the Performance Panel cannot\n   * record a performance trace because the type of target (where possible types are page, service worker and shared\n   * worker) doesn't support it.\n   */\n  tracingNotSupported: 'Performance trace recording not supported for this type of target',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineController.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class TimelineController implements Tracing.TracingManager.TracingManagerClient {\n  readonly primaryPageTarget: SDK.Target.Target;\n  readonly rootTarget: SDK.Target.Target;\n  private tracingManager: Tracing.TracingManager.TracingManager|null;\n  #collectedEvents: Trace.Types.Events.Event[] = [];\n  #navigationUrls: string[] = [];\n  #fieldData: CrUXManager.PageResult[]|null = null;\n  #recordingStartTime: number|null = null;\n  private readonly client: Client;\n  private tracingCompletePromise: PromiseWithResolvers<void>|null = null;\n\n  /**\n   * We always need to profile against the DevTools root target, which is\n   * the target that DevTools is attached to.\n   *\n   * In most cases, this will be the tab that DevTools is inspecting.\n   * Now pre-rendering is active, tabs can have multiple pages - only one\n   * of which the user is being shown. This is the \"primary page\" and hence\n   * why in code we have \"primaryPageTarget\". When there's a prerendered\n   * page in a background, tab target would have multiple subtargets, one\n   * of them being primaryPageTarget.\n   *\n   * The problems with using primary page target for tracing are:\n   * 1. Performance trace doesn't include information from the other pages on\n   *    the tab which is probably not what the user wants as it does not\n   *    reflect reality.\n   * 2. Capturing trace never finishes after prerendering activation as\n   *    we've started on one target and ending on another one, and\n   *    tracingComplete event never gets processed.\n   *\n   * However, when we want to look at the URL of the current page, we need\n   * to use the primaryPageTarget to ensure we get the URL of the tab and\n   * the tab's page that is being shown to the user. This is because the tab\n   * target (which is what rootTarget is) only exposes the Target and Tracing\n   * domains. We need the Page target to navigate as it implements the Page\n   * domain. That is why here we have to store both.\n   **/\n  constructor(rootTarget: SDK.Target.Target, primaryPageTarget: SDK.Target.Target, client: Client) {\n    this.primaryPageTarget = primaryPageTarget;\n    this.rootTarget = rootTarget;\n    // Ensure the tracing manager is the one for the Root Target, NOT the\n    // primaryPageTarget, as that is the one we have to invoke tracing against.\n    this.tracingManager = rootTarget.model(Tracing.TracingManager.TracingManager);\n    this.client = client;\n  }\n\n  async dispose(): Promise<void> {\n    if (this.tracingManager) {\n      await this.tracingManager.reset();\n    }\n  }\n\n  async startRecording(options: RecordingOptions): Promise<Protocol.ProtocolResponseWithError> {\n    function disabledByDefault(category: string): string {\n      return 'disabled-by-default-' + category;\n    }\n\n    // The following categories are also used in other tools, but this panel\n    // offers the possibility of turning them off (see below).\n    // 'disabled-by-default-devtools.screenshot'\n    //   └ default: on, option: captureFilmStrip\n    // 'disabled-by-default-devtools.timeline.invalidationTracking'\n    //   └ default: off, experiment: timelineInvalidationTracking\n    // 'disabled-by-default-v8.cpu_profiler'\n    //   └ default: on, option: enableJSSampling\n    const categoriesArray = [\n      Root.Runtime.experiments.isEnabled('timeline-show-all-events') ? '*' : '-*',\n      Trace.Types.Events.Categories.Console,\n      Trace.Types.Events.Categories.Loading,\n      Trace.Types.Events.Categories.UserTiming,\n      'devtools.timeline',\n      disabledByDefault('devtools.target-rundown'),\n      disabledByDefault('devtools.timeline.frame'),\n      disabledByDefault('devtools.timeline.stack'),\n      disabledByDefault('devtools.timeline'),\n      disabledByDefault('devtools.v8-source-rundown-sources'),\n      disabledByDefault('devtools.v8-source-rundown'),\n      disabledByDefault('layout_shift.debug'),\n      // Looking for disabled-by-default-v8.compile? We disabled it: crbug.com/414330508.\n      disabledByDefault('v8.inspector'),\n      disabledByDefault('v8.cpu_profiler.hires'),\n      disabledByDefault('lighthouse'),\n      'v8.execute',\n      'v8',\n      'cppgc',\n      'navigation,rail',\n    ];\n\n    if (Root.Runtime.experiments.isEnabled('timeline-v8-runtime-call-stats') && options.enableJSSampling) {\n      categoriesArray.push(disabledByDefault('v8.runtime_stats_sampling'));\n    }\n    if (options.enableJSSampling) {\n      categoriesArray.push(disabledByDefault('v8.cpu_profiler'));\n    }\n    if (Root.Runtime.experiments.isEnabled('timeline-invalidation-tracking')) {\n      categoriesArray.push(disabledByDefault('devtools.timeline.invalidationTracking'));\n    }\n    if (options.capturePictures) {\n      categoriesArray.push(\n          disabledByDefault('devtools.timeline.layers'), disabledByDefault('devtools.timeline.picture'),\n          disabledByDefault('blink.graphics_context_annotations'));\n    }\n    if (options.captureFilmStrip) {\n      categoriesArray.push(disabledByDefault('devtools.screenshot'));\n    }\n    if (options.captureSelectorStats) {\n      categoriesArray.push(disabledByDefault('blink.debug'));\n    }\n\n    await LiveMetrics.LiveMetrics.instance().disable();\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.FrameNavigated, this.#onFrameNavigated,\n        this);\n\n    this.#navigationUrls = [];\n    this.#fieldData = null;\n    this.#recordingStartTime = Date.now();\n    const response = await this.startRecordingWithCategories(categoriesArray.join(','));\n    if (response.getError()) {\n      await SDK.TargetManager.TargetManager.instance().resumeAllTargets();\n    }\n    return response;\n  }\n\n  async #onFrameNavigated(event: {data: SDK.ResourceTreeModel.ResourceTreeFrame}): Promise<void> {\n    if (!event.data.isPrimaryFrame()) {\n      return;\n    }\n\n    this.#navigationUrls.push(event.data.url);\n  }\n\n  async stopRecording(): Promise<void> {\n    if (this.tracingManager) {\n      this.tracingManager.stop();\n    }\n\n    SDK.TargetManager.TargetManager.instance().removeModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.FrameNavigated, this.#onFrameNavigated,\n        this);\n\n    // When throttling is applied to the main renderer, it can slow down the\n    // collection of trace events once tracing has completed. Therefore we\n    // temporarily disable throttling whilst the final trace event collection\n    // takes place. Once it is done, we re-enable it (this is the existing\n    // behaviour within DevTools; the throttling settling is sticky + global).\n    const throttlingManager = SDK.CPUThrottlingManager.CPUThrottlingManager.instance();\n    const optionDuringRecording = throttlingManager.cpuThrottlingOption();\n    throttlingManager.setCPUThrottlingOption(SDK.CPUThrottlingManager.NoThrottlingOption);\n\n    this.client.loadingStarted();\n\n    // Give `TimelinePanel.#executeNewTrace` a chance to retain source maps from SDK.SourceMap.SourceMapManager.\n    SDK.SourceMap.SourceMap.retainRawSourceMaps = true;\n\n    const [fieldData] =\n        await Promise\n            .all([\n              this.fetchFieldData(),\n              // TODO(crbug.com/366072294): Report the progress of this resumption, as it can be lengthy on heavy pages.\n              SDK.TargetManager.TargetManager.instance().resumeAllTargets(),\n              this.waitForTracingToStop(),\n            ])\n            .catch(e => {\n              // Normally set false in allSourcesFinished, but just in case something fails, catch it here.\n              SDK.SourceMap.SourceMap.retainRawSourceMaps = false;\n              throw e;\n            });\n    this.#fieldData = fieldData;\n\n    // Now we re-enable throttling again to maintain the setting being persistent.\n    throttlingManager.setCPUThrottlingOption(optionDuringRecording);\n    await this.allSourcesFinished();\n\n    await LiveMetrics.LiveMetrics.instance().enable();\n  }\n\n  private async fetchFieldData(): Promise<CrUXManager.PageResult[]|null> {\n    const cruxManager = CrUXManager.CrUXManager.instance();\n    if (!cruxManager.isEnabled() || !navigator.onLine) {\n      return null;\n    }\n\n    const urls = [...new Set(this.#navigationUrls)];\n    return await Promise.all(urls.map(url => cruxManager.getFieldDataForPage(url)));\n  }\n\n  private async waitForTracingToStop(): Promise<void> {\n    if (this.tracingManager) {\n      await this.tracingCompletePromise?.promise;\n    }\n  }\n\n  private async startRecordingWithCategories(categories: string): Promise<Protocol.ProtocolResponseWithError> {\n    if (!this.tracingManager) {\n      throw new Error(i18nString(UIStrings.tracingNotSupported));\n    }\n    // There might be a significant delay in the beginning of timeline recording\n    // caused by starting CPU profiler, that needs to traverse JS heap to collect\n    // all the functions data.\n    await SDK.TargetManager.TargetManager.instance().suspendAllTargets('performance-timeline');\n    this.tracingCompletePromise = Promise.withResolvers();\n    const response = await this.tracingManager.start(this, categories);\n    await this.warmupJsProfiler();\n    Extensions.ExtensionServer.ExtensionServer.instance().profilingStarted();\n    return response;\n  }\n\n  // CPUProfiler::StartProfiling has a non-trivial cost and we'd prefer it not happen within an\n  // interaction as that complicates debugging interaction latency.\n  // To trigger the StartProfiling interrupt and get the warmup cost out of the way, we send a\n  // very soft invocation to V8.https://crbug.com/1358602\n  async warmupJsProfiler(): Promise<void> {\n    // primaryPageTarget has RuntimeModel whereas rootTarget (Tab) does not.\n    const runtimeModel = this.primaryPageTarget.model(SDK.RuntimeModel.RuntimeModel);\n    if (!runtimeModel) {\n      return;\n    }\n    await runtimeModel.agent.invoke_evaluate({\n      expression: '(async function(){ await 1; })()',\n      throwOnSideEffect: true,\n    });\n  }\n\n  traceEventsCollected(events: Trace.Types.Events.Event[]): void {\n    this.#collectedEvents.push(...events);\n  }\n\n  tracingComplete(): void {\n    if (!this.tracingCompletePromise) {\n      return;\n    }\n    this.tracingCompletePromise.resolve(undefined);\n    this.tracingCompletePromise = null;\n  }\n\n  private async allSourcesFinished(): Promise<void> {\n    Extensions.ExtensionServer.ExtensionServer.instance().profilingStopped();\n\n    this.client.processingStarted();\n    const metadata = await RecordingMetadata.forTrace({\n      recordingStartTime: this.#recordingStartTime ?? undefined,\n      cruxFieldData: this.#fieldData ?? undefined,\n    });\n    await this.client.loadingComplete(this.#collectedEvents, /* exclusiveFilter= */ null, metadata);\n    this.client.loadingCompleteForTest();\n    SDK.SourceMap.SourceMap.retainRawSourceMaps = false;\n  }\n\n  tracingBufferUsage(usage: number): void {\n    this.client.recordingProgress(usage);\n  }\n\n  eventsRetrievalProgress(progress: number): void {\n    this.client.loadingProgress(progress);\n  }\n}\n\nexport interface Client {\n  recordingProgress(usage: number): void;\n  loadingStarted(): void;\n  processingStarted(): void;\n  loadingProgress(progress?: number): void;\n  loadingComplete(\n      collectedEvents: Trace.Types.Events.Event[], exclusiveFilter: Trace.Extras.TraceFilter.TraceFilter|null,\n      metadata: Trace.Types.File.MetaData|null): Promise<void>;\n  loadingCompleteForTest(): void;\n}\nexport interface RecordingOptions {\n  enableJSSampling?: boolean;\n  capturePictures?: boolean;\n  captureFilmStrip?: boolean;\n  captureSelectorStats?: boolean;\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as CrUXManager from '../../models/crux-manager/crux-manager.js';\nimport * as EmulationModel from '../../models/emulation/emulation.js';\nimport * as Trace from '../../models/trace/trace.js';\n\nexport interface DataFromController {\n  recordingStartTime?: number;\n  cruxFieldData?: CrUXManager.PageResult[]|null;\n}\n\n/**\n * We do not track any custom metadata for CPU Profiles.\n */\nexport function forCPUProfile(): Trace.Types.File.MetaData {\n  return {\n    dataOrigin: Trace.Types.File.DataOrigin.CPU_PROFILE,\n  };\n}\n\n/**\n * Calculates and returns the Metadata for the last trace recording.\n * Wrapped in a try/catch because if anything goes wrong, we don't want to\n * break DevTools; we would rather just store no metadata.\n */\nexport async function forTrace(dataFromController: DataFromController = {}): Promise<Trace.Types.File.MetaData> {\n  try {\n    return await innerForTraceCalculate(dataFromController);\n  } catch {\n    return {};\n  }\n}\n\nasync function innerForTraceCalculate({recordingStartTime, cruxFieldData}: DataFromController = {}):\n    Promise<Trace.Types.File.MetaData> {\n  const deviceModeModel = EmulationModel.DeviceModeModel.DeviceModeModel.tryInstance();\n  let emulatedDeviceTitle;\n  if (deviceModeModel?.type() === EmulationModel.DeviceModeModel.Type.Device) {\n    emulatedDeviceTitle = deviceModeModel.device()?.title ?? undefined;\n  } else if (deviceModeModel?.type() === EmulationModel.DeviceModeModel.Type.Responsive) {\n    emulatedDeviceTitle = 'Responsive';\n  }\n\n  const cpuThrottling = SDK.CPUThrottlingManager.CPUThrottlingManager.instance().cpuThrottlingRate();\n  const networkConditions = SDK.NetworkManager.MultitargetNetworkManager.instance().isThrottling() ?\n      SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions() :\n      undefined;\n\n  let networkThrottlingConditions;\n  let networkTitle;\n  if (networkConditions) {\n    networkThrottlingConditions = {\n      download: networkConditions.download,\n      upload: networkConditions.upload,\n      latency: networkConditions.latency,\n      packetLoss: networkConditions.packetLoss,\n      packetQueueLength: networkConditions.packetQueueLength,\n      packetReordering: networkConditions.packetReordering,\n      targetLatency: networkConditions.targetLatency,\n    };\n    networkTitle = typeof networkConditions.title === 'function' ? networkConditions.title() : networkConditions.title;\n  }\n\n  return {\n    source: 'DevTools',\n    startTime: recordingStartTime ? new Date(recordingStartTime).toJSON() : undefined,  // ISO-8601 timestamp\n    emulatedDeviceTitle,\n    cpuThrottling: cpuThrottling !== 1 ? cpuThrottling : undefined,\n    networkThrottling: networkTitle,\n    networkThrottlingConditions,\n    dataOrigin: Trace.Types.File.DataOrigin.TRACE_EVENTS,\n    cruxFieldData: cruxFieldData ?? undefined,\n    hostDPR: window.devicePixelRatio,\n  };\n}\n", "// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {\n  type TimelineEventOverview,\n  TimelineEventOverviewCPUActivity,\n  TimelineEventOverviewNetwork,\n  TimelineEventOverviewResponsiveness,\n} from './TimelineEventOverview.js';\nimport timelineHistoryManagerStyles from './timelineHistoryManager.css.js';\nimport type {TimelineMiniMap} from './TimelineMiniMap.js';\n\n/**\n * The dropdown works by returning an index which is the trace index; but we\n * also need a way to signify that the user picked the \"Landing Page\" option. We\n * represent that as Infinity so we never accidentally collide with an actual\n * trace (in reality a large number like 99 would probably suffice...)\n */\nexport const LANDING_PAGE_INDEX_DROPDOWN_CHOICE = Infinity;\n\nconst UIStrings = {\n  /**\n   *@description Screen reader label for the Timeline History dropdown button\n   *@example {example.com #3} PH1\n   *@example {Show recent timeline sessions} PH2\n   */\n  currentSessionSS: 'Current session: {PH1}. {PH2}',\n  /**\n   *@description the title shown when the user is viewing the landing page which is showing live performance metrics that are updated automatically.\n   */\n  landingPageTitle: 'Live metrics',\n  /**\n   * @description the title shown when the user is viewing the landing page which can be used to make a new performance recording.\n   */\n  nodeLandingPageTitle: 'New recording',\n  /**\n   *@description Text in Timeline History Manager of the Performance panel\n   *@example {example.com} PH1\n   *@example {2} PH2\n   */\n  sD: '{PH1} #{PH2}',\n  /**\n   *@description Accessible label for the timeline session selection menu\n   */\n  selectTimelineSession: 'Select timeline session',\n  /**\n   * @description Text label for a menu item indicating that a specific slowdown multiplier is applied.\n   * @example {2} PH1\n   */\n  dSlowdown: '{PH1}× slowdown',\n  /**\n   * @description Tooltip text that appears when hovering over the Back arrow inside the 'Select Timeline Session' dropdown in the Performance pane.\n   */\n  backButtonTooltip: 'View live metrics page',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineHistoryManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * The dropdown includes an option to navigate to the landing page; hence the\n * two types for storing recordings. The TimelineHistoryManager automatically\n * includes a link to go back to the landing page.\n */\ninterface TraceRecordingHistoryItem {\n  type: 'TRACE_INDEX';\n  // By storing only the index of this trace, the TimelinePanel can then look\n  // up this trace's data (and metadata) via this index.\n  parsedTraceIndex: number;\n}\ninterface LandingPageHistoryItem {\n  type: 'LANDING_PAGE';\n}\nexport type RecordingData = TraceRecordingHistoryItem|LandingPageHistoryItem;\n\nexport interface NewHistoryRecordingData {\n  // The data we will save to restore later.\n  data: TraceRecordingHistoryItem;\n  // We do not store this, but need it to build the thumbnail preview.\n  filmStripForPreview: Trace.Extras.FilmStrip.Data|null;\n  // Also not stored, but used to create the preview overview for a new trace.\n  parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  metadata: Trace.Types.File.MetaData|null;\n}\n\n// Lazily instantiate the formatter as the constructor takes 50ms+\n// TODO: move me and others like me to i18n module\nconst listFormatter = (function defineFormatter() {\n  let intlListFormat: Intl.ListFormat;\n  return {\n    format(...args: Parameters<Intl.ListFormat['format']>): ReturnType<Intl.ListFormat['format']> {\n      if (!intlListFormat) {\n        const opts: Intl.ListFormatOptions = {type: 'unit', style: 'short'};\n        intlListFormat = new Intl.ListFormat(i18n.DevToolsLocale.DevToolsLocale.instance().locale, opts);\n      }\n      return intlListFormat.format(...args);\n    },\n  };\n})();\n\nexport class TimelineHistoryManager {\n  private recordings: TraceRecordingHistoryItem[];\n  private readonly action: UI.ActionRegistration.Action;\n  private readonly nextNumberByDomain: Map<string, number>;\n  private readonly buttonInternal: ToolbarButton;\n  private readonly allOverviews: Array<{\n    constructor: (parsedTrace: Trace.Handlers.Types.ParsedTrace) => TimelineEventOverview,\n    height: number,\n  }>;\n  private totalHeight: number;\n  private enabled: boolean;\n  private lastActiveTrace: RecordingData|null = null;\n  #minimapComponent?: TimelineMiniMap;\n  #landingPageTitle: Common.UIString.LocalizedString;\n\n  constructor(minimapComponent?: TimelineMiniMap, isNode?: boolean) {\n    this.recordings = [];\n    this.#minimapComponent = minimapComponent;\n    this.action = UI.ActionRegistry.ActionRegistry.instance().getAction('timeline.show-history');\n    this.nextNumberByDomain = new Map();\n    this.buttonInternal = new ToolbarButton(this.action);\n\n    this.#landingPageTitle =\n        isNode ? i18nString(UIStrings.nodeLandingPageTitle) : i18nString(UIStrings.landingPageTitle);\n\n    UI.ARIAUtils.markAsMenuButton(this.buttonInternal.element);\n    this.clear();\n\n    // Attempt to reuse the overviews coming from the panel's minimap\n    // before creating new instances.\n    this.allOverviews = [\n      {\n\n        constructor: parsedTrace => {\n          const responsivenessOverviewFromMinimap =\n              this.#minimapComponent?.getControls().find(\n                  control => control instanceof TimelineEventOverviewResponsiveness) as\n              TimelineEventOverviewResponsiveness;\n          return responsivenessOverviewFromMinimap || new TimelineEventOverviewResponsiveness(parsedTrace);\n        },\n        height: 3,\n      },\n      {\n        constructor: parsedTrace => {\n          const cpuOverviewFromMinimap =\n              this.#minimapComponent?.getControls().find(\n                  control => control instanceof TimelineEventOverviewCPUActivity) as TimelineEventOverviewCPUActivity;\n          if (cpuOverviewFromMinimap) {\n            return cpuOverviewFromMinimap;\n          }\n          return new TimelineEventOverviewCPUActivity(parsedTrace);\n        },\n        height: 20,\n      },\n      {\n        constructor: parsedTrace => {\n          const networkOverviewFromMinimap =\n              this.#minimapComponent?.getControls().find(control => control instanceof TimelineEventOverviewNetwork) as\n              TimelineEventOverviewNetwork;\n          return networkOverviewFromMinimap || new TimelineEventOverviewNetwork(parsedTrace);\n        },\n        height: 8,\n      },\n    ];\n    this.totalHeight = this.allOverviews.reduce((acc, entry) => acc + entry.height, 0);\n    this.enabled = true;\n  }\n\n  addRecording(newInput: NewHistoryRecordingData): void {\n    const filmStrip = newInput.filmStripForPreview;\n    this.lastActiveTrace = newInput.data;\n    this.recordings.unshift(newInput.data);\n\n    // Order is important: this needs to happen first because lots of the\n    // subsequent code depends on us storing the preview data into the map.\n    this.#buildAndStorePreviewData(newInput.data.parsedTraceIndex, newInput.parsedTrace, newInput.metadata, filmStrip);\n\n    const modelTitle = this.title(newInput.data);\n    this.buttonInternal.setText(modelTitle);\n    const buttonTitle = this.action.title();\n    UI.ARIAUtils.setLabel(\n        this.buttonInternal.element, i18nString(UIStrings.currentSessionSS, {PH1: modelTitle, PH2: buttonTitle}));\n    this.updateState();\n    if (this.recordings.length <= maxRecordings) {\n      return;\n    }\n    const modelUsedMoreTimeAgo =\n        this.recordings.reduce((a, b) => lastUsedTime(a.parsedTraceIndex) < lastUsedTime(b.parsedTraceIndex) ? a : b);\n    this.recordings.splice(this.recordings.indexOf(modelUsedMoreTimeAgo), 1);\n\n    function lastUsedTime(index: number): number {\n      const data = TimelineHistoryManager.dataForTraceIndex(index);\n      if (!data) {\n        throw new Error('Unable to find data for model');\n      }\n      return data.lastUsed;\n    }\n  }\n\n  setEnabled(enabled: boolean): void {\n    this.enabled = enabled;\n    this.updateState();\n  }\n\n  button(): ToolbarButton {\n    return this.buttonInternal;\n  }\n\n  clear(): void {\n    this.recordings = [];\n    this.lastActiveTrace = null;\n    this.updateState();\n    this.buttonInternal.setText(this.#landingPageTitle);\n    this.nextNumberByDomain.clear();\n  }\n\n  #getActiveTraceIndexForListControl(): number {\n    if (!this.lastActiveTrace) {\n      return -1;\n    }\n    if (this.lastActiveTrace.type === 'LANDING_PAGE') {\n      return LANDING_PAGE_INDEX_DROPDOWN_CHOICE;\n    }\n    return this.lastActiveTrace.parsedTraceIndex;\n  }\n\n  async showHistoryDropDown(): Promise<RecordingData|null> {\n    if (this.recordings.length < 1 || !this.enabled) {\n      return null;\n    }\n\n    // DropDown.show() function finishes when the dropdown menu is closed via selection or losing focus\n    const activeTraceIndex = await DropDown.show(\n        this.recordings.map(recording => recording.parsedTraceIndex), this.#getActiveTraceIndexForListControl(),\n        this.buttonInternal.element, this.#landingPageTitle);\n\n    if (activeTraceIndex === null) {\n      return null;\n    }\n\n    // The ListControl class that backs the dropdown uses indexes; we represent\n    // the landing page choice via this special index.\n    if (activeTraceIndex === LANDING_PAGE_INDEX_DROPDOWN_CHOICE) {\n      this.#setActiveTrace({type: 'LANDING_PAGE'});\n      return {type: 'LANDING_PAGE'};\n    }\n\n    const index = this.recordings.findIndex(recording => recording.parsedTraceIndex === activeTraceIndex);\n    if (index < 0) {\n      console.assert(false, 'selected recording not found');\n      return null;\n    }\n\n    this.#setActiveTrace(this.recordings[index]);\n    return this.recordings[index];\n  }\n\n  cancelIfShowing(): void {\n    DropDown.cancelIfShowing();\n  }\n\n  /**\n   * Navigate by 1 in either direction to the next trace.\n   * Navigating in this way does not include the landing page; it will loop\n   * over only the traces.\n   */\n  navigate(direction: number): TraceRecordingHistoryItem|null {\n    if (!this.enabled || this.lastActiveTrace === null) {\n      return null;\n    }\n    if (!this.lastActiveTrace || this.lastActiveTrace.type === 'LANDING_PAGE') {\n      return null;\n    }\n\n    const index = this.recordings.findIndex(recording => {\n      return this.lastActiveTrace?.type === 'TRACE_INDEX' && recording.type === 'TRACE_INDEX' &&\n          recording.parsedTraceIndex === this.lastActiveTrace.parsedTraceIndex;\n    });\n\n    if (index < 0) {\n      return null;\n    }\n\n    const newIndex = Platform.NumberUtilities.clamp(index + direction, 0, this.recordings.length - 1);\n    this.#setActiveTrace(this.recordings[newIndex]);\n    return this.recordings[newIndex];\n  }\n\n  navigateToLandingPage(): void {\n    this.#setActiveTrace({type: 'LANDING_PAGE'});\n  }\n\n  #setActiveTrace(item: RecordingData): void {\n    if (item.type === 'TRACE_INDEX') {\n      const data = TimelineHistoryManager.dataForTraceIndex(item.parsedTraceIndex);\n      if (!data) {\n        throw new Error('Unable to find data for model');\n      }\n      data.lastUsed = Date.now();\n    }\n\n    this.lastActiveTrace = item;\n    const modelTitle = this.title(item);\n    const buttonTitle = this.action.title();\n    this.buttonInternal.setText(modelTitle);\n    UI.ARIAUtils.setLabel(\n        this.buttonInternal.element, i18nString(UIStrings.currentSessionSS, {PH1: modelTitle, PH2: buttonTitle}));\n  }\n\n  private updateState(): void {\n    this.action.setEnabled(this.recordings.length >= 1 && this.enabled);\n  }\n\n  static previewElement(parsedTraceIndex: number): Element {\n    const data = TimelineHistoryManager.dataForTraceIndex(parsedTraceIndex);\n    if (!data) {\n      throw new Error('Unable to find data for model');\n    }\n    return data.preview;\n  }\n\n  private title(item: RecordingData): string {\n    if (item.type === 'LANDING_PAGE') {\n      return this.#landingPageTitle;\n    }\n\n    const data = TimelineHistoryManager.dataForTraceIndex(item.parsedTraceIndex);\n    if (!data) {\n      throw new Error('Unable to find data for model');\n    }\n    return data.title;\n  }\n\n  #buildAndStorePreviewData(\n      parsedTraceIndex: number, parsedTrace: Trace.Handlers.Types.ParsedTrace, metadata: Trace.Types.File.MetaData|null,\n      filmStrip: Trace.Extras.FilmStrip.Data|null): HTMLDivElement {\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString(parsedTrace.Meta.mainFrameURL);\n    const domain = parsedURL ? parsedURL.host : '';\n\n    const sequenceNumber = this.nextNumberByDomain.get(domain) || 1;\n    const titleWithSequenceNumber = i18nString(UIStrings.sD, {PH1: domain, PH2: sequenceNumber});\n    this.nextNumberByDomain.set(domain, sequenceNumber + 1);\n\n    const preview = document.createElement('div');\n    preview.classList.add('preview-item');\n    preview.classList.add('vbox');\n    preview.setAttribute('jslog', `${VisualLogging.dropDown('timeline.history-item').track({click: true})}`);\n    preview.style.width = `${previewWidth}px`;\n    const data = {\n      preview,\n      title: titleWithSequenceNumber,\n      lastUsed: Date.now(),\n    };\n    parsedTraceIndexToPerformancePreviewData.set(parsedTraceIndex, data);\n\n    preview.appendChild(this.#buildTextDetails(metadata, domain));\n    const screenshotAndOverview = preview.createChild('div', 'hbox');\n    screenshotAndOverview.appendChild(this.#buildScreenshotThumbnail(filmStrip));\n    screenshotAndOverview.appendChild(this.#buildOverview(parsedTrace));\n    return data.preview;\n  }\n\n  #buildTextDetails(metadata: Trace.Types.File.MetaData|null, title: string): Element {\n    const container = document.createElement('div');\n    container.classList.add('text-details');\n    container.classList.add('hbox');\n    const nameSpan = container.createChild('span', 'name');\n    nameSpan.textContent = title;\n    UI.ARIAUtils.setLabel(nameSpan, title);\n\n    if (metadata) {\n      const parts = [\n        metadata.emulatedDeviceTitle,\n        metadata.cpuThrottling ? i18nString(UIStrings.dSlowdown, {PH1: metadata.cpuThrottling}) : undefined,\n        metadata.networkThrottling,\n      ].filter(Boolean);\n      container.createChild('span', 'metadata').textContent = listFormatter.format(parts as string[]);\n    }\n\n    return container;\n  }\n\n  #buildScreenshotThumbnail(filmStrip: Trace.Extras.FilmStrip.Data|null): Element {\n    const container = document.createElement('div');\n    container.classList.add('screenshot-thumb');\n    const thumbnailAspectRatio = 3 / 2;\n    container.style.width = this.totalHeight * thumbnailAspectRatio + 'px';\n    container.style.height = this.totalHeight + 'px';\n    if (!filmStrip) {\n      return container;\n    }\n    const lastFrame = filmStrip.frames.at(-1);\n    if (!lastFrame) {\n      return container;\n    }\n    // TODO(paulirish): Adopt Util.ImageCache\n    const uri = Trace.Handlers.ModelHandlers.Screenshots.screenshotImageDataUri(lastFrame.screenshotEvent);\n    void UI.UIUtils.loadImage(uri).then(img => {\n      if (img) {\n        container.appendChild(img);\n      }\n    });\n    return container;\n  }\n\n  #buildOverview(parsedTrace: Trace.Handlers.Types.ParsedTrace): Element {\n    const container = document.createElement('div');\n    const dPR = window.devicePixelRatio;\n    container.style.width = previewWidth + 'px';\n    container.style.height = this.totalHeight + 'px';\n    const canvas = container.createChild('canvas');\n    canvas.width = dPR * previewWidth;\n    canvas.height = dPR * this.totalHeight;\n\n    const ctx = canvas.getContext('2d');\n    let yOffset = 0;\n\n    for (const overview of this.allOverviews) {\n      const timelineOverviewComponent = overview.constructor(parsedTrace);\n      timelineOverviewComponent.update();\n      if (ctx) {\n        ctx.drawImage(\n            timelineOverviewComponent.context().canvas, 0, yOffset, dPR * previewWidth, overview.height * dPR);\n      }\n      yOffset += overview.height * dPR;\n    }\n    return container;\n  }\n\n  private static dataForTraceIndex(index: number): PreviewData|null {\n    return parsedTraceIndexToPerformancePreviewData.get(index) || null;\n  }\n}\n\nexport const maxRecordings = 5;\nexport const previewWidth = 500;\n// The reason we store a global map is because the Dropdown component needs to\n// be able to read the preview data in order to show a preview in the dropdown.\nconst parsedTraceIndexToPerformancePreviewData = new Map<number, PreviewData>();\n\nexport interface PreviewData {\n  preview: Element;\n  lastUsed: number;\n  title: string;\n}\n\nexport class DropDown implements UI.ListControl.ListDelegate<number> {\n  private readonly glassPane: UI.GlassPane.GlassPane;\n  private readonly listControl: UI.ListControl.ListControl<number>;\n  private readonly focusRestorer: UI.UIUtils.ElementFocusRestorer;\n  private selectionDone: ((arg0: number|null) => void)|null;\n  #landingPageTitle: Common.UIString.LocalizedString;\n  contentElement: HTMLElement;\n\n  constructor(availableparsedTraceIndexes: number[], landingPageTitle: Common.UIString.LocalizedString) {\n    this.#landingPageTitle = landingPageTitle;\n\n    this.glassPane = new UI.GlassPane.GlassPane();\n    this.glassPane.setSizeBehavior(UI.GlassPane.SizeBehavior.MEASURE_CONTENT);\n    this.glassPane.setOutsideClickCallback(() => this.close(null));\n    this.glassPane.setPointerEventsBehavior(UI.GlassPane.PointerEventsBehavior.BLOCKED_BY_GLASS_PANE);\n    this.glassPane.setAnchorBehavior(UI.GlassPane.AnchorBehavior.PREFER_BOTTOM);\n    this.glassPane.element.addEventListener('blur', () => this.close(null));\n\n    const shadowRoot = UI.UIUtils.createShadowRootWithCoreStyles(\n        this.glassPane.contentElement, {cssFile: timelineHistoryManagerStyles});\n    this.contentElement = shadowRoot.createChild('div', 'drop-down');\n\n    const listModel = new UI.ListModel.ListModel<number>();\n    this.listControl = new UI.ListControl.ListControl<number>(listModel, this, UI.ListControl.ListMode.NonViewport);\n    this.listControl.element.addEventListener('mousemove', this.onMouseMove.bind(this), false);\n    listModel.replaceAll(availableparsedTraceIndexes);\n\n    UI.ARIAUtils.markAsMenu(this.listControl.element);\n    UI.ARIAUtils.setLabel(this.listControl.element, i18nString(UIStrings.selectTimelineSession));\n    this.contentElement.appendChild(this.listControl.element);\n    this.contentElement.addEventListener('keydown', this.onKeyDown.bind(this), false);\n    this.contentElement.addEventListener('click', this.onClick.bind(this), false);\n\n    this.focusRestorer = new UI.UIUtils.ElementFocusRestorer(this.listControl.element);\n    this.selectionDone = null;\n  }\n\n  static show(\n      availableparsedTraceIndexes: number[], activeparsedTraceIndex: number, anchor: Element,\n      landingPageTitle: Common.UIString.LocalizedString = i18nString(UIStrings.landingPageTitle)):\n      Promise<number|null> {\n    if (DropDown.instance) {\n      return Promise.resolve(null);\n    }\n    const availableDropdownChoices = [...availableparsedTraceIndexes];\n    availableDropdownChoices.unshift(LANDING_PAGE_INDEX_DROPDOWN_CHOICE);\n    const instance = new DropDown(availableDropdownChoices, landingPageTitle);\n    return instance.show(anchor, activeparsedTraceIndex);\n  }\n\n  static cancelIfShowing(): void {\n    if (!DropDown.instance) {\n      return;\n    }\n    DropDown.instance.close(null);\n  }\n\n  private show(anchor: Element, activeparsedTraceIndex: number): Promise<number|null> {\n    DropDown.instance = this;\n    this.glassPane.setContentAnchorBox(anchor.boxInWindow());\n    this.glassPane.show(this.glassPane.contentElement.ownerDocument);\n    this.listControl.element.focus();\n    this.listControl.selectItem(activeparsedTraceIndex);\n\n    return new Promise(fulfill => {\n      this.selectionDone = fulfill;\n    });\n  }\n\n  private onMouseMove(event: Event): void {\n    const node = (event.target as HTMLElement).enclosingNodeOrSelfWithClass('preview-item');\n    const listItem = node && this.listControl.itemForNode(node);\n    if (listItem === null) {\n      return;\n    }\n    this.listControl.selectItem(listItem);\n  }\n\n  private onClick(event: Event): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // @ts-expect-error\n    if (!(event.target).enclosingNodeOrSelfWithClass('preview-item')) {\n      return;\n    }\n    this.close(this.listControl.selectedItem());\n  }\n\n  private onKeyDown(event: Event): void {\n    switch ((event as KeyboardEvent).key) {\n      case 'Tab':\n      case 'Escape':\n        this.close(null);\n        break;\n      case 'Enter':\n        this.close(this.listControl.selectedItem());\n        break;\n      default:\n        return;\n    }\n    event.consume(true);\n  }\n\n  private close(traceIndex: number|null): void {\n    if (this.selectionDone) {\n      this.selectionDone(traceIndex);\n    }\n    this.focusRestorer.restore();\n    this.glassPane.hide();\n    DropDown.instance = null;\n  }\n\n  createElementForItem(parsedTraceIndex: number): Element {\n    if (parsedTraceIndex === LANDING_PAGE_INDEX_DROPDOWN_CHOICE) {\n      return this.#createLandingPageListItem();\n    }\n    const element = TimelineHistoryManager.previewElement(parsedTraceIndex);\n    UI.ARIAUtils.markAsMenuItem(element);\n    element.classList.remove('selected');\n    return element;\n  }\n\n  #createLandingPageListItem(): HTMLElement {\n    const div = document.createElement('div');\n    UI.ARIAUtils.markAsMenuItem(div);\n    div.classList.remove('selected');\n    div.classList.add('preview-item');\n    div.classList.add('landing-page-item');\n\n    div.style.width = `${previewWidth}px`;\n\n    const icon = IconButton.Icon.create('arrow-back');\n    icon.title = i18nString(UIStrings.backButtonTooltip);\n    icon.classList.add('back-arrow');\n    div.appendChild(icon);\n\n    const text = document.createElement('span');\n    text.innerText = this.#landingPageTitle;\n    div.appendChild(text);\n    return div;\n  }\n\n  heightForItem(_parsedTraceIndex: number): number {\n    console.assert(false, 'Should not be called');\n    return 0;\n  }\n\n  isItemSelectable(_parsedTraceIndex: number): boolean {\n    return true;\n  }\n\n  selectedItemChanged(_from: number|null, _to: number|null, fromElement: Element|null, toElement: Element|null): void {\n    if (fromElement) {\n      fromElement.classList.remove('selected');\n    }\n    if (toElement) {\n      toElement.classList.add('selected');\n    }\n  }\n\n  updateSelectedItemARIA(_fromElement: Element|null, _toElement: Element|null): boolean {\n    return false;\n  }\n\n  static instance: DropDown|null = null;\n}\n\nexport class ToolbarButton extends UI.Toolbar.ToolbarItem {\n  private contentElement: HTMLElement;\n\n  constructor(action: UI.ActionRegistration.Action) {\n    const element = document.createElement('button');\n    element.classList.add('history-dropdown-button');\n    element.setAttribute('jslog', `${VisualLogging.dropDown('history')}`);\n    super(element);\n    this.contentElement = this.element.createChild('span', 'content');\n    this.element.addEventListener('click', () => void action.execute(), false);\n    this.setEnabled(action.enabled());\n    action.addEventListener(UI.ActionRegistration.Events.ENABLED, event => this.setEnabled(event.data));\n    this.setTitle(action.title());\n  }\n\n  setText(text: string): void {\n    this.contentElement.textContent = text;\n  }\n}\n", "/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as TraceBounds from '../../services/trace_bounds/trace_bounds.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   *@description Short for Network. Label for the network requests section of the Performance panel.\n   */\n  net: 'NET',\n  /**\n   *@description Text in Timeline Event Overview of the Performance panel\n   */\n  cpu: 'CPU',\n  /**\n   *@description Text in Timeline Event Overview of the Performance panel\n   */\n  heap: 'HEAP',\n  /**\n   *@description Heap size label text content in Timeline Event Overview of the Performance panel\n   *@example {10 MB} PH1\n   *@example {30 MB} PH2\n   */\n  sSDash: '{PH1} – {PH2}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineEventOverview.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport abstract class TimelineEventOverview extends PerfUI.TimelineOverviewPane.TimelineOverviewBase {\n  constructor(id: string, title: string|null) {\n    super();\n    this.element.id = 'timeline-overview-' + id;\n    this.element.classList.add('overview-strip');\n    if (title) {\n      this.element.createChild('div', 'timeline-overview-strip-title').textContent = title;\n    }\n  }\n\n  renderBar(begin: number, end: number, position: number, height: number, color: string): void {\n    const x = begin;\n    const width = end - begin;\n    const ctx = this.context();\n    ctx.fillStyle = color;\n    ctx.fillRect(x, position, width, height);\n  }\n}\n\nexport class TimelineEventOverviewNetwork extends TimelineEventOverview {\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  constructor(parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    super('network', i18nString(UIStrings.net));\n    this.#parsedTrace = parsedTrace;\n  }\n\n  override update(start?: Trace.Types.Timing.Milli, end?: Trace.Types.Timing.Milli): void {\n    this.resetCanvas();\n    this.#renderWithParsedTrace(start, end);\n  }\n\n  #renderWithParsedTrace(start?: Trace.Types.Timing.Milli, end?: Trace.Types.Timing.Milli): void {\n    if (!this.#parsedTrace) {\n      return;\n    }\n\n    // Because the UI is in milliseconds, we work with milliseconds through\n    // this function to get the right scale and sizing\n    const traceBoundsMilli = (start && end) ?\n        {\n          min: start,\n          max: end,\n          range: end - start,\n        } :\n        Trace.Helpers.Timing.traceWindowMilliSeconds(this.#parsedTrace.Meta.traceBounds);\n\n    // We draw two paths, so each can take up half the height\n    const pathHeight = this.height() / 2;\n\n    const canvasWidth = this.width();\n    const scale = canvasWidth / traceBoundsMilli.range;\n\n    // We draw network requests in two chunks:\n    // Requests with a priority of Medium or higher go onto the first path\n    // Other requests go onto the second path.\n    const highPath = new Path2D();\n    const lowPath = new Path2D();\n\n    for (const request of this.#parsedTrace.NetworkRequests.byTime) {\n      const path = Trace.Helpers.Network.isSyntheticNetworkRequestHighPriority(request) ? highPath : lowPath;\n      const {startTime, endTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(request);\n      const rectStart = Math.max(Math.floor((startTime - traceBoundsMilli.min) * scale), 0);\n      const rectEnd = Math.min(Math.ceil((endTime - traceBoundsMilli.min) * scale + 1), canvasWidth);\n\n      path.rect(rectStart, 0, rectEnd - rectStart, pathHeight - 1);\n    }\n\n    const ctx = this.context();\n    ctx.save();\n    // Draw the high path onto the canvas.\n    ctx.fillStyle = 'hsl(214, 60%, 60%)';\n    ctx.fill(highPath);\n    // Now jump down by the height of the high path, and then draw the low path.\n    ctx.translate(0, pathHeight);\n    ctx.fillStyle = 'hsl(214, 80%, 80%)';\n    ctx.fill(lowPath);\n    ctx.restore();\n  }\n}\n\nconst categoryToIndex = new WeakMap<Utils.EntryStyles.TimelineCategory, number>();\n\nexport class TimelineEventOverviewCPUActivity extends TimelineEventOverview {\n  private backgroundCanvas: HTMLCanvasElement;\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  #drawn = false;\n  #start: Trace.Types.Timing.Milli;\n  #end: Trace.Types.Timing.Milli;\n\n  constructor(parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    // During the sync tracks migration this component can use either legacy\n    // Performance Model data or the new engine's data. Once the migration is\n    // complete this will be updated to only use the new engine and mentions of\n    // the PerformanceModel will be removed.\n    super('cpu-activity', i18nString(UIStrings.cpu));\n    this.#parsedTrace = parsedTrace;\n    this.backgroundCanvas = this.element.createChild('canvas', 'fill background');\n    this.#start = Trace.Helpers.Timing.traceWindowMilliSeconds(parsedTrace.Meta.traceBounds).min;\n    this.#end = Trace.Helpers.Timing.traceWindowMilliSeconds(parsedTrace.Meta.traceBounds).max;\n  }\n\n  #entryCategory(entry: Trace.Types.Events.Event): Utils.EntryStyles.EventCategory|undefined {\n    // Special case: in CPU Profiles we get a lot of ProfileCalls that\n    // represent Idle time. We typically represent ProfileCalls in the\n    // Scripting Category, but if they represent idle time, we do not want\n    // that.\n    if (Trace.Types.Events.isProfileCall(entry) && entry.callFrame.functionName === '(idle)') {\n      return Utils.EntryStyles.EventCategory.IDLE;\n    }\n    if (Trace.Types.Events.isProfileCall(entry) && entry.callFrame.functionName === '(program)') {\n      return Utils.EntryStyles.EventCategory.OTHER;\n    }\n    const eventStyle = Utils.EntryStyles.getEventStyle(entry.name as Trace.Types.Events.Name)?.category ||\n        Utils.EntryStyles.getCategoryStyles().other;\n    const categoryName = eventStyle.name;\n    return categoryName;\n  }\n\n  override resetCanvas(): void {\n    super.resetCanvas();\n    this.#drawn = false;\n    this.backgroundCanvas.width = this.element.clientWidth * window.devicePixelRatio;\n    this.backgroundCanvas.height = this.element.clientHeight * window.devicePixelRatio;\n  }\n\n  #draw(parsedTrace: Trace.Handlers.Types.ParsedTrace): void {\n    const quantSizePx = 4 * window.devicePixelRatio;\n    const width = this.width();\n    const height = this.height();\n    const baseLine = height;\n    const timeRange = this.#end - this.#start;\n    const scale = width / timeRange;\n    const quantTime = quantSizePx / scale;\n    const categories = Utils.EntryStyles.getCategoryStyles();\n    const categoryOrder = Utils.EntryStyles.getTimelineMainEventCategories();\n    const otherIndex = categoryOrder.indexOf(Utils.EntryStyles.EventCategory.OTHER);\n    const idleIndex = 0;\n    console.assert(idleIndex === categoryOrder.indexOf(Utils.EntryStyles.EventCategory.IDLE));\n    for (let i = 0; i < categoryOrder.length; ++i) {\n      categoryToIndex.set(categories[categoryOrder[i]], i);\n    }\n\n    const drawThreadEntries =\n        (context: CanvasRenderingContext2D, threadData: Trace.Handlers.Threads.ThreadData): void => {\n          const quantizer = new Quantizer(this.#start, quantTime, drawSample);\n          let x = 0;\n          const categoryIndexStack: number[] = [];\n          const paths: Path2D[] = [];\n          const lastY: number[] = [];\n          for (let i = 0; i < categoryOrder.length; ++i) {\n            paths[i] = new Path2D();\n            paths[i].moveTo(0, height);\n            lastY[i] = height;\n          }\n\n          function drawSample(counters: number[]): void {\n            let y = baseLine;\n            for (let i = idleIndex + 1; i < categoryOrder.length; ++i) {\n              const h = (counters[i] || 0) / quantTime * height;\n              y -= h;\n              paths[i].bezierCurveTo(x, lastY[i], x, y, x + quantSizePx / 2, y);\n              lastY[i] = y;\n            }\n            x += quantSizePx;\n          }\n\n          const onEntryStart = (entry: Trace.Types.Events.Event): void => {\n            const category = this.#entryCategory(entry);\n            if (!category || category === 'idle') {\n              // Idle event won't show in CPU activity, so just skip them.\n              return;\n            }\n            const startTimeMilli = Trace.Helpers.Timing.microToMilli(entry.ts);\n            const index = categoryIndexStack.length ? categoryIndexStack[categoryIndexStack.length - 1] : idleIndex;\n            quantizer.appendInterval(startTimeMilli, index);\n            const categoryIndex = categoryOrder.indexOf(category);\n            categoryIndexStack.push(categoryIndex || otherIndex);\n          };\n\n          function onEntryEnd(entry: Trace.Types.Events.Event): void {\n            const endTimeMilli = Trace.Helpers.Timing.microToMilli(entry.ts) +\n                Trace.Helpers.Timing.microToMilli(Trace.Types.Timing.Micro(entry.dur || 0));\n            const lastCategoryIndex = categoryIndexStack.pop();\n            if (endTimeMilli !== undefined && lastCategoryIndex) {\n              quantizer.appendInterval(endTimeMilli, lastCategoryIndex);\n            }\n          }\n          const startMicro = Trace.Helpers.Timing.milliToMicro(this.#start);\n          const endMicro = Trace.Helpers.Timing.milliToMicro(this.#end);\n          const bounds = {\n            min: startMicro,\n            max: endMicro,\n            range: Trace.Types.Timing.Micro(endMicro - startMicro),\n          };\n\n          // Filter out tiny events - they don't make a visual impact to the\n          // canvas as they are so small, but they do impact the time it takes\n          // to walk the tree and render the events.\n          // However, if the entire range we are showing is 200ms or less, then show all events.\n          const minDuration = Trace.Types.Timing.Micro(\n              bounds.range > 200_000 ? 16_000 : 0,\n          );\n          Trace.Helpers.TreeHelpers.walkEntireTree(\n              threadData.entryToNode, threadData.tree, onEntryStart, onEntryEnd, bounds, minDuration);\n          quantizer.appendInterval(this.#start + timeRange + quantTime, idleIndex);  // Kick drawing the last bucket.\n          for (let i = categoryOrder.length - 1; i > 0; --i) {\n            paths[i].lineTo(width, height);\n            const computedColorValue = categories[categoryOrder[i]].getComputedColorValue();\n            context.fillStyle = computedColorValue;\n            context.fill(paths[i]);\n            context.strokeStyle = 'white';\n            context.lineWidth = 1;\n            context.stroke(paths[i]);\n          }\n        };\n    const backgroundContext = (this.backgroundCanvas.getContext('2d'));\n    if (!backgroundContext) {\n      throw new Error('Could not find 2d canvas');\n    }\n\n    const threads = Trace.Handlers.Threads.threadsInTrace(parsedTrace);\n    const mainThreadContext = this.context();\n    for (const thread of threads) {\n      // We treat CPU_PROFILE as main thread because in a CPU Profile trace there is only ever one thread.\n      const isMainThread = thread.type === Trace.Handlers.Threads.ThreadType.MAIN_THREAD ||\n          thread.type === Trace.Handlers.Threads.ThreadType.CPU_PROFILE;\n      if (isMainThread) {\n        drawThreadEntries(mainThreadContext, thread);\n      } else {\n        drawThreadEntries(backgroundContext, thread);\n      }\n    }\n\n    function applyPattern(ctx: CanvasRenderingContext2D): void {\n      const step = 4 * window.devicePixelRatio;\n      ctx.save();\n      ctx.lineWidth = step / Math.sqrt(8);\n      for (let x = 0.5; x < width + height; x += step) {\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x - height, height);\n      }\n      ctx.globalCompositeOperation = 'destination-out';\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    applyPattern(backgroundContext);\n  }\n\n  override update(): void {\n    const traceBoundsState = TraceBounds.TraceBounds.BoundsManager.instance().state();\n    const bounds = traceBoundsState?.milli.minimapTraceBounds;\n    if (!bounds) {\n      return;\n    }\n    if (bounds.min === this.#start && bounds.max === this.#end && this.#drawn) {\n      return;\n    }\n    this.#start = bounds.min;\n    this.#end = bounds.max;\n    // Order matters here, resetCanvas will set this.#drawn to false.\n    this.resetCanvas();\n    this.#drawn = true;\n    this.#draw(this.#parsedTrace);\n  }\n}\n\nexport class TimelineEventOverviewResponsiveness extends TimelineEventOverview {\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  constructor(parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    super('responsiveness', null);\n    this.#parsedTrace = parsedTrace;\n  }\n\n  #gatherEventsWithRelevantWarnings(): Set<Trace.Types.Events.Event> {\n    const {topLevelRendererIds} = this.#parsedTrace.Meta;\n\n    // All the warnings that we care about regarding responsiveness and want to represent on the overview.\n    const warningsForResponsiveness = new Set<Trace.Handlers.ModelHandlers.Warnings.Warning>([\n      'LONG_TASK',\n      'FORCED_REFLOW',\n      'IDLE_CALLBACK_OVER_TIME',\n    ]);\n\n    const allWarningEvents = new Set<Trace.Types.Events.Event>();\n    for (const warning of warningsForResponsiveness) {\n      const eventsForWarning = this.#parsedTrace.Warnings.perWarning.get(warning);\n      if (!eventsForWarning) {\n        continue;\n      }\n\n      for (const event of eventsForWarning) {\n        // Only keep events whose PID is a top level renderer, which means it\n        // was on the main thread. This avoids showing issues from iframes or\n        // other sub-frames in the minimap overview.\n        if (topLevelRendererIds.has(event.pid)) {\n          allWarningEvents.add(event);\n        }\n      }\n    }\n    return allWarningEvents;\n  }\n\n  override update(start?: Trace.Types.Timing.Milli, end?: Trace.Types.Timing.Milli): void {\n    this.resetCanvas();\n\n    const height = this.height();\n    const visibleTimeWindow = !(start && end) ? this.#parsedTrace.Meta.traceBounds : {\n      min: Trace.Helpers.Timing.milliToMicro(start),\n      max: Trace.Helpers.Timing.milliToMicro(end),\n      range: Trace.Helpers.Timing.milliToMicro(Trace.Types.Timing.Milli(end - start)),\n    };\n    const timeSpan = visibleTimeWindow.range;\n    const scale = this.width() / timeSpan;\n    const ctx = this.context();\n    const fillPath = new Path2D();\n    const markersPath = new Path2D();\n\n    const eventsWithWarning = this.#gatherEventsWithRelevantWarnings();\n    for (const event of eventsWithWarning) {\n      paintWarningDecoration(event);\n    }\n\n    ctx.fillStyle = 'hsl(0, 80%, 90%)';\n    ctx.strokeStyle = 'red';\n    ctx.lineWidth = 2 * window.devicePixelRatio;\n    ctx.fill(fillPath);\n    ctx.stroke(markersPath);\n\n    function paintWarningDecoration(event: Trace.Types.Events.Event): void {\n      const {startTime, duration} = Trace.Helpers.Timing.eventTimingsMicroSeconds(event);\n      const x = Math.round(scale * (startTime - visibleTimeWindow.min));\n      const width = Math.round(scale * duration);\n      fillPath.rect(x, 0, width, height);\n      markersPath.moveTo(x + width, 0);\n      markersPath.lineTo(x + width, height);\n    }\n  }\n}\n\nexport class TimelineFilmStripOverview extends TimelineEventOverview {\n  private frameToImagePromise: Map<Trace.Extras.FilmStrip.Frame, Promise<HTMLImageElement>>;\n  private lastFrame: Trace.Extras.FilmStrip.Frame|null = null;\n  private lastElement: Element|null;\n  private drawGeneration?: symbol;\n  private emptyImage?: HTMLImageElement;\n  #filmStrip: Trace.Extras.FilmStrip.Data|null = null;\n\n  constructor(filmStrip: Trace.Extras.FilmStrip.Data) {\n    super('filmstrip', null);\n    this.element.setAttribute('jslog', `${VisualLogging.section('film-strip')}`);\n    this.frameToImagePromise = new Map();\n    this.#filmStrip = filmStrip;\n    this.lastFrame = null;\n    this.lastElement = null;\n    this.reset();\n  }\n\n  override update(customStartTime?: Trace.Types.Timing.Milli, customEndTime?: Trace.Types.Timing.Milli): void {\n    this.resetCanvas();\n    const frames = this.#filmStrip ? this.#filmStrip.frames : [];\n    if (!frames.length) {\n      return;\n    }\n\n    if (this.height() === 0) {\n      // Height of 0 causes the maths below to get off and generate very large\n      // negative numbers that cause an extremely long loop when attempting to\n      // draw images by frame. Rather than that, let's warn and exist early.\n      console.warn('TimelineFilmStrip could not be drawn as its canvas height is 0');\n      return;\n    }\n\n    const drawGeneration = Symbol('drawGeneration');\n    this.drawGeneration = drawGeneration;\n    void this.imageByFrame(frames[0]).then(image => {\n      if (this.drawGeneration !== drawGeneration) {\n        return;\n      }\n      if (!image?.naturalWidth || !image.naturalHeight) {\n        return;\n      }\n      const imageHeight = this.height() - 2 * TimelineFilmStripOverview.Padding;\n      const imageWidth = Math.ceil(imageHeight * image.naturalWidth / image.naturalHeight);\n      const popoverScale = Math.min(200 / image.naturalWidth, 1);\n      this.emptyImage = new Image(image.naturalWidth * popoverScale, image.naturalHeight * popoverScale);\n      this.drawFrames(imageWidth, imageHeight, customStartTime, customEndTime);\n    });\n  }\n\n  private async imageByFrame(frame: Trace.Extras.FilmStrip.Frame): Promise<HTMLImageElement|null> {\n    let imagePromise: Promise<HTMLImageElement|null>|undefined = this.frameToImagePromise.get(frame);\n    if (!imagePromise) {\n      // TODO(paulirish): Adopt Util.ImageCache\n      const uri = Trace.Handlers.ModelHandlers.Screenshots.screenshotImageDataUri(frame.screenshotEvent);\n      imagePromise = UI.UIUtils.loadImage(uri);\n      this.frameToImagePromise.set(frame, (imagePromise as Promise<HTMLImageElement>));\n    }\n    return await imagePromise;\n  }\n\n  private drawFrames(\n      imageWidth: number, imageHeight: number, customStartTime?: Trace.Types.Timing.Milli,\n      customEndTime?: Trace.Types.Timing.Milli): void {\n    if (!imageWidth) {\n      return;\n    }\n    if (!this.#filmStrip || this.#filmStrip.frames.length < 1) {\n      return;\n    }\n    const padding = TimelineFilmStripOverview.Padding;\n    const width = this.width();\n\n    const zeroTime = customStartTime ?? Trace.Helpers.Timing.microToMilli(this.#filmStrip.zeroTime);\n    const spanTime =\n        customEndTime ? customEndTime - zeroTime : Trace.Helpers.Timing.microToMilli(this.#filmStrip.spanTime);\n    const scale = spanTime / width;\n    const context = this.context();\n    const drawGeneration = this.drawGeneration;\n\n    context.beginPath();\n    for (let x = padding; x < width; x += imageWidth + 2 * padding) {\n      const time = Trace.Types.Timing.Milli(zeroTime + (x + imageWidth / 2) * scale);\n      const timeMicroSeconds = Trace.Helpers.Timing.milliToMicro(time);\n      const frame = Trace.Extras.FilmStrip.frameClosestToTimestamp(this.#filmStrip, timeMicroSeconds);\n      if (!frame) {\n        continue;\n      }\n      context.rect(x - 0.5, 0.5, imageWidth + 1, imageHeight + 1);\n      void this.imageByFrame(frame).then(drawFrameImage.bind(this, x));\n    }\n    context.strokeStyle = '#ddd';\n    context.stroke();\n\n    function drawFrameImage(this: TimelineFilmStripOverview, x: number, image: HTMLImageElement|null): void {\n      // Ignore draws deferred from a previous update call.\n      if (this.drawGeneration !== drawGeneration || !image) {\n        return;\n      }\n      context.drawImage(image, x, 1, imageWidth, imageHeight);\n    }\n  }\n\n  override async overviewInfoPromise(x: number): Promise<Element|null> {\n    if (!this.#filmStrip || this.#filmStrip.frames.length === 0) {\n      return null;\n    }\n\n    const calculator = this.calculator();\n    if (!calculator) {\n      return null;\n    }\n    const timeMilliSeconds = calculator.positionToTime(x);\n    const timeMicroSeconds = Trace.Helpers.Timing.milliToMicro(timeMilliSeconds);\n    const frame = Trace.Extras.FilmStrip.frameClosestToTimestamp(this.#filmStrip, timeMicroSeconds);\n    if (frame === this.lastFrame) {\n      return this.lastElement;\n    }\n    const imagePromise = frame ? this.imageByFrame(frame) : Promise.resolve(this.emptyImage);\n    const image = await imagePromise;\n    const element = document.createElement('div');\n    element.classList.add('frame');\n    if (image) {\n      element.createChild('div', 'thumbnail').appendChild(image);\n    }\n    this.lastFrame = frame;\n    this.lastElement = element;\n    return element;\n  }\n\n  override reset(): void {\n    this.lastFrame = null;\n    this.lastElement = null;\n    this.frameToImagePromise = new Map();\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly Padding = 2;\n}\n\nexport class TimelineEventOverviewMemory extends TimelineEventOverview {\n  private heapSizeLabel: HTMLElement;\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace;\n\n  constructor(parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    super('memory', i18nString(UIStrings.heap));\n    this.heapSizeLabel = this.element.createChild('div', 'memory-graph-label');\n    this.#parsedTrace = parsedTrace;\n  }\n\n  resetHeapSizeLabels(): void {\n    this.heapSizeLabel.textContent = '';\n  }\n\n  override update(start?: Trace.Types.Timing.Milli, end?: Trace.Types.Timing.Milli): void {\n    this.resetCanvas();\n    const ratio = window.devicePixelRatio;\n\n    if (this.#parsedTrace.Memory.updateCountersByProcess.size === 0) {\n      this.resetHeapSizeLabels();\n      return;\n    }\n\n    const mainRendererIds = Array.from(this.#parsedTrace.Meta.topLevelRendererIds);\n    const counterEventsPerTrack =\n        mainRendererIds.map(pid => this.#parsedTrace.Memory.updateCountersByProcess.get(pid) || [])\n            .filter(eventsPerRenderer => eventsPerRenderer.length > 0);\n\n    const lowerOffset = 3 * ratio;\n    let maxUsedHeapSize = 0;\n    let minUsedHeapSize = 100000000000;\n\n    const boundsMs = (start && end) ? {\n      min: start,\n      max: end,\n      range: end - start,\n    } :\n                                      Trace.Helpers.Timing.traceWindowMilliSeconds(this.#parsedTrace.Meta.traceBounds);\n    const minTime = boundsMs.min;\n    const maxTime = boundsMs.max;\n\n    function calculateMinMaxSizes(event: Trace.Types.Events.UpdateCounters): void {\n      const counters = event.args.data;\n      if (!counters || !counters.jsHeapSizeUsed) {\n        return;\n      }\n      maxUsedHeapSize = Math.max(maxUsedHeapSize, counters.jsHeapSizeUsed);\n      minUsedHeapSize = Math.min(minUsedHeapSize, counters.jsHeapSizeUsed);\n    }\n\n    for (let i = 0; i < counterEventsPerTrack.length; i++) {\n      counterEventsPerTrack[i].forEach(calculateMinMaxSizes);\n    }\n\n    minUsedHeapSize = Math.min(minUsedHeapSize, maxUsedHeapSize);\n\n    const lineWidth = 1;\n    const width = this.width();\n    const height = this.height() - lowerOffset;\n    const xFactor = width / (maxTime - minTime);\n    const yFactor = (height - lineWidth) / Math.max(maxUsedHeapSize - minUsedHeapSize, 1);\n\n    const histogram = new Array(width);\n\n    function buildHistogram(event: Trace.Types.Events.UpdateCounters): void {\n      const counters = event.args.data;\n      if (!counters || !counters.jsHeapSizeUsed) {\n        return;\n      }\n      const {startTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(event);\n      const x = Math.round((startTime - minTime) * xFactor);\n      const y = Math.round((counters.jsHeapSizeUsed - minUsedHeapSize) * yFactor);\n      histogram[x] = Math.max(histogram[x] || 0, y);\n    }\n    for (let i = 0; i < counterEventsPerTrack.length; i++) {\n      counterEventsPerTrack[i].forEach(buildHistogram);\n    }\n\n    const ctx = this.context();\n    const heightBeyondView = height + lowerOffset + lineWidth;\n\n    ctx.translate(0.5, 0.5);\n    ctx.beginPath();\n    ctx.moveTo(-lineWidth, heightBeyondView);\n    let y = 0;\n    let isFirstPoint = true;\n    let lastX = 0;\n    for (let x = 0; x < histogram.length; x++) {\n      if (typeof histogram[x] === 'undefined') {\n        continue;\n      }\n      if (isFirstPoint) {\n        isFirstPoint = false;\n        y = histogram[x];\n        ctx.lineTo(-lineWidth, height - y);\n      }\n      const nextY = histogram[x];\n      if (Math.abs(nextY - y) > 2 && Math.abs(x - lastX) > 1) {\n        ctx.lineTo(x, height - y);\n      }\n      y = nextY;\n      ctx.lineTo(x, height - y);\n      lastX = x;\n    }\n    ctx.lineTo(width + lineWidth, height - y);\n    ctx.lineTo(width + lineWidth, heightBeyondView);\n    ctx.closePath();\n\n    ctx.fillStyle = 'hsla(220, 90%, 70%, 0.2)';\n    ctx.fill();\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = 'hsl(220, 90%, 70%)';\n    ctx.stroke();\n\n    this.heapSizeLabel.textContent = i18nString(UIStrings.sSDash, {\n      PH1: i18n.ByteUtilities.bytesToString(minUsedHeapSize),\n      PH2: i18n.ByteUtilities.bytesToString(maxUsedHeapSize),\n    });\n  }\n}\n\nexport class Quantizer {\n  private lastTime: number;\n  private quantDuration: number;\n  private readonly callback: (arg0: number[]) => void;\n  private counters: number[];\n  private remainder: number;\n  constructor(startTime: number, quantDuration: number, callback: (arg0: number[]) => void) {\n    this.lastTime = startTime;\n    this.quantDuration = quantDuration;\n    this.callback = callback;\n    this.counters = [];\n    this.remainder = quantDuration;\n  }\n\n  appendInterval(time: number, group: number): void {\n    let interval = time - this.lastTime;\n    if (interval <= this.remainder) {\n      this.counters[group] = (this.counters[group] || 0) + interval;\n      this.remainder -= interval;\n      this.lastTime = time;\n      return;\n    }\n    this.counters[group] = (this.counters[group] || 0) + this.remainder;\n    this.callback(this.counters);\n    interval -= this.remainder;\n    while (interval >= this.quantDuration) {\n      const counters = [];\n      counters[group] = this.quantDuration;\n      this.callback(counters);\n      interval -= this.quantDuration;\n    }\n    this.counters = [];\n    this.counters[group] = interval;\n    this.lastTime = time;\n    this.remainder = this.quantDuration - interval;\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2017 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.drop-down {\n  box-shadow: var(--drop-shadow);\n  background: var(--sys-color-cdt-base-container);\n}\n\n.preview-item {\n  border-bottom: 1px solid var(--sys-color-divider);\n\n  &:first-child {\n    border-top: 1px solid var(--sys-color-divider);\n  }\n\n  padding: 6px 10px;\n  position: relative;\n\n  .metadata {\n    margin-left: 3px;\n  }\n\n  /* done this way because if we have a border it\n   * awkwardly merges in a diagonal with the top and\n   * bottom border */\n  &.selected::before {\n    content: \" \";\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    width: 2px;\n    background-color: var(--sys-color-primary);\n  }\n}\n\n.preview-item canvas {\n  width: 100%;\n  height: 100%;\n}\n\n.text-details {\n  flex-wrap: wrap;\n  justify-content: space-between;\n}\n\n.text-details > span {\n  padding-left: var(--sys-size-5);\n  padding-right: var(--sys-size-5);\n}\n\n.text-details .name {\n  font: var(--sys-typescale-body4-medium);\n}\n\n.text-details .metadata {\n  color: var(--sys-color-token-subtle);\n  font: var(--sys-typescale-body4-regular);\n  text-align: right;\n}\n\n.screenshot-thumb {\n  display: flex;\n  border: 1px solid var(--sys-color-surface3);\n  margin: 2px 4px;\n}\n\n.screenshot-thumb img {\n  margin: auto;\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.landing-page-item {\n  font: var(--sys-typescale-body4-regular);\n  display: flex;\n  align-items: center;\n  gap: var(--sys-size-5);\n}\n\n.back-arrow:hover {\n  background: var(--sys-color-state-hover-on-subtle);\n}\n\n/*# sourceURL=${import.meta.resolve('./timelineHistoryManager.css')} */`;", "// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Trace from '../../models/trace/trace.js';\n\nimport * as RecordingMetadata from './RecordingMetadata.js';\nimport type {Client} from './TimelineController.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Loader of the Performance panel\n   *@example {Unknown JSON format} PH1\n   */\n  malformedTimelineDataS: 'Malformed timeline data: {PH1}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineLoader.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * This class handles loading traces from file and URL, and from the Lighthouse panel\n * It also handles loading cpuprofiles from file, url and console.profileEnd()\n *\n * Meanwhile, the normal trace recording flow bypasses TimelineLoader entirely,\n * as it's handled from TracingManager => TimelineController.\n */\nexport class TimelineLoader implements Common.StringOutputStream.OutputStream {\n  private client: Client|null;\n  private canceledCallback: (() => void)|null;\n  private buffer: string;\n  private firstRawChunk: boolean;\n  private totalSize!: number;\n  private filter: Trace.Extras.TraceFilter.TraceFilter|null;\n  #traceIsCPUProfile: boolean;\n  #collectedEvents: Trace.Types.Events.Event[] = [];\n  #metadata: Trace.Types.File.MetaData|null;\n\n  #traceFinalizedCallbackForTest?: () => void;\n  #traceFinalizedPromiseForTest: Promise<void>;\n\n  constructor(client: Client) {\n    this.client = client;\n    this.canceledCallback = null;\n    this.buffer = '';\n    this.firstRawChunk = true;\n    this.filter = null;\n    this.#traceIsCPUProfile = false;\n    this.#metadata = null;\n\n    this.#traceFinalizedPromiseForTest = new Promise<void>(resolve => {\n      this.#traceFinalizedCallbackForTest = resolve;\n    });\n  }\n\n  static async loadFromFile(file: File, client: Client): Promise<TimelineLoader> {\n    const loader = new TimelineLoader(client);\n    const fileReader = new Bindings.FileUtils.ChunkedFileReader(file);\n    loader.canceledCallback = fileReader.cancel.bind(fileReader);\n    loader.totalSize = file.size;\n    // We'll resolve and return the loader instance before finalizing the trace.\n    setTimeout(async () => {\n      const success = await fileReader.read(loader);\n      if (!success && fileReader.error()) {\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        loader.reportErrorAndCancelLoading((fileReader.error() as any).message);\n      }\n    });\n    return loader;\n  }\n\n  static loadFromEvents(events: Trace.Types.Events.Event[], client: Client): TimelineLoader {\n    const loader = new TimelineLoader(client);\n    window.setTimeout(async () => {\n      void loader.addEvents(events, null);\n    });\n    return loader;\n  }\n\n  static loadFromTraceFile(traceFile: Trace.Types.File.TraceFile, client: Client): TimelineLoader {\n    const loader = new TimelineLoader(client);\n    window.setTimeout(async () => {\n      void loader.addEvents(traceFile.traceEvents, traceFile.metadata);\n    });\n    return loader;\n  }\n\n  static loadFromCpuProfile(profile: Protocol.Profiler.Profile, client: Client): TimelineLoader {\n    const loader = new TimelineLoader(client);\n    loader.#traceIsCPUProfile = true;\n\n    try {\n      const contents = Trace.Helpers.SamplesIntegrator.SamplesIntegrator.createFakeTraceFromCpuProfile(\n          profile, Trace.Types.Events.ThreadID(1));\n\n      window.setTimeout(async () => {\n        void loader.addEvents(contents.traceEvents, null);\n      });\n    } catch (e) {\n      console.error(e.stack);\n    }\n    return loader;\n  }\n\n  static async loadFromURL(url: Platform.DevToolsPath.UrlString, client: Client): Promise<TimelineLoader> {\n    const loader = new TimelineLoader(client);\n    const stream = new Common.StringOutputStream.StringOutputStream();\n    client.loadingStarted();\n\n    const allowRemoteFilePaths =\n        Common.Settings.Settings.instance().moduleSetting('network.enable-remote-file-loading').get();\n    Host.ResourceLoader.loadAsStream(url, null, stream, finishedCallback, allowRemoteFilePaths);\n\n    async function finishedCallback(\n        success: boolean, _headers: Record<string, string>,\n        errorDescription: Host.ResourceLoader.LoadErrorDescription): Promise<void> {\n      if (!success) {\n        return loader.reportErrorAndCancelLoading(errorDescription.message);\n      }\n      try {\n        const txt = stream.data();\n        const trace = JSON.parse(txt);\n        loader.#processParsedFile(trace);\n        await loader.close();\n      } catch (e: unknown) {\n        await loader.close();\n        const message = e instanceof Error ? e.message : '';\n        return loader.reportErrorAndCancelLoading(i18nString(UIStrings.malformedTimelineDataS, {PH1: message}));\n      }\n    }\n\n    return loader;\n  }\n\n  #processParsedFile(trace: ParsedJSONFile): void {\n    if ('traceEvents' in trace || Array.isArray(trace)) {\n      // We know that this is NOT a raw CPU Profile because it has traceEvents\n      // (either at the top level, or nested under the traceEvents key)\n      const items = Array.isArray(trace) ? trace : trace.traceEvents;\n\n      this.#collectEvents(items);\n    } else if (trace.nodes) {\n      // We know it's a raw Protocol CPU Profile.\n      this.#parseCPUProfileFormatFromFile(trace);\n      this.#traceIsCPUProfile = true;\n    } else {\n      this.reportErrorAndCancelLoading(i18nString(UIStrings.malformedTimelineDataS));\n      return;\n    }\n\n    if ('metadata' in trace) {\n      this.#metadata = trace.metadata;\n\n      // Older traces set these fields even when throttling is not active, while newer traces do not.\n      // Clear them out on load to simplify usage.\n      if (this.#metadata.cpuThrottling === 1) {\n        this.#metadata.cpuThrottling = undefined;\n      }\n      // This string is translated, so this only covers the english case and the current locale.\n      // Due to this, older traces in other locales will end up displaying \"No throttling\" in the trace history selector.\n      const noThrottlingString = typeof SDK.NetworkManager.NoThrottlingConditions.title === 'string' ?\n          SDK.NetworkManager.NoThrottlingConditions.title :\n          SDK.NetworkManager.NoThrottlingConditions.title();\n      if (this.#metadata.networkThrottling === 'No throttling' ||\n          this.#metadata.networkThrottling === noThrottlingString) {\n        this.#metadata.networkThrottling = undefined;\n      }\n    }\n  }\n\n  async addEvents(events: readonly Trace.Types.Events.Event[], metadata: Trace.Types.File.MetaData|null):\n      Promise<void> {\n    this.#metadata = metadata;\n    this.client?.loadingStarted();\n    /**\n     * See the `eventsPerChunk` comment in `models/trace/types/Configuration.ts`.\n     *\n     * This value is different though. Why? `The addEvents()` work below is different\n     * (and much faster!) than running `handleEvent()` on all handlers.\n     */\n    const eventsPerChunk = 150_000;\n    for (let i = 0; i < events.length; i += eventsPerChunk) {\n      const chunk = events.slice(i, i + eventsPerChunk);\n      this.#collectEvents(chunk as unknown as Trace.Types.Events.Event[]);\n      this.client?.loadingProgress((i + chunk.length) / events.length);\n      await new Promise(r => window.setTimeout(r, 0));  // Yield event loop to paint.\n    }\n    void this.close();\n  }\n\n  async cancel(): Promise<void> {\n    if (this.client) {\n      await this.client.loadingComplete(\n          /* collectedEvents */[], /* exclusiveFilter= */ null, /* metadata= */ null);\n      this.client = null;\n    }\n    if (this.canceledCallback) {\n      this.canceledCallback();\n    }\n  }\n\n  /**\n   * As TimelineLoader implements `Common.StringOutputStream.OutputStream`, `write()` is called when a\n   * Common.StringOutputStream.StringOutputStream instance has decoded a chunk. This path is only used\n   * by `loadFromFile()`; it's NOT used by `loadFromEvents` or `loadFromURL`.\n   */\n  async write(chunk: string, endOfFile: boolean): Promise<void> {\n    if (!this.client) {\n      return await Promise.resolve();\n    }\n    this.buffer += chunk;\n    if (this.firstRawChunk) {\n      this.client.loadingStarted();\n      // Ensure we paint the loading dialog before continuing\n      await new Promise(resolve => requestAnimationFrame(() => requestAnimationFrame(resolve)));\n      this.firstRawChunk = false;\n    } else {\n      let progress = undefined;\n      progress = this.buffer.length / this.totalSize;\n      // For compressed traces, we can't provide a definite progress percentage. So, just keep it moving.\n      // For other traces, calculate a loaded part.\n      progress = progress > 1 ? progress - Math.floor(progress) : progress;\n      this.client.loadingProgress(progress);\n    }\n\n    if (endOfFile) {\n      let trace;\n      try {\n        trace = JSON.parse(this.buffer) as ParsedJSONFile;\n        this.#processParsedFile(trace);\n      } catch (e) {\n        this.reportErrorAndCancelLoading(i18nString(UIStrings.malformedTimelineDataS, {PH1: e.toString()}));\n      }\n      return;\n    }\n  }\n\n  private reportErrorAndCancelLoading(message?: string): void {\n    if (message) {\n      Common.Console.Console.instance().error(message);\n    }\n    void this.cancel();\n  }\n\n  async close(): Promise<void> {\n    if (!this.client) {\n      return;\n    }\n    this.client.processingStarted();\n    await this.finalizeTrace();\n  }\n\n  private async finalizeTrace(): Promise<void> {\n    if (!this.#metadata && this.#traceIsCPUProfile) {\n      this.#metadata = RecordingMetadata.forCPUProfile();\n    }\n\n    await (this.client as Client).loadingComplete(this.#collectedEvents, this.filter, this.#metadata);\n    this.#traceFinalizedCallbackForTest?.();\n  }\n\n  traceFinalizedForTest(): Promise<void> {\n    return this.#traceFinalizedPromiseForTest;\n  }\n\n  #parseCPUProfileFormatFromFile(parsedTrace: Protocol.Profiler.Profile): void {\n    const traceFile = Trace.Helpers.SamplesIntegrator.SamplesIntegrator.createFakeTraceFromCpuProfile(\n        parsedTrace, Trace.Types.Events.ThreadID(1));\n\n    this.#collectEvents(traceFile.traceEvents);\n  }\n\n  #collectEvents(events: readonly Trace.Types.Events.Event[]): void {\n    this.#collectedEvents = this.#collectedEvents.concat(events);\n  }\n}\n\n/**\n * Used when we parse the input, but do not yet know if it is a raw CPU Profile or a Trace\n **/\ntype ParsedJSONFile = Trace.Types.File.Contents|Protocol.Profiler.Profile;\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as TraceBounds from '../../services/trace_bounds/trace_bounds.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as TimelineComponents from './components/components.js';\nimport {ModificationsManager} from './ModificationsManager.js';\nimport {\n  type TimelineEventOverview,\n  TimelineEventOverviewCPUActivity,\n  TimelineEventOverviewMemory,\n  TimelineEventOverviewNetwork,\n  TimelineEventOverviewResponsiveness,\n  TimelineFilmStripOverview,\n} from './TimelineEventOverview.js';\nimport miniMapStyles from './timelineMiniMap.css.js';\nimport {TimelineUIUtils} from './TimelineUIUtils.js';\n\nexport interface OverviewData {\n  parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  isCpuProfile?: boolean;\n  settings: {\n    showScreenshots: boolean,\n    showMemory: boolean,\n  };\n}\n\n/**\n * This component wraps the generic PerfUI Overview component and configures it\n * specifically for the Performance Panel, including injecting the CSS we use\n * to customise how the components render within the Performance Panel.\n *\n * It is also responsible for listening to events from the OverviewPane to\n * update the visible trace window, and when this happens it will update the\n * TraceBounds service with the new values.\n */\nexport class TimelineMiniMap extends\n    Common.ObjectWrapper.eventMixin<PerfUI.TimelineOverviewPane.EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox) {\n  #overviewComponent = new PerfUI.TimelineOverviewPane.TimelineOverviewPane('timeline');\n  #controls: TimelineEventOverview[] = [];\n  breadcrumbs: TimelineComponents.Breadcrumbs.Breadcrumbs|null = null;\n  #breadcrumbsUI: TimelineComponents.BreadcrumbsUI.BreadcrumbsUI;\n  #data: OverviewData|null = null;\n\n  #onTraceBoundsChangeBound = this.#onTraceBoundsChange.bind(this);\n\n  constructor() {\n    super();\n    this.registerRequiredCSS(miniMapStyles);\n    this.element.classList.add('timeline-minimap');\n    this.#breadcrumbsUI = new TimelineComponents.BreadcrumbsUI.BreadcrumbsUI();\n    this.element.prepend(this.#breadcrumbsUI);\n\n    this.#overviewComponent.show(this.element);\n\n    this.#overviewComponent.addEventListener(PerfUI.TimelineOverviewPane.Events.OVERVIEW_PANE_WINDOW_CHANGED, event => {\n      this.#onOverviewPanelWindowChanged(event);\n    });\n    this.#overviewComponent.addEventListener(\n        PerfUI.TimelineOverviewPane.Events.OVERVIEW_PANE_BREADCRUMB_ADDED, event => {\n          this.addBreadcrumb(event.data);\n        });\n\n    // We want to add/remove an overlay for these two events, and the overlay system is controlled by\n    // `TimelineFlameChartView`, so we need to dispatch them up to the `TimelinePanel` level to call\n    // `TimelineFlameChartView` -> `addOverlay()/removeOverlay()`.\n    this.#overviewComponent.addEventListener(PerfUI.TimelineOverviewPane.Events.OVERVIEW_PANE_MOUSE_MOVE, event => {\n      this.dispatchEventToListeners(PerfUI.TimelineOverviewPane.Events.OVERVIEW_PANE_MOUSE_MOVE, event.data);\n    });\n    this.#overviewComponent.addEventListener(PerfUI.TimelineOverviewPane.Events.OVERVIEW_PANE_MOUSE_LEAVE, () => {\n      this.dispatchEventToListeners(PerfUI.TimelineOverviewPane.Events.OVERVIEW_PANE_MOUSE_LEAVE);\n    });\n\n    this.#breadcrumbsUI.addEventListener(TimelineComponents.BreadcrumbsUI.BreadcrumbActivatedEvent.eventName, event => {\n      const {breadcrumb, childBreadcrumbsRemoved} =\n          (event as TimelineComponents.BreadcrumbsUI.BreadcrumbActivatedEvent);\n      this.#activateBreadcrumb(\n          breadcrumb, {removeChildBreadcrumbs: Boolean(childBreadcrumbsRemoved), updateVisibleWindow: true});\n    });\n    this.#overviewComponent.enableCreateBreadcrumbsButton();\n\n    TraceBounds.TraceBounds.onChange(this.#onTraceBoundsChangeBound);\n    // Set the initial bounds for the overview. Otherwise if we mount & there\n    // is not an immediate RESET event, then we don't render correctly.\n    const state = TraceBounds.TraceBounds.BoundsManager.instance().state();\n    if (state) {\n      const {timelineTraceWindow, minimapTraceBounds} = state.milli;\n      this.#overviewComponent.setWindowTimes(timelineTraceWindow.min, timelineTraceWindow.max);\n      this.#overviewComponent.setBounds(minimapTraceBounds.min, minimapTraceBounds.max);\n    }\n  }\n\n  #onOverviewPanelWindowChanged(\n      event: Common.EventTarget.EventTargetEvent<PerfUI.TimelineOverviewPane.OverviewPaneWindowChangedEvent>): void {\n    const parsedTrace = this.#data?.parsedTrace;\n    if (!parsedTrace) {\n      return;\n    }\n\n    const traceBoundsState = TraceBounds.TraceBounds.BoundsManager.instance().state();\n    if (!traceBoundsState) {\n      return;\n    }\n\n    const left = (event.data.startTime > 0) ? event.data.startTime : traceBoundsState.milli.entireTraceBounds.min;\n    const right =\n        Number.isFinite(event.data.endTime) ? event.data.endTime : traceBoundsState.milli.entireTraceBounds.max;\n\n    TraceBounds.TraceBounds.BoundsManager.instance().setTimelineVisibleWindow(\n        Trace.Helpers.Timing.traceWindowFromMilliSeconds(\n            Trace.Types.Timing.Milli(left),\n            Trace.Types.Timing.Milli(right),\n            ),\n        {\n          shouldAnimate: true,\n        },\n    );\n  }\n\n  #onTraceBoundsChange(event: TraceBounds.TraceBounds.StateChangedEvent): void {\n    if (event.updateType === 'RESET' || event.updateType === 'VISIBLE_WINDOW') {\n      this.#overviewComponent.setWindowTimes(\n          event.state.milli.timelineTraceWindow.min, event.state.milli.timelineTraceWindow.max);\n\n      // If the visible window has changed because we are revealing a certain\n      // time period to the user, we need to ensure that this new time\n      // period fits within the current minimap bounds. If it doesn't, we\n      // do some work to update the minimap bounds. Note that this only\n      // applies if the user has created breadcrumbs, which scope the\n      // minimap. If they have not, the entire trace is the minimap, and\n      // therefore there is no work to be done.\n      const newWindowFitsBounds = Trace.Helpers.Timing.windowFitsInsideBounds({\n        window: event.state.micro.timelineTraceWindow,\n        bounds: event.state.micro.minimapTraceBounds,\n      });\n\n      if (!newWindowFitsBounds) {\n        this.#updateMiniMapBoundsToFitNewWindow(event.state.micro.timelineTraceWindow);\n      }\n    }\n    if (event.updateType === 'RESET' || event.updateType === 'MINIMAP_BOUNDS') {\n      this.#overviewComponent.setBounds(\n          event.state.milli.minimapTraceBounds.min, event.state.milli.minimapTraceBounds.max);\n    }\n  }\n\n  #updateMiniMapBoundsToFitNewWindow(newWindow: Trace.Types.Timing.TraceWindowMicro): void {\n    if (!this.breadcrumbs) {\n      return;\n    }\n    // Find the smallest breadcrumb that fits this window.\n    // Breadcrumbs are a linked list from largest to smallest so we have to\n    // walk through until we find one that does not fit, and pick the last\n    // before that.\n    let currentBreadcrumb: Trace.Types.File.Breadcrumb|null = this.breadcrumbs.initialBreadcrumb;\n    let lastBreadcrumbThatFits: Trace.Types.File.Breadcrumb = this.breadcrumbs.initialBreadcrumb;\n\n    while (currentBreadcrumb) {\n      const fits = Trace.Helpers.Timing.windowFitsInsideBounds({\n        window: newWindow,\n        bounds: currentBreadcrumb.window,\n      });\n      if (fits) {\n        lastBreadcrumbThatFits = currentBreadcrumb;\n      } else {\n        // If this breadcrumb does not fit, none of its children (which are all\n        // smaller by definition) will, so we can exit the loop early.\n        break;\n      }\n      currentBreadcrumb = currentBreadcrumb.child;\n    }\n\n    // Activate the breadcrumb that fits the visible window. We do not update\n    // the visible window here as we are doing this work as a reaction to\n    // something else triggering a change in the window visibility.\n    this.#activateBreadcrumb(lastBreadcrumbThatFits, {removeChildBreadcrumbs: false, updateVisibleWindow: false});\n  }\n\n  addBreadcrumb({startTime, endTime}: PerfUI.TimelineOverviewPane.OverviewPaneBreadcrumbAddedEvent): void {\n    if (!this.breadcrumbs) {\n      console.warn('ModificationsManager has not been created, therefore Breadcrumbs can not be added');\n      return;\n    }\n    const traceBoundsState = TraceBounds.TraceBounds.BoundsManager.instance().state();\n    if (!traceBoundsState) {\n      return;\n    }\n    const bounds = traceBoundsState.milli.minimapTraceBounds;\n\n    // The OverviewPane can emit 0 and Infinity as numbers for the range; in\n    // this case we change them to be the min and max values of the minimap\n    // bounds.\n    const breadcrumbTimes = {\n      startTime: Trace.Types.Timing.Milli(Math.max(startTime, bounds.min)),\n      endTime: Trace.Types.Timing.Milli(Math.min(endTime, bounds.max)),\n    };\n\n    const newVisibleTraceWindow =\n        Trace.Helpers.Timing.traceWindowFromMilliSeconds(breadcrumbTimes.startTime, breadcrumbTimes.endTime);\n\n    const addedBreadcrumb = this.breadcrumbs.add(newVisibleTraceWindow);\n\n    this.#breadcrumbsUI.data = {\n      initialBreadcrumb: this.breadcrumbs.initialBreadcrumb,\n      activeBreadcrumb: addedBreadcrumb,\n    };\n  }\n\n  highlightBounds(bounds: Trace.Types.Timing.TraceWindowMicro, withBracket = false): void {\n    this.#overviewComponent.highlightBounds(bounds, withBracket);\n  }\n  clearBoundsHighlight(): void {\n    this.#overviewComponent.clearBoundsHighlight();\n  }\n\n  /**\n   * Activates a given breadcrumb.\n   * @param options.removeChildBreadcrumbs - if true, any child breadcrumbs will be removed.\n   * @param options.updateVisibleWindow - if true, the visible window will be updated to match the bounds of the breadcrumb\n   */\n  #activateBreadcrumb(\n      breadcrumb: Trace.Types.File.Breadcrumb,\n      options: TimelineComponents.Breadcrumbs.SetActiveBreadcrumbOptions): void {\n    if (!this.breadcrumbs) {\n      return;\n    }\n\n    this.breadcrumbs.setActiveBreadcrumb(breadcrumb, options);\n    // Only the initial breadcrumb is passed in because breadcrumbs are stored in a linked list and breadcrumbsUI component iterates through them\n    this.#breadcrumbsUI.data = {\n      initialBreadcrumb: this.breadcrumbs.initialBreadcrumb,\n      activeBreadcrumb: breadcrumb,\n    };\n  }\n\n  reset(): void {\n    this.#data = null;\n    this.#overviewComponent.reset();\n  }\n\n  #setMarkers(parsedTrace: Trace.Handlers.Types.ParsedTrace): void {\n    const markers = new Map<number, HTMLDivElement>();\n\n    const {Meta} = parsedTrace;\n\n    // Only add markers for navigation start times.\n    const navStartEvents = Meta.mainFrameNavigations;\n    const minTimeInMilliseconds = Trace.Helpers.Timing.microToMilli(Meta.traceBounds.min);\n\n    for (const event of navStartEvents) {\n      const {startTime} = Trace.Helpers.Timing.eventTimingsMilliSeconds(event);\n      markers.set(startTime, TimelineUIUtils.createEventDivider(event, minTimeInMilliseconds));\n    }\n\n    this.#overviewComponent.setMarkers(markers);\n  }\n\n  #setNavigationStartEvents(parsedTrace: Trace.Handlers.Types.ParsedTrace): void {\n    this.#overviewComponent.setNavStartTimes(parsedTrace.Meta.mainFrameNavigations);\n  }\n\n  getControls(): TimelineEventOverview[] {\n    return this.#controls;\n  }\n\n  setData(data: OverviewData): void {\n    if (this.#data?.parsedTrace === data.parsedTrace) {\n      return;\n    }\n    this.#data = data;\n    this.#controls = [];\n\n    this.#setMarkers(data.parsedTrace);\n    this.#setNavigationStartEvents(data.parsedTrace);\n    this.#controls.push(new TimelineEventOverviewResponsiveness(data.parsedTrace));\n    this.#controls.push(new TimelineEventOverviewCPUActivity(data.parsedTrace));\n\n    this.#controls.push(new TimelineEventOverviewNetwork(data.parsedTrace));\n    if (data.settings.showScreenshots) {\n      const filmStrip = Trace.Extras.FilmStrip.fromParsedTrace(data.parsedTrace);\n      if (filmStrip.frames.length) {\n        this.#controls.push(new TimelineFilmStripOverview(filmStrip));\n      }\n    }\n    if (data.settings.showMemory) {\n      this.#controls.push(new TimelineEventOverviewMemory(data.parsedTrace));\n    }\n    this.#overviewComponent.setOverviewControls(this.#controls);\n    this.#overviewComponent.showingScreenshots = data.settings.showScreenshots;\n    this.#setInitialBreadcrumb();\n  }\n\n  #setInitialBreadcrumb(): void {\n    // Set the initial breadcrumb that ModificationsManager created from the initial full window\n    // or loaded from the file.\n    this.breadcrumbs = ModificationsManager.activeManager()?.getTimelineBreadcrumbs() ?? null;\n\n    if (!this.breadcrumbs) {\n      return;\n    }\n\n    let lastBreadcrumb = this.breadcrumbs.initialBreadcrumb;\n    while (lastBreadcrumb.child !== null) {\n      lastBreadcrumb = lastBreadcrumb.child;\n    }\n\n    this.#breadcrumbsUI.data = {\n      initialBreadcrumb: this.breadcrumbs.initialBreadcrumb,\n      activeBreadcrumb: lastBreadcrumb,\n    };\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2023 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.timeline-minimap {\n  position: relative;\n}\n\n.timeline-minimap .overview-strip {\n  margin-top: 2px;\n  justify-content: center;\n}\n\n.timeline-minimap .overview-strip .timeline-overview-strip-title {\n  color: var(--sys-color-token-subtle);\n  font-size: 10px;\n  font-weight: bold;\n  z-index: 100;\n  background-color: var(--sys-color-cdt-base-container);\n  padding: 0 4px;\n  position: absolute;\n  top: -2px;\n  right: 0;\n}\n\n.timeline-minimap #timeline-overview-cpu-activity {\n  flex-basis: 20px;\n}\n\n.timeline-minimap #timeline-overview-network {\n  flex-basis: 8px;\n}\n\n.timeline-minimap #timeline-overview-filmstrip {\n  flex-basis: 30px;\n}\n\n.timeline-minimap #timeline-overview-memory {\n  flex-basis: 20px;\n}\n\n.timeline-minimap #timeline-overview-network::before,\n.timeline-minimap #timeline-overview-cpu-activity::before {\n  content: \"\";\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  border-bottom: 1px solid var(--divider-line);\n  z-index: -200;\n}\n\n.timeline-minimap .overview-strip .background {\n  z-index: -10;\n}\n\n.timeline-minimap #timeline-overview-responsiveness {\n  flex-basis: 5px;\n  margin-top: 0 !important; /* stylelint-disable-line declaration-no-important */\n}\n\n.timeline-minimap #timeline-overview-input {\n  flex-basis: 6px;\n}\n\n.timeline-minimap #timeline-overview-pane {\n  flex: auto;\n  position: relative;\n  overflow: hidden;\n}\n\n.timeline-minimap #timeline-overview-container {\n  display: flex;\n  flex-direction: column;\n  flex: none;\n  position: relative;\n  overflow: hidden;\n}\n\n.timeline-minimap #timeline-overview-container canvas {\n  width: 100%;\n  height: 100%;\n}\n\n.timeline-minimap-dim-highlight-svg {\n  width: 100%;\n  position: absolute;\n  height: 100%;\n}\n\n.timeline-minimap .memory-graph-label {\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  font-size: 9px;\n  color: var(--sys-color-token-subtle);\n  white-space: nowrap;\n  padding: 0 4px;\n  background-color: var(--sys-color-cdt-base-container);\n}\n\n/*# sourceURL=${import.meta.resolve('./timelineMiniMap.css')} */`;", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright (C) 2006, 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Anthony Ricaud <rik@webkit.org>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n.timeline-toolbar-container {\n  display: flex;\n  align-items: flex-start;\n  flex: none;\n  background-color: var(--sys-color-cdt-base-container);\n  border-bottom: 1px solid var(--sys-color-divider);\n\n  & > :first-child {\n    flex: 1 1 auto;\n  }\n}\n\n.timeline-settings-pane {\n  display: grid;\n  grid-template-columns: 50% 50%;\n  flex: none;\n  background-color: var(--sys-color-cdt-base-container);\n  border-bottom: 1px solid var(--sys-color-divider);\n\n  & > div {\n    margin-left: 5px;\n    display: flex;\n    align-items: center;\n    gap: 5px;\n\n    & > select {\n      height: var(--sys-size-9);\n      min-width: var(--sys-size-14);\n      border: none;\n    }\n  }\n}\n\n#timeline-overview-panel {\n  flex: none;\n  position: relative;\n  border-bottom: 1px solid var(--sys-color-divider);\n}\n\n#timeline-overview-grid {\n  background-color: var(--sys-color-cdt-base-container);\n}\n\n#timeline-overview-grid .timeline-grid-header {\n  height: 12px;\n}\n\n#timeline-overview-grid .resources-dividers-label-bar {\n  pointer-events: auto;\n  height: 12px;\n}\n\n#timeline-overview-grid .resources-divider-label {\n  top: 1px;\n}\n\n.timeline-details-split {\n  flex: auto;\n}\n\n.timeline.panel .status-pane-container {\n  z-index: 1000;\n  display: flex;\n  align-items: center;\n  pointer-events: none;\n}\n\n.timeline.panel .status-pane-container.tinted {\n  background-color: var(--sys-color-cdt-base-container);\n  pointer-events: auto;\n}\n\n.timeline-landing-page.legacy > div > p {\n  flex: none;\n  white-space: pre-line;\n  line-height: 18px;\n}\n\n.popover ul {\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n}\n\n#memory-graphs-canvas-container {\n  overflow: hidden;\n  flex: auto;\n  position: relative;\n\n  .no-events-found {\n    position: absolute;\n    font: var(--sys-typescale-body4-regular);\n    left: var(--sys-size-5);\n    bottom: var(--sys-size-5);\n\n    p {\n      margin: 0;\n    }\n  }\n}\n\n#memory-counters-graph {\n  flex: auto;\n}\n\n#memory-graphs-canvas-container .memory-counter-marker {\n  position: absolute;\n  border-radius: 3px;\n  width: 5px;\n  height: 5px;\n  margin-left: -3px;\n  margin-top: -2px;\n}\n\n#memory-graphs-container .timeline-memory-header {\n  flex: 0 0 26px;\n  background-color: var(--sys-color-surface2);\n  border-bottom: 1px solid var(--sys-color-divider);\n  justify-content: space-between;\n}\n\n#memory-graphs-container .timeline-memory-header::after {\n  content: \"\";\n  /* stylelint-disable-next-line custom-property-pattern */\n  background-image: var(--image-file-toolbarResizerVertical);\n  background-repeat: no-repeat;\n  background-position: right center, center;\n  flex: 20px 0 0;\n  margin: 0 4px;\n}\n\n.timeline-memory-toolbar {\n  flex-shrink: 1;\n}\n\n.memory-counter-value {\n  margin: 8px;\n}\n\n#counter-values-bar {\n  flex: 0 0 20px;\n  border-top: solid 1px var(--sys-color-divider);\n  width: 100%;\n  overflow: hidden;\n  line-height: 18px;\n}\n\n.timeline-flamechart {\n  overflow: hidden;\n}\n\n.brick-game {\n  background-color: var(--sys-color-neutral-container);\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 9999; /* A high value to ensure it's on top */\n}\n\n.game-close-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 25px;\n  height: 25px;\n  position: absolute;\n  right: 15px;\n  top: 15px;\n  border-radius: 50%;\n  cursor: pointer;\n}\n\n.scorePanel {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  white-space: pre-line;\n  padding: 15px;\n  position: absolute;\n  left: 15px;\n  bottom: 15px;\n  border: double 7px transparent;\n  border-radius: 20px;\n  background-origin: border-box;\n  background-clip: content-box, border-box;\n  font-weight: 200;\n}\n\n.confetti-100 {\n  display: block;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.confetti-100 > .confetti-100-particle {\n  opacity: 0%;\n  position: fixed;\n  animation: confetti-100-animation 1s none ease-out;\n  font-size: 30px;\n}\n\n@keyframes confetti-100-animation {\n  0% {\n    opacity: 100%;\n    transform: translateY(0%) translateY(0%) rotate(0deg);\n  }\n\n  100% {\n    opacity: 0%;\n    /* stylelint-disable-next-line custom-property-pattern */\n    transform: translateY(var(--to-Y)) translateX(var(--to-X)) rotate(var(--rotation));\n  }\n}\n\n@media (prefers-reduced-motion) {\n  .confetti-100 > .confetti-100-particle {\n    animation-name: dissolve;\n  }\n}\n\n.timeline-layers-view-properties table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.timeline-layers-view-properties td {\n  border: 1px solid var(--sys-color-divider);\n  line-height: 22px;\n}\n\n.timeline-filmstrip-preview > img {\n  max-width: 500px;\n  max-height: 300px;\n  cursor: pointer;\n  border: 1px solid var(--sys-color-divider);\n}\n\n.timeline-details .filter-input-field {\n  width: 120px;\n}\n\n.timeline-stack-view-header {\n  height: 27px;\n  background-color: var(--sys-color-cdt-base-container);\n  padding: 6px 10px;\n  color: var(--sys-color-on-surface);\n  white-space: nowrap;\n  border-bottom: 1px solid var(--sys-color-divider);\n}\n\n.timeline-landing-page {\n  position: absolute;\n  background-color: var(--sys-color-cdt-base-container);\n}\n\n.timeline-landing-page.legacy {\n  justify-content: center;\n  align-items: center;\n  overflow: auto;\n  font-size: 13px;\n  color: var(--sys-color-on-surface-subtle);\n}\n\n.timeline-landing-page.legacy > div {\n  max-width: 450px;\n  margin: 10px;\n}\n\n.timeline-paint-profiler-log-split > div:last-child {\n  background-color: var(--color-background-elevation-1);\n  z-index: 0;\n}\n\n.timeline-layers-view > div:last-child,\n.timeline-layers-view-properties > div:last-child {\n  background-color: var(--color-background-elevation-1);\n}\n\n.timeline.panel .status-pane-container > div {\n  pointer-events: auto;\n}\n\n.timeline-tree-view .data-grid .name-container div {\n  flex: none;\n}\n\n\ndevtools-performance-third-party-tree-view {\n  .background-bar-container {\n    /* Dont need the bars in 3p table */\n    display: none;\n  }\n\n   .timeline-tree-view devtools-toolbar {\n    border: 0;\n   }\n\n  .timeline-tree-view .data-grid .odd {\n    background: none;\n  }\n\n  .timeline-tree-view .data-grid {\n    border-width: 0 !important; /* stylelint-disable-line declaration-no-important */\n\n    th {\n      background-color: var(--sys-color-cdt-base-container);\n      font-weight: var(--ref-typeface-weight-medium);\n      /* Center to give some gap against sorting triangle */\n      text-align: center;\n\n      &.site-column {\n        text-align: left;\n      }\n    }\n\n    tr .numeric-column,\n    tr .site-column {\n      border-left: none;\n      border-bottom: var(--sys-size-1) solid var(--sys-color-divider);\n      /* Don't let devtools-button size mess with things */\n      contain: strict;\n      padding: 0;\n      line-height: 21px;\n    }\n\n    .bottom-filler-td,\n    th.sortable {\n      border: none;\n    }\n\n    tr {\n      height: 22px;\n    }\n\n    devtools-button {\n      display: inline-flex;\n      visibility: hidden;\n      margin: 0 8px 0 4px;\n      vertical-align: top;\n    }\n\n    tr.revealed:hover,\n    tr.selected {\n     devtools-button {\n        visibility: visible;\n      }\n    }\n\n    /* Default data-grid has this element on the edge of the rows,\n      we don't need them for the 3P table. So for now set display to none. */\n    .corner,\n    &.data-grid-fits-viewport .corner {\n      display: none;\n    }\n\n    .data-grid-resizer:hover {\n        background: linear-gradient(to right, transparent, transparent 2px, var(--sys-color-divider) 2px, var(--sys-color-divider) 3px, transparent 3px) no-repeat 0 0 / 100% 100%;\n    }\n  }\n\n  .widget.vbox.timeline-tree-view {\n    /* See column width comments in populateColumns() */\n    max-width: min(100%, 550px);\n    min-width: 350px; /* Lower than this, there's not enough room for the entity name */\n    padding: 0 0 0 var(--sys-size-6);\n    border-left: var(--sys-size-1) solid var(--sys-color-divider);\n  }\n\n  /* While timeline treeview name-container uses flexbox to layout, it's overkill for this table's purposes.\n     By not using it, we can benefit from text-overflow:ellipsis applying correctly to names and entity-badges */\n .timeline-tree-view .data-grid .name-container {\n    display: block;\n    padding-left: 2px;\n\n    .activity-name {\n      display: inline;\n    }\n\n    .activity-icon-container {\n      display: none;\n    }\n\n    .entity-badge {\n      margin-left: var(--sys-size-4);\n      font-weight: var(--ref-typeface-weight-medium);\n      padding: 0 var(--sys-size-2);\n      background-color: var(--sys-color-tonal-container);\n      border-radius: var(--sys-shape-corner-extra-small);\n      height: 16px;\n      line-height: 16px;\n      font-size: var(--sys-typescale-body5-size);\n      display: inline-block;\n    }\n }\n}\n\ndevtools-toolbar {\n  .history-dropdown-button {\n    width: var(--sys-size-23);\n    height: var(--sys-size-9);\n    border-radius: var(--sys-shape-corner-extra-small);\n    text-align: left;\n    display: flex;\n    padding-right: var(--sys-size-5);\n\n    &:hover {\n      background-color: var(--sys-color-state-hover-on-subtle);\n    }\n\n    &:active {\n      background-color: var(--sys-color-state-ripple-neutral-on-subtle);\n    }\n\n    &:hover:active {\n      background:\n        linear-gradient(var(--sys-color-state-hover-on-subtle), var(--sys-color-state-hover-on-subtle)),\n        linear-gradient(var(--sys-color-state-ripple-neutral-on-subtle), var(--sys-color-state-ripple-neutral-on-subtle));\n    }\n\n    &:focus-visible {\n      outline: var(--sys-size-2) solid var(--sys-color-state-focus-ring);\n    }\n\n    &[disabled] {\n      pointer-events: none;\n      color: var(--sys-color-state-disabled);\n      background-color: var(--sys-color-state-disabled-container);\n\n      .content::after {\n        background-color: var(--sys-color-state-disabled);\n      }\n    }\n\n    & > .content {\n      margin-left: 5px;\n      padding-right: 5px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      flex: 1 1;\n      min-width: 35px;\n\n      &::after {\n        float: right;\n        user-select: none;\n        mask-image: var(--image-file-triangle-down);\n        width: 14px;\n        height: 14px;\n        content: \"\";\n        position: absolute;\n        background-color: var(--icon-default);\n        right: var(--sys-size-3);\n        top: var(--sys-size-3);\n      }\n    }\n  }\n\n  @media (forced-colors: active) {\n    .history-dropdown-button[disabled] {\n      opacity: 100%;\n    }\n\n    .history-dropdown-button > .content::after {\n      background-color: ButtonText;\n    }\n\n    .history-dropdown-button[disabled] > .content::after {\n      background-color: GrayText;\n    }\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./timelinePanel.css')} */`;", "/*\n * Copyright (C) 2019 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as SDK from '../../core/sdk/sdk.js';\n\nimport {type Client, TimelineController} from './TimelineController.js';\nimport {UIDevtoolsUtils} from './UIDevtoolsUtils.js';\nimport * as Utils from './utils/utils.js';\n\nexport class UIDevtoolsController extends TimelineController {\n  constructor(rootTarget: SDK.Target.Target, primaryPageTarget: SDK.Target.Target, client: Client) {\n    super(rootTarget, primaryPageTarget, client);\n    Utils.EntryStyles.setEventStylesMap(UIDevtoolsUtils.categorizeEvents());\n    Utils.EntryStyles.setCategories(UIDevtoolsUtils.categories());\n    Utils.EntryStyles.setTimelineMainEventCategories(\n        UIDevtoolsUtils.getMainCategoriesList().filter(Utils.EntryStyles.stringIsEventCategory));\n  }\n}\n", "/*\n * Copyright (C) 2019 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\n\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline UIUtils of the Performance panel\n   */\n  frameStart: 'Frame start',\n  /**\n   *@description Text in Timeline UIUtils of the Performance panel\n   */\n  drawFrame: 'Draw frame',\n  /**\n   *@description Text in Timeline UIUtils of the Performance panel\n   */\n  layout: 'Layout',\n  /**\n   *@description Text in UIDevtools Utils of the Performance panel\n   */\n  rasterizing: 'Rasterizing',\n  /**\n   *@description Text in UIDevtools Utils of the Performance panel\n   */\n  drawing: 'Drawing',\n  /**\n   *@description Text in Timeline UIUtils of the Performance panel\n   */\n  painting: 'Painting',\n  /**\n   *@description Text in Timeline UIUtils of the Performance panel\n   */\n  system: 'System',\n  /**\n   *@description Text in Timeline UIUtils of the Performance panel\n   */\n  idle: 'Idle',\n  /**\n   *@description Category in the Summary view of the Performance panel to indicate time spent to load resources\n   */\n  loading: 'Loading',\n  /**\n   *@description Text in Timeline for the Experience title\n   */\n  experience: 'Experience',\n  /**\n   *@description Category in the Summary view of the Performance panel to indicate time spent in script execution\n   */\n  scripting: 'Scripting',\n  /**\n   *@description Category in the Summary view of the Performance panel to indicate time spent in rendering the web page\n   */\n  rendering: 'Rendering',\n  /**\n   *@description Event category in the Performance panel for time spent in the GPU\n   */\n  gpu: 'GPU',\n  /**\n   *@description Text in Timeline UIUtils of the Performance panel\n   */\n  async: 'Async',\n  /**\n   *@description Text in Timeline UIUtils of the Performance panel\n   */\n  messaging: 'Messaging',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/UIDevtoolsUtils.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet eventStylesMap: Record<string, Utils.EntryStyles.TimelineRecordStyle>|null = null;\nlet categories: Utils.EntryStyles.CategoryPalette|null = null;\n\nexport class UIDevtoolsUtils {\n  static isUiDevTools(): boolean {\n    return Root.Runtime.Runtime.queryParam('uiDevTools') === 'true';\n  }\n\n  static categorizeEvents(): Record<string, Utils.EntryStyles.TimelineRecordStyle> {\n    if (eventStylesMap) {\n      return eventStylesMap;\n    }\n\n    const type = RecordType;\n    const categories = UIDevtoolsUtils.categories();\n    const drawing = categories['drawing'];\n    const rasterizing = categories['rasterizing'];\n    const layout = categories['layout'];\n    const painting = categories['painting'];\n    const other = categories['other'];\n\n    const eventStyles: Record<string, Utils.EntryStyles.TimelineRecordStyle> = {};\n\n    const {TimelineRecordStyle} = Utils.EntryStyles;\n\n    // Paint Categories\n    eventStyles[type.ViewPaint] = new TimelineRecordStyle('View::Paint', painting);\n    eventStyles[type.ViewOnPaint] = new TimelineRecordStyle('View::OnPaint', painting);\n    eventStyles[type.ViewPaintChildren] = new TimelineRecordStyle('View::PaintChildren', painting);\n    eventStyles[type.ViewOnPaintBackground] = new TimelineRecordStyle('View::OnPaintBackground', painting);\n    eventStyles[type.ViewOnPaintBorder] = new TimelineRecordStyle('View::OnPaintBorder', painting);\n    eventStyles[type.LayerPaintContentsToDisplayList] =\n        new TimelineRecordStyle('Layer::PaintContentsToDisplayList', painting);\n\n    // Layout Categories\n    eventStyles[type.ViewLayout] = new TimelineRecordStyle('View::Layout', layout);\n    eventStyles[type.ViewLayoutBoundsChanged] = new TimelineRecordStyle('View::Layout(bounds_changed)', layout);\n\n    // Raster Categories\n    eventStyles[type.RasterTask] = new TimelineRecordStyle('RasterTask', rasterizing);\n    eventStyles[type.RasterizerTaskImplRunOnWorkerThread] =\n        new TimelineRecordStyle('RasterizerTaskImpl::RunOnWorkerThread', rasterizing);\n\n    // Draw Categories\n    eventStyles[type.DirectRendererDrawFrame] = new TimelineRecordStyle('DirectRenderer::DrawFrame', drawing);\n    eventStyles[type.BeginFrame] = new TimelineRecordStyle(i18nString(UIStrings.frameStart), drawing, true);\n    eventStyles[type.DrawFrame] = new TimelineRecordStyle(i18nString(UIStrings.drawFrame), drawing, true);\n    eventStyles[type.NeedsBeginFrameChanged] = new TimelineRecordStyle('NeedsBeginFrameChanged', drawing, true);\n\n    // Other Categories\n    eventStyles[type.ThreadControllerImplRunTask] = new TimelineRecordStyle('ThreadControllerImpl::RunTask', other);\n\n    eventStylesMap = eventStyles;\n    return eventStyles;\n  }\n\n  static categories(): Utils.EntryStyles.CategoryPalette {\n    if (categories) {\n      return categories;\n    }\n    const {TimelineCategory, EventCategory} = Utils.EntryStyles;\n    categories = {\n      layout: new TimelineCategory(\n          EventCategory.LAYOUT, i18nString(UIStrings.layout), true, '--app-color-loading-children',\n          '--app-color-loading'),\n      rasterizing: new TimelineCategory(\n          EventCategory.RASTERIZING, i18nString(UIStrings.rasterizing), true, '--app-color-children',\n          '--app-color-scripting'),\n      drawing: new TimelineCategory(\n          EventCategory.DRAWING, i18nString(UIStrings.drawing), true, '--app-color-rendering-children',\n          '--app-color-rendering'),\n      painting: new TimelineCategory(\n          EventCategory.PAINTING, i18nString(UIStrings.painting), true, '--app-color-painting-children',\n          '--app-color-painting'),\n      other: new TimelineCategory(\n          EventCategory.OTHER, i18nString(UIStrings.system), false, '--app-color-system-children',\n          '--app-color-system'),\n      idle: new TimelineCategory(\n          EventCategory.IDLE, i18nString(UIStrings.idle), false, '--app-color-idle-children', '--app-color-idle'),\n      loading: new TimelineCategory(\n          EventCategory.LOADING, i18nString(UIStrings.loading), false, '--app-color-loading-children',\n          '--app-color-loading'),\n      experience: new TimelineCategory(\n          EventCategory.EXPERIENCE, i18nString(UIStrings.experience), false, '--app-color-rendering-children',\n          '--pp-color-rendering'),\n      messaging: new TimelineCategory(\n          EventCategory.MESSAGING, i18nString(UIStrings.messaging), false, '--app-color-messaging-children',\n          '--pp-color-messaging'),\n      scripting: new TimelineCategory(\n          EventCategory.SCRIPTING, i18nString(UIStrings.scripting), false, '--app-color-scripting-children',\n          '--pp-color-scripting'),\n      rendering: new TimelineCategory(\n          EventCategory.RENDERING, i18nString(UIStrings.rendering), false, '--app-color-rendering-children',\n          '--pp-color-rendering'),\n      gpu: new TimelineCategory(\n          EventCategory.GPU, i18nString(UIStrings.gpu), false, '--app-color-painting-children', '--app-color-painting'),\n      async: new TimelineCategory(\n          EventCategory.ASYNC, i18nString(UIStrings.async), false, '--app-color-async-children', '--app-color-async'),\n    };\n    return categories;\n  }\n\n  static getMainCategoriesList(): string[] {\n    return ['idle', 'drawing', 'painting', 'rasterizing', 'layout', 'other'];\n  }\n}\n\nexport enum RecordType {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  ViewPaint = 'View::Paint',\n  ViewOnPaint = 'View::OnPaint',\n  ViewPaintChildren = 'View::PaintChildren',\n  ViewOnPaintBackground = 'View::OnPaintBackground',\n  ViewOnPaintBorder = 'View::OnPaintBorder',\n  ViewLayout = 'View::Layout',\n  ViewLayoutBoundsChanged = 'View::Layout(bounds_changed)',\n  LayerPaintContentsToDisplayList = 'Layer::PaintContentsToDisplayList',\n  DirectRendererDrawFrame = 'DirectRenderer::DrawFrame',\n  RasterTask = 'RasterTask',\n  RasterizerTaskImplRunOnWorkerThread = 'RasterizerTaskImpl::RunOnWorkerThread',\n  BeginFrame = 'BeginFrame',\n  DrawFrame = 'DrawFrame',\n  NeedsBeginFrameChanged = 'NeedsBeginFrameChanged',\n  ThreadControllerImplRunTask = 'ThreadControllerImpl::RunTask',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n", "// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as LayerViewer from '../layer_viewer/layer_viewer.js';\n\nimport type {TracingFrameLayerTree} from './TracingLayerTree.js';\n\nexport class TimelineLayersView extends UI.SplitWidget.SplitWidget {\n  private readonly showPaintProfilerCallback: (arg0: SDK.PaintProfiler.PaintProfilerSnapshot) => void;\n  private readonly rightSplitWidget: UI.SplitWidget.SplitWidget;\n  private readonly layerViewHost: LayerViewer.LayerViewHost.LayerViewHost;\n  private readonly layers3DView: LayerViewer.Layers3DView.Layers3DView;\n  private frameLayerTree?: TracingFrameLayerTree;\n  private updateWhenVisible?: boolean;\n  constructor(showPaintProfilerCallback: (arg0: SDK.PaintProfiler.PaintProfilerSnapshot) => void) {\n    super(true, false, 'timeline-layers-view');\n    this.showPaintProfilerCallback = showPaintProfilerCallback;\n\n    this.element.classList.add('timeline-layers-view');\n    this.rightSplitWidget = new UI.SplitWidget.SplitWidget(true, true, 'timeline-layers-view-details');\n    this.rightSplitWidget.element.classList.add('timeline-layers-view-properties');\n    this.setMainWidget(this.rightSplitWidget);\n\n    const vbox = new UI.Widget.VBox();\n    this.setSidebarWidget(vbox);\n\n    this.layerViewHost = new LayerViewer.LayerViewHost.LayerViewHost();\n\n    const layerTreeOutline = new LayerViewer.LayerTreeOutline.LayerTreeOutline(this.layerViewHost);\n    vbox.element.appendChild(layerTreeOutline.element);\n\n    this.layers3DView = new LayerViewer.Layers3DView.Layers3DView(this.layerViewHost);\n    this.layers3DView.addEventListener(\n        LayerViewer.Layers3DView.Events.PAINT_PROFILER_REQUESTED, this.onPaintProfilerRequested, this);\n    this.rightSplitWidget.setMainWidget(this.layers3DView);\n\n    const layerDetailsView = new LayerViewer.LayerDetailsView.LayerDetailsView(this.layerViewHost);\n    this.rightSplitWidget.setSidebarWidget(layerDetailsView);\n    layerDetailsView.addEventListener(\n        LayerViewer.LayerDetailsView.Events.PAINT_PROFILER_REQUESTED, this.onPaintProfilerRequested, this);\n  }\n\n  showLayerTree(frameLayerTree: TracingFrameLayerTree): void {\n    this.frameLayerTree = frameLayerTree;\n    if (this.isShowing()) {\n      this.update();\n    } else {\n      this.updateWhenVisible = true;\n    }\n  }\n\n  override wasShown(): void {\n    if (this.updateWhenVisible) {\n      this.updateWhenVisible = false;\n      this.update();\n    }\n  }\n\n  private async onPaintProfilerRequested(\n      event: Common.EventTarget.EventTargetEvent<LayerViewer.LayerViewHost.Selection>): Promise<void> {\n    const selection = event.data;\n    const snapshotWithRect = await this.layers3DView.snapshotForSelection(selection);\n    if (snapshotWithRect) {\n      this.showPaintProfilerCallback(snapshotWithRect.snapshot);\n    }\n  }\n\n  update(): void {\n    if (this.frameLayerTree) {\n      void this.frameLayerTree.layerTreePromise().then(layerTree => this.layerViewHost.setLayerTree(layerTree));\n    }\n  }\n}\n", "// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as LayerViewer from '../layer_viewer/layer_viewer.js';\n\nimport timelinePaintProfilerStyles from './timelinePaintProfiler.css.js';\nimport {TracingFrameLayerTree} from './TracingLayerTree.js';\n\nexport class TimelinePaintProfilerView extends UI.SplitWidget.SplitWidget {\n  private readonly logAndImageSplitWidget: UI.SplitWidget.SplitWidget;\n  private readonly imageView: TimelinePaintImageView;\n  private readonly paintProfilerView: LayerViewer.PaintProfilerView.PaintProfilerView;\n  private readonly logTreeView: LayerViewer.PaintProfilerView.PaintProfilerCommandLogView;\n  private needsUpdateWhenVisible: boolean;\n  private pendingSnapshot: SDK.PaintProfiler.PaintProfilerSnapshot|null;\n  private event: Trace.Types.Events.Event|null;\n  private paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel|null;\n  private lastLoadedSnapshot: SDK.PaintProfiler.PaintProfilerSnapshot|null;\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace;\n\n  constructor(parsedTrace: Trace.Handlers.Types.ParsedTrace) {\n    super(false, false);\n    this.element.classList.add('timeline-paint-profiler-view');\n    this.setSidebarSize(60);\n    this.setResizable(false);\n\n    this.#parsedTrace = parsedTrace;\n\n    this.logAndImageSplitWidget = new UI.SplitWidget.SplitWidget(true, false);\n    this.logAndImageSplitWidget.element.classList.add('timeline-paint-profiler-log-split');\n    this.setMainWidget(this.logAndImageSplitWidget);\n    this.imageView = new TimelinePaintImageView();\n    this.logAndImageSplitWidget.setMainWidget(this.imageView);\n\n    this.paintProfilerView =\n        new LayerViewer.PaintProfilerView.PaintProfilerView(this.imageView.showImage.bind(this.imageView));\n    this.paintProfilerView.addEventListener(\n        LayerViewer.PaintProfilerView.Events.WINDOW_CHANGED, this.onWindowChanged, this);\n    this.setSidebarWidget(this.paintProfilerView);\n\n    this.logTreeView = new LayerViewer.PaintProfilerView.PaintProfilerCommandLogView();\n    this.logAndImageSplitWidget.setSidebarWidget(this.logTreeView);\n\n    this.needsUpdateWhenVisible = false;\n    this.pendingSnapshot = null;\n    this.event = null;\n    this.paintProfilerModel = null;\n    this.lastLoadedSnapshot = null;\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    if (this.needsUpdateWhenVisible) {\n      this.needsUpdateWhenVisible = false;\n      this.update();\n    }\n  }\n\n  setSnapshot(snapshot: SDK.PaintProfiler.PaintProfilerSnapshot): void {\n    this.releaseSnapshot();\n    this.pendingSnapshot = snapshot;\n    this.event = null;\n    this.updateWhenVisible();\n  }\n\n  #rasterEventHasTile(event: Trace.Types.Events.RasterTask): boolean {\n    const data = event.args.tileData;\n    if (!data) {\n      return false;\n    }\n\n    const frame = this.#parsedTrace.Frames.framesById[data.sourceFrameNumber];\n    if (!frame?.layerTree) {\n      return false;\n    }\n    return true;\n  }\n\n  setEvent(paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel, event: Trace.Types.Events.Event): boolean {\n    this.releaseSnapshot();\n    this.paintProfilerModel = paintProfilerModel;\n    this.pendingSnapshot = null;\n    this.event = event;\n\n    this.updateWhenVisible();\n    if (Trace.Types.Events.isPaint(event)) {\n      const snapshot = this.#parsedTrace.LayerTree.paintsToSnapshots.get(event);\n      return Boolean(snapshot);\n    }\n    if (Trace.Types.Events.isRasterTask(event)) {\n      return this.#rasterEventHasTile(event);\n    }\n    return false;\n  }\n\n  private updateWhenVisible(): void {\n    if (this.isShowing()) {\n      this.update();\n    } else {\n      this.needsUpdateWhenVisible = true;\n    }\n  }\n\n  async #rasterTilePromise(rasterEvent: Trace.Types.Events.RasterTask): Promise<{\n    rect: Protocol.DOM.Rect,\n    snapshot: SDK.PaintProfiler.PaintProfilerSnapshot,\n  }|null> {\n    const data = rasterEvent.args.tileData;\n    if (!data) {\n      return null;\n    }\n\n    if (!data.tileId.id_ref) {\n      return null;\n    }\n\n    const target = SDK.TargetManager.TargetManager.instance().rootTarget();\n    if (!target) {\n      return null;\n    }\n\n    const frame = this.#parsedTrace.Frames.framesById[data.sourceFrameNumber];\n    if (!frame?.layerTree) {\n      return null;\n    }\n\n    const layerTree = new TracingFrameLayerTree(\n        target,\n        frame.layerTree,\n    );\n    const tracingLayerTree = await layerTree.layerTreePromise();\n    return tracingLayerTree ? await tracingLayerTree.pictureForRasterTile(data.tileId.id_ref) : null;\n  }\n\n  update(): void {\n    this.logTreeView.setCommandLog([]);\n    void this.paintProfilerView.setSnapshotAndLog(null, [], null);\n\n    let snapshotPromise: Promise<{\n      rect: Protocol.DOM.Rect | null,\n      snapshot: SDK.PaintProfiler.PaintProfilerSnapshot,\n    }|null>;\n    if (this.pendingSnapshot) {\n      snapshotPromise = Promise.resolve({rect: null, snapshot: this.pendingSnapshot});\n    } else if (this.event && this.paintProfilerModel && Trace.Types.Events.isPaint(this.event)) {\n      // When we process events (TimelineModel#processEvent) and find a\n      // snapshot event, we look for the last paint that occurred and link the\n      // snapshot to that paint event. That is why here if the event is a Paint\n      // event, we look to see if it has had a matching picture event set for\n      // it.\n      const snapshotEvent = this.#parsedTrace.LayerTree.paintsToSnapshots.get(this.event);\n      if (snapshotEvent) {\n        const encodedData = snapshotEvent.args.snapshot.skp64;\n        snapshotPromise = this.paintProfilerModel.loadSnapshot(encodedData).then(snapshot => {\n          return snapshot && {rect: null, snapshot};\n        });\n      } else {\n        snapshotPromise = Promise.resolve(null);\n      }\n\n    } else if (this.event && Trace.Types.Events.isRasterTask(this.event)) {\n      snapshotPromise = this.#rasterTilePromise(this.event);\n    } else {\n      console.assert(false, 'Unexpected event type or no snapshot');\n      return;\n    }\n    void snapshotPromise.then(snapshotWithRect => {\n      this.releaseSnapshot();\n      if (!snapshotWithRect) {\n        this.imageView.showImage();\n        return;\n      }\n      const snapshot = snapshotWithRect.snapshot;\n      this.lastLoadedSnapshot = snapshot;\n      this.imageView.setMask(snapshotWithRect.rect);\n      void snapshot.commandLog().then(log => onCommandLogDone.call(this, snapshot, snapshotWithRect.rect, log || []));\n    });\n\n    function onCommandLogDone(\n        this: TimelinePaintProfilerView, snapshot: SDK.PaintProfiler.PaintProfilerSnapshot,\n        clipRect: Protocol.DOM.Rect|null, log?: SDK.PaintProfiler.PaintProfilerLogItem[]): void {\n      this.logTreeView.setCommandLog(log || []);\n      void this.paintProfilerView.setSnapshotAndLog(snapshot, log || [], clipRect);\n    }\n  }\n\n  private releaseSnapshot(): void {\n    if (!this.lastLoadedSnapshot) {\n      return;\n    }\n    this.lastLoadedSnapshot.release();\n    this.lastLoadedSnapshot = null;\n  }\n\n  private onWindowChanged(): void {\n    this.logTreeView.updateWindow(this.paintProfilerView.selectionWindow());\n  }\n}\n\nexport class TimelinePaintImageView extends UI.Widget.Widget {\n  private imageContainer: HTMLElement;\n  private imageElement: HTMLImageElement;\n  private readonly maskElement: HTMLElement;\n  private transformController: LayerViewer.TransformController.TransformController;\n  private maskRectangle?: Protocol.DOM.Rect|null;\n  constructor() {\n    super(true);\n    this.registerRequiredCSS(timelinePaintProfilerStyles);\n\n    this.contentElement.classList.add('fill', 'paint-profiler-image-view');\n    this.imageContainer = this.contentElement.createChild('div', 'paint-profiler-image-container');\n    this.imageElement = this.imageContainer.createChild('img');\n    this.maskElement = this.imageContainer.createChild('div');\n    this.imageElement.addEventListener('load', this.updateImagePosition.bind(this), false);\n    this.transformController = new LayerViewer.TransformController.TransformController((this.contentElement), true);\n    this.transformController.addEventListener(\n        LayerViewer.TransformController.Events.TRANSFORM_CHANGED, this.updateImagePosition, this);\n  }\n\n  override onResize(): void {\n    if (this.imageElement.src) {\n      this.updateImagePosition();\n    }\n  }\n\n  private updateImagePosition(): void {\n    const width = this.imageElement.naturalWidth;\n    const height = this.imageElement.naturalHeight;\n    const clientWidth = this.contentElement.clientWidth;\n    const clientHeight = this.contentElement.clientHeight;\n\n    const paddingFraction = 0.1;\n    const paddingX = clientWidth * paddingFraction;\n    const paddingY = clientHeight * paddingFraction;\n    const scaleX = (clientWidth - paddingX) / width;\n    const scaleY = (clientHeight - paddingY) / height;\n    const scale = Math.min(scaleX, scaleY);\n\n    if (this.maskRectangle) {\n      const style = this.maskElement.style;\n      style.width = width + 'px';\n      style.height = height + 'px';\n      style.borderLeftWidth = this.maskRectangle.x + 'px';\n      style.borderTopWidth = this.maskRectangle.y + 'px';\n      style.borderRightWidth = (width - this.maskRectangle.x - this.maskRectangle.width) + 'px';\n      style.borderBottomWidth = (height - this.maskRectangle.y - this.maskRectangle.height) + 'px';\n    }\n    this.transformController.setScaleConstraints(0.5, 10 / scale);\n    let matrix = new WebKitCSSMatrix()\n                     .scale(this.transformController.scale(), this.transformController.scale())\n                     .translate(clientWidth / 2, clientHeight / 2)\n                     .scale(scale, scale)\n                     .translate(-width / 2, -height / 2);\n    const bounds = UI.Geometry.boundsForTransformedPoints(matrix, [0, 0, 0, width, height, 0]);\n    this.transformController.clampOffsets(\n        paddingX - bounds.maxX, clientWidth - paddingX - bounds.minX, paddingY - bounds.maxY,\n        clientHeight - paddingY - bounds.minY);\n    matrix = new WebKitCSSMatrix()\n                 .translate(this.transformController.offsetX(), this.transformController.offsetY())\n                 .multiply(matrix);\n    this.imageContainer.style.webkitTransform = matrix.toString();\n  }\n\n  showImage(imageURL?: string): void {\n    this.imageContainer.classList.toggle('hidden', !imageURL);\n    if (imageURL) {\n      this.imageElement.src = imageURL;\n    }\n  }\n\n  setMask(maskRectangle: Protocol.DOM.Rect|null): void {\n    this.maskRectangle = maskRectangle;\n    this.maskElement.classList.toggle('hidden', !maskRectangle);\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2016 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.paint-profiler-image-view {\n  overflow: hidden;\n}\n\n.paint-profiler-image-view .paint-profiler-image-container {\n  transform-origin: 0 0;\n}\n\n.paint-profiler-image-view .paint-profiler-image-container div {\n  border-color: 1px solid var(--sys-color-divider);\n  border-style: solid;\n  z-index: 100;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.paint-profiler-image-view img {\n  border: solid 1px var(--sys-color-inverse-surface);\n}\n\n/*# sourceURL=${import.meta.resolve('./timelinePaintProfiler.css')} */`;", "// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport type * as Trace from '../../models/trace/trace.js';\n\nexport class TracingLayerTree extends SDK.LayerTreeBase.LayerTreeBase {\n  private tileById = new Map<string, TracingLayerTile>();\n  private paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel|null;\n\n  constructor(target: SDK.Target.Target|null) {\n    super(target);\n    this.paintProfilerModel = target?.model(SDK.PaintProfiler.PaintProfilerModel) ?? null;\n  }\n\n  async setLayers(\n      root: TracingLayerPayload|null, layers: TracingLayerPayload[]|null,\n      paints: Trace.Types.Events.LegacyLayerPaintEvent[]): Promise<void> {\n    const idsToResolve = new Set<Protocol.DOM.BackendNodeId>();\n    if (root) {\n      // This is a legacy code path for compatibility, as cc is removing\n      // layer tree hierarchy, this code will eventually be removed.\n      this.extractNodeIdsToResolve(idsToResolve, {}, root);\n    } else if (layers) {\n      for (let i = 0; i < layers.length; ++i) {\n        this.extractNodeIdsToResolve(idsToResolve, {}, layers[i]);\n      }\n    }\n\n    await this.resolveBackendNodeIds(idsToResolve);\n\n    const oldLayersById = this.layersById;\n    this.layersById = new Map();\n    this.setContentRoot(null);\n    if (root) {\n      const convertedLayers = this.innerSetLayers(oldLayersById, root);\n      this.setRoot(convertedLayers);\n    } else if (layers) {\n      const processedLayers = layers.map(this.innerSetLayers.bind(this, oldLayersById));\n      const contentRoot = this.contentRoot();\n      if (!contentRoot) {\n        throw new Error('Content root is not set.');\n      }\n      this.setRoot(contentRoot);\n      for (let i = 0; i < processedLayers.length; ++i) {\n        if (processedLayers[i].id() !== contentRoot.id()) {\n          contentRoot.addChild(processedLayers[i]);\n        }\n      }\n    }\n    this.setPaints(paints);\n  }\n\n  setTiles(tiles: TracingLayerTile[]): void {\n    this.tileById = new Map();\n    for (const tile of tiles) {\n      this.tileById.set(tile.id, tile);\n    }\n  }\n\n  pictureForRasterTile(tileId: string): Promise<SDK.PaintProfiler.SnapshotWithRect|null> {\n    const tile = this.tileById.get('cc::Tile/' + tileId);\n    if (!tile) {\n      Common.Console.Console.instance().error(`Tile ${tileId} is missing`);\n      return Promise.resolve(null) as Promise<SDK.PaintProfiler.SnapshotWithRect|null>;\n    }\n    const layer = (this.layerById(tile.layer_id) as TracingLayer | null);\n    if (!layer) {\n      Common.Console.Console.instance().error(`Layer ${tile.layer_id} for tile ${tileId} is not found`);\n      return Promise.resolve(null) as Promise<SDK.PaintProfiler.SnapshotWithRect|null>;\n    }\n    return layer.pictureForRect(tile.content_rect);\n  }\n\n  private setPaints(paints: Trace.Types.Events.LegacyLayerPaintEvent[]): void {\n    for (let i = 0; i < paints.length; ++i) {\n      const layer = (this.layersById.get(paints[i].layerId()) as TracingLayer | null);\n      if (layer) {\n        layer.addPaintEvent(paints[i]);\n      }\n    }\n  }\n\n  private innerSetLayers(oldLayersById: Map<string|number, SDK.LayerTreeBase.Layer>, payload: TracingLayerPayload):\n      TracingLayer {\n    let layer = (oldLayersById.get(payload.layer_id) as TracingLayer | null);\n    if (layer) {\n      layer.reset(payload);\n    } else {\n      layer = new TracingLayer(this.paintProfilerModel, payload);\n    }\n    this.layersById.set(payload.layer_id, layer);\n    if (payload.owner_node) {\n      layer.setNode(this.backendNodeIdToNode().get(payload.owner_node) || null);\n    }\n    if (!this.contentRoot() && layer.drawsContent()) {\n      this.setContentRoot(layer);\n    }\n    for (let i = 0; payload.children && i < payload.children.length; ++i) {\n      layer.addChild(this.innerSetLayers(oldLayersById, payload.children[i]));\n    }\n    return layer;\n  }\n\n  private extractNodeIdsToResolve(\n      nodeIdsToResolve: Set<Protocol.DOM.BackendNodeId>, seenNodeIds: Object, payload: TracingLayerPayload): void {\n    const backendNodeId = payload.owner_node;\n    if (backendNodeId && !this.backendNodeIdToNode().has(backendNodeId)) {\n      nodeIdsToResolve.add(backendNodeId);\n    }\n    for (let i = 0; payload.children && i < payload.children.length; ++i) {\n      this.extractNodeIdsToResolve(nodeIdsToResolve, seenNodeIds, payload.children[i]);\n    }\n  }\n}\nexport class TracingFrameLayerTree {\n  readonly #target: SDK.Target.Target|null;\n  readonly #snapshot: Trace.Types.Events.LayerTreeHostImplSnapshot;\n  readonly #paints: Trace.Types.Events.LegacyLayerPaintEvent[] = [];\n\n  constructor(target: SDK.Target.Target|null, data: Trace.Types.Events.LegacyFrameLayerTreeData) {\n    this.#target = target;\n    this.#snapshot = data.entry;\n    this.#paints = data.paints;\n  }\n\n  async layerTreePromise(): Promise<TracingLayerTree|null> {\n    const data = this.#snapshot.args.snapshot;\n    const viewport = data['device_viewport_size'];\n    const tiles = data['active_tiles'];\n    const rootLayer = data['active_tree']['root_layer'];\n    const layers = data['active_tree']['layers'];\n    const layerTree = new TracingLayerTree(this.#target);\n    layerTree.setViewportSize(viewport);\n    layerTree.setTiles(tiles);\n    await layerTree.setLayers(rootLayer, layers, this.#paints || []);\n    return layerTree;\n  }\n\n  paints(): Trace.Types.Events.LegacyLayerPaintEvent[] {\n    return this.#paints;\n  }\n}\n\nexport class TracingLayer implements SDK.LayerTreeBase.Layer {\n  private parentLayerId: string|null;\n  private parentInternal: SDK.LayerTreeBase.Layer|null;\n  private layerId: string;\n  private nodeInternal: SDK.DOMModel.DOMNode|null;\n  private offsetXInternal: number;\n  private offsetYInternal: number;\n  private widthInternal: number;\n  private heightInternal: number;\n  private childrenInternal: SDK.LayerTreeBase.Layer[];\n  private quadInternal: number[];\n  private scrollRectsInternal: Protocol.LayerTree.ScrollRect[];\n  private gpuMemoryUsageInternal: number;\n  private paints: Trace.Types.Events.LegacyLayerPaintEvent[];\n  private compositingReasons: string[];\n  private compositingReasonIds: string[];\n  private drawsContentInternal: boolean;\n  private paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel|null;\n  constructor(paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel|null, payload: TracingLayerPayload) {\n    this.parentLayerId = null;\n    this.parentInternal = null;\n    this.layerId = '';\n    this.nodeInternal = null;\n    this.offsetXInternal = -1;\n    this.offsetYInternal = -1;\n    this.widthInternal = -1;\n    this.heightInternal = -1;\n    this.childrenInternal = [];\n    this.quadInternal = [];\n    this.scrollRectsInternal = [];\n    this.gpuMemoryUsageInternal = -1;\n    this.paints = [];\n    this.compositingReasons = [];\n    this.compositingReasonIds = [];\n    this.drawsContentInternal = false;\n\n    this.paintProfilerModel = paintProfilerModel;\n    this.reset(payload);\n  }\n\n  reset(payload: TracingLayerPayload): void {\n    this.nodeInternal = null;\n    this.layerId = String(payload.layer_id);\n    this.offsetXInternal = payload.position[0];\n    this.offsetYInternal = payload.position[1];\n    this.widthInternal = payload.bounds.width;\n    this.heightInternal = payload.bounds.height;\n    this.childrenInternal = [];\n    this.parentLayerId = null;\n    this.parentInternal = null;\n    this.quadInternal = payload.layer_quad || [];\n    this.createScrollRects(payload);\n\n    this.compositingReasons = payload.compositing_reasons || [];\n    this.compositingReasonIds = payload.compositing_reason_ids || [];\n    this.drawsContentInternal = Boolean(payload.draws_content);\n    this.gpuMemoryUsageInternal = payload.gpu_memory_usage;\n    this.paints = [];\n  }\n\n  id(): string {\n    return this.layerId;\n  }\n\n  parentId(): string|null {\n    return this.parentLayerId;\n  }\n\n  parent(): SDK.LayerTreeBase.Layer|null {\n    return this.parentInternal;\n  }\n\n  isRoot(): boolean {\n    return !this.parentId();\n  }\n\n  children(): SDK.LayerTreeBase.Layer[] {\n    return this.childrenInternal;\n  }\n\n  addChild(childParam: SDK.LayerTreeBase.Layer): void {\n    const child = (childParam as TracingLayer);\n    if (child.parentInternal) {\n      console.assert(false, 'Child already has a parent');\n    }\n    this.childrenInternal.push(child);\n    child.parentInternal = this;\n    child.parentLayerId = this.layerId;\n  }\n\n  setNode(node: SDK.DOMModel.DOMNode|null): void {\n    this.nodeInternal = node;\n  }\n\n  node(): SDK.DOMModel.DOMNode|null {\n    return this.nodeInternal;\n  }\n\n  nodeForSelfOrAncestor(): SDK.DOMModel.DOMNode|null {\n    let layer: (SDK.LayerTreeBase.Layer|null)|this = this;\n    for (; layer; layer = layer.parent()) {\n      if (layer.node()) {\n        return layer.node();\n      }\n    }\n    return null;\n  }\n\n  offsetX(): number {\n    return this.offsetXInternal;\n  }\n\n  offsetY(): number {\n    return this.offsetYInternal;\n  }\n\n  width(): number {\n    return this.widthInternal;\n  }\n\n  height(): number {\n    return this.heightInternal;\n  }\n\n  transform(): number[]|null {\n    return null;\n  }\n\n  quad(): number[] {\n    return this.quadInternal;\n  }\n\n  anchorPoint(): number[] {\n    return [0.5, 0.5, 0];\n  }\n\n  invisible(): boolean {\n    return false;\n  }\n\n  paintCount(): number {\n    return 0;\n  }\n\n  lastPaintRect(): Protocol.DOM.Rect|null {\n    return null;\n  }\n\n  scrollRects(): Protocol.LayerTree.ScrollRect[] {\n    return this.scrollRectsInternal;\n  }\n\n  stickyPositionConstraint(): SDK.LayerTreeBase.StickyPositionConstraint|null {\n    // TODO(smcgruer): Provide sticky layer information in traces.\n    return null;\n  }\n\n  gpuMemoryUsage(): number {\n    return this.gpuMemoryUsageInternal;\n  }\n\n  snapshots(): Array<Promise<SDK.PaintProfiler.SnapshotWithRect|null>> {\n    return this.paints.map(async paint => {\n      if (!this.paintProfilerModel) {\n        return null;\n      }\n\n      const snapshot = await getPaintProfilerSnapshot(\n          this.paintProfilerModel,\n          paint,\n      );\n      if (!snapshot) {\n        return null;\n      }\n      const rect = {x: snapshot.rect[0], y: snapshot.rect[1], width: snapshot.rect[2], height: snapshot.rect[3]};\n      return {rect, snapshot: snapshot.snapshot};\n    });\n  }\n\n  async pictureForRect(targetRect: number[]): Promise<SDK.PaintProfiler.SnapshotWithRect|null> {\n    return await Promise.all(this.paints.map(paint => paint.picture())).then(pictures => {\n      const filteredPictures = (pictures.filter(picture => picture && rectsOverlap(picture.rect, targetRect)) as Array<{\n                                  rect: number[],\n                                  serializedPicture: string,\n                                }>);\n\n      const fragments = filteredPictures.map(\n          picture => ({x: picture.rect[0], y: picture.rect[1], picture: picture.serializedPicture}));\n\n      if (!fragments.length || !this.paintProfilerModel) {\n        return null;\n      }\n      const x0 = fragments.reduce((min, item) => Math.min(min, item.x), Infinity);\n      const y0 = fragments.reduce((min, item) => Math.min(min, item.y), Infinity);\n      // Rect is in layer content coordinates, make it relative to picture by offsetting to the top left corner.\n      const rect = {x: targetRect[0] - x0, y: targetRect[1] - y0, width: targetRect[2], height: targetRect[3]};\n      return this.paintProfilerModel.loadSnapshotFromFragments(fragments).then(\n          snapshot => snapshot ? {rect, snapshot} : null);\n    });\n\n    function segmentsOverlap(a1: number, a2: number, b1: number, b2: number): boolean {\n      console.assert(a1 <= a2 && b1 <= b2, 'segments should be specified as ordered pairs');\n      return a2 > b1 && a1 < b2;\n    }\n\n    function rectsOverlap(a: number[], b: number[]): boolean {\n      return segmentsOverlap(a[0], a[0] + a[2], b[0], b[0] + b[2]) &&\n          segmentsOverlap(a[1], a[1] + a[3], b[1], b[1] + b[3]);\n    }\n  }\n\n  private scrollRectsFromParams(params: number[], type: Protocol.LayerTree.ScrollRectType):\n      Protocol.LayerTree.ScrollRect {\n    return {rect: {x: params[0], y: params[1], width: params[2], height: params[3]}, type};\n  }\n\n  private createScrollRects(payload: TracingLayerPayload): void {\n    const nonPayloadScrollRects: Protocol.LayerTree.ScrollRect[] = [];\n    if (payload.non_fast_scrollable_region) {\n      nonPayloadScrollRects.push(this.scrollRectsFromParams(\n          payload.non_fast_scrollable_region, 'NonFastScrollable' as Protocol.LayerTree.ScrollRectType));\n    }\n    if (payload.touch_event_handler_region) {\n      nonPayloadScrollRects.push(this.scrollRectsFromParams(\n          payload.touch_event_handler_region, Protocol.LayerTree.ScrollRectType.TouchEventHandler));\n    }\n    if (payload.wheel_event_handler_region) {\n      nonPayloadScrollRects.push(this.scrollRectsFromParams(\n          payload.wheel_event_handler_region, Protocol.LayerTree.ScrollRectType.WheelEventHandler));\n    }\n    if (payload.scroll_event_handler_region) {\n      nonPayloadScrollRects.push(this.scrollRectsFromParams(\n          payload.scroll_event_handler_region, Protocol.LayerTree.ScrollRectType.RepaintsOnScroll));\n    }\n\n    // SDK.LayerBaseTree.Layer.ScrollRectType and Protocol.LayerTree.ScrollRectType are the\n    // same type, but we need to use the indirection of the nonPayloadScrollRects since\n    // the ScrollRectType is defined as a string in SDK.LayerBaseTree.Layer.ScrollRectType.\n    this.scrollRectsInternal = nonPayloadScrollRects;\n  }\n\n  addPaintEvent(paint: Trace.Types.Events.LegacyLayerPaintEvent): void {\n    this.paints.push(paint);\n  }\n\n  requestCompositingReasons(): Promise<string[]> {\n    return Promise.resolve(this.compositingReasons);\n  }\n\n  requestCompositingReasonIds(): Promise<string[]> {\n    return Promise.resolve(this.compositingReasonIds);\n  }\n\n  drawsContent(): boolean {\n    return this.drawsContentInternal;\n  }\n}\n\nexport interface TracingLayerPayload {\n  bounds: {height: number, width: number};\n  children: TracingLayerPayload[];\n  layer_id: number;\n  position: number[];\n  scroll_offset: number[];\n  layer_quad: number[];\n  draws_content: number;\n  gpu_memory_usage: number;\n  transform: number[];\n  owner_node: Protocol.DOM.BackendNodeId;\n  compositing_reasons: string[];\n  compositing_reason_ids: string[];\n  non_fast_scrollable_region: number[];\n  touch_event_handler_region: number[];\n  wheel_event_handler_region: number[];\n  scroll_event_handler_region: number[];\n}\n\nexport interface TracingLayerTile {\n  id: string;\n  layer_id: string;\n  gpu_memory_usage: number;\n  content_rect: number[];\n}\n\nasync function getPaintProfilerSnapshot(\n    paintProfilerModel: SDK.PaintProfiler.PaintProfilerModel,\n    paint: Trace.Types.Events.LegacyLayerPaintEvent): Promise<{\n  rect: number[],\n  snapshot: SDK.PaintProfiler.PaintProfilerSnapshot,\n}|null> {\n  const picture = paint.picture();\n  if (!picture || !paintProfilerModel) {\n    return null;\n  }\n  const snapshot = await paintProfilerModel.loadSnapshot(picture.serializedPicture);\n  return snapshot ? {rect: picture.rect, snapshot} : null;\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport '../../ui/components/linkifier/linkifier.js';\nimport '../../ui/legacy/components/data_grid/data_grid.js';\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as CopyToClipboard from '../../ui/components/copy_to_clipboard/copy_to_clipboard.js';\nimport type * as Linkifier from '../../ui/components/linkifier/linkifier.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {html, render} from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport timelineSelectorStatsViewStyles from './timelineSelectorStatsView.css.js';\n\nconst UIStrings = {\n  /**\n   *@description Label for selector stats data table\n   */\n  selectorStats: 'Selector stats',\n  /**\n   *@description Column name and time unit for elapsed time spent computing a style rule\n   */\n  elapsed: 'Elapsed (ms)',\n  /**\n   *@description Column name and percentage of slow mach non-matches computing a style rule\n   */\n  rejectPercentage: '% of slow-path non-matches',\n  /**\n   *@description Tooltip description '% of slow-path non-matches'\n   */\n  rejectPercentageExplanation:\n      'The percentage of non-matching nodes (Match Attempts - Match Count) that couldn\\'t be quickly ruled out by the bloom filter due to high selector complexity. Lower is better.',\n  /**\n   *@description Column name for count of elements that the engine attempted to match against a style rule\n   */\n  matchAttempts: 'Match attempts',\n  /**\n   *@description Column name for count of elements that matched a style rule\n   */\n  matchCount: 'Match count',\n  /**\n   *@description Column name for a style rule's CSS selector text\n   */\n  selector: 'Selector',\n  /**\n   *@description Column name for a style rule's CSS selector text\n   */\n  styleSheetId: 'Style Sheet',\n  /**\n   *@description A context menu item in data grids to copy entire table to clipboard\n   */\n  copyTable: 'Copy table',\n  /**\n   *@description A cell value displayed in table when no source file can be traced via css style\n   */\n  unableToLink: 'Unable to link',\n  /**\n   *@description Tooltip for the cell that no source file can be traced via style sheet id\n   *@example {style-sheet-4} PH1\n   */\n  unableToLinkViaStyleSheetId: 'Unable to link via {PH1}',\n  /**\n   *@description Text for announcing that the entire table was copied to clipboard\n   */\n  tableCopiedToClipboard: 'Table copied to clipboard',\n  /**\n   *@description Text shown as the \"Selectelector\" cell value for one row of the Selector Stats table, however this particular row is the totals. While normally the Selector cell is values like \"div.container\", the parenthesis can denote this description is not an actual selector, but a general row description.\n   */\n  totalForAllSelectors: '(Totals for all selectors)',\n\n  /**\n   *@description Text for showing the location of a selector in the style sheet\n   *@example {256} PH1\n   *@example {14} PH2\n   */\n  lineNumber: 'Line {PH1}:{PH2}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineSelectorStatsView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst SelectorTimingsKey = Trace.Types.Events.SelectorTimingsKey;\n\ntype SelectorTiming =\n    Trace.Types.Events.SelectorTiming&{locations: Linkifier.Linkifier.LinkifierData[] | undefined | null};\n\ninterface ViewInput {\n  timings: SelectorTiming[];\n  onContextMenu: (event: CustomEvent<{menu: UI.ContextMenu.ContextMenu, element: HTMLElement}>) => void;\n}\ntype View = (input: ViewInput, output: object, target: HTMLElement) => void;\n\nexport class TimelineSelectorStatsView extends UI.Widget.VBox {\n  #selectorLocations: Map<string, Protocol.CSS.SourceRange[]>;\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace|null = null;\n  /**\n   * We store the last event (or array of events) that we renderered. We do\n   * this because as the user zooms around the panel this view is updated,\n   * however if the set of events that are populating the view is the same as it\n   * was the last time, we can bail without doing any re-rendering work.\n   * If the user views a single event, this will be set to that single event, but if they are viewing a range of events, this will be set to an array.\n   * If it's null, that means we have not rendered yet.\n   */\n  #lastStatsSourceEventOrEvents: Trace.Types.Events.UpdateLayoutTree|Trace.Types.Events.UpdateLayoutTree[]|null = null;\n  #view: View;\n  #timings: SelectorTiming[] = [];\n\n  constructor(parsedTrace: Trace.Handlers.Types.ParsedTrace|null, view: View = (input, _, target) => {\n    render(\n        html`\n      <devtools-data-grid striped name=${i18nString(UIStrings.selectorStats)}\n          @contextmenu=${input.onContextMenu.bind(input)}>\n        <table>\n          <tr>\n            <th id=${SelectorTimingsKey.Elapsed} weight=\"1\" sortable hideable align=\"right\">\n              ${i18nString(UIStrings.elapsed)}\n            </th>\n            <th id=${SelectorTimingsKey.MatchAttempts} weight=\"1\" sortable hideable align=\"right\">\n              ${i18nString(UIStrings.matchAttempts)}\n            </th>\n            <th id=${SelectorTimingsKey.MatchCount} weight=\"1\" sortable hideable align=\"right\">\n              ${i18nString(UIStrings.matchCount)}\n            </th>\n            <th id=${SelectorTimingsKey.RejectPercentage} weight=\"1\" sortable hideable align=\"right\">\n              <span title=${i18nString(UIStrings.rejectPercentageExplanation)}>${\n            i18nString(UIStrings.rejectPercentage)}</span>\n            </th>\n            <th id=${SelectorTimingsKey.Selector} weight=\"3\" sortable hideable>\n              ${i18nString(UIStrings.selector)}\n            </th>\n            <th id=${SelectorTimingsKey.StyleSheetId} weight=\"1.5\" sortable hideable>\n              ${i18nString(UIStrings.styleSheetId)}\n            </th>\n          </tr>\n          ${input.timings.map(timing => {\n          const nonMatches = timing[SelectorTimingsKey.MatchAttempts] - timing[SelectorTimingsKey.MatchCount];\n          const rejectPercentage = (nonMatches ? timing[SelectorTimingsKey.FastRejectCount] / nonMatches : 1) * 100;\n          const styleSheetId = timing[SelectorTimingsKey.StyleSheetId];\n          const locations = timing.locations;\n          const locationMessage = locations ? null :\n              locations === null            ? '' :\n                                              i18nString(UIStrings.unableToLinkViaStyleSheetId, {PH1: styleSheetId});\n          return html`<tr>\n            <td data-value=${timing[SelectorTimingsKey.Elapsed]}>\n              ${(timing[SelectorTimingsKey.Elapsed] / 1000.0).toFixed(3)}\n            </td>\n            <td>${timing[SelectorTimingsKey.MatchAttempts]}</td>\n            <td>${timing[SelectorTimingsKey.MatchCount]}</td>\n            <td data-value=${rejectPercentage}>\n              ${rejectPercentage.toFixed(1)}\n            </td>\n            <td title=${timing[SelectorTimingsKey.Selector]}>\n             ${timing[SelectorTimingsKey.Selector]}\n            </td>\n            <td data-value=${styleSheetId}>${\n              locations ? html`${locations.map((location, itemIndex) => html`\n                <devtools-linkifier .data=${location}></devtools-linkifier\n                >${itemIndex !== locations.length - 1 ? ',' : ''}`)}` :\n                          locationMessage}\n            </td>\n          </tr>`;\n        })}\n        </table>\n      </devtools-data-grid>`,\n        target, {host: this});\n  }) {\n    super();\n    this.registerRequiredCSS(timelineSelectorStatsViewStyles);\n\n    this.#view = view;\n    this.element.setAttribute('jslog', `${VisualLogging.pane('selector-stats').track({resize: true})}`);\n    this.#selectorLocations = new Map<string, Protocol.CSS.SourceRange[]>();\n    this.#parsedTrace = parsedTrace;\n\n    this.performUpdate();\n  }\n\n  #onContextMenu(e: CustomEvent<{menu: UI.ContextMenu.ContextMenu, element: HTMLElement}>): void {\n    const {menu} = e.detail;\n    menu.defaultSection().appendItem(i18nString(UIStrings.copyTable), () => {\n      const tableData = [];\n      const columnName = [\n        i18nString(UIStrings.elapsed), i18nString(UIStrings.matchAttempts), i18nString(UIStrings.matchCount),\n        i18nString(UIStrings.rejectPercentage), i18nString(UIStrings.selector), i18nString(UIStrings.styleSheetId)\n      ];\n      tableData.push(columnName.join('\\t'));\n      for (const timing of this.#timings) {\n        const nonMatches = timing[SelectorTimingsKey.MatchAttempts] - timing[SelectorTimingsKey.MatchCount];\n        const rejectPercentage = (nonMatches ? timing[SelectorTimingsKey.FastRejectCount] / nonMatches : 1) * 100;\n        const styleSheetId = timing[SelectorTimingsKey.StyleSheetId] as Protocol.CSS.StyleSheetId;\n        let linkData = '';\n        const target = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n        const cssModel = target?.model(SDK.CSSModel.CSSModel);\n        if (cssModel) {\n          const styleSheetHeader = cssModel.styleSheetHeaderForId(styleSheetId);\n          if (styleSheetHeader) {\n            linkData = styleSheetHeader.resourceURL().toString();\n          }\n        }\n        if (!linkData) {\n          linkData = i18nString(UIStrings.unableToLink);\n        }\n        tableData.push([\n          timing[SelectorTimingsKey.Elapsed] / 1000.0,\n          timing[SelectorTimingsKey.MatchAttempts],\n          timing[SelectorTimingsKey.MatchCount],\n          rejectPercentage,\n          timing[SelectorTimingsKey.Selector],\n          linkData,\n        ].join('\\t'));\n      }\n      const data = tableData.join('\\n');\n      CopyToClipboard.copyTextToClipboard(data, i18nString(UIStrings.tableCopiedToClipboard));\n    });\n  }\n\n  override performUpdate(): void {\n    const viewInput = {\n      timings: this.#timings,\n      onContextMenu: (event: CustomEvent<{menu: UI.ContextMenu.ContextMenu, element: HTMLElement}>) => {\n        this.#onContextMenu(event);\n      },\n    };\n    const viewOutput = {};\n    this.#view(viewInput, viewOutput, this.contentElement);\n  }\n\n  setEvent(event: Trace.Types.Events.UpdateLayoutTree): boolean {\n    if (!this.#parsedTrace) {\n      return false;\n    }\n\n    if (this.#lastStatsSourceEventOrEvents === event) {\n      // The event that is populating the selector stats table has not changed,\n      // so no need to do any work because the data will be the same.\n      return false;\n    }\n\n    this.#lastStatsSourceEventOrEvents = event;\n\n    const selectorStats = this.#parsedTrace.SelectorStats.dataForUpdateLayoutEvent.get(event);\n    if (!selectorStats) {\n      this.#timings = [];\n      this.requestUpdate();\n      return false;\n    }\n\n    void this.processSelectorTimings(selectorStats.timings).then(timings => {\n      this.#timings = timings;\n      this.requestUpdate();\n    });\n    return true;\n  }\n\n  setAggregatedEvents(events: Trace.Types.Events.UpdateLayoutTree[]): void {\n    const timings: Trace.Types.Events.SelectorTiming[] = [];\n    const selectorMap = new Map<String, Trace.Types.Events.SelectorTiming>();\n\n    if (!this.#parsedTrace) {\n      return;\n    }\n\n    const sums = {\n      [SelectorTimingsKey.Elapsed]: 0,\n      [SelectorTimingsKey.MatchAttempts]: 0,\n      [SelectorTimingsKey.MatchCount]: 0,\n      [SelectorTimingsKey.FastRejectCount]: 0,\n    };\n\n    // Now we want to check if the set of events we have been given matches the\n    // set of events we last rendered. We can't just compare the arrays because\n    // they will be different events, so instead for each event in the new\n    // array we see if it has a match in the old set of events at the same\n    // index.\n\n    if (Array.isArray(this.#lastStatsSourceEventOrEvents)) {\n      if (this.#lastStatsSourceEventOrEvents.length === events.length && events.every((event, index) => {\n            // This is true due to the isArray check, but without this cast TS\n            // would want us to repeat the isArray() check inside this callback,\n            // but we want to avoid that extra work.\n            const previousEvents = this.#lastStatsSourceEventOrEvents as Trace.Types.Events.UpdateLayoutTree[];\n            return event === previousEvents[index];\n          })) {\n        return;\n      }\n    }\n\n    this.#lastStatsSourceEventOrEvents = events;\n\n    for (let i = 0; i < events.length; i++) {\n      const event = events[i];\n      const selectorStats = event ? this.#parsedTrace.SelectorStats.dataForUpdateLayoutEvent.get(event) : undefined;\n      if (!selectorStats) {\n        continue;\n      } else {\n        const data: Trace.Types.Events.SelectorTiming[] = selectorStats.timings;\n        for (const timing of data) {\n          const key = timing[SelectorTimingsKey.Selector] + '_' + timing[SelectorTimingsKey.StyleSheetId];\n          const findTiming = selectorMap.get(key);\n          if (findTiming !== undefined) {\n            findTiming[SelectorTimingsKey.Elapsed] += timing[SelectorTimingsKey.Elapsed];\n            findTiming[SelectorTimingsKey.FastRejectCount] += timing[SelectorTimingsKey.FastRejectCount];\n            findTiming[SelectorTimingsKey.MatchAttempts] += timing[SelectorTimingsKey.MatchAttempts];\n            findTiming[SelectorTimingsKey.MatchCount] += timing[SelectorTimingsKey.MatchCount];\n          } else {\n            selectorMap.set(key, structuredClone(timing));\n          }\n          // Keep track of the total times for a sum row.\n          sums[SelectorTimingsKey.Elapsed] += timing[SelectorTimingsKey.Elapsed];\n          sums[SelectorTimingsKey.MatchAttempts] += timing[SelectorTimingsKey.MatchAttempts];\n          sums[SelectorTimingsKey.MatchCount] += timing[SelectorTimingsKey.MatchCount];\n          sums[SelectorTimingsKey.FastRejectCount] += timing[SelectorTimingsKey.FastRejectCount];\n        }\n      }\n    }\n    if (selectorMap.size > 0) {\n      selectorMap.forEach(timing => {\n        timings.push(timing);\n      });\n      selectorMap.clear();\n    } else {\n      this.#timings = [];\n      this.requestUpdate();\n      return;\n    }\n\n    // Add the sum row.\n    timings.unshift({\n      [SelectorTimingsKey.Elapsed]: sums[SelectorTimingsKey.Elapsed],\n      [SelectorTimingsKey.FastRejectCount]: sums[SelectorTimingsKey.FastRejectCount],\n      [SelectorTimingsKey.MatchAttempts]: sums[SelectorTimingsKey.MatchAttempts],\n      [SelectorTimingsKey.MatchCount]: sums[SelectorTimingsKey.MatchCount],\n      [SelectorTimingsKey.Selector]: i18nString(UIStrings.totalForAllSelectors),\n      [SelectorTimingsKey.StyleSheetId]: 'n/a',\n    });\n\n    void this.processSelectorTimings(timings).then(timings => {\n      this.#timings = timings;\n      this.requestUpdate();\n    });\n  }\n\n  private async processSelectorTimings(timings: Trace.Types.Events.SelectorTiming[]): Promise<SelectorTiming[]> {\n    async function toSourceFileLocation(\n        cssModel: SDK.CSSModel.CSSModel, styleSheetId: Protocol.CSS.StyleSheetId, selectorText: string,\n        selectorLocations: Map<string, Protocol.CSS.SourceRange[]>):\n        Promise<Linkifier.Linkifier.LinkifierData[]|undefined> {\n      if (!cssModel) {\n        return undefined;\n      }\n      const styleSheetHeader = cssModel.styleSheetHeaderForId(styleSheetId);\n      if (!styleSheetHeader || !styleSheetHeader.resourceURL()) {\n        return undefined;\n      }\n\n      // get the locations from cache if available\n      const key: string = JSON.stringify({selectorText, styleSheetId});\n      let ranges = selectorLocations.get(key);\n      if (!ranges) {\n        const result = await cssModel.agent.invoke_getLocationForSelector({styleSheetId, selectorText});\n        if (result.getError() || !result.ranges) {\n          return undefined;\n        }\n        ranges = result.ranges;\n        selectorLocations.set(key, ranges);\n      }\n\n      const linkData = ranges.map(range => {\n        return {\n          url: styleSheetHeader.resourceURL(),\n          lineNumber: range.startLine,\n          columnNumber: range.startColumn,\n          linkText: i18nString(UIStrings.lineNumber, {PH1: range.startLine + 1, PH2: range.startColumn + 1}),\n          title: `${styleSheetHeader.id} line ${range.startLine + 1}:${range.startColumn + 1}`,\n        } as Linkifier.Linkifier.LinkifierData;\n      });\n      return linkData;\n    }\n\n    const target = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    const cssModel = target?.model(SDK.CSSModel.CSSModel);\n    if (!cssModel) {\n      return [];\n    }\n\n    return await Promise.all(\n        timings.sort((a, b) => b[SelectorTimingsKey.Elapsed] - a[SelectorTimingsKey.Elapsed]).map(async x => {\n          const styleSheetId = x[SelectorTimingsKey.StyleSheetId] as Protocol.CSS.StyleSheetId;\n          const selectorText = x[SelectorTimingsKey.Selector].trim();\n          const locations = styleSheetId === 'n/a' ?\n              null :\n              await toSourceFileLocation(cssModel, styleSheetId, selectorText, this.#selectorLocations);\n\n          return {...x, locations};\n        }));\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2025 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\ndevtools-data-grid {\n  flex: auto;\n}\n/*# sourceURL=${import.meta.resolve('./timelineSelectorStatsView.css')} */`;", "// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport * as TimelineComponents from './components/components.js';\nimport {initiatorsDataToDrawForNetwork} from './Initiators.js';\nimport {NetworkTrackAppender, type NetworkTrackEvent} from './NetworkTrackAppender.js';\nimport timelineFlamechartPopoverStyles from './timelineFlamechartPopover.css.js';\nimport {FlameChartStyle, Selection} from './TimelineFlameChartView.js';\nimport {\n  selectionFromEvent,\n  selectionIsRange,\n  selectionsEqual,\n  type TimelineSelection,\n} from './TimelineSelection.js';\nimport {buildPersistedConfig, keyForTraceConfig} from './TrackConfiguration.js';\nimport * as TimelineUtils from './utils/utils.js';\n\nexport class TimelineFlameChartNetworkDataProvider implements PerfUI.FlameChart.FlameChartDataProvider {\n  #minimumBoundary = 0;\n  #timeSpan = 0;\n  #events: NetworkTrackEvent[] = [];\n  #maxLevel = 0;\n  #networkTrackAppender: NetworkTrackAppender|null = null;\n\n  #timelineDataInternal: PerfUI.FlameChart.FlameChartTimelineData|null = null;\n  #lastSelection: Selection|null = null;\n  #parsedTrace: Trace.Handlers.Types.ParsedTrace|null = null;\n  #eventIndexByEvent = new Map<NetworkTrackEvent, number|null>();\n  // -1 means no entry is selected.\n  #lastInitiatorEntry = -1;\n  #lastInitiatorsData: PerfUI.FlameChart.FlameChartInitiatorData[] = [];\n  #entityMapper: TimelineUtils.EntityMapper.EntityMapper|null = null;\n  #persistedGroupConfigSetting: Common.Settings.Setting<PerfUI.FlameChart.PersistedConfigPerTrace>|null = null;\n\n  constructor() {\n    this.reset();\n  }\n\n  // Reset all data other than the UI elements.\n  // This should be called when\n  // - initialized the data provider\n  // - a new trace file is coming (when `setModel()` is called)\n  // etc.\n  reset(): void {\n    this.#maxLevel = 0;\n    this.#minimumBoundary = 0;\n    this.#timeSpan = 0;\n    this.#eventIndexByEvent.clear();\n    this.#events = [];\n    this.#timelineDataInternal = null;\n    this.#parsedTrace = null;\n\n    this.#networkTrackAppender = null;\n  }\n\n  setModel(parsedTrace: Trace.Handlers.Types.ParsedTrace, entityMapper: TimelineUtils.EntityMapper.EntityMapper): void {\n    this.reset();\n    this.#parsedTrace = parsedTrace;\n    this.#entityMapper = entityMapper;\n\n    this.setEvents(this.#parsedTrace);\n    this.#setTimingBoundsData(this.#parsedTrace);\n  }\n\n  setEvents(parsedTrace: Trace.Handlers.Types.ParsedTrace): void {\n    if (parsedTrace.NetworkRequests.webSocket) {\n      parsedTrace.NetworkRequests.webSocket.forEach(webSocketData => {\n        if (webSocketData.syntheticConnection) {\n          this.#events.push(webSocketData.syntheticConnection);\n        }\n        this.#events.push(...webSocketData.events);\n      });\n    }\n    if (parsedTrace.NetworkRequests.byTime) {\n      this.#events.push(...parsedTrace.NetworkRequests.byTime);\n    }\n  }\n\n  isEmpty(): boolean {\n    this.timelineData();\n    return !this.#events.length;\n  }\n\n  maxStackDepth(): number {\n    return this.#maxLevel;\n  }\n\n  hasTrackConfigurationMode(): boolean {\n    return false;\n  }\n\n  timelineData(): PerfUI.FlameChart.FlameChartTimelineData {\n    if (this.#timelineDataInternal && this.#timelineDataInternal.entryLevels.length !== 0) {\n      // The flame chart data is built already, so return the cached data.\n      return this.#timelineDataInternal;\n    }\n\n    this.#timelineDataInternal = PerfUI.FlameChart.FlameChartTimelineData.createEmpty();\n    if (!this.#parsedTrace) {\n      return this.#timelineDataInternal;\n    }\n\n    if (!this.#events.length) {\n      this.setEvents(this.#parsedTrace);\n    }\n    this.#networkTrackAppender = new NetworkTrackAppender(this.#timelineDataInternal, this.#events);\n    this.#maxLevel = this.#networkTrackAppender.appendTrackAtLevel(0);\n\n    return this.#timelineDataInternal;\n  }\n\n  minimumBoundary(): number {\n    return this.#minimumBoundary;\n  }\n\n  totalTime(): number {\n    return this.#timeSpan;\n  }\n\n  setWindowTimes(startTime: Trace.Types.Timing.Milli, endTime: Trace.Types.Timing.Milli): void {\n    this.#updateTimelineData(startTime, endTime);\n  }\n\n  createSelection(index: number): TimelineSelection|null {\n    if (index === -1) {\n      return null;\n    }\n    const event = this.#events[index];\n    this.#lastSelection = new Selection(selectionFromEvent(event), index);\n    return this.#lastSelection.timelineSelection;\n  }\n\n  customizedContextMenu(event: MouseEvent, eventIndex: number, _groupIndex: number): UI.ContextMenu.ContextMenu\n      |undefined {\n    const networkRequest = this.eventByIndex(eventIndex);\n    if (!networkRequest || !Trace.Types.Events.isSyntheticNetworkRequest(networkRequest)) {\n      return;\n    }\n    const timelineNetworkRequest = SDK.TraceObject.RevealableNetworkRequest.create(networkRequest);\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.appendApplicableItems(timelineNetworkRequest);\n    return contextMenu;\n  }\n\n  indexForEvent(event: Trace.Types.Events.Event): number|null {\n    if (!Trace.Types.Events.isNetworkTrackEntry(event)) {\n      return null;\n    }\n    const fromCache = this.#eventIndexByEvent.get(event);\n    // Cached value might be null, which is OK.\n    if (fromCache !== undefined) {\n      return fromCache;\n    }\n    const index = this.#events.indexOf(event);\n    const result = index > -1 ? index : null;\n    this.#eventIndexByEvent.set(event, result);\n    return result;\n  }\n\n  eventByIndex(entryIndex: number): Trace.Types.Events.SyntheticNetworkRequest|Trace.Types.Events.WebSocketEvent|null {\n    return this.#events.at(entryIndex) ?? null;\n  }\n\n  entryIndexForSelection(selection: TimelineSelection|null): number {\n    if (!selection || selectionIsRange(selection)) {\n      return -1;\n    }\n\n    if (this.#lastSelection && selectionsEqual(this.#lastSelection.timelineSelection, selection)) {\n      return this.#lastSelection.entryIndex;\n    }\n\n    if (!Trace.Types.Events.isNetworkTrackEntry(selection.event)) {\n      return -1;\n    }\n\n    const index = this.#events.indexOf(selection.event);\n    if (index !== -1) {\n      this.#lastSelection = new Selection(selectionFromEvent(selection.event), index);\n    }\n    return index;\n  }\n\n  groupForEvent(_entryIndex: number): PerfUI.FlameChart.Group|null {\n    // Because the network track only contains one group, we don't actually\n    // need to do any lookups here.\n    const group = this.#networkTrackAppender?.group() ?? null;\n    return group;\n  }\n\n  entryColor(index: number): string {\n    if (!this.#networkTrackAppender) {\n      throw new Error('networkTrackAppender should not be empty');\n    }\n    return this.#networkTrackAppender.colorForEvent(this.#events[index]);\n  }\n\n  textColor(_index: number): string {\n    return FlameChartStyle.textColor;\n  }\n\n  entryTitle(index: number): string|null {\n    const event = this.#events[index];\n    return TimelineUtils.EntryName.nameForEntry(event);\n  }\n\n  entryFont(_index: number): string|null {\n    return this.#networkTrackAppender?.font() || null;\n  }\n\n  /**\n   * Returns the pixels needed to decorate the event.\n   * The pixels compare to the start of the earliest event of the request.\n   *\n   * Request.beginTime(), which is used in FlameChart to calculate the unclippedBarX\n   * v\n   *    |----------------[ (URL text)    waiting time   |   request  ]--------|\n   *    ^start           ^sendStart                     ^headersEnd  ^Finish  ^end\n   * @param request\n   * @param unclippedBarX The start pixel of the request. It is calculated with request.beginTime() in FlameChart.\n   * @param timeToPixelRatio\n   * @returns the pixels to draw waiting time and left and right whiskers and url text\n   */\n  getDecorationPixels(\n      event: Trace.Types.Events.SyntheticNetworkRequest, unclippedBarX: number,\n      timeToPixelRatio: number): {sendStart: number, headersEnd: number, finish: number, start: number, end: number} {\n    const beginTime = Trace.Helpers.Timing.microToMilli(event.ts);\n    const timeToPixel = (time: number): number => unclippedBarX + (time - beginTime) * timeToPixelRatio;\n    const startTime = Trace.Helpers.Timing.microToMilli(event.ts);\n    const endTime = Trace.Helpers.Timing.microToMilli((event.ts + event.dur) as Trace.Types.Timing.Micro);\n    const sendStartTime = Trace.Helpers.Timing.microToMilli(event.args.data.syntheticData.sendStartTime);\n    const headersEndTime = Trace.Helpers.Timing.microToMilli(event.args.data.syntheticData.downloadStart);\n    const sendStart = Math.max(timeToPixel(sendStartTime), unclippedBarX);\n    const headersEnd = Math.max(timeToPixel(headersEndTime), sendStart);\n    const finish =\n        Math.max(timeToPixel(Trace.Helpers.Timing.microToMilli(event.args.data.syntheticData.finishTime)), headersEnd);\n    const start = timeToPixel(startTime);\n    const end = Math.max(timeToPixel(endTime), finish);\n\n    return {sendStart, headersEnd, finish, start, end};\n  }\n\n  /**\n   * Decorates the entry depends on the type of the event:\n   * @param index\n   * @param context\n   * @param barX The x pixel of the visible part request\n   * @param barY The y pixel of the visible part request\n   * @param barWidth The width of the visible part request\n   * @param barHeight The height of the visible part request\n   * @param unclippedBarX The start pixel of the request compare to the visible area. It is calculated with request.beginTime() in FlameChart.\n   * @param timeToPixelRatio\n   * @returns if the entry needs to be decorate, which is alway true if the request has \"timing\" field\n   */\n  decorateEntry(\n      index: number, context: CanvasRenderingContext2D, _text: string|null, barX: number, barY: number,\n      barWidth: number, barHeight: number, unclippedBarX: number, timeToPixelRatio: number): boolean {\n    const event = this.#events[index];\n    if (Trace.Types.Events.isSyntheticWebSocketConnection(event)) {\n      return this.#decorateSyntheticWebSocketConnection(\n          index, context, barY, barHeight, unclippedBarX, timeToPixelRatio);\n    }\n    if (!Trace.Types.Events.isSyntheticNetworkRequest(event)) {\n      return false;\n    }\n    return this.#decorateNetworkRequest(\n        index, context, _text, barX, barY, barWidth, barHeight, unclippedBarX, timeToPixelRatio);\n  }\n\n  /**\n   * Decorates the Network Request entry with the following steps:\n   *   Draw a waiting time between |sendStart| and |headersEnd|\n   *     By adding a extra transparent white layer\n   *   Draw a whisk between |start| and |sendStart|\n   *   Draw a whisk between |finish| and |end|\n   *     By draw another layer of background color to \"clear\" the area\n   *     Then draw the whisk\n   *   Draw the URL after the |sendStart|\n   *\n   *   |----------------[ (URL text)    waiting time   |   request  ]--------|\n   *   ^start           ^sendStart                     ^headersEnd  ^Finish  ^end\n   * */\n  #decorateNetworkRequest(\n      index: number, context: CanvasRenderingContext2D, _text: string|null, barX: number, barY: number,\n      barWidth: number, barHeight: number, unclippedBarX: number, timeToPixelRatio: number): boolean {\n    const event = this.#events[index];\n    if (!Trace.Types.Events.isSyntheticNetworkRequest(event)) {\n      return false;\n    }\n    const {sendStart, headersEnd, finish, start, end} =\n        this.getDecorationPixels(event, unclippedBarX, timeToPixelRatio);\n\n    // Draw waiting time.\n    context.fillStyle = 'hsla(0, 100%, 100%, 0.8)';\n    context.fillRect(sendStart + 0.5, barY + 0.5, headersEnd - sendStart - 0.5, barHeight - 2);\n    // Clear portions of initial rect to prepare for the ticks.\n    context.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-cdt-base-container');\n    context.fillRect(barX, barY - 0.5, sendStart - barX, barHeight);\n    context.fillRect(finish, barY - 0.5, barX + barWidth - finish, barHeight);\n\n    // Draws left and right whiskers\n    function drawTick(begin: number, end: number, y: number): void {\n      const /** @const */ tickHeightPx = 6;\n      context.moveTo(begin, y - tickHeightPx / 2);\n      context.lineTo(begin, y + tickHeightPx / 2);\n      context.moveTo(begin, y);\n      context.lineTo(end, y);\n    }\n\n    context.beginPath();\n    context.lineWidth = 1;\n    context.strokeStyle = '#ccc';\n    const lineY = Math.floor(barY + barHeight / 2) + 0.5;\n    const leftTick = start + 0.5;\n    const rightTick = end - 0.5;\n    drawTick(leftTick, sendStart, lineY);\n    drawTick(rightTick, finish, lineY);\n    context.stroke();\n\n    // Draw request URL as text\n    const textStart = Math.max(sendStart, 0);\n    const textWidth = finish - textStart;\n    const /** @const */ minTextWidthPx = 20;\n    if (textWidth >= minTextWidthPx) {\n      let title = this.entryTitle(index) || '';\n      if (event.args.data.fromServiceWorker) {\n        title = '⚙ ' + title;\n      }\n      if (title) {\n        const /** @const */ textPadding = 4;\n        const /** @const */ textBaseline = 5;\n        const textBaseHeight = barHeight - textBaseline;\n        const trimmedText = UI.UIUtils.trimTextEnd(context, title, textWidth - 2 * textPadding);\n        context.fillStyle = '#333';\n        context.fillText(trimmedText, textStart + textPadding, barY + textBaseHeight);\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Decorates the synthetic websocket event entry with a whisk from the start to the end.\n   *   ------------------------\n   *   ^start                 ^end\n   * */\n  #decorateSyntheticWebSocketConnection(\n      index: number, context: CanvasRenderingContext2D, barY: number, barHeight: number, unclippedBarX: number,\n      timeToPixelRatio: number): boolean {\n    context.save();\n    const event = this.#events[index] as Trace.Types.Events.SyntheticWebSocketConnection;\n    const beginTime = Trace.Helpers.Timing.microToMilli(event.ts);\n    const timeToPixel = (time: number): number => Math.floor(unclippedBarX + (time - beginTime) * timeToPixelRatio);\n    const endTime = Trace.Helpers.Timing.microToMilli((event.ts + event.dur) as Trace.Types.Timing.Micro);\n    const start = timeToPixel(beginTime) + 0.5;\n    const end = timeToPixel(endTime) - 0.5;\n    context.strokeStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--app-color-rendering');\n\n    const lineY = Math.floor(barY + barHeight / 2) + 0.5;\n    context.setLineDash([3, 2]);\n    context.moveTo(start, lineY - 1);\n    context.lineTo(end, lineY - 1);\n    context.moveTo(start, lineY + 1);\n    context.lineTo(end, lineY + 1);\n    context.stroke();\n    context.restore();\n    return true;\n  }\n\n  forceDecoration(_index: number): boolean {\n    return true;\n  }\n\n  /**\n   *In the FlameChart.ts, when filtering through the events for a level, it starts\n   * from the last event of that level and stops when it hit an event that has start\n   * time greater than the filtering window.\n   * For example, in this websocket level we have A(socket event), B, C, D. If C\n   * event has start time greater than the window, the rest of the events (A and B)\n   * wont be drawn. So if this level is the force Drawable level, we wont stop at\n   * event C and will include the socket event A.\n   * */\n  forceDrawableLevel(levelIndex: number): boolean {\n    return this.#networkTrackAppender?.webSocketIdToLevel.has(levelIndex) || false;\n  }\n\n  preparePopoverElement(index: number): Element|null {\n    const event = this.#events[index];\n    if (Trace.Types.Events.isSyntheticNetworkRequest(event)) {\n      const element = document.createElement('div');\n      const root = UI.UIUtils.createShadowRootWithCoreStyles(element, {cssFile: timelineFlamechartPopoverStyles});\n\n      const contents = root.createChild('div', 'timeline-flamechart-popover');\n      const infoElement = new TimelineComponents.NetworkRequestTooltip.NetworkRequestTooltip();\n      infoElement.data = {networkRequest: event, entityMapper: this.#entityMapper};\n      contents.appendChild(infoElement);\n      return element;\n    }\n    return null;\n  }\n\n  /**\n   * Sets the minimum time and total time span of a trace using the\n   * new engine data.\n   */\n  #setTimingBoundsData(newParsedTrace: Trace.Handlers.Types.ParsedTrace): void {\n    const {traceBounds} = newParsedTrace.Meta;\n    const minTime = Trace.Helpers.Timing.microToMilli(traceBounds.min);\n    const maxTime = Trace.Helpers.Timing.microToMilli(traceBounds.max);\n    this.#minimumBoundary = minTime;\n    this.#timeSpan = minTime === maxTime ? 1000 : maxTime - this.#minimumBoundary;\n  }\n\n  /**\n   * When users zoom in the flamechart, we only want to show them the network\n   * requests between startTime and endTime. This function will call the\n   * trackAppender to update the timeline data, and then force to create a new\n   * PerfUI.FlameChart.FlameChartTimelineData instance to force the flamechart\n   * to re-render.\n   */\n  #updateTimelineData(startTime: Trace.Types.Timing.Milli, endTime: Trace.Types.Timing.Milli): void {\n    if (!this.#networkTrackAppender || !this.#timelineDataInternal) {\n      return;\n    }\n    this.#maxLevel = this.#networkTrackAppender.relayoutEntriesWithinBounds(this.#events, startTime, endTime);\n\n    // TODO(crbug.com/1459225): Remove this recreating code.\n    // Force to create a new PerfUI.FlameChart.FlameChartTimelineData instance\n    // to force the flamechart to re-render. This also causes crbug.com/1459225.\n    this.#timelineDataInternal = PerfUI.FlameChart.FlameChartTimelineData.create({\n      entryLevels: this.#timelineDataInternal?.entryLevels,\n      entryTotalTimes: this.#timelineDataInternal?.entryTotalTimes,\n      entryStartTimes: this.#timelineDataInternal?.entryStartTimes,\n      groups: this.#timelineDataInternal?.groups,\n      initiatorsData: this.#timelineDataInternal.initiatorsData,\n      entryDecorations: this.#timelineDataInternal.entryDecorations,\n    });\n  }\n\n  /**\n   * Note that although we use the same mechanism to track configuration\n   * changes in the Network part of the timeline, we only really use it to track\n   * the expanded state because the user cannot re-order or hide/show tracks in\n   * here.\n   */\n  handleTrackConfigurationChange(groups: readonly PerfUI.FlameChart.Group[], indexesInVisualOrder: number[]): void {\n    if (!this.#persistedGroupConfigSetting) {\n      return;\n    }\n    if (!this.#parsedTrace) {\n      return;\n    }\n    const persistedDataForTrace = buildPersistedConfig(groups, indexesInVisualOrder);\n    const traceKey = keyForTraceConfig(this.#parsedTrace);\n    const setting = this.#persistedGroupConfigSetting.get();\n    setting[traceKey] = persistedDataForTrace;\n    this.#persistedGroupConfigSetting.set(setting);\n  }\n\n  setPersistedGroupConfigSetting(setting: Common.Settings.Setting<PerfUI.FlameChart.PersistedConfigPerTrace>): void {\n    this.#persistedGroupConfigSetting = setting;\n  }\n\n  preferredHeight(): number {\n    if (!this.#networkTrackAppender || this.#maxLevel === 0) {\n      return 0;\n    }\n    const group = this.#networkTrackAppender.group();\n    if (!group) {\n      return 0;\n    }\n    // Bump up to 7 because the tooltip is around 7 rows' height.\n    return group.style.height * (this.isExpanded() ? Platform.NumberUtilities.clamp(this.#maxLevel + 1, 7, 8.5) : 1);\n  }\n\n  isExpanded(): boolean {\n    return Boolean(this.#networkTrackAppender?.group()?.expanded);\n  }\n\n  formatValue(value: number, precision?: number): string {\n    return i18n.TimeUtilities.preciseMillisToString(value, precision);\n  }\n\n  canJumpToEntry(_entryIndex: number): boolean {\n    return false;\n  }\n\n  /**\n   * searches entries within the specified time and returns a list of entry\n   * indexes\n   */\n  search(\n      visibleWindow: Trace.Types.Timing.TraceWindowMicro,\n      filter?: Trace.Extras.TraceFilter.TraceFilter,\n      ): PerfUI.FlameChart.DataProviderSearchResult[] {\n    const results: PerfUI.FlameChart.DataProviderSearchResult[] = [];\n    for (let i = 0; i < this.#events.length; i++) {\n      const entry = this.#events.at(i);\n      if (!entry) {\n        continue;\n      }\n\n      if (!Trace.Helpers.Timing.eventIsInBounds(entry, visibleWindow)) {\n        continue;\n      }\n\n      if (!filter || filter.accept(entry, this.#parsedTrace ?? undefined)) {\n        const startTimeMilli = Trace.Helpers.Timing.microToMilli(entry.ts);\n        results.push({startTimeMilli, index: i, provider: 'network'});\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Returns a map of navigations that happened in the main frame, ignoring any\n   * that happened in other frames.\n   * The map's key is the frame ID.\n   **/\n  mainFrameNavigationStartEvents(): readonly Trace.Types.Events.NavigationStart[] {\n    if (!this.#parsedTrace) {\n      return [];\n    }\n    return this.#parsedTrace.Meta.mainFrameNavigations;\n  }\n\n  buildFlowForInitiator(entryIndex: number): boolean {\n    if (!this.#parsedTrace) {\n      return false;\n    }\n    if (!this.#timelineDataInternal) {\n      return false;\n    }\n    if (entryIndex > -1 && this.#lastInitiatorEntry === entryIndex) {\n      if (this.#lastInitiatorsData) {\n        this.#timelineDataInternal.initiatorsData = this.#lastInitiatorsData;\n      }\n      return true;\n    }\n    if (!this.#networkTrackAppender) {\n      return false;\n    }\n\n    // Remove all previously assigned decorations indicating that the flow event entries are hidden\n    const previousInitiatorsDataLength = this.#timelineDataInternal.initiatorsData.length;\n    // |entryIndex| equals -1 means there is no entry selected, just clear the\n    // initiator cache if there is any previous arrow and return true to\n    // re-render.\n    if (entryIndex === -1) {\n      this.#lastInitiatorEntry = entryIndex;\n      if (previousInitiatorsDataLength === 0) {\n        // This means there is no arrow before, so we don't need to re-render.\n        return false;\n      }\n      // Reset to clear any previous arrows from the last event.\n      this.#timelineDataInternal.emptyInitiators();\n      return true;\n    }\n\n    const event = this.#events[entryIndex];\n    // Reset to clear any previous arrows from the last event.\n    this.#timelineDataInternal.emptyInitiators();\n    this.#lastInitiatorEntry = entryIndex;\n\n    const initiatorsData = initiatorsDataToDrawForNetwork(this.#parsedTrace, event);\n    // This means there is no change for arrows.\n    if (previousInitiatorsDataLength === 0 && initiatorsData.length === 0) {\n      return false;\n    }\n    for (const initiatorData of initiatorsData) {\n      const eventIndex = this.indexForEvent(initiatorData.event);\n      const initiatorIndex = this.indexForEvent(initiatorData.initiator);\n      if (eventIndex === null || initiatorIndex === null) {\n        continue;\n      }\n      this.#timelineDataInternal.initiatorsData.push({\n        initiatorIndex,\n        eventIndex,\n      });\n    }\n    this.#lastInitiatorsData = this.#timelineDataInternal.initiatorsData;\n    return true;\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport {\n  addDecorationToEvent,\n  buildGroupStyle,\n  buildTrackHeader,\n  getEventLevel,\n  type LastTimestampByLevel,\n} from './AppenderUtils.js';\nimport {\n  type TrackAppender,\n  type TrackAppenderName,\n  VisualLoggingTrackName,\n} from './CompatibilityTracksAppender.js';\nimport * as Components from './components/components.js';\nimport {InstantEventVisibleDurationMs} from './TimelineFlameChartDataProvider.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  network: 'Network',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/NetworkTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type NetworkTrackEvent = Trace.Types.Events.SyntheticNetworkRequest|Trace.Types.Events.WebSocketEvent;\n\nexport class NetworkTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'Network';\n\n  #flameChartData: PerfUI.FlameChart.FlameChartTimelineData;\n  webSocketIdToLevel = new Map<number, number>();\n  #events: NetworkTrackEvent[] = [];\n\n  #font: string;\n  #group?: PerfUI.FlameChart.Group;\n\n  constructor(flameChartData: PerfUI.FlameChart.FlameChartTimelineData, events: NetworkTrackEvent[]) {\n    this.#flameChartData = flameChartData;\n    this.#events = events;\n    this.#font = `${PerfUI.Font.DEFAULT_FONT_SIZE} ${PerfUI.Font.getFontFamilyForCanvas()}`;\n\n    ThemeSupport.ThemeSupport.instance().addEventListener(ThemeSupport.ThemeChangeEvent.eventName, () => {\n      if (this.#group) {\n        // We only need to update the color here, because FlameChart will call `scheduleUpdate()` when theme is changed.\n        this.#group.style.color = ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-on-surface');\n        this.#group.style.backgroundColor =\n            ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-cdt-base-container');\n      }\n    });\n  }\n\n  group(): PerfUI.FlameChart.Group|undefined {\n    return this.#group;\n  }\n\n  font(): string {\n    return this.#font;\n  }\n\n  /**\n   * Appends into the flame chart data the data corresponding to the\n   * Network track.\n   * @param trackStartLevel the horizontal level of the flame chart events where\n   * the track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean|undefined): number {\n    if (this.#events.length === 0) {\n      return trackStartLevel;\n    }\n    this.#appendTrackHeaderAtLevel(trackStartLevel, expanded);\n    return this.#appendEventsAtLevel(this.#events, trackStartLevel);\n  }\n\n  /**\n   * Adds into the flame chart data the header corresponding to the\n   * Network track. A header is added in the shape of a group in the\n   * flame chart data. A group has a predefined style and a reference\n   * to the definition of the legacy track (which should be removed\n   * in the future).\n   * @param currentLevel the flame chart level at which the header is\n   * appended.\n   * @param expanded wether the track should be rendered expanded.\n   */\n  #appendTrackHeaderAtLevel(_currentLevel: number, expanded?: boolean): void {\n    const style = buildGroupStyle({\n      shareHeaderLine: false,\n      useFirstLineForOverview: false,\n      useDecoratorsForOverview: true,\n    });\n    this.#group = buildTrackHeader(\n        VisualLoggingTrackName.NETWORK, 0, i18nString(UIStrings.network), style, /* selectable= */ true, expanded,\n        /* showStackContextMenu= */ false);\n    this.#flameChartData.groups.push(this.#group);\n  }\n\n  /**\n   * Adds into the flame chart data a list of trace events.\n   * @param events the trace events that will be appended to the flame chart.\n   * The events should be taken straight from the trace handlers. The handlers\n   * should sort the events by start time, and the parent event is before the\n   * child.\n   * @param trackStartLevel the flame chart level from which the events will\n   * be appended.\n   * @returns the next level after the last occupied by the appended these\n   * trace events (the first available level to append next track).\n   */\n  #appendEventsAtLevel(events: NetworkTrackEvent[], trackStartLevel: number): number {\n    // Appending everything to the same level isn't \"correct\", but relayoutEntriesWithinBounds() will handle that\n    // before anything is rendered.\n    for (let i = 0; i < events.length; ++i) {\n      const event = events[i];\n      this.#appendEventAtLevel(event, trackStartLevel);\n      // Decorate render blocking\n      if (Trace.Types.Events.isSyntheticNetworkRequest(event) &&\n          Trace.Helpers.Network.isSyntheticNetworkRequestEventRenderBlocking(event)) {\n        addDecorationToEvent(this.#flameChartData, i, {\n          type: PerfUI.FlameChart.FlameChartDecorationType.WARNING_TRIANGLE,\n          customStartTime: event.args.data.syntheticData.sendStartTime,\n          customEndTime: event.args.data.syntheticData.finishTime,\n        });\n      }\n    }\n    return this.relayoutEntriesWithinBounds(\n        events, Trace.Types.Timing.Milli(-Infinity), Trace.Types.Timing.Milli(Infinity));\n  }\n\n  /**\n   * Adds an event to the flame chart data at a defined level.\n   * @param event the event to be appended,\n   * @param level the level to append the event,\n   * @returns the index of the event in all events to be rendered in the flamechart.\n   */\n  #appendEventAtLevel(event: Trace.Types.Events.Event, level: number): number {\n    const index = this.#flameChartData.entryLevels.length;\n    this.#flameChartData.entryLevels[index] = level;\n    this.#flameChartData.entryStartTimes[index] = Trace.Helpers.Timing.microToMilli(event.ts);\n    const dur = event.dur || Trace.Helpers.Timing.milliToMicro(InstantEventVisibleDurationMs);\n    this.#flameChartData.entryTotalTimes[index] = Trace.Helpers.Timing.microToMilli(dur);\n    return level;\n  }\n\n  /**\n   * Update the flame chart data.\n   * When users zoom in the flamechart, we only want to show them the network\n   * requests between minTime and maxTime. This function will append those\n   * invisible events to the last level, and hide them.\n   * @returns the number of levels used by this track\n   */\n  relayoutEntriesWithinBounds(\n      events: NetworkTrackEvent[], minTime: Trace.Types.Timing.Milli, maxTime: Trace.Types.Timing.Milli): number {\n    if (!this.#flameChartData || events.length === 0) {\n      return 0;\n    }\n    const lastTimestampByLevel: LastTimestampByLevel = [];\n    this.webSocketIdToLevel = new Map<number, number>();\n    let maxLevel = 0;\n    for (let i = 0; i < events.length; ++i) {\n      const event = events[i];\n      const beginTime = Trace.Helpers.Timing.microToMilli(event.ts);\n      const dur = event.dur ? Trace.Helpers.Timing.microToMilli(event.dur) : InstantEventVisibleDurationMs;\n      const endTime = beginTime + dur;\n      const isBetweenTimes = beginTime < maxTime && endTime > minTime;\n      // Exclude events outside the the specified timebounds\n      if (!isBetweenTimes) {\n        this.#flameChartData.entryLevels[i] = -1;\n        continue;\n      }\n      // Layout the entries by assigning levels.\n      let level: number;\n      if ('identifier' in event.args.data && Trace.Types.Events.isWebSocketEvent(event)) {\n        level = this.getWebSocketLevel(event, lastTimestampByLevel);\n      } else {\n        level = getEventLevel(event, lastTimestampByLevel);\n      }\n      this.#flameChartData.entryLevels[i] = level;\n      maxLevel = Math.max(maxLevel, lastTimestampByLevel.length, level);\n    }\n    for (let i = 0; i < events.length; ++i) {\n      // -1 means this event is invisible.\n      if (this.#flameChartData.entryLevels[i] === -1) {\n        // The maxLevel is an invisible level.\n        this.#flameChartData.entryLevels[i] = maxLevel;\n      }\n    }\n    return maxLevel;\n  }\n\n  getWebSocketLevel(event: Trace.Types.Events.WebSocketEvent, lastTimestampByLevel: LastTimestampByLevel): number {\n    const webSocketIdentifier = event.args.data.identifier;\n    let level: number;\n    if (this.webSocketIdToLevel.has(webSocketIdentifier)) {\n      // We're placing an instant event on top of its parent websocket\n      level = this.webSocketIdToLevel.get(webSocketIdentifier) || 0;\n    } else {\n      // We're placing the parent websocket\n      level = getEventLevel(event, lastTimestampByLevel);\n      this.webSocketIdToLevel.set(webSocketIdentifier, level);\n    }\n    return level;\n  }\n\n  /*\n    ------------------------------------------------------------------------------------\n     The following methods  are invoked by the flame chart renderer to query features about\n     events on rendering.\n    ------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Gets the color an event added by this appender should be rendered with.\n   */\n  colorForEvent(event: Trace.Types.Events.Event): string {\n    if (Trace.Types.Events.isSyntheticWebSocketConnection(event)) {\n      // the synthetic WebSocket events are not selectable, so we don't need to set the color.\n      return '';\n    }\n    if (Trace.Types.Events.isWebSocketTraceEvent(event)) {\n      return Components.Utils.colorForNetworkCategory(Components.Utils.NetworkCategory.JS);\n    }\n    if (!Trace.Types.Events.isSyntheticNetworkRequest(event)) {\n      throw new Error(`Unexpected Network Request: The event's type is '${event.name}'`);\n    }\n    return Components.Utils.colorForNetworkRequest(event);\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as Trace from '../../models/trace/trace.js';\nimport type * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\n\n/**\n * Builds an array of group configs that we persist in memory and to disk when\n * the trace is saved. The order of the final array represents the user visible\n * order of the groups on the timeline.\n * The groups will be supplied in their original order; once they are defined\n * they do not change the order. What changes is the array of indexes that\n * represents the order in the UI. For example, this might be [1, 2, 0], which\n * means the group that was first (index 0) is now last.\n */\nexport function buildPersistedConfig(groups: readonly PerfUI.FlameChart.Group[], indexesInVisualOrder: number[]):\n    PerfUI.FlameChart.PersistedGroupConfig[] {\n  return groups.map((group, index) => {\n    // indexesInVisualOrder will look like [0, 2, 3, 4, 1];\n    // In this case the group originally at index 1 should now be last.\n    // So to get the new index, we look up the position of the old index in the indexesInVisualOrder array.\n    const newVisualIndex = indexesInVisualOrder.indexOf(index);\n\n    return {\n      expanded: Boolean(group.expanded),\n      hidden: Boolean(group.hidden),\n      originalIndex: index,\n      visualIndex: newVisualIndex,\n    };\n  });\n}\n\n/**\n * Defines the key that is used when storing trace group configs into memory.\n * We store them with a key to ensure that if the user has >1 active traces, the configs are persisted but do not clash.\n * There is no guaranteed uuid for a trace file; but given that the timestamps\n * are monotonic microseconds, the chances of the user having more than one\n * trace with the exact same start time is very unlikely.\n * It's not impossible, but unlikely enough that we think the min trace bounds time is a good enough value to use as a uuid.\n */\nexport function keyForTraceConfig(trace: Trace.Handlers.Types.ParsedTrace): Trace.Types.Timing.Micro {\n  return trace.Meta.traceBounds.min;\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2024 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.timeline-overlays-container {\n  position: absolute;\n  inset: 0;\n  /* Ensure it appears on top of everything */\n  z-index: 200;\n  pointer-events: none;\n}\n\n.overlay-item {\n  position: absolute;\n  /* The FlameChartView will move these as the FlameChart is drawn */\n  top: 0;\n  left: 0;\n}\n\n.overlay-type-ENTRY_LABEL {\n  /* keep these above the selected entry overline, else they can become hard to read */\n  z-index: 2;\n\n  /* if an overlay is being edited, keep it above the rest so the user is not obstructed */\n  /* also bump the z-index if the label is being hovered, to ensure it appears above any other labels that might obstruct it */\n  &:has([data-user-editing-label]),\n  &:hover {\n    z-index: 4;\n  }\n\n  /* Added to the selected entry label to bring it forward. Hovered entry's label will still be on top */\n  &.bring-forward {\n    z-index: 3;\n  }\n}\n\n\n.overlay-type-ENTRY_SELECTED,\n.overlay-type-ENTRY_OUTLINE {\n  pointer-events: none;\n  border: 2px solid var(--sys-color-primary);\n  background-color: var(--sys-color-state-ripple-primary);\n\n  &.cut-off-top {\n    border-top: none;\n  }\n\n  &.cut-off-bottom {\n    border-bottom: none;\n  }\n\n  &.cut-off-right {\n    border-right: none;\n  }\n\n  &.cut-off-left {\n    border-left: none;\n  }\n}\n\n.overlay-type-ENTRY_SELECTED {\n  /* Ensure ENTRY_SELECTED overlays are always displayed on top of ENTRY_OUTLINE overlays */\n  z-index: 1;\n}\n\n.overlay-type-ENTRY_OUTLINE {\n  background-color: transparent;\n  border-width: 1px;\n  /* Ensure ENTRY_SELECTED overlays are always displayed on top of ENTRY_OUTLINE overlays */\n  z-index: 0;\n\n  &.outline-reason-ERROR {\n    border-color: var(--sys-color-error-bright);\n  }\n\n  &.outline-reason-INFO {\n    border-color: var(--sys-color-primary);\n  }\n}\n\n.overlay-type-CANDY_STRIPED_TIME_RANGE {\n  --red-stripe-width: 2px;\n  --white-stripe-width: 7px;\n\n  background-image:\n    repeating-linear-gradient(\n      315deg,\n      var(--sys-color-error-bright),\n      var(--sys-color-error-bright) var(--red-stripe-width),\n      transparent var(--red-stripe-width),\n      transparent var(--white-stripe-width)\n    );\n  border: 1px solid var(--sys-color-error-bright);\n\n  &.cut-off-bottom {\n    border-bottom: none;\n  }\n\n  &.cut-off-top {\n    border-top: none;\n  }\n\n  &.cut-off-right {\n    border-right: none;\n  }\n\n  &.cut-off-left {\n    border-left: none;\n  }\n}\n\n.overlay-type-ENTRIES_LINK {\n  height: 100%;\n  width: 100%;\n}\n\n.overlay-type-TIME_RANGE {\n  top: 0;\n  bottom: 0;\n\n  &.overlap-1 {\n    bottom: 55px;\n  }\n\n  &.overlap-2 {\n    bottom: 105px;\n  }\n}\n\n.overlay-type-TIMESTAMP_MARKER {\n  top: 0;\n  bottom: 0;\n  width: 2px;\n  background-color: var(--sys-color-primary);\n  pointer-events: none;\n}\n\n.timeline-entry-tooltip-element:not(:empty) {\n  z-index: 2000;\n  position: absolute;\n  contain: content;\n  background-color: var(--sys-color-cdt-base-container);\n  pointer-events: none;\n  padding: var(--sys-size-3) var(--sys-size-4);\n  border-radius: var(--sys-shape-corner-extra-small);\n  white-space: nowrap;\n  max-width: 80%;\n  box-shadow: var(--sys-elevation-level2);\n}\n\n.overlay-type-TIMESPAN_BREAKDOWN {\n  /* This overlay by default is shown at the bottom of the UI, not the top */\n  top: unset;\n  bottom: 0;\n  height: 100px;\n}\n\n.overlay-type-TIMINGS_MARKER {\n  bottom: 0;\n  width: 0.5px;\n  pointer-events: auto;\n}\n\n.marker-title {\n  display: flex;\n  justify-content: center;\n  padding: 0 var(--sys-size-3);\n  font-size: var(--sys-typescale-body4-size);\n  color: var(--sys-color-base);\n\n  &:hover {\n    cursor: default;\n    transition: opacity 0.2s ease;\n  }\n}\n\n.markers {\n  position: fixed;\n  display: flex;\n  bottom: 0;\n}\n\n.overlay-popover span {\n  margin-right: var(--sys-size-3);\n}\n\n.overlay-popover span.overlay-popover-time {\n  color: var(--sys-color-green);\n}\n\n.timeline-flamechart-resizer {\n  flex: 8px 0 0;\n  background-color: var(--sys-color-surface2);\n  border: 1px var(--sys-color-divider);\n  border-style: solid none;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  justify-content: center;\n}\n\n.timeline-network-resizer-disabled > .timeline-flamechart-resizer {\n  display: none;\n}\n\n.timeline-flamechart-resizer::after {\n  content: \"...\";\n  font-size: 14px;\n  margin-bottom: -1px;\n}\n\n.timeline-details {\n  vertical-align: top;\n}\n\n/* TODO(@jacktfranklin): move this into a TimelineDetailsView.css file */\n.timeline-details-view {\n  color: var(--sys-color-on-surface);\n  overflow: hidden;\n}\n\n.timeline-details-view-body {\n  flex: auto;\n  overflow: auto;\n  position: relative;\n  background-color: var(--sys-color-cdt-base-container);\n  user-select: text;\n}\n\n.timeline-details-view-block {\n  flex: none;\n  display: flex;\n  background-color: var(--sys-color-cdt-base-container);\n  flex-direction: column;\n  padding-bottom: 5px;\n  border-bottom: 1px solid var(--sys-color-divider);\n}\n\n.timeline-details-view-row {\n  padding-left: 10px;\n  min-height: 20px;\n  line-height: 16px; /* Vertically center text within row, important for background-color rows like .timeline-details-warning */\n}\n\n.timeline-details-view-block .timeline-details-stack-values {\n  flex-direction: column !important; /* stylelint-disable-line declaration-no-important */\n}\n\n.timeline-details-chip-title {\n  font-size: 12px;\n  padding: 8px;\n  display: flex;\n  align-items: center;\n}\n\n.timeline-details-view-block:first-child > .timeline-details-chip-title {\n  font-size: 13px;\n}\n\n.timeline-details-range-summary {\n  height: 100%;\n  margin: var(--sys-size-4) 0 0;\n\n  & > devtools-performance-timeline-summary {\n    /* The category summary can't be more narrow than this, so we'll force a horizontal scrollbar\n       Also this style can't be applied on the element's :host without !important, thus its here. */\n    min-width: 192px;\n  }\n}\n\n/* Dont need to see insight chips in range summary */\n.timeline-details-range-summary > devtools-related-insight-chips {\n  display:none;\n}\n\n.timeline-details-chip-title > div {\n  width: 12px;\n  height: 12px;\n  border: 1px solid var(--sys-color-divider);\n  display: inline-block;\n  margin-right: 4px;\n  content: \" \";\n}\n\n.timeline-details-view-row-title:not(:empty) {\n  color: var(--sys-color-token-subtle);\n  overflow: hidden;\n  padding-right: 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.timeline-details-warning {\n  --override-details-warning-background-color: rgb(250 209 209 / 48%);\n\n  background-color: var(--override-details-warning-background-color);\n}\n\n.theme-with-dark-background .timeline-details-warning,\n:host-context(.theme-with-dark-background) .timeline-details-warning {\n  --override-details-warning-background-color: rgb(87 10 10 / 48%);\n}\n\n.timeline-details-warning .timeline-details-view-row-title {\n  color: var(--sys-color-error);\n}\n\n.timeline-details-view-row-value {\n  display: inline-block;\n  user-select: text;\n  text-overflow: ellipsis;\n  overflow: visible;\n}\n\n.timeline-details-warning .timeline-details-view-row-value {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.timeline-details-view-pie-chart-wrapper {\n  margin: 4px 0;\n}\n\n.timeline-details-view-pie-chart {\n  margin-top: 5px;\n}\n\n/*# sourceURL=${import.meta.resolve('./timelineFlameChartView.css')} */`;", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Trace from '../../models/trace/trace.js';\n\nimport {buildGroupStyle, buildTrackHeader, getDurationString} from './AppenderUtils.js';\nimport {\n  type CompatibilityTracksAppender,\n  type PopoverInfo,\n  type TrackAppender,\n  type TrackAppenderName,\n  VisualLoggingTrackName,\n} from './CompatibilityTracksAppender.js';\nimport * as Extensions from './extensions/extensions.js';\nimport {TimelineFlameChartMarker} from './TimelineFlameChartView.js';\nimport {TimelinePanel} from './TimelinePanel.js';\nimport type {TimelineMarkerStyle} from './TimelineUIUtils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  timings: 'Timings',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimingsTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * This defines the order these markers will be rendered if they are at the\n * same timestamp. The smaller number will be shown first - e.g. so if MarkFCP,\n * MarkDOMContent and MarkLCPCandidate have the same timestamp, visually we\n * will render [FCP][DCL][LCP] everytime.\n */\nexport const SORT_ORDER_PAGE_LOAD_MARKERS: Readonly<Record<string, number>> = {\n  [Trace.Types.Events.Name.NAVIGATION_START]: 0,\n  [Trace.Types.Events.Name.MARK_LOAD]: 1,\n  [Trace.Types.Events.Name.MARK_FCP]: 2,\n  [Trace.Types.Events.Name.MARK_FIRST_PAINT]: 2,\n  [Trace.Types.Events.Name.MARK_DOM_CONTENT]: 3,\n  [Trace.Types.Events.Name.MARK_LCP_CANDIDATE]: 4,\n};\n\nexport class TimingsTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'Timings';\n\n  #colorGenerator: Common.Color.Generator;\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  #parsedTrace: Readonly<Trace.Handlers.Types.ParsedTrace>;\n  #extensionMarkers: readonly Trace.Types.Extensions.SyntheticExtensionMarker[];\n  constructor(\n      compatibilityBuilder: CompatibilityTracksAppender, parsedTrace: Trace.Handlers.Types.ParsedTrace,\n      colorGenerator: Common.Color.Generator) {\n    this.#compatibilityBuilder = compatibilityBuilder;\n    this.#colorGenerator = colorGenerator;\n    this.#parsedTrace = parsedTrace;\n    const extensionDataEnabled = TimelinePanel.extensionDataVisibilitySetting().get();\n    this.#extensionMarkers = extensionDataEnabled ? this.#parsedTrace.ExtensionTraceData.extensionMarkers : [];\n  }\n\n  /**\n   * Appends into the flame chart data the data corresponding to the\n   * timings track.\n   * @param trackStartLevel the horizontal level of the flame chart events where\n   * the track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean): number {\n    const extensionMarkersAreEmpty = this.#extensionMarkers.length === 0;\n    const performanceMarks = this.#parsedTrace.UserTimings.performanceMarks.filter(\n        m => !Trace.Handlers.ModelHandlers.ExtensionTraceData.extensionDataInPerformanceTiming(m));\n    const performanceMeasures = this.#parsedTrace.UserTimings.performanceMeasures.filter(\n        m => !Trace.Handlers.ModelHandlers.ExtensionTraceData.extensionDataInPerformanceTiming(m));\n    const timestampEvents = this.#parsedTrace.UserTimings.timestampEvents.filter(\n        timeStamp => !Trace.Handlers.ModelHandlers.ExtensionTraceData.extensionDataInConsoleTimeStamp(timeStamp));\n    const consoleTimings = this.#parsedTrace.UserTimings.consoleTimings;\n    if (extensionMarkersAreEmpty && performanceMarks.length === 0 && performanceMeasures.length === 0 &&\n        timestampEvents.length === 0 && consoleTimings.length === 0) {\n      return trackStartLevel;\n    }\n    this.#appendTrackHeaderAtLevel(trackStartLevel, expanded);\n    let newLevel = this.#appendExtensionsAtLevel(trackStartLevel);\n    newLevel = this.#compatibilityBuilder.appendEventsAtLevel(performanceMarks, newLevel, this);\n    newLevel = this.#compatibilityBuilder.appendEventsAtLevel(performanceMeasures, newLevel, this);\n    newLevel = this.#compatibilityBuilder.appendEventsAtLevel(timestampEvents, newLevel, this);\n    return this.#compatibilityBuilder.appendEventsAtLevel(consoleTimings, newLevel, this);\n  }\n\n  /**\n   * Adds into the flame chart data the header corresponding to the\n   * timings track. A header is added in the shape of a group in the\n   * flame chart data. A group has a predefined style and a reference\n   * to the definition of the legacy track (which should be removed\n   * in the future).\n   * @param currentLevel the flame chart level at which the header is\n   * appended.\n   */\n  #appendTrackHeaderAtLevel(currentLevel: number, expanded?: boolean): void {\n    const trackIsCollapsible = this.#parsedTrace.UserTimings.performanceMeasures.length > 0;\n    const style = buildGroupStyle({useFirstLineForOverview: true, collapsible: trackIsCollapsible});\n    const group = buildTrackHeader(\n        VisualLoggingTrackName.TIMINGS, currentLevel, i18nString(UIStrings.timings), style, /* selectable= */ true,\n        expanded);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n  /**\n   * Adds into the flame chart data the ExtensionMarkers.\n   * @param currentLevel the flame chart level from which markers will\n   * be appended.\n   * @returns the next level after the last occupied by the appended\n   * extension markers (the first available level to append more data).\n   */\n  #appendExtensionsAtLevel(currentLevel: number): number {\n    let markers: Trace.Types.Extensions.SyntheticExtensionMarker[] = [];\n    markers = markers.concat(this.#extensionMarkers).sort((m1, m2) => m1.ts - m2.ts);\n    if (markers.length === 0) {\n      return currentLevel;\n    }\n    for (const marker of markers) {\n      const index = this.#compatibilityBuilder.appendEventAtLevel(marker, currentLevel, this);\n      // Marker events do not have a duration: rendering code in\n      // FlameChart.ts relies on us setting this to NaN\n      this.#compatibilityBuilder.getFlameChartTimelineData().entryTotalTimes[index] = Number.NaN;\n    }\n\n    const minTimeMs = Trace.Helpers.Timing.microToMilli(this.#parsedTrace.Meta.traceBounds.min);\n    const flameChartMarkers = markers.map(marker => {\n      // The timestamp for user timing trace events is set to the\n      // start time passed by the user at the call site of the timing\n      // (based on the UserTiming spec), meaning we can use event.ts\n      // directly.\n      // https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/timing/performance_user_timing.cc;l=236;drc=494419358caf690316f160a1f27d9e771a14c033\n      const startTimeMs = Trace.Helpers.Timing.microToMilli(marker.ts);\n      const style = this.markerStyleForExtensionMarker(marker);\n      return new TimelineFlameChartMarker(startTimeMs, startTimeMs - minTimeMs, style);\n    });\n    this.#compatibilityBuilder.getFlameChartTimelineData().markers.push(...flameChartMarkers);\n    // TODO: we would like to have markers share the level with the rest but...\n    //  due to how CompatTrackAppender.appendEventsAtLevel tweaks the legacyEntryTypeByLevel array, it would take some work\n    return ++currentLevel;\n  }\n\n  /*\n    ------------------------------------------------------------------------------------\n     The following methods  are invoked by the flame chart renderer to query features about\n     events on rendering.\n    ------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Gets the style for a page load marker event.\n   */\n  markerStyleForPageLoadEvent(markerEvent: Trace.Types.Events.PageLoadEvent): TimelineMarkerStyle {\n    const tallMarkerDashStyle = [6, 4];\n    let title = '';\n    let color = 'grey';\n    if (Trace.Types.Events.isMarkDOMContent(markerEvent)) {\n      color = '#0867CB';\n      title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.DCL;\n    }\n    if (Trace.Types.Events.isMarkLoad(markerEvent)) {\n      color = '#B31412';\n      title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.L;\n    }\n    if (Trace.Types.Events.isFirstPaint(markerEvent)) {\n      color = '#228847';\n      title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FP;\n    }\n    if (Trace.Types.Events.isFirstContentfulPaint(markerEvent)) {\n      color = '#1A6937';\n      title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FCP;\n    }\n    if (Trace.Types.Events.isLargestContentfulPaintCandidate(markerEvent)) {\n      color = '#1A3422';\n      title = Trace.Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP;\n    }\n    if (Trace.Types.Events.isNavigationStart(markerEvent)) {\n      color = '#FF9800';\n      title = '';\n    }\n    return {\n      title,\n      dashStyle: tallMarkerDashStyle,\n      lineWidth: 0.5,\n      color,\n      tall: true,\n      lowPriority: false,\n    };\n  }\n\n  markerStyleForExtensionMarker(markerEvent: Trace.Types.Extensions.SyntheticExtensionMarker): TimelineMarkerStyle {\n    const tallMarkerDashStyle = [6, 4];\n    const title = markerEvent.name;\n    const color = Extensions.ExtensionUI.extensionEntryColor(markerEvent);\n    return {\n      title,\n      dashStyle: tallMarkerDashStyle,\n      lineWidth: 0.5,\n      color,\n      tall: true,\n      lowPriority: false,\n    };\n  }\n\n  /**\n   * Gets the color an event added by this appender should be rendered with.\n   */\n  colorForEvent(event: Trace.Types.Events.Event): string {\n    if (Trace.Types.Events.eventIsPageLoadEvent(event)) {\n      return this.markerStyleForPageLoadEvent(event).color;\n    }\n    if (Trace.Types.Extensions.isSyntheticExtensionEntry(event)) {\n      return Extensions.ExtensionUI.extensionEntryColor(event);\n    }\n    // Performance and console timings.\n    return this.#colorGenerator.colorForID(event.name);\n  }\n\n  /**\n   * Gets the title an event added by this appender should be rendered with.\n   */\n  titleForEvent(event: Trace.Types.Events.Event): string {\n    const metricsHandler = Trace.Handlers.ModelHandlers.PageLoadMetrics;\n    if (Trace.Types.Events.eventIsPageLoadEvent(event)) {\n      switch (event.name) {\n        case 'MarkDOMContent':\n          return metricsHandler.MetricName.DCL;\n        case 'MarkLoad':\n          return metricsHandler.MetricName.L;\n        case 'firstContentfulPaint':\n          return metricsHandler.MetricName.FCP;\n        case 'firstPaint':\n          return metricsHandler.MetricName.FP;\n        case 'largestContentfulPaint::Candidate':\n          return metricsHandler.MetricName.LCP;\n        case 'navigationStart':\n          return '';\n        default:\n          return event.name;\n      }\n    }\n    if (Trace.Types.Events.isConsoleTimeStamp(event)) {\n      return `TimeStamp: ${event.args.data?.message ?? '(name unknown)'}`;\n    }\n    if (Trace.Types.Events.isPerformanceMark(event)) {\n      return `[mark]: ${event.name}`;\n    }\n    if (Trace.Types.Extensions.isSyntheticExtensionEntry(event) && event.args.tooltipText) {\n      return event.args.tooltipText;\n    }\n    return event.name;\n  }\n\n  setPopoverInfo(event: Trace.Types.Events.Event, info: PopoverInfo): void {\n    // If an event is a marker event, rather than show a duration of 0, we can instead show the time that the event happened, which is much more useful. We do this currently for:\n    // Page load events: DCL, FCP and LCP\n    // performance.mark() events\n    // console.timestamp() events\n    if (Trace.Types.Events.isMarkerEvent(event) || Trace.Types.Events.isPerformanceMark(event) ||\n        Trace.Types.Events.isConsoleTimeStamp(event)) {\n      const timeOfEvent = Trace.Helpers.Timing.timeStampForEventAdjustedByClosestNavigation(\n          event,\n          this.#parsedTrace.Meta.traceBounds,\n          this.#parsedTrace.Meta.navigationsByNavigationId,\n          this.#parsedTrace.Meta.navigationsByFrameId,\n      );\n      info.formattedTime = getDurationString(timeOfEvent);\n    }\n  }\n}\n", "// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as AnimationsTrackAppender from './AnimationsTrackAppender.js';\nimport * as AnnotationHelpers from './AnnotationHelpers.js';\nimport * as AppenderUtils from './AppenderUtils.js';\nimport * as BenchmarkEvents from './BenchmarkEvents.js';\nimport * as CLSLinkifier from './CLSLinkifier.js';\nimport * as CompatibilityTracksAppender from './CompatibilityTracksAppender.js';\nimport * as CountersGraph from './CountersGraph.js';\nimport * as EntriesFilter from './EntriesFilter.js';\nimport * as EventsSerializer from './EventsSerializer.js';\nimport * as EventsTimelineTreeView from './EventsTimelineTreeView.js';\nimport * as ExtensionTrackAppender from './ExtensionTrackAppender.js';\nimport * as FreshRecording from './FreshRecording.js';\nimport * as GPUTrackAppender from './GPUTrackAppender.js';\nimport * as Initiators from './Initiators.js';\nimport * as InteractionsTrackAppender from './InteractionsTrackAppender.js';\nimport * as LayoutShiftsTrackAppender from './LayoutShiftsTrackAppender.js';\nimport * as ModificationsManager from './ModificationsManager.js';\nimport * as NetworkTrackAppender from './NetworkTrackAppender.js';\nimport * as RecordingMetadata from './RecordingMetadata.js';\nimport * as SaveFileFormatter from './SaveFileFormatter.js';\nimport * as TargetForEvent from './TargetForEvent.js';\nimport * as ThirdPartyTreeView from './ThirdPartyTreeView.js';\nimport * as ThreadAppender from './ThreadAppender.js';\nimport * as TimelineController from './TimelineController.js';\nimport * as TimelineDetailsView from './TimelineDetailsView.js';\nimport * as TimelineEventOverview from './TimelineEventOverview.js';\nimport * as TimelineFilters from './TimelineFilters.js';\nimport * as TimelineFlameChartDataProvider from './TimelineFlameChartDataProvider.js';\nimport * as TimelineFlameChartNetworkDataProvider from './TimelineFlameChartNetworkDataProvider.js';\nimport * as TimelineFlameChartView from './TimelineFlameChartView.js';\nimport * as TimelineHistoryManager from './TimelineHistoryManager.js';\nimport * as TimelineLayersView from './TimelineLayersView.js';\nimport * as TimelineLoader from './TimelineLoader.js';\nimport * as TimelineMiniMap from './TimelineMiniMap.js';\nimport * as TimelinePaintProfilerView from './TimelinePaintProfilerView.js';\nimport * as TimelinePanel from './TimelinePanel.js';\nimport * as TimelineSelection from './TimelineSelection.js';\nimport * as TimelineTreeView from './TimelineTreeView.js';\nimport * as TimelineUIUtils from './TimelineUIUtils.js';\nimport * as TimingsTrackAppender from './TimingsTrackAppender.js';\nimport * as TrackConfiguration from './TrackConfiguration.js';\nimport * as UIDevtoolsController from './UIDevtoolsController.js';\nimport * as UIDevtoolsUtils from './UIDevtoolsUtils.js';\nimport * as Utils from './utils/utils.js';\n\nexport {\n  AnimationsTrackAppender,\n  AnnotationHelpers,\n  AppenderUtils,\n  BenchmarkEvents,\n  CLSLinkifier,\n  CompatibilityTracksAppender,\n  CountersGraph,\n  EntriesFilter,\n  EventsSerializer,\n  EventsTimelineTreeView,\n  ExtensionTrackAppender,\n  FreshRecording,\n  GPUTrackAppender,\n  Initiators,\n  InteractionsTrackAppender,\n  LayoutShiftsTrackAppender,\n  ModificationsManager,\n  NetworkTrackAppender,\n  RecordingMetadata,\n  SaveFileFormatter,\n  TargetForEvent,\n  ThirdPartyTreeView,\n  ThreadAppender,\n  TimelineController,\n  TimelineDetailsView,\n  TimelineEventOverview,\n  TimelineFilters,\n  TimelineFlameChartDataProvider,\n  TimelineFlameChartNetworkDataProvider,\n  TimelineFlameChartView,\n  TimelineHistoryManager,\n  TimelineLayersView,\n  TimelineLoader,\n  TimelineMiniMap,\n  TimelinePaintProfilerView,\n  TimelinePanel,\n  TimelineSelection,\n  TimelineTreeView,\n  TimelineUIUtils,\n  TimingsTrackAppender,\n  TrackConfiguration,\n  UIDevtoolsController,\n  UIDevtoolsUtils,\n  Utils,\n};\n"],
  "mappings": "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",
  "names": ["i18n", "Trace", "ThemeSupport", "UIStrings", "str_", "i18nString", "i18n", "Trace", "UIStrings", "str_", "i18nString", "action", "Common", "Platform", "Root", "Trace", "ThemeSupport", "TimelineComponents", "i18n", "Trace", "ThemeSupport", "UIStrings", "str_", "i18nString", "i18n", "Trace", "ThemeSupport", "UIStrings", "str_", "i18nString", "i18n", "Trace", "PerfUI", "Utils", "UIStrings", "str_", "i18nString", "colorGenerator", "i18n", "Trace", "ThemeSupport", "Utils", "UIStrings", "str_", "i18nString", "Common", "i18n", "Platform", "SDK", "Trace", "PerfUI", "Common", "Platform", "Trace", "Platform", "Trace", "PerfUI", "action", "entry", "Trace", "action", "Utils", "UIStrings", "str_", "i18nString", "Common", "i18n", "Root", "Bindings", "Trace", "PerfUI", "UI", "ThemeSupport", "Common", "i18n", "Platform", "SDK", "Bindings", "CrUXManager", "Trace", "TraceBounds", "PerfUI", "UI", "VisualLogging", "TimelineInsights", "Common", "i18n", "Platform", "Trace", "TraceBounds", "PerfUI", "UI", "UIStrings", "str_", "i18nString", "Overlays", "SDK", "Common", "i18n", "Platform", "SDK", "Trace", "TraceBounds", "Components", "UI", "VisualLogging", "TimelineComponents", "Common", "i18n", "Trace", "DataGrid", "UI", "VisualLogging", "Trace", "Common", "i18n", "Platform", "Root", "SDK", "Trace", "TraceBounds", "PerfUI", "UI", "TimelineComponents", "Extensions", "i18n", "Trace", "DataGrid", "UI", "VisualLogging", "Common", "i18n", "Platform", "Trace", "Components", "UI", "instance", "Extensions", "Platform", "Trace", "Utils", "UIStrings", "str_", "i18nString", "toolbar", "gridNode", "categories", "parsedURL", "AggregatedTimelineTreeView", "GroupBy", "Utils", "UIStrings", "str_", "i18nString", "Common", "Host", "i18n", "Platform", "Root", "SDK", "CrUXManager", "TextUtils", "Trace", "Workspace", "TraceBounds", "PerfUI", "UI", "ThemeSupport", "VisualLogging", "TimelineComponents", "Common", "i18n", "SDK", "UI", "UIStrings", "str_", "i18nString", "i18n", "Platform", "UI", "VisualLogging", "UIStrings", "str_", "i18nString", "i18n", "Root", "SDK", "Extensions", "Trace", "SDK", "Trace", "UIStrings", "str_", "i18nString", "categories", "Common", "i18n", "Platform", "Trace", "UI", "VisualLogging", "i18n", "Trace", "TraceBounds", "PerfUI", "UI", "VisualLogging", "Utils", "UIStrings", "str_", "i18nString", "categories", "y", "UIStrings", "str_", "i18nString", "isNode", "instance", "action", "Common", "i18n", "SDK", "Bindings", "Trace", "UIStrings", "str_", "i18nString", "Common", "Trace", "TraceBounds", "PerfUI", "UI", "TimelineComponents", "i18n", "Root", "Utils", "UIStrings", "str_", "i18nString", "categories", "RecordType", "Utils", "Utils", "UIStrings", "str_", "i18nString", "action", "rawSourceMap", "time", "Utils", "UIStrings", "str_", "i18nString", "html", "url", "events", "aggregatedStats", "startTime", "endTime", "initiator", "nodeSpan", "categories", "filmStrip", "filmStripFrame", "Utils", "UIStrings", "str_", "i18nString", "toolbar", "categories", "UI", "SDK", "Trace", "UI", "LayerViewer", "Common", "SDK", "i18n", "SDK", "Trace", "UI", "VisualLogging", "UIStrings", "str_", "i18nString", "timings", "cssModel", "Utils", "UIStrings", "str_", "i18nString", "Tab", "i18n", "Platform", "SDK", "Trace", "PerfUI", "UI", "ThemeSupport", "TimelineComponents", "i18n", "Trace", "PerfUI", "ThemeSupport", "Components", "UIStrings", "str_", "i18nString", "end", "Utils", "UIStrings", "str_", "i18nString", "action", "dimmer", "groupForLevel", "Utils", "UIStrings", "str_", "i18nString", "action", "groupForLevel", "SORT_ORDER_PAGE_LOAD_MARKERS", "i18n", "Trace", "Extensions", "UIStrings", "str_", "i18nString", "SORT_ORDER_PAGE_LOAD_MARKERS", "colorGenerator", "TimelineUtils", "Utils"]
}
