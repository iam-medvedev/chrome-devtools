{"version":3,"file":"ThirdPartyTreeView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/ThirdPartyTreeView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Trace from '../../models/trace/trace.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport * as TimelineTreeView from './TimelineTreeView.js';\nimport * as Utils from './utils/utils.js';\n\nconst UIStrings = {\n  /**\n   *@description Unattributed text for an unattributed entity.\n   */\n  unattributed: '[unattributed]',\n  /**\n   *@description Title for the name of either 1st or 3rd Party entities.\n   */\n  firstOrThirdPartyName: '1st / 3rd party',\n  /**\n   *@description Title referencing transfer size.\n   */\n  transferSize: 'Transfer size',\n  /**\n   *@description Title referencing main thread time.\n   */\n  mainThreadTime: 'Main thread time',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/ThirdPartyTreeView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ThirdPartyTreeViewWidget extends TimelineTreeView.TimelineTreeView {\n  #thirdPartySummaries: {\n    summaries: Trace.Extras.ThirdParties.ThirdPartySummary,\n    entityByEvent: Map<Trace.Types.Events.Event, Trace.Extras.ThirdParties.Entity>,\n  }|null = null;\n\n  // By default the TimelineTreeView will auto-select the first row\n  // when the grid is refreshed but for the ThirdParty view we only\n  // want to do this when the user hovers.\n  protected override autoSelectFirstChildOnRefresh = false;\n\n  constructor() {\n    super();\n    this.element.setAttribute('jslog', `${VisualLogging.pane('third-party-tree').track({hover: true})}`);\n    this.init();\n    this.dataGrid.markColumnAsSortedBy('self', DataGrid.DataGrid.Order.Descending);\n    this.dataGrid.setResizeMethod(DataGrid.DataGrid.ResizeMethod.NEAREST);\n    /**\n     * By default data grids always expand when arrowing.\n     * For 3P table, we don't use this feature.\n     */\n    this.dataGrid.expandNodesWhenArrowing = false;\n  }\n\n  override buildTree(): Trace.Extras.TraceTree.Node {\n    const parsedTrace = this.parsedTrace();\n    const entityMapper = this.entityMapper();\n\n    if (!parsedTrace || !entityMapper) {\n      return new Trace.Extras.TraceTree.BottomUpRootNode([], {\n        textFilter: this.textFilter(),\n        filters: this.filtersWithoutTextFilter(),\n        startTime: this.startTime,\n        endTime: this.endTime,\n        eventGroupIdCallback: this.groupingFunction.bind(this),\n      });\n    }\n\n    // const events = this.#thirdPartySummaries.entityByEvent.keys();\n    const relatedEvents = this.selectedEvents().sort(Trace.Helpers.Trace.eventTimeComparator);\n\n    // The filters for this view are slightly different; we want to use the set\n    // of visible event types, but also include network events, which by\n    // default are not in the set of visible entries (as they are not shown on\n    // the main flame chart).\n    const filter = new Trace.Extras.TraceFilter.VisibleEventsFilter(\n        Utils.EntryStyles.visibleTypes().concat([Trace.Types.Events.Name.SYNTHETIC_NETWORK_REQUEST]));\n\n    const node = new Trace.Extras.TraceTree.BottomUpRootNode(relatedEvents, {\n      textFilter: this.textFilter(),\n      filters: [filter],\n      startTime: this.startTime,\n      endTime: this.endTime,\n      eventGroupIdCallback: this.groupingFunction.bind(this),\n      calculateTransferSize: true,\n    });\n    return node;\n  }\n\n  /**\n   * Third party tree view doesn't require the select feature, as this expands the node.\n   */\n  override selectProfileNode(): void {\n    return;\n  }\n\n  private groupingFunction(event: Trace.Types.Events.Event): string {\n    const entity = this.entityMapper()?.entityForEvent(event);\n    if (!entity) {\n      return '';\n    }\n\n    return entity.name;\n  }\n\n  override populateColumns(columns: DataGrid.DataGrid.ColumnDescriptor[]): void {\n    columns.push(\n        {\n          id: 'site',\n          title: i18nString(UIStrings.firstOrThirdPartyName),\n          // It's important that this width is the `.widget.vbox.timeline-tree-view` max-width (550)\n          // minus the two fixed sizes below. (550-100-105) == 345\n          width: '345px',\n          // And with this column not-fixed-width and resizingMethod NEAREST, the name-column will appropriately flex.\n          sortable: true,\n        },\n        {\n          id: 'transfer-size',\n          title: i18nString(UIStrings.transferSize),\n          width: '100px',  // Mostly so there's room for the header plus sorting triangle\n          fixedWidth: true,\n          sortable: true,\n        },\n        {\n          id: 'self',\n          title: i18nString(UIStrings.mainThreadTime),\n          width: '120px',  // Mostly to fit large self-time/main thread time plus devtools-button\n          fixedWidth: true,\n          sortable: true,\n        });\n  }\n\n  override populateToolbar(): void {\n    return;\n  }\n\n  private compareTransferSize(\n      a: DataGrid.SortableDataGrid.SortableDataGridNode<TimelineTreeView.GridNode>,\n      b: DataGrid.SortableDataGrid.SortableDataGridNode<TimelineTreeView.GridNode>): number {\n    const nodeA = a as TimelineTreeView.TreeGridNode;\n    const nodeB = b as TimelineTreeView.TreeGridNode;\n    const transferA = nodeA.profileNode.transferSize ?? 0;\n    const transferB = nodeB.profileNode.transferSize ?? 0;\n    return transferA - transferB;\n  }\n\n  override sortingChanged(): void {\n    const columnId = this.dataGrid.sortColumnId();\n    if (!columnId) {\n      return;\n    }\n\n    let sortFunction:\n        ((a: DataGrid.SortableDataGrid.SortableDataGridNode<TimelineTreeView.GridNode>,\n          b: DataGrid.SortableDataGrid.SortableDataGridNode<TimelineTreeView.GridNode>) => number)|null;\n    switch (columnId) {\n      case 'transfer-size':\n        sortFunction = this.compareTransferSize.bind(this);\n        break;\n      default:\n        sortFunction = super.getSortingFunction(columnId);\n        break;\n    }\n\n    if (sortFunction) {\n      this.dataGrid.sortNodes(sortFunction, !this.dataGrid.isSortOrderAscending());\n    }\n  }\n\n  displayInfoForGroupNode(node: Trace.Extras.TraceTree.Node): {\n    name: string,\n    color: string,\n    icon: (Element|undefined),\n  } {\n    const color = 'gray';\n    const unattributed = i18nString(UIStrings.unattributed);\n    const id = typeof node.id === 'symbol' ? undefined : node.id;\n    // This `undefined` is [unattributed]\n    // TODO(paulirish,aixba): Improve attribution to reduce amount of items in [unattributed].\n    const domainName = id ? this.entityMapper()?.entityForEvent(node.event)?.name || id : undefined;\n    return {name: domainName || unattributed, color, icon: undefined};\n  }\n\n  extractThirdPartySummary(node: Trace.Extras.TraceTree.Node): {transferSize: number} {\n    if (!this.#thirdPartySummaries) {\n      return {transferSize: 0};\n    }\n\n    const entity = this.#thirdPartySummaries.entityByEvent.get(node.event);\n    if (!entity) {\n      return {transferSize: 0};\n    }\n    const summary = this.#thirdPartySummaries.summaries.byEntity.get(entity);\n    if (!summary) {\n      return {transferSize: 0};\n    }\n    return {transferSize: summary.transferSize};\n  }\n\n  nodeIsFirstParty(node: Trace.Extras.TraceTree.Node): boolean {\n    const mapper = this.entityMapper();\n    if (!mapper) {\n      return false;\n    }\n    const firstParty = mapper.firstPartyEntity();\n    return firstParty === mapper.entityForEvent(node.event);\n  }\n\n  nodeIsExtension(node: Trace.Extras.TraceTree.Node): boolean {\n    const mapper = this.entityMapper();\n    if (!mapper) {\n      return false;\n    }\n    const entity = mapper.entityForEvent(node.event);\n    return Boolean(entity) && entity?.category === 'Chrome Extension';\n  }\n}\n\nexport class ThirdPartyTreeElement extends UI.Widget.WidgetElement<UI.Widget.Widget> {\n  #treeView?: ThirdPartyTreeViewWidget;\n\n  set treeView(treeView: ThirdPartyTreeViewWidget) {\n    this.#treeView = treeView;\n  }\n\n  constructor() {\n    super();\n    this.style.display = 'contents';\n  }\n\n  override createWidget(): UI.Widget.Widget {\n    const containerWidget = new UI.Widget.Widget(false, undefined, this);\n    containerWidget.contentElement.style.display = 'contents';\n    if (this.#treeView) {\n      this.#treeView.show(containerWidget.contentElement);\n    }\n    return containerWidget;\n  }\n}\n\ncustomElements.define('devtools-performance-third-party-tree-view', ThirdPartyTreeElement);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-performance-third-party-tree-view': ThirdPartyTreeElement;\n  }\n}\n"]}