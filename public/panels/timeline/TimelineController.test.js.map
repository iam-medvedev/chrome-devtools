{"version":3,"file":"TimelineController.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/TimelineController.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as LiveMetrics from '../../models/live-metrics/live-metrics.js';\nimport type * as Trace from '../../models/trace/trace.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n  dispatchEvent,\n  setMockConnectionResponseHandler\n} from '../../testing/MockConnection.js';\nimport {defaultTraceEvent} from '../../testing/TraceHelpers.js';\n\nimport * as Timeline from './timeline.js';\n\ndescribeWithMockConnection('TimelineController', () => {\n  it('calls the callback methods on the client in the expected order', async function() {\n    // The test needs at least 0.5s to have progress events be sent. Set a higher timeout to avoid flakiness.\n    if (this.timeout() !== 0) {\n      this.timeout(5_000);\n    }\n    const stubs = {\n      recordingProgress: sinon.stub(),\n      loadingStarted: sinon.stub(),\n      processingStarted: sinon.stub(),\n      loadingProgress: sinon.stub(),\n      loadingComplete: sinon.stub().callsFake(function(\n          _collectedEvents: Trace.Types.Events.Event[],\n      ) {}),\n    };\n    const client: Timeline.TimelineController.Client = {\n      recordingProgress(usage) {\n        stubs.recordingProgress(usage);\n      },\n      loadingStarted() {\n        stubs.loadingStarted();\n      },\n      processingStarted() {\n        stubs.processingStarted();\n      },\n      loadingProgress() {\n        stubs.loadingProgress();\n      },\n      async loadingComplete(collectedEvents) {\n        stubs.loadingComplete(collectedEvents);\n      },\n      loadingCompleteForTest() {},\n    };\n\n    LiveMetrics.LiveMetrics.instance({forceNew: true});\n\n    const primaryPage = createTarget();\n    if (!primaryPage) {\n      throw new Error('Could not find primary page');\n    }\n    const rootTarget = SDK.TargetManager.TargetManager.instance().rootTarget();\n    if (!rootTarget) {\n      throw new Error('Could not find root target');\n    }\n\n    const controller = new Timeline.TimelineController.TimelineController(rootTarget, primaryPage, client);\n    setMockConnectionResponseHandler('Target.setAutoAttach', () => ({}));\n    setMockConnectionResponseHandler('DOM.enable', () => ({}));\n    setMockConnectionResponseHandler('CSS.enable', () => ({}));\n    setMockConnectionResponseHandler('Debugger.enable', () => ({}));\n    setMockConnectionResponseHandler('Overlay.enable', () => ({}));\n    setMockConnectionResponseHandler('Overlay.setShowViewportSizeOnResize', () => ({}));\n    setMockConnectionResponseHandler('Animation.enable', () => ({}));\n    setMockConnectionResponseHandler('DOM.disable', () => ({}));\n    setMockConnectionResponseHandler('CSS.disable', () => ({}));\n    setMockConnectionResponseHandler('Debugger.disable', () => ({}));\n    setMockConnectionResponseHandler('Debugger.setAsyncCallStackDepth', () => ({}));\n    setMockConnectionResponseHandler('Overlay.disable', () => ({}));\n    setMockConnectionResponseHandler('Animation.disable', () => ({}));\n    setMockConnectionResponseHandler('Tracing.start', () => ({}));\n    setMockConnectionResponseHandler('Runtime.evaluate', () => ({}));\n    setMockConnectionResponseHandler('Runtime.addBinding', () => ({}));\n    setMockConnectionResponseHandler('Page.addScriptToEvaluateOnNewDocument', () => ({}));\n    setMockConnectionResponseHandler('Tracing.end', () => {\n      dispatchEvent(rootTarget, 'Tracing.tracingComplete', {dataLossOccurred: false});\n      return {};\n    });\n    await controller.startRecording({});\n    dispatchEvent(rootTarget, 'Tracing.dataCollected', {value: [defaultTraceEvent]});\n    dispatchEvent(rootTarget, 'Tracing.bufferUsage', {percentFull: .5});\n    await controller.stopRecording();\n    sinon.assert.callCount(stubs.processingStarted, 1);\n    sinon.assert.callCount(stubs.recordingProgress, 1);\n    sinon.assert.callCount(stubs.loadingStarted, 1);\n    sinon.assert.callCount(stubs.loadingProgress, 1);\n    sinon.assert.callCount(stubs.loadingComplete, 1);\n    const [collectedEvents] = stubs.loadingComplete.getCall(0).args as [Trace.Types.Events.Event[]];\n    // Ensure we collected events during tracing.\n    assert.lengthOf(collectedEvents, 1);\n  });\n});\n"]}