{"version":3,"file":"Initiators.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/Initiators.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport {assertNotNullOrUndefined} from '../../core/platform/platform.js';\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\nimport * as Timeline from './timeline.js';\n\ndescribe('Initiators', () => {\n  it('returns the pair of initiators', async function() {\n    const traceData = await TraceLoader.traceEngine(this, 'set-timeout-long-task.json.gz');\n\n    const timerFireEvent = Array.from(traceData.Initiators.eventToInitiator.keys())\n                               .find(TraceEngine.Types.TraceEvents.isTraceEventTimerFire);\n    assertNotNullOrUndefined(timerFireEvent);\n    const timerInstallEvent = traceData.Initiators.eventToInitiator.get(timerFireEvent);\n    assertNotNullOrUndefined(timerInstallEvent);\n    const initiatorPairs = Timeline.Initiators.eventInitiatorPairsToDraw(traceData, timerFireEvent, [], []);\n\n    assert.deepEqual(initiatorPairs, [{\n                       event: timerFireEvent,\n                       initiator: timerInstallEvent,\n                     }]);\n  });\n\n  it('can walk up the tree to find the first parent with an initiator', async function() {\n    const traceData = await TraceLoader.traceEngine(this, 'set-timeout-long-task.json.gz');\n\n    // Find any of the fibonnaci() calls; they have a parent\n    // event (TimerFire) that has an initiator.\n    const fibonacciCall = traceData.Renderer.allTraceEntries.find(entry => {\n      return TraceEngine.Types.TraceEvents.isProfileCall(entry) && entry.callFrame.functionName === 'fibonacci';\n    });\n    assertNotNullOrUndefined(fibonacciCall);\n\n    const timerFireEvent = Array.from(traceData.Initiators.eventToInitiator.keys())\n                               .find(TraceEngine.Types.TraceEvents.isTraceEventTimerFire);\n    assertNotNullOrUndefined(timerFireEvent);\n    const timerInstallEvent = traceData.Initiators.eventToInitiator.get(timerFireEvent);\n    assertNotNullOrUndefined(timerInstallEvent);\n\n    // Find the initator pairs but starting at the fibonacci()\n    // call.\n    const initiatorPairs = Timeline.Initiators.eventInitiatorPairsToDraw(traceData, fibonacciCall, [], []);\n\n    assert.deepEqual(initiatorPairs, [{\n                       event: timerFireEvent,\n                       initiator: timerInstallEvent,\n                     }]);\n  });\n\n  it('will walk back through the initiators to find the entire chain', async function() {\n    const traceData = await TraceLoader.traceEngine(this, 'nested-initiators.json.gz');\n\n    // Find any of the fibonnaci() calls; they have a parent\n    // event (TimerFire) that has an initiator.\n    const fibonacciCall = traceData.Renderer.allTraceEntries.find(entry => {\n      return TraceEngine.Types.TraceEvents.isProfileCall(entry) && entry.callFrame.functionName === 'fibonacci';\n    });\n    assertNotNullOrUndefined(fibonacciCall);\n\n    // Find the initator pairs but starting at the fibonacci()\n    // call. We expect to find two pairs here:\n    // 1. fibonacci() ===> TimerFire caused by TimerInstall\n    // 2. The TimerInstall from (1), caused by a prior TimerInstall.\n    const initiatorPairs = Timeline.Initiators.eventInitiatorPairsToDraw(traceData, fibonacciCall, [], []);\n\n    assert.lengthOf(initiatorPairs, 2);\n    for (const pair of initiatorPairs) {\n      // Ensure each pair is a TimerInstall>TimerFire pair.\n      assert.strictEqual(pair.event.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerFire);\n      assert.strictEqual(pair.initiator.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerInstall);\n    }\n  });\n\n  it('will walk forward to find the events initiated by the selected entry', async function() {\n    const traceData = await TraceLoader.traceEngine(this, 'nested-initiators.json.gz');\n\n    // Find any of the InstallTimer calls; they initiate other events.\n    const timerInstall = traceData.Renderer.allTraceEntries.find(entry => {\n      return entry.name === TraceEngine.Types.TraceEvents.KnownEventName.TimerInstall;\n    });\n    assertNotNullOrUndefined(timerInstall);\n\n    // Find the initator pairs starting at the TimerInstall\n    // call. We expect to find one pair here:\n    // TimerFire that was initiated by the entry we found - TimerInstall\n\n    const initiatorPairs = Timeline.Initiators.eventInitiatorPairsToDraw(traceData, timerInstall, [], []);\n\n    assert.lengthOf(initiatorPairs, 1);\n    for (const pair of initiatorPairs) {\n      // Ensure the pair is a TimerInstall>TimerFire pair.\n      assert.strictEqual(pair.event.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerFire);\n      assert.strictEqual(pair.initiator.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerInstall);\n    }\n  });\n\n  it('will return the closest modified ancestor as an initiator in a pair if the initiator itself is hidden',\n     async function() {\n       const traceData = await TraceLoader.traceEngine(this, 'nested-initiators.json.gz');\n\n       // Find any of the InstallTimer calls; they initiate other events.\n       const timerInstall = traceData.Renderer.allTraceEntries.find(entry => {\n         return entry.name === TraceEngine.Types.TraceEvents.KnownEventName.TimerInstall;\n       });\n       assertNotNullOrUndefined(timerInstall);\n       // Get the parent of InstallTimer to add to the modified events array.\n       // When we add TimerInstall to hidden entries list, it will be the closest modified parent and the initiator should point to it.\n       const timerInstallParent = traceData.Renderer.entryToNode.get(timerInstall)?.parent;\n       assertNotNullOrUndefined(timerInstallParent);\n\n       // Find the initator pairs starting at the TimerInstall\n       // call. We expect to find one pair here:\n       // TimerFire that was initiated by the entry we found - Parent of TimerInstall because TimerInstall is hidden\n       const initiatorPairs = Timeline.Initiators.eventInitiatorPairsToDraw(\n           traceData, timerInstall, [timerInstall], [timerInstallParent?.entry]);\n\n       assert.lengthOf(initiatorPairs, 1);\n       // Ensure the pair is a TimerInstall>TimerFire parent pair.\n       for (const pair of initiatorPairs) {\n         assert.strictEqual(pair.event.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerFire);\n         assert.strictEqual(pair.initiator, timerInstallParent.entry);\n         // Ensure the modified entry is marked as hidden\n         assert.strictEqual(pair.isInitiatorHidden, true);\n       }\n\n     });\n\n  it('will return the closest modified ancestor as an initiated event in a pair if the event itself is hidden',\n     async function() {\n       const traceData = await TraceLoader.traceEngine(this, 'nested-initiators.json.gz');\n\n       // Find any of the fibonnaci() calls; they have a parent\n       // event (TimerFire) that has an initiator.\n       const fibonacciCall = traceData.Renderer.allTraceEntries.find(entry => {\n         return TraceEngine.Types.TraceEvents.isProfileCall(entry) && entry.callFrame.functionName === 'fibonacci';\n       });\n       assertNotNullOrUndefined(fibonacciCall);\n\n       // Find the initator pairs but starting at the fibonacci()\n       // call. We expect to find two pairs here:\n       // 1. fibonacci() ===> TimerFire caused by TimerInstall\n       // 2. The TimerInstall from (1), caused by a prior TimerInstall.\n       let initiatorPairs = Timeline.Initiators.eventInitiatorPairsToDraw(traceData, fibonacciCall, [], []);\n\n       assert.lengthOf(initiatorPairs, 2);\n       // Save the parents of initiated events and the events themselves to get initiators again with those as modified and hidden\n       const timerFireParents: TraceEngine.Types.TraceEvents.TraceEventData[] = [];\n       const initiatedEvents: TraceEngine.Types.TraceEvents.TraceEventData[] = [];\n\n       for (const pair of initiatorPairs) {\n         // Ensure each pair is a TimerInstall>TimerFire pair.\n         assert.strictEqual(pair.event.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerFire);\n         assert.strictEqual(pair.initiator.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerInstall);\n         const parentEvent = traceData.Renderer.entryToNode.get(pair.event)?.parent?.entry;\n         if (parentEvent) {\n           timerFireParents.push(parentEvent);\n           initiatedEvents.push(pair.event);\n         }\n       }\n\n       // Get initiator pair again, now with the previously initiated events hidden and parents marked as modified\n       initiatorPairs =\n           Timeline.Initiators.eventInitiatorPairsToDraw(traceData, fibonacciCall, initiatedEvents, timerFireParents);\n       // The length should not change, just the inititated events.\n       assert.lengthOf(initiatorPairs, 2);\n       for (let i = 0; i < initiatorPairs.length; i++) {\n         const pair = initiatorPairs[i];\n         // Ensure each pair is a TimerInstall>TimerFire parent pair.\n         assert.strictEqual(pair.event, timerFireParents[i]);\n         assert.strictEqual(pair.initiator.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerInstall);\n         // Ensure the modified entry is marked as hidden\n         assert.strictEqual(pair.isEntryHidden, true);\n       }\n     });\n});\n"]}