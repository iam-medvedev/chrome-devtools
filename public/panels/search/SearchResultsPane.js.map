{"version":3,"file":"SearchResultsPane.js","sourceRoot":"","sources":["../../../../../../front_end/panels/search/SearchResultsPane.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {html, render} from '../../ui/lit/lit.js';\n\nimport searchResultsPaneStyles from './searchResultsPane.css.js';\nimport type {SearchResult} from './SearchScope.js';\n\nconst UIStrings = {\n  /**\n   * @description Accessibility label for number of matches in each file in search results pane\n   * @example {2} PH1\n   */\n  matchesCountS: 'Matches Count {PH1}',\n  /**\n   * @description Search result label for results in the Search tool\n   * @example {2} PH1\n   */\n  lineS: 'Line {PH1}',\n  /**\n   * @description Text in Search Results Pane of the Search tab\n   * @example {2} PH1\n   */\n  showDMore: 'Show {PH1} more',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/search/SearchResultsPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class SearchResultsPane extends UI.Widget.VBox {\n  private readonly searchConfig: Workspace.SearchConfig.SearchConfig;\n  private readonly searchResults: SearchResult[];\n  private readonly treeElements = new Map<UI.TreeOutline.TreeElement, SearchResult>();\n  private readonly initializedTreeElements = new WeakSet<UI.TreeOutline.TreeElement>();\n  private treeOutline: UI.TreeOutline.TreeOutlineInShadow;\n  private matchesExpandedCount: number;\n\n  constructor(searchConfig: Workspace.SearchConfig.SearchConfig) {\n    super({useShadowDom: true});\n    this.searchConfig = searchConfig;\n\n    this.searchResults = [];\n    this.treeOutline = new UI.TreeOutline.TreeOutlineInShadow();\n    this.treeOutline.registerRequiredCSS(searchResultsPaneStyles);\n    this.treeOutline.setHideOverflow(true);\n    this.treeOutline.addEventListener(\n        UI.TreeOutline.Events.ElementExpanded,\n        (event: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>) => {\n          this.updateMatchesUI(event.data);\n        });\n\n    this.contentElement.appendChild(this.treeOutline.element);\n\n    this.matchesExpandedCount = 0;\n  }\n\n  addSearchResult(searchResult: SearchResult): void {\n    this.searchResults.push(searchResult);\n    this.addTreeElement(searchResult);\n  }\n\n  showAllMatches(): void {\n    for (const [treeElement, searchResult] of this.treeElements.entries()) {\n      treeElement.expand();\n      treeElement.removeChildren();\n      this.appendSearchMatches(treeElement, 0, searchResult.matchesCount());\n    }\n  }\n\n  collapseAllResults(): void {\n    for (const treeElement of this.treeElements.keys()) {\n      treeElement.collapse();\n    }\n  }\n\n  private addTreeElement(searchResult: SearchResult): void {\n    const treeElement = new UI.TreeOutline.TreeElement('', true);\n    treeElement.toggleOnClick = true;\n    this.treeElements.set(treeElement, searchResult);\n    this.treeOutline.appendChild(treeElement);\n    if (!this.treeOutline.selectedTreeElement) {\n      treeElement.select(/* omitFocus */ true, /* selectedByUser */ true);\n    }\n    // Expand until at least a certain number of matches is expanded.\n    if (this.matchesExpandedCount < matchesExpandedByDefault) {\n      treeElement.expand();\n    }\n    this.matchesExpandedCount += searchResult.matchesCount();\n    treeElement.listItemElement.classList.add('search-result');\n    // clang-format off\n    render(html`\n      <span class=\"search-result-file-name\">${searchResult.label()}\n        <span class=\"search-result-dash\">${'\\u2014'}</span>\n        <span class=\"search-result-qualifier\">${searchResult.description()}</span>\n      </span>\n      <span class=\"search-result-matches-count\"\n          aria-label=${i18nString(UIStrings.matchesCountS, {PH1: searchResult.matchesCount()})}>\n          ${searchResult.matchesCount()}\n      </span>`,\n    treeElement.listItemElement);\n    // clang-format on\n    treeElement.tooltip = searchResult.description();\n  }\n\n  private updateMatchesUI(element: UI.TreeOutline.TreeElement): void {\n    const searchResult = this.treeElements.get(element);\n    if (!searchResult || this.initializedTreeElements.has(element)) {\n      return;\n    }\n    element.removeChildren();\n    const toIndex = Math.min(searchResult.matchesCount(), matchesShownAtOnce);\n    if (toIndex < searchResult.matchesCount()) {\n      this.appendSearchMatches(element, 0, toIndex - 1);\n      this.appendShowMoreMatchesElement(element, toIndex - 1);\n    } else {\n      this.appendSearchMatches(element, 0, toIndex);\n    }\n    this.initializedTreeElements.add(element);\n  }\n\n  private appendSearchMatches(element: UI.TreeOutline.TreeElement, fromIndex: number, toIndex: number): void {\n    const searchResult = this.treeElements.get(element);\n    if (!searchResult) {\n      return;\n    }\n    const queries = this.searchConfig.queries();\n    const regexes = [];\n    for (let i = 0; i < queries.length; ++i) {\n      regexes.push(Platform.StringUtilities.createSearchRegex(\n          queries[i], !this.searchConfig.ignoreCase(), this.searchConfig.isRegex()));\n    }\n\n    for (let i = fromIndex; i < toIndex; ++i) {\n      let lineContent = searchResult.matchLineContent(i);\n      let matchRanges: TextUtils.TextRange.SourceRange[] = [];\n      // Searching in scripts and network response bodies produces one result entry per match. We can skip re-doing the\n      // search since we have the exact match range.\n      // For matches found in headers or the request URL we re-do the search to find all match ranges.\n      const column = searchResult.matchColumn(i);\n      const matchLength = searchResult.matchLength(i);\n      if (column !== undefined && matchLength !== undefined) {\n        const {matchRange, lineSegment} =\n            lineSegmentForMatch(lineContent, new TextUtils.TextRange.SourceRange(column, matchLength));\n        lineContent = lineSegment;\n        matchRanges = [matchRange];\n      } else {\n        lineContent = lineContent.trim();\n        for (let j = 0; j < regexes.length; ++j) {\n          matchRanges = matchRanges.concat(this.regexMatchRanges(lineContent, regexes[j]));\n        }\n        ({lineSegment: lineContent, matchRanges} = lineSegmentForMultipleMatches(lineContent, matchRanges));\n      }\n\n      const resultLabel = searchResult.matchLabel(i);\n\n      const searchMatchElement = new UI.TreeOutline.TreeElement();\n      element.appendChild(searchMatchElement);\n      // clang-format off\n      render(html`\n        <button class=\"devtools-link text-button link-style search-match-link\"\n                jslog=\"Link; context: search-match; track: click\" role=\"link\" tabindex=\"0\"\n                @click=${() => void Common.Revealer.reveal(searchResult.matchRevealable(i))}>\n          <span class=\"search-match-line-number\"\n              aria-label=${typeof resultLabel === 'number' && !isNaN(resultLabel)\n                             ?  i18nString(UIStrings.lineS, {PH1: resultLabel}) : resultLabel}>\n            ${resultLabel}\n          </span>\n          <span class=\"search-match-content\" aria-label=\"${lineContent} line\">\n            ${lineContent}\n          </span>\n        </button>`,\n        searchMatchElement.listItemElement);\n      // clang-format on\n      const contentSpan = searchMatchElement.listItemElement.querySelector('.search-match-content') as HTMLElement;\n      UI.UIUtils.highlightRangesWithStyleClass(contentSpan, matchRanges, 'highlighted-search-result');\n      searchMatchElement.listItemElement.className = 'search-match';\n      searchMatchElement.listItemElement.addEventListener('keydown', event => {\n        if (event.key === 'Enter') {\n          event.consume(true);\n          void Common.Revealer.reveal(searchResult.matchRevealable(i));\n        }\n      });\n      searchMatchElement.tooltip = lineContent;\n    }\n  }\n\n  private appendShowMoreMatchesElement(element: UI.TreeOutline.TreeElement, startMatchIndex: number): void {\n    const searchResult = this.treeElements.get(element);\n    if (!searchResult) {\n      return;\n    }\n    const matchesLeftCount = searchResult.matchesCount() - startMatchIndex;\n    const showMoreMatchesText = i18nString(UIStrings.showDMore, {PH1: matchesLeftCount});\n    const showMoreMatchesTreeElement = new UI.TreeOutline.TreeElement(showMoreMatchesText);\n    element.appendChild(showMoreMatchesTreeElement);\n    showMoreMatchesTreeElement.listItemElement.classList.add('show-more-matches');\n    showMoreMatchesTreeElement.onselect =\n        this.showMoreMatchesElementSelected.bind(this, element, showMoreMatchesTreeElement, startMatchIndex);\n  }\n\n  private regexMatchRanges(lineContent: string, regex: RegExp): TextUtils.TextRange.SourceRange[] {\n    regex.lastIndex = 0;\n    let match;\n    const matchRanges = [];\n    while ((regex.lastIndex < lineContent.length) && (match = regex.exec(lineContent))) {\n      matchRanges.push(new TextUtils.TextRange.SourceRange(match.index, match[0].length));\n    }\n\n    return matchRanges;\n  }\n\n  private showMoreMatchesElementSelected(\n      parentElement: UI.TreeOutline.TreeElement, showMoreMatchesTreeElement: UI.TreeOutline.TreeElement,\n      startMatchIndex: number): boolean {\n    const searchResult = this.treeElements.get(parentElement);\n    if (!searchResult) {\n      return false;\n    }\n    parentElement.removeChild(showMoreMatchesTreeElement);\n    this.appendSearchMatches(parentElement, startMatchIndex, searchResult.matchesCount());\n    return false;\n  }\n}\n\nexport const matchesExpandedByDefault = 200;\nexport const matchesShownAtOnce = 20;\n\nconst DEFAULT_OPTS = {\n  prefixLength: 25,\n  maxLength: 1000,\n};\n\n/**\n * Takes a whole line and calculates the substring we want to actually display in the UI.\n * Also returns a translated {matchRange} (the parameter is relative to {lineContent} but the\n * caller needs it relative to {lineSegment}).\n *\n * {lineContent} is modified in the following way:\n *\n *   * Whitespace is trimmed from the beginning (unless the match includes it).\n *   * We only leave {options.prefixLength} characters before the match (and add an ellipsis in\n *     case we removed anything)\n *   * Truncate the remainder to {options.maxLength} characters.\n */\nexport function lineSegmentForMatch(\n    lineContent: string, range: TextUtils.TextRange.SourceRange,\n    optionsArg: Partial<typeof DEFAULT_OPTS> =\n        DEFAULT_OPTS): {lineSegment: string, matchRange: TextUtils.TextRange.SourceRange} {\n  const options = {...DEFAULT_OPTS, ...optionsArg};\n\n  // Remove the whitespace at the beginning, but stop where the match starts.\n  const attemptedTrimmedLine = lineContent.trimStart();\n  const potentiallyRemovedWhitespaceLength = lineContent.length - attemptedTrimmedLine.length;\n  const actuallyRemovedWhitespaceLength = Math.min(range.offset, potentiallyRemovedWhitespaceLength);\n\n  // Apply {options.prefixLength} and {options.maxLength}.\n  const lineSegmentBegin = Math.max(actuallyRemovedWhitespaceLength, range.offset - options.prefixLength);\n  const lineSegmentEnd = Math.min(lineContent.length, lineSegmentBegin + options.maxLength);\n  const lineSegmentPrefix = lineSegmentBegin > actuallyRemovedWhitespaceLength ? '…' : '';\n\n  // Build the resulting line segment and match range.\n  const lineSegment = lineSegmentPrefix + lineContent.substring(lineSegmentBegin, lineSegmentEnd);\n  const rangeOffset = range.offset - lineSegmentBegin + lineSegmentPrefix.length;\n  const rangeLength = Math.min(range.length, lineSegment.length - rangeOffset);\n  const matchRange = new TextUtils.TextRange.SourceRange(rangeOffset, rangeLength);\n\n  return {lineSegment, matchRange};\n}\n\n/**\n * Takes a line and multiple match ranges and trims/cuts the line accordingly.\n * The match ranges are then adjusted to reflect the transformation.\n *\n * Ideally prefer `lineSegmentForMatch`, it can center the line on the match\n * whereas this method risks cutting matches out of the string.\n */\nfunction lineSegmentForMultipleMatches(lineContent: string, ranges: TextUtils.TextRange.SourceRange[]):\n    {lineSegment: string, matchRanges: TextUtils.TextRange.SourceRange[]} {\n  let trimBy = 0;\n  let matchRanges = ranges;\n  if (matchRanges.length > 0 && matchRanges[0].offset > 20) {\n    trimBy = 15;\n  }\n  let lineSegment = lineContent.substring(trimBy, 1000 + trimBy);\n  if (trimBy) {\n    matchRanges =\n        matchRanges.map(range => new TextUtils.TextRange.SourceRange(range.offset - trimBy + 1, range.length));\n    lineSegment = '…' + lineSegment;\n  }\n  return {lineSegment, matchRanges};\n}\n"]}