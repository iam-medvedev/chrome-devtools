{"version":3,"file":"SearchResultsPane.js","sourceRoot":"","sources":["../../../../../../front_end/panels/search/SearchResultsPane.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {html, render, type TemplateResult} from '../../ui/lit/lit.js';\n\nimport searchResultsPaneStyles from './searchResultsPane.css.js';\nimport type {SearchResult} from './SearchScope.js';\n\nconst UIStrings = {\n  /**\n   * @description Accessibility label for number of matches in each file in search results pane\n   * @example {2} PH1\n   */\n  matchesCountS: 'Matches Count {PH1}',\n  /**\n   * @description Search result label for results in the Search tool\n   * @example {2} PH1\n   */\n  lineS: 'Line {PH1}',\n  /**\n   * @description Text in Search Results Pane of the Search tab\n   * @example {2} PH1\n   */\n  showDMore: 'Show {PH1} more',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/search/SearchResultsPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface SearchMatch {\n  lineContent: string;\n  matchRanges: TextUtils.TextRange.SourceRange[];\n  resultLabel: string|number;\n}\n\ninterface ViewInput {\n  results: SearchResult[];\n  matches: WeakMap<SearchResult, SearchMatch[]>;\n  expandedResults: WeakSet<SearchResult>;\n  onSelectMatch: (searchResult: SearchResult, matchIndex: number) => void;\n  onExpandSearchResult: (searchResult: SearchResult) => void;\n  onShowMoreMatches: (searchResult: SearchResult) => void;\n}\n\nexport type View = (input: ViewInput, output: unknown, target: HTMLElement) => void;\n\nexport const DEFAULT_VIEW: View = (input, _output, target) => {\n  const {results, matches, expandedResults, onSelectMatch, onExpandSearchResult, onShowMoreMatches} = input;\n\n  const onExpand = ({detail: {expanded, target}}: UI.TreeOutline.TreeViewElement.ExpandEvent): void => {\n    const searchResultIndex = Number(target.dataset.searchResultIndex);\n    const searchResult = results[searchResultIndex];\n    if (expanded) {\n      expandedResults.add(searchResult);\n      onExpandSearchResult(searchResult);\n    } else {\n      expandedResults.delete(searchResult);\n    }\n  };\n\n  // clang-format off\n  render(html`\n    <devtools-tree hide-overflow @expand=${onExpand} .template=${html`\n      <ul role=\"tree\">\n        ${results.map((searchResult, i) => html`\n          <li role=\"treeitem\" data-search-result-index=${i} class=\"search-result\">\n            <style>${searchResultsPaneStyles}</style>\n            ${renderSearchResult(searchResult)}\n            <ul role=\"group\" ?hidden=${!expandedResults.has(searchResult)}>\n              ${renderSearchMatches(searchResult, matches, onSelectMatch, onShowMoreMatches)}\n            </ul>\n          </li>`)}\n      </ul>\n    `}></devtools-tree>`,\n    target,\n  );\n  // clang-format on\n};\n\nconst renderSearchResult = (searchResult: SearchResult): TemplateResult => {\n  // clang-format off\n  return html`\n    <span class=\"search-result-file-name\">${searchResult.label()}\n      <span class=\"search-result-dash\">${'\\u2014'}</span>\n      <span class=\"search-result-qualifier\">${searchResult.description()}</span>\n    </span>\n    <span class=\"search-result-matches-count\"\n        aria-label=${i18nString(UIStrings.matchesCountS, {PH1: searchResult.matchesCount()})}>\n        ${searchResult.matchesCount()}\n    </span>`;\n  // clang-format on\n};\n\nconst renderSearchMatches =\n    (searchResult: SearchResult, matches: WeakMap<SearchResult, SearchMatch[]>,\n     onSelectMatch: (searchResult: SearchResult, matchIndex: number) => void,\n     onShowMoreMatches: (searchResult: SearchResult) => void): TemplateResult => {\n      const visibleMatches = matches.get(searchResult) ?? [];\n      const matchesLeftCount = searchResult.matchesCount() - visibleMatches.length;\n      // clang-format off\n  return html`\n      ${visibleMatches.map(({lineContent, matchRanges, resultLabel}, i) => html`\n        <li role=\"treeitem\" class=\"search-match\" @click=${() => onSelectMatch(searchResult, i)}\n          ${UI.TreeOutline.TreeSearch.highlight(matchRanges.map(range =>\n            ({offset: range.offset + `${resultLabel}`.length, length: range.length})), undefined)}\n          @keydown=${(event: KeyboardEvent) => {\n            if (event.key === 'Enter') {\n              onSelectMatch(searchResult, i);\n            }\n          }}\n        >\n          <button class=\"devtools-link text-button link-style search-match-link\"\n                  jslog=\"Link; context: search-match; track: click\" role=\"link\" tabindex=\"0\"\n                  @click=${() => void Common.Revealer.reveal(searchResult.matchRevealable(i))}>\n            <span class=\"search-match-line-number\"\n                aria-label=${typeof resultLabel === 'number' && !isNaN(resultLabel)\n                                ? i18nString(UIStrings.lineS, {PH1: resultLabel}) : resultLabel}>\n              ${resultLabel}\n            </span>\n            <span class=\"search-match-content\" aria-label=\"${lineContent} line\">\n              ${lineContent}\n            </span>\n          </button>\n        </li>`)}\n      ${\n      matchesLeftCount > 0 ? html`\n        <li role=\"treeitem\" class=\"show-more-matches\" @click=${() => onShowMoreMatches(searchResult)}>\n          ${i18nString(UIStrings.showDMore, { PH1: matchesLeftCount })}\n        </li>` : ''}`;\n      // clang-format on\n    };\n\nexport class SearchResultsPane extends UI.Widget.VBox {\n  #searchConfig: Workspace.SearchConfig.SearchConfig|null = null;\n  #searchResults: SearchResult[] = [];\n  #resultsUpdated = false;\n  #expandedResults = new WeakSet<SearchResult>();\n  readonly #searchMatches = new WeakMap<SearchResult, SearchMatch[]>();\n  #view: View;\n\n  constructor(element: HTMLElement|undefined, view: View = DEFAULT_VIEW) {\n    super(element, {useShadowDom: true});\n    this.#view = view;\n  }\n\n  get searchResults(): SearchResult[] {\n    return this.#searchResults;\n  }\n\n  set searchResults(searchResults: SearchResult[]) {\n    if (this.#searchResults === searchResults) {\n      return;\n    }\n    if (this.#searchResults.length !== searchResults.length) {\n      this.#resultsUpdated = true;\n    } else if (this.#searchResults.length === searchResults.length) {\n      for (let i = 0; i < this.#searchResults.length; ++i) {\n        if (this.#searchResults[i] === searchResults[i]) {\n          continue;\n        }\n        this.#resultsUpdated = true;\n        break;\n      }\n    }\n    if (!this.#resultsUpdated) {\n      return;\n    }\n    this.#searchResults = searchResults;\n    this.requestUpdate();\n  }\n\n  get searchConfig(): Workspace.SearchConfig.SearchConfig|null {\n    return this.#searchConfig;\n  }\n\n  set searchConfig(searchConfig: Workspace.SearchConfig.SearchConfig|null) {\n    this.#searchConfig = searchConfig;\n    this.requestUpdate();\n  }\n\n  showAllMatches(): void {\n    for (const searchResult of this.#searchResults) {\n      const startMatchIndex = this.#searchMatches.get(searchResult)?.length ?? 0;\n      this.#appendSearchMatches(searchResult, startMatchIndex, searchResult.matchesCount());\n      this.#expandedResults.add(searchResult);\n    }\n    this.requestUpdate();\n  }\n\n  collapseAllResults(): void {\n    this.#expandedResults = new WeakSet<SearchResult>();\n    this.requestUpdate();\n  }\n\n  #onExpandSearchResult(searchResult: SearchResult): void {\n    const toIndex = Math.min(searchResult.matchesCount(), matchesShownAtOnce);\n    this.#appendSearchMatches(searchResult, 0, toIndex);\n    this.requestUpdate();\n  }\n\n  #appendSearchMatches(searchResult: SearchResult, fromIndex: number, toIndex: number): void {\n    if (!this.#searchConfig) {\n      return;\n    }\n    const queries = this.#searchConfig.queries();\n    const regexes = [];\n    for (let i = 0; i < queries.length; ++i) {\n      regexes.push(Platform.StringUtilities.createSearchRegex(\n          queries[i], !this.#searchConfig.ignoreCase(), this.#searchConfig.isRegex()));\n    }\n\n    const searchMatches = this.#searchMatches.get(searchResult) ?? [];\n    this.#searchMatches.set(searchResult, searchMatches);\n    if (searchMatches.length >= toIndex) {\n      return;\n    }\n\n    for (let i = fromIndex; i < toIndex; ++i) {\n      let lineContent = searchResult.matchLineContent(i);\n      let matchRanges: TextUtils.TextRange.SourceRange[] = [];\n      // Searching in scripts and network response bodies produces one result entry per match. We can skip re-doing the\n      // search since we have the exact match range.\n      // For matches found in headers or the request URL we re-do the search to find all match ranges.\n      const column = searchResult.matchColumn(i);\n      const matchLength = searchResult.matchLength(i);\n      if (column !== undefined && matchLength !== undefined) {\n        const {matchRange, lineSegment} =\n            lineSegmentForMatch(lineContent, new TextUtils.TextRange.SourceRange(column, matchLength));\n        lineContent = lineSegment;\n        matchRanges = [matchRange];\n      } else {\n        lineContent = lineContent.trim();\n        for (let j = 0; j < regexes.length; ++j) {\n          matchRanges = matchRanges.concat(this.#regexMatchRanges(lineContent, regexes[j]));\n        }\n        ({lineSegment: lineContent, matchRanges} = lineSegmentForMultipleMatches(lineContent, matchRanges));\n      }\n\n      const resultLabel = searchResult.matchLabel(i);\n      searchMatches.push({lineContent, matchRanges, resultLabel});\n    }\n  }\n\n  override performUpdate(): void {\n    if (this.#resultsUpdated) {\n      let matchesExpandedCount = 0;\n      for (const searchResult of this.#searchResults) {\n        if (this.#expandedResults.has(searchResult)) {\n          matchesExpandedCount += this.#searchMatches.get(searchResult)?.length ?? 0;\n        }\n      }\n      for (const searchResult of this.#searchResults) {\n        if (matchesExpandedCount < matchesExpandedByDefault && !this.#expandedResults.has(searchResult)) {\n          this.#expandedResults.add(searchResult);\n          this.#onExpandSearchResult(searchResult);\n          matchesExpandedCount += this.#searchMatches.get(searchResult)?.length ?? 0;\n        }\n      }\n      this.#resultsUpdated = false;\n    }\n    this.#view(\n        {\n          results: this.#searchResults,\n          matches: this.#searchMatches,\n          expandedResults: this.#expandedResults,\n          onSelectMatch: (searchResult, matchIndex) => {\n            void Common.Revealer.reveal(searchResult.matchRevealable(matchIndex));\n          },\n          onExpandSearchResult: this.#onExpandSearchResult.bind(this),\n          onShowMoreMatches: this.#onShowMoreMatches.bind(this),\n        },\n        {}, this.contentElement);\n  }\n\n  #regexMatchRanges(lineContent: string, regex: RegExp): TextUtils.TextRange.SourceRange[] {\n    regex.lastIndex = 0;\n    let match;\n    const matchRanges = [];\n    while ((regex.lastIndex < lineContent.length) && (match = regex.exec(lineContent))) {\n      matchRanges.push(new TextUtils.TextRange.SourceRange(match.index, match[0].length));\n    }\n\n    return matchRanges;\n  }\n\n  #onShowMoreMatches(searchResult: SearchResult): void {\n    const startMatchIndex = this.#searchMatches.get(searchResult)?.length ?? 0;\n    this.#appendSearchMatches(searchResult, startMatchIndex, searchResult.matchesCount());\n    this.requestUpdate();\n  }\n}\n\nexport const matchesExpandedByDefault = 200;\nexport const matchesShownAtOnce = 20;\n\nconst DEFAULT_OPTS = {\n  prefixLength: 25,\n  maxLength: 1000,\n};\n\n/**\n * Takes a whole line and calculates the substring we want to actually display in the UI.\n * Also returns a translated {matchRange} (the parameter is relative to {lineContent} but the\n * caller needs it relative to {lineSegment}).\n *\n * {lineContent} is modified in the following way:\n *\n *   * Whitespace is trimmed from the beginning (unless the match includes it).\n *   * We only leave {options.prefixLength} characters before the match (and add an ellipsis in\n *     case we removed anything)\n *   * Truncate the remainder to {options.maxLength} characters.\n */\nexport function lineSegmentForMatch(\n    lineContent: string, range: TextUtils.TextRange.SourceRange,\n    optionsArg: Partial<typeof DEFAULT_OPTS> =\n        DEFAULT_OPTS): {lineSegment: string, matchRange: TextUtils.TextRange.SourceRange} {\n  const options = {...DEFAULT_OPTS, ...optionsArg};\n\n  // Remove the whitespace at the beginning, but stop where the match starts.\n  const attemptedTrimmedLine = lineContent.trimStart();\n  const potentiallyRemovedWhitespaceLength = lineContent.length - attemptedTrimmedLine.length;\n  const actuallyRemovedWhitespaceLength = Math.min(range.offset, potentiallyRemovedWhitespaceLength);\n\n  // Apply {options.prefixLength} and {options.maxLength}.\n  const lineSegmentBegin = Math.max(actuallyRemovedWhitespaceLength, range.offset - options.prefixLength);\n  const lineSegmentEnd = Math.min(lineContent.length, lineSegmentBegin + options.maxLength);\n  const lineSegmentPrefix = lineSegmentBegin > actuallyRemovedWhitespaceLength ? '…' : '';\n\n  // Build the resulting line segment and match range.\n  const lineSegment = lineSegmentPrefix + lineContent.substring(lineSegmentBegin, lineSegmentEnd);\n  const rangeOffset = range.offset - lineSegmentBegin + lineSegmentPrefix.length;\n  const rangeLength = Math.min(range.length, lineSegment.length - rangeOffset);\n  const matchRange = new TextUtils.TextRange.SourceRange(rangeOffset, rangeLength);\n\n  return {lineSegment, matchRange};\n}\n\n/**\n * Takes a line and multiple match ranges and trims/cuts the line accordingly.\n * The match ranges are then adjusted to reflect the transformation.\n *\n * Ideally prefer `lineSegmentForMatch`, it can center the line on the match\n * whereas this method risks cutting matches out of the string.\n */\nfunction lineSegmentForMultipleMatches(lineContent: string, ranges: TextUtils.TextRange.SourceRange[]):\n    {lineSegment: string, matchRanges: TextUtils.TextRange.SourceRange[]} {\n  let trimBy = 0;\n  let matchRanges = ranges;\n  if (matchRanges.length > 0 && matchRanges[0].offset > 20) {\n    trimBy = 15;\n  }\n  let lineSegment = lineContent.substring(trimBy, 1000 + trimBy);\n  if (trimBy) {\n    matchRanges =\n        matchRanges.map(range => new TextUtils.TextRange.SourceRange(range.offset - trimBy + 1, range.length));\n    lineSegment = '…' + lineSegment;\n  }\n  return {lineSegment, matchRanges};\n}\n"]}