{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/search/SearchResultsPane.ts", "searchResultsPane.css.js", "../../../../../../front_end/panels/search/SearchScope.ts", "../../../../../../front_end/panels/search/SearchView.ts", "searchView.css.js"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {html, render, type TemplateResult} from '../../ui/lit/lit.js';\n\nimport searchResultsPaneStyles from './searchResultsPane.css.js';\nimport type {SearchResult} from './SearchScope.js';\n\nconst UIStrings = {\n  /**\n   * @description Accessibility label for number of matches in each file in search results pane\n   * @example {2} PH1\n   */\n  matchesCountS: 'Matches Count {PH1}',\n  /**\n   * @description Search result label for results in the Search tool\n   * @example {2} PH1\n   */\n  lineS: 'Line {PH1}',\n  /**\n   * @description Text in Search Results Pane of the Search tab\n   * @example {2} PH1\n   */\n  showDMore: 'Show {PH1} more',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/search/SearchResultsPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface SearchMatch {\n  lineContent: string;\n  matchRanges: TextUtils.TextRange.SourceRange[];\n  resultLabel: string|number;\n}\n\ninterface ViewInput {\n  results: SearchResult[];\n  matches: WeakMap<SearchResult, SearchMatch[]>;\n  expandedResults: WeakSet<SearchResult>;\n  onSelectMatch: (searchResult: SearchResult, matchIndex: number) => void;\n  onExpandSearchResult: (searchResult: SearchResult) => void;\n  onShowMoreMatches: (searchResult: SearchResult) => void;\n}\n\nexport type View = (input: ViewInput, output: unknown, target: HTMLElement) => void;\n\nexport const DEFAULT_VIEW: View = (input, _output, target) => {\n  const {results, matches, expandedResults, onSelectMatch, onExpandSearchResult, onShowMoreMatches} = input;\n\n  const onExpand =\n      (searchResult: SearchResult, {detail: {expanded}}: UI.TreeOutline.TreeViewElement.ExpandEvent): void => {\n        if (expanded) {\n          expandedResults.add(searchResult);\n          onExpandSearchResult(searchResult);\n        } else {\n          expandedResults.delete(searchResult);\n        }\n      };\n\n  // clang-format off\n  render(html`\n    <devtools-tree hide-overflow .template=${html`\n      <ul role=\"tree\">\n        ${results.map(searchResult => html`\n          <li @expand=${(e: UI.TreeOutline.TreeViewElement.ExpandEvent) => onExpand(searchResult, e)}\n              role=\"treeitem\"\n              class=\"search-result\">\n            <style>${searchResultsPaneStyles}</style>\n            ${renderSearchResult(searchResult)}\n            <ul role=\"group\" ?hidden=${!expandedResults.has(searchResult)}>\n              ${renderSearchMatches(searchResult, matches, onSelectMatch, onShowMoreMatches)}\n            </ul>\n          </li>`)}\n      </ul>\n    `}></devtools-tree>`,\n    target,\n  );\n  // clang-format on\n};\n\nconst renderSearchResult = (searchResult: SearchResult): TemplateResult => {\n  // clang-format off\n  return html`\n    <span class=\"search-result-file-name\">${searchResult.label()}\n      <span class=\"search-result-dash\">${'\\u2014'}</span>\n      <span class=\"search-result-qualifier\">${searchResult.description()}</span>\n    </span>\n    <span class=\"search-result-matches-count\"\n        aria-label=${i18nString(UIStrings.matchesCountS, {PH1: searchResult.matchesCount()})}>\n        ${searchResult.matchesCount()}\n    </span>`;\n  // clang-format on\n};\n\nconst renderSearchMatches =\n    (searchResult: SearchResult, matches: WeakMap<SearchResult, SearchMatch[]>,\n     onSelectMatch: (searchResult: SearchResult, matchIndex: number) => void,\n     onShowMoreMatches: (searchResult: SearchResult) => void): TemplateResult => {\n      const visibleMatches = matches.get(searchResult) ?? [];\n      const matchesLeftCount = searchResult.matchesCount() - visibleMatches.length;\n      // clang-format off\n  return html`\n      ${visibleMatches.map(({lineContent, matchRanges, resultLabel}, i) => html`\n        <li role=\"treeitem\" class=\"search-match\" @click=${() => onSelectMatch(searchResult, i)}\n          @keydown=${(event: KeyboardEvent) => {\n            if (event.key === 'Enter') {\n              onSelectMatch(searchResult, i);\n            }\n          }}\n        >\n          <button class=\"devtools-link text-button link-style search-match-link\"\n                  jslog=\"Link; context: search-match; track: click\" role=\"link\" tabindex=\"0\"\n                  @click=${() => void Common.Revealer.reveal(searchResult.matchRevealable(i))}>\n            <span class=\"search-match-line-number\"\n                aria-label=${typeof resultLabel === 'number' && !isNaN(resultLabel)\n                                ? i18nString(UIStrings.lineS, {PH1: resultLabel}) : resultLabel}>\n              ${resultLabel}\n            </span>\n            <span class=\"search-match-content\" aria-label=\"${lineContent} line\"\n                  ${UI.TreeOutline.TreeSearch.highlight(matchRanges, undefined)}>\n              ${lineContent}\n            </span>\n          </button>\n        </li>`)}\n      ${\n      matchesLeftCount > 0 ? html`\n        <li role=\"treeitem\" class=\"show-more-matches\" @click=${() => onShowMoreMatches(searchResult)}>\n          ${i18nString(UIStrings.showDMore, { PH1: matchesLeftCount })}\n        </li>` : ''}`;\n      // clang-format on\n    };\n\nexport class SearchResultsPane extends UI.Widget.VBox {\n  #searchConfig: Workspace.SearchConfig.SearchConfig|null = null;\n  #searchResults: SearchResult[] = [];\n  #resultsUpdated = false;\n  #expandedResults = new WeakSet<SearchResult>();\n  readonly #searchMatches = new WeakMap<SearchResult, SearchMatch[]>();\n  #view: View;\n\n  constructor(element: HTMLElement|undefined, view: View = DEFAULT_VIEW) {\n    super(element, {useShadowDom: true});\n    this.#view = view;\n  }\n\n  get searchResults(): SearchResult[] {\n    return this.#searchResults;\n  }\n\n  set searchResults(searchResults: SearchResult[]) {\n    if (this.#searchResults === searchResults) {\n      return;\n    }\n    if (this.#searchResults.length !== searchResults.length) {\n      this.#resultsUpdated = true;\n    } else if (this.#searchResults.length === searchResults.length) {\n      for (let i = 0; i < this.#searchResults.length; ++i) {\n        if (this.#searchResults[i] === searchResults[i]) {\n          continue;\n        }\n        this.#resultsUpdated = true;\n        break;\n      }\n    }\n    if (!this.#resultsUpdated) {\n      return;\n    }\n    this.#searchResults = searchResults;\n    this.requestUpdate();\n  }\n\n  get searchConfig(): Workspace.SearchConfig.SearchConfig|null {\n    return this.#searchConfig;\n  }\n\n  set searchConfig(searchConfig: Workspace.SearchConfig.SearchConfig|null) {\n    this.#searchConfig = searchConfig;\n    this.requestUpdate();\n  }\n\n  showAllMatches(): void {\n    for (const searchResult of this.#searchResults) {\n      const startMatchIndex = this.#searchMatches.get(searchResult)?.length ?? 0;\n      this.#appendSearchMatches(searchResult, startMatchIndex, searchResult.matchesCount());\n      this.#expandedResults.add(searchResult);\n    }\n    this.requestUpdate();\n  }\n\n  collapseAllResults(): void {\n    this.#expandedResults = new WeakSet<SearchResult>();\n    this.requestUpdate();\n  }\n\n  #onExpandSearchResult(searchResult: SearchResult): void {\n    const toIndex = Math.min(searchResult.matchesCount(), matchesShownAtOnce);\n    this.#appendSearchMatches(searchResult, 0, toIndex);\n    this.requestUpdate();\n  }\n\n  #appendSearchMatches(searchResult: SearchResult, fromIndex: number, toIndex: number): void {\n    if (!this.#searchConfig) {\n      return;\n    }\n    const queries = this.#searchConfig.queries();\n    const regexes = [];\n    for (let i = 0; i < queries.length; ++i) {\n      regexes.push(Platform.StringUtilities.createSearchRegex(\n          queries[i], !this.#searchConfig.ignoreCase(), this.#searchConfig.isRegex()));\n    }\n\n    const searchMatches = this.#searchMatches.get(searchResult) ?? [];\n    this.#searchMatches.set(searchResult, searchMatches);\n    if (searchMatches.length >= toIndex) {\n      return;\n    }\n\n    for (let i = fromIndex; i < toIndex; ++i) {\n      let lineContent = searchResult.matchLineContent(i);\n      let matchRanges: TextUtils.TextRange.SourceRange[] = [];\n      // Searching in scripts and network response bodies produces one result entry per match. We can skip re-doing the\n      // search since we have the exact match range.\n      // For matches found in headers or the request URL we re-do the search to find all match ranges.\n      const column = searchResult.matchColumn(i);\n      const matchLength = searchResult.matchLength(i);\n      if (column !== undefined && matchLength !== undefined) {\n        const {matchRange, lineSegment} =\n            lineSegmentForMatch(lineContent, new TextUtils.TextRange.SourceRange(column, matchLength));\n        lineContent = lineSegment;\n        matchRanges = [matchRange];\n      } else {\n        lineContent = lineContent.trim();\n        for (let j = 0; j < regexes.length; ++j) {\n          matchRanges = matchRanges.concat(this.#regexMatchRanges(lineContent, regexes[j]));\n        }\n        ({lineSegment: lineContent, matchRanges} = lineSegmentForMultipleMatches(lineContent, matchRanges));\n      }\n\n      const resultLabel = searchResult.matchLabel(i);\n      searchMatches.push({lineContent, matchRanges, resultLabel});\n    }\n  }\n\n  override performUpdate(): void {\n    if (this.#resultsUpdated) {\n      let matchesExpandedCount = 0;\n      for (const searchResult of this.#searchResults) {\n        if (this.#expandedResults.has(searchResult)) {\n          matchesExpandedCount += this.#searchMatches.get(searchResult)?.length ?? 0;\n        }\n      }\n      for (const searchResult of this.#searchResults) {\n        if (matchesExpandedCount < matchesExpandedByDefault && !this.#expandedResults.has(searchResult)) {\n          this.#expandedResults.add(searchResult);\n          this.#onExpandSearchResult(searchResult);\n          matchesExpandedCount += this.#searchMatches.get(searchResult)?.length ?? 0;\n        }\n      }\n      this.#resultsUpdated = false;\n    }\n    this.#view(\n        {\n          results: this.#searchResults,\n          matches: this.#searchMatches,\n          expandedResults: this.#expandedResults,\n          onSelectMatch: (searchResult, matchIndex) => {\n            void Common.Revealer.reveal(searchResult.matchRevealable(matchIndex));\n          },\n          onExpandSearchResult: this.#onExpandSearchResult.bind(this),\n          onShowMoreMatches: this.#onShowMoreMatches.bind(this),\n        },\n        {}, this.contentElement);\n  }\n\n  #regexMatchRanges(lineContent: string, regex: RegExp): TextUtils.TextRange.SourceRange[] {\n    regex.lastIndex = 0;\n    let match;\n    const matchRanges = [];\n    while ((regex.lastIndex < lineContent.length) && (match = regex.exec(lineContent))) {\n      matchRanges.push(new TextUtils.TextRange.SourceRange(match.index, match[0].length));\n    }\n\n    return matchRanges;\n  }\n\n  #onShowMoreMatches(searchResult: SearchResult): void {\n    const startMatchIndex = this.#searchMatches.get(searchResult)?.length ?? 0;\n    this.#appendSearchMatches(searchResult, startMatchIndex, searchResult.matchesCount());\n    this.requestUpdate();\n  }\n}\n\nexport const matchesExpandedByDefault = 200;\nexport const matchesShownAtOnce = 20;\n\nconst DEFAULT_OPTS = {\n  prefixLength: 25,\n  maxLength: 1000,\n};\n\n/**\n * Takes a whole line and calculates the substring we want to actually display in the UI.\n * Also returns a translated {matchRange} (the parameter is relative to {lineContent} but the\n * caller needs it relative to {lineSegment}).\n *\n * {lineContent} is modified in the following way:\n *\n *   * Whitespace is trimmed from the beginning (unless the match includes it).\n *   * We only leave {options.prefixLength} characters before the match (and add an ellipsis in\n *     case we removed anything)\n *   * Truncate the remainder to {options.maxLength} characters.\n */\nexport function lineSegmentForMatch(\n    lineContent: string, range: TextUtils.TextRange.SourceRange,\n    optionsArg: Partial<typeof DEFAULT_OPTS> =\n        DEFAULT_OPTS): {lineSegment: string, matchRange: TextUtils.TextRange.SourceRange} {\n  const options = {...DEFAULT_OPTS, ...optionsArg};\n\n  // Remove the whitespace at the beginning, but stop where the match starts.\n  const attemptedTrimmedLine = lineContent.trimStart();\n  const potentiallyRemovedWhitespaceLength = lineContent.length - attemptedTrimmedLine.length;\n  const actuallyRemovedWhitespaceLength = Math.min(range.offset, potentiallyRemovedWhitespaceLength);\n\n  // Apply {options.prefixLength} and {options.maxLength}.\n  const lineSegmentBegin = Math.max(actuallyRemovedWhitespaceLength, range.offset - options.prefixLength);\n  const lineSegmentEnd = Math.min(lineContent.length, lineSegmentBegin + options.maxLength);\n  const lineSegmentPrefix = lineSegmentBegin > actuallyRemovedWhitespaceLength ? '…' : '';\n\n  // Build the resulting line segment and match range.\n  const lineSegment = lineSegmentPrefix + lineContent.substring(lineSegmentBegin, lineSegmentEnd);\n  const rangeOffset = range.offset - lineSegmentBegin + lineSegmentPrefix.length;\n  const rangeLength = Math.min(range.length, lineSegment.length - rangeOffset);\n  const matchRange = new TextUtils.TextRange.SourceRange(rangeOffset, rangeLength);\n\n  return {lineSegment, matchRange};\n}\n\n/**\n * Takes a line and multiple match ranges and trims/cuts the line accordingly.\n * The match ranges are then adjusted to reflect the transformation.\n *\n * Ideally prefer `lineSegmentForMatch`, it can center the line on the match\n * whereas this method risks cutting matches out of the string.\n */\nfunction lineSegmentForMultipleMatches(lineContent: string, ranges: TextUtils.TextRange.SourceRange[]):\n    {lineSegment: string, matchRanges: TextUtils.TextRange.SourceRange[]} {\n  let trimBy = 0;\n  let matchRanges = ranges;\n  if (matchRanges.length > 0 && matchRanges[0].offset > 20) {\n    trimBy = 15;\n  }\n  let lineSegment = lineContent.substring(trimBy, 1000 + trimBy);\n  if (trimBy) {\n    matchRanges =\n        matchRanges.map(range => new TextUtils.TextRange.SourceRange(range.offset - trimBy + 1, range.length));\n    lineSegment = '…' + lineSegment;\n  }\n  return {lineSegment, matchRanges};\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2016 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n:host {\n  padding: 0;\n  margin: 0;\n  overflow-y: auto;\n}\n\n.tree-outline {\n  padding: 0;\n}\n\n.tree-outline ol {\n  padding: 0;\n}\n\n.tree-outline li {\n  height: 16px;\n}\n\nli.search-result {\n  cursor: pointer;\n  font-size: 12px;\n  margin-top: 8px;\n  padding: 2px 0 2px 4px;\n  overflow-wrap: normal;\n  white-space: pre;\n}\n\nli.search-result .tree-element-title {\n  display: flex;\n  width: 100%;\n}\n\nli.search-result:hover {\n  background-color: var(--sys-color-state-hover-on-subtle);\n}\n\nli.search-result .search-result-file-name {\n  color: var(--sys-color-on-surface);\n  flex: 1 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\nli.search-result .search-result-matches-count {\n  color: var(--sys-color-token-subtle);\n  margin: 0 8px;\n}\n\nli.search-result.expanded .search-result-matches-count {\n  display: none;\n}\n\nli.show-more-matches {\n  color: var(--sys-color-on-surface);\n  cursor: pointer;\n  margin: 8px 0 0 -4px;\n}\n\nli.show-more-matches:hover {\n  text-decoration: underline;\n}\n\nli.search-match {\n  margin: 2px 0;\n  overflow-wrap: normal;\n  white-space: pre;\n}\n\nli.search-match .tree-element-title {\n  display: flex;\n}\n\nli.search-match.selected:focus-visible {\n  background: var(--sys-color-tonal-container);\n}\n\nli.search-match::before {\n  display: none;\n}\n\nli.search-match .search-match-line-number {\n  color: var(--sys-color-token-subtle);\n  text-align: right;\n  vertical-align: top;\n  word-break: normal;\n  padding: 2px 4px 2px 6px;\n  margin-right: 5px;\n}\n\n.tree-outline .devtools-link {\n  text-decoration: none;\n  display: block;\n  flex: auto;\n}\n\nli.search-match .search-match-content {\n  color: var(--sys-color-on-surface);\n}\n\nol.children.expanded {\n  padding-bottom: 4px;\n}\n\nli.search-match .link-style.search-match-link {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-left: 9px;\n  text-align: left;\n}\n\n.search-result-qualifier {\n  color: var(--sys-color-token-subtle);\n}\n\n.search-result-dash {\n  color: var(--sys-color-surface-variant);\n  margin: 0 4px;\n}\n\n/*# sourceURL=${import.meta.resolve('./searchResultsPane.css')} */`;", "// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\n\nexport interface SearchResult {\n  label(): string;\n\n  description(): string;\n\n  matchesCount(): number;\n\n  matchLabel(index: number): string;\n\n  matchLineContent(index: number): string;\n\n  matchRevealable(index: number): Object;\n\n  matchColumn(index: number): number|undefined;\n\n  matchLength(index: number): number|undefined;\n}\n\nexport interface SearchScope {\n  performSearch(\n      searchConfig: Workspace.SearchConfig.SearchConfig, progress: Common.Progress.Progress,\n      searchResultCallback: (arg0: SearchResult) => void,\n      searchFinishedCallback: (arg0: boolean) => void): void|Promise<void>;\n\n  performIndexing(progress: Common.Progress.Progress): void;\n\n  stopSearch(): void;\n}\n", "// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../ui/legacy/legacy.js';\nimport '../../ui/components/icon_button/icon_button.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {Directives, html, render} from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {SearchResultsPane} from './SearchResultsPane.js';\nimport type {SearchResult, SearchScope} from './SearchScope.js';\nimport searchViewStyles from './searchView.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Placeholder text of a search bar\n   */\n  find: 'Find',\n  /**\n   * @description Tooltip text on a toggle to enable search by matching case of the input\n   */\n  enableCaseSensitive: 'Enable case sensitive search',\n  /**\n   * @description Tooltip text on a toggle to disable search by matching case of the input\n   */\n  disableCaseSensitive: 'Disable case sensitive search',\n  /**\n   * @description Tooltip text on a toggle to enable searching with regular expression\n   */\n  enableRegularExpression: 'Enable regular expressions',\n  /**\n   * @description Tooltip text on a toggle to disable searching with regular expression\n   */\n  disableRegularExpression: 'Disable regular expressions',\n  /**\n   * @description Text to refresh the page\n   */\n  refresh: 'Refresh',\n  /**\n   * @description Tooltip text to clear the search input field\n   */\n  clearInput: 'Clear',\n  /**\n   * @description Text to clear content\n   */\n  clear: 'Clear search',\n  /**\n   * @description Search message element text content in Search View of the Search tab\n   */\n  indexing: 'Indexing…',\n  /**\n   * @description Text to indicate the searching is in progress\n   */\n  searching: 'Searching…',\n  /**\n   * @description Text in Search View of the Search tab\n   */\n  indexingInterrupted: 'Indexing interrupted.',\n  /**\n   * @description Search results message element text content in Search View of the Search tab\n   */\n  foundMatchingLineInFile: 'Found 1 matching line in 1 file.',\n  /**\n   * @description Search results message element text content in Search View of the Search tab\n   * @example {2} PH1\n   */\n  foundDMatchingLinesInFile: 'Found {PH1} matching lines in 1 file.',\n  /**\n   * @description Search results message element text content in Search View of the Search tab\n   * @example {2} PH1\n   * @example {2} PH2\n   */\n  foundDMatchingLinesInDFiles: 'Found {PH1} matching lines in {PH2} files.',\n  /**\n   * @description Search results message element text content in Search View of the Search tab\n   */\n  noMatchesFound: 'No matches found',\n  /**\n   * @description Search results message element text content in Search View of the Search tab\n   */\n  nothingMatchedTheQuery: 'Nothing matched your search query',\n  /**\n   * @description Text in Search View of the Search tab\n   */\n  searchFinished: 'Search finished.',\n  /**\n   * @description Text in Search View of the Search tab\n   */\n  searchInterrupted: 'Search interrupted.',\n  /**\n   * @description Text in Search View of the Search tab if user hasn't started the search\n   * @example {Enter} PH1\n   */\n  typeAndPressSToSearch: 'Type and press {PH1} to search',\n  /**\n   * @description Text in Search view of the Search tab if user hasn't started the search\n   */\n  noSearchResult: 'No search results',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/search/SearchView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst {ref, live} = Directives;\nconst {widgetConfig, widgetRef} = UI.Widget;\n\nexport interface SearchViewInput {\n  query: string;\n  matchCase: boolean;\n  isRegex: boolean;\n  searchConfig: Workspace.SearchConfig.SearchConfig|null;\n  searchMessage: string;\n  searchResultsMessage: string;\n  searchResults: SearchResult[];\n  progress: Common.Progress.Progress|null;\n  onQueryChange: (query: string) => void;\n  onQueryKeyDown: (evt: KeyboardEvent) => void;\n  onPanelKeyDown: (evt: KeyboardEvent) => void;\n  onClearSearchInput: () => void;\n  onToggleRegex: () => void;\n  onToggleMatchCase: () => void;\n  onRefresh: () => void;\n  onClearSearch: () => void;\n}\n\nexport interface SearchViewOutput {\n  focusSearchInput: () => void;\n  showAllMatches: () => void;\n  collapseAllResults: () => void;\n}\n\nexport type View = (input: SearchViewInput, output: SearchViewOutput, target: HTMLElement) => void;\n\nexport const DEFAULT_VIEW: View = (input, output, target) => {\n  const {\n    query,\n    matchCase,\n    isRegex,\n    searchConfig,\n    searchMessage,\n    searchResults,\n    searchResultsMessage,\n    progress,\n    onQueryChange,\n    onQueryKeyDown,\n    onPanelKeyDown,\n    onClearSearchInput,\n    onToggleRegex,\n    onToggleMatchCase,\n    onRefresh,\n    onClearSearch,\n  } = input;\n  let header = '', text = '';\n  if (!query) {\n    header = i18nString(UIStrings.noSearchResult);\n    text = i18nString(\n        UIStrings.typeAndPressSToSearch,\n        {PH1: UI.KeyboardShortcut.KeyboardShortcut.shortcutToString(UI.KeyboardShortcut.Keys.Enter)});\n  } else if (progress) {\n    header = i18nString(UIStrings.searching);\n  } else if (!searchResults.length) {\n    header = i18nString(UIStrings.noMatchesFound);\n    text = i18nString(UIStrings.nothingMatchedTheQuery);\n  }\n  // clang-format off\n  render(html`\n      <style>${UI.inspectorCommonStyles}</style>\n      <style>${searchViewStyles}</style>\n      <div class=\"search-drawer-header\" @keydown=${onPanelKeyDown}>\n        <div class=\"search-container\">\n          <div class=\"toolbar-item-search\">\n            <devtools-icon name=\"search\"></devtools-icon>\n            <input type=\"text\"\n                class=\"search-toolbar-input\"\n                placeholder=${i18nString(UIStrings.find)}\n                jslog=${VisualLogging.textField().track({\n                    change: true, keydown: 'ArrowUp|ArrowDown|Enter'})}\n                aria-label=${i18nString(UIStrings.find)}\n                size=\"100\" results=\"0\"\n                .value=${live(query)}\n                @keydown=${onQueryKeyDown}\n                @input=${(e: Event) => onQueryChange((e.target as HTMLInputElement).value)}\n                ${ref(e => {\n                  output.focusSearchInput = () => {\n                    if (e instanceof HTMLInputElement) {\n                      e.focus();\n                      e.select();\n                    }\n                  };\n                })}>\n            <devtools-button class=\"clear-button\" tabindex=\"-1\"\n                @click=${onClearSearchInput}\n                .data=${{\n                  variant: Buttons.Button.Variant.ICON,\n                  iconName: 'cross-circle-filled',\n                  jslogContext: 'clear-input',\n                  size: Buttons.Button.Size.SMALL,\n                  title: i18nString(UIStrings.clearInput),\n                } as Buttons.Button.ButtonData}\n            ></devtools-button>\n            <devtools-button @click=${onToggleRegex} .data=${{\n                variant: Buttons.Button.Variant.ICON_TOGGLE,\n                iconName: 'regular-expression',\n                toggledIconName: 'regular-expression',\n                toggleType: Buttons.Button.ToggleType.PRIMARY,\n                size: Buttons.Button.Size.SMALL,\n                toggled: isRegex,\n                title: isRegex ? i18nString(UIStrings.disableRegularExpression) : i18nString(UIStrings.enableRegularExpression),\n                jslogContext: 'regular-expression',\n              } as Buttons.Button.ButtonData}\n              class=\"regex-button\"\n            ></devtools-button>\n            <devtools-button @click=${onToggleMatchCase} .data=${{\n                variant: Buttons.Button.Variant.ICON_TOGGLE,\n                iconName: 'match-case',\n                toggledIconName: 'match-case',\n                toggleType: Buttons.Button.ToggleType.PRIMARY,\n                size: Buttons.Button.Size.SMALL,\n                toggled: matchCase,\n                title: matchCase ? i18nString(UIStrings.disableCaseSensitive) : i18nString(UIStrings.enableCaseSensitive),\n                jslogContext: 'match-case',\n              } as Buttons.Button.ButtonData}\n              class=\"match-case-button\"\n            ></devtools-button>\n          </div>\n        </div>\n        <devtools-toolbar class=\"search-toolbar\" jslog=${VisualLogging.toolbar()}>\n          <devtools-button title=${i18nString(UIStrings.refresh)} @click=${onRefresh}\n              .data=${{\n                variant: Buttons.Button.Variant.TOOLBAR,\n                iconName: 'refresh',\n                jslogContext: 'search.refresh',\n              } as Buttons.Button.ButtonData}></devtools-button>\n          <devtools-button title=${i18nString(UIStrings.clear)} @click=${onClearSearch}\n              .data=${{\n                variant: Buttons.Button.Variant.TOOLBAR,\n                iconName: 'clear',\n                jslogContext: 'search.clear',\n              } as Buttons.Button.ButtonData}></devtools-button>\n        </devtools-toolbar>\n      </div>\n      <div class=\"search-results\" @keydown=${onPanelKeyDown}>\n        ${searchResults.length\n           ? html`<devtools-widget .widgetConfig=${widgetConfig(SearchResultsPane, {searchResults, searchConfig})}\n            ${widgetRef(SearchResultsPane, w => {\n              output.showAllMatches = () => void w.showAllMatches();\n              output.collapseAllResults = () => void w.collapseAllResults(); })}>\n            </devtools-widget>`\n           : html`<devtools-widget .widgetConfig=${widgetConfig(UI.EmptyWidget.EmptyWidget, {header, text})}>\n                  </devtools-widget>`}\n      </div>\n      <div class=\"search-toolbar-summary\" @keydown=${onPanelKeyDown}>\n        <div class=\"search-message\">${searchMessage}</div>\n        <div class=\"flex-centered\">\n          ${progress ? html`\n            <devtools-progress .title=${progress.title ?? ''}\n                               .worked=${progress.worked} .totalWork=${progress.totalWork}>\n            </devtools-progress>` : ''}\n        </div>\n        <div class=\"search-message\">${searchResultsMessage}</div>\n      </div>`, target);\n  // clang-format on\n};\n\nexport class SearchView extends UI.Widget.VBox {\n  readonly #view: View;\n  #focusSearchInput = (): void => {};\n  #showAllMatches = (): void => {};\n  #collapseAllResults = (): void => {};\n  #isIndexing: boolean;\n  #searchId: number;\n  #searchMatchesCount: number;\n  #searchResultsCount: number;\n  #nonEmptySearchResultsCount: number;\n  #searchingView: UI.Widget.Widget|null;\n  #searchConfig: Workspace.SearchConfig.SearchConfig|null;\n  #pendingSearchConfig: Workspace.SearchConfig.SearchConfig|null;\n  #progress: Common.Progress.Progress|null;\n  #query: string;\n  #matchCase = false;\n  #isRegex = false;\n  #searchMessage = '';\n  #searchResultsMessage = '';\n  readonly #advancedSearchConfig: Common.Settings.Setting<{\n    query: string,\n    ignoreCase: boolean,\n    isRegex: boolean,\n  }>;\n  #searchScope: SearchScope|null;\n\n  #searchResults: SearchResult[] = [];\n\n  constructor(settingKey: string, view = DEFAULT_VIEW) {\n    super({\n      jslog: `${VisualLogging.panel('search').track({resize: true})}`,\n      useShadowDom: true,\n    });\n    this.#view = view;\n    this.setMinimumSize(0, 40);\n\n    this.#isIndexing = false;\n    this.#searchId = 1;\n    this.#query = '';\n    this.#searchMatchesCount = 0;\n    this.#searchResultsCount = 0;\n    this.#nonEmptySearchResultsCount = 0;\n    this.#searchingView = null;\n    this.#searchConfig = null;\n    this.#pendingSearchConfig = null;\n    this.#progress = null;\n\n    this.#advancedSearchConfig = Common.Settings.Settings.instance().createLocalSetting(\n        settingKey + '-search-config', new Workspace.SearchConfig.SearchConfig('', true, false).toPlainObject());\n\n    this.performUpdate();\n    this.#load();\n    this.performUpdate();\n    this.#searchScope = null;\n  }\n\n  override performUpdate(): void {\n    const input: SearchViewInput = {\n      query: this.#query,\n      matchCase: this.#matchCase,\n      isRegex: this.#isRegex,\n      searchConfig: this.#searchConfig,\n      searchMessage: this.#searchMessage,\n      searchResults: this.#searchResults.filter(searchResult => searchResult.matchesCount()),\n      searchResultsMessage: this.#searchResultsMessage,\n      progress: this.#progress,\n      onQueryChange: (query: string) => {\n        this.#query = query;\n      },\n      onQueryKeyDown: this.#onQueryKeyDown.bind(this),\n      onPanelKeyDown: this.#onPanelKeyDown.bind(this),\n      onClearSearchInput: this.#onClearSearchInput.bind(this),\n      onToggleRegex: this.#onToggleRegex.bind(this),\n      onToggleMatchCase: this.#onToggleMatchCase.bind(this),\n      onRefresh: this.#onRefresh.bind(this),\n      onClearSearch: this.#onClearSearch.bind(this),\n    };\n    const that = this;\n    const output: SearchViewOutput = {\n      set focusSearchInput(value: () => void) {\n        that.#focusSearchInput = value;\n      },\n      set showAllMatches(value: () => void) {\n        that.#showAllMatches = value;\n      },\n      set collapseAllResults(value: () => void) {\n        that.#collapseAllResults = value;\n      }\n    };\n    this.#view(input, output, this.contentElement);\n  }\n\n  #onToggleRegex(): void {\n    this.#isRegex = !this.#isRegex;\n    this.performUpdate();\n  }\n\n  #onToggleMatchCase(): void {\n    this.#matchCase = !this.#matchCase;\n    this.performUpdate();\n  }\n\n  #buildSearchConfig(): Workspace.SearchConfig.SearchConfig {\n    return new Workspace.SearchConfig.SearchConfig(this.#query, !this.#matchCase, this.#isRegex);\n  }\n\n  toggle(queryCandidate: string, searchImmediately?: boolean): void {\n    this.#query = queryCandidate;\n    this.requestUpdate();\n    void this.updateComplete.then(() => {\n      this.focus();\n    });\n\n    this.#initScope();\n    if (searchImmediately) {\n      this.#onRefresh();\n    } else {\n      this.#startIndexing();\n    }\n  }\n\n  createScope(): SearchScope {\n    throw new Error('Not implemented');\n  }\n\n  #initScope(): void {\n    this.#searchScope = this.createScope();\n  }\n\n  #onIndexingFinished(): void {\n    if (!this.#progress) {\n      return;\n    }\n\n    const finished = !this.#progress.canceled;\n    this.#progress = null;\n    this.#isIndexing = false;\n    this.#searchMessage = finished ? '' : i18nString(UIStrings.indexingInterrupted);\n    if (!finished) {\n      this.#pendingSearchConfig = null;\n    }\n    this.performUpdate();\n    if (!this.#pendingSearchConfig) {\n      return;\n    }\n    const searchConfig = this.#pendingSearchConfig;\n    this.#pendingSearchConfig = null;\n    this.#startSearch(searchConfig);\n  }\n\n  #startIndexing(): void {\n    this.#isIndexing = true;\n    if (this.#progress) {\n      this.#progress.done = true;\n    }\n    this.#progress = new Common.Progress.ProgressProxy(\n        new Common.Progress.Progress(), this.#onIndexingFinished.bind(this), this.requestUpdate.bind(this));\n    this.#searchMessage = i18nString(UIStrings.indexing);\n    this.performUpdate();\n    if (this.#searchScope) {\n      this.#searchScope.performIndexing(this.#progress);\n    }\n  }\n\n  #onClearSearchInput(): void {\n    this.#query = '';\n    this.requestUpdate();\n    this.#save();\n    this.focus();\n  }\n\n  #onSearchResult(searchId: number, searchResult: SearchResult): void {\n    if (searchId !== this.#searchId || !this.#progress) {\n      return;\n    }\n    if (this.#progress?.canceled) {\n      this.#onIndexingFinished();\n      return;\n    }\n    this.#searchResults.push(searchResult);\n    this.#addSearchResult(searchResult);\n    this.requestUpdate();\n  }\n\n  #onSearchFinished(searchId: number, finished: boolean): void {\n    if (searchId !== this.#searchId || !this.#progress) {\n      return;\n    }\n    this.#progress = null;\n    this.#searchFinished(finished);\n    UI.ARIAUtils.LiveAnnouncer.alert(this.#searchMessage + ' ' + this.#searchResultsMessage);\n  }\n\n  #startSearch(searchConfig: Workspace.SearchConfig.SearchConfig): void {\n    this.#searchConfig = searchConfig;\n    if (this.#progress) {\n      this.#progress.done = true;\n    }\n    this.#progress =\n        new Common.Progress.ProgressProxy(new Common.Progress.Progress(), undefined, this.requestUpdate.bind(this));\n    this.#searchStarted();\n    if (this.#searchScope) {\n      void this.#searchScope.performSearch(\n          searchConfig, this.#progress, this.#onSearchResult.bind(this, this.#searchId),\n          this.#onSearchFinished.bind(this, this.#searchId));\n    }\n  }\n\n  #resetSearch(): void {\n    this.#stopSearch();\n    this.#searchResults = [];\n    this.#searchMessage = '';\n    this.#searchResultsMessage = '';\n    this.performUpdate();\n  }\n\n  #stopSearch(): void {\n    if (this.#progress && !this.#isIndexing) {\n      this.#progress.canceled = true;\n    }\n    if (this.#searchScope) {\n      this.#searchScope.stopSearch();\n    }\n  }\n\n  #searchStarted(): void {\n    this.#searchMatchesCount = 0;\n    this.#searchResultsCount = 0;\n    this.#searchResults = [];\n    this.#nonEmptySearchResultsCount = 0;\n    if (!this.#searchingView) {\n      this.#searchingView = new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.searching), '');\n    }\n    this.#searchMessage = i18nString(UIStrings.searching);\n    this.performUpdate();\n    this.#updateSearchResultsMessage();\n  }\n\n  #updateSearchResultsMessage(): void {\n    if (this.#searchMatchesCount && this.#searchResultsCount) {\n      if (this.#searchMatchesCount === 1 && this.#nonEmptySearchResultsCount === 1) {\n        this.#searchResultsMessage = i18nString(UIStrings.foundMatchingLineInFile);\n      } else if (this.#searchMatchesCount > 1 && this.#nonEmptySearchResultsCount === 1) {\n        this.#searchResultsMessage = i18nString(UIStrings.foundDMatchingLinesInFile, {PH1: this.#searchMatchesCount});\n      } else {\n        this.#searchResultsMessage = i18nString(\n            UIStrings.foundDMatchingLinesInDFiles,\n            {PH1: this.#searchMatchesCount, PH2: this.#nonEmptySearchResultsCount});\n      }\n    } else {\n      this.#searchResultsMessage = '';\n    }\n    this.performUpdate();\n  }\n\n  #addSearchResult(searchResult: SearchResult): void {\n    const matchesCount = searchResult.matchesCount();\n    this.#searchMatchesCount += matchesCount;\n    this.#searchResultsCount++;\n    if (matchesCount) {\n      this.#nonEmptySearchResultsCount++;\n    }\n    this.#updateSearchResultsMessage();\n  }\n\n  #searchFinished(finished: boolean): void {\n    this.#searchMessage = finished ? i18nString(UIStrings.searchFinished) : i18nString(UIStrings.searchInterrupted);\n    this.requestUpdate();\n  }\n\n  override focus(): void {\n    this.#focusSearchInput();\n  }\n\n  override willHide(): void {\n    this.#stopSearch();\n  }\n\n  #onQueryKeyDown(event: KeyboardEvent): void {\n    this.#save();\n    switch (event.keyCode) {\n      case UI.KeyboardShortcut.Keys.Enter.code:\n        this.#onRefresh();\n        break;\n    }\n  }\n\n  /**\n   * Handles keydown event on panel itself for handling expand/collapse all shortcut\n   *\n   * We use `event.code` instead of `event.key` here to check whether the shortcut is triggered.\n   * The reason is, `event.key` is dependent on the modification keys, locale and keyboard layout.\n   * Usually it is useful when we care about the character that needs to be printed.\n   *\n   * However, our aim in here is to assign a shortcut to the physical key combination on the keyboard\n   * not on the character that the key combination prints.\n   *\n   * For example, `Cmd + [` shortcut in global shortcuts map to focusing on previous panel.\n   * In Turkish - Q keyboard layout, the key combination that triggers the shortcut prints `ğ`\n   * character. Whereas in Turkish - Q Legacy keyboard layout, the shortcut that triggers focusing\n   * on previous panel prints `[` character. So, if we use `event.key` and check\n   * whether it is `[`, we break the shortcut in Turkish - Q keyboard layout.\n   *\n   * @param event KeyboardEvent\n   */\n  #onPanelKeyDown(event: KeyboardEvent): void {\n    const isMac = Host.Platform.isMac();\n    // \"Command + Alt + ]\" for Mac\n    const shouldShowAllForMac =\n        isMac && event.metaKey && !event.ctrlKey && event.altKey && event.code === 'BracketRight';\n    // \"Ctrl + Shift + }\" for other platforms\n    const shouldShowAllForOtherPlatforms =\n        !isMac && event.ctrlKey && !event.metaKey && event.shiftKey && event.code === 'BracketRight';\n    // \"Command + Alt + [\" for Mac\n    const shouldCollapseAllForMac =\n        isMac && event.metaKey && !event.ctrlKey && event.altKey && event.code === 'BracketLeft';\n    // \"Ctrl + Alt + {\" for other platforms\n    const shouldCollapseAllForOtherPlatforms =\n        !isMac && event.ctrlKey && !event.metaKey && event.shiftKey && event.code === 'BracketLeft';\n\n    if (shouldShowAllForMac || shouldShowAllForOtherPlatforms) {\n      this.#showAllMatches();\n      void VisualLogging.logKeyDown(event.currentTarget, event, 'show-all-matches');\n    } else if (shouldCollapseAllForMac || shouldCollapseAllForOtherPlatforms) {\n      this.#collapseAllResults();\n      void VisualLogging.logKeyDown(event.currentTarget, event, 'collapse-all-results');\n    }\n  }\n\n  #save(): void {\n    this.#advancedSearchConfig.set(this.#buildSearchConfig().toPlainObject());\n  }\n\n  #load(): void {\n    const searchConfig = Workspace.SearchConfig.SearchConfig.fromPlainObject(this.#advancedSearchConfig.get());\n    this.#query = searchConfig.query();\n\n    this.#matchCase = !searchConfig.ignoreCase();\n    this.#isRegex = searchConfig.isRegex();\n    this.requestUpdate();\n  }\n\n  #onRefresh(): void {\n    const searchConfig = this.#buildSearchConfig();\n    if (!searchConfig.query()?.length) {\n      return;\n    }\n    this.#resetSearch();\n    ++this.#searchId;\n    this.#initScope();\n    if (!this.#isIndexing) {\n      this.#startIndexing();\n    }\n    this.#pendingSearchConfig = searchConfig;\n  }\n\n  #onClearSearch(): void {\n    this.#resetSearch();\n    this.#onClearSearchInput();\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2014 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.search-drawer-header {\n  flex-shrink: 0;\n  overflow: hidden;\n  display: inline-flex;\n  min-width: 150px;\n\n  .search-container {\n    border-bottom: 1px solid var(--sys-color-divider);\n    display: flex;\n    align-items: center;\n    flex-grow: 1;\n  }\n\n  .toolbar-item-search {\n    flex-grow: 1;\n    box-shadow: inset 0 0 0 2px transparent;\n    box-sizing: border-box;\n    height: var(--sys-size-9);\n    margin-left: var(--sys-size-3);\n    padding: 0 var(--sys-size-2) 0 var(--sys-size-5);\n    border-radius: 100px;\n    position: relative;\n    display: flex;\n    align-items: center;\n    background-color: var(--sys-color-cdt-base);\n\n    &:has(input:focus) {\n      box-shadow: inset 0 0 0 2px var(--sys-color-state-focus-ring);\n    }\n\n    &:has(input:hover)::before {\n      content: \"\";\n      box-sizing: inherit;\n      height: 100%;\n      width: 100%;\n      position: absolute;\n      border-radius: 100px;\n      left: 0;\n      background-color: var(--sys-color-state-hover-on-subtle);\n    }\n\n    & > devtools-icon {\n      color: var(--sys-color-on-surface-subtle);\n      width: var(--sys-size-8);\n      height: var(--sys-size-8);\n      margin-right: var(--sys-size-3);\n    }\n\n    & > devtools-button:last-child {\n      margin-right: var(--sys-size-4);\n    }\n  }\n\n  .search-toolbar-input {\n    appearance: none;\n    color: var(--sys-color-on-surface);\n    background-color: transparent;\n    border: 0;\n    z-index: 1;\n    flex: 1;\n\n    &::placeholder {\n      color: var(--sys-color-on-surface-subtle);\n    }\n\n    &:placeholder-shown + .clear-button {\n      display: none;\n    }\n\n    &::-webkit-search-cancel-button {\n      display: none;\n    }\n  }\n}\n\n.search-toolbar {\n  background-color: var(--sys-color-cdt-base-container);\n  border-bottom: 1px solid var(--sys-color-divider);\n}\n\n.search-toolbar-summary {\n  background-color: var(--sys-color-cdt-base-container);\n  border-top: 1px solid var(--sys-color-divider);\n  padding-left: 5px;\n  flex: 0 0 19px;\n  display: flex;\n  padding-right: 5px;\n}\n\n.search-results:has(.empty-state) + .search-toolbar-summary {\n  display: none;\n}\n\n.search-toolbar-summary .search-message {\n  padding-top: 2px;\n  padding-left: 1ex;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.search-results {\n  overflow-y: auto;\n  display: flex;\n  flex: auto;\n}\n\n.search-results > div {\n  flex: auto;\n}\n\n/*# sourceURL=${import.meta.resolve('./searchView.css')} */`;"],
  "mappings": "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",
  "names": ["DEFAULT_VIEW", "Common", "i18n", "UI", "html", "render", "UIStrings", "str_", "i18nString", "DEFAULT_VIEW", "render", "html"]
}
