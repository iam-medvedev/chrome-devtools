{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/search/SearchResultsPane.ts", "searchResultsPane.css.js", "../../../../../../front_end/panels/search/SearchScope.ts", "../../../../../../front_end/panels/search/SearchView.ts", "searchView.css.js"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {html, render} from '../../ui/lit/lit.js';\n\nimport searchResultsPaneStyles from './searchResultsPane.css.js';\nimport type {SearchResult} from './SearchScope.js';\n\nconst UIStrings = {\n  /**\n   * @description Accessibility label for number of matches in each file in search results pane\n   * @example {2} PH1\n   */\n  matchesCountS: 'Matches Count {PH1}',\n  /**\n   * @description Search result label for results in the Search tool\n   * @example {2} PH1\n   */\n  lineS: 'Line {PH1}',\n  /**\n   * @description Text in Search Results Pane of the Search tab\n   * @example {2} PH1\n   */\n  showDMore: 'Show {PH1} more',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/search/SearchResultsPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class SearchResultsPane extends UI.Widget.VBox {\n  private readonly searchConfig: Workspace.SearchConfig.SearchConfig;\n  private readonly searchResults: SearchResult[];\n  private readonly treeElements = new Map<UI.TreeOutline.TreeElement, SearchResult>();\n  private readonly initializedTreeElements = new WeakSet<UI.TreeOutline.TreeElement>();\n  private treeOutline: UI.TreeOutline.TreeOutlineInShadow;\n  private matchesExpandedCount: number;\n\n  constructor(searchConfig: Workspace.SearchConfig.SearchConfig) {\n    super({useShadowDom: true});\n    this.searchConfig = searchConfig;\n\n    this.searchResults = [];\n    this.treeOutline = new UI.TreeOutline.TreeOutlineInShadow();\n    this.treeOutline.registerRequiredCSS(searchResultsPaneStyles);\n    this.treeOutline.setHideOverflow(true);\n    this.treeOutline.addEventListener(\n        UI.TreeOutline.Events.ElementExpanded,\n        (event: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>) => {\n          this.updateMatchesUI(event.data);\n        });\n\n    this.contentElement.appendChild(this.treeOutline.element);\n\n    this.matchesExpandedCount = 0;\n  }\n\n  addSearchResult(searchResult: SearchResult): void {\n    this.searchResults.push(searchResult);\n    this.addTreeElement(searchResult);\n  }\n\n  showAllMatches(): void {\n    for (const [treeElement, searchResult] of this.treeElements.entries()) {\n      treeElement.expand();\n      treeElement.removeChildren();\n      this.appendSearchMatches(treeElement, 0, searchResult.matchesCount());\n    }\n  }\n\n  collapseAllResults(): void {\n    for (const treeElement of this.treeElements.keys()) {\n      treeElement.collapse();\n    }\n  }\n\n  private addTreeElement(searchResult: SearchResult): void {\n    const treeElement = new UI.TreeOutline.TreeElement('', true);\n    treeElement.toggleOnClick = true;\n    this.treeElements.set(treeElement, searchResult);\n    this.treeOutline.appendChild(treeElement);\n    if (!this.treeOutline.selectedTreeElement) {\n      treeElement.select(/* omitFocus */ true, /* selectedByUser */ true);\n    }\n    // Expand until at least a certain number of matches is expanded.\n    if (this.matchesExpandedCount < matchesExpandedByDefault) {\n      treeElement.expand();\n    }\n    this.matchesExpandedCount += searchResult.matchesCount();\n    treeElement.listItemElement.classList.add('search-result');\n    // clang-format off\n    render(html`\n      <span class=\"search-result-file-name\">${searchResult.label()}\n        <span class=\"search-result-dash\">${'\\u2014'}</span>\n        <span class=\"search-result-qualifier\">${searchResult.description()}</span>\n      </span>\n      <span class=\"search-result-matches-count\"\n          aria-label=${i18nString(UIStrings.matchesCountS, {PH1: searchResult.matchesCount()})}>\n          ${searchResult.matchesCount()}\n      </span>`,\n    treeElement.listItemElement);\n    // clang-format on\n    treeElement.tooltip = searchResult.description();\n  }\n\n  private updateMatchesUI(element: UI.TreeOutline.TreeElement): void {\n    const searchResult = this.treeElements.get(element);\n    if (!searchResult || this.initializedTreeElements.has(element)) {\n      return;\n    }\n    element.removeChildren();\n    const toIndex = Math.min(searchResult.matchesCount(), matchesShownAtOnce);\n    if (toIndex < searchResult.matchesCount()) {\n      this.appendSearchMatches(element, 0, toIndex - 1);\n      this.appendShowMoreMatchesElement(element, toIndex - 1);\n    } else {\n      this.appendSearchMatches(element, 0, toIndex);\n    }\n    this.initializedTreeElements.add(element);\n  }\n\n  private appendSearchMatches(element: UI.TreeOutline.TreeElement, fromIndex: number, toIndex: number): void {\n    const searchResult = this.treeElements.get(element);\n    if (!searchResult) {\n      return;\n    }\n    const queries = this.searchConfig.queries();\n    const regexes = [];\n    for (let i = 0; i < queries.length; ++i) {\n      regexes.push(Platform.StringUtilities.createSearchRegex(\n          queries[i], !this.searchConfig.ignoreCase(), this.searchConfig.isRegex()));\n    }\n\n    for (let i = fromIndex; i < toIndex; ++i) {\n      let lineContent = searchResult.matchLineContent(i);\n      let matchRanges: TextUtils.TextRange.SourceRange[] = [];\n      // Searching in scripts and network response bodies produces one result entry per match. We can skip re-doing the\n      // search since we have the exact match range.\n      // For matches found in headers or the request URL we re-do the search to find all match ranges.\n      const column = searchResult.matchColumn(i);\n      const matchLength = searchResult.matchLength(i);\n      if (column !== undefined && matchLength !== undefined) {\n        const {matchRange, lineSegment} =\n            lineSegmentForMatch(lineContent, new TextUtils.TextRange.SourceRange(column, matchLength));\n        lineContent = lineSegment;\n        matchRanges = [matchRange];\n      } else {\n        lineContent = lineContent.trim();\n        for (let j = 0; j < regexes.length; ++j) {\n          matchRanges = matchRanges.concat(this.regexMatchRanges(lineContent, regexes[j]));\n        }\n        ({lineSegment: lineContent, matchRanges} = lineSegmentForMultipleMatches(lineContent, matchRanges));\n      }\n\n      const resultLabel = searchResult.matchLabel(i);\n\n      const searchMatchElement = new UI.TreeOutline.TreeElement();\n      element.appendChild(searchMatchElement);\n      // clang-format off\n      render(html`\n        <button class=\"devtools-link text-button link-style search-match-link\"\n                jslog=\"Link; context: search-match; track: click\" role=\"link\" tabindex=\"0\"\n                @click=${() => void Common.Revealer.reveal(searchResult.matchRevealable(i))}>\n          <span class=\"search-match-line-number\"\n              aria-label=${typeof resultLabel === 'number' && !isNaN(resultLabel)\n                             ?  i18nString(UIStrings.lineS, {PH1: resultLabel}) : resultLabel}>\n            ${resultLabel}\n          </span>\n          <span class=\"search-match-content\" aria-label=\"${lineContent} line\">\n            ${lineContent}\n          </span>\n        </button>`,\n        searchMatchElement.listItemElement);\n      // clang-format on\n      const contentSpan = searchMatchElement.listItemElement.querySelector('.search-match-content') as HTMLElement;\n      UI.UIUtils.highlightRangesWithStyleClass(contentSpan, matchRanges, 'highlighted-search-result');\n      searchMatchElement.listItemElement.className = 'search-match';\n      searchMatchElement.listItemElement.addEventListener('keydown', event => {\n        if (event.key === 'Enter') {\n          event.consume(true);\n          void Common.Revealer.reveal(searchResult.matchRevealable(i));\n        }\n      });\n      searchMatchElement.tooltip = lineContent;\n    }\n  }\n\n  private appendShowMoreMatchesElement(element: UI.TreeOutline.TreeElement, startMatchIndex: number): void {\n    const searchResult = this.treeElements.get(element);\n    if (!searchResult) {\n      return;\n    }\n    const matchesLeftCount = searchResult.matchesCount() - startMatchIndex;\n    const showMoreMatchesText = i18nString(UIStrings.showDMore, {PH1: matchesLeftCount});\n    const showMoreMatchesTreeElement = new UI.TreeOutline.TreeElement(showMoreMatchesText);\n    element.appendChild(showMoreMatchesTreeElement);\n    showMoreMatchesTreeElement.listItemElement.classList.add('show-more-matches');\n    showMoreMatchesTreeElement.onselect =\n        this.showMoreMatchesElementSelected.bind(this, element, showMoreMatchesTreeElement, startMatchIndex);\n  }\n\n  private regexMatchRanges(lineContent: string, regex: RegExp): TextUtils.TextRange.SourceRange[] {\n    regex.lastIndex = 0;\n    let match;\n    const matchRanges = [];\n    while ((regex.lastIndex < lineContent.length) && (match = regex.exec(lineContent))) {\n      matchRanges.push(new TextUtils.TextRange.SourceRange(match.index, match[0].length));\n    }\n\n    return matchRanges;\n  }\n\n  private showMoreMatchesElementSelected(\n      parentElement: UI.TreeOutline.TreeElement, showMoreMatchesTreeElement: UI.TreeOutline.TreeElement,\n      startMatchIndex: number): boolean {\n    const searchResult = this.treeElements.get(parentElement);\n    if (!searchResult) {\n      return false;\n    }\n    parentElement.removeChild(showMoreMatchesTreeElement);\n    this.appendSearchMatches(parentElement, startMatchIndex, searchResult.matchesCount());\n    return false;\n  }\n}\n\nexport const matchesExpandedByDefault = 200;\nexport const matchesShownAtOnce = 20;\n\nconst DEFAULT_OPTS = {\n  prefixLength: 25,\n  maxLength: 1000,\n};\n\n/**\n * Takes a whole line and calculates the substring we want to actually display in the UI.\n * Also returns a translated {matchRange} (the parameter is relative to {lineContent} but the\n * caller needs it relative to {lineSegment}).\n *\n * {lineContent} is modified in the following way:\n *\n *   * Whitespace is trimmed from the beginning (unless the match includes it).\n *   * We only leave {options.prefixLength} characters before the match (and add an ellipsis in\n *     case we removed anything)\n *   * Truncate the remainder to {options.maxLength} characters.\n */\nexport function lineSegmentForMatch(\n    lineContent: string, range: TextUtils.TextRange.SourceRange,\n    optionsArg: Partial<typeof DEFAULT_OPTS> =\n        DEFAULT_OPTS): {lineSegment: string, matchRange: TextUtils.TextRange.SourceRange} {\n  const options = {...DEFAULT_OPTS, ...optionsArg};\n\n  // Remove the whitespace at the beginning, but stop where the match starts.\n  const attemptedTrimmedLine = lineContent.trimStart();\n  const potentiallyRemovedWhitespaceLength = lineContent.length - attemptedTrimmedLine.length;\n  const actuallyRemovedWhitespaceLength = Math.min(range.offset, potentiallyRemovedWhitespaceLength);\n\n  // Apply {options.prefixLength} and {options.maxLength}.\n  const lineSegmentBegin = Math.max(actuallyRemovedWhitespaceLength, range.offset - options.prefixLength);\n  const lineSegmentEnd = Math.min(lineContent.length, lineSegmentBegin + options.maxLength);\n  const lineSegmentPrefix = lineSegmentBegin > actuallyRemovedWhitespaceLength ? '…' : '';\n\n  // Build the resulting line segment and match range.\n  const lineSegment = lineSegmentPrefix + lineContent.substring(lineSegmentBegin, lineSegmentEnd);\n  const rangeOffset = range.offset - lineSegmentBegin + lineSegmentPrefix.length;\n  const rangeLength = Math.min(range.length, lineSegment.length - rangeOffset);\n  const matchRange = new TextUtils.TextRange.SourceRange(rangeOffset, rangeLength);\n\n  return {lineSegment, matchRange};\n}\n\n/**\n * Takes a line and multiple match ranges and trims/cuts the line accordingly.\n * The match ranges are then adjusted to reflect the transformation.\n *\n * Ideally prefer `lineSegmentForMatch`, it can center the line on the match\n * whereas this method risks cutting matches out of the string.\n */\nfunction lineSegmentForMultipleMatches(lineContent: string, ranges: TextUtils.TextRange.SourceRange[]):\n    {lineSegment: string, matchRanges: TextUtils.TextRange.SourceRange[]} {\n  let trimBy = 0;\n  let matchRanges = ranges;\n  if (matchRanges.length > 0 && matchRanges[0].offset > 20) {\n    trimBy = 15;\n  }\n  let lineSegment = lineContent.substring(trimBy, 1000 + trimBy);\n  if (trimBy) {\n    matchRanges =\n        matchRanges.map(range => new TextUtils.TextRange.SourceRange(range.offset - trimBy + 1, range.length));\n    lineSegment = '…' + lineSegment;\n  }\n  return {lineSegment, matchRanges};\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2016 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n:host {\n  padding: 0;\n  margin: 0;\n  overflow-y: auto;\n}\n\n.tree-outline {\n  padding: 0;\n}\n\n.tree-outline ol {\n  padding: 0;\n}\n\n.tree-outline li {\n  height: 16px;\n}\n\nli.search-result {\n  cursor: pointer;\n  font-size: 12px;\n  margin-top: 8px;\n  padding: 2px 0 2px 4px;\n  overflow-wrap: normal;\n  white-space: pre;\n}\n\nli.search-result:hover {\n  background-color: var(--sys-color-state-hover-on-subtle);\n}\n\nli.search-result .search-result-file-name {\n  color: var(--sys-color-on-surface);\n  flex: 1 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\nli.search-result .search-result-matches-count {\n  color: var(--sys-color-token-subtle);\n  margin: 0 8px;\n}\n\nli.search-result.expanded .search-result-matches-count {\n  display: none;\n}\n\nli.show-more-matches {\n  color: var(--sys-color-on-surface);\n  cursor: pointer;\n  margin: 8px 0 0 -4px;\n}\n\nli.show-more-matches:hover {\n  text-decoration: underline;\n}\n\nli.search-match {\n  margin: 2px 0;\n  overflow-wrap: normal;\n  white-space: pre;\n}\n\nli.search-match.selected:focus-visible {\n  background: var(--sys-color-tonal-container);\n}\n\nli.search-match::before {\n  display: none;\n}\n\nli.search-match .search-match-line-number {\n  color: var(--sys-color-token-subtle);\n  text-align: right;\n  vertical-align: top;\n  word-break: normal;\n  padding: 2px 4px 2px 6px;\n  margin-right: 5px;\n}\n\n.tree-outline .devtools-link {\n  text-decoration: none;\n  display: block;\n  flex: auto;\n}\n\nli.search-match .search-match-content {\n  color: var(--sys-color-on-surface);\n}\n\nol.children.expanded {\n  padding-bottom: 4px;\n}\n\nli.search-match .link-style.search-match-link {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-left: 9px;\n  text-align: left;\n}\n\n.search-result-qualifier {\n  color: var(--sys-color-token-subtle);\n}\n\n.search-result-dash {\n  color: var(--sys-color-surface-variant);\n  margin: 0 4px;\n}\n\n/*# sourceURL=${import.meta.resolve('./searchResultsPane.css')} */`;", "// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\n\nexport interface SearchResult {\n  label(): string;\n\n  description(): string;\n\n  matchesCount(): number;\n\n  matchLabel(index: number): string;\n\n  matchLineContent(index: number): string;\n\n  matchRevealable(index: number): Object;\n\n  matchColumn(index: number): number|undefined;\n\n  matchLength(index: number): number|undefined;\n}\n\nexport interface SearchScope {\n  performSearch(\n      searchConfig: Workspace.SearchConfig.SearchConfig, progress: Common.Progress.Progress,\n      searchResultCallback: (arg0: SearchResult) => void,\n      searchFinishedCallback: (arg0: boolean) => void): void|Promise<void>;\n\n  performIndexing(progress: Common.Progress.Progress): void;\n\n  stopSearch(): void;\n}\n", "// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../ui/legacy/legacy.js';\nimport '../../ui/components/icon_button/icon_button.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {Directives, html, render} from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {SearchResultsPane} from './SearchResultsPane.js';\nimport type {SearchResult, SearchScope} from './SearchScope.js';\nimport searchViewStyles from './searchView.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Placeholder text of a search bar\n   */\n  find: 'Find',\n  /**\n   * @description Tooltip text on a toggle to enable search by matching case of the input\n   */\n  enableCaseSensitive: 'Enable case sensitive search',\n  /**\n   * @description Tooltip text on a toggle to disable search by matching case of the input\n   */\n  disableCaseSensitive: 'Disable case sensitive search',\n  /**\n   * @description Tooltip text on a toggle to enable searching with regular expression\n   */\n  enableRegularExpression: 'Enable regular expressions',\n  /**\n   * @description Tooltip text on a toggle to disable searching with regular expression\n   */\n  disableRegularExpression: 'Disable regular expressions',\n  /**\n   * @description Text to refresh the page\n   */\n  refresh: 'Refresh',\n  /**\n   * @description Tooltip text to clear the search input field\n   */\n  clearInput: 'Clear',\n  /**\n   * @description Text to clear content\n   */\n  clear: 'Clear search',\n  /**\n   * @description Search message element text content in Search View of the Search tab\n   */\n  indexing: 'Indexing…',\n  /**\n   * @description Text to indicate the searching is in progress\n   */\n  searching: 'Searching…',\n  /**\n   * @description Text in Search View of the Search tab\n   */\n  indexingInterrupted: 'Indexing interrupted.',\n  /**\n   * @description Search results message element text content in Search View of the Search tab\n   */\n  foundMatchingLineInFile: 'Found 1 matching line in 1 file.',\n  /**\n   * @description Search results message element text content in Search View of the Search tab\n   * @example {2} PH1\n   */\n  foundDMatchingLinesInFile: 'Found {PH1} matching lines in 1 file.',\n  /**\n   * @description Search results message element text content in Search View of the Search tab\n   * @example {2} PH1\n   * @example {2} PH2\n   */\n  foundDMatchingLinesInDFiles: 'Found {PH1} matching lines in {PH2} files.',\n  /**\n   * @description Search results message element text content in Search View of the Search tab\n   */\n  noMatchesFound: 'No matches found',\n  /**\n   * @description Search results message element text content in Search View of the Search tab\n   */\n  nothingMatchedTheQuery: 'Nothing matched your search query',\n  /**\n   * @description Text in Search View of the Search tab\n   */\n  searchFinished: 'Search finished.',\n  /**\n   * @description Text in Search View of the Search tab\n   */\n  searchInterrupted: 'Search interrupted.',\n  /**\n   * @description Text in Search View of the Search tab if user hasn't started the search\n   * @example {Enter} PH1\n   */\n  typeAndPressSToSearch: 'Type and press {PH1} to search',\n  /**\n   * @description Text in Search view of the Search tab if user hasn't started the search\n   */\n  noSearchResult: 'No search results',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/search/SearchView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst {ref, live} = Directives;\nconst {widgetConfig} = UI.Widget;\n\ninterface SearchViewInput {\n  query: string;\n  matchCase: boolean;\n  isRegex: boolean;\n  searchMessage: string;\n  searchResultsMessage: string;\n  searchResultsPane: SearchResultsPane|null;\n  progress: Common.Progress.Progress|null;\n  onQueryChange: (query: string) => void;\n  onQueryKeyDown: (evt: KeyboardEvent) => void;\n  onPanelKeyDown: (evt: KeyboardEvent) => void;\n  onClearSearchInput: () => void;\n  onToggleRegex: () => void;\n  onToggleMatchCase: () => void;\n  onRefresh: () => void;\n  onClearSearch: () => void;\n}\n\ninterface SearchViewOutput {\n  focusSearchInput: () => void;\n}\n\ntype View = (input: SearchViewInput, output: SearchViewOutput, target: HTMLElement) => void;\n\nexport const DEFAULT_VIEW: View = (input, output, target) => {\n  const {\n    query,\n    matchCase,\n    isRegex,\n    searchMessage,\n    searchResultsPane,\n    searchResultsMessage,\n    progress,\n    onQueryChange,\n    onQueryKeyDown,\n    onPanelKeyDown,\n    onClearSearchInput,\n    onToggleRegex,\n    onToggleMatchCase,\n    onRefresh,\n    onClearSearch,\n  } = input;\n  let header = '', text = '';\n  if (!query) {\n    header = i18nString(UIStrings.noSearchResult);\n    text = i18nString(\n        UIStrings.typeAndPressSToSearch,\n        {PH1: UI.KeyboardShortcut.KeyboardShortcut.shortcutToString(UI.KeyboardShortcut.Keys.Enter)});\n  } else if (progress) {\n    header = i18nString(UIStrings.searching);\n  } else if (!searchResultsPane) {\n    header = i18nString(UIStrings.noMatchesFound);\n    text = i18nString(UIStrings.nothingMatchedTheQuery);\n  }\n  // clang-format off\n  render(html`\n      <style>${searchViewStyles}</style>\n      <div class=\"search-drawer-header\" @keydown=${onPanelKeyDown}>\n        <div class=\"search-container\">\n          <div class=\"toolbar-item-search\">\n            <devtools-icon name=\"search\"></devtools-icon>\n            <input type=\"text\"\n                class=\"search-toolbar-input\"\n                placeholder=${i18nString(UIStrings.find)}\n                jslog=${VisualLogging.textField().track({\n                    change: true, keydown: 'ArrowUp|ArrowDown|Enter'})}\n                aria-label=${i18nString(UIStrings.find)}\n                size=\"100\" results=\"0\"\n                .value=${live(query)}\n                @keydown=${onQueryKeyDown}\n                @input=${(e: Event) => onQueryChange((e.target as HTMLInputElement).value)}\n                ${ref(e => {\n                  output.focusSearchInput = () => {\n                    if (e instanceof HTMLInputElement) {\n                      e.focus();\n                      e.select();\n                    }\n                  };\n                })}>\n            <devtools-button class=\"clear-button\" tabindex=\"-1\"\n                @click=${onClearSearchInput}\n                .data=${{\n                  variant: Buttons.Button.Variant.ICON,\n                  iconName: 'cross-circle-filled',\n                  jslogContext: 'clear-input',\n                  size: Buttons.Button.Size.SMALL,\n                  title: i18nString(UIStrings.clearInput),\n                } as Buttons.Button.ButtonData}\n            ></devtools-button>\n            <devtools-button @click=${onToggleRegex} .data=${{\n                variant: Buttons.Button.Variant.ICON_TOGGLE,\n                iconName: 'regular-expression',\n                toggledIconName: 'regular-expression',\n                toggleType: Buttons.Button.ToggleType.PRIMARY,\n                size: Buttons.Button.Size.SMALL,\n                toggled: isRegex,\n                title: isRegex ? i18nString(UIStrings.disableRegularExpression) : i18nString(UIStrings.enableRegularExpression),\n                jslogContext: 'regular-expression',\n              } as Buttons.Button.ButtonData}\n              class=\"regex-button\"\n            ></devtools-button>\n            <devtools-button @click=${onToggleMatchCase} .data=${{\n                variant: Buttons.Button.Variant.ICON_TOGGLE,\n                iconName: 'match-case',\n                toggledIconName: 'match-case',\n                toggleType: Buttons.Button.ToggleType.PRIMARY,\n                size: Buttons.Button.Size.SMALL,\n                toggled: matchCase,\n                title: matchCase ? i18nString(UIStrings.disableCaseSensitive) : i18nString(UIStrings.enableCaseSensitive),\n                jslogContext: 'match-case',\n              } as Buttons.Button.ButtonData}\n              class=\"match-case-button\"\n            ></devtools-button>\n          </div>\n        </div>\n        <devtools-toolbar class=\"search-toolbar\" jslog=${VisualLogging.toolbar()}>\n          <devtools-button title=${i18nString(UIStrings.refresh)} @click=${onRefresh}\n              .data=${{\n                variant: Buttons.Button.Variant.TOOLBAR,\n                iconName: 'refresh',\n                jslogContext: 'search.refresh',\n              } as Buttons.Button.ButtonData}></devtools-button>\n          <devtools-button title=${i18nString(UIStrings.clear)} @click=${onClearSearch}\n              .data=${{\n                variant: Buttons.Button.Variant.TOOLBAR,\n                iconName: 'clear',\n                jslogContext: 'search.clear',\n              } as Buttons.Button.ButtonData}></devtools-button>\n        </devtools-toolbar>\n      </div>\n      <div class=\"search-results\" @keydown=${onPanelKeyDown}>\n        ${searchResultsPane\n           ? html`<devtools-widget .widgetConfig=${widgetConfig(UI.Widget.VBox)}>\n              ${searchResultsPane.element}\n            </devtools-widget>`\n           : html`<devtools-widget .widgetConfig=${widgetConfig(UI.EmptyWidget.EmptyWidget, {header, text})}>\n                  </devtools-widget>`}\n      </div>\n      <div class=\"search-toolbar-summary\" @keydown=${onPanelKeyDown}>\n        <div class=\"search-message\">${searchMessage}</div>\n        <div class=\"flex-centered\">\n          ${progress ? html`\n            <devtools-progress .title=${progress.title ?? ''}\n                               .worked=${progress.worked} .totalWork=${progress.totalWork}>\n            </devtools-progress>` : ''}\n        </div>\n        <div class=\"search-message\">${searchResultsMessage}</div>\n      </div>`, target);\n  // clang-format on\n};\n\nexport class SearchView extends UI.Widget.VBox {\n  readonly #view: View;\n  #focusSearchInput = (): void => {};\n  #isIndexing: boolean;\n  #searchId: number;\n  #searchMatchesCount: number;\n  #searchResultsCount: number;\n  #nonEmptySearchResultsCount: number;\n  #searchingView: UI.Widget.Widget|null;\n  #searchConfig: Workspace.SearchConfig.SearchConfig|null;\n  #pendingSearchConfig: Workspace.SearchConfig.SearchConfig|null;\n  #searchResultsPane: SearchResultsPane|null;\n  #progress: Common.Progress.Progress|null;\n  #query: string;\n  #matchCase = false;\n  #isRegex = false;\n  #searchMessage = '';\n  #searchResultsMessage = '';\n  readonly #advancedSearchConfig: Common.Settings.Setting<{\n    query: string,\n    ignoreCase: boolean,\n    isRegex: boolean,\n  }>;\n  #searchScope: SearchScope|null;\n\n  // We throttle adding search results, otherwise we trigger DOM layout for each\n  // result added.\n  #throttler: Common.Throttler.Throttler;\n  #pendingSearchResults: SearchResult[] = [];\n\n  constructor(settingKey: string, throttler: Common.Throttler.Throttler, view = DEFAULT_VIEW) {\n    super({\n      jslog: `${VisualLogging.panel('search').track({resize: true})}`,\n      useShadowDom: true,\n    });\n    this.#view = view;\n    this.setMinimumSize(0, 40);\n\n    this.#isIndexing = false;\n    this.#searchId = 1;\n    this.#query = '';\n    this.#searchMatchesCount = 0;\n    this.#searchResultsCount = 0;\n    this.#nonEmptySearchResultsCount = 0;\n    this.#searchingView = null;\n    this.#searchConfig = null;\n    this.#pendingSearchConfig = null;\n    this.#searchResultsPane = null;\n    this.#progress = null;\n    this.#throttler = throttler;\n\n    this.#advancedSearchConfig = Common.Settings.Settings.instance().createLocalSetting(\n        settingKey + '-search-config', new Workspace.SearchConfig.SearchConfig('', true, false).toPlainObject());\n\n    this.performUpdate();\n    this.#load();\n    this.performUpdate();\n    this.#searchScope = null;\n  }\n\n  override performUpdate(): void {\n    const input: SearchViewInput = {\n      query: this.#query,\n      matchCase: this.#matchCase,\n      isRegex: this.#isRegex,\n      searchMessage: this.#searchMessage,\n      searchResultsPane: this.#searchResultsPane,\n      searchResultsMessage: this.#searchResultsMessage,\n      progress: this.#progress,\n      onQueryChange: (query: string) => {\n        this.#query = query;\n      },\n      onQueryKeyDown: this.#onQueryKeyDown.bind(this),\n      onPanelKeyDown: this.#onPanelKeyDown.bind(this),\n      onClearSearchInput: this.#onClearSearchInput.bind(this),\n      onToggleRegex: this.#onToggleRegex.bind(this),\n      onToggleMatchCase: this.#onToggleMatchCase.bind(this),\n      onRefresh: this.#onRefresh.bind(this),\n      onClearSearch: this.#onClearSearch.bind(this),\n    };\n    const that = this;\n    const output: SearchViewOutput = {\n      set focusSearchInput(value: () => void) {\n        that.#focusSearchInput = value;\n      }\n    };\n    this.#view(input, output, this.contentElement);\n  }\n\n  #onToggleRegex(): void {\n    this.#isRegex = !this.#isRegex;\n    this.performUpdate();\n  }\n\n  #onToggleMatchCase(): void {\n    this.#matchCase = !this.#matchCase;\n    this.performUpdate();\n  }\n\n  #buildSearchConfig(): Workspace.SearchConfig.SearchConfig {\n    return new Workspace.SearchConfig.SearchConfig(this.#query, !this.#matchCase, this.#isRegex);\n  }\n\n  toggle(queryCandidate: string, searchImmediately?: boolean): void {\n    this.#query = queryCandidate;\n    this.requestUpdate();\n    void this.updateComplete.then(() => {\n      this.focus();\n    });\n\n    this.#initScope();\n    if (searchImmediately) {\n      this.#onRefresh();\n    } else {\n      this.#startIndexing();\n    }\n  }\n\n  createScope(): SearchScope {\n    throw new Error('Not implemented');\n  }\n\n  #initScope(): void {\n    this.#searchScope = this.createScope();\n  }\n\n  #onIndexingFinished(): void {\n    if (!this.#progress) {\n      return;\n    }\n\n    const finished = !this.#progress.canceled;\n    this.#progress = null;\n    this.#isIndexing = false;\n    this.#searchMessage = finished ? '' : i18nString(UIStrings.indexingInterrupted);\n    if (!finished) {\n      this.#pendingSearchConfig = null;\n    }\n    this.performUpdate();\n    if (!this.#pendingSearchConfig) {\n      return;\n    }\n    const searchConfig = this.#pendingSearchConfig;\n    this.#pendingSearchConfig = null;\n    this.#startSearch(searchConfig);\n  }\n\n  #startIndexing(): void {\n    this.#isIndexing = true;\n    if (this.#progress) {\n      this.#progress.done = true;\n    }\n    this.#progress = new Common.Progress.ProgressProxy(\n        new Common.Progress.Progress(), this.#onIndexingFinished.bind(this), this.requestUpdate.bind(this));\n    this.#searchMessage = i18nString(UIStrings.indexing);\n    this.performUpdate();\n    if (this.#searchScope) {\n      this.#searchScope.performIndexing(this.#progress);\n    }\n  }\n\n  #onClearSearchInput(): void {\n    this.#query = '';\n    this.requestUpdate();\n    this.#save();\n    this.focus();\n  }\n\n  #onSearchResult(searchId: number, searchResult: SearchResult): void {\n    if (searchId !== this.#searchId || !this.#progress) {\n      return;\n    }\n    if (this.#progress?.canceled) {\n      this.#onIndexingFinished();\n      return;\n    }\n    if (!this.#searchResultsPane) {\n      this.#searchResultsPane = this.createSearchResultsPane();\n    }\n    this.#pendingSearchResults.push(searchResult);\n    void this.#throttler.schedule(async () => this.#addPendingSearchResults());\n  }\n\n  protected createSearchResultsPane(): SearchResultsPane {\n    return new SearchResultsPane((this.#searchConfig as Workspace.SearchConfig.SearchConfig));\n  }\n\n  #addPendingSearchResults(): void {\n    for (const searchResult of this.#pendingSearchResults) {\n      this.#addSearchResult(searchResult);\n      if (searchResult.matchesCount()) {\n        this.#searchResultsPane?.addSearchResult(searchResult);\n      }\n    }\n    this.#pendingSearchResults = [];\n  }\n\n  #onSearchFinished(searchId: number, finished: boolean): void {\n    if (searchId !== this.#searchId || !this.#progress) {\n      return;\n    }\n    this.#progress = null;\n    this.#searchFinished(finished);\n    this.#searchConfig = null;\n    UI.ARIAUtils.LiveAnnouncer.alert(this.#searchMessage + ' ' + this.#searchResultsMessage);\n  }\n\n  #startSearch(searchConfig: Workspace.SearchConfig.SearchConfig): void {\n    this.#searchConfig = searchConfig;\n    if (this.#progress) {\n      this.#progress.done = true;\n    }\n    this.#progress =\n        new Common.Progress.ProgressProxy(new Common.Progress.Progress(), undefined, this.requestUpdate.bind(this));\n    this.#searchStarted();\n    if (this.#searchScope) {\n      void this.#searchScope.performSearch(\n          searchConfig, this.#progress, this.#onSearchResult.bind(this, this.#searchId),\n          this.#onSearchFinished.bind(this, this.#searchId));\n    }\n  }\n\n  #resetSearch(): void {\n    this.#stopSearch();\n    this.#searchResultsPane = null;\n    this.#searchMessage = '';\n    this.#searchResultsMessage = '';\n    this.performUpdate();\n  }\n\n  #stopSearch(): void {\n    if (this.#progress && !this.#isIndexing) {\n      this.#progress.canceled = true;\n    }\n    if (this.#searchScope) {\n      this.#searchScope.stopSearch();\n    }\n    this.#searchConfig = null;\n  }\n\n  #searchStarted(): void {\n    this.#searchMatchesCount = 0;\n    this.#searchResultsCount = 0;\n    this.#nonEmptySearchResultsCount = 0;\n    if (!this.#searchingView) {\n      this.#searchingView = new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.searching), '');\n    }\n    this.#searchMessage = i18nString(UIStrings.searching);\n    this.performUpdate();\n    this.#updateSearchResultsMessage();\n  }\n\n  #updateSearchResultsMessage(): void {\n    if (this.#searchMatchesCount && this.#searchResultsCount) {\n      if (this.#searchMatchesCount === 1 && this.#nonEmptySearchResultsCount === 1) {\n        this.#searchResultsMessage = i18nString(UIStrings.foundMatchingLineInFile);\n      } else if (this.#searchMatchesCount > 1 && this.#nonEmptySearchResultsCount === 1) {\n        this.#searchResultsMessage = i18nString(UIStrings.foundDMatchingLinesInFile, {PH1: this.#searchMatchesCount});\n      } else {\n        this.#searchResultsMessage = i18nString(\n            UIStrings.foundDMatchingLinesInDFiles,\n            {PH1: this.#searchMatchesCount, PH2: this.#nonEmptySearchResultsCount});\n      }\n    } else {\n      this.#searchResultsMessage = '';\n    }\n    this.performUpdate();\n  }\n\n  #addSearchResult(searchResult: SearchResult): void {\n    const matchesCount = searchResult.matchesCount();\n    this.#searchMatchesCount += matchesCount;\n    this.#searchResultsCount++;\n    if (matchesCount) {\n      this.#nonEmptySearchResultsCount++;\n    }\n    this.#updateSearchResultsMessage();\n  }\n\n  #searchFinished(finished: boolean): void {\n    this.#searchMessage = finished ? i18nString(UIStrings.searchFinished) : i18nString(UIStrings.searchInterrupted);\n    this.performUpdate();\n  }\n\n  override focus(): void {\n    this.#focusSearchInput();\n  }\n\n  override willHide(): void {\n    this.#stopSearch();\n  }\n\n  #onQueryKeyDown(event: KeyboardEvent): void {\n    this.#save();\n    switch (event.keyCode) {\n      case UI.KeyboardShortcut.Keys.Enter.code:\n        this.#onRefresh();\n        break;\n    }\n  }\n\n  /**\n   * Handles keydown event on panel itself for handling expand/collapse all shortcut\n   *\n   * We use `event.code` instead of `event.key` here to check whether the shortcut is triggered.\n   * The reason is, `event.key` is dependent on the modification keys, locale and keyboard layout.\n   * Usually it is useful when we care about the character that needs to be printed.\n   *\n   * However, our aim in here is to assign a shortcut to the physical key combination on the keyboard\n   * not on the character that the key combination prints.\n   *\n   * For example, `Cmd + [` shortcut in global shortcuts map to focusing on previous panel.\n   * In Turkish - Q keyboard layout, the key combination that triggers the shortcut prints `ğ`\n   * character. Whereas in Turkish - Q Legacy keyboard layout, the shortcut that triggers focusing\n   * on previous panel prints `[` character. So, if we use `event.key` and check\n   * whether it is `[`, we break the shortcut in Turkish - Q keyboard layout.\n   *\n   * @param event KeyboardEvent\n   */\n  #onPanelKeyDown(event: KeyboardEvent): void {\n    const isMac = Host.Platform.isMac();\n    // \"Command + Alt + ]\" for Mac\n    const shouldShowAllForMac =\n        isMac && event.metaKey && !event.ctrlKey && event.altKey && event.code === 'BracketRight';\n    // \"Ctrl + Shift + }\" for other platforms\n    const shouldShowAllForOtherPlatforms =\n        !isMac && event.ctrlKey && !event.metaKey && event.shiftKey && event.code === 'BracketRight';\n    // \"Command + Alt + [\" for Mac\n    const shouldCollapseAllForMac =\n        isMac && event.metaKey && !event.ctrlKey && event.altKey && event.code === 'BracketLeft';\n    // \"Command + Alt + {\" for other platforms\n    const shouldCollapseAllForOtherPlatforms =\n        !isMac && event.ctrlKey && !event.metaKey && event.shiftKey && event.code === 'BracketLeft';\n\n    if (shouldShowAllForMac || shouldShowAllForOtherPlatforms) {\n      this.#searchResultsPane?.showAllMatches();\n      void VisualLogging.logKeyDown(event.currentTarget, event, 'show-all-matches');\n    } else if (shouldCollapseAllForMac || shouldCollapseAllForOtherPlatforms) {\n      this.#searchResultsPane?.collapseAllResults();\n      void VisualLogging.logKeyDown(event.currentTarget, event, 'collapse-all-results');\n    }\n  }\n\n  #save(): void {\n    this.#advancedSearchConfig.set(this.#buildSearchConfig().toPlainObject());\n  }\n\n  #load(): void {\n    const searchConfig = Workspace.SearchConfig.SearchConfig.fromPlainObject(this.#advancedSearchConfig.get());\n    this.#query = searchConfig.query();\n\n    this.#matchCase = !searchConfig.ignoreCase();\n    this.#isRegex = searchConfig.isRegex();\n    this.requestUpdate();\n  }\n\n  #onRefresh(): void {\n    const searchConfig = this.#buildSearchConfig();\n    if (!searchConfig.query()?.length) {\n      return;\n    }\n    this.#resetSearch();\n    ++this.#searchId;\n    this.#initScope();\n    if (!this.#isIndexing) {\n      this.#startIndexing();\n    }\n    this.#pendingSearchConfig = searchConfig;\n  }\n\n  #onClearSearch(): void {\n    this.#resetSearch();\n    this.#onClearSearchInput();\n  }\n\n  get throttlerForTest(): Common.Throttler.Throttler {\n    return this.#throttler;\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2014 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.search-drawer-header {\n  align-items: center;\n  flex-shrink: 0;\n  overflow: hidden;\n  display: inline-flex;\n  min-width: 150px;\n\n  .search-container {\n    border-bottom: 1px solid var(--sys-color-divider);\n    display: flex;\n    height: 100%;\n    align-items: center;\n    flex-grow: 1;\n  }\n\n  .toolbar-item-search {\n    flex-grow: 1;\n    box-shadow: inset 0 0 0 2px transparent;\n    box-sizing: border-box;\n    height: var(--sys-size-9);\n    margin-left: var(--sys-size-3);\n    padding: 0 var(--sys-size-2) 0 var(--sys-size-5);\n    border-radius: 100px;\n    position: relative;\n    display: flex;\n    align-items: center;\n    background-color: var(--sys-color-cdt-base);\n\n    &:has(input:focus) {\n      box-shadow: inset 0 0 0 2px var(--sys-color-state-focus-ring);\n    }\n\n    &:has(input:hover)::before {\n      content: \"\";\n      box-sizing: inherit;\n      height: 100%;\n      width: 100%;\n      position: absolute;\n      border-radius: 100px;\n      left: 0;\n      background-color: var(--sys-color-state-hover-on-subtle);\n    }\n\n    & > devtools-icon {\n      color: var(--sys-color-on-surface-subtle);\n      width: var(--sys-size-8);\n      height: var(--sys-size-8);\n      margin-right: var(--sys-size-3);\n    }\n\n    & > devtools-button:last-child {\n      margin-right: var(--sys-size-4);\n    }\n  }\n\n  .search-toolbar-input {\n    appearance: none;\n    color: var(--sys-color-on-surface);\n    background-color: transparent;\n    border: 0;\n    z-index: 1;\n    flex: 1;\n\n    &::placeholder {\n      color: var(--sys-color-on-surface-subtle);\n    }\n\n    &:placeholder-shown + .clear-button {\n      display: none;\n    }\n\n    &::-webkit-search-cancel-button {\n      display: none;\n    }\n  }\n}\n\n.search-toolbar {\n  background-color: var(--sys-color-cdt-base-container);\n  border-bottom: 1px solid var(--sys-color-divider);\n}\n\n.search-toolbar-summary {\n  background-color: var(--sys-color-cdt-base-container);\n  border-top: 1px solid var(--sys-color-divider);\n  padding-left: 5px;\n  flex: 0 0 19px;\n  display: flex;\n  padding-right: 5px;\n}\n\n.search-results:has(.empty-state) + .search-toolbar-summary {\n  display: none;\n}\n\n.search-toolbar-summary .search-message {\n  padding-top: 2px;\n  padding-left: 1ex;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.search-results {\n  overflow-y: auto;\n  display: flex;\n  flex: auto;\n}\n\n.search-results > div {\n  flex: auto;\n}\n\n/*# sourceURL=${import.meta.resolve('./searchView.css')} */`;"],
  "mappings": "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",
  "names": ["Common", "i18n", "UI", "html", "render", "UIStrings", "str_", "i18nString", "render", "html"]
}
