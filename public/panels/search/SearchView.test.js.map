{"version":3,"file":"SearchView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/search/SearchView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport {\n  assertScreenshot,\n  renderElementIntoDOM,\n} from '../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {createViewFunctionStub, type ViewFunctionStub} from '../../testing/ViewFunctionHelpers.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Search from './search.js';\n\ninterface PerformSearchArgs {\n  searchConfig: Workspace.SearchConfig.SearchConfig;\n  progress: Common.Progress.Progress;\n  searchResultCallback: (arg0: Search.SearchScope.SearchResult) => void;\n  searchFinishedCallback: (arg0: boolean) => void;\n}\n\nclass FakeSearchScope implements Search.SearchScope.SearchScope {\n  readonly performSearchCalledPromise: Promise<PerformSearchArgs>;\n  readonly #resolvePerformSearchCalledPromise: (args: PerformSearchArgs) => void;\n\n  constructor() {\n    const {promise, resolve} = Promise.withResolvers<PerformSearchArgs>();\n    this.performSearchCalledPromise = promise;\n    this.#resolvePerformSearchCalledPromise = resolve;\n  }\n\n  performSearch(\n      searchConfig: Workspace.SearchConfig.SearchConfig, progress: Common.Progress.Progress,\n      searchResultCallback: (arg0: Search.SearchScope.SearchResult) => void,\n      searchFinishedCallback: (arg0: boolean) => void): void|Promise<void> {\n    this.#resolvePerformSearchCalledPromise({searchConfig, progress, searchResultCallback, searchFinishedCallback});\n  }\n\n  performIndexing(progress: Common.Progress.Progress): void {\n    setTimeout(() => {\n      progress.done = true;\n    }, 0);  // Allow microtasks to run.\n  }\n\n  stopSearch(): void {\n  }\n}\n\nclass TestSearchView extends Search.SearchView.SearchView {\n  readonly #scopeCreator: () => Search.SearchScope.SearchScope;\n  /**\n   * `SearchView` resets and lazily re-creates the search results pane for each search.\n   * To provide a fake instance we install a get/set accessor for the original property\n   * that behaves normally with no override, but returns the mock if one is provided.\n   */\n  view: ViewFunctionStub<typeof Search.SearchView.SearchView>;\n\n  constructor(scopeCreator: () => Search.SearchScope.SearchScope) {\n    const view = createViewFunctionStub(Search.SearchView.SearchView);\n    super('fake', view);\n    this.view = view;\n    this.#scopeCreator = scopeCreator;\n  }\n\n  override createScope(): Search.SearchScope.SearchScope {\n    return this.#scopeCreator();\n  }\n\n  /** Fills in the UI elements of the SearchView and hits 'Enter'. */\n  async triggerSearch(query: string, matchCase: boolean, isRegex: boolean): Promise<void> {\n    const input = await this.view.nextInput;\n    input.onQueryChange(query);\n    if (matchCase) {\n      input.onToggleMatchCase();\n    }\n    if (isRegex) {\n      input.onToggleRegex();\n    }\n\n    input.onQueryKeyDown(new KeyboardEvent('keydown', {keyCode: UI.KeyboardShortcut.Keys.Enter.code}));\n  }\n\n  get currentSearchResultMessage(): string {\n    return this.view.input.searchResultsMessage;\n  }\n}\n\nfunction makeInput(query: string): Search.SearchView.SearchViewInput {\n  return {\n    query,\n    matchCase: true,\n    isRegex: true,\n    searchConfig: null,\n    searchMessage: '',\n    searchResultsMessage: '',\n    searchResults: [],\n    progress: null,\n    onQueryChange: () => {},\n    onQueryKeyDown: () => {},\n    onPanelKeyDown: () => {},\n    onClearSearchInput: () => {},\n    onToggleRegex: () => {},\n    onToggleMatchCase: () => {},\n    onRefresh: () => {},\n    onClearSearch: () => {},\n  };\n}\n\nfunction makeOutput(): Search.SearchView.SearchViewOutput {\n  return {\n    focusSearchInput: () => {},\n    showAllMatches: () => {},\n    collapseAllResults: () => {},\n  };\n}\n\ndescribeWithEnvironment('SearchView view function', () => {\n  it('has a standard placeholder when nothing has been searched yet', async () => {\n    const input = makeInput('');\n    const output = makeOutput();\n    const target = document.createElement('div');\n    renderElementIntoDOM(target);\n    Search.SearchView.DEFAULT_VIEW(input, output, target);\n    await assertScreenshot('search/no-search.png');\n  });\n\n  it('notifies the user when no search results were found', async () => {\n    const input = makeInput('a query');\n    const output = makeOutput();\n    const target = document.createElement('div');\n    renderElementIntoDOM(target);\n    Search.SearchView.DEFAULT_VIEW(input, output, target);\n    await assertScreenshot('search/no-results.png');\n  });\n});\n\ndescribeWithEnvironment('SearchView', () => {\n  it('calls the search scope with the search config provided by the user via the UI', async () => {\n    const fakeScope = new FakeSearchScope();\n    const searchView = new TestSearchView(() => fakeScope);\n\n    await searchView.triggerSearch('a query', true, true);\n\n    const {searchConfig} = await fakeScope.performSearchCalledPromise;\n    assert.strictEqual(searchConfig.query(), 'a query');\n    assert.isFalse(searchConfig.ignoreCase());\n    assert.isTrue(searchConfig.isRegex());\n  });\n\n  it('has a standard placeholder when search has been cleared', async () => {\n    const fakeScope = new FakeSearchScope();\n    const searchView = new TestSearchView(() => fakeScope);\n\n    await searchView.triggerSearch('a query', true, true);\n\n    const {searchFinishedCallback} = await fakeScope.performSearchCalledPromise;\n    searchFinishedCallback(/* finished */ true);\n\n    // After search, shows that no matches were found.\n    const afterSearch = await searchView.view.nextInput;\n    assert.strictEqual(afterSearch.query, 'a query');\n    assert.lengthOf(afterSearch.searchResults, 0);\n\n    afterSearch.onClearSearch();\n\n    // After clearing, shows standard placeholder.\n    const afterClear = await searchView.view.nextInput;\n    assert.strictEqual(afterClear.query, '');\n    assert.lengthOf(afterClear.searchResults, 0);\n  });\n\n  it('updates the search result message with a count when search results are added', async () => {\n    const fakeScope = new FakeSearchScope();\n    const searchView = new TestSearchView(() => fakeScope);\n\n    await searchView.triggerSearch('a query', true, true);\n\n    const {searchResultCallback} = await fakeScope.performSearchCalledPromise;\n\n    searchResultCallback({matchesCount: () => 10} as Search.SearchScope.SearchResult);\n    await searchView.view.nextInput;\n    assert.strictEqual(searchView.currentSearchResultMessage, 'Found 10 matching lines in 1 file.');\n\n    searchResultCallback({matchesCount: () => 42} as Search.SearchScope.SearchResult);\n    await searchView.view.nextInput;\n    assert.strictEqual(searchView.currentSearchResultMessage, 'Found 52 matching lines in 2 files.');\n  });\n\n  it('forwards each SearchResult to the results pane', async () => {\n    const fakeScope = new FakeSearchScope();\n    const searchView = new TestSearchView(() => fakeScope);\n\n    await searchView.triggerSearch('a query', true, true);\n\n    const {searchResultCallback} = await fakeScope.performSearchCalledPromise;\n\n    const searchResult1 = ({matchesCount: () => 10}) as Search.SearchScope.SearchResult;\n    const searchResult2 = ({matchesCount: () => 42}) as Search.SearchScope.SearchResult;\n\n    searchResultCallback(searchResult1);\n    searchResultCallback(searchResult2);\n    const afterSearch = await searchView.view.nextInput;\n\n    assert.deepEqual(afterSearch.searchResults, [searchResult1, searchResult2]);\n  });\n});\n"]}