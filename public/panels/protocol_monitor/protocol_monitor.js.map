{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/protocol_monitor/JSONEditor.ts", "JSONEditor.css.js", "../../../../../../front_end/panels/protocol_monitor/ProtocolMonitor.ts", "protocolMonitor.css.js"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../ui/components/icon_button/icon_button.js';\nimport '../../ui/components/menus/menus.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as SuggestionInput from '../../ui/components/suggestion_input/suggestion_input.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Lit from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport * as ElementsComponents from '../elements/components/components.js';\n\nimport editorWidgetStyles from './JSONEditor.css.js';\n\nconst {html, render, Directives, nothing} = Lit;\nconst {live, classMap, repeat} = Directives;\n\nconst UIStrings = {\n  /**\n   *@description The title of a button that deletes a parameter.\n   */\n  deleteParameter: 'Delete parameter',\n  /**\n   *@description The title of a button that adds a parameter.\n   */\n  addParameter: 'Add a parameter',\n  /**\n   *@description The title of a button that reset the value of a parameters to its default value.\n   */\n  resetDefaultValue: 'Reset to default value',\n  /**\n   *@description The title of a button to add custom key/value pairs to object parameters with no keys defined\n   */\n  addCustomProperty: 'Add custom property',\n  /**\n   * @description The title of a button that sends a CDP command.\n   */\n  sendCommandCtrlEnter: 'Send command - Ctrl+Enter',\n  /**\n   * @description The title of a button that sends a CDP command.\n   */\n  sendCommandCmdEnter: 'Send command - âŒ˜+Enter',\n  /**\n   * @description The title of a button that copies a CDP command.\n   */\n  copyCommand: 'Copy command',\n  /**\n   * @description A label for a select input that allows selecting a CDP target to send the commands to.\n   */\n  selectTarget: 'Select a target',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/protocol_monitor/JSONEditor.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport const enum ParameterType {\n  STRING = 'string',\n  NUMBER = 'number',\n  BOOLEAN = 'boolean',\n  ARRAY = 'array',\n  OBJECT = 'object',\n}\n\ninterface BaseParameter {\n  optional: boolean;\n  name: string;\n  typeRef?: string;\n  description: string;\n  isCorrectType?: boolean;\n  isKeyEditable?: boolean;\n}\n\ninterface ArrayParameter extends BaseParameter {\n  type: ParameterType.ARRAY;\n  value?: Parameter[];\n}\n\ninterface NumberParameter extends BaseParameter {\n  type: ParameterType.NUMBER;\n  value?: number;\n}\n\ninterface StringParameter extends BaseParameter {\n  type: ParameterType.STRING;\n  value?: string;\n}\n\ninterface BooleanParameter extends BaseParameter {\n  type: ParameterType.BOOLEAN;\n  value?: boolean;\n}\n\ninterface ObjectParameter extends BaseParameter {\n  type: ParameterType.OBJECT;\n  value?: Parameter[];\n}\n\nexport type Parameter = ArrayParameter|NumberParameter|StringParameter|BooleanParameter|ObjectParameter;\n\nexport interface Command {\n  command: string;\n  parameters: Record<string, unknown>;\n  targetId?: string;\n}\n\ninterface ViewInput {\n  onKeydown: (event: KeyboardEvent) => void;\n  metadataByCommand: Map<string, {parameters: Parameter[], description: string, replyArgs: string[]}>;\n  command: string;\n  parameters: Parameter[];\n  typesByName: Map<string, Parameter[]>;\n  onCommandInputBlur: (event: Event) => void;\n  onCommandSend: () => void;\n  onCopyToClipboard: () => void;\n  targets: SDK.Target.Target[];\n  targetId: string|undefined;\n  onAddParameter: (parameterId: string) => void;\n  onClearParameter: (parameter: Parameter, isParentArray?: boolean) => void;\n  onDeleteParameter: (parameter: Parameter, parentParameter: Parameter) => void;\n  onTargetSelected: (event: Event) => void;\n  computeDropdownValues: (parameter: Parameter) => string[];\n  onParameterFocus: (event: Event) => void;\n  onParameterKeydown: (event: KeyboardEvent) => void;\n  onParameterKeyBlur: (event: Event) => void;\n  onParameterValueBlur: (event: Event) => void;\n}\n\nexport type View = (input: ViewInput, output: object, target: HTMLElement) => void;\n\nconst splitDescription = (description: string): [string, string] => {\n  // If the description is too long we make the UI a bit better by highlighting the first sentence\n  // which contains the most information.\n  // The number 150 has been chosen arbitrarily\n  if (description.length > 150) {\n    const [firstSentence, restOfDescription] = description.split('.');\n    // To make the UI nicer, we add a dot at the end of the first sentence.\n    firstSentence + '.';\n    return [firstSentence, restOfDescription];\n  }\n  return [description, ''];\n};\n\nconst defaultValueByType = new Map<string, string|number|boolean>([\n  ['string', ''],\n  ['number', 0],\n  ['boolean', false],\n]);\n\nconst DUMMY_DATA = 'dummy';\nconst EMPTY_STRING = '<empty_string>';\n\nexport function suggestionFilter(option: string, query: string): boolean {\n  return option.toLowerCase().includes(query.toLowerCase());\n}\n\nexport const enum Events {\n  SUBMIT_EDITOR = 'submiteditor',\n}\n\nexport interface EventTypes {\n  [Events.SUBMIT_EDITOR]: Command;\n}\n\nexport class JSONEditor extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox) {\n  #metadataByCommand = new Map<string, {parameters: Parameter[], description: string, replyArgs: string[]}>();\n  #typesByName = new Map<string, Parameter[]>();\n  #enumsByName = new Map<string, Record<string, string>>();\n  #parameters: Parameter[] = [];\n  #targets: SDK.Target.Target[] = [];\n  #command = '';\n  #targetId?: string;\n  #hintPopoverHelper?: UI.PopoverHelper.PopoverHelper;\n  #view: View;\n\n  constructor(element: HTMLElement, view = DEFAULT_VIEW) {\n    super(/* useShadowDom=*/ true, undefined, element);\n    this.#view = view;\n    this.registerRequiredCSS(editorWidgetStyles);\n  }\n\n  get metadataByCommand(): Map<string, {parameters: Parameter[], description: string, replyArgs: string[]}> {\n    return this.#metadataByCommand;\n  }\n\n  set metadataByCommand(\n      metadataByCommand: Map<string, {parameters: Parameter[], description: string, replyArgs: string[]}>) {\n    this.#metadataByCommand = metadataByCommand;\n    this.requestUpdate();\n  }\n\n  get typesByName(): Map<string, Parameter[]> {\n    return this.#typesByName;\n  }\n\n  set typesByName(typesByName: Map<string, Parameter[]>) {\n    this.#typesByName = typesByName;\n    this.requestUpdate();\n  }\n\n  get enumsByName(): Map<string, Record<string, string>> {\n    return this.#enumsByName;\n  }\n\n  set enumsByName(enumsByName: Map<string, Record<string, string>>) {\n    this.#enumsByName = enumsByName;\n    this.requestUpdate();\n  }\n\n  get parameters(): Parameter[] {\n    return this.#parameters;\n  }\n\n  set parameters(parameters: Parameter[]) {\n    this.#parameters = parameters;\n    this.requestUpdate();\n  }\n\n  get targets(): SDK.Target.Target[] {\n    return this.#targets;\n  }\n\n  set targets(targets: SDK.Target.Target[]) {\n    this.#targets = targets;\n    this.requestUpdate();\n  }\n\n  get command(): string {\n    return this.#command;\n  }\n\n  set command(command: string) {\n    if (this.#command !== command) {\n      this.#command = command;\n      this.requestUpdate();\n    }\n  }\n\n  get targetId(): string|undefined {\n    return this.#targetId;\n  }\n\n  set targetId(targetId: string|undefined) {\n    if (this.#targetId !== targetId) {\n      this.#targetId = targetId;\n      this.requestUpdate();\n    }\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.#hintPopoverHelper = new UI.PopoverHelper.PopoverHelper(\n        this.contentElement, event => this.#handlePopoverDescriptions(event), 'protocol-monitor.hint');\n    this.#hintPopoverHelper.setDisableOnClick(true);\n    this.#hintPopoverHelper.setTimeout(300);\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    targetManager.addEventListener(\n        SDK.TargetManager.Events.AVAILABLE_TARGETS_CHANGED, this.#handleAvailableTargetsChanged, this);\n    this.#handleAvailableTargetsChanged();\n    this.requestUpdate();\n  }\n\n  override willHide(): void {\n    super.willHide();\n    this.#hintPopoverHelper?.hidePopover();\n    this.#hintPopoverHelper?.dispose();\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    targetManager.removeEventListener(\n        SDK.TargetManager.Events.AVAILABLE_TARGETS_CHANGED, this.#handleAvailableTargetsChanged, this);\n  }\n\n  #handleAvailableTargetsChanged(): void {\n    this.targets = SDK.TargetManager.TargetManager.instance().targets();\n    if (this.targets.length && this.targetId === undefined) {\n      this.targetId = this.targets[0].id();\n    }\n  }\n\n  getParameters(): Record<string, unknown> {\n    const formatParameterValue = (parameter: Parameter): unknown => {\n      if (parameter.value === undefined) {\n        return;\n      }\n      switch (parameter.type) {\n        case ParameterType.NUMBER: {\n          return Number(parameter.value);\n        }\n        case ParameterType.BOOLEAN: {\n          return Boolean(parameter.value);\n        }\n        case ParameterType.OBJECT: {\n          const nestedParameters: Record<string, unknown> = {};\n          for (const subParameter of parameter.value) {\n            const formattedValue = formatParameterValue(subParameter);\n            if (formattedValue !== undefined) {\n              nestedParameters[subParameter.name] = formatParameterValue(subParameter);\n            }\n          }\n          if (Object.keys(nestedParameters).length === 0) {\n            return undefined;\n          }\n          return nestedParameters;\n        }\n        case ParameterType.ARRAY: {\n          const nestedArrayParameters = [];\n          for (const subParameter of parameter.value) {\n            nestedArrayParameters.push(formatParameterValue(subParameter));\n          }\n          return nestedArrayParameters.length === 0 ? [] : nestedArrayParameters;\n        }\n        default: {\n          return parameter.value;\n        }\n      }\n    };\n\n    const formattedParameters: Record<string, unknown> = {};\n    for (const parameter of this.parameters) {\n      formattedParameters[parameter.name] = formatParameterValue(parameter);\n    }\n    return formatParameterValue({\n             type: ParameterType.OBJECT,\n             name: DUMMY_DATA,\n             optional: true,\n             value: this.parameters,\n             description: '',\n           }) as Record<string, unknown>;\n  }\n\n  // Displays a command entered in the input bar inside the editor\n  displayCommand(command: string, parameters: Record<string, unknown>, targetId?: string): void {\n    this.targetId = targetId;\n    this.command = command;\n    const schema = this.metadataByCommand.get(this.command);\n    if (!schema?.parameters) {\n      return;\n    }\n    this.populateParametersForCommandWithDefaultValues();\n\n    const displayedParameters = this.#convertObjectToParameterSchema(\n                                        '', parameters, {\n                                          typeRef: DUMMY_DATA,\n                                          type: ParameterType.OBJECT,\n                                          name: '',\n                                          description: '',\n                                          optional: true,\n                                          value: [],\n                                        },\n                                        schema.parameters)\n                                    .value as Parameter[];\n\n    const valueByName = new Map(this.parameters.map(param => [param.name, param]));\n    for (const param of displayedParameters) {\n      const existingParam = valueByName.get(param.name);\n      if (existingParam) {\n        existingParam.value = param.value;\n      }\n    }\n\n    this.requestUpdate();\n  }\n\n  #convertObjectToParameterSchema(key: string, value: unknown, schema?: Parameter, initialSchema?: Parameter[]):\n      Parameter {\n    const type = schema?.type || typeof value;\n    const description = schema?.description ?? '';\n    const optional = schema?.optional ?? true;\n\n    switch (type) {\n      case ParameterType.STRING:\n      case ParameterType.BOOLEAN:\n      case ParameterType.NUMBER:\n        return this.#convertPrimitiveParameter(key, value, schema);\n      case ParameterType.OBJECT:\n        return this.#convertObjectParameter(key, value, schema, initialSchema);\n      case ParameterType.ARRAY:\n        return this.#convertArrayParameter(key, value, schema);\n    }\n    return {\n      type,\n      name: key,\n      optional,\n      typeRef: schema?.typeRef,\n      value,\n      description,\n    } as Parameter;\n  }\n\n  #convertPrimitiveParameter(key: string, value: unknown, schema?: Parameter): Parameter {\n    const type = schema?.type || typeof value;\n    const description = schema?.description ?? '';\n    const optional = schema?.optional ?? true;\n    return {\n      type,\n      name: key,\n      optional,\n      typeRef: schema?.typeRef,\n      value,\n      description,\n      isCorrectType: schema ? this.#isValueOfCorrectType(schema, String(value)) : true,\n    } as Parameter;\n  }\n\n  #convertObjectParameter(key: string, value: unknown, schema?: Parameter, initialSchema?: Parameter[]): Parameter {\n    const description = schema?.description ?? '';\n    if (typeof value !== 'object' || value === null) {\n      throw new Error('The value is not an object');\n    }\n    const typeRef = schema?.typeRef;\n    if (!typeRef) {\n      throw new Error('Every object parameters should have a type ref');\n    }\n\n    const nestedType = typeRef === DUMMY_DATA ? initialSchema : this.typesByName.get(typeRef);\n\n    if (!nestedType) {\n      throw new Error('No nested type for keys were found');\n    }\n    const objectValues = [];\n    for (const objectKey of Object.keys(value)) {\n      const objectType = nestedType.find(param => param.name === objectKey);\n      objectValues.push(\n          this.#convertObjectToParameterSchema(objectKey, (value as Record<string, unknown>)[objectKey], objectType));\n    }\n    return {\n      type: ParameterType.OBJECT,\n      name: key,\n      optional: schema.optional,\n      typeRef: schema.typeRef,\n      value: objectValues,\n      description,\n      isCorrectType: true,\n    };\n  }\n\n  #convertArrayParameter(key: string, value: unknown, schema?: Parameter): Parameter {\n    const description = schema?.description ?? '';\n    const optional = schema?.optional ?? true;\n    const typeRef = schema?.typeRef;\n    if (!typeRef) {\n      throw new Error('Every array parameters should have a type ref');\n    }\n\n    if (!Array.isArray(value)) {\n      throw new Error('The value is not an array');\n    }\n    const nestedType = isTypePrimitive(typeRef) ? undefined : {\n      optional: true,\n      type: ParameterType.OBJECT as ParameterType.OBJECT,\n      value: [],\n      typeRef,\n      description: '',\n      name: '',\n    };\n\n    const objectValues = [];\n\n    for (let i = 0; i < value.length; i++) {\n      const temp = this.#convertObjectToParameterSchema(`${i}`, value[i], nestedType);\n      objectValues.push(temp);\n    }\n    return {\n      type: ParameterType.ARRAY,\n      name: key,\n      optional,\n      typeRef: schema?.typeRef,\n      value: objectValues,\n      description,\n      isCorrectType: true,\n    };\n  }\n\n  #handlePopoverDescriptions(event: MouseEvent|KeyboardEvent):\n      {box: AnchorBox, show: (popover: UI.GlassPane.GlassPane) => Promise<boolean>}|null {\n    const hintElement = event.composedPath()[0] as HTMLElement;\n    const elementData = this.#getDescriptionAndTypeForElement(hintElement);\n    if (!elementData?.description) {\n      return null;\n    }\n    const [head, tail] = splitDescription(elementData.description);\n    const type = elementData.type;\n    const replyArgs = elementData.replyArgs;\n    let popupContent = '';\n    // replyArgs and type cannot get into conflict because replyArgs is attached to a command and type to a parameter\n    if (replyArgs && replyArgs.length > 0) {\n      popupContent = tail + `Returns: ${replyArgs}<br>`;\n    } else if (type) {\n      popupContent = tail + `<br>Type: ${type}<br>`;\n    } else {\n      popupContent = tail;\n    }\n\n    return {\n      box: hintElement.boxInWindow(),\n      show: async (popover: UI.GlassPane.GlassPane) => {\n        const popupElement = new ElementsComponents.CSSHintDetailsView.CSSHintDetailsView({\n          getMessage: () => `<span>${head}</span>`,\n          getPossibleFixMessage: () => popupContent,\n          getLearnMoreLink: () =>\n              `https://chromedevtools.github.io/devtools-protocol/tot/${this.command.split('.')[0]}/`,\n        });\n        popover.contentElement.appendChild(popupElement);\n        return true;\n      },\n    };\n  }\n\n  #getDescriptionAndTypeForElement(hintElement: HTMLElement):\n      {description: string, type?: ParameterType, replyArgs?: string[]}|undefined {\n    if (hintElement.matches('.command')) {\n      const metadata = this.metadataByCommand.get(this.command);\n      if (metadata) {\n        return {description: metadata.description, replyArgs: metadata.replyArgs};\n      }\n    }\n    if (hintElement.matches('.parameter')) {\n      const id = hintElement.dataset.paramid;\n      if (!id) {\n        return;\n      }\n      const pathArray = id.split('.');\n      const {parameter} = this.#getChildByPath(pathArray);\n      if (!parameter.description) {\n        return;\n      }\n      return {description: parameter.description, type: parameter.type};\n    }\n    return;\n  }\n\n  getCommandJson(): string {\n    return this.command !== '' ? JSON.stringify({command: this.command, parameters: this.getParameters()}) : '';\n  }\n\n  #copyToClipboard(): void {\n    const commandJson = this.getCommandJson();\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(commandJson);\n  }\n\n  #handleCommandSend(): void {\n    this.dispatchEventToListeners(Events.SUBMIT_EDITOR, {\n      command: this.command,\n      parameters: this.getParameters(),\n      targetId: this.targetId,\n    });\n  }\n\n  populateParametersForCommandWithDefaultValues(): void {\n    const commandParameters = this.metadataByCommand.get(this.command)?.parameters;\n    if (!commandParameters) {\n      return;\n    }\n\n    this.parameters = commandParameters.map((parameter: Parameter) => {\n      return this.#populateParameterDefaults(parameter);\n    });\n  }\n\n  #populateParameterDefaults(parameter: Parameter): Parameter {\n    if (parameter.type === ParameterType.OBJECT) {\n      let typeRef = parameter.typeRef;\n      if (!typeRef) {\n        typeRef = DUMMY_DATA;\n      }\n\n      // Fallback to empty array is extremely rare.\n      // It happens when the keys for an object are not registered like for Tracing.MemoryDumpConfig or headers for instance.\n      const nestedTypes = this.typesByName.get(typeRef) ?? [];\n\n      const nestedParameters = nestedTypes.map(nestedType => {\n        return this.#populateParameterDefaults(nestedType);\n      });\n\n      return {\n        ...parameter,\n        value: parameter.optional ? undefined : nestedParameters,\n        isCorrectType: true,\n      } as Parameter;\n    }\n    if (parameter.type === ParameterType.ARRAY) {\n      return {\n        ...parameter,\n        value: parameter?.optional ? undefined :\n                                     parameter.value?.map(param => this.#populateParameterDefaults(param)) || [],\n        isCorrectType: true,\n      };\n    }\n    return {\n      ...parameter,\n      value: parameter.optional ? undefined : defaultValueByType.get(parameter.type),\n      isCorrectType: true,\n    } as Parameter;\n  }\n\n  #getChildByPath(pathArray: string[]): {parameter: Parameter, parentParameter: Parameter} {\n    let parameters = this.parameters;\n    let parentParameter;\n    for (let i = 0; i < pathArray.length; i++) {\n      const name = pathArray[i];\n      const parameter = parameters.find(param => param.name === name);\n      if (i === pathArray.length - 1) {\n        return {parameter, parentParameter} as {parameter: Parameter, parentParameter: Parameter};\n      }\n      if (parameter?.type === ParameterType.ARRAY || parameter?.type === ParameterType.OBJECT) {\n        if (parameter.value) {\n          parameters = parameter.value;\n        }\n      } else {\n        throw new Error('Parameter on the path in not an object or an array');\n      }\n      parentParameter = parameter;\n    }\n    throw new Error('Not found');\n  }\n\n  #isValueOfCorrectType(parameter: Parameter, value: string): boolean {\n    if (parameter.type === ParameterType.NUMBER && isNaN(Number(value))) {\n      return false;\n    }\n    // For boolean or array parameters, this will create an array of the values the user can enter\n    const acceptedValues = this.#computeDropdownValues(parameter);\n    // Check to see if the entered value by the user is indeed part of the values accepted by the enum or boolean parameter\n    if (acceptedValues.length !== 0 && !acceptedValues.includes(value)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  #saveParameterValue = (event: Event): void => {\n    if (!(event.target instanceof SuggestionInput.SuggestionInput.SuggestionInput)) {\n      return;\n    }\n    let value: string;\n    if (event instanceof KeyboardEvent) {\n      const editableContent = event.target.renderRoot.querySelector('devtools-editable-content');\n      if (!editableContent) {\n        return;\n      }\n      value = editableContent.innerText;\n    } else {\n      value = event.target.value;\n    }\n    const paramId = event.target.getAttribute('data-paramid');\n    if (!paramId) {\n      return;\n    }\n    const pathArray = paramId.split('.');\n    const object = this.#getChildByPath(pathArray).parameter;\n    if (value === '') {\n      object.value = defaultValueByType.get(object.type);\n    } else {\n      object.value = value;\n      object.isCorrectType = this.#isValueOfCorrectType(object, value);\n    }\n    // Needed to render the delete button for object parameters\n    this.requestUpdate();\n  };\n\n  #saveNestedObjectParameterKey = (event: Event): void => {\n    if (!(event.target instanceof SuggestionInput.SuggestionInput.SuggestionInput)) {\n      return;\n    }\n    const value = event.target.value;\n    const paramId = event.target.getAttribute('data-paramid');\n    if (!paramId) {\n      return;\n    }\n    const pathArray = paramId.split('.');\n    const {parameter} = this.#getChildByPath(pathArray);\n    parameter.name = value;\n    // Needed to render the delete button for object parameters\n    this.requestUpdate();\n  };\n\n  #handleParameterInputKeydown = (event: KeyboardEvent): void => {\n    if (!(event.target instanceof SuggestionInput.SuggestionInput.SuggestionInput)) {\n      return;\n    }\n    if (event.key === 'Enter' && (event.ctrlKey || event.metaKey)) {\n      this.#saveParameterValue(event);\n    }\n  };\n\n  #handleFocusParameter(event: Event): void {\n    if (!(event.target instanceof SuggestionInput.SuggestionInput.SuggestionInput)) {\n      return;\n    }\n    const paramId = event.target.getAttribute('data-paramid');\n    if (!paramId) {\n      return;\n    }\n    const pathArray = paramId.split('.');\n    const object = this.#getChildByPath(pathArray).parameter;\n    object.isCorrectType = true;\n\n    this.requestUpdate();\n  }\n\n  #handleCommandInputBlur = async(event: Event): Promise<void> => {\n    if (event.target instanceof SuggestionInput.SuggestionInput.SuggestionInput) {\n      this.command = event.target.value;\n    }\n    this.populateParametersForCommandWithDefaultValues();\n    const target = event.target as HTMLElement;\n    await this.updateComplete;\n    this.#focusNextElement(target);\n  };\n\n  /**\n   * When devtools-suggestion-input closes, it blurs itself resulting in\n   * the focus shifting to the overall DevTools window.\n   *\n   * This method focuses on the next focusable element (button or input)\n   * so that the focus remains in the Editor and Ctrl + Shift works.\n   */\n  #focusNextElement(target: HTMLElement): void {\n    // FIXME: can we do this via view output?\n    const elements =\n        this.contentElement.querySelectorAll('devtools-suggestion-input,.add-button') as NodeListOf<HTMLElement>;\n    const element = [...elements].findIndex(value => value === target.shadowRoot?.host);\n    if (element >= 0 && element + 1 < elements.length) {\n      elements[element + 1].focus();\n    } else {\n      (this.contentElement.querySelector('devtools-button[jslogcontext=\"protocol-monitor.send-command\"]') as\n           HTMLElement |\n       undefined)\n          ?.focus();\n    }\n  }\n\n  #createNestedParameter(type: Parameter, name: string): Parameter {\n    if (type.type === ParameterType.OBJECT) {\n      let typeRef = type.typeRef;\n      if (!typeRef) {\n        typeRef = DUMMY_DATA;\n      }\n      const nestedTypes = this.typesByName.get(typeRef) ?? [];\n\n      const nestedValue: Parameter[] =\n          nestedTypes.map(nestedType => this.#createNestedParameter(nestedType, nestedType.name));\n\n      return {\n        type: ParameterType.OBJECT,\n        name,\n        optional: type.optional,\n        typeRef,\n        value: nestedValue,\n        isCorrectType: true,\n        description: type.description,\n      };\n    }\n    return {\n      type: type.type,\n      name,\n      optional: type.optional,\n      isCorrectType: true,\n      typeRef: type.typeRef,\n      value: type.optional ? undefined : defaultValueByType.get(type.type),\n      description: type.description,\n    } as Parameter;\n  }\n\n  #handleAddParameter(parameterId: string): void {\n    const pathArray = parameterId.split('.');\n    const {parameter, parentParameter} = this.#getChildByPath(pathArray);\n    if (!parameter) {\n      return;\n    }\n\n    switch (parameter.type) {\n      case ParameterType.ARRAY: {\n        const typeRef = parameter.typeRef;\n        if (!typeRef) {\n          throw new Error('Every array parameter must have a typeRef');\n        }\n\n        const nestedType = this.typesByName.get(typeRef) ?? [];\n        const nestedValue: Parameter[] = nestedType.map(type => this.#createNestedParameter(type, type.name));\n\n        let type = isTypePrimitive(typeRef) ? typeRef : ParameterType.OBJECT;\n\n        // If the typeRef is actually a ref to an enum type, the type of the nested param should be a string\n        if (nestedType.length === 0) {\n          if (this.enumsByName.get(typeRef)) {\n            type = ParameterType.STRING;\n          }\n        }\n        // In case the parameter is an optional array, its value will be undefined so before pushing new value inside,\n        // we reset it to empty array\n        if (!parameter.value) {\n          parameter.value = [];\n        }\n        parameter.value.push({\n          type,\n          name: String(parameter.value.length),\n          optional: true,\n          typeRef,\n          value: nestedValue.length !== 0 ? nestedValue : '',\n          description: '',\n          isCorrectType: true,\n        } as Parameter);\n        break;\n      }\n      case ParameterType.OBJECT: {\n        let typeRef = parameter.typeRef;\n        if (!typeRef) {\n          typeRef = DUMMY_DATA;\n        }\n        if (!parameter.value) {\n          parameter.value = [];\n        }\n        if (!this.typesByName.get(typeRef)) {\n          parameter.value.push({\n            type: ParameterType.STRING,\n            name: '',\n            optional: true,\n            value: '',\n            isCorrectType: true,\n            description: '',\n            isKeyEditable: true,\n          });\n          break;\n        }\n        const nestedTypes = this.typesByName.get(typeRef) ?? [];\n        const nestedValue: Parameter[] =\n            nestedTypes.map(nestedType => this.#createNestedParameter(nestedType, nestedType.name));\n        const nestedParameters = nestedTypes.map(nestedType => {\n          return this.#populateParameterDefaults(nestedType);\n        });\n\n        if (parentParameter) {\n          parameter.value.push({\n            type: ParameterType.OBJECT,\n            name: '',\n            optional: true,\n            typeRef,\n            value: nestedValue,\n            isCorrectType: true,\n            description: '',\n          });\n        } else {\n          parameter.value = nestedParameters;\n        }\n        break;\n      }\n      default:\n        // For non-array and non-object parameters, set the value to the default value if available.\n        parameter.value = defaultValueByType.get(parameter.type);\n        break;\n    }\n    this.requestUpdate();\n  }\n\n  #handleClearParameter(parameter: Parameter, isParentArray?: boolean): void {\n    if (parameter?.value === undefined) {\n      return;\n    }\n\n    switch (parameter.type) {\n      case ParameterType.OBJECT:\n        if (parameter.optional && !isParentArray) {\n          parameter.value = undefined;\n          break;\n        }\n        if (!parameter.typeRef || !this.typesByName.get(parameter.typeRef)) {\n          parameter.value = [];\n        } else {\n          parameter.value.forEach(param => this.#handleClearParameter(param, isParentArray));\n        }\n        break;\n\n      case ParameterType.ARRAY:\n        parameter.value = parameter.optional ? undefined : [];\n        break;\n\n      default:\n        parameter.value = parameter.optional ? undefined : defaultValueByType.get(parameter.type);\n        parameter.isCorrectType = true;\n        break;\n    }\n\n    this.requestUpdate();\n  }\n\n  #handleDeleteParameter(parameter: Parameter, parentParameter: Parameter): void {\n    if (!parameter) {\n      return;\n    }\n    if (!Array.isArray(parentParameter.value)) {\n      return;\n    }\n    parentParameter.value.splice(parentParameter.value.findIndex(p => p === parameter), 1);\n\n    if (parentParameter.type === ParameterType.ARRAY) {\n      for (let i = 0; i < parentParameter.value.length; i++) {\n        parentParameter.value[i].name = String(i);\n      }\n    }\n    this.requestUpdate();\n  }\n\n  #onTargetSelected(event: Event): void {\n    if (event.target instanceof HTMLSelectElement) {\n      this.targetId = event.target.value;\n    }\n    this.requestUpdate();\n  }\n\n  #computeDropdownValues(parameter: Parameter): string[] {\n    // The suggestion box should only be shown for parameters of type string and boolean\n    if (parameter.type === ParameterType.STRING) {\n      const enums = this.enumsByName.get(`${parameter.typeRef}`) ?? {};\n      return Object.values(enums);\n    }\n    if (parameter.type === ParameterType.BOOLEAN) {\n      return ['true', 'false'];\n    }\n    return [];\n  }\n\n  override performUpdate(): void {\n    const viewInput = {\n      onParameterValueBlur: (event: Event): void => {\n        this.#saveParameterValue(event);\n      },\n      onParameterKeydown: (event: KeyboardEvent): void => {\n        this.#handleParameterInputKeydown(event);\n      },\n      onParameterFocus: (event: Event): void => {\n        this.#handleFocusParameter(event);\n      },\n      onParameterKeyBlur: (event: Event): void => {\n        this.#saveNestedObjectParameterKey(event);\n      },\n      onKeydown: (event: KeyboardEvent): void => {\n        if (event.key === 'Enter' && (event.ctrlKey || event.metaKey)) {\n          this.#handleParameterInputKeydown(event);\n          this.#handleCommandSend();\n        }\n      },\n      parameters: this.parameters,\n      metadataByCommand: this.metadataByCommand,\n      command: this.command,\n      typesByName: this.typesByName,\n      onCommandInputBlur: (event: Event) => this.#handleCommandInputBlur(event),\n      onCommandSend: () => this.#handleCommandSend(),\n      onCopyToClipboard: () => this.#copyToClipboard(),\n      targets: this.targets,\n      targetId: this.targetId,\n      onAddParameter: (parameterId: string) => {\n        this.#handleAddParameter(parameterId);\n      },\n      onClearParameter: (parameter: Parameter, isParentArray?: boolean) => {\n        this.#handleClearParameter(parameter, isParentArray);\n      },\n      onDeleteParameter: (parameter: Parameter, parentParameter: Parameter) => {\n        this.#handleDeleteParameter(parameter, parentParameter);\n      },\n      onTargetSelected: (event: Event) => {\n        this.#onTargetSelected(event);\n      },\n      computeDropdownValues: (parameter: Parameter) => {\n        return this.#computeDropdownValues(parameter);\n      },\n    };\n    const viewOutput = {};\n    this.#view(viewInput, viewOutput, this.contentElement);\n  }\n}\n\nfunction isTypePrimitive(type: string): boolean {\n  if (type === ParameterType.STRING || type === ParameterType.BOOLEAN || type === ParameterType.NUMBER) {\n    return true;\n  }\n  return false;\n}\n\nfunction renderTargetSelectorRow(input: ViewInput): Lit.TemplateResult|undefined {\n  // clang-format off\n  return html`\n  <div class=\"row attribute padded\">\n    <div>target<span class=\"separator\">:</span></div>\n    <select class=\"target-selector\"\n            title=${i18nString(UIStrings.selectTarget)}\n            jslog=${VisualLogging.dropDown('target-selector').track({change: true})}\n            @change=${input.onTargetSelected}>\n      ${input.targets.map(target => html`\n        <option jslog=${VisualLogging.item('target').track({click: true})}\n                value=${target.id()} ?selected=${target.id() === input.targetId}>\n          ${target.name()} (${target.inspectedURL()})\n        </option>`)}\n    </select>\n  </div>\n`;\n  // clang-format on\n}\n\nfunction renderInlineButton(opts: {\n  title: string,\n  iconName: string,\n  classMap: Record<string, string|boolean|number>,\n  onClick: (event: MouseEvent) => void,\n  jslogContext: string,\n}): Lit.TemplateResult|undefined {\n  return html`\n          <devtools-button\n            title=${opts.title}\n            .size=${Buttons.Button.Size.SMALL}\n            .iconName=${opts.iconName}\n            .variant=${Buttons.Button.Variant.ICON}\n            class=${classMap(opts.classMap)}\n            @click=${opts.onClick}\n            .jslogContext=${opts.jslogContext}\n          ></devtools-button>\n      `;\n}\n\nfunction renderWarningIcon(): Lit.TemplateResult|undefined {\n  return html`<devtools-icon\n    .data=${{\n    iconName: 'warning-filled', color: 'var(--icon-warning)', width: '14px', height: '14px',\n  }\n  }\n    class=${classMap({\n    'warning-icon': true,\n  })}\n  >\n  </devtools-icon>`;\n}\n\n/**\n * Renders the parameters list corresponding to a specific CDP command.\n */\nfunction renderParameters(\n    input: ViewInput, parameters: Parameter[], id?: string, parentParameter?: Parameter,\n    parentParameterId?: string): Lit.TemplateResult|undefined {\n  parameters.sort((a, b) => Number(a.optional) - Number(b.optional));\n\n  // clang-format off\n  return html`\n    <ul>\n      ${repeat(parameters, parameter => {\n        const parameterId = parentParameter ? `${parentParameterId}` + '.' + `${parameter.name}` : parameter.name;\n        const subparameters: Parameter[] = parameter.type === ParameterType.ARRAY || parameter.type === ParameterType.OBJECT ? (parameter.value ?? []) : [];\n        const isPrimitive = isTypePrimitive(parameter.type);\n        const isArray = parameter.type === ParameterType.ARRAY;\n        const isParentArray = parentParameter && parentParameter.type === ParameterType.ARRAY;\n        const isParentObject = parentParameter && parentParameter.type === ParameterType.OBJECT;\n\n        const isObject = parameter.type === ParameterType.OBJECT;\n        const isParamValueUndefined = parameter.value === undefined;\n        const isParamOptional = parameter.optional;\n        const hasTypeRef = isObject && parameter.typeRef && input.typesByName.get(parameter.typeRef) !== undefined;\n        // This variable indicates that this parameter is a parameter nested inside an object parameter\n        // that no keys defined inside the CDP documentation.\n        const hasNoKeys = parameter.isKeyEditable;\n        const isCustomEditorDisplayed = isObject && !hasTypeRef;\n        const hasOptions = parameter.type === ParameterType.STRING || parameter.type === ParameterType.BOOLEAN;\n        const canClearParameter = (isArray && !isParamValueUndefined && parameter.value?.length !== 0) || (isObject && !isParamValueUndefined);\n        const parametersClasses = {\n          'optional-parameter': parameter.optional,\n          parameter: true,\n          'undefined-parameter': parameter.value === undefined && parameter.optional,\n        };\n        const inputClasses = {\n          'json-input': true,\n        };\n        return html`\n              <li class=\"row\">\n                <div class=\"row-icons\">\n                    ${!parameter.isCorrectType ? html`${renderWarningIcon()}` : nothing}\n\n                    <!-- If an object parameter has no predefined keys, show an input to enter the key, otherwise show the name of the parameter -->\n                    <div class=${classMap(parametersClasses)} data-paramId=${parameterId}>\n                        ${hasNoKeys ?\n                          html`<devtools-suggestion-input\n                            data-paramId=${parameterId}\n                            isKey=${true}\n                            .isCorrectInput=${live(parameter.isCorrectType)}\n                            .options=${hasOptions ? input.computeDropdownValues(parameter) : []}\n                            .autocomplete=${false}\n                            .value=${live(parameter.name ?? '')}\n                            .placeholder=${parameter.value === '' ? EMPTY_STRING : `<${defaultValueByType.get(parameter.type)}>`}\n                            @blur=${input.onParameterKeyBlur}\n                            @focus=${input.onParameterFocus}\n                            @keydown=${input.onParameterKeydown}\n                          ></devtools-suggestion-input>`:\n                          html`${parameter.name}`} <span class=\"separator\">:</span>\n                    </div>\n\n                    <!-- Render button to add values inside an array parameter -->\n                    ${isArray ? html`\n                      ${renderInlineButton({\n                          title: i18nString(UIStrings.addParameter),\n                          iconName: 'plus',\n                          onClick: () => input.onAddParameter(parameterId),\n                          classMap: { 'add-button': true },\n                          jslogContext: 'protocol-monitor.add-parameter',\n                        })}\n                    `: nothing}\n\n                    <!-- Render button to complete reset an array parameter or an object parameter-->\n                    ${canClearParameter ?\n                    renderInlineButton({\n                      title: i18nString(UIStrings.resetDefaultValue),\n                      iconName: 'clear',\n                      onClick: () => input.onClearParameter(parameter, isParentArray),\n                      classMap: {'clear-button': true},\n                      jslogContext: 'protocol-monitor.reset-to-default-value',\n                    }) : nothing}\n\n                    <!-- Render the buttons to change the value from undefined to empty string for optional primitive parameters -->\n                    ${isPrimitive && !isParentArray && isParamOptional && isParamValueUndefined ?\n                        html`  ${renderInlineButton({\n                          title: i18nString(UIStrings.addParameter),\n                          iconName: 'plus',\n                          onClick: () => input.onAddParameter(parameterId),\n                          classMap: { 'add-button': true },\n                          jslogContext: 'protocol-monitor.add-parameter',\n                    })}` : nothing}\n\n                    <!-- Render the buttons to change the value from undefined to populate the values inside object with their default values -->\n                    ${isObject && isParamOptional && isParamValueUndefined && hasTypeRef ?\n                        html`  ${renderInlineButton({\n                          title: i18nString(UIStrings.addParameter),\n                          iconName: 'plus',\n                          onClick: () => input.onAddParameter(parameterId),\n                          classMap: { 'add-button': true },\n                          jslogContext: 'protocol-monitor.add-parameter',\n                        })}` : nothing}\n                </div>\n\n                <div class=\"row-icons\">\n                    <!-- If an object has no predefined keys, show an input to enter the value, and a delete icon to delete the whole key/value pair -->\n                    ${hasNoKeys && isParentObject ?  html`\n                    <!-- @ts-ignore -->\n                    <devtools-suggestion-input\n                        data-paramId=${parameterId}\n                        .isCorrectInput=${live(parameter.isCorrectType)}\n                        .options=${hasOptions ? input.computeDropdownValues(parameter) : []}\n                        .autocomplete=${false}\n                        .value=${live(parameter.value ?? '')}\n                        .placeholder=${parameter.value === '' ? EMPTY_STRING : `<${defaultValueByType.get(parameter.type)}>`}\n                        .jslogContext=${'parameter-value'}\n                        @blur=${input.onParameterValueBlur}\n                        @focus=${input.onParameterFocus}\n                        @keydown=${input.onParameterKeydown}\n                      ></devtools-suggestion-input>\n\n                      ${renderInlineButton({\n                      title: i18nString(UIStrings.deleteParameter),\n                      iconName: 'bin',\n                      onClick: () => input.onDeleteParameter(parameter, parentParameter),\n                      classMap: { deleteButton: true, deleteIcon: true },\n                      jslogContext: 'protocol-monitor.delete-parameter',\n                    })}`: nothing}\n\n                  <!-- In case  the parameter is not optional or its value is not undefined render the input -->\n                  ${isPrimitive && !hasNoKeys && (!isParamValueUndefined || !isParamOptional) && (!isParentArray) ?\n                    html`\n                      <!-- @ts-ignore -->\n                      <devtools-suggestion-input\n                        data-paramId=${parameterId}\n                        .strikethrough=${live(parameter.isCorrectType)}\n                        .options=${hasOptions ? input.computeDropdownValues(parameter) : []}\n                        .autocomplete=${false}\n                        .value=${live(parameter.value ?? '')}\n                        .placeholder=${parameter.value === '' ? EMPTY_STRING : `<${defaultValueByType.get(parameter.type)}>`}\n                        .jslogContext=${'parameter-value'}\n                        @blur=${input.onParameterValueBlur}\n                        @focus=${input.onParameterFocus}\n                        @keydown=${input.onParameterKeydown}\n                      ></devtools-suggestion-input>` : nothing}\n\n                  <!-- Render the buttons to change the value from empty string to undefined for optional primitive parameters -->\n                  ${isPrimitive &&!hasNoKeys && !isParentArray && isParamOptional && !isParamValueUndefined ?\n                      html`  ${renderInlineButton({\n                        title: i18nString(UIStrings.resetDefaultValue),\n                        iconName: 'clear',\n                        onClick: () => input.onClearParameter(parameter),\n                        classMap: { 'clear-button': true },\n                        jslogContext: 'protocol-monitor.reset-to-default-value',\n                      })}` : nothing}\n\n                  <!-- If the parameter is an object with no predefined keys, renders a button to add key/value pairs to it's value -->\n                  ${isCustomEditorDisplayed ? html`\n                    ${renderInlineButton({\n                      title: i18nString(UIStrings.addCustomProperty),\n                      iconName: 'plus',\n                      onClick: () => input.onAddParameter(parameterId),\n                      classMap: { 'add-button': true },\n                      jslogContext: 'protocol-monitor.add-custom-property',\n                    })}\n                  ` : nothing}\n\n                  <!-- In case the parameter is nested inside an array we render the input field as well as a delete button -->\n                  ${isParentArray ? html`\n                  <!-- If the parameter is an object we don't want to display the input field we just want the delete button-->\n                  ${!isObject ? html`\n                  <!-- @ts-ignore -->\n                  <devtools-suggestion-input\n                    data-paramId=${parameterId}\n                    .options=${hasOptions ? input.computeDropdownValues(parameter) : []}\n                    .autocomplete=${false}\n                    .value=${live(parameter.value ?? '')}\n                    .placeholder=${parameter.value === '' ? EMPTY_STRING : `<${defaultValueByType.get(parameter.type)}>`}\n                    .jslogContext=${'parameter'}\n                    @blur=${input.onParameterValueBlur}\n                    @keydown=${input.onParameterKeydown}\n                    class=${classMap(inputClasses)}\n                  ></devtools-suggestion-input>` : nothing}\n\n                  ${renderInlineButton({\n                      title: i18nString(UIStrings.deleteParameter),\n                      iconName: 'bin',\n                      onClick: () => input.onDeleteParameter(parameter, parentParameter),\n                      classMap: { 'delete-button': true },\n                      jslogContext: 'protocol-monitor.delete-parameter',\n                    })}` : nothing}\n                </div>\n              </li>\n              ${renderParameters(input, subparameters, id, parameter, parameterId)}\n            `;\n        })}\n    </ul>\n  `;\n  // clang-format on\n}\n\nexport const DEFAULT_VIEW: View = (input, _output, target) => {\n  // clang-format off\n  render(html`\n    <div class=\"wrapper\" @keydown=${input.onKeydown} jslog=${VisualLogging.pane('command-editor').track({resize: true})}>\n      <div class=\"editor-wrapper\">\n        ${renderTargetSelectorRow(input)}\n        <div class=\"row attribute padded\">\n          <div class=\"command\">command<span class=\"separator\">:</span></div>\n          <devtools-suggestion-input\n            .options=${[...input.metadataByCommand.keys()]}\n            .value=${input.command}\n            .placeholder=${'Enter your commandâ€¦'}\n            .suggestionFilter=${suggestionFilter}\n            .jslogContext=${'command'}\n            @blur=${input.onCommandInputBlur}\n            class=${classMap({'json-input': true})}\n          ></devtools-suggestion-input>\n        </div>\n        ${input.parameters.length ? html`\n        <div class=\"row attribute padded\">\n          <div>parameters<span class=\"separator\">:</span></div>\n        </div>\n          ${renderParameters(input, input.parameters)}\n        ` : nothing}\n      </div>\n      <devtools-toolbar class=\"protocol-monitor-sidebar-toolbar\">\n        <devtools-button title=${i18nString(UIStrings.copyCommand)}\n                        .iconName=${'copy'}\n                        .jslogContext=${'protocol-monitor.copy-command'}\n                        .variant=${Buttons.Button.Variant.TOOLBAR}\n                        @click=${input.onCopyToClipboard}></devtools-button>\n          <div class=toolbar-spacer></div>\n        <devtools-button title=${Host.Platform.isMac() ? i18nString(UIStrings.sendCommandCmdEnter) : i18nString(UIStrings.sendCommandCtrlEnter)}\n                        .iconName=${'send'}\n                        jslogContext=${'protocol-monitor.send-command'}\n                        .variant=${Buttons.Button.Variant.PRIMARY_TOOLBAR}\n                        @click=${input.onCommandSend}></devtools-button>\n      </devtools-toolbar>\n    </div>`, target, {host: input});\n  // clang-format on\n};\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2023 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n* {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n  font-size: inherit;\n}\n\n:host {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.target-selector {\n  max-width: var(--sys-size-21);\n}\n\n.warning-icon {\n  margin-left: -18px;\n  margin-right: 4px;\n}\n\n.row {\n  flex-wrap: wrap;\n}\n\n.row,\n.row-icons {\n  display: flex;\n  flex-direction: row;\n  color: var(--sys-color-token-property-special);\n  font-family: var(--monospace-font-family);\n  font-size: var(--monospace-font-size);\n  align-items: center;\n  line-height: 18px;\n  margin-top: 3px;\n}\n\n.separator {\n  margin-right: 0.5em;\n  color: var(--sys-color-on-surface);\n}\n\nul {\n  padding-left: 2em;\n}\n\n.optional-parameter {\n  color: var(--sys-color-token-attribute-value);\n\n  --override-color-recorder-input: var(--sys-color-on-surface);\n}\n\n.undefined-parameter {\n  color: var(--sys-color-state-disabled);\n}\n\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.editor-wrapper {\n  padding-left: 1em;\n  overflow-x: hidden;\n  flex-grow: 1;\n  padding-bottom: 50px;\n  padding-top: 0.5em;\n}\n\n.clear-button,\n.add-button,\n.delete-button {\n  opacity: 0%;\n  transition: opacity 0.3s ease-in-out;\n}\n\n.clear-button,\n.delete-button {\n  margin-left: 5px;\n}\n\n.row:focus-within .delete-button,\n.row:focus-within .add-button,\n.row:focus-within .clear-button,\n.row:hover .delete-button,\n.row:hover .add-button,\n.row:hover .clear-button {\n  opacity: 100%;\n}\n\n.protocol-monitor-sidebar-toolbar {\n  border-top: 1px solid var(--sys-color-divider);\n}\n\n/*# sourceURL=${import.meta.resolve('./JSONEditor.css')} */`;", "// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport '../../ui/legacy/legacy.js';\nimport '../../ui/legacy/components/data_grid/data_grid.js';\n\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as ProtocolClient from '../../core/protocol_client/protocol_client.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {Directives, html, render} from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {Events as JSONEditorEvents, JSONEditor, type Parameter} from './JSONEditor.js';\nimport protocolMonitorStyles from './protocolMonitor.css.js';\n\nconst {styleMap} = Directives;\nconst {widgetConfig, widgetRef} = UI.Widget;\nconst UIStrings = {\n  /**\n   *@description Text for one or a group of functions\n   */\n  method: 'Method',\n  /**\n   * @description Text in Protocol Monitor. Title for a table column which shows in which direction\n   * the particular protocol message was travelling. Values in this column will either be 'sent' or\n   * 'received'.\n   */\n  type: 'Type',\n  /**\n   * @description Text in Protocol Monitor of the Protocol Monitor tab. Noun relating to a network request.\n   */\n  request: 'Request',\n  /**\n   *@description Title of a cell content in protocol monitor. A Network response refers to the act of acknowledging a\n  network request. Should not be confused with answer.\n   */\n  response: 'Response',\n  /**\n   *@description Text for timestamps of items\n   */\n  timestamp: 'Timestamp',\n  /**\n   *@description Title of a cell content in protocol monitor. It describes the time between sending a request and receiving a response.\n   */\n  elapsedTime: 'Elapsed time',\n  /**\n   *@description Text in Protocol Monitor of the Protocol Monitor tab\n   */\n  target: 'Target',\n  /**\n   *@description Text to record a series of actions for analysis\n   */\n  record: 'Record',\n  /**\n   *@description Text to clear everything\n   */\n  clearAll: 'Clear all',\n  /**\n   *@description Text to filter result items\n   */\n  filter: 'Filter',\n  /**\n   *@description Text for the documentation of something\n   */\n  documentation: 'Documentation',\n  /**\n   *@description Text to open the CDP editor with the selected command\n   */\n  editAndResend: 'Edit and resend',\n  /**\n   *@description Cell text content in Protocol Monitor of the Protocol Monitor tab\n   *@example {30} PH1\n   */\n  sMs: '{PH1} ms',\n  /**\n   *@description Text in Protocol Monitor of the Protocol Monitor tab\n   */\n  noMessageSelected: 'No message selected',\n  /**\n   *@description Text in Protocol Monitor of the Protocol Monitor tab if no message is selected\n   */\n  selectAMessageToView: 'Select a message to see its details',\n  /**\n   *@description Text in Protocol Monitor for the save button\n   */\n  save: 'Save',\n  /**\n   *@description Text in Protocol Monitor to describe the sessions column\n   */\n  session: 'Session',\n  /**\n   *@description A placeholder for an input in Protocol Monitor. The input accepts commands that are sent to the backend on Enter. CDP stands for Chrome DevTools Protocol.\n   */\n  sendRawCDPCommand: 'Send a raw `CDP` command',\n  /**\n   * @description A tooltip text for the input in the Protocol Monitor panel. The tooltip describes what format is expected.\n   */\n  sendRawCDPCommandExplanation:\n      'Format: `\\'Domain.commandName\\'` for a command without parameters, or `\\'{\"command\":\"Domain.commandName\", \"parameters\": {...}}\\'` as a JSON object for a command with parameters. `\\'cmd\\'`/`\\'method\\'` and `\\'args\\'`/`\\'params\\'`/`\\'arguments\\'` are also supported as alternative keys for the `JSON` object.',\n\n  /**\n   * @description A label for a select input that allows selecting a CDP target to send the commands to.\n   */\n  selectTarget: 'Select a target',\n  /**\n   * @description Tooltip for the the console sidebar toggle in the Console panel. Command to\n   * open/show the sidebar.\n   */\n  showCDPCommandEditor: 'Show CDP command editor',\n  /**\n   * @description Tooltip for the the console sidebar toggle in the Console panel. Command to\n   * open/show the sidebar.\n   */\n  hideCDPCommandEditor: 'Hide  CDP command editor',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/protocol_monitor/ProtocolMonitor.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport const buildProtocolMetadata = (domains: Iterable<ProtocolDomain>):\n    Map<string, {parameters: Parameter[], description: string, replyArgs: string[]}> => {\n      const metadataByCommand = new Map<string, {parameters: Parameter[], description: string, replyArgs: string[]}>();\n      for (const domain of domains) {\n        for (const command of Object.keys(domain.metadata)) {\n          metadataByCommand.set(command, domain.metadata[command]);\n        }\n      }\n      return metadataByCommand;\n    };\n\nconst metadataByCommand = buildProtocolMetadata(\n    ProtocolClient.InspectorBackend.inspectorBackend.agentPrototypes.values() as Iterable<ProtocolDomain>);\nconst typesByName = ProtocolClient.InspectorBackend.inspectorBackend.typeMap as Map<string, Parameter[]>;\nconst enumsByName = ProtocolClient.InspectorBackend.inspectorBackend.enumMap as Map<string, Record<string, string>>;\nexport interface Message {\n  id?: number;\n  method: string;\n  error?: Record<string, unknown>;\n  result?: Record<string, unknown>;\n  params?: Record<string, unknown>;\n  requestTime: number;\n  elapsedTime?: number;\n  sessionId?: string;\n  target?: SDK.Target.Target;\n}\nexport interface LogMessage {\n  id?: number;\n  domain: string;\n  method: string;\n  params: Object;\n  type: 'send'|'recv';\n}\n\nexport interface ProtocolDomain {\n  readonly domain: string;\n  readonly metadata: Record<string, {parameters: Parameter[], description: string, replyArgs: string[]}>;\n}\n\nexport interface ViewInput {\n  messages: Message[];\n  selectedMessage?: Message;\n  sidebarVisible: boolean;\n  command: string;\n  commandSuggestions: string[];\n  filterKeys: string[];\n  filter: string;\n  parseFilter: (filter: string) => TextUtils.TextUtils.ParsedFilter[];\n  onRecord: (e: Event) => void;\n  onClear: () => void;\n  onSave: () => void;\n  onSplitChange: (e: CustomEvent<string>) => void;\n  onSelect: (e: CustomEvent<HTMLElement|null>) => void;\n  onContextMenu: (e: CustomEvent<{menu: UI.ContextMenu.ContextMenu, element: HTMLElement}>) => void;\n  onFilterChanged: (e: CustomEvent<string>) => void;\n  onCommandChange: (e: CustomEvent<string>) => void;\n  onCommandSubmitted: (e: CustomEvent<string>) => void;\n  onTargetChange: (e: Event) => void;\n  onToggleSidebar: (e: Event) => void;\n  targets: SDK.Target.Target[];\n  selectedTargetId: string;\n}\n\nexport interface ViewOutput {\n  editorWidget: JSONEditor;\n}\n\nexport type View = (input: ViewInput, output: ViewOutput, target: HTMLElement) => void;\n\nexport const DEFAULT_VIEW: View = (input, output, target) => {\n  // clang-format off\n    render(html`\n        <style>${UI.inspectorCommonStyles}</style>\n        <style>${protocolMonitorStyles}</style>\n        <devtools-split-view name=\"protocol-monitor-split-container\"\n                             direction=\"column\"\n                             sidebar-initial-size=\"400\"\n                             sidebar-visibility=${input.sidebarVisible ? 'visible' : 'hidden'}\n                             @change=${input.onSplitChange}>\n          <div slot=\"main\" class=\"vbox protocol-monitor-main\">\n            <devtools-toolbar class=\"protocol-monitor-toolbar\"\n                               jslog=${VisualLogging.toolbar('top')}>\n               <devtools-button title=${i18nString(UIStrings.record)}\n                                .iconName=${'record-start'}\n                                .toggledIconName=${'record-stop'}\n                                .jslogContext=${'protocol-monitor.toggle-recording'}\n                                .variant=${Buttons.Button.Variant.ICON_TOGGLE}\n                                .toggleType=${Buttons.Button.ToggleType.RED}\n                                .toggled=${true}\n                                @click=${input.onRecord}></devtools-button>\n              <devtools-button title=${i18nString(UIStrings.clearAll)}\n                               .iconName=${'clear'}\n                               .variant=${Buttons.Button.Variant.TOOLBAR}\n                               .jslogContext=${'protocol-monitor.clear-all'}\n                               @click=${input.onClear}></devtools-button>\n              <devtools-button title=${i18nString(UIStrings.save)}\n                               .iconName=${'download'}\n                               .variant=${Buttons.Button.Variant.TOOLBAR}\n                               .jslogContext=${'protocol-monitor.save'}\n                               @click=${input.onSave}></devtools-button>\n              <devtools-toolbar-input type=\"filter\"\n                                      list=\"filter-suggestions\"\n                                      style=\"flex-grow: 1\"\n                                      value=${input.filter}\n                                      @change=${input.onFilterChanged}>\n                <datalist id=\"filter-suggestions\">\n                  ${input.filterKeys.map(key => html`\n                        <option value=${key + ':'}></option>\n                        <option value=${'-' + key + ':'}></option>`)}\n                </datalist>\n              </devtools-toolbar-input>\n            </devtools-toolbar>\n            <devtools-split-view direction=\"column\" sidebar-position=\"second\"\n                                 name=\"protocol-monitor-panel-split\" sidebar-initial-size=\"250\">\n              <devtools-data-grid\n                  striped\n                  slot=\"main\"\n                  @select=${input.onSelect}\n                  @contextmenu=${input.onContextMenu}\n                  .filters=${input.parseFilter(input.filter)}>\n                <table>\n                    <tr>\n                      <th id=\"type\" sortable style=\"text-align: center\" hideable weight=\"1\">\n                        ${i18nString(UIStrings.type)}\n                      </th>\n                      <th id=\"method\" weight=\"5\">\n                        ${i18nString(UIStrings.method)}\n                      </th>\n                      <th id=\"request\" hideable weight=\"5\">\n                        ${i18nString(UIStrings.request)}\n                      </th>\n                      <th id=\"response\" hideable weight=\"5\">\n                        ${i18nString(UIStrings.response)}\n                      </th>\n                      <th id=\"elapsed-time\" sortable hideable weight=\"2\">\n                        ${i18nString(UIStrings.elapsedTime)}\n                      </th>\n                      <th id=\"timestamp\" sortable hideable weight=\"5\">\n                        ${i18nString(UIStrings.timestamp)}\n                      </th>\n                      <th id=\"target\" sortable hideable weight=\"5\">\n                        ${i18nString(UIStrings.target)}\n                      </th>\n                      <th id=\"session\" sortable hideable weight=\"5\">\n                        ${i18nString(UIStrings.session)}\n                      </th>\n                    </tr>\n                    ${\n            input.messages.map(\n                (message, index) => html`\n                      <tr data-index=${index}\n                          style=\"--override-data-grid-row-background-color: var(--sys-color-surface3)\">\n                        ${'id' in message ? html`\n                          <td title=\"sent\">\n                            <devtools-icon name=\"arrow-up-down\" style=\"color: var(--icon-request-response); width: 16px; height: 16px;\">\n                            </devtools-icon>\n                          </td>` : html`\n                          <td title=\"received\">\n                            <devtools-icon name=\"arrow-down\" style=\"color: var(--icon-request); width: 16px; height: 16px;\">\n                            </devtools-icon>\n                          </td>`}\n                        <td>${message.method}</td>\n                        <td>${message.params ? html`<code>${JSON.stringify(message.params)}</code>` : ''}</td>\n                        <td>\n                          ${message.result    ? html`<code>${JSON.stringify(message.result)}</code>` :\n                                message.error ? html`<code>${JSON.stringify(message.error)}</code>` :\n                                                '(pending)'}\n                        </td>\n                        <td data-value=${message.elapsedTime || 0}>\n                          ${!('id' in message)  ? '' :\n                            message.elapsedTime ? i18nString(UIStrings.sMs, {PH1: String(message.elapsedTime)})\n                                                : '(pending)'}\n                        </td>\n                        <td data-value=${message.requestTime}>${i18nString(UIStrings.sMs, {PH1: String(message.requestTime)})}</td>\n                        <td>${targetToString(message.target)}</td>\n                        <td>${message.sessionId || ''}</td>\n                      </tr>`)}\n                  </table>\n              </devtools-data-grid>\n              <devtools-widget .widgetConfig=${widgetConfig(InfoWidget, {\n                    request: input.selectedMessage?.params,\n                    response: input.selectedMessage?.result || input.selectedMessage?.error,\n                    type: !input.selectedMessage           ? undefined :\n                          ('id' in input?.selectedMessage) ? 'sent'\n                                                           : 'received',\n                  })}\n                  class=\"protocol-monitor-info\"\n                  slot=\"sidebar\"></devtools-widget>\n            </devtools-split-view>\n            <devtools-toolbar class=\"protocol-monitor-bottom-toolbar\"\n               jslog=${VisualLogging.toolbar('bottom')}>\n              <devtools-button .title=${input.sidebarVisible ? i18nString(UIStrings.hideCDPCommandEditor) : i18nString(UIStrings.showCDPCommandEditor)}\n                               .iconName=${input.sidebarVisible ? 'left-panel-close' : 'left-panel-open'}\n                               .variant=${Buttons.Button.Variant.TOOLBAR}\n                               .jslogContext=${'protocol-monitor.toggle-command-editor'}\n                               @click=${input.onToggleSidebar}></devtools-button>\n              </devtools-button>\n              <devtools-toolbar-input id=\"command-input\"\n                                      style=${styleMap({\n                                        'flex-grow': 1,\n                                        display: input.sidebarVisible ? 'none' : 'flex'})}\n                                      value=${input.command}\n                                      list=\"command-input-suggestions\"\n                                      placeholder=${i18nString(UIStrings.sendRawCDPCommand)}\n                                      title=${i18nString(UIStrings.sendRawCDPCommandExplanation)}\n                                      @change=${input.onCommandChange}\n                                      @submit=${input.onCommandSubmitted}>\n                <datalist id=\"command-input-suggestions\">\n                  ${input.commandSuggestions.map(c => html`<option value=${c}></option>`)}\n                </datalist>\n              </devtools-toolbar-input>\n              <select class=\"target-selector\"\n                      title=${i18nString(UIStrings.selectTarget)}\n                      style=${styleMap({display: input.sidebarVisible ? 'none' : 'flex'})}\n                      jslog=${VisualLogging.dropDown('target-selector').track({change: true})}\n                      @change=${input.onTargetChange}>\n                ${input.targets.map(target => html`\n                  <option jslog=${VisualLogging.item('target').track({click: true})}\n                          value=${target.id()} ?selected=${target.id() === input.selectedTargetId}>\n                    ${target.name()} (${target.inspectedURL()})\n                  </option>`)}\n              </select>\n            </devtools-toolbar>\n          </div>\n          <devtools-widget slot=\"sidebar\"\n              .widgetConfig=${widgetConfig(JSONEditor, { metadataByCommand, typesByName, enumsByName})}\n              ${widgetRef(JSONEditor, e => {output.editorWidget = e;})}>\n          </devtools-widget>\n        </devtools-split-view>`,\n        target,\n        {host: input}\n    );\n  // clang-format on\n};\n\nexport class ProtocolMonitorImpl extends UI.Panel.Panel {\n  private started: boolean;\n  private startTime: number;\n  private readonly messageForId = new Map<number, Message>();\n  private readonly filterParser: TextUtils.TextUtils.FilterParser;\n  #filterKeys = ['method', 'request', 'response', 'target', 'session'];\n  #commandAutocompleteSuggestionProvider = new CommandAutocompleteSuggestionProvider();\n  #selectedTargetId: string;\n  #command = '';\n  #sidebarVisible = false;\n  #view: View;\n  #messages: Message[] = [];\n  #selectedMessage: Message|undefined;\n  #filter = '';\n  #editorWidget!: JSONEditor;\n  constructor(view: View = DEFAULT_VIEW) {\n    super('protocol-monitor', true);\n    this.#view = view;\n    this.started = false;\n    this.startTime = 0;\n\n    this.#filterKeys = ['method', 'request', 'response', 'type', 'target', 'session'];\n    this.filterParser = new TextUtils.TextUtils.FilterParser(this.#filterKeys);\n\n    this.#selectedTargetId = 'main';\n    this.performUpdate();\n    this.#editorWidget.addEventListener(JSONEditorEvents.SUBMIT_EDITOR, event => {\n      this.onCommandSend(event.data.command, event.data.parameters, event.data.targetId);\n    });\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.AVAILABLE_TARGETS_CHANGED, () => {\n          this.requestUpdate();\n        });\n  }\n\n  #populateToolbarInput(): void {\n    const commandJson = this.#editorWidget.getCommandJson();\n    const targetId = this.#editorWidget.targetId;\n    if (targetId) {\n      this.#selectedTargetId = targetId;\n    }\n    if (commandJson) {\n      this.#command = commandJson;\n      this.requestUpdate();\n    }\n  }\n\n  override performUpdate(): void {\n    const viewInput = {\n      messages: this.#messages,\n      selectedMessage: this.#selectedMessage,\n      sidebarVisible: this.#sidebarVisible,\n      command: this.#command,\n      commandSuggestions: this.#commandAutocompleteSuggestionProvider.allSuggestions(),\n      filterKeys: this.#filterKeys,\n      filter: this.#filter,\n      parseFilter: this.filterParser.parse.bind(this.filterParser),\n      onSplitChange: (e: CustomEvent<string>) => {\n        if (e.detail === 'OnlyMain') {\n          this.#populateToolbarInput();\n          this.#sidebarVisible = false;\n        } else {\n          const {command, parameters} = parseCommandInput(this.#command);\n          this.#editorWidget.displayCommand(command, parameters, this.#selectedTargetId);\n          this.#sidebarVisible = true;\n        }\n        this.requestUpdate();\n      },\n      onRecord: (e: Event) => {\n        this.setRecording((e.target as Buttons.Button.Button).toggled);\n      },\n      onClear: () => {\n        this.#messages = [];\n        this.messageForId.clear();\n        this.requestUpdate();\n      },\n      onSave: () => {\n        void this.saveAsFile();\n      },\n      onSelect: (e: CustomEvent<HTMLElement|null>) => {\n        const index = parseInt(e.detail?.dataset?.index ?? '', 10);\n        this.#selectedMessage = !isNaN(index) ? this.#messages[index] : undefined;\n        this.requestUpdate();\n      },\n      onContextMenu: (e: CustomEvent<{menu: UI.ContextMenu.ContextMenu, element: HTMLElement}>) => {\n        const message = this.#messages[parseInt(e.detail?.element?.dataset?.index || '', 10)];\n        if (message) {\n          this.#populateContextMenu(e.detail.menu, message);\n        }\n      },\n      onCommandChange: (e: CustomEvent<string>) => {\n        this.#command = e.detail;\n      },\n      onCommandSubmitted: (e: CustomEvent<string>) => {\n        this.#commandAutocompleteSuggestionProvider.addEntry(e.detail);\n        const {command, parameters} = parseCommandInput(e.detail);\n        this.onCommandSend(command, parameters, this.#selectedTargetId);\n      },\n      onFilterChanged: (e: CustomEvent<string>) => {\n        this.#filter = e.detail;\n        this.requestUpdate();\n      },\n      onTargetChange: (e: Event) => {\n        if (e.target instanceof HTMLSelectElement) {\n          this.#selectedTargetId = e.target.value;\n        }\n      },\n      onToggleSidebar: (_e: Event) => {\n        this.#sidebarVisible = !this.#sidebarVisible;\n        this.requestUpdate();\n      },\n      targets: SDK.TargetManager.TargetManager.instance().targets(),\n      selectedTargetId: this.#selectedTargetId,\n    };\n    const that = this;\n    const viewOutput = {\n      set editorWidget(value: JSONEditor) {\n        that.#editorWidget = value;\n      }\n    };\n    this.#view(viewInput, viewOutput, this.contentElement);\n  }\n\n  #populateContextMenu(menu: UI.ContextMenu.ContextMenu, message: Message): void {\n    /**\n     * You can click the \"Edit and resend\" item in the context menu to be\n     * taken to the CDP editor with the filled with the selected command.\n     */\n    menu.editSection().appendItem(i18nString(UIStrings.editAndResend), () => {\n      if (!this.#selectedMessage) {\n        return;\n      }\n      const parameters = this.#selectedMessage.params as Record<string, unknown>;\n      const targetId = this.#selectedMessage.target?.id() || '';\n      const command = message.method;\n      this.#command = JSON.stringify({command, parameters});\n      if (!this.#sidebarVisible) {\n        this.#sidebarVisible = true;\n        this.requestUpdate();\n      } else {\n        this.#editorWidget.displayCommand(command, parameters, targetId);\n      }\n    }, {jslogContext: 'edit-and-resend', disabled: !('id' in message)});\n\n    /**\n     * You can click the \"Filter\" item in the context menu to filter the\n     * protocol monitor entries to those that match the method of the\n     * current row.\n     */\n    menu.editSection().appendItem(i18nString(UIStrings.filter), () => {\n      this.#filter = `method:${message.method}`;\n      this.requestUpdate();\n    }, {jslogContext: 'filter'});\n\n    /**\n     * You can click the \"Documentation\" item in the context menu to be\n     * taken to the CDP Documentation site entry for the given method.\n     */\n    menu.footerSection().appendItem(i18nString(UIStrings.documentation), () => {\n      const [domain, method] = message.method.split('.');\n      const type = 'id' in message ? 'method' : 'event';\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(\n          `https://chromedevtools.github.io/devtools-protocol/tot/${domain}#${type}-${method}` as\n          Platform.DevToolsPath.UrlString);\n    }, {jslogContext: 'documentation'});\n  }\n\n  onCommandSend(command: string, parameters: object, target?: string): void {\n    const test = ProtocolClient.InspectorBackend.test;\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    const selectedTarget = target ? targetManager.targetById(target) : null;\n    const sessionId = selectedTarget ? selectedTarget.sessionId : '';\n    // TS thinks that properties are read-only because\n    // in TS test is defined as a namespace.\n    // @ts-expect-error\n    test.sendRawMessage(command, parameters, () => {}, sessionId);\n  }\n\n  override wasShown(): void {\n    if (this.started) {\n      return;\n    }\n    this.started = true;\n    this.startTime = Date.now();\n    this.setRecording(true);\n  }\n\n  private setRecording(recording: boolean): void {\n    const test = ProtocolClient.InspectorBackend.test;\n    if (recording) {\n      // @ts-expect-error\n      test.onMessageSent = this.messageSent.bind(this);\n      // @ts-expect-error\n      test.onMessageReceived = this.messageReceived.bind(this);\n    } else {\n      test.onMessageSent = null;\n      test.onMessageReceived = null;\n    }\n  }\n\n  private messageReceived(message: Message, target: ProtocolClient.InspectorBackend.TargetBase|null): void {\n    if ('id' in message && message.id) {\n      const existingMessage = this.messageForId.get(message.id);\n      if (!existingMessage) {\n        return;\n      }\n      existingMessage.result = message.result;\n      existingMessage.error = message.error;\n      existingMessage.elapsedTime = Date.now() - this.startTime - existingMessage.requestTime;\n\n      // Now we've updated the message, it won't be updated again, so we can delete it from the tracking map.\n      this.messageForId.delete(message.id);\n      this.requestUpdate();\n      return;\n    }\n\n    this.#messages.push({\n      method: message.method,\n      sessionId: message.sessionId,\n      target: (target ?? undefined) as SDK.Target.Target | undefined,\n      requestTime: Date.now() - this.startTime,\n      result: message.params,\n    });\n\n    this.requestUpdate();\n  }\n\n  private messageSent(\n      message: {domain: string, method: string, params: Record<string, unknown>, id: number, sessionId?: string},\n      target: ProtocolClient.InspectorBackend.TargetBase|null): void {\n    const messageRecord = {\n      method: message.method,\n      params: message.params,\n      id: message.id,\n      sessionId: message.sessionId,\n      target: (target ?? undefined) as SDK.Target.Target | undefined,\n      requestTime: Date.now() - this.startTime,\n    };\n    this.#messages.push(messageRecord);\n    this.requestUpdate();\n    this.messageForId.set(message.id, messageRecord);\n  }\n\n  private async saveAsFile(): Promise<void> {\n    const now = new Date();\n    const fileName = 'ProtocolMonitor-' + Platform.DateUtilities.toISO8601Compact(now) + '.json' as\n        Platform.DevToolsPath.RawPathString;\n    const stream = new Bindings.FileUtils.FileOutputStream();\n\n    const accepted = await stream.open(fileName);\n    if (!accepted) {\n      return;\n    }\n\n    const rowEntries = this.#messages.map(m => ({...m, target: m.target?.id()}));\n\n    void stream.write(JSON.stringify(rowEntries, null, '  '));\n    void stream.close();\n  }\n}\n\nexport class CommandAutocompleteSuggestionProvider {\n  #maxHistorySize = 200;\n  #commandHistory = new Set<string>();\n\n  constructor(maxHistorySize?: number) {\n    if (maxHistorySize !== undefined) {\n      this.#maxHistorySize = maxHistorySize;\n    }\n  }\n\n  allSuggestions(): string[] {\n    const newestToOldest = [...this.#commandHistory].reverse();\n    newestToOldest.push(...metadataByCommand.keys());\n    return newestToOldest;\n  }\n\n  buildTextPromptCompletions =\n      async(expression: string, prefix: string, force?: boolean): Promise<UI.SuggestBox.Suggestions> => {\n    if (!prefix && !force && expression) {\n      return [];\n    }\n\n    const newestToOldest = this.allSuggestions();\n    return newestToOldest.filter(cmd => cmd.startsWith(prefix)).map(text => ({\n                                                                      text,\n                                                                    }));\n  };\n\n  addEntry(value: string): void {\n    if (this.#commandHistory.has(value)) {\n      this.#commandHistory.delete(value);\n    }\n    this.#commandHistory.add(value);\n    if (this.#commandHistory.size > this.#maxHistorySize) {\n      const earliestEntry = this.#commandHistory.values().next().value as string;\n      this.#commandHistory.delete(earliestEntry);\n    }\n  }\n}\n\nexport class InfoWidget extends UI.Widget.VBox {\n  private readonly tabbedPane: UI.TabbedPane.TabbedPane;\n  request: Record<string, unknown>|undefined;\n  response: Record<string, unknown>|undefined;\n  type: 'sent'|'received'|undefined;\n  selectedTab: 'request'|'response'|undefined;\n  constructor(element: HTMLElement) {\n    super(undefined, undefined, element);\n    this.tabbedPane = new UI.TabbedPane.TabbedPane();\n    this.tabbedPane.appendTab('request', i18nString(UIStrings.request), new UI.Widget.Widget());\n    this.tabbedPane.appendTab('response', i18nString(UIStrings.response), new UI.Widget.Widget());\n    this.tabbedPane.show(this.contentElement);\n    this.tabbedPane.selectTab('response');\n    this.request = {};\n  }\n\n  override performUpdate(): void {\n    if (!this.request && !this.response) {\n      this.tabbedPane.changeTabView(\n          'request',\n          new UI.EmptyWidget.EmptyWidget(\n              i18nString(UIStrings.noMessageSelected), i18nString(UIStrings.selectAMessageToView)));\n      this.tabbedPane.changeTabView(\n          'response',\n          new UI.EmptyWidget.EmptyWidget(\n              i18nString(UIStrings.noMessageSelected), i18nString(UIStrings.selectAMessageToView)));\n      return;\n    }\n\n    const requestEnabled = this.type && this.type === 'sent';\n    this.tabbedPane.setTabEnabled('request', Boolean(requestEnabled));\n    if (!requestEnabled) {\n      this.tabbedPane.selectTab('response');\n    }\n\n    this.tabbedPane.changeTabView('request', SourceFrame.JSONView.JSONView.createViewSync(this.request || null));\n    this.tabbedPane.changeTabView('response', SourceFrame.JSONView.JSONView.createViewSync(this.response || null));\n    if (this.selectedTab) {\n      this.tabbedPane.selectTab(this.selectedTab);\n    }\n  }\n}\n\nexport function parseCommandInput(input: string): {command: string, parameters: Record<string, unknown>} {\n  // If input cannot be parsed as json, we assume it's the command name\n  // for a command without parameters. Otherwise, we expect an object\n  // with \"command\"/\"method\"/\"cmd\" and \"parameters\"/\"params\"/\"args\"/\"arguments\" attributes.\n  let json = null;\n  try {\n    json = JSON.parse(input);\n  } catch {\n  }\n\n  const command = json ? json.command || json.method || json.cmd || '' : input;\n  const parameters = json?.parameters || json?.params || json?.args || json?.arguments || {};\n\n  return {command, parameters};\n}\n\nfunction targetToString(target: SDK.Target.Target|undefined): string {\n  if (!target) {\n    return '';\n  }\n  return target.decorateLabel(\n      `${target.name()} ${target === SDK.TargetManager.TargetManager.instance().rootTarget() ? '' : target.id()}`);\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2021 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.protocol-monitor-toolbar {\n  border-bottom: 1px solid var(--sys-color-divider);\n}\n\n.protocol-monitor-bottom-toolbar {\n  border-top: 1px solid var(--sys-color-divider);\n}\n\n.target-selector {\n  max-width: 120px;\n}\n\n.protocol-monitor-main {\n  /* allows the main area to grow automatically */\n  flex-grow: 1;\n}\n\n/*# sourceURL=${import.meta.resolve('./protocolMonitor.css')} */`;"],
  "mappings": "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",
  "names": ["metadataByCommand", "typesByName", "enumsByName", "type", "DEFAULT_VIEW", "Host", "i18n", "Platform", "SDK", "Buttons", "UI", "Directives", "html", "render", "VisualLogging", "Directives", "UIStrings", "str_", "i18nString", "metadataByCommand", "DEFAULT_VIEW", "render", "html", "target"]
}
