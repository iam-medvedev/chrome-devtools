{"version":3,"file":"ProtocolMonitor.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/protocol_monitor/ProtocolMonitor.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,QAAQ,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,cAAc,MAAM,+CAA+C,CAAC;AAChF,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,EAAC,qBAAqB,EAAC,MAAM,qCAAqC,CAAC;AAC1E,OAAO,EAAC,uBAAuB,EAAC,MAAM,qCAAqC,CAAC;AAC5E,OAAO,EAAC,UAAU,EAAC,MAAM,iCAAiC,CAAC;AAC3D,OAAO,EAAC,eAAe,EAAC,MAAM,qCAAqC,CAAC;AACpE,OAAO,EAAC,sBAAsB,EAAwB,MAAM,sCAAsC,CAAC;AACnG,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAEhD,OAAO,KAAK,eAAe,MAAM,uBAAuB,CAAC;AAEzD,MAAM,EAAC,gBAAgB,EAAC,GAAG,cAAc,CAAC;AAC1C,MAAM,EAAC,mBAAmB,EAAC,GAAG,eAAe,CAAC,eAAe,CAAC;AAE9D,MAAM,EAAC,UAAU,EAAC,GAAG,eAAe,CAAC,UAAU,CAAC;AAGhD,IAAI,IAAmD,CAAC;AACxD,IAAI,eAAqC,CAAC;AAC1C,IAAI,UAAuB,CAAC;AAC5B,IAAI,kBAAoC,CAAC;AAEzC,uBAAuB,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC9C,UAAU,CAAC,GAAG,EAAE;QACd,2EAA2E;QAC3E,kBAAkB,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;QAClC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC;QAC1D,UAAU,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3D,IAAI,GAAG,sBAAsB,CAAC,mBAAmB,EAAE,EAAC,YAAY,EAAE,UAAU,EAAC,CAAC,CAAC;QAC/E,eAAe,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;QAC9B,IAAI,CAAC,KAAK,CAAC,kBAAkB,CACzB,IAAI,WAAW,CAAC,QAAQ,EAAE,EAAC,MAAM,EAAE,sDAAsD,EAAC,CAAC,CAAC,CAAC;QACjG,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;QAC7C,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;QAC7C,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;QACvE,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;QACxE,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;QAChC,eAAe,CAAC,QAAQ,EAAE,CAAC;QAC3B,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,EAAE,EAAE,CAAC,EAAC,EAAE,IAAI,CAAC,CAAC;QAClH,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC,EAAE;YAC3G;gBACE,MAAM,EAAE,WAAW;gBACnB,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;gBACtB,EAAE,EAAE,CAAC;aACN;SACF,CAAC,CAAC;QAEH,gBAAgB,CAAC,IAAI,CAAC,iBAAiB,EAAE,CACrC;YACE,EAAE,EAAE,CAAC;YACL,MAAM,EAAE,WAAW;YACnB,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;YACtB,WAAW,EAAE,CAAC;YACd,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;SACvB,EACD,IAAI,CAAC,CAAC;QACV,MAAM,CAAC,SAAS,CACZ,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAC,CAAC,CAAC,EAAE;YAC5G;gBACE,MAAM,EAAE,WAAW;gBACnB,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;gBACtB,EAAE,EAAE,CAAC;gBACL,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;aACvB;SACF,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,EAAE,EAAE,CAAC,EAAC,EAAE,IAAI,CAAC,CAAC;QAElH,eAAe,CAAC,QAAQ,EAAE,CAAC;QAC3B,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,EAAE,EAAE,CAAC,EAAC,EAAE,IAAI,CAAC,CAAC;QAClH,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC,EAAE;YAC3G;gBACE,MAAM,EAAE,WAAW;gBACnB,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;gBACtB,EAAE,EAAE,CAAC;aACN;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAC,MAAM,EAAE,EAAC,OAAO,EAAE,KAAK,EAAC,EAAqB,CAAC,CAAC;QACpE,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,EAAE,EAAE,CAAC,EAAC,EAAE,IAAI,CAAC,CAAC;QAClH,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAC,MAAM,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,EAAqB,CAAC,CAAC;QACnE,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,EAAE,EAAE,CAAC,EAAC,EAAE,IAAI,CAAC,CAAC;QAClH,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC,EAAE;YAC3G;gBACE,MAAM,EAAE,WAAW;gBACnB,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;gBACtB,EAAE,EAAE,CAAC;aACN;YACD;gBACE,MAAM,EAAE,WAAW;gBACnB,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;gBACtB,EAAE,EAAE,CAAC;aACN;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC/B,eAAe,CAAC,QAAQ,EAAE,CAAC;QAC3B,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,EAAE,EAAE,CAAC,EAAC,EAAE,IAAI,CAAC,CAAC;QAClH,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAEpD,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;QACrB,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;QAC7B,MAAM,WAAW,GAAG,eAAe,EAAE,CAAC;QACtC,MAAM,oBAAoB,GAAG,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAE3D,eAAe,CAAC,QAAQ,EAAE,CAAC;QAC3B,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,EAAE,EAAE,CAAC,EAAC,EAAE,IAAI,CAAC,CAAC;QAElH,MAAM,SAAS,GAAG,EAAE,CAAC;QACrB,MAAM,KAAK,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;QACpC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACtB,MAAM,QAAQ,GAAG,kBAAkB,GAAG,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,OAC9D,CAAC;QAExC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC;QAEhC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC3C,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QAC1E,MAAM,oBAAoB,CAAC;QAC3B,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;QAEjG,KAAK,CAAC,OAAO,EAAE,CAAC;IAClB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,IAAI,IAAiC,CAAC;QACtC,IAAI,OAAqB,CAAC;QAE1B,SAAS,kBAAkB,CAAC,KAAa;YACvC,IAAI,GAAG,IAAI,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;YAChE,OAAO,GAAG,EAAC,OAAO,EAAE,EAAC,KAAK,EAAE,GAAG,KAAK,EAAE,EAAC,EAA2B,CAAC;YACnE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,QAAQ,EAAE,EAAC,MAAM,EAAE,OAAO,EAAC,CAAC,CAAC,CAAC;YAClE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,aAAa,EAAE,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,OAAO,EAAC,EAAC,CAAC,CAAC,CAAC;QACtF,CAAC;QAED,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,GAAG,IAAI,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;YAChE,eAAe,CAAC,QAAQ,EAAE,CAAC;YAC3B,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,CACjC,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,EAAE,EAAE,CAAC,EAAC,EAAE,IAAI,CAAC,CAAC;YACjF,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,CACjC,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,EAAE,EAAE,CAAC,EAAC,EAAE,IAAI,CAAC,CAAC;YACjF,kBAAkB,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAE1C,IAAI,aAAa,GAAG,qBAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,iBAAiB,CAAC,CAAC;YACjF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAC7B,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;YAEvC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,uDAAuD,CAAC,CAAC;YAC5G,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAEzC,MAAM,kBAAkB,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;YAEpE,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACtB,aAAa,GAAG,qBAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,iBAAiB,CAAC,CAAC;YAC7E,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAC7B,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;YAEvC,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,cAAc,CAAC,YAAY,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,MAAM,GAAG,qBAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,CAAC;YACnE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACtB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;YAEhC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,aAAa,GAAG,qBAAqB,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,eAAe,CAAC,CAAC;YACnF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAE7B,MAAM,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,EAAE,cAAc,CAAC,CAAC;YAC9G,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;YAEvC,MAAM,CAAC,MAAM,CACT,gBAAgB,CAAC,cAAc,CAAC,0EAA0E,CAAC,CAAC,CAAC;QACnH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAClE,EAAE,CAAC,4EAA4E,EAAE,KAAK,IAAI,EAAE;YAC1F,UAAU,CAAC,OAAO,GAAG,WAAW,CAAC;YACjC,UAAU,CAAC,UAAU,GAAG;gBACtB;oBACE,IAAI,EAAE,MAAM;oBACZ,IAAI,gEAAiD;oBACrD,WAAW,EAAE,MAAM;oBACnB,QAAQ,EAAE,KAAK;oBACf,KAAK,EAAE,MAAM;iBACd;aACF,CAAC;YACF,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,QAAQ,EAAE,EAAC,MAAM,EAAE,UAAU,EAAC,CAAC,CAAC,CAAC;YAC1E,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,sDAAsD,CAAC,CAAC;QAC3G,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC/B,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC;gBACxE,EAAC,EAAE,EAAE,GAAG,EAAE,CAAC,QAAQ,EAAsB;gBACzC,EAAC,EAAE,EAAE,GAAG,EAAE,CAAC,QAAQ,EAAsB;aAC1C,CAAC,CAAC;YACH,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,QAAQ,EAAE,EAAC,MAAM,EAAE,UAAU,EAAC,CAAC,CAAC,CAAC;YAC1E,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kFAAkF,EAAE,KAAK,IAAI,EAAE;YAChG,UAAU,CAAC,OAAO,GAAG,EAAE,CAAC;YACxB,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,QAAQ,EAAE,EAAC,MAAM,EAAE,UAAU,EAAC,CAAC,CAAC,CAAC;YAE1E,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,KAAK,GAAG;gBACZ,OAAO,EAAE,0BAA0B;gBACnC,UAAU,EAAE,EAAC,UAAU,EAAE,QAAQ,EAAC;aACnC,CAAC;YACF,wBAAwB;YACxB,MAAM,CAAC,SAAS,CACZ,eAAe,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC;gBAC/D,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,UAAU,EAAE,KAAK,CAAC,UAAU;aAC7B,CAAC,CAAC,EACH,KAAK,CAAC,CAAC;YACX,MAAM,CAAC,SAAS,CACZ,eAAe,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC;gBAC/D,GAAG,EAAE,KAAK,CAAC,OAAO;gBAClB,UAAU,EAAE,KAAK,CAAC,UAAU;aAC7B,CAAC,CAAC,EACH,KAAK,CAAC,CAAC;YACX,MAAM,CAAC,SAAS,CACZ,eAAe,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC;gBAC/D,MAAM,EAAE,KAAK,CAAC,OAAO;gBACrB,UAAU,EAAE,KAAK,CAAC,UAAU;aAC7B,CAAC,CAAC,EACH,KAAK,CAAC,CAAC;YAEX,2BAA2B;YAC3B,MAAM,CAAC,SAAS,CACZ,eAAe,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC;gBAC/D,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,MAAM,EAAE,KAAK,CAAC,UAAU;aACzB,CAAC,CAAC,EACH,KAAK,CAAC,CAAC;YACX,MAAM,CAAC,SAAS,CACZ,eAAe,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC;gBAC/D,GAAG,EAAE,KAAK,CAAC,OAAO;gBAClB,IAAI,EAAE,KAAK,CAAC,UAAU;aACvB,CAAC,CAAC,EACH,KAAK,CAAC,CAAC;YACX,MAAM,CAAC,SAAS,CACZ,eAAe,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC;gBAC/D,MAAM,EAAE,KAAK,CAAC,OAAO;gBACrB,SAAS,EAAE,KAAK,CAAC,UAAU;aAC5B,CAAC,CAAC,EACH,KAAK,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,eAAe,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,EAAE;gBAC9F,OAAO,EAAE,0BAA0B;gBACnC,UAAU,EAAE,EAAE;aACf,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kFAAkF,EAAE,KAAK,IAAI,EAAE;YAChG,MAAM,OAAO,GAAG;gBACd;oBACE,MAAM,EAAE,MAAM;oBACd,QAAQ,EAAE;wBACR,WAAW,EAAE;4BACX,UAAU,EAAE,CAAC;oCACX,IAAI,EAAE,MAAM;oCACZ,IAAI,EAAE,MAAM;oCACZ,QAAQ,EAAE,IAAI;iCACf,CAAC;4BACF,WAAW,EAAE,cAAc;4BAC3B,SAAS,EAAE,CAAC,OAAO,CAAC;yBACrB;qBACF;iBACF;gBACD;oBACE,MAAM,EAAE,OAAO;oBACf,QAAQ,EAAE;wBACR,aAAa,EAAE;4BACb,UAAU,EAAE,CAAC;oCACX,IAAI,EAAE,OAAO;oCACb,IAAI,EAAE,OAAO;oCACb,QAAQ,EAAE,IAAI;iCACf,CAAC;4BACF,WAAW,EAAE,cAAc;4BAC3B,SAAS,EAAE,CAAC,OAAO,CAAC;yBACrB;wBACD,aAAa,EAAE;4BACb,UAAU,EAAE,CAAC;oCACX,IAAI,EAAE,OAAO;oCACb,IAAI,EAAE,OAAO;oCACb,QAAQ,EAAE,IAAI;iCACf,CAAC;4BACF,WAAW,EAAE,cAAc;4BAC3B,SAAS,EAAE,CAAC,OAAO,CAAC;yBACrB;qBACF;iBACF;aAC0D,CAAC;YAE9D,MAAM,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;YACnC,gBAAgB,CAAC,GAAG,CAAC,WAAW,EAAE;gBAChC,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,MAAM;wBACZ,IAAI,EAAE,MAAM;wBACZ,QAAQ,EAAE,IAAI;qBACf,CAAC;gBACF,WAAW,EAAE,cAAc;gBAC3B,SAAS,EAAE,CAAC,OAAO,CAAC;aACrB,CAAC,CAAC;YACH,gBAAgB,CAAC,GAAG,CAAC,aAAa,EAAE;gBAClC,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,OAAO;wBACb,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE,IAAI;qBACf,CAAC;gBACF,WAAW,EAAE,cAAc;gBAC3B,SAAS,EAAE,CAAC,OAAO,CAAC;aACrB,CAAC,CAAC;YACH,gBAAgB,CAAC,GAAG,CAAC,aAAa,EAAE;gBAClC,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,OAAO;wBACb,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE,IAAI;qBACf,CAAC;gBACF,WAAW,EAAE,cAAc;gBAC3B,SAAS,EAAE,CAAC,OAAO,CAAC;aACrB,CAAC,CAAC;YAEH,MAAM,iBAAiB,GAAG,eAAe,CAAC,eAAe,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YACzF,MAAM,CAAC,SAAS,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC/C,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,QAAQ,GAAG,IAAI,eAAe,CAAC,eAAe,CAAC,qCAAqC,EAAE,CAAC;YAC7F,MAAM,CAAC,SAAS,CAAC,MAAM,QAAQ,CAAC,0BAA0B,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;QAClF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,QAAQ,GAAG,IAAI,eAAe,CAAC,eAAe,CAAC,qCAAqC,EAAE,CAAC;YAE7F,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC3B,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC3B,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC3B,MAAM,CAAC,SAAS,CAAC,MAAM,QAAQ,CAAC,0BAA0B,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;gBAC1E,EAAC,IAAI,EAAE,OAAO,EAAC;gBACf,EAAC,IAAI,EAAE,OAAO,EAAC;gBACf,EAAC,IAAI,EAAE,OAAO,EAAC;aAChB,CAAC,CAAC;YAEH,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC3B,MAAM,CAAC,SAAS,CAAC,MAAM,QAAQ,CAAC,0BAA0B,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;gBAC1E,EAAC,IAAI,EAAE,OAAO,EAAC;gBACf,EAAC,IAAI,EAAE,OAAO,EAAC;gBACf,EAAC,IAAI,EAAE,OAAO,EAAC;aAChB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,QAAQ,GAAG,IAAI,eAAe,CAAC,eAAe,CAAC,qCAAqC,CAAC,CAAC,CAAC,CAAC;YAE9F,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC3B,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC3B,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAE3B,MAAM,CAAC,SAAS,CAAC,MAAM,QAAQ,CAAC,0BAA0B,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;gBAC1E,EAAC,IAAI,EAAE,OAAO,EAAC;gBACf,EAAC,IAAI,EAAE,OAAO,EAAC;aAChB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as ProtocolClient from '../../core/protocol_client/protocol_client.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {findMenuItemWithLabel} from '../../testing/ContextMenuHelpers.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {expectCall} from '../../testing/ExpectStubCall.js';\nimport {stubFileManager} from '../../testing/FileManagerHelpers.js';\nimport {createViewFunctionStub, type ViewFunctionStub} from '../../testing/ViewFunctionHelpers.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as ProtocolMonitor from './protocol_monitor.js';\n\nconst {InspectorBackend} = ProtocolClient;\nconst {ProtocolMonitorImpl} = ProtocolMonitor.ProtocolMonitor;\ntype ProtocolMonitorImpl = ProtocolMonitor.ProtocolMonitor.ProtocolMonitorImpl;\nconst {JSONEditor} = ProtocolMonitor.JSONEditor;\ntype JSONEditor = ProtocolMonitor.JSONEditor.JSONEditor;\n\nlet view!: ViewFunctionStub<typeof ProtocolMonitorImpl>;\nlet protocolMonitor!: ProtocolMonitorImpl;\nlet jsonEditor!: JSONEditor;\nlet sendRawMessageStub!: sinon.SinonStub;\n\ndescribeWithEnvironment('ProtocolMonitor', () => {\n  beforeEach(() => {\n    // sendRawMessageStub = sinon.stub(InspectorBackend.test,'sendRawMessage');\n    sendRawMessageStub = sinon.stub();\n    InspectorBackend.test.sendRawMessage = sendRawMessageStub;\n    jsonEditor = new JSONEditor(document.createElement('div'));\n    view = createViewFunctionStub(ProtocolMonitorImpl, {editorWidget: jsonEditor});\n    protocolMonitor = new ProtocolMonitorImpl(view);\n  });\n\n  it('sends commands', async () => {\n    view.input.onCommandSubmitted(\n        new CustomEvent('submit', {detail: '{\"command\":\"Test.test\",\"parameters\":{\"test\":\"test\"}}'}));\n    assert.isTrue(sendRawMessageStub.calledOnce);\n    assert.isTrue(sendRawMessageStub.calledOnce);\n    assert.strictEqual(sendRawMessageStub.getCall(0).args[0], 'Test.test');\n    assert.deepEqual(sendRawMessageStub.getCall(0).args[1], {test: 'test'});\n    assert.deepEqual(sendRawMessageStub.getCall(0).args[3], '');\n  });\n\n  it('records commands', async () => {\n    protocolMonitor.wasShown();\n    InspectorBackend.test.onMessageSent?.({domain: 'Test', method: 'Test.test', params: {test: 'test'}, id: 1}, null);\n    assert.deepEqual((await view.nextInput).messages.map(m => ({method: m.method, params: m.params, id: m.id})), [\n      {\n        method: 'Test.test',\n        params: {test: 'test'},\n        id: 1,\n      },\n    ]);\n\n    InspectorBackend.test.onMessageReceived?.(\n        {\n          id: 1,\n          method: 'Test.test',\n          params: {test: 'test'},\n          requestTime: 0,\n          result: {test: 'test'},\n        },\n        null);\n    assert.deepEqual(\n        (await view.nextInput).messages.map(m => ({method: m.method, params: m.params, id: m.id, result: m.result})), [\n          {\n            method: 'Test.test',\n            params: {test: 'test'},\n            id: 1,\n            result: {test: 'test'},\n          },\n        ]);\n  });\n\n  it('only records commands if recording is enabled', async () => {\n    InspectorBackend.test.onMessageSent?.({domain: 'Test', method: 'Test.test', params: {test: 'test'}, id: 1}, null);\n\n    protocolMonitor.wasShown();\n    InspectorBackend.test.onMessageSent?.({domain: 'Test', method: 'Test.test', params: {test: 'test'}, id: 2}, null);\n    assert.deepEqual((await view.nextInput).messages.map(m => ({method: m.method, params: m.params, id: m.id})), [\n      {\n        method: 'Test.test',\n        params: {test: 'test'},\n        id: 2,\n      },\n    ]);\n\n    view.input.onRecord({target: {toggled: false}} as unknown as Event);\n    InspectorBackend.test.onMessageSent?.({domain: 'Test', method: 'Test.test', params: {test: 'test'}, id: 3}, null);\n    view.input.onRecord({target: {toggled: true}} as unknown as Event);\n    InspectorBackend.test.onMessageSent?.({domain: 'Test', method: 'Test.test', params: {test: 'test'}, id: 4}, null);\n    assert.deepEqual((await view.nextInput).messages.map(m => ({method: m.method, params: m.params, id: m.id})), [\n      {\n        method: 'Test.test',\n        params: {test: 'test'},\n        id: 2,\n      },\n      {\n        method: 'Test.test',\n        params: {test: 'test'},\n        id: 4,\n      },\n    ]);\n  });\n\n  it('clears messages', async () => {\n    protocolMonitor.wasShown();\n    InspectorBackend.test.onMessageSent?.({domain: 'Test', method: 'Test.test', params: {test: 'test'}, id: 2}, null);\n    assert.lengthOf((await view.nextInput).messages, 1);\n\n    view.input.onClear();\n    assert.lengthOf((await view.nextInput).messages, 0);\n  });\n\n  it('saves to file', async () => {\n    const fileManager = stubFileManager();\n    const fileManagerCloseCall = expectCall(fileManager.close);\n\n    protocolMonitor.wasShown();\n    InspectorBackend.test.onMessageSent?.({domain: 'Test', method: 'Test.test', params: {test: 'test'}, id: 2}, null);\n\n    const TIMESTAMP = 42;\n    const clock = sinon.useFakeTimers();\n    clock.tick(TIMESTAMP);\n    const FILENAME = 'ProtocolMonitor-' + Platform.DateUtilities.toISO8601Compact(new Date(TIMESTAMP)) + '.json' as\n        Platform.DevToolsPath.RawPathString;\n\n    (await view.nextInput).onSave();\n\n    assert.isTrue(fileManager.save.calledOnce);\n    assert.isTrue(fileManager.save.calledOnceWith(FILENAME, '', true, false));\n    await fileManagerCloseCall;\n    assert.isTrue(fileManager.append.calledOnceWith(FILENAME, sinon.match('\"method\": \"Test.test\"')));\n\n    clock.restore();\n  });\n\n  describe('context menu', () => {\n    let menu!: UI.ContextMenu.ContextMenu;\n    let element!: HTMLElement;\n\n    function triggerContextMenu(index: number) {\n      menu = new UI.ContextMenu.ContextMenu(new Event('contextmenu'));\n      element = {dataset: {index: `${index}`}} as unknown as HTMLElement;\n      view.input.onSelect(new CustomEvent('select', {detail: element}));\n      view.input.onContextMenu(new CustomEvent('contextmenu', {detail: {menu, element}}));\n    }\n\n    beforeEach(() => {\n      menu = new UI.ContextMenu.ContextMenu(new Event('contextmenu'));\n      protocolMonitor.wasShown();\n      InspectorBackend.test.onMessageSent?.(\n          {domain: 'Test', method: 'Test.test1', params: {test: 'test'}, id: 2}, null);\n      InspectorBackend.test.onMessageSent?.(\n          {domain: 'Test', method: 'Test.test2', params: {test: 'test'}, id: 2}, null);\n      triggerContextMenu(1);\n    });\n\n    it('priovides edit and resend context menu item', async () => {\n      assert.isFalse(view.input.sidebarVisible);\n\n      let editAndResend = findMenuItemWithLabel(menu.editSection(), 'Edit and resend');\n      assert.exists(editAndResend);\n      menu.invokeHandler(editAndResend.id());\n\n      assert.strictEqual((await view.nextInput).command, '{\"command\":\"Test.test2\",\"parameters\":{\"test\":\"test\"}}');\n      assert.isTrue(view.input.sidebarVisible);\n\n      const displayCommandStub = sinon.stub(jsonEditor, 'displayCommand');\n\n      triggerContextMenu(0);\n      editAndResend = findMenuItemWithLabel(menu.editSection(), 'Edit and resend');\n      assert.exists(editAndResend);\n      menu.invokeHandler(editAndResend.id());\n\n      assert.isTrue(displayCommandStub.calledOnceWith('Test.test1', {test: 'test'}, ''));\n    });\n\n    it('priovides filter context menu item', async () => {\n      const filter = findMenuItemWithLabel(menu.editSection(), 'Filter');\n      assert.exists(filter);\n      menu.invokeHandler(filter.id());\n\n      assert.strictEqual((await view.nextInput).filter, 'method:Test.test2');\n    });\n\n    it('priovides documentation context menu item', async () => {\n      const documentation = findMenuItemWithLabel(menu.footerSection(), 'Documentation');\n      assert.exists(documentation);\n\n      const openInNewTabStub = sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'openInNewTab');\n      menu.invokeHandler(documentation.id());\n\n      assert.isTrue(\n          openInNewTabStub.calledOnceWith('https://chromedevtools.github.io/devtools-protocol/tot/Test#method-test2'));\n    });\n  });\n\n  describe('Display command written in editor inside input bar', () => {\n    it('should display the command edited inside the CDP editor into the input bar', async () => {\n      jsonEditor.command = 'Test.test';\n      jsonEditor.parameters = [\n        {\n          name: 'test',\n          type: ProtocolMonitor.JSONEditor.ParameterType.STRING,\n          description: 'test',\n          optional: false,\n          value: 'test',\n        },\n      ];\n      view.input.onSplitChange(new CustomEvent('change', {detail: 'OnlyMain'}));\n      assert.deepEqual((await view.nextInput).command, '{\"command\":\"Test.test\",\"parameters\":{\"test\":\"test\"}}');\n    });\n\n    it('should update the selected target inside the input bar', async () => {\n      jsonEditor.targetId = 'value2';\n      sinon.stub(SDK.TargetManager.TargetManager.instance(), 'targets').returns([\n        {id: () => 'value1'} as SDK.Target.Target,\n        {id: () => 'value2'} as SDK.Target.Target,\n      ]);\n      view.input.onSplitChange(new CustomEvent('change', {detail: 'OnlyMain'}));\n      assert.deepEqual((await view.nextInput).selectedTargetId, 'value2');\n    });\n\n    it('should not display the command into the input bar if the command is empty string', async () => {\n      jsonEditor.command = '';\n      view.input.onSplitChange(new CustomEvent('change', {detail: 'OnlyMain'}));\n\n      assert.deepEqual((await view.nextInput).command, '');\n    });\n  });\n\n  describe('parseCommandInput', () => {\n    it('parses various JSON formats', async () => {\n      const input = {\n        command: 'Input.dispatchMouseEvent',\n        parameters: {parameter1: 'value1'},\n      };\n      // \"command\" variations.\n      assert.deepEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            command: input.command,\n            parameters: input.parameters,\n          })),\n          input);\n      assert.deepEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            cmd: input.command,\n            parameters: input.parameters,\n          })),\n          input);\n      assert.deepEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            method: input.command,\n            parameters: input.parameters,\n          })),\n          input);\n\n      // \"parameters\" variations.\n      assert.deepEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            command: input.command,\n            params: input.parameters,\n          })),\n          input);\n      assert.deepEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            cmd: input.command,\n            args: input.parameters,\n          })),\n          input);\n      assert.deepEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            method: input.command,\n            arguments: input.parameters,\n          })),\n          input);\n    });\n\n    it('parses non-JSON data as a command name', async () => {\n      assert.deepEqual(ProtocolMonitor.ProtocolMonitor.parseCommandInput('Input.dispatchMouseEvent'), {\n        command: 'Input.dispatchMouseEvent',\n        parameters: {},\n      });\n    });\n\n    it('should correctly creates a map of CDP commands with their corresponding metadata', async () => {\n      const domains = [\n        {\n          domain: 'Test',\n          metadata: {\n            'Test.test': {\n              parameters: [{\n                name: 'test',\n                type: 'test',\n                optional: true,\n              }],\n              description: 'Description1',\n              replyArgs: ['Test1'],\n            },\n          },\n        },\n        {\n          domain: 'Test2',\n          metadata: {\n            'Test2.test2': {\n              parameters: [{\n                name: 'test2',\n                type: 'test2',\n                optional: true,\n              }],\n              description: 'Description2',\n              replyArgs: ['Test2'],\n            },\n            'Test2.test3': {\n              parameters: [{\n                name: 'test3',\n                type: 'test3',\n                optional: true,\n              }],\n              description: 'Description3',\n              replyArgs: ['Test3'],\n            },\n          },\n        },\n      ] as Iterable<ProtocolMonitor.ProtocolMonitor.ProtocolDomain>;\n\n      const expectedCommands = new Map();\n      expectedCommands.set('Test.test', {\n        parameters: [{\n          name: 'test',\n          type: 'test',\n          optional: true,\n        }],\n        description: 'Description1',\n        replyArgs: ['Test1'],\n      });\n      expectedCommands.set('Test2.test2', {\n        parameters: [{\n          name: 'test2',\n          type: 'test2',\n          optional: true,\n        }],\n        description: 'Description2',\n        replyArgs: ['Test2'],\n      });\n      expectedCommands.set('Test2.test3', {\n        parameters: [{\n          name: 'test3',\n          type: 'test3',\n          optional: true,\n        }],\n        description: 'Description3',\n        replyArgs: ['Test3'],\n      });\n\n      const metadataByCommand = ProtocolMonitor.ProtocolMonitor.buildProtocolMetadata(domains);\n      assert.deepEqual(metadataByCommand, expectedCommands);\n    });\n  });\n\n  describe('HistoryAutocompleteDataProvider', () => {\n    it('should create completions with no history', async () => {\n      const provider = new ProtocolMonitor.ProtocolMonitor.CommandAutocompleteSuggestionProvider();\n      assert.deepEqual(await provider.buildTextPromptCompletions('test', 'test'), []);\n    });\n\n    it('should build completions in the reverse insertion order', async () => {\n      const provider = new ProtocolMonitor.ProtocolMonitor.CommandAutocompleteSuggestionProvider();\n\n      provider.addEntry('test1');\n      provider.addEntry('test2');\n      provider.addEntry('test3');\n      assert.deepEqual(await provider.buildTextPromptCompletions('test', 'test'), [\n        {text: 'test3'},\n        {text: 'test2'},\n        {text: 'test1'},\n      ]);\n\n      provider.addEntry('test1');\n      assert.deepEqual(await provider.buildTextPromptCompletions('test', 'test'), [\n        {text: 'test1'},\n        {text: 'test3'},\n        {text: 'test2'},\n      ]);\n    });\n\n    it('should limit the number of completions', async () => {\n      const provider = new ProtocolMonitor.ProtocolMonitor.CommandAutocompleteSuggestionProvider(2);\n\n      provider.addEntry('test1');\n      provider.addEntry('test2');\n      provider.addEntry('test3');\n\n      assert.deepEqual(await provider.buildTextPromptCompletions('test', 'test'), [\n        {text: 'test3'},\n        {text: 'test2'},\n      ]);\n    });\n  });\n});\n"]}