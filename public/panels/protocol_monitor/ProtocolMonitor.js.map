{"version":3,"file":"ProtocolMonitor.js","sourceRoot":"","sources":["../../../../../../front_end/panels/protocol_monitor/ProtocolMonitor.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAC7B,mDAAmD;AAEnD,OAAO,2BAA2B,CAAC;AACnC,OAAO,mDAAmD,CAAC;AAE3D,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,QAAQ,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,cAAc,MAAM,+CAA+C,CAAC;AAChF,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,KAAK,QAAQ,MAAM,mCAAmC,CAAC;AAC9D,OAAO,KAAK,SAAS,MAAM,uCAAuC,CAAC;AACnE,OAAO,KAAK,OAAO,MAAM,wCAAwC,CAAC;AAClE,OAAO,KAAK,WAAW,MAAM,yDAAyD,CAAC;AACvF,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAChD,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,MAAM,EAAC,MAAM,qBAAqB,CAAC;AAC7D,OAAO,KAAK,aAAa,MAAM,2CAA2C,CAAC;AAE3E,OAAO,EAA6B,UAAU,EAAiB,MAAM,iBAAiB,CAAC;AACvF,OAAO,qBAAqB,MAAM,0BAA0B,CAAC;AAE7D,MAAM,EAAC,QAAQ,EAAC,GAAG,UAAU,CAAC;AAC9B,MAAM,EAAC,YAAY,EAAE,SAAS,EAAC,GAAG,EAAE,CAAC,MAAM,CAAC;AAC5C,MAAM,SAAS,GAAG;IAChB;;OAEG;IACH,MAAM,EAAE,QAAQ;IAChB;;;;OAIG;IACH,IAAI,EAAE,MAAM;IACZ;;OAEG;IACH,OAAO,EAAE,SAAS;IAClB;;;OAGG;IACH,QAAQ,EAAE,UAAU;IACpB;;OAEG;IACH,SAAS,EAAE,WAAW;IACtB;;OAEG;IACH,WAAW,EAAE,cAAc;IAC3B;;OAEG;IACH,MAAM,EAAE,QAAQ;IAChB;;OAEG;IACH,MAAM,EAAE,QAAQ;IAChB;;OAEG;IACH,QAAQ,EAAE,WAAW;IACrB;;OAEG;IACH,MAAM,EAAE,QAAQ;IAChB;;OAEG;IACH,aAAa,EAAE,eAAe;IAC9B;;OAEG;IACH,aAAa,EAAE,iBAAiB;IAChC;;;OAGG;IACH,GAAG,EAAE,UAAU;IACf;;OAEG;IACH,iBAAiB,EAAE,qBAAqB;IACxC;;OAEG;IACH,oBAAoB,EAAE,qCAAqC;IAC3D;;OAEG;IACH,IAAI,EAAE,MAAM;IACZ;;OAEG;IACH,OAAO,EAAE,SAAS;IAClB;;OAEG;IACH,iBAAiB,EAAE,0BAA0B;IAC7C;;OAEG;IACH,4BAA4B,EACxB,oTAAoT;IAExT;;OAEG;IACH,YAAY,EAAE,iBAAiB;IAC/B;;;OAGG;IACH,oBAAoB,EAAE,yBAAyB;IAC/C;;;OAGG;IACH,oBAAoB,EAAE,0BAA0B;CACxC,CAAC;AACX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,4CAA4C,EAAE,SAAS,CAAC,CAAC;AAClG,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,OAAiC,EACc,EAAE;IACjF,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAA+E,CAAC;IACjH,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;QAC7B,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;YACnD,iBAAiB,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IACD,OAAO,iBAAiB,CAAC;AAC3B,CAAC,CAAC;AAEN,MAAM,iBAAiB,GAAG,qBAAqB,CAC3C,cAAc,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,EAA8B,CAAC,CAAC;AAC3G,MAAM,WAAW,GAAG,cAAc,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,OAAmC,CAAC;AACzG,MAAM,WAAW,GAAG,cAAc,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,OAA8C,CAAC;AAuDpH,MAAM,CAAC,MAAM,YAAY,GAAS,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE;IAC1D,mBAAmB;IACjB,MAAM,CAAC,IAAI,CAAA;iBACE;IACP;;;;;MAKE;IACF,mEAAmE;IACnE,EAAE,CAAC,qBACL;iBACS,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,qBAAqB,CAAC;;;;kDAIZ,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ;uCACtD,KAAK,CAAC,aAAa;;;uCAGnB,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC;wCAC3B,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC;4CACxB,cAAc;mDACP,aAAa;gDAChB,mCAAmC;2CACxC,sDAAkC;8CAC/B,gDAA6B;2CAChC,IAAI;yCACN,KAAK,CAAC,QAAQ;uCAChB,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC;2CAC1B,OAAO;0CACR,8CAA8B;+CACzB,4BAA4B;wCACnC,KAAK,CAAC,OAAO;uCACd,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;2CACtB,UAAU;0CACX,8CAA8B;+CACzB,uBAAuB;wCAC9B,KAAK,CAAC,MAAM;;;;8CAIN,KAAK,CAAC,MAAM;gDACV,KAAK,CAAC,eAAe;;oBAEjD,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAA;wCACZ,GAAG,GAAG,GAAG;wCACT,GAAG,GAAG,GAAG,GAAG,GAAG,YAAY,CAAC;;;;;;;;;4BASxC,KAAK,CAAC,QAAQ;iCACT,KAAK,CAAC,aAAa;6BACvB,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC;;;;0BAIlC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;;;0BAG1B,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC;;;0BAG5B,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC;;;0BAG7B,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC;;;0BAG9B,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC;;;0BAGjC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC;;;0BAG/B,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC;;;0BAG5B,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC;;;sBAI3C,KAAK,CAAC,QAAQ,CAAC,GAAG,CACd,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,CAAA;uCACD,KAAK;;0BAElB,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,CAAA;;;;gCAIhB,CAAC,CAAC,CAAC,IAAI,CAAA;;;;gCAIP;8BACF,OAAO,CAAC,MAAM;8BACd,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAA,SAAS,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;;4BAE5E,OAAO,CAAC,MAAM,CAAI,CAAC,CAAC,IAAI,CAAA,SAAS,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACtE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAA,SAAS,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACrD,WAAW;;yCAElB,OAAO,CAAC,WAAW,IAAI,CAAC;4BACrC,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,CAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1B,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE,EAAC,GAAG,EAAE,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAC,CAAC;YAC/D,CAAC,CAAC,WAAW;;yCAEpB,OAAO,CAAC,WAAW,IAAI,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE,EAAC,GAAG,EAAE,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAC,CAAC;8BAC/F,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC;8BAC9B,OAAO,CAAC,SAAS,IAAI,EAAE;4BACzB,CAAC;;;+CAGkB,YAAY,CAAC,UAAU,EAAE;QACpD,OAAO,EAAE,KAAK,CAAC,eAAe,EAAE,MAAM;QACtC,QAAQ,EAAE,KAAK,CAAC,eAAe,EAAE,MAAM,IAAI,KAAK,CAAC,eAAe,EAAE,KAAK;QACvE,IAAI,EAAE,CAAC,KAAK,CAAC,eAAe,CAAW,CAAC,CAAC,SAAS,CAAC,CAAC;YAC9C,CAAC,IAAI,IAAI,KAAK,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,MAAM;gBACR,CAAC,CAAC,UAAU;KACpD,CAAC;;;;;uBAKG,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC;wCACd,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC;2CAC3G,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,iBAAiB;0CAC9D,8CAA8B;+CACzB,wCAAwC;wCAC/C,KAAK,CAAC,eAAe;;;8CAGf,QAAQ,CAAC;QACf,WAAW,EAAE,CAAC;QACd,OAAO,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM;KAAC,CAAC;8CAC3C,KAAK,CAAC,OAAO;;oDAEP,UAAU,CAAC,SAAS,CAAC,iBAAiB,CAAC;8CAC7C,UAAU,CAAC,SAAS,CAAC,4BAA4B,CAAC;gDAChD,KAAK,CAAC,eAAe;gDACrB,KAAK,CAAC,kBAAkB;;oBAEpD,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAA,iBAAiB,CAAC,YAAY,CAAC;;;;8BAI3D,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC;8BAClC,QAAQ,CAAC,EAAC,OAAO,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAC,CAAC;8BAC3D,aAAa,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC;gCAC7D,KAAK,CAAC,cAAc;kBAClC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAA;kCAChB,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC;kCACjD,MAAM,CAAC,EAAE,EAAE,cAAc,MAAM,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,gBAAgB;sBAC3E,MAAM,CAAC,IAAI,EAAE,KAAK,MAAM,CAAC,YAAY,EAAE;4BACjC,CAAC;;;;;8BAKC,YAAY,CAAC,UAAU,EAAE,EAAE,iBAAiB,EAAE,WAAW,EAAE,WAAW,EAAC,CAAC;gBACtF,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,GAAE,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC,CAAA,CAAC,CAAC;;+BAEvC,EACvB,MAAM,CACT,CAAC;IACJ,kBAAkB;AACpB,CAAC,CAAC;AAEF,MAAM,OAAO,mBAAoB,SAAQ,EAAE,CAAC,KAAK,CAAC,KAAK;IAC7C,OAAO,CAAU;IACjB,SAAS,CAAS;IACT,YAAY,GAAG,IAAI,GAAG,EAAmB,CAAC;IAC1C,YAAY,CAAmC;IAChE,WAAW,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IACrE,sCAAsC,GAAG,IAAI,qCAAqC,EAAE,CAAC;IACrF,iBAAiB,CAAS;IAC1B,QAAQ,GAAG,EAAE,CAAC;IACd,eAAe,GAAG,KAAK,CAAC;IACxB,KAAK,CAAO;IACZ,SAAS,GAAc,EAAE,CAAC;IAC1B,gBAAgB,CAAoB;IACpC,OAAO,GAAG,EAAE,CAAC;IACb,aAAa,CAAc;IAC3B,YAAY,OAAa,YAAY;QACnC,KAAK,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QAEnB,IAAI,CAAC,WAAW,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClF,IAAI,CAAC,YAAY,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE3E,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;QAChC,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,aAAa,CAAC,gBAAgB,sDAAiC,KAAK,CAAC,EAAE;YAC1E,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;QACH,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,gBAAgB,qFACH,GAAG,EAAE;YACvD,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;IACT,CAAC;IAED,qBAAqB;QACnB,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;QACxD,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;QAC7C,IAAI,QAAQ,EAAE,CAAC;YACb,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC;QACpC,CAAC;QACD,IAAI,WAAW,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC;YAC5B,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;IACH,CAAC;IAEQ,aAAa;QACpB,MAAM,SAAS,GAAG;YAChB,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,eAAe,EAAE,IAAI,CAAC,gBAAgB;YACtC,cAAc,EAAE,IAAI,CAAC,eAAe;YACpC,OAAO,EAAE,IAAI,CAAC,QAAQ;YACtB,kBAAkB,EAAE,IAAI,CAAC,sCAAsC,CAAC,cAAc,EAAE;YAChF,UAAU,EAAE,IAAI,CAAC,WAAW;YAC5B,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;YAC5D,aAAa,EAAE,CAAC,CAAsB,EAAE,EAAE;gBACxC,IAAI,CAAC,CAAC,MAAM,KAAK,UAAU,EAAE,CAAC;oBAC5B,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBAC7B,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;gBAC/B,CAAC;qBAAM,CAAC;oBACN,MAAM,EAAC,OAAO,EAAE,UAAU,EAAC,GAAG,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAC/D,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBAC/E,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;gBAC9B,CAAC;gBACD,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,CAAC;YACD,QAAQ,EAAE,CAAC,CAAQ,EAAE,EAAE;gBACrB,IAAI,CAAC,YAAY,CAAE,CAAC,CAAC,MAAgC,CAAC,OAAO,CAAC,CAAC;YACjE,CAAC;YACD,OAAO,EAAE,GAAG,EAAE;gBACZ,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;gBACpB,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;gBAC1B,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,CAAC;YACD,MAAM,EAAE,GAAG,EAAE;gBACX,KAAK,IAAI,CAAC,UAAU,EAAE,CAAC;YACzB,CAAC;YACD,QAAQ,EAAE,CAAC,CAAgC,EAAE,EAAE;gBAC7C,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;gBAC3D,IAAI,CAAC,gBAAgB,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBAC1E,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,CAAC;YACD,aAAa,EAAE,CAAC,CAAwE,EAAE,EAAE;gBAC1F,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;gBACtF,IAAI,OAAO,EAAE,CAAC;oBACZ,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACpD,CAAC;YACH,CAAC;YACD,eAAe,EAAE,CAAC,CAAsB,EAAE,EAAE;gBAC1C,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,MAAM,CAAC;YAC3B,CAAC;YACD,kBAAkB,EAAE,CAAC,CAAsB,EAAE,EAAE;gBAC7C,IAAI,CAAC,sCAAsC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;gBAC/D,MAAM,EAAC,OAAO,EAAE,UAAU,EAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;gBAC1D,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAClE,CAAC;YACD,eAAe,EAAE,CAAC,CAAsB,EAAE,EAAE;gBAC1C,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC;gBACxB,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,CAAC;YACD,cAAc,EAAE,CAAC,CAAQ,EAAE,EAAE;gBAC3B,IAAI,CAAC,CAAC,MAAM,YAAY,iBAAiB,EAAE,CAAC;oBAC1C,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;gBAC1C,CAAC;YACH,CAAC;YACD,eAAe,EAAE,CAAC,EAAS,EAAE,EAAE;gBAC7B,IAAI,CAAC,eAAe,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC;gBAC7C,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,CAAC;YACD,OAAO,EAAE,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE;YAC7D,gBAAgB,EAAE,IAAI,CAAC,iBAAiB;SACzC,CAAC;QACF,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,MAAM,UAAU,GAAG;YACjB,IAAI,YAAY,CAAC,KAAiB;gBAChC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAC7B,CAAC;SACF,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACzD,CAAC;IAED,oBAAoB,CAAC,IAAgC,EAAE,OAAgB;QACrE;;;WAGG;QACH,IAAI,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,GAAG,EAAE;YACtE,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAC3B,OAAO;YACT,CAAC;YACD,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAiC,CAAC;YAC3E,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC;YAC1D,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;YAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,EAAC,OAAO,EAAE,UAAU,EAAC,CAAC,CAAC;YACtD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;gBAC1B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;gBAC5B,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;YACnE,CAAC;QACH,CAAC,EAAE,EAAC,YAAY,EAAE,iBAAiB,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,EAAC,CAAC,CAAC;QAEpE;;;;WAIG;QACH,IAAI,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE;YAC/D,IAAI,CAAC,OAAO,GAAG,UAAU,OAAO,CAAC,MAAM,EAAE,CAAC;YAC1C,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,EAAE,EAAC,YAAY,EAAE,QAAQ,EAAC,CAAC,CAAC;QAE7B;;;WAGG;QACH,IAAI,CAAC,aAAa,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,GAAG,EAAE;YACxE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnD,MAAM,IAAI,GAAG,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC;YAClD,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,CAAC,YAAY,CACjE,0DAA0D,MAAM,IAAI,IAAI,IAAI,MAAM,EACnD,CAAC,CAAC;QACvC,CAAC,EAAE,EAAC,YAAY,EAAE,eAAe,EAAC,CAAC,CAAC;IACtC,CAAC;IAED,aAAa,CAAC,OAAe,EAAE,UAAkB,EAAE,MAAe;QAChE,MAAM,IAAI,GAAG,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC;QAClD,MAAM,aAAa,GAAG,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;QACjE,MAAM,cAAc,GAAG,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACxE,MAAM,SAAS,GAAG,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;QACjE,kDAAkD;QAClD,wCAAwC;QACxC,mBAAmB;QACnB,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,GAAE,CAAC,EAAE,SAAS,CAAC,CAAC;IAChE,CAAC;IAEQ,QAAQ;QACf,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,OAAO;QACT,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAEO,YAAY,CAAC,SAAkB;QACrC,MAAM,IAAI,GAAG,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC;QAClD,IAAI,SAAS,EAAE,CAAC;YACd,mBAAmB;YACnB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjD,mBAAmB;YACnB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3D,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAChC,CAAC;IACH,CAAC;IAEO,eAAe,CAAC,OAAgB,EAAE,MAAuD;QAC/F,IAAI,IAAI,IAAI,OAAO,IAAI,OAAO,CAAC,EAAE,EAAE,CAAC;YAClC,MAAM,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC1D,IAAI,CAAC,eAAe,EAAE,CAAC;gBACrB,OAAO;YACT,CAAC;YACD,eAAe,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YACxC,eAAe,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;YACtC,eAAe,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS,GAAG,eAAe,CAAC,WAAW,CAAC;YAExF,uGAAuG;YACvG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACrC,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,OAAO;QACT,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAClB,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,MAAM,EAAE,CAAC,MAAM,IAAI,SAAS,CAAkC;YAC9D,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS;YACxC,MAAM,EAAE,OAAO,CAAC,MAAM;SACvB,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAEO,WAAW,CACf,OAA0G,EAC1G,MAAuD;QACzD,MAAM,aAAa,GAAG;YACpB,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,EAAE,EAAE,OAAO,CAAC,EAAE;YACd,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,MAAM,EAAE,CAAC,MAAM,IAAI,SAAS,CAAkC;YAC9D,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS;SACzC,CAAC;QACF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACnC,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;IACnD,CAAC;IAEO,KAAK,CAAC,UAAU;QACtB,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,MAAM,QAAQ,GAAG,kBAAkB,GAAG,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,OAC9C,CAAC;QACxC,MAAM,MAAM,GAAG,IAAI,QAAQ,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;QAEzD,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7C,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO;QACT,CAAC;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,EAAE,EAAC,CAAC,CAAC,CAAC;QAE7E,KAAK,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC1D,KAAK,MAAM,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;CACF;AAED,MAAM,OAAO,qCAAqC;IAChD,eAAe,GAAG,GAAG,CAAC;IACtB,eAAe,GAAG,IAAI,GAAG,EAAU,CAAC;IAEpC,YAAY,cAAuB;QACjC,IAAI,cAAc,KAAK,SAAS,EAAE,CAAC;YACjC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACxC,CAAC;IACH,CAAC;IAED,cAAc;QACZ,MAAM,cAAc,GAAG,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,OAAO,EAAE,CAAC;QAC3D,cAAc,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC,IAAI,EAAE,CAAC,CAAC;QACjD,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,0BAA0B,GACtB,KAAK,EAAC,UAAkB,EAAE,MAAc,EAAE,KAAe,EAAsC,EAAE;QACnG,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,IAAI,UAAU,EAAE,CAAC;YACpC,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAC7C,OAAO,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACP,IAAI;SACL,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC;IAEF,QAAQ,CAAC,KAAa;QACpB,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YACpC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACrC,CAAC;QACD,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAChC,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YACrD,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAe,CAAC;YAC3E,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;CACF;AAED,MAAM,OAAO,UAAW,SAAQ,EAAE,CAAC,MAAM,CAAC,IAAI;IAC3B,UAAU,CAA2B;IACtD,OAAO,CAAoC;IAC3C,QAAQ,CAAoC;IAC5C,IAAI,CAA8B;IAClC,WAAW,CAAiC;IAC5C,YAAY,OAAoB;QAC9B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,UAAU,GAAG,IAAI,EAAE,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QACjD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;QAC5F,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,EAAE,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;QAC9F,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC1C,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACtC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACpB,CAAC;IAEQ,aAAa;QACpB,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACpC,IAAI,CAAC,UAAU,CAAC,aAAa,CACzB,SAAS,EACT,IAAI,EAAE,CAAC,WAAW,CAAC,WAAW,CAC1B,UAAU,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;YAC9F,IAAI,CAAC,UAAU,CAAC,aAAa,CACzB,UAAU,EACV,IAAI,EAAE,CAAC,WAAW,CAAC,WAAW,CAC1B,UAAU,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;YAC9F,OAAO;QACT,CAAC;QAED,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC;QACzD,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;QAClE,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACxC,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,EAAE,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;QAC7G,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,EAAE,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;QAC/G,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;CACF;AAED,MAAM,UAAU,iBAAiB,CAAC,KAAa;IAC7C,qEAAqE;IACrE,mEAAmE;IACnE,yFAAyF;IACzF,IAAI,IAAI,GAAG,IAAI,CAAC;IAChB,IAAI,CAAC;QACH,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAAC,MAAM,CAAC;IACT,CAAC;IAED,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;IAC7E,MAAM,UAAU,GAAG,IAAI,EAAE,UAAU,IAAI,IAAI,EAAE,MAAM,IAAI,IAAI,EAAE,IAAI,IAAI,IAAI,EAAE,SAAS,IAAI,EAAE,CAAC;IAE3F,OAAO,EAAC,OAAO,EAAE,UAAU,EAAC,CAAC;AAC/B,CAAC;AAED,SAAS,cAAc,CAAC,MAAmC;IACzD,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,OAAO,MAAM,CAAC,aAAa,CACvB,GAAG,MAAM,CAAC,IAAI,EAAE,IAAI,MAAM,KAAK,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AACnH,CAAC","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport '../../ui/legacy/legacy.js';\nimport '../../ui/legacy/components/data_grid/data_grid.js';\n\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as ProtocolClient from '../../core/protocol_client/protocol_client.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {Directives, html, render} from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {Events as JSONEditorEvents, JSONEditor, type Parameter} from './JSONEditor.js';\nimport protocolMonitorStyles from './protocolMonitor.css.js';\n\nconst {styleMap} = Directives;\nconst {widgetConfig, widgetRef} = UI.Widget;\nconst UIStrings = {\n  /**\n   * @description Text for one or a group of functions\n   */\n  method: 'Method',\n  /**\n   * @description Text in Protocol Monitor. Title for a table column which shows in which direction\n   * the particular protocol message was travelling. Values in this column will either be 'sent' or\n   * 'received'.\n   */\n  type: 'Type',\n  /**\n   * @description Text in Protocol Monitor of the Protocol Monitor tab. Noun relating to a network request.\n   */\n  request: 'Request',\n  /**\n   * @description Title of a cell content in protocol monitor. A Network response refers to the act of acknowledging a\n   * network request. Should not be confused with answer.\n   */\n  response: 'Response',\n  /**\n   * @description Text for timestamps of items\n   */\n  timestamp: 'Timestamp',\n  /**\n   * @description Title of a cell content in protocol monitor. It describes the time between sending a request and receiving a response.\n   */\n  elapsedTime: 'Elapsed time',\n  /**\n   * @description Text in Protocol Monitor of the Protocol Monitor tab\n   */\n  target: 'Target',\n  /**\n   * @description Text to record a series of actions for analysis\n   */\n  record: 'Record',\n  /**\n   * @description Text to clear everything\n   */\n  clearAll: 'Clear all',\n  /**\n   * @description Text to filter result items\n   */\n  filter: 'Filter',\n  /**\n   * @description Text for the documentation of something\n   */\n  documentation: 'Documentation',\n  /**\n   * @description Text to open the CDP editor with the selected command\n   */\n  editAndResend: 'Edit and resend',\n  /**\n   * @description Cell text content in Protocol Monitor of the Protocol Monitor tab\n   * @example {30} PH1\n   */\n  sMs: '{PH1} ms',\n  /**\n   * @description Text in Protocol Monitor of the Protocol Monitor tab\n   */\n  noMessageSelected: 'No message selected',\n  /**\n   * @description Text in Protocol Monitor of the Protocol Monitor tab if no message is selected\n   */\n  selectAMessageToView: 'Select a message to see its details',\n  /**\n   * @description Text in Protocol Monitor for the save button\n   */\n  save: 'Save',\n  /**\n   * @description Text in Protocol Monitor to describe the sessions column\n   */\n  session: 'Session',\n  /**\n   * @description A placeholder for an input in Protocol Monitor. The input accepts commands that are sent to the backend on Enter. CDP stands for Chrome DevTools Protocol.\n   */\n  sendRawCDPCommand: 'Send a raw `CDP` command',\n  /**\n   * @description A tooltip text for the input in the Protocol Monitor panel. The tooltip describes what format is expected.\n   */\n  sendRawCDPCommandExplanation:\n      'Format: `\\'Domain.commandName\\'` for a command without parameters, or `\\'{\"command\":\"Domain.commandName\", \"parameters\": {...}}\\'` as a JSON object for a command with parameters. `\\'cmd\\'`/`\\'method\\'` and `\\'args\\'`/`\\'params\\'`/`\\'arguments\\'` are also supported as alternative keys for the `JSON` object.',\n\n  /**\n   * @description A label for a select input that allows selecting a CDP target to send the commands to.\n   */\n  selectTarget: 'Select a target',\n  /**\n   * @description Tooltip for the the console sidebar toggle in the Console panel. Command to\n   * open/show the sidebar.\n   */\n  showCDPCommandEditor: 'Show CDP command editor',\n  /**\n   * @description Tooltip for the the console sidebar toggle in the Console panel. Command to\n   * open/show the sidebar.\n   */\n  hideCDPCommandEditor: 'Hide  CDP command editor',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/protocol_monitor/ProtocolMonitor.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport const buildProtocolMetadata = (domains: Iterable<ProtocolDomain>):\n    Map<string, {parameters: Parameter[], description: string, replyArgs: string[]}> => {\n      const metadataByCommand = new Map<string, {parameters: Parameter[], description: string, replyArgs: string[]}>();\n      for (const domain of domains) {\n        for (const command of Object.keys(domain.metadata)) {\n          metadataByCommand.set(command, domain.metadata[command]);\n        }\n      }\n      return metadataByCommand;\n    };\n\nconst metadataByCommand = buildProtocolMetadata(\n    ProtocolClient.InspectorBackend.inspectorBackend.agentPrototypes.values() as Iterable<ProtocolDomain>);\nconst typesByName = ProtocolClient.InspectorBackend.inspectorBackend.typeMap as Map<string, Parameter[]>;\nconst enumsByName = ProtocolClient.InspectorBackend.inspectorBackend.enumMap as Map<string, Record<string, string>>;\nexport interface Message {\n  id?: number;\n  method: string;\n  error?: Record<string, unknown>;\n  result?: Record<string, unknown>;\n  params?: Record<string, unknown>;\n  requestTime: number;\n  elapsedTime?: number;\n  sessionId?: string;\n  target?: SDK.Target.Target;\n}\nexport interface LogMessage {\n  id?: number;\n  domain: string;\n  method: string;\n  params: Object;\n  type: 'send'|'recv';\n}\n\nexport interface ProtocolDomain {\n  readonly domain: string;\n  readonly metadata: Record<string, {parameters: Parameter[], description: string, replyArgs: string[]}>;\n}\n\nexport interface ViewInput {\n  messages: Message[];\n  selectedMessage?: Message;\n  sidebarVisible: boolean;\n  command: string;\n  commandSuggestions: string[];\n  filterKeys: string[];\n  filter: string;\n  parseFilter: (filter: string) => TextUtils.TextUtils.ParsedFilter[];\n  onRecord: (e: Event) => void;\n  onClear: () => void;\n  onSave: () => void;\n  onSplitChange: (e: CustomEvent<string>) => void;\n  onSelect: (e: CustomEvent<HTMLElement|null>) => void;\n  onContextMenu: (e: CustomEvent<{menu: UI.ContextMenu.ContextMenu, element: HTMLElement}>) => void;\n  onFilterChanged: (e: CustomEvent<string>) => void;\n  onCommandChange: (e: CustomEvent<string>) => void;\n  onCommandSubmitted: (e: CustomEvent<string>) => void;\n  onTargetChange: (e: Event) => void;\n  onToggleSidebar: (e: Event) => void;\n  targets: SDK.Target.Target[];\n  selectedTargetId: string;\n}\n\nexport interface ViewOutput {\n  editorWidget: JSONEditor;\n}\n\nexport type View = (input: ViewInput, output: ViewOutput, target: HTMLElement) => void;\n\nexport const DEFAULT_VIEW: View = (input, output, target) => {\n  // clang-format off\n    render(html`\n        <style>${\n          /*\n          * Reason for eslint-disable:\n          * In the live application, the component inherits its font-family from a global stylesheet appended to `document.body`.\n          * In screenshot tests, that global sheet is not present, so this component is rendered in default system fonts.\n          * TODO(crbug.com/437352350): We should update our screenshot tests to load `inspectorCommonStyles` and remove this eslint-disable.\n          */\n          /* eslint-disable-next-line rulesdir/no-unscoped-styles-in-views */\n          UI.inspectorCommonStyles\n        }</style>\n        <style>${UI.Widget.widgetScoped(protocolMonitorStyles)}</style>\n        <devtools-split-view name=\"protocol-monitor-split-container\"\n                             direction=\"column\"\n                             sidebar-initial-size=\"400\"\n                             sidebar-visibility=${input.sidebarVisible ? 'visible' : 'hidden'}\n                             @change=${input.onSplitChange}>\n          <div slot=\"main\" class=\"vbox protocol-monitor-main\">\n            <devtools-toolbar class=\"protocol-monitor-toolbar\"\n                               jslog=${VisualLogging.toolbar('top')}>\n               <devtools-button title=${i18nString(UIStrings.record)}\n                                .iconName=${'record-start'}\n                                .toggledIconName=${'record-stop'}\n                                .jslogContext=${'protocol-monitor.toggle-recording'}\n                                .variant=${Buttons.Button.Variant.ICON_TOGGLE}\n                                .toggleType=${Buttons.Button.ToggleType.RED}\n                                .toggled=${true}\n                                @click=${input.onRecord}></devtools-button>\n              <devtools-button title=${i18nString(UIStrings.clearAll)}\n                               .iconName=${'clear'}\n                               .variant=${Buttons.Button.Variant.TOOLBAR}\n                               .jslogContext=${'protocol-monitor.clear-all'}\n                               @click=${input.onClear}></devtools-button>\n              <devtools-button title=${i18nString(UIStrings.save)}\n                               .iconName=${'download'}\n                               .variant=${Buttons.Button.Variant.TOOLBAR}\n                               .jslogContext=${'protocol-monitor.save'}\n                               @click=${input.onSave}></devtools-button>\n              <devtools-toolbar-input type=\"filter\"\n                                      list=\"filter-suggestions\"\n                                      style=\"flex-grow: 1\"\n                                      value=${input.filter}\n                                      @change=${input.onFilterChanged}>\n                <datalist id=\"filter-suggestions\">\n                  ${input.filterKeys.map(key => html`\n                        <option value=${key + ':'}></option>\n                        <option value=${'-' + key + ':'}></option>`)}\n                </datalist>\n              </devtools-toolbar-input>\n            </devtools-toolbar>\n            <devtools-split-view direction=\"column\" sidebar-position=\"second\"\n                                 name=\"protocol-monitor-panel-split\" sidebar-initial-size=\"250\">\n              <devtools-data-grid\n                  striped\n                  slot=\"main\"\n                  @select=${input.onSelect}\n                  @contextmenu=${input.onContextMenu}\n                  .filters=${input.parseFilter(input.filter)}>\n                <table>\n                    <tr>\n                      <th id=\"type\" sortable style=\"text-align: center\" hideable weight=\"1\">\n                        ${i18nString(UIStrings.type)}\n                      </th>\n                      <th id=\"method\" weight=\"5\">\n                        ${i18nString(UIStrings.method)}\n                      </th>\n                      <th id=\"request\" hideable weight=\"5\">\n                        ${i18nString(UIStrings.request)}\n                      </th>\n                      <th id=\"response\" hideable weight=\"5\">\n                        ${i18nString(UIStrings.response)}\n                      </th>\n                      <th id=\"elapsed-time\" sortable hideable weight=\"2\">\n                        ${i18nString(UIStrings.elapsedTime)}\n                      </th>\n                      <th id=\"timestamp\" sortable hideable weight=\"5\">\n                        ${i18nString(UIStrings.timestamp)}\n                      </th>\n                      <th id=\"target\" sortable hideable weight=\"5\">\n                        ${i18nString(UIStrings.target)}\n                      </th>\n                      <th id=\"session\" sortable hideable weight=\"5\">\n                        ${i18nString(UIStrings.session)}\n                      </th>\n                    </tr>\n                    ${\n            input.messages.map(\n                (message, index) => html`\n                      <tr data-index=${index}\n                          style=\"--override-data-grid-row-background-color: var(--sys-color-surface3)\">\n                        ${'id' in message ? html`\n                          <td title=\"sent\">\n                            <devtools-icon name=\"arrow-up-down\" style=\"color: var(--icon-request-response); width: 16px; height: 16px;\">\n                            </devtools-icon>\n                          </td>` : html`\n                          <td title=\"received\">\n                            <devtools-icon name=\"arrow-down\" style=\"color: var(--icon-request); width: 16px; height: 16px;\">\n                            </devtools-icon>\n                          </td>`}\n                        <td>${message.method}</td>\n                        <td>${message.params ? html`<code>${JSON.stringify(message.params)}</code>` : ''}</td>\n                        <td>\n                          ${message.result    ? html`<code>${JSON.stringify(message.result)}</code>` :\n                                message.error ? html`<code>${JSON.stringify(message.error)}</code>` :\n                                                '(pending)'}\n                        </td>\n                        <td data-value=${message.elapsedTime || 0}>\n                          ${!('id' in message)  ? '' :\n                            message.elapsedTime ? i18nString(UIStrings.sMs, {PH1: String(message.elapsedTime)})\n                                                : '(pending)'}\n                        </td>\n                        <td data-value=${message.requestTime}>${i18nString(UIStrings.sMs, {PH1: String(message.requestTime)})}</td>\n                        <td>${targetToString(message.target)}</td>\n                        <td>${message.sessionId || ''}</td>\n                      </tr>`)}\n                  </table>\n              </devtools-data-grid>\n              <devtools-widget .widgetConfig=${widgetConfig(InfoWidget, {\n                    request: input.selectedMessage?.params,\n                    response: input.selectedMessage?.result || input.selectedMessage?.error,\n                    type: !input.selectedMessage           ? undefined :\n                          ('id' in input?.selectedMessage) ? 'sent'\n                                                           : 'received',\n                  })}\n                  class=\"protocol-monitor-info\"\n                  slot=\"sidebar\"></devtools-widget>\n            </devtools-split-view>\n            <devtools-toolbar class=\"protocol-monitor-bottom-toolbar\"\n               jslog=${VisualLogging.toolbar('bottom')}>\n              <devtools-button .title=${input.sidebarVisible ? i18nString(UIStrings.hideCDPCommandEditor) : i18nString(UIStrings.showCDPCommandEditor)}\n                               .iconName=${input.sidebarVisible ? 'left-panel-close' : 'left-panel-open'}\n                               .variant=${Buttons.Button.Variant.TOOLBAR}\n                               .jslogContext=${'protocol-monitor.toggle-command-editor'}\n                               @click=${input.onToggleSidebar}></devtools-button>\n              </devtools-button>\n              <devtools-toolbar-input id=\"command-input\"\n                                      style=${styleMap({\n                                        'flex-grow': 1,\n                                        display: input.sidebarVisible ? 'none' : 'flex'})}\n                                      value=${input.command}\n                                      list=\"command-input-suggestions\"\n                                      placeholder=${i18nString(UIStrings.sendRawCDPCommand)}\n                                      title=${i18nString(UIStrings.sendRawCDPCommandExplanation)}\n                                      @change=${input.onCommandChange}\n                                      @submit=${input.onCommandSubmitted}>\n                <datalist id=\"command-input-suggestions\">\n                  ${input.commandSuggestions.map(c => html`<option value=${c}></option>`)}\n                </datalist>\n              </devtools-toolbar-input>\n              <select class=\"target-selector\"\n                      title=${i18nString(UIStrings.selectTarget)}\n                      style=${styleMap({display: input.sidebarVisible ? 'none' : 'flex'})}\n                      jslog=${VisualLogging.dropDown('target-selector').track({change: true})}\n                      @change=${input.onTargetChange}>\n                ${input.targets.map(target => html`\n                  <option jslog=${VisualLogging.item('target').track({click: true})}\n                          value=${target.id()} ?selected=${target.id() === input.selectedTargetId}>\n                    ${target.name()} (${target.inspectedURL()})\n                  </option>`)}\n              </select>\n            </devtools-toolbar>\n          </div>\n          <devtools-widget slot=\"sidebar\"\n              .widgetConfig=${widgetConfig(JSONEditor, { metadataByCommand, typesByName, enumsByName})}\n              ${widgetRef(JSONEditor, e => {output.editorWidget = e;})}>\n          </devtools-widget>\n        </devtools-split-view>`,\n        target\n    );\n  // clang-format on\n};\n\nexport class ProtocolMonitorImpl extends UI.Panel.Panel {\n  private started: boolean;\n  private startTime: number;\n  private readonly messageForId = new Map<number, Message>();\n  private readonly filterParser: TextUtils.TextUtils.FilterParser;\n  #filterKeys = ['method', 'request', 'response', 'target', 'session'];\n  #commandAutocompleteSuggestionProvider = new CommandAutocompleteSuggestionProvider();\n  #selectedTargetId: string;\n  #command = '';\n  #sidebarVisible = false;\n  #view: View;\n  #messages: Message[] = [];\n  #selectedMessage: Message|undefined;\n  #filter = '';\n  #editorWidget!: JSONEditor;\n  constructor(view: View = DEFAULT_VIEW) {\n    super('protocol-monitor', true);\n    this.#view = view;\n    this.started = false;\n    this.startTime = 0;\n\n    this.#filterKeys = ['method', 'request', 'response', 'type', 'target', 'session'];\n    this.filterParser = new TextUtils.TextUtils.FilterParser(this.#filterKeys);\n\n    this.#selectedTargetId = 'main';\n    this.performUpdate();\n    this.#editorWidget.addEventListener(JSONEditorEvents.SUBMIT_EDITOR, event => {\n      this.onCommandSend(event.data.command, event.data.parameters, event.data.targetId);\n    });\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.AVAILABLE_TARGETS_CHANGED, () => {\n          this.requestUpdate();\n        });\n  }\n\n  #populateToolbarInput(): void {\n    const commandJson = this.#editorWidget.getCommandJson();\n    const targetId = this.#editorWidget.targetId;\n    if (targetId) {\n      this.#selectedTargetId = targetId;\n    }\n    if (commandJson) {\n      this.#command = commandJson;\n      this.requestUpdate();\n    }\n  }\n\n  override performUpdate(): void {\n    const viewInput = {\n      messages: this.#messages,\n      selectedMessage: this.#selectedMessage,\n      sidebarVisible: this.#sidebarVisible,\n      command: this.#command,\n      commandSuggestions: this.#commandAutocompleteSuggestionProvider.allSuggestions(),\n      filterKeys: this.#filterKeys,\n      filter: this.#filter,\n      parseFilter: this.filterParser.parse.bind(this.filterParser),\n      onSplitChange: (e: CustomEvent<string>) => {\n        if (e.detail === 'OnlyMain') {\n          this.#populateToolbarInput();\n          this.#sidebarVisible = false;\n        } else {\n          const {command, parameters} = parseCommandInput(this.#command);\n          this.#editorWidget.displayCommand(command, parameters, this.#selectedTargetId);\n          this.#sidebarVisible = true;\n        }\n        this.requestUpdate();\n      },\n      onRecord: (e: Event) => {\n        this.setRecording((e.target as Buttons.Button.Button).toggled);\n      },\n      onClear: () => {\n        this.#messages = [];\n        this.messageForId.clear();\n        this.requestUpdate();\n      },\n      onSave: () => {\n        void this.saveAsFile();\n      },\n      onSelect: (e: CustomEvent<HTMLElement|null>) => {\n        const index = parseInt(e.detail?.dataset?.index ?? '', 10);\n        this.#selectedMessage = !isNaN(index) ? this.#messages[index] : undefined;\n        this.requestUpdate();\n      },\n      onContextMenu: (e: CustomEvent<{menu: UI.ContextMenu.ContextMenu, element: HTMLElement}>) => {\n        const message = this.#messages[parseInt(e.detail?.element?.dataset?.index || '', 10)];\n        if (message) {\n          this.#populateContextMenu(e.detail.menu, message);\n        }\n      },\n      onCommandChange: (e: CustomEvent<string>) => {\n        this.#command = e.detail;\n      },\n      onCommandSubmitted: (e: CustomEvent<string>) => {\n        this.#commandAutocompleteSuggestionProvider.addEntry(e.detail);\n        const {command, parameters} = parseCommandInput(e.detail);\n        this.onCommandSend(command, parameters, this.#selectedTargetId);\n      },\n      onFilterChanged: (e: CustomEvent<string>) => {\n        this.#filter = e.detail;\n        this.requestUpdate();\n      },\n      onTargetChange: (e: Event) => {\n        if (e.target instanceof HTMLSelectElement) {\n          this.#selectedTargetId = e.target.value;\n        }\n      },\n      onToggleSidebar: (_e: Event) => {\n        this.#sidebarVisible = !this.#sidebarVisible;\n        this.requestUpdate();\n      },\n      targets: SDK.TargetManager.TargetManager.instance().targets(),\n      selectedTargetId: this.#selectedTargetId,\n    };\n    const that = this;\n    const viewOutput = {\n      set editorWidget(value: JSONEditor) {\n        that.#editorWidget = value;\n      }\n    };\n    this.#view(viewInput, viewOutput, this.contentElement);\n  }\n\n  #populateContextMenu(menu: UI.ContextMenu.ContextMenu, message: Message): void {\n    /**\n     * You can click the \"Edit and resend\" item in the context menu to be\n     * taken to the CDP editor with the filled with the selected command.\n     */\n    menu.editSection().appendItem(i18nString(UIStrings.editAndResend), () => {\n      if (!this.#selectedMessage) {\n        return;\n      }\n      const parameters = this.#selectedMessage.params as Record<string, unknown>;\n      const targetId = this.#selectedMessage.target?.id() || '';\n      const command = message.method;\n      this.#command = JSON.stringify({command, parameters});\n      if (!this.#sidebarVisible) {\n        this.#sidebarVisible = true;\n        this.requestUpdate();\n      } else {\n        this.#editorWidget.displayCommand(command, parameters, targetId);\n      }\n    }, {jslogContext: 'edit-and-resend', disabled: !('id' in message)});\n\n    /**\n     * You can click the \"Filter\" item in the context menu to filter the\n     * protocol monitor entries to those that match the method of the\n     * current row.\n     */\n    menu.editSection().appendItem(i18nString(UIStrings.filter), () => {\n      this.#filter = `method:${message.method}`;\n      this.requestUpdate();\n    }, {jslogContext: 'filter'});\n\n    /**\n     * You can click the \"Documentation\" item in the context menu to be\n     * taken to the CDP Documentation site entry for the given method.\n     */\n    menu.footerSection().appendItem(i18nString(UIStrings.documentation), () => {\n      const [domain, method] = message.method.split('.');\n      const type = 'id' in message ? 'method' : 'event';\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(\n          `https://chromedevtools.github.io/devtools-protocol/tot/${domain}#${type}-${method}` as\n          Platform.DevToolsPath.UrlString);\n    }, {jslogContext: 'documentation'});\n  }\n\n  onCommandSend(command: string, parameters: object, target?: string): void {\n    const test = ProtocolClient.InspectorBackend.test;\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    const selectedTarget = target ? targetManager.targetById(target) : null;\n    const sessionId = selectedTarget ? selectedTarget.sessionId : '';\n    // TS thinks that properties are read-only because\n    // in TS test is defined as a namespace.\n    // @ts-expect-error\n    test.sendRawMessage(command, parameters, () => {}, sessionId);\n  }\n\n  override wasShown(): void {\n    if (this.started) {\n      return;\n    }\n    this.started = true;\n    this.startTime = Date.now();\n    this.setRecording(true);\n  }\n\n  private setRecording(recording: boolean): void {\n    const test = ProtocolClient.InspectorBackend.test;\n    if (recording) {\n      // @ts-expect-error\n      test.onMessageSent = this.messageSent.bind(this);\n      // @ts-expect-error\n      test.onMessageReceived = this.messageReceived.bind(this);\n    } else {\n      test.onMessageSent = null;\n      test.onMessageReceived = null;\n    }\n  }\n\n  private messageReceived(message: Message, target: ProtocolClient.InspectorBackend.TargetBase|null): void {\n    if ('id' in message && message.id) {\n      const existingMessage = this.messageForId.get(message.id);\n      if (!existingMessage) {\n        return;\n      }\n      existingMessage.result = message.result;\n      existingMessage.error = message.error;\n      existingMessage.elapsedTime = Date.now() - this.startTime - existingMessage.requestTime;\n\n      // Now we've updated the message, it won't be updated again, so we can delete it from the tracking map.\n      this.messageForId.delete(message.id);\n      this.requestUpdate();\n      return;\n    }\n\n    this.#messages.push({\n      method: message.method,\n      sessionId: message.sessionId,\n      target: (target ?? undefined) as SDK.Target.Target | undefined,\n      requestTime: Date.now() - this.startTime,\n      result: message.params,\n    });\n\n    this.requestUpdate();\n  }\n\n  private messageSent(\n      message: {domain: string, method: string, params: Record<string, unknown>, id: number, sessionId?: string},\n      target: ProtocolClient.InspectorBackend.TargetBase|null): void {\n    const messageRecord = {\n      method: message.method,\n      params: message.params,\n      id: message.id,\n      sessionId: message.sessionId,\n      target: (target ?? undefined) as SDK.Target.Target | undefined,\n      requestTime: Date.now() - this.startTime,\n    };\n    this.#messages.push(messageRecord);\n    this.requestUpdate();\n    this.messageForId.set(message.id, messageRecord);\n  }\n\n  private async saveAsFile(): Promise<void> {\n    const now = new Date();\n    const fileName = 'ProtocolMonitor-' + Platform.DateUtilities.toISO8601Compact(now) + '.json' as\n        Platform.DevToolsPath.RawPathString;\n    const stream = new Bindings.FileUtils.FileOutputStream();\n\n    const accepted = await stream.open(fileName);\n    if (!accepted) {\n      return;\n    }\n\n    const rowEntries = this.#messages.map(m => ({...m, target: m.target?.id()}));\n\n    void stream.write(JSON.stringify(rowEntries, null, '  '));\n    void stream.close();\n  }\n}\n\nexport class CommandAutocompleteSuggestionProvider {\n  #maxHistorySize = 200;\n  #commandHistory = new Set<string>();\n\n  constructor(maxHistorySize?: number) {\n    if (maxHistorySize !== undefined) {\n      this.#maxHistorySize = maxHistorySize;\n    }\n  }\n\n  allSuggestions(): string[] {\n    const newestToOldest = [...this.#commandHistory].reverse();\n    newestToOldest.push(...metadataByCommand.keys());\n    return newestToOldest;\n  }\n\n  buildTextPromptCompletions =\n      async(expression: string, prefix: string, force?: boolean): Promise<UI.SuggestBox.Suggestions> => {\n    if (!prefix && !force && expression) {\n      return [];\n    }\n\n    const newestToOldest = this.allSuggestions();\n    return newestToOldest.filter(cmd => cmd.startsWith(prefix)).map(text => ({\n                                                                      text,\n                                                                    }));\n  };\n\n  addEntry(value: string): void {\n    if (this.#commandHistory.has(value)) {\n      this.#commandHistory.delete(value);\n    }\n    this.#commandHistory.add(value);\n    if (this.#commandHistory.size > this.#maxHistorySize) {\n      const earliestEntry = this.#commandHistory.values().next().value as string;\n      this.#commandHistory.delete(earliestEntry);\n    }\n  }\n}\n\nexport class InfoWidget extends UI.Widget.VBox {\n  private readonly tabbedPane: UI.TabbedPane.TabbedPane;\n  request: Record<string, unknown>|undefined;\n  response: Record<string, unknown>|undefined;\n  type: 'sent'|'received'|undefined;\n  selectedTab: 'request'|'response'|undefined;\n  constructor(element: HTMLElement) {\n    super(element);\n    this.tabbedPane = new UI.TabbedPane.TabbedPane();\n    this.tabbedPane.appendTab('request', i18nString(UIStrings.request), new UI.Widget.Widget());\n    this.tabbedPane.appendTab('response', i18nString(UIStrings.response), new UI.Widget.Widget());\n    this.tabbedPane.show(this.contentElement);\n    this.tabbedPane.selectTab('response');\n    this.request = {};\n  }\n\n  override performUpdate(): void {\n    if (!this.request && !this.response) {\n      this.tabbedPane.changeTabView(\n          'request',\n          new UI.EmptyWidget.EmptyWidget(\n              i18nString(UIStrings.noMessageSelected), i18nString(UIStrings.selectAMessageToView)));\n      this.tabbedPane.changeTabView(\n          'response',\n          new UI.EmptyWidget.EmptyWidget(\n              i18nString(UIStrings.noMessageSelected), i18nString(UIStrings.selectAMessageToView)));\n      return;\n    }\n\n    const requestEnabled = this.type && this.type === 'sent';\n    this.tabbedPane.setTabEnabled('request', Boolean(requestEnabled));\n    if (!requestEnabled) {\n      this.tabbedPane.selectTab('response');\n    }\n\n    this.tabbedPane.changeTabView('request', SourceFrame.JSONView.JSONView.createViewSync(this.request || null));\n    this.tabbedPane.changeTabView('response', SourceFrame.JSONView.JSONView.createViewSync(this.response || null));\n    if (this.selectedTab) {\n      this.tabbedPane.selectTab(this.selectedTab);\n    }\n  }\n}\n\nexport function parseCommandInput(input: string): {command: string, parameters: Record<string, unknown>} {\n  // If input cannot be parsed as json, we assume it's the command name\n  // for a command without parameters. Otherwise, we expect an object\n  // with \"command\"/\"method\"/\"cmd\" and \"parameters\"/\"params\"/\"args\"/\"arguments\" attributes.\n  let json = null;\n  try {\n    json = JSON.parse(input);\n  } catch {\n  }\n\n  const command = json ? json.command || json.method || json.cmd || '' : input;\n  const parameters = json?.parameters || json?.params || json?.args || json?.arguments || {};\n\n  return {command, parameters};\n}\n\nfunction targetToString(target: SDK.Target.Target|undefined): string {\n  if (!target) {\n    return '';\n  }\n  return target.decorateLabel(\n      `${target.name()} ${target === SDK.TargetManager.TargetManager.instance().rootTarget() ? '' : target.id()}`);\n}\n"]}