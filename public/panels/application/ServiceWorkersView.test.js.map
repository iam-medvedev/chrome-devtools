{"version":3,"file":"ServiceWorkersView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/ServiceWorkersView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assertNotNullOrUndefined} from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\n\nimport * as Application from './application.js';\n\nconst {assert} = chai;\n\ndescribeWithMockConnection('ServiceWorkersView', () => {\n  const tests = (targetFactory: () => SDK.Target.Target) => {\n    let target: SDK.Target.Target;\n    let view: Application.ServiceWorkersView.ServiceWorkersView;\n\n    beforeEach(() => {\n      target = targetFactory();\n    });\n\n    afterEach(() => {\n      view.detach();\n    });\n\n    it('shows service worker registrations', async () => {\n      view = new Application.ServiceWorkersView.ServiceWorkersView();\n      view.markAsRoot();\n      view.show(document.body);\n      const serviceWorkersManager = target.model(SDK.ServiceWorkerManager.ServiceWorkerManager);\n      assertNotNullOrUndefined(serviceWorkersManager);\n      const securityOriginManager = target.model(SDK.SecurityOriginManager.SecurityOriginManager);\n      assertNotNullOrUndefined(securityOriginManager);\n      const ORIGIN = 'example.com';\n      sinon.stub(securityOriginManager, 'securityOrigins').returns([ORIGIN]);\n      const SCOPE_URL = 'SCOPE_URL';\n      serviceWorkersManager.dispatchEventToListeners(SDK.ServiceWorkerManager.Events.RegistrationUpdated, {\n        scopeURL: SCOPE_URL,\n        securityOrigin: ORIGIN,\n        versionsByMode: () => new Map(),\n        fingerprint: () => {},\n      } as SDK.ServiceWorkerManager.ServiceWorkerRegistration);\n\n      const sectionTitle = view.currentWorkersView.contentElement.querySelector('.report-section-title');\n      assertNotNullOrUndefined(sectionTitle);\n      assert.strictEqual(sectionTitle.textContent, SCOPE_URL);\n    });\n\n    describe('router info', () => {\n      const registrationId = 'fake-sw-id' as Protocol.ServiceWorker.RegistrationID;\n      const origin = 'https://example.com';\n      const routerRules = [\n        {\n          condition: {urlPattern: '/foo/bar'},\n          source: ['network'],\n          id: 1,\n        },\n        {\n          condition: {urlPattern: '/baz'},\n          source: ['fetch-event'],\n          id: 2,\n        },\n      ];\n      let serviceWorkersManager: SDK.ServiceWorkerManager.ServiceWorkerManager|null;\n\n      const hasRouterField = () => {\n        return Array.from(view.currentWorkersView.contentElement.querySelectorAll('.report-field')).some(field => {\n          return field.querySelector('.report-field-name')?.textContent === 'Routers';\n        });\n      };\n\n      beforeEach(() => {\n        Application.ServiceWorkersView.setThrottleDisabledForDebugging(true);\n        view = new Application.ServiceWorkersView.ServiceWorkersView();\n        view.markAsRoot();\n        view.show(document.body);\n\n        serviceWorkersManager = target.model(SDK.ServiceWorkerManager.ServiceWorkerManager);\n        assertNotNullOrUndefined(serviceWorkersManager);\n\n        const securityOriginManager = target.model(SDK.SecurityOriginManager.SecurityOriginManager);\n        assertNotNullOrUndefined(securityOriginManager);\n        sinon.stub(securityOriginManager, 'securityOrigins').returns([origin]);\n      });\n\n      it('shows the router field if active version has at least one router rule', async () => {\n        const payload:\n            Protocol.ServiceWorker.ServiceWorkerRegistration = {registrationId, scopeURL: origin, isDeleted: false};\n        const registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration =\n            new SDK.ServiceWorkerManager.ServiceWorkerRegistration(payload);\n\n        const versionId = 1;\n        const versionPayload: Protocol.ServiceWorker.ServiceWorkerVersion = {\n          registrationId,\n          versionId: versionId.toString(),\n          scriptURL: '',\n          status: Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated,\n          runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running,\n          routerRules: JSON.stringify(routerRules),\n        };\n        registration.updateVersion(versionPayload);\n        serviceWorkersManager?.dispatchEventToListeners(\n            SDK.ServiceWorkerManager.Events.RegistrationUpdated, registration);\n        assert.isTrue(hasRouterField());\n      });\n\n      it('does not show the router field if active version does not have router rules', async () => {\n        const payload:\n            Protocol.ServiceWorker.ServiceWorkerRegistration = {registrationId, scopeURL: origin, isDeleted: false};\n        const registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration =\n            new SDK.ServiceWorkerManager.ServiceWorkerRegistration(payload);\n\n        let versionId = 1;\n        const versionPayload: Protocol.ServiceWorker.ServiceWorkerVersion = {\n          registrationId,\n          versionId: versionId.toString(),\n          scriptURL: '',\n          status: Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated,\n          runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running,\n        };\n        registration.updateVersion(versionPayload);\n        serviceWorkersManager?.dispatchEventToListeners(\n            SDK.ServiceWorkerManager.Events.RegistrationUpdated, registration);\n        assert.isFalse(hasRouterField());\n\n        // Update the version with the empty router rules.\n        versionId++;\n        registration.updateVersion(Object.assign({}, versionPayload, {\n          versionId: versionId.toString(),\n          routerRules: JSON.stringify([]),\n        }));\n        registration.updateVersion(versionPayload);\n        serviceWorkersManager?.dispatchEventToListeners(\n            SDK.ServiceWorkerManager.Events.RegistrationUpdated, registration);\n        assert.isFalse(hasRouterField());\n      });\n\n      it('does not show the router field if there is no active version', async () => {\n        const payload:\n            Protocol.ServiceWorker.ServiceWorkerRegistration = {registrationId, scopeURL: origin, isDeleted: false};\n        const registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration =\n            new SDK.ServiceWorkerManager.ServiceWorkerRegistration(payload);\n\n        let versionId = 0;\n        const versionPayload: Protocol.ServiceWorker.ServiceWorkerVersion = {\n          registrationId,\n          versionId: versionId.toString(),\n          scriptURL: '',\n          status: Protocol.ServiceWorker.ServiceWorkerVersionStatus.New,\n          runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Starting,\n          routerRules: JSON.stringify(routerRules),\n        };\n\n        const updateAndDispatchEvent = (status: Protocol.ServiceWorker.ServiceWorkerVersionStatus) => {\n          versionId++;\n          registration.updateVersion(Object.assign({}, versionPayload, {versionId: versionId.toString(), status}));\n          serviceWorkersManager?.dispatchEventToListeners(\n              SDK.ServiceWorkerManager.Events.RegistrationUpdated, registration);\n        };\n\n        updateAndDispatchEvent(Protocol.ServiceWorker.ServiceWorkerVersionStatus.New);\n        assert.isFalse(hasRouterField());\n\n        updateAndDispatchEvent(Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant);\n        assert.isFalse(hasRouterField());\n\n        updateAndDispatchEvent(Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing);\n        assert.isFalse(hasRouterField());\n\n        updateAndDispatchEvent(Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed);\n        assert.isFalse(hasRouterField());\n\n        updateAndDispatchEvent(Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating);\n        assert.isTrue(hasRouterField());\n\n        updateAndDispatchEvent(Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated);\n        assert.isTrue(hasRouterField());\n      });\n    });\n  };\n\n  describe('without tab target', () => tests(createTarget));\n  describe('with tab target', () => tests(() => {\n                                const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n                                createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n                                return createTarget({parentTarget: tabTarget});\n                              }));\n});\n"]}