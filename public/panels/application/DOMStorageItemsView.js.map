{"version":3,"file":"DOMStorageItemsView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/DOMStorageItemsView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2008 Nokia Inc.  All rights reserved.\n * Copyright (C) 2013 Samsung Electronics. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport type * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {DOMStorage} from './DOMStorageModel.js';\nimport {StorageItemsView} from './StorageItemsView.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in DOMStorage Items View of the Application panel\n   */\n  domStorage: 'DOM Storage',\n  /**\n   *@description Text in DOMStorage Items View of the Application panel\n   */\n  key: 'Key',\n  /**\n   *@description Text for the value of something\n   */\n  value: 'Value',\n  /**\n   *@description Name for the \"DOM Storage Items\" table that shows the content of the DOM Storage.\n   */\n  domStorageItems: 'DOM Storage Items',\n  /**\n   *@description Text for announcing that the \"DOM Storage Items\" table was cleared, that is, all\n   * entries were deleted.\n   */\n  domStorageItemsCleared: 'DOM Storage Items cleared',\n  /**\n   *@description Text for announcing a DOM Storage key/value item has been deleted\n   */\n  domStorageItemDeleted: 'The storage item was deleted.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/DOMStorageItemsView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class DOMStorageItemsView extends StorageItemsView {\n  private domStorage: DOMStorage;\n  private eventListeners: Common.EventTarget.EventDescriptor[];\n  private grid: DataGrid.DataGridWithPreview.DataGridWithPreview;\n\n  constructor(domStorage: DOMStorage) {\n    super(i18nString(UIStrings.domStorage), 'domStoragePanel');\n\n    this.domStorage = domStorage;\n    if (domStorage.storageKey) {\n      this.setStorageKey(domStorage.storageKey);\n    }\n\n    this.element.classList.add('storage-view', 'table');\n\n    const columns = ([\n      {id: 'key', title: i18nString(UIStrings.key), sortable: true, editable: true, longText: true, weight: 50},\n      {id: 'value', title: i18nString(UIStrings.value), sortable: false, editable: true, longText: true, weight: 50},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n\n    this.grid = new DataGrid.DataGridWithPreview.DataGridWithPreview(\n        'dom-storage', this.element, columns, {\n          refreshItems: this.refreshItems.bind(this),\n          removeItem: key => this.domStorage?.removeItem(key),\n          setItem: (key, value) => this.domStorage?.setItem(key, value),\n          createPreview: this.createPreview.bind(this),\n          setCanDeleteSelected: this.setCanDeleteSelected.bind(this),\n        },\n        {\n          title: i18nString(UIStrings.domStorageItems),\n          itemDeleted: i18nString(UIStrings.domStorageItemDeleted),\n          itemsCleared: i18nString(UIStrings.domStorageItemsCleared),\n        });\n    this.grid.showPreview(null, null);\n\n    this.eventListeners = [];\n    this.setStorage(domStorage);\n  }\n\n  get dataGridForTesting(): DataGrid.DataGrid.DataGridImpl<unknown> {\n    return this.grid.dataGridForTesting;\n  }\n\n  private createPreview(key: string, value: string): Promise<UI.Widget.Widget|null> {\n    const protocol = this.domStorage.isLocalStorage ? 'localstorage' : 'sessionstorage';\n    const url = `${protocol}://${key}` as Platform.DevToolsPath.UrlString;\n    const provider = TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n        url,\n        Common.ResourceType.resourceTypes.XHR,\n        value as string,\n    );\n    return SourceFrame.PreviewFactory.PreviewFactory.createPreview(\n        provider,\n        'text/plain',\n    );\n  }\n\n  setStorage(domStorage: DOMStorage): void {\n    Common.EventTarget.removeEventListeners(this.eventListeners);\n    this.domStorage = domStorage;\n    const storageKind = domStorage.isLocalStorage ? 'local-storage-data' : 'session-storage-data';\n    this.element.setAttribute('jslog', `${VisualLogging.pane().context(storageKind)}`);\n    if (domStorage.storageKey) {\n      this.setStorageKey(domStorage.storageKey);\n    }\n    this.eventListeners = [\n      this.domStorage.addEventListener(DOMStorage.Events.DOM_STORAGE_ITEMS_CLEARED, this.domStorageItemsCleared, this),\n      this.domStorage.addEventListener(DOMStorage.Events.DOM_STORAGE_ITEM_REMOVED, this.domStorageItemRemoved, this),\n      this.domStorage.addEventListener(DOMStorage.Events.DOM_STORAGE_ITEM_ADDED, this.domStorageItemAdded, this),\n      this.domStorage.addEventListener(DOMStorage.Events.DOM_STORAGE_ITEM_UPDATED, this.domStorageItemUpdated, this),\n    ];\n    this.refreshItems();\n  }\n\n  private domStorageItemsCleared(): void {\n    if (!this.isShowing()) {\n      return;\n    }\n\n    this.grid.clearItems();\n  }\n\n  private domStorageItemRemoved(event: Common.EventTarget.EventTargetEvent<DOMStorage.DOMStorageItemRemovedEvent>):\n      void {\n    if (!this.isShowing()) {\n      return;\n    }\n\n    this.grid.removeItem(event.data.key);\n  }\n\n  private domStorageItemAdded(event: Common.EventTarget.EventTargetEvent<DOMStorage.DOMStorageItemAddedEvent>): void {\n    if (!this.isShowing()) {\n      return;\n    }\n\n    this.grid.addItem([event.data.key, event.data.value]);\n  }\n\n  private domStorageItemUpdated(event: Common.EventTarget.EventTargetEvent<DOMStorage.DOMStorageItemUpdatedEvent>):\n      void {\n    if (!this.isShowing()) {\n      return;\n    }\n\n    this.grid.updateItem(event.data.key, event.data.value);\n  }\n\n  override deleteSelectedItem(): void {\n    this.grid.deleteSelectedItem();\n  }\n\n  override refreshItems(): void {\n    const filteredItems = (item: string[]): string => `${item[0]} ${item[1]}`;\n    void this.domStorage.getItems().then(items => items && this.grid.showItems(this.filter(items, filteredItems)));\n  }\n\n  override deleteAllItems(): void {\n    this.domStorage.clear();\n    // explicitly clear the view because the event won't be fired when it has no items\n    this.domStorageItemsCleared();\n  }\n}\n"]}