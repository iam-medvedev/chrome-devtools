{"version":3,"file":"SharedStorageItemsView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/SharedStorageItemsView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as ApplicationComponents from './components/components.js';\nimport {KeyValueStorageItemsView, type View as ViewFunction} from './KeyValueStorageItemsView.js';\nimport {SharedStorageForOrigin} from './SharedStorageModel.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in SharedStorage Items View of the Application panel\n   */\n  sharedStorage: 'Shared storage',\n  /**\n   *@description Text for announcing that the \"Shared Storage Items\" table was cleared, that is, all\n   * entries were deleted.\n   */\n  sharedStorageItemsCleared: 'Shared Storage items cleared',\n  /**\n   *@description Text for announcing that the filtered \"Shared Storage Items\" table was cleared, that is,\n   * all filtered entries were deleted.\n   */\n  sharedStorageFilteredItemsCleared: 'Shared Storage filtered items cleared',\n  /**\n   *@description Text for announcing a Shared Storage key/value item has been deleted\n   */\n  sharedStorageItemDeleted: 'The storage item was deleted.',\n  /**\n   *@description Text for announcing a Shared Storage key/value item has been edited\n   */\n  sharedStorageItemEdited: 'The storage item was edited.',\n  /**\n   *@description Text for announcing a Shared Storage key/value item edit request has been canceled\n   */\n  sharedStorageItemEditCanceled: 'The storage item edit was canceled.',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/application/SharedStorageItemsView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface WrappedEntry {\n  key: string;\n  value: string;\n}\n\nexport namespace SharedStorageItemsDispatcher {\n  export const enum Events {\n    FILTERED_ITEMS_CLEARED = 'FilteredItemsCleared',\n    ITEM_DELETED = 'ItemDeleted',\n    ITEM_EDITED = 'ItemEdited',\n    ITEMS_CLEARED = 'ItemsCleared',\n    ITEMS_REFRESHED = 'ItemsRefreshed',\n  }\n\n  export interface ItemDeletedEvent {\n    key: string;\n  }\n\n  export interface ItemEditedEvent {\n    columnIdentifier: string;\n    oldText: string|null;\n    newText: string;\n  }\n\n  export interface EventTypes {\n    [Events.FILTERED_ITEMS_CLEARED]: void;\n    [Events.ITEM_DELETED]: ItemDeletedEvent;\n    [Events.ITEM_EDITED]: void;\n    [Events.ITEMS_CLEARED]: void;\n    [Events.ITEMS_REFRESHED]: void;\n  }\n}\n\nexport class SharedStorageItemsView extends KeyValueStorageItemsView {\n  #sharedStorage: SharedStorageForOrigin;\n  readonly sharedStorageItemsDispatcher: Common.ObjectWrapper.ObjectWrapper<SharedStorageItemsDispatcher.EventTypes>;\n\n  constructor(sharedStorage: SharedStorageForOrigin, view?: ViewFunction) {\n    super(\n        i18nString(UIStrings.sharedStorage), 'shared-storage-items-view', /* editable=*/ true, view,\n        new ApplicationComponents.SharedStorageMetadataView.SharedStorageMetadataView(\n            sharedStorage, sharedStorage.securityOrigin));\n\n    this.#sharedStorage = sharedStorage;\n    this.performUpdate();\n\n    this.#sharedStorage.addEventListener(\n        SharedStorageForOrigin.Events.SHARED_STORAGE_CHANGED, this.#sharedStorageChanged, this);\n\n    this.sharedStorageItemsDispatcher =\n        new Common.ObjectWrapper.ObjectWrapper<SharedStorageItemsDispatcher.EventTypes>();\n  }\n\n  // Use `createView()` instead of the constructor to create a view, so that entries can be awaited asynchronously.\n  static async createView(sharedStorage: SharedStorageForOrigin, viewFunction?: ViewFunction):\n      Promise<SharedStorageItemsView> {\n    const view = new SharedStorageItemsView(sharedStorage, viewFunction);\n    await view.updateEntriesOnly();\n    return view;\n  }\n\n  async updateEntriesOnly(): Promise<void> {\n    const entries = await this.#sharedStorage.getEntries();\n    if (entries) {\n      this.#showSharedStorageItems(entries);\n    }\n  }\n\n  async #sharedStorageChanged(): Promise<void> {\n    await this.refreshItems();\n  }\n\n  override async refreshItems(): Promise<void> {\n    await this.metadataView.render();\n    await this.updateEntriesOnly();\n    this.sharedStorageItemsDispatcher.dispatchEventToListeners(SharedStorageItemsDispatcher.Events.ITEMS_REFRESHED);\n  }\n\n  override async deleteAllItems(): Promise<void> {\n    if (!this.hasFilter()) {\n      await this.#sharedStorage.clear();\n      await this.refreshItems();\n      this.sharedStorageItemsDispatcher.dispatchEventToListeners(SharedStorageItemsDispatcher.Events.ITEMS_CLEARED);\n      UI.ARIAUtils.alert(i18nString(UIStrings.sharedStorageItemsCleared));\n      return;\n    }\n\n    await Promise.all(this.keys().map(key => this.#sharedStorage.deleteEntry(key)));\n\n    await this.refreshItems();\n    this.sharedStorageItemsDispatcher.dispatchEventToListeners(\n        SharedStorageItemsDispatcher.Events.FILTERED_ITEMS_CLEARED);\n    UI.ARIAUtils.alert(i18nString(UIStrings.sharedStorageFilteredItemsCleared));\n  }\n\n  protected override isEditAllowed(columnIdentifier: string, oldText: string, newText: string): boolean {\n    if (columnIdentifier === 'key' && newText === '') {\n      // The Shared Storage backend does not currently allow '' as a key, so we only set a new entry with a new key if its new key is nonempty.\n      void this.refreshItems().then(() => {\n        UI.ARIAUtils.alert(i18nString(UIStrings.sharedStorageItemEditCanceled));\n      });\n      return false;\n    }\n    return true;\n  }\n\n  protected async setItem(key: string, value: string): Promise<void> {\n    await this.#sharedStorage.setEntry(key, value, false);\n\n    await this.refreshItems();\n    this.sharedStorageItemsDispatcher.dispatchEventToListeners(SharedStorageItemsDispatcher.Events.ITEM_EDITED);\n    UI.ARIAUtils.alert(i18nString(UIStrings.sharedStorageItemEdited));\n  }\n\n  #showSharedStorageItems(items: Protocol.Storage.SharedStorageEntry[]): void {\n    const filteredItems = (item: Protocol.Storage.SharedStorageEntry): string => `${item.key} ${item.value}`;\n    const filteredList = this.filter(items, filteredItems);\n    this.showItems(filteredList);\n  }\n\n  protected async removeItem(key: string): Promise<void> {\n    await this.#sharedStorage.deleteEntry(key);\n    await this.refreshItems();\n    this.sharedStorageItemsDispatcher.dispatchEventToListeners(\n        SharedStorageItemsDispatcher.Events.ITEM_DELETED, {key} as SharedStorageItemsDispatcher.ItemDeletedEvent);\n    UI.ARIAUtils.alert(i18nString(UIStrings.sharedStorageItemDeleted));\n  }\n\n  protected async createPreview(key: string, value: string): Promise<UI.Widget.Widget|null> {\n    const wrappedEntry = key && {key, value: value || ''} as WrappedEntry;\n    return SourceFrame.JSONView.JSONView.createViewSync(wrappedEntry);\n  }\n}\n"]}