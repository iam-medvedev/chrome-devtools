{"version":3,"file":"ExtensionStorageItemsView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/ExtensionStorageItemsView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2008 Nokia Inc.  All rights reserved.\n * Copyright (C) 2013 Samsung Electronics. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as JSON5 from '../../third_party/json5/json5.js';\nimport type * as DataGridImpl from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport type * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport type {ExtensionStorage} from './ExtensionStorageModel.js';\nimport {StorageItemsView} from './StorageItemsView.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in ExtensionStorage Items View of the Application panel\n   */\n  extensionStorage: 'Extension Storage',\n  /**\n   *@description Text in ExtensionStorage Items View of the Application panel\n   */\n  key: 'Key',\n  /**\n   *@description Text for the value of something\n   */\n  value: 'Value',\n  /**\n   *@description Name for the \"Extension Storage Items\" table that shows the content of the extension Storage.\n   */\n  extensionStorageItems: 'Extension Storage Items',\n  /**\n   *@description Text for announcing that the \"Extension Storage Items\" table was cleared, that is, all\n   * entries were deleted.\n   */\n  extensionStorageItemsCleared: 'Extension Storage Items cleared',\n  /**\n   *@description Text for announcing a Extension Storage key/value item has been deleted\n   */\n  extensionStorageItemDeleted: 'The storage item was deleted.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/ExtensionStorageItemsView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport namespace ExtensionStorageItemsDispatcher {\n  export const enum Events {\n    ITEM_EDITED = 'ItemEdited',\n    ITEMS_REFRESHED = 'ItemsRefreshed',\n  }\n\n  export type EventTypes = {\n    [Events.ITEM_EDITED]: void,\n    [Events.ITEMS_REFRESHED]: void,\n  };\n}\n\nexport class ExtensionStorageItemsView extends StorageItemsView {\n  #extensionStorage: ExtensionStorage;\n  #grid: DataGrid.DataGridWithPreview.DataGridWithPreview;\n  readonly extensionStorageItemsDispatcher:\n      Common.ObjectWrapper.ObjectWrapper<ExtensionStorageItemsDispatcher.EventTypes>;\n\n  constructor(extensionStorage: ExtensionStorage) {\n    super(i18nString(UIStrings.extensionStorage), 'extensionStoragePanel');\n\n    this.#extensionStorage = extensionStorage;\n    this.element.setAttribute('jslog', `${VisualLogging.pane().context('extension-storage-data')}`);\n    this.element.classList.add('storage-view', 'table');\n\n    this.extensionStorageItemsDispatcher =\n        new Common.ObjectWrapper.ObjectWrapper<ExtensionStorageItemsDispatcher.EventTypes>();\n\n    this.#grid = this.#createGrid();\n    this.refreshItems();\n  }\n\n  get #isEditable(): boolean {\n    // The managed storage area is always read only, since it exposes values\n    // set by enterprise policy.\n    return this.#extensionStorage.storageArea !== Protocol.Extensions.StorageArea.Managed;\n  }\n\n  /**\n   * When parsing a value provided by the user, attempt to treat it as JSON,\n   * falling back to a string otherwise.\n   */\n  parseValue(input: string): unknown {\n    try {\n      return JSON5.parse(input);\n    } catch {\n      return input;\n    }\n  }\n\n  #createGrid(): DataGrid.DataGridWithPreview.DataGridWithPreview {\n    const columns = ([\n      {id: 'key', title: i18nString(UIStrings.key), sortable: true, editable: true, longText: true, weight: 50},\n      {id: 'value', title: i18nString(UIStrings.value), sortable: false, editable: true, longText: true, weight: 50},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n\n    const grid = new DataGrid.DataGridWithPreview.DataGridWithPreview(\n        'extension-storage', this.element, columns, {\n          refreshItems: this.refreshItems.bind(this),\n          edit: this.#isEditable ? {\n            removeItem: async key => {\n              await this.#extensionStorage.removeItem(key);\n              this.refreshItems();\n            },\n            setItem: async (key, value) => {\n              await this.#extensionStorage.setItem(key, this.parseValue(value));\n              this.refreshItems();\n              this.extensionStorageItemsDispatcher.dispatchEventToListeners(\n                  ExtensionStorageItemsDispatcher.Events.ITEM_EDITED);\n            },\n          } :\n                                   undefined,\n          createPreview: this.#createPreview.bind(this),\n          setCanDeleteSelected: canSelect => {\n            if (!this.#isEditable) {\n              return;\n            }\n            this.setCanDeleteSelected(canSelect);\n          },\n        },\n        {\n          title: i18nString(UIStrings.extensionStorageItems),\n          itemDeleted: i18nString(UIStrings.extensionStorageItemDeleted),\n          itemsCleared: i18nString(UIStrings.extensionStorageItemsCleared),\n        });\n    grid.showPreview(null, null);\n\n    return grid;\n  }\n\n  #createPreview(key: string, value: string): Promise<UI.Widget.Widget|null> {\n    const url = 'extension-storage://' + this.#extensionStorage.extensionId + '/' + this.#extensionStorage.storageArea +\n            '/preview/' + key as Platform.DevToolsPath.UrlString;\n    const provider = TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n        url,\n        Common.ResourceType.resourceTypes.XHR,\n        value as string,\n    );\n    return SourceFrame.PreviewFactory.PreviewFactory.createPreview(\n        provider,\n        'text/plain',\n    );\n  }\n\n  setStorage(extensionStorage: ExtensionStorage): void {\n    this.#extensionStorage = extensionStorage;\n\n    // When changing storage area, recreate the grid. This is needed as\n    // DataGridImpl does not currently changing from editable to non-editable\n    // after creation.\n    this.#grid.detach();\n    this.#grid = this.#createGrid();\n\n    this.refreshItems();\n  }\n\n  #extensionStorageItemsCleared(): void {\n    if (!this.isShowing()) {\n      return;\n    }\n\n    this.#grid.clearItems();\n  }\n\n  override deleteSelectedItem(): void {\n    if (!this.#isEditable) {\n      return;\n    }\n    this.#grid.deleteSelectedItem();\n  }\n\n  override refreshItems(): void {\n    const filteredItems = (item: string[]): string => `${item[0]} ${item[1]}`;\n    void this.#extensionStorage.getItems().then(items => {\n      const itemsArray =\n          Object.entries(items).map(([key, value]) => [key, typeof value === 'string' ? value : JSON.stringify(value)]);\n      items && this.#grid.showItems(this.filter(itemsArray, filteredItems));\n      this.extensionStorageItemsDispatcher.dispatchEventToListeners(\n          ExtensionStorageItemsDispatcher.Events.ITEMS_REFRESHED);\n    });\n  }\n\n  override deleteAllItems(): void {\n    if (!this.#isEditable) {\n      return;\n    }\n    this.#extensionStorage.clear().then(\n        () => {\n          this.#extensionStorageItemsCleared();\n        },\n        () => {\n          throw new Error('Unable to clear storage.');\n        });\n  }\n\n  getEntriesForTesting(): Array<{key: string, value: string}> {\n    return this.#grid.dataGridForTesting.rootNode().children.filter(node => node.data.key).map(node => (node.data as {\n                                                                                                 key: string,\n                                                                                                 value: string,\n                                                                                               }));\n  }\n\n  get dataGridForTesting(): DataGridImpl.DataGrid.DataGridImpl<unknown> {\n    return this.#grid.dataGridForTesting;\n  }\n}\n"]}