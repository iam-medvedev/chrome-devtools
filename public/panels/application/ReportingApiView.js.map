{"version":3,"file":"ReportingApiView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/ReportingApiView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport type * as ApplicationComponents from './components/components.js';\nimport {ReportingApiReportsView} from './ReportingApiReportsView.js';\n\nconst UIStrings = {\n  /**\n   *@description Placeholder text that shows if no report or endpoint was detected.\n   *             A report contains information on issues or events that were encountered by a web browser.\n   *             An endpoint is a URL where the report is sent to.\n   *             (https://developer.chrome.com/docs/capabilities/web-apis/reporting-api)\n   */\n  noReportOrEndpoint: 'No report or endpoint',\n  /**\n   *@description Placeholder text that shows if no report or endpoint was detected.\n   *             A report contains information on issues or events that were encountered by a web browser.\n   *             An endpoint is a URL where the report is sent to.\n   *             (https://developer.chrome.com/docs/capabilities/web-apis/reporting-api)\n   */\n  reportingApiDescription: 'On this page you will be able to inspect `Reporting API` reports and endpoints.',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/application/ReportingApiView.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst REPORTING_API_EXPLANATION_URL =\n    'https://developer.chrome.com/docs/capabilities/web-apis/reporting-api' as Platform.DevToolsPath.UrlString;\n\nexport class ReportingApiView extends UI.SplitWidget.SplitWidget {\n  private readonly endpointsGrid: ApplicationComponents.EndpointsGrid.EndpointsGrid;\n  private endpoints: Map<string, Protocol.Network.ReportingApiEndpoint[]>;\n  #emptyWidget?: UI.EmptyWidget.EmptyWidget;\n  #reportingApiReports?: ReportingApiReportsView;\n\n  constructor(endpointsGrid: ApplicationComponents.EndpointsGrid.EndpointsGrid) {\n    super(/* isVertical: */ false, /* secondIsSidebar: */ true);\n    this.element.setAttribute('jslog', `${VisualLogging.pane('reporting-api')}`);\n    this.endpointsGrid = endpointsGrid;\n    this.endpoints = new Map();\n    const mainTarget = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    const networkManager = mainTarget?.model(SDK.NetworkManager.NetworkManager);\n    this.#emptyWidget = new UI.EmptyWidget.EmptyWidget(\n        i18nString(UIStrings.noReportOrEndpoint), i18nString(UIStrings.reportingApiDescription));\n    this.#emptyWidget.appendLink(REPORTING_API_EXPLANATION_URL);\n    this.setMainWidget(this.#emptyWidget);\n    if (networkManager) {\n      networkManager.addEventListener(\n          SDK.NetworkManager.Events.ReportingApiEndpointsChangedForOrigin,\n          event => this.onEndpointsChangedForOrigin(event.data), this);\n\n      networkManager.addEventListener(\n          SDK.NetworkManager.Events.ReportingApiReportAdded, this.#showReportsAndEndpoints, this);\n\n      this.#reportingApiReports = new ReportingApiReportsView(networkManager);\n      const reportingApiEndpointsView = new UI.Widget.VBox();\n      reportingApiEndpointsView.setMinimumSize(0, 40);\n      reportingApiEndpointsView.contentElement.appendChild(this.endpointsGrid);\n\n      this.setSidebarWidget(reportingApiEndpointsView);\n      void networkManager.enableReportingApi();\n      this.hideSidebar();\n    }\n  }\n\n  #showReportsAndEndpoints(): void {\n    // Either we don't have reports and endpoints to show (first case), or we have already\n    // replaced the empty widget with a different main view (second case).\n    if (this.#reportingApiReports === undefined || this.mainWidget() !== this.#emptyWidget) {\n      return;\n    }\n\n    this.#emptyWidget?.detach();\n    this.#emptyWidget = undefined;\n    this.setMainWidget(this.#reportingApiReports);\n    this.showBoth();\n  }\n\n  private onEndpointsChangedForOrigin(data: Protocol.Network.ReportingApiEndpointsChangedForOriginEvent): void {\n    this.#showReportsAndEndpoints();\n    this.endpoints.set(data.origin, data.endpoints);\n    this.endpointsGrid.data = {endpoints: this.endpoints};\n  }\n}\n"]}