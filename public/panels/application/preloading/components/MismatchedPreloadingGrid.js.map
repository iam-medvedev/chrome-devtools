{"version":3,"file":"MismatchedPreloadingGrid.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/application/preloading/components/MismatchedPreloadingGrid.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../../ui/legacy/components/data_grid/data_grid.js';\n\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../../generated/protocol.js';\nimport * as Diff from '../../../../third_party/diff/diff.js';\nimport * as LegacyWrapper from '../../../../ui/components/legacy_wrapper/legacy_wrapper.js';\nimport type * as UI from '../../../../ui/legacy/legacy.js';\nimport * as Lit from '../../../../ui/lit/lit.js';\n\nimport {capitalizedAction} from './PreloadingString.js';\n\nconst {charDiff} = Diff.Diff.DiffWrapper;\nconst {render, html, Directives: {styleMap}} = Lit;\n\nconst UIStrings = {\n  /**\n   *@description Column header\n   */\n  url: 'URL',\n  /**\n   *@description Column header: Action of preloading (prefetch/prerender)\n   */\n  action: 'Action',\n  /**\n   *@description Column header: Status of preloading attempt\n   */\n  status: 'Status',\n  /**\n   *@description Text in grid and details: Preloading attempt is not yet triggered.\n   */\n  statusNotTriggered: 'Not triggered',\n  /**\n   *@description Text in grid and details: Preloading attempt is eligible but pending.\n   */\n  statusPending: 'Pending',\n  /**\n   *@description Text in grid and details: Preloading is running.\n   */\n  statusRunning: 'Running',\n  /**\n   *@description Text in grid and details: Preloading finished and the result is ready for the next navigation.\n   */\n  statusReady: 'Ready',\n  /**\n   *@description Text in grid and details: Ready, then used.\n   */\n  statusSuccess: 'Success',\n  /**\n   *@description Text in grid and details: Preloading failed.\n   */\n  statusFailure: 'Failure',\n} as const;\nconst str_ =\n    i18n.i18n.registerUIStrings('panels/application/preloading/components/MismatchedPreloadingGrid.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nclass PreloadingUIUtils {\n  static status(status: SDK.PreloadingModel.PreloadingStatus): string {\n    // See content/public/browser/preloading.h PreloadingAttemptOutcome.\n    switch (status) {\n      case SDK.PreloadingModel.PreloadingStatus.NOT_TRIGGERED:\n        return i18nString(UIStrings.statusNotTriggered);\n      case SDK.PreloadingModel.PreloadingStatus.PENDING:\n        return i18nString(UIStrings.statusPending);\n      case SDK.PreloadingModel.PreloadingStatus.RUNNING:\n        return i18nString(UIStrings.statusRunning);\n      case SDK.PreloadingModel.PreloadingStatus.READY:\n        return i18nString(UIStrings.statusReady);\n      case SDK.PreloadingModel.PreloadingStatus.SUCCESS:\n        return i18nString(UIStrings.statusSuccess);\n      case SDK.PreloadingModel.PreloadingStatus.FAILURE:\n        return i18nString(UIStrings.statusFailure);\n      // NotSupported is used to handle unreachable case. For example,\n      // there is no code path for\n      // PreloadingTriggeringOutcome::kTriggeredButPending in prefetch,\n      // which is mapped to NotSupported. So, we regard it as an\n      // internal error.\n      case SDK.PreloadingModel.PreloadingStatus.NOT_SUPPORTED:\n        return i18n.i18n.lockedString('Internal error');\n    }\n  }\n}\n\nexport interface MismatchedPreloadingGridRow {\n  action: Protocol.Preload.SpeculationAction;\n  url: string;\n  status: SDK.PreloadingModel.PreloadingStatus;\n}\n\nexport interface MismatchedPreloadingGridData {\n  pageURL: Platform.DevToolsPath.UrlString;\n  rows: MismatchedPreloadingGridRow[];\n}\n\n// Grid component to show prerendering attempts.\nexport class MismatchedPreloadingGrid extends LegacyWrapper.LegacyWrapper.WrappableComponent<UI.Widget.VBox> {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #data: MismatchedPreloadingGridData|null = null;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [];\n    this.#render();\n  }\n\n  set data(data: MismatchedPreloadingGridData) {\n    this.#data = data;\n    this.#render();\n  }\n\n  #render(): void {\n    if (!this.#data) {\n      return;\n    }\n\n    const {pageURL} = this.#data;\n\n    render(\n        html`<devtools-data-grid striped inline>\n          <table>\n            <tr>\n              <th id=\"url\" weight=\"40\" sortable>\n                ${i18nString(UIStrings.url)}\n              </th>\n              <th id=\"action\" weight=\"15\" sortable>\n                ${i18nString(UIStrings.action)}\n              </th>\n              <th id=\"status\" weight=\"15\" sortable>\n                ${i18nString(UIStrings.status)}\n              </th>\n            </tr>\n            ${\n            this.#data.rows\n                .map(row => ({\n                       row,\n                       diffScore: Diff.Diff.DiffWrapper.characterScore(row.url, pageURL),\n                     }))\n                .sort((a, b) => b.diffScore - a.diffScore)\n                .map(({row}) => html`\n                <tr>\n                  <td>\n                    <div>${charDiff(row.url, pageURL).map(diffOp => {\n                       const s = diffOp[1];\n                       switch (diffOp[0]) {\n                         case Diff.Diff.Operation.Equal:\n                           return html`<span>${s}</span>`;\n                         case Diff.Diff.Operation.Insert:\n                           return html`<span style=${styleMap({\n                             color: 'var(--sys-color-green)',\n                             'text-decoration': 'line-through'\n                           })}\n                               >${s}</span>`;\n                         case Diff.Diff.Operation.Delete:\n                           return html`<span style=${styleMap({color: 'var(--sys-color-error)'})}>${s}</span>`;\n                         case Diff.Diff.Operation.Edit:\n                           return html`<span style=${styleMap({\n                             color: 'var(--sys-color-green',\n                             'text-decoration': 'line-through'\n                           })}\n                            >${s}</span>`;\n                         default:\n                           throw new Error('unreachable');\n                       }\n                     })}\n                    </div>\n                  </td>\n                  <td>${capitalizedAction(row.action)}</td>\n                  <td>${PreloadingUIUtils.status(row.status)}</td>\n                </tr>\n              `)}\n          </table>\n        </devtools-data-grid>`,\n        this.#shadow, {host: this});\n  }\n}\n\ncustomElements.define('devtools-resources-mismatched-preloading-grid', MismatchedPreloadingGrid);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-resources-mismatched-preloading-grid': MismatchedPreloadingGrid;\n  }\n}\n"]}