{"version":3,"file":"PreloadingGrid.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/application/preloading/components/PreloadingGrid.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../../core/platform/platform.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as Protocol from '../../../../generated/protocol.js';\nimport {assertGridContents, getCellByIndexes} from '../../../../testing/DataGridHelpers.js';\nimport {renderElementIntoDOM} from '../../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../../testing/EnvironmentHelpers.js';\nimport * as RenderCoordinator from '../../../../ui/components/render_coordinator/render_coordinator.js';\n\nimport * as PreloadingComponents from './components.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\nasync function assertRenderResult(\n    rowsInput: PreloadingComponents.PreloadingGrid.PreloadingGridData, headerExpected: string[],\n    rowsExpected: string[][]): Promise<Element> {\n  const component = new PreloadingComponents.PreloadingGrid.PreloadingGrid();\n  component.style.display = 'block';\n  component.style.width = '640px';\n  component.style.height = '480px';\n  component.update(rowsInput);\n  renderElementIntoDOM(component);\n  await RenderCoordinator.done();\n\n  return assertGridContents(\n      component,\n      headerExpected,\n      rowsExpected,\n  );\n}\n\ndescribeWithEnvironment('PreloadingGrid', () => {\n  it('renders grid', async () => {\n    await assertRenderResult(\n        {\n          rows: [{\n            id: 'id',\n            pipeline: SDK.PreloadingModel.PreloadPipeline.newFromAttemptsForTesting([{\n              action: Protocol.Preload.SpeculationAction.Prefetch,\n              key: {\n                loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                action: Protocol.Preload.SpeculationAction.Prefetch,\n                url: urlString`https://example.com/prefetched.html`,\n              },\n              pipelineId: 'pipelineId:1' as Protocol.Preload.PreloadPipelineId,\n              status: SDK.PreloadingModel.PreloadingStatus.RUNNING,\n              prefetchStatus: null,\n              requestId: 'requestId:1' as Protocol.Network.RequestId,\n              ruleSetIds: ['ruleSetId:0.1'] as Protocol.Preload.RuleSetId[],\n              nodeIds: [1] as Protocol.DOM.BackendNodeId[],\n            }]),\n            ruleSets: [\n              {\n                id: 'ruleSetId:0.1' as Protocol.Preload.RuleSetId,\n                loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                sourceText: `\n{\n  \"prefetch\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/prefetched.html\"]\n    }\n  ]\n}\n`,\n              },\n            ],\n          }],\n          pageURL: urlString`https://example.com/`,\n        },\n        ['URL', 'Action', 'Rule set', 'Status'],\n        [\n          ['/prefetched.html', 'Prefetch', 'example.com/', 'Running'],\n        ],\n    );\n  });\n\n  it('shows full URL for cross-origin preloading', async () => {\n    await assertRenderResult(\n        {\n          rows: [{\n            id: 'id',\n            pipeline: SDK.PreloadingModel.PreloadPipeline.newFromAttemptsForTesting([{\n              action: Protocol.Preload.SpeculationAction.Prefetch,\n              key: {\n                loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                action: Protocol.Preload.SpeculationAction.Prefetch,\n                url: urlString`https://cross-origin.example.com/prefetched.html`,\n              },\n              pipelineId: 'pipelineId:1' as Protocol.Preload.PreloadPipelineId,\n              status: SDK.PreloadingModel.PreloadingStatus.RUNNING,\n              prefetchStatus: null,\n              requestId: 'requestId:1' as Protocol.Network.RequestId,\n              ruleSetIds: ['ruleSetId:0.1'] as Protocol.Preload.RuleSetId[],\n              nodeIds: [1] as Protocol.DOM.BackendNodeId[],\n            }]),\n            ruleSets: [\n              {\n                id: 'ruleSetId:0.1' as Protocol.Preload.RuleSetId,\n                loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                sourceText: `\n{\n  \"prefetch\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"https://cross-origin.example.com/prefetched.html\"]\n    }\n  ]\n}\n`,\n              },\n            ],\n          }],\n          pageURL: urlString`https://example.com/`,\n        },\n        ['URL', 'Action', 'Rule set', 'Status'],\n        [\n          ['https://cross-origin.example.com/prefetched.html', 'Prefetch', 'example.com/', 'Running'],\n        ],\n    );\n  });\n\n  it('shows filename for out-of-document speculation rules', async () => {\n    await assertRenderResult(\n        {\n          rows: [{\n            id: 'id',\n            pipeline: SDK.PreloadingModel.PreloadPipeline.newFromAttemptsForTesting([{\n              action: Protocol.Preload.SpeculationAction.Prefetch,\n              key: {\n                loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                action: Protocol.Preload.SpeculationAction.Prefetch,\n                url: urlString`https://example.com/prefetched.html`,\n              },\n              pipelineId: 'pipelineId:1' as Protocol.Preload.PreloadPipelineId,\n              status: SDK.PreloadingModel.PreloadingStatus.RUNNING,\n              prefetchStatus: null,\n              requestId: 'requestId:1' as Protocol.Network.RequestId,\n              ruleSetIds: ['ruleSetId:0.1'] as Protocol.Preload.RuleSetId[],\n              nodeIds: [] as Protocol.DOM.BackendNodeId[],\n            }]),\n            ruleSets: [\n              {\n                id: 'ruleSetId:0.1' as Protocol.Preload.RuleSetId,\n                loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                sourceText: `\n{\n  \"prefetch\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/prefetched.html\"]\n    }\n  ]\n}\n`,\n                url: 'https://example.com/assets/speculation-rules.json',\n              },\n            ],\n          }],\n          pageURL: urlString`https://example.com/`,\n        },\n        ['URL', 'Action', 'Rule set', 'Status'],\n        [\n          ['/prefetched.html', 'Prefetch', 'example.com/assets/speculation-rules.json', 'Running'],\n        ],\n    );\n  });\n\n  it('shows the only first speculation rules', async () => {\n    await assertRenderResult(\n        {\n          rows: [\n            {\n              id: 'id',\n              pipeline: SDK.PreloadingModel.PreloadPipeline.newFromAttemptsForTesting([{\n                action: Protocol.Preload.SpeculationAction.Prefetch,\n                key: {\n                  loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                  action: Protocol.Preload.SpeculationAction.Prefetch,\n                  url: urlString`https://example.com/rule-set-missing.html`,\n                },\n                pipelineId: 'pipelineId:1' as Protocol.Preload.PreloadPipelineId,\n                status: SDK.PreloadingModel.PreloadingStatus.RUNNING,\n                prefetchStatus: null,\n                requestId: 'requestId:1' as Protocol.Network.RequestId,\n                ruleSetIds: ['ruleSetId:0.1'] as Protocol.Preload.RuleSetId[],\n                nodeIds: [1] as Protocol.DOM.BackendNodeId[],\n              }]),\n              ruleSets: [],\n            },\n            {\n              id: 'id',\n              pipeline: SDK.PreloadingModel.PreloadPipeline.newFromAttemptsForTesting([{\n                action: Protocol.Preload.SpeculationAction.Prefetch,\n                key: {\n                  loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                  action: Protocol.Preload.SpeculationAction.Prefetch,\n                  url: urlString`https://example.com/multiple-rule-sets.html`,\n                },\n                pipelineId: 'pipelineId:2' as Protocol.Preload.PreloadPipelineId,\n                status: SDK.PreloadingModel.PreloadingStatus.RUNNING,\n                prefetchStatus: null,\n                requestId: 'requestId:2' as Protocol.Network.RequestId,\n                ruleSetIds: ['ruleSetId:0.2', 'ruleSetId:0.3'] as Protocol.Preload.RuleSetId[],\n                nodeIds: [1] as Protocol.DOM.BackendNodeId[],\n              }]),\n              ruleSets: [\n                {\n                  id: 'ruleSetId:0.2' as Protocol.Preload.RuleSetId,\n                  loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                  sourceText: `\n{\n  \"prefetch\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/multiple-rule-sets.html\"]\n    }\n  ]\n}\n`,\n                },\n                {\n                  id: 'ruleSetId:0.3' as Protocol.Preload.RuleSetId,\n                  loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                  sourceText: `\n{\n  \"prefetch\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/multiple-rule-sets.html\"]\n    }\n  ]\n}\n`,\n                  url: 'https://example.com/assets/speculation-rules.json',\n                },\n              ],\n            },\n          ],\n          pageURL: urlString`https://example.com/`,\n        },\n        ['URL', 'Action', 'Rule set', 'Status'],\n        [\n          ['/rule-set-missing.html', 'Prefetch', '', 'Running'],\n          ['/multiple-rule-sets.html', 'Prefetch', 'example.com/', 'Running'],\n        ],\n    );\n  });\n\n  it('shows composed status for failure', async () => {\n    const grid = await assertRenderResult(\n        {\n          rows: [{\n            id: 'id',\n            pipeline: SDK.PreloadingModel.PreloadPipeline.newFromAttemptsForTesting([{\n              action: Protocol.Preload.SpeculationAction.Prerender,\n              key: {\n                loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                action: Protocol.Preload.SpeculationAction.Prerender,\n                url: urlString`https://example.com/prerendered.html`,\n              },\n              pipelineId: 'pipelineId:1' as Protocol.Preload.PreloadPipelineId,\n              status: SDK.PreloadingModel.PreloadingStatus.FAILURE,\n              prerenderStatus: Protocol.Preload.PrerenderFinalStatus.MojoBinderPolicy,\n              disallowedMojoInterface: 'device.mojom.GamepadMonitor',\n              mismatchedHeaders: null,\n              ruleSetIds: ['ruleSetId:0.1'] as Protocol.Preload.RuleSetId[],\n              nodeIds: [1] as Protocol.DOM.BackendNodeId[],\n            }]),\n            ruleSets: [\n              {\n                id: 'ruleSetId:0.1' as Protocol.Preload.RuleSetId,\n                loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                sourceText: `\n{\n  \"prerender\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/prerendered.html\"]\n    }\n  ]\n}\n`,\n              },\n            ],\n          }],\n          pageURL: urlString`https://example.com/`,\n        },\n        ['URL', 'Action', 'Rule set', 'Status'],\n        [\n          [\n            '/prerendered.html',\n            'Prerender',\n            'example.com/',\n            'Failure - The prerendered page used a forbidden JavaScript API that is currently not supported. (Internal Mojo interface: device.mojom.GamepadMonitor)',\n          ],\n        ],\n    );\n\n    assert.isNotNull(grid.shadowRoot);\n    const cell = getCellByIndexes(grid.shadowRoot, {row: 1, column: 3});\n    const div = cell.querySelector('div');\n    assert.strictEqual(div!.getAttribute('style'), 'color:var(--sys-color-error);');\n    const icon = div!.children[0];\n    assert.include(icon.shadowRoot!.innerHTML, 'cross-circle-filled');\n  });\n\n  it('shows a warning if a prerender fallbacks to prefetch', async () => {\n    const grid = await assertRenderResult(\n        {\n          rows: [{\n            id: 'id',\n            pipeline: SDK.PreloadingModel.PreloadPipeline.newFromAttemptsForTesting([\n              {\n                action: Protocol.Preload.SpeculationAction.Prefetch,\n                key: {\n                  loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                  action: Protocol.Preload.SpeculationAction.Prefetch,\n                  url: urlString`https://example.com/prerendered.html`,\n                },\n                pipelineId: 'pipelineId:1' as Protocol.Preload.PreloadPipelineId,\n                status: SDK.PreloadingModel.PreloadingStatus.SUCCESS,\n                prefetchStatus: Protocol.Preload.PrefetchStatus.PrefetchResponseUsed,\n                requestId: 'requestId:1' as Protocol.Network.RequestId,\n                ruleSetIds: ['ruleSetId:0.1'] as Protocol.Preload.RuleSetId[],\n                nodeIds: [1] as Protocol.DOM.BackendNodeId[],\n              },\n              {\n                action: Protocol.Preload.SpeculationAction.Prerender,\n                key: {\n                  loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                  action: Protocol.Preload.SpeculationAction.Prerender,\n                  url: urlString`https://example.com/prerendered.html`,\n                },\n                pipelineId: 'pipelineId:1' as Protocol.Preload.PreloadPipelineId,\n                status: SDK.PreloadingModel.PreloadingStatus.FAILURE,\n                prerenderStatus: Protocol.Preload.PrerenderFinalStatus.MojoBinderPolicy,\n                disallowedMojoInterface: 'device.mojom.GamepadMonitor',\n                mismatchedHeaders: null,\n                ruleSetIds: ['ruleSetId:0.1'] as Protocol.Preload.RuleSetId[],\n                nodeIds: [1] as Protocol.DOM.BackendNodeId[],\n              },\n            ] as SDK.PreloadingModel.PreloadingAttempt[]),\n            ruleSets: [\n              {\n                id: 'ruleSetId:0.1' as Protocol.Preload.RuleSetId,\n                loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                sourceText: `\n{\n  \"prerender\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/prerendered.html\"]\n    }\n  ]\n}\n`,\n              },\n            ],\n          }],\n          pageURL: urlString`https://example.com/`,\n        },\n        ['URL', 'Action', 'Rule set', 'Status'],\n        [\n          [\n            '/prerendered.html',\n            'Prerender',\n            'example.com/',\n            'Prefetch fallback ready',\n          ],\n        ],\n    );\n\n    assert.isNotNull(grid.shadowRoot);\n    const cell = getCellByIndexes(grid.shadowRoot, {row: 1, column: 3});\n    const div = cell.querySelector('div');\n    assert.strictEqual(div!.getAttribute('style'), 'color:var(--sys-color-orange-bright);');\n    const icon = div!.children[0];\n    assert.include(icon.shadowRoot!.innerHTML, 'warning-filled');\n  });\n\n  it('shows failure if both prefetch and prerender failed', async () => {\n    const grid = await assertRenderResult(\n        {\n          rows: [{\n            id: 'id',\n            pipeline: SDK.PreloadingModel.PreloadPipeline.newFromAttemptsForTesting([\n              {\n                action: Protocol.Preload.SpeculationAction.Prefetch,\n                key: {\n                  loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                  action: Protocol.Preload.SpeculationAction.Prefetch,\n                  url: urlString`https://example.com/prerendered.html`,\n                },\n                pipelineId: 'pipelineId:1' as Protocol.Preload.PreloadPipelineId,\n                status: SDK.PreloadingModel.PreloadingStatus.FAILURE,\n                prefetchStatus: Protocol.Preload.PrefetchStatus.PrefetchFailedNon2XX,\n                requestId: 'requestId:1' as Protocol.Network.RequestId,\n                ruleSetIds: ['ruleSetId:0.1'] as Protocol.Preload.RuleSetId[],\n                nodeIds: [1] as Protocol.DOM.BackendNodeId[],\n              },\n              {\n                action: Protocol.Preload.SpeculationAction.Prerender,\n                key: {\n                  loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                  action: Protocol.Preload.SpeculationAction.Prerender,\n                  url: urlString`https://example.com/prerendered.html`,\n                },\n                pipelineId: 'pipelineId:1' as Protocol.Preload.PreloadPipelineId,\n                status: SDK.PreloadingModel.PreloadingStatus.FAILURE,\n                prerenderStatus: Protocol.Preload.PrerenderFinalStatus.PrerenderFailedDuringPrefetch,\n                disallowedMojoInterface: null,\n                mismatchedHeaders: null,\n                ruleSetIds: ['ruleSetId:0.1'] as Protocol.Preload.RuleSetId[],\n                nodeIds: [1] as Protocol.DOM.BackendNodeId[],\n              },\n            ] as SDK.PreloadingModel.PreloadingAttempt[]),\n            ruleSets: [\n              {\n                id: 'ruleSetId:0.1' as Protocol.Preload.RuleSetId,\n                loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n                sourceText: `\n{\n  \"prerender\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/prerendered.html\"]\n    }\n  ]\n}\n`,\n              },\n            ],\n          }],\n          pageURL: urlString`https://example.com/`,\n        },\n        ['URL', 'Action', 'Rule set', 'Status'],\n        [\n          [\n            '/prerendered.html',\n            'Prerender',\n            'example.com/',\n            // TODO(kenoss): Add string for Protocol.Preload.PrerenderFinalStatus.PrerenderFailedDuringPrefetch.\n            'Failure -',\n          ],\n        ],\n    );\n\n    assert.isNotNull(grid.shadowRoot);\n    const cell = getCellByIndexes(grid.shadowRoot, {row: 1, column: 3});\n    const div = cell.querySelector('div');\n    assert.strictEqual(div!.getAttribute('style'), 'color:var(--sys-color-error);');\n    const icon = div!.children[0];\n    assert.include(icon.shadowRoot!.innerHTML, 'cross-circle-filled');\n  });\n});\n"]}