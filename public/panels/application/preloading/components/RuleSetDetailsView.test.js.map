{"version":3,"file":"RuleSetDetailsView.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/application/preloading/components/RuleSetDetailsView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../../../generated/protocol.js';\nimport {\n  renderElementIntoDOM,\n} from '../../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../../testing/EnvironmentHelpers.js';\nimport * as RenderCoordinator from '../../../../ui/components/render_coordinator/render_coordinator.js';\nimport type * as TextEditor from '../../../../ui/components/text_editor/text_editor.js';\n\nimport * as PreloadingComponents from './components.js';\n\nasync function renderRuleSetDetailsView(\n    data: PreloadingComponents.RuleSetDetailsView.RuleSetDetailsViewData,\n    shouldPrettyPrint: boolean): Promise<HTMLElement> {\n  const component = new PreloadingComponents.RuleSetDetailsView.RuleSetDetailsView();\n  component.shouldPrettyPrint = shouldPrettyPrint;\n  component.data = data;\n  renderElementIntoDOM(component);\n  assert.isNotNull(component.shadowRoot);\n  await RenderCoordinator.done();\n\n  return component;\n}\n\ndescribeWithEnvironment('RuleSetDetailsView', () => {\n  it('renders placeholder if not selected', async () => {\n    const data = null;\n\n    const component = await renderRuleSetDetailsView(data, false);\n    assert.isNotNull(component.shadowRoot);\n    assert.exists(component.shadowRoot.querySelector('.empty-state'));\n\n    const header = component.shadowRoot.querySelector('.empty-state-header')?.textContent;\n    const description = component.shadowRoot.querySelector('.empty-state-description')?.textContent;\n    assert.deepEqual(header, 'No element selected');\n    assert.deepEqual(description, 'Select an element for more details');\n  });\n\n  it('renders rule set', async () => {\n    const data: Protocol.Preload.RuleSet = {\n      id: 'ruleSetId:1' as Protocol.Preload.RuleSetId,\n      loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n      sourceText: `\n{\n  \"prefetch\": [\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/subresource.js\"]\n    }\n  ]\n}\n`,\n      backendNodeId: 1 as Protocol.DOM.BackendNodeId,\n    };\n    const component = await renderRuleSetDetailsView(data, false);\n    assert.isUndefined(component.shadowRoot?.getElementById('error-message-text')?.textContent);\n\n    const textEditor = component.shadowRoot?.querySelector('devtools-text-editor') as TextEditor.TextEditor.TextEditor;\n    assert.strictEqual(textEditor.state.doc.toString(), data.sourceText);\n  });\n\n  it('renders rule set from Speculation-Rules HTTP header', async () => {\n    const data: Protocol.Preload.RuleSet = {\n      id: 'ruleSetId:1' as Protocol.Preload.RuleSetId,\n      loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n      sourceText: `\n{\n  \"prefetch\": [\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/subresource.js\"]\n    }\n  ]\n}\n`,\n      url: 'https://example.com/speculationrules.json',\n      requestId: 'reqeustId' as Protocol.Network.RequestId,\n    };\n    const component = await renderRuleSetDetailsView(data, false);\n    assert.isUndefined(component.shadowRoot?.getElementById('error-message-text')?.textContent);\n    const textEditor = component.shadowRoot?.querySelector('devtools-text-editor') as TextEditor.TextEditor.TextEditor;\n    assert.strictEqual(textEditor.state.doc.toString(), data.sourceText);\n  });\n\n  it('renders invalid rule set, broken JSON', async () => {\n    const data: Protocol.Preload.RuleSet = {\n      id: 'ruleSetId:1' as Protocol.Preload.RuleSetId,\n      loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n      sourceText: `\n{\n  \"prefetch\": [\n    {\n      \"source\": \"list\",\n`,\n      backendNodeId: 1 as Protocol.DOM.BackendNodeId,\n      errorType: Protocol.Preload.RuleSetErrorType.SourceIsNotJsonObject,\n      errorMessage: 'Line: 6, column: 1, Syntax error.',\n    };\n    const component = await renderRuleSetDetailsView(data, false);\n    assert.deepEqual(\n        component.shadowRoot?.getElementById('error-message-text')?.textContent, 'Line: 6, column: 1, Syntax error.');\n    const textEditor = component.shadowRoot?.querySelector('devtools-text-editor') as TextEditor.TextEditor.TextEditor;\n    assert.strictEqual(textEditor.state.doc.toString(), data.sourceText);\n  });\n\n  it('renders invalid rule set, lacking `urls`', async () => {\n    const data: Protocol.Preload.RuleSet = {\n      id: 'ruleSetId:1' as Protocol.Preload.RuleSetId,\n      loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n      sourceText: `\n{\n  \"prefetch\": [\n    {\n      \"source\": \"list\"\n    }\n  ]\n}\n`,\n      backendNodeId: 1 as Protocol.DOM.BackendNodeId,\n      errorType: Protocol.Preload.RuleSetErrorType.InvalidRulesSkipped,\n      errorMessage: 'A list rule must have a \"urls\" array.',\n    };\n    const component = await renderRuleSetDetailsView(data, false);\n    assert.deepEqual(\n        component.shadowRoot?.getElementById('error-message-text')?.textContent,\n        'A list rule must have a \"urls\" array.');\n    const textEditor = component.shadowRoot?.querySelector('devtools-text-editor') as TextEditor.TextEditor.TextEditor;\n    assert.strictEqual(textEditor.state.doc.toString(), data.sourceText);\n  });\n\n  it('renders formatted rule set', async () => {\n    const data: Protocol.Preload.RuleSet = {\n      id: 'ruleSetId:1' as Protocol.Preload.RuleSetId,\n      loaderId: 'loaderId:1' as Protocol.Network.LoaderId,\n      sourceText: '{\"prefetch\":[{\"source\": \"list\",\"urls\": [\"/subresource.js\"]}]}',\n      backendNodeId: 1 as Protocol.DOM.BackendNodeId,\n    };\n    const component = await renderRuleSetDetailsView(data, true);\n    assert.isUndefined(component.shadowRoot?.getElementById('error-message-text')?.textContent);\n\n    const textEditor = component.shadowRoot?.querySelector('devtools-text-editor') as TextEditor.TextEditor.TextEditor;\n    // Formatted sourceText should be different from the data.sourceText in this case.\n    assert.notEqual(textEditor.state.doc.toString(), data.sourceText);\n    assert.strictEqual(textEditor.state.doc.toString(), `{\n    \"prefetch\": [\n        {\n            \"source\": \"list\",\n            \"urls\": [\n                \"/subresource.js\"\n            ]\n        }\n    ]\n}`);\n  });\n});\n"]}