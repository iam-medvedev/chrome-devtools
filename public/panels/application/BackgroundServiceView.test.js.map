{"version":3,"file":"BackgroundServiceView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/BackgroundServiceView.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C,OAAO,EAAC,kBAAkB,EAAC,MAAM,6BAA6B,CAAC;AAC/D,OAAO,EAAC,YAAY,EAAE,eAAe,EAAC,MAAM,qCAAqC,CAAC;AAClF,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAC3E,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAEhD,OAAO,KAAK,SAAS,MAAM,kBAAkB,CAAC;AAE9C,0BAA0B,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACvD,MAAM,OAAO,GAAG,kBAAkB,CAAC;IACnC,MAAM,WAAW,iFAAyD,CAAC;IAC3E,IAAI,MAAyB,CAAC;IAC9B,IAAI,sBAAoF,CAAC;IACzF,IAAI,OAA+D,CAAC;IACpE,IAAI,IAA2D,CAAC;IAEhE,MAAM,wBAAwB,GAAG;QAC/B,SAAS,EAAE,UAAU,EAAG,2BAA2B;QACnD,MAAM,EAAE,EAAE;QACV,UAAU,EAAE,OAAO;QACnB,2BAA2B,EAAE,IAA6C,EAAG,WAAW;QACxF,OAAO,EAAE,WAAW;QACpB,SAAS,EAAE,QAAQ;QACnB,UAAU,EAAE,WAAW;QACvB,aAAa,EAAE,EAAE;KAClB,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,GAAG,YAAY,EAAE,CAAC;QACxB,sBAAsB,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,sBAAsB,CAAC,sBAAsB,CAAC,CAAC;QAC/F,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QAChE,eAAe,CAAC,CAAC;gBACf,QAAQ,EAAE,qCAAqC;gBAC/C,QAAQ,sFAA0D;gBAClE,KAAK,EAAE,GAAG,EAAE,CAAC,MAA2C;gBACxD,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC,CAAC;QAEJ,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC,OAAO,CAAC;YACnE,sBAAsB,EAAE,GAAG,EAAE,GAAE,CAAC;YAChC,kBAAkB,EAAE,GAAG,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,gBAAgB,CAAC,gBAAgB,CAC/D,CAAC,EAAC,GAAG,EAAE,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAC,CAAC,EAAE,EAAE,oEAA4C,CAAC;SAC5D,CAAC,CAAC;QACtD,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;QACtC,IAAI,GAAG,IAAI,SAAS,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,WAAW,EAAE,sBAAsB,CAAC,CAAC;IACxG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;QACtC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACvB,sBAAsB,CAAC,8BAA8B,CAAC,EAAC,sBAAsB,EAAE,wBAAwB,EAAC,CAAC,CAAC;QAC1G,OAAO,CAAC,iBAAiB,CAAC,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9C,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAEnC,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,sBAAsB,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,CAAC;QACvG,MAAM,YAAY,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;QACtD,MAAM,UAAU,GAAG;YACjB,OAAO,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW;YAClE,OAAO,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW;YACnE,OAAO,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW;SACpE,CAAC;QACF,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uEAAuE,EAAE,GAAG,EAAE;QAC/E,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;QACtC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACvB,sBAAsB,CAAC,8BAA8B,CAAC,EAAC,sBAAsB,EAAE,wBAAwB,EAAC,CAAC,CAAC;QAC1G,OAAO,CAAC,iBAAiB,CAAC,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9C,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAEnC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC;QACpE,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,qBAAqB,CAAC,EAAE,WAAW,CAAC;QACrF,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,0BAA0B,CAAC,EAAE,WAAW,CAAC;QAC/F,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;QAC9C,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,sCAAsC,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC;QACpE,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,qBAAqB,CAAC,EAAE,WAAW,CAAC;QACrF,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,0BAA0B,CAAC,EAAE,WAAW,CAAC;QAC/F,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;QAC7C,MAAM,CAAC,SAAS,CACZ,WAAW,EACX,gHAAgH,CAAC,CAAC;IACxH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,MAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,8BAA8B,CAAC,CAAC;QACvF,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC5B,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,WAAW,EAAE,wBAAwB,CAAC,CAAC;QAErE,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;QACxD,kBAAkB,CAAC,YAAY,CAAC,CAAC;QACjC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,sBAAsB,EAAE,qBAAqB,CACzC,EAAC,WAAW,EAAE,IAAI,EAAE,OAAO,gFAAwD,EAAC,CAAC,CAAC;QAE1F,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC;QACpE,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,qBAAqB,CAAC,EAAE,WAAW,CAAC;QACrF,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,0BAA0B,CAAC,EAAE,WAAW,CAAC;QAC/F,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,sCAAsC,CAAC,CAAC;QACjE,MAAM,CAAC,SAAS,CACZ,WAAW,EAAE,wFAAwF,CAAC,CAAC;IAC7G,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,sBAAsB,EAAE,8BAA8B,CAAC,EAAC,sBAAsB,EAAE,wBAAwB,EAAC,CAAC,CAAC;QAC3G,OAAO,EAAE,iBAAiB,CAAC,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAE/C,MAAM,IAAI,CAAC,cAAc,CAAC;QAC1B,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;QAEvE,qBAAqB;QACrB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC;QAEjE,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;QACtE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACvB,MAAM,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,sBAAsB,CAAC,CAAC;QAClE,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAC3B,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAEhC,wDAAwD;QACxD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC;QACpE,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,qBAAqB,CAAC,EAAE,WAAW,CAAC;QACrF,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,sBAAsB,EAAE,8BAA8B,CAAC,EAAC,sBAAsB,EAAE,wBAAwB,EAAC,CAAC,CAAC;QAE3G,MAAM,iBAAiB,GAAG;YACxB,GAAG,wBAAwB;YAC3B,aAAa,EAAE,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAC,CAAC;YAC7C,UAAU,EAAE,WAAW;YACvB,SAAS,EAAE,QAAQ;SACpB,CAAC;QACF,sBAAsB,EAAE,8BAA8B,CAAC,EAAC,sBAAsB,EAAE,iBAAiB,EAAC,CAAC,CAAC;QACpG,OAAO,EAAE,iBAAiB,CAAC,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAE/C,MAAM,IAAI,CAAC,cAAc,CAAC;QAC1B,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;QACvE,IAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,oCAAoC,CAAC,CAAC;QACvF,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAW,EAAE,4BAA4B,CAAC,CAAC;QAEtE,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;QACvE,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,oCAAoC,CAAC,CAAC;QACnF,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {dispatchClickEvent} from '../../testing/DOMHelpers.js';\nimport {createTarget, registerActions} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Resources from './application.js';\n\ndescribeWithMockConnection('BackgroundServiceView', () => {\n  const testKey = 'test-storage-key';\n  const serviceName = Protocol.BackgroundService.ServiceName.BackgroundFetch;\n  let target: SDK.Target.Target;\n  let backgroundServiceModel: Resources.BackgroundServiceModel.BackgroundServiceModel|null;\n  let manager: SDK.StorageKeyManager.StorageKeyManager|null|undefined;\n  let view: Resources.BackgroundServiceView.BackgroundServiceView;\n\n  const BACKGROUND_SERVICE_EVENT = {\n    timestamp: 1556889085,  // 2019-05-03 14:11:25.000.\n    origin: '',\n    storageKey: testKey,\n    serviceWorkerRegistrationId: '42' as Protocol.ServiceWorker.RegistrationID,  // invalid.\n    service: serviceName,\n    eventName: 'Event1',\n    instanceId: 'Instance1',\n    eventMetadata: [],\n  };\n\n  beforeEach(() => {\n    target = createTarget();\n    backgroundServiceModel = target.model(Resources.BackgroundServiceModel.BackgroundServiceModel);\n    manager = target.model(SDK.StorageKeyManager.StorageKeyManager);\n    registerActions([{\n      actionId: 'background-service.toggle-recording',\n      category: UI.ActionRegistration.ActionCategory.BACKGROUND_SERVICES,\n      title: () => 'mock' as Platform.UIString.LocalizedString,\n      toggleable: true,\n    }]);\n\n    sinon.stub(UI.ShortcutRegistry.ShortcutRegistry, 'instance').returns({\n      shortcutTitleForAction: () => {},\n      shortcutsForAction: () => [new UI.KeyboardShortcut.KeyboardShortcut(\n          [{key: UI.KeyboardShortcut.Keys.Ctrl.code, name: 'Ctrl'}], '', UI.KeyboardShortcut.Type.DEFAULT_SHORTCUT)],\n    } as unknown as UI.ShortcutRegistry.ShortcutRegistry);\n    assert.exists(backgroundServiceModel);\n    view = new Resources.BackgroundServiceView.BackgroundServiceView(serviceName, backgroundServiceModel);\n  });\n\n  it('updates event list when main storage key changes', () => {\n    assert.exists(backgroundServiceModel);\n    assert.exists(manager);\n    backgroundServiceModel.backgroundServiceEventReceived({backgroundServiceEvent: BACKGROUND_SERVICE_EVENT});\n    manager.updateStorageKeys(new Set([testKey]));\n    manager.setMainStorageKey(testKey);\n\n    const dataRow = view.getDataGrid().dataTableBody.getElementsByClassName('data-grid-data-grid-node')[0];\n    const expectedData = ['Event1', testKey, 'Instance1'];\n    const actualData = [\n      dataRow.getElementsByClassName('event-name-column')[0].textContent,\n      dataRow.getElementsByClassName('storage-key-column')[0].textContent,\n      dataRow.getElementsByClassName('instance-id-column')[0].textContent,\n    ];\n    assert.deepEqual(actualData, expectedData);\n  });\n\n  it('shows placeholder text to select a value if events have been captured', () => {\n    assert.exists(backgroundServiceModel);\n    assert.exists(manager);\n    backgroundServiceModel.backgroundServiceEventReceived({backgroundServiceEvent: BACKGROUND_SERVICE_EVENT});\n    manager.updateStorageKeys(new Set([testKey]));\n    manager.setMainStorageKey(testKey);\n\n    assert.isNotNull(view.contentElement.querySelector('.empty-state'));\n    const header = view.contentElement.querySelector('.empty-state-header')?.textContent;\n    const description = view.contentElement.querySelector('.empty-state-description')?.textContent;\n    assert.deepEqual(header, 'No event selected');\n    assert.deepEqual(description, 'Select an event to view its metadata');\n  });\n\n  it('shows placeholder text', () => {\n    assert.isNotNull(view.contentElement.querySelector('.empty-state'));\n    const header = view.contentElement.querySelector('.empty-state-header')?.textContent;\n    const description = view.contentElement.querySelector('.empty-state-description')?.textContent;\n    assert.deepEqual(header, 'No recording yet');\n    assert.deepEqual(\n        description,\n        'Start to debug background services by using the \"Start recording events\" button or by pressing Ctrl.Learn more');\n  });\n\n  it('Triggers record on button click', () => {\n    const recordButton = view.contentElement.querySelector('.empty-state devtools-button');\n    assert.exists(recordButton);\n    assert.deepEqual(recordButton.textContent, 'Start recording events');\n\n    const recordingSpy = sinon.spy(view, 'toggleRecording');\n    dispatchClickEvent(recordButton);\n    sinon.assert.calledOnce(recordingSpy);\n  });\n\n  it('informs developer about current recording', () => {\n    backgroundServiceModel?.recordingStateChanged(\n        {isRecording: true, service: Protocol.BackgroundService.ServiceName.BackgroundFetch});\n\n    assert.isNotNull(view.contentElement.querySelector('.empty-state'));\n    const header = view.contentElement.querySelector('.empty-state-header')?.textContent;\n    const description = view.contentElement.querySelector('.empty-state-description')?.textContent;\n    assert.deepEqual(header, 'Recording background fetch activity…');\n    assert.deepEqual(\n        description, 'DevTools will record all background fetch activity for up to 3 days, even when closed.');\n  });\n\n  it('clears preview when view is cleared', async () => {\n    backgroundServiceModel?.backgroundServiceEventReceived({backgroundServiceEvent: BACKGROUND_SERVICE_EVENT});\n    manager?.updateStorageKeys(new Set([testKey]));\n\n    await view.updateComplete;\n    view.getDataGrid().asWidget().dataGrid.rootNode().children[0].select();\n\n    // Metadata is shown.\n    assert.isNull(view.contentElement.querySelector('.empty-state'));\n\n    const toolbar = view.contentElement.querySelector('devtools-toolbar');\n    assert.exists(toolbar);\n    const clearButton = toolbar.querySelector('[aria-label=\"Clear\"]');\n    assert.exists(clearButton);\n    dispatchClickEvent(clearButton);\n\n    // Preview is cleared, showing general empty state text.\n    assert.isNotNull(view.contentElement.querySelector('.empty-state'));\n    const header = view.contentElement.querySelector('.empty-state-header')?.textContent;\n    assert.deepEqual(header, 'No recording yet');\n  });\n\n  it('shows metadata in preview', async () => {\n    backgroundServiceModel?.backgroundServiceEventReceived({backgroundServiceEvent: BACKGROUND_SERVICE_EVENT});\n\n    const eventWithMetadata = {\n      ...BACKGROUND_SERVICE_EVENT,\n      eventMetadata: [{key: 'key', value: 'value'}],\n      instanceId: 'Instance2',\n      eventName: 'Event2'\n    };\n    backgroundServiceModel?.backgroundServiceEventReceived({backgroundServiceEvent: eventWithMetadata});\n    manager?.updateStorageKeys(new Set([testKey]));\n\n    await view.updateComplete;\n    view.getDataGrid().asWidget().dataGrid.rootNode().children[0].select();\n    let metadata = view.contentElement.querySelector('.background-service-metadata-entry');\n    assert.deepEqual(metadata?.textContent, 'No metadata for this event');\n\n    view.getDataGrid().asWidget().dataGrid.rootNode().children[1].select();\n    metadata = view.contentElement.querySelector('.background-service-metadata-entry');\n    assert.deepEqual(metadata?.textContent, 'key: value');\n  });\n});\n"]}