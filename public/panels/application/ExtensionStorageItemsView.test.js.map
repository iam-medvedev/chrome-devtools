{"version":3,"file":"ExtensionStorageItemsView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/ExtensionStorageItemsView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n} from '../../testing/MockConnection.js';\nimport * as Coordinator from '../../ui/components/render_coordinator/render_coordinator.js';\n\nimport * as Resources from './application.js';\n\nimport View = Resources.ExtensionStorageItemsView;\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nclass ExtensionStorageItemsListener {\n  #dispatcher: Common.ObjectWrapper.ObjectWrapper<View.ExtensionStorageItemsDispatcher.EventTypes>;\n  #refreshed: boolean = false;\n\n  constructor(dispatcher: Common.ObjectWrapper.ObjectWrapper<View.ExtensionStorageItemsDispatcher.EventTypes>) {\n    this.#dispatcher = dispatcher;\n    this.#dispatcher.addEventListener(\n        View.ExtensionStorageItemsDispatcher.Events.ITEMS_REFRESHED, this.#itemsRefreshed, this);\n  }\n\n  dispose(): void {\n    this.#dispatcher.removeEventListener(\n        View.ExtensionStorageItemsDispatcher.Events.ITEMS_REFRESHED, this.#itemsRefreshed, this);\n  }\n\n  resetRefreshed(): void {\n    this.#refreshed = false;\n  }\n\n  #itemsRefreshed(): void {\n    this.#refreshed = true;\n  }\n\n  async waitForItemsRefreshed(): Promise<void> {\n    if (!this.#refreshed) {\n      await this.#dispatcher.once(View.ExtensionStorageItemsDispatcher.Events.ITEMS_REFRESHED);\n    }\n    this.#refreshed = true;\n  }\n}\n\ndescribeWithMockConnection('ExtensionStorageItemsView', function() {\n  let target: SDK.Target.Target;\n  let extensionStorageModel: Resources.ExtensionStorageModel.ExtensionStorageModel|null;\n  let extensionStorage: Resources.ExtensionStorageModel.ExtensionStorage;\n\n  const TEST_EXTENSION_ID = 'abc';\n  const TEST_EXTENSION_NAME = 'Hello World';\n\n  const EXAMPLE_DATA: {[key: string]: string} = {a: 'foo', b: 'bar'};\n\n  beforeEach(() => {\n    target = createTarget();\n    extensionStorageModel = target.model(Resources.ExtensionStorageModel.ExtensionStorageModel);\n    assert.exists(extensionStorageModel);\n    extensionStorage = new Resources.ExtensionStorageModel.ExtensionStorage(\n        extensionStorageModel, TEST_EXTENSION_ID, TEST_EXTENSION_NAME, Protocol.Extensions.StorageArea.Local);\n  });\n\n  it('displays items', async () => {\n    assert.exists(extensionStorageModel);\n    sinon.stub(extensionStorageModel.agent, 'invoke_getStorageItems')\n        .withArgs({id: TEST_EXTENSION_ID, storageArea: Protocol.Extensions.StorageArea.Local})\n        .resolves({\n          data: EXAMPLE_DATA,\n          getError: () => undefined,\n        });\n\n    const view = new View.ExtensionStorageItemsView(extensionStorage);\n\n    const itemsListener = new ExtensionStorageItemsListener(view.extensionStorageItemsDispatcher);\n    await itemsListener.waitForItemsRefreshed();\n\n    assert.deepEqual(\n        view.getEntriesForTesting(), Object.keys(EXAMPLE_DATA).map(key => ({key, value: EXAMPLE_DATA[key]})));\n\n    await coordinator.done();\n    view.detach();\n  });\n});\n"]}