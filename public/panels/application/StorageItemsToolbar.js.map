{"version":3,"file":"StorageItemsToolbar.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/StorageItemsToolbar.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../ui/legacy/legacy.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Lit from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport * as ApplicationComponents from './components/components.js';\n\nconst UIStrings = {\n  /**\n   *@description Text to refresh the page\n   */\n  refresh: 'Refresh',\n  /**\n   *@description Text to clear everything\n   */\n  clearAll: 'Clear All',\n  /**\n   *@description Tooltip text that appears when hovering over the largeicon delete button in the Service Worker Cache Views of the Application panel\n   */\n  deleteSelected: 'Delete Selected',\n  /**\n   *@description Text that informs screen reader users that the storage table has been refreshed\n   */\n  refreshedStatus: 'Table refreshed',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/application/StorageItemsToolbar.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst {html, render} = Lit;\n\ninterface ViewInput {\n  onRefresh: () => void;\n  onDeleteAll: () => void;\n  onDeleteSelected: () => void;\n  metadataView: ApplicationComponents.StorageMetadataView.StorageMetadataView;\n  onFilterChanged: (ev: CustomEvent<string|null>) => void;\n  deleteAllButtonEnabled: boolean;\n  deleteSelectedButtonDisabled: boolean;\n  filterItemEnabled: boolean;\n  deleteAllButtonIconName: string;\n  deleteAllButtonTitle: string;\n  mainToolbarItems: UI.Toolbar.ToolbarItem[];\n}\n\nexport const DEFAULT_VIEW = (input: ViewInput, _output: object, target: HTMLElement): void => {\n  render(\n      // clang-format off\n      html`\n      <devtools-toolbar class=\"top-resources-toolbar\"\n                        jslog=${VisualLogging.toolbar()}>\n        <devtools-button title=${i18nString(UIStrings.refresh)}\n                         jslog=${VisualLogging.action('storage-items-view.refresh').track({\n        click: true\n      })}\n                         @click=${input.onRefresh}\n                         .iconName=${'refresh'}\n                         .variant=${Buttons.Button.Variant.TOOLBAR}></devtools-button>\n        <devtools-toolbar-input type=\"filter\"\n                                ?disabled=${!input.filterItemEnabled}\n                                @change=${input.onFilterChanged}\n                                style=\"flex-grow:0.4\"></devtools-toolbar-input>\n        ${new UI.Toolbar.ToolbarSeparator().element}\n        <devtools-button title=${input.deleteAllButtonTitle}\n                         @click=${input.onDeleteAll}\n                         id=storage-items-delete-all\n                         ?disabled=${!input.deleteAllButtonEnabled}\n                         jslog=${VisualLogging.action('storage-items-view.clear-all').track({\n        click: true\n      })}\n                         .iconName=${input.deleteAllButtonIconName}\n                         .variant=${Buttons.Button.Variant.TOOLBAR}></devtools-button>\n        <devtools-button title=${i18nString(UIStrings.deleteSelected)}\n                         @click=${input.onDeleteSelected}\n                         ?disabled=${!input.deleteSelectedButtonDisabled}\n                         jslog=${VisualLogging.action('storage-items-view.delete-selected').track({\n        click: true\n      })}\n                         .iconName=${'cross'}\n                         .variant=${Buttons.Button.Variant.TOOLBAR}></devtools-button>\n        ${input.mainToolbarItems.map(item => item.element)}\n      </devtools-toolbar>\n      ${input.metadataView}`,\n      // clang-format on\n      target, {host: input});\n};\n\nexport type View = (input: ViewInput, output: object, target: HTMLElement) => void;\n\nexport class StorageItemsToolbar extends\n    Common.ObjectWrapper.eventMixin<StorageItemsToolbar.EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox) {\n  filterRegex: RegExp|null;\n  #metadataView: ApplicationComponents.StorageMetadataView.StorageMetadataView|undefined;\n  readonly #view: View;\n  #deleteAllButtonEnabled = true;\n  #deleteSelectedButtonDisabled = true;\n  #filterItemEnabled = true;\n  #deleteAllButtonIconName = 'clear';\n  #deleteAllButtonTitle: string = i18nString(UIStrings.clearAll);\n  #mainToolbarItems: UI.Toolbar.ToolbarItem[] = [];\n\n  constructor(element?: HTMLElement, view: View = DEFAULT_VIEW) {\n    super(false, false, element);\n    this.#view = view;\n    this.filterRegex = null;\n  }\n\n  set metadataView(view: ApplicationComponents.StorageMetadataView.StorageMetadataView) {\n    this.#metadataView = view;\n  }\n\n  get metadataView(): ApplicationComponents.StorageMetadataView.StorageMetadataView {\n    if (!this.#metadataView) {\n      this.#metadataView = new ApplicationComponents.StorageMetadataView.StorageMetadataView();\n    }\n    return this.#metadataView;\n  }\n\n  override performUpdate(): void {\n    const viewInput: ViewInput = {\n      deleteAllButtonEnabled: this.#deleteAllButtonEnabled,\n      deleteSelectedButtonDisabled: this.#deleteSelectedButtonDisabled,\n      filterItemEnabled: this.#filterItemEnabled,\n      deleteAllButtonIconName: this.#deleteAllButtonIconName,\n      deleteAllButtonTitle: this.#deleteAllButtonTitle,\n      mainToolbarItems: this.#mainToolbarItems,\n      metadataView: this.metadataView,\n      onFilterChanged: this.filterChanged.bind(this),\n      onRefresh: () => {\n        this.dispatchEventToListeners(StorageItemsToolbar.Events.REFRESH);\n        UI.ARIAUtils.alert(i18nString(UIStrings.refreshedStatus));\n      },\n      onDeleteAll: () => this.dispatchEventToListeners(StorageItemsToolbar.Events.DELETE_ALL),\n      onDeleteSelected: () => this.dispatchEventToListeners(StorageItemsToolbar.Events.DELETE_SELECTED),\n    };\n    this.#view(viewInput, {}, this.contentElement);\n  }\n\n  setDeleteAllTitle(title: string): void {\n    this.#deleteAllButtonTitle = title;\n    this.requestUpdate();\n  }\n\n  setDeleteAllGlyph(glyph: string): void {\n    this.#deleteAllButtonIconName = glyph;\n    this.requestUpdate();\n  }\n\n  appendToolbarItem(item: UI.Toolbar.ToolbarItem): void {\n    this.#mainToolbarItems.push(item);\n    this.requestUpdate();\n  }\n\n  setStorageKey(storageKey: string): void {\n    this.metadataView.setStorageKey(storageKey);\n  }\n\n  filterChanged({detail: text}: CustomEvent<string|null>): void {\n    this.filterRegex = text ? new RegExp(Platform.StringUtilities.escapeForRegExp(text), 'i') : null;\n    this.dispatchEventToListeners(StorageItemsToolbar.Events.REFRESH);\n  }\n\n  hasFilter(): boolean {\n    return Boolean(this.filterRegex);\n  }\n\n  setCanDeleteAll(enabled: boolean): void {\n    this.#deleteAllButtonEnabled = enabled;\n    this.requestUpdate();\n  }\n\n  setCanDeleteSelected(enabled: boolean): void {\n    this.#deleteSelectedButtonDisabled = enabled;\n    this.requestUpdate();\n  }\n\n  setCanFilter(enabled: boolean): void {\n    this.#filterItemEnabled = enabled;\n    this.requestUpdate();\n  }\n}\n\nexport namespace StorageItemsToolbar {\n  export const enum Events {\n    REFRESH = 'Refresh',\n    FILTER_CHANGED = 'FilterChanged',\n    DELETE_ALL = 'DeleteAll',\n    DELETE_SELECTED = 'DeleteSelected',\n  }\n\n  export interface EventTypes {\n    [Events.REFRESH]: void;\n    [Events.FILTER_CHANGED]: void;\n    [Events.DELETE_ALL]: void;\n    [Events.DELETE_SELECTED]: void;\n  }\n}\n"]}