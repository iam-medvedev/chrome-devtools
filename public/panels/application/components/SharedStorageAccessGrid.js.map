{"version":3,"file":"SharedStorageAccessGrid.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/application/components/SharedStorageAccessGrid.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../ui/legacy/components/data_grid/data_grid.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Lit from '../../../ui/lit/lit.js';\n\nimport sharedStorageAccessGridStylesRaw from './sharedStorageAccessGrid.css.js';\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst sharedStorageAccessGridStyles = new CSSStyleSheet();\nsharedStorageAccessGridStyles.replaceSync(sharedStorageAccessGridStylesRaw.cssContent);\n\nconst {render, html} = Lit;\n\nconst UIStrings = {\n  /**\n   *@description Text in Shared Storage Events View of the Application panel\n   */\n  sharedStorage: 'Shared storage',\n  /**\n   *@description Hover text for an info icon in the Shared Storage Events panel\n   */\n  allSharedStorageEvents: 'All shared storage events for this page.',\n  /**\n   *@description Text in Shared Storage Events View of the Application panel\n   * Date and time of an Shared Storage event in a locale-\n   * dependent format.\n   */\n  eventTime: 'Event Time',\n  /**\n   *@description Text in Shared Storage Events View of the Application panel\n   * Type of shared storage event such as 'documentAddModule', 'documentRun',\n   * 'documentSet', 'workletDelete', or 'workletGet'.\n   */\n  eventType: 'Access Type',\n  /**\n   *@description Text in Shared Storage Events View of the Application panel\n   * Owner origin of the shared storage for this access event.\n   */\n  ownerOrigin: 'Owner Origin',\n  /**\n   *@description Text in Shared Storage Events View of the Application panel\n   * Event parameters whose presence/absence depend on the access type.\n   */\n  eventParams: 'Optional Event Params',\n  /**\n   *@description Text shown instead of a table when the table would be empty.\n   */\n  noEvents: 'No shared storage events recorded.',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/application/components/SharedStorageAccessGrid.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class SharedStorageAccessGrid extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #datastores: Array<Protocol.Storage.SharedStorageAccessedEvent> = [];\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [sharedStorageAccessGridStyles];\n    this.#render();\n  }\n\n  set data(data: Array<Protocol.Storage.SharedStorageAccessedEvent>) {\n    this.#datastores = data.sort((a, b) => a.accessTime - b.accessTime);\n    this.#render();\n  }\n\n  #render(): void {\n    // clang-format off\n    render(html`\n      <div>\n        <span class=\"heading\">${i18nString(UIStrings.sharedStorage)}</span>\n        <devtools-icon class=\"info-icon\"\n                       title=${i18nString(UIStrings.allSharedStorageEvents)}\n                       .data=${{iconName: 'info', color: 'var(--icon-default)', width: '16px'}}>\n        </devtools-icon>\n        ${this.#renderGridOrNoDataMessage()}\n      </div>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  #renderGridOrNoDataMessage(): Lit.TemplateResult {\n    if (this.#datastores.length === 0) {\n      return html`<div\n        class=\"no-events-message\">${i18nString(UIStrings.noEvents)}</div>`;\n    }\n    return html`\n      <devtools-data-grid striped inline @select=${this.#onSelect}>\n        <table>\n          <tr>\n            <th id=\"event-time\" weight=\"10\" sortable>\n              ${i18nString(UIStrings.eventTime)}\n            </th>\n            <th id=\"event-type\" weight=\"10\" sortable>\n              ${i18nString(UIStrings.eventType)}\n            </th>\n            <th id=\"event-owner-origin\" weight=\"10\" sortable>\n              ${i18nString(UIStrings.ownerOrigin)}\n            </th>\n            <th id=\"event-params\" weight=\"10\" sortable>\n              ${i18nString(UIStrings.eventParams)}\n            </th>\n          </tr>\n          ${this.#datastores.map((event, index) => html`\n            <tr data-index=${index}>\n              <td data-value=${event.accessTime}>\n                ${new Date(1e3 * event.accessTime).toLocaleString()}\n              </td>\n              <td>${event.type}</td>\n              <td>${event.ownerOrigin}</td>\n              <td>${JSON.stringify(event.params)}</td>\n            </tr>\n          `)}\n        </table>\n      </devtools-data-grid>\n    `;\n  }\n\n  #onSelect(event: CustomEvent<HTMLElement>): void {\n    const index = parseInt(event.detail.dataset.index || '', 10);\n    const datastore = isNaN(index) ? undefined : this.#datastores[index];\n    if (datastore) {\n      this.dispatchEvent(new CustomEvent('select', {detail: datastore}));\n    }\n  }\n}\n\ncustomElements.define('devtools-shared-storage-access-grid', SharedStorageAccessGrid);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-shared-storage-access-grid': SharedStorageAccessGrid;\n  }\n}\n"]}