{"version":3,"file":"SharedStorageAccessGrid.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/application/components/SharedStorageAccessGrid.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../ui/legacy/components/data_grid/data_grid.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as Lit from '../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport sharedStorageAccessGridStyles from './sharedStorageAccessGrid.css.js';\n\nconst SHARED_STORAGE_EXPLANATION_URL =\n    'https://developers.google.com/privacy-sandbox/private-advertising/shared-storage';\n\nconst {render, html} = Lit;\n\nconst UIStrings = {\n  /**\n   * @description Text in Shared Storage Events View of the Application panel\n   */\n  sharedStorage: 'Shared storage',\n  /**\n   * @description Hover text for an info icon in the Shared Storage Events panel\n   */\n  allSharedStorageEvents: 'All shared storage events for this page.',\n  /**\n   * @description Text in Shared Storage Events View of the Application panel\n   * Date and time of an Shared Storage event in a locale-\n   * dependent format.\n   */\n  eventTime: 'Event Time',\n  /**\n   * @description Text in Shared Storage Events View of the Application panel\n   * Scope of shared storage event such as 'window', 'sharedStorageWorklet',\n   * 'protectedAudienceWorklet', or 'header'.\n   */\n  eventScope: 'Access Scope',\n  /**\n   * @description Text in Shared Storage Events View of the Application panel\n   * Method of shared storage event such as 'addModule', 'run', 'set', 'delete',\n   * or 'get'.\n   */\n  eventMethod: 'Access Method',\n  /**\n   * @description Text in Shared Storage Events View of the Application panel\n   * Owner origin of the shared storage for this access event.\n   */\n  ownerOrigin: 'Owner Origin',\n  /**\n   * @description Text in Shared Storage Events View of the Application panel\n   * Owner site of the shared storage for this access event.\n   */\n  ownerSite: 'Owner Site',\n  /**\n   * @description Text in Shared Storage Events View of the Application panel\n   * Event parameters whose presence/absence depend on the access type.\n   */\n  eventParams: 'Optional Event Params',\n  /**\n   * @description Text shown when no shared storage event is shown.\n   * Shared storage allows to store and access data that can be shared across different sites.\n   * A shared storage event is for example an access from a site to that storage.\n   */\n  noEvents: 'No shared storage events detected',\n  /**\n   * @description Text shown when no shared storage event is shown. It explains the shared storage event page.\n   * Shared storage allows to store and access data that can be shared across different sites.\n   * A shared storage event is for example an access from a site to that storage.\n   */\n  sharedStorageDescription:\n      'On this page you can view, add, edit and delete shared storage key-value pairs and view shared storage events.',\n  /**\n   * @description Text used in a link to learn more about the topic.\n   */\n  learnMore: 'Learn more',\n\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/application/components/SharedStorageAccessGrid.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface ViewInput {\n  events: Protocol.Storage.SharedStorageAccessedEvent[];\n  onSelect: (event: CustomEvent<HTMLElement>) => void;\n}\nexport type View = (input: ViewInput, output: object, target: HTMLElement) => void;\nexport const DEFAULT_VIEW: View = (input, _output, target) => {\n  // clang-format off\n  render(html`\n    <style>${sharedStorageAccessGridStyles}</style>\n    ${input.events.length === 0\n      ? html`\n        <div class=\"empty-state\" jslog=${VisualLogging.section().context('empty-view')}>\n          <div class=\"empty-state-header\">${i18nString(UIStrings.noEvents)}</div>\n          <div class=\"empty-state-description\">\n            <span>${i18nString(UIStrings.sharedStorageDescription)}</span>\n            ${\n          UI.XLink.XLink.create(\n              SHARED_STORAGE_EXPLANATION_URL, i18nString(UIStrings.learnMore), 'x-link', undefined, 'learn-more')}\n          </div>\n        </div>`\n      : html`\n        <div jslog=${VisualLogging.section('events-table')}>\n          <span class=\"heading\">${i18nString(UIStrings.sharedStorage)}</span>\n          <devtools-icon class=\"info-icon\"\n                          title=${i18nString(UIStrings.allSharedStorageEvents)}\n                          .data=${{iconName: 'info', color: 'var(--icon-default)', width: '16px'}}>\n          </devtools-icon>\n          <devtools-data-grid striped inline @select=${input.onSelect}>\n            <table>\n              <thead>\n                <tr>\n                  <th id=\"event-time\" weight=\"10\" sortable>\n                    ${i18nString(UIStrings.eventTime)}\n                  </th>\n                  <th id=\"event-scope\" weight=\"10\" sortable>\n                    ${i18nString(UIStrings.eventScope)}\n                  </th>\n                  <th id=\"event-method\" weight=\"10\" sortable>\n                    ${i18nString(UIStrings.eventMethod)}\n                  </th>\n                  <th id=\"event-owner-origin\" weight=\"10\" sortable>\n                    ${i18nString(UIStrings.ownerOrigin)}\n                  </th>\n                  <th id=\"event-owner-site\" weight=\"10\" sortable>\n                    ${i18nString(UIStrings.ownerSite)}\n                  </th>\n                  <th id=\"event-params\" weight=\"10\" sortable>\n                    ${i18nString(UIStrings.eventParams)}\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                ${input.events.map((event, index) => html`\n                  <tr data-index=${index}>\n                    <td data-value=${event.accessTime}>\n                      ${new Date(1e3 * event.accessTime).toLocaleString()}\n                    </td>\n                    <td>${event.scope}</td>\n                    <td>${event.method}</td>\n                    <td>${event.ownerOrigin}</td>\n                    <td>${event.ownerSite}</td>\n                    <td>${JSON.stringify(event.params)}</td>\n                  </tr>\n                `)}\n              </tbody>\n            </table>\n          </devtools-data-grid>\n        </div>`}`, target);\n  // clang-format on\n};\n\nexport class SharedStorageAccessGrid extends UI.Widget.Widget {\n  readonly #view: View;\n  #events: Protocol.Storage.SharedStorageAccessedEvent[] = [];\n  #onSelect: (event: Protocol.Storage.SharedStorageAccessedEvent) => void = () => {};\n\n  constructor(element?: HTMLElement, view: View = DEFAULT_VIEW) {\n    super(element, {useShadowDom: true});\n    this.#view = view;\n    this.performUpdate();\n  }\n\n  set events(events: Protocol.Storage.SharedStorageAccessedEvent[]) {\n    this.#events = events;\n    this.performUpdate();\n  }\n\n  set onSelect(onSelect: (event: Protocol.Storage.SharedStorageAccessedEvent) => unknown) {\n    this.#onSelect = onSelect;\n    this.performUpdate();\n  }\n\n  get onSelect(): (event: Protocol.Storage.SharedStorageAccessedEvent) => unknown {\n    return this.#onSelect;\n  }\n\n  override performUpdate(): void {\n    this.#view(\n        {\n          events: this.#events,\n          onSelect: this.#onSelectEvent.bind(this),\n        },\n        {}, this.contentElement);\n  }\n\n  #onSelectEvent(event: CustomEvent<HTMLElement>): void {\n    const index = parseInt(event.detail?.dataset.index || '', 10);\n    const datastore = isNaN(index) ? undefined : this.#events[index];\n    if (datastore) {\n      this.#onSelect(datastore);\n    }\n  }\n}\n"]}