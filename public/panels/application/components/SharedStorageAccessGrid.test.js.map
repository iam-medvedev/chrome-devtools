{"version":3,"file":"SharedStorageAccessGrid.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/application/components/SharedStorageAccessGrid.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../../generated/protocol.js';\nimport {getValuesOfAllBodyRows} from '../../../testing/DataGridHelpers.js';\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {describeWithLocale} from '../../../testing/EnvironmentHelpers.js';\nimport * as RenderCoordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\n\nimport * as ApplicationComponents from './components.js';\n\nasync function renderSharedStorageAccessGrid(events: Protocol.Storage.SharedStorageAccessedEvent[]):\n    Promise<ApplicationComponents.SharedStorageAccessGrid.SharedStorageAccessGrid> {\n  const component = new ApplicationComponents.SharedStorageAccessGrid.SharedStorageAccessGrid();\n  renderElementIntoDOM(component);\n  component.events = events;\n\n  // The data-grid's renderer is scheduled, so we need to wait until the coordinator\n  // is done before we can test against it.\n  await RenderCoordinator.done();\n\n  return component;\n}\n\nfunction getInternalDataGridShadowRoot(\n    component: ApplicationComponents.SharedStorageAccessGrid.SharedStorageAccessGrid): ShadowRoot {\n  const dataGrid = component.contentElement.querySelector('devtools-data-grid')!;\n  assert.isNotNull(dataGrid.shadowRoot);\n  return dataGrid.shadowRoot;\n}\n\ndescribeWithLocale('SharedStorageAccessGrid', () => {\n  it('renders shared storage access events', async () => {\n    const noId = '' as Protocol.Page.FrameId;\n    const params1 = {key: 'key0', value: 'value0'} as Protocol.Storage.SharedStorageAccessParams;\n    const params2 = {key: 'key0'} as Protocol.Storage.SharedStorageAccessParams;\n\n    const component = await renderSharedStorageAccessGrid([\n      {\n        accessTime: 0,\n        method: Protocol.Storage.SharedStorageAccessMethod.Append,\n        mainFrameId: noId,\n        ownerOrigin: 'https://owner1.com',\n        ownerSite: 'https://owner1.com',\n        params: params1,\n        scope: Protocol.Storage.SharedStorageAccessScope.Window,\n      },\n      {\n        accessTime: 10,\n        method: Protocol.Storage.SharedStorageAccessMethod.Delete,\n        mainFrameId: noId,\n        ownerOrigin: 'https://owner2.com',\n        ownerSite: 'https://owner2.com',\n        params: params2,\n        scope: Protocol.Storage.SharedStorageAccessScope.SharedStorageWorklet,\n      },\n    ]);\n\n    const dataGridShadowRoot = getInternalDataGridShadowRoot(component);\n    const rowValues = getValuesOfAllBodyRows(dataGridShadowRoot);\n    const expectedValues = [\n      [\n        (new Date(0 * 1e3)).toLocaleString(), 'window', 'append', 'https://owner1.com', 'https://owner1.com',\n        JSON.stringify(params1)\n      ],\n      [\n        (new Date(10 * 1e3)).toLocaleString(), 'sharedStorageWorklet', 'delete', 'https://owner2.com',\n        'https://owner2.com', JSON.stringify(params2)\n      ],\n    ];\n    assert.deepEqual(rowValues, expectedValues);\n  });\n\n  it('hides shared storage event table when there are no events', async () => {\n    const component = await renderSharedStorageAccessGrid([]);\n\n    const nullGridElement = component.contentElement.querySelector('devtools-new-data');\n    assert.isNull(nullGridElement);\n\n    const noEventsElement = component.contentElement.querySelector('.empty-state');\n    assert.instanceOf(noEventsElement, HTMLDivElement);\n  });\n});\n"]}