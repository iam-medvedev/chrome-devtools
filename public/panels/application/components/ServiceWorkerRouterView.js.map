{"version":3,"file":"ServiceWorkerRouterView.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/application/components/ServiceWorkerRouterView.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAC7B,2DAA2D;AAG3D,OAAO,KAAK,aAAa,MAAM,yDAAyD,CAAC;AACzF,OAAO,KAAK,GAAG,MAAM,wBAAwB,CAAC;AAE9C,OAAO,6BAA6B,MAAM,kCAAkC,CAAC;AAE7E,MAAM,EAAC,IAAI,EAAE,MAAM,EAAC,GAAG,GAAG,CAAC;AAE3B,MAAM,OAAO,uBAAwB,SAAQ,aAAa,CAAC,aAAa,CAAC,kBAAkB;IAChF,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IACrD,MAAM,GAAuD,EAAE,CAAC;IAEhE,MAAM,CAAC,KAAyD;QAC9D,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC3B,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;IACH,CAAC;IAED,OAAO;QACL,mBAAmB;QACnB,MAAM,CAAC,IAAI,CAAA;eACA,6BAA6B,CAAC,OAAO;;UAE1C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC;;KAE5C,EAAE,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/B,kBAAkB;IACpB,CAAC;IAED,iBAAiB,CAAC,IAAsD;QACtE,OAAO,IAAI,CAAA;;oCAEqB,IAAI,CAAC,EAAE;;;;sCAIL,IAAI,CAAC,SAAS;;;;sCAId,IAAI,CAAC,MAAM;;;;KAI5C,CAAC;IACJ,CAAC;CACF;AAED,cAAc,CAAC,MAAM,CAAC,qCAAqC,EAAE,uBAAuB,CAAC,CAAC","sourcesContent":["// Copyright (c) 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport * as LegacyWrapper from '../../../ui/components/legacy_wrapper/legacy_wrapper.js';\nimport * as Lit from '../../../ui/lit/lit.js';\n\nimport serviceWorkerRouterViewStyles from './serviceWorkerRouterView.css.js';\n\nconst {html, render} = Lit;\n\nexport class ServiceWorkerRouterView extends LegacyWrapper.LegacyWrapper.WrappableComponent {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #rules: SDK.ServiceWorkerManager.ServiceWorkerRouterRule[] = [];\n\n  update(rules: SDK.ServiceWorkerManager.ServiceWorkerRouterRule[]): void {\n    this.#rules = rules;\n    if (this.#rules.length > 0) {\n      this.#render();\n    }\n  }\n\n  #render(): void {\n    // clang-format off\n    render(html`\n      <style>${serviceWorkerRouterViewStyles.cssText}</style>\n      <ul class=\"router-rules\">\n        ${this.#rules.map(this.#renderRouterRule)}\n      </ul>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  #renderRouterRule(rule: SDK.ServiceWorkerManager.ServiceWorkerRouterRule): Lit.TemplateResult {\n    return html`\n      <li class=\"router-rule\">\n        <div class=\"rule-id\">Rule ${rule.id}</div>\n        <ul class=\"item\">\n          <li class=\"condition\">\n            <div class=\"rule-type\">Condition</div>\n            <div class=\"rule-value\">${rule.condition}</div>\n          </li>\n          <li class=\"source\">\n            <div class=\"rule-type\">Source</div>\n            <div class=\"rule-value\">${rule.source}</div>\n          </li>\n        </ul>\n      </li>\n    `;\n  }\n}\n\ncustomElements.define('devtools-service-worker-router-view', ServiceWorkerRouterView);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-service-worker-router-view': ServiceWorkerRouterView;\n  }\n}\n"]}