{"version":3,"file":"EndpointsGrid.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/application/components/EndpointsGrid.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,sDAAsD,CAAC;AAE9D,OAAO,KAAK,IAAI,MAAM,4BAA4B,CAAC;AAEnD,OAAO,KAAK,EAAE,MAAM,8BAA8B,CAAC;AACnD,OAAO,KAAK,GAAG,MAAM,wBAAwB,CAAC;AAC9C,OAAO,KAAK,aAAa,MAAM,8CAA8C,CAAC;AAE9E,OAAO,mBAAmB,MAAM,wBAAwB,CAAC;AAEzD,MAAM,SAAS,GAAG;IAChB;;;OAGG;IACH,oBAAoB,EAAE,yBAAyB;IAC/C;;;OAGG;IACH,oBAAoB,EAAE,mEAAmE;CACjF,CAAC;AACX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,gDAAgD,EAAE,SAAS,CAAC,CAAC;AACtG,MAAM,CAAC,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAE7E,MAAM,EAAC,MAAM,EAAE,IAAI,EAAC,GAAG,GAAG,CAAC;AAM3B,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,KAAgB,EAAE,MAAiB,EAAE,MAAmB,EAAQ,EAAE;IAC7F,mBAAmB;IACnB,MAAM,CAAC,IAAI,CAAA;aACA,mBAAmB;aACnB,EAAE,CAAC,qBAAqB;6CACQ,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC;sCACzC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC;QACjE,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;;;;0CAIG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;wCAClC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;uCAC/B,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;;YAExD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,aAAa,CAAC,EAAE,EAAE,CAC1D,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAA;sBAC1B,MAAM;sBACN,QAAQ,CAAC,SAAS;sBAClB,QAAQ,CAAC,GAAG;oBACd,CAAC,CAAC;SACP,IAAI,EAAE;;;OAGd,CAAC,CAAC,CAAC,IAAI,CAAA;;6CAE+B,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC;kDACrC,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC;;OAErF;;GAEJ,EAAE,MAAM,CAAC,CAAC;IACX,kBAAkB;AACpB,CAAC,CAAC;AAIF,MAAM,OAAO,aAAc,SAAQ,EAAE,CAAC,MAAM,CAAC,MAAM;IACjD,SAAS,GAAG,IAAI,GAAG,EAAmD,CAAC;IACvE,KAAK,CAAO;IAEZ,YAAY,OAAqB,EAAE,OAAa,YAAY;QAC1D,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAEQ,aAAa;QACpB,IAAI,CAAC,KAAK,CACN;YACE,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,EACD,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACtC,CAAC;CACF","sourcesContent":["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../../ui/legacy/components/data_grid/data_grid.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\nimport * as Lit from '../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport endpointsGridStyles from './endpointsGrid.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Placeholder text when there are no Reporting API endpoints.\n   *(https://developers.google.com/web/updates/2018/09/reportingapi#tldr)\n   */\n  noEndpointsToDisplay: 'No endpoints to display',\n  /**\n   * @description Placeholder text when there are no Reporting API endpoints.\n   *(https://developers.google.com/web/updates/2018/09/reportingapi#tldr)\n   */\n  endpointsDescription: 'Here you will find the list of endpoints that receive the reports',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/application/components/EndpointsGrid.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst {render, html} = Lit;\n\nexport interface ViewInput {\n  endpoints: Map<string, Protocol.Network.ReportingApiEndpoint[]>;\n}\n\nexport const DEFAULT_VIEW = (input: ViewInput, output: undefined, target: HTMLElement): void => {\n  // clang-format off\n  render(html`\n    <style>${endpointsGridStyles}</style>\n    <style>${UI.inspectorCommonStyles}</style>\n    <div class=\"endpoints-container\" jslog=${VisualLogging.section('endpoints')}>\n      <div class=\"endpoints-header\">${i18n.i18n.lockedString('Endpoints')}</div>\n      ${input.endpoints.size > 0 ? html`\n        <devtools-data-grid striped>\n         <table>\n          <tr>\n            <th id=\"origin\" weight=\"30\">${i18n.i18n.lockedString('Origin')}</th>\n            <th id=\"name\" weight=\"20\">${i18n.i18n.lockedString('Name')}</th>\n            <th id=\"url\" weight=\"30\">${i18n.i18n.lockedString('URL')}</th>\n          </tr>\n          ${Array.from(input.endpoints).map(([origin, endpointArray]) =>\n              endpointArray.map(endpoint => html`<tr>\n                <td>${origin}</td>\n                <td>${endpoint.groupName}</td>\n                <td>${endpoint.url}</td>\n              </tr>`))\n              .flat()}\n          </table>\n        </devtools-data-grid>\n      ` : html`\n        <div class=\"empty-state\">\n          <span class=\"empty-state-header\">${i18nString(UIStrings.noEndpointsToDisplay)}</span>\n          <span class=\"empty-state-description\">${i18nString(UIStrings.endpointsDescription)}</span>\n        </div>\n      `}\n    </div>\n  `, target);\n  // clang-format on\n};\n\ntype View = typeof DEFAULT_VIEW;\n\nexport class EndpointsGrid extends UI.Widget.Widget {\n  endpoints = new Map<string, Protocol.Network.ReportingApiEndpoint[]>();\n  #view: View;\n\n  constructor(element?: HTMLElement, view: View = DEFAULT_VIEW) {\n    super(element);\n    this.#view = view;\n    this.requestUpdate();\n  }\n\n  override performUpdate(): void {\n    this.#view(\n        {\n          endpoints: this.endpoints,\n        },\n        undefined, this.contentElement);\n  }\n}\n"]}