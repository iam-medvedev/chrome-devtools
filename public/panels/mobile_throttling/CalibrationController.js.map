{"version":3,"file":"CalibrationController.js","sourceRoot":"","sources":["../../../../../../front_end/panels/mobile_throttling/CalibrationController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nconst UIStrings = {\n  /**\n   *@description Text to display to user while a calibration process is running.\n   */\n  runningCalibration: 'Running CPU calibration, please do not leave this tab or close DevTools.',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/CalibrationController.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * How long each iteration of the Lighthouse BenchmarkIndex benchmark runs for.\n * This benchmark runs multiple times throughout the calibration process.\n *\n * The entire calibration process has an upper-bound of running the benchmark 20 times:\n *   - 1 to \"warm up\" v8\n *   - 1 to check if device is powerful enough\n *   - up to 9 for each preset (uses bisect, so likely to be fewer)\n *\n * Therefore, the maxium duration for the calibration is 5 seconds.\n */\nconst benchmarkDurationMs = 250;\n\n/**\n * The benchmark score of a mid-tier device (like a Pixel 5).\n */\nconst midScore = 1000;\n\n/**\n * The benchmark score of a low-tier device (like a Moto G4 Power 2022).\n */\nconst lowScore = 264;\n\nfunction truncate(n: number): number {\n  return Number(n.toFixed(2));\n}\n\n/**\n * Runs a calibration process to determine ideal CPU throttling rates to target a low-tier and mid-tier device.\n *\n * Utilizes a benchmark from Lighthouse (LH BenchmarkIndex) to assess performance. This CPU benchmark serves as\n * a simple alias for device performance - but since results aren't exactly linear with clock speed a \"bisect\"\n * is run to find the ideal DevTools CPU throttling rate to recieve the same results on the benchmark.\n *\n * @see go/cpq:adaptive-throttling\n * @see https://github.com/connorjclark/devtools-throttling-benchmarks/blob/main/calibrate.js\n */\nexport class CalibrationController {\n  #runtimeModel!: SDK.RuntimeModel.RuntimeModel;\n  #emulationModel!: SDK.EmulationModel.EmulationModel;\n  #originalUrl!: string;\n  #result?: SDK.CPUThrottlingManager.CalibratedCPUThrottling;\n  #state: 'idle'|'running'|'aborting' = 'idle';\n\n  /**\n   * The provided `benchmarkDuration` is how long each iteration of the Lighthouse BenchmarkIndex\n   * benchmark takes to run. This benchmark will run multiple times throughout the calibration process.\n   */\n  async start(): Promise<boolean> {\n    const primaryPageTarget = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    if (!primaryPageTarget) {\n      return false;\n    }\n\n    const runtimeModel = primaryPageTarget.model(SDK.RuntimeModel.RuntimeModel);\n    const emulationModel = primaryPageTarget.model(SDK.EmulationModel.EmulationModel);\n    if (!runtimeModel || !emulationModel) {\n      return false;\n    }\n\n    this.#state = 'running';\n    this.#runtimeModel = runtimeModel;\n    this.#emulationModel = emulationModel;\n    this.#originalUrl = primaryPageTarget.inspectedURL();\n\n    function setupTestPage(text: string): void {\n      const textEl = document.createElement('span');\n      textEl.textContent = text;\n\n      document.body.append(textEl);\n      document.body.style.cssText = `\n        font-family: system-ui, sans-serif;\n        height: 100vh;\n        margin: 0;\n        background-color: antiquewhite;\n        font-size: 18px;\n        text-align: center;\n\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n      `;\n\n      const moonEl = document.createElement('span');\n      document.body.append(moonEl);\n      moonEl.id = 'moon';\n      moonEl.textContent = '🌑';\n      moonEl.style.cssText = 'font-size: 5em';\n    }\n\n    await primaryPageTarget.pageAgent().invoke_navigate({url: 'about:blank'});\n\n    await runtimeModel.agent.invoke_evaluate({\n      expression: `\n          (${setupTestPage})(${JSON.stringify(i18nString(UIStrings.runningCalibration))});\n\n          window.runBenchmark = () => {\n            window.runs = window.runs ?? 0;\n            moon.textContent = ['🌑', '🌒', '🌓', '🌔', '🌕', '🌖', '🌗', '🌘'][window.runs++ % 8];\n            return (${computeBenchmarkIndex})(${benchmarkDurationMs});\n          }`,\n    });\n\n    // Warm up - give v8 a change to optimize.\n    await this.#benchmark();\n\n    return true;\n  }\n\n  async #throttle(rate: number): Promise<void> {\n    if (this.#state !== 'running') {\n      this.#result = undefined;\n      throw new Error('Calibration has been canceled');\n    }\n\n    await this.#emulationModel.setCPUThrottlingRate(rate);\n  }\n\n  async #benchmark(): Promise<number> {\n    if (this.#state !== 'running') {\n      this.#result = undefined;\n      throw new Error('Calibration has been canceled');\n    }\n\n    const {result} = await this.#runtimeModel.agent.invoke_evaluate({\n      expression: 'runBenchmark()',\n    });\n    if (!Number.isFinite(result.value)) {\n      let err = `unexpected score from benchmark: ${result.value}`;\n      if (result.description) {\n        err += `\\n${result.description}`;\n      }\n      throw new Error(err);\n    }\n    return result.value;\n  }\n\n  async * iterator(): AsyncGenerator<{progress: number}, void> {\n    const controller = this;\n\n    let isHalfwayDone = false;\n    yield {progress: 0};\n\n    const scoreCache = new Map<number, number>();\n    async function run(rate: number): Promise<number> {\n      const cached = scoreCache.get(rate);\n      if (cached !== undefined) {\n        return cached;\n      }\n\n      await controller.#throttle(rate);\n      const score = await controller.#benchmark();\n      scoreCache.set(rate, score);\n      return score;\n    }\n\n    /**\n     * Perform a binary bisect to find a CPU rate that results in the benchmark closely matching the target score.\n     */\n    async function*\n        find(target: number, lowerRate: number, upperRate: number): AsyncGenerator<{progress: number}, number> {\n      const lower = {rate: lowerRate, score: await run(lowerRate)};\n      const upper = {rate: upperRate, score: await run(upperRate)};\n\n      let rate = 0;\n      let iterations = 0;\n      const maxIterations = 8;\n      while (iterations++ < maxIterations) {\n        // The throttling agent backend truncates values to the hundredths place (aka 1%).\n        rate = truncate((upper.rate + lower.rate) / 2);\n        const score = await run(rate);\n\n        // Within 10 points is close enough for a match.\n        if (Math.abs(target - score) < 10) {\n          break;\n        }\n\n        if (score < target) {\n          upper.rate = rate;\n          upper.score = score;\n        } else {\n          lower.rate = rate;\n          lower.score = score;\n        }\n\n        yield {progress: iterations / maxIterations / 2 + (isHalfwayDone ? 0.5 : 0)};\n      }\n\n      return truncate(rate);\n    }\n\n    this.#result = {};\n\n    // Check if developer's device is weaker than the target devices.\n    let actualScore = await run(1);\n    if (actualScore < midScore) {\n      // Give it one more chance ...\n      scoreCache.clear();\n      actualScore = await run(1);\n      if (actualScore < midScore) {\n        if (actualScore < lowScore) {\n          this.#result = {\n            low: SDK.CPUThrottlingManager.CalibrationError.DEVICE_TOO_WEAK,\n            mid: SDK.CPUThrottlingManager.CalibrationError.DEVICE_TOO_WEAK,\n          };\n          return;\n        }\n\n        // Can still emulate the low-end device.\n        this.#result = {mid: SDK.CPUThrottlingManager.CalibrationError.DEVICE_TOO_WEAK};\n        isHalfwayDone = true;\n      }\n    }\n\n    const initialLowerRate = 1;\n    const initialUpperRate = actualScore / lowScore * 1.5;\n\n    const low = yield* find(lowScore, initialLowerRate, initialUpperRate);\n    this.#result.low = low;\n\n    if (!this.#result.mid) {\n      isHalfwayDone = true;\n      yield {progress: 0.5};\n\n      // \"bootstrap\" the bisect by using the results for the low-tier calibration.\n      const midToLowRatio = midScore / lowScore;\n      const r = low / midToLowRatio;\n      const mid = yield* find(midScore, r - r / 4, r + r / 4);\n      this.#result.mid = mid;\n    }\n\n    yield {progress: 1};\n  }\n\n  abort(): void {\n    if (this.#state === 'running') {\n      this.#state = 'aborting';\n    }\n  }\n\n  result(): SDK.CPUThrottlingManager.CalibratedCPUThrottling|undefined {\n    return this.#result;\n  }\n\n  async end(): Promise<void> {\n    if (this.#state === 'idle') {\n      return;\n    }\n\n    this.#state = 'idle';\n\n    if (this.#originalUrl.startsWith('chrome://')) {\n      await this.#runtimeModel.agent.invoke_evaluate({\n        expression: 'history.back()',\n      });\n    } else {\n      await this.#runtimeModel.agent.invoke_evaluate({\n        expression: `window.location.href = ${JSON.stringify(this.#originalUrl)}`,\n      });\n    }\n  }\n}\n\n/**\n * Lifted from Lighthouse.\n *\n * Computes a memory/CPU performance benchmark index to determine rough device class.\n * @see https://github.com/GoogleChrome/lighthouse/issues/9085\n * @see https://docs.google.com/spreadsheets/d/1E0gZwKsxegudkjJl8Fki_sOwHKpqgXwt8aBAfuUaB8A/edit?usp=sharing\n *\n * Historically (until LH 6.3), this benchmark created a string of length 100,000 in a loop, and returned\n * the number of times per second the string can be created.\n *\n * Changes to v8 in 8.6.106 changed this number and also made Chrome more variable w.r.t GC interupts.\n * This benchmark now is a hybrid of a similar GC-heavy approach to the original benchmark and an array\n * copy benchmark.\n *\n * As of Chrome m86...\n *\n *  - 1000+ is a desktop-class device, Core i3 PC, iPhone X, etc\n *  - 800+ is a high-end Android phone, Galaxy S8, low-end Chromebook, etc\n *  - 125+ is a mid-tier Android phone, Moto G4, etc\n *  - <125 is a budget Android phone, Alcatel Ideal, Galaxy J2, etc\n * @return {number}\n */\nfunction computeBenchmarkIndex(duration = 1000): number {\n  const halfTime = duration / 2;\n\n  /**\n   * The GC-heavy benchmark that creates a string of length 10000 in a loop.\n   * The returned index is the number of times per second the string can be created divided by 10.\n   * The division by 10 is to keep similar magnitudes to an earlier version of BenchmarkIndex that\n   * used a string length of 100000 instead of 10000.\n   */\n  function benchmarkIndexGC(): number {\n    const start = Date.now();\n    let iterations = 0;\n\n    while (Date.now() - start < halfTime) {\n      let s = '';\n      for (let j = 0; j < 10000; j++) {\n        s += 'a';\n      }\n      if (s.length === 1) {\n        throw new Error('will never happen, but prevents compiler optimizations');\n      }\n\n      iterations++;\n    }\n\n    const durationInSeconds = (Date.now() - start) / 1000;\n    return Math.round(iterations / 10 / durationInSeconds);\n  }\n\n  /**\n   * The non-GC-dependent benchmark that copies integers back and forth between two arrays of length 100000.\n   * The returned index is the number of times per second a copy can be made, divided by 10.\n   * The division by 10 is to keep similar magnitudes to the GC-dependent version.\n   */\n  function benchmarkIndexNoGC(): number {\n    const arrA = [];\n    const arrB = [];\n    for (let i = 0; i < 100000; i++) {\n      arrA[i] = arrB[i] = i;\n    }\n\n    const start = Date.now();\n    let iterations = 0;\n\n    // Some Intel CPUs have a performance cliff due to unlucky JCC instruction alignment.\n    // Two possible fixes: call Date.now less often, or manually unroll the inner loop a bit.\n    // We'll call Date.now less and only check the duration on every 10th iteration for simplicity.\n    // See https://bugs.chromium.org/p/v8/issues/detail?id=10954#c1.\n    while (iterations % 10 !== 0 || Date.now() - start < halfTime) {\n      const src = iterations % 2 === 0 ? arrA : arrB;\n      const tgt = iterations % 2 === 0 ? arrB : arrA;\n\n      for (let j = 0; j < src.length; j++) {\n        tgt[j] = src[j];\n      }\n\n      iterations++;\n    }\n\n    const durationInSeconds = (Date.now() - start) / 1000;\n    return Math.round(iterations / 10 / durationInSeconds);\n  }\n\n  // The final BenchmarkIndex is a simple average of the two components.\n  return (benchmarkIndexGC() + benchmarkIndexNoGC()) / 2;\n}\n"]}