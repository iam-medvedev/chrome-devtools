{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/mobile_throttling/ThrottlingPresets.ts", "../../../../../../front_end/panels/mobile_throttling/MobileThrottlingSelector.ts", "../../../../../../front_end/panels/mobile_throttling/ThrottlingManager.ts", "../../../../../../front_end/panels/mobile_throttling/NetworkPanelIndicator.ts", "../../../../../../front_end/panels/mobile_throttling/NetworkThrottlingSelector.ts", "../../../../../../front_end/panels/mobile_throttling/ThrottlingSettingsTab.ts", "../../../../../../front_end/panels/mobile_throttling/CalibrationController.ts", "throttlingSettingsTab.css.js"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nconst UIStrings = {\n  /**\n   * @description Text for no network throttling\n   */\n  noThrottling: 'No CPU and no network throttling',\n  /**\n   * @description Text in Throttling Presets of the Network panel\n   */\n  noInternetConnectivity: 'No internet connectivity',\n  /**\n   * @description Text in Throttling Presets of the Network panel\n   */\n  lowTierMobile: 'Low-tier mobile',\n  /**\n   * @description Text in Throttling Presets of the Network panel\n   */\n  slowGXCpuSlowdown: 'Slow 3G & 6x CPU slowdown',\n  /**\n   * @description Text in Throttling Presets of the Network panel\n   * @example {2.2} PH1\n   */\n  slowGXCpuSlowdownCalibrated: 'Slow 3G & {PH1}x CPU slowdown',\n  /**\n   * @description Text in Throttling Presets of the Network panel\n   */\n  midtierMobile: 'Mid-tier mobile',\n  /**\n   * @description Text in Throttling Presets of the Network panel\n   */\n  fastGXCpuSlowdown: 'Fast 3G & 4x CPU slowdown',\n  /**\n   * @description Text in Throttling Presets of the Network panel\n   * @example {2.2} PH1\n   */\n  fastGXCpuSlowdownCalibrated: 'Fast 3G & {PH1}x CPU slowdown',\n  /**\n   * @description Text in Network Throttling Selector of the Network panel\n   */\n  custom: 'Custom',\n  /**\n   * @description Text in Throttling Presets of the Network panel\n   */\n  checkNetworkAndPerformancePanels: 'Check Network and Performance panels',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/ThrottlingPresets.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ThrottlingPresets {\n  static getNoThrottlingConditions(): Conditions {\n    const title = typeof SDK.NetworkManager.NoThrottlingConditions.title === 'function' ?\n        SDK.NetworkManager.NoThrottlingConditions.title() :\n        SDK.NetworkManager.NoThrottlingConditions.title;\n    return {\n      title,\n      description: i18nString(UIStrings.noThrottling),\n      network: SDK.NetworkManager.NoThrottlingConditions,\n      cpuThrottlingOption: SDK.CPUThrottlingManager.NoThrottlingOption,\n      jslogContext: 'no-throttling',\n    };\n  }\n\n  static getOfflineConditions(): Conditions {\n    const title = typeof SDK.NetworkManager.OfflineConditions.title === 'function' ?\n        SDK.NetworkManager.OfflineConditions.title() :\n        SDK.NetworkManager.OfflineConditions.title;\n    return {\n      title,\n      description: i18nString(UIStrings.noInternetConnectivity),\n      network: SDK.NetworkManager.OfflineConditions,\n      cpuThrottlingOption: SDK.CPUThrottlingManager.NoThrottlingOption,\n      jslogContext: 'offline',\n    };\n  }\n\n  static getLowEndMobileConditions(): Conditions {\n    const useCalibrated = SDK.CPUThrottlingManager.CalibratedLowTierMobileThrottlingOption.rate() !== 0;\n    const cpuThrottlingOption = useCalibrated ? SDK.CPUThrottlingManager.CalibratedLowTierMobileThrottlingOption :\n                                                SDK.CPUThrottlingManager.LowTierThrottlingOption;\n    const description = useCalibrated ?\n        i18nString(UIStrings.slowGXCpuSlowdownCalibrated, {PH1: cpuThrottlingOption.rate()}) :\n        i18nString(UIStrings.slowGXCpuSlowdown);\n\n    return {\n      title: i18nString(UIStrings.lowTierMobile),\n      description,\n      network: SDK.NetworkManager.Slow3GConditions,\n      cpuThrottlingOption,\n      jslogContext: 'low-end-mobile',\n    };\n  }\n\n  static getMidTierMobileConditions(): Conditions {\n    const useCalibrated = SDK.CPUThrottlingManager.CalibratedMidTierMobileThrottlingOption.rate() !== 0;\n    const cpuThrottlingOption = useCalibrated ? SDK.CPUThrottlingManager.CalibratedMidTierMobileThrottlingOption :\n                                                SDK.CPUThrottlingManager.MidTierThrottlingOption;\n    const description = useCalibrated ?\n        i18nString(UIStrings.fastGXCpuSlowdownCalibrated, {PH1: cpuThrottlingOption.rate()}) :\n        i18nString(UIStrings.fastGXCpuSlowdown);\n\n    return {\n      title: i18nString(UIStrings.midtierMobile),\n      description,\n      network: SDK.NetworkManager.Slow4GConditions,\n      cpuThrottlingOption,\n      jslogContext: 'mid-tier-mobile',\n    };\n  }\n\n  static getCustomConditions(): PlaceholderConditions {\n    return {\n      title: i18nString(UIStrings.custom),\n      description: i18nString(UIStrings.checkNetworkAndPerformancePanels),\n      jslogContext: 'custom',\n    };\n  }\n\n  static getMobilePresets(): Array<Conditions|PlaceholderConditions> {\n    return [\n      ThrottlingPresets.getMidTierMobileConditions(),\n      ThrottlingPresets.getLowEndMobileConditions(),\n      ThrottlingPresets.getCustomConditions(),\n    ];\n  }\n\n  static getAdvancedMobilePresets(): Conditions[] {\n    return [\n      ThrottlingPresets.getOfflineConditions(),\n    ];\n  }\n\n  static networkPresets: SDK.NetworkManager.Conditions[] = [\n    SDK.NetworkManager.Fast4GConditions,\n    SDK.NetworkManager.Slow4GConditions,\n    SDK.NetworkManager.Slow3GConditions,\n    SDK.NetworkManager.OfflineConditions,\n  ];\n\n  static cpuThrottlingPresets: SDK.CPUThrottlingManager.CPUThrottlingOption[] = [\n    SDK.CPUThrottlingManager.NoThrottlingOption,\n    SDK.CPUThrottlingManager.MidTierThrottlingOption,\n    SDK.CPUThrottlingManager.LowTierThrottlingOption,\n    SDK.CPUThrottlingManager.ExtraSlowThrottlingOption,\n    SDK.CPUThrottlingManager.CalibratedLowTierMobileThrottlingOption,\n    SDK.CPUThrottlingManager.CalibratedMidTierMobileThrottlingOption,\n  ];\n}\n\n// @ts-expect-error exported for Tests.js\nglobalThis.MobileThrottling = globalThis.MobileThrottling || {};\n// @ts-expect-error exported for Tests.js\nglobalThis.MobileThrottling.networkPresets = ThrottlingPresets.networkPresets;\n\nexport interface Conditions {\n  title: string;\n  description: string;\n  network: SDK.NetworkManager.Conditions;\n  cpuThrottlingOption: SDK.CPUThrottlingManager.CPUThrottlingOption;\n  jslogContext?: string;\n}\n\nexport interface NetworkThrottlingConditionsGroup {\n  title: string;\n  items: SDK.NetworkManager.Conditions[];\n}\n\nexport interface MobileThrottlingConditionsGroup {\n  title: string;\n  items: Array<Conditions|PlaceholderConditions>;\n}\n\nexport type ConditionsList = Array<Conditions|PlaceholderConditions|null>;\n\nexport interface PlaceholderConditions {\n  title: string;\n  description: string;\n  jslogContext?: string;\n}\n", "// Copyright 2017 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nimport {throttlingManager} from './ThrottlingManager.js';\nimport {\n  ThrottlingPresets,\n  type Conditions,\n  type ConditionsList,\n  type MobileThrottlingConditionsGroup,\n} from './ThrottlingPresets.js';\n\nconst UIStrings = {\n  /**\n   * @description Mobile throttling is disabled. The user can select this option to run mobile\n   *emulation at a normal speed instead of throttled.\n   */\n  disabled: 'Disabled',\n  /**\n   * @description Title for a group of pre-decided configuration options for mobile throttling. These\n   *are useful default options that users might want.\n   */\n  presets: 'Presets',\n  /**\n   * @description Title for a group of advanced configuration options for mobile throttling, which\n   *might not be applicable to every user or situation.\n   */\n  advanced: 'Advanced',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/MobileThrottlingSelector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class MobileThrottlingSelector {\n  private readonly populateCallback: (arg0: MobileThrottlingConditionsGroup[]) => ConditionsList;\n  private readonly selectCallback: (arg0: number) => void;\n  private readonly options: ConditionsList;\n\n  constructor(\n      populateCallback: (arg0: MobileThrottlingConditionsGroup[]) => ConditionsList,\n      selectCallback: (arg0: number) => void) {\n    this.populateCallback = populateCallback;\n    this.selectCallback = selectCallback;\n    SDK.CPUThrottlingManager.CPUThrottlingManager.instance().addEventListener(\n        SDK.CPUThrottlingManager.Events.RATE_CHANGED, this.conditionsChanged, this);\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.CONDITIONS_CHANGED, this.conditionsChanged, this);\n    this.options = this.populateOptions();\n    this.conditionsChanged();\n  }\n\n  optionSelected(conditions: Conditions): void {\n    SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(conditions.network);\n    throttlingManager().setCPUThrottlingOption(conditions.cpuThrottlingOption);\n  }\n\n  private populateOptions(): ConditionsList {\n    const disabledGroup = {\n      title: i18nString(UIStrings.disabled),\n      items: [ThrottlingPresets.getNoThrottlingConditions()],\n    };\n    const presetsGroup = {title: i18nString(UIStrings.presets), items: ThrottlingPresets.getMobilePresets()};\n    const advancedGroup = {title: i18nString(UIStrings.advanced), items: ThrottlingPresets.getAdvancedMobilePresets()};\n    return this.populateCallback([disabledGroup, presetsGroup, advancedGroup]);\n  }\n\n  private conditionsChanged(): void {\n    this.populateOptions();\n\n    const networkConditions = SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions();\n    const cpuThrottlingOption = SDK.CPUThrottlingManager.CPUThrottlingManager.instance().cpuThrottlingOption();\n    for (let index = 0; index < this.options.length; ++index) {\n      const option = this.options[index];\n      if (option && 'network' in option && option.network === networkConditions &&\n          option.cpuThrottlingOption === cpuThrottlingOption) {\n        this.selectCallback(index);\n        return;\n      }\n    }\n\n    const customConditions = ThrottlingPresets.getCustomConditions();\n    for (let index = 0; index < this.options.length; ++index) {\n      const item = this.options[index];\n      if (item && item.title === customConditions.title && item.description === customConditions.description) {\n        this.selectCallback(index);\n        return;\n      }\n    }\n  }\n}\n", "// Copyright 2017 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {MobileThrottlingSelector} from './MobileThrottlingSelector.js';\nimport {\n  type Conditions,\n  type ConditionsList,\n  type MobileThrottlingConditionsGroup,\n  ThrottlingPresets,\n} from './ThrottlingPresets.js';\n\nexport interface CPUThrottlingSelectorWrapper {\n  control: UI.Toolbar.ToolbarComboBox;\n  updateRecommendedOption(recommendedOption: SDK.CPUThrottlingManager.CPUThrottlingOption|null): void;\n}\n\nconst UIStrings = {\n  /**\n   *@description Text to indicate the network connectivity is offline\n   */\n  offline: 'Offline',\n  /**\n   *@description Text in Throttling Manager of the Network panel\n   */\n  forceDisconnectedFromNetwork: 'Force disconnected from network',\n  /**\n   * @description Text for throttling the network\n   */\n  throttling: 'Throttling',\n  /**\n   * @description Icon title in Throttling Manager of the Network panel\n   */\n  cpuThrottlingIsEnabled: 'CPU throttling is enabled',\n  /**\n   * @description Screen reader label for a select box that chooses the CPU throttling speed in the Performance panel\n   */\n  cpuThrottling: 'CPU throttling',\n  /**\n   * @description Tooltip text in Throttling Manager of the Performance panel\n   */\n  excessConcurrency: 'Exceeding the default value may degrade system performance.',\n  /**\n   * @description Tooltip text in Throttling Manager of the Performance panel\n   */\n  resetConcurrency: 'Reset to the default value',\n  /**\n   * @description Label for an check box that neables overriding navigator.hardwareConcurrency\n   */\n  hardwareConcurrency: 'Hardware concurrency',\n  /**\n   * @description Tooltip text for an input box that overrides navigator.hardwareConcurrency on the page\n   */\n  hardwareConcurrencySettingLabel: 'Override the value reported by navigator.hardwareConcurrency',\n  /**\n   * @description Text label for a selection box showing that a specific option is recommended for CPU or Network throttling.\n   * @example {Fast 4G} PH1\n   * @example {4x slowdown} PH1\n   */\n  recommendedThrottling: '{PH1} – recommended',\n  /**\n   * @description Text to prompt the user to run the CPU calibration process.\n   */\n  calibrate: 'Calibrate…',\n  /**\n   * @description Text to prompt the user to re-run the CPU calibration process.\n   */\n  recalibrate: 'Recalibrate…',\n  /**\n   * @description Text to indicate Save-Data override is not set.\n   */\n  noSaveDataOverride: '\\'Save-Data\\': default',\n  /**\n   * @description Text to indicate Save-Data override is set to Enabled.\n   */\n  saveDataOn: '\\'Save-Data\\': on',\n  /**\n   * @description Text to indicate Save-Data override is set to Disabled.\n   */\n  saveDataOff: '\\'Save-Data\\': off',\n  /**\n   * @description Tooltip text for an select element that overrides navigator.connection.saveData on the page\n   */\n  saveDataSettingTooltip: 'Override the value reported by navigator.connection.saveData on the page',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/ThrottlingManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet throttlingManagerInstance: ThrottlingManager;\n\nclass PromiseQueue<T> {\n  #promise = Promise.resolve();\n\n  push(promise: Promise<T>): Promise<T> {\n    return new Promise(r => {\n      this.#promise = this.#promise.then(async () => r(await promise));\n    });\n  }\n}\n\nexport class ThrottlingManager extends Common.ObjectWrapper.ObjectWrapper<ThrottlingManager.EventTypes> {\n  private readonly cpuThrottlingControls: Set<UI.Toolbar.ToolbarComboBox>;\n  private readonly cpuThrottlingOptions: SDK.CPUThrottlingManager.CPUThrottlingOption[];\n  private readonly customNetworkConditionsSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions[]>;\n  private readonly currentNetworkThrottlingConditionKeySetting:\n      Common.Settings.Setting<SDK.NetworkManager.ThrottlingConditionKey>;\n  private readonly calibratedCpuThrottlingSetting:\n      Common.Settings.Setting<SDK.CPUThrottlingManager.CalibratedCPUThrottling>;\n  private lastNetworkThrottlingConditions!: SDK.NetworkManager.Conditions;\n  private readonly cpuThrottlingManager: SDK.CPUThrottlingManager.CPUThrottlingManager;\n  #hardwareConcurrencyOverrideEnabled = false;\n  readonly #emulationQueue = new PromiseQueue<void>();\n  get hardwareConcurrencyOverrideEnabled(): boolean {\n    return this.#hardwareConcurrencyOverrideEnabled;\n  }\n\n  private constructor() {\n    super();\n    this.cpuThrottlingManager = SDK.CPUThrottlingManager.CPUThrottlingManager.instance();\n    this.cpuThrottlingManager.addEventListener(\n        SDK.CPUThrottlingManager.Events.RATE_CHANGED,\n        (event: Common.EventTarget.EventTargetEvent<number>) => this.onCPUThrottlingRateChangedOnSDK(event.data));\n    this.cpuThrottlingControls = new Set();\n    this.cpuThrottlingOptions = ThrottlingPresets.cpuThrottlingPresets;\n    this.customNetworkConditionsSetting = SDK.NetworkManager.customUserNetworkConditionsSetting();\n\n    this.currentNetworkThrottlingConditionKeySetting = SDK.NetworkManager.activeNetworkThrottlingKeySetting();\n\n    this.calibratedCpuThrottlingSetting =\n        Common.Settings.Settings.instance().createSetting<SDK.CPUThrottlingManager.CalibratedCPUThrottling>(\n            'calibrated-cpu-throttling', {}, Common.Settings.SettingStorageType.GLOBAL);\n\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.CONDITIONS_CHANGED, () => {\n          this.lastNetworkThrottlingConditions = this.#getCurrentNetworkConditions();\n          const conditions = SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions();\n          this.currentNetworkThrottlingConditionKeySetting.set(conditions.key);\n        });\n\n    if (this.isDirty()) {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(this.#getCurrentNetworkConditions());\n    }\n  }\n\n  #getCurrentNetworkConditions(): SDK.NetworkManager.Conditions {\n    const activeKey = this.currentNetworkThrottlingConditionKeySetting.get();\n    const definition = SDK.NetworkManager.getPredefinedCondition(activeKey);\n    if (definition) {\n      return definition;\n    }\n\n    const custom = this.customNetworkConditionsSetting.get().find(conditions => conditions.key === activeKey);\n\n    // Fall back to NoThrottling if we failed to find a match.\n    return custom ?? SDK.NetworkManager.NoThrottlingConditions;\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): ThrottlingManager {\n    const {forceNew} = opts;\n    if (!throttlingManagerInstance || forceNew) {\n      throttlingManagerInstance = new ThrottlingManager();\n    }\n\n    return throttlingManagerInstance;\n  }\n\n  createOfflineToolbarCheckbox(): UI.Toolbar.ToolbarCheckbox {\n    const checkbox = new UI.Toolbar.ToolbarCheckbox(\n        i18nString(UIStrings.offline), i18nString(UIStrings.forceDisconnectedFromNetwork), forceOffline.bind(this));\n    checkbox.element.setAttribute('jslog', `${VisualLogging.toggle('disconnect-from-network').track({click: true})}`);\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.CONDITIONS_CHANGED, networkConditionsChanged);\n    checkbox.setChecked(SDK.NetworkManager.MultitargetNetworkManager.instance().isOffline());\n\n    function forceOffline(this: ThrottlingManager): void {\n      if (checkbox.checked()) {\n        SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n            SDK.NetworkManager.OfflineConditions);\n      } else {\n        const newConditions =\n            (!this.lastNetworkThrottlingConditions.download && !this.lastNetworkThrottlingConditions.upload) ?\n            SDK.NetworkManager.NoThrottlingConditions :\n            this.lastNetworkThrottlingConditions;\n        SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(newConditions);\n      }\n    }\n\n    function networkConditionsChanged(): void {\n      checkbox.setChecked(SDK.NetworkManager.MultitargetNetworkManager.instance().isOffline());\n    }\n\n    return checkbox;\n  }\n\n  createMobileThrottlingButton(): UI.Toolbar.ToolbarMenuButton {\n    const button = new UI.Toolbar.ToolbarMenuButton(appendItems, undefined, undefined, 'mobile-throttling');\n    button.setTitle(i18nString(UIStrings.throttling));\n    button.setDarkText();\n\n    let options: ConditionsList = [];\n    let selectedIndex = -1;\n    const selector = new MobileThrottlingSelector(populate, select);\n    return button;\n\n    function appendItems(contextMenu: UI.ContextMenu.ContextMenu): void {\n      for (let index = 0; index < options.length; ++index) {\n        const conditions = options[index];\n        if (!conditions) {\n          continue;\n        }\n        if (conditions.title === ThrottlingPresets.getCustomConditions().title &&\n            conditions.description === ThrottlingPresets.getCustomConditions().description) {\n          continue;\n        }\n        contextMenu.defaultSection().appendCheckboxItem(\n            conditions.title, selector.optionSelected.bind(selector, conditions as Conditions),\n            {checked: selectedIndex === index, jslogContext: conditions.jslogContext});\n      }\n    }\n\n    function populate(groups: MobileThrottlingConditionsGroup[]): ConditionsList {\n      options = [];\n      for (const group of groups) {\n        for (const conditions of group.items) {\n          options.push(conditions);\n        }\n        options.push(null);\n      }\n      return options;\n    }\n\n    function select(index: number): void {\n      selectedIndex = index;\n      const option = options[index];\n      if (option) {\n        button.setText(option.title);\n        button.setTitle(`${option.title}: ${option.description}`);\n      }\n    }\n  }\n\n  private updatePanelIcon(): void {\n    const warnings = [];\n    if (this.cpuThrottlingManager.cpuThrottlingRate() !== SDK.CPUThrottlingManager.CPUThrottlingRates.NO_THROTTLING) {\n      warnings.push(i18nString(UIStrings.cpuThrottlingIsEnabled));\n    }\n    UI.InspectorView.InspectorView.instance().setPanelWarnings('timeline', warnings);\n  }\n\n  setCPUThrottlingOption(option: SDK.CPUThrottlingManager.CPUThrottlingOption): void {\n    // This will transitively call onCPUThrottlingRateChangedOnSDK.\n    this.cpuThrottlingManager.setCPUThrottlingOption(option);\n  }\n\n  onCPUThrottlingRateChangedOnSDK(rate: number): void {\n    if (rate !== SDK.CPUThrottlingManager.CPUThrottlingRates.NO_THROTTLING) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.CpuThrottlingEnabled);\n    }\n\n    const index = this.cpuThrottlingOptions.indexOf(this.cpuThrottlingManager.cpuThrottlingOption());\n    for (const control of this.cpuThrottlingControls) {\n      control.setSelectedIndex(index);\n    }\n    this.updatePanelIcon();\n  }\n\n  createCPUThrottlingSelector(): CPUThrottlingSelectorWrapper {\n    const getCalibrationString = (): Common.UIString.LocalizedString => {\n      const value = this.calibratedCpuThrottlingSetting.get();\n      const hasCalibrated = value.low || value.mid;\n      return hasCalibrated ? i18nString(UIStrings.recalibrate) : i18nString(UIStrings.calibrate);\n    };\n\n    const optionSelected = (): void => {\n      if (control.selectedIndex() === control.options().length - 1) {\n        const index = this.cpuThrottlingOptions.indexOf(this.cpuThrottlingManager.cpuThrottlingOption());\n        control.setSelectedIndex(index);\n        void Common.Revealer.reveal(this.calibratedCpuThrottlingSetting);\n      } else {\n        this.setCPUThrottlingOption(this.cpuThrottlingOptions[control.selectedIndex()]);\n      }\n    };\n\n    const control =\n        new UI.Toolbar.ToolbarComboBox(optionSelected, i18nString(UIStrings.cpuThrottling), '', 'cpu-throttling');\n    this.cpuThrottlingControls.add(control);\n    const currentOption = this.cpuThrottlingManager.cpuThrottlingOption();\n\n    const optionEls: HTMLOptionElement[] = [];\n    const options = this.cpuThrottlingOptions;\n\n    for (let i = 0; i < this.cpuThrottlingOptions.length; ++i) {\n      const option = this.cpuThrottlingOptions[i];\n      const title = option.title();\n      const value = option.jslogContext;\n      const optionEl = control.createOption(title, value);\n      control.addOption(optionEl);\n      if (currentOption === option) {\n        control.setSelectedIndex(i);\n      }\n\n      optionEls.push(optionEl);\n    }\n\n    const optionEl = control.createOption(getCalibrationString(), '');\n    control.addOption(optionEl);\n    optionEls.push(optionEl);\n\n    return {\n      control,\n      updateRecommendedOption(recommendedOption: SDK.CPUThrottlingManager.CPUThrottlingOption|null) {\n        for (let i = 0; i < optionEls.length - 1; i++) {\n          const option = options[i];\n          optionEls[i].text = option === recommendedOption ?\n              i18nString(UIStrings.recommendedThrottling, {PH1: option.title()}) :\n              option.title();\n          optionEls[i].disabled = option.rate() === 0;\n        }\n\n        optionEls[optionEls.length - 1].textContent = getCalibrationString();\n      },\n    };\n  }\n\n  createSaveDataOverrideSelector(className?: string): UI.Toolbar.ToolbarComboBox {\n    const reset = new Option(i18nString(UIStrings.noSaveDataOverride), undefined, true, true);\n    const enable = new Option(i18nString(UIStrings.saveDataOn));\n    const disable = new Option(i18nString(UIStrings.saveDataOff));\n    const handler = (e: Event): void => {\n      const select = e.target as HTMLSelectElement;\n      switch (select.selectedOptions.item(0)) {\n        case reset:\n          for (const emulationModel of SDK.TargetManager.TargetManager.instance().models(\n                   SDK.EmulationModel.EmulationModel)) {\n            void this.#emulationQueue.push(\n                emulationModel.setDataSaverOverride(SDK.EmulationModel.DataSaverOverride.UNSET));\n          }\n          break;\n        case enable:\n          for (const emulationModel of SDK.TargetManager.TargetManager.instance().models(\n                   SDK.EmulationModel.EmulationModel)) {\n            void this.#emulationQueue.push(\n                emulationModel.setDataSaverOverride(SDK.EmulationModel.DataSaverOverride.ENABLED));\n          }\n          break;\n        case disable:\n          for (const emulationModel of SDK.TargetManager.TargetManager.instance().models(\n                   SDK.EmulationModel.EmulationModel)) {\n            void this.#emulationQueue.push(\n                emulationModel.setDataSaverOverride(SDK.EmulationModel.DataSaverOverride.DISABLED));\n          }\n          break;\n      }\n      this.dispatchEventToListeners(ThrottlingManager.Events.SAVE_DATA_OVERRIDE_CHANGED, select.selectedIndex);\n    };\n    const select = new UI.Toolbar.ToolbarComboBox(handler, i18nString(UIStrings.saveDataSettingTooltip), className);\n    select.addOption(reset);\n    select.addOption(enable);\n    select.addOption(disable);\n\n    this.addEventListener(\n        ThrottlingManager.Events.SAVE_DATA_OVERRIDE_CHANGED, ({data}) => select.setSelectedIndex(data));\n\n    return select;\n  }\n\n  /** Hardware Concurrency doesn't store state in a setting. */\n  createHardwareConcurrencySelector(): {\n    numericInput: UI.Toolbar.ToolbarItem,\n    reset: UI.Toolbar.ToolbarButton,\n    warning: UI.Toolbar.ToolbarItem,\n    checkbox: UI.UIUtils.CheckboxLabel,\n  } {\n    const numericInput =\n        new UI.Toolbar.ToolbarItem(UI.UIUtils.createInput('devtools-text-input', 'number', 'hardware-concurrency'));\n    numericInput.setTitle(i18nString(UIStrings.hardwareConcurrencySettingLabel));\n    const inputElement = numericInput.element;\n    inputElement.min = '1';\n    numericInput.setEnabled(false);\n\n    const checkbox = UI.UIUtils.CheckboxLabel.create(\n        i18nString(UIStrings.hardwareConcurrency), false, i18nString(UIStrings.hardwareConcurrencySettingLabel),\n        'hardware-concurrency');\n\n    const reset = new UI.Toolbar.ToolbarButton('Reset concurrency', 'undo', undefined, 'hardware-concurrency-reset');\n    reset.setTitle(i18nString(UIStrings.resetConcurrency));\n    const icon = new IconButton.Icon.Icon();\n    icon.name = 'warning-filled';\n    icon.classList.add('small');\n    const warning = new UI.Toolbar.ToolbarItem(icon);\n    warning.setTitle(i18nString(UIStrings.excessConcurrency));\n\n    checkbox.disabled = true;  // Prevent modification while still wiring things up asynchronously below\n    reset.element.classList.add('concurrency-hidden');\n    warning.element.classList.add('concurrency-hidden');\n\n    void this.cpuThrottlingManager.getHardwareConcurrency().then(defaultValue => {\n      if (defaultValue === undefined) {\n        return;\n      }\n\n      const setHardwareConcurrency = (value: number): void => {\n        if (value >= 1) {\n          this.cpuThrottlingManager.setHardwareConcurrency(value);\n        }\n        if (value > defaultValue) {\n          warning.element.classList.remove('concurrency-hidden');\n        } else {\n          warning.element.classList.add('concurrency-hidden');\n        }\n        if (value === defaultValue) {\n          reset.element.classList.add('concurrency-hidden');\n        } else {\n          reset.element.classList.remove('concurrency-hidden');\n        }\n      };\n\n      inputElement.value = `${defaultValue}`;\n      inputElement.oninput = () => setHardwareConcurrency(Number(inputElement.value));\n      checkbox.disabled = false;\n      checkbox.addEventListener('change', () => {\n        this.#hardwareConcurrencyOverrideEnabled = checkbox.checked;\n\n        numericInput.setEnabled(this.hardwareConcurrencyOverrideEnabled);\n        setHardwareConcurrency(this.hardwareConcurrencyOverrideEnabled ? Number(inputElement.value) : defaultValue);\n      });\n\n      reset.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, () => {\n        inputElement.value = `${defaultValue}`;\n        setHardwareConcurrency(defaultValue);\n      });\n    });\n\n    return {numericInput, reset, warning, checkbox};\n  }\n\n  setHardwareConcurrency(concurrency: number): void {\n    this.cpuThrottlingManager.setHardwareConcurrency(concurrency);\n  }\n\n  private isDirty(): boolean {\n    const networkConditions = SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions();\n    const knownCurrentConditions = this.#getCurrentNetworkConditions();\n    return !SDK.NetworkManager.networkConditionsEqual(networkConditions, knownCurrentConditions);\n  }\n}\n\nexport namespace ThrottlingManager {\n  export const enum Events {\n    SAVE_DATA_OVERRIDE_CHANGED = 'SaveDataOverrideChanged',\n  }\n\n  export interface EventTypes {\n    [Events.SAVE_DATA_OVERRIDE_CHANGED]: number;\n  }\n}\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(_context: UI.Context.Context, actionId: string): boolean {\n    if (actionId === 'network-conditions.network-online') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n          SDK.NetworkManager.NoThrottlingConditions);\n      return true;\n    }\n    if (actionId === 'network-conditions.network-low-end-mobile') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(SDK.NetworkManager.Slow3GConditions);\n      return true;\n    }\n    if (actionId === 'network-conditions.network-mid-tier-mobile') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(SDK.NetworkManager.Slow4GConditions);\n      return true;\n    }\n    if (actionId === 'network-conditions.network-offline') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n          SDK.NetworkManager.OfflineConditions);\n      return true;\n    }\n    return false;\n  }\n}\n\nexport function throttlingManager(): ThrottlingManager {\n  return ThrottlingManager.instance();\n}\n", "// Copyright 2017 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n   * @description Icon title in Network Panel Indicator of the Network panel\n   */\n  networkThrottlingIsEnabled: 'Network throttling is enabled',\n  /**\n   * @description Icon title in Network Panel Indicator of the Network panel\n   */\n  requestsMayBeOverridden: 'Requests may be overridden locally, see the Sources panel',\n  /**\n   * @description Icon title in Network Panel Indicator of the Network panel\n   */\n  requestsMayBeBlocked: 'Requests may be blocked, see the Network request blocking panel',\n  /**\n   * @description Title of an icon in the Network panel that indicates that accepted content encodings have been overridden.\n   */\n  acceptedEncodingOverrideSet:\n      'The set of accepted `Content-Encoding` headers has been modified by DevTools, see the Network conditions panel',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/NetworkPanelIndicator.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class NetworkPanelIndicator {\n  constructor() {\n    // TODO: we should not access network from other modules.\n    if (!UI.InspectorView.InspectorView.instance().hasPanel('network')) {\n      return;\n    }\n    const manager = SDK.NetworkManager.MultitargetNetworkManager.instance();\n    manager.addEventListener(SDK.NetworkManager.MultitargetNetworkManager.Events.CONDITIONS_CHANGED, updateVisibility);\n    manager.addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.BLOCKED_PATTERNS_CHANGED, updateVisibility);\n    manager.addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.INTERCEPTORS_CHANGED, updateVisibility);\n    manager.addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.ACCEPTED_ENCODINGS_CHANGED, updateVisibility);\n    Common.Settings.Settings.instance().moduleSetting('cache-disabled').addChangeListener(updateVisibility, this);\n\n    updateVisibility();\n\n    function updateVisibility(): void {\n      const warnings = [];\n      if (manager.isThrottling()) {\n        warnings.push(i18nString(UIStrings.networkThrottlingIsEnabled));\n      }\n      if (SDK.NetworkManager.MultitargetNetworkManager.instance().isIntercepting()) {\n        warnings.push(i18nString(UIStrings.requestsMayBeOverridden));\n      }\n      if (manager.isBlocking()) {\n        warnings.push(i18nString(UIStrings.requestsMayBeBlocked));\n      }\n      if (manager.isAcceptedEncodingOverrideSet()) {\n        warnings.push(i18nString(UIStrings.acceptedEncodingOverrideSet));\n      }\n      UI.InspectorView.InspectorView.instance().setPanelWarnings('network', warnings);\n    }\n  }\n}\n", "// Copyright 2017 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Badges from '../../models/badges/badges.js';\nimport * as Lit from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {ThrottlingManager} from './ThrottlingManager.js';\nimport {type NetworkThrottlingConditionsGroup, ThrottlingPresets} from './ThrottlingPresets.js';\n\nconst {render, html, Directives} = Lit;\n\nconst UIStrings = {\n  /**\n   * @description Text to indicate something is not enabled\n   */\n  disabled: 'Disabled',\n  /**\n   * @description Title for a group of configuration options\n   */\n  presets: 'Presets',\n  /**\n   * @description Text in Network Throttling Selector of the Network panel\n   */\n  custom: 'Custom',\n  /**\n   *@description Text with two placeholders separated by a colon\n   *@example {Node removed} PH1\n   *@example {div#id1} PH2\n   */\n  sS: '{PH1}: {PH2}',\n  /**\n   *@description Accessibility label for custom add network throttling option\n   *@example {Custom} PH1\n   */\n  addS: 'Add {PH1}',\n  /**\n   *@description Text in Throttling Manager of the Network panel\n   */\n  add: 'Add…',\n  /**\n   * @description Text label for a selection box showing that a specific option is recommended for CPU or Network throttling.\n   * @example {Fast 4G} PH1\n   * @example {4x slowdown} PH1\n   */\n  recommendedThrottling: '{PH1} – recommended',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/NetworkThrottlingSelector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface ViewInput {\n  recommendedConditions: SDK.NetworkManager.Conditions|null;\n  selectedConditions: SDK.NetworkManager.Conditions;\n  throttlingGroups: NetworkThrottlingConditionsGroup[];\n  customConditionsGroup: NetworkThrottlingConditionsGroup;\n  jslogContext: string;\n  title: string;\n  onSelect: (conditions: SDK.NetworkManager.Conditions) => void;\n  onAddCustomConditions: () => void;\n}\nexport type ViewFunction = (input: ViewInput, output: object, target: HTMLElement) => void;\n\nexport const DEFAULT_VIEW: ViewFunction = (input, output, target) => {\n  // The title is usually an i18nLazyString except for custom values that are stored in the local storage in the form of a string.\n  const title = (conditions: SDK.NetworkManager.Conditions): string =>\n      typeof conditions.title === 'function' ? conditions.title() : conditions.title;\n  const jslog = (group: NetworkThrottlingConditionsGroup, condition: SDK.NetworkManager.Conditions): string =>\n      `${VisualLogging.item(Platform.StringUtilities.toKebabCase(condition.i18nTitleKey || title(condition))).track({\n        click: true\n      })}`;\n  const optionsMap = new WeakMap<HTMLOptionElement, SDK.NetworkManager.Conditions>();\n  let selectedConditions = input.selectedConditions;\n  function onSelect(event: Event): void {\n    const element = (event.target as HTMLSelectElement | null);\n    if (!element) {\n      return;\n    }\n    const option = element.selectedOptions[0];\n    if (!option) {\n      return;\n    }\n    if (option === element.options[element.options.length - 1]) {\n      input.onAddCustomConditions();\n      event.consume(true);\n      element.value = title(selectedConditions);\n    } else {\n      const conditions = optionsMap.get(option);\n      if (conditions) {\n        selectedConditions = conditions;\n        input.onSelect(conditions);\n      }\n    }\n  }\n  render(\n      // clang-format off\n    html`<select\n      aria-label=${input.title}\n      jslog=${VisualLogging.dropDown().track({change: true}).context(input.jslogContext)}\n      @change=${onSelect}>\n          ${input.throttlingGroups.map(\n          group =>\n          html`<optgroup\n            label=${group.title}>\n            ${group.items.map(condition => html`<option\n              ${Directives.ref(option => option && optionsMap.set(option as HTMLOptionElement, condition))}\n              ?selected=${SDK.NetworkManager.networkConditionsEqual(condition, selectedConditions)}\n              value=${title(condition)}\n              aria-label=${i18nString(UIStrings.sS, {PH1: group.title, PH2: title(condition)})}\n              jslog=${jslog(group, condition)}>\n                ${condition === input.recommendedConditions ?\n                  i18nString(UIStrings.recommendedThrottling, {PH1: title(condition)}):\n                  title(condition)}\n            </option>`)}\n        </optgroup>`)}\n        <optgroup label=${input.customConditionsGroup.title}>\n          ${input.customConditionsGroup.items.map(condition => html`<option\n              ${Directives.ref(option => option && optionsMap.set(option as HTMLOptionElement, condition))}\n              ?selected=${SDK.NetworkManager.networkConditionsEqual(condition, selectedConditions)}\n              value=${title(condition)}\n              aria-label=${i18nString(UIStrings.sS, {PH1: input.customConditionsGroup.title, PH2: title(condition)})}\n              jslog=${VisualLogging.item('custom-network-throttling-item').track({click: true})}>\n                ${condition === input.recommendedConditions ?\n                  i18nString(UIStrings.recommendedThrottling, {PH1: title(condition)}):\n                  title(condition)}\n          </option>`)}\n          <option\n            value=${i18nString(UIStrings.add)}\n            aria-label=${i18nString(UIStrings.addS, {PH1: input.customConditionsGroup.title})}\n            jslog=${VisualLogging.action('add').track({click: true})}>\n              ${i18nString(UIStrings.add)}\n          </option>\n        </optgroup>\n      </select>`,  // clang-format on\n      target);\n};\n\nexport const enum Events {\n  CONDITIONS_CHANGED = 'conditionsChanged',\n}\n\nexport interface EventTypes {\n  [Events.CONDITIONS_CHANGED]: SDK.NetworkManager.Conditions;\n}\n\nexport class NetworkThrottlingSelect extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #recommendedConditions: SDK.NetworkManager.Conditions|null = null;\n  readonly #element: HTMLElement;\n  readonly #jslogContext: string;\n  #currentConditions: SDK.NetworkManager.Conditions;\n  readonly #title: string;\n  readonly #view: ViewFunction;\n\n  static createForGlobalConditions(element: HTMLElement, title: string): NetworkThrottlingSelect {\n    ThrottlingManager.instance();  // Instantiate the throttling manager to connect network manager with the setting\n    const select = new NetworkThrottlingSelect(\n        element, title, SDK.NetworkManager.activeNetworkThrottlingKeySetting().name,\n        SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions());\n    select.addEventListener(\n        Events.CONDITIONS_CHANGED,\n        ev => SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(ev.data));\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.CONDITIONS_CHANGED, () => {\n          select.currentConditions = SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions();\n        });\n    return select;\n  }\n\n  constructor(\n      element: HTMLElement, title: string, jslogContext: string, currentConditions: SDK.NetworkManager.Conditions,\n      view = DEFAULT_VIEW) {\n    super();\n    SDK.NetworkManager.customUserNetworkConditionsSetting().addChangeListener(this.#performUpdate, this);\n    this.#element = element;\n    this.#jslogContext = jslogContext;\n    this.#currentConditions = currentConditions;\n    this.#title = title;\n    this.#view = view;\n\n    this.#performUpdate();\n  }\n\n  set recommendedConditions(recommendedConditions: SDK.NetworkManager.Conditions|null) {\n    this.#recommendedConditions = recommendedConditions;\n    this.#performUpdate();\n  }\n\n  set currentConditions(currentConditions: SDK.NetworkManager.Conditions) {\n    this.#currentConditions = currentConditions;\n    this.#performUpdate();\n  }\n\n  #performUpdate(): void {\n    const customNetworkConditionsSetting = SDK.NetworkManager.customUserNetworkConditionsSetting();\n    const customNetworkConditions = customNetworkConditionsSetting.get();\n    const onAddCustomConditions = (): void => {\n      void Common.Revealer.reveal(SDK.NetworkManager.customUserNetworkConditionsSetting());\n    };\n\n    const onSelect = (conditions: SDK.NetworkManager.Conditions): void => {\n      this.dispatchEventToListeners(Events.CONDITIONS_CHANGED, conditions);\n      Badges.UserBadges.instance().recordAction(Badges.BadgeAction.NETWORK_SPEED_THROTTLED);\n    };\n\n    const throttlingGroups = [\n      {title: i18nString(UIStrings.disabled), items: [SDK.NetworkManager.NoThrottlingConditions]},\n      {title: i18nString(UIStrings.presets), items: ThrottlingPresets.networkPresets},\n    ];\n    const customConditionsGroup = {title: i18nString(UIStrings.custom), items: customNetworkConditions};\n    const viewInput: ViewInput = {\n      recommendedConditions: this.#recommendedConditions,\n      selectedConditions: this.#currentConditions,\n      jslogContext: this.#jslogContext,\n      title: this.#title,\n      onSelect,\n      onAddCustomConditions,\n      throttlingGroups,\n      customConditionsGroup,\n    };\n    this.#view(viewInput, {}, this.#element);\n  }\n}\n", "// Copyright 2017 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport '../../ui/components/cards/cards.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport type * as Cards from '../../ui/components/cards/cards.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {CalibrationController} from './CalibrationController.js';\nimport throttlingSettingsTabStyles from './throttlingSettingsTab.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in Throttling Settings Tab of the Network panel\n   */\n  networkThrottlingProfiles: 'Network throttling profiles',\n  /**\n   * @description Text of add conditions button in Throttling Settings Tab of the Network panel\n   */\n  addCustomProfile: 'Add profile',\n  /**\n   * @description A value in milliseconds\n   * @example {3} PH1\n   */\n  dms: '{PH1} `ms`',\n  /**\n   * @description Text in Throttling Settings Tab of the Network panel\n   */\n  profileName: 'Profile Name',\n  /**\n   * @description Label for a textbox that sets the download speed in the Throttling Settings Tab.\n   * Noun, short for 'download speed'.\n   */\n  download: 'Download',\n  /**\n   * @description Label for a textbox that sets the upload speed in the Throttling Settings Tab.\n   * Noun, short for 'upload speed'.\n   */\n  upload: 'Upload',\n  /**\n   * @description Label for a textbox that sets the latency in the Throttling Settings Tab.\n   */\n  latency: 'Latency',\n  /**\n   * @description Label for a textbox that sets the packet loss percentage for real-time networks in the Throttling Settings Tab.\n   */\n  packetLoss: 'Packet Loss',\n  /**\n   * @description Label for a textbox that sets the maximum packet queue length for real-time networks in the Throttling Settings Tab.\n   */\n  packetQueueLength: 'Packet Queue Length',\n  /**\n   * @description Label for a checkbox that allows packet reordering in the Throttling Settings Tab.\n   */\n  packetReordering: 'Packet Reordering',\n  /**\n   * @description Label for a textbox serving as a unit in the Throttling Settings Tab for the field Packet Queue Length column.\n   */\n  packet: 'packet',\n  /**\n   * @description Text in Throttling Settings Tab of the Network panel\n   */\n  optional: 'optional',\n  /**\n   * @description Error message for Profile Name input in Throtting pane of the Settings\n   * @example {49} PH1\n   */\n  profileNameCharactersLengthMust: 'Profile Name characters length must be between 1 to {PH1} inclusive',\n  /**\n   * @description Error message for Download and Upload inputs in Throttling pane of the Settings\n   * @example {Download} PH1\n   * @example {0} PH2\n   * @example {10000000} PH3\n   */\n  sMustBeANumberBetweenSkbsToSkbs: '{PH1} must be a number between {PH2} `kbit/s` to {PH3} `kbit/s` inclusive',\n  /**\n   * @description Error message for Latency input in Throttling pane of the Settings\n   * @example {0} PH1\n   * @example {1000000} PH2\n   */\n  latencyMustBeAnIntegerBetweenSms: 'Latency must be an integer between {PH1} `ms` to {PH2} `ms` inclusive',\n  /**\n   * @description Error message for Packet Loss input in Throttling pane of the Settings\n   * @example {0} PH1\n   * @example {100} PH2\n   */\n  packetLossMustBeAnIntegerBetweenSpct: 'Packet Loss must be a number between {PH1} `%` to {PH2} `%` inclusive',\n  /**\n   * @description Error message for Packet Queue Length input in Throttling pane of the Settings\n   */\n  packetQueueLengthMustBeAnIntegerGreaterOrEqualToZero: 'Packet Queue Length must be greater or equal to 0',\n  /**\n   * @description Text in Throttling Settings Tab of the Network panel, indicating the download or\n   * upload speed that will be applied in kilobits per second.\n   * @example {25} PH1\n   */\n  dskbits: '{PH1} `kbit/s`',\n  /**\n   * @description Text in Throttling Settings Tab of the Network panel, indicating the download or\n   * upload speed that will be applied in megabits per second.\n   * @example {25.4} PH1\n   */\n  fsmbits: '{PH1} `Mbit/s`',\n  /**\n   * @description Label for the column Packet Reordering to indicate it is enabled in the Throttling Settings Tab.\n   */\n  on: 'On',\n  /**\n   * @description Label for the column Packet Reordering to indicate it is disabled in the Throttling Settings Tab.\n   */\n  off: 'Off',\n\n  /**\n   * @description Text in Throttling Settings Tab of the Settings panel\n   */\n  cpuThrottlingPresets: 'CPU throttling presets',\n  /**\n   * @description Button text to prompt the user to run the CPU calibration process.\n   */\n  calibrate: 'Calibrate',\n  /**\n   * @description Button text to prompt the user to re-run the CPU calibration process.\n   */\n  recalibrate: 'Recalibrate',\n  /**\n   * @description Button text to prompt the user if they wish to continue with the CPU calibration process.\n   */\n  continue: 'Continue',\n  /**\n   * @description Button text to allow the user to cancel the CPU calibration process.\n   */\n  cancel: 'Cancel',\n  /**\n   * @description Text to use to indicate that a CPU calibration has not been run yet.\n   */\n  needsCalibration: 'Needs calibration',\n  /**\n   * @description Text to explain why the user should run the CPU calibration process.\n   */\n  calibrationCTA:\n      'To use the CPU throttling presets, run the calibration process to determine the ideal throttling rate for your device.',\n  /**\n   * @description Text to explain what CPU throttling presets are.\n   */\n  cpuCalibrationDescription:\n      'These presets throttle your CPU to approximate the performance of typical low or mid-tier mobile devices.',\n  /**\n   * @description Text to explain how the CPU calibration process will work.\n   */\n  calibrationConfirmationPrompt:\n      'Calibration will take ~5 seconds, and temporarily navigate away from your current page. Do you wish to continue?',\n  /**\n   * @description Text to explain an issue that may impact the CPU calibration process.\n   */\n  calibrationWarningHighCPU: 'CPU utilization is too high',\n  /**\n   * @description Text to explain an issue that may impact the CPU calibration process.\n   */\n  calibrationWarningRunningOnBattery: 'Device is running on battery, please plug in charger for best results',\n  /**\n   * @description Text to explain an issue that may impact the CPU calibration process.\n   */\n  calibrationWarningLowBattery: 'Device battery is low (<20%), results may be impacted by CPU throttling',\n  /**\n   * @description Text label for a menu item indicating that a specific slowdown multiplier is applied.\n   * @example {2} PH1\n   */\n  dSlowdown: '{PH1}× slowdown',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/ThrottlingSettingsTab.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * This promise resolves after the first compute pressure record is observed.\n * The object it returns is always up-to-date with the most recent record observed.\n */\nfunction createComputePressurePromise(): Promise<{state: string}> {\n  const result = {state: ''};\n\n  return new Promise(resolve => {\n    // @ts-expect-error typescript/lib version needs to be updated.\n    const observer = new PressureObserver(records => {\n      result.state = records.at(-1).state;\n      resolve(result);\n    });\n    observer.observe('cpu', {\n      sampleInterval: 1000,\n    });\n  });\n}\n\nexport class CPUThrottlingCard {\n  element: Cards.Card.Card;\n\n  private readonly setting: Common.Settings.Setting<SDK.CPUThrottlingManager.CalibratedCPUThrottling>;\n  private computePressurePromise?: ReturnType<typeof createComputePressurePromise>;\n  private controller?: CalibrationController;\n\n  // UI stuff.\n  private lowTierMobileDeviceEl: HTMLElement;\n  private midTierMobileDeviceEl: HTMLElement;\n  private calibrateEl: HTMLElement;\n  private textEl: HTMLElement;\n  private calibrateButton: Buttons.Button.Button;\n  private cancelButton: Buttons.Button.Button;\n  private progress: UI.ProgressIndicator.ProgressIndicator;\n  private state: 'cta'|'prompting'|'calibrating' = 'cta';\n  private warnings: string[] = [];\n\n  constructor() {\n    this.setting = Common.Settings.Settings.instance().createSetting<SDK.CPUThrottlingManager.CalibratedCPUThrottling>(\n        'calibrated-cpu-throttling', {}, Common.Settings.SettingStorageType.GLOBAL);\n\n    this.element = document.createElement('devtools-card');\n    this.element.heading = i18nString(UIStrings.cpuThrottlingPresets);\n\n    const descriptionEl = this.element.createChild('span');\n    descriptionEl.textContent = i18nString(UIStrings.cpuCalibrationDescription);\n\n    this.lowTierMobileDeviceEl = this.element.createChild('div', 'cpu-preset-section');\n    this.lowTierMobileDeviceEl.append('Low-tier mobile device');\n    this.lowTierMobileDeviceEl.createChild('div', 'cpu-preset-result');\n\n    this.midTierMobileDeviceEl = this.element.createChild('div', 'cpu-preset-section');\n    this.midTierMobileDeviceEl.append('Mid-tier mobile device');\n    this.midTierMobileDeviceEl.createChild('div', 'cpu-preset-result');\n\n    this.calibrateEl = this.element.createChild('div', 'cpu-preset-section cpu-preset-calibrate');\n\n    const buttonContainerEl = this.calibrateEl.createChild('div', 'button-container');\n\n    this.calibrateButton = new Buttons.Button.Button();\n    this.calibrateButton.classList.add('calibrate-button');\n    this.calibrateButton.data = {\n      variant: Buttons.Button.Variant.PRIMARY,\n      jslogContext: 'throttling.calibrate',\n    };\n    this.calibrateButton.addEventListener('click', () => this.calibrateButtonClicked());\n    buttonContainerEl.append(this.calibrateButton);\n\n    this.cancelButton = new Buttons.Button.Button();\n    this.cancelButton.classList.add('cancel-button');\n    this.cancelButton.data = {\n      variant: Buttons.Button.Variant.OUTLINED,\n      jslogContext: 'throttling.calibrate-cancel',\n    };\n    this.cancelButton.textContent = i18nString(UIStrings.cancel);\n    this.cancelButton.addEventListener('click', () => this.cancelButtonClicked());\n    buttonContainerEl.append(this.cancelButton);\n\n    this.textEl = this.calibrateEl.createChild('div', 'text-container');\n\n    this.progress = this.calibrateEl.createChild('devtools-progress');\n    this.progress.setAttribute('no-stop-button', '');\n\n    this.updateState();\n  }\n\n  wasShown(): void {\n    this.computePressurePromise = createComputePressurePromise();\n    this.state = 'cta';\n    this.updateState();\n  }\n\n  willHide(): void {\n    this.computePressurePromise = undefined;\n    if (this.controller) {\n      this.controller.abort();\n    }\n  }\n\n  private updateState(): void {\n    if (this.state !== 'calibrating') {\n      this.controller = undefined;\n    }\n\n    const result = this.setting.get();\n    const hasCalibrated = result.low || result.mid;\n\n    this.calibrateButton.style.display = 'none';\n    this.textEl.style.display = 'none';\n    this.cancelButton.style.display = 'none';\n    this.progress.style.display = 'none';\n\n    if (this.state === 'cta') {\n      this.calibrateButton.style.display = '';\n      this.calibrateButton.textContent =\n          hasCalibrated ? i18nString(UIStrings.recalibrate) : i18nString(UIStrings.calibrate);\n\n      if (!hasCalibrated) {\n        this.textEl.style.display = '';\n        this.textEl.textContent = '';\n        this.textEl.append(this.createTextWithIcon(i18nString(UIStrings.calibrationCTA), 'info'));\n      }\n    } else if (this.state === 'prompting') {\n      this.calibrateButton.style.display = '';\n      this.calibrateButton.textContent = i18nString(UIStrings.continue);\n\n      this.cancelButton.style.display = '';\n\n      this.textEl.style.display = '';\n      this.textEl.textContent = '';\n      for (const warning of this.warnings) {\n        this.textEl.append(this.createTextWithIcon(warning, 'warning'));\n      }\n      this.textEl.append(this.createTextWithIcon(i18nString(UIStrings.calibrationConfirmationPrompt), 'info'));\n    } else if (this.state === 'calibrating') {\n      this.cancelButton.style.display = '';\n      this.progress.style.display = '';\n    }\n\n    const resultToString = (result: number|SDK.CPUThrottlingManager.CalibrationError|undefined): string => {\n      if (result === undefined) {\n        return i18nString(UIStrings.needsCalibration);\n      }\n\n      if (typeof result === 'string') {\n        return SDK.CPUThrottlingManager.calibrationErrorToString(result);\n      }\n\n      // Shouldn't happen, but let's not throw an error (.toFixed) if the setting\n      // somehow was saved with a non-number.\n      if (typeof result !== 'number') {\n        return `Invalid: ${result}`;\n      }\n\n      return i18nString(UIStrings.dSlowdown, {PH1: result.toFixed(1)});\n    };\n\n    const setPresetResult =\n        (element: HTMLElement|null, result: number|SDK.CPUThrottlingManager.CalibrationError|undefined): void => {\n          if (!element) {\n            throw new Error('expected HTMLElement');\n          }\n\n          element.textContent = resultToString(result);\n          element.classList.toggle('not-calibrated', result === undefined);\n        };\n\n    setPresetResult(this.lowTierMobileDeviceEl.querySelector('.cpu-preset-result'), result.low);\n    setPresetResult(this.midTierMobileDeviceEl.querySelector('.cpu-preset-result'), result.mid);\n  }\n\n  private createTextWithIcon(text: string, icon: string): HTMLElement {\n    const el = document.createElement('div');\n    el.classList.add('text-with-icon');\n    el.append(IconButton.Icon.create(icon));\n    el.append(text);\n    return el;\n  }\n\n  private async getCalibrationWarnings(): Promise<string[]> {\n    const warnings = [];\n\n    if (this.computePressurePromise) {\n      const computePressure = await this.computePressurePromise;\n      if (computePressure.state === 'critical' || computePressure.state === 'serious') {\n        warnings.push(i18nString(UIStrings.calibrationWarningHighCPU));\n      }\n    }\n\n    // @ts-expect-error typescript/lib version needs to be updated.\n    const battery = await navigator.getBattery();\n    if (!battery.charging) {\n      warnings.push(i18nString(UIStrings.calibrationWarningRunningOnBattery));\n    } else if (battery.level < 0.2) {\n      warnings.push(i18nString(UIStrings.calibrationWarningLowBattery));\n    }\n\n    return warnings;\n  }\n\n  private async calibrateButtonClicked(): Promise<void> {\n    if (this.state === 'cta') {\n      this.warnings = await this.getCalibrationWarnings();\n      this.state = 'prompting';\n      this.updateState();\n    } else if (this.state === 'prompting') {\n      this.state = 'calibrating';\n      this.updateState();\n      void this.runCalibration();\n    }\n  }\n\n  private cancelButtonClicked(): void {\n    if (this.controller) {\n      this.controller.abort();\n    } else {\n      this.state = 'cta';\n      this.updateState();\n    }\n  }\n\n  private async runCalibration(): Promise<void> {\n    this.progress.worked = 0;\n    this.progress.totalWork = 1;\n\n    this.controller = new CalibrationController();\n\n    try {\n      if (!await this.controller.start()) {\n        console.error('Calibration failed to start');\n        return;\n      }\n\n      for await (const result of this.controller.iterator()) {\n        this.progress.worked = result.progress;\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      await this.controller.end();\n    }\n\n    const result = this.controller.result();\n    if (result && (result.low || result.mid)) {\n      this.setting.set(result);\n      // Let the user bask in the glory of a 100% progress bar, for a bit.\n      this.progress.worked = 1;\n      await new Promise(resolve => setTimeout(resolve, 200));\n    }\n\n    this.state = 'cta';\n    this.updateState();\n  }\n}\n\nfunction extractCustomSettingIndex(key: SDK.NetworkManager.UserDefinedThrottlingConditionKey): number {\n  const match = key.match(/USER_CUSTOM_SETTING_(\\d+)/);\n  if (match?.[1]) {\n    return parseInt(match[1], 10);\n  }\n  return 0;\n}\n\nexport class ThrottlingSettingsTab extends UI.Widget.VBox implements\n    UI.ListWidget.Delegate<SDK.NetworkManager.Conditions> {\n  private readonly list: UI.ListWidget.ListWidget<SDK.NetworkManager.Conditions>;\n  private readonly customUserConditions: Common.Settings.Setting<SDK.NetworkManager.Conditions[]>;\n  private editor?: UI.ListWidget.Editor<SDK.NetworkManager.Conditions>;\n  private cpuThrottlingCard: CPUThrottlingCard;\n  /**\n   * We store how many custom conditions the user has defined when we load up\n   * DevTools. This is because when the user creates a new one, we need to\n   * generate a unique key. We take this value, increment it, and use that as part of the unique key.\n   * This means that we are resilient to the user adding & then deleting a\n   * profile; we always use this counter which is only ever incremented.\n   */\n  #customUserConditionsCount: number;\n\n  constructor() {\n    super({\n      jslog: `${VisualLogging.pane('throttling-conditions')}`,\n      useShadowDom: true,\n    });\n    this.registerRequiredCSS(throttlingSettingsTabStyles);\n\n    const settingsContent =\n        this.contentElement.createChild('div', 'settings-card-container-wrapper').createChild('div');\n    settingsContent.classList.add('settings-card-container', 'throttling-conditions-settings');\n\n    this.cpuThrottlingCard = new CPUThrottlingCard();\n    settingsContent.append(this.cpuThrottlingCard.element);\n\n    const addButton = new Buttons.Button.Button();\n    addButton.classList.add('add-conditions-button');\n    addButton.data = {\n      variant: Buttons.Button.Variant.OUTLINED,\n      iconName: 'plus',\n      jslogContext: 'network.add-conditions',\n    };\n    addButton.textContent = i18nString(UIStrings.addCustomProfile);\n    addButton.addEventListener('click', () => this.addButtonClicked());\n\n    const card = settingsContent.createChild('devtools-card');\n    card.heading = i18nString(UIStrings.networkThrottlingProfiles);\n    const container = card.createChild('div');\n\n    this.list = new UI.ListWidget.ListWidget(this);\n    this.list.element.classList.add('conditions-list');\n    this.list.registerRequiredCSS(throttlingSettingsTabStyles);\n    this.list.show(container);\n    container.appendChild(addButton);\n\n    this.customUserConditions = SDK.NetworkManager.customUserNetworkConditionsSetting();\n    this.customUserConditions.addChangeListener(this.conditionsUpdated, this);\n\n    const customConditions = this.customUserConditions.get();\n    // We need to parse out the current max condition key index. If the last\n    // one added is USER_CUSTOM_SETTING_9, then we need to set the\n    // customUserConditionsCount property to 9, so that the next item added\n    // gets index 10.\n    // Because we always increment the index and append it to the list, we\n    // know that the last item in the list will have the largest custom key\n    // index, hence why we can just pluck the last item rather than search for\n    // the one with the largest index.\n    const lastCondition = customConditions.at(-1);\n    const key = lastCondition?.key;\n    if (key && SDK.NetworkManager.keyIsCustomUser(key)) {\n      const maxIndex = extractCustomSettingIndex(key);\n      this.#customUserConditionsCount = maxIndex;\n    } else {\n      this.#customUserConditionsCount = 0;\n    }\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.cpuThrottlingCard.wasShown();\n    this.conditionsUpdated();\n  }\n\n  override willHide(): void {\n    super.willHide();\n    this.cpuThrottlingCard.willHide();\n  }\n\n  private conditionsUpdated(): void {\n    this.list.clear();\n\n    const conditions = this.customUserConditions.get();\n    for (let i = 0; i < conditions.length; ++i) {\n      this.list.appendItem(conditions[i], true);\n    }\n\n    this.list.appendSeparator();\n  }\n\n  private addButtonClicked(): void {\n    this.#customUserConditionsCount++;\n    this.list.addNewItem(this.customUserConditions.get().length, {\n      key: `USER_CUSTOM_SETTING_${this.#customUserConditionsCount}`,\n      title: () => '',\n      download: -1,\n      upload: -1,\n      latency: 0,\n      packetLoss: 0,\n      packetReordering: false\n    });\n  }\n\n  renderItem(conditions: SDK.NetworkManager.Conditions, _editable: boolean): Element {\n    const element = document.createElement('div');\n    element.classList.add('conditions-list-item');\n    const title = element.createChild('div', 'conditions-list-text conditions-list-title');\n    const titleText = title.createChild('div', 'conditions-list-title-text');\n    const castedTitle = this.retrieveOptionsTitle(conditions);\n    titleText.textContent = castedTitle;\n    UI.Tooltip.Tooltip.install(titleText, castedTitle);\n    element.createChild('div', 'conditions-list-separator');\n    element.createChild('div', 'conditions-list-text').textContent = throughputText(conditions.download);\n    element.createChild('div', 'conditions-list-separator');\n    element.createChild('div', 'conditions-list-text').textContent = throughputText(conditions.upload);\n    element.createChild('div', 'conditions-list-separator');\n    element.createChild('div', 'conditions-list-text').textContent =\n        i18nString(UIStrings.dms, {PH1: conditions.latency});\n    element.createChild('div', 'conditions-list-separator');\n    element.createChild('div', 'conditions-list-text').textContent = percentText(conditions.packetLoss ?? 0);\n    element.createChild('div', 'conditions-list-separator');\n    element.createChild('div', 'conditions-list-text').textContent = String(conditions.packetQueueLength ?? 0);\n    element.createChild('div', 'conditions-list-separator');\n    element.createChild('div', 'conditions-list-text').textContent =\n        conditions.packetReordering ? i18nString(UIStrings.on) : i18nString(UIStrings.off);\n\n    return element;\n  }\n\n  removeItemRequested(_item: SDK.NetworkManager.Conditions, index: number): void {\n    const list = this.customUserConditions.get();\n    list.splice(index, 1);\n    this.customUserConditions.set(list);\n  }\n\n  retrieveOptionsTitle(conditions: SDK.NetworkManager.Conditions): string {\n    // The title is usually an i18nLazyString except for custom values that are stored in the local storage in the form of a string.\n    const castedTitle = typeof conditions.title === 'function' ? conditions.title() : conditions.title;\n    return castedTitle;\n  }\n\n  commitEdit(\n      conditions: SDK.NetworkManager.Conditions, editor: UI.ListWidget.Editor<SDK.NetworkManager.Conditions>,\n      isNew: boolean): void {\n    conditions.title = editor.control('title').value.trim();\n    const download = editor.control('download').value.trim();\n    conditions.download = download ? parseInt(download, 10) * (1000 / 8) : -1;\n    const upload = editor.control('upload').value.trim();\n    conditions.upload = upload ? parseInt(upload, 10) * (1000 / 8) : -1;\n    const latency = editor.control('latency').value.trim();\n    conditions.latency = latency ? parseInt(latency, 10) : 0;\n    const packetLoss = editor.control('packetLoss').value.trim();\n    conditions.packetLoss = packetLoss ? parseFloat(packetLoss) : 0;\n    const packetQueueLength = editor.control('packetQueueLength').value.trim();\n    conditions.packetQueueLength = packetQueueLength ? parseFloat(packetQueueLength) : 0;\n    const packetReordering = (editor.control('packetReordering') as HTMLInputElement).checked;\n    conditions.packetReordering = packetReordering;\n\n    const list = this.customUserConditions.get();\n    if (isNew) {\n      list.push(conditions);\n    }\n\n    this.customUserConditions.set(list);\n  }\n\n  beginEdit(conditions: SDK.NetworkManager.Conditions): UI.ListWidget.Editor<SDK.NetworkManager.Conditions> {\n    const editor = this.createEditor();\n    editor.control('title').value = this.retrieveOptionsTitle(conditions);\n    editor.control('download').value = conditions.download <= 0 ? '' : String(conditions.download / (1000 / 8));\n    editor.control('upload').value = conditions.upload <= 0 ? '' : String(conditions.upload / (1000 / 8));\n    editor.control('latency').value = conditions.latency ? String(conditions.latency) : '';\n    editor.control('packetLoss').value = conditions.packetLoss ? String(conditions.packetLoss) : '';\n    editor.control('packetQueueLength').value =\n        conditions.packetQueueLength ? String(conditions.packetQueueLength) : '';\n    (editor.control('packetReordering') as HTMLInputElement).checked = conditions.packetReordering ?? false;\n    return editor;\n  }\n\n  private createEditor(): UI.ListWidget.Editor<SDK.NetworkManager.Conditions> {\n    if (this.editor) {\n      return this.editor;\n    }\n\n    // Define the settings configuration\n    const settings = [\n      {\n        name: 'title',\n        labelText: i18nString(UIStrings.profileName),\n        inputType: 'text',\n        placeholder: '',\n        validator: titleValidator,\n        isOptional: false,\n      },\n      {\n        name: 'download',\n        labelText: i18nString(UIStrings.download),\n        inputType: 'text',\n        placeholder: i18n.i18n.lockedString('kbit/s'),\n        validator: throughputValidator,\n      },\n      {\n        name: 'upload',\n        labelText: i18nString(UIStrings.upload),\n        inputType: 'text',\n        placeholder: i18n.i18n.lockedString('kbit/s'),\n        validator: throughputValidator,\n      },\n      {\n        name: 'latency',\n        labelText: i18nString(UIStrings.latency),\n        inputType: 'text',\n        placeholder: i18n.i18n.lockedString('ms'),\n        validator: latencyValidator,\n      },\n      {\n        name: 'packetLoss',\n        labelText: i18nString(UIStrings.packetLoss),\n        inputType: 'text',\n        placeholder: i18n.i18n.lockedString('percent'),\n        validator: packetLossValidator,\n      },\n      {\n        name: 'packetQueueLength',\n        labelText: i18nString(UIStrings.packetQueueLength),\n        inputType: 'text',\n        placeholder: i18nString(UIStrings.packet),\n        validator: packetQueueLengthValidator,\n      },\n      {\n        name: 'packetReordering',\n        labelText: i18nString(UIStrings.packetReordering),\n        inputType: 'checkbox',\n        placeholder: '',\n        validator: packetReorderingValidator,\n        isOptional: false,\n      },\n    ];\n\n    const editor = new UI.ListWidget.Editor<SDK.NetworkManager.Conditions>();\n    this.editor = editor;\n    const content = editor.contentElement();\n\n    const settingsContainer = content.createChild('div', 'settings-container');\n\n    const createSettingField = (\n        name: string,\n        labelText: Common.UIString.LocalizedString,\n        inputType: string,\n        placeholder: Common.UIString.LocalizedString|string,\n        validator: (item: SDK.NetworkManager.Conditions, index: number, input: UI.ListWidget.EditorControl) =>\n            UI.ListWidget.ValidatorResult,\n        isOptional = true,\n        ): void => {\n      const settingElement = settingsContainer.createChild('div', 'setting');\n      // Create title element\n      const titleContainer = settingElement.createChild('div');\n      titleContainer.textContent = labelText;\n      // Create input element\n      const inputElement = settingElement.createChild('div');\n      const input = editor.createInput(name, inputType, placeholder, validator);\n      input.classList.add('input');\n      UI.ARIAUtils.setLabel(input, labelText);\n      inputElement.appendChild(input);\n\n      const optionalTextElement = inputElement.createChild('div');\n      const optionalStr = i18nString(UIStrings.optional);\n      optionalTextElement.textContent = optionalStr;\n      UI.ARIAUtils.setDescription(input, optionalStr);\n      if (!isOptional) {\n        optionalTextElement.style.visibility = 'hidden';\n      }\n    };\n\n    // Iterate over settings and create components\n    settings.forEach(setting => {\n      createSettingField(\n          setting.name, setting.labelText, setting.inputType, setting.placeholder, setting.validator,\n          setting.isOptional);\n    });\n\n    return editor;\n\n    function titleValidator(_item: SDK.NetworkManager.Conditions, _index: number, input: UI.ListWidget.EditorControl):\n        UI.ListWidget.ValidatorResult {\n      const maxLength = 49;\n      const value = input.value.trim();\n      const valid = value.length > 0 && value.length <= maxLength;\n      if (!valid) {\n        const errorMessage = i18nString(UIStrings.profileNameCharactersLengthMust, {PH1: maxLength});\n        return {valid, errorMessage};\n      }\n      return {valid, errorMessage: undefined};\n    }\n\n    function throughputValidator(\n        _item: SDK.NetworkManager.Conditions, _index: number,\n        input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      const minThroughput = 0;\n      const maxThroughput = 10000000;\n      const value = input.value.trim();\n      const parsedValue = Number(value);\n      const throughput = input.getAttribute('aria-label');\n      const valid = !Number.isNaN(parsedValue) && parsedValue >= minThroughput && parsedValue <= maxThroughput;\n      if (!valid) {\n        const errorMessage = i18nString(\n            UIStrings.sMustBeANumberBetweenSkbsToSkbs,\n            {PH1: String(throughput), PH2: minThroughput, PH3: maxThroughput});\n        return {valid, errorMessage};\n      }\n      return {valid, errorMessage: undefined};\n    }\n\n    function latencyValidator(_item: SDK.NetworkManager.Conditions, _index: number, input: UI.ListWidget.EditorControl):\n        UI.ListWidget.ValidatorResult {\n      const minLatency = 0;\n      const maxLatency = 1000000;\n      const value = input.value.trim();\n      const parsedValue = Number(value);\n      const valid = Number.isInteger(parsedValue) && parsedValue >= minLatency && parsedValue <= maxLatency;\n      if (!valid) {\n        const errorMessage = i18nString(UIStrings.latencyMustBeAnIntegerBetweenSms, {PH1: minLatency, PH2: maxLatency});\n        return {valid, errorMessage};\n      }\n      return {valid, errorMessage: undefined};\n    }\n\n    function packetLossValidator(\n        _item: SDK.NetworkManager.Conditions, _index: number,\n        input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      const minPacketLoss = 0;\n      const maxPacketLoss = 100;\n      const value = input.value.trim();\n      const parsedValue = Number(value);\n      const valid = parsedValue >= minPacketLoss && parsedValue <= maxPacketLoss;\n      if (!valid) {\n        const errorMessage =\n            i18nString(UIStrings.packetLossMustBeAnIntegerBetweenSpct, {PH1: minPacketLoss, PH2: maxPacketLoss});\n        return {valid, errorMessage};\n      }\n      return {valid, errorMessage: undefined};\n    }\n\n    function packetQueueLengthValidator(\n        _item: SDK.NetworkManager.Conditions, _index: number,\n        input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      const minPacketQueueLength = 0;\n      const value = input.value.trim();\n      const parsedValue = Number(value);\n      const valid = parsedValue >= minPacketQueueLength;\n      if (!valid) {\n        const errorMessage = i18nString(UIStrings.packetQueueLengthMustBeAnIntegerGreaterOrEqualToZero);\n        return {valid, errorMessage};\n      }\n      return {valid, errorMessage: undefined};\n    }\n\n    function packetReorderingValidator(\n        _item: SDK.NetworkManager.Conditions, _index: number,\n        _input: UI.ListWidget.EditorControl): UI.ListWidget.ValidatorResult {\n      return {valid: true, errorMessage: undefined};\n    }\n  }\n}\n\nfunction throughputText(throughput: number): string {\n  if (throughput < 0) {\n    return '';\n  }\n  const throughputInKbps = throughput / (1000 / 8);\n  if (throughputInKbps < 1000) {\n    return i18nString(UIStrings.dskbits, {PH1: throughputInKbps});\n  }\n  if (throughputInKbps < 1000 * 10) {\n    const formattedResult = (throughputInKbps / 1000).toFixed(1);\n    return i18nString(UIStrings.fsmbits, {PH1: formattedResult});\n  }\n  // TODO(petermarshall): Figure out if there is a difference we need to tell i18n about\n  // for these two versions: one with decimal places and one without.\n  return i18nString(UIStrings.fsmbits, {PH1: (throughputInKbps / 1000) | 0});\n}\n\nfunction percentText(percent: number): string {\n  if (percent < 0) {\n    return '';\n  }\n  return String(percent) + '%';\n}\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nconst UIStrings = {\n  /**\n   * @description Text to display to user while a calibration process is running.\n   */\n  runningCalibration: 'Running CPU calibration, please do not leave this tab or close DevTools.',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/CalibrationController.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * How long each iteration of the Lighthouse BenchmarkIndex benchmark runs for.\n * This benchmark runs multiple times throughout the calibration process.\n *\n * The entire calibration process has an upper-bound of running the benchmark 20 times:\n *   - 1 to \"warm up\" v8\n *   - 1 to check if device is powerful enough\n *   - up to 9 for each preset (uses bisect, so likely to be fewer)\n *\n * Therefore, the maximum duration for the calibration is 5 seconds.\n */\nconst benchmarkDurationMs = 250;\n\n/**\n * The benchmark score of a mid-tier device (like a Pixel 5).\n */\nconst midScore = 1000;\n\n/**\n * The benchmark score of a low-tier device (like a Moto G4 Power 2022).\n */\nconst lowScore = 264;\n\nfunction truncate(n: number): number {\n  return Number(n.toFixed(2));\n}\n\n/**\n * Runs a calibration process to determine ideal CPU throttling rates to target a low-tier and mid-tier device.\n *\n * Utilizes a benchmark from Lighthouse (LH BenchmarkIndex) to assess performance. This CPU benchmark serves as\n * a simple alias for device performance - but since results aren't exactly linear with clock speed a \"bisect\"\n * is run to find the ideal DevTools CPU throttling rate to receive the same results on the benchmark.\n *\n * @see go/cpq:adaptive-throttling\n * @see https://github.com/connorjclark/devtools-throttling-benchmarks/blob/main/calibrate.js\n */\nexport class CalibrationController {\n  #runtimeModel!: SDK.RuntimeModel.RuntimeModel;\n  #emulationModel!: SDK.EmulationModel.EmulationModel;\n  #originalUrl!: string;\n  #result?: SDK.CPUThrottlingManager.CalibratedCPUThrottling;\n  #state: 'idle'|'running'|'aborting' = 'idle';\n\n  /**\n   * The provided `benchmarkDuration` is how long each iteration of the Lighthouse BenchmarkIndex\n   * benchmark takes to run. This benchmark will run multiple times throughout the calibration process.\n   */\n  async start(): Promise<boolean> {\n    const primaryPageTarget = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    if (!primaryPageTarget) {\n      return false;\n    }\n\n    const runtimeModel = primaryPageTarget.model(SDK.RuntimeModel.RuntimeModel);\n    const emulationModel = primaryPageTarget.model(SDK.EmulationModel.EmulationModel);\n    if (!runtimeModel || !emulationModel) {\n      return false;\n    }\n\n    this.#state = 'running';\n    this.#runtimeModel = runtimeModel;\n    this.#emulationModel = emulationModel;\n    this.#originalUrl = primaryPageTarget.inspectedURL();\n\n    function setupTestPage(text: string): void {\n      const textEl = document.createElement('span');\n      textEl.textContent = text;\n\n      document.body.append(textEl);\n      document.body.style.cssText = `\n        font-family: system-ui, sans-serif;\n        height: 100vh;\n        margin: 0;\n        background-color: antiquewhite;\n        font-size: 18px;\n        text-align: center;\n\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n      `;\n\n      const moonEl = document.createElement('span');\n      document.body.append(moonEl);\n      moonEl.id = 'moon';\n      moonEl.textContent = '🌑';\n      moonEl.style.cssText = 'font-size: 5em';\n    }\n\n    await primaryPageTarget.pageAgent().invoke_navigate({url: 'about:blank'});\n\n    await runtimeModel.agent.invoke_evaluate({\n      expression: `\n          (${setupTestPage})(${JSON.stringify(i18nString(UIStrings.runningCalibration))});\n\n          window.runBenchmark = () => {\n            window.runs = window.runs ?? 0;\n            moon.textContent = ['🌑', '🌒', '🌓', '🌔', '🌕', '🌖', '🌗', '🌘'][window.runs++ % 8];\n            return (${computeBenchmarkIndex})(${benchmarkDurationMs});\n          }`,\n    });\n\n    // Warm up - give v8 a change to optimize.\n    await this.#benchmark();\n\n    return true;\n  }\n\n  async #throttle(rate: number): Promise<void> {\n    if (this.#state !== 'running') {\n      this.#result = undefined;\n      throw new Error('Calibration has been canceled');\n    }\n\n    await this.#emulationModel.setCPUThrottlingRate(rate);\n  }\n\n  async #benchmark(): Promise<number> {\n    if (this.#state !== 'running') {\n      this.#result = undefined;\n      throw new Error('Calibration has been canceled');\n    }\n\n    const {result} = await this.#runtimeModel.agent.invoke_evaluate({\n      expression: 'runBenchmark()',\n    });\n    if (!Number.isFinite(result.value)) {\n      let err = `unexpected score from benchmark: ${result.value}`;\n      if (result.description) {\n        err += `\\n${result.description}`;\n      }\n      throw new Error(err);\n    }\n    return result.value;\n  }\n\n  async * iterator(): AsyncGenerator<{progress: number}, void> {\n    const controller = this;\n\n    let isHalfwayDone = false;\n    yield {progress: 0};\n\n    const scoreCache = new Map<number, number>();\n    async function run(rate: number): Promise<number> {\n      const cached = scoreCache.get(rate);\n      if (cached !== undefined) {\n        return cached;\n      }\n\n      await controller.#throttle(rate);\n      const score = await controller.#benchmark();\n      scoreCache.set(rate, score);\n      return score;\n    }\n\n    /**\n     * Perform a binary bisect to find a CPU rate that results in the benchmark closely matching the target score.\n     */\n    async function*\n        find(target: number, lowerRate: number, upperRate: number): AsyncGenerator<{progress: number}, number> {\n      const lower = {rate: lowerRate, score: await run(lowerRate)};\n      const upper = {rate: upperRate, score: await run(upperRate)};\n\n      let rate = 0;\n      let iterations = 0;\n      const maxIterations = 8;\n      while (iterations++ < maxIterations) {\n        // The throttling agent backend truncates values to the hundredths place (aka 1%).\n        rate = truncate((upper.rate + lower.rate) / 2);\n        const score = await run(rate);\n\n        // Within 10 points is close enough for a match.\n        if (Math.abs(target - score) < 10) {\n          break;\n        }\n\n        if (score < target) {\n          upper.rate = rate;\n          upper.score = score;\n        } else {\n          lower.rate = rate;\n          lower.score = score;\n        }\n\n        yield {progress: iterations / maxIterations / 2 + (isHalfwayDone ? 0.5 : 0)};\n      }\n\n      return truncate(rate);\n    }\n\n    this.#result = {};\n\n    // Check if developer's device is weaker than the target devices.\n    let actualScore = await run(1);\n    if (actualScore < midScore) {\n      // Give it one more chance ...\n      scoreCache.clear();\n      actualScore = await run(1);\n      if (actualScore < midScore) {\n        if (actualScore < lowScore) {\n          this.#result = {\n            low: SDK.CPUThrottlingManager.CalibrationError.DEVICE_TOO_WEAK,\n            mid: SDK.CPUThrottlingManager.CalibrationError.DEVICE_TOO_WEAK,\n          };\n          return;\n        }\n\n        // Can still emulate the low-end device.\n        this.#result = {mid: SDK.CPUThrottlingManager.CalibrationError.DEVICE_TOO_WEAK};\n        isHalfwayDone = true;\n      }\n    }\n\n    const initialLowerRate = 1;\n    const initialUpperRate = actualScore / lowScore * 1.5;\n\n    const low = yield* find(lowScore, initialLowerRate, initialUpperRate);\n    this.#result.low = low;\n\n    if (!this.#result.mid) {\n      isHalfwayDone = true;\n      yield {progress: 0.5};\n\n      // \"bootstrap\" the bisect by using the results for the low-tier calibration.\n      const midToLowRatio = midScore / lowScore;\n      const r = low / midToLowRatio;\n      const mid = yield* find(midScore, r - r / 4, r + r / 4);\n      this.#result.mid = mid;\n    }\n\n    yield {progress: 1};\n  }\n\n  abort(): void {\n    if (this.#state === 'running') {\n      this.#state = 'aborting';\n    }\n  }\n\n  result(): SDK.CPUThrottlingManager.CalibratedCPUThrottling|undefined {\n    return this.#result;\n  }\n\n  async end(): Promise<void> {\n    if (this.#state === 'idle') {\n      return;\n    }\n\n    this.#state = 'idle';\n\n    if (this.#originalUrl.startsWith('chrome://')) {\n      await this.#runtimeModel.agent.invoke_evaluate({\n        expression: 'history.back()',\n      });\n    } else {\n      await this.#runtimeModel.agent.invoke_evaluate({\n        expression: `window.location.href = ${JSON.stringify(this.#originalUrl)}`,\n      });\n    }\n  }\n}\n\n/**\n * Lifted from Lighthouse.\n *\n * Computes a memory/CPU performance benchmark index to determine rough device class.\n * @see https://github.com/GoogleChrome/lighthouse/issues/9085\n * @see https://docs.google.com/spreadsheets/d/1E0gZwKsxegudkjJl8Fki_sOwHKpqgXwt8aBAfuUaB8A/edit?usp=sharing\n *\n * Historically (until LH 6.3), this benchmark created a string of length 100,000 in a loop, and returned\n * the number of times per second the string can be created.\n *\n * Changes to v8 in 8.6.106 changed this number and also made Chrome more variable w.r.t GC interupts.\n * This benchmark now is a hybrid of a similar GC-heavy approach to the original benchmark and an array\n * copy benchmark.\n *\n * As of Chrome m86...\n *\n *  - 1000+ is a desktop-class device, Core i3 PC, iPhone X, etc\n *  - 800+ is a high-end Android phone, Galaxy S8, low-end Chromebook, etc\n *  - 125+ is a mid-tier Android phone, Moto G4, etc\n *  - <125 is a budget Android phone, Alcatel Ideal, Galaxy J2, etc\n */\nfunction computeBenchmarkIndex(duration = 1000): number {\n  const halfTime = duration / 2;\n\n  /**\n   * The GC-heavy benchmark that creates a string of length 10000 in a loop.\n   * The returned index is the number of times per second the string can be created divided by 10.\n   * The division by 10 is to keep similar magnitudes to an earlier version of BenchmarkIndex that\n   * used a string length of 100000 instead of 10000.\n   */\n  function benchmarkIndexGC(): number {\n    const start = Date.now();\n    let iterations = 0;\n\n    while (Date.now() - start < halfTime) {\n      let s = '';\n      for (let j = 0; j < 10000; j++) {\n        s += 'a';\n      }\n      if (s.length === 1) {\n        throw new Error('will never happen, but prevents compiler optimizations');\n      }\n\n      iterations++;\n    }\n\n    const durationInSeconds = (Date.now() - start) / 1000;\n    return Math.round(iterations / 10 / durationInSeconds);\n  }\n\n  /**\n   * The non-GC-dependent benchmark that copies integers back and forth between two arrays of length 100000.\n   * The returned index is the number of times per second a copy can be made, divided by 10.\n   * The division by 10 is to keep similar magnitudes to the GC-dependent version.\n   */\n  function benchmarkIndexNoGC(): number {\n    const arrA = [];\n    const arrB = [];\n    for (let i = 0; i < 100000; i++) {\n      arrA[i] = arrB[i] = i;\n    }\n\n    const start = Date.now();\n    let iterations = 0;\n\n    // Some Intel CPUs have a performance cliff due to unlucky JCC instruction alignment.\n    // Two possible fixes: call Date.now less often, or manually unroll the inner loop a bit.\n    // We'll call Date.now less and only check the duration on every 10th iteration for simplicity.\n    // See https://bugs.chromium.org/p/v8/issues/detail?id=10954#c1.\n    while (iterations % 10 !== 0 || Date.now() - start < halfTime) {\n      const src = iterations % 2 === 0 ? arrA : arrB;\n      const tgt = iterations % 2 === 0 ? arrB : arrA;\n\n      for (let j = 0; j < src.length; j++) {\n        tgt[j] = src[j];\n      }\n\n      iterations++;\n    }\n\n    const durationInSeconds = (Date.now() - start) / 1000;\n    return Math.round(iterations / 10 / durationInSeconds);\n  }\n\n  // The final BenchmarkIndex is a simple average of the two components.\n  return (benchmarkIndexGC() + benchmarkIndexNoGC()) / 2;\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2015 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.add-conditions-button {\n  margin: var(--sys-size-5) 0;\n  border: none;\n}\n\n.conditions-list {\n  flex: auto;\n\n  &:has(.list-item) {\n    margin-top: var(--sys-size-3);\n  }\n}\n\n.settings-container {\n  display: flex;\n  overflow-x: auto;\n}\n\n.settings-container::-webkit-scrollbar {\n  -webkit-appearance: none;\n  height: var(--sys-size-4);\n}\n\n.settings-container::-webkit-scrollbar-thumb {\n  border-radius: var( --sys-size-3);\n  background-color: var(--sys-color-primary);\n}\n\n.setting {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-start;\n  gap: var( --sys-size-3);\n  padding: var( --sys-size-4);\n  flex-shrink: 0;\n  width: 74px;\n}\n\n.input {\n  width: 100%;\n}\n\n.conditions-list-item {\n  padding: 3px 5px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  position: relative;\n  flex: auto 1 1;\n}\n\n.conditions-list-text {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  flex-basis: var( --sys-size-24);\n  user-select: none;\n  color: var(--sys-color-on-surface);\n  text-align: center;\n  position: relative;\n\n  & > input {\n    scroll-margin-left: 5px;\n  }\n}\n\n.conditions-list-text:last-child {\n  flex-basis: 100px;\n  text-align: left;\n}\n\n.conditions-list-title {\n  text-align: start;\n  display: flex;\n  flex-grow: 1;\n  align-items: flex-start;\n}\n\n.conditions-list-title-text {\n  flex: auto;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n}\n\n.conditions-list-separator {\n  flex: 0 0 1px;\n  background-color: var(--sys-color-divider);\n  height: 30px;\n  margin: 0 4px;\n}\n\n.conditions-list-separator-invisible {\n  visibility: hidden;\n  height: 100% !important; /* stylelint-disable-line declaration-no-important */\n}\n\n.settings-card-container-wrapper {\n  scrollbar-gutter: stable;\n  padding: var(--sys-size-8) 0;\n  overflow: auto;\n  position: absolute;\n  inset: var(--sys-size-8) 0 0;\n}\n\n.settings-card-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: var(--sys-size-9);\n}\n\n.cpu-preset-section {\n  padding: 14px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.cpu-preset-result.not-calibrated {\n  font-style: italic;\n}\n\n.cpu-preset-calibrate {\n  flex-direction: column;\n  gap: 14px;\n}\n\n.cpu-preset-calibrate .button-container {\n  display: flex;\n  gap: 10px;\n}\n\n.cpu-preset-calibrate .text-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.text-with-icon {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n}\n\n/*# sourceURL=${import.meta.resolve('./throttlingSettingsTab.css')} */`;"],
  "mappings": "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",
  "names": ["i18n", "SDK", "i18n", "SDK", "UIStrings", "str_", "i18nString", "optionEl", "select", "UIStrings", "str_", "i18nString", "item", "Common", "i18n", "SDK", "UI", "UIStrings", "str_", "i18nString", "Common", "i18n", "SDK", "VisualLogging", "UIStrings", "str_", "i18nString", "Common", "i18n", "SDK", "IconButton", "UI", "VisualLogging", "i18n", "SDK", "UIStrings", "str_", "i18nString", "UIStrings", "str_", "i18nString", "result"]
}
