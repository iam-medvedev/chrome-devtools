{"version":3,"file":"ThrottlingManager.js","sourceRoot":"","sources":["../../../../../../front_end/panels/mobile_throttling/ThrottlingManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {MobileThrottlingSelector} from './MobileThrottlingSelector.js';\nimport {\n  type Conditions,\n  type ConditionsList,\n  type MobileThrottlingConditionsGroup,\n  ThrottlingPresets,\n} from './ThrottlingPresets.js';\n\nexport interface CPUThrottlingSelectorWrapper {\n  control: UI.Toolbar.ToolbarComboBox;\n  updateRecommendedOption(recommendedOption: SDK.CPUThrottlingManager.CPUThrottlingOption|null): void;\n}\n\nconst UIStrings = {\n  /**\n   *@description Text to indicate the network connectivity is offline\n   */\n  offline: 'Offline',\n  /**\n   *@description Text in Throttling Manager of the Network panel\n   */\n  forceDisconnectedFromNetwork: 'Force disconnected from network',\n  /**\n   * @description Text for throttling the network\n   */\n  throttling: 'Throttling',\n  /**\n   * @description Icon title in Throttling Manager of the Network panel\n   */\n  cpuThrottlingIsEnabled: 'CPU throttling is enabled',\n  /**\n   * @description Screen reader label for a select box that chooses the CPU throttling speed in the Performance panel\n   */\n  cpuThrottling: 'CPU throttling',\n  /**\n   * @description Tooltip text in Throttling Manager of the Performance panel\n   */\n  excessConcurrency: 'Exceeding the default value may degrade system performance.',\n  /**\n   * @description Tooltip text in Throttling Manager of the Performance panel\n   */\n  resetConcurrency: 'Reset to the default value',\n  /**\n   * @description Label for an check box that neables overriding navigator.hardwareConcurrency\n   */\n  hardwareConcurrency: 'Hardware concurrency',\n  /**\n   * @description Tooltip text for an input box that overrides navigator.hardwareConcurrency on the page\n   */\n  hardwareConcurrencySettingLabel: 'Override the value reported by navigator.hardwareConcurrency',\n  /**\n   * @description Text label for a selection box showing that a specific option is recommended for CPU or Network throttling.\n   * @example {Fast 4G} PH1\n   * @example {4x slowdown} PH1\n   */\n  recommendedThrottling: '{PH1} – recommended',\n  /**\n   * @description Text to prompt the user to run the CPU calibration process.\n   */\n  calibrate: 'Calibrate…',\n  /**\n   * @description Text to prompt the user to re-run the CPU calibration process.\n   */\n  recalibrate: 'Recalibrate…',\n  /**\n   * @description Text to indicate Save-Data override is not set.\n   */\n  noSaveDataOverride: '\\'Save-Data\\': default',\n  /**\n   * @description Text to indicate Save-Data override is set to Enabled.\n   */\n  saveDataOn: '\\'Save-Data\\': force on',\n  /**\n   * @description Text to indicate Save-Data override is set to Disabled.\n   */\n  saveDataOff: '\\'Save-Data\\': force off',\n  /**\n   * @description Tooltip text for an select element that overrides navigator.connection.saveData on the page\n   */\n  saveDataSettingTooltip: 'Override the value reported by navigator.connection.saveData on the page',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/ThrottlingManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet throttlingManagerInstance: ThrottlingManager;\n\nclass PromiseQueue<T> {\n  #promise = Promise.resolve();\n\n  push(promise: Promise<T>): Promise<T> {\n    return new Promise(r => {\n      this.#promise = this.#promise.then(async () => r(await promise));\n    });\n  }\n}\n\nexport class ThrottlingManager extends Common.ObjectWrapper.ObjectWrapper<ThrottlingManager.EventTypes> {\n  private readonly cpuThrottlingControls: Set<UI.Toolbar.ToolbarComboBox>;\n  private readonly cpuThrottlingOptions: SDK.CPUThrottlingManager.CPUThrottlingOption[];\n  private readonly customNetworkConditionsSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions[]>;\n  private readonly currentNetworkThrottlingConditionKeySetting:\n      Common.Settings.Setting<SDK.NetworkManager.ThrottlingConditionKey>;\n  private readonly calibratedCpuThrottlingSetting:\n      Common.Settings.Setting<SDK.CPUThrottlingManager.CalibratedCPUThrottling>;\n  private lastNetworkThrottlingConditions!: SDK.NetworkManager.Conditions;\n  private readonly cpuThrottlingManager: SDK.CPUThrottlingManager.CPUThrottlingManager;\n  #hardwareConcurrencyOverrideEnabled = false;\n  readonly #emulationQueue = new PromiseQueue<void>();\n  get hardwareConcurrencyOverrideEnabled(): boolean {\n    return this.#hardwareConcurrencyOverrideEnabled;\n  }\n\n  private constructor() {\n    super();\n    this.cpuThrottlingManager = SDK.CPUThrottlingManager.CPUThrottlingManager.instance();\n    this.cpuThrottlingManager.addEventListener(\n        SDK.CPUThrottlingManager.Events.RATE_CHANGED,\n        (event: Common.EventTarget.EventTargetEvent<number>) => this.onCPUThrottlingRateChangedOnSDK(event.data));\n    this.cpuThrottlingControls = new Set();\n    this.cpuThrottlingOptions = ThrottlingPresets.cpuThrottlingPresets;\n    this.customNetworkConditionsSetting = SDK.NetworkManager.customUserNetworkConditionsSetting();\n\n    this.currentNetworkThrottlingConditionKeySetting = SDK.NetworkManager.activeNetworkThrottlingKeySetting();\n\n    this.calibratedCpuThrottlingSetting =\n        Common.Settings.Settings.instance().createSetting<SDK.CPUThrottlingManager.CalibratedCPUThrottling>(\n            'calibrated-cpu-throttling', {}, Common.Settings.SettingStorageType.GLOBAL);\n\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.CONDITIONS_CHANGED, () => {\n          this.lastNetworkThrottlingConditions = this.#getCurrentNetworkConditions();\n          const conditions = SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions();\n          this.currentNetworkThrottlingConditionKeySetting.set(conditions.key);\n        });\n\n    if (this.isDirty()) {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(this.#getCurrentNetworkConditions());\n    }\n  }\n\n  #getCurrentNetworkConditions(): SDK.NetworkManager.Conditions {\n    const activeKey = this.currentNetworkThrottlingConditionKeySetting.get();\n    const definition = SDK.NetworkManager.getPredefinedCondition(activeKey);\n    if (definition) {\n      return definition;\n    }\n\n    const custom = this.customNetworkConditionsSetting.get().find(conditions => conditions.key === activeKey);\n\n    // Fall back to NoThrottling if we failed to find a match.\n    return custom ?? SDK.NetworkManager.NoThrottlingConditions;\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): ThrottlingManager {\n    const {forceNew} = opts;\n    if (!throttlingManagerInstance || forceNew) {\n      throttlingManagerInstance = new ThrottlingManager();\n    }\n\n    return throttlingManagerInstance;\n  }\n\n  createOfflineToolbarCheckbox(): UI.Toolbar.ToolbarCheckbox {\n    const checkbox = new UI.Toolbar.ToolbarCheckbox(\n        i18nString(UIStrings.offline), i18nString(UIStrings.forceDisconnectedFromNetwork), forceOffline.bind(this));\n    checkbox.element.setAttribute('jslog', `${VisualLogging.toggle('disconnect-from-network').track({click: true})}`);\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.CONDITIONS_CHANGED, networkConditionsChanged);\n    checkbox.setChecked(SDK.NetworkManager.MultitargetNetworkManager.instance().isOffline());\n\n    function forceOffline(this: ThrottlingManager): void {\n      if (checkbox.checked()) {\n        SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n            SDK.NetworkManager.OfflineConditions);\n      } else {\n        const newConditions =\n            (!this.lastNetworkThrottlingConditions.download && !this.lastNetworkThrottlingConditions.upload) ?\n            SDK.NetworkManager.NoThrottlingConditions :\n            this.lastNetworkThrottlingConditions;\n        SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(newConditions);\n      }\n    }\n\n    function networkConditionsChanged(): void {\n      checkbox.setChecked(SDK.NetworkManager.MultitargetNetworkManager.instance().isOffline());\n    }\n\n    return checkbox;\n  }\n\n  createMobileThrottlingButton(): UI.Toolbar.ToolbarMenuButton {\n    const button = new UI.Toolbar.ToolbarMenuButton(appendItems, undefined, undefined, 'mobile-throttling');\n    button.setTitle(i18nString(UIStrings.throttling));\n    button.setDarkText();\n\n    let options: ConditionsList = [];\n    let selectedIndex = -1;\n    const selector = new MobileThrottlingSelector(populate, select);\n    return button;\n\n    function appendItems(contextMenu: UI.ContextMenu.ContextMenu): void {\n      for (let index = 0; index < options.length; ++index) {\n        const conditions = options[index];\n        if (!conditions) {\n          continue;\n        }\n        if (conditions.title === ThrottlingPresets.getCustomConditions().title &&\n            conditions.description === ThrottlingPresets.getCustomConditions().description) {\n          continue;\n        }\n        contextMenu.defaultSection().appendCheckboxItem(\n            conditions.title, selector.optionSelected.bind(selector, conditions as Conditions),\n            {checked: selectedIndex === index, jslogContext: conditions.jslogContext});\n      }\n    }\n\n    function populate(groups: MobileThrottlingConditionsGroup[]): ConditionsList {\n      options = [];\n      for (const group of groups) {\n        for (const conditions of group.items) {\n          options.push(conditions);\n        }\n        options.push(null);\n      }\n      return options;\n    }\n\n    function select(index: number): void {\n      selectedIndex = index;\n      const option = options[index];\n      if (option) {\n        button.setText(option.title);\n        button.setTitle(`${option.title}: ${option.description}`);\n      }\n    }\n  }\n\n  private updatePanelIcon(): void {\n    const warnings = [];\n    if (this.cpuThrottlingManager.cpuThrottlingRate() !== SDK.CPUThrottlingManager.CPUThrottlingRates.NO_THROTTLING) {\n      warnings.push(i18nString(UIStrings.cpuThrottlingIsEnabled));\n    }\n    UI.InspectorView.InspectorView.instance().setPanelWarnings('timeline', warnings);\n  }\n\n  setCPUThrottlingOption(option: SDK.CPUThrottlingManager.CPUThrottlingOption): void {\n    // This will transitively call onCPUThrottlingRateChangedOnSDK.\n    this.cpuThrottlingManager.setCPUThrottlingOption(option);\n  }\n\n  onCPUThrottlingRateChangedOnSDK(rate: number): void {\n    if (rate !== SDK.CPUThrottlingManager.CPUThrottlingRates.NO_THROTTLING) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.CpuThrottlingEnabled);\n    }\n\n    const index = this.cpuThrottlingOptions.indexOf(this.cpuThrottlingManager.cpuThrottlingOption());\n    for (const control of this.cpuThrottlingControls) {\n      control.setSelectedIndex(index);\n    }\n    this.updatePanelIcon();\n  }\n\n  createCPUThrottlingSelector(): CPUThrottlingSelectorWrapper {\n    const getCalibrationString = (): Common.UIString.LocalizedString => {\n      const value = this.calibratedCpuThrottlingSetting.get();\n      const hasCalibrated = value.low || value.mid;\n      return hasCalibrated ? i18nString(UIStrings.recalibrate) : i18nString(UIStrings.calibrate);\n    };\n\n    const optionSelected = (): void => {\n      if (control.selectedIndex() === control.options().length - 1) {\n        const index = this.cpuThrottlingOptions.indexOf(this.cpuThrottlingManager.cpuThrottlingOption());\n        control.setSelectedIndex(index);\n        void Common.Revealer.reveal(this.calibratedCpuThrottlingSetting);\n      } else {\n        this.setCPUThrottlingOption(this.cpuThrottlingOptions[control.selectedIndex()]);\n      }\n    };\n\n    const control =\n        new UI.Toolbar.ToolbarComboBox(optionSelected, i18nString(UIStrings.cpuThrottling), '', 'cpu-throttling');\n    this.cpuThrottlingControls.add(control);\n    const currentOption = this.cpuThrottlingManager.cpuThrottlingOption();\n\n    const optionEls: HTMLOptionElement[] = [];\n    const options = this.cpuThrottlingOptions;\n\n    for (let i = 0; i < this.cpuThrottlingOptions.length; ++i) {\n      const option = this.cpuThrottlingOptions[i];\n      const title = option.title();\n      const value = option.jslogContext;\n      const optionEl = control.createOption(title, value);\n      control.addOption(optionEl);\n      if (currentOption === option) {\n        control.setSelectedIndex(i);\n      }\n\n      optionEls.push(optionEl);\n    }\n\n    const optionEl = control.createOption(getCalibrationString(), '');\n    control.addOption(optionEl);\n    optionEls.push(optionEl);\n\n    return {\n      control,\n      updateRecommendedOption(recommendedOption: SDK.CPUThrottlingManager.CPUThrottlingOption|null) {\n        for (let i = 0; i < optionEls.length - 1; i++) {\n          const option = options[i];\n          optionEls[i].text = option === recommendedOption ?\n              i18nString(UIStrings.recommendedThrottling, {PH1: option.title()}) :\n              option.title();\n          optionEls[i].disabled = option.rate() === 0;\n        }\n\n        optionEls[optionEls.length - 1].textContent = getCalibrationString();\n      },\n    };\n  }\n\n  createSaveDataOverrideSelector(className?: string): UI.Toolbar.ToolbarComboBox {\n    const reset = new Option(i18nString(UIStrings.noSaveDataOverride), undefined, true, true);\n    const enable = new Option(i18nString(UIStrings.saveDataOn));\n    const disable = new Option(i18nString(UIStrings.saveDataOff));\n    const handler = (e: Event): void => {\n      const select = e.target as HTMLSelectElement;\n      switch (select.selectedOptions.item(0)) {\n        case reset:\n          for (const emulationModel of SDK.TargetManager.TargetManager.instance().models(\n                   SDK.EmulationModel.EmulationModel)) {\n            void this.#emulationQueue.push(\n                emulationModel.setDataSaverOverride(SDK.EmulationModel.DataSaverOverride.UNSET));\n          }\n          break;\n        case enable:\n          for (const emulationModel of SDK.TargetManager.TargetManager.instance().models(\n                   SDK.EmulationModel.EmulationModel)) {\n            void this.#emulationQueue.push(\n                emulationModel.setDataSaverOverride(SDK.EmulationModel.DataSaverOverride.ENABLED));\n          }\n          break;\n        case disable:\n          for (const emulationModel of SDK.TargetManager.TargetManager.instance().models(\n                   SDK.EmulationModel.EmulationModel)) {\n            void this.#emulationQueue.push(\n                emulationModel.setDataSaverOverride(SDK.EmulationModel.DataSaverOverride.DISABLED));\n          }\n          break;\n      }\n      this.dispatchEventToListeners(ThrottlingManager.Events.SAVE_DATA_OVERRIDE_CHANGED, select.selectedIndex);\n    };\n    const select = new UI.Toolbar.ToolbarComboBox(handler, i18nString(UIStrings.saveDataSettingTooltip), className);\n    select.addOption(reset);\n    select.addOption(enable);\n    select.addOption(disable);\n\n    this.addEventListener(\n        ThrottlingManager.Events.SAVE_DATA_OVERRIDE_CHANGED, ({data}) => select.setSelectedIndex(data));\n\n    return select;\n  }\n\n  /** Hardware Concurrency doesn't store state in a setting. */\n  createHardwareConcurrencySelector(): {\n    numericInput: UI.Toolbar.ToolbarItem,\n    reset: UI.Toolbar.ToolbarButton,\n    warning: UI.Toolbar.ToolbarItem,\n    checkbox: UI.UIUtils.CheckboxLabel,\n  } {\n    const numericInput =\n        new UI.Toolbar.ToolbarItem(UI.UIUtils.createInput('devtools-text-input', 'number', 'hardware-concurrency'));\n    numericInput.setTitle(i18nString(UIStrings.hardwareConcurrencySettingLabel));\n    const inputElement = numericInput.element;\n    inputElement.min = '1';\n    numericInput.setEnabled(false);\n\n    const checkbox = UI.UIUtils.CheckboxLabel.create(\n        i18nString(UIStrings.hardwareConcurrency), false, i18nString(UIStrings.hardwareConcurrencySettingLabel),\n        'hardware-concurrency');\n\n    const reset = new UI.Toolbar.ToolbarButton('Reset concurrency', 'undo', undefined, 'hardware-concurrency-reset');\n    reset.setTitle(i18nString(UIStrings.resetConcurrency));\n    const icon = new IconButton.Icon.Icon();\n    icon.data = {iconName: 'warning-filled', color: 'var(--icon-warning)', width: '14px', height: '14px'};\n    const warning = new UI.Toolbar.ToolbarItem(icon);\n    warning.setTitle(i18nString(UIStrings.excessConcurrency));\n\n    checkbox.disabled = true;  // Prevent modification while still wiring things up asynchronously below\n    reset.element.classList.add('concurrency-hidden');\n    warning.element.classList.add('concurrency-hidden');\n\n    void this.cpuThrottlingManager.getHardwareConcurrency().then(defaultValue => {\n      if (defaultValue === undefined) {\n        return;\n      }\n\n      const setHardwareConcurrency = (value: number): void => {\n        if (value >= 1) {\n          this.cpuThrottlingManager.setHardwareConcurrency(value);\n        }\n        if (value > defaultValue) {\n          warning.element.classList.remove('concurrency-hidden');\n        } else {\n          warning.element.classList.add('concurrency-hidden');\n        }\n        if (value === defaultValue) {\n          reset.element.classList.add('concurrency-hidden');\n        } else {\n          reset.element.classList.remove('concurrency-hidden');\n        }\n      };\n\n      inputElement.value = `${defaultValue}`;\n      inputElement.oninput = () => setHardwareConcurrency(Number(inputElement.value));\n      checkbox.disabled = false;\n      checkbox.addEventListener('change', () => {\n        this.#hardwareConcurrencyOverrideEnabled = checkbox.checked;\n\n        numericInput.setEnabled(this.hardwareConcurrencyOverrideEnabled);\n        setHardwareConcurrency(this.hardwareConcurrencyOverrideEnabled ? Number(inputElement.value) : defaultValue);\n      });\n\n      reset.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, () => {\n        inputElement.value = `${defaultValue}`;\n        setHardwareConcurrency(defaultValue);\n      });\n    });\n\n    return {numericInput, reset, warning, checkbox};\n  }\n\n  setHardwareConcurrency(concurrency: number): void {\n    this.cpuThrottlingManager.setHardwareConcurrency(concurrency);\n  }\n\n  private isDirty(): boolean {\n    const networkConditions = SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions();\n    const knownCurrentConditions = this.#getCurrentNetworkConditions();\n    return !SDK.NetworkManager.networkConditionsEqual(networkConditions, knownCurrentConditions);\n  }\n}\n\nexport namespace ThrottlingManager {\n  export const enum Events {\n    SAVE_DATA_OVERRIDE_CHANGED = 'SaveDataOverrideChanged',\n  }\n\n  export interface EventTypes {\n    [Events.SAVE_DATA_OVERRIDE_CHANGED]: number;\n  }\n}\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(_context: UI.Context.Context, actionId: string): boolean {\n    if (actionId === 'network-conditions.network-online') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n          SDK.NetworkManager.NoThrottlingConditions);\n      return true;\n    }\n    if (actionId === 'network-conditions.network-low-end-mobile') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(SDK.NetworkManager.Slow3GConditions);\n      return true;\n    }\n    if (actionId === 'network-conditions.network-mid-tier-mobile') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(SDK.NetworkManager.Slow4GConditions);\n      return true;\n    }\n    if (actionId === 'network-conditions.network-offline') {\n      SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(\n          SDK.NetworkManager.OfflineConditions);\n      return true;\n    }\n    return false;\n  }\n}\n\nexport function throttlingManager(): ThrottlingManager {\n  return ThrottlingManager.instance();\n}\n"]}