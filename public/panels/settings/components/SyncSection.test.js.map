{"version":3,"file":"SyncSection.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/settings/components/SyncSection.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {createFakeSetting, describeWithLocale, updateHostConfig} from '../../../testing/EnvironmentHelpers.js';\nimport * as RenderCoordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as SettingComponents from '../../../ui/components/settings/settings.js';\n\nimport * as PanelComponents from './components.js';\n\n// TODO(crbug.com/442543412): Add tests for calling `UserBadges.initialize()` and recording an action after\n// the setting is enabled. We currently don't have tests for these because we'll need to re-write them\n// anyways with the widget framework (and using `view.onSettingChanged` kind of approach instead of\n// emitting the change custom event).\nasync function renderSyncSection(data: PanelComponents.SyncSection.SyncSectionData):\n    Promise<{section: PanelComponents.SyncSection.SyncSection, shadowRoot: ShadowRoot}> {\n  const section = new PanelComponents.SyncSection.SyncSection();\n  renderElementIntoDOM(section);\n  section.data = data;\n  await RenderCoordinator.done();\n  assert.isNotNull(section.shadowRoot);\n  return {section, shadowRoot: section.shadowRoot};\n}\n\ndescribeWithLocale('SyncSection', () => {\n  it('shows a warning tooltip when sync is not active and the user is signed in', async () => {\n    const syncSetting = createFakeSetting<boolean>('setting', true);\n    const receiveBadgesSetting = createFakeSetting<boolean>('receive-badges', true);\n    const {shadowRoot} = await renderSyncSection({\n      syncInfo: {\n        isSyncActive: false,\n        accountEmail: 'user@gmail.com',\n      },\n      syncSetting,\n      receiveBadgesSetting,\n    });\n    const warning = shadowRoot.querySelector('devtools-tooltip');\n    assert.instanceOf(warning, HTMLElement);\n    assert.include(warning.innerText, 'To turn this setting on');\n  });\n\n  it('shows a warning tooltip when sync is active but preferences bucket is not synced', async () => {\n    const syncSetting = createFakeSetting<boolean>('setting', true);\n    const receiveBadgesSetting = createFakeSetting<boolean>('receive-badges', true);\n    const {shadowRoot} = await renderSyncSection({\n      syncInfo: {\n        isSyncActive: true,\n        arePreferencesSynced: false,\n        accountEmail: 'user@gmail.com',\n      },\n      receiveBadgesSetting,\n      syncSetting,\n    });\n\n    const warning = shadowRoot.querySelector('devtools-tooltip');\n    assert.instanceOf(warning, HTMLElement);\n\n    assert.include(warning.innerText, 'To turn this setting on');\n  });\n\n  it('disables the checkbox when sync is not active', async () => {\n    const syncSetting = createFakeSetting<boolean>('setting', true);\n    const receiveBadgesSetting = createFakeSetting<boolean>('receive-badges', true);\n    const {shadowRoot} = await renderSyncSection({\n      syncInfo: {\n        isSyncActive: false,\n        accountEmail: 'user@gmail.com',\n      },\n      receiveBadgesSetting,\n      syncSetting,\n    });\n\n    const settingCheckbox = shadowRoot.querySelector('setting-checkbox');\n    assert.instanceOf(settingCheckbox, SettingComponents.SettingCheckbox.SettingCheckbox);\n    assert.isNotNull(settingCheckbox.shadowRoot);\n\n    const checkbox = settingCheckbox.shadowRoot.querySelector('input');\n    assert.instanceOf(checkbox, HTMLInputElement);\n\n    assert.isTrue(checkbox.disabled);\n  });\n\n  it('shows the avatar and email of the logged in user', async () => {\n    const syncSetting = createFakeSetting<boolean>('setting', true);\n    const receiveBadgesSetting = createFakeSetting<boolean>('receive-badges', true);\n    const {shadowRoot} = await renderSyncSection({\n      syncInfo: {\n        isSyncActive: true,\n        arePreferencesSynced: true,\n        accountEmail: 'user@gmail.com',\n        accountImage: '<png encoded as base64>',\n      },\n      receiveBadgesSetting,\n      syncSetting,\n    });\n\n    const image = shadowRoot.querySelector('img');\n    assert.instanceOf(image, HTMLImageElement);\n\n    const email = shadowRoot.querySelector('.account-email');\n    assert.instanceOf(email, HTMLElement);\n\n    assert.include(email.innerText, 'user@gmail.com');\n  });\n\n  it('shows not signed in if the user is not logged in', async () => {\n    const syncSetting = createFakeSetting<boolean>('setting', true);\n    const receiveBadgesSetting = createFakeSetting<boolean>('receive-badges', true);\n    const {shadowRoot} = await renderSyncSection({\n      syncInfo: {\n        isSyncActive: false,\n        arePreferencesSynced: false,\n      },\n      receiveBadgesSetting,\n      syncSetting,\n    });\n\n    const email = shadowRoot.querySelector('.not-signed-in');\n    assert.instanceOf(email, HTMLElement);\n\n    assert.include(email.innerText, 'not signed into Chrome');\n  });\n\n  it('does not render the GDP section if the feature is disabled', async () => {\n    updateHostConfig({});  // Disable feature\n    const syncSetting = createFakeSetting<boolean>('setting', true);\n    const receiveBadgesSetting = createFakeSetting<boolean>('receive-badges', true);\n    const {shadowRoot} = await renderSyncSection({\n      syncInfo: {\n        isSyncActive: true,\n        arePreferencesSynced: true,\n        accountEmail: 'user@gmail.com',\n      },\n      syncSetting,\n      receiveBadgesSetting,\n    });\n    const gdpSection = shadowRoot.querySelector('.gdp-profile-container');\n    assert.isNull(gdpSection);\n  });\n\n  describe('Google Developer Program profile', () => {\n    beforeEach(() => {\n      updateHostConfig({\n        devToolsGdpProfiles: {\n          enabled: true,\n        },\n      });\n    });\n\n    afterEach(() => {\n      updateHostConfig({});\n    });\n\n    it('renders the sign-up state when the user does not have a GDP profile', async () => {\n      const gdpClient = Host.GdpClient.GdpClient.instance();\n      sinon.stub(gdpClient, 'getProfile').resolves(null);\n\n      const syncSetting = createFakeSetting<boolean>('setting', true);\n      const receiveBadgesSetting = createFakeSetting<boolean>('receive-badges', true);\n      const {shadowRoot} = await renderSyncSection({\n        syncInfo: {\n          isSyncActive: true,\n          arePreferencesSynced: true,\n          accountEmail: 'user@gmail.com',\n        },\n        syncSetting,\n        receiveBadgesSetting,\n      });\n      const gdpSection = shadowRoot.querySelector('.gdp-profile-container');\n      assert.instanceOf(gdpSection, HTMLElement);\n\n      const signUpButton = gdpSection.querySelector('devtools-button');\n      assert.instanceOf(signUpButton, HTMLElement);\n      assert.strictEqual(signUpButton.innerText, 'Sign up');\n\n      const brandHeader = gdpSection.querySelector('.gdp-profile-header');\n      assert.instanceOf(brandHeader, HTMLElement);\n      assert.include(brandHeader.innerText, 'Google Developer Program');\n    });\n\n    it('renders the profile details with standard plan', async () => {\n      const gdpClient = Host.GdpClient.GdpClient.instance();\n      sinon.stub(gdpClient, 'getProfile').resolves({\n        name: 'test-profile',\n        activeSubscription: undefined,\n      });\n\n      const syncSetting = createFakeSetting<boolean>('setting', true);\n      const receiveBadgesSetting = createFakeSetting<boolean>('receive-badges', true);\n      const {shadowRoot} = await renderSyncSection({\n        syncInfo: {\n          isSyncActive: true,\n          arePreferencesSynced: true,\n          accountEmail: 'user@gmail.com',\n        },\n        syncSetting,\n        receiveBadgesSetting,\n      });\n\n      const gdpSection = shadowRoot.querySelector('.gdp-profile-container');\n      assert.instanceOf(gdpSection, HTMLElement);\n\n      const planDetails = gdpSection.querySelector('.plan-details');\n      assert.instanceOf(planDetails, HTMLElement);\n      assert.include(planDetails.innerText, 'Standard plan');\n\n      const viewProfileLink = gdpSection.querySelector('x-link');\n      assert.instanceOf(viewProfileLink, HTMLElement);\n      assert.strictEqual(viewProfileLink.innerText, 'View profile');\n\n      const receiveBadgesCheckbox = gdpSection.querySelector('setting-checkbox');\n      assert.instanceOf(receiveBadgesCheckbox, SettingComponents.SettingCheckbox.SettingCheckbox);\n    });\n\n    const subscriptionTiers = [\n      {\n        tier: Host.GdpClient.SubscriptionTier.PREMIUM_ANNUAL,\n        expectedText: 'Premium (Annual)',\n      },\n      {\n        tier: Host.GdpClient.SubscriptionTier.PREMIUM_MONTHLY,\n        expectedText: 'Premium (Monthly)',\n      },\n      {\n        tier: Host.GdpClient.SubscriptionTier.PRO_ANNUAL,\n        expectedText: 'Pro (Annual)',\n      },\n      {\n        tier: Host.GdpClient.SubscriptionTier.PRO_MONTHLY,\n        expectedText: 'Pro (Monthly)',\n      },\n      {\n        tier: 'unknown-tier',\n        expectedText: 'Unknown plan',\n      },\n    ];\n\n    for (const {tier, expectedText} of subscriptionTiers) {\n      it(`renders the profile details with ${expectedText} plan`, async () => {\n        const gdpClient = Host.GdpClient.GdpClient.instance();\n        sinon.stub(gdpClient, 'getProfile').resolves({\n          name: 'test-profile',\n          activeSubscription: {\n            subscriptionTier: tier as Host.GdpClient.SubscriptionTier,\n            subscriptionStatus: Host.GdpClient.SubscriptionStatus.ENABLED,\n          },\n        });\n\n        const syncSetting = createFakeSetting<boolean>('setting', true);\n        const receiveBadgesSetting = createFakeSetting<boolean>('receive-badges', true);\n        const {shadowRoot} = await renderSyncSection({\n          syncInfo: {\n            isSyncActive: true,\n            arePreferencesSynced: true,\n            accountEmail: 'user@gmail.com',\n          },\n          syncSetting,\n          receiveBadgesSetting,\n        });\n\n        const gdpSection = shadowRoot.querySelector('.gdp-profile-container');\n        assert.instanceOf(gdpSection, HTMLElement);\n\n        const planDetails = gdpSection.querySelector('.plan-details');\n        assert.instanceOf(planDetails, HTMLElement);\n        assert.include(planDetails.innerText, expectedText);\n      });\n    }\n  });\n});\n"]}