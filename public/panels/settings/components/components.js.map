{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/settings/components/SyncSection.ts", "syncSection.css.js"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport '../../../ui/components/chrome_link/chrome_link.js';\nimport '../../../ui/components/settings/settings.js';\nimport '../../../ui/components/tooltips/tooltips.js';\n\nimport type * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as Badges from '../../../models/badges/badges.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport type * as SettingsComponents from '../../../ui/components/settings/settings.js';\nimport * as Lit from '../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\nimport * as PanelCommon from '../../common/common.js';\nimport * as PanelUtils from '../../utils/utils.js';\n\nimport syncSectionStyles from './syncSection.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Text shown to the user in the Settings UI. 'This setting' refers\n   * to a checkbox that is disabled.\n   */\n  syncDisabled: 'To turn this setting on, you must enable Chrome sync.',\n  /**\n   * @description Text shown to the user in the Settings UI. Explains why the checkbox\n   * for saving DevTools settings to the user's Google account is inactive.\n   */\n  preferencesSyncDisabled: 'You need to first enable saving `Chrome` settings in your `Google` account.',\n  /**\n   * @description Label for the account email address. Shown in the DevTools Settings UI in\n   * front of the email address currently used for Chrome Sync.\n   */\n  signedIn: 'Signed into Chrome as:',\n  /**\n   * @description Label for the account settings. Shown in the DevTools Settings UI in\n   * case the user is not logged in to Chrome.\n   */\n  notSignedIn: 'You\\'re not signed into Chrome.',\n  /**\n   * @description Label for the Google Developer Program profile status that corresponds to\n   * standard plan (No subscription).\n   */\n  gdpStandardPlan: 'Standard plan',\n  /**\n   * @description Label for the Google Developer Program subscription status that corresponds to\n   * `PREMIUM_ANNUAL` plan.\n   */\n  gdpPremiumSubscription: 'Premium',\n  /**\n   * @description Label for the Google Developer Program subscription status that corresponds to\n   * `PRO_ANNUAL` plan.\n   */\n  gdpProSubscription: 'Pro',\n  /**\n   * @description Label for the Google Developer Program subscription status that corresponds\n   * to a plan not known by the client.\n   */\n  gdpUnknownSubscription: 'Unknown plan',\n  /**\n   * @description Label for Sign-Up button for the Google Developer Program profiles.\n   */\n  signUp: 'Sign up',\n  /**\n   * @description Link text for opening the Google Developer Program profile page.\n   */\n  viewProfile: 'View profile',\n  /**\n   * @description Text for tooltip shown on hovering over \"Relevant Data\" in the disclaimer text for AI code completion.\n   */\n  tooltipDisclaimerText:\n      'When you qualify for a badge, the badgeâ€™s identifier and the type of activity you did to earn it are sent to Google',\n  /**\n   * @description Text for the data notice right after the settings checkbox.\n   */\n  relevantData: 'Relevant data',\n  /**\n   * @description Text for the data notice right after the settings checkbox.\n   * @example {Relevant data} PH1\n   */\n  dataDisclaimer: '({PH1} is sent to Google)',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/settings/components/SyncSection.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst {html, Directives: {ref, createRef}} = Lit;\n\nlet cachedTooltipElement: HTMLElement|undefined;\n\nfunction renderDataDisclaimer(): HTMLElement {\n  if (cachedTooltipElement) {\n    return cachedTooltipElement;\n  }\n\n  const relevantDataTooltipTemplate = html`\n    <span\n      tabIndex=\"0\"\n      class=\"link\"\n      aria-details=\"gdp-profile-tooltip\"\n      aria-describedby=\"gdp-profile-tooltip\"\n      >${i18nString(UIStrings.relevantData)}</span>\n    <devtools-tooltip id=\"gdp-profile-tooltip\" variant=${'rich'}>\n      <div class=\"tooltip-content\" tabindex=\"0\">${i18nString(UIStrings.tooltipDisclaimerText)}</div>\n    </devtools-tooltip>`;\n\n  const container = document.createElement('span');\n  Lit.render(relevantDataTooltipTemplate, container);\n  cachedTooltipElement = i18n.i18n.getFormatLocalizedString(str_, UIStrings.dataDisclaimer, {\n    PH1: container,\n  });\n  return cachedTooltipElement;\n}\n\nfunction getGdpSubscriptionText(profile: Host.GdpClient.Profile): Platform.UIString.LocalizedString {\n  if (!profile.activeSubscription ||\n      profile.activeSubscription.subscriptionStatus !== Host.GdpClient.SubscriptionStatus.ENABLED) {\n    return i18nString(UIStrings.gdpStandardPlan);\n  }\n\n  switch (profile.activeSubscription.subscriptionTier) {\n    case Host.GdpClient.SubscriptionTier.PREMIUM_ANNUAL:\n    case Host.GdpClient.SubscriptionTier.PREMIUM_MONTHLY:\n      return i18nString(UIStrings.gdpPremiumSubscription);\n    case Host.GdpClient.SubscriptionTier.PRO_ANNUAL:\n    case Host.GdpClient.SubscriptionTier.PRO_MONTHLY:\n      return i18nString(UIStrings.gdpProSubscription);\n    default:\n      return i18nString(UIStrings.gdpUnknownSubscription);\n  }\n}\n\nexport interface SyncSectionData {\n  syncInfo: Host.InspectorFrontendHostAPI.SyncInformation;\n  syncSetting: Common.Settings.Setting<boolean>;\n  receiveBadgesSetting: Common.Settings.Setting<boolean>;\n}\n\nexport class SyncSection extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #syncInfo: Host.InspectorFrontendHostAPI.SyncInformation = {isSyncActive: false};\n  #syncSetting?: Common.Settings.Setting<boolean>;\n  #receiveBadgesSetting?: Common.Settings.Setting<boolean>;\n  #receiveBadgesSettingContainerRef = createRef<HTMLElement>();\n  #isEligibleToCreateGdpProfile = false;\n  #gdpProfile?: Host.GdpClient.Profile;\n\n  set data(data: SyncSectionData) {\n    this.#syncInfo = data.syncInfo;\n    this.#syncSetting = data.syncSetting;\n    this.#receiveBadgesSetting = data.receiveBadgesSetting;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n\n    // Trigger fetching GDP profile if the user is signed in.\n    if (data.syncInfo.accountEmail) {\n      void this.#fetchGdpDetails();\n    }\n  }\n\n  async highlightReceiveBadgesSetting(): Promise<void> {\n    await ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n    const element = this.#receiveBadgesSettingContainerRef.value;\n    if (element) {\n      PanelUtils.PanelUtils.highlightElement(element);\n    }\n  }\n\n  #render(): void {\n    if (!this.#syncSetting) {\n      throw new Error('SyncSection is not properly initialized');\n    }\n\n    // TODO: this should not probably happen in render, instead, the setting\n    // should be disabled.\n    const checkboxDisabled = !this.#syncInfo.isSyncActive || !this.#syncInfo.arePreferencesSynced;\n    this.#syncSetting?.setDisabled(checkboxDisabled);\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    Lit.render(html`\n      <style>${syncSectionStyles}</style>\n      <fieldset>\n        ${renderAccountInfo(this.#syncInfo)}\n        ${renderSettingCheckboxIfNeeded(this.#syncInfo, this.#syncSetting)}\n        ${renderGdpSectionIfNeeded({\n          receiveBadgesSetting: this.#receiveBadgesSetting,\n          receiveBadgesSettingContainerRef: this.#receiveBadgesSettingContainerRef,\n          gdpProfile: this.#gdpProfile,\n          isEligibleToCreateProfile: this.#isEligibleToCreateGdpProfile,\n          onSignUpSuccess: this.#fetchGdpDetails.bind(this),\n        })}\n      </fieldset>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  async #fetchGdpDetails(): Promise<void> {\n    if (!Host.GdpClient.isGdpProfilesAvailable()) {\n      return;\n    }\n\n    const getProfileResponse = await Host.GdpClient.GdpClient.instance().getProfile();\n    if (!getProfileResponse) {\n      return;\n    }\n\n    this.#gdpProfile = getProfileResponse.profile ?? undefined;\n    this.#isEligibleToCreateGdpProfile = getProfileResponse.isEligible;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n}\n\nfunction renderSettingCheckboxIfNeeded(\n    syncInfo: Host.InspectorFrontendHostAPI.SyncInformation,\n    syncSetting: Common.Settings.Setting<boolean>): Lit.LitTemplate {\n  if (!syncInfo.accountEmail) {\n    return Lit.nothing;\n  }\n\n  // clang-format off\n  return html`\n    <div class=\"setting-checkbox-container\">\n      <setting-checkbox class=\"setting-checkbox\" .data=${{setting: syncSetting}}>\n      </setting-checkbox>\n      ${renderWarningIfNeeded(syncInfo)}\n    </div>\n  `;\n  // clang-format on\n}\n\nfunction renderWarningIfNeeded(syncInfo: Host.InspectorFrontendHostAPI.SyncInformation): Lit.LitTemplate {\n  const hasWarning = !syncInfo.isSyncActive || !syncInfo.arePreferencesSynced;\n  if (!hasWarning) {\n    return Lit.nothing;\n  }\n\n  const warningLink = !syncInfo.isSyncActive ?\n      'chrome://settings/syncSetup' as Platform.DevToolsPath.UrlString :\n      'chrome://settings/syncSetup/advanced' as Platform.DevToolsPath.UrlString;\n  const warningText =\n      !syncInfo.isSyncActive ? i18nString(UIStrings.syncDisabled) : i18nString(UIStrings.preferencesSyncDisabled);\n  const handleClick = (event: Event): void => {\n    const rootTarget = SDK.TargetManager.TargetManager.instance().rootTarget();\n    if (rootTarget === null) {\n      return;\n    }\n\n    void rootTarget.targetAgent().invoke_createTarget({url: warningLink}).then(result => {\n      if (result.getError()) {\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(warningLink);\n      }\n    });\n    event.consume();\n  };\n  // clang-format off\n  return html`\n    <devtools-button\n      aria-describedby=settings-sync-info\n      .title=${warningText}\n      .iconName=${'info'}\n      .variant=${Buttons.Button.Variant.ICON}\n      .size=${Buttons.Button.Size.SMALL}\n      @click=${handleClick}>\n    </devtools-button>\n    <devtools-tooltip\n        id=settings-sync-info\n        variant=simple>\n      ${warningText}\n    </devtools-tooltip>\n  `;\n  // clang-format on\n}\n\nfunction renderAccountInfo(syncInfo: Host.InspectorFrontendHostAPI.SyncInformation): Lit.LitTemplate {\n  if (!syncInfo.accountEmail) {\n    // clang-format off\n    return html`\n      <div class=\"not-signed-in\">${i18nString(UIStrings.notSignedIn)}</div>\n    `;\n    // clang-format on\n  }\n\n  // clang-format off\n  return html`\n    <div class=\"account-info\">\n      <img class=\"account-avatar\" src=\"data:image/png;base64, ${syncInfo.accountImage}\" alt=\"Account avatar\" />\n      <div class=\"account-email\">\n        <span>${i18nString(UIStrings.signedIn)}</span>\n        <span>${syncInfo.accountEmail}</span>\n      </div>\n    </div>`;\n  // clang-format on\n}\n\nfunction renderGdpSectionIfNeeded({\n  receiveBadgesSetting,\n  receiveBadgesSettingContainerRef,\n  gdpProfile,\n  isEligibleToCreateProfile,\n  onSignUpSuccess,\n}: {\n  receiveBadgesSettingContainerRef: Lit.Directives.Ref<HTMLElement>,\n  onSignUpSuccess: () => void,\n  receiveBadgesSetting?: Common.Settings.Setting<boolean>,\n  gdpProfile?: Host.GdpClient.Profile,\n  isEligibleToCreateProfile?: boolean,\n}): Lit.LitTemplate {\n  if (!Host.GdpClient.isGdpProfilesAvailable() || (!gdpProfile && !isEligibleToCreateProfile)) {\n    return Lit.nothing;\n  }\n  const hasReceiveBadgesCheckbox = Host.GdpClient.isBadgesEnabled() && receiveBadgesSetting;\n  function renderBrand(): Lit.LitTemplate {\n    // clang-format off\n    return html`\n      <div class=\"gdp-profile-header\">\n        <div class=\"gdp-logo\" role=\"img\" aria-label=\"Google Developer Program\"></div>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  // clang-format off\n  return html`\n    <div class=\"gdp-profile-container\" jslog=${VisualLogging.section().context('gdp-profile')}>\n      <div class=\"divider\"></div>\n      ${gdpProfile ? html`\n        <div class=\"gdp-profile-details-content\">\n          ${renderBrand()}\n          <div class=\"plan-details\">\n            ${getGdpSubscriptionText(gdpProfile)}\n            &nbsp;Â·&nbsp;\n            <x-link\n              jslog=${VisualLogging.link().track({click: true, keydown:'Enter|Space'}).context('view-profile')}\n              class=\"link\"\n              href=${Host.GdpClient.GOOGLE_DEVELOPER_PROGRAM_PROFILE_LINK}>\n              ${i18nString(UIStrings.viewProfile)}\n            </x-link></div>\n            ${hasReceiveBadgesCheckbox ? html`\n              <div class=\"setting-container\"  ${ref(receiveBadgesSettingContainerRef)}>\n                <setting-checkbox class=\"setting-checkbox\" .data=${{setting: receiveBadgesSetting}} @change=${(e: Event) => {\n                  const settingCheckbox = e.target as SettingsComponents.SettingCheckbox.SettingCheckbox;\n                  void Badges.UserBadges.instance().initialize().then(() => {\n                    if (!settingCheckbox.checked) {\n                      return;\n                    }\n\n                    Badges.UserBadges.instance().recordAction(Badges.BadgeAction.RECEIVE_BADGES_SETTING_ENABLED);\n                  });\n                }}></setting-checkbox>\n                ${renderDataDisclaimer()}\n              </div>` : Lit.nothing}\n        </div>\n      ` : html`\n        <div class=\"gdp-profile-sign-up-content\">\n          ${renderBrand()}\n          <devtools-button\n            @click=${() => PanelCommon.GdpSignUpDialog.show({\n              onSuccess: onSignUpSuccess\n            })}\n            .jslogContext=${'open-sign-up-dialog'}\n            .variant=${Buttons.Button.Variant.OUTLINED}>\n              ${i18nString(UIStrings.signUp)}\n          </devtools-button>\n        </div>\n      `}\n    </div>\n  `;\n  // clang-format on\n}\n\ncustomElements.define('devtools-sync-section', SyncSection);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-sync-section': SyncSection;\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2021 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n:host {\n  break-inside: avoid;\n  display: block;\n  width: 100%;\n  position: relative;\n}\n\nfieldset {\n  border: 0;\n  padding: 0;\n  padding: 4px 0 0;\n}\n\n.link {\n  color: var(--sys-color-primary);\n  text-decoration: underline;\n  cursor: pointer;\n  outline-offset: 2px;\n}\n\n.account-avatar {\n  border: 0;\n  border-radius: var(--sys-shape-corner-full);\n  display: block;\n  height: var(--sys-size-9);\n  width: var(--sys-size-9);\n}\n\n.account-info {\n  display: flex;\n  align-items: center;\n}\n\n.account-email {\n  display: flex;\n  flex-direction: column;\n  margin-left: 8px;\n}\n\n.not-signed-in {\n  padding-bottom: 4px;\n}\n\n.setting-checkbox-container {\n  display: flex;\n  align-items: center;\n  gap: var(--sys-size-2);\n}\n\n.setting-checkbox {\n  display: inline-block;\n}\n\n.gdp-profile-container {\n  padding-bottom: var(--sys-size-4);\n\n  & .divider {\n    left: 0;\n    position: absolute;\n    width: 100%;\n    height: var(--sys-size-1);\n    background: var(--sys-color-divider);\n  }\n\n  & .gdp-profile-header {\n    display: flex;\n    align-items: center;\n    gap: var(--sys-size-5);\n    font-family: \"Google Sans\", system-ui;\n    font-size: var(--sys-typescale-body3-size);\n    height: var(--sys-size-11);\n\n    & .gdp-logo {\n      background-image: var(--image-file-gdp-logo-light);\n      background-size: contain;\n      width: 203px;\n      height: 18px;\n      background-repeat: no-repeat;\n    }\n\n    :host-context(.theme-with-dark-background) & .gdp-logo {\n      background-image: var(--image-file-gdp-logo-dark);\n    }\n  }\n\n  & .gdp-profile-sign-up-content {\n    padding-top: var(--sys-size-7);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  & .gdp-profile-details-content {\n    padding-top: var(--sys-size-7);\n    font: var(--sys-typescale-body4-regular);\n\n    & .plan-details {\n      margin-top: var(--sys-size-3);\n      height: 18px;\n      display: flex;\n      align-items: center;\n    }\n\n    & .setting-container {\n      /* \\\\'<settigns-checkbox>\\\\' already provides 6px margin and we want to get rid of it here */\n      margin: calc(var(--sys-size-3) - 6px) -6px -6px;\n      display: flex;\n      align-items: center;\n      gap: var(--sys-size-2);\n    }\n\n    & .tooltip-content {\n      max-width: 278px;\n      padding: var(--sys-size-2) var(--sys-size-3);\n      font: var(--sys-typescale-body5-regular);\n    }\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./syncSection.css')} */`;"],
  "mappings": "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",
  "names": []
}
