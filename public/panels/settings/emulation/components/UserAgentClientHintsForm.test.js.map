{"version":3,"file":"UserAgentClientHintsForm.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/settings/emulation/components/UserAgentClientHintsForm.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as Protocol from '../../../../generated/protocol.js';\nimport {\n  getElementsWithinComponent,\n  getElementWithinComponent,\n  getEventPromise,\n  renderElementIntoDOM,\n} from '../../../../testing/DOMHelpers.js';\nimport {describeWithLocale} from '../../../../testing/EnvironmentHelpers.js';\nimport * as Buttons from '../../../../ui/components/buttons/buttons.js';\n\nimport * as EmulationComponents from './components.js';\n\ndescribeWithLocale('UserAgentClientHintsForm', () => {\n  const testMetaData = {\n    brands: [\n      {\n        brand: 'Brand1',\n        version: 'v1',\n      },\n      {\n        brand: 'Brand2',\n        version: 'v2',\n      },\n    ],\n    fullVersionList: [\n      {\n        brand: 'Brand3',\n        version: '1.2.3',\n      },\n    ],\n    formFactors: [] as string[],\n    fullVersion: '',\n    platform: '',\n    platformVersion: '',\n    architecture: '',\n    model: '',\n    mobile: false,\n  };\n\n  const renderUserAgentClientHintsForm = () => {\n    const component = new EmulationComponents.UserAgentClientHintsForm.UserAgentClientHintsForm();\n    renderElementIntoDOM(component);\n    return component;\n  };\n\n  it('renders the UA brands form with brand values', () => {\n    const component = renderUserAgentClientHintsForm();\n    component.value = {\n      metaData: testMetaData,\n    };\n\n    const brandInputs = getElementsWithinComponent(component, '.ua-brand-name-input', HTMLInputElement);\n    const brandInputValues = [...brandInputs].map(brandInput => brandInput.value);\n    assert.deepEqual(brandInputValues, ['Brand1', 'Brand2']);\n  });\n\n  it('renders the full-version-list brands form with brand values', () => {\n    const component = renderUserAgentClientHintsForm();\n    component.value = {\n      metaData: testMetaData,\n    };\n\n    const brandInputs = getElementsWithinComponent(component, '.fvl-brand-name-input', HTMLInputElement);\n    const brandInputValues = [...brandInputs].map(brandInput => brandInput.value);\n    assert.deepEqual(brandInputValues, ['Brand3']);\n  });\n\n  it('renders form factors checkboxes with initial values and updates on change', () => {\n    const component = renderUserAgentClientHintsForm();\n    const initialFormFactors: string[] = [\n      'Desktop',\n      'Mobile',\n    ];\n    component.value = {\n      metaData: {\n        ...testMetaData,\n        formFactors: initialFormFactors,\n      },\n    };\n\n    const checkboxLabels = getElementsWithinComponent(component, '.form-factor-checkbox-label', HTMLLabelElement);\n    assert.strictEqual(\n        checkboxLabels.length, EmulationComponents.UserAgentClientHintsForm.ALL_PROTOCOL_FORM_FACTORS.length,\n        'Should render all form factor checkboxes');\n\n    for (const ff of EmulationComponents.UserAgentClientHintsForm.ALL_PROTOCOL_FORM_FACTORS) {\n      const checkbox = getElementWithinComponent(component, `input[value=\"${ff}\"]`, HTMLInputElement);\n      assert.isNotNull(checkbox, `Checkbox for ${ff} should exist`);\n      if (initialFormFactors.includes(ff)) {\n        assert.isTrue(checkbox.checked, `Checkbox for ${ff} should be checked initially`);\n      } else {\n        assert.isFalse(checkbox.checked, `Checkbox for ${ff} should be unchecked initially`);\n      }\n    }\n\n    // Simulate changing a checkbox\n    const tabletCheckbox = getElementWithinComponent(component, 'input[value=Tablet]', HTMLInputElement);\n    assert.isFalse(tabletCheckbox.checked, 'Tablet checkbox should be unchecked before click');\n    tabletCheckbox.click();\n\n    const expectedFormFactorsAfterClick: string[] = [\n      'Desktop',\n      'Mobile',\n      'Tablet',\n    ];\n    const currentMetaData =\n        component.value.metaData as (Protocol.Emulation.UserAgentMetadata & {formFactors?: string[]});\n    assert.deepEqual(\n        currentMetaData.formFactors?.sort(), expectedFormFactorsAfterClick.sort(),\n        'Form factors in component value should be updated after checkbox click');\n\n    // Simulate unchecking a checkbox\n    const mobileCheckbox = getElementWithinComponent(component, 'input[value=\"Mobile\"]', HTMLInputElement);\n    assert.isTrue(mobileCheckbox.checked, 'Mobile checkbox should be checked before unchecking');\n    mobileCheckbox.click();\n\n    const expectedFormFactorsAfterUncheck: string[] = [\n      'Desktop',\n      'Tablet',\n    ];\n    const finalMetaData = component.value.metaData as (Protocol.Emulation.UserAgentMetadata & {formFactors?: string[]});\n    assert.deepEqual(\n        finalMetaData.formFactors?.sort(), expectedFormFactorsAfterUncheck.sort(),\n        'Form factors in component value should be updated after unchecking a checkbox');\n  });\n\n  it('Submitting the form returns metaData', async () => {\n    const component = renderUserAgentClientHintsForm();\n    component.value = {\n      metaData: testMetaData,\n      showSubmitButton: true,\n    };\n\n    const eventPromise = getEventPromise<EmulationComponents.UserAgentClientHintsForm.ClientHintsSubmitEvent>(\n        component, 'clienthintssubmit');\n\n    const submitButton = getElementWithinComponent(component, 'devtools-button', Buttons.Button.Button);\n    submitButton.click();\n\n    const event = await eventPromise;\n    assert.deepEqual(event.detail, {value: testMetaData});\n  });\n});\n"]}