{
  "version": 3,
  "sources": ["emulation/emulation-meta.prebundle.ts", "settings-meta.prebundle.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\n\nimport type * as Emulation from './emulation.js';\n\nconst UIStrings = {\n  /**\n   *@description Title of the Devices tab/tool. Devices refers to e.g. phones/tablets.\n   */\n  devices: 'Devices',\n  /**\n   *@description Command that opens the device emulation view.\n   */\n  showDevices: 'Show Devices',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/settings/emulation/emulation-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet loadedEmulationModule: (typeof Emulation|undefined);\n\nasync function loadEmulationModule(): Promise<typeof Emulation> {\n  if (!loadedEmulationModule) {\n    loadedEmulationModule = await import('./emulation.js');\n  }\n  return loadedEmulationModule;\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  commandPrompt: i18nLazyString(UIStrings.showDevices),\n  title: i18nLazyString(UIStrings.devices),\n  order: 30,\n  async loadView() {\n    const Emulation = await loadEmulationModule();\n    return new Emulation.DevicesSettingsTab.DevicesSettingsTab();\n  },\n  id: 'devices',\n  settings: [\n    'standard-emulated-device-list',\n    'custom-emulated-device-list',\n  ],\n  iconName: 'devices',\n});\n", "// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './emulation/emulation-meta.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as LegacyWrapper from '../../ui/components/legacy_wrapper/legacy_wrapper.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as Settings from './settings.js';\n\nconst UIStrings = {\n  /**\n   *@description Text for keyboard shortcuts\n   */\n  shortcuts: 'Shortcuts',\n  /**\n   *@description Text in Settings Screen of the Settings\n   */\n  preferences: 'Preferences',\n  /**\n   *@description Text in Settings Screen of the Settings\n   */\n  experiments: 'Experiments',\n  /**\n   *@description Title of Ignore list settings\n   */\n  ignoreList: 'Ignore list',\n  /**\n   *@description Command for showing the keyboard shortcuts in Settings\n   */\n  showShortcuts: 'Show Shortcuts',\n  /**\n   *@description Command for showing the preference tab in the Settings Screen\n   */\n  showPreferences: 'Show Preferences',\n  /**\n   *@description Command for showing the experiments tab in the Settings Screen\n   */\n  showExperiments: 'Show Experiments',\n  /**\n   *@description Command for showing the Ignore list settings\n   */\n  showIgnoreList: 'Show Ignore list',\n  /**\n   *@description Name of the Settings view\n   */\n  settings: 'Settings',\n  /**\n   *@description Text for the documentation of something\n   */\n  documentation: 'Documentation',\n  /**\n   *@description Text for AI innovation settings\n   */\n  aiInnovations: 'AI innovations',\n  /**\n   *@description Command for showing the AI innovation settings\n   */\n  showAiInnovations: 'Show AI innovations',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/settings/settings-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet loadedSettingsModule: (typeof Settings|undefined);\n\nasync function loadSettingsModule(): Promise<typeof Settings> {\n  if (!loadedSettingsModule) {\n    loadedSettingsModule = await import('./settings.js');\n  }\n  return loadedSettingsModule;\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  id: 'preferences',\n  title: i18nLazyString(UIStrings.preferences),\n  commandPrompt: i18nLazyString(UIStrings.showPreferences),\n  order: 0,\n  async loadView() {\n    const Settings = await loadSettingsModule();\n    return new Settings.SettingsScreen.GenericSettingsTab();\n  },\n  iconName: 'gear',\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  id: 'chrome-ai',\n  title: i18nLazyString(UIStrings.aiInnovations),\n  commandPrompt: i18nLazyString(UIStrings.showAiInnovations),\n  order: 2,\n  async loadView() {\n    const Settings = await loadSettingsModule();\n    return LegacyWrapper.LegacyWrapper.legacyWrapper(UI.Widget.VBox, new Settings.AISettingsTab.AISettingsTab());\n  },\n  iconName: 'button-magic',\n  settings: ['console-insights-enabled'],\n  condition: config => {\n    return (config?.aidaAvailability?.enabled &&\n            (config?.devToolsConsoleInsights?.enabled || config?.devToolsFreestyler?.enabled)) ??\n        false;\n  },\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  id: 'experiments',\n  title: i18nLazyString(UIStrings.experiments),\n  commandPrompt: i18nLazyString(UIStrings.showExperiments),\n  order: 3,\n  experiment: Root.Runtime.ExperimentName.ALL,\n  async loadView() {\n    const Settings = await loadSettingsModule();\n    return new Settings.SettingsScreen.ExperimentsSettingsTab();\n  },\n  iconName: 'experiment',\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  id: 'blackbox',\n  title: i18nLazyString(UIStrings.ignoreList),\n  commandPrompt: i18nLazyString(UIStrings.showIgnoreList),\n  order: 4,\n  async loadView() {\n    const Settings = await loadSettingsModule();\n    return new Settings.FrameworkIgnoreListSettingsTab.FrameworkIgnoreListSettingsTab();\n  },\n  iconName: 'clear-list',\n});\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  id: 'keybinds',\n  title: i18nLazyString(UIStrings.shortcuts),\n  commandPrompt: i18nLazyString(UIStrings.showShortcuts),\n  order: 100,\n  async loadView() {\n    const Settings = await loadSettingsModule();\n    return new Settings.KeybindsSettingsTab.KeybindsSettingsTab();\n  },\n  iconName: 'keyboard',\n});\n\nUI.ActionRegistration.registerActionExtension({\n  category: UI.ActionRegistration.ActionCategory.SETTINGS,\n  actionId: 'settings.show',\n  title: i18nLazyString(UIStrings.settings),\n  async loadActionDelegate() {\n    const Settings = await loadSettingsModule();\n    return new Settings.SettingsScreen.ActionDelegate();\n  },\n  iconClass: UI.ActionRegistration.IconClass.LARGEICON_SETTINGS_GEAR,\n  bindings: [\n    {\n      shortcut: 'F1',\n      keybindSets: [\n        UI.ActionRegistration.KeybindSet.DEVTOOLS_DEFAULT,\n      ],\n    },\n    {\n      shortcut: 'Shift+?',\n    },\n    {\n      platform: UI.ActionRegistration.Platforms.WINDOWS_LINUX,\n      shortcut: 'Ctrl+,',\n      keybindSets: [\n        UI.ActionRegistration.KeybindSet.VS_CODE,\n      ],\n    },\n    {\n      platform: UI.ActionRegistration.Platforms.MAC,\n      shortcut: 'Meta+,',\n      keybindSets: [\n        UI.ActionRegistration.KeybindSet.VS_CODE,\n      ],\n    },\n  ],\n});\n\nUI.ActionRegistration.registerActionExtension({\n  category: UI.ActionRegistration.ActionCategory.SETTINGS,\n  actionId: 'settings.documentation',\n  title: i18nLazyString(UIStrings.documentation),\n  async loadActionDelegate() {\n    const Settings = await loadSettingsModule();\n    return new Settings.SettingsScreen.ActionDelegate();\n  },\n});\n\nUI.ActionRegistration.registerActionExtension({\n  category: UI.ActionRegistration.ActionCategory.SETTINGS,\n  actionId: 'settings.shortcuts',\n  title: i18nLazyString(UIStrings.showShortcuts),\n  async loadActionDelegate() {\n    const Settings = await loadSettingsModule();\n    return new Settings.SettingsScreen.ActionDelegate();\n  },\n  bindings: [\n    {\n      platform: UI.ActionRegistration.Platforms.WINDOWS_LINUX,\n      shortcut: 'Ctrl+K Ctrl+S',\n      keybindSets: [\n        UI.ActionRegistration.KeybindSet.VS_CODE,\n      ],\n    },\n    {\n      platform: UI.ActionRegistration.Platforms.MAC,\n      shortcut: 'Meta+K Meta+S',\n      keybindSets: [\n        UI.ActionRegistration.KeybindSet.VS_CODE,\n      ],\n    },\n  ],\n});\n\nUI.ViewManager.registerLocationResolver({\n  name: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  category: UI.ViewManager.ViewLocationCategory.SETTINGS,\n  async loadResolver() {\n    const Settings = await loadSettingsModule();\n    return Settings.SettingsScreen.SettingsScreen.instance();\n  },\n});\n\nCommon.Revealer.registerRevealer({\n  contextTypes() {\n    return [\n      Common.Settings.Setting,\n      Root.Runtime.Experiment,\n    ];\n  },\n  destination: undefined,\n  async loadRevealer() {\n    const Settings = await loadSettingsModule();\n    return new Settings.SettingsScreen.Revealer();\n  },\n});\n\nUI.ContextMenu.registerItem({\n  location: UI.ContextMenu.ItemLocation.MAIN_MENU_FOOTER,\n  actionId: 'settings.shortcuts',\n  order: undefined,\n});\n\nUI.ContextMenu.registerItem({\n  location: UI.ContextMenu.ItemLocation.MAIN_MENU_HELP_DEFAULT,\n  actionId: 'settings.documentation',\n  order: undefined,\n});\n"],
  "mappings": "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",
  "names": ["i18n", "UI", "UIStrings", "str_", "i18nLazyString", "Settings"]
}
