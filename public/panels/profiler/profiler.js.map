{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/profiler/BottomUpProfileDataGrid.ts", "../../../../../../front_end/panels/profiler/ProfileDataGrid.ts", "../../../../../../front_end/panels/profiler/ChildrenProvider.ts", "../../../../../../front_end/panels/profiler/HeapProfilerPanel.ts", "../../../../../../front_end/panels/profiler/ProfilesPanel.ts", "../../ui/legacy/components/object_ui/objectValue.css.js", "heapProfiler.css.js", "../../../../../../front_end/panels/profiler/ProfileHeader.ts", "../../../../../../front_end/panels/profiler/ProfileLauncherView.ts", "../../../../../../front_end/panels/profiler/IsolateSelector.ts", "profileLauncherView.css.js", "../../../../../../front_end/panels/profiler/ProfileSidebarTreeElement.ts", "profilesPanel.css.js", "profilesSidebarTree.css.js", "../../../../../../front_end/panels/profiler/ProfileTypeRegistry.ts", "../../../../../../front_end/panels/profiler/HeapDetachedElementsView.ts", "../../../../../../front_end/panels/profiler/HeapDetachedElementsDataGrid.ts", "../../../../../../front_end/panels/profiler/ProfileView.ts", "../../../../../../front_end/panels/profiler/ProfileFlameChartDataProvider.ts", "../../../../../../front_end/panels/profiler/TopDownProfileDataGrid.ts", "../../../../../../front_end/panels/profiler/HeapProfileView.ts", "../../../../../../front_end/panels/profiler/HeapTimelineOverview.ts", "../../../../../../front_end/panels/profiler/HeapSnapshotView.ts", "../../../../../../front_end/panels/profiler/HeapSnapshotDataGrids.ts", "../../../../../../front_end/panels/profiler/HeapSnapshotGridNodes.ts", "../../../../../../front_end/panels/profiler/HeapSnapshotProxy.ts", "../../../../../../front_end/panels/profiler/ModuleUIStrings.ts", "../../../../../../front_end/panels/profiler/LiveHeapProfileView.ts", "liveHeapProfile.css.js"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2009 280 North Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n// Bottom Up Profiling shows the entire callstack backwards:\n// The root node is a representation of each individual function called, and each child of that node represents\n// a reverse-callstack showing how many of those calls came from it. So, unlike top-down, the statistics in\n// each child still represent the root node. We have to be particularly careful of recursion with this mode\n// because a root node can represent itself AND an ancestor.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as CPUProfile from '../../models/cpu_profile/cpu_profile.js';\nimport type * as UI from '../../ui/legacy/legacy.js';\n\nimport {type Formatter, ProfileDataGridNode, ProfileDataGridTree} from './ProfileDataGrid.js';\nimport type {TopDownProfileDataGridTree} from './TopDownProfileDataGrid.js';\n\nexport interface NodeInfo {\n  ancestor: CPUProfile.ProfileTreeModel.ProfileNode;\n  focusNode: CPUProfile.ProfileTreeModel.ProfileNode;\n  totalAccountedFor: boolean;\n}\n\nexport class BottomUpProfileDataGridNode extends ProfileDataGridNode {\n  remainingNodeInfos: NodeInfo[]|undefined;\n\n  constructor(profileNode: CPUProfile.ProfileTreeModel.ProfileNode, owningTree: TopDownProfileDataGridTree) {\n    super(profileNode, owningTree, profileNode.parent !== null && Boolean(profileNode.parent.parent));\n    this.remainingNodeInfos = [];\n  }\n\n  static sharedPopulate(container: BottomUpProfileDataGridNode|BottomUpProfileDataGridTree): void {\n    if (container.remainingNodeInfos === undefined) {\n      return;\n    }\n    const remainingNodeInfos = container.remainingNodeInfos;\n    const count = remainingNodeInfos.length;\n\n    for (let index = 0; index < count; ++index) {\n      const nodeInfo = remainingNodeInfos[index];\n      const ancestor = nodeInfo.ancestor;\n      const focusNode = nodeInfo.focusNode;\n      let child: BottomUpProfileDataGridNode|(BottomUpProfileDataGridNode | null) =\n          (container.findChild(ancestor) as BottomUpProfileDataGridNode | null);\n\n      // If we already have this child, then merge the data together.\n      if (child) {\n        const totalAccountedFor = nodeInfo.totalAccountedFor;\n\n        child.self += focusNode.self;\n\n        if (!totalAccountedFor) {\n          child.total += focusNode.total;\n        }\n      } else {\n        child = new BottomUpProfileDataGridNode(ancestor, (container.tree as TopDownProfileDataGridTree));\n\n        if (ancestor !== focusNode) {\n          // But the actual statistics from the \"root\" node (bottom of the callstack).\n          child.self = focusNode.self;\n          child.total = focusNode.total;\n        }\n\n        container.appendChild(child);\n      }\n\n      const parent = ancestor.parent;\n      if (parent?.parent) {\n        nodeInfo.ancestor = parent;\n        if (!child.remainingNodeInfos) {\n          child.remainingNodeInfos = [];\n        }\n        child.remainingNodeInfos.push(nodeInfo);\n      }\n    }\n\n    delete container.remainingNodeInfos;\n  }\n\n  takePropertiesFromProfileDataGridNode(profileDataGridNode: ProfileDataGridNode): void {\n    this.save();\n    this.self = profileDataGridNode.self;\n    this.total = profileDataGridNode.total;\n  }\n\n  /**\n   * When focusing, we keep just the members of the callstack.\n   */\n  keepOnlyChild(child: ProfileDataGridNode): void {\n    this.save();\n\n    this.removeChildren();\n    this.appendChild(child);\n  }\n\n  exclude(aCallUID: string): void {\n    if (this.remainingNodeInfos) {\n      this.populate();\n    }\n\n    this.save();\n\n    const children = this.children;\n    let index = this.children.length;\n\n    while (index--) {\n      (children[index] as BottomUpProfileDataGridNode).exclude(aCallUID);\n    }\n\n    const child = this.childrenByCallUID.get(aCallUID);\n\n    if (child) {\n      this.merge(child, true);\n    }\n  }\n\n  override restore(): void {\n    super.restore();\n\n    if (!this.children.length) {\n      this.setHasChildren(this.willHaveChildren(this.profileNode));\n    }\n  }\n\n  override merge(child: ProfileDataGridNode, shouldAbsorb: boolean): void {\n    this.self -= child.self;\n    super.merge(child, shouldAbsorb);\n  }\n\n  override populateChildren(): void {\n    BottomUpProfileDataGridNode.sharedPopulate(this);\n  }\n\n  willHaveChildren(profileNode: CPUProfile.ProfileTreeModel.ProfileNode): boolean {\n    // In bottom up mode, our parents are our children since we display an inverted tree.\n    // However, we don't want to show the very top parent since it is redundant.\n    return Boolean(profileNode.parent?.parent);\n  }\n}\n\nexport class BottomUpProfileDataGridTree extends ProfileDataGridTree {\n  override deepSearch: boolean;\n  remainingNodeInfos: NodeInfo[]|undefined;\n\n  constructor(\n      formatter: Formatter, searchableView: UI.SearchableView.SearchableView,\n      rootProfileNode: CPUProfile.ProfileTreeModel.ProfileNode, total: number) {\n    super(formatter, searchableView, total);\n    this.deepSearch = false;\n\n    // Iterate each node in pre-order.\n    let profileNodeUIDs = 0;\n    const profileNodeGroups = [[], [rootProfileNode]];\n    const visitedProfileNodesForCallUID = new Map<string, Set<number>>();\n\n    this.remainingNodeInfos = [];\n\n    for (let profileNodeGroupIndex = 0; profileNodeGroupIndex < profileNodeGroups.length; ++profileNodeGroupIndex) {\n      const parentProfileNodes = profileNodeGroups[profileNodeGroupIndex];\n      const profileNodes = profileNodeGroups[++profileNodeGroupIndex];\n      const count = profileNodes.length;\n\n      const profileNodeUIDValues = new WeakMap<CPUProfile.ProfileTreeModel.ProfileNode, number>();\n\n      for (let index = 0; index < count; ++index) {\n        const profileNode = profileNodes[index];\n\n        if (!profileNodeUIDValues.get(profileNode)) {\n          profileNodeUIDValues.set(profileNode, ++profileNodeUIDs);\n        }\n\n        if (profileNode.parent) {\n          // The total time of this ancestor is accounted for if we're in any form of recursive cycle.\n          let visitedNodes = visitedProfileNodesForCallUID.get(profileNode.callUID);\n          let totalAccountedFor = false;\n\n          if (!visitedNodes) {\n            visitedNodes = new Set();\n            visitedProfileNodesForCallUID.set(profileNode.callUID, visitedNodes);\n          } else {\n            // The total time for this node has already been accounted for iff one of it's parents has already been visited.\n            // We can do this check in this style because we are traversing the tree in pre-order.\n            const parentCount = parentProfileNodes.length;\n            for (let parentIndex = 0; parentIndex < parentCount; ++parentIndex) {\n              const parentUID = profileNodeUIDValues.get(parentProfileNodes[parentIndex]);\n              if (parentUID && visitedNodes.has(parentUID)) {\n                totalAccountedFor = true;\n                break;\n              }\n            }\n          }\n\n          const uid = profileNodeUIDValues.get(profileNode);\n          if (uid) {\n            visitedNodes.add(uid);\n          }\n\n          this.remainingNodeInfos.push({ancestor: profileNode, focusNode: profileNode, totalAccountedFor});\n        }\n\n        const children = profileNode.children;\n        if (children.length) {\n          profileNodeGroups.push(parentProfileNodes.concat([profileNode]));\n          profileNodeGroups.push(children);\n        }\n      }\n    }\n\n    // Populate the top level nodes.\n    ProfileDataGridNode.populate(this);\n\n    return this;\n  }\n\n  /**\n   * When focusing, we keep the entire callstack up to this ancestor.\n   */\n  override focus(profileDataGridNode: ProfileDataGridNode): void {\n    if (!profileDataGridNode) {\n      return;\n    }\n\n    this.save();\n\n    let currentNode: ProfileDataGridNode = profileDataGridNode;\n    let focusNode: (ProfileDataGridNode&BottomUpProfileDataGridNode)|ProfileDataGridNode = profileDataGridNode;\n\n    while (currentNode.parent && (currentNode instanceof BottomUpProfileDataGridNode)) {\n      currentNode.takePropertiesFromProfileDataGridNode(profileDataGridNode);\n\n      focusNode = currentNode;\n      currentNode = (currentNode.parent as ProfileDataGridNode);\n\n      if (currentNode instanceof BottomUpProfileDataGridNode) {\n        currentNode.keepOnlyChild(focusNode);\n      }\n    }\n\n    this.children = [focusNode];\n    this.total = profileDataGridNode.total;\n  }\n\n  override exclude(profileDataGridNode: ProfileDataGridNode): void {\n    if (!profileDataGridNode) {\n      return;\n    }\n\n    this.save();\n\n    const excludedCallUID = profileDataGridNode.callUID;\n    const excludedTopLevelChild = this.childrenByCallUID.get(excludedCallUID);\n\n    // If we have a top level node that is excluded, get rid of it completely (not keeping children),\n    // since bottom up data relies entirely on the root node.\n    if (excludedTopLevelChild) {\n      Platform.ArrayUtilities.removeElement(this.children, excludedTopLevelChild);\n    }\n\n    const children = this.children;\n    const count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      (children[index] as BottomUpProfileDataGridNode).exclude(excludedCallUID);\n    }\n\n    if (this.lastComparator) {\n      this.sort(this.lastComparator, true);\n    }\n  }\n\n  override populateChildren(): void {\n    BottomUpProfileDataGridNode.sharedPopulate(this);\n  }\n}\n", "// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\n/*\n * Copyright (C) 2009 280 North Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as CPUProfile from '../../models/cpu_profile/cpu_profile.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n   * @description This message is presented as a tooltip when developers investigate the performance\n   * of a page. The tooltip alerts developers that some parts of code in execution were not optimized\n   * (made to run faster) and that associated timing information must be considered with this in\n   * mind. The placeholder text is the reason the code was not optimized.\n   * @example {Optimized too many times} PH1\n   */\n  notOptimizedS: 'Not optimized: {PH1}',\n  /**\n   * @description Generic text with two placeholders separated by a comma\n   * @example {1 613 680} PH1\n   * @example {44 %} PH2\n   */\n  genericTextTwoPlaceholders: '{PH1}, {PH2}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfileDataGrid.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ProfileDataGridNode extends DataGrid.DataGrid.DataGridNode<unknown> {\n  searchMatchedSelfColumn: boolean;\n  searchMatchedTotalColumn: boolean;\n  searchMatchedFunctionColumn: boolean;\n  profileNode: CPUProfile.ProfileTreeModel.ProfileNode;\n  tree: ProfileDataGridTree;\n  childrenByCallUID: Map<string, ProfileDataGridNode>;\n  lastComparator: unknown;\n  callUID: string;\n  self: number;\n  total: number;\n  functionName: string;\n  readonly deoptReason: string;\n  url: Platform.DevToolsPath.UrlString;\n  linkElement: Element|null;\n  populated: boolean;\n  savedSelf?: number;\n  savedTotal?: number;\n  savedChildren?: Array<DataGrid.DataGrid.DataGridNode<unknown>>;\n\n  constructor(\n      profileNode: CPUProfile.ProfileTreeModel.ProfileNode, owningTree: ProfileDataGridTree, hasChildren: boolean) {\n    super(null, hasChildren);\n\n    this.searchMatchedSelfColumn = false;\n    this.searchMatchedTotalColumn = false;\n    this.searchMatchedFunctionColumn = false;\n\n    this.profileNode = profileNode;\n    this.tree = owningTree;\n    this.childrenByCallUID = new Map();\n    this.lastComparator = null;\n\n    this.callUID = profileNode.callUID;\n    this.self = profileNode.self;\n    this.total = profileNode.total;\n    this.functionName = UI.UIUtils.beautifyFunctionName(profileNode.functionName);\n    this.deoptReason = profileNode.deoptReason || '';\n    this.url = profileNode.url;\n    this.linkElement = null;\n\n    this.populated = false;\n  }\n\n  static sort<T>(gridNodeGroups: ProfileDataGridNode[][], comparator: (arg0: T, arg1: T) => number, force: boolean):\n      void {\n    for (let gridNodeGroupIndex = 0; gridNodeGroupIndex < gridNodeGroups.length; ++gridNodeGroupIndex) {\n      const gridNodes = gridNodeGroups[gridNodeGroupIndex];\n      const count = gridNodes.length;\n\n      for (let index = 0; index < count; ++index) {\n        const gridNode = gridNodes[index];\n\n        // If the grid node is collapsed, then don't sort children (save operation for later).\n        // If the grid node has the same sorting as previously, then there is no point in sorting it again.\n        if (!force && (!gridNode.expanded || gridNode.lastComparator === comparator)) {\n          if (gridNode.children.length) {\n            gridNode.shouldRefreshChildren = true;\n          }\n          continue;\n        }\n\n        gridNode.lastComparator = comparator;\n\n        const children = gridNode.children;\n        const childCount = children.length;\n\n        if (childCount) {\n          // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n          // @ts-expect-error\n          children.sort(comparator);\n\n          for (let childIndex = 0; childIndex < childCount; ++childIndex) {\n            children[childIndex].recalculateSiblings(childIndex);\n          }\n          gridNodeGroups.push((children as ProfileDataGridNode[]));\n        }\n      }\n    }\n  }\n\n  static merge(container: ProfileDataGridTree|ProfileDataGridNode, child: ProfileDataGridNode, shouldAbsorb: boolean):\n      void {\n    container.self += child.self;\n\n    if (!shouldAbsorb) {\n      container.total += child.total;\n    }\n\n    let children = container.children.slice();\n\n    container.removeChildren();\n\n    let count: number = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      if (!shouldAbsorb || children[index] !== child) {\n        container.appendChild((children[index] as ProfileDataGridNode));\n      }\n    }\n\n    children = child.children.slice();\n    count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      const orphanedChild = (children[index] as ProfileDataGridNode);\n      const existingChild = container.childrenByCallUID.get(orphanedChild.callUID);\n\n      if (existingChild) {\n        existingChild.merge((orphanedChild), false);\n      } else {\n        container.appendChild(orphanedChild);\n      }\n    }\n  }\n\n  static populate(container: ProfileDataGridTree|ProfileDataGridNode): void {\n    if (container.populated) {\n      return;\n    }\n    container.populated = true;\n\n    container.populateChildren();\n\n    const currentComparator = container.tree.lastComparator;\n\n    if (currentComparator) {\n      container.sort(currentComparator, true);\n    }\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    switch (columnId) {\n      case 'self': {\n        const cell = this.createValueCell(this.self, this.selfPercent, columnId);\n        cell.classList.toggle('highlight', this.searchMatchedSelfColumn);\n        return cell;\n      }\n\n      case 'total': {\n        const cell = this.createValueCell(this.total, this.totalPercent, columnId);\n        cell.classList.toggle('highlight', this.searchMatchedTotalColumn);\n        return cell;\n      }\n\n      case 'function': {\n        const cell = this.createTD(columnId);\n        cell.classList.toggle('highlight', this.searchMatchedFunctionColumn);\n        if (this.deoptReason) {\n          cell.classList.add('not-optimized');\n          const warningIcon = new IconButton.Icon.Icon();\n          warningIcon.name = 'warning-filled';\n          warningIcon.classList.add('profile-warn-marker', 'small');\n          UI.Tooltip.Tooltip.install(warningIcon, i18nString(UIStrings.notOptimizedS, {PH1: this.deoptReason}));\n          cell.appendChild(warningIcon);\n        }\n        UI.UIUtils.createTextChild(cell, this.functionName);\n        if (this.profileNode.scriptId === '0') {\n          return cell;\n        }\n        const urlElement = this.tree.formatter.linkifyNode(this);\n        if (!urlElement) {\n          return cell;\n        }\n        (urlElement as HTMLElement).style.maxWidth = '75%';\n        cell.appendChild(urlElement);\n        this.linkElement = urlElement;\n        return cell;\n      }\n    }\n    return super.createCell(columnId);\n  }\n\n  createValueCell(value: number, percent: number, columnId: string): HTMLElement {\n    const cell = document.createElement('td');\n    cell.classList.add('numeric-column');\n    const div = cell.createChild('div', 'profile-multiple-values');\n    const valueSpan = div.createChild('span');\n    const valueText = this.tree.formatter.formatValue(value, this);\n    valueSpan.textContent = valueText;\n    const percentSpan = div.createChild('span', 'percent-column');\n    const percentText = this.tree.formatter.formatPercent(percent, this);\n    percentSpan.textContent = percentText;\n    const valueAccessibleText = this.tree.formatter.formatValueAccessibleText(value, this);\n    this.setCellAccessibleName(\n        i18nString(UIStrings.genericTextTwoPlaceholders, {PH1: valueAccessibleText, PH2: percentText}), cell, columnId);\n    return cell;\n  }\n\n  sort(comparator: (arg0: ProfileDataGridNode, arg1: ProfileDataGridNode) => number, force: boolean): void {\n    const sortComparator =\n        (comparator as (arg0: DataGrid.DataGrid.DataGridNode<unknown>, arg1: DataGrid.DataGrid.DataGridNode<unknown>) =>\n             number);\n    return ProfileDataGridNode.sort([[this]], sortComparator, force);\n  }\n\n  override insertChild(child: DataGrid.DataGrid.DataGridNode<unknown>, index: number): void {\n    const profileDataGridNode = (child as ProfileDataGridNode);\n    super.insertChild(profileDataGridNode, index);\n    this.childrenByCallUID.set(profileDataGridNode.callUID, (profileDataGridNode));\n  }\n\n  override removeChild(profileDataGridNode: DataGrid.DataGrid.DataGridNode<unknown>): void {\n    super.removeChild(profileDataGridNode);\n    this.childrenByCallUID.delete((profileDataGridNode as ProfileDataGridNode).callUID);\n  }\n\n  override removeChildren(): void {\n    super.removeChildren();\n\n    this.childrenByCallUID.clear();\n  }\n\n  findChild(node: CPUProfile.ProfileTreeModel.ProfileNode): ProfileDataGridNode|null {\n    if (!node) {\n      return null;\n    }\n    return this.childrenByCallUID.get(node.callUID) || null;\n  }\n\n  get selfPercent(): number {\n    return this.self / this.tree.total * 100.0;\n  }\n\n  get totalPercent(): number {\n    return this.total / this.tree.total * 100.0;\n  }\n\n  override populate(): void {\n    ProfileDataGridNode.populate(this);\n  }\n\n  populateChildren(): void {\n    // Not implemented.\n  }\n\n  // When focusing and collapsing we modify lots of nodes in the tree.\n  // This allows us to restore them all to their original state when we revert.\n\n  save(): void {\n    if (this.savedChildren) {\n      return;\n    }\n\n    this.savedSelf = this.self;\n    this.savedTotal = this.total;\n\n    this.savedChildren = this.children.slice();\n  }\n\n  /**\n   * When focusing and collapsing we modify lots of nodes in the tree.\n   * This allows us to restore them all to their original state when we revert.\n   */\n  restore(): void {\n    if (!this.savedChildren) {\n      return;\n    }\n\n    if (this.savedSelf && this.savedTotal) {\n      this.self = this.savedSelf;\n      this.total = this.savedTotal;\n    }\n\n    this.removeChildren();\n\n    const children = this.savedChildren;\n    const count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      (children[index] as ProfileDataGridNode).restore();\n      this.appendChild(children[index]);\n    }\n  }\n\n  merge(child: ProfileDataGridNode, shouldAbsorb: boolean): void {\n    ProfileDataGridNode.merge(this, child, shouldAbsorb);\n  }\n}\n\nexport class ProfileDataGridTree implements UI.SearchableView.Searchable {\n  tree: this;\n  self: number;\n  children: ProfileDataGridNode[];\n  readonly formatter: Formatter;\n  readonly searchableView: UI.SearchableView.SearchableView;\n  total: number;\n  lastComparator: ((arg0: ProfileDataGridNode, arg1: ProfileDataGridNode) => number)|null;\n  childrenByCallUID: Map<string, ProfileDataGridNode>;\n  deepSearch: boolean;\n  populated: boolean;\n  searchResults!: Array<{\n    profileNode: ProfileDataGridNode,\n  }>;\n  savedTotal?: number;\n  savedChildren?: ProfileDataGridNode[]|null;\n  searchResultIndex = -1;\n\n  constructor(formatter: Formatter, searchableView: UI.SearchableView.SearchableView, total: number) {\n    this.tree = this;\n    this.self = 0;\n    this.children = [];\n    this.formatter = formatter;\n    this.searchableView = searchableView;\n    this.total = total;\n\n    this.lastComparator = null;\n    this.childrenByCallUID = new Map();\n    this.deepSearch = true;\n    this.populated = false;\n  }\n\n  static propertyComparator(property: string, isAscending: boolean):\n      (arg0: Record<string, unknown>, arg1: Record<string, unknown>) => number {\n    let comparator = propertyComparators[(isAscending ? 1 : 0)][property];\n\n    if (!comparator) {\n      if (isAscending) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        comparator = function(lhs: Record<string, any>, rhs: Record<string, any>): number {\n          if (lhs[property] < rhs[property]) {\n            return -1;\n          }\n\n          if (lhs[property] > rhs[property]) {\n            return 1;\n          }\n\n          return 0;\n        };\n      } else {\n        comparator = function(\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            lhs: Record<string, any>, rhs: Record<string, any>): number {\n          if (lhs[property] > rhs[property]) {\n            return -1;\n          }\n\n          if (lhs[property] < rhs[property]) {\n            return 1;\n          }\n\n          return 0;\n        };\n      }\n\n      propertyComparators[(isAscending ? 1 : 0)][property] = comparator;\n    }\n\n    return comparator as (arg0: Record<string, unknown>, arg1: Record<string, unknown>) => number;\n  }\n\n  get expanded(): boolean {\n    return true;\n  }\n\n  appendChild(child: ProfileDataGridNode): void {\n    this.insertChild(child, this.children.length);\n  }\n\n  focus(_profileDataGridNode: ProfileDataGridNode): void {\n  }\n\n  exclude(_profileDataGridNode: ProfileDataGridNode): void {\n  }\n\n  insertChild(child: ProfileDataGridNode, index: number): void {\n    const childToInsert = (child);\n    this.children.splice(index, 0, childToInsert);\n    this.childrenByCallUID.set(childToInsert.callUID, child);\n  }\n\n  removeChildren(): void {\n    this.children = [];\n    this.childrenByCallUID.clear();\n  }\n\n  populateChildren(): void {\n    // Not implemented.\n  }\n\n  findChild(node: CPUProfile.ProfileTreeModel.ProfileNode): ProfileDataGridNode|null {\n    if (!node) {\n      return null;\n    }\n    return this.childrenByCallUID.get(node.callUID) || null;\n  }\n\n  sort<T>(comparator: (arg0: T, arg1: T) => number, force: boolean): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // @ts-expect-error\n    return ProfileDataGridNode.sort([[this]], comparator, force);\n  }\n\n  save(): void {\n    if (this.savedChildren) {\n      return;\n    }\n\n    this.savedTotal = this.total;\n    this.savedChildren = this.children.slice();\n  }\n\n  restore(): void {\n    if (!this.savedChildren) {\n      return;\n    }\n\n    this.children = this.savedChildren;\n    if (this.savedTotal) {\n      this.total = this.savedTotal;\n    }\n\n    const children = this.children;\n    const count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      (children[index]).restore();\n    }\n\n    this.savedChildren = null;\n  }\n\n  matchFunction(searchConfig: UI.SearchableView.SearchConfig): ((arg0: ProfileDataGridNode) => boolean)|null {\n    const query = searchConfig.query.trim();\n    if (!query.length) {\n      return null;\n    }\n\n    const greaterThan = (query.startsWith('>'));\n    const lessThan = (query.startsWith('<'));\n    let equalTo: true|boolean = (query.startsWith('=') || ((greaterThan || lessThan) && query.indexOf('=') === 1));\n    const percentUnits = (query.endsWith('%'));\n    const millisecondsUnits = (query.length > 2 && query.endsWith('ms'));\n    const secondsUnits = (!millisecondsUnits && query.endsWith('s'));\n\n    let queryNumber = parseFloat(query);\n    if (greaterThan || lessThan || equalTo) {\n      if (equalTo && (greaterThan || lessThan)) {\n        queryNumber = parseFloat(query.substring(2));\n      } else {\n        queryNumber = parseFloat(query.substring(1));\n      }\n    }\n\n    const queryNumberMilliseconds = (secondsUnits ? (queryNumber * 1000) : queryNumber);\n\n    // Make equalTo implicitly true if it wasn't specified there is no other operator.\n    if (!isNaN(queryNumber) && !(greaterThan || lessThan)) {\n      equalTo = true;\n    }\n\n    const matcher = Platform.StringUtilities.createPlainTextSearchRegex(query, 'i');\n\n    function matchesQuery(profileDataGridNode: ProfileDataGridNode): boolean {\n      profileDataGridNode.searchMatchedSelfColumn = false;\n      profileDataGridNode.searchMatchedTotalColumn = false;\n      profileDataGridNode.searchMatchedFunctionColumn = false;\n\n      if (percentUnits) {\n        if (lessThan) {\n          if (profileDataGridNode.selfPercent < queryNumber) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.totalPercent < queryNumber) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        } else if (greaterThan) {\n          if (profileDataGridNode.selfPercent > queryNumber) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.totalPercent > queryNumber) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        }\n\n        if (equalTo) {\n          if (profileDataGridNode.selfPercent === queryNumber) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.totalPercent === queryNumber) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        }\n      } else if (millisecondsUnits || secondsUnits) {\n        if (lessThan) {\n          if (profileDataGridNode.self < queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.total < queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        } else if (greaterThan) {\n          if (profileDataGridNode.self > queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.total > queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        }\n\n        if (equalTo) {\n          if (profileDataGridNode.self === queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.total === queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        }\n      }\n\n      if (profileDataGridNode.functionName.match(matcher) ||\n          (profileDataGridNode.url && profileDataGridNode.url.match(matcher))) {\n        profileDataGridNode.searchMatchedFunctionColumn = true;\n      }\n\n      if (profileDataGridNode.searchMatchedSelfColumn || profileDataGridNode.searchMatchedTotalColumn ||\n          profileDataGridNode.searchMatchedFunctionColumn) {\n        profileDataGridNode.refresh();\n        return true;\n      }\n\n      return false;\n    }\n    return matchesQuery;\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, _shouldJump: boolean, jumpBackwards?: boolean): void {\n    this.onSearchCanceled();\n    const matchesQuery = this.matchFunction(searchConfig);\n    if (!matchesQuery) {\n      return;\n    }\n\n    this.searchResults = [];\n    const deepSearch = this.deepSearch;\n    let current: DataGrid.DataGrid.DataGridNode<unknown>|null;\n    for (current = this.children[0]; current; current = current.traverseNextNode(!deepSearch, null, !deepSearch)) {\n      const item = (current as ProfileDataGridNode | null);\n      if (!item) {\n        break;\n      }\n\n      if (matchesQuery(item)) {\n        this.searchResults.push({profileNode: item});\n      }\n    }\n    this.searchResultIndex = jumpBackwards ? 0 : this.searchResults.length - 1;\n    this.searchableView.updateSearchMatchesCount(this.searchResults.length);\n    this.searchableView.updateCurrentMatchIndex(this.searchResultIndex);\n  }\n\n  onSearchCanceled(): void {\n    if (this.searchResults) {\n      for (let i = 0; i < this.searchResults.length; ++i) {\n        const profileNode = this.searchResults[i].profileNode;\n        profileNode.searchMatchedSelfColumn = false;\n        profileNode.searchMatchedTotalColumn = false;\n        profileNode.searchMatchedFunctionColumn = false;\n        profileNode.refresh();\n      }\n    }\n\n    this.searchResults = [];\n    this.searchResultIndex = -1;\n  }\n\n  jumpToNextSearchResult(): void {\n    if (!this.searchResults?.length) {\n      return;\n    }\n    this.searchResultIndex = (this.searchResultIndex + 1) % this.searchResults.length;\n    this.jumpToSearchResult(this.searchResultIndex);\n  }\n\n  jumpToPreviousSearchResult(): void {\n    if (!this.searchResults?.length) {\n      return;\n    }\n    this.searchResultIndex = (this.searchResultIndex - 1 + this.searchResults.length) % this.searchResults.length;\n    this.jumpToSearchResult(this.searchResultIndex);\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsWholeWordSearch(): boolean {\n    return false;\n  }\n\n  supportsRegexSearch(): boolean {\n    return false;\n  }\n\n  jumpToSearchResult(index: number): void {\n    const searchResult = this.searchResults[index];\n    if (!searchResult) {\n      return;\n    }\n    const profileNode = searchResult.profileNode;\n    profileNode.revealAndSelect();\n    this.searchableView.updateCurrentMatchIndex(index);\n  }\n}\n\nconst propertyComparators: Array<Record<string, unknown>> = [{}, {}];\n\nexport interface Formatter {\n  formatValue(value: number, node: ProfileDataGridNode): string;\n  formatValueAccessibleText(value: number, node: ProfileDataGridNode): string;\n  formatPercent(value: number, node: ProfileDataGridNode): string;\n  linkifyNode(node: ProfileDataGridNode): Element|null;\n}\n", "// Copyright 2019 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\n\nexport interface ChildrenProvider {\n  dispose(): void;\n  nodePosition(snapshotObjectId: number): Promise<number>;\n  isEmpty(): Promise<boolean>;\n  serializeItemsRange(startPosition: number, endPosition: number):\n      Promise<HeapSnapshotModel.HeapSnapshotModel.ItemsRange>;\n  sortAndRewind(comparator: HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig): Promise<void>;\n}\n", "// Copyright 2017 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {HeapSnapshotView} from './HeapSnapshotView.js';\nimport type {ProfileType} from './ProfileHeader.js';\nimport {ProfilesPanel} from './ProfilesPanel.js';\nimport {instance} from './ProfileTypeRegistry.js';\n\nconst UIStrings = {\n  /**\n   * @description A context menu item in the Heap Profiler Panel of a profiler tool\n   */\n  revealInSummaryView: 'Reveal in Summary view',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapProfilerPanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet heapProfilerPanelInstance: HeapProfilerPanel;\nexport class HeapProfilerPanel extends ProfilesPanel implements UI.ContextMenu.Provider<SDK.RemoteObject.RemoteObject>,\n                                                                UI.ActionRegistration.ActionDelegate {\n  constructor() {\n    const registry = instance;\n    const profileTypes = [\n      registry.heapSnapshotProfileType,\n      registry.trackingHeapSnapshotProfileType,\n      registry.samplingHeapProfileType,\n      registry.detachedElementProfileType,\n    ];\n    super('heap-profiler', profileTypes as ProfileType[], 'profiler.heap-toggle-recording');\n  }\n\n  static instance(): HeapProfilerPanel {\n    if (!heapProfilerPanelInstance) {\n      heapProfilerPanelInstance = new HeapProfilerPanel();\n    }\n    return heapProfilerPanelInstance;\n  }\n\n  appendApplicableItems(_event: Event, contextMenu: UI.ContextMenu.ContextMenu, object: SDK.RemoteObject.RemoteObject):\n      void {\n    if (!this.isShowing()) {\n      return;\n    }\n\n    if (!object.objectId) {\n      return;\n    }\n    const objectId = object.objectId;\n\n    const heapProfiles = instance.heapSnapshotProfileType.getProfiles();\n    if (!heapProfiles.length) {\n      return;\n    }\n\n    const heapProfilerModel = object.runtimeModel().heapProfilerModel();\n    if (!heapProfilerModel) {\n      return;\n    }\n\n    function revealInView(this: ProfilesPanel, viewName: string): void {\n      void heapProfilerModel.snapshotObjectIdForObjectId(objectId).then(result => {\n        if (this.isShowing() && result) {\n          this.showObject(result, viewName);\n        }\n      });\n    }\n\n    contextMenu.revealSection().appendItem(\n        i18nString(UIStrings.revealInSummaryView), revealInView.bind(this, 'Summary'),\n        {jslogContext: 'reveal-in-summary'});\n  }\n\n  handleAction(_context: UI.Context.Context, _actionId: string): boolean {\n    const panel = UI.Context.Context.instance().flavor(HeapProfilerPanel);\n    console.assert(Boolean(panel) && panel instanceof HeapProfilerPanel);\n    if (panel) {\n      panel.toggleRecord();\n    }\n    return true;\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    UI.Context.Context.instance().setFlavor(HeapProfilerPanel, this);\n    // Record the memory tool load time.\n    Host.userMetrics.panelLoaded('heap-profiler', 'DevTools.Launch.HeapProfiler');\n  }\n\n  override willHide(): void {\n    UI.Context.Context.instance().setFlavor(HeapProfilerPanel, null);\n    super.willHide();\n  }\n\n  override showObject(snapshotObjectId: string, perspectiveName: string): void {\n    const registry = instance;\n    const heapProfiles = registry.heapSnapshotProfileType.getProfiles();\n    for (let i = 0; i < heapProfiles.length; i++) {\n      const profile = heapProfiles[i];\n      // FIXME: allow to choose snapshot if there are several options.\n      if (profile.maxJSObjectId >= parseInt(snapshotObjectId, 10)) {\n        this.showProfile(profile);\n        const view = (this.viewForProfile(profile) as HeapSnapshotView);\n        void view.selectLiveObject(perspectiveName, snapshotObjectId);\n        break;\n      }\n    }\n  }\n}\n", "// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\n/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport '../../ui/legacy/legacy.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\n// eslint-disable-next-line rulesdir/es-modules-import\nimport objectValueStyles from '../../ui/legacy/components/object_ui/objectValue.css.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport heapProfilerStyles from './heapProfiler.css.js';\nimport {\n  type DataDisplayDelegate,\n  ProfileEvents as ProfileTypeEvents,\n  ProfileHeader,\n  type ProfileType,\n} from './ProfileHeader.js';\nimport {Events as ProfileLauncherEvents, ProfileLauncherView} from './ProfileLauncherView.js';\nimport {ProfileSidebarTreeElement} from './ProfileSidebarTreeElement.js';\nimport profilesPanelStyles from './profilesPanel.css.js';\nimport profilesSidebarTreeStyles from './profilesSidebarTree.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in Profiles Panel of a profiler tool\n   * @example {'.js', '.json'} PH1\n   */\n  cantLoadFileSupportedFile: 'Can’t load file. Supported file extensions: \\'\\'{PH1}\\'\\'.',\n  /**\n   * @description Text in Profiles Panel of a profiler tool\n   */\n  cantLoadProfileWhileAnother: 'Can’t load profile while another profile is being recorded.',\n  /**\n   * @description Text in Profiles Panel of a profiler tool\n   */\n  profileLoadingFailed: 'Profile loading failed',\n  /**\n   * @description Text in Profiles Panel of a profiler tool\n   * @example {cannot open file} PH1\n   */\n  failReason: 'Reason: {PH1}.',\n  /**\n   * @description Text in Profiles Panel of a profiler tool\n   * @example {2} PH1\n   */\n  runD: 'Run {PH1}',\n  /**\n   * @description Text in Profiles Panel of a profiler tool\n   */\n  profiles: 'Profiles',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfilesPanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ProfilesPanel extends UI.Panel.PanelWithSidebar implements DataDisplayDelegate {\n  readonly profileTypes: ProfileType[];\n  profilesItemTreeElement: ProfilesSidebarTreeElement;\n  sidebarTree: UI.TreeOutline.TreeOutlineInShadow;\n  profileViews: HTMLDivElement;\n  readonly toolbarElement: HTMLDivElement;\n  toggleRecordAction: UI.ActionRegistration.Action;\n  readonly toggleRecordButton: UI.Toolbar.ToolbarButton;\n  readonly #saveToFileAction: UI.ActionRegistration.Action;\n  readonly profileViewToolbar: UI.Toolbar.Toolbar;\n  profileGroups: Record<string, ProfileGroup>;\n  launcherView: ProfileLauncherView;\n  visibleView!: UI.Widget.Widget|undefined;\n  readonly profileToView: Array<{\n    profile: ProfileHeader,\n    view: UI.Widget.Widget,\n  }>;\n  typeIdToSidebarSection: Record<string, ProfileTypeSidebarSection>;\n  fileSelectorElement!: HTMLInputElement;\n  selectedProfileType?: ProfileType;\n  constructor(name: string, profileTypes: ProfileType[], recordingActionId: string) {\n    super(name);\n    this.profileTypes = profileTypes;\n    this.registerRequiredCSS(objectValueStyles, profilesPanelStyles, heapProfilerStyles);\n\n    const mainContainer = new UI.Widget.VBox();\n    this.splitWidget().setMainWidget(mainContainer);\n\n    this.profilesItemTreeElement = new ProfilesSidebarTreeElement(this);\n\n    this.sidebarTree = new UI.TreeOutline.TreeOutlineInShadow();\n    this.sidebarTree.registerRequiredCSS(profilesSidebarTreeStyles);\n    this.sidebarTree.element.classList.add('profiles-sidebar-tree-box');\n    this.panelSidebarElement().appendChild(this.sidebarTree.element);\n\n    this.sidebarTree.appendChild(this.profilesItemTreeElement);\n\n    this.sidebarTree.element.addEventListener('keydown', this.onKeyDown.bind(this), false);\n\n    this.profileViews = document.createElement('div');\n    this.profileViews.id = 'profile-views';\n    this.profileViews.classList.add('vbox');\n    mainContainer.element.appendChild(this.profileViews);\n\n    this.toolbarElement = document.createElement('div');\n    this.toolbarElement.classList.add('profiles-toolbar');\n    mainContainer.element.insertBefore(this.toolbarElement, mainContainer.element.firstChild);\n\n    this.panelSidebarElement().classList.add('profiles-tree-sidebar');\n    const toolbarContainerLeft = document.createElement('div');\n    toolbarContainerLeft.classList.add('profiles-toolbar');\n    toolbarContainerLeft.setAttribute('jslog', `${VisualLogging.toolbar('profiles-sidebar')}`);\n    this.panelSidebarElement().insertBefore(toolbarContainerLeft, this.panelSidebarElement().firstChild);\n    const toolbar = toolbarContainerLeft.createChild('devtools-toolbar');\n    toolbar.wrappable = true;\n    this.toggleRecordAction = UI.ActionRegistry.ActionRegistry.instance().getAction(recordingActionId);\n    this.toggleRecordButton = UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction);\n    toolbar.appendToolbarItem(this.toggleRecordButton);\n\n    toolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton('profiler.clear-all'));\n    toolbar.appendSeparator();\n    toolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton('profiler.load-from-file'));\n    this.#saveToFileAction = UI.ActionRegistry.ActionRegistry.instance().getAction('profiler.save-to-file');\n    this.#saveToFileAction.setEnabled(false);\n    toolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(this.#saveToFileAction));\n    toolbar.appendSeparator();\n    toolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton('components.collect-garbage'));\n\n    this.profileViewToolbar = this.toolbarElement.createChild('devtools-toolbar');\n    this.profileViewToolbar.wrappable = true;\n    this.profileViewToolbar.setAttribute('jslog', `${VisualLogging.toolbar('profile-view')}`);\n\n    this.profileGroups = {};\n    this.launcherView = new ProfileLauncherView(this);\n    this.launcherView.addEventListener(ProfileLauncherEvents.PROFILE_TYPE_SELECTED, this.onProfileTypeSelected, this);\n\n    this.profileToView = [];\n\n    this.typeIdToSidebarSection = {};\n\n    const types = this.profileTypes;\n    for (let i = 0; i < types.length; i++) {\n      this.registerProfileType(types[i]);\n    }\n    this.launcherView.restoreSelectedProfileType();\n    this.profilesItemTreeElement.select();\n    this.showLauncherView();\n    this.createFileSelectorElement();\n\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.SUSPEND_STATE_CHANGED, this.onSuspendStateChanged, this);\n    UI.Context.Context.instance().addFlavorChangeListener(\n        SDK.CPUProfilerModel.CPUProfilerModel, this.updateProfileTypeSpecificUI, this);\n    UI.Context.Context.instance().addFlavorChangeListener(\n        SDK.HeapProfilerModel.HeapProfilerModel, this.updateProfileTypeSpecificUI, this);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    let handled = false;\n    if (event.key === 'ArrowDown' && !event.altKey) {\n      handled = this.sidebarTree.selectNext();\n    } else if (event.key === 'ArrowUp' && !event.altKey) {\n      handled = this.sidebarTree.selectPrevious();\n    }\n    if (handled) {\n      event.consume(true);\n    }\n  }\n\n  override searchableView(): UI.SearchableView.SearchableView|null {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const visibleView = (this.visibleView as any);\n    return visibleView?.searchableView ? visibleView.searchableView() : null;\n  }\n\n  createFileSelectorElement(): void {\n    if (this.fileSelectorElement) {\n      this.element.removeChild(this.fileSelectorElement);\n    }\n    this.fileSelectorElement = UI.UIUtils.createFileSelectorElement(this.loadFromFile.bind(this));\n    this.element.appendChild(this.fileSelectorElement);\n  }\n\n  findProfileTypeByExtension(fileName: string): ProfileType|null {\n    return this.profileTypes.find(\n               type => Boolean(type.fileExtension()) && fileName.endsWith(type.fileExtension() || '')) ||\n        null;\n  }\n\n  async loadFromFile(file: File): Promise<void> {\n    this.createFileSelectorElement();\n\n    const profileType = this.findProfileTypeByExtension(file.name);\n    if (!profileType) {\n      const extensions = new Set(this.profileTypes.map(type => type.fileExtension()).filter(ext => ext));\n      Common.Console.Console.instance().error(\n          i18nString(UIStrings.cantLoadFileSupportedFile, {PH1: Array.from(extensions).join('\\', \\'')}));\n      return;\n    }\n\n    if (Boolean(profileType.profileBeingRecorded())) {\n      Common.Console.Console.instance().error(i18nString(UIStrings.cantLoadProfileWhileAnother));\n      return;\n    }\n\n    const error = await profileType.loadFromFile(file);\n    if (error && 'message' in error) {\n      void UI.UIUtils.MessageDialog.show(\n          i18nString(UIStrings.profileLoadingFailed), i18nString(UIStrings.failReason, {PH1: error.message}), undefined,\n          'profile-loading-failed');\n    }\n  }\n\n  toggleRecord(): boolean {\n    if (!this.toggleRecordAction.enabled()) {\n      return true;\n    }\n    const toggleButton = Platform.DOMUtilities.deepActiveElement(this.element.ownerDocument);\n    const type = this.selectedProfileType;\n    if (!type) {\n      return true;\n    }\n    const isProfiling = type.buttonClicked();\n    this.updateToggleRecordAction(isProfiling);\n    if (isProfiling) {\n      this.launcherView.profileStarted();\n      if (type.hasTemporaryView()) {\n        this.showProfile(type.profileBeingRecorded());\n      }\n    } else {\n      this.launcherView.profileFinished();\n    }\n    if (toggleButton) {\n      (toggleButton as HTMLElement).focus();\n    }\n    return true;\n  }\n\n  onSuspendStateChanged(): void {\n    this.updateToggleRecordAction(this.toggleRecordAction.toggled());\n  }\n\n  updateToggleRecordAction(toggled: boolean): void {\n    const hasSelectedTarget = Boolean(\n        UI.Context.Context.instance().flavor(SDK.CPUProfilerModel.CPUProfilerModel) ||\n        UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel));\n    const enable = toggled || (!SDK.TargetManager.TargetManager.instance().allTargetsSuspended() && hasSelectedTarget);\n    this.toggleRecordAction.setEnabled(enable);\n    this.toggleRecordAction.setToggled(toggled);\n    if (enable) {\n      this.toggleRecordButton.setTitle(this.selectedProfileType ? this.selectedProfileType.buttonTooltip : '');\n    } else {\n      this.toggleRecordButton.setTitle(UI.UIUtils.anotherProfilerActiveLabel());\n    }\n    if (this.selectedProfileType) {\n      this.launcherView.updateProfileType(this.selectedProfileType, enable);\n    }\n  }\n\n  profileBeingRecordedRemoved(): void {\n    this.updateToggleRecordAction(false);\n    this.launcherView.profileFinished();\n  }\n\n  onProfileTypeSelected(event: Common.EventTarget.EventTargetEvent<ProfileType>): void {\n    this.selectedProfileType = event.data;\n    this.updateProfileTypeSpecificUI();\n  }\n\n  updateProfileTypeSpecificUI(): void {\n    if (this.selectedProfileType?.isInstantProfile()) {\n      this.toggleRecordButton.toggleOnClick(false);\n    }\n    this.updateToggleRecordAction(this.toggleRecordAction.toggled());\n  }\n\n  reset(): void {\n    this.profileTypes.forEach(type => type.reset());\n\n    delete this.visibleView;\n\n    this.profileGroups = {};\n    this.updateToggleRecordAction(false);\n    this.launcherView.profileFinished();\n\n    this.sidebarTree.element.classList.remove('some-expandable');\n\n    this.launcherView.detach();\n    this.profileViews.removeChildren();\n    this.profileViewToolbar.removeToolbarItems();\n\n    this.profilesItemTreeElement.select();\n    this.showLauncherView();\n  }\n\n  showLauncherView(): void {\n    this.closeVisibleView();\n    this.profileViewToolbar.removeToolbarItems();\n    this.launcherView.show(this.profileViews);\n    this.visibleView = this.launcherView;\n    this.toolbarElement.classList.add('hidden');\n    this.#saveToFileAction.setEnabled(false);\n  }\n\n  registerProfileType(profileType: ProfileType): void {\n    this.launcherView.addProfileType(profileType);\n    const profileTypeSection = new ProfileTypeSidebarSection(this, profileType);\n    this.typeIdToSidebarSection[profileType.id] = profileTypeSection;\n    this.sidebarTree.appendChild(profileTypeSection);\n\n    function onAddProfileHeader(this: ProfilesPanel, event: Common.EventTarget.EventTargetEvent<ProfileHeader>): void {\n      this.addProfileHeader(event.data);\n    }\n\n    function onRemoveProfileHeader(\n        this: ProfilesPanel, event: Common.EventTarget.EventTargetEvent<ProfileHeader>): void {\n      this.removeProfileHeader(event.data);\n    }\n\n    function profileComplete(this: ProfilesPanel, event: Common.EventTarget.EventTargetEvent<ProfileHeader>): void {\n      this.showProfile(event.data);\n    }\n\n    profileType.addEventListener(ProfileTypeEvents.VIEW_UPDATED, this.updateProfileTypeSpecificUI, this);\n    profileType.addEventListener(ProfileTypeEvents.ADD_PROFILE_HEADER, onAddProfileHeader, this);\n    profileType.addEventListener(ProfileTypeEvents.REMOVE_PROFILE_HEADER, onRemoveProfileHeader, this);\n    profileType.addEventListener(ProfileTypeEvents.PROFILE_COMPLETE, profileComplete, this);\n\n    const profiles = profileType.getProfiles();\n    for (let i = 0; i < profiles.length; i++) {\n      this.addProfileHeader(profiles[i]);\n    }\n  }\n\n  showLoadFromFileDialog(): void {\n    this.fileSelectorElement.click();\n  }\n\n  addProfileHeader(profile: ProfileHeader): void {\n    const profileType = profile.profileType();\n    const typeId = profileType.id;\n    this.typeIdToSidebarSection[typeId].addProfileHeader(profile);\n    if (!this.visibleView || this.visibleView === this.launcherView) {\n      this.showProfile(profile);\n    }\n  }\n\n  removeProfileHeader(profile: ProfileHeader): void {\n    if (profile.profileType().profileBeingRecorded() === profile) {\n      this.profileBeingRecordedRemoved();\n    }\n\n    const i = this.indexOfViewForProfile(profile);\n    if (i !== -1) {\n      this.profileToView.splice(i, 1);\n    }\n\n    const typeId = profile.profileType().id;\n    const sectionIsEmpty = this.typeIdToSidebarSection[typeId].removeProfileHeader(profile);\n\n    // No other item will be selected if there aren't any other profiles, so\n    // make sure that view gets cleared when the last profile is removed.\n    if (sectionIsEmpty) {\n      this.profilesItemTreeElement.select();\n      this.showLauncherView();\n    }\n  }\n\n  showProfile(profile: ProfileHeader|null): UI.Widget.Widget|null {\n    if (!profile ||\n        (profile.profileType().profileBeingRecorded() === profile) && !profile.profileType().hasTemporaryView()) {\n      return null;\n    }\n\n    const view = this.viewForProfile(profile);\n    if (view === this.visibleView) {\n      return view;\n    }\n\n    this.closeVisibleView();\n    UI.Context.Context.instance().setFlavor(ProfileHeader, profile);\n    this.#saveToFileAction.setEnabled(profile.canSaveToFile());\n\n    view.show(this.profileViews);\n    this.toolbarElement.classList.remove('hidden');\n    this.visibleView = view;\n\n    const profileTypeSection = this.typeIdToSidebarSection[profile.profileType().id];\n    const sidebarElement = profileTypeSection.sidebarElementForProfile(profile);\n    if (sidebarElement) {\n      sidebarElement.revealAndSelect();\n    }\n\n    this.profileViewToolbar.removeToolbarItems();\n\n    void (view as unknown as UI.View.View).toolbarItems().then(items => {\n      items.map(item => this.profileViewToolbar.appendToolbarItem(item));\n    });\n\n    return view;\n  }\n\n  showObject(_snapshotObjectId: string, _perspectiveName: string): void {\n  }\n\n  async linkifyObject(_nodeIndex: number): Promise<Element|null> {\n    return null;\n  }\n\n  viewForProfile(profile: ProfileHeader): UI.Widget.Widget {\n    const index = this.indexOfViewForProfile(profile);\n    if (index !== -1) {\n      return this.profileToView[index].view;\n    }\n    const view = profile.createView(this);\n    view.element.classList.add('profile-view');\n    this.profileToView.push({profile, view});\n    return view;\n  }\n\n  indexOfViewForProfile(profile: ProfileHeader): number {\n    return this.profileToView.findIndex(item => item.profile === profile);\n  }\n\n  closeVisibleView(): void {\n    UI.Context.Context.instance().setFlavor(ProfileHeader, null);\n    this.#saveToFileAction.setEnabled(false);\n    if (this.visibleView) {\n      this.visibleView.detach();\n    }\n    delete this.visibleView;\n  }\n\n  override focus(): void {\n    this.sidebarTree.focus();\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    UI.Context.Context.instance().setFlavor(ProfilesPanel, this);\n  }\n\n  override willHide(): void {\n    UI.Context.Context.instance().setFlavor(ProfilesPanel, null);\n    super.willHide();\n  }\n}\n\nexport class ProfileTypeSidebarSection extends UI.TreeOutline.TreeElement {\n  dataDisplayDelegate: DataDisplayDelegate;\n  readonly profileTreeElements: ProfileSidebarTreeElement[];\n  profileGroups: Record<string, ProfileGroup>;\n\n  constructor(dataDisplayDelegate: DataDisplayDelegate, profileType: ProfileType) {\n    super(profileType.treeItemTitle, true);\n    this.selectable = false;\n    this.dataDisplayDelegate = dataDisplayDelegate;\n    this.profileTreeElements = [];\n    this.profileGroups = {};\n    this.expand();\n    this.hidden = true;\n    this.setCollapsible(false);\n  }\n\n  addProfileHeader(profile: ProfileHeader): void {\n    this.hidden = false;\n    const profileType = profile.profileType();\n    let sidebarParent: (ProfileGroupSidebarTreeElement|null)|this = this;\n    const profileTreeElement =\n        (profile.createSidebarTreeElement(this.dataDisplayDelegate) as ProfileSidebarTreeElement);\n    this.profileTreeElements.push(profileTreeElement);\n\n    if (!profile.fromFile() && profileType.profileBeingRecorded() !== profile) {\n      const profileTitle = profile.title;\n      let group: ProfileGroup = this.profileGroups[profileTitle];\n      if (!group) {\n        group = new ProfileGroup();\n        this.profileGroups[profileTitle] = group;\n      }\n      group.profileSidebarTreeElements.push(profileTreeElement);\n\n      const groupSize = group.profileSidebarTreeElements.length;\n      if (groupSize === 2) {\n        // Make a group UI.TreeOutline.TreeElement now that there are 2 profiles.\n        group.sidebarTreeElement = new ProfileGroupSidebarTreeElement(this.dataDisplayDelegate, profile.title);\n\n        const firstProfileTreeElement = group.profileSidebarTreeElements[0];\n        // Insert at the same index for the first profile of the group.\n        const index = this.children().indexOf(firstProfileTreeElement);\n        this.insertChild(group.sidebarTreeElement, index);\n\n        // Move the first profile to the group.\n        const selected = firstProfileTreeElement.selected;\n        this.removeChild(firstProfileTreeElement);\n        group.sidebarTreeElement.appendChild(firstProfileTreeElement);\n        if (selected) {\n          firstProfileTreeElement.revealAndSelect();\n        }\n\n        firstProfileTreeElement.setSmall(true);\n        firstProfileTreeElement.setMainTitle(i18nString(UIStrings.runD, {PH1: 1}));\n\n        if (this.treeOutline) {\n          this.treeOutline.element.classList.add('some-expandable');\n        }\n      }\n\n      if (groupSize >= 2) {\n        sidebarParent = group.sidebarTreeElement;\n        profileTreeElement.setSmall(true);\n        profileTreeElement.setMainTitle(i18nString(UIStrings.runD, {PH1: groupSize}));\n      }\n    }\n\n    if (sidebarParent) {\n      sidebarParent.appendChild(profileTreeElement);\n    }\n  }\n\n  removeProfileHeader(profile: ProfileHeader): boolean {\n    const index = this.sidebarElementIndex(profile);\n    if (index === -1) {\n      return false;\n    }\n    const profileTreeElement = this.profileTreeElements[index];\n    this.profileTreeElements.splice(index, 1);\n\n    let sidebarParent: (ProfileGroupSidebarTreeElement|null)|this = this;\n    const group = this.profileGroups[profile.title];\n    if (group) {\n      const groupElements = group.profileSidebarTreeElements;\n      groupElements.splice(groupElements.indexOf(profileTreeElement), 1);\n      if (groupElements.length === 1) {\n        // Move the last profile out of its group and remove the group.\n        const pos = sidebarParent.children().indexOf((group.sidebarTreeElement as ProfileGroupSidebarTreeElement));\n        if (group.sidebarTreeElement) {\n          group.sidebarTreeElement.removeChild(groupElements[0]);\n        }\n        this.insertChild(groupElements[0], pos);\n        groupElements[0].setSmall(false);\n        groupElements[0].setMainTitle(profile.title);\n        if (group.sidebarTreeElement) {\n          this.removeChild(group.sidebarTreeElement);\n        }\n      }\n      if (groupElements.length !== 0) {\n        sidebarParent = group.sidebarTreeElement;\n      }\n    }\n    if (sidebarParent) {\n      sidebarParent.removeChild(profileTreeElement);\n    }\n    profileTreeElement.dispose();\n\n    if (this.childCount()) {\n      return false;\n    }\n    this.hidden = true;\n    return true;\n  }\n\n  sidebarElementForProfile(profile: ProfileHeader): ProfileSidebarTreeElement|null {\n    const index = this.sidebarElementIndex(profile);\n    return index === -1 ? null : this.profileTreeElements[index];\n  }\n\n  sidebarElementIndex(profile: ProfileHeader): number {\n    const elements = this.profileTreeElements;\n    for (let i = 0; i < elements.length; i++) {\n      if (elements[i].profile === profile) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  override onattach(): void {\n    this.listItemElement.classList.add('profiles-tree-section');\n  }\n}\n\nexport class ProfileGroup {\n  profileSidebarTreeElements: ProfileSidebarTreeElement[];\n  sidebarTreeElement: ProfileGroupSidebarTreeElement|null;\n  constructor() {\n    this.profileSidebarTreeElements = [];\n    this.sidebarTreeElement = null;\n  }\n}\n\nexport class ProfileGroupSidebarTreeElement extends UI.TreeOutline.TreeElement {\n  readonly dataDisplayDelegate: DataDisplayDelegate;\n  profileTitle: string;\n  override toggleOnClick: boolean;\n\n  constructor(dataDisplayDelegate: DataDisplayDelegate, title: string) {\n    super('', true);\n    this.selectable = false;\n    this.dataDisplayDelegate = dataDisplayDelegate;\n    this.profileTitle = title;\n    this.expand();\n    this.toggleOnClick = true;\n  }\n\n  override onselect(): boolean {\n    const hasChildren = this.childCount() > 0;\n    if (hasChildren) {\n      const lastChild = this.lastChild();\n      if (lastChild instanceof ProfileSidebarTreeElement) {\n        this.dataDisplayDelegate.showProfile(lastChild.profile);\n      }\n    }\n    return hasChildren;\n  }\n\n  override onattach(): void {\n    this.listItemElement.classList.add('profile-group-sidebar-tree-item');\n    this.listItemElement.createChild('div', 'icon');\n    this.listItemElement.createChild('div', 'titles no-subtitle')\n        .createChild('span', 'title-container')\n        .createChild('span', 'title')\n        .textContent = this.profileTitle;\n  }\n}\n\nexport class ProfilesSidebarTreeElement extends UI.TreeOutline.TreeElement {\n  readonly panel: ProfilesPanel;\n\n  constructor(panel: ProfilesPanel) {\n    super('', false);\n    this.selectable = true;\n    this.panel = panel;\n  }\n\n  override onselect(): boolean {\n    this.panel.showLauncherView();\n    return true;\n  }\n\n  override onattach(): void {\n    this.listItemElement.classList.add('profile-launcher-view-tree-item');\n    this.listItemElement.createChild('div', 'titles no-subtitle')\n        .createChild('span', 'title-container')\n        .createChild('span', 'title')\n        .textContent = i18nString(UIStrings.profiles);\n    this.setLeadingIcons([IconButton.Icon.create('tune')]);\n  }\n}\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'profiler.clear-all': {\n        const profilesPanel = context.flavor(ProfilesPanel);\n        if (profilesPanel !== null) {\n          profilesPanel.reset();\n          return true;\n        }\n        return false;\n      }\n      case 'profiler.load-from-file': {\n        const profilesPanel = context.flavor(ProfilesPanel);\n        if (profilesPanel !== null) {\n          profilesPanel.showLoadFromFileDialog();\n          return true;\n        }\n        return false;\n      }\n      case 'profiler.save-to-file': {\n        const profile = context.flavor(ProfileHeader);\n        if (profile !== null) {\n          profile.saveToFile();\n          return true;\n        }\n        return false;\n      }\n      case 'profiler.delete-profile': {\n        const profile = context.flavor(ProfileHeader);\n        if (profile !== null) {\n          profile.profileType().removeProfile(profile);\n          return true;\n        }\n        return false;\n      }\n    }\n    return false;\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2015 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.value.object-value-node:hover {\n  background-color: var(--sys-color-state-hover-on-subtle);\n}\n\n.object-value-function-prefix,\n.object-value-boolean {\n  color: var(--sys-color-token-attribute-value);\n}\n\n.object-value-function {\n  font-style: italic;\n}\n\n.object-value-function.linkified:hover {\n  --override-linkified-hover-background: rgb(0 0 0 / 10%);\n\n  background-color: var(--override-linkified-hover-background);\n  cursor: pointer;\n}\n\n.theme-with-dark-background .object-value-function.linkified:hover,\n:host-context(.theme-with-dark-background) .object-value-function.linkified:hover {\n  --override-linkified-hover-background: rgb(230 230 230 / 10%);\n}\n\n.object-value-number {\n  color: var(--sys-color-token-attribute-value);\n}\n\n.object-value-bigint {\n  color: var(--sys-color-token-comment);\n}\n\n.object-value-string,\n.object-value-regexp,\n.object-value-symbol {\n  white-space: pre;\n  unicode-bidi: -webkit-isolate;\n  color: var(--sys-color-token-property-special);\n}\n\n.object-value-node {\n  position: relative;\n  vertical-align: baseline;\n  color: var(--sys-color-token-variable);\n  white-space: nowrap;\n}\n\n.object-value-null,\n.object-value-undefined {\n  color: var(--sys-color-state-disabled);\n}\n\n.object-value-unavailable {\n  color: var(--sys-color-token-tag);\n}\n\n.object-value-calculate-value-button:hover {\n  text-decoration: underline;\n}\n\n.object-properties-section-custom-section {\n  display: inline-flex;\n  flex-direction: column;\n}\n\n.theme-with-dark-background .object-value-number,\n:host-context(.theme-with-dark-background) .object-value-number,\n.theme-with-dark-background .object-value-boolean,\n:host-context(.theme-with-dark-background) .object-value-boolean {\n  --override-primitive-dark-mode-color: hsl(252deg 100% 75%);\n\n  color: var(--override-primitive-dark-mode-color);\n}\n\n.object-properties-section .object-description {\n  color: var(--sys-color-token-subtle);\n}\n\n.value .object-properties-preview {\n  white-space: nowrap;\n}\n\n.name {\n  color: var(--sys-color-token-tag);\n  flex-shrink: 0;\n}\n\n.object-properties-preview .name {\n  color: var(--sys-color-token-subtle);\n}\n\n@media (forced-colors: active) {\n  .object-value-calculate-value-button:hover {\n    forced-color-adjust: none;\n    color: Highlight;\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./objectValue.css')} */`;", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright (C) 2009 Google Inc. All rights reserved.\n * Copyright (C) 2010 Apple Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n.heap-snapshot-view {\n  overflow: hidden;\n}\n\n.heap-snapshot-view .data-grid {\n  border: none;\n  flex: auto;\n\n  .data-container {\n    overflow-x: scroll;\n  }\n\n  .corner {\n    width: 100%;\n  }\n}\n\n.heap-snapshot-view .data-grid tr:empty {\n  height: 16px;\n  visibility: hidden;\n}\n\n.heap-snapshot-view .data-grid span.percent-column {\n  width: 35px !important; /* stylelint-disable-line declaration-no-important */\n}\n\n.heap-snapshot-view .object-value-object,\n.object-value-node {\n  display: inline;\n  position: static;\n}\n\n.heap-snapshot-view .object-value-string {\n  white-space: nowrap;\n}\n\n.heap-snapshot-view td.object-column .objects-count {\n  margin-left: 10px;\n  font-size: 11px;\n  color: var(--sys-color-token-subtle);\n}\n\n.heap-snapshot-view tr:not(.selected) .object-value-id {\n  color: var(--sys-color-token-subtle);\n}\n\n.profile-view .heap-tracking-overview {\n  flex: 0 0 80px;\n  height: 80px;\n}\n\n.heap-snapshot-view .retaining-paths-view {\n  overflow: hidden;\n}\n\n.heap-snapshot-view .heap-snapshot-view-resizer {\n  background-color: var(--sys-color-surface1);\n  display: flex;\n  flex: 0 0 21px;\n}\n\n.heap-snapshot-view td.object-column > div > span {\n  margin-right: 6px;\n}\n\n.heap-snapshot-view .heap-snapshot-view-resizer .title {\n  flex: 0 1 auto;\n  overflow: hidden;\n  white-space: nowrap;\n}\n\n.heap-snapshot-view .heap-snapshot-view-resizer .verticalResizerIcon {\n  /* stylelint-disable-next-line custom-property-pattern */\n  background-image: var(--image-file-toolbarResizerVertical);\n  background-repeat: no-repeat;\n  background-position: center;\n  flex: 0 0 28px;\n  margin-left: auto;\n}\n\n.heap-snapshot-view .heap-snapshot-view-resizer .title > span {\n  display: inline-block;\n  padding-top: 3px;\n  vertical-align: middle;\n  margin-left: 4px;\n  margin-right: 8px;\n}\n\n.heap-snapshot-view .heap-snapshot-view-resizer * {\n  pointer-events: none;\n}\n\n.heap-snapshot-view tr:not(.selected) td.object-column span.highlight {\n  background-color: inherit;\n}\n\n.heap-snapshot-view td.object-column span.heap-object-source-link {\n  float: right;\n\n  & > button.text-button.devtools-link {\n    background-color: inherit;\n    outline-offset: calc(-1 * var(--sys-size-1));\n    padding-inline: var(--sys-size-2) !important;  /* stylelint-disable-line declaration-no-important */\n  }\n}\n\n.heap-snapshot-view td.object-column span.heap-object-source-link:empty {\n  animation: fadeInOut 2s infinite;\n}\n\n.heap-snapshot-view td.object-column span.heap-object-source-link:empty::before {\n  content: \"\\\\b7\\\\b7\";\n  font-weight: bold;\n}\n\n@keyframes fadeInOut {\n  0% {\n    transform: rotate(0);\n  }\n\n  50% {\n    transform: rotate(0.5turn);\n  }\n\n  100% {\n    transform: rotate(1turn);\n  }\n}\n\n.heap-object-tag {\n  height: 14px;\n  width: 14px;\n}\n\n.heap-snapshot-view tr:not(.selected) td.object-column span.heap-object-tag,\n.heap-snapshot-view tr:not(.selected) td.object-column span.grayed {\n  color: var(--sys-color-token-subtle);\n}\n\n.heap-snapshot-view tr:not(.selected) .cycled-ancestor-node,\n.heap-snapshot-view tr:not(.selected) .unreachable-ancestor-node {\n  opacity: 60%;\n}\n\n#heap-recording-view .profile-view {\n  top: 80px;\n}\n\n.heap-overview-container {\n  overflow: hidden;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 80px;\n}\n\n#heap-recording-overview-grid .resources-dividers-label-bar {\n  pointer-events: auto;\n}\n\n.heap-recording-overview-canvas {\n  position: absolute;\n  inset: 20px 0 0;\n}\n\n.heap-snapshot-statistics-view {\n  overflow: auto;\n}\n\n.heap-snapshot-stats-pie-chart {\n  margin: 12px 30px;\n  flex-shrink: 0;\n}\n\n.heap-allocation-stack .stack-frame {\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid var(--sys-color-divider);\n  padding: 2px;\n}\n\n.heap-allocation-stack .stack-frame:focus {\n  background-color: var(--sys-color-tonal-container);\n  color: var(--sys-color-on-tonal-container);\n}\n\n.heap-allocation-stack .stack-frame:hover:not(:focus) {\n  background-color: var(--sys-color-state-hover-on-subtle);\n}\n\n.heap-allocation-stack .stack-frame .devtools-link {\n  color: var(--sys-color-primary);\n}\n\n.no-heap-allocation-stack {\n  padding: 5px;\n}\n\n@media (forced-colors: active) {\n  .cycled-ancestor-node {\n    opacity: 100%;\n  }\n\n  .heap-snapshot-view td.object-column .objects-count,\n  .heap-snapshot-view tr:not(.selected) td.object-column span.heap-object-tag,\n  .heap-snapshot-view tr:not(.selected) .object-value-id {\n    color: ButtonText;\n  }\n}\n\n.detached-elements-view {\n  overflow: auto;\n}\n\n/*# sourceURL=${import.meta.resolve('./heapProfiler.css')} */`;", "// Copyright 2017 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as Bindings from '../../models/bindings/bindings.js';\nimport type * as UI from '../../ui/legacy/legacy.js';\n\nexport class ProfileHeader extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #profileType: ProfileType;\n  title: string;\n  uid: number;\n  #fromFile: boolean;\n  tempFile: Bindings.TempFile.TempFile|null;\n\n  constructor(profileType: ProfileType, title: string) {\n    super();\n    this.#profileType = profileType;\n    this.title = title;\n    this.uid = profileType.incrementProfileUid();\n    this.#fromFile = false;\n\n    this.tempFile = null;\n  }\n\n  setTitle(title: string): void {\n    this.title = title;\n    this.dispatchEventToListeners(Events.PROFILE_TITLE_CHANGED, this);\n  }\n\n  profileType(): ProfileType {\n    return this.#profileType;\n  }\n\n  updateStatus(subtitle: string|null, wait?: boolean): void {\n    this.dispatchEventToListeners(Events.UPDATE_STATUS, new StatusUpdate(subtitle, wait));\n  }\n\n  /**\n   * Must be implemented by subclasses.\n   */\n  createSidebarTreeElement(_dataDisplayDelegate: DataDisplayDelegate): UI.TreeOutline.TreeElement {\n    throw new Error('Not implemented.');\n  }\n\n  createView(_dataDisplayDelegate: DataDisplayDelegate): UI.Widget.Widget {\n    throw new Error('Not implemented.');\n  }\n\n  removeTempFile(): void {\n    if (this.tempFile) {\n      this.tempFile.remove();\n    }\n  }\n\n  dispose(): void {\n  }\n\n  canSaveToFile(): boolean {\n    return false;\n  }\n\n  saveToFile(): void {\n    throw new Error('Not implemented.');\n  }\n\n  loadFromFile(_file: File): Promise<Error|DOMError|null> {\n    throw new Error('Not implemented.');\n  }\n\n  fromFile(): boolean {\n    return this.#fromFile;\n  }\n\n  setFromFile(): void {\n    this.#fromFile = true;\n  }\n\n  setProfile(_profile: Protocol.Profiler.Profile): void {\n  }\n}\n\nexport class StatusUpdate {\n  subtitle: string|null;\n  wait: boolean|undefined;\n  constructor(subtitle: string|null, wait: boolean|undefined) {\n    this.subtitle = subtitle;\n    this.wait = wait;\n  }\n}\n\nexport const enum Events {\n  UPDATE_STATUS = 'UpdateStatus',\n  PROFILE_TITLE_CHANGED = 'ProfileTitleChanged',\n}\n\nexport interface EventTypes {\n  [Events.UPDATE_STATUS]: StatusUpdate;\n  [Events.PROFILE_TITLE_CHANGED]: ProfileHeader;\n}\n\nexport class ProfileType extends Common.ObjectWrapper.ObjectWrapper<ProfileEventTypes> {\n  readonly #id: string;\n  readonly #name: string;\n  profiles: ProfileHeader[];\n  #profileBeingRecorded: ProfileHeader|null;\n  #nextProfileUid: number;\n\n  constructor(id: string, name: string) {\n    super();\n    this.#id = id;\n    this.#name = name;\n    this.profiles = [];\n    this.#profileBeingRecorded = null;\n    this.#nextProfileUid = 1;\n\n    if (!window.opener) {\n      window.addEventListener('pagehide', this.clearTempStorage.bind(this), false);\n    }\n  }\n\n  typeName(): string {\n    return '';\n  }\n\n  nextProfileUid(): number {\n    return this.#nextProfileUid;\n  }\n\n  incrementProfileUid(): number {\n    return this.#nextProfileUid++;\n  }\n\n  hasTemporaryView(): boolean {\n    return false;\n  }\n\n  fileExtension(): string|null {\n    return null;\n  }\n\n  get buttonTooltip(): string {\n    return '';\n  }\n\n  get id(): string {\n    return this.#id;\n  }\n\n  get treeItemTitle(): string {\n    return this.#name;\n  }\n\n  get name(): string {\n    return this.#name;\n  }\n\n  buttonClicked(): boolean {\n    return false;\n  }\n\n  get description(): string {\n    return '';\n  }\n\n  isInstantProfile(): boolean {\n    return false;\n  }\n\n  isEnabled(): boolean {\n    return true;\n  }\n\n  getProfiles(): ProfileHeader[] {\n    function isFinished(this: ProfileType, profile: ProfileHeader): boolean {\n      return this.#profileBeingRecorded !== profile;\n    }\n    return this.profiles.filter(isFinished.bind(this));\n  }\n\n  customContent(): Element|null {\n    return null;\n  }\n\n  setCustomContentEnabled(_enable: boolean): void {\n  }\n\n  loadFromFile(file: File): Promise<Error|DOMError|null> {\n    let name: string = file.name;\n    const fileExtension = this.fileExtension();\n    if (fileExtension && name.endsWith(fileExtension)) {\n      name = name.substr(0, name.length - fileExtension.length);\n    }\n    const profile = this.createProfileLoadedFromFile(name);\n    profile.setFromFile();\n    this.setProfileBeingRecorded(profile);\n    this.addProfile(profile);\n    return profile.loadFromFile(file);\n  }\n\n  createProfileLoadedFromFile(_title: string): ProfileHeader {\n    throw new Error('Not implemented');\n  }\n\n  addProfile(profile: ProfileHeader): void {\n    this.profiles.push(profile);\n    this.dispatchEventToListeners(ProfileEvents.ADD_PROFILE_HEADER, profile);\n  }\n\n  removeProfile(profile: ProfileHeader): void {\n    const index = this.profiles.indexOf(profile);\n    if (index === -1) {\n      return;\n    }\n    this.profiles.splice(index, 1);\n    this.disposeProfile(profile);\n  }\n\n  clearTempStorage(): void {\n    for (let i = 0; i < this.profiles.length; ++i) {\n      this.profiles[i].removeTempFile();\n    }\n  }\n\n  profileBeingRecorded(): ProfileHeader|null {\n    return this.#profileBeingRecorded;\n  }\n\n  setProfileBeingRecorded(profile: ProfileHeader|null): void {\n    this.#profileBeingRecorded = profile;\n  }\n\n  profileBeingRecordedRemoved(): void {\n  }\n\n  reset(): void {\n    for (const profile of this.profiles.slice()) {\n      this.disposeProfile(profile);\n    }\n    this.profiles = [];\n    this.#nextProfileUid = 1;\n  }\n\n  disposeProfile(profile: ProfileHeader): void {\n    this.dispatchEventToListeners(ProfileEvents.REMOVE_PROFILE_HEADER, profile);\n    profile.dispose();\n    if (this.#profileBeingRecorded === profile) {\n      this.profileBeingRecordedRemoved();\n      this.setProfileBeingRecorded(null);\n    }\n  }\n}\n\nexport const enum ProfileEvents {\n  ADD_PROFILE_HEADER = 'add-profile-header',\n  PROFILE_COMPLETE = 'profile-complete',\n  REMOVE_PROFILE_HEADER = 'remove-profile-header',\n  VIEW_UPDATED = 'view-updated',\n}\n\nexport interface ProfileEventTypes {\n  [ProfileEvents.ADD_PROFILE_HEADER]: ProfileHeader;\n  [ProfileEvents.PROFILE_COMPLETE]: ProfileHeader;\n  [ProfileEvents.REMOVE_PROFILE_HEADER]: ProfileHeader;\n  [ProfileEvents.VIEW_UPDATED]: void;\n}\n\nexport interface DataDisplayDelegate {\n  showProfile(profile: ProfileHeader|null): UI.Widget.Widget|null;\n  showObject(snapshotObjectId: string, perspectiveName: string): void;\n  linkifyObject(nodeIndex: number): Promise<Element|null>;\n}\n", "// Copyright 2011 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {IsolateSelector} from './IsolateSelector.js';\nimport type {ProfileType} from './ProfileHeader.js';\nimport profileLauncherViewStyles from './profileLauncherView.css.js';\nimport type {ProfilesPanel} from './ProfilesPanel.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in Profile Launcher View of a profiler tool\n   */\n  selectJavascriptVmInstance: 'Select JavaScript VM instance',\n  /**\n   * @description Text to load something\n   */\n  load: 'Load profile',\n  /**\n   * @description Control button text content in Profile Launcher View of a profiler tool\n   */\n  takeSnapshot: 'Take snapshot',\n  /**\n   * @description Text of an item that stops the running task\n   */\n  stop: 'Stop',\n  /**\n   * @description Control button text content in Profile Launcher View of a profiler tool\n   */\n  start: 'Start',\n  /**\n   * @description Profile type header element text content in Profile Launcher View of a profiler tool\n   */\n  selectProfilingType: 'Select profiling type',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfileLauncherView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ProfileLauncherView extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(\n    UI.Widget.VBox) {\n  readonly panel: ProfilesPanel;\n  #contentElement: HTMLElement;\n  readonly selectedProfileTypeSetting: Common.Settings.Setting<string>;\n  profileTypeHeaderElement: HTMLElement;\n  readonly profileTypeSelectorForm: HTMLElement;\n  controlButton: Buttons.Button.Button;\n  readonly loadButton: Buttons.Button.Button;\n  recordButtonEnabled: boolean;\n  typeIdToOptionElementAndProfileType: Map<string, {\n    optionElement: HTMLInputElement,\n    profileType: ProfileType,\n  }>;\n  isProfiling?: boolean;\n  isInstantProfile?: boolean;\n  isEnabled?: boolean;\n\n  constructor(profilesPanel: ProfilesPanel) {\n    super();\n    this.registerRequiredCSS(profileLauncherViewStyles);\n\n    this.panel = profilesPanel;\n    this.element.classList.add('profile-launcher-view');\n    this.#contentElement = this.element.createChild('div', 'profile-launcher-view-content vbox');\n\n    const profileTypeSelectorElement = this.#contentElement.createChild('div', 'vbox');\n    this.selectedProfileTypeSetting = Common.Settings.Settings.instance().createSetting('selected-profile-type', 'CPU');\n    this.profileTypeHeaderElement = profileTypeSelectorElement.createChild('h1');\n    this.profileTypeSelectorForm = profileTypeSelectorElement.createChild('form');\n    UI.ARIAUtils.markAsRadioGroup(this.profileTypeSelectorForm);\n\n    const isolateSelectorElement = this.#contentElement.createChild('div', 'vbox profile-isolate-selector-block');\n    isolateSelectorElement.createChild('h1').textContent = i18nString(UIStrings.selectJavascriptVmInstance);\n    const isolateSelector = new IsolateSelector();\n    const isolateSelectorElementChild = isolateSelectorElement.createChild('div', 'vbox profile-launcher-target-list');\n    isolateSelectorElementChild.classList.add('profile-launcher-target-list-container');\n    isolateSelector.show(isolateSelectorElementChild);\n    isolateSelectorElement.appendChild(isolateSelector.totalMemoryElement());\n\n    const buttonsDiv = this.#contentElement.createChild('div', 'hbox profile-launcher-buttons');\n    this.controlButton = UI.UIUtils.createTextButton('', this.controlButtonClicked.bind(this), {\n      jslogContext: 'profiler.heap-toggle-recording',\n      variant: Buttons.Button.Variant.PRIMARY,\n    });\n    this.loadButton = new Buttons.Button.Button();\n    this.loadButton\n        .data = {iconName: 'import', variant: Buttons.Button.Variant.OUTLINED, jslogContext: 'profiler.load-from-file'};\n    this.loadButton.textContent = i18nString(UIStrings.load);\n    this.loadButton.addEventListener('click', this.loadButtonClicked.bind(this));\n    buttonsDiv.appendChild(this.loadButton);\n    buttonsDiv.appendChild(this.controlButton);\n    this.recordButtonEnabled = true;\n\n    this.typeIdToOptionElementAndProfileType = new Map();\n  }\n\n  loadButtonClicked(): void {\n    const loadFromFileAction = UI.ActionRegistry.ActionRegistry.instance().getAction('profiler.load-from-file');\n    void loadFromFileAction.execute();\n  }\n\n  updateControls(): void {\n    if (this.isEnabled && this.recordButtonEnabled) {\n      this.controlButton.removeAttribute('disabled');\n    } else {\n      this.controlButton.setAttribute('disabled', '');\n    }\n    UI.Tooltip.Tooltip.install(\n        this.controlButton, this.recordButtonEnabled ? '' : UI.UIUtils.anotherProfilerActiveLabel());\n    if (this.isInstantProfile) {\n      this.controlButton.classList.remove('running');\n      this.controlButton.textContent = i18nString(UIStrings.takeSnapshot);\n    } else if (this.isProfiling) {\n      this.controlButton.classList.add('running');\n      this.controlButton.textContent = i18nString(UIStrings.stop);\n    } else {\n      this.controlButton.classList.remove('running');\n      this.controlButton.textContent = i18nString(UIStrings.start);\n    }\n    for (const {optionElement} of this.typeIdToOptionElementAndProfileType.values()) {\n      optionElement.disabled = Boolean(this.isProfiling);\n    }\n  }\n\n  profileStarted(): void {\n    this.isProfiling = true;\n    this.updateControls();\n  }\n\n  profileFinished(): void {\n    this.isProfiling = false;\n    this.updateControls();\n  }\n\n  updateProfileType(profileType: ProfileType, recordButtonEnabled: boolean): void {\n    this.isInstantProfile = profileType.isInstantProfile();\n    this.recordButtonEnabled = recordButtonEnabled;\n    this.isEnabled = profileType.isEnabled();\n    this.updateControls();\n  }\n\n  addProfileType(profileType: ProfileType): void {\n    const {radio, label} = UI.UIUtils.createRadioButton('profile-type', profileType.name, 'profiler.profile-type');\n    this.profileTypeSelectorForm.appendChild(label);\n    this.typeIdToOptionElementAndProfileType.set(profileType.id, {optionElement: radio, profileType});\n    radio.addEventListener('change', this.profileTypeChanged.bind(this, profileType), false);\n    const descriptionElement = this.profileTypeSelectorForm.createChild('p');\n    descriptionElement.textContent = profileType.description;\n    UI.ARIAUtils.setDescription(radio, profileType.description);\n    const customContent = profileType.customContent();\n    if (customContent) {\n      customContent.setAttribute('role', 'group');\n      customContent.setAttribute('aria-labelledby', `${radio.id}`);\n      this.profileTypeSelectorForm.createChild('p').appendChild(customContent);\n      profileType.setCustomContentEnabled(false);\n    }\n    const headerText = this.typeIdToOptionElementAndProfileType.size > 1 ? i18nString(UIStrings.selectProfilingType) :\n                                                                           profileType.name;\n    this.profileTypeHeaderElement.textContent = headerText;\n    UI.ARIAUtils.setLabel(this.profileTypeSelectorForm, headerText);\n  }\n\n  restoreSelectedProfileType(): void {\n    let typeId = this.selectedProfileTypeSetting.get();\n    if (!this.typeIdToOptionElementAndProfileType.has(typeId)) {\n      typeId = this.typeIdToOptionElementAndProfileType.keys().next().value as string;\n      this.selectedProfileTypeSetting.set(typeId);\n    }\n\n    const optionElementAndProfileType = (this.typeIdToOptionElementAndProfileType.get(typeId) as {\n      optionElement: HTMLInputElement,\n      profileType: ProfileType,\n    });\n    optionElementAndProfileType.optionElement.checked = true;\n    const type = optionElementAndProfileType.profileType;\n    for (const [id, {profileType}] of this.typeIdToOptionElementAndProfileType) {\n      const enabled = (id === typeId);\n      profileType.setCustomContentEnabled(enabled);\n    }\n    this.dispatchEventToListeners(Events.PROFILE_TYPE_SELECTED, type);\n  }\n\n  controlButtonClicked(): void {\n    this.panel.toggleRecord();\n  }\n\n  profileTypeChanged(profileType: ProfileType): void {\n    const typeId = this.selectedProfileTypeSetting.get();\n    const type = (this.typeIdToOptionElementAndProfileType.get(typeId) as {\n                   optionElement: HTMLInputElement,\n                   profileType: ProfileType,\n                 }).profileType;\n    type.setCustomContentEnabled(false);\n    profileType.setCustomContentEnabled(true);\n    this.dispatchEventToListeners(Events.PROFILE_TYPE_SELECTED, profileType);\n    this.isInstantProfile = profileType.isInstantProfile();\n    this.isEnabled = profileType.isEnabled();\n    this.updateControls();\n    this.selectedProfileTypeSetting.set(profileType.id);\n  }\n}\n\nexport const enum Events {\n  PROFILE_TYPE_SELECTED = 'ProfileTypeSelected',\n}\n\nexport interface EventTypes {\n  [Events.PROFILE_TYPE_SELECTED]: ProfileType;\n}\n", "// Copyright 2018 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n   * @description aria label for javascript VM instances target list in heap profiler\n   */\n  javascriptVmInstances: 'JavaScript VM instances',\n  /**\n   * @description Text in Isolate Selector of a profiler tool\n   */\n  totalJsHeapSize: 'Total JS heap size',\n  /**\n   * @description Total trend div title in Isolate Selector of a profiler tool\n   * @example {3} PH1\n   */\n  totalPageJsHeapSizeChangeTrend: 'Total page JS heap size change trend over the last {PH1} minutes.',\n  /**\n   * @description Total value div title in Isolate Selector of a profiler tool\n   */\n  totalPageJsHeapSizeAcrossAllVm: 'Total page JS heap size across all VM instances.',\n  /**\n   * @description Heap size change trend measured in kB/s\n   * @example {2 kB} PH1\n   */\n  changeRate: '{PH1}/s',\n  /**\n   * @description Text for isolate selector list items with positive change rate\n   * @example {1.0 kB} PH1\n   */\n  increasingBySPerSecond: 'increasing by {PH1} per second',\n  /**\n   * @description Text for isolate selector list items with negative change rate\n   * @example {1.0 kB} PH1\n   */\n  decreasingBySPerSecond: 'decreasing by {PH1} per second',\n  /**\n   * @description Heap div title in Isolate Selector of a profiler tool\n   */\n  heapSizeInUseByLiveJsObjects: 'Heap size in use by live JS objects.',\n  /**\n   * @description Trend div title in Isolate Selector of a profiler tool\n   * @example {3} PH1\n   */\n  heapSizeChangeTrendOverTheLastS: 'Heap size change trend over the last {PH1} minutes.',\n  /**\n   * @description Text to show an item is empty\n   */\n  empty: '(empty)',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/IsolateSelector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class IsolateSelector extends UI.Widget.VBox implements UI.ListControl.ListDelegate<ListItem>,\n                                                               SDK.IsolateManager.Observer {\n  readonly items: UI.ListModel.ListModel<ListItem>;\n  list: UI.ListControl.ListControl<ListItem>;\n  readonly itemByIsolate: Map<SDK.IsolateManager.Isolate, ListItem>;\n  readonly totalElement: HTMLDivElement;\n  totalValueDiv: HTMLElement;\n  readonly totalTrendDiv: HTMLElement;\n\n  constructor() {\n    super();\n\n    this.items = new UI.ListModel.ListModel();\n    this.list = new UI.ListControl.ListControl(this.items, this, UI.ListControl.ListMode.NonViewport);\n    this.list.element.classList.add('javascript-vm-instances-list');\n    UI.ARIAUtils.setLabel(this.list.element, i18nString(UIStrings.javascriptVmInstances));\n    this.contentElement.appendChild(this.list.element);\n\n    this.itemByIsolate = new Map();\n\n    this.totalElement = document.createElement('div');\n    this.totalElement.classList.add('profile-memory-usage-item');\n    this.totalElement.classList.add('hbox');\n    this.totalValueDiv = this.totalElement.createChild('div', 'profile-memory-usage-item-size');\n    this.totalTrendDiv = this.totalElement.createChild('div', 'profile-memory-usage-item-trend');\n    this.totalElement.createChild('div').textContent = i18nString(UIStrings.totalJsHeapSize);\n    const trendIntervalMinutes = Math.round(SDK.IsolateManager.MemoryTrendWindowMs / 60e3);\n    UI.Tooltip.Tooltip.install(\n        this.totalTrendDiv, i18nString(UIStrings.totalPageJsHeapSizeChangeTrend, {PH1: trendIntervalMinutes}));\n    UI.Tooltip.Tooltip.install(this.totalValueDiv, i18nString(UIStrings.totalPageJsHeapSizeAcrossAllVm));\n\n    SDK.IsolateManager.IsolateManager.instance().observeIsolates(this);\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.NAME_CHANGED, this.targetChanged, this);\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.INSPECTED_URL_CHANGED, this.targetChanged, this);\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    SDK.IsolateManager.IsolateManager.instance().addEventListener(\n        SDK.IsolateManager.Events.MEMORY_CHANGED, this.heapStatsChanged, this);\n  }\n\n  override willHide(): void {\n    SDK.IsolateManager.IsolateManager.instance().removeEventListener(\n        SDK.IsolateManager.Events.MEMORY_CHANGED, this.heapStatsChanged, this);\n  }\n\n  isolateAdded(isolate: SDK.IsolateManager.Isolate): void {\n    this.list.element.tabIndex = 0;\n    const item = new ListItem(isolate);\n    // Insert the primary page target at the top of the list.\n    const index = (item.model() as SDK.RuntimeModel.RuntimeModel).target() ===\n            SDK.TargetManager.TargetManager.instance().primaryPageTarget() ?\n        0 :\n        this.items.length;\n    this.items.insert(index, item);\n    this.itemByIsolate.set(isolate, item);\n    // Select the first item by default.\n    if (index === 0) {\n      this.list.selectItem(item);\n    }\n    this.update();\n  }\n\n  isolateChanged(isolate: SDK.IsolateManager.Isolate): void {\n    const item = this.itemByIsolate.get(isolate);\n    if (item) {\n      item.updateTitle();\n    }\n    this.update();\n  }\n\n  isolateRemoved(isolate: SDK.IsolateManager.Isolate): void {\n    const item = this.itemByIsolate.get(isolate);\n    if (item) {\n      this.items.remove(this.items.indexOf(item));\n    }\n    this.itemByIsolate.delete(isolate);\n    if (this.items.length === 0) {\n      this.list.element.tabIndex = -1;\n    }\n    this.update();\n  }\n\n  targetChanged(event: Common.EventTarget.EventTargetEvent<SDK.Target.Target>): void {\n    const target = event.data;\n    const model = target.model(SDK.RuntimeModel.RuntimeModel);\n    if (!model) {\n      return;\n    }\n    const isolate = SDK.IsolateManager.IsolateManager.instance().isolateByModel(model);\n    const item = isolate && this.itemByIsolate.get(isolate);\n    if (item) {\n      item.updateTitle();\n    }\n  }\n\n  heapStatsChanged(event: Common.EventTarget.EventTargetEvent<SDK.IsolateManager.Isolate>): void {\n    const isolate = event.data;\n    const listItem = this.itemByIsolate.get(isolate);\n    if (listItem) {\n      listItem.updateStats();\n    }\n    this.updateTotal();\n  }\n\n  updateTotal(): void {\n    let total = 0;\n    let trend = 0;\n    for (const isolate of SDK.IsolateManager.IsolateManager.instance().isolates()) {\n      total += isolate.usedHeapSize();\n      trend += isolate.usedHeapSizeGrowRate();\n    }\n    this.totalValueDiv.textContent = i18n.ByteUtilities.bytesToString(total);\n    IsolateSelector.formatTrendElement(trend, this.totalTrendDiv);\n  }\n\n  static formatTrendElement(trendValueMs: number, element: Element): void {\n    const changeRateBytesPerSecond = trendValueMs * 1e3;\n    const changeRateThresholdBytesPerSecond = 1000;\n    if (Math.abs(changeRateBytesPerSecond) < changeRateThresholdBytesPerSecond) {\n      return;\n    }\n    const changeRateText = i18n.ByteUtilities.bytesToString(Math.abs(changeRateBytesPerSecond));\n    let changeText, changeLabel;\n    if (changeRateBytesPerSecond > 0) {\n      changeText = '\\u2B06' + i18nString(UIStrings.changeRate, {PH1: changeRateText});\n      element.classList.toggle('increasing', true);\n      changeLabel = i18nString(UIStrings.increasingBySPerSecond, {PH1: changeRateText});\n    } else {\n      changeText = '\\u2B07' + i18nString(UIStrings.changeRate, {PH1: changeRateText});\n      element.classList.toggle('increasing', false);\n      changeLabel = i18nString(UIStrings.decreasingBySPerSecond, {PH1: changeRateText});\n    }\n    element.textContent = changeText;\n    UI.ARIAUtils.setLabel(element, changeLabel);\n  }\n\n  totalMemoryElement(): Element {\n    return this.totalElement;\n  }\n\n  createElementForItem(item: ListItem): Element {\n    return item.element;\n  }\n\n  heightForItem(_item: ListItem): number {\n    console.assert(false, 'should not be called');\n    return 0;\n  }\n\n  updateSelectedItemARIA(_fromElement: Element|null, _toElement: Element|null): boolean {\n    return false;\n  }\n\n  isItemSelectable(_item: ListItem): boolean {\n    return true;\n  }\n\n  selectedItemChanged(_from: ListItem|null, to: ListItem|null, fromElement: Element|null, toElement: Element|null):\n      void {\n    if (fromElement) {\n      fromElement.classList.remove('selected');\n    }\n    if (toElement) {\n      toElement.classList.add('selected');\n    }\n    const model = to?.model();\n    UI.Context.Context.instance().setFlavor(\n        SDK.HeapProfilerModel.HeapProfilerModel, model?.heapProfilerModel() ?? null);\n    UI.Context.Context.instance().setFlavor(\n        SDK.CPUProfilerModel.CPUProfilerModel, model?.target().model(SDK.CPUProfilerModel.CPUProfilerModel) ?? null);\n  }\n\n  update(): void {\n    this.updateTotal();\n    this.list.invalidateRange(0, this.items.length);\n  }\n}\n\nexport class ListItem {\n  isolate: SDK.IsolateManager.Isolate;\n  element: HTMLDivElement;\n  heapDiv: HTMLElement;\n  readonly trendDiv: HTMLElement;\n  readonly nameDiv: HTMLElement;\n\n  constructor(isolate: SDK.IsolateManager.Isolate) {\n    this.isolate = isolate;\n    const trendIntervalMinutes = Math.round(SDK.IsolateManager.MemoryTrendWindowMs / 60e3);\n    this.element = document.createElement('div');\n    this.element.classList.add('profile-memory-usage-item');\n    this.element.classList.add('hbox');\n    UI.ARIAUtils.markAsOption(this.element);\n    this.heapDiv = this.element.createChild('div', 'profile-memory-usage-item-size');\n    UI.Tooltip.Tooltip.install(this.heapDiv, i18nString(UIStrings.heapSizeInUseByLiveJsObjects));\n    this.trendDiv = this.element.createChild('div', 'profile-memory-usage-item-trend');\n    UI.Tooltip.Tooltip.install(\n        this.trendDiv, i18nString(UIStrings.heapSizeChangeTrendOverTheLastS, {PH1: trendIntervalMinutes}));\n    this.nameDiv = this.element.createChild('div', 'profile-memory-usage-item-name');\n    this.updateTitle();\n  }\n\n  model(): SDK.RuntimeModel.RuntimeModel|null {\n    return this.isolate.runtimeModel();\n  }\n\n  updateStats(): void {\n    this.heapDiv.textContent = i18n.ByteUtilities.bytesToString(this.isolate.usedHeapSize());\n    IsolateSelector.formatTrendElement(this.isolate.usedHeapSizeGrowRate(), this.trendDiv);\n  }\n\n  updateTitle(): void {\n    const modelCountByName = new Map<string, number>();\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    for (const model of this.isolate.models()) {\n      const target = model.target();\n      const isPrimaryPageTarget = targetManager.primaryPageTarget() === target;\n      const name = target.name();\n      const parsedURL = new Common.ParsedURL.ParsedURL(target.inspectedURL());\n      const domain = parsedURL.isValid ? parsedURL.domain() : '';\n      // If it is primary page target, omit `domain` in the title.\n      // Otherwise show its `domain` and `name` as title if available.\n      const title = target.decorateLabel(\n          domain && !isPrimaryPageTarget ? `${domain}: ${name}` : name || domain || i18nString(UIStrings.empty));\n      modelCountByName.set(title, (modelCountByName.get(title) || 0) + 1);\n    }\n    this.nameDiv.removeChildren();\n    const titles = [];\n    for (const [name, count] of modelCountByName) {\n      const title = count > 1 ? `${name} (${count})` : name;\n      titles.push(title);\n      const titleDiv = this.nameDiv.createChild('div');\n      titleDiv.textContent = title;\n      UI.Tooltip.Tooltip.install(titleDiv, String(title));\n    }\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2018 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.profile-launcher-view {\n  overflow: auto;\n}\n\n.profile-launcher-view-content {\n  margin: 10px 16px;\n  flex: auto 1 0;\n\n  & h1 {\n    font: var(--sys-typescale-headline4);\n    margin: 6px 0 10px;\n  }\n\n  & label {\n    font: var(--sys-typescale-body3-regular);\n  }\n\n  & p {\n    color: var(--sys-color-token-subtle);\n    margin-top: var(--sys-size-1);\n    margin-left: var(--sys-size-10);\n\n    & > devtools-checkbox {\n      display: flex;\n    }\n  }\n\n  .profile-launcher-view-content button.text-button.running,\n  .profile-launcher-view-content button.text-button.running:focus {\n    color: var(--sys-color-error);\n  }\n\n  & > div {\n    flex: auto 0 0;\n  }\n\n  & > .profile-isolate-selector-block {\n    flex: auto 1 0;\n    overflow: hidden;\n  }\n}\n\n.profile-launcher-target-list {\n  margin-bottom: 6px;\n  border: 1px solid var(--sys-color-divider);\n  flex: 150px 1 0;\n}\n\n.profile-launcher-target-list-container {\n  overflow: auto;\n}\n\n.profile-memory-usage-item {\n  min-width: 100%;\n  width: max-content;\n  padding: 4px;\n  line-height: 16px;\n}\n\n.profile-isolate-selector-block > .profile-memory-usage-item {\n  margin-left: 1px;\n  margin-bottom: 4px;\n  font-weight: bolder;\n}\n\n.profile-memory-usage-item.selected {\n  background-color: var(--sys-color-neutral-container);\n}\n\n.profile-memory-usage-item:focus {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.profile-launcher-target-list .profile-memory-usage-item:hover:not(.selected) {\n  background-color: var(--sys-color-state-hover-on-subtle);\n}\n\n.javascript-vm-instances-list {\n  width: max-content;\n  min-width: 100%;\n}\n\n.javascript-vm-instances-list:focus .profile-memory-usage-item.selected {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.profile-memory-usage-item > div {\n  flex-shrink: 0;\n  margin-right: 12px;\n}\n\n.profile-memory-usage-item-size {\n  width: 60px;\n  text-align: right;\n}\n\n.profile-memory-usage-item-trend {\n  min-width: 5em;\n  color: var(--sys-color-tertiary);\n}\n\n.profile-memory-usage-item-trend.increasing {\n  color: var(--sys-color-error);\n}\n\n.profile-launcher-buttons {\n  flex-wrap: wrap;\n  column-gap: 8px;\n}\n\n@media (forced-colors: active) {\n  .profile-memory-usage-item {\n    forced-color-adjust: none;\n    border-left-color: transparent;\n  }\n\n  .profile-memory-usage-item-trend,\n  .profile-memory-usage-item-trend.increasing,\n  .profile-launcher-view-content button.running {\n    color: ButtonText;\n  }\n\n  .javascript-vm-instances-list .profile-memory-usage-item:hover:not(.selected) {\n    background-color: Highlight;\n    color: HighlightText;\n  }\n\n  .javascript-vm-instances-list .profile-memory-usage-item.selected .profile-memory-usage-item-trend,\n  .javascript-vm-instances-list .profile-memory-usage-item.selected .profile-memory-usage-item-trend.increasing {\n    color: ButtonFace;\n  }\n\n  .javascript-vm-instances-list .profile-memory-usage-item:hover:not(.selected) .profile-memory-usage-item-trend,\n  .javascript-vm-instances-list .profile-memory-usage-item:hover:not(.selected) .profile-memory-usage-item-trend.increasing {\n    background-color: Highlight;\n    color: HighlightText;\n  }\n\n  .javascript-vm-instances-list .profile-memory-usage-item.selected {\n    background-color: ButtonText;\n    border-color: Highlight;\n    color: ButtonFace;\n  }\n\n  .javascript-vm-instances-list:focus .profile-memory-usage-item.selected,\n  .javascript-vm-instances-list:focus-visible .profile-memory-usage-item.selected {\n    background-color: Highlight;\n    border-color: ButtonText;\n    color: HighlightText;\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./profileLauncherView.css')} */`;", "// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {\n  type DataDisplayDelegate,\n  Events as ProfileHeaderEvents,\n  type ProfileHeader,\n  type StatusUpdate,\n} from './ProfileHeader.js';\n\nconst UIStrings = {\n  /**\n   * @description Tooltip for the 3-dots menu in the Memory panel profiles list.\n   */\n  profileOptions: 'Profile options',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfileSidebarTreeElement.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ProfileSidebarTreeElement extends UI.TreeOutline.TreeElement {\n  readonly iconElement: HTMLDivElement;\n  readonly titlesElement: HTMLDivElement;\n  readonly menuElement: Buttons.Button.Button;\n  titleContainer: HTMLElement;\n  override titleElement: HTMLElement;\n  subtitleElement: HTMLElement;\n  readonly className: string;\n  small: boolean;\n  readonly dataDisplayDelegate: DataDisplayDelegate;\n  profile: ProfileHeader;\n  editing: UI.InplaceEditor.Controller|null;\n  constructor(dataDisplayDelegate: DataDisplayDelegate, profile: ProfileHeader, className: string) {\n    super('', false);\n    this.iconElement = document.createElement('div');\n    this.iconElement.classList.add('icon');\n    this.titlesElement = document.createElement('div');\n    this.titlesElement.classList.add('titles');\n    this.titlesElement.classList.add('no-subtitle');\n    this.titlesElement.setAttribute('jslog', `${VisualLogging.value('title').track({dblclick: true, change: true})}`);\n    this.titleContainer = this.titlesElement.createChild('span', 'title-container');\n    this.titleElement = this.titleContainer.createChild('span', 'title');\n    this.subtitleElement = this.titlesElement.createChild('span', 'subtitle');\n\n    this.menuElement = new Buttons.Button.Button();\n    this.menuElement.data = {\n      variant: Buttons.Button.Variant.ICON,\n      iconName: 'dots-vertical',\n      title: i18nString(UIStrings.profileOptions),\n    };\n    this.menuElement.tabIndex = -1;\n    this.menuElement.addEventListener('click', this.handleContextMenuEvent.bind(this));\n    this.menuElement.setAttribute('jslog', `${VisualLogging.dropDown('profile-options').track({click: true})}`);\n    UI.Tooltip.Tooltip.install(this.menuElement, i18nString(UIStrings.profileOptions));\n\n    this.titleElement.textContent = profile.title;\n    this.className = className;\n    this.small = false;\n    this.dataDisplayDelegate = dataDisplayDelegate;\n    this.profile = profile;\n    profile.addEventListener(ProfileHeaderEvents.UPDATE_STATUS, this.updateStatus, this);\n    this.editing = null;\n  }\n\n  updateStatus(event: Common.EventTarget.EventTargetEvent<StatusUpdate>): void {\n    const statusUpdate = event.data;\n    if (statusUpdate.subtitle !== null) {\n      this.subtitleElement.textContent = statusUpdate.subtitle.length > 0 ? `(${statusUpdate.subtitle})` : '';\n      this.titlesElement.classList.toggle('no-subtitle', !statusUpdate.subtitle);\n      UI.ARIAUtils.setLabel(this.listItemElement, `${this.profile.title}, ${statusUpdate.subtitle}`);\n    }\n    if (typeof statusUpdate.wait === 'boolean' && this.listItemElement) {\n      this.iconElement.classList.toggle('spinner', statusUpdate.wait);\n      this.listItemElement.classList.toggle('wait', statusUpdate.wait);\n    }\n  }\n\n  override ondblclick(event: Event): boolean {\n    if (!this.editing) {\n      this.startEditing((event.target as Element));\n    }\n    return false;\n  }\n\n  startEditing(eventTarget: Element): void {\n    const container = eventTarget.enclosingNodeOrSelfWithClass('title');\n    if (!container) {\n      return;\n    }\n    const config =\n        new UI.InplaceEditor.Config(this.editingCommitted.bind(this), this.editingCancelled.bind(this), undefined);\n    this.editing = UI.InplaceEditor.InplaceEditor.startEditing(container, config);\n  }\n\n  editingCommitted(_container: Element, newTitle: string): void {\n    if (newTitle.trim().length === 0) {\n      if (this.editing) {\n        this.editing.cancel();\n      }\n    } else {\n      this.editing = null;\n      this.profile.setTitle(newTitle);\n    }\n  }\n\n  editingCancelled(): void {\n    this.editing = null;\n  }\n\n  dispose(): void {\n    this.profile.removeEventListener(ProfileHeaderEvents.UPDATE_STATUS, this.updateStatus, this);\n  }\n\n  override onselect(): boolean {\n    this.dataDisplayDelegate.showProfile(this.profile);\n    return true;\n  }\n\n  override ondelete(): boolean {\n    this.profile.profileType().removeProfile(this.profile);\n    return true;\n  }\n\n  override onattach(): void {\n    if (this.className) {\n      this.listItemElement.classList.add(this.className);\n    }\n    if (this.small) {\n      this.listItemElement.classList.add('small');\n    }\n    this.listItemElement.append(this.iconElement, this.titlesElement, this.menuElement);\n    this.listItemElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), true);\n\n    UI.ARIAUtils.setDescription(this.listItemElement, this.profile.profileType().name);\n  }\n\n  handleContextMenuEvent(event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.appendItemsAtLocation('profilerMenu');\n    void contextMenu.show();\n  }\n\n  setSmall(small: boolean): void {\n    this.small = small;\n    if (this.listItemElement) {\n      this.listItemElement.classList.toggle('small', this.small);\n    }\n  }\n\n  setMainTitle(title: string): void {\n    this.titleElement.textContent = title;\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright (C) 2006, 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Anthony Ricaud <rik@webkit.org>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* Profiler Style */\n\n#profile-views {\n  flex: auto;\n  position: relative;\n}\n\n.profile-view .data-grid table.data {\n  background: var(--sys-color-cdt-base-container);\n}\n\n.profile-view .data-grid tr:not(.selected) .highlight {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.profile-view .data-grid tr:hover td:not(.bottom-filler-td) {\n  background-color: var(--sys-color-state-hover-on-subtle);\n}\n\n.profile-view .data-grid td.numeric-column {\n  text-align: right;\n}\n\n.profile-view .data-grid div.profile-multiple-values {\n  float: right;\n}\n\n.profile-view .data-grid span.percent-column {\n  color: var(--sys-color-token-subtle);\n  width: 9ex;\n  display: inline-block;\n}\n\n.profile-view .data-grid tr.selected span {\n  color: inherit;\n}\n\n.profiles-toolbar {\n  background-color: var(--sys-color-cdt-base-container);\n  border-bottom: 1px solid var(--sys-color-divider);\n  flex-shrink: 0;\n}\n\n.profiles-tree-sidebar {\n  flex: auto;\n  overflow: hidden;\n}\n\n.profiles-sidebar-tree-box {\n  overflow-y: auto;\n}\n\n.profile-view {\n  display: flex;\n  overflow: hidden;\n}\n\n.profile-view .data-grid {\n  border: none;\n  flex: auto;\n}\n\n.profile-view .data-grid th.self-column,\n.profile-view .data-grid th.total-column {\n  text-align: center;\n}\n\n.profile-node-file {\n  float: right;\n  color: var(--sys-color-token-subtle);\n}\n\n.profile-warn-marker {\n  vertical-align: -1px;\n  margin-right: 2px;\n}\n\n.cpu-profile-flame-chart-overview-container {\n  overflow: hidden;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 80px;\n}\n\n#cpu-profile-flame-chart-overview-container {\n  border-bottom: 1px solid var(--sys-color-divider);\n  overflow: hidden;\n}\n\n.cpu-profile-flame-chart-overview-canvas {\n  position: absolute;\n  inset: 20px 0 0;\n}\n\n#cpu-profile-flame-chart-overview-grid .resources-dividers-label-bar {\n  pointer-events: auto;\n}\n\n.cpu-profile-flame-chart-overview-pane {\n  flex: 0 0 80px !important; /* stylelint-disable-line declaration-no-important */\n}\n\n.profile-text-view {\n  padding: 10px;\n  overflow: auto;\n  margin: 0;\n  user-select: text;\n  cursor: text;\n}\n\n.empty-landing-page {\n  position: absolute;\n  background-color: var(--sys-color-cdt-base-container);\n  justify-content: center;\n  align-items: center;\n  overflow: auto;\n  font-size: 16px;\n  color: var(--sys-color-token-subtle);\n  padding: 50px;\n}\n\n@media (forced-colors: active) {\n  .profile-view .data-grid tr:hover td:not(.bottom-filler-td) {\n    background: Highlight;\n  }\n\n  .profile-view .data-grid table.data {\n    background: transparent;\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./profilesPanel.css')} */`;", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2016 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n:host {\n  padding: var(--sys-size-3) 0;\n}\n\n.tree-outline-disclosure {\n  width: 100%;\n}\n\n/* Icon-related changes */\nli .icon {\n  width: 20px;\n  height: 20px;\n  margin-right: var(--sys-size-6);\n  flex: none;\n}\n\n/* Heap profiles and CPU profiles */\n.heap-snapshot-sidebar-tree-item .icon,\n.profile-sidebar-tree-item .icon {\n  mask-image: var(--image-file-heap-snapshot);\n  background: var(--icon-default);\n}\n\n.profile-group-sidebar-tree-item .icon {\n  mask-image: var(--image-file-heap-snapshots);\n  background: var(--icon-default);\n}\n\nli.small .icon {\n  width: 16px;\n  height: 16px;\n}\n\nli.wait .icon {\n  content: none;\n}\n\nli devtools-button {\n  min-width: var(--sys-size-12);\n  visibility: hidden;\n}\n\n/* Tree outline overrides */\n.heap-snapshot-sidebar-tree-item:not(:hover) devtools-button {\n  visibility: hidden;\n}\n\n.heap-snapshot-sidebar-tree-item.wait .icon {\n  mask-image: unset;\n  background-color: inherit;\n}\n\n.heap-snapshot-sidebar-tree-item.small .icon {\n  mask-image: var(--image-file-heap-snapshots);\n  background: var(--icon-default);\n}\n\n.profile-sidebar-tree-item.small .icon {\n  mask-image: var(--image-file-heap-snapshots);\n  background: var(--icon-default);\n}\n\n.tree-outline li:not(.parent)::before {\n  content: none;\n}\n\nol.tree-outline {\n  flex: auto;\n  padding: 0;\n}\n\n.tree-outline li {\n  height: var(--sys-size-12);\n  padding-left: var(--sys-size-7);\n  margin-right: var(--sys-size-5);\n  color: var(--sys-color-on-surface);\n\n  & .leading-icons {\n    margin-right: var(--sys-size-6);\n    flex: none;\n  }\n\n  & .selection {\n    border-radius: 0 100px 100px 0;\n  }\n}\n\n.tree-outline .profile-launcher-view-tree-item,\n.tree-outline li.profiles-tree-section + .children > li {\n  border-radius: 0 100px 100px 0;\n  position: relative;\n\n  &.selected {\n    background-color: var(--app-color-navigation-drawer-background-selected);\n    color: var(--app-color-navigation-drawer-label-selected);\n\n    & devtools-icon {\n      color: var(--app-color-navigation-drawer-label-selected);\n    }\n\n    & > .icon:not(.spinner) {\n      background-color: var(--app-color-navigation-drawer-label-selected);\n    }\n  }\n\n  &:active::before {\n    background-color: var(--sys-color-state-ripple-neutral-on-subtle);\n    mask-image: none;\n    content: \"\";\n    height: 100%;\n    width: 100%;\n    border-radius: inherit;\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n\n  &:focus-visible {\n    box-shadow: inset 0 0 0 2px var(--sys-color-state-focus-ring);\n  }\n}\n\n.tree-outline li.profiles-tree-section {\n  margin-top: var(--sys-size-6);\n  line-height: var(--sys-size-8);\n\n  &:hover:not(:has(devtools-checkbox)) .selection {\n    background-color: transparent;\n  }\n}\n\n.tree-outline li.profiles-tree-section::before {\n  display: none;\n}\n\n.tree-outline ol {\n  overflow: hidden;\n  padding: 0;\n}\n\n/* Generic items styling */\n\nli.wait .spinner::before {\n  --dimension: 20px;\n\n  margin: 0;\n}\n\nli.wait.small .spinner::before {\n  --dimension: 14px;\n  --clip-size: 9px;\n  --override-spinner-size: 2px;\n\n  margin: 1px;\n}\n\nli.wait.selected .spinner::before {\n  --override-spinner-color: var(--ref-palette-neutral100);\n}\n\n@keyframes spinner-animation {\n  from {\n    transform: rotate(0);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n}\n\nli.small {\n  height: 20px;\n}\n\nli .titles {\n  display: inline-flex;\n  padding-right: var(--sys-size-5);\n}\n\nli .titles > .title-container {\n  z-index: 1;\n  overflow: hidden;\n}\n\nli .titles > .title-container:has(:not(.editing)) {\n  text-overflow: ellipsis;\n}\n\nli .titles > .title-container .title.editing {\n  display: flex;\n  overflow: hidden;\n  margin-inline: 0;\n  padding-inline: 0;\n}\n\nli.small .titles {\n  top: 2px;\n  line-height: normal;\n}\n\nli:not(.small) .title::after {\n  content: \"\\\\A\";\n  white-space: pre;\n}\n\nli .subtitle {\n  text-overflow: ellipsis;\n  overflow: hidden;\n  margin-left: var(--sys-size-3);\n}\n\nli.small .subtitle {\n  display: none;\n}\n\nli.selected:hover devtools-button {\n  visibility: visible;\n  margin-left: auto;\n}\n\n@media (forced-colors: active) {\n  .tree-outline li,\n  .tree-outline li.profiles-tree-section,\n  .tree-outline li:hover .tree-element-title {\n    forced-color-adjust: none;\n    color: ButtonText;\n    text-shadow: unset;\n  }\n\n  .tree-outline .profile-launcher-view-tree-item,\n  .tree-outline li.profiles-tree-section + .children > li {\n    &.selected {\n      background-color: Highlight;\n      color: HighlightText;\n\n      & devtools-icon {\n        color: HighlightText;\n      }\n\n      & > .icon:not(.spinner) {\n        background-color: HighlightText;\n      }\n    }\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./profilesSidebarTree.css')} */`;", "// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {DetachedElementsProfileType} from './HeapDetachedElementsView.js';\nimport {SamplingHeapProfileType} from './HeapProfileView.js';\nimport {HeapSnapshotProfileType, TrackingHeapSnapshotProfileType} from './HeapSnapshotView.js';\n\nexport class ProfileTypeRegistry {\n  heapSnapshotProfileType: HeapSnapshotProfileType;\n  samplingHeapProfileType: SamplingHeapProfileType;\n  trackingHeapSnapshotProfileType: TrackingHeapSnapshotProfileType;\n  detachedElementProfileType: DetachedElementsProfileType;\n  constructor() {\n    this.heapSnapshotProfileType = new HeapSnapshotProfileType();\n    this.samplingHeapProfileType = new SamplingHeapProfileType();\n    this.trackingHeapSnapshotProfileType = new TrackingHeapSnapshotProfileType();\n    this.detachedElementProfileType = new DetachedElementsProfileType();\n  }\n}\n\nexport const instance = new ProfileTypeRegistry();\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {HeapDetachedElementsDataGrid, HeapDetachedElementsDataGridNode} from './HeapDetachedElementsDataGrid.js';\nimport {\n  type DataDisplayDelegate,\n  ProfileEvents as ProfileTypeEvents,\n  type ProfileHeader,\n  ProfileType,\n} from './ProfileHeader.js';\nimport {WritableProfileHeader} from './ProfileView.js';\n\nconst UIStrings = {\n  /**\n   * @description Button text to obtain the detached elements retained by JS\n   */\n  startDetachedElements: 'Obtain detached elements',\n  /**\n   * @description The title for the collection of profiles that are gathered from various snapshots of the heap, using a sampling (e.g. every 1/100) technique.\n   */\n  detachedElementsTitle: 'Detached elements',\n  /**\n   * @description Description in Heap Profile View of a profiler tool\n   */\n  detachedElementsDescription: 'Detached elements shows objects that are retained by a JS reference.',\n  /**\n   * @description Name of a profile\n   * @example {2} PH1\n   */\n  detachedElementProfile: 'Detached elements {PH1}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapDetachedElementsView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class DetachedElementsProfileView extends UI.View.SimpleView implements DataDisplayDelegate {\n  readonly selectedSizeText: UI.Toolbar.ToolbarText;\n  dataGrid: DataGrid.DataGrid.DataGridImpl<unknown>;\n  profile: DetachedElementsProfileHeader;\n  readonly parentDataDisplayDelegate: DataDisplayDelegate;\n\n  constructor(dataDisplayDelegate: DataDisplayDelegate, profile: DetachedElementsProfileHeader) {\n    super({\n      title: i18nString(UIStrings.detachedElementsTitle),\n      viewId: 'detached-elements',\n    });\n    this.element.classList.add('detached-elements-view');\n    this.profile = profile;\n    this.parentDataDisplayDelegate = dataDisplayDelegate;\n    this.selectedSizeText = new UI.Toolbar.ToolbarText();\n    this.dataGrid = new HeapDetachedElementsDataGrid();\n    this.populateElementsGrid(profile.detachedElements);\n    this.dataGrid.asWidget().show(this.element);\n  }\n\n  showProfile(profile: ProfileHeader|null): UI.Widget.Widget|null {\n    return this.parentDataDisplayDelegate.showProfile(profile);\n  }\n\n  showObject(objectId: string, perspectiveName: string): void {\n    this.parentDataDisplayDelegate.showObject(objectId, perspectiveName);\n  }\n\n  async linkifyObject(): Promise<Element|null> {\n    return null;\n  }\n\n  populateElementsGrid(detachedElements: Protocol.DOM.DetachedElementInfo[]|null): void {\n    if (!detachedElements) {\n      return;\n    }\n\n    const heapProfilerModel = this.profile.heapProfilerModel();\n    const domModel = heapProfilerModel?.target().model(SDK.DOMModel.DOMModel);\n    if (!domModel) {\n      return;\n    }\n\n    for (const detachedElement of detachedElements) {\n      this.dataGrid.rootNode().appendChild(new HeapDetachedElementsDataGridNode(detachedElement, domModel));\n    }\n  }\n\n  override async toolbarItems(): Promise<UI.Toolbar.ToolbarItem[]> {\n    return [...await super.toolbarItems(), this.selectedSizeText];\n  }\n}\n\nexport class DetachedElementsProfileType extends\n    Common.ObjectWrapper.eventMixin<DetachedElementsProfileType.EventTypes, typeof ProfileType>(ProfileType) {\n  constructor(typeId?: string, description?: string) {\n    super(\n        typeId || i18nString(UIStrings.detachedElementsTitle),\n        description || i18nString(UIStrings.detachedElementsTitle));\n  }\n\n  override profileBeingRecorded(): DetachedElementsProfileHeader|null {\n    return super.profileBeingRecorded() as DetachedElementsProfileHeader | null;\n  }\n\n  override get buttonTooltip(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.startDetachedElements);\n  }\n\n  override buttonClicked(): boolean {\n    void this.getDetachedElements();\n    return false;\n  }\n\n  async getDetachedElements(): Promise<void> {\n    if (this.profileBeingRecorded()) {\n      return;\n    }\n    const heapProfilerModel = UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);\n    const target = heapProfilerModel?.target();\n    const domModel = target?.model(SDK.DOMModel.DOMModel);\n    if (!heapProfilerModel || !target || !domModel) {\n      return;\n    }\n\n    const animationModel = target?.model(SDK.AnimationModel.AnimationModel);\n    if (animationModel) {\n      // TODO(b/406904348): Remove this once we correctly release animations on the backend.\n      await animationModel.releaseAllAnimations();\n    }\n    const data = await domModel.getDetachedDOMNodes();\n\n    const profile: DetachedElementsProfileHeader = new DetachedElementsProfileHeader(heapProfilerModel, this, data);\n    this.addProfile(profile);\n\n    this.dispatchEventToListeners(ProfileTypeEvents.PROFILE_COMPLETE, profile);\n  }\n\n  override get treeItemTitle(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.detachedElementsTitle);\n  }\n\n  override get description(): string {\n    return i18nString(UIStrings.detachedElementsDescription);\n  }\n\n  override isInstantProfile(): boolean {\n    return true;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly TypeId = 'DetachedElements';\n}\n\nexport namespace DetachedElementsProfileType {\n  export const enum Events {\n    RECORDING_STOPPED = 'RecordingStopped',\n    STATS_UPDATE = 'StatsUpdate',\n    DETACHED_ELEMENTS_OBTAINED = 'DetachedElementsObtained',\n  }\n\n  export interface EventTypes {\n    [Events.RECORDING_STOPPED]: void;\n    [Events.STATS_UPDATE]: Protocol.HeapProfiler.SamplingHeapProfile|null;\n    [Events.DETACHED_ELEMENTS_OBTAINED]: Protocol.DOM.DetachedElementInfo[]|null;\n  }\n}\n\nexport class DetachedElementsProfileHeader extends WritableProfileHeader {\n  readonly #heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null;\n  readonly detachedElements: Protocol.DOM.DetachedElementInfo[]|null;\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, type: DetachedElementsProfileType,\n      detachedElements: Protocol.DOM.DetachedElementInfo[]|null, title?: string) {\n    super(\n        heapProfilerModel?.debuggerModel() ?? null, type,\n        title || i18nString(UIStrings.detachedElementProfile, {PH1: type.nextProfileUid()}));\n    this.detachedElements = detachedElements;\n    this.#heapProfilerModel = heapProfilerModel;\n  }\n\n  override createView(dataDisplayDelegate: DataDisplayDelegate): DetachedElementsProfileView {\n    return new DetachedElementsProfileView(dataDisplayDelegate, this);\n  }\n\n  heapProfilerModel(): SDK.HeapProfilerModel.HeapProfilerModel|null {\n    return this.#heapProfilerModel;\n  }\n\n  override profileType(): DetachedElementsProfileType {\n    return super.profileType() as DetachedElementsProfileType;\n  }\n}\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Elements from '../elements/elements.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  detachedNodes: 'Detached nodes',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  nodeSize: 'Node count',\n  /**\n   * @description Label for the detached elements table\n   */\n  detachedElementsList: 'Detached elements list',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapDetachedElementsDataGrid.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class HeapDetachedElementsDataGrid extends DataGrid.DataGrid.DataGridImpl<unknown> {\n  constructor() {\n    const columns: DataGrid.DataGrid.ColumnDescriptor[] = [];\n    columns.push({\n      id: 'detached-node',\n      title: i18nString(UIStrings.detachedNodes),\n      sortable: false,\n    });\n    columns.push({\n      id: 'detached-node-count',\n      title: i18nString(UIStrings.nodeSize),\n      sortable: false,\n      disclosure: true,\n    });\n\n    super({\n      displayName: i18nString(UIStrings.detachedElementsList),\n      columns,\n      deleteCallback: undefined,\n      refreshCallback: undefined,\n    });\n\n    this.setStriped(true);\n  }\n}\n\nexport class HeapDetachedElementsDataGridNode extends DataGrid.DataGrid.DataGridNode<unknown> {\n  private detachedElementInfo: Protocol.DOM.DetachedElementInfo;\n  domModel: SDK.DOMModel.DOMModel;\n  retainedNodeIds: Set<number> = new Set<number>();\n\n  constructor(detachedElementInfo: Protocol.DOM.DetachedElementInfo, domModel: SDK.DOMModel.DOMModel) {\n    super(null);\n    this.detachedElementInfo = detachedElementInfo;\n    this.domModel = domModel;\n    for (const retainedNodeId of detachedElementInfo.retainedNodeIds) {\n      this.retainedNodeIds.add(retainedNodeId as number);\n    }\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    const cell = this.createTD(columnId);\n    switch (columnId) {\n      case 'detached-node': {\n        const node = SDK.DOMModel.DOMNode.create(\n            this.domModel, null, false, this.detachedElementInfo.treeNode,\n            this.retainedNodeIds as Set<Protocol.DOM.BackendNodeId>);\n        node.detached = true;\n        this.#renderNode(node, cell);\n        return cell;\n      }\n\n      case 'detached-node-count': {\n        const size = this.#getNodeSize(this.detachedElementInfo);\n        UI.UIUtils.createTextChild(cell, size.toString());\n        return cell;\n      }\n    }\n    return cell;\n  }\n\n  #getNodeSize(detachedElementInfo: Protocol.DOM.DetachedElementInfo): number {\n    let count = 1;\n    const queue: Protocol.DOM.Node[] = [];\n    let node: Protocol.DOM.Node|undefined;\n    queue.push(detachedElementInfo.treeNode);\n    while (queue.length > 0) {\n      node = queue.shift();\n      if (!node) {\n        break;\n      }\n      if (node.childNodeCount) {\n        count += node.childNodeCount;\n      }\n      if (node.children) {\n        for (const child of node.children) {\n          queue.push(child);\n        }\n      }\n    }\n\n    return count;\n  }\n\n  // FIXME: is it a partial dupe of front_end/panels/elements/ElementsTreeOutlineRenderer.ts?\n  #renderNode(node: SDK.DOMModel.DOMNode, target: HTMLElement): void {\n    const domTree = new Elements.ElementsTreeOutline.DOMTreeWidget();\n    domTree.omitRootDOMNode = false;\n    domTree.selectEnabled = true;\n    domTree.hideGutter = true;\n    domTree.rootDOMNode = node;\n    domTree.showSelectionOnKeyboardFocus = true;\n    domTree.preventTabOrder = true;\n    domTree.deindentSingleNode = true;\n    domTree.show(target, undefined, true);\n  }\n}\n", "// Copyright 2016 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport type * as CPUProfile from '../../models/cpu_profile/cpu_profile.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {BottomUpProfileDataGridTree} from './BottomUpProfileDataGrid.js';\nimport {type Formatter, type ProfileDataGridNode, ProfileDataGridTree} from './ProfileDataGrid.js';\nimport {ProfileFlameChart, type ProfileFlameChartDataProvider} from './ProfileFlameChartDataProvider.js';\nimport {type DataDisplayDelegate, ProfileHeader, type ProfileType} from './ProfileHeader.js';\nimport {ProfileSidebarTreeElement} from './ProfileSidebarTreeElement.js';\nimport {TopDownProfileDataGridTree} from './TopDownProfileDataGrid.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in Profile View of a profiler tool\n   */\n  profile: 'Profile',\n  /**\n   * @description Placeholder text in the search box of the JavaScript profiler tool. Users can search\n   *the results by the cost in milliseconds, the name of the function, or the file name.\n   */\n  findByCostMsNameOrFile: 'Find by cost (>50ms), name or file',\n  /**\n   * @description Text for a programming function\n   */\n  function: 'Function',\n  /**\n   * @description Title of the Profiler tool\n   */\n  profiler: 'Profiler',\n  /**\n   * @description Aria-label for profiles view combobox in memory tool\n   */\n  profileViewMode: 'Profile view mode',\n  /**\n   * @description Tooltip text that appears when hovering over the largeicon visibility button in the Profile View of a profiler tool\n   */\n  focusSelectedFunction: 'Focus selected function',\n  /**\n   * @description Tooltip text that appears when hovering over the largeicon delete button in the Profile View of a profiler tool\n   */\n  excludeSelectedFunction: 'Exclude selected function',\n  /**\n   * @description Tooltip text that appears when hovering over the largeicon refresh button in the Profile View of a profiler tool\n   */\n  restoreAllFunctions: 'Restore all functions',\n  /**\n   * @description Text in Profile View of a profiler tool\n   */\n  chart: 'Chart',\n  /**\n   * @description Text in Profile View of a profiler tool\n   */\n  heavyBottomUp: 'Heavy (Bottom Up)',\n  /**\n   * @description Text for selecting different profile views in the JS profiler tool. This option is a tree view.\n   */\n  treeTopDown: 'Tree (Top Down)',\n  /**\n   * @description Name of a profile\n   * @example {2} PH1\n   */\n  profileD: 'Profile {PH1}',\n  /**\n   * @description Text in Profile View of a profiler tool\n   * @example {4 MB} PH1\n   */\n  loadingD: 'Loading… {PH1}%',\n  /**\n   * @description Text in Profile View of a profiler tool\n   * @example {example.file} PH1\n   * @example {cannot open file} PH2\n   */\n  fileSReadErrorS: 'File \\'\\'{PH1}\\'\\' read error: {PH2}',\n  /**\n   * @description Text when something is loading\n   */\n  loading: 'Loading…',\n  /**\n   * @description Text in Profile View of a profiler tool\n   */\n  failedToReadFile: 'Failed to read file',\n  /**\n   * @description Text in Profile View of a profiler tool\n   */\n  parsing: 'Parsing…',\n  /**\n   * @description Status indicator in the JS Profiler to show that a file has been successfully loaded\n   * from file, as opposed to a profile that has been captured locally.\n   */\n  loaded: 'Loaded',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfileView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ProfileView extends UI.View.SimpleView implements UI.SearchableView.Searchable {\n  profileInternal: CPUProfile.ProfileTreeModel.ProfileTreeModel|null;\n  searchableViewInternal: UI.SearchableView.SearchableView;\n  dataGrid: DataGrid.DataGrid.DataGridImpl<unknown>;\n  viewSelectComboBox: UI.Toolbar.ToolbarComboBox;\n  focusButton: UI.Toolbar.ToolbarButton;\n  excludeButton: UI.Toolbar.ToolbarButton;\n  resetButton: UI.Toolbar.ToolbarButton;\n  readonly linkifierInternal: Components.Linkifier.Linkifier;\n  nodeFormatter!: Formatter;\n  viewType!: Common.Settings.Setting<ViewTypes>;\n  adjustedTotal!: number;\n  profileHeader!: WritableProfileHeader;\n  bottomUpProfileDataGridTree?: BottomUpProfileDataGridTree|null;\n  topDownProfileDataGridTree?: TopDownProfileDataGridTree|null;\n  currentSearchResultIndex?: number;\n  dataProvider?: ProfileFlameChartDataProvider;\n  flameChart?: ProfileFlameChart;\n  visibleView?: ProfileFlameChart|DataGrid.DataGrid.DataGridWidget<unknown>;\n  searchableElement?: ProfileDataGridTree|ProfileFlameChart;\n  profileDataGridTree?: ProfileDataGridTree;\n  constructor() {\n    super({\n      title: i18nString(UIStrings.profile),\n      viewId: 'profile',\n    });\n\n    this.profileInternal = null;\n\n    this.searchableViewInternal = new UI.SearchableView.SearchableView(this, null);\n    this.searchableViewInternal.setPlaceholder(i18nString(UIStrings.findByCostMsNameOrFile));\n    this.searchableViewInternal.show(this.element);\n\n    const columns = ([] as DataGrid.DataGrid.ColumnDescriptor[]);\n    columns.push({\n      id: 'self',\n      title: this.columnHeader('self'),\n      width: '120px',\n      fixedWidth: true,\n      sortable: true,\n      sort: DataGrid.DataGrid.Order.Descending,\n      titleDOMFragment: undefined,\n      align: undefined,\n      editable: undefined,\n      nonSelectable: undefined,\n      longText: undefined,\n      disclosure: undefined,\n      weight: undefined,\n      allowInSortByEvenWhenHidden: undefined,\n      dataType: undefined,\n      defaultWeight: undefined,\n    });\n    columns.push({\n      id: 'total',\n      title: this.columnHeader('total'),\n      width: '120px',\n      fixedWidth: true,\n      sortable: true,\n      sort: undefined,\n      titleDOMFragment: undefined,\n      align: undefined,\n      editable: undefined,\n      nonSelectable: undefined,\n      longText: undefined,\n      disclosure: undefined,\n      weight: undefined,\n      allowInSortByEvenWhenHidden: undefined,\n      dataType: undefined,\n      defaultWeight: undefined,\n    });\n    columns.push({\n      id: 'function',\n      title: i18nString(UIStrings.function),\n      disclosure: true,\n      sortable: true,\n      sort: undefined,\n      titleDOMFragment: undefined,\n      align: undefined,\n      editable: undefined,\n      nonSelectable: undefined,\n      longText: undefined,\n      weight: undefined,\n      allowInSortByEvenWhenHidden: undefined,\n      dataType: undefined,\n      defaultWeight: undefined,\n      width: undefined,\n      fixedWidth: undefined,\n    });\n\n    this.dataGrid = new DataGrid.DataGrid.DataGridImpl({\n      displayName: i18nString(UIStrings.profiler),\n      columns,\n      deleteCallback: undefined,\n      refreshCallback: undefined,\n    });\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SORTING_CHANGED, this.sortProfile, this);\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.SELECTED_NODE, this.nodeSelected.bind(this, true));\n    this.dataGrid.addEventListener(DataGrid.DataGrid.Events.DESELECTED_NODE, this.nodeSelected.bind(this, false));\n    this.dataGrid.setRowContextMenuCallback(this.populateContextMenu.bind(this));\n\n    this.viewSelectComboBox = new UI.Toolbar.ToolbarComboBox(\n        this.changeView.bind(this), i18nString(UIStrings.profileViewMode), undefined, 'profile-view.selected-view');\n\n    this.focusButton = new UI.Toolbar.ToolbarButton(\n        i18nString(UIStrings.focusSelectedFunction), 'eye', undefined, 'profile-view.focus-selected-function');\n    this.focusButton.setEnabled(false);\n    this.focusButton.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, this.focusClicked, this);\n\n    this.excludeButton = new UI.Toolbar.ToolbarButton(\n        i18nString(UIStrings.excludeSelectedFunction), 'cross', undefined, 'profile-view.exclude-selected-function');\n    this.excludeButton.setEnabled(false);\n    this.excludeButton.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, this.excludeClicked, this);\n\n    this.resetButton = new UI.Toolbar.ToolbarButton(\n        i18nString(UIStrings.restoreAllFunctions), 'refresh', undefined, 'profile-view.restore-all-functions');\n    this.resetButton.setEnabled(false);\n    this.resetButton.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, this.resetClicked, this);\n\n    this.linkifierInternal = new Components.Linkifier.Linkifier(maxLinkLength);\n  }\n\n  static buildPopoverTable(popoverInfo: Array<{\n    title: string,\n    value: string,\n  }>): Element {\n    const table = document.createElement('table');\n    for (const entry of popoverInfo) {\n      const row = table.createChild('tr');\n      row.createChild('td').textContent = entry.title;\n      row.createChild('td').textContent = entry.value;\n    }\n    return table;\n  }\n\n  setProfile(profile: CPUProfile.ProfileTreeModel.ProfileTreeModel): void {\n    this.profileInternal = profile;\n    this.bottomUpProfileDataGridTree = null;\n    this.topDownProfileDataGridTree = null;\n    this.changeView();\n    this.refresh();\n  }\n\n  profile(): CPUProfile.ProfileTreeModel.ProfileTreeModel|null {\n    return this.profileInternal;\n  }\n\n  initialize(nodeFormatter: Formatter): void {\n    this.nodeFormatter = nodeFormatter;\n\n    this.viewType = Common.Settings.Settings.instance().createSetting('profile-view', ViewTypes.HEAVY);\n    const viewTypes = [ViewTypes.FLAME, ViewTypes.HEAVY, ViewTypes.TREE];\n\n    const optionNames = new Map([\n      [ViewTypes.FLAME, i18nString(UIStrings.chart)],\n      [ViewTypes.HEAVY, i18nString(UIStrings.heavyBottomUp)],\n      [ViewTypes.TREE, i18nString(UIStrings.treeTopDown)],\n    ]);\n\n    const options = new Map(\n        viewTypes.map(type => [type, this.viewSelectComboBox.createOption((optionNames.get(type) as string), type)]));\n    const optionName = this.viewType.get() || viewTypes[0];\n    const option = options.get(optionName) || options.get(viewTypes[0]);\n    this.viewSelectComboBox.select((option as Element));\n\n    this.changeView();\n    if (this.flameChart) {\n      this.flameChart.update();\n    }\n  }\n\n  override focus(): void {\n    if (this.flameChart) {\n      this.flameChart.focus();\n    } else {\n      super.focus();\n    }\n  }\n\n  columnHeader(_columnId: string): Common.UIString.LocalizedString {\n    throw new Error('Not implemented');\n  }\n\n  selectRange(timeLeft: number, timeRight: number): void {\n    if (!this.flameChart) {\n      return;\n    }\n    this.flameChart.selectRange(timeLeft, timeRight);\n  }\n\n  override async toolbarItems(): Promise<UI.Toolbar.ToolbarItem[]> {\n    return [this.viewSelectComboBox, this.focusButton, this.excludeButton, this.resetButton];\n  }\n\n  getBottomUpProfileDataGridTree(): ProfileDataGridTree {\n    if (!this.bottomUpProfileDataGridTree) {\n      this.bottomUpProfileDataGridTree = new BottomUpProfileDataGridTree(\n          this.nodeFormatter, this.searchableViewInternal,\n          (this.profileInternal as CPUProfile.ProfileTreeModel.ProfileTreeModel).root, this.adjustedTotal);\n    }\n    return this.bottomUpProfileDataGridTree;\n  }\n\n  getTopDownProfileDataGridTree(): ProfileDataGridTree {\n    if (!this.topDownProfileDataGridTree) {\n      this.topDownProfileDataGridTree = new TopDownProfileDataGridTree(\n          this.nodeFormatter, this.searchableViewInternal,\n          (this.profileInternal as CPUProfile.ProfileTreeModel.ProfileTreeModel).root, this.adjustedTotal);\n    }\n    return this.topDownProfileDataGridTree;\n  }\n\n  populateContextMenu(contextMenu: UI.ContextMenu.ContextMenu, gridNode: DataGrid.DataGrid.DataGridNode<unknown>):\n      void {\n    const node = (gridNode as ProfileDataGridNode);\n    if (node.linkElement) {\n      contextMenu.appendApplicableItems(node.linkElement);\n    }\n  }\n\n  override willHide(): void {\n    this.currentSearchResultIndex = -1;\n  }\n\n  refresh(): void {\n    if (!this.profileDataGridTree) {\n      return;\n    }\n    const selectedProfileNode =\n        this.dataGrid.selectedNode ? (this.dataGrid.selectedNode as ProfileDataGridNode).profileNode : null;\n\n    this.dataGrid.rootNode().removeChildren();\n\n    const children = this.profileDataGridTree.children;\n    const count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      this.dataGrid.rootNode().appendChild(children[index]);\n    }\n\n    if (selectedProfileNode) {\n      // TODO(crbug.com/1011811): Cleanup the added `selected` property to this SDK class.\n      // @ts-expect-error\n      selectedProfileNode.selected = true;\n    }\n  }\n\n  refreshVisibleData(): void {\n    let child: (DataGrid.DataGrid.DataGridNode<unknown>|null) = this.dataGrid.rootNode().children[0];\n    while (child) {\n      child.refresh();\n      child = child.traverseNextNode(false, null, true);\n    }\n  }\n\n  searchableView(): UI.SearchableView.SearchableView {\n    return this.searchableViewInternal;\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsWholeWordSearch(): boolean {\n    return false;\n  }\n\n  supportsRegexSearch(): boolean {\n    return false;\n  }\n\n  onSearchCanceled(): void {\n    if (this.searchableElement) {\n      this.searchableElement.onSearchCanceled();\n    }\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void {\n    if (this.searchableElement) {\n      this.searchableElement.performSearch(searchConfig, shouldJump, jumpBackwards);\n    }\n  }\n\n  jumpToNextSearchResult(): void {\n    if (this.searchableElement) {\n      this.searchableElement.jumpToNextSearchResult();\n    }\n  }\n\n  jumpToPreviousSearchResult(): void {\n    if (this.searchableElement) {\n      this.searchableElement.jumpToPreviousSearchResult();\n    }\n  }\n\n  linkifier(): Components.Linkifier.Linkifier {\n    return this.linkifierInternal;\n  }\n\n  createFlameChartDataProvider(): ProfileFlameChartDataProvider {\n    throw new Error('Not implemented');\n  }\n\n  ensureFlameChartCreated(): void {\n    if (this.flameChart) {\n      return;\n    }\n    this.dataProvider = this.createFlameChartDataProvider();\n    this.flameChart = new ProfileFlameChart(this.searchableViewInternal, this.dataProvider);\n    this.flameChart.addEventListener(PerfUI.FlameChart.Events.ENTRY_INVOKED, event => {\n      void this.onEntryInvoked(event);\n    });\n  }\n\n  async onEntryInvoked(event: Common.EventTarget.EventTargetEvent<number>): Promise<void> {\n    if (!this.dataProvider) {\n      return;\n    }\n    const entryIndex = event.data;\n    const node = this.dataProvider.entryNodes[entryIndex];\n    const debuggerModel = this.profileHeader.debuggerModel;\n    if (!node || !node.scriptId || !debuggerModel) {\n      return;\n    }\n    const script = debuggerModel.scriptForId(node.scriptId);\n    if (!script) {\n      return;\n    }\n    const location = (debuggerModel.createRawLocation(script, node.lineNumber, node.columnNumber));\n    const uiLocation =\n        await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().rawLocationToUILocation(location);\n    void Common.Revealer.reveal(uiLocation);\n  }\n\n  changeView(): void {\n    if (!this.profileInternal) {\n      return;\n    }\n\n    this.searchableViewInternal.closeSearch();\n\n    if (this.visibleView) {\n      this.visibleView.detach();\n    }\n    this.viewType.set((this.viewSelectComboBox.selectedOption() as HTMLOptionElement).value as ViewTypes);\n    switch (this.viewType.get()) {\n      case ViewTypes.FLAME:\n        this.ensureFlameChartCreated();\n        this.visibleView = this.flameChart;\n        this.searchableElement = this.flameChart;\n        break;\n      case ViewTypes.TREE:\n        this.profileDataGridTree = this.getTopDownProfileDataGridTree();\n        this.sortProfile();\n        this.visibleView = this.dataGrid.asWidget();\n        this.searchableElement = this.profileDataGridTree;\n        break;\n      case ViewTypes.HEAVY:\n        this.profileDataGridTree = this.getBottomUpProfileDataGridTree();\n        this.sortProfile();\n        this.visibleView = this.dataGrid.asWidget();\n        this.searchableElement = this.profileDataGridTree;\n        break;\n    }\n\n    const isFlame = this.viewType.get() === ViewTypes.FLAME;\n    this.focusButton.setVisible(!isFlame);\n    this.excludeButton.setVisible(!isFlame);\n    this.resetButton.setVisible(!isFlame);\n\n    if (this.visibleView) {\n      this.visibleView.show(this.searchableViewInternal.element);\n    }\n  }\n\n  nodeSelected(selected: boolean): void {\n    this.focusButton.setEnabled(selected);\n    this.excludeButton.setEnabled(selected);\n  }\n\n  focusClicked(): void {\n    if (!this.dataGrid.selectedNode) {\n      return;\n    }\n\n    this.resetButton.setEnabled(true);\n    (this.resetButton.element as HTMLElement).focus();\n    if (this.profileDataGridTree) {\n      this.profileDataGridTree.focus((this.dataGrid.selectedNode as ProfileDataGridNode));\n    }\n    this.refresh();\n    this.refreshVisibleData();\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.CpuProfileNodeFocused);\n  }\n\n  excludeClicked(): void {\n    const selectedNode = this.dataGrid.selectedNode;\n\n    if (!selectedNode) {\n      return;\n    }\n\n    this.resetButton.setEnabled(true);\n    (this.resetButton.element as HTMLElement).focus();\n\n    selectedNode.deselect();\n\n    if (this.profileDataGridTree) {\n      this.profileDataGridTree.exclude((selectedNode as ProfileDataGridNode));\n    }\n    this.refresh();\n    this.refreshVisibleData();\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.CpuProfileNodeExcluded);\n  }\n\n  resetClicked(): void {\n    this.viewSelectComboBox.element.focus();\n    this.resetButton.setEnabled(false);\n    if (this.profileDataGridTree) {\n      this.profileDataGridTree.restore();\n    }\n    this.linkifierInternal.reset();\n    this.refresh();\n    this.refreshVisibleData();\n  }\n\n  sortProfile(): void {\n    if (!this.profileDataGridTree) {\n      return;\n    }\n    const sortAscending = this.dataGrid.isSortOrderAscending();\n    const sortColumnId = this.dataGrid.sortColumnId();\n    const sortProperty = sortColumnId === 'function' ? 'functionName' : sortColumnId || '';\n    this.profileDataGridTree.sort(ProfileDataGridTree.propertyComparator(sortProperty, sortAscending), false);\n\n    this.refresh();\n  }\n}\n\nexport const maxLinkLength = 30;\n\nexport const enum ViewTypes {\n  FLAME = 'Flame',\n  TREE = 'Tree',\n  HEAVY = 'Heavy',\n}\n\nexport class WritableProfileHeader extends ProfileHeader implements Common.StringOutputStream.OutputStream {\n  readonly debuggerModel: SDK.DebuggerModel.DebuggerModel|null;\n  fileName?: Platform.DevToolsPath.RawPathString;\n  jsonifiedProfile?: string|null;\n  profile?: Protocol.Profiler.Profile;\n  protocolProfileInternal?: Protocol.Profiler.Profile;\n  #profileReceivedPromise = Promise.withResolvers<void>();\n\n  constructor(debuggerModel: SDK.DebuggerModel.DebuggerModel|null, type: ProfileType, title?: string) {\n    super(type, title || i18nString(UIStrings.profileD, {PH1: type.nextProfileUid()}));\n    this.debuggerModel = debuggerModel;\n  }\n\n  onChunkTransferred(_reader: Bindings.FileUtils.ChunkedReader): void {\n    if (this.jsonifiedProfile) {\n      // TODO(l10n): Is the '%' at the end of this string correct? 4MB% looks wrong\n      this.updateStatus(\n          i18nString(UIStrings.loadingD, {PH1: i18n.ByteUtilities.bytesToString(this.jsonifiedProfile.length)}));\n    }\n  }\n\n  onError(reader: Bindings.FileUtils.ChunkedReader): void {\n    const error = (reader.error() as Error);\n    if (error) {\n      this.updateStatus(i18nString(UIStrings.fileSReadErrorS, {PH1: reader.fileName(), PH2: error.message}));\n    }\n  }\n\n  async write(text: string): Promise<void> {\n    this.jsonifiedProfile += text;\n  }\n\n  async close(): Promise<void> {\n  }\n\n  override dispose(): void {\n    this.removeTempFile();\n  }\n\n  override createSidebarTreeElement(panel: DataDisplayDelegate): ProfileSidebarTreeElement {\n    return new ProfileSidebarTreeElement(panel, this, 'profile-sidebar-tree-item');\n  }\n\n  override canSaveToFile(): boolean {\n    return !this.fromFile();\n  }\n\n  override async saveToFile(): Promise<void> {\n    await this.#profileReceivedPromise.promise;\n    const fileOutputStream = new Bindings.FileUtils.FileOutputStream();\n    if (!this.fileName) {\n      const now = Platform.DateUtilities.toISO8601Compact(new Date());\n      const fileExtension = this.profileType().fileExtension();\n\n      this.fileName = `${this.profileType().typeName()}-${now}${fileExtension}` as Platform.DevToolsPath.RawPathString;\n    }\n\n    const accepted = await fileOutputStream.open(this.fileName);\n    if (!accepted || !this.tempFile) {\n      return;\n    }\n    const data = await this.tempFile.read();\n    if (data) {\n      await fileOutputStream.write(data);\n    }\n    void fileOutputStream.close();\n  }\n\n  override async loadFromFile(file: File): Promise<Error|null> {\n    this.updateStatus(i18nString(UIStrings.loading), true);\n    const fileReader = new Bindings.FileUtils.ChunkedFileReader(file, 10000000, this.onChunkTransferred.bind(this));\n    this.jsonifiedProfile = '';\n\n    const success = await fileReader.read(this);\n    if (!success) {\n      this.onError(fileReader);\n      return new Error(i18nString(UIStrings.failedToReadFile));\n    }\n\n    this.updateStatus(i18nString(UIStrings.parsing), true);\n    let error = null;\n    try {\n      this.profile = (JSON.parse(this.jsonifiedProfile) as Protocol.Profiler.Profile);\n      this.setProfile((this.profile));\n      this.updateStatus(i18nString(UIStrings.loaded), false);\n    } catch (e) {\n      error = e;\n      this.profileType().removeProfile(this);\n    }\n    this.jsonifiedProfile = null;\n\n    if (this.profileType().profileBeingRecorded() === this) {\n      this.profileType().setProfileBeingRecorded(null);\n    }\n    return error;\n  }\n\n  setProtocolProfile(profile: Protocol.Profiler.Profile): void {\n    this.setProfile(profile);\n    this.protocolProfileInternal = profile;\n    this.tempFile = new Bindings.TempFile.TempFile();\n    this.tempFile.write([JSON.stringify(profile)]);\n    this.#profileReceivedPromise.resolve();\n  }\n}\n", "// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as CPUProfile from '../../models/cpu_profile/cpu_profile.js';\nimport type * as NetworkTimeCalculator from '../../models/network_time_calculator/network_time_calculator.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nlet colorGeneratorInstance: Common.Color.Generator|null = null;\n\nexport class ProfileFlameChartDataProvider implements PerfUI.FlameChart.FlameChartDataProvider {\n  readonly #colorGenerator: Common.Color.Generator;\n  maxStackDepthInternal: number;\n  timelineDataInternal: PerfUI.FlameChart.FlameChartTimelineData|null;\n  entryNodes: CPUProfile.ProfileTreeModel.ProfileNode[];\n  #font: string;\n  boldFont?: string;\n\n  constructor() {\n    this.#colorGenerator = ProfileFlameChartDataProvider.colorGenerator();\n    this.maxStackDepthInternal = 0;\n    this.timelineDataInternal = null;\n    this.entryNodes = [];\n    this.#font = `${PerfUI.Font.DEFAULT_FONT_SIZE} ${PerfUI.Font.getFontFamilyForCanvas()}`;\n  }\n\n  static colorGenerator(): Common.Color.Generator {\n    if (!colorGeneratorInstance) {\n      colorGeneratorInstance = new Common.Color.Generator(\n          {min: 30, max: 330, count: undefined}, {min: 50, max: 80, count: 5}, {min: 80, max: 90, count: 3});\n\n      colorGeneratorInstance.setColorForID('(idle)', 'hsl(0, 0%, 94%)');\n      colorGeneratorInstance.setColorForID('(program)', 'hsl(0, 0%, 80%)');\n      colorGeneratorInstance.setColorForID('(garbage collector)', 'hsl(0, 0%, 80%)');\n    }\n    return colorGeneratorInstance;\n  }\n\n  minimumBoundary(): number {\n    throw new Error('Not implemented');\n  }\n\n  totalTime(): number {\n    throw new Error('Not implemented');\n  }\n\n  formatValue(value: number, precision?: number): string {\n    return i18n.TimeUtilities.preciseMillisToString(value, precision);\n  }\n\n  maxStackDepth(): number {\n    return this.maxStackDepthInternal;\n  }\n\n  hasTrackConfigurationMode(): boolean {\n    return false;\n  }\n\n  timelineData(): PerfUI.FlameChart.FlameChartTimelineData|null {\n    return this.timelineDataInternal || this.calculateTimelineData();\n  }\n\n  calculateTimelineData(): PerfUI.FlameChart.FlameChartTimelineData {\n    throw new Error('Not implemented');\n  }\n\n  preparePopoverElement(_entryIndex: number): Element|null {\n    throw new Error('Not implemented');\n  }\n\n  canJumpToEntry(entryIndex: number): boolean {\n    return this.entryNodes[entryIndex].scriptId !== '0';\n  }\n\n  entryTitle(entryIndex: number): string {\n    const node = this.entryNodes[entryIndex];\n    return UI.UIUtils.beautifyFunctionName(node.functionName);\n  }\n\n  entryFont(entryIndex: number): string|null {\n    const boldFont = 'bold ' + this.#font;\n    return this.entryHasDeoptReason(entryIndex) ? boldFont : this.#font;\n  }\n\n  entryHasDeoptReason(_entryIndex: number): boolean {\n    throw new Error('Not implemented');\n  }\n\n  entryColor(entryIndex: number): string {\n    const node = this.entryNodes[entryIndex];\n    // For idle and program, we want different 'shades of gray', so we fallback to functionName as scriptId = 0\n    // For rest of nodes e.g eval scripts, if url is empty then scriptId will be guaranteed to be non-zero\n    return this.#colorGenerator.colorForID(node.url || (node.scriptId !== '0' ? node.scriptId : node.functionName));\n  }\n\n  decorateEntry(\n      _entryIndex: number, _context: CanvasRenderingContext2D, _text: string|null, _barX: number, _barY: number,\n      _barWidth: number, _barHeight: number): boolean {\n    return false;\n  }\n\n  forceDecoration(_entryIndex: number): boolean {\n    return false;\n  }\n\n  textColor(_entryIndex: number): string {\n    return '#333';\n  }\n\n  entryNodesLength(): number {\n    return this.entryNodes.length;\n  }\n}\n\nexport class ProfileFlameChart extends\n    Common.ObjectWrapper.eventMixin<PerfUI.FlameChart.EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox)\n        implements UI.SearchableView.Searchable {\n  readonly searchableView: UI.SearchableView.SearchableView;\n  readonly overviewPane: OverviewPane;\n  readonly mainPane: PerfUI.FlameChart.FlameChart;\n  entrySelected: boolean;\n  readonly dataProvider: ProfileFlameChartDataProvider;\n  searchResults: number[];\n  searchResultIndex = -1;\n\n  constructor(searchableView: UI.SearchableView.SearchableView, dataProvider: ProfileFlameChartDataProvider) {\n    super();\n    this.element.id = 'cpu-flame-chart';\n\n    this.searchableView = searchableView;\n    this.overviewPane = new OverviewPane(dataProvider);\n    this.overviewPane.show(this.element);\n\n    this.mainPane = new PerfUI.FlameChart.FlameChart(dataProvider, this.overviewPane);\n    this.mainPane.setBarHeight(15);\n    this.mainPane.setTextBaseline(4);\n    this.mainPane.setTextPadding(2);\n    this.mainPane.show(this.element);\n    this.mainPane.addEventListener(PerfUI.FlameChart.Events.ENTRY_SELECTED, this.onEntrySelected, this);\n    this.mainPane.addEventListener(PerfUI.FlameChart.Events.ENTRY_INVOKED, this.onEntryInvoked, this);\n    this.entrySelected = false;\n    this.mainPane.addEventListener(PerfUI.FlameChart.Events.CANVAS_FOCUSED, this.onEntrySelected, this);\n    this.overviewPane.addEventListener(OverviewPaneEvents.WINDOW_CHANGED, this.onWindowChanged, this);\n    this.dataProvider = dataProvider;\n    this.searchResults = [];\n  }\n\n  override focus(): void {\n    this.mainPane.focus();\n  }\n\n  onWindowChanged(event: Common.EventTarget.EventTargetEvent<OverviewPaneWindowChangedEvent>): void {\n    const {windowTimeLeft: windowLeft, windowTimeRight: windowRight} = event.data;\n    this.mainPane.setWindowTimes(windowLeft, windowRight, /* animate */ true);\n  }\n\n  selectRange(timeLeft: number, timeRight: number): void {\n    this.overviewPane.selectRange(timeLeft, timeRight);\n  }\n\n  onEntrySelected(event: Common.EventTarget.EventTargetEvent<void|number>): void {\n    if (event.data) {\n      const eventIndex = event.data;\n      this.mainPane.setSelectedEntry(eventIndex);\n      if (eventIndex === -1) {\n        this.entrySelected = false;\n      } else {\n        this.entrySelected = true;\n      }\n    } else if (!this.entrySelected) {\n      this.mainPane.setSelectedEntry(0);\n      this.entrySelected = true;\n    }\n  }\n\n  onEntryInvoked(event: Common.EventTarget.EventTargetEvent<number>): void {\n    this.onEntrySelected(event);\n    this.dispatchEventToListeners(PerfUI.FlameChart.Events.ENTRY_INVOKED, event.data);\n  }\n\n  update(): void {\n    this.overviewPane.update();\n    this.mainPane.update();\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, _shouldJump: boolean, jumpBackwards?: boolean): void {\n    const matcher =\n        Platform.StringUtilities.createPlainTextSearchRegex(searchConfig.query, searchConfig.caseSensitive ? '' : 'i');\n\n    const selectedEntryIndex: number = this.searchResultIndex !== -1 ? this.searchResults[this.searchResultIndex] : -1;\n    this.searchResults = [];\n    const entriesCount = this.dataProvider.entryNodesLength();\n    for (let index = 0; index < entriesCount; ++index) {\n      if (this.dataProvider.entryTitle(index).match(matcher)) {\n        this.searchResults.push(index);\n      }\n    }\n\n    if (this.searchResults.length) {\n      this.searchResultIndex = this.searchResults.indexOf(selectedEntryIndex);\n      if (this.searchResultIndex === -1) {\n        this.searchResultIndex = jumpBackwards ? this.searchResults.length - 1 : 0;\n      }\n      this.mainPane.setSelectedEntry(this.searchResults[this.searchResultIndex]);\n    } else {\n      this.onSearchCanceled();\n    }\n    this.searchableView.updateSearchMatchesCount(this.searchResults.length);\n    this.searchableView.updateCurrentMatchIndex(this.searchResultIndex);\n  }\n\n  onSearchCanceled(): void {\n    this.mainPane.setSelectedEntry(-1);\n    this.searchResults = [];\n    this.searchResultIndex = -1;\n  }\n\n  jumpToNextSearchResult(): void {\n    this.searchResultIndex = (this.searchResultIndex + 1) % this.searchResults.length;\n    this.mainPane.setSelectedEntry(this.searchResults[this.searchResultIndex]);\n    this.searchableView.updateCurrentMatchIndex(this.searchResultIndex);\n  }\n\n  jumpToPreviousSearchResult(): void {\n    this.searchResultIndex = (this.searchResultIndex - 1 + this.searchResults.length) % this.searchResults.length;\n    this.mainPane.setSelectedEntry(this.searchResults[this.searchResultIndex]);\n    this.searchableView.updateCurrentMatchIndex(this.searchResultIndex);\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsWholeWordSearch(): boolean {\n    return false;\n  }\n\n  supportsRegexSearch(): boolean {\n    return false;\n  }\n}\n\nexport class OverviewCalculator implements NetworkTimeCalculator.Calculator {\n  readonly formatter: (arg0: number, arg1?: number|undefined) => string;\n  minimumBoundaries!: number;\n  maximumBoundaries!: number;\n  xScaleFactor!: number;\n  constructor(formatter: (arg0: number, arg1?: number|undefined) => string) {\n    this.formatter = formatter;\n  }\n\n  updateBoundaries(overviewPane: OverviewPane): void {\n    this.minimumBoundaries = overviewPane.dataProvider.minimumBoundary();\n    const totalTime = overviewPane.dataProvider.totalTime();\n    this.maximumBoundaries = this.minimumBoundaries + totalTime;\n    this.xScaleFactor = overviewPane.overviewContainer.clientWidth / totalTime;\n  }\n\n  computePosition(time: number): number {\n    return (time - this.minimumBoundaries) * this.xScaleFactor;\n  }\n\n  formatValue(value: number, precision?: number): string {\n    return this.formatter(value - this.minimumBoundaries, precision);\n  }\n\n  maximumBoundary(): number {\n    return this.maximumBoundaries;\n  }\n\n  minimumBoundary(): number {\n    return this.minimumBoundaries;\n  }\n\n  zeroTime(): number {\n    return this.minimumBoundaries;\n  }\n\n  boundarySpan(): number {\n    return this.maximumBoundaries - this.minimumBoundaries;\n  }\n}\n\nexport class OverviewPane extends Common.ObjectWrapper.eventMixin<OverviewPaneEventTypes, typeof UI.Widget.VBox>(\n    UI.Widget.VBox) implements PerfUI.FlameChart.FlameChartDelegate {\n  overviewContainer: HTMLElement;\n  readonly overviewCalculator: OverviewCalculator;\n  readonly overviewGrid: PerfUI.OverviewGrid.OverviewGrid;\n  overviewCanvas: HTMLCanvasElement;\n  dataProvider: PerfUI.FlameChart.FlameChartDataProvider;\n  windowTimeLeft?: number;\n  windowTimeRight?: number;\n  updateTimerId?: number;\n\n  constructor(dataProvider: PerfUI.FlameChart.FlameChartDataProvider) {\n    super();\n    this.element.classList.add('cpu-profile-flame-chart-overview-pane');\n    this.overviewContainer = this.element.createChild('div', 'cpu-profile-flame-chart-overview-container');\n    this.overviewCalculator = new OverviewCalculator(dataProvider.formatValue);\n    this.overviewGrid = new PerfUI.OverviewGrid.OverviewGrid('cpu-profile-flame-chart', this.overviewCalculator);\n    this.overviewGrid.element.classList.add('fill');\n    this.overviewCanvas = this.overviewContainer.createChild('canvas', 'cpu-profile-flame-chart-overview-canvas');\n    this.overviewContainer.appendChild(this.overviewGrid.element);\n    this.dataProvider = dataProvider;\n    this.overviewGrid.addEventListener(\n        PerfUI.OverviewGrid.Events.WINDOW_CHANGED_WITH_POSITION, this.onWindowChanged, this);\n  }\n\n  windowChanged(windowStartTime: number, windowEndTime: number): void {\n    this.selectRange(windowStartTime, windowEndTime);\n  }\n\n  updateRangeSelection(_startTime: number, _endTime: number): void {\n  }\n\n  updateSelectedGroup(_flameChart: PerfUI.FlameChart.FlameChart, _group: PerfUI.FlameChart.Group|null): void {\n  }\n\n  selectRange(timeLeft: number, timeRight: number): void {\n    const startTime = this.dataProvider.minimumBoundary();\n    const totalTime = this.dataProvider.totalTime();\n    this.overviewGrid.setWindowRatio((timeLeft - startTime) / totalTime, (timeRight - startTime) / totalTime);\n  }\n\n  onWindowChanged(event: Common.EventTarget.EventTargetEvent<PerfUI.OverviewGrid.WindowChangedWithPositionEvent>):\n      void {\n    const windowPosition = {windowTimeLeft: event.data.rawStartValue, windowTimeRight: event.data.rawEndValue};\n    this.windowTimeLeft = windowPosition.windowTimeLeft;\n    this.windowTimeRight = windowPosition.windowTimeRight;\n\n    this.dispatchEventToListeners(OverviewPaneEvents.WINDOW_CHANGED, windowPosition);\n  }\n\n  timelineData(): PerfUI.FlameChart.FlameChartTimelineData|null {\n    return this.dataProvider.timelineData();\n  }\n\n  override onResize(): void {\n    this.scheduleUpdate();\n  }\n\n  scheduleUpdate(): void {\n    if (this.updateTimerId) {\n      return;\n    }\n    this.updateTimerId = this.element.window().requestAnimationFrame(this.update.bind(this));\n  }\n\n  update(): void {\n    this.updateTimerId = 0;\n    const timelineData = this.timelineData();\n    if (!timelineData) {\n      return;\n    }\n    this.resetCanvas(\n        this.overviewContainer.clientWidth, this.overviewContainer.clientHeight - PerfUI.FlameChart.RulerHeight);\n    this.overviewCalculator.updateBoundaries(this);\n    this.overviewGrid.updateDividers(this.overviewCalculator);\n    this.drawOverviewCanvas();\n  }\n\n  drawOverviewCanvas(): void {\n    const canvasWidth = this.overviewCanvas.width;\n    const canvasHeight = this.overviewCanvas.height;\n    const drawData = this.calculateDrawData(canvasWidth);\n    const context = this.overviewCanvas.getContext('2d');\n    if (!context) {\n      throw new Error('Failed to get canvas context');\n    }\n    const ratio = window.devicePixelRatio;\n    const offsetFromBottom = ratio;\n    const lineWidth = 1;\n    const yScaleFactor = canvasHeight / (this.dataProvider.maxStackDepth() * 1.1);\n    context.lineWidth = lineWidth;\n    context.translate(0.5, 0.5);\n    context.strokeStyle = 'rgba(20,0,0,0.4)';\n    context.fillStyle = 'rgba(214,225,254,0.8)';\n    context.moveTo(-lineWidth, canvasHeight + lineWidth);\n    context.lineTo(-lineWidth, Math.round(canvasHeight - drawData[0] * yScaleFactor - offsetFromBottom));\n    let value = 0;\n    for (let x = 0; x < canvasWidth; ++x) {\n      value = Math.round(canvasHeight - drawData[x] * yScaleFactor - offsetFromBottom);\n      context.lineTo(x, value);\n    }\n    context.lineTo(canvasWidth + lineWidth, value);\n    context.lineTo(canvasWidth + lineWidth, canvasHeight + lineWidth);\n    context.fill();\n    context.stroke();\n    context.closePath();\n  }\n\n  calculateDrawData(width: number): Uint8Array {\n    const dataProvider = this.dataProvider;\n    const timelineData = (this.timelineData() as PerfUI.FlameChart.FlameChartTimelineData);\n    const entryStartTimes = timelineData.entryStartTimes;\n    const entryTotalTimes = timelineData.entryTotalTimes;\n    const entryLevels = timelineData.entryLevels;\n    const length = entryStartTimes.length;\n    const minimumBoundary = this.dataProvider.minimumBoundary();\n\n    const drawData = new Uint8Array(width);\n    const scaleFactor = width / dataProvider.totalTime();\n\n    for (let entryIndex = 0; entryIndex < length; ++entryIndex) {\n      const start = Math.floor((entryStartTimes[entryIndex] - minimumBoundary) * scaleFactor);\n      const finish =\n          Math.floor((entryStartTimes[entryIndex] - minimumBoundary + entryTotalTimes[entryIndex]) * scaleFactor);\n      for (let x = start; x <= finish; ++x) {\n        drawData[x] = Math.max(drawData[x], entryLevels[entryIndex] + 1);\n      }\n    }\n    return drawData;\n  }\n\n  resetCanvas(width: number, height: number): void {\n    const ratio = window.devicePixelRatio;\n    this.overviewCanvas.width = width * ratio;\n    this.overviewCanvas.height = height * ratio;\n    this.overviewCanvas.style.width = width + 'px';\n    this.overviewCanvas.style.height = height + 'px';\n  }\n}\n\nexport const enum OverviewPaneEvents {\n  WINDOW_CHANGED = 'WindowChanged',\n}\n\nexport interface OverviewPaneWindowChangedEvent {\n  windowTimeLeft: number;\n  windowTimeRight: number;\n}\n\nexport interface OverviewPaneEventTypes {\n  [OverviewPaneEvents.WINDOW_CHANGED]: OverviewPaneWindowChangedEvent;\n}\n", "// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2009 280 North Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as CPUProfile from '../../models/cpu_profile/cpu_profile.js';\nimport type * as UI from '../../ui/legacy/legacy.js';\n\nimport {type Formatter, ProfileDataGridNode, ProfileDataGridTree} from './ProfileDataGrid.js';\n\nexport class TopDownProfileDataGridNode extends ProfileDataGridNode {\n  remainingChildren: CPUProfile.ProfileTreeModel.ProfileNode[];\n  constructor(profileNode: CPUProfile.ProfileTreeModel.ProfileNode, owningTree: TopDownProfileDataGridTree) {\n    const hasChildren = Boolean(profileNode.children?.length);\n\n    super(profileNode, owningTree, hasChildren);\n\n    this.remainingChildren = profileNode.children;\n  }\n\n  static sharedPopulate(container: TopDownProfileDataGridTree|TopDownProfileDataGridNode): void {\n    const children = container.remainingChildren;\n    const childrenLength = children.length;\n\n    for (let i = 0; i < childrenLength; ++i) {\n      container.appendChild(\n          new TopDownProfileDataGridNode(children[i], (container.tree as TopDownProfileDataGridTree)));\n    }\n\n    container.remainingChildren = [];\n  }\n\n  static excludeRecursively(container: TopDownProfileDataGridTree|TopDownProfileDataGridNode, aCallUID: string): void {\n    if (container.remainingChildren.length > 0) {\n      (container as TopDownProfileDataGridNode).populate();\n    }\n\n    container.save();\n\n    const children = container.children;\n    let index = container.children.length;\n\n    while (index--) {\n      TopDownProfileDataGridNode.excludeRecursively((children[index] as TopDownProfileDataGridNode), aCallUID);\n    }\n\n    const child = container.childrenByCallUID.get(aCallUID);\n\n    if (child) {\n      ProfileDataGridNode.merge(container, child, true);\n    }\n  }\n\n  override populateChildren(): void {\n    TopDownProfileDataGridNode.sharedPopulate(this);\n  }\n}\n\nexport class TopDownProfileDataGridTree extends ProfileDataGridTree {\n  remainingChildren: CPUProfile.ProfileTreeModel.ProfileNode[];\n\n  constructor(\n      formatter: Formatter, searchableView: UI.SearchableView.SearchableView,\n      rootProfileNode: CPUProfile.ProfileTreeModel.ProfileNode, total: number) {\n    super(formatter, searchableView, total);\n    this.remainingChildren = rootProfileNode.children;\n    ProfileDataGridNode.populate(this);\n  }\n\n  override focus(profileDataGridNode: ProfileDataGridNode): void {\n    if (!profileDataGridNode) {\n      return;\n    }\n\n    this.save();\n    profileDataGridNode.savePosition();\n\n    this.children = [profileDataGridNode];\n    this.total = profileDataGridNode.total;\n  }\n\n  override exclude(profileDataGridNode: ProfileDataGridNode): void {\n    if (!profileDataGridNode) {\n      return;\n    }\n\n    this.save();\n\n    TopDownProfileDataGridNode.excludeRecursively(this, profileDataGridNode.callUID);\n\n    if (this.lastComparator) {\n      this.sort(this.lastComparator, true);\n    }\n  }\n\n  override restore(): void {\n    if (!this.savedChildren) {\n      return;\n    }\n\n    this.children[0].restorePosition();\n\n    super.restore();\n  }\n\n  override populateChildren(): void {\n    TopDownProfileDataGridNode.sharedPopulate(this);\n  }\n}\n", "// Copyright 2016 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as CPUProfile from '../../models/cpu_profile/cpu_profile.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {Events, HeapTimelineOverview, type IdsRangeChangedEvent, type Samples} from './HeapTimelineOverview.js';\nimport type {Formatter, ProfileDataGridNode} from './ProfileDataGrid.js';\nimport {ProfileFlameChartDataProvider} from './ProfileFlameChartDataProvider.js';\nimport {ProfileEvents, type ProfileHeader, ProfileType} from './ProfileHeader.js';\nimport {ProfileView, WritableProfileHeader} from './ProfileView.js';\n\nconst UIStrings = {\n  /**\n   * @description The reported total size used in the selected time frame of the allocation sampling profile\n   * @example {3 MB} PH1\n   */\n  selectedSizeS: 'Selected size: {PH1}',\n  /**\n   * @description Name of column header that reports the size (in terms of bytes) used for a particular part of the heap, excluding the size of the children nodes of this part of the heap\n   */\n  selfSizeBytes: 'Self size',\n  /**\n   * @description Name of column header that reports the total size (in terms of bytes) used for a particular part of the heap\n   */\n  totalSizeBytes: 'Total size',\n  /**\n   * @description Button text to stop profiling the heap\n   */\n  stopHeapProfiling: 'Stop heap profiling',\n  /**\n   * @description Button text to start profiling the heap\n   */\n  startHeapProfiling: 'Start heap profiling',\n  /**\n   * @description Progress update that the profiler is recording the contents of the heap\n   */\n  recording: 'Recording…',\n  /**\n   * @description Icon title in Heap Profile View of a profiler tool\n   */\n  heapProfilerIsRecording: 'Heap profiler is recording',\n  /**\n   * @description Progress update that the profiler is in the process of stopping its recording of the heap\n   */\n  stopping: 'Stopping…',\n  /**\n   * @description Sampling category to only profile allocations happening on the heap\n   */\n  allocationSampling: 'Allocation sampling',\n  /**\n   * @description The title for the collection of profiles that are gathered from various snapshots of the heap, using a sampling (e.g. every 1/100) technique.\n   */\n  samplingProfiles: 'Sampling profiles',\n  /**\n   * @description Description in Heap Profile View of a profiler tool\n   */\n  recordMemoryAllocations:\n      'Approximate memory allocations by sampling long operations with minimal overhead and get a breakdown by JavaScript execution stack',\n  /**\n   * @description Name of a profile\n   * @example {2} PH1\n   */\n  profileD: 'Profile {PH1}',\n  /**\n   * @description Accessible text for the value in bytes in memory allocation or coverage view.\n   * @example {12345} PH1\n   */\n  sBytes: '{PH1} bytes',\n  /**\n   * @description Text in CPUProfile View of a profiler tool\n   * @example {21.33} PH1\n   */\n  formatPercent: '{PH1} %',\n  /**\n   * @description The formatted size in kilobytes, abbreviated to kB\n   * @example {1,021} PH1\n   */\n  skb: '{PH1} kB',\n  /**\n   * @description Text for the name of something\n   */\n  name: 'Name',\n  /**\n   * @description Tooltip of a cell that reports the size used for a particular part of the heap, excluding the size of the children nodes of this part of the heap\n   */\n  selfSize: 'Self size',\n  /**\n   * @description Tooltip of a cell that reports the total size used for a particular part of the heap\n   */\n  totalSize: 'Total size',\n  /**\n   * @description Text for web URLs\n   */\n  url: 'URL',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapProfileView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nfunction convertToSamplingHeapProfile(profileHeader: SamplingHeapProfileHeader):\n    Protocol.HeapProfiler.SamplingHeapProfile {\n  return (profileHeader.profile || profileHeader.protocolProfile()) as Protocol.HeapProfiler.SamplingHeapProfile;\n}\n\nexport class HeapProfileView extends ProfileView implements UI.SearchableView.Searchable {\n  override profileHeader: SamplingHeapProfileHeader;\n  readonly profileType: SamplingHeapProfileTypeBase;\n  override adjustedTotal: number;\n  readonly selectedSizeText: UI.Toolbar.ToolbarText;\n  timestamps: number[];\n  sizes: number[];\n  max: number[];\n  ordinals: number[];\n  totalTime: number;\n  lastOrdinal: number;\n  readonly timelineOverview: HeapTimelineOverview;\n  constructor(profileHeader: SamplingHeapProfileHeader) {\n    super();\n\n    this.profileHeader = profileHeader;\n    this.profileType = profileHeader.profileType();\n    this.initialize(new NodeFormatter(this));\n    const profile = new SamplingHeapProfileModel(convertToSamplingHeapProfile(profileHeader));\n    this.adjustedTotal = profile.total;\n    this.setProfile(profile);\n\n    this.selectedSizeText = new UI.Toolbar.ToolbarText();\n\n    this.timestamps = [];\n    this.sizes = [];\n    this.max = [];\n    this.ordinals = [];\n    this.totalTime = 0;\n    this.lastOrdinal = 0;\n\n    this.timelineOverview = new HeapTimelineOverview();\n\n    if (Root.Runtime.experiments.isEnabled('sampling-heap-profiler-timeline')) {\n      this.timelineOverview.addEventListener(Events.IDS_RANGE_CHANGED, this.onIdsRangeChanged.bind(this));\n      this.timelineOverview.show(this.element, this.element.firstChild);\n      this.timelineOverview.start();\n\n      this.profileType.addEventListener(SamplingHeapProfileType.Events.STATS_UPDATE, this.onStatsUpdate, this);\n      void this.profileType.once(ProfileEvents.PROFILE_COMPLETE).then(() => {\n        this.profileType.removeEventListener(SamplingHeapProfileType.Events.STATS_UPDATE, this.onStatsUpdate, this);\n        this.timelineOverview.stop();\n        this.timelineOverview.updateGrid();\n      });\n    }\n  }\n\n  override async toolbarItems(): Promise<UI.Toolbar.ToolbarItem[]> {\n    return [...await super.toolbarItems(), this.selectedSizeText];\n  }\n\n  onIdsRangeChanged(event: Common.EventTarget.EventTargetEvent<IdsRangeChangedEvent>): void {\n    const {minId, maxId} = event.data;\n    this.selectedSizeText.setText(\n        i18nString(UIStrings.selectedSizeS, {PH1: i18n.ByteUtilities.bytesToString(event.data.size)}));\n    this.setSelectionRange(minId, maxId);\n  }\n\n  setSelectionRange(minId: number, maxId: number): void {\n    const profileData = convertToSamplingHeapProfile((this.profileHeader));\n    const profile = new SamplingHeapProfileModel(profileData, minId, maxId);\n    this.adjustedTotal = profile.total;\n    this.setProfile(profile);\n  }\n\n  onStatsUpdate(event: Common.EventTarget.EventTargetEvent<Protocol.HeapProfiler.SamplingHeapProfile|null>): void {\n    const profile = event.data;\n\n    if (!this.totalTime) {\n      this.timestamps = [];\n      this.sizes = [];\n      this.max = [];\n      this.ordinals = [];\n      this.totalTime = 30000;\n      this.lastOrdinal = 0;\n    }\n\n    this.sizes.fill(0);\n    this.sizes.push(0);\n    this.timestamps.push(Date.now());\n    this.ordinals.push(this.lastOrdinal + 1);\n    for (const sample of profile?.samples ?? []) {\n      this.lastOrdinal = Math.max(this.lastOrdinal, sample.ordinal);\n      const bucket = Platform.ArrayUtilities.upperBound(\n                         this.ordinals, sample.ordinal, Platform.ArrayUtilities.DEFAULT_COMPARATOR) -\n          1;\n      this.sizes[bucket] += sample.size;\n    }\n    this.max.push(this.sizes[this.sizes.length - 1]);\n\n    const lastTimestamp = this.timestamps[this.timestamps.length - 1];\n    if (lastTimestamp - this.timestamps[0] > this.totalTime) {\n      this.totalTime *= 2;\n    }\n\n    const samples = ({\n      sizes: this.sizes,\n      max: this.max,\n      ids: this.ordinals,\n      timestamps: this.timestamps,\n      totalTime: this.totalTime,\n    } as Samples);\n\n    this.timelineOverview.setSamples(samples);\n  }\n\n  override columnHeader(columnId: string): Common.UIString.LocalizedString {\n    switch (columnId) {\n      case 'self':\n        return i18nString(UIStrings.selfSizeBytes);\n      case 'total':\n        return i18nString(UIStrings.totalSizeBytes);\n    }\n    return Common.UIString.LocalizedEmptyString;\n  }\n\n  override createFlameChartDataProvider(): ProfileFlameChartDataProvider {\n    return new HeapFlameChartDataProvider(\n        (this.profile() as SamplingHeapProfileModel), this.profileHeader.heapProfilerModel());\n  }\n}\n\nexport class SamplingHeapProfileTypeBase extends\n    Common.ObjectWrapper.eventMixin<SamplingHeapProfileType.EventTypes, typeof ProfileType>(ProfileType) {\n  recording: boolean;\n  clearedDuringRecording: boolean;\n\n  constructor(typeId: string, description: string) {\n    super(typeId, description);\n    this.recording = false;\n    this.clearedDuringRecording = false;\n  }\n\n  override profileBeingRecorded(): SamplingHeapProfileHeader|null {\n    return super.profileBeingRecorded() as SamplingHeapProfileHeader | null;\n  }\n\n  override typeName(): string {\n    return 'Heap';\n  }\n\n  override fileExtension(): string {\n    return '.heapprofile';\n  }\n\n  override get buttonTooltip(): Common.UIString.LocalizedString {\n    return this.recording ? i18nString(UIStrings.stopHeapProfiling) : i18nString(UIStrings.startHeapProfiling);\n  }\n\n  override buttonClicked(): boolean {\n    if (this.recording) {\n      void this.stopRecordingProfile();\n    } else {\n      void this.startRecordingProfile();\n    }\n    return this.recording;\n  }\n\n  async startRecordingProfile(): Promise<void> {\n    const heapProfilerModel = UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);\n    if (this.profileBeingRecorded() || !heapProfilerModel) {\n      return;\n    }\n    const profileHeader = new SamplingHeapProfileHeader(heapProfilerModel, this);\n    this.setProfileBeingRecorded(profileHeader);\n    this.addProfile(profileHeader);\n    profileHeader.updateStatus(i18nString(UIStrings.recording));\n\n    const warnings = [i18nString(UIStrings.heapProfilerIsRecording)];\n    UI.InspectorView.InspectorView.instance().setPanelWarnings('heap-profiler', warnings);\n\n    this.recording = true;\n    const target = heapProfilerModel.target();\n    const animationModel = target.model(SDK.AnimationModel.AnimationModel);\n    if (animationModel) {\n      // TODO(b/406904348): Remove this once we correctly release animations on the backend.\n      await animationModel.releaseAllAnimations();\n    }\n    this.startSampling();\n  }\n\n  async stopRecordingProfile(): Promise<void> {\n    this.recording = false;\n    const recordedProfile = this.profileBeingRecorded();\n    if (!recordedProfile?.heapProfilerModel()) {\n      return;\n    }\n\n    recordedProfile.updateStatus(i18nString(UIStrings.stopping));\n    const profile = await this.stopSampling();\n    if (recordedProfile) {\n      console.assert(profile !== undefined);\n      recordedProfile.setProtocolProfile(profile as unknown as Protocol.Profiler.Profile);\n      recordedProfile.updateStatus('');\n      this.setProfileBeingRecorded(null);\n    }\n    UI.InspectorView.InspectorView.instance().setPanelWarnings('heap-profiler', []);\n\n    // If the data was cleared during the middle of the recording we no\n    // longer treat the profile as being completed. This means we avoid\n    // a change of view to the profile list.\n    const wasClearedDuringRecording = this.clearedDuringRecording;\n    this.clearedDuringRecording = false;\n    if (wasClearedDuringRecording) {\n      return;\n    }\n    this.dispatchEventToListeners(ProfileEvents.PROFILE_COMPLETE, recordedProfile);\n  }\n\n  override createProfileLoadedFromFile(title: string): ProfileHeader {\n    return new SamplingHeapProfileHeader(null, this, title);\n  }\n\n  override profileBeingRecordedRemoved(): void {\n    this.clearedDuringRecording = true;\n    void this.stopRecordingProfile();\n  }\n\n  startSampling(): void {\n    throw new Error('Not implemented');\n  }\n\n  stopSampling(): Promise<Protocol.HeapProfiler.SamplingHeapProfile> {\n    throw new Error('Not implemented');\n  }\n}\n\nlet samplingHeapProfileTypeInstance: SamplingHeapProfileType;\n\nexport class SamplingHeapProfileType extends SamplingHeapProfileTypeBase {\n  updateTimer: number;\n  updateIntervalMs: number;\n  constructor() {\n    super(SamplingHeapProfileType.TypeId, i18nString(UIStrings.allocationSampling));\n    if (!samplingHeapProfileTypeInstance) {\n      samplingHeapProfileTypeInstance = this;\n    }\n\n    this.updateTimer = 0;\n    this.updateIntervalMs = 200;\n  }\n\n  static get instance(): SamplingHeapProfileType {\n    return samplingHeapProfileTypeInstance;\n  }\n\n  override get treeItemTitle(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.samplingProfiles);\n  }\n\n  override get description(): string {\n    // TODO(l10n): Do not concatenate localized strings.\n    const formattedDescription = [i18nString(UIStrings.recordMemoryAllocations)];\n    return formattedDescription.join('\\n');\n  }\n\n  override hasTemporaryView(): boolean {\n    return Root.Runtime.experiments.isEnabled('sampling-heap-profiler-timeline');\n  }\n\n  override startSampling(): void {\n    const heapProfilerModel = this.obtainRecordingProfile();\n    if (!heapProfilerModel) {\n      return;\n    }\n\n    void heapProfilerModel.startSampling();\n    if (Root.Runtime.experiments.isEnabled('sampling-heap-profiler-timeline')) {\n      this.updateTimer = window.setTimeout(() => {\n        void this.updateStats();\n      }, this.updateIntervalMs);\n    }\n  }\n\n  obtainRecordingProfile(): SDK.HeapProfilerModel.HeapProfilerModel|null {\n    const recordingProfile = this.profileBeingRecorded();\n    if (recordingProfile) {\n      const heapProfilerModel = recordingProfile.heapProfilerModel();\n      return heapProfilerModel;\n    }\n    return null;\n  }\n\n  override async stopSampling(): Promise<Protocol.HeapProfiler.SamplingHeapProfile> {\n    window.clearTimeout(this.updateTimer);\n    this.updateTimer = 0;\n    this.dispatchEventToListeners(SamplingHeapProfileType.Events.RECORDING_STOPPED);\n    const heapProfilerModel = this.obtainRecordingProfile();\n    if (!heapProfilerModel) {\n      throw new Error('No heap profiler model');\n    }\n\n    const samplingProfile = await heapProfilerModel.stopSampling();\n    if (!samplingProfile) {\n      throw new Error('No sampling profile found');\n    }\n    return samplingProfile;\n  }\n\n  async updateStats(): Promise<void> {\n    const heapProfilerModel = this.obtainRecordingProfile();\n    if (!heapProfilerModel) {\n      return;\n    }\n\n    const profile = await heapProfilerModel.getSamplingProfile();\n    if (!this.updateTimer) {\n      return;\n    }\n    this.dispatchEventToListeners(SamplingHeapProfileType.Events.STATS_UPDATE, profile);\n    this.updateTimer = window.setTimeout(() => {\n      void this.updateStats();\n    }, this.updateIntervalMs);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly TypeId = 'SamplingHeap';\n}\n\nexport namespace SamplingHeapProfileType {\n  export const enum Events {\n    RECORDING_STOPPED = 'RecordingStopped',\n    STATS_UPDATE = 'StatsUpdate',\n  }\n\n  export interface EventTypes {\n    [Events.RECORDING_STOPPED]: void;\n    [Events.STATS_UPDATE]: Protocol.HeapProfiler.SamplingHeapProfile|null;\n  }\n}\n\nexport class SamplingHeapProfileHeader extends WritableProfileHeader {\n  readonly heapProfilerModelInternal: SDK.HeapProfilerModel.HeapProfilerModel|null;\n  override protocolProfileInternal: {\n    head: {\n      callFrame: {\n        functionName: string,\n        scriptId: Protocol.Runtime.ScriptId,\n        url: string,\n        lineNumber: number,\n        columnNumber: number,\n      },\n      children: never[],\n      selfSize: number,\n      id: number,\n    },\n    samples: never[],\n    startTime: number,\n    endTime: number,\n    nodes: never[],\n  };\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, type: SamplingHeapProfileTypeBase,\n      title?: string) {\n    super(\n        heapProfilerModel?.debuggerModel() ?? null, type,\n        title || i18nString(UIStrings.profileD, {PH1: type.nextProfileUid()}));\n    this.heapProfilerModelInternal = heapProfilerModel;\n    this.protocolProfileInternal = {\n      head: {\n        callFrame: {\n          functionName: '',\n          scriptId: '' as Protocol.Runtime.ScriptId,\n          url: '',\n          lineNumber: 0,\n          columnNumber: 0,\n        },\n        children: [],\n        selfSize: 0,\n        id: 0,\n      },\n      samples: [],\n      startTime: 0,\n      endTime: 0,\n      nodes: [],\n    };\n  }\n\n  override createView(): HeapProfileView {\n    return new HeapProfileView(this);\n  }\n\n  protocolProfile(): Protocol.HeapProfiler.SamplingHeapProfile {\n    return this.protocolProfileInternal;\n  }\n\n  heapProfilerModel(): SDK.HeapProfilerModel.HeapProfilerModel|null {\n    return this.heapProfilerModelInternal;\n  }\n\n  override profileType(): SamplingHeapProfileTypeBase {\n    return super.profileType() as SamplingHeapProfileTypeBase;\n  }\n}\n\nexport class SamplingHeapProfileNode extends CPUProfile.ProfileTreeModel.ProfileNode {\n  override self: number;\n  constructor(node: Protocol.HeapProfiler.SamplingHeapProfileNode) {\n    const callFrame = node.callFrame || ({\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        functionName: node['functionName'],\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        scriptId: node['scriptId'],\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        url: node['url'],\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        lineNumber: node['lineNumber'] - 1,\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        columnNumber: node['columnNumber'] - 1,\n                      } as Protocol.Runtime.CallFrame);\n    super(callFrame);\n    this.self = node.selfSize;\n  }\n}\n\nexport class SamplingHeapProfileModel extends CPUProfile.ProfileTreeModel.ProfileTreeModel {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  modules: any;\n\n  constructor(profile: Protocol.HeapProfiler.SamplingHeapProfile, minOrdinal?: number, maxOrdinal?: number) {\n    super();\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.modules = (profile as any).modules || [];\n\n    let nodeIdToSizeMap: Map<number, number>|null = null;\n    if (minOrdinal || maxOrdinal) {\n      nodeIdToSizeMap = new Map<number, number>();\n      minOrdinal = minOrdinal || 0;\n      maxOrdinal = maxOrdinal || Infinity;\n      for (const sample of profile.samples) {\n        if (sample.ordinal < minOrdinal || sample.ordinal > maxOrdinal) {\n          continue;\n        }\n        const size = nodeIdToSizeMap.get(sample.nodeId) || 0;\n        nodeIdToSizeMap.set(sample.nodeId, size + sample.size);\n      }\n    }\n\n    this.initialize(translateProfileTree(profile.head));\n\n    function translateProfileTree(root: Protocol.HeapProfiler.SamplingHeapProfileNode): SamplingHeapProfileNode {\n      const resultRoot = new SamplingHeapProfileNode(root);\n      const sourceNodeStack = [root];\n      const targetNodeStack = [resultRoot];\n      while (sourceNodeStack.length) {\n        const sourceNode = (sourceNodeStack.pop() as Protocol.HeapProfiler.SamplingHeapProfileNode);\n        const targetNode = (targetNodeStack.pop() as SamplingHeapProfileNode);\n        targetNode.children = sourceNode.children.map(child => {\n          const targetChild = new SamplingHeapProfileNode(child);\n          if (nodeIdToSizeMap) {\n            targetChild.self = nodeIdToSizeMap.get(child.id) || 0;\n          }\n          return targetChild;\n        });\n        sourceNodeStack.push(...sourceNode.children);\n        targetNodeStack.push(...targetNode.children);\n      }\n      pruneEmptyBranches(resultRoot);\n      return resultRoot;\n    }\n\n    function pruneEmptyBranches(node: CPUProfile.ProfileTreeModel.ProfileNode): boolean {\n      node.children = node.children.filter(pruneEmptyBranches);\n      return Boolean(node.children.length || node.self);\n    }\n  }\n}\n\nexport class NodeFormatter implements Formatter {\n  readonly profileView: HeapProfileView;\n  constructor(profileView: HeapProfileView) {\n    this.profileView = profileView;\n  }\n\n  formatValue(value: number): string {\n    return i18n.ByteUtilities.bytesToString(value);\n  }\n\n  formatValueAccessibleText(value: number): string {\n    return i18nString(UIStrings.sBytes, {PH1: value});\n  }\n\n  formatPercent(value: number, _node: ProfileDataGridNode): string {\n    return i18nString(UIStrings.formatPercent, {PH1: value.toFixed(2)});\n  }\n\n  linkifyNode(node: ProfileDataGridNode): Element|null {\n    const heapProfilerModel = this.profileView.profileHeader.heapProfilerModel();\n    const target = heapProfilerModel ? heapProfilerModel.target() : null;\n    const options = {\n      className: 'profile-node-file',\n      inlineFrameIndex: 0,\n    };\n    return this.profileView.linkifier().maybeLinkifyConsoleCallFrame(target, node.profileNode.callFrame, options);\n  }\n}\n\nexport class HeapFlameChartDataProvider extends ProfileFlameChartDataProvider {\n  readonly profile: CPUProfile.ProfileTreeModel.ProfileTreeModel;\n  readonly heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null;\n\n  constructor(\n      profile: CPUProfile.ProfileTreeModel.ProfileTreeModel,\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null) {\n    super();\n    this.profile = profile;\n    this.heapProfilerModel = heapProfilerModel;\n  }\n\n  override minimumBoundary(): number {\n    return 0;\n  }\n\n  override totalTime(): number {\n    return this.profile.root.total;\n  }\n\n  override entryHasDeoptReason(_entryIndex: number): boolean {\n    return false;\n  }\n\n  override formatValue(value: number, _precision?: number): string {\n    return i18nString(UIStrings.skb, {PH1: Platform.NumberUtilities.withThousandsSeparator(value / 1e3)});\n  }\n\n  override calculateTimelineData(): PerfUI.FlameChart.FlameChartTimelineData {\n    function nodesCount(node: CPUProfile.ProfileTreeModel.ProfileNode): number {\n      return node.children.reduce((count, node) => count + nodesCount(node), 1);\n    }\n    const count = nodesCount(this.profile.root);\n    const entryNodes: CPUProfile.ProfileTreeModel.ProfileNode[] = new Array(count);\n    const entryLevels = new Uint16Array(count);\n    const entryTotalTimes = new Float32Array(count);\n    const entryStartTimes = new Float64Array(count);\n    let depth = 0;\n    let maxDepth = 0;\n    let position = 0;\n    let index = 0;\n\n    function addNode(node: CPUProfile.ProfileTreeModel.ProfileNode): void {\n      const start = position;\n      entryNodes[index] = node;\n      entryLevels[index] = depth;\n      entryTotalTimes[index] = node.total;\n      entryStartTimes[index] = position;\n      ++index;\n      ++depth;\n      node.children.forEach(addNode);\n      --depth;\n      maxDepth = Math.max(maxDepth, depth);\n      position = start + node.total;\n    }\n    addNode(this.profile.root);\n\n    this.maxStackDepthInternal = maxDepth + 1;\n    this.entryNodes = entryNodes;\n    this.timelineDataInternal =\n        PerfUI.FlameChart.FlameChartTimelineData.create({entryLevels, entryTotalTimes, entryStartTimes, groups: null});\n\n    return this.timelineDataInternal;\n  }\n\n  override preparePopoverElement(entryIndex: number): Element|null {\n    const node = this.entryNodes[entryIndex];\n    if (!node) {\n      return null;\n    }\n    const popoverInfo: Array<{\n      title: string,\n      value: string,\n    }> = [];\n    function pushRow(title: string, value: string): void {\n      popoverInfo.push({title, value});\n    }\n    pushRow(i18nString(UIStrings.name), UI.UIUtils.beautifyFunctionName(node.functionName));\n    pushRow(i18nString(UIStrings.selfSize), i18n.ByteUtilities.bytesToString(node.self));\n    pushRow(i18nString(UIStrings.totalSize), i18n.ByteUtilities.bytesToString(node.total));\n    const linkifier = new Components.Linkifier.Linkifier();\n    const link = linkifier.maybeLinkifyConsoleCallFrame(\n        this.heapProfilerModel ? this.heapProfilerModel.target() : null, node.callFrame);\n    if (link) {\n      pushRow(i18nString(UIStrings.url), link.textContent);\n    }\n    linkifier.dispose();\n    return ProfileView.buildPopoverTable(popoverInfo);\n  }\n}\n", "// Copyright 2018 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as NetworkTimeCalculator from '../../models/network_time_calculator/network_time_calculator.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nexport class HeapTimelineOverview extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(\n    UI.Widget.VBox) {\n  readonly overviewCalculator: OverviewCalculator;\n  overviewContainer: HTMLElement;\n  overviewGrid: PerfUI.OverviewGrid.OverviewGrid;\n  overviewCanvas: HTMLCanvasElement;\n  windowLeftRatio: number;\n  windowRightRatio: number;\n  readonly yScale: SmoothScale;\n  readonly xScale: SmoothScale;\n  profileSamples: Samples;\n  running?: boolean;\n  updateOverviewCanvas?: boolean;\n  updateGridTimerId?: number;\n  updateTimerId?: number|null;\n  windowWidthRatio?: number;\n  constructor() {\n    super({jslog: `${VisualLogging.section('heap-tracking-overview')}`});\n    this.element.id = 'heap-recording-view';\n    this.element.classList.add('heap-tracking-overview');\n\n    this.overviewCalculator = new OverviewCalculator();\n    this.overviewContainer = this.element.createChild('div', 'heap-overview-container');\n    this.overviewGrid = new PerfUI.OverviewGrid.OverviewGrid('heap-recording', this.overviewCalculator);\n    this.overviewGrid.element.classList.add('fill');\n    this.overviewCanvas = this.overviewContainer.createChild('canvas', 'heap-recording-overview-canvas');\n    this.overviewContainer.appendChild(this.overviewGrid.element);\n    this.overviewGrid.addEventListener(PerfUI.OverviewGrid.Events.WINDOW_CHANGED, this.onWindowChanged, this);\n\n    this.windowLeftRatio = 0.0;\n    this.windowRightRatio = 1.0;\n    this.overviewGrid.setWindowRatio(this.windowLeftRatio, this.windowRightRatio);\n    this.yScale = new SmoothScale();\n    this.xScale = new SmoothScale();\n\n    this.profileSamples = new Samples();\n\n    ThemeSupport.ThemeSupport.instance().addEventListener(ThemeSupport.ThemeChangeEvent.eventName, () => this.update());\n  }\n\n  start(): void {\n    this.running = true;\n    const drawFrame = (): void => {\n      this.update();\n      if (this.running) {\n        this.element.window().requestAnimationFrame(drawFrame);\n      }\n    };\n    drawFrame();\n  }\n\n  stop(): void {\n    this.running = false;\n  }\n\n  setSamples(samples: Samples): void {\n    this.profileSamples = samples;\n    if (!this.running) {\n      this.update();\n    }\n  }\n\n  drawOverviewCanvas(width: number, height: number): void {\n    if (!this.profileSamples) {\n      return;\n    }\n    const profileSamples = this.profileSamples;\n    const sizes = profileSamples.sizes;\n    const topSizes = profileSamples.max;\n    const timestamps = profileSamples.timestamps;\n    const startTime = timestamps[0];\n\n    const scaleFactor = this.xScale.nextScale(width / profileSamples.totalTime);\n    let maxSize = 0;\n    function aggregateAndCall(sizes: number[], callback: (arg0: number, arg1: number) => void): void {\n      let size = 0;\n      let currentX = 0;\n      for (let i = 1; i < timestamps.length; ++i) {\n        const x = Math.floor((timestamps[i] - startTime) * scaleFactor);\n        if (x !== currentX) {\n          if (size) {\n            callback(currentX, size);\n          }\n          size = 0;\n          currentX = x;\n        }\n        size += sizes[i];\n      }\n      callback(currentX, size);\n    }\n\n    function maxSizeCallback(_x: number, size: number): void {\n      maxSize = Math.max(maxSize, size);\n    }\n\n    aggregateAndCall(sizes, maxSizeCallback);\n\n    const yScaleFactor = this.yScale.nextScale(maxSize ? height / (maxSize * 1.1) : 0.0);\n\n    this.overviewCanvas.width = width * window.devicePixelRatio;\n    this.overviewCanvas.height = height * window.devicePixelRatio;\n    this.overviewCanvas.style.width = width + 'px';\n    this.overviewCanvas.style.height = height + 'px';\n\n    const maybeContext = this.overviewCanvas.getContext('2d');\n    if (!maybeContext) {\n      throw new Error('Failed to get canvas context');\n    }\n    const context = maybeContext;\n    context.scale(window.devicePixelRatio, window.devicePixelRatio);\n\n    if (this.running) {\n      context.beginPath();\n      context.lineWidth = 2;\n      context.strokeStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-neutral-outline');\n      const currentX = (Date.now() - startTime) * scaleFactor;\n      context.moveTo(currentX, height - 1);\n      context.lineTo(currentX, 0);\n      context.stroke();\n      context.closePath();\n    }\n\n    let gridY = 0;\n    let gridValue;\n    const gridLabelHeight = 14;\n    if (yScaleFactor) {\n      const maxGridValue = (height - gridLabelHeight) / yScaleFactor;\n      // The round value calculation is a bit tricky, because\n      // it has a form k*10^n*1024^m, where k=[1,5], n=[0..3], m is an integer,\n      // e.g. a round value 10KB is 10240 bytes.\n      gridValue = Math.pow(1024, Math.floor(Math.log(maxGridValue) / Math.log(1024)));\n      gridValue *= Math.pow(10, Math.floor(Math.log(maxGridValue / gridValue) / Math.LN10));\n      if (gridValue * 5 <= maxGridValue) {\n        gridValue *= 5;\n      }\n      gridY = Math.round(height - gridValue * yScaleFactor - 0.5) + 0.5;\n      context.beginPath();\n      context.lineWidth = 1;\n      context.strokeStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-on-surface-subtle');\n      context.moveTo(0, gridY);\n      context.lineTo(width, gridY);\n      context.stroke();\n      context.closePath();\n    }\n\n    function drawBarCallback(x: number, size: number): void {\n      context.moveTo(x, height - 1);\n      context.lineTo(x, Math.round(height - size * yScaleFactor - 1));\n    }\n\n    context.beginPath();\n    context.lineWidth = 2;\n    context.strokeStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-neutral-outline');\n    aggregateAndCall(topSizes, drawBarCallback);\n    context.stroke();\n    context.closePath();\n\n    context.beginPath();\n    context.lineWidth = 2;\n    context.strokeStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-primary-bright');\n    aggregateAndCall(sizes, drawBarCallback);\n    context.stroke();\n    context.closePath();\n\n    if (gridValue) {\n      const label = i18n.ByteUtilities.bytesToString(gridValue);\n      const labelPadding = 4;\n      const labelX = 0;\n      const labelY = gridY - 0.5;\n      const labelWidth = 2 * labelPadding + context.measureText(label).width;\n      context.beginPath();\n      context.textBaseline = 'bottom';\n      context.font = '10px ' + window.getComputedStyle(this.element, null).getPropertyValue('font-family');\n      // Background behind text for better contrast. Some opacity so canvas can still bleed through\n      context.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--color-background-opacity-80');\n      context.fillRect(labelX, labelY - gridLabelHeight, labelWidth, gridLabelHeight);\n      context.fillStyle = ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-on-surface-subtle');\n      context.fillText(label, labelX + labelPadding, labelY);\n      context.fill();\n      context.closePath();\n    }\n  }\n\n  override onResize(): void {\n    this.updateOverviewCanvas = true;\n    this.scheduleUpdate();\n  }\n\n  onWindowChanged(): void {\n    if (!this.updateGridTimerId) {\n      this.updateGridTimerId = window.setTimeout(this.updateGrid.bind(this), 10);\n    }\n  }\n\n  scheduleUpdate(): void {\n    if (this.updateTimerId) {\n      return;\n    }\n    this.updateTimerId = window.setTimeout(this.update.bind(this), 10);\n  }\n\n  updateBoundaries(): void {\n    this.windowLeftRatio = this.overviewGrid.windowLeftRatio();\n    this.windowRightRatio = this.overviewGrid.windowRightRatio();\n    this.windowWidthRatio = this.windowRightRatio - this.windowLeftRatio;\n  }\n\n  update(): void {\n    this.updateTimerId = null;\n    if (!this.isShowing()) {\n      return;\n    }\n    this.updateBoundaries();\n    this.overviewCalculator.updateBoundaries(this);\n    this.overviewGrid.updateDividers(this.overviewCalculator);\n    this.drawOverviewCanvas(this.overviewContainer.clientWidth, this.overviewContainer.clientHeight - 20);\n  }\n\n  updateGrid(): void {\n    this.updateGridTimerId = 0;\n    this.updateBoundaries();\n    const ids = this.profileSamples.ids;\n    if (!ids.length) {\n      return;\n    }\n    const timestamps = this.profileSamples.timestamps;\n    const sizes = this.profileSamples.sizes;\n    const startTime = timestamps[0];\n    const totalTime = this.profileSamples.totalTime;\n    const timeLeft = startTime + totalTime * this.windowLeftRatio;\n    const timeRight = startTime + totalTime * this.windowRightRatio;\n    const minIndex =\n        Platform.ArrayUtilities.lowerBound(timestamps, timeLeft, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n    const maxIndex =\n        Platform.ArrayUtilities.upperBound(timestamps, timeRight, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n    let size = 0;\n    for (let i = minIndex; i < maxIndex; ++i) {\n      size += sizes[i];\n    }\n    const minId = minIndex > 0 ? ids[minIndex - 1] : 0;\n    const maxId = maxIndex < ids.length ? ids[maxIndex] : Infinity;\n\n    this.dispatchEventToListeners(Events.IDS_RANGE_CHANGED, {minId, maxId, size});\n  }\n}\n\nexport const enum Events {\n  IDS_RANGE_CHANGED = 'IdsRangeChanged',\n}\n\nexport interface IdsRangeChangedEvent {\n  minId: number;\n  maxId: number;\n  size: number;\n}\n\nexport interface EventTypes {\n  [Events.IDS_RANGE_CHANGED]: IdsRangeChangedEvent;\n}\n\nexport class SmoothScale {\n  lastUpdate: number;\n  currentScale: number;\n  constructor() {\n    this.lastUpdate = 0;\n    this.currentScale = 0.0;\n  }\n\n  nextScale(target: number): number {\n    target = target || this.currentScale;\n    if (this.currentScale) {\n      const now = Date.now();\n      const timeDeltaMs = now - this.lastUpdate;\n      this.lastUpdate = now;\n      const maxChangePerSec = 20;\n      const maxChangePerDelta = Math.pow(maxChangePerSec, timeDeltaMs / 1000);\n      const scaleChange = target / this.currentScale;\n      this.currentScale *= Platform.NumberUtilities.clamp(scaleChange, 1 / maxChangePerDelta, maxChangePerDelta);\n    } else {\n      this.currentScale = target;\n    }\n    return this.currentScale;\n  }\n}\n\nexport class Samples {\n  sizes: number[];\n  ids: number[];\n  timestamps: number[];\n  max: number[];\n  totalTime: number;\n  constructor() {\n    this.sizes = [];\n    this.ids = [];\n    this.timestamps = [];\n    this.max = [];\n    this.totalTime = 30000;\n  }\n}\n\nexport class OverviewCalculator implements NetworkTimeCalculator.Calculator {\n  maximumBoundaries: number;\n  minimumBoundaries: number;\n  xScaleFactor: number;\n  constructor() {\n    this.maximumBoundaries = 0;\n    this.minimumBoundaries = 0;\n    this.xScaleFactor = 0;\n  }\n\n  updateBoundaries(chart: HeapTimelineOverview): void {\n    this.minimumBoundaries = 0;\n    this.maximumBoundaries = chart.profileSamples.totalTime;\n    this.xScaleFactor = chart.overviewContainer.clientWidth / this.maximumBoundaries;\n  }\n\n  computePosition(time: number): number {\n    return (time - this.minimumBoundaries) * this.xScaleFactor;\n  }\n\n  formatValue(value: number, precision?: number): string {\n    return i18n.TimeUtilities.secondsToString(value / 1000, Boolean(precision));\n  }\n\n  maximumBoundary(): number {\n    return this.maximumBoundaries;\n  }\n\n  minimumBoundary(): number {\n    return this.minimumBoundaries;\n  }\n\n  zeroTime(): number {\n    return this.minimumBoundaries;\n  }\n\n  boundarySpan(): number {\n    return this.maximumBoundaries - this.minimumBoundaries;\n  }\n}\n", "// Copyright 2011 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as ObjectUI from '../../ui/legacy/components/object_ui/object_ui.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {\n  AllocationDataGrid,\n  HeapSnapshotConstructorsDataGrid,\n  HeapSnapshotContainmentDataGrid,\n  HeapSnapshotDiffDataGrid,\n  HeapSnapshotRetainmentDataGrid,\n  type HeapSnapshotSortableDataGrid,\n  HeapSnapshotSortableDataGridEvents,\n} from './HeapSnapshotDataGrids.js';\nimport {\n  type AllocationGridNode,\n  HeapSnapshotGenericObjectNode,\n  type HeapSnapshotGridNode,\n} from './HeapSnapshotGridNodes.js';\nimport {type HeapSnapshotProxy, HeapSnapshotWorkerProxy} from './HeapSnapshotProxy.js';\nimport {Events, HeapTimelineOverview, type IdsRangeChangedEvent, Samples} from './HeapTimelineOverview.js';\nimport * as ModuleUIStrings from './ModuleUIStrings.js';\nimport {\n  type DataDisplayDelegate,\n  Events as ProfileHeaderEvents,\n  ProfileEvents as ProfileTypeEvents,\n  ProfileHeader,\n  ProfileType,\n} from './ProfileHeader.js';\nimport {ProfileSidebarTreeElement} from './ProfileSidebarTreeElement.js';\nimport {instance} from './ProfileTypeRegistry.js';\n\nconst UIStrings = {\n  /**\n   * @description Text to find an item\n   */\n  find: 'Find',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  containment: 'Containment',\n  /**\n   * @description Retaining paths title text content in Heap Snapshot View of a profiler tool\n   */\n  retainers: 'Retainers',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  allocationStack: 'Allocation stack',\n  /**\n   * @description Screen reader label for a select box that chooses the perspective in the Memory panel when viewing a Heap Snapshot\n   */\n  perspective: 'Perspective',\n  /**\n   * @description Screen reader label for a select box that chooses the snapshot to use as a base in the Memory panel when viewing a Heap Snapshot\n   */\n  baseSnapshot: 'Base snapshot',\n  /**\n   * @description Text to filter result items\n   */\n  filter: 'Filter',\n  /**\n   * @description Placeholder text in the filter bar to filter by JavaScript class names for a heap\n   */\n  filterByClass: 'Filter by class',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  code: 'Code',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  strings: 'Strings',\n  /**\n   * @description Label on a pie chart in the statistics view for the Heap Snapshot tool\n   */\n  jsArrays: 'JS arrays',\n  /**\n   * @description Label on a pie chart in the statistics view for the Heap Snapshot tool\n   */\n  typedArrays: 'Typed arrays',\n  /**\n   * @description Label on a pie chart in the statistics view for the Heap Snapshot tool\n   */\n  systemObjects: 'System objects',\n  /**\n   * @description Label on a pie chart in the statistics view for the Heap Snapshot tool\n   */\n  otherJSObjects: 'Other JS objects',\n  /**\n   * @description Label on a pie chart in the statistics view for the Heap Snapshot tool\n   */\n  otherNonJSObjects: 'Other non-JS objects (such as HTML and CSS)',\n  /**\n   * @description The reported total size used in the selected time frame of the allocation sampling profile\n   * @example {3 MB} PH1\n   */\n  selectedSizeS: 'Selected size: {PH1}',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  allObjects: 'All objects',\n  /**\n   * @description Title in Heap Snapshot View of a profiler tool\n   * @example {Profile 2} PH1\n   */\n  objectsAllocatedBeforeS: 'Objects allocated before {PH1}',\n  /**\n   * @description Title in Heap Snapshot View of a profiler tool\n   * @example {Profile 1} PH1\n   * @example {Profile 2} PH2\n   */\n  objectsAllocatedBetweenSAndS: 'Objects allocated between {PH1} and {PH2}',\n  /**\n   * @description An option which will filter the heap snapshot to show only\n   * strings which exactly match at least one other string\n   */\n  duplicatedStrings: 'Duplicated strings',\n  /**\n   * @description An option which will filter the heap snapshot to show only\n   * detached DOM nodes and other objects kept alive by detached DOM nodes\n   */\n  objectsRetainedByDetachedDomNodes: 'Objects retained by detached DOM nodes',\n  /**\n   * @description An option which will filter the heap snapshot to show only\n   * objects kept alive by the DevTools console\n   */\n  objectsRetainedByConsole: 'Objects retained by DevTools Console',\n  /**\n   * @description Text for the summary view\n   */\n  summary: 'Summary',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  comparison: 'Comparison',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  allocation: 'Allocation',\n  /**\n   * @description Title text content in Heap Snapshot View of a profiler tool\n   */\n  liveObjects: 'Live objects',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  statistics: 'Statistics',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  heapSnapshot: 'Heap snapshot',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  takeHeapSnapshot: 'Take heap snapshot',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  heapSnapshots: 'Heap snapshots',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  heapSnapshotProfilesShowMemory: 'See the memory distribution of JavaScript objects and related DOM nodes',\n  /**\n   * @description Label for a checkbox in the heap snapshot view of the profiler tool. The \"heap snapshot\" contains the\n   * current state of JavaScript memory. With this checkbox enabled, the snapshot also includes internal data that is\n   * specific to Chrome (hence implementation-specific).\n   */\n  exposeInternals: 'Internals with implementation details',\n  /**\n   * @description Progress update that the profiler is capturing a snapshot of the heap\n   */\n  snapshotting: 'Snapshotting…',\n  /**\n   * @description Profile title in Heap Snapshot View of a profiler tool\n   * @example {1} PH1\n   */\n  snapshotD: 'Snapshot {PH1}',\n  /**\n   * @description Text for a percentage value\n   * @example {13.0} PH1\n   */\n  percentagePlaceholder: '{PH1}%',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  allocationInstrumentationOn: 'Allocations on timeline',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  stopRecordingHeapProfile: 'Stop recording heap profile',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  startRecordingHeapProfile: 'Start recording heap profile',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool.\n   * A stack trace is a list of functions that were called.\n   * This option turns on recording of a stack trace at each allocation.\n   * The recording itself is a somewhat expensive operation, so turning this option on, the website's performance may be affected negatively (e.g. everything becomes slower).\n   */\n  recordAllocationStacksExtra: 'Allocation stack traces (more overhead)',\n  /**\n   * @description Text in CPUProfile View of a profiler tool\n   */\n  recording: 'Recording…',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  allocationTimelines: 'Allocation timelines',\n  /**\n   * @description Description for the 'Allocation timeline' tool in the Memory panel.\n   */\n  AllocationTimelinesShowInstrumented:\n      'Record memory allocations over time and isolate memory leaks by selecting intervals with allocations that are still alive',\n  /**\n   * @description Text when something is loading\n   */\n  loading: 'Loading…',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   * @example {30} PH1\n   */\n  savingD: 'Saving… {PH1}%',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  heapMemoryUsage: 'Heap memory usage',\n  /**\n   * @description Text of a DOM element in Heap Snapshot View of a profiler tool\n   */\n  stackWasNotRecordedForThisObject:\n      'Stack wasn\\'t recorded for this object because it had been allocated before this profile recording started.',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool.\n   * This text is on a button to undo all previous \"Ignore this retainer\" actions.\n   */\n  restoreIgnoredRetainers: 'Restore ignored retainers',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapSnapshotView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// The way this is handled is to workaround the strings inside the heap_snapshot_worker\n// If strings are removed from inside the worker strings can be declared in this module\n// as any other.\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst moduleUIstr_ = i18n.i18n.registerUIStrings('panels/profiler/ModuleUIStrings.ts', ModuleUIStrings.UIStrings);\nconst moduleI18nString = i18n.i18n.getLocalizedString.bind(undefined, moduleUIstr_);\nexport class HeapSnapshotView extends UI.View.SimpleView implements DataDisplayDelegate, UI.SearchableView.Searchable {\n  searchResults: number[];\n  profile: HeapProfileHeader;\n  readonly linkifier: Components.Linkifier.Linkifier;\n  readonly parentDataDisplayDelegate: DataDisplayDelegate;\n  readonly searchableViewInternal: UI.SearchableView.SearchableView;\n  readonly splitWidget: UI.SplitWidget.SplitWidget;\n  readonly containmentDataGrid: HeapSnapshotContainmentDataGrid;\n  readonly containmentWidget: DataGrid.DataGrid.DataGridWidget<HeapSnapshotGridNode>;\n  readonly statisticsView: HeapSnapshotStatisticsView;\n  readonly constructorsDataGrid: HeapSnapshotConstructorsDataGrid;\n  readonly constructorsWidget: DataGrid.DataGrid.DataGridWidget<HeapSnapshotGridNode>;\n  readonly diffDataGrid: HeapSnapshotDiffDataGrid;\n  readonly diffWidget: DataGrid.DataGrid.DataGridWidget<HeapSnapshotGridNode>;\n  readonly allocationDataGrid: AllocationDataGrid|null;\n  readonly allocationWidget: DataGrid.DataGrid.DataGridWidget<HeapSnapshotGridNode>|undefined;\n  readonly allocationStackView: HeapAllocationStackView|undefined;\n  readonly tabbedPane: UI.TabbedPane.TabbedPane|undefined;\n  readonly retainmentDataGrid: HeapSnapshotRetainmentDataGrid;\n  readonly retainmentWidget: DataGrid.DataGrid.DataGridWidget<HeapSnapshotGridNode>;\n  readonly objectDetailsView: UI.Widget.VBox;\n  readonly perspectives: Array<SummaryPerspective|ComparisonPerspective|ContainmentPerspective|AllocationPerspective|\n                               StatisticsPerspective>;\n  readonly comparisonPerspective: ComparisonPerspective;\n  readonly perspectiveSelect: UI.Toolbar.ToolbarComboBox;\n  baseSelect: UI.Toolbar.ToolbarComboBox;\n  readonly filterSelect: UI.Toolbar.ToolbarComboBox;\n  readonly classNameFilter: UI.Toolbar.ToolbarInput;\n  readonly selectedSizeText: UI.Toolbar.ToolbarText;\n  readonly resetRetainersButton: UI.Toolbar.ToolbarButton;\n  readonly popoverHelper: UI.PopoverHelper.PopoverHelper;\n  currentPerspectiveIndex: number;\n  currentPerspective: SummaryPerspective|ComparisonPerspective|ContainmentPerspective|AllocationPerspective|\n      StatisticsPerspective;\n  dataGrid: HeapSnapshotSortableDataGrid|null;\n  readonly searchThrottler: Common.Throttler.Throttler;\n  baseProfile!: HeapProfileHeader|null;\n  trackingOverviewGrid?: HeapTimelineOverview;\n  currentSearchResultIndex = -1;\n  currentSearch?: HeapSnapshotModel.HeapSnapshotModel.SearchConfig;\n\n  get currentQuery(): string|undefined {\n    return this.currentSearch?.query;\n  }\n  set currentQuery(value: string) {\n    if (this.currentSearch) {\n      this.currentSearch.query = value;\n    }\n  }\n\n  constructor(dataDisplayDelegate: DataDisplayDelegate, profile: HeapProfileHeader) {\n    super({\n      title: i18nString(UIStrings.heapSnapshot),\n      viewId: 'heap-snapshot',\n    });\n\n    this.searchResults = [];\n\n    this.element.classList.add('heap-snapshot-view');\n    this.profile = profile;\n    this.linkifier = new Components.Linkifier.Linkifier();\n    const profileType = profile.profileType();\n\n    profileType.addEventListener(HeapSnapshotProfileTypeEvents.SNAPSHOT_RECEIVED, this.onReceiveSnapshot, this);\n    profileType.addEventListener(ProfileTypeEvents.REMOVE_PROFILE_HEADER, this.onProfileHeaderRemoved, this);\n\n    const isHeapTimeline = profileType.id === TrackingHeapSnapshotProfileType.TypeId;\n    if (isHeapTimeline) {\n      this.createOverview();\n    }\n    const hasAllocationStacks = instance.trackingHeapSnapshotProfileType.recordAllocationStacksSetting().get();\n\n    this.parentDataDisplayDelegate = dataDisplayDelegate;\n\n    this.searchableViewInternal = new UI.SearchableView.SearchableView(this, null);\n    this.searchableViewInternal.setPlaceholder(i18nString(UIStrings.find), i18nString(UIStrings.find));\n    this.searchableViewInternal.show(this.element);\n\n    this.splitWidget = new UI.SplitWidget.SplitWidget(false, true, 'heap-snapshot-split-view-state', 200, 200);\n    this.splitWidget.show(this.searchableViewInternal.element);\n\n    const heapProfilerModel = profile.heapProfilerModel();\n    this.containmentDataGrid = new HeapSnapshotContainmentDataGrid(\n        heapProfilerModel, this, /* displayName */ i18nString(UIStrings.containment));\n    this.containmentDataGrid.addEventListener(DataGrid.DataGrid.Events.SELECTED_NODE, this.selectionChanged, this);\n    this.containmentWidget = this.containmentDataGrid.asWidget();\n    this.containmentWidget.setMinimumSize(50, 25);\n\n    this.statisticsView = new HeapSnapshotStatisticsView();\n\n    this.constructorsDataGrid = new HeapSnapshotConstructorsDataGrid(heapProfilerModel, this);\n    this.constructorsDataGrid.addEventListener(DataGrid.DataGrid.Events.SELECTED_NODE, this.selectionChanged, this);\n    this.constructorsWidget = this.constructorsDataGrid.asWidget();\n    this.constructorsWidget.setMinimumSize(50, 25);\n    this.constructorsWidget.element.setAttribute(\n        'jslog', `${VisualLogging.pane('heap-snapshot.constructors-view').track({resize: true})}`);\n\n    this.diffDataGrid = new HeapSnapshotDiffDataGrid(heapProfilerModel, this);\n    this.diffDataGrid.addEventListener(DataGrid.DataGrid.Events.SELECTED_NODE, this.selectionChanged, this);\n    this.diffWidget = this.diffDataGrid.asWidget();\n    this.diffWidget.setMinimumSize(50, 25);\n\n    this.allocationDataGrid = null;\n\n    if (isHeapTimeline && hasAllocationStacks) {\n      this.allocationDataGrid = new AllocationDataGrid(heapProfilerModel, this);\n      this.allocationDataGrid.addEventListener(\n          DataGrid.DataGrid.Events.SELECTED_NODE, this.onSelectAllocationNode, this);\n      this.allocationWidget = this.allocationDataGrid.asWidget();\n      this.allocationWidget.setMinimumSize(50, 25);\n\n      this.allocationStackView = new HeapAllocationStackView(heapProfilerModel);\n      this.allocationStackView.setMinimumSize(50, 25);\n\n      this.tabbedPane = new UI.TabbedPane.TabbedPane();\n    }\n\n    this.retainmentDataGrid = new HeapSnapshotRetainmentDataGrid(heapProfilerModel, this);\n    this.retainmentWidget = this.retainmentDataGrid.asWidget();\n    this.retainmentWidget.setMinimumSize(50, 21);\n    this.retainmentWidget.element.classList.add('retaining-paths-view');\n    this.retainmentWidget.element.setAttribute(\n        'jslog', `${VisualLogging.pane('heap-snapshot.retaining-paths-view').track({resize: true})}`);\n\n    let splitWidgetResizer;\n    if (this.allocationStackView) {\n      this.tabbedPane = new UI.TabbedPane.TabbedPane();\n\n      this.tabbedPane.appendTab('retainers', i18nString(UIStrings.retainers), this.retainmentWidget);\n      this.tabbedPane.appendTab('allocation-stack', i18nString(UIStrings.allocationStack), this.allocationStackView);\n\n      splitWidgetResizer = this.tabbedPane.headerElement();\n      this.objectDetailsView = this.tabbedPane;\n    } else {\n      const retainmentViewHeader = document.createElement('div');\n      retainmentViewHeader.classList.add('heap-snapshot-view-resizer');\n      const retainingPathsTitleDiv = retainmentViewHeader.createChild('div', 'title');\n      retainmentViewHeader.createChild('div', 'verticalResizerIcon');\n      const retainingPathsTitle = retainingPathsTitleDiv.createChild('span');\n      retainingPathsTitle.textContent = i18nString(UIStrings.retainers);\n\n      splitWidgetResizer = retainmentViewHeader;\n      this.objectDetailsView = new UI.Widget.VBox();\n      this.objectDetailsView.element.appendChild(retainmentViewHeader);\n      this.retainmentWidget.show(this.objectDetailsView.element);\n    }\n    this.splitWidget.hideDefaultResizer();\n    this.splitWidget.installResizer(splitWidgetResizer);\n\n    this.retainmentDataGrid.addEventListener(DataGrid.DataGrid.Events.SELECTED_NODE, this.inspectedObjectChanged, this);\n    this.retainmentDataGrid.reset();\n\n    this.perspectives = [];\n    this.comparisonPerspective = new ComparisonPerspective();\n    this.perspectives.push(new SummaryPerspective());\n    if (profile.profileType() !== instance.trackingHeapSnapshotProfileType) {\n      this.perspectives.push(this.comparisonPerspective);\n    }\n    this.perspectives.push(new ContainmentPerspective());\n    if (this.allocationWidget) {\n      this.perspectives.push(new AllocationPerspective());\n    }\n    this.perspectives.push(new StatisticsPerspective());\n\n    this.perspectiveSelect = new UI.Toolbar.ToolbarComboBox(\n        this.onSelectedPerspectiveChanged.bind(this), i18nString(UIStrings.perspective), undefined,\n        'profiler.heap-snapshot-perspective');\n    this.updatePerspectiveOptions();\n\n    this.baseSelect = new UI.Toolbar.ToolbarComboBox(\n        this.changeBase.bind(this), i18nString(UIStrings.baseSnapshot), undefined, 'profiler.heap-snapshot-base');\n    this.baseSelect.setVisible(false);\n    this.updateBaseOptions();\n\n    this.filterSelect = new UI.Toolbar.ToolbarComboBox(\n        this.changeFilter.bind(this), i18nString(UIStrings.filter), undefined, 'profiler.heap-snapshot-filter');\n    this.filterSelect.setVisible(false);\n    this.updateFilterOptions();\n\n    this.classNameFilter = new UI.Toolbar.ToolbarFilter(i18nString(UIStrings.filterByClass));\n    this.classNameFilter.setVisible(false);\n    this.constructorsDataGrid.setNameFilter(this.classNameFilter);\n    this.diffDataGrid.setNameFilter(this.classNameFilter);\n\n    this.selectedSizeText = new UI.Toolbar.ToolbarText();\n\n    const restoreIgnoredRetainers = i18nString(UIStrings.restoreIgnoredRetainers);\n    this.resetRetainersButton =\n        new UI.Toolbar.ToolbarButton(restoreIgnoredRetainers, 'clear-list', restoreIgnoredRetainers);\n    this.resetRetainersButton.setVisible(false);\n    this.resetRetainersButton.addEventListener(UI.Toolbar.ToolbarButton.Events.CLICK, async () => {\n      // The reset retainers button acts upon whichever snapshot is currently shown in the Retainers pane.\n      await this.retainmentDataGrid.snapshot?.unignoreAllNodesInRetainersView();\n      await this.retainmentDataGrid.dataSourceChanged();\n    });\n    this.retainmentDataGrid.resetRetainersButton = this.resetRetainersButton;\n\n    this.popoverHelper = new UI.PopoverHelper.PopoverHelper(\n        this.element, this.getPopoverRequest.bind(this), 'profiler.heap-snapshot-object');\n    this.popoverHelper.setDisableOnClick(true);\n    this.element.addEventListener('scroll', this.popoverHelper.hidePopover.bind(this.popoverHelper), true);\n\n    this.currentPerspectiveIndex = 0;\n    this.currentPerspective = this.perspectives[0];\n    this.currentPerspective.activate(this);\n    this.dataGrid = this.currentPerspective.masterGrid(this);\n\n    void this.populate();\n    this.searchThrottler = new Common.Throttler.Throttler(0);\n\n    for (const existingProfile of this.profiles()) {\n      existingProfile.addEventListener(ProfileHeaderEvents.PROFILE_TITLE_CHANGED, this.updateControls, this);\n    }\n  }\n\n  createOverview(): void {\n    const profileType = this.profile.profileType();\n    this.trackingOverviewGrid = new HeapTimelineOverview();\n    this.trackingOverviewGrid.addEventListener(Events.IDS_RANGE_CHANGED, this.onIdsRangeChanged.bind(this));\n    if (!this.profile.fromFile() && profileType.profileBeingRecorded() === this.profile) {\n      (profileType as TrackingHeapSnapshotProfileType)\n          .addEventListener(TrackingHeapSnapshotProfileTypeEvents.HEAP_STATS_UPDATE, this.onHeapStatsUpdate, this);\n      (profileType as TrackingHeapSnapshotProfileType)\n          .addEventListener(TrackingHeapSnapshotProfileTypeEvents.TRACKING_STOPPED, this.onStopTracking, this);\n      this.trackingOverviewGrid.start();\n    }\n  }\n\n  onStopTracking(): void {\n    const profileType = this.profile.profileType() as TrackingHeapSnapshotProfileType;\n    profileType.removeEventListener(\n        TrackingHeapSnapshotProfileTypeEvents.HEAP_STATS_UPDATE, this.onHeapStatsUpdate, this);\n    profileType.removeEventListener(TrackingHeapSnapshotProfileTypeEvents.TRACKING_STOPPED, this.onStopTracking, this);\n    if (this.trackingOverviewGrid) {\n      this.trackingOverviewGrid.stop();\n    }\n  }\n\n  onHeapStatsUpdate({data: samples}: Common.EventTarget.EventTargetEvent<Samples>): void {\n    if (this.trackingOverviewGrid) {\n      this.trackingOverviewGrid.setSamples(samples);\n    }\n  }\n\n  searchableView(): UI.SearchableView.SearchableView {\n    return this.searchableViewInternal;\n  }\n\n  showProfile(profile: ProfileHeader|null): UI.Widget.Widget|null {\n    return this.parentDataDisplayDelegate.showProfile(profile);\n  }\n\n  showObject(snapshotObjectId: string, perspectiveName: string): void {\n    if (Number(snapshotObjectId) <= this.profile.maxJSObjectId) {\n      void this.selectLiveObject(perspectiveName, snapshotObjectId);\n    } else {\n      this.parentDataDisplayDelegate.showObject(snapshotObjectId, perspectiveName);\n    }\n  }\n\n  async linkifyObject(nodeIndex: number): Promise<Element|null> {\n    const heapProfilerModel = this.profile.heapProfilerModel();\n    // heapProfilerModel is null if snapshot was loaded from file\n    if (!heapProfilerModel) {\n      return null;\n    }\n    const location = await this.profile.getLocation(nodeIndex);\n    if (!location) {\n      return null;\n    }\n    const debuggerModel = heapProfilerModel.runtimeModel().debuggerModel();\n    const rawLocation = debuggerModel.createRawLocationByScriptId(\n        String(location.scriptId) as Protocol.Runtime.ScriptId, location.lineNumber, location.columnNumber);\n    if (!rawLocation) {\n      return null;\n    }\n    const script = rawLocation.script();\n    const sourceURL = script?.sourceURL;\n    return sourceURL && this.linkifier ? this.linkifier.linkifyRawLocation(rawLocation, sourceURL) : null;\n  }\n\n  async populate(): Promise<void> {\n    const heapSnapshotProxy = await this.profile.loadPromise;\n\n    void this.retrieveStatistics(heapSnapshotProxy);\n    if (this.dataGrid) {\n      void this.dataGrid.setDataSource(heapSnapshotProxy, 0);\n    }\n\n    if (this.profile.profileType().id === TrackingHeapSnapshotProfileType.TypeId && this.profile.fromFile()) {\n      const samples = await heapSnapshotProxy.getSamples();\n      if (samples) {\n        console.assert(Boolean(samples.timestamps.length));\n        const profileSamples = new Samples();\n        profileSamples.sizes = samples.sizes;\n        profileSamples.ids = samples.lastAssignedIds;\n        profileSamples.timestamps = samples.timestamps;\n        profileSamples.max = samples.sizes;\n        profileSamples.totalTime = Math.max(samples.timestamps[samples.timestamps.length - 1] || 0, 10000);\n        if (this.trackingOverviewGrid) {\n          this.trackingOverviewGrid.setSamples(profileSamples);\n        }\n      }\n    }\n\n    const list = this.profiles();\n    const profileIndex = list.indexOf(this.profile);\n    this.baseSelect.setSelectedIndex(Math.max(0, profileIndex - 1));\n    if (this.trackingOverviewGrid) {\n      this.trackingOverviewGrid.updateGrid();\n    }\n  }\n\n  async retrieveStatistics(heapSnapshotProxy: HeapSnapshotProxy):\n      Promise<HeapSnapshotModel.HeapSnapshotModel.Statistics> {\n    const statistics = await heapSnapshotProxy.getStatistics();\n    const {v8heap, native} = statistics;\n    const otherJSObjectsSize = v8heap.total - v8heap.code - v8heap.strings - v8heap.jsArrays - v8heap.system;\n\n    const records = [\n      {value: v8heap.code, color: 'var(--app-color-code)', title: i18nString(UIStrings.code)},\n      {value: v8heap.strings, color: 'var(--app-color-strings)', title: i18nString(UIStrings.strings)},\n      {value: v8heap.jsArrays, color: 'var(--app-color-js-arrays)', title: i18nString(UIStrings.jsArrays)},\n      {value: native.typedArrays, color: 'var(--app-color-typed-arrays)', title: i18nString(UIStrings.typedArrays)},\n      {value: v8heap.system, color: 'var(--app-color-system)', title: i18nString(UIStrings.systemObjects)},\n      {\n        value: otherJSObjectsSize,\n        color: 'var(--app-color-other-js-objects)',\n        title: i18nString(UIStrings.otherJSObjects)\n      },\n      {\n        value: native.total - native.typedArrays,\n        color: 'var(--app-color-other-non-js-objects)',\n        title: i18nString(UIStrings.otherNonJSObjects)\n      },\n    ];\n    this.statisticsView.setTotalAndRecords(statistics.total, records);\n    return statistics;\n  }\n\n  onIdsRangeChanged(event: Common.EventTarget.EventTargetEvent<IdsRangeChangedEvent>): void {\n    const {minId, maxId} = event.data;\n    this.selectedSizeText.setText(\n        i18nString(UIStrings.selectedSizeS, {PH1: i18n.ByteUtilities.bytesToString(event.data.size)}));\n    if (this.constructorsDataGrid.snapshot) {\n      this.constructorsDataGrid.setSelectionRange(minId, maxId);\n    }\n  }\n\n  override async toolbarItems(): Promise<UI.Toolbar.ToolbarItem[]> {\n    const result: UI.Toolbar.ToolbarItem[] = [this.perspectiveSelect, this.classNameFilter];\n    if (this.profile.profileType() !== instance.trackingHeapSnapshotProfileType) {\n      result.push(this.baseSelect, this.filterSelect);\n    }\n    result.push(this.selectedSizeText);\n    result.push(this.resetRetainersButton);\n    return result;\n  }\n\n  override willHide(): void {\n    this.currentSearchResultIndex = -1;\n    this.popoverHelper.hidePopover();\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsWholeWordSearch(): boolean {\n    return false;\n  }\n\n  supportsRegexSearch(): boolean {\n    return false;\n  }\n\n  onSearchCanceled(): void {\n    this.currentSearchResultIndex = -1;\n    this.searchResults = [];\n  }\n\n  selectRevealedNode(node: HeapSnapshotGridNode|null): void {\n    if (node) {\n      node.select();\n    }\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void {\n    const nextQuery = new HeapSnapshotModel.HeapSnapshotModel.SearchConfig(\n        searchConfig.query.trim(),\n        searchConfig.caseSensitive,\n        searchConfig.wholeWord,\n        searchConfig.isRegex,\n        shouldJump,\n        jumpBackwards || false,\n    );\n\n    void this.searchThrottler.schedule(this.performSearchInternal.bind(this, nextQuery));\n  }\n\n  async performSearchInternal(nextQuery: HeapSnapshotModel.HeapSnapshotModel.SearchConfig): Promise<void> {\n    // Call onSearchCanceled since it will reset everything we need before doing a new search.\n    this.onSearchCanceled();\n\n    if (!this.currentPerspective.supportsSearch()) {\n      return;\n    }\n\n    this.currentSearch = nextQuery;\n    const query = nextQuery.query.trim();\n\n    if (!query) {\n      return;\n    }\n\n    if (query.charAt(0) === '@') {\n      const snapshotNodeId = parseInt(query.substring(1), 10);\n      if (isNaN(snapshotNodeId)) {\n        return;\n      }\n      if (!this.dataGrid) {\n        return;\n      }\n      const node = await this.dataGrid.revealObjectByHeapSnapshotId(String(snapshotNodeId));\n      this.selectRevealedNode(node);\n      return;\n    }\n\n    if (!this.profile.snapshotProxy || !this.dataGrid) {\n      return;\n    }\n\n    const filter = this.dataGrid.nodeFilter();\n    this.searchResults = filter ? await this.profile.snapshotProxy.search(this.currentSearch, filter) : [];\n\n    this.searchableViewInternal.updateSearchMatchesCount(this.searchResults.length);\n    if (this.searchResults.length) {\n      this.currentSearchResultIndex = nextQuery.jumpBackward ? this.searchResults.length - 1 : 0;\n    }\n    await this.jumpToSearchResult(this.currentSearchResultIndex);\n  }\n\n  jumpToNextSearchResult(): void {\n    if (!this.searchResults.length) {\n      return;\n    }\n    this.currentSearchResultIndex = (this.currentSearchResultIndex + 1) % this.searchResults.length;\n    void this.searchThrottler.schedule(this.jumpToSearchResult.bind(this, this.currentSearchResultIndex));\n  }\n\n  jumpToPreviousSearchResult(): void {\n    if (!this.searchResults.length) {\n      return;\n    }\n    this.currentSearchResultIndex =\n        (this.currentSearchResultIndex + this.searchResults.length - 1) % this.searchResults.length;\n    void this.searchThrottler.schedule(this.jumpToSearchResult.bind(this, this.currentSearchResultIndex));\n  }\n\n  async jumpToSearchResult(searchResultIndex: number): Promise<void> {\n    this.searchableViewInternal.updateCurrentMatchIndex(searchResultIndex);\n    if (searchResultIndex === -1) {\n      return;\n    }\n    if (!this.dataGrid) {\n      return;\n    }\n    const node = await this.dataGrid.revealObjectByHeapSnapshotId(String(this.searchResults[searchResultIndex]));\n    this.selectRevealedNode(node);\n  }\n\n  refreshVisibleData(): void {\n    if (!this.dataGrid) {\n      return;\n    }\n    let child: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>|null = this.dataGrid.rootNode().children[0];\n    while (child) {\n      child.refresh();\n      child = child.traverseNextNode(false, null, true);\n    }\n  }\n\n  changeBase(): void {\n    if (this.baseProfile === this.profiles()[this.baseSelect.selectedIndex()]) {\n      return;\n    }\n    this.baseProfile = this.profiles()[this.baseSelect.selectedIndex()];\n    const dataGrid = (this.dataGrid as HeapSnapshotDiffDataGrid);\n    // Change set base data source only if main data source is already set.\n    if (dataGrid.snapshot) {\n      void this.baseProfile.loadPromise.then(dataGrid.setBaseDataSource.bind(dataGrid));\n    }\n\n    if (!this.currentSearch || !this.searchResults) {\n      return;\n    }\n\n    // The current search needs to be performed again. First negate out previous match\n    // count by calling the search finished callback with a negative number of matches.\n    // Then perform the search again with the same query and callback.\n    this.performSearch(this.currentSearch, false);\n  }\n\n  static readonly ALWAYS_AVAILABLE_FILTERS: ReadonlyArray<{uiName: string, filterName: string}> = [\n    {uiName: i18nString(UIStrings.duplicatedStrings), filterName: 'duplicatedStrings'},\n    {uiName: i18nString(UIStrings.objectsRetainedByDetachedDomNodes), filterName: 'objectsRetainedByDetachedDomNodes'},\n    {uiName: i18nString(UIStrings.objectsRetainedByConsole), filterName: 'objectsRetainedByConsole'},\n  ];\n\n  changeFilter(): void {\n    let selectedIndex = this.filterSelect.selectedIndex();\n    let filterName = undefined;\n    const indexOfFirstAlwaysAvailableFilter =\n        this.filterSelect.size() - HeapSnapshotView.ALWAYS_AVAILABLE_FILTERS.length;\n    if (selectedIndex >= indexOfFirstAlwaysAvailableFilter) {\n      filterName =\n          HeapSnapshotView.ALWAYS_AVAILABLE_FILTERS[selectedIndex - indexOfFirstAlwaysAvailableFilter].filterName;\n      selectedIndex = 0;\n    }\n    const profileIndex = selectedIndex - 1;\n    if (!this.dataGrid) {\n      return;\n    }\n    (this.dataGrid as HeapSnapshotConstructorsDataGrid)\n        .filterSelectIndexChanged(this.profiles(), profileIndex, filterName);\n\n    if (!this.currentSearch || !this.searchResults) {\n      return;\n    }\n\n    // The current search needs to be performed again. First negate out previous match\n    // count by calling the search finished callback with a negative number of matches.\n    // Then perform the search again with the same query and callback.\n    this.performSearch(this.currentSearch, false);\n  }\n\n  profiles(): HeapProfileHeader[] {\n    return this.profile.profileType().getProfiles();\n  }\n\n  selectionChanged(event: Common.EventTarget.EventTargetEvent<DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>>):\n      void {\n    const selectedNode = (event.data as HeapSnapshotGridNode);\n    this.setSelectedNodeForDetailsView(selectedNode);\n    this.inspectedObjectChanged(event);\n  }\n\n  onSelectAllocationNode(\n      event: Common.EventTarget.EventTargetEvent<DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>>): void {\n    const selectedNode = (event.data as AllocationGridNode);\n    this.constructorsDataGrid.setAllocationNodeId(selectedNode.allocationNodeId());\n    this.setSelectedNodeForDetailsView(null);\n  }\n\n  inspectedObjectChanged(\n      event: Common.EventTarget.EventTargetEvent<DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>>): void {\n    const selectedNode = (event.data as HeapSnapshotGridNode);\n    const heapProfilerModel = this.profile.heapProfilerModel();\n    if (heapProfilerModel && selectedNode instanceof HeapSnapshotGenericObjectNode) {\n      void heapProfilerModel.addInspectedHeapObject(\n          String(selectedNode.snapshotNodeId) as Protocol.HeapProfiler.HeapSnapshotObjectId);\n    }\n  }\n\n  setSelectedNodeForDetailsView(nodeItem: HeapSnapshotGridNode|null): void {\n    const dataSource = nodeItem?.retainersDataSource();\n    if (dataSource) {\n      void this.retainmentDataGrid.setDataSource(\n          dataSource.snapshot, dataSource.snapshotNodeIndex, dataSource.snapshotNodeId);\n      if (this.allocationStackView) {\n        void this.allocationStackView.setAllocatedObject(dataSource.snapshot, dataSource.snapshotNodeIndex);\n      }\n    } else {\n      if (this.allocationStackView) {\n        this.allocationStackView.clear();\n      }\n      this.retainmentDataGrid.reset();\n    }\n  }\n\n  async changePerspectiveAndWait(perspectiveTitle: string): Promise<void> {\n    const perspectiveIndex = this.perspectives.findIndex(perspective => perspective.title() === perspectiveTitle);\n    if (perspectiveIndex === -1 || this.currentPerspectiveIndex === perspectiveIndex) {\n      return;\n    }\n    const dataGrid = this.perspectives[perspectiveIndex].masterGrid(this);\n\n    if (!dataGrid) {\n      return;\n    }\n\n    const promise = dataGrid.once(HeapSnapshotSortableDataGridEvents.ContentShown);\n\n    const option = this.perspectiveSelect.options().find(option => option.value === String(perspectiveIndex));\n    this.perspectiveSelect.select((option as Element));\n    this.changePerspective(perspectiveIndex);\n    await promise;\n  }\n\n  async updateDataSourceAndView(): Promise<void> {\n    const dataGrid = this.dataGrid;\n    if (!dataGrid || dataGrid.snapshot) {\n      return;\n    }\n\n    const snapshotProxy = await this.profile.loadPromise;\n\n    if (this.dataGrid !== dataGrid) {\n      return;\n    }\n    if (dataGrid.snapshot !== snapshotProxy) {\n      void dataGrid.setDataSource(snapshotProxy, 0);\n    }\n    if (dataGrid !== this.diffDataGrid) {\n      return;\n    }\n    if (!this.baseProfile) {\n      this.baseProfile = this.profiles()[this.baseSelect.selectedIndex()];\n    }\n\n    const baseSnapshotProxy = await this.baseProfile.loadPromise;\n\n    if (this.diffDataGrid.baseSnapshot !== baseSnapshotProxy) {\n      this.diffDataGrid.setBaseDataSource(baseSnapshotProxy);\n    }\n  }\n\n  onSelectedPerspectiveChanged(event: Event): void {\n    this.changePerspective(Number((event.target as HTMLSelectElement).selectedOptions[0].value));\n  }\n\n  changePerspective(selectedIndex: number): void {\n    if (selectedIndex === this.currentPerspectiveIndex) {\n      return;\n    }\n\n    this.currentPerspectiveIndex = selectedIndex;\n\n    this.currentPerspective.deactivate(this);\n    const perspective = this.perspectives[selectedIndex];\n    this.currentPerspective = perspective;\n    this.dataGrid = (perspective.masterGrid(this) as HeapSnapshotSortableDataGrid);\n    perspective.activate(this);\n\n    this.refreshVisibleData();\n    if (this.dataGrid) {\n      this.dataGrid.updateWidths();\n    }\n\n    void this.updateDataSourceAndView();\n\n    if (!this.currentSearch || !this.searchResults) {\n      return;\n    }\n\n    // The current search needs to be performed again. First negate out previous match\n    // count by calling the search finished callback with a negative number of matches.\n    // Then perform the search again the with same query and callback.\n    this.performSearch(this.currentSearch, false);\n  }\n\n  async selectLiveObject(perspectiveName: string, snapshotObjectId: string): Promise<void> {\n    await this.changePerspectiveAndWait(perspectiveName);\n    if (!this.dataGrid) {\n      return;\n    }\n    const node = await this.dataGrid.revealObjectByHeapSnapshotId(snapshotObjectId);\n    if (node) {\n      node.select();\n    } else {\n      Common.Console.Console.instance().error('Cannot find corresponding heap snapshot node');\n    }\n  }\n\n  getPopoverRequest(event: Event): UI.PopoverHelper.PopoverRequest|null {\n    const span = UI.UIUtils.enclosingNodeOrSelfWithNodeName((event.target as Node), 'span');\n    const row = UI.UIUtils.enclosingNodeOrSelfWithNodeName((event.target as Node), 'tr');\n    if (!row) {\n      return null;\n    }\n    if (!this.dataGrid) {\n      return null;\n    }\n    const node = this.dataGrid.dataGridNodeFromNode(row) || this.containmentDataGrid.dataGridNodeFromNode(row) ||\n        this.constructorsDataGrid.dataGridNodeFromNode(row) || this.diffDataGrid.dataGridNodeFromNode(row) ||\n        (this.allocationDataGrid?.dataGridNodeFromNode(row)) || this.retainmentDataGrid.dataGridNodeFromNode(row);\n    const heapProfilerModel = this.profile.heapProfilerModel();\n    if (!node || !span || !heapProfilerModel) {\n      return null;\n    }\n    let objectPopoverHelper: ObjectUI.ObjectPopoverHelper.ObjectPopoverHelper|null;\n    return {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // @ts-expect-error\n      box: span.boxInWindow(),\n      show: async (popover: UI.GlassPane.GlassPane) => {\n        if (!heapProfilerModel) {\n          return false;\n        }\n        const remoteObject = await (node as HeapSnapshotGridNode).queryObjectContent(heapProfilerModel, 'popover');\n        if (remoteObject instanceof SDK.RemoteObject.RemoteObject) {\n          objectPopoverHelper =\n              await ObjectUI.ObjectPopoverHelper.ObjectPopoverHelper.buildObjectPopover(remoteObject, popover);\n        } else {\n          objectPopoverHelper = ObjectUI.ObjectPopoverHelper.ObjectPopoverHelper.buildDescriptionPopover(\n              remoteObject.description, remoteObject.link, popover);\n        }\n        if (!objectPopoverHelper) {\n          heapProfilerModel.runtimeModel().releaseObjectGroup('popover');\n          return false;\n        }\n        return true;\n      },\n      hide: () => {\n        heapProfilerModel.runtimeModel().releaseObjectGroup('popover');\n        if (objectPopoverHelper) {\n          objectPopoverHelper.dispose();\n        }\n      },\n    };\n  }\n\n  updatePerspectiveOptions(): void {\n    const multipleSnapshots = this.profiles().length > 1;\n    this.perspectiveSelect.removeOptions();\n    this.perspectives.forEach((perspective, index) => {\n      if (multipleSnapshots || perspective !== this.comparisonPerspective) {\n        const option = this.perspectiveSelect.createOption(perspective.title(), String(index));\n        if (perspective === this.currentPerspective) {\n          this.perspectiveSelect.select(option);\n        }\n      }\n    });\n  }\n\n  updateBaseOptions(): void {\n    const list = this.profiles();\n    const selectedIndex = this.baseSelect.selectedIndex();\n\n    this.baseSelect.removeOptions();\n    for (const item of list) {\n      this.baseSelect.createOption(item.title);\n    }\n\n    if (selectedIndex > -1) {\n      this.baseSelect.setSelectedIndex(selectedIndex);\n    }\n  }\n\n  updateFilterOptions(): void {\n    const list = this.profiles();\n    const selectedIndex = this.filterSelect.selectedIndex();\n    const originalSize = this.filterSelect.size();\n\n    this.filterSelect.removeOptions();\n    this.filterSelect.createOption(i18nString(UIStrings.allObjects));\n    for (let i = 0; i < list.length; ++i) {\n      let title;\n      if (!i) {\n        title = i18nString(UIStrings.objectsAllocatedBeforeS, {PH1: list[i].title});\n      } else {\n        title = i18nString(UIStrings.objectsAllocatedBetweenSAndS, {PH1: list[i - 1].title, PH2: list[i].title});\n      }\n      this.filterSelect.createOption(title);\n    }\n\n    // Create a dividing line using em dashes.\n    const dividerIndex = this.filterSelect.size();\n    const divider = this.filterSelect.createOption('\\u2014'.repeat(18));\n    (divider).disabled = true;\n\n    for (const filter of HeapSnapshotView.ALWAYS_AVAILABLE_FILTERS) {\n      this.filterSelect.createOption(filter.uiName);\n    }\n\n    const newSize = this.filterSelect.size();\n\n    if (selectedIndex > -1) {\n      const distanceFromEnd = originalSize - selectedIndex;\n      if (distanceFromEnd <= HeapSnapshotView.ALWAYS_AVAILABLE_FILTERS.length) {\n        // If one of the always-available filters was selected, then select the\n        // same filter again even though its index may have changed.\n        this.filterSelect.setSelectedIndex(newSize - distanceFromEnd);\n      } else if (selectedIndex >= dividerIndex) {\n        // If the select list is now shorter than it was, such that we can't\n        // keep the index unchanged, set it to -1, which causes it to be blank.\n        this.filterSelect.setSelectedIndex(-1);\n      } else {\n        this.filterSelect.setSelectedIndex(selectedIndex);\n      }\n    }\n  }\n\n  updateControls(): void {\n    this.updatePerspectiveOptions();\n    this.updateBaseOptions();\n    this.updateFilterOptions();\n  }\n\n  onReceiveSnapshot(event: Common.EventTarget.EventTargetEvent<ProfileHeader>): void {\n    this.updateControls();\n    const profile = event.data;\n    profile.addEventListener(ProfileHeaderEvents.PROFILE_TITLE_CHANGED, this.updateControls, this);\n  }\n\n  onProfileHeaderRemoved(event: Common.EventTarget.EventTargetEvent<ProfileHeader>): void {\n    const profile = event.data;\n    profile.removeEventListener(ProfileHeaderEvents.PROFILE_TITLE_CHANGED, this.updateControls, this);\n\n    if (this.profile === profile) {\n      this.detach();\n      this.profile.profileType().removeEventListener(\n          HeapSnapshotProfileTypeEvents.SNAPSHOT_RECEIVED, this.onReceiveSnapshot, this);\n      this.profile.profileType().removeEventListener(\n          ProfileTypeEvents.REMOVE_PROFILE_HEADER, this.onProfileHeaderRemoved, this);\n      this.dispose();\n    } else {\n      this.updateControls();\n    }\n  }\n\n  dispose(): void {\n    this.linkifier.dispose();\n    this.popoverHelper.dispose();\n    if (this.allocationStackView) {\n      this.allocationStackView.clear();\n      if (this.allocationDataGrid) {\n        this.allocationDataGrid.dispose();\n      }\n    }\n    this.onStopTracking();\n    if (this.trackingOverviewGrid) {\n      this.trackingOverviewGrid.removeEventListener(Events.IDS_RANGE_CHANGED, this.onIdsRangeChanged.bind(this));\n    }\n  }\n}\n\nexport class Perspective {\n  readonly titleInternal: string;\n  constructor(title: string) {\n    this.titleInternal = title;\n  }\n\n  activate(_heapSnapshotView: HeapSnapshotView): void {\n  }\n\n  deactivate(heapSnapshotView: HeapSnapshotView): void {\n    heapSnapshotView.baseSelect.setVisible(false);\n    heapSnapshotView.filterSelect.setVisible(false);\n    heapSnapshotView.classNameFilter.setVisible(false);\n    if (heapSnapshotView.trackingOverviewGrid) {\n      heapSnapshotView.trackingOverviewGrid.detach();\n    }\n    if (heapSnapshotView.allocationWidget) {\n      heapSnapshotView.allocationWidget.detach();\n    }\n    if (heapSnapshotView.statisticsView) {\n      heapSnapshotView.statisticsView.detach();\n    }\n\n    heapSnapshotView.splitWidget.detach();\n    heapSnapshotView.splitWidget.detachChildWidgets();\n  }\n\n  masterGrid(_heapSnapshotView: HeapSnapshotView): HeapSnapshotSortableDataGrid|null {\n    return null;\n  }\n\n  title(): string {\n    return this.titleInternal;\n  }\n\n  supportsSearch(): boolean {\n    return false;\n  }\n}\n\nexport class SummaryPerspective extends Perspective {\n  constructor() {\n    super(i18nString(UIStrings.summary));\n  }\n\n  override activate(heapSnapshotView: HeapSnapshotView): void {\n    heapSnapshotView.splitWidget.setMainWidget(heapSnapshotView.constructorsWidget);\n    heapSnapshotView.splitWidget.setSidebarWidget(heapSnapshotView.objectDetailsView);\n    heapSnapshotView.splitWidget.show(heapSnapshotView.searchableViewInternal.element);\n    heapSnapshotView.filterSelect.setVisible(true);\n    heapSnapshotView.classNameFilter.setVisible(true);\n    if (!heapSnapshotView.trackingOverviewGrid) {\n      return;\n    }\n    heapSnapshotView.trackingOverviewGrid.show(\n        heapSnapshotView.searchableViewInternal.element, heapSnapshotView.splitWidget.element);\n    heapSnapshotView.trackingOverviewGrid.update();\n    heapSnapshotView.trackingOverviewGrid.updateGrid();\n  }\n\n  override masterGrid(heapSnapshotView: HeapSnapshotView): HeapSnapshotSortableDataGrid {\n    return heapSnapshotView.constructorsDataGrid;\n  }\n\n  override supportsSearch(): boolean {\n    return true;\n  }\n}\n\nexport class ComparisonPerspective extends Perspective {\n  constructor() {\n    super(i18nString(UIStrings.comparison));\n  }\n\n  override activate(heapSnapshotView: HeapSnapshotView): void {\n    heapSnapshotView.splitWidget.setMainWidget(heapSnapshotView.diffWidget);\n    heapSnapshotView.splitWidget.setSidebarWidget(heapSnapshotView.objectDetailsView);\n    heapSnapshotView.splitWidget.show(heapSnapshotView.searchableViewInternal.element);\n    heapSnapshotView.baseSelect.setVisible(true);\n    heapSnapshotView.classNameFilter.setVisible(true);\n  }\n\n  override masterGrid(heapSnapshotView: HeapSnapshotView): HeapSnapshotSortableDataGrid {\n    return heapSnapshotView.diffDataGrid;\n  }\n\n  override supportsSearch(): boolean {\n    return true;\n  }\n}\n\nexport class ContainmentPerspective extends Perspective {\n  constructor() {\n    super(i18nString(UIStrings.containment));\n  }\n\n  override activate(heapSnapshotView: HeapSnapshotView): void {\n    heapSnapshotView.splitWidget.setMainWidget(heapSnapshotView.containmentWidget);\n    heapSnapshotView.splitWidget.setSidebarWidget(heapSnapshotView.objectDetailsView);\n    heapSnapshotView.splitWidget.show(heapSnapshotView.searchableViewInternal.element);\n  }\n\n  override masterGrid(heapSnapshotView: HeapSnapshotView): HeapSnapshotSortableDataGrid {\n    return heapSnapshotView.containmentDataGrid;\n  }\n}\n\nexport class AllocationPerspective extends Perspective {\n  readonly allocationSplitWidget: UI.SplitWidget.SplitWidget;\n  constructor() {\n    super(i18nString(UIStrings.allocation));\n    this.allocationSplitWidget =\n        new UI.SplitWidget.SplitWidget(false, true, 'heap-snapshot-allocation-split-view-state', 200, 200);\n    this.allocationSplitWidget.setSidebarWidget(new UI.Widget.VBox());\n  }\n\n  override activate(heapSnapshotView: HeapSnapshotView): void {\n    if (heapSnapshotView.allocationWidget) {\n      this.allocationSplitWidget.setMainWidget(heapSnapshotView.allocationWidget);\n    }\n    heapSnapshotView.splitWidget.setMainWidget(heapSnapshotView.constructorsWidget);\n    heapSnapshotView.splitWidget.setSidebarWidget(heapSnapshotView.objectDetailsView);\n\n    const allocatedObjectsView = new UI.Widget.VBox();\n    const resizer = document.createElement('div');\n    resizer.classList.add('heap-snapshot-view-resizer');\n    const title = resizer.createChild('div', 'title').createChild('span');\n    resizer.createChild('div', 'verticalResizerIcon');\n    title.textContent = i18nString(UIStrings.liveObjects);\n    this.allocationSplitWidget.hideDefaultResizer();\n    this.allocationSplitWidget.installResizer(resizer);\n    allocatedObjectsView.element.appendChild(resizer);\n    heapSnapshotView.splitWidget.show(allocatedObjectsView.element);\n    this.allocationSplitWidget.setSidebarWidget(allocatedObjectsView);\n\n    this.allocationSplitWidget.show(heapSnapshotView.searchableViewInternal.element);\n\n    heapSnapshotView.constructorsDataGrid.clear();\n    if (heapSnapshotView.allocationDataGrid) {\n      const selectedNode = (heapSnapshotView.allocationDataGrid.selectedNode as AllocationGridNode);\n      if (selectedNode) {\n        heapSnapshotView.constructorsDataGrid.setAllocationNodeId(selectedNode.allocationNodeId());\n      }\n    }\n  }\n\n  override deactivate(heapSnapshotView: HeapSnapshotView): void {\n    this.allocationSplitWidget.detach();\n    super.deactivate(heapSnapshotView);\n  }\n\n  override masterGrid(heapSnapshotView: HeapSnapshotView): HeapSnapshotSortableDataGrid|null {\n    return heapSnapshotView.allocationDataGrid;\n  }\n}\n\nexport class StatisticsPerspective extends Perspective {\n  constructor() {\n    super(i18nString(UIStrings.statistics));\n  }\n\n  override activate(heapSnapshotView: HeapSnapshotView): void {\n    heapSnapshotView.statisticsView.show(heapSnapshotView.searchableViewInternal.element);\n  }\n\n  override masterGrid(_heapSnapshotView: HeapSnapshotView): HeapSnapshotSortableDataGrid|null {\n    return null;\n  }\n}\n\nexport class HeapSnapshotProfileType extends\n    Common.ObjectWrapper.eventMixin<HeapSnapshotProfileTypeEventTypes, typeof ProfileType>(ProfileType)\n        implements SDK.TargetManager.SDKModelObserver<SDK.HeapProfilerModel.HeapProfilerModel> {\n  readonly exposeInternals: Common.Settings.Setting<boolean>;\n  customContentInternal: UI.UIUtils.CheckboxLabel|null;\n  constructor(id?: string, title?: string) {\n    super(id || HeapSnapshotProfileType.TypeId, title || i18nString(UIStrings.heapSnapshot));\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.HeapProfilerModel.HeapProfilerModel, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.HeapProfilerModel.HeapProfilerModel, SDK.HeapProfilerModel.Events.RESET_PROFILES, this.resetProfiles, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.HeapProfilerModel.HeapProfilerModel, SDK.HeapProfilerModel.Events.ADD_HEAP_SNAPSHOT_CHUNK,\n        this.addHeapSnapshotChunk, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.HeapProfilerModel.HeapProfilerModel, SDK.HeapProfilerModel.Events.REPORT_HEAP_SNAPSHOT_PROGRESS,\n        this.reportHeapSnapshotProgress, this);\n    this.exposeInternals = Common.Settings.Settings.instance().createSetting('expose-internals', false);\n    this.customContentInternal = null;\n  }\n\n  modelAdded(heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel): void {\n    void heapProfilerModel.enable();\n  }\n\n  modelRemoved(_heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel): void {\n  }\n\n  override getProfiles(): HeapProfileHeader[] {\n    return super.getProfiles() as HeapProfileHeader[];\n  }\n\n  override fileExtension(): string {\n    return '.heapsnapshot';\n  }\n\n  override get buttonTooltip(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.takeHeapSnapshot);\n  }\n\n  override isInstantProfile(): boolean {\n    return true;\n  }\n\n  override buttonClicked(): boolean {\n    void this.takeHeapSnapshot();\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.ProfilesHeapProfileTaken);\n    return false;\n  }\n\n  override get treeItemTitle(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.heapSnapshots);\n  }\n\n  override get description(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.heapSnapshotProfilesShowMemory);\n  }\n\n  override customContent(): Element|null {\n    const showOptionToExposeInternalsInHeapSnapshot =\n        Root.Runtime.experiments.isEnabled('show-option-tp-expose-internals-in-heap-snapshot');\n    const exposeInternalsInHeapSnapshotCheckbox =\n        UI.SettingsUI.createSettingCheckbox(i18nString(UIStrings.exposeInternals), this.exposeInternals);\n    this.customContentInternal = exposeInternalsInHeapSnapshotCheckbox;\n    return showOptionToExposeInternalsInHeapSnapshot ? exposeInternalsInHeapSnapshotCheckbox : null;\n  }\n\n  override setCustomContentEnabled(enable: boolean): void {\n    if (this.customContentInternal) {\n      this.customContentInternal.disabled = !enable;\n    }\n  }\n\n  override createProfileLoadedFromFile(title: string): ProfileHeader {\n    return new HeapProfileHeader(null, this, title);\n  }\n\n  async takeHeapSnapshot(): Promise<void> {\n    if (this.profileBeingRecorded()) {\n      return;\n    }\n    const heapProfilerModel = UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);\n    if (!heapProfilerModel) {\n      return;\n    }\n\n    let profile: HeapProfileHeader = new HeapProfileHeader(heapProfilerModel, this);\n    this.setProfileBeingRecorded(profile);\n    this.addProfile(profile);\n    profile.updateStatus(i18nString(UIStrings.snapshotting));\n\n    // Release all the animations before taking a heap snapshot.\n    // The animations are stored for replay in the animations panel and they might cause\n    // detached nodes to appear in snapshots. Because of this, we release\n    // all the animations first before taking a heap snapshot.\n    const animationModel = heapProfilerModel.target().model(SDK.AnimationModel.AnimationModel);\n    if (animationModel) {\n      await animationModel.releaseAllAnimations();\n    }\n\n    await heapProfilerModel.takeHeapSnapshot({\n      reportProgress: true,\n      captureNumericValue: true,\n      exposeInternals: this.exposeInternals.get(),\n    });\n    profile = this.profileBeingRecorded() as HeapProfileHeader;\n    if (!profile) {\n      return;\n    }\n    profile.title = i18nString(UIStrings.snapshotD, {PH1: profile.uid});\n    profile.finishLoad();\n    this.setProfileBeingRecorded(null);\n    this.dispatchEventToListeners(ProfileTypeEvents.PROFILE_COMPLETE, profile);\n  }\n\n  addHeapSnapshotChunk(event: Common.EventTarget.EventTargetEvent<string>): void {\n    const profile = (this.profileBeingRecorded() as HeapProfileHeader | null);\n    if (!profile) {\n      return;\n    }\n    profile.transferChunk(event.data);\n  }\n\n  reportHeapSnapshotProgress(event: Common.EventTarget.EventTargetEvent<SDK.HeapProfilerModel.HeapSnapshotProgress>):\n      void {\n    const profile = (this.profileBeingRecorded() as HeapProfileHeader | null);\n    if (!profile) {\n      return;\n    }\n    const {done, total, finished} = event.data;\n    profile.updateStatus(i18nString(UIStrings.percentagePlaceholder, {PH1: ((done / total) * 100).toFixed(0)}), true);\n    if (finished) {\n      profile.prepareToLoad();\n    }\n  }\n\n  resetProfiles(event: Common.EventTarget.EventTargetEvent<SDK.HeapProfilerModel.HeapProfilerModel>): void {\n    const heapProfilerModel = event.data;\n    for (const profile of this.getProfiles()) {\n      if (profile.heapProfilerModel() === heapProfilerModel) {\n        this.removeProfile(profile);\n      }\n    }\n  }\n\n  snapshotReceived(profile: ProfileHeader): void {\n    if (this.profileBeingRecorded() === profile) {\n      this.setProfileBeingRecorded(null);\n    }\n    this.dispatchEventToListeners(HeapSnapshotProfileTypeEvents.SNAPSHOT_RECEIVED, profile);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly TypeId: string = 'HEAP';\n  // TODO(crbug.com/1228674): Remove event string once its no longer used in web tests.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly SnapshotReceived = 'SnapshotReceived';\n}\n\nexport const enum HeapSnapshotProfileTypeEvents {\n  SNAPSHOT_RECEIVED = 'SnapshotReceived',\n}\n\nexport interface HeapSnapshotProfileTypeEventTypes {\n  [HeapSnapshotProfileTypeEvents.SNAPSHOT_RECEIVED]: ProfileHeader;\n}\n\nexport class TrackingHeapSnapshotProfileType extends\n    Common.ObjectWrapper.eventMixin<TrackingHeapSnapshotProfileTypeEventTypes, typeof HeapSnapshotProfileType>(\n        HeapSnapshotProfileType) {\n  readonly recordAllocationStacksSettingInternal: Common.Settings.Setting<boolean>;\n  override customContentInternal: UI.UIUtils.CheckboxLabel|null;\n  recording: boolean;\n  profileSamples?: Samples|null;\n\n  constructor() {\n    super(TrackingHeapSnapshotProfileType.TypeId, i18nString(UIStrings.allocationInstrumentationOn));\n    this.recordAllocationStacksSettingInternal =\n        Common.Settings.Settings.instance().createSetting('record-allocation-stacks', false);\n    this.customContentInternal = null;\n    this.recording = false;\n  }\n\n  override modelAdded(heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel): void {\n    super.modelAdded(heapProfilerModel);\n    heapProfilerModel.addEventListener(SDK.HeapProfilerModel.Events.HEAP_STATS_UPDATED, this.heapStatsUpdate, this);\n    heapProfilerModel.addEventListener(SDK.HeapProfilerModel.Events.LAST_SEEN_OBJECT_ID, this.lastSeenObjectId, this);\n  }\n\n  override modelRemoved(heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel): void {\n    super.modelRemoved(heapProfilerModel);\n    heapProfilerModel.removeEventListener(SDK.HeapProfilerModel.Events.HEAP_STATS_UPDATED, this.heapStatsUpdate, this);\n    heapProfilerModel.removeEventListener(\n        SDK.HeapProfilerModel.Events.LAST_SEEN_OBJECT_ID, this.lastSeenObjectId, this);\n  }\n\n  heapStatsUpdate(event: Common.EventTarget.EventTargetEvent<SDK.HeapProfilerModel.HeapStatsUpdateSamples>): void {\n    if (!this.profileSamples) {\n      return;\n    }\n    const samples = event.data;\n    let index;\n    for (let i = 0; i < samples.length; i += 3) {\n      index = samples[i];\n      const size = samples[i + 2];\n      this.profileSamples.sizes[index] = size;\n      if (!this.profileSamples.max[index]) {\n        this.profileSamples.max[index] = size;\n      }\n    }\n  }\n\n  lastSeenObjectId(event: Common.EventTarget.EventTargetEvent<SDK.HeapProfilerModel.LastSeenObjectId>): void {\n    const profileSamples = this.profileSamples;\n    if (!profileSamples) {\n      return;\n    }\n    const {lastSeenObjectId, timestamp} = event.data;\n    const currentIndex = Math.max(profileSamples.ids.length, profileSamples.max.length - 1);\n    profileSamples.ids[currentIndex] = lastSeenObjectId;\n    if (!profileSamples.max[currentIndex]) {\n      profileSamples.max[currentIndex] = 0;\n      profileSamples.sizes[currentIndex] = 0;\n    }\n    profileSamples.timestamps[currentIndex] = timestamp;\n    if (profileSamples.totalTime < timestamp - profileSamples.timestamps[0]) {\n      profileSamples.totalTime *= 2;\n    }\n    if (this.profileSamples) {\n      this.dispatchEventToListeners(TrackingHeapSnapshotProfileTypeEvents.HEAP_STATS_UPDATE, this.profileSamples);\n    }\n    const profile = this.profileBeingRecorded();\n    if (profile) {\n      profile.updateStatus(null, true);\n    }\n  }\n\n  override hasTemporaryView(): boolean {\n    return true;\n  }\n\n  override get buttonTooltip(): Common.UIString.LocalizedString {\n    return this.recording ? i18nString(UIStrings.stopRecordingHeapProfile) :\n                            i18nString(UIStrings.startRecordingHeapProfile);\n  }\n\n  override isInstantProfile(): boolean {\n    return false;\n  }\n\n  override buttonClicked(): boolean {\n    return this.toggleRecording();\n  }\n\n  async startRecordingProfile(): Promise<void> {\n    if (this.profileBeingRecorded()) {\n      return;\n    }\n    const heapProfilerModel = this.addNewProfile();\n    if (!heapProfilerModel) {\n      return;\n    }\n\n    const animationModel = heapProfilerModel.target().model(SDK.AnimationModel.AnimationModel);\n    if (animationModel) {\n      // TODO(b/406904348): Remove this once we correctly release animations on the backend.\n      await animationModel.releaseAllAnimations();\n    }\n    void heapProfilerModel.startTrackingHeapObjects(this.recordAllocationStacksSettingInternal.get());\n  }\n\n  override customContent(): Element|null {\n    const checkboxSetting = UI.SettingsUI.createSettingCheckbox(\n        i18nString(UIStrings.recordAllocationStacksExtra), this.recordAllocationStacksSettingInternal);\n    this.customContentInternal = (checkboxSetting);\n    return checkboxSetting;\n  }\n\n  override setCustomContentEnabled(enable: boolean): void {\n    if (this.customContentInternal) {\n      this.customContentInternal.disabled = !enable;\n    }\n  }\n\n  recordAllocationStacksSetting(): Common.Settings.Setting<boolean> {\n    return this.recordAllocationStacksSettingInternal;\n  }\n\n  addNewProfile(): SDK.HeapProfilerModel.HeapProfilerModel|null {\n    const heapProfilerModel = UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);\n    if (!heapProfilerModel) {\n      return null;\n    }\n    this.setProfileBeingRecorded(new HeapProfileHeader(heapProfilerModel, this, undefined));\n    this.profileSamples = new Samples();\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.profileBeingRecorded() as any)._profileSamples = this.profileSamples;\n    this.recording = true;\n    this.addProfile((this.profileBeingRecorded() as ProfileHeader));\n    (this.profileBeingRecorded() as HeapProfileHeader).updateStatus(i18nString(UIStrings.recording));\n    this.dispatchEventToListeners(TrackingHeapSnapshotProfileTypeEvents.TRACKING_STARTED);\n    return heapProfilerModel;\n  }\n\n  async stopRecordingProfile(): Promise<void> {\n    let profile: HeapProfileHeader = (this.profileBeingRecorded() as HeapProfileHeader);\n    profile.updateStatus(i18nString(UIStrings.snapshotting));\n    const stopPromise =\n        (profile.heapProfilerModel() as SDK.HeapProfilerModel.HeapProfilerModel).stopTrackingHeapObjects(true);\n    this.recording = false;\n    this.dispatchEventToListeners(TrackingHeapSnapshotProfileTypeEvents.TRACKING_STOPPED);\n    await stopPromise;\n    profile = (this.profileBeingRecorded() as HeapProfileHeader);\n    if (!profile) {\n      return;\n    }\n    profile.finishLoad();\n    this.profileSamples = null;\n    this.setProfileBeingRecorded(null);\n    this.dispatchEventToListeners(ProfileTypeEvents.PROFILE_COMPLETE, profile);\n  }\n\n  toggleRecording(): boolean {\n    if (this.recording) {\n      void this.stopRecordingProfile();\n    } else {\n      void this.startRecordingProfile();\n    }\n    return this.recording;\n  }\n\n  override fileExtension(): string {\n    return '.heaptimeline';\n  }\n\n  override get treeItemTitle(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.allocationTimelines);\n  }\n\n  override get description(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.AllocationTimelinesShowInstrumented);\n  }\n\n  override resetProfiles(event: Common.EventTarget.EventTargetEvent<SDK.HeapProfilerModel.HeapProfilerModel>): void {\n    const wasRecording = this.recording;\n    // Clear current profile to avoid stopping backend.\n    this.setProfileBeingRecorded(null);\n    super.resetProfiles(event);\n    this.profileSamples = null;\n    if (wasRecording) {\n      this.addNewProfile();\n    }\n  }\n\n  override profileBeingRecordedRemoved(): void {\n    void this.stopRecordingProfile();\n    this.profileSamples = null;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static override readonly TypeId = 'HEAP-RECORD';\n  // TODO(crbug.com/1228674): Remove event strings once they are no longer used in web tests.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly HeapStatsUpdate = 'HeapStatsUpdate';\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly TrackingStarted = 'TrackingStarted';\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly TrackingStopped = 'TrackingStopped';\n}\n\nexport const enum TrackingHeapSnapshotProfileTypeEvents {\n  HEAP_STATS_UPDATE = 'HeapStatsUpdate',\n  TRACKING_STARTED = 'TrackingStarted',\n  TRACKING_STOPPED = 'TrackingStopped',\n}\n\nexport interface TrackingHeapSnapshotProfileTypeEventTypes {\n  [TrackingHeapSnapshotProfileTypeEvents.HEAP_STATS_UPDATE]: Samples;\n  [TrackingHeapSnapshotProfileTypeEvents.TRACKING_STARTED]: void;\n  [TrackingHeapSnapshotProfileTypeEvents.TRACKING_STOPPED]: void;\n}\n\nexport class HeapProfileHeader extends ProfileHeader {\n  readonly heapProfilerModelInternal: SDK.HeapProfilerModel.HeapProfilerModel|null;\n  maxJSObjectId: number;\n  workerProxy: HeapSnapshotWorkerProxy|null;\n  receiver: Common.StringOutputStream.OutputStream|null;\n  snapshotProxy: HeapSnapshotProxy|null;\n  readonly loadPromise: Promise<HeapSnapshotProxy>;\n  fulfillLoad: (value: HeapSnapshotProxy|PromiseLike<HeapSnapshotProxy>) => void;\n  totalNumberOfChunks: number;\n  bufferedWriter: Bindings.TempFile.TempFile|null;\n  onTempFileReady: (() => void)|null;\n  failedToCreateTempFile?: boolean;\n  wasDisposed?: boolean;\n  fileName?: Platform.DevToolsPath.RawPathString;\n\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, type: HeapSnapshotProfileType, title?: string) {\n    super(type, title || i18nString(UIStrings.snapshotD, {PH1: type.nextProfileUid()}));\n    this.heapProfilerModelInternal = heapProfilerModel;\n    this.maxJSObjectId = -1;\n    this.workerProxy = null;\n    this.receiver = null;\n    this.snapshotProxy = null;\n    const {promise, resolve} = Promise.withResolvers<HeapSnapshotProxy>();\n    this.loadPromise = promise;\n    this.fulfillLoad = resolve;\n    this.totalNumberOfChunks = 0;\n    this.bufferedWriter = null;\n    this.onTempFileReady = null;\n  }\n\n  heapProfilerModel(): SDK.HeapProfilerModel.HeapProfilerModel|null {\n    return this.heapProfilerModelInternal;\n  }\n\n  async getLocation(nodeIndex: number): Promise<HeapSnapshotModel.HeapSnapshotModel.Location|null> {\n    if (!this.snapshotProxy) {\n      return null;\n    }\n    return await this.snapshotProxy.getLocation(nodeIndex);\n  }\n\n  override createSidebarTreeElement(dataDisplayDelegate: DataDisplayDelegate): ProfileSidebarTreeElement {\n    return new ProfileSidebarTreeElement(dataDisplayDelegate, this, 'heap-snapshot-sidebar-tree-item');\n  }\n\n  override createView(dataDisplayDelegate: DataDisplayDelegate): HeapSnapshotView {\n    return new HeapSnapshotView(dataDisplayDelegate, this);\n  }\n\n  prepareToLoad(): void {\n    console.assert(!this.receiver, 'Already loading');\n    this.setupWorker();\n    this.updateStatus(i18nString(UIStrings.loading), true);\n  }\n\n  finishLoad(): void {\n    if (!this.wasDisposed && this.receiver) {\n      void this.receiver.close();\n    }\n    if (!this.bufferedWriter) {\n      return;\n    }\n    this.didWriteToTempFile(this.bufferedWriter);\n  }\n\n  didWriteToTempFile(tempFile: Bindings.TempFile.TempFile): void {\n    if (this.wasDisposed) {\n      if (tempFile) {\n        tempFile.remove();\n      }\n      return;\n    }\n    this.tempFile = tempFile;\n    if (!tempFile) {\n      this.failedToCreateTempFile = true;\n    }\n    if (this.onTempFileReady) {\n      this.onTempFileReady();\n      this.onTempFileReady = null;\n    }\n  }\n\n  setupWorker(): void {\n    console.assert(!this.workerProxy, 'HeapSnapshotWorkerProxy already exists');\n    this.workerProxy = new HeapSnapshotWorkerProxy(this.handleWorkerEvent.bind(this));\n    this.workerProxy.addEventListener(HeapSnapshotWorkerProxy.Events.WAIT, event => {\n      this.updateStatus(null, event.data);\n    }, this);\n    this.receiver = this.workerProxy.createLoader(this.uid, this.snapshotReceived.bind(this));\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  handleWorkerEvent(eventName: string, data: any): void {\n    if (HeapSnapshotModel.HeapSnapshotModel.HeapSnapshotProgressEvent.BrokenSnapshot === eventName) {\n      const error = (data as string);\n      Common.Console.Console.instance().error(error);\n      return;\n    }\n\n    if (HeapSnapshotModel.HeapSnapshotModel.HeapSnapshotProgressEvent.Update !== eventName) {\n      return;\n    }\n    const serializedMessage = (data as string);\n    const messageObject = i18n.i18n.deserializeUIString(serializedMessage);\n    // We know all strings from the worker are declared inside a single file so we can\n    // use a custom function.\n    this.updateStatus(moduleI18nString(messageObject.string, messageObject.values));\n  }\n\n  override dispose(): void {\n    if (this.workerProxy) {\n      this.workerProxy.dispose();\n    }\n    this.removeTempFile();\n    this.wasDisposed = true;\n  }\n\n  didCompleteSnapshotTransfer(): void {\n    if (!this.snapshotProxy) {\n      return;\n    }\n    this.updateStatus(i18n.ByteUtilities.bytesToString(this.snapshotProxy.totalSize), false);\n  }\n\n  transferChunk(chunk: string): void {\n    if (!this.bufferedWriter) {\n      this.bufferedWriter = new Bindings.TempFile.TempFile();\n    }\n    this.bufferedWriter.write([chunk]);\n\n    ++this.totalNumberOfChunks;\n    if (this.receiver) {\n      void this.receiver.write(chunk);\n    }\n  }\n\n  snapshotReceived(snapshotProxy: HeapSnapshotProxy): void {\n    if (this.wasDisposed) {\n      return;\n    }\n    this.receiver = null;\n    this.snapshotProxy = snapshotProxy;\n    this.maxJSObjectId = snapshotProxy.maxJSObjectId();\n    this.didCompleteSnapshotTransfer();\n    if (this.workerProxy) {\n      this.workerProxy.startCheckingForLongRunningCalls();\n    }\n    this.notifySnapshotReceived();\n  }\n\n  notifySnapshotReceived(): void {\n    if (this.snapshotProxy) {\n      this.fulfillLoad(this.snapshotProxy);\n    }\n    this.profileType().snapshotReceived(this);\n  }\n\n  override canSaveToFile(): boolean {\n    return !this.fromFile();\n  }\n\n  override async saveToFile(): Promise<void> {\n    await this.loadPromise;\n    const fileOutputStream = new Bindings.FileUtils.FileOutputStream();\n    this.fileName = this.fileName ||\n        'Heap-' + Platform.DateUtilities.toISO8601Compact(new Date()) + this.profileType().fileExtension() as\n            Platform.DevToolsPath.RawPathString;\n    const onOpen = async(accepted: boolean): Promise<void> => {\n      if (!accepted) {\n        return;\n      }\n      if (this.failedToCreateTempFile) {\n        Common.Console.Console.instance().error('Failed to open temp file with heap snapshot');\n        void fileOutputStream.close();\n        return;\n      }\n      if (this.tempFile) {\n        const error = (await this.tempFile.copyToOutputStream(fileOutputStream, this.onChunkTransferred.bind(this)) as {\n          message: string,\n        } | null);\n        if (error) {\n          Common.Console.Console.instance().error('Failed to read heap snapshot from temp file: ' + error.message);\n        }\n        this.didCompleteSnapshotTransfer();\n        return;\n      }\n      this.onTempFileReady = () => {\n        void onOpen(accepted);\n      };\n      this.updateSaveProgress(0, 1);\n    };\n\n    await fileOutputStream.open(this.fileName).then(onOpen.bind(this));\n  }\n\n  onChunkTransferred(reader: Bindings.FileUtils.ChunkedReader): void {\n    this.updateSaveProgress(reader.loadedSize(), reader.fileSize());\n  }\n\n  updateSaveProgress(value: number, total: number): void {\n    const percentValue = ((total && value / total) * 100).toFixed(0);\n    this.updateStatus(i18nString(UIStrings.savingD, {PH1: percentValue}));\n  }\n\n  override async loadFromFile(file: File): Promise<DOMError|null> {\n    this.updateStatus(i18nString(UIStrings.loading), true);\n    this.setupWorker();\n    const reader = new Bindings.FileUtils.ChunkedFileReader(file, 10000000);\n    const success = await reader.read((this.receiver as Common.StringOutputStream.OutputStream));\n    if (!success) {\n      const error = (reader.error() as {\n        message: string,\n      } | null);\n      if (error) {\n        this.updateStatus(error.message);\n      }\n    }\n    return success ? null : reader.error();\n  }\n\n  override profileType(): HeapSnapshotProfileType {\n    return super.profileType() as HeapSnapshotProfileType;\n  }\n}\n\nexport class HeapSnapshotStatisticsView extends UI.Widget.VBox {\n  pieChart: PerfUI.PieChart.PieChart;\n  constructor() {\n    super();\n    this.element.classList.add('heap-snapshot-statistics-view');\n    this.element.setAttribute(\n        'jslog', `${VisualLogging.pane('profiler.heap-snapshot-statistics-view').track({resize: true})}`);\n    this.pieChart = new PerfUI.PieChart.PieChart();\n    this.setTotalAndRecords(0, []);\n    this.pieChart.classList.add('heap-snapshot-stats-pie-chart');\n    this.element.appendChild(this.pieChart);\n  }\n\n  static valueFormatter(value: number): string {\n    const formatter = new Intl.NumberFormat(i18n.DevToolsLocale.DevToolsLocale.instance().locale, {\n      style: 'unit',\n      unit: 'kilobyte',\n    });\n    return formatter.format(Math.round(value / 1000));\n  }\n\n  setTotalAndRecords(total: number, records: PerfUI.PieChart.Slice[]): void {\n    this.pieChart.data = {\n      chartName: i18nString(UIStrings.heapMemoryUsage),\n      size: 150,\n      formatter: HeapSnapshotStatisticsView.valueFormatter,\n      showLegend: true,\n      total,\n      slices: records,\n    };\n  }\n}\n\nexport class HeapAllocationStackView extends UI.Widget.Widget {\n  readonly heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null;\n  readonly linkifier: Components.Linkifier.Linkifier;\n  frameElements: HTMLElement[];\n  constructor(heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null) {\n    super();\n    this.heapProfilerModel = heapProfilerModel;\n    this.linkifier = new Components.Linkifier.Linkifier();\n    this.frameElements = [];\n  }\n\n  onContextMenu(link: Element, event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.appendApplicableItems(link);\n    void contextMenu.show();\n    event.consume(true);\n  }\n\n  onStackViewKeydown(event: KeyboardEvent): void {\n    const target = (event.target as HTMLElement | null);\n    if (!target) {\n      return;\n    }\n    if (event.key === 'Enter') {\n      const link = stackFrameToURLElement.get(target);\n      if (!link) {\n        return;\n      }\n      const linkInfo = Components.Linkifier.Linkifier.linkInfo(link);\n      if (!linkInfo) {\n        return;\n      }\n      if (Components.Linkifier.Linkifier.invokeFirstAction(linkInfo)) {\n        event.consume(true);\n      }\n      return;\n    }\n\n    let navDown;\n    const keyboardEvent = (event);\n    if (keyboardEvent.key === 'ArrowUp') {\n      navDown = false;\n    } else if (keyboardEvent.key === 'ArrowDown') {\n      navDown = true;\n    } else {\n      return;\n    }\n\n    const index = this.frameElements.indexOf(target);\n    if (index === -1) {\n      return;\n    }\n    const nextIndex = navDown ? index + 1 : index - 1;\n    if (nextIndex < 0 || nextIndex >= this.frameElements.length) {\n      return;\n    }\n\n    const nextFrame = this.frameElements[nextIndex];\n    nextFrame.tabIndex = 0;\n    target.tabIndex = -1;\n    nextFrame.focus();\n    event.consume(true);\n  }\n\n  async setAllocatedObject(snapshot: HeapSnapshotProxy, snapshotNodeIndex: number): Promise<void> {\n    this.clear();\n    const frames = await snapshot.allocationStack(snapshotNodeIndex);\n\n    if (!frames) {\n      const stackDiv = this.element.createChild('div', 'no-heap-allocation-stack');\n      UI.UIUtils.createTextChild(stackDiv, i18nString(UIStrings.stackWasNotRecordedForThisObject));\n      return;\n    }\n\n    const stackDiv = this.element.createChild('div', 'heap-allocation-stack');\n    stackDiv.addEventListener('keydown', this.onStackViewKeydown.bind(this), false);\n    for (const frame of frames) {\n      const frameDiv = stackDiv.createChild('div', 'stack-frame');\n      this.frameElements.push(frameDiv);\n      frameDiv.tabIndex = -1;\n      const name = frameDiv.createChild('div');\n      name.textContent = UI.UIUtils.beautifyFunctionName(frame.functionName);\n      if (!frame.scriptId) {\n        continue;\n      }\n      const target = this.heapProfilerModel ? this.heapProfilerModel.target() : null;\n      const options = {columnNumber: frame.column - 1, inlineFrameIndex: 0};\n      const urlElement = this.linkifier.linkifyScriptLocation(\n          target, String(frame.scriptId) as Protocol.Runtime.ScriptId,\n          frame.scriptName as Platform.DevToolsPath.UrlString, frame.line - 1, options);\n      frameDiv.appendChild(urlElement);\n      stackFrameToURLElement.set(frameDiv, urlElement);\n      frameDiv.addEventListener('contextmenu', this.onContextMenu.bind(this, urlElement));\n    }\n    this.frameElements[0].tabIndex = 0;\n  }\n\n  clear(): void {\n    this.element.removeChildren();\n    this.frameElements = [];\n    this.linkifier.reset();\n  }\n}\n\nconst stackFrameToURLElement = new WeakMap<HTMLElement, HTMLElement>();\n", "// Copyright 2012 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {\n  AllocationGridNode,\n  HeapSnapshotConstructorNode,\n  HeapSnapshotDiffNode,\n  HeapSnapshotGenericObjectNode,\n  type HeapSnapshotGridNode,\n  HeapSnapshotObjectNode,\n  HeapSnapshotRetainingObjectNode,\n} from './HeapSnapshotGridNodes.js';\nimport type {HeapSnapshotProxy} from './HeapSnapshotProxy.js';\nimport type {HeapProfileHeader} from './HeapSnapshotView.js';\nimport type {DataDisplayDelegate} from './ProfileHeader.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in Heap Snapshot Data Grids of a profiler tool\n   */\n  distanceFromWindowObject: 'Distance from window object',\n  /**\n   * @description Text in Heap Snapshot Data Grids of a profiler tool\n   */\n  sizeOfTheObjectItselfInBytes: 'Size of the object itself in bytes',\n  /**\n   * @description Text in Heap Snapshot Data Grids of a profiler tool\n   */\n  sizeOfTheObjectPlusTheGraphIt: 'Size of the object plus the graph it retains in bytes',\n  /**\n   * @description Text in Heap Snapshot Data Grids of a profiler tool\n   */\n  object: 'Object',\n  /**\n   * @description Text in Heap Snapshot Data Grids of a profiler tool\n   */\n  distance: 'Distance',\n  /**\n   * @description Text in Heap Snapshot Data Grids of a profiler tool. Shallow size is the size of just this node, not including children/retained size.\n   */\n  shallowSize: 'Shallow Size',\n  /**\n   * @description Text in Heap Snapshot Data Grids of a profiler tool\n   */\n  retainedSize: 'Retained Size',\n  /**\n   * @description Title for a section in the Heap Snapshot view. This title is for a table which\n   * shows retaining relationships between JavaScript objects. One object retains another if it holds\n   * a reference to it, keeping it alive.\n   */\n  heapSnapshotRetainment: 'Heap Snapshot Retainment',\n  /**\n   * @description Text in Heap Snapshot Data Grids of a profiler tool\n   */\n  constructorString: 'Constructor',\n  /**\n   * @description Data grid name for Heap Snapshot Constructors data grids\n   */\n  heapSnapshotConstructors: 'Heap Snapshot Constructors',\n  /**\n   * @description Column header in a table displaying the diff between two Heap Snapshots. This\n   * column is number of new objects in snapshot #2 compared to snapshot #1.\n   */\n  New: '# New',\n  /**\n   * @description Column header in a table displaying the diff between two Heap Snapshots. This\n   * column is number of deleted objects in snapshot #2 compared to snapshot #1.\n   */\n  Deleted: '# Deleted',\n  /**\n   * @description Column header in a table displaying the diff between two Heap Snapshots. This\n   * column is the difference (delta) between the # New and # Deleted objects in the snapshot.\n   */\n  Delta: '# Delta',\n  /**\n   * @description Text in Heap Snapshot Data Grids of a profiler tool\n   */\n  allocSize: 'Alloc. Size',\n  /**\n   * @description Text in Heap Snapshot Data Grids of a profiler tool\n   */\n  freedSize: 'Freed Size',\n  /**\n   * @description Title of a column in a table in the Heap Snapshot tool. 'Delta' here means\n   * difference, so the whole string means 'difference in size'.\n   */\n  sizeDelta: 'Size Delta',\n  /**\n   * @description Data grid name for Heap Snapshot Diff data grids\n   */\n  heapSnapshotDiff: 'Heap Snapshot Diff',\n  /**\n   * @description Text in Heap Snapshot Data Grids of a profiler tool\n   */\n  liveCount: 'Live Count',\n  /**\n   * @description Text in Heap Snapshot Data Grids of a profiler tool\n   */\n  count: 'Count',\n  /**\n   * @description Text in Heap Snapshot Data Grids of a profiler tool\n   */\n  liveSize: 'Live Size',\n  /**\n   * @description Text for the size of something\n   */\n  size: 'Size',\n  /**\n   * @description Text for a programming function\n   */\n  function: 'Function',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  allocation: 'Allocation',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapSnapshotDataGrids.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst adjacencyMap = new WeakMap<DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>, HeapSnapshotGridNode[]>();\n\nclass HeapSnapshotSortableDataGridBase extends DataGrid.DataGrid.DataGridImpl<HeapSnapshotGridNode> {}\n\nexport class HeapSnapshotSortableDataGrid extends Common.ObjectWrapper\n                                                      .eventMixin<EventTypes, typeof HeapSnapshotSortableDataGridBase>(\n                                                          HeapSnapshotSortableDataGridBase) {\n  snapshot: HeapSnapshotProxy|null;\n  override selectedNode: HeapSnapshotGridNode|null;\n  readonly heapProfilerModelInternal: SDK.HeapProfilerModel.HeapProfilerModel|null;\n  readonly dataDisplayDelegateInternal: DataDisplayDelegate;\n  recursiveSortingDepth: number;\n  populatedAndSorted: boolean;\n  nameFilter: UI.Toolbar.ToolbarInput|null;\n  nodeFilterInternal: HeapSnapshotModel.HeapSnapshotModel.NodeFilter|undefined;\n  lastSortColumnId?: string|null;\n  lastSortAscending?: boolean;\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, dataDisplayDelegate: DataDisplayDelegate,\n      dataGridParameters: DataGrid.DataGrid.Parameters) {\n    // TODO(allada) This entire class needs to be converted to use the templates in DataGridNode.\n    super(dataGridParameters);\n    this.snapshot = null;\n    this.selectedNode = null;\n    this.heapProfilerModelInternal = heapProfilerModel;\n    this.dataDisplayDelegateInternal = dataDisplayDelegate;\n    const tooltips = [\n      ['distance', i18nString(UIStrings.distanceFromWindowObject)],\n      ['shallowSize', i18nString(UIStrings.sizeOfTheObjectItselfInBytes)],\n      ['retainedSize', i18nString(UIStrings.sizeOfTheObjectPlusTheGraphIt)],\n    ];\n    for (const info of tooltips) {\n      const headerCell = this.headerTableHeader(info[0]);\n      if (headerCell) {\n        headerCell.setAttribute('title', info[1]);\n      }\n    }\n\n    this.recursiveSortingDepth = 0;\n    this.populatedAndSorted = false;\n    this.nameFilter = null;\n    this.nodeFilterInternal = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter();\n    this.addEventListener(HeapSnapshotSortableDataGridEvents.SortingComplete, this.sortingComplete, this);\n    this.addEventListener(DataGrid.DataGrid.Events.SORTING_CHANGED, this.sortingChanged, this);\n    this.setRowContextMenuCallback(this.populateContextMenu.bind(this));\n  }\n\n  async setDataSource(_snapshot: HeapSnapshotProxy, _nodeIndex: number): Promise<void> {\n  }\n\n  isFilteredOut(node: HeapSnapshotGridNode): boolean {\n    const nameFilterValue = this.nameFilter ? this.nameFilter.value().toLowerCase() : '';\n    if (nameFilterValue && (node instanceof HeapSnapshotDiffNode || node instanceof HeapSnapshotConstructorNode) &&\n        node.filteredOut(nameFilterValue)) {\n      return true;\n    }\n    return false;\n  }\n\n  heapProfilerModel(): SDK.HeapProfilerModel.HeapProfilerModel|null {\n    return this.heapProfilerModelInternal;\n  }\n\n  dataDisplayDelegate(): DataDisplayDelegate {\n    return this.dataDisplayDelegateInternal;\n  }\n\n  nodeFilter(): HeapSnapshotModel.HeapSnapshotModel.NodeFilter|undefined {\n    return this.nodeFilterInternal;\n  }\n\n  setNameFilter(nameFilter: UI.Toolbar.ToolbarInput): void {\n    this.nameFilter = nameFilter;\n  }\n\n  defaultPopulateCount(): number {\n    return 100;\n  }\n\n  disposeAllNodes(): void {\n    const children = this.topLevelNodes();\n    for (let i = 0, l = children.length; i < l; ++i) {\n      children[i].dispose();\n    }\n  }\n\n  override wasShown(): void {\n    if (this.nameFilter) {\n      this.nameFilter.addEventListener(UI.Toolbar.ToolbarInput.Event.TEXT_CHANGED, this.onNameFilterChanged, this);\n      this.updateVisibleNodes(true);\n    }\n    if (this.populatedAndSorted) {\n      this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.ContentShown, this);\n    }\n  }\n\n  sortingComplete(): void {\n    this.removeEventListener(HeapSnapshotSortableDataGridEvents.SortingComplete, this.sortingComplete, this);\n    this.populatedAndSorted = true;\n    this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.ContentShown, this);\n  }\n\n  override willHide(): void {\n    if (this.nameFilter) {\n      this.nameFilter.removeEventListener(UI.Toolbar.ToolbarInput.Event.TEXT_CHANGED, this.onNameFilterChanged, this);\n    }\n  }\n\n  populateContextMenu(\n      contextMenu: UI.ContextMenu.ContextMenu, gridNode: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>): void {\n    const node = (gridNode as HeapSnapshotGridNode);\n    node.populateContextMenu(contextMenu, this.dataDisplayDelegateInternal, this.heapProfilerModel());\n\n    if (node instanceof HeapSnapshotGenericObjectNode && node.linkElement) {\n      contextMenu.appendApplicableItems(node.linkElement);\n    }\n  }\n\n  resetSortingCache(): void {\n    delete this.lastSortColumnId;\n    delete this.lastSortAscending;\n  }\n\n  topLevelNodes(): HeapSnapshotGridNode[] {\n    return this.rootNode().children as HeapSnapshotGridNode[];\n  }\n\n  revealObjectByHeapSnapshotId(_heapSnapshotObjectId: string): Promise<HeapSnapshotGridNode|null> {\n    return Promise.resolve((null as HeapSnapshotGridNode | null));\n  }\n\n  resetNameFilter(): void {\n    if (this.nameFilter) {\n      this.nameFilter.setValue('');\n    }\n  }\n\n  onNameFilterChanged(): void {\n    this.updateVisibleNodes(true);\n    this.deselectFilteredNodes();\n  }\n\n  deselectFilteredNodes(): void {\n    let currentNode: (HeapSnapshotGridNode|null) = this.selectedNode;\n    while (currentNode) {\n      if (this.selectedNode && this.isFilteredOut((currentNode))) {\n        this.selectedNode.deselect();\n        this.selectedNode = null;\n        return;\n      }\n      currentNode = (currentNode.parent as HeapSnapshotGridNode | null);\n    }\n  }\n\n  sortFields(_sortColumnId: string, _ascending: boolean): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    throw new Error('Not implemented');\n  }\n\n  sortingChanged(): void {\n    const sortAscending = this.isSortOrderAscending();\n    const sortColumnId = this.sortColumnId();\n    if (this.lastSortColumnId === sortColumnId && this.lastSortAscending === sortAscending) {\n      return;\n    }\n    this.lastSortColumnId = sortColumnId;\n    this.lastSortAscending = sortAscending;\n    const sortFields = this.sortFields(sortColumnId || '', sortAscending);\n\n    function sortByTwoFields(\n        nodeA: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>,\n        nodeB: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>): number {\n      // @ts-expect-error\n      let field1 = nodeA[sortFields.fieldName1];\n      // @ts-expect-error\n      let field2 = nodeB[sortFields.fieldName1];\n      let result: number|(0 | 1 | -1) = field1 < field2 ? -1 : (field1 > field2 ? 1 : 0);\n      if (!sortFields.ascending1) {\n        result = -result;\n      }\n      if (result !== 0) {\n        return result;\n      }\n      // @ts-expect-error\n      field1 = nodeA[sortFields.fieldName2];\n      // @ts-expect-error\n      field2 = nodeB[sortFields.fieldName2];\n      result = field1 < field2 ? -1 : (field1 > field2 ? 1 : 0);\n      if (!sortFields.ascending2) {\n        result = -result;\n      }\n      return result;\n    }\n    this.performSorting(sortByTwoFields);\n  }\n\n  performSorting(\n      sortFunction:\n          (arg0: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>,\n           arg1: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>) => number): void {\n    this.recursiveSortingEnter();\n    const children = this.allChildren(this.rootNode());\n    this.rootNode().removeChildren();\n    children.sort(sortFunction);\n    for (let i = 0, l = children.length; i < l; ++i) {\n      const child = (children[i] as HeapSnapshotGridNode);\n      this.appendChildAfterSorting(child);\n      if (child.populated) {\n        void child.sort();\n      }\n    }\n    this.recursiveSortingLeave();\n  }\n\n  appendChildAfterSorting(child: HeapSnapshotGridNode): void {\n    const revealed = child.revealed;\n    this.rootNode().appendChild(child);\n    child.revealed = revealed;\n  }\n\n  recursiveSortingEnter(): void {\n    ++this.recursiveSortingDepth;\n  }\n\n  recursiveSortingLeave(): void {\n    if (!this.recursiveSortingDepth) {\n      return;\n    }\n    if (--this.recursiveSortingDepth) {\n      return;\n    }\n    this.updateVisibleNodes(true);\n    this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.SortingComplete);\n  }\n\n  updateVisibleNodes(_force: boolean): void {\n  }\n\n  allChildren(parent: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>):\n      Array<DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>> {\n    return parent.children;\n  }\n\n  insertChild(parent: HeapSnapshotGridNode, node: HeapSnapshotGridNode, index: number): void {\n    parent.insertChild(node, index);\n  }\n\n  removeChildByIndex(parent: HeapSnapshotGridNode, index: number): void {\n    parent.removeChild(parent.children[index]);\n  }\n\n  removeAllChildren(parent: HeapSnapshotGridNode): void {\n    parent.removeChildren();\n  }\n\n  async dataSourceChanged(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n}\n\nexport enum HeapSnapshotSortableDataGridEvents {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  ContentShown = 'ContentShown',\n  SortingComplete = 'SortingComplete',\n  ExpandRetainersComplete = 'ExpandRetainersComplete',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface EventTypes {\n  [HeapSnapshotSortableDataGridEvents.ContentShown]: HeapSnapshotSortableDataGrid;\n  [HeapSnapshotSortableDataGridEvents.SortingComplete]: void;\n  [HeapSnapshotSortableDataGridEvents.ExpandRetainersComplete]: void;\n}\n\nexport class HeapSnapshotViewportDataGrid extends HeapSnapshotSortableDataGrid {\n  topPaddingHeight: number;\n  bottomPaddingHeight: number;\n  override selectedNode: HeapSnapshotGridNode|null;\n  scrollToResolveCallback?: (() => void)|null;\n\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, dataDisplayDelegate: DataDisplayDelegate,\n      dataGridParameters: DataGrid.DataGrid.Parameters) {\n    super(heapProfilerModel, dataDisplayDelegate, dataGridParameters);\n    this.scrollContainer.addEventListener('scroll', this.onScroll.bind(this), true);\n    this.topPaddingHeight = 0;\n    this.bottomPaddingHeight = 0;\n    this.selectedNode = null;\n  }\n\n  override topLevelNodes(): HeapSnapshotGridNode[] {\n    return this.allChildren(this.rootNode());\n  }\n\n  override appendChildAfterSorting(_child: HeapSnapshotGridNode): void {\n    // Do nothing here, it will be added in updateVisibleNodes.\n  }\n\n  override updateVisibleNodes(force: boolean): void {\n    // Guard zone is used to ensure there are always some extra items\n    // above and below the viewport to support keyboard navigation.\n    const guardZoneHeight = 40;\n    const scrollHeight = this.scrollContainer.scrollHeight;\n    let scrollTop: number = this.scrollContainer.scrollTop;\n    let scrollBottom: number = scrollHeight - scrollTop - this.scrollContainer.offsetHeight;\n    scrollTop = Math.max(0, scrollTop - guardZoneHeight);\n    scrollBottom = Math.max(0, scrollBottom - guardZoneHeight);\n    let viewPortHeight = scrollHeight - scrollTop - scrollBottom;\n    // Do nothing if populated nodes still fit the viewport.\n    if (!force && scrollTop >= this.topPaddingHeight && scrollBottom >= this.bottomPaddingHeight) {\n      return;\n    }\n    const hysteresisHeight = 500;\n    scrollTop -= hysteresisHeight;\n    viewPortHeight += 2 * hysteresisHeight;\n    const selectedNode = this.selectedNode;\n    this.rootNode().removeChildren();\n\n    this.topPaddingHeight = 0;\n    this.bottomPaddingHeight = 0;\n\n    this.addVisibleNodes(this.rootNode(), scrollTop, scrollTop + viewPortHeight);\n\n    this.setVerticalPadding(this.topPaddingHeight, this.bottomPaddingHeight);\n\n    if (selectedNode) {\n      // Keep selection even if the node is not in the current viewport.\n      if (selectedNode.parent) {\n        selectedNode.select(true);\n      } else {\n        this.selectedNode = selectedNode;\n      }\n    }\n  }\n\n  addVisibleNodes(\n      parentNode: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>, topBound: number, bottomBound: number): number {\n    if (!parentNode.expanded) {\n      return 0;\n    }\n\n    const children = this.allChildren((parentNode as HeapSnapshotGridNode));\n    let topPadding = 0;\n    // Iterate over invisible nodes beyond the upper bound of viewport.\n    // Do not insert them into the grid, but count their total height.\n    let i = 0;\n    for (; i < children.length; ++i) {\n      const child = children[i];\n      if (this.isFilteredOut(child)) {\n        continue;\n      }\n      const newTop = topPadding + this.nodeHeight(child);\n      if (newTop > topBound) {\n        break;\n      }\n      topPadding = newTop;\n    }\n\n    // Put visible nodes into the data grid.\n    let position = topPadding;\n    for (; i < children.length && position < bottomBound; ++i) {\n      const child = children[i];\n      if (this.isFilteredOut(child)) {\n        continue;\n      }\n      const hasChildren = child.hasChildren();\n      child.removeChildren();\n      child.setHasChildren(hasChildren);\n      parentNode.appendChild(child);\n      position += child.nodeSelfHeight();\n      position += this.addVisibleNodes(child, topBound - position, bottomBound - position);\n    }\n\n    // Count the invisible nodes beyond the bottom bound of the viewport.\n    let bottomPadding = 0;\n    for (; i < children.length; ++i) {\n      const child = children[i];\n      if (this.isFilteredOut(child)) {\n        continue;\n      }\n      bottomPadding += this.nodeHeight(child);\n    }\n\n    this.topPaddingHeight += topPadding;\n    this.bottomPaddingHeight += bottomPadding;\n    return position + bottomPadding;\n  }\n\n  nodeHeight(node: HeapSnapshotGridNode): number {\n    let result = node.nodeSelfHeight();\n    if (!node.expanded) {\n      return result;\n    }\n    const children = this.allChildren(node);\n    for (let i = 0; i < children.length; i++) {\n      result += this.nodeHeight(children[i]);\n    }\n    return result;\n  }\n\n  revealTreeNode(pathToReveal: HeapSnapshotGridNode[]): Promise<HeapSnapshotGridNode> {\n    const height = this.calculateOffset(pathToReveal);\n    const node = (pathToReveal[pathToReveal.length - 1]);\n    const scrollTop = this.scrollContainer.scrollTop;\n    const scrollBottom = scrollTop + this.scrollContainer.offsetHeight;\n    if (height >= scrollTop && height < scrollBottom) {\n      return Promise.resolve(node);\n    }\n\n    const scrollGap = 40;\n    this.scrollContainer.scrollTop = Math.max(0, height - scrollGap);\n    return new Promise(resolve => {\n      console.assert(!this.scrollToResolveCallback);\n      this.scrollToResolveCallback = resolve.bind(null, node);\n      // Still resolve the promise if it does not scroll for some reason.\n      this.scrollContainer.window().requestAnimationFrame(() => {\n        if (!this.scrollToResolveCallback) {\n          return;\n        }\n        this.scrollToResolveCallback();\n        this.scrollToResolveCallback = null;\n      });\n    });\n  }\n\n  calculateOffset(pathToReveal: HeapSnapshotGridNode[]): number {\n    let parentNode = this.rootNode();\n    let height = 0;\n    if (pathToReveal.length === 0) {\n      return 0;\n    }\n    for (let i = 0; i < pathToReveal.length; ++i) {\n      const node = pathToReveal[i];\n      const children = this.allChildren(parentNode);\n      for (let j = 0; j < children.length; ++j) {\n        const child = children[j];\n        if (node === child) {\n          height += node.nodeSelfHeight();\n          break;\n        }\n        height += this.nodeHeight(child);\n      }\n      parentNode = node;\n    }\n    return height - (pathToReveal[pathToReveal.length - 1]).nodeSelfHeight();\n  }\n\n  override allChildren(parent: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>): HeapSnapshotGridNode[] {\n    const children = adjacencyMap.get(parent) || [];\n    if (!adjacencyMap.has(parent)) {\n      adjacencyMap.set(parent, children);\n    }\n    return children;\n  }\n\n  appendNode(parent: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>, node: HeapSnapshotGridNode): void {\n    this.allChildren(parent).push(node);\n  }\n\n  override insertChild(parent: HeapSnapshotGridNode, node: HeapSnapshotGridNode, index: number): void {\n    this.allChildren(parent).splice(index, 0, (node));\n  }\n\n  override removeChildByIndex(parent: HeapSnapshotGridNode, index: number): void {\n    this.allChildren(parent).splice(index, 1);\n  }\n\n  override removeAllChildren(parent: HeapSnapshotGridNode): void {\n    adjacencyMap.delete(parent);\n  }\n\n  removeTopLevelNodes(): void {\n    this.disposeAllNodes();\n    this.rootNode().removeChildren();\n    this.removeAllChildren((this.rootNode() as HeapSnapshotGridNode));\n  }\n\n  override onResize(): void {\n    super.onResize();\n    this.updateVisibleNodes(false);\n  }\n\n  onScroll(_event: Event): void {\n    this.updateVisibleNodes(false);\n\n    if (this.scrollToResolveCallback) {\n      this.scrollToResolveCallback();\n      this.scrollToResolveCallback = null;\n    }\n  }\n}\n\nexport class HeapSnapshotContainmentDataGrid extends HeapSnapshotSortableDataGrid {\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, dataDisplayDelegate: DataDisplayDelegate,\n      displayName: string, columns?: DataGrid.DataGrid.ColumnDescriptor[]) {\n    columns =\n        columns || ([\n          {id: 'object', title: i18nString(UIStrings.object), disclosure: true, sortable: true},\n          {id: 'distance', title: i18nString(UIStrings.distance), width: '70px', sortable: true, fixedWidth: true},\n          {\n            id: 'shallowSize',\n            title: i18nString(UIStrings.shallowSize),\n            width: '110px',\n            sortable: true,\n            fixedWidth: true,\n          },\n          {\n            id: 'retainedSize',\n            title: i18nString(UIStrings.retainedSize),\n            width: '110px',\n            sortable: true,\n            fixedWidth: true,\n            sort: DataGrid.DataGrid.Order.Descending,\n          },\n        ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    const dataGridParameters = ({displayName, columns} as DataGrid.DataGrid.Parameters);\n    super(heapProfilerModel, dataDisplayDelegate, dataGridParameters);\n  }\n\n  override async setDataSource(snapshot: HeapSnapshotProxy, nodeIndex: number, nodeId?: number): Promise<void> {\n    this.snapshot = snapshot;\n    const node = new HeapSnapshotModel.HeapSnapshotModel.Node(\n        nodeId ?? -1, 'root', 0, nodeIndex || snapshot.rootNodeIndex, 0, 0, '');\n    this.setRootNode(this.createRootNode(snapshot, node));\n    void (this.rootNode() as HeapSnapshotGridNode).sort();\n  }\n\n  createRootNode(snapshot: HeapSnapshotProxy, node: HeapSnapshotModel.HeapSnapshotModel.Node): HeapSnapshotObjectNode {\n    const fakeEdge = new HeapSnapshotModel.HeapSnapshotModel.Edge('', node, '', -1);\n    return new HeapSnapshotObjectNode(this, snapshot, fakeEdge, null);\n  }\n\n  override sortingChanged(): void {\n    const rootNode = this.rootNode();\n    if (rootNode.hasChildren()) {\n      void (rootNode as HeapSnapshotGridNode).sort();\n    }\n  }\n}\n\nexport class HeapSnapshotRetainmentDataGrid extends HeapSnapshotContainmentDataGrid {\n  resetRetainersButton: UI.Toolbar.ToolbarButton|undefined;\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, dataDisplayDelegate: DataDisplayDelegate) {\n    const columns = ([\n      {id: 'object', title: i18nString(UIStrings.object), disclosure: true, sortable: true},\n      {\n        id: 'distance',\n        title: i18nString(UIStrings.distance),\n        width: '70px',\n        sortable: true,\n        fixedWidth: true,\n        sort: DataGrid.DataGrid.Order.Ascending,\n      },\n      {id: 'shallowSize', title: i18nString(UIStrings.shallowSize), width: '110px', sortable: true, fixedWidth: true},\n      {id: 'retainedSize', title: i18nString(UIStrings.retainedSize), width: '110px', sortable: true, fixedWidth: true},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    super(heapProfilerModel, dataDisplayDelegate, i18nString(UIStrings.heapSnapshotRetainment), columns);\n  }\n\n  override createRootNode(snapshot: HeapSnapshotProxy, node: HeapSnapshotModel.HeapSnapshotModel.Node):\n      HeapSnapshotRetainingObjectNode {\n    const fakeEdge = new HeapSnapshotModel.HeapSnapshotModel.Edge('', node, '', -1);\n    return new HeapSnapshotRetainingObjectNode(this, snapshot, fakeEdge, null);\n  }\n\n  override sortFields(sortColumn: string, sortAscending: boolean):\n      HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    switch (sortColumn) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'count', false);\n      case 'count':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('count', sortAscending, 'name', true);\n      case 'shallowSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('shallowSize', sortAscending, 'name', true);\n      case 'retainedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('retainedSize', sortAscending, 'name', true);\n      case 'distance':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('distance', sortAscending, 'name', true);\n      default:\n        throw new Error(`Unknown column ${sortColumn}`);\n    }\n  }\n\n  reset(): void {\n    this.rootNode().removeChildren();\n    this.resetSortingCache();\n  }\n\n  updateResetButtonVisibility(): void {\n    void this.snapshot?.areNodesIgnoredInRetainersView().then(value => {\n      this.resetRetainersButton?.setVisible(value);\n    });\n  }\n\n  override async setDataSource(snapshot: HeapSnapshotProxy, nodeIndex: number, nodeId?: number): Promise<void> {\n    await super.setDataSource(snapshot, nodeIndex, nodeId);\n    this.rootNode().expand();\n    this.updateResetButtonVisibility();\n  }\n\n  override async dataSourceChanged(): Promise<void> {\n    this.reset();\n    await (this.rootNode() as HeapSnapshotGridNode).sort();\n    this.rootNode().expand();\n    this.updateResetButtonVisibility();\n  }\n}\n\n// TODO(crbug.com/1228674): Remove this enum, it is only used in web tests.\nexport enum HeapSnapshotRetainmentDataGridEvents {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  ExpandRetainersComplete = 'ExpandRetainersComplete',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport class HeapSnapshotConstructorsDataGrid extends HeapSnapshotViewportDataGrid {\n  profileIndex: number;\n  objectIdToSelect: string|null;\n  nextRequestedFilter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter|null;\n  lastFilter?: HeapSnapshotModel.HeapSnapshotModel.NodeFilter|null;\n  filterInProgress?: HeapSnapshotModel.HeapSnapshotModel.NodeFilter|null;\n\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, dataDisplayDelegate: DataDisplayDelegate) {\n    const columns = ([\n      {id: 'object', title: i18nString(UIStrings.constructorString), disclosure: true, sortable: true},\n      {id: 'distance', title: i18nString(UIStrings.distance), width: '70px', sortable: true, fixedWidth: true},\n      {id: 'shallowSize', title: i18nString(UIStrings.shallowSize), width: '110px', sortable: true, fixedWidth: true},\n      {\n        id: 'retainedSize',\n        title: i18nString(UIStrings.retainedSize),\n        width: '110px',\n        sort: DataGrid.DataGrid.Order.Descending,\n        sortable: true,\n        fixedWidth: true,\n      },\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    super(\n        heapProfilerModel, dataDisplayDelegate,\n        ({displayName: i18nString(UIStrings.heapSnapshotConstructors).toString(), columns} as\n         DataGrid.DataGrid.Parameters));\n    // clang-format on\n    this.profileIndex = -1;\n    this.objectIdToSelect = null;\n\n    this.nextRequestedFilter = null;\n  }\n\n  override sortFields(sortColumn: string, sortAscending: boolean):\n      HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    switch (sortColumn) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'retainedSize', false);\n      case 'distance':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            'distance', sortAscending, 'retainedSize', false);\n      case 'shallowSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('shallowSize', sortAscending, 'name', true);\n      case 'retainedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('retainedSize', sortAscending, 'name', true);\n      default:\n        throw new Error(`Unknown column ${sortColumn}`);\n    }\n  }\n\n  override async revealObjectByHeapSnapshotId(id: string): Promise<HeapSnapshotGridNode|null> {\n    if (!this.snapshot) {\n      this.objectIdToSelect = id;\n      return null;\n    }\n\n    const classKey = await this.snapshot.nodeClassKey(parseInt(id, 10));\n    if (!classKey) {\n      return null;\n    }\n\n    const topLevelNodes = this.topLevelNodes() as HeapSnapshotConstructorNode[];\n    const parent = topLevelNodes.find(classNode => classNode.classKey === classKey);\n    if (!parent) {\n      return null;\n    }\n\n    const nodes = await parent.populateNodeBySnapshotObjectId(parseInt(id, 10));\n    return nodes.length ? await this.revealTreeNode(nodes) : null;\n  }\n\n  clear(): void {\n    this.nextRequestedFilter = null;\n    this.lastFilter = null;\n    this.removeTopLevelNodes();\n  }\n\n  override async setDataSource(snapshot: HeapSnapshotProxy, _nodeIndex: number): Promise<void> {\n    this.snapshot = snapshot;\n    if (this.profileIndex === -1) {\n      void this.populateChildren();\n    }\n\n    if (this.objectIdToSelect) {\n      void this.revealObjectByHeapSnapshotId(this.objectIdToSelect);\n      this.objectIdToSelect = null;\n    }\n  }\n\n  setSelectionRange(minNodeId: number, maxNodeId: number): void {\n    this.nodeFilterInternal = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter(minNodeId, maxNodeId);\n    void this.populateChildren(this.nodeFilterInternal);\n  }\n\n  setAllocationNodeId(allocationNodeId: number): void {\n    this.nodeFilterInternal = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter();\n    this.nodeFilterInternal.allocationNodeId = allocationNodeId;\n    void this.populateChildren(this.nodeFilterInternal);\n  }\n\n  aggregatesReceived(\n      nodeFilter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter,\n      aggregates: Record<string, HeapSnapshotModel.HeapSnapshotModel.Aggregate>,\n      ): void {\n    this.filterInProgress = null;\n    if (this.nextRequestedFilter && this.snapshot) {\n      void this.snapshot.aggregatesWithFilter(this.nextRequestedFilter)\n          .then(this.aggregatesReceived.bind(this, this.nextRequestedFilter));\n      this.filterInProgress = this.nextRequestedFilter;\n      this.nextRequestedFilter = null;\n    }\n    this.removeTopLevelNodes();\n    this.resetSortingCache();\n    for (const classKey in aggregates) {\n      this.appendNode(\n          (this.rootNode() as HeapSnapshotGridNode),\n          new HeapSnapshotConstructorNode(this, classKey, aggregates[classKey], nodeFilter));\n    }\n    this.sortingChanged();\n    this.lastFilter = nodeFilter;\n  }\n\n  async populateChildren(maybeNodeFilter?: HeapSnapshotModel.HeapSnapshotModel.NodeFilter): Promise<void> {\n    const nodeFilter = maybeNodeFilter || new HeapSnapshotModel.HeapSnapshotModel.NodeFilter();\n\n    if (this.filterInProgress) {\n      this.nextRequestedFilter = this.filterInProgress.equals(nodeFilter) ? null : nodeFilter;\n      return;\n    }\n    if (this.lastFilter?.equals(nodeFilter)) {\n      return;\n    }\n    this.filterInProgress = nodeFilter;\n\n    if (this.snapshot) {\n      const aggregates = await this.snapshot.aggregatesWithFilter(nodeFilter);\n      this.aggregatesReceived(nodeFilter, aggregates);\n    }\n  }\n\n  filterSelectIndexChanged(profiles: HeapProfileHeader[], profileIndex: number, filterName: string|undefined): void {\n    this.profileIndex = profileIndex;\n    this.nodeFilterInternal = undefined;\n    if (profileIndex !== -1) {\n      const minNodeId = profileIndex > 0 ? profiles[profileIndex - 1].maxJSObjectId : 0;\n      const maxNodeId = profiles[profileIndex].maxJSObjectId;\n      this.nodeFilterInternal = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter(minNodeId, maxNodeId);\n    } else if (filterName !== undefined) {\n      this.nodeFilterInternal = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter();\n      this.nodeFilterInternal.filterName = filterName;\n    }\n\n    void this.populateChildren(this.nodeFilterInternal);\n  }\n}\n\nexport class HeapSnapshotDiffDataGrid extends HeapSnapshotViewportDataGrid {\n  baseSnapshot?: HeapSnapshotProxy;\n\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, dataDisplayDelegate: DataDisplayDelegate) {\n    const columns = ([\n      {id: 'object', title: i18nString(UIStrings.constructorString), disclosure: true, sortable: true},\n      {id: 'addedCount', title: i18nString(UIStrings.New), width: '75px', sortable: true, fixedWidth: true},\n      {id: 'removedCount', title: i18nString(UIStrings.Deleted), width: '75px', sortable: true, fixedWidth: true},\n      {id: 'countDelta', title: i18nString(UIStrings.Delta), width: '65px', sortable: true, fixedWidth: true},\n      {\n        id: 'addedSize',\n        title: i18nString(UIStrings.allocSize),\n        width: '75px',\n        sortable: true,\n        fixedWidth: true,\n        sort: DataGrid.DataGrid.Order.Descending,\n      },\n      {id: 'removedSize', title: i18nString(UIStrings.freedSize), width: '75px', sortable: true, fixedWidth: true},\n      {id: 'sizeDelta', title: i18nString(UIStrings.sizeDelta), width: '75px', sortable: true, fixedWidth: true},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    super(\n        heapProfilerModel, dataDisplayDelegate,\n        ({displayName: i18nString(UIStrings.heapSnapshotDiff).toString(), columns} as DataGrid.DataGrid.Parameters));\n  }\n\n  override defaultPopulateCount(): number {\n    return 50;\n  }\n\n  override sortFields(sortColumn: string, sortAscending: boolean):\n      HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    switch (sortColumn) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'count', false);\n      case 'addedCount':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('addedCount', sortAscending, 'name', true);\n      case 'removedCount':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('removedCount', sortAscending, 'name', true);\n      case 'countDelta':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('countDelta', sortAscending, 'name', true);\n      case 'addedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('addedSize', sortAscending, 'name', true);\n      case 'removedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('removedSize', sortAscending, 'name', true);\n      case 'sizeDelta':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('sizeDelta', sortAscending, 'name', true);\n      default:\n        throw new Error(`Unknown column ${sortColumn}`);\n    }\n  }\n\n  override async setDataSource(snapshot: HeapSnapshotProxy, _nodeIndex: number): Promise<void> {\n    this.snapshot = snapshot;\n  }\n\n  setBaseDataSource(baseSnapshot: HeapSnapshotProxy): void {\n    this.baseSnapshot = baseSnapshot;\n    this.removeTopLevelNodes();\n    this.resetSortingCache();\n    if (this.baseSnapshot === this.snapshot) {\n      this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.SortingComplete);\n      return;\n    }\n    void this.populateChildren();\n  }\n\n  async populateChildren(): Promise<void> {\n    if (this.snapshot === null || this.baseSnapshot?.uid === undefined) {\n      throw new Error('Data sources have not been set correctly');\n    }\n    // Two snapshots live in different workers isolated from each other. That is why\n    // we first need to collect information about the nodes in the first snapshot and\n    // then pass it to the second snapshot to calclulate the diff.\n    const interfaceDefinitions = await this.snapshot.interfaceDefinitions();\n    const aggregatesForDiff = await this.baseSnapshot.aggregatesForDiff(interfaceDefinitions);\n    const diffByClassKey = await this.snapshot.calculateSnapshotDiff(this.baseSnapshot.uid, aggregatesForDiff);\n\n    for (const classKey in diffByClassKey) {\n      const diff = diffByClassKey[classKey];\n      this.appendNode(this.rootNode(), new HeapSnapshotDiffNode(this, classKey, diff));\n    }\n    this.sortingChanged();\n  }\n}\n\nexport class AllocationDataGrid extends HeapSnapshotViewportDataGrid {\n  readonly linkifierInternal: Components.Linkifier.Linkifier;\n  topNodes?: HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode[];\n\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, dataDisplayDelegate: DataDisplayDelegate) {\n    const columns = ([\n      {id: 'liveCount', title: i18nString(UIStrings.liveCount), width: '75px', sortable: true, fixedWidth: true},\n      {id: 'count', title: i18nString(UIStrings.count), width: '65px', sortable: true, fixedWidth: true},\n      {id: 'liveSize', title: i18nString(UIStrings.liveSize), width: '75px', sortable: true, fixedWidth: true},\n      {\n        id: 'size',\n        title: i18nString(UIStrings.size),\n        width: '75px',\n        sortable: true,\n        fixedWidth: true,\n        sort: DataGrid.DataGrid.Order.Descending,\n      },\n      {id: 'name', title: i18nString(UIStrings.function), disclosure: true, sortable: true},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    super(\n        heapProfilerModel, dataDisplayDelegate,\n        ({displayName: i18nString(UIStrings.allocation).toString(), columns} as DataGrid.DataGrid.Parameters));\n    // clang-format on\n    this.linkifierInternal = new Components.Linkifier.Linkifier();\n  }\n\n  get linkifier(): Components.Linkifier.Linkifier {\n    return this.linkifierInternal;\n  }\n\n  dispose(): void {\n    this.linkifierInternal.reset();\n  }\n\n  override async setDataSource(snapshot: HeapSnapshotProxy, _nodeIndex: number): Promise<void> {\n    this.snapshot = snapshot;\n    this.topNodes = await this.snapshot.allocationTracesTops();\n    this.populateChildren();\n  }\n\n  populateChildren(): void {\n    this.removeTopLevelNodes();\n    const root = this.rootNode();\n    const tops = this.topNodes || [];\n    for (const top of tops) {\n      this.appendNode(root, new AllocationGridNode(this, top));\n    }\n    this.updateVisibleNodes(true);\n  }\n\n  override sortingChanged(): void {\n    if (this.topNodes !== undefined) {\n      this.topNodes.sort(this.createComparator());\n      this.rootNode().removeChildren();\n      this.populateChildren();\n    }\n  }\n\n  createComparator(): (arg0: Object, arg1: Object) => number {\n    const fieldName = this.sortColumnId();\n    const compareResult = (this.sortOrder() === DataGrid.DataGrid.Order.Ascending) ? +1 : -1;\n    function compare(a: Object, b: Object): number {\n      // @ts-expect-error\n      if (a[fieldName] > b[fieldName]) {\n        return compareResult;\n      }\n      // @ts-expect-error\n      if (a[fieldName] < b[fieldName]) {\n        return -compareResult;\n      }\n      return 0;\n    }\n    return compare;\n  }\n}\n", "// Copyright 2011 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport type {ChildrenProvider} from './ChildrenProvider.js';\nimport {\n  type AllocationDataGrid,\n  type HeapSnapshotConstructorsDataGrid,\n  type HeapSnapshotDiffDataGrid,\n  type HeapSnapshotSortableDataGrid,\n  HeapSnapshotSortableDataGridEvents,\n} from './HeapSnapshotDataGrids.js';\nimport type {HeapSnapshotProviderProxy, HeapSnapshotProxy} from './HeapSnapshotProxy.js';\nimport type {DataDisplayDelegate} from './ProfileHeader.js';\n\nconst UIStrings = {\n  /**\n   * @description Generic text with two placeholders separated by a comma\n   * @example {1 613 680} PH1\n   * @example {44 %} PH2\n   */\n  genericStringsTwoPlaceholders: '{PH1}, {PH2}',\n  /**\n   * @description Text in Heap Snapshot Grid Nodes of a profiler tool\n   */\n  internalArray: '(internal array)[]',\n  /**\n   * @description Text in Heap Snapshot Grid Nodes of a profiler tool\n   */\n  userObjectReachableFromWindow: 'User object reachable from window',\n  /**\n   * @description Text in Heap Snapshot Grid Nodes of a profiler tool\n   */\n  detachedFromDomTree: 'Detached from DOM tree',\n  /**\n   * @description Text in Heap Snapshot Grid Nodes of a profiler tool\n   */\n  previewIsNotAvailable: 'Preview is not available',\n  /**\n   * @description A context menu item in the Heap Profiler Panel of a profiler tool\n   */\n  revealInSummaryView: 'Reveal in Summary view',\n  /**\n   * @description Text for the summary view\n   */\n  summary: 'Summary',\n  /**\n   * @description A context menu item in the Heap Profiler Panel of a profiler tool\n   * @example {SomeClassConstructor} PH1\n   * @example {12345} PH2\n   */\n  revealObjectSWithIdSInSummary: 'Reveal object \\'\\'{PH1}\\'\\' with id @{PH2} in Summary view',\n  /**\n   * @description Text to store an HTML element or JavaScript variable or expression result as a global variable\n   */\n  storeAsGlobalVariable: 'Store as global variable',\n  /**\n   * @description Text to ignore an object shown in the Retainers pane\n   */\n  ignoreThisRetainer: 'Ignore this retainer',\n  /**\n   * @description Text to undo the \"Ignore this retainer\" action\n   */\n  stopIgnoringThisRetainer: 'Stop ignoring this retainer',\n  /**\n   * @description Text indicating that a node has been ignored with the \"Ignore this retainer\" action\n   */\n  ignored: 'ignored',\n  /**\n   * @description Text in Heap Snapshot Grid Nodes of a profiler tool that indicates an element contained in another\n   * element.\n   */\n  inElement: 'in',\n  /**\n   * @description A short summary of the text at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#compiled-code\n   */\n  compiledCodeSummary: 'Internal data which V8 uses to run functions defined by JavaScript or WebAssembly.',\n  /**\n   * @description A short summary of the text at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#concatenated-string\n   */\n  concatenatedStringSummary: 'A string which represents the contents of two other strings joined together.',\n  /**\n   * @description A short summary of the text at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#system-context\n   */\n  contextSummary:\n      'An internal object containing variables from a JavaScript scope which may be needed by a function created within that scope.',\n  /**\n   * @description A short description of the data type internal type DescriptorArray, which is described more fully at https://v8.dev/blog/fast-properties\n   */\n  descriptorArraySummary: 'A list of the property names used by a JavaScript Object.',\n  /**\n   * @description A short summary of the text at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#array\n   */\n  internalArraySummary: 'An internal array-like data structure (not a JavaScript Array).',\n  /**\n   * @description A short summary of the text at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#internal-node\n   */\n  internalNodeSummary: 'An object allocated by a component other than V8, such as C++ objects defined by Blink.',\n  /**\n   * @description A short description of the data type \"system / Map\" described at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#object-shape\n   */\n  mapSummary: 'An internal object representing the shape of a JavaScript Object (not a JavaScript Map).',\n  /**\n   * @description A short summary of the \"(object elements)[]\" described at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#array\n   */\n  objectElementsSummary:\n      'An internal object which stores the indexed properties in a JavaScript Object, such as the contents of an Array.',\n  /**\n   * @description A short summary of the \"(object properties)[]\" described at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#array\n   */\n  objectPropertiesSummary: 'An internal object which stores the named properties in a JavaScript Object.',\n  /**\n   * @description A short summary of the text at https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#sliced-string\n   */\n  slicedStringSummary: 'A string which represents some of the characters from another string.',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapSnapshotGridNodes.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nclass HeapSnapshotGridNodeBase extends DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode> {}\n\nexport class HeapSnapshotGridNode extends\n    Common.ObjectWrapper.eventMixin<HeapSnapshotGridNode.EventTypes, typeof HeapSnapshotGridNodeBase>(\n        HeapSnapshotGridNodeBase) {\n  dataGridInternal: HeapSnapshotSortableDataGrid;\n  instanceCount: number;\n  readonly savedChildren: Map<number, HeapSnapshotGridNode>;\n  retrievedChildrenRanges: Array<{\n    from: number,\n    to: number,\n  }>;\n  providerObject: ChildrenProvider|null;\n  reachableFromWindow: boolean;\n  populated?: boolean;\n\n  constructor(tree: HeapSnapshotSortableDataGrid, hasChildren: boolean) {\n    super(null, hasChildren);\n    this.dataGridInternal = tree;\n    this.instanceCount = 0;\n\n    this.savedChildren = new Map();\n\n    /**\n     * List of position ranges for all visible nodes: [startPos1, endPos1),...,[startPosN, endPosN)\n     * Position is an item position in the provider.\n     */\n    this.retrievedChildrenRanges = [];\n\n    this.providerObject = null;\n    this.reachableFromWindow = false;\n  }\n\n  get name(): string|undefined {\n    return undefined;\n  }\n\n  createProvider(): ChildrenProvider {\n    throw new Error('Not implemented.');\n  }\n\n  comparator(): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    throw new Error('Not implemented.');\n  }\n\n  getHash(): number {\n    throw new Error('Not implemented.');\n  }\n  createChildNode(_item: HeapSnapshotModel.HeapSnapshotModel.Node|HeapSnapshotModel.HeapSnapshotModel.Edge):\n      HeapSnapshotGridNode {\n    throw new Error('Not implemented.');\n  }\n\n  retainersDataSource(): {\n    snapshot: HeapSnapshotProxy,\n    snapshotNodeIndex: number,\n    snapshotNodeId: number|undefined,\n  }|null {\n    return null;\n  }\n\n  provider(): ChildrenProvider {\n    if (!this.providerObject) {\n      this.providerObject = this.createProvider();\n    }\n    return this.providerObject;\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    return super.createCell(columnId);\n  }\n\n  override collapse(): void {\n    super.collapse();\n    this.dataGridInternal.updateVisibleNodes(true);\n  }\n\n  override expand(): void {\n    super.expand();\n    this.dataGridInternal.updateVisibleNodes(true);\n  }\n\n  dispose(): void {\n    if (this.providerObject) {\n      this.providerObject.dispose();\n    }\n    for (let node: (HeapSnapshotGridNode|null) = (this.children[0] as HeapSnapshotGridNode | null); node;\n         node = (node.traverseNextNode(true, this, true) as HeapSnapshotGridNode | null)) {\n      node.dispose();\n    }\n  }\n\n  queryObjectContent(_heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel, _objectGroupName: string):\n      Promise<SDK.RemoteObject.RemoteObject|{description: string, link: string}> {\n    throw new Error('Not implemented.');\n  }\n\n  tryQueryObjectContent(_heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel, _objectGroupName: string):\n      Promise<SDK.RemoteObject.RemoteObject|null> {\n    throw new Error('Not implemented.');\n  }\n\n  populateContextMenu(\n      _contextMenu: UI.ContextMenu.ContextMenu, _dataDisplayDelegate: DataDisplayDelegate,\n      _heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null): void {\n  }\n\n  toPercentString(num: number): string {\n    return num.toFixed(0) + '\\xa0%';  // \\xa0 is a non-breaking space.\n  }\n\n  toUIDistance(distance: number): string {\n    const baseSystemDistance = HeapSnapshotModel.HeapSnapshotModel.baseSystemDistance;\n    return distance >= 0 && distance < baseSystemDistance ? distance.toString() : '\\u2212';\n  }\n\n  allChildren(): HeapSnapshotGridNode[] {\n    return this.dataGridInternal.allChildren(this) as HeapSnapshotGridNode[];\n  }\n\n  removeChildByIndex(index: number): void {\n    this.dataGridInternal.removeChildByIndex(this, index);\n  }\n\n  childForPosition(nodePosition: number): HeapSnapshotGridNode|null {\n    let indexOfFirstChildInRange = 0;\n    for (let i = 0; i < this.retrievedChildrenRanges.length; i++) {\n      const range = this.retrievedChildrenRanges[i];\n      if (range.from <= nodePosition && nodePosition < range.to) {\n        const childIndex = indexOfFirstChildInRange + nodePosition - range.from;\n        return this.allChildren()[childIndex];\n      }\n      indexOfFirstChildInRange += range.to - range.from + 1;\n    }\n    return null;\n  }\n\n  createValueCell(columnId: string): HTMLElement {\n    const jslog = VisualLogging.tableCell('numeric-column').track({click: true});\n    const cell = (UI.Fragment.html`<td class=\"numeric-column\" jslog=${jslog} />` as HTMLElement);\n    const dataGrid = (this.dataGrid as HeapSnapshotSortableDataGrid);\n    if (dataGrid.snapshot && dataGrid.snapshot.totalSize !== 0) {\n      const div = document.createElement('div');\n      const valueSpan = UI.Fragment.html`<span>${this.data[columnId]}</span>`;\n      div.appendChild(valueSpan);\n      const percentColumn = columnId + '-percent';\n      if (percentColumn in this.data) {\n        const percentSpan = UI.Fragment.html`<span class=\"percent-column\">${this.data[percentColumn]}</span>`;\n        div.appendChild(percentSpan);\n        div.classList.add('profile-multiple-values');\n        UI.ARIAUtils.setHidden(valueSpan, true);\n        UI.ARIAUtils.setHidden(percentSpan, true);\n        this.setCellAccessibleName(\n            i18nString(\n                UIStrings.genericStringsTwoPlaceholders, {PH1: this.data[columnId], PH2: this.data[percentColumn]}),\n            cell, columnId);\n      }\n      cell.appendChild(div);\n    }\n    return cell;\n  }\n\n  override populate(): void {\n    if (this.populated) {\n      return;\n    }\n    this.populated = true;\n    void this.provider().sortAndRewind(this.comparator()).then(() => this.populateChildren());\n  }\n\n  expandWithoutPopulate(): Promise<void> {\n    // Make sure default populate won't take action.\n    this.populated = true;\n    this.expand();\n    return this.provider().sortAndRewind(this.comparator());\n  }\n\n  childHashForEntity(entity: HeapSnapshotModel.HeapSnapshotModel.Node|HeapSnapshotModel.HeapSnapshotModel.Edge):\n      number {\n    if ('edgeIndex' in entity) {\n      return entity.edgeIndex;\n    }\n    return entity.id;\n  }\n\n  populateChildren(fromPosition?: number|null, toPosition?: number|null): Promise<void> {\n    return new Promise(resolve => {\n      fromPosition = fromPosition || 0;\n      toPosition = toPosition || fromPosition + this.dataGridInternal.defaultPopulateCount();\n      let firstNotSerializedPosition: number = fromPosition;\n      serializeNextChunk.call(this, toPosition);\n\n      function serializeNextChunk(this: HeapSnapshotGridNode, toPosition: number): void {\n        if (firstNotSerializedPosition >= toPosition) {\n          return;\n        }\n        const end = Math.min(firstNotSerializedPosition + this.dataGridInternal.defaultPopulateCount(), toPosition);\n        void this.provider()\n            .serializeItemsRange(firstNotSerializedPosition, end)\n            .then(itemsRange => childrenRetrieved.call(this, itemsRange, toPosition));\n        firstNotSerializedPosition = end;\n      }\n\n      function insertRetrievedChild(\n          this: HeapSnapshotGridNode,\n          item: HeapSnapshotModel.HeapSnapshotModel.Node|HeapSnapshotModel.HeapSnapshotModel.Edge,\n          insertionIndex: number): void {\n        if (this.savedChildren) {\n          const hash = this.childHashForEntity(item);\n          const child = this.savedChildren.get(hash);\n          if (child) {\n            this.dataGridInternal.insertChild(this, child, insertionIndex);\n            return;\n          }\n        }\n        this.dataGridInternal.insertChild(this, this.createChildNode(item), insertionIndex);\n      }\n\n      function insertShowMoreButton(\n          this: HeapSnapshotGridNode, from: number, to: number, insertionIndex: number): void {\n        const button = (new DataGrid.ShowMoreDataGridNode.ShowMoreDataGridNode(\n            this.populateChildren.bind(this), from, to, this.dataGridInternal.defaultPopulateCount()));\n        this.dataGridInternal.insertChild(this, (button as unknown as HeapSnapshotGridNode), insertionIndex);\n      }\n\n      function childrenRetrieved(\n          this: HeapSnapshotGridNode, itemsRange: HeapSnapshotModel.HeapSnapshotModel.ItemsRange,\n          toPosition: number): void {\n        let itemIndex = 0;\n        let itemPosition: number = itemsRange.startPosition;\n        const items = itemsRange.items;\n        let insertionIndex = 0;\n\n        if (!this.retrievedChildrenRanges.length) {\n          if (itemsRange.startPosition > 0) {\n            this.retrievedChildrenRanges.push({from: 0, to: 0});\n            insertShowMoreButton.call(this, 0, itemsRange.startPosition, insertionIndex++);\n          }\n          this.retrievedChildrenRanges.push({from: itemsRange.startPosition, to: itemsRange.endPosition});\n          for (let i = 0, l = items.length; i < l; ++i) {\n            insertRetrievedChild.call(this, items[i], insertionIndex++);\n          }\n          if (itemsRange.endPosition < itemsRange.totalLength) {\n            insertShowMoreButton.call(this, itemsRange.endPosition, itemsRange.totalLength, insertionIndex++);\n          }\n        } else {\n          let rangeIndex = 0;\n          let found = false;\n          let range: {\n            from: number,\n            to: number,\n          } = {from: 0, to: 0};\n          while (rangeIndex < this.retrievedChildrenRanges.length) {\n            range = this.retrievedChildrenRanges[rangeIndex];\n            if (range.to >= itemPosition) {\n              found = true;\n              break;\n            }\n            insertionIndex += range.to - range.from;\n            // Skip the button if there is one.\n            if (range.to < itemsRange.totalLength) {\n              insertionIndex += 1;\n            }\n            ++rangeIndex;\n          }\n\n          if (!found || itemsRange.startPosition < range.from) {\n            // Update previous button.\n            const button =\n                this.allChildren()[insertionIndex - 1] as unknown as DataGrid.ShowMoreDataGridNode.ShowMoreDataGridNode;\n            button.setEndPosition(itemsRange.startPosition);\n            insertShowMoreButton.call(\n                this, itemsRange.startPosition, found ? range.from : itemsRange.totalLength, insertionIndex);\n            range = {from: itemsRange.startPosition, to: itemsRange.startPosition};\n            if (!found) {\n              rangeIndex = this.retrievedChildrenRanges.length;\n            }\n            this.retrievedChildrenRanges.splice(rangeIndex, 0, range);\n          } else {\n            insertionIndex += itemPosition - range.from;\n          }\n          // At this point insertionIndex is always an index before button or between nodes.\n          // Also it is always true here that range.from <= itemPosition <= range.to\n\n          // Stretch the range right bound to include all new items.\n          while (range.to < itemsRange.endPosition) {\n            // Skip already added nodes.\n            const skipCount = range.to - itemPosition;\n            insertionIndex += skipCount;\n            itemIndex += skipCount;\n            itemPosition = range.to;\n\n            // We're at the position before button: ...<?node>x<button>\n            const nextRange = this.retrievedChildrenRanges[rangeIndex + 1];\n            let newEndOfRange: number = nextRange ? nextRange.from : itemsRange.totalLength;\n            if (newEndOfRange > itemsRange.endPosition) {\n              newEndOfRange = itemsRange.endPosition;\n            }\n            while (itemPosition < newEndOfRange) {\n              insertRetrievedChild.call(this, items[itemIndex++], insertionIndex++);\n              ++itemPosition;\n            }\n\n            // Merge with the next range.\n            if (nextRange && newEndOfRange === nextRange.from) {\n              range.to = nextRange.to;\n              // Remove \"show next\" button if there is one.\n              this.removeChildByIndex(insertionIndex);\n              this.retrievedChildrenRanges.splice(rangeIndex + 1, 1);\n            } else {\n              range.to = newEndOfRange;\n              // Remove or update next button.\n              if (newEndOfRange === itemsRange.totalLength) {\n                this.removeChildByIndex(insertionIndex);\n              } else {\n                (this.allChildren()[insertionIndex] as unknown as DataGrid.ShowMoreDataGridNode.ShowMoreDataGridNode)\n                    .setStartPosition(itemsRange.endPosition);\n              }\n            }\n          }\n        }\n\n        this.instanceCount += items.length;\n        if (firstNotSerializedPosition < toPosition && firstNotSerializedPosition < itemsRange.totalLength) {\n          serializeNextChunk.call(this, toPosition);\n          return;\n        }\n\n        if (this.expanded) {\n          this.dataGridInternal.updateVisibleNodes(true);\n        }\n        resolve();\n        this.dispatchEventToListeners(HeapSnapshotGridNode.Events.PopulateComplete);\n      }\n    });\n  }\n\n  saveChildren(): void {\n    this.savedChildren.clear();\n    const children = this.allChildren();\n    for (let i = 0, l = children.length; i < l; ++i) {\n      const child = children[i];\n      if (!child.expanded) {\n        continue;\n      }\n      this.savedChildren.set(child.getHash(), child);\n    }\n  }\n\n  async sort(): Promise<void> {\n    this.dataGridInternal.recursiveSortingEnter();\n\n    await this.provider().sortAndRewind(this.comparator());\n\n    this.saveChildren();\n    this.dataGridInternal.removeAllChildren(this);\n    this.retrievedChildrenRanges = [];\n    const instanceCount = this.instanceCount;\n    this.instanceCount = 0;\n\n    await this.populateChildren(0, instanceCount);\n\n    for (const child of this.allChildren()) {\n      if (child.expanded) {\n        void child.sort();\n      }\n    }\n    this.dataGridInternal.recursiveSortingLeave();\n  }\n}\n\nexport namespace HeapSnapshotGridNode {\n  export enum Events {\n    /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n    PopulateComplete = 'PopulateComplete',\n    /* eslint-enable @typescript-eslint/naming-convention */\n  }\n\n  export interface EventTypes {\n    [Events.PopulateComplete]: void;\n  }\n}\n\nexport abstract class HeapSnapshotGenericObjectNode extends HeapSnapshotGridNode {\n  referenceName?: string|null;\n  readonly nameInternal: string|undefined;\n  readonly type: string|undefined;\n  readonly distance: number|undefined;\n  shallowSize: number|undefined;\n  readonly retainedSize: number|undefined;\n  snapshotNodeId: number|undefined;\n  snapshotNodeIndex: number|undefined;\n  detachedDOMTreeNode: boolean|undefined;\n  linkElement?: Element;\n\n  constructor(dataGrid: HeapSnapshotSortableDataGrid, node: HeapSnapshotModel.HeapSnapshotModel.Node) {\n    super(dataGrid, false);\n    // node is null for DataGrid root nodes.\n    if (!node) {\n      return;\n    }\n    this.referenceName = null;\n    this.nameInternal = node.name;\n    this.type = node.type;\n    this.distance = node.distance;\n    this.shallowSize = node.selfSize;\n    this.retainedSize = node.retainedSize;\n    this.snapshotNodeId = node.id;\n    this.snapshotNodeIndex = node.nodeIndex;\n    if (this.type === 'string') {\n      this.reachableFromWindow = true;\n    } else if (this.type === 'object' && this.nameInternal.startsWith('Window')) {\n      this.nameInternal = this.shortenWindowURL(this.nameInternal, false);\n      this.reachableFromWindow = true;\n    } else if (node.canBeQueried) {\n      this.reachableFromWindow = true;\n    }\n    if (node.detachedDOMTreeNode) {\n      this.detachedDOMTreeNode = true;\n    }\n\n    const snapshot = (dataGrid.snapshot as HeapSnapshotProxy);\n    const shallowSizePercent = this.shallowSize / snapshot.totalSize * 100.0;\n    const retainedSizePercent = this.retainedSize / snapshot.totalSize * 100.0;\n\n    this.data = {\n      distance: this.toUIDistance(this.distance),\n      shallowSize: i18n.ByteUtilities.formatBytesToKb(this.shallowSize),\n      retainedSize: i18n.ByteUtilities.formatBytesToKb(this.retainedSize),\n      'shallowSize-percent': this.toPercentString(shallowSizePercent),\n      'retainedSize-percent': this.toPercentString(retainedSizePercent),\n    };\n  }\n\n  override get name(): string|undefined {\n    return this.nameInternal;\n  }\n\n  override retainersDataSource(): {\n    snapshot: HeapSnapshotProxy,\n    snapshotNodeIndex: number,\n    snapshotNodeId: number|undefined,\n  }|null {\n    return this.snapshotNodeIndex === undefined ? null : {\n      snapshot: (this.dataGridInternal.snapshot as HeapSnapshotProxy),\n      snapshotNodeIndex: this.snapshotNodeIndex,\n      snapshotNodeId: this.snapshotNodeId,\n    };\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    const cell = columnId !== 'object' ? this.createValueCell(columnId) : this.createObjectCell();\n    return cell;\n  }\n\n  createObjectCell(): HTMLElement {\n    let value: string|(string | undefined) = this.nameInternal;\n    let valueStyle = 'object';\n    switch (this.type) {\n      case 'concatenated string':\n      case 'string':\n        value = `\"${value}\"`;\n        valueStyle = 'string';\n        break;\n      case 'regexp':\n        value = `/${value}/`;\n        valueStyle = 'string';\n        break;\n      case 'closure':\n        value = `${value}()`;\n        valueStyle = 'function';\n        break;\n      case 'bigint':\n        valueStyle = 'bigint';\n        break;\n      case 'number':\n        valueStyle = 'number';\n        break;\n      case 'hidden':\n      case 'object shape':\n        valueStyle = 'null';\n        break;\n      case 'array':\n        value = value ? `${value}[]` : i18nString(UIStrings.internalArray);\n        break;\n    }\n    return this.createObjectCellWithValue(valueStyle, value || '');\n  }\n\n  createObjectCellWithValue(valueStyle: string, value: string): HTMLElement {\n    const jslog = VisualLogging.tableCell('object-column').track({click: true});\n    const fragment = UI.Fragment.Fragment.build`\n  <td class=\"object-column disclosure\" jslog=${jslog}>\n  <div class=\"source-code event-properties\" style=\"overflow: visible;\" $=\"container\">\n  <span class=\"value object-value-${valueStyle}\">${value}</span>\n  <span class=\"object-value-id\">@${this.snapshotNodeId}</span>\n  </div>\n  </td>`;\n    const div = fragment.$('container');\n    this.prefixObjectCell(div);\n    if (this.reachableFromWindow) {\n      const frameIcon = IconButton.Icon.create('frame', 'heap-object-tag');\n      UI.Tooltip.Tooltip.install(frameIcon, i18nString(UIStrings.userObjectReachableFromWindow));\n      div.appendChild(frameIcon);\n    }\n    if (this.detachedDOMTreeNode) {\n      const frameIcon = IconButton.Icon.create('scissors', 'heap-object-tag');\n      UI.Tooltip.Tooltip.install(frameIcon, i18nString(UIStrings.detachedFromDomTree));\n      div.appendChild(frameIcon);\n    }\n    void this.appendSourceLocation(div);\n    const cell = (fragment.element() as HTMLElement);\n    if (this.depth) {\n      cell.style.setProperty(\n          'padding-left', (this.depth * (this.dataGrid as HeapSnapshotSortableDataGrid).indentWidth) + 'px');\n    }\n    return cell;\n  }\n\n  prefixObjectCell(_div: Element): void {\n  }\n\n  async appendSourceLocation(div: Element): Promise<void> {\n    const linkContainer = UI.Fragment.html`<span class=\"heap-object-source-link\" />`;\n    div.appendChild(linkContainer);\n    const link = await this.dataGridInternal.dataDisplayDelegate().linkifyObject((this.snapshotNodeIndex as number));\n    if (link) {\n      link.setAttribute('tabindex', '0');\n      linkContainer.appendChild(link);\n      this.linkElement = link;\n    } else {\n      linkContainer.remove();\n    }\n  }\n\n  override async queryObjectContent(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel,\n      objectGroupName: string): Promise<SDK.RemoteObject.RemoteObject|{description: string, link: string}> {\n    const remoteObject = await this.tryQueryObjectContent(heapProfilerModel, objectGroupName);\n    return remoteObject || this.tryGetTooltipDescription() ||\n        heapProfilerModel.runtimeModel().createRemoteObjectFromPrimitiveValue(\n            i18nString(UIStrings.previewIsNotAvailable));\n  }\n\n  override async tryQueryObjectContent(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel,\n      objectGroupName: string): Promise<SDK.RemoteObject.RemoteObject|null> {\n    if (this.type === 'string') {\n      return heapProfilerModel.runtimeModel().createRemoteObjectFromPrimitiveValue(this.nameInternal);\n    }\n    return await heapProfilerModel.objectForSnapshotObjectId(\n        String(this.snapshotNodeId) as Protocol.HeapProfiler.HeapSnapshotObjectId, objectGroupName);\n  }\n\n  tryGetTooltipDescription(): {description: string, link: string}|undefined {\n    const baseLink = 'https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#';\n    switch (this.type) {\n      case 'code':\n        return {description: i18nString(UIStrings.compiledCodeSummary), link: baseLink + 'compiled-code'};\n      case 'concatenated string':\n        return {description: i18nString(UIStrings.concatenatedStringSummary), link: baseLink + 'concatenated-string'};\n      case 'sliced string':\n        return {description: i18nString(UIStrings.slicedStringSummary), link: baseLink + 'sliced-string'};\n    }\n    switch (this.type + ':' + this.nameInternal) {\n      case 'array:':  // If nameInternal is empty, then the object is shown as \"(internal array)[]\".\n        return {description: i18nString(UIStrings.internalArraySummary), link: baseLink + 'array'};\n      case 'array:(object elements)':\n        return {description: i18nString(UIStrings.objectElementsSummary), link: baseLink + 'array'};\n      case 'array:(object properties)':\n      case 'hidden:system / PropertyArray':\n        return {description: i18nString(UIStrings.objectPropertiesSummary), link: baseLink + 'array'};\n      case 'object:system / Context':\n        return {description: i18nString(UIStrings.contextSummary), link: baseLink + 'system-context'};\n      case 'object shape:system / DescriptorArray':\n        return {description: i18nString(UIStrings.descriptorArraySummary), link: baseLink + 'object-shape'};\n      case 'object shape:system / Map':\n        return {description: i18nString(UIStrings.mapSummary), link: baseLink + 'object-shape'};\n      case 'native:InternalNode':\n        return {description: i18nString(UIStrings.internalNodeSummary), link: baseLink + 'internal-node'};\n    }\n    return undefined;\n  }\n\n  async updateHasChildren(): Promise<void> {\n    const isEmpty = await this.provider().isEmpty();\n    this.setHasChildren(!isEmpty);\n  }\n\n  shortenWindowURL(fullName: string, hasObjectId: boolean): string {\n    const startPos = fullName.indexOf('/');\n    const endPos = hasObjectId ? fullName.indexOf('@') : fullName.length;\n    if (startPos === -1 || endPos === -1) {\n      return fullName;\n    }\n    const fullURL = fullName.substring(startPos + 1, endPos).trimLeft();\n    let url = Platform.StringUtilities.trimURL(fullURL);\n    if (url.length > 40) {\n      url = Platform.StringUtilities.trimMiddle(url, 40);\n    }\n    return fullName.substr(0, startPos + 2) + url + fullName.substr(endPos);\n  }\n\n  override populateContextMenu(\n      contextMenu: UI.ContextMenu.ContextMenu, dataDisplayDelegate: DataDisplayDelegate,\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null): void {\n    if (this.shallowSize !== 0) {\n      contextMenu.revealSection().appendItem(i18nString(UIStrings.revealInSummaryView), () => {\n        dataDisplayDelegate.showObject(String(this.snapshotNodeId), i18nString(UIStrings.summary));\n      }, {jslogContext: 'reveal-in-summary'});\n    }\n\n    if (this.referenceName) {\n      for (const match of this.referenceName.matchAll(/\\((?<objectName>[^@)]*) @(?<snapshotNodeId>\\d+)\\)/g)) {\n        const {objectName, snapshotNodeId} = (match.groups as {\n          objectName: string,\n          snapshotNodeId: string,\n        });\n        contextMenu.revealSection().appendItem(\n            i18nString(UIStrings.revealObjectSWithIdSInSummary, {PH1: objectName, PH2: snapshotNodeId}), () => {\n              dataDisplayDelegate.showObject(snapshotNodeId, i18nString(UIStrings.summary));\n            }, {jslogContext: 'reveal-in-summary'});\n      }\n    }\n\n    if (heapProfilerModel) {\n      contextMenu.revealSection().appendItem(i18nString(UIStrings.storeAsGlobalVariable), async () => {\n        const remoteObject = await this.tryQueryObjectContent((heapProfilerModel), '');\n        if (!remoteObject) {\n          Common.Console.Console.instance().error(i18nString(UIStrings.previewIsNotAvailable));\n        } else {\n          const consoleModel = heapProfilerModel.target().model(SDK.ConsoleModel.ConsoleModel);\n          await consoleModel?.saveToTempVariable(\n              UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext), remoteObject);\n        }\n      }, {jslogContext: 'store-as-global-variable'});\n    }\n  }\n}\n\nexport class HeapSnapshotObjectNode extends HeapSnapshotGenericObjectNode {\n  override referenceName: string;\n  readonly referenceType: string;\n  readonly edgeIndex: number;\n  readonly snapshot: HeapSnapshotProxy;\n  parentObjectNode: HeapSnapshotObjectNode|null;\n  readonly cycledWithAncestorGridNode: HeapSnapshotObjectNode|null;\n\n  constructor(\n      dataGrid: HeapSnapshotSortableDataGrid, snapshot: HeapSnapshotProxy,\n      edge: HeapSnapshotModel.HeapSnapshotModel.Edge, parentObjectNode: HeapSnapshotObjectNode|null) {\n    super(dataGrid, edge.node);\n    this.referenceName = edge.name;\n    this.referenceType = edge.type;\n    this.edgeIndex = edge.edgeIndex;\n    this.snapshot = snapshot;\n\n    this.parentObjectNode = parentObjectNode;\n    this.cycledWithAncestorGridNode = this.findAncestorWithSameSnapshotNodeId();\n    if (!this.cycledWithAncestorGridNode) {\n      void this.updateHasChildren();\n    }\n\n    const data = this.data;\n    data['count'] = '';\n    data['addedCount'] = '';\n    data['removedCount'] = '';\n    data['countDelta'] = '';\n    data['addedSize'] = '';\n    data['removedSize'] = '';\n    data['sizeDelta'] = '';\n  }\n\n  override retainersDataSource(): {\n    snapshot: HeapSnapshotProxy,\n    snapshotNodeIndex: number,\n    snapshotNodeId: number|undefined,\n  }|null {\n    return this.snapshotNodeIndex === undefined ?\n        null :\n        {snapshot: this.snapshot, snapshotNodeIndex: this.snapshotNodeIndex, snapshotNodeId: this.snapshotNodeId};\n  }\n\n  override createProvider(): HeapSnapshotProviderProxy {\n    if (this.snapshotNodeIndex === undefined) {\n      throw new Error('Cannot create a provider on a root node');\n    }\n    return this.snapshot.createEdgesProvider(this.snapshotNodeIndex);\n  }\n\n  findAncestorWithSameSnapshotNodeId(): HeapSnapshotObjectNode|null {\n    let ancestor: (HeapSnapshotObjectNode|null) = this.parentObjectNode;\n    while (ancestor) {\n      if (ancestor.snapshotNodeId === this.snapshotNodeId) {\n        return ancestor;\n      }\n      ancestor = ancestor.parentObjectNode;\n    }\n    return null;\n  }\n\n  override createChildNode(item: HeapSnapshotModel.HeapSnapshotModel.Node|HeapSnapshotModel.HeapSnapshotModel.Edge):\n      HeapSnapshotObjectNode {\n    return new HeapSnapshotObjectNode(\n        this.dataGridInternal, this.snapshot, (item as HeapSnapshotModel.HeapSnapshotModel.Edge), this);\n  }\n\n  override getHash(): number {\n    return this.edgeIndex;\n  }\n\n  override comparator(): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    const sortAscending = this.dataGridInternal.isSortOrderAscending();\n    const sortColumnId = this.dataGridInternal.sortColumnId();\n    switch (sortColumnId) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            '!edgeName', sortAscending, 'retainedSize', false);\n      case 'count':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('!edgeName', true, 'retainedSize', false);\n      case 'shallowSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, '!edgeName', true);\n      case 'retainedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            'retainedSize', sortAscending, '!edgeName', true);\n      case 'distance':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('distance', sortAscending, 'name', true);\n      default:\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('!edgeName', true, 'retainedSize', false);\n    }\n  }\n\n  override prefixObjectCell(div: Element): void {\n    let name: string = this.referenceName || '(empty)';\n    let nameClass = 'name';\n    switch (this.referenceType) {\n      case 'context':\n        nameClass = 'object-value-number';\n        break;\n      case 'internal':\n      case 'hidden':\n      case 'weak':\n        nameClass = 'object-value-null';\n        break;\n      case 'element':\n        name = `[${name}]`;\n        break;\n    }\n    if (this.cycledWithAncestorGridNode) {\n      div.classList.add('cycled-ancestor-node');\n    }\n    div.prepend(UI.Fragment.html`<span class=\"property-name ${nameClass}\">${name}</span>\n  <span class=\"grayed\">${this.edgeNodeSeparator()}</span>`);\n  }\n\n  edgeNodeSeparator(): string {\n    return '::';\n  }\n}\n\nexport class HeapSnapshotRetainingObjectNode extends HeapSnapshotObjectNode {\n  #ignored: boolean;\n  constructor(\n      dataGrid: HeapSnapshotSortableDataGrid, snapshot: HeapSnapshotProxy,\n      edge: HeapSnapshotModel.HeapSnapshotModel.Edge, parentRetainingObjectNode: HeapSnapshotRetainingObjectNode|null) {\n    super(dataGrid, snapshot, edge, parentRetainingObjectNode);\n    this.#ignored = edge.node.ignored;\n    if (this.#ignored) {\n      this.data['distance'] = i18nString(UIStrings.ignored);\n    }\n  }\n\n  override createProvider(): HeapSnapshotProviderProxy {\n    if (this.snapshotNodeIndex === undefined) {\n      throw new Error('Cannot create providers on root nodes');\n    }\n    return this.snapshot.createRetainingEdgesProvider(this.snapshotNodeIndex);\n  }\n\n  override createChildNode(item: HeapSnapshotModel.HeapSnapshotModel.Node|HeapSnapshotModel.HeapSnapshotModel.Edge):\n      HeapSnapshotRetainingObjectNode {\n    return new HeapSnapshotRetainingObjectNode(\n        this.dataGridInternal, this.snapshot, (item as HeapSnapshotModel.HeapSnapshotModel.Edge), this);\n  }\n\n  override edgeNodeSeparator(): string {\n    // TODO(l10n): improve description or clarify intention.\n    return i18nString(UIStrings.inElement);\n  }\n\n  override expand(): void {\n    this.expandRetainersChain(20);\n  }\n\n  override populateContextMenu(\n      contextMenu: UI.ContextMenu.ContextMenu, dataDisplayDelegate: DataDisplayDelegate,\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null): void {\n    super.populateContextMenu(contextMenu, dataDisplayDelegate, heapProfilerModel);\n\n    const snapshotNodeIndex = this.snapshotNodeIndex;\n    if (snapshotNodeIndex === undefined) {\n      return;\n    }\n\n    if (this.#ignored) {\n      contextMenu.revealSection().appendItem(i18nString(UIStrings.stopIgnoringThisRetainer), async () => {\n        await this.snapshot.unignoreNodeInRetainersView(snapshotNodeIndex);\n        await this.dataGridInternal.dataSourceChanged();\n      }, {jslogContext: 'stop-ignoring-this-retainer'});\n    } else {\n      contextMenu.revealSection().appendItem(i18nString(UIStrings.ignoreThisRetainer), async () => {\n        await this.snapshot.ignoreNodeInRetainersView(snapshotNodeIndex);\n        await this.dataGridInternal.dataSourceChanged();\n      }, {jslogContext: 'ignore-this-retainer'});\n    }\n  }\n\n  isReachable(): boolean {\n    return (this.distance ?? 0) < HeapSnapshotModel.HeapSnapshotModel.baseUnreachableDistance;\n  }\n\n  override prefixObjectCell(div: Element): void {\n    super.prefixObjectCell(div);\n    if (!this.isReachable()) {\n      div.classList.add('unreachable-ancestor-node');\n    }\n  }\n\n  expandRetainersChain(maxExpandLevels: number): void {\n    if (!this.populated) {\n      void this.once(HeapSnapshotGridNode.Events.PopulateComplete)\n          .then(() => this.expandRetainersChain(maxExpandLevels));\n      this.populate();\n      return;\n    }\n    super.expand();\n    if (--maxExpandLevels > 0 && this.children.length > 0) {\n      const retainer = (this.children[0] as HeapSnapshotRetainingObjectNode);\n      if ((retainer.distance || 0) > 1 && retainer.isReachable()) {\n        retainer.expandRetainersChain(maxExpandLevels);\n        return;\n      }\n    }\n    this.dataGridInternal.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.ExpandRetainersComplete);\n  }\n\n  override comparator(): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    const result = super.comparator();\n    if (result.fieldName1 === 'distance') {\n      result.fieldName1 = '!edgeDistance';\n    }\n    if (result.fieldName2 === 'distance') {\n      result.fieldName2 = '!edgeDistance';\n    }\n    return result;\n  }\n}\n\nexport class HeapSnapshotInstanceNode extends HeapSnapshotGenericObjectNode {\n  readonly baseSnapshotOrSnapshot: HeapSnapshotProxy;\n  readonly isDeletedNode: boolean;\n  constructor(\n      dataGrid: HeapSnapshotSortableDataGrid, snapshot: HeapSnapshotProxy,\n      node: HeapSnapshotModel.HeapSnapshotModel.Node, isDeletedNode: boolean) {\n    super(dataGrid, node);\n    this.baseSnapshotOrSnapshot = snapshot;\n    this.isDeletedNode = isDeletedNode;\n    void this.updateHasChildren();\n\n    const data = this.data;\n    data['count'] = '';\n    data['countDelta'] = '';\n    data['sizeDelta'] = '';\n    if (this.isDeletedNode) {\n      data['addedCount'] = '';\n      data['addedSize'] = '';\n      data['removedCount'] = '\\u2022';\n      data['removedSize'] = i18n.ByteUtilities.formatBytesToKb(this.shallowSize || 0);\n    } else {\n      data['addedCount'] = '\\u2022';\n      data['addedSize'] = i18n.ByteUtilities.formatBytesToKb(this.shallowSize || 0);\n      data['removedCount'] = '';\n      data['removedSize'] = '';\n    }\n  }\n\n  override retainersDataSource(): {\n    snapshot: HeapSnapshotProxy,\n    snapshotNodeIndex: number,\n    snapshotNodeId: number|undefined,\n  }|null {\n    return this.snapshotNodeIndex === undefined ? null : {\n      snapshot: this.baseSnapshotOrSnapshot,\n      snapshotNodeIndex: this.snapshotNodeIndex,\n      snapshotNodeId: this.snapshotNodeId,\n    };\n  }\n\n  override createProvider(): HeapSnapshotProviderProxy {\n    if (this.snapshotNodeIndex === undefined) {\n      throw new Error('Cannot create providers on root nodes');\n    }\n    return this.baseSnapshotOrSnapshot.createEdgesProvider(this.snapshotNodeIndex);\n  }\n\n  override createChildNode(item: HeapSnapshotModel.HeapSnapshotModel.Node|HeapSnapshotModel.HeapSnapshotModel.Edge):\n      HeapSnapshotObjectNode {\n    return new HeapSnapshotObjectNode(\n        this.dataGridInternal, this.baseSnapshotOrSnapshot, (item as HeapSnapshotModel.HeapSnapshotModel.Edge), null);\n  }\n\n  override getHash(): number {\n    if (this.snapshotNodeId === undefined) {\n      throw new Error('Cannot hash root nodes');\n    }\n    return this.snapshotNodeId;\n  }\n\n  override comparator(): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    const sortAscending = this.dataGridInternal.isSortOrderAscending();\n    const sortColumnId = this.dataGridInternal.sortColumnId();\n    switch (sortColumnId) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            '!edgeName', sortAscending, 'retainedSize', false);\n      case 'distance':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            'distance', sortAscending, 'retainedSize', false);\n      case 'count':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('!edgeName', true, 'retainedSize', false);\n      case 'addedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, '!edgeName', true);\n      case 'removedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, '!edgeName', true);\n      case 'shallowSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, '!edgeName', true);\n      case 'retainedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            'retainedSize', sortAscending, '!edgeName', true);\n      default:\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('!edgeName', true, 'retainedSize', false);\n    }\n  }\n}\n\nexport class HeapSnapshotConstructorNode extends HeapSnapshotGridNode {\n  readonly nameInternal: string;\n  readonly nodeFilter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter;\n  readonly distance: number;\n  readonly count: number;\n  readonly shallowSize: number;\n  readonly retainedSize: number;\n  readonly classKey: string;\n\n  constructor(\n      dataGrid: HeapSnapshotConstructorsDataGrid, classKey: string,\n      aggregate: HeapSnapshotModel.HeapSnapshotModel.Aggregate,\n      nodeFilter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter) {\n    super(dataGrid, aggregate.count > 0);\n    this.nameInternal = aggregate.name;\n    this.nodeFilter = nodeFilter;\n    this.distance = aggregate.distance;\n    this.count = aggregate.count;\n    this.shallowSize = aggregate.self;\n    this.retainedSize = aggregate.maxRet;\n    this.classKey = classKey;\n\n    const snapshot = (dataGrid.snapshot as HeapSnapshotProxy);\n    const retainedSizePercent = this.retainedSize / snapshot.totalSize * 100.0;\n    const shallowSizePercent = this.shallowSize / snapshot.totalSize * 100.0;\n    this.data = {\n      object: this.nameInternal,\n      count: Platform.NumberUtilities.withThousandsSeparator(this.count),\n      distance: this.toUIDistance(this.distance),\n      shallowSize: i18n.ByteUtilities.formatBytesToKb(this.shallowSize),\n      retainedSize: i18n.ByteUtilities.formatBytesToKb(this.retainedSize),\n      'shallowSize-percent': this.toPercentString(shallowSizePercent),\n      'retainedSize-percent': this.toPercentString(retainedSizePercent),\n    };\n  }\n\n  override get name(): string|undefined {\n    return this.nameInternal;\n  }\n\n  override createProvider(): HeapSnapshotProviderProxy {\n    return (this.dataGridInternal.snapshot as HeapSnapshotProxy)\n        .createNodesProviderForClass(this.classKey, this.nodeFilter);\n  }\n\n  async populateNodeBySnapshotObjectId(snapshotObjectId: number): Promise<HeapSnapshotGridNode[]> {\n    this.dataGridInternal.resetNameFilter();\n    await this.expandWithoutPopulate();\n\n    const nodePosition = await this.provider().nodePosition(snapshotObjectId);\n    if (nodePosition === -1) {\n      this.collapse();\n      return [];\n    }\n\n    await this.populateChildren(nodePosition, null);\n\n    const node = (this.childForPosition(nodePosition));\n    return node ? [this, node] : [];\n  }\n\n  filteredOut(filterValue: string): boolean {\n    return this.nameInternal.toLowerCase().indexOf(filterValue) === -1;\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    const cell = columnId === 'object' ? super.createCell(columnId) : this.createValueCell(columnId);\n    if (columnId === 'object' && this.count > 1) {\n      cell.appendChild(UI.Fragment.html`<span class=\"objects-count\">×${this.count}</span>`);\n    }\n    return cell;\n  }\n\n  override createChildNode(item: HeapSnapshotModel.HeapSnapshotModel.Node|HeapSnapshotModel.HeapSnapshotModel.Edge):\n      HeapSnapshotInstanceNode {\n    return new HeapSnapshotInstanceNode(\n        this.dataGridInternal, (this.dataGridInternal.snapshot as HeapSnapshotProxy),\n        (item as HeapSnapshotModel.HeapSnapshotModel.Node), false);\n  }\n\n  override comparator(): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    const sortAscending = this.dataGridInternal.isSortOrderAscending();\n    const sortColumnId = this.dataGridInternal.sortColumnId();\n    switch (sortColumnId) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'id', true);\n      case 'distance':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            'distance', sortAscending, 'retainedSize', false);\n      case 'shallowSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, 'id', true);\n      case 'retainedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('retainedSize', sortAscending, 'id', true);\n      default:\n        throw new Error(`Invalid sort column id ${sortColumnId}`);\n    }\n  }\n}\n\nexport class HeapSnapshotDiffNodesProvider implements ChildrenProvider {\n  addedNodesProvider: HeapSnapshotProviderProxy;\n  deletedNodesProvider: HeapSnapshotProviderProxy;\n  addedCount: number;\n  removedCount: number;\n  constructor(\n      addedNodesProvider: HeapSnapshotProviderProxy, deletedNodesProvider: HeapSnapshotProviderProxy,\n      addedCount: number, removedCount: number) {\n    this.addedNodesProvider = addedNodesProvider;\n    this.deletedNodesProvider = deletedNodesProvider;\n    this.addedCount = addedCount;\n    this.removedCount = removedCount;\n  }\n\n  dispose(): void {\n    this.addedNodesProvider.dispose();\n    this.deletedNodesProvider.dispose();\n  }\n\n  nodePosition(_snapshotObjectId: number): Promise<number> {\n    throw new Error('Unreachable');\n  }\n\n  isEmpty(): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  async serializeItemsRange(beginPosition: number, endPosition: number):\n      Promise<HeapSnapshotModel.HeapSnapshotModel.ItemsRange> {\n    let itemsRange;\n    let addedItems;\n    if (beginPosition < this.addedCount) {\n      itemsRange = await this.addedNodesProvider.serializeItemsRange(beginPosition, endPosition);\n\n      for (const item of itemsRange.items) {\n        item.isAddedNotRemoved = true;\n      }\n\n      if (itemsRange.endPosition >= endPosition) {\n        itemsRange.totalLength = this.addedCount + this.removedCount;\n        return itemsRange;\n      }\n\n      addedItems = itemsRange;\n      itemsRange = await this.deletedNodesProvider.serializeItemsRange(0, endPosition - itemsRange.endPosition);\n    } else {\n      addedItems = new HeapSnapshotModel.HeapSnapshotModel.ItemsRange(0, 0, 0, []);\n      itemsRange = await this.deletedNodesProvider.serializeItemsRange(\n          beginPosition - this.addedCount, endPosition - this.addedCount);\n    }\n\n    if (!addedItems.items.length) {\n      addedItems.startPosition = this.addedCount + itemsRange.startPosition;\n    }\n    for (const item of itemsRange.items) {\n      item.isAddedNotRemoved = false;\n    }\n    addedItems.items.push(...itemsRange.items);\n    addedItems.endPosition = this.addedCount + itemsRange.endPosition;\n    addedItems.totalLength = this.addedCount + this.removedCount;\n    return addedItems;\n  }\n\n  async sortAndRewind(comparator: HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig): Promise<void> {\n    await this.addedNodesProvider.sortAndRewind(comparator);\n    await this.deletedNodesProvider.sortAndRewind(comparator);\n  }\n}\n\nexport class HeapSnapshotDiffNode extends HeapSnapshotGridNode {\n  readonly nameInternal: string;\n  readonly addedCount: number;\n  readonly removedCount: number;\n  readonly countDelta: number;\n  readonly addedSize: number;\n  readonly removedSize: number;\n  readonly sizeDelta: number;\n  readonly deletedIndexes: number[];\n  readonly classKey: string;\n\n  constructor(\n      dataGrid: HeapSnapshotDiffDataGrid, classKey: string,\n      diffForClass: HeapSnapshotModel.HeapSnapshotModel.DiffForClass) {\n    super(dataGrid, true);\n    this.nameInternal = diffForClass.name;\n    this.addedCount = diffForClass.addedCount;\n    this.removedCount = diffForClass.removedCount;\n    this.countDelta = diffForClass.countDelta;\n    this.addedSize = diffForClass.addedSize;\n    this.removedSize = diffForClass.removedSize;\n    this.sizeDelta = diffForClass.sizeDelta;\n    this.deletedIndexes = diffForClass.deletedIndexes;\n    this.classKey = classKey;\n    this.data = {\n      object: this.nameInternal,\n      addedCount: Platform.NumberUtilities.withThousandsSeparator(this.addedCount),\n      removedCount: Platform.NumberUtilities.withThousandsSeparator(this.removedCount),\n      countDelta: this.signForDelta(this.countDelta) +\n          Platform.NumberUtilities.withThousandsSeparator(Math.abs(this.countDelta)),\n      addedSize: i18n.ByteUtilities.bytesToString(this.addedSize),\n      removedSize: i18n.ByteUtilities.bytesToString(this.removedSize),\n      sizeDelta: this.signForDelta(this.sizeDelta) + i18n.ByteUtilities.bytesToString(Math.abs(this.sizeDelta)),\n    };\n  }\n\n  override get name(): string|undefined {\n    return this.nameInternal;\n  }\n\n  override createProvider(): HeapSnapshotDiffNodesProvider {\n    const tree = this.dataGridInternal as HeapSnapshotDiffDataGrid;\n    if (tree.snapshot === null || tree.baseSnapshot?.uid === undefined) {\n      throw new Error('Data sources have not been set correctly');\n    }\n    const addedNodesProvider = tree.snapshot.createAddedNodesProvider(tree.baseSnapshot.uid, this.classKey);\n    const deletedNodesProvider = tree.baseSnapshot.createDeletedNodesProvider(this.deletedIndexes);\n    if (!addedNodesProvider || !deletedNodesProvider) {\n      throw new Error('Failed to create node providers');\n    }\n    return new HeapSnapshotDiffNodesProvider(\n        addedNodesProvider, deletedNodesProvider, this.addedCount, this.removedCount);\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    const cell = super.createCell(columnId);\n    if (columnId !== 'object') {\n      cell.classList.add('numeric-column');\n    }\n    return cell;\n  }\n\n  override createChildNode(item: HeapSnapshotModel.HeapSnapshotModel.Node|HeapSnapshotModel.HeapSnapshotModel.Edge):\n      HeapSnapshotInstanceNode {\n    const dataGrid = (this.dataGridInternal as HeapSnapshotDiffDataGrid);\n    if (item.isAddedNotRemoved) {\n      if (dataGrid.snapshot === null) {\n        throw new Error('Data sources have not been set correctly');\n      }\n      return new HeapSnapshotInstanceNode(\n          this.dataGridInternal, dataGrid.snapshot, (item as HeapSnapshotModel.HeapSnapshotModel.Node), false);\n    }\n    if (dataGrid.baseSnapshot === undefined) {\n      throw new Error('Data sources have not been set correctly');\n    }\n    return new HeapSnapshotInstanceNode(\n        this.dataGridInternal, dataGrid.baseSnapshot, (item as HeapSnapshotModel.HeapSnapshotModel.Node), true);\n  }\n\n  override comparator(): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    const sortAscending = this.dataGridInternal.isSortOrderAscending();\n    const sortColumnId = this.dataGridInternal.sortColumnId();\n    switch (sortColumnId) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'id', true);\n      case 'addedCount':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', true, 'id', true);\n      case 'removedCount':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', true, 'id', true);\n      case 'countDelta':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', true, 'id', true);\n      case 'addedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, 'id', true);\n      case 'removedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, 'id', true);\n      case 'sizeDelta':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, 'id', true);\n      default:\n        throw new Error(`Invalid sort column ${sortColumnId}`);\n    }\n  }\n\n  filteredOut(filterValue: string): boolean {\n    return this.nameInternal.toLowerCase().indexOf(filterValue) === -1;\n  }\n\n  signForDelta(delta: number): ''|'+'|'−' {\n    if (delta === 0) {\n      return '';\n    }\n    if (delta > 0) {\n      return '+';\n    }\n    return '\\u2212';  // Math minus sign, same width as plus.\n  }\n}\n\nexport class AllocationGridNode extends HeapSnapshotGridNode {\n  override populated: boolean;\n  readonly allocationNode: HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode;\n\n  constructor(dataGrid: AllocationDataGrid, data: HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode) {\n    super(dataGrid, data.hasChildren);\n    this.populated = false;\n    this.allocationNode = data;\n    this.data = {\n      liveCount: Platform.NumberUtilities.withThousandsSeparator(data.liveCount),\n      count: Platform.NumberUtilities.withThousandsSeparator(data.count),\n      liveSize: i18n.ByteUtilities.bytesToString(data.liveSize),\n      size: i18n.ByteUtilities.bytesToString(data.size),\n      name: data.name,\n    };\n  }\n\n  override populate(): void {\n    if (this.populated) {\n      return;\n    }\n    void this.doPopulate();\n  }\n\n  async doPopulate(): Promise<void> {\n    this.populated = true;\n\n    const callers =\n        await (this.dataGridInternal.snapshot as HeapSnapshotProxy).allocationNodeCallers(this.allocationNode.id);\n\n    const callersChain = callers.nodesWithSingleCaller;\n    let parentNode: AllocationGridNode = this;\n    const dataGrid = (this.dataGridInternal as AllocationDataGrid);\n    for (const caller of callersChain) {\n      const child = new AllocationGridNode(dataGrid, caller);\n      dataGrid.appendNode(parentNode, child);\n      parentNode = child;\n      parentNode.populated = true;\n      if (this.expanded) {\n        parentNode.expand();\n      }\n    }\n\n    const callersBranch = callers.branchingCallers;\n    callersBranch.sort((this.dataGridInternal as AllocationDataGrid).createComparator());\n    for (const caller of callersBranch) {\n      dataGrid.appendNode(parentNode, new AllocationGridNode(dataGrid, caller));\n    }\n    dataGrid.updateVisibleNodes(true);\n  }\n\n  override expand(): void {\n    super.expand();\n    if (this.children.length === 1) {\n      this.children[0].expand();\n    }\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    if (columnId !== 'name') {\n      return this.createValueCell(columnId);\n    }\n\n    const cell = super.createCell(columnId);\n    const allocationNode = this.allocationNode;\n    const heapProfilerModel = this.dataGridInternal.heapProfilerModel();\n    if (allocationNode.scriptId) {\n      const linkifier = (this.dataGridInternal as AllocationDataGrid).linkifier;\n      const urlElement = linkifier.linkifyScriptLocation(\n          heapProfilerModel ? heapProfilerModel.target() : null,\n          String(allocationNode.scriptId) as Protocol.Runtime.ScriptId,\n          allocationNode.scriptName as Platform.DevToolsPath.UrlString, allocationNode.line - 1, {\n            columnNumber: allocationNode.column - 1,\n            inlineFrameIndex: 0,\n            className: 'profile-node-file',\n          });\n      urlElement.style.maxWidth = '75%';\n      cell.insertBefore(urlElement, cell.firstChild);\n    }\n    return cell;\n  }\n\n  allocationNodeId(): number {\n    return this.allocationNode.id;\n  }\n}\n", "// Copyright 2011 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\n\nimport type {ChildrenProvider} from './ChildrenProvider.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in Heap Snapshot Proxy of a profiler tool\n   * @example {functionName} PH1\n   */\n  anErrorOccurredWhenACallToMethod: 'An error occurred when a call to method \\'\\'{PH1}\\'\\' was requested',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapSnapshotProxy.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class HeapSnapshotWorkerProxy extends Common.ObjectWrapper.ObjectWrapper<HeapSnapshotWorkerProxy.EventTypes> {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  readonly eventHandler: (arg0: string, arg1: any) => void;\n  nextObjectId: number;\n  nextCallId: number;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callbacks: Map<number, (arg0: any) => void>;\n  readonly previousCallbacks: Set<number>;\n  readonly worker: Common.Worker.WorkerWrapper;\n  interval?: number;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(eventHandler: (arg0: string, arg1: any) => void) {\n    super();\n    this.eventHandler = eventHandler;\n    this.nextObjectId = 1;\n    this.nextCallId = 1;\n    this.callbacks = new Map();\n    this.previousCallbacks = new Set();\n    this.worker = Common.Worker.WorkerWrapper.fromURL(\n        new URL('../../entrypoints/heap_snapshot_worker/heap_snapshot_worker-entrypoint.js', import.meta.url));\n    this.worker.onmessage = this.messageReceived.bind(this);\n  }\n\n  createLoader(profileUid: number, snapshotReceivedCallback: (arg0: HeapSnapshotProxy) => void):\n      HeapSnapshotLoaderProxy {\n    const objectId = this.nextObjectId++;\n    const proxy = new HeapSnapshotLoaderProxy(this, objectId, profileUid, snapshotReceivedCallback);\n    this.postMessage({\n      callId: this.nextCallId++,\n      disposition: 'createLoader',\n      objectId,\n    });\n    return proxy;\n  }\n\n  dispose(): void {\n    this.worker.terminate();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  disposeObject(objectId: number): void {\n    this.postMessage({callId: this.nextCallId++, disposition: 'dispose', objectId});\n  }\n\n  evaluateForTest(script: string, callback: (...arg0: any[]) => void): void {\n    const callId = this.nextCallId++;\n    this.callbacks.set(callId, callback);\n    this.postMessage({callId, disposition: 'evaluateForTest', source: script});\n  }\n\n  callFactoryMethod<T extends Object>(\n      callback: null, objectId: string, methodName: string, proxyConstructor: new(...arg1: any[]) => T,\n      transfer: Transferable[], ...methodArguments: any[]): T;\n  callFactoryMethod<T extends Object>(\n      callback: ((...arg0: any[]) => void), objectId: string, methodName: string,\n      proxyConstructor: new(...arg1: any[]) => T, transfer: Transferable[], ...methodArguments: any[]): null;\n  callFactoryMethod<T extends Object>(\n      callback: ((...arg0: any[]) => void)|null, objectId: string, methodName: string,\n      proxyConstructor: new(...arg1: any[]) => T, transfer: Transferable[], ...methodArguments: any[]): T|null {\n    const callId = this.nextCallId++;\n    const newObjectId = this.nextObjectId++;\n\n    if (callback) {\n      this.callbacks.set(callId, remoteResult => {\n        callback(remoteResult ? new proxyConstructor(this, newObjectId) : null);\n      });\n      this.postMessage(\n          {\n            callId,\n            disposition: 'factory',\n            objectId,\n            methodName,\n            methodArguments,\n            newObjectId,\n          },\n          transfer);\n      return null;\n    }\n    this.postMessage(\n        {\n          callId,\n          disposition: 'factory',\n          objectId,\n          methodName,\n          methodArguments,\n          newObjectId,\n        },\n        transfer);\n    return new proxyConstructor(this, newObjectId);\n  }\n\n  callMethod(callback: (...arg0: any[]) => void, objectId: string, methodName: string, ...methodArguments: any[]):\n      void {\n    const callId = this.nextCallId++;\n    if (callback) {\n      this.callbacks.set(callId, callback);\n    }\n    this.postMessage({\n      callId,\n      disposition: 'method',\n      objectId,\n      methodName,\n      methodArguments,\n    });\n  }\n\n  startCheckingForLongRunningCalls(): void {\n    if (this.interval) {\n      return;\n    }\n    this.checkLongRunningCalls();\n    this.interval = window.setInterval(this.checkLongRunningCalls.bind(this), 300);\n  }\n\n  checkLongRunningCalls(): void {\n    for (const callId of this.previousCallbacks) {\n      if (!this.callbacks.has(callId)) {\n        this.previousCallbacks.delete(callId);\n      }\n    }\n    const hasLongRunningCalls = Boolean(this.previousCallbacks.size);\n    this.dispatchEventToListeners(HeapSnapshotWorkerProxy.Events.WAIT, hasLongRunningCalls);\n    for (const callId of this.callbacks.keys()) {\n      this.previousCallbacks.add(callId);\n    }\n  }\n\n  setupForSecondaryInit(port: MessagePort): Promise<void> {\n    const callId = this.nextCallId++;\n    const done = new Promise<void>(resolve => {\n      this.callbacks.set(callId, resolve);\n    });\n    this.postMessage(\n        {\n          callId,\n          disposition: 'setupForSecondaryInit',\n          objectId: this.nextObjectId++,\n        },\n        [port]);\n    return done;\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  messageReceived(event: MessageEvent<any>): void {\n    const data = event.data;\n    if (data.eventName) {\n      if (this.eventHandler) {\n        this.eventHandler(data.eventName, data.data);\n      }\n      return;\n    }\n    if (data.error) {\n      if (data.errorMethodName) {\n        Common.Console.Console.instance().error(\n            i18nString(UIStrings.anErrorOccurredWhenACallToMethod, {PH1: data.errorMethodName}));\n      }\n      Common.Console.Console.instance().error(data['errorCallStack']);\n      this.callbacks.delete(data.callId);\n      return;\n    }\n    const callback = this.callbacks.get(data.callId);\n    if (!callback) {\n      return;\n    }\n    this.callbacks.delete(data.callId);\n    callback(data.result);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  postMessage(message: any, transfer?: Transferable[]): void {\n    this.worker.postMessage(message, transfer);\n  }\n}\n\nexport namespace HeapSnapshotWorkerProxy {\n  export const enum Events {\n    WAIT = 'Wait',\n  }\n\n  export interface EventTypes {\n    [Events.WAIT]: boolean;\n  }\n}\n\nexport class HeapSnapshotProxyObject {\n  readonly worker: HeapSnapshotWorkerProxy;\n  readonly objectId: number;\n  constructor(worker: HeapSnapshotWorkerProxy, objectId: number) {\n    this.worker = worker;\n    this.objectId = objectId;\n  }\n\n  dispose(): void {\n    this.worker.disposeObject(this.objectId);\n  }\n\n  callFactoryMethod<T extends Object>(methodName: string, proxyConstructor: new(...arg1: any[]) => T, ...args: any[]):\n      T {\n    return this.worker.callFactoryMethod(null, String(this.objectId), methodName, proxyConstructor, [], ...args);\n  }\n\n  callFactoryMethodPromise<T extends Object>(\n      methodName: string, proxyConstructor: new(...arg1: any[]) => T, transfer: Transferable[],\n      ...args: any[]): Promise<T> {\n    return new Promise(\n        resolve => this.worker.callFactoryMethod(\n            resolve, String(this.objectId), methodName, proxyConstructor, transfer, ...args));\n  }\n\n  callMethodPromise<T>(methodName: string, ...args: any[]): Promise<T> {\n    return new Promise(resolve => this.worker.callMethod(resolve, String(this.objectId), methodName, ...args));\n  }\n}\n\nexport class HeapSnapshotLoaderProxy extends HeapSnapshotProxyObject implements Common.StringOutputStream.OutputStream {\n  readonly profileUid: number;\n  readonly snapshotReceivedCallback: (arg0: HeapSnapshotProxy) => void;\n  constructor(\n      worker: HeapSnapshotWorkerProxy, objectId: number, profileUid: number,\n      snapshotReceivedCallback: (arg0: HeapSnapshotProxy) => void) {\n    super(worker, objectId);\n    this.profileUid = profileUid;\n    this.snapshotReceivedCallback = snapshotReceivedCallback;\n  }\n\n  async write(chunk: string): Promise<void> {\n    await this.callMethodPromise('write', chunk);\n  }\n\n  async close(): Promise<void> {\n    await this.callMethodPromise('close');\n    const secondWorker = new HeapSnapshotWorkerProxy(() => {});\n    const channel = new MessageChannel();\n    await secondWorker.setupForSecondaryInit(channel.port2);\n    const snapshotProxy = await this.callFactoryMethodPromise('buildSnapshot', HeapSnapshotProxy, [channel.port1]);\n    secondWorker.dispose();\n    this.dispose();\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // @ts-expect-error\n    snapshotProxy.setProfileUid(this.profileUid);\n    await snapshotProxy.updateStaticData();\n    this.snapshotReceivedCallback(snapshotProxy);\n  }\n}\n\nexport class HeapSnapshotProxy extends HeapSnapshotProxyObject {\n  staticData: HeapSnapshotModel.HeapSnapshotModel.StaticData|null;\n  profileUid?: string;\n\n  constructor(worker: HeapSnapshotWorkerProxy, objectId: number) {\n    super(worker, objectId);\n    this.staticData = null;\n  }\n\n  search(\n      searchConfig: HeapSnapshotModel.HeapSnapshotModel.SearchConfig,\n      filter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter): Promise<number[]> {\n    return this.callMethodPromise('search', searchConfig, filter);\n  }\n\n  interfaceDefinitions(): Promise<string> {\n    return this.callMethodPromise('interfaceDefinitions');\n  }\n\n  aggregatesWithFilter(filter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter):\n      Promise<Record<string, HeapSnapshotModel.HeapSnapshotModel.Aggregate>> {\n    return this.callMethodPromise('aggregatesWithFilter', filter);\n  }\n\n  aggregatesForDiff(interfaceDefinitions: string):\n      Promise<Record<string, HeapSnapshotModel.HeapSnapshotModel.AggregateForDiff>> {\n    return this.callMethodPromise('aggregatesForDiff', interfaceDefinitions);\n  }\n\n  calculateSnapshotDiff(\n      baseSnapshotId: string,\n      baseSnapshotAggregates: Record<string, HeapSnapshotModel.HeapSnapshotModel.AggregateForDiff>,\n      ): Promise<Record<string, HeapSnapshotModel.HeapSnapshotModel.Diff>> {\n    return this.callMethodPromise('calculateSnapshotDiff', baseSnapshotId, baseSnapshotAggregates);\n  }\n\n  nodeClassKey(snapshotObjectId: number): Promise<string|null> {\n    return this.callMethodPromise('nodeClassKey', snapshotObjectId);\n  }\n\n  createEdgesProvider(nodeIndex: number): HeapSnapshotProviderProxy {\n    return this.callFactoryMethod('createEdgesProvider', HeapSnapshotProviderProxy, nodeIndex);\n  }\n\n  createRetainingEdgesProvider(nodeIndex: number): HeapSnapshotProviderProxy {\n    return this.callFactoryMethod('createRetainingEdgesProvider', HeapSnapshotProviderProxy, nodeIndex);\n  }\n\n  createAddedNodesProvider(baseSnapshotId: string, classKey: string): HeapSnapshotProviderProxy {\n    return this.callFactoryMethod('createAddedNodesProvider', HeapSnapshotProviderProxy, baseSnapshotId, classKey);\n  }\n\n  createDeletedNodesProvider(nodeIndexes: number[]): HeapSnapshotProviderProxy {\n    return this.callFactoryMethod('createDeletedNodesProvider', HeapSnapshotProviderProxy, nodeIndexes);\n  }\n\n  createNodesProvider(filter: (...args: any[]) => boolean): HeapSnapshotProviderProxy {\n    return this.callFactoryMethod('createNodesProvider', HeapSnapshotProviderProxy, filter);\n  }\n\n  createNodesProviderForClass(classKey: string, nodeFilter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter):\n      HeapSnapshotProviderProxy {\n    return this.callFactoryMethod('createNodesProviderForClass', HeapSnapshotProviderProxy, classKey, nodeFilter);\n  }\n\n  allocationTracesTops(): Promise<HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode[]> {\n    return this.callMethodPromise('allocationTracesTops');\n  }\n\n  allocationNodeCallers(nodeId: number): Promise<HeapSnapshotModel.HeapSnapshotModel.AllocationNodeCallers> {\n    return this.callMethodPromise('allocationNodeCallers', nodeId);\n  }\n\n  allocationStack(nodeIndex: number): Promise<HeapSnapshotModel.HeapSnapshotModel.AllocationStackFrame[]|null> {\n    return this.callMethodPromise('allocationStack', nodeIndex);\n  }\n\n  override dispose(): void {\n    throw new Error('Should never be called');\n  }\n\n  get nodeCount(): number {\n    if (!this.staticData) {\n      return 0;\n    }\n    return this.staticData.nodeCount;\n  }\n\n  get rootNodeIndex(): number {\n    if (!this.staticData) {\n      return 0;\n    }\n    return this.staticData.rootNodeIndex;\n  }\n\n  async updateStaticData(): Promise<void> {\n    this.staticData = await this.callMethodPromise('updateStaticData');\n  }\n\n  getStatistics(): Promise<HeapSnapshotModel.HeapSnapshotModel.Statistics> {\n    return this.callMethodPromise('getStatistics');\n  }\n\n  getLocation(nodeIndex: number): Promise<HeapSnapshotModel.HeapSnapshotModel.Location|null> {\n    return this.callMethodPromise('getLocation', nodeIndex);\n  }\n\n  getSamples(): Promise<HeapSnapshotModel.HeapSnapshotModel.Samples|null> {\n    return this.callMethodPromise('getSamples');\n  }\n\n  ignoreNodeInRetainersView(nodeIndex: number): Promise<void> {\n    return this.callMethodPromise('ignoreNodeInRetainersView', nodeIndex);\n  }\n\n  unignoreNodeInRetainersView(nodeIndex: number): Promise<void> {\n    return this.callMethodPromise('unignoreNodeInRetainersView', nodeIndex);\n  }\n\n  unignoreAllNodesInRetainersView(): Promise<void> {\n    return this.callMethodPromise('unignoreAllNodesInRetainersView');\n  }\n\n  areNodesIgnoredInRetainersView(): Promise<boolean> {\n    return this.callMethodPromise('areNodesIgnoredInRetainersView');\n  }\n\n  get totalSize(): number {\n    if (!this.staticData) {\n      return 0;\n    }\n    return this.staticData.totalSize;\n  }\n\n  get uid(): string|undefined {\n    return this.profileUid;\n  }\n\n  setProfileUid(profileUid: string): void {\n    this.profileUid = profileUid;\n  }\n\n  maxJSObjectId(): number {\n    if (!this.staticData) {\n      return 0;\n    }\n    return this.staticData.maxJSObjectId;\n  }\n}\n\nexport class HeapSnapshotProviderProxy extends HeapSnapshotProxyObject implements ChildrenProvider {\n  nodePosition(snapshotObjectId: number): Promise<number> {\n    return this.callMethodPromise('nodePosition', snapshotObjectId);\n  }\n\n  isEmpty(): Promise<boolean> {\n    return this.callMethodPromise('isEmpty');\n  }\n\n  serializeItemsRange(startPosition: number, endPosition: number):\n      Promise<HeapSnapshotModel.HeapSnapshotModel.ItemsRange> {\n    return this.callMethodPromise('serializeItemsRange', startPosition, endPosition);\n  }\n\n  async sortAndRewind(comparator: HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig): Promise<void> {\n    await this.callMethodPromise('sortAndRewind', comparator);\n  }\n}\n", "// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport const UIStrings = {\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane\n   */\n  buildingEdgeIndexes: 'Building edge indexes…',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane\n   */\n  buildingRetainers: 'Building retainers…',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane\n   */\n  propagatingDomState: 'Propagating DOM state…',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane. Flag here\n   * refers to the programming concept for a piece of binary data (yes/no).\n   */\n  calculatingNodeFlags: 'Calculating node flags…',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane\n   */\n  calculatingDistances: 'Calculating distances…',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane\n   */\n  calculatingShallowSizes: 'Calculating shallow sizes…',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane\n   */\n  calculatingRetainedSizes: 'Calculating retained sizes…',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane\n   */\n  buildingDominatedNodes: 'Building dominated nodes…',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane.\n   * During this step, names are assigned to objects in the heap snapshot.\n   */\n  calculatingObjectNames: 'Calculating object names…',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane\n   */\n  calculatingStatistics: 'Calculating statistics…',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane\n   */\n  calculatingSamples: 'Calculating samples…',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane\n   */\n  buildingLocations: 'Building locations…',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane\n   */\n  finishedProcessing: 'Finished processing.',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane\n   */\n  buildingAllocationStatistics: 'Building allocation statistics…',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane\n   */\n  done: 'Done',\n  /**\n   * @description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n   */\n  processingSnapshot: 'Processing snapshot…',\n  /**\n   * @description Text to indicate the status of a heap snapshot in the Performance Pane\n   */\n  parsingStrings: 'Parsing strings…',\n  /**\n   * @description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n   */\n  loadingSnapshotInfo: 'Loading snapshot info…',\n  /**\n   * @description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n   * @example {38} PH1\n   */\n  loadingNodesD: 'Loading nodes… {PH1}%',\n  /**\n   * @description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n   * @example {30} PH1\n   */\n  loadingEdgesD: 'Loading edges… {PH1}%',\n  /**\n   * @description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n   * @example {30} PH1\n   */\n  loadingAllocationTracesD: 'Loading allocation traces… {PH1}%',\n  /**\n   * @description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n   */\n  loadingSamples: 'Loading samples…',\n  /**\n   * @description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n   */\n  loadingLocations: 'Loading locations…',\n  /**\n   * @description Text in Heap Snapshot Loader of the Memory panel when taking a heap snapshot\n   */\n  loadingStrings: 'Loading strings…',\n} as const;\n", "// Copyright 2019 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport '../../ui/legacy/legacy.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport liveHeapProfileStyles from './liveHeapProfile.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Text for a heap profile type\n   */\n  jsHeap: 'JS Heap',\n  /**\n   * @description Text in Live Heap Profile View of a profiler tool\n   */\n  allocatedJsHeapSizeCurrentlyIn: 'Allocated JS heap size currently in use',\n  /**\n   * @description Text in Live Heap Profile View of a profiler tool\n   */\n  vms: 'VMs',\n  /**\n   * @description Text in Live Heap Profile View of a profiler tool\n   */\n  numberOfVmsSharingTheSameScript: 'Number of VMs sharing the same script source',\n  /**\n   * @description Text in Live Heap Profile View of a profiler tool\n   */\n  scriptUrl: 'Script URL',\n  /**\n   * @description Text in Live Heap Profile View of a profiler tool\n   */\n  urlOfTheScriptSource: 'URL of the script source',\n  /**\n   * @description Data grid name for Heap Profile data grids\n   */\n  heapProfile: 'Heap Profile',\n  /**\n   * @description Text in Live Heap Profile View of a profiler tool\n   * @example {1} PH1\n   */\n  anonymousScriptS: '(Anonymous Script {PH1})',\n  /**\n   * @description A unit\n   */\n  kb: 'kB',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/LiveHeapProfileView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet liveHeapProfileViewInstance: LiveHeapProfileView;\nexport class LiveHeapProfileView extends UI.Widget.VBox {\n  readonly gridNodeByUrl: Map<string, GridNode>;\n  setting: Common.Settings.Setting<boolean>;\n  readonly toggleRecordAction: UI.ActionRegistration.Action;\n  readonly toggleRecordButton: UI.Toolbar.ToolbarToggle;\n  readonly startWithReloadButton: UI.Toolbar.ToolbarButton|undefined;\n  readonly dataGrid: DataGrid.SortableDataGrid.SortableDataGrid<GridNode>;\n  currentPollId: number;\n\n  private constructor() {\n    super({useShadowDom: true});\n    this.gridNodeByUrl = new Map();\n    this.registerRequiredCSS(liveHeapProfileStyles);\n\n    this.setting = Common.Settings.Settings.instance().moduleSetting('memory-live-heap-profile');\n    const toolbar = this.contentElement.createChild('devtools-toolbar', 'live-heap-profile-toolbar');\n    this.toggleRecordAction =\n        UI.ActionRegistry.ActionRegistry.instance().getAction('live-heap-profile.toggle-recording');\n    this.toggleRecordButton =\n        (UI.Toolbar.Toolbar.createActionButton(this.toggleRecordAction) as UI.Toolbar.ToolbarToggle);\n    this.toggleRecordButton.setToggled(this.setting.get());\n    toolbar.appendToolbarItem(this.toggleRecordButton);\n\n    const mainTarget = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    if (mainTarget?.model(SDK.ResourceTreeModel.ResourceTreeModel)) {\n      const startWithReloadAction =\n          UI.ActionRegistry.ActionRegistry.instance().getAction('live-heap-profile.start-with-reload');\n      this.startWithReloadButton = UI.Toolbar.Toolbar.createActionButton(startWithReloadAction);\n      toolbar.appendToolbarItem(this.startWithReloadButton);\n    }\n\n    this.dataGrid = this.createDataGrid();\n    this.dataGrid.asWidget().show(this.contentElement);\n\n    this.currentPollId = 0;\n  }\n\n  static instance(): LiveHeapProfileView {\n    if (!liveHeapProfileViewInstance) {\n      liveHeapProfileViewInstance = new LiveHeapProfileView();\n    }\n    return liveHeapProfileViewInstance;\n  }\n\n  createDataGrid(): DataGrid.SortableDataGrid.SortableDataGrid<GridNode> {\n    const defaultColumnConfig: DataGrid.DataGrid.ColumnDescriptor = {\n      id: '',\n      title: Common.UIString.LocalizedEmptyString,\n      width: undefined,\n      fixedWidth: true,\n      sortable: true,\n      align: DataGrid.DataGrid.Align.RIGHT,\n      sort: DataGrid.DataGrid.Order.Descending,\n      titleDOMFragment: undefined,\n      editable: undefined,\n      nonSelectable: undefined,\n      longText: undefined,\n      disclosure: undefined,\n      weight: undefined,\n      allowInSortByEvenWhenHidden: undefined,\n      dataType: undefined,\n      defaultWeight: undefined,\n    };\n    const columns = [\n      {\n        ...defaultColumnConfig,\n        id: 'size',\n        title: i18nString(UIStrings.jsHeap),\n        width: '72px',\n        fixedWidth: true,\n        sortable: true,\n        align: DataGrid.DataGrid.Align.RIGHT,\n        sort: DataGrid.DataGrid.Order.Descending,\n        tooltip: i18nString(UIStrings.allocatedJsHeapSizeCurrentlyIn),\n      },\n      {\n        ...defaultColumnConfig,\n        id: 'isolates',\n        title: i18nString(UIStrings.vms),\n        width: '40px',\n        fixedWidth: true,\n        align: DataGrid.DataGrid.Align.RIGHT,\n        tooltip: i18nString(UIStrings.numberOfVmsSharingTheSameScript),\n      },\n      {\n        ...defaultColumnConfig,\n        id: 'url',\n        title: i18nString(UIStrings.scriptUrl),\n        fixedWidth: false,\n        sortable: true,\n        tooltip: i18nString(UIStrings.urlOfTheScriptSource),\n      },\n    ] as Array<{tooltip: Common.UIString.LocalizedString}&DataGrid.DataGrid.ColumnDescriptor>;\n    const dataGrid = new DataGrid.SortableDataGrid.SortableDataGrid({\n      displayName: i18nString(UIStrings.heapProfile),\n      columns,\n      deleteCallback: undefined,\n      refreshCallback: undefined,\n    });\n    dataGrid.setResizeMethod(DataGrid.DataGrid.ResizeMethod.LAST);\n    dataGrid.element.classList.add('flex-auto');\n    dataGrid.element.addEventListener('keydown', this.onKeyDown.bind(this), false);\n    dataGrid.addEventListener(DataGrid.DataGrid.Events.OPENED_NODE, this.revealSourceForSelectedNode, this);\n    dataGrid.addEventListener(DataGrid.DataGrid.Events.SORTING_CHANGED, this.sortingChanged, this);\n    for (const info of columns) {\n      const headerCell = dataGrid.headerTableHeader(info.id);\n      if (headerCell) {\n        headerCell.setAttribute('title', info.tooltip);\n      }\n    }\n    return dataGrid;\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    void this.poll();\n    this.setting.addChangeListener(this.settingChanged, this);\n  }\n\n  override willHide(): void {\n    ++this.currentPollId;\n    this.setting.removeChangeListener(this.settingChanged, this);\n  }\n\n  settingChanged(value: Common.EventTarget.EventTargetEvent<boolean>): void {\n    this.toggleRecordButton.setToggled(value.data);\n  }\n\n  async poll(): Promise<void> {\n    const pollId = this.currentPollId;\n    do {\n      const isolates = Array.from(SDK.IsolateManager.IsolateManager.instance().isolates());\n      const profiles = await Promise.all(isolates.map(isolate => {\n        const heapProfilerModel = isolate.heapProfilerModel();\n        if (!heapProfilerModel) {\n          return null;\n        }\n\n        return heapProfilerModel.getSamplingProfile();\n      }));\n      if (this.currentPollId !== pollId) {\n        return;\n      }\n      this.update(isolates, profiles);\n      await new Promise(r => window.setTimeout(r, 3000));\n    } while (this.currentPollId === pollId);\n  }\n\n  update(\n      isolates: SDK.IsolateManager.Isolate[] = [],\n      profiles: Array<Protocol.HeapProfiler.SamplingHeapProfile|null> = []): void {\n    const dataByUrl = new Map<string, {\n      size: number,\n      isolates: Set<SDK.IsolateManager.Isolate>,\n    }>();\n    profiles.forEach((profile, index) => {\n      if (profile) {\n        processNodeTree(isolates[index], '', profile.head);\n      }\n    });\n\n    const rootNode = this.dataGrid.rootNode();\n    const existingNodes = new Set<GridNode>();\n    for (const pair of dataByUrl) {\n      const url = (pair[0]);\n      const size = (pair[1].size);\n      const isolateCount = (pair[1].isolates.size);\n      if (!url) {\n        console.info(`Node with empty URL: ${size} bytes`);  // eslint-disable-line no-console\n        continue;\n      }\n      let node = this.gridNodeByUrl.get(url);\n      if (node) {\n        node.updateNode(size, isolateCount);\n      } else {\n        node = new GridNode(url, size, isolateCount);\n        this.gridNodeByUrl.set(url, node);\n        rootNode.appendChild(node);\n      }\n      existingNodes.add(node);\n    }\n\n    for (const node of rootNode.children.slice()) {\n      const gridNode = node as GridNode;\n      if (!existingNodes.has(gridNode)) {\n        gridNode.remove();\n      }\n      this.gridNodeByUrl.delete(gridNode.url);\n    }\n\n    this.sortingChanged();\n\n    function processNodeTree(\n        isolate: SDK.IsolateManager.Isolate, parentUrl: string,\n        node: Protocol.HeapProfiler.SamplingHeapProfileNode): void {\n      const url = node.callFrame.url || parentUrl || systemNodeName(node) || anonymousScriptName(node);\n      node.children.forEach(processNodeTree.bind(null, isolate, url));\n      if (!node.selfSize) {\n        return;\n      }\n      let data = dataByUrl.get(url);\n      if (!data) {\n        data = {size: 0, isolates: new Set()};\n        dataByUrl.set(url, data);\n      }\n      data.size += node.selfSize;\n      data.isolates.add(isolate);\n    }\n\n    function systemNodeName(node: Protocol.HeapProfiler.SamplingHeapProfileNode): string {\n      const name = node.callFrame.functionName;\n      return name.startsWith('(') && name !== '(root)' ? name : '';\n    }\n\n    function anonymousScriptName(node: Protocol.HeapProfiler.SamplingHeapProfileNode): string {\n      return Number(node.callFrame.scriptId) ? i18nString(UIStrings.anonymousScriptS, {PH1: node.callFrame.scriptId}) :\n                                               '';\n    }\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    if (!(event.key === 'Enter')) {\n      return;\n    }\n    event.consume(true);\n    this.revealSourceForSelectedNode();\n  }\n\n  revealSourceForSelectedNode(): void {\n    const node = (this.dataGrid.selectedNode as GridNode);\n    if (!node?.url) {\n      return;\n    }\n    const sourceCode =\n        Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(node.url as Platform.DevToolsPath.UrlString);\n    if (sourceCode) {\n      void Common.Revealer.reveal(sourceCode);\n    }\n  }\n\n  sortingChanged(): void {\n    const columnId = this.dataGrid.sortColumnId();\n    if (!columnId) {\n      return;\n    }\n\n    function sortByUrl(\n        a: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>,\n        b: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>): number {\n      return (b as GridNode).url.localeCompare((a as GridNode).url);\n    }\n\n    function sortBySize(\n        a: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>,\n        b: DataGrid.SortableDataGrid.SortableDataGridNode<GridNode>): number {\n      return (b as GridNode).size - (a as GridNode).size;\n    }\n\n    const sortFunction = columnId === 'url' ? sortByUrl : sortBySize;\n    this.dataGrid.sortNodes(sortFunction, this.dataGrid.isSortOrderAscending());\n  }\n\n  toggleRecording(): void {\n    const enable = !this.setting.get();\n    if (enable) {\n      this.startRecording(false);\n    } else {\n      void this.stopRecording();\n    }\n  }\n\n  startRecording(reload?: boolean): void {\n    this.setting.set(true);\n    if (!reload) {\n      return;\n    }\n    const mainTarget = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    if (!mainTarget) {\n      return;\n    }\n    const resourceTreeModel = (mainTarget.model(SDK.ResourceTreeModel.ResourceTreeModel));\n    if (resourceTreeModel) {\n      resourceTreeModel.reloadPage();\n    }\n  }\n\n  async stopRecording(): Promise<void> {\n    this.setting.set(false);\n  }\n}\n\nexport class GridNode extends DataGrid.SortableDataGrid.SortableDataGridNode<unknown> {\n  url: string;\n  size: number;\n  isolateCount: number;\n\n  constructor(url: string, size: number, isolateCount: number) {\n    super();\n    this.url = url;\n    this.size = size;\n    this.isolateCount = isolateCount;\n  }\n\n  updateNode(size: number, isolateCount: number): void {\n    if (this.size === size && this.isolateCount === isolateCount) {\n      return;\n    }\n    this.size = size;\n    this.isolateCount = isolateCount;\n    this.refresh();\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    const cell = this.createTD(columnId);\n    switch (columnId) {\n      case 'url':\n        cell.textContent = this.url;\n        break;\n      case 'size':\n        cell.textContent = Platform.NumberUtilities.withThousandsSeparator(Math.round(this.size / 1e3));\n        cell.createChild('span', 'size-units').textContent = i18nString(UIStrings.kb);\n        break;\n      case 'isolates':\n        cell.textContent = `${this.isolateCount}`;\n        break;\n    }\n    return cell;\n  }\n}\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(_context: UI.Context.Context, actionId: string): boolean {\n    void (async () => {\n      const profileViewId = 'live-heap-profile';\n      await UI.ViewManager.ViewManager.instance().showView(profileViewId);\n      const view = UI.ViewManager.ViewManager.instance().view(profileViewId);\n      if (view) {\n        const widget = await view.widget();\n        this.innerHandleAction((widget as LiveHeapProfileView), actionId);\n      }\n    })();\n    return true;\n  }\n\n  innerHandleAction(profilerView: LiveHeapProfileView, actionId: string): void {\n    switch (actionId) {\n      case 'live-heap-profile.toggle-recording':\n        profilerView.toggleRecording();\n        break;\n      case 'live-heap-profile.start-with-reload':\n        profilerView.startRecording(true);\n        break;\n      default:\n        console.assert(false, `Unknown action: ${actionId}`);\n    }\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2019 The Chromium Authors\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.data-grid {\n  border: none;\n}\n\n.data-grid td .size-units {\n  margin-left: 4px;\n  font-size: 75%;\n}\n\n.data-grid tr:not(.selected) td .size-units {\n  color: var(--sys-color-token-subtle);\n}\n\ndevtools-toolbar {\n  border-bottom: 1px solid var(--sys-color-divider);\n}\n\n/*# sourceURL=${import.meta.resolve('./liveHeapProfile.css')} */`;"],
  "mappings": "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",
  "names": ["Platform", "value", "Host", "i18n", "UI", "Common", "i18n", "Platform", "SDK", "IconButton", "UI", "VisualLogging", "Common", "i18n", "UI", "Common", "i18n", "UI", "UIStrings", "str_", "i18nString", "UIStrings", "str_", "i18nString", "i18n", "Buttons", "UI", "UIStrings", "str_", "i18nString", "UIStrings", "str_", "i18nString", "toolbar", "Common", "i18n", "SDK", "UI", "i18n", "SDK", "DataGrid", "UI", "UIStrings", "str_", "i18nString", "Common", "i18n", "Platform", "DataGrid", "PerfUI", "UI", "Common", "i18n", "Platform", "UI", "value", "UIStrings", "str_", "i18nString", "UIStrings", "str_", "i18nString", "Common", "i18n", "Platform", "SDK", "PerfUI", "Components", "UI", "OverviewCalculator", "Common", "i18n", "Platform", "PerfUI", "UI", "VisualLogging", "sizes", "value", "UIStrings", "str_", "i18nString", "value", "count", "node", "Common", "Host", "i18n", "Platform", "Root", "SDK", "Bindings", "HeapSnapshotModel", "DataGrid", "PerfUI", "Components", "UI", "VisualLogging", "Common", "i18n", "HeapSnapshotModel", "DataGrid", "Components", "UI", "Common", "i18n", "Platform", "SDK", "IconButton", "DataGrid", "UI", "VisualLogging", "UIStrings", "str_", "i18nString", "toPosition", "HeapSnapshotGridNode", "Events", "value", "UIStrings", "str_", "i18nString", "HeapSnapshotSortableDataGridEvents", "value", "HeapSnapshotRetainmentDataGridEvents", "Common", "i18n", "UIStrings", "str_", "i18nString", "UIStrings", "UIStrings", "str_", "i18nString", "value", "option", "stackDiv", "UIStrings", "str_", "i18nString", "ActionDelegate", "Common", "i18n", "Platform", "SDK", "DataGrid", "UI", "UIStrings", "str_", "i18nString", "toolbar", "value", "ActionDelegate"]
}
