{"version":3,"file":"CPUProfileView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/profiler/CPUProfileView.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,OAAO,EAAC,YAAY,EAAC,MAAM,qCAAqC,CAAC;AACjE,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAC3E,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAI7C,0BAA0B,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACrD,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,eAAe,CAAC,CAAC;QAC/C,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;QAC9B,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,gBAAgB,CAAC,gBAAgB,CAA0C,CAAC;QAC3G,MAAM,QAAQ,GAAG,KAAkC,CAAC;QACpD,MAAM,UAAU,GAAG,EAAE,CAAC;QACtB,MAAM,UAAU,GAAG;YACjB,KAAK,EAAE,CAAC;oBACN,EAAE,EAAE,CAAC;oBACL,SAAS,EAAE,EAAC,YAAY,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,EAAE,YAAY,EAAE,YAAY,EAAE,CAAC,EAAC;oBAC1F,QAAQ,EAAE,EAAE;iBACb,CAAC;YACF,SAAS,EAAE,CAAC;YACZ,OAAO,EAAE,CAAC;SACX,CAAC;QACF,KAAK,CAAC,sBAAsB,CAAC;YAC3B,EAAE,EAAE,KAAK;YACT,QAAQ,EAAE,EAAC,QAAQ,EAAE,UAAU,EAAC;YAChC,OAAO,EAAE,UAAU;SACpB,CAAC,CAAC;QACH,MAAM,WAAW,GAAG,IAAI,QAAQ,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC;QACjE,MAAM,gBAAgB,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAA6C,CAAC;QAClG,MAAM,CAAC,SAAS,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,gCAAgC,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;IACpH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithRealConnection} from '../../testing/RealConnection.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as Profiler from './profiler.js';\n\ndescribeWithRealConnection('CPUProfileView test', () => {\n  it('reads registered console profile messages from the model', async () => {\n    const Profiler = await import('./profiler.js');\n    const target = createTarget();\n    const model = target.model(SDK.CPUProfilerModel.CPUProfilerModel) as SDK.CPUProfilerModel.CPUProfilerModel;\n    const scriptId = 'bar' as Protocol.Runtime.ScriptId;\n    const lineNumber = 42;\n    const cpuProfile = {\n      nodes: [{\n        id: 1,\n        callFrame: {functionName: 'fun', scriptId, lineNumber, url: 'http://foo', columnNumber: 1},\n        hitCount: 42,\n      }],\n      startTime: 1,\n      endTime: 2,\n    };\n    model.consoleProfileFinished({\n      id: 'foo',\n      location: {scriptId, lineNumber},\n      profile: cpuProfile,\n    });\n    const profileType = new Profiler.CPUProfileView.CPUProfileType();\n    const cpuProfileHeader = profileType.getProfiles()[0] as Profiler.CPUProfileView.CPUProfileHeader;\n    assert.deepEqual(cpuProfileHeader?.cpuProfilerModel?.registeredConsoleProfileMessages[0]?.cpuProfile, cpuProfile);\n  });\n});\n"]}