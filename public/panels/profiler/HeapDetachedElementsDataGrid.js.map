{"version":3,"file":"HeapDetachedElementsDataGrid.js","sourceRoot":"","sources":["../../../../../../front_end/panels/profiler/HeapDetachedElementsDataGrid.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Elements from '../elements/elements.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  detachedNodes: 'Detached nodes',\n  /**\n   * @description Text in Heap Snapshot View of a profiler tool\n   */\n  nodeSize: 'Node count',\n  /**\n   * @description Label for the detached elements table\n   */\n  detachedElementsList: 'Detached elements list',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapDetachedElementsDataGrid.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class HeapDetachedElementsDataGrid extends DataGrid.DataGrid.DataGridImpl<unknown> {\n  constructor() {\n    const columns: DataGrid.DataGrid.ColumnDescriptor[] = [];\n    columns.push({\n      id: 'detached-node',\n      title: i18nString(UIStrings.detachedNodes),\n      sortable: false,\n    });\n    columns.push({\n      id: 'detached-node-count',\n      title: i18nString(UIStrings.nodeSize),\n      sortable: false,\n      disclosure: true,\n    });\n\n    super({\n      displayName: i18nString(UIStrings.detachedElementsList),\n      columns,\n      deleteCallback: undefined,\n      refreshCallback: undefined,\n    });\n\n    this.setStriped(true);\n  }\n}\n\nexport class HeapDetachedElementsDataGridNode extends DataGrid.DataGrid.DataGridNode<unknown> {\n  private detachedElementInfo: Protocol.DOM.DetachedElementInfo;\n  domModel: SDK.DOMModel.DOMModel;\n  retainedNodeIds: Set<number> = new Set<number>();\n\n  constructor(detachedElementInfo: Protocol.DOM.DetachedElementInfo, domModel: SDK.DOMModel.DOMModel) {\n    super(null);\n    this.detachedElementInfo = detachedElementInfo;\n    this.domModel = domModel;\n    for (const retainedNodeId of detachedElementInfo.retainedNodeIds) {\n      this.retainedNodeIds.add(retainedNodeId as number);\n    }\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    const cell = this.createTD(columnId);\n    switch (columnId) {\n      case 'detached-node': {\n        const node = SDK.DOMModel.DOMNode.create(\n            this.domModel, null, false, this.detachedElementInfo.treeNode,\n            this.retainedNodeIds as Set<Protocol.DOM.BackendNodeId>);\n        node.detached = true;\n        this.#renderNode(node, cell);\n        return cell;\n      }\n\n      case 'detached-node-count': {\n        const size = this.#getNodeSize(this.detachedElementInfo);\n        UI.UIUtils.createTextChild(cell, size.toString());\n        return cell;\n      }\n    }\n    return cell;\n  }\n\n  #getNodeSize(detachedElementInfo: Protocol.DOM.DetachedElementInfo): number {\n    let count = 1;\n    const queue: Protocol.DOM.Node[] = [];\n    let node: Protocol.DOM.Node|undefined;\n    queue.push(detachedElementInfo.treeNode);\n    while (queue.length > 0) {\n      node = queue.shift();\n      if (!node) {\n        break;\n      }\n      if (node.childNodeCount) {\n        count += node.childNodeCount;\n      }\n      if (node.children) {\n        for (const child of node.children) {\n          queue.push(child);\n        }\n      }\n    }\n\n    return count;\n  }\n\n  // FIXME: is it a partial dupe of front_end/panels/elements/ElementsTreeOutlineRenderer.ts?\n  #renderNode(node: SDK.DOMModel.DOMNode, target: HTMLElement): void {\n    const domTree = new Elements.ElementsTreeOutline.DOMTreeWidget();\n    domTree.omitRootDOMNode = false;\n    domTree.selectEnabled = true;\n    domTree.hideGutter = true;\n    domTree.rootDOMNode = node;\n    domTree.showSelectionOnKeyboardFocus = true;\n    domTree.preventTabOrder = true;\n    domTree.deindentSingleNode = true;\n    domTree.show(target, undefined, true);\n  }\n}\n"]}