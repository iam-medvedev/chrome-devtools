{"version":3,"file":"HeapDetachedElementsDataGrid.js","sourceRoot":"","sources":["../../../../../../front_end/panels/profiler/HeapDetachedElementsDataGrid.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Elements from '../elements/elements.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Heap Snapshot View of a profiler tool\n   */\n  detachedNodes: 'Detached nodes',\n  /**\n   *@description Text in Heap Snapshot View of a profiler tool\n   */\n  nodeSize: 'Node count',\n  /**\n   *@description Label for the detached elements table\n   */\n  detachedElementsList: 'Detached elements list',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapDetachedElementsDataGrid.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class HeapDetachedElementsDataGrid extends DataGrid.DataGrid.DataGridImpl<unknown> {\n  constructor() {\n    const columns: DataGrid.DataGrid.ColumnDescriptor[] = [];\n    columns.push({\n      id: 'detached-node',\n      title: i18nString(UIStrings.detachedNodes),\n      sortable: false,\n    });\n    columns.push({\n      id: 'detached-node-count',\n      title: i18nString(UIStrings.nodeSize),\n      sortable: false,\n      disclosure: true,\n    });\n\n    super({\n      displayName: i18nString(UIStrings.detachedElementsList),\n      columns,\n      deleteCallback: undefined,\n      refreshCallback: undefined,\n    });\n\n    this.setStriped(true);\n  }\n}\n\nexport class HeapDetachedElementsDataGridNode extends DataGrid.DataGrid.DataGridNode<unknown> {\n  private detachedElementInfo: Protocol.DOM.DetachedElementInfo;\n  domModel: SDK.DOMModel.DOMModel;\n  retainedNodeIds: Set<number> = new Set<number>();\n\n  constructor(detachedElementInfo: Protocol.DOM.DetachedElementInfo, domModel: SDK.DOMModel.DOMModel) {\n    super(null);\n    this.detachedElementInfo = detachedElementInfo;\n    this.domModel = domModel;\n    for (const retainedNodeId of detachedElementInfo.retainedNodeIds) {\n      this.retainedNodeIds.add(retainedNodeId as number);\n    }\n  }\n\n  override createCell(columnId: string): HTMLElement {\n    const cell = this.createTD(columnId);\n    switch (columnId) {\n      case 'detached-node': {\n        const DOMNode = SDK.DOMModel.DOMNode.create(this.domModel, null, false, this.detachedElementInfo.treeNode);\n        cell.appendChild(this.#nodeRenderer(DOMNode));\n        return cell;\n      }\n\n      case 'detached-node-count': {\n        const size = this.#getNodeSize(this.detachedElementInfo);\n        UI.UIUtils.createTextChild(cell, size.toString());\n        return cell;\n      }\n    }\n    return cell;\n  }\n\n  #getNodeSize(detachedElementInfo: Protocol.DOM.DetachedElementInfo): number {\n    let count = 1;\n    const queue: Protocol.DOM.Node[] = [];\n    let node: Protocol.DOM.Node|undefined;\n    queue.push(detachedElementInfo.treeNode);\n    while (queue.length > 0) {\n      node = queue.shift();\n      if (!node) {\n        break;\n      }\n      if (node.childNodeCount) {\n        count += node.childNodeCount;\n      }\n      if (node.children) {\n        for (const child of node.children) {\n          queue.push(child);\n        }\n      }\n    }\n\n    return count;\n  }\n\n  #nodeRenderer(node: SDK.DOMModel.DOMNode): HTMLElement {\n    const treeOutline = new Elements.ElementsTreeOutline.ElementsTreeOutline(\n        /* omitRootDOMNode: */ false, /* selectEnabled: */ false, /* hideGutter: */ true);\n    treeOutline.rootDOMNode = node;\n    const firstChild = treeOutline.firstChild();\n    if (!firstChild || (firstChild && !firstChild.isExpandable())) {\n      treeOutline.element.classList.add('single-node');\n    }\n    treeOutline.setVisible(true);\n    // @ts-expect-error used in console_test_runner\n    treeOutline.element.treeElementForTest = firstChild;\n    treeOutline.setShowSelectionOnKeyboardFocus(/* show: */ true, /* preventTabOrder: */ true);\n\n    const nodes: SDK.DOMModel.DOMNode[] = [node];\n\n    // Iterate through descendants to mark the nodes that were specifically retained in JS references.\n    while (nodes.length > 0) {\n      const descendantNode = nodes.shift() as SDK.DOMModel.DOMNode;\n      const descendantsChildren = descendantNode.children();\n      if (descendantsChildren) {\n        for (const child of descendantsChildren) {\n          nodes.push(child);\n        }\n      }\n\n      const treeElement = treeOutline.findTreeElement(descendantNode);\n      // If true, this node is retained in JS, and should be marked.\n      if (treeElement) {\n        if (this.retainedNodeIds.has(descendantNode.backendNodeId() as number)) {\n          const icon = new IconButton.Icon.Icon();\n          // this needs to be updated, data field is deprecated\n          icon.data = {iconName: 'small-status-dot', color: 'var(--icon-error)', width: '12px', height: '12px'};\n          icon.style.setProperty('vertical-align', 'middle');\n          treeElement.setLeadingIcons([icon]);\n          treeElement.listItemNode.classList.add('detached-elements-detached-node');\n          treeElement.listItemNode.style.setProperty('display', '-webkit-box');\n          treeElement.listItemNode.setAttribute('title', 'Retained Node');\n        } else {\n          treeElement.listItemNode.setAttribute('title', 'Node');\n        }\n      }\n    }\n\n    treeOutline.findTreeElement(node)?.listItemNode.setAttribute('title', 'Detached Tree Node');\n\n    return treeOutline.element;\n  }\n}\n"]}