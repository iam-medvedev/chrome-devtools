{"version":3,"file":"ScreencastApp.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/screencast/ScreencastApp.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,wBAAwB,EAAC,MAAM,iCAAiC,CAAC;AACzE,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,EAAC,YAAY,EAAC,MAAM,qCAAqC,CAAC;AACjE,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAE3E,OAAO,KAAK,UAAU,MAAM,iBAAiB,CAAC;AAE9C,0BAA0B,CAAC,eAAe,EAAE,GAAG,EAAE;IAC/C,MAAM,KAAK,GAAG,CAAC,aAAsC,EAAE,EAAE;QACvD,EAAE,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;YACjC,MAAM,aAAa,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;YACnE,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAClC,MAAM,MAAM,GAAG,aAAa,EAAE,CAAC;YAC/B,MAAM,kBAAkB,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;YACnF,wBAAwB,CAAC,kBAAkB,CAAC,CAAC;YAC7C,MAAM,IAAI,OAAO,CACb,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,KAAgB,EAAE,EAAE;gBAC7F,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC,CAAC;YACR,aAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;IAC1D,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE;QACf,MAAM,SAAS,GAAG,YAAY,CAAC,EAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;QAC5D,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAC,CAAC,CAAC;QAC9D,OAAO,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assertNotNullOrUndefined} from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\n\nimport * as Screencast from './screencast.js';\n\ndescribeWithMockConnection('ScreencastApp', () => {\n  const tests = (targetFactory: () => SDK.Target.Target) => {\n    it('can start casting', async () => {\n      const screencastApp = new Screencast.ScreencastApp.ScreencastApp();\n      screencastApp.presentUI(document);\n      const target = targetFactory();\n      const screenCaptureModel = target.model(SDK.ScreenCaptureModel.ScreenCaptureModel);\n      assertNotNullOrUndefined(screenCaptureModel);\n      await new Promise<void>(\n          resolve => sinon.stub(screenCaptureModel, 'startScreencast').callsFake((..._args: unknown[]) => {\n            resolve();\n          }));\n      screencastApp.rootView?.detach();\n    });\n  };\n\n  describe('without tab target', () => tests(createTarget));\n  describe('with tab target', () => tests(() => {\n                                const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n                                createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n                                return createTarget({parentTarget: tabTarget});\n                              }));\n});\n"]}