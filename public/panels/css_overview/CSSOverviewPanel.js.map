{"version":3,"file":"CSSOverviewPanel.js","sourceRoot":"","sources":["../../../../../../front_end/panels/css_overview/CSSOverviewPanel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {html, render} from '../../ui/lit/lit.js';\n\nimport {type ContrastIssue, CSSOverviewCompletedView, type OverviewData} from './CSSOverviewCompletedView.js';\nimport {CSSOverviewModel, type GlobalStyleStats} from './CSSOverviewModel.js';\nimport {CSSOverviewProcessingView} from './CSSOverviewProcessingView.js';\nimport {CSSOverviewStartView} from './CSSOverviewStartView.js';\nimport type {UnusedDeclaration} from './CSSOverviewUnusedDeclarations.js';\n\nconst {widgetConfig} = UI.Widget;\n\ninterface ViewInput {\n  state: 'start'|'processing'|'completed';\n  onStartCapture: () => void;\n  onCancel: () => void;\n  onReset: () => void;\n  overviewData: OverviewData;\n  target?: SDK.Target.Target;\n}\n\ntype View = (input: ViewInput, output: object, target: HTMLElement) => void;\n\nexport const DEFAULT_VIEW: View = (input, _output, target) => {\n  // clang-format off\n  render(input.state === 'start' ?  html`\n      <devtools-widget .widgetConfig=${widgetConfig(CSSOverviewStartView, {onStartCapture: input.onStartCapture})}></devtools-widget>`\n    : input.state === 'processing' ?  html`\n      <devtools-widget .widgetConfig=${widgetConfig(CSSOverviewProcessingView, {onCancel: input.onCancel})}></devtools-widget>`\n    : html`\n      <devtools-widget .widgetConfig=${widgetConfig(CSSOverviewCompletedView, {\n      onReset: input.onReset,\n      overviewData: input.overviewData,\n      target: input.target,\n    })}></devtools-widget>`,\n    target);\n  // clang-format on\n};\n\nexport class CSSOverviewPanel extends UI.Panel.Panel implements SDK.TargetManager.Observer {\n  #currentUrl: string;\n  #model?: CSSOverviewModel;\n  #backgroundColors!: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  #textColors!: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  #fillColors!: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  #borderColors!: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  #fontInfo!: Map<string, Map<string, Map<string, Protocol.DOM.BackendNodeId[]>>>;\n  #mediaQueries!: Map<string, Protocol.CSS.CSSMedia[]>;\n  #unusedDeclarations!: Map<string, UnusedDeclaration[]>;\n  #elementCount!: number;\n  #globalStyleStats!: GlobalStyleStats;\n  #textColorContrastIssues!: Map<string, ContrastIssue[]>;\n  #state!: 'start'|'processing'|'completed';\n  #view: View;\n\n  constructor(view = DEFAULT_VIEW) {\n    super('css-overview');\n    this.#currentUrl = SDK.TargetManager.TargetManager.instance().inspectedURL();\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.INSPECTED_URL_CHANGED, this.#checkUrlAndResetIfChanged, this);\n\n    this.#view = view;\n    SDK.TargetManager.TargetManager.instance().observeTargets(this);\n    this.#reset();\n  }\n\n  #onStartCapture(): void {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.CaptureCssOverviewClicked);\n    void this.#startOverview();\n  }\n\n  #checkUrlAndResetIfChanged(): void {\n    if (this.#currentUrl === SDK.TargetManager.TargetManager.instance().inspectedURL()) {\n      return;\n    }\n\n    this.#currentUrl = SDK.TargetManager.TargetManager.instance().inspectedURL();\n    this.#reset();\n  }\n\n  targetAdded(target: SDK.Target.Target): void {\n    if (target !== SDK.TargetManager.TargetManager.instance().primaryPageTarget()) {\n      return;\n    }\n    this.#model = target.model(CSSOverviewModel) ?? undefined;\n  }\n\n  targetRemoved(): void {\n  }\n\n  #getModel(): CSSOverviewModel {\n    if (!this.#model) {\n      throw new Error('Did not retrieve model information yet.');\n    }\n    return this.#model;\n  }\n\n  #reset(): void {\n    this.#backgroundColors = new Map();\n    this.#textColors = new Map();\n    this.#fillColors = new Map();\n    this.#borderColors = new Map();\n    this.#fontInfo = new Map();\n    this.#mediaQueries = new Map();\n    this.#unusedDeclarations = new Map();\n    this.#elementCount = 0;\n    this.#globalStyleStats = {\n      styleRules: 0,\n      inlineStyles: 0,\n      externalSheets: 0,\n      stats: {\n        // Simple.\n        type: 0,\n        class: 0,\n        id: 0,\n        universal: 0,\n        attribute: 0,\n\n        // Non-simple.\n        nonSimple: 0,\n      },\n    };\n    this.#textColorContrastIssues = new Map();\n    this.#renderInitialView();\n  }\n\n  #renderInitialView(): void {\n    this.#state = 'start';\n    this.performUpdate();\n  }\n\n  #renderOverviewStartedView(): void {\n    this.#state = 'processing';\n    this.performUpdate();\n  }\n\n  #renderOverviewCompletedView(): void {\n    this.#state = 'completed';\n    this.performUpdate();\n  }\n\n  override performUpdate(): void {\n    const viewInput = {\n      state: this.#state,\n      onStartCapture: this.#onStartCapture.bind(this),\n      onCancel: this.#reset.bind(this),\n      onReset: this.#reset.bind(this),\n      target: this.#model?.target(),\n      overviewData: {\n        backgroundColors: this.#backgroundColors,\n        textColors: this.#textColors,\n        textColorContrastIssues: this.#textColorContrastIssues,\n        fillColors: this.#fillColors,\n        borderColors: this.#borderColors,\n        globalStyleStats: this.#globalStyleStats,\n        fontInfo: this.#fontInfo,\n        elementCount: this.#elementCount,\n        mediaQueries: this.#mediaQueries,\n        unusedDeclarations: this.#unusedDeclarations,\n      },\n    };\n    this.#view(viewInput, {}, this.contentElement);\n  }\n\n  async #startOverview(): Promise<void> {\n    this.#renderOverviewStartedView();\n\n    const model = this.#getModel();\n    const [globalStyleStats, { elementCount, backgroundColors, textColors, textColorContrastIssues, fillColors, borderColors, fontInfo, unusedDeclarations }, mediaQueries] = await Promise.all([\n      model.getGlobalStylesheetStats(),\n      model.getNodeStyleStats(),\n      model.getMediaQueries(),\n    ]);\n\n    if (elementCount) {\n      this.#elementCount = elementCount;\n    }\n\n    if (globalStyleStats) {\n      this.#globalStyleStats = globalStyleStats;\n    }\n\n    if (mediaQueries) {\n      this.#mediaQueries = mediaQueries;\n    }\n\n    if (backgroundColors) {\n      this.#backgroundColors = backgroundColors;\n    }\n\n    if (textColors) {\n      this.#textColors = textColors;\n    }\n\n    if (textColorContrastIssues) {\n      this.#textColorContrastIssues = textColorContrastIssues;\n    }\n\n    if (fillColors) {\n      this.#fillColors = fillColors;\n    }\n\n    if (borderColors) {\n      this.#borderColors = borderColors;\n    }\n\n    if (fontInfo) {\n      this.#fontInfo = fontInfo;\n    }\n\n    if (unusedDeclarations) {\n      this.#unusedDeclarations = unusedDeclarations;\n    }\n\n    this.#renderOverviewCompletedView();\n  }\n}\n"]}