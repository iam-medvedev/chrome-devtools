{"version":3,"file":"CombinedDiffView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/changes/CombinedDiffView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport * as WorkspaceDiff from '../../models/workspace_diff/workspace_diff.js';\nimport type * as Diff from '../../third_party/diff/diff.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport type * as DiffView from '../../ui/components/diff_view/diff_view.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Lit from '../../ui/lit/lit.js';\nimport * as PanelUtils from '../utils/utils.js';\n\nimport combinedDiffViewStyles from './combinedDiffView.css.js';\n\nconst COPIED_TO_CLIPBOARD_TEXT_TIMEOUT_MS = 1000;\n\nconst {html} = Lit;\n\nconst UIStrings = {\n  /**\n   * @description The title of the button after it was pressed and the text was copied to clipboard.\n   */\n  copied: 'Copied to clipboard',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/changes/CombinedDiffView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface SingleDiffViewInput {\n  fileName: string;\n  fileUrl: string;\n  mimeType: string;\n  icon: HTMLElement;\n  diff: Diff.Diff.DiffArray;\n  copied: boolean;\n  onCopy: (fileUrl: string, diff: Diff.Diff.DiffArray) => void;\n}\n\nexport interface ViewInput {\n  singleDiffViewInputs: SingleDiffViewInput[];\n}\n\ntype View = (input: ViewInput, output: undefined, target: HTMLElement) => void;\n\nfunction renderSingleDiffView(singleDiffViewInput: SingleDiffViewInput): Lit.TemplateResult {\n  const {fileName, fileUrl, mimeType, icon, diff, copied, onCopy} = singleDiffViewInput;\n\n  return html`\n    <details open>\n      <summary>\n        <div class=\"summary-left\">\n          <devtools-icon class=\"drop-down-icon\" .name=${'arrow-drop-down'}></devtools-icon>\n          ${icon}\n          <span class=\"file-name\">${fileName}</span>\n        </div>\n        <div class=\"summary-right\">\n          ${copied ? html`<span class=\"copied\">${i18nString(UIStrings.copied)}</span>` : html`\n            <devtools-button\n              title=${'Copy'}\n              .size=${Buttons.Button.Size.SMALL}\n              .iconName=${'copy'}\n              .jslogContext=${'combined-diff-view.copy'}\n              .variant=${Buttons.Button.Variant.ICON}\n              @click=${() => onCopy(fileUrl, diff)}></devtools-button>\n          `}\n        </div>\n      </summary>\n      <div class='diff-view-container'>\n        <devtools-diff-view\n          .data=${{diff, mimeType} as DiffView.DiffView.DiffViewData}>\n        </devtools-diff-view>\n      </div>\n    </details>\n  `;\n}\n\nexport class CombinedDiffView extends UI.Widget.Widget {\n  #workspaceDiff?: WorkspaceDiff.WorkspaceDiff.WorkspaceDiffImpl;\n  #modifiedUISourceCodes: Workspace.UISourceCode.UISourceCode[] = [];\n  #copiedFiles: Record<string, boolean> = {};\n  #view: View;\n  constructor(element?: HTMLElement, view: View = (input, output, target) => {\n    Lit.render(\n        html`\n      <div class=\"combined-diff-view\">\n        ${input.singleDiffViewInputs.map(singleDiffViewInput => renderSingleDiffView(singleDiffViewInput))}\n      </div>\n    `,\n        target, {host: target});\n  }) {\n    super(false, false, element);\n    this.registerRequiredCSS(combinedDiffViewStyles);\n    this.#view = view;\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.#workspaceDiff?.addEventListener(\n        WorkspaceDiff.WorkspaceDiff.Events.MODIFIED_STATUS_CHANGED, this.#onDiffModifiedStatusChanged, this);\n    void this.#initializeModifiedUISourceCodes();\n  }\n\n  override willHide(): void {\n    this.#workspaceDiff?.removeEventListener(\n        WorkspaceDiff.WorkspaceDiff.Events.MODIFIED_STATUS_CHANGED, this.#onDiffModifiedStatusChanged, this);\n  }\n\n  set workspaceDiff(workspaceDiff: WorkspaceDiff.WorkspaceDiff.WorkspaceDiffImpl) {\n    this.#workspaceDiff = workspaceDiff;\n    void this.#initializeModifiedUISourceCodes();\n  }\n\n  async #onCopyDiff(fileUrl: string, diff: Diff.Diff.DiffArray): Promise<void> {\n    const changes = await PanelUtils.PanelUtils.formatCSSChangesFromDiff(diff);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(changes);\n    this.#copiedFiles[fileUrl] = true;\n    this.requestUpdate();\n    setTimeout(() => {\n      delete this.#copiedFiles[fileUrl];\n      this.requestUpdate();\n    }, COPIED_TO_CLIPBOARD_TEXT_TIMEOUT_MS);\n  }\n\n  async #initializeModifiedUISourceCodes(): Promise<void> {\n    if (!this.#workspaceDiff) {\n      return;\n    }\n\n    const currentModifiedUISourceCodes = this.#modifiedUISourceCodes;\n    const nextModifiedUISourceCodes = this.#workspaceDiff.modifiedUISourceCodes();\n\n    // Find the now non modified UI source codes and unsubscribe from their diff changes.\n    const nowNonModifiedUISourceCodes =\n        currentModifiedUISourceCodes.filter(uiSourceCode => !nextModifiedUISourceCodes.includes(uiSourceCode));\n    nowNonModifiedUISourceCodes.forEach(\n        nonModifiedUISourceCode =>\n            this.#workspaceDiff?.unsubscribeFromDiffChange(nonModifiedUISourceCode, this.requestUpdate, this));\n\n    // Find the newly modified UI source codes and subscribe for their diff changes.\n    const newlyModifiedUISourceCodes =\n        nextModifiedUISourceCodes.filter(uiSourceCode => !currentModifiedUISourceCodes.includes(uiSourceCode));\n    newlyModifiedUISourceCodes.forEach(\n        modifiedUISourceCode =>\n            this.#workspaceDiff?.subscribeToDiffChange(modifiedUISourceCode, this.requestUpdate, this));\n    this.#modifiedUISourceCodes = nextModifiedUISourceCodes;\n\n    if (this.isShowing()) {\n      this.requestUpdate();\n    }\n  }\n\n  async #onDiffModifiedStatusChanged(): Promise<void> {\n    if (!this.#workspaceDiff) {\n      return;\n    }\n\n    await this.#initializeModifiedUISourceCodes();\n  }\n\n  override async performUpdate(): Promise<void> {\n    const uiSourceCodeAndDiffs = await Promise.all(this.#modifiedUISourceCodes.map(async modifiedUISourceCode => {\n      // `requestDiff` caches the response from the previous `requestDiff` calls if the file did not change\n      // so we can safely call it here without concerns for performance.\n      const diffResponse = await this.#workspaceDiff?.requestDiff(modifiedUISourceCode);\n      return {\n        diff: diffResponse?.diff,\n        uiSourceCode: modifiedUISourceCode,\n      };\n    }));\n\n    const singleDiffViewInputs =\n        uiSourceCodeAndDiffs.filter(uiSourceCodeAndDiff => uiSourceCodeAndDiff.diff)\n            .map(({uiSourceCode, diff}) => {\n              return {\n                diff: diff as Diff.Diff.DiffArray,  // We already filter above the ones that does not have `diff`.\n                fileName: `${uiSourceCode.isDirty() ? '*' : ''}${uiSourceCode.displayName()}`,\n                fileUrl: uiSourceCode.url(),\n                mimeType: uiSourceCode.mimeType(),\n                icon: PanelUtils.PanelUtils.getIconForSourceFile(uiSourceCode, {width: 18, height: 18}),\n                copied: this.#copiedFiles[uiSourceCode.url()],\n                onCopy: this.#onCopyDiff.bind(this),\n              };\n            })\n            .sort((a, b) => Platform.StringUtilities.compare(a.fileName, b.fileName));\n\n    this.#view({singleDiffViewInputs}, undefined, this.contentElement);\n  }\n}\n"]}