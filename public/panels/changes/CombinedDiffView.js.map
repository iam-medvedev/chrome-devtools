{"version":3,"file":"CombinedDiffView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/changes/CombinedDiffView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport * as WorkspaceDiff from '../../models/workspace_diff/workspace_diff.js';\nimport type * as Diff from '../../third_party/diff/diff.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as CopyToClipboard from '../../ui/components/copy_to_clipboard/copy_to_clipboard.js';\nimport type * as DiffView from '../../ui/components/diff_view/diff_view.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Lit from '../../ui/lit/lit.js';\nimport * as PanelUtils from '../utils/utils.js';\n\nimport combinedDiffViewStyles from './combinedDiffView.css.js';\n\nconst COPIED_TO_CLIPBOARD_TEXT_TIMEOUT_MS = 1000;\n\nconst {html} = Lit;\n\nconst UIStrings = {\n  /**\n   * @description The title of the button after it was pressed and the text was copied to clipboard.\n   */\n  copied: 'Copied to clipboard',\n  /**\n   * @description The title of the copy file to clipboard button\n   * @example {index.css} PH1\n   */\n  copyFile: 'Copy file {PH1} to clipboard',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/changes/CombinedDiffView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface SingleDiffViewInput {\n  fileName: string;\n  fileUrl: string;\n  mimeType: string;\n  icon: HTMLElement;\n  diff: Diff.Diff.DiffArray;\n  copied: boolean;\n  onCopy: (fileUrl: string) => void;\n  onFileNameClick: (fileUrl: string) => void;\n}\n\nexport interface ViewInput {\n  singleDiffViewInputs: SingleDiffViewInput[];\n}\n\ntype View = (input: ViewInput, output: undefined, target: HTMLElement) => void;\n\nfunction renderSingleDiffView(singleDiffViewInput: SingleDiffViewInput): Lit.TemplateResult {\n  const {fileName, fileUrl, mimeType, icon, diff, copied, onCopy, onFileNameClick} = singleDiffViewInput;\n\n  // clang-format off\n  return html`\n    <details open>\n      <summary>\n        <div class=\"summary-left\">\n          <devtools-icon class=\"drop-down-icon\" .name=${'arrow-drop-down'}></devtools-icon>\n          ${icon}\n          <button class=\"file-name-link\" @click=${() => onFileNameClick(fileUrl)}>${fileName}</button>\n        </div>\n        <div class=\"summary-right\">\n          <devtools-button\n            title=${i18nString(UIStrings.copyFile, { PH1: fileName })}\n            .size=${Buttons.Button.Size.SMALL}\n            .iconName=${'copy'}\n            .jslogContext=${'combined-diff-view.copy'}\n            .variant=${Buttons.Button.Variant.ICON}\n            @click=${() => onCopy(fileUrl)}\n          ></devtools-button>\n          ${copied\n            ? html`<span class=\"copied\">${i18nString(UIStrings.copied)}</span>`\n            : Lit.nothing}\n        </div>\n      </summary>\n      <div class=\"diff-view-container\">\n        <devtools-diff-view\n          .data=${{diff, mimeType} as DiffView.DiffView.DiffViewData}>\n        </devtools-diff-view>\n      </div>\n    </details>\n  `;\n  // clang-format on\n}\n\nexport class CombinedDiffView extends UI.Widget.Widget {\n  /**\n   * Ignores urls that start with any in the list\n   */\n  ignoredUrls: string[] = [];\n\n  #workspaceDiff?: WorkspaceDiff.WorkspaceDiff.WorkspaceDiffImpl;\n  #modifiedUISourceCodes: Workspace.UISourceCode.UISourceCode[] = [];\n  #copiedFiles: Record<string, boolean> = {};\n  #view: View;\n  constructor(element?: HTMLElement, view: View = (input, _output, target) => {\n    Lit.render(\n        html`\n      <div class=\"combined-diff-view\">\n        ${input.singleDiffViewInputs.map(singleDiffViewInput => renderSingleDiffView(singleDiffViewInput))}\n      </div>\n    `,\n        target, {host: target});\n  }) {\n    super(false, false, element);\n    this.registerRequiredCSS(combinedDiffViewStyles);\n    this.#view = view;\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.#workspaceDiff?.addEventListener(\n        WorkspaceDiff.WorkspaceDiff.Events.MODIFIED_STATUS_CHANGED, this.#onDiffModifiedStatusChanged, this);\n    void this.#initializeModifiedUISourceCodes();\n  }\n\n  override willHide(): void {\n    this.#workspaceDiff?.removeEventListener(\n        WorkspaceDiff.WorkspaceDiff.Events.MODIFIED_STATUS_CHANGED, this.#onDiffModifiedStatusChanged, this);\n  }\n\n  set workspaceDiff(workspaceDiff: WorkspaceDiff.WorkspaceDiff.WorkspaceDiffImpl) {\n    this.#workspaceDiff = workspaceDiff;\n    void this.#initializeModifiedUISourceCodes();\n  }\n\n  async #onCopyFileContent(fileUrl: string): Promise<void> {\n    const file = this.#modifiedUISourceCodes.find(uiSource => uiSource.url() === fileUrl);\n    if (!file) {\n      return;\n    }\n    const content = file.workingCopyContentData();\n    if (!content.isTextContent) {\n      return;\n    }\n\n    CopyToClipboard.copyTextToClipboard(content.text, i18nString(UIStrings.copied));\n    this.#copiedFiles[fileUrl] = true;\n    this.requestUpdate();\n    setTimeout(() => {\n      delete this.#copiedFiles[fileUrl];\n      this.requestUpdate();\n    }, COPIED_TO_CLIPBOARD_TEXT_TIMEOUT_MS);\n  }\n\n  #onFileNameClick(fileUrl: string): void {\n    const uiSourceCode = this.#modifiedUISourceCodes.find(uiSourceCode => uiSourceCode.url() === fileUrl);\n    void Common.Revealer.reveal(uiSourceCode);\n  }\n\n  async #initializeModifiedUISourceCodes(): Promise<void> {\n    if (!this.#workspaceDiff) {\n      return;\n    }\n\n    const currentModifiedUISourceCodes = this.#modifiedUISourceCodes;\n    const nextModifiedUISourceCodes = this.#workspaceDiff.modifiedUISourceCodes();\n\n    // Find the now non modified UI source codes and unsubscribe from their diff changes.\n    const nowNonModifiedUISourceCodes =\n        currentModifiedUISourceCodes.filter(uiSourceCode => !nextModifiedUISourceCodes.includes(uiSourceCode));\n    nowNonModifiedUISourceCodes.forEach(\n        nonModifiedUISourceCode =>\n            this.#workspaceDiff?.unsubscribeFromDiffChange(nonModifiedUISourceCode, this.requestUpdate, this));\n\n    // Find the newly modified UI source codes and subscribe for their diff changes.\n    const newlyModifiedUISourceCodes =\n        nextModifiedUISourceCodes.filter(uiSourceCode => !currentModifiedUISourceCodes.includes(uiSourceCode));\n    newlyModifiedUISourceCodes.forEach(\n        modifiedUISourceCode =>\n            this.#workspaceDiff?.subscribeToDiffChange(modifiedUISourceCode, this.requestUpdate, this));\n    this.#modifiedUISourceCodes = nextModifiedUISourceCodes;\n\n    if (this.isShowing()) {\n      this.requestUpdate();\n    }\n  }\n\n  async #onDiffModifiedStatusChanged(): Promise<void> {\n    if (!this.#workspaceDiff) {\n      return;\n    }\n\n    await this.#initializeModifiedUISourceCodes();\n  }\n\n  override async performUpdate(): Promise<void> {\n    const uiSourceCodeAndDiffs = (await Promise.all(this.#modifiedUISourceCodes.map(async modifiedUISourceCode => {\n                                   for (const ignoredUrl of this.ignoredUrls) {\n                                     if (modifiedUISourceCode.url().startsWith(ignoredUrl)) {\n                                       return;\n                                     }\n                                   }\n\n                                   // `requestDiff` caches the response from the previous `requestDiff` calls if the file did not change\n                                   // so we can safely call it here without concerns for performance.\n                                   const diffResponse = await this.#workspaceDiff?.requestDiff(modifiedUISourceCode);\n                                   if (!diffResponse || diffResponse.diff.length === 0) {\n                                     return;\n                                   }\n\n                                   return {\n                                     diff: diffResponse.diff,\n                                     uiSourceCode: modifiedUISourceCode,\n                                   };\n                                 }))).filter(uiSourceCodeAndDiff => !!uiSourceCodeAndDiff);\n\n    const singleDiffViewInputs =\n        uiSourceCodeAndDiffs\n            .map(({uiSourceCode, diff}) => {\n              let displayText = uiSourceCode.fullDisplayName();\n              // If the UISourceCode is backed by a workspace, we show the path as \"{workspace-name}/path/relative/to/workspace\"\n              const fileSystemUiSourceCode =\n                  Persistence.Persistence.PersistenceImpl.instance().fileSystem(uiSourceCode);\n              if (fileSystemUiSourceCode) {\n                displayText = [\n                  fileSystemUiSourceCode.project().displayName(),\n                  ...Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.relativePath(\n                      fileSystemUiSourceCode)\n                ].join('/');\n              }\n              return {\n                diff,\n                fileName: `${uiSourceCode.isDirty() ? '*' : ''}${displayText}`,\n                fileUrl: uiSourceCode.url(),\n                mimeType: uiSourceCode.mimeType(),\n                icon: PanelUtils.PanelUtils.getIconForSourceFile(uiSourceCode, {width: 18, height: 18}),\n                copied: this.#copiedFiles[uiSourceCode.url()],\n                onCopy: this.#onCopyFileContent.bind(this),\n                onFileNameClick: this.#onFileNameClick.bind(this),\n              };\n            })\n            .sort((a, b) => Platform.StringUtilities.compare(a.fileName, b.fileName));\n\n    this.#view({singleDiffViewInputs}, undefined, this.contentElement);\n  }\n}\n"]}