{"version":3,"file":"BadgeNotification.js","sourceRoot":"","sources":["../../../../../../front_end/panels/common/BadgeNotification.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Lit from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport badgeNotificationStyles from './badgeNotification.css.js';\n\nconst {html, render} = Lit;\n\nconst UIStrings = {\n  /**\n   * @description Title for close button\n   */\n  dismiss: 'Dismiss',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/common/BadgeNotification.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface BadgeNotificationAction {\n  label: string;\n  jslogContext?: string;\n  title?: string;\n  onClick: () => void;\n}\n\nexport interface BadgeNotificationProperties {\n  message: Lit.LitTemplate;\n  imageUri: string;\n  actions: BadgeNotificationAction[];\n}\n\nexport interface ViewInput extends BadgeNotificationProperties {\n  onCloseClick: () => void;\n}\n\n// clang-format off\nconst DEFAULT_VIEW = (input: ViewInput, _output: undefined, target: HTMLElement): void => {\n  const actionButtons = input.actions.map(property => {\n    return html`<devtools-button\n        class=\"notification-button\"\n        @click=${() => property.onClick()}\n        jslog=${VisualLogging.action(property.jslogContext).track({click: true})}\n        .variant=${Buttons.Button.Variant.TEXT}\n        .title=${property.title ?? ''}\n        .inverseColorTheme=${true}\n    >${property.label}</devtools-button>`;\n  });\n\n  const crossButton = html`<devtools-button\n        class=\"dismiss notification-button\"\n        @click=${input.onCloseClick}\n        jslog=${VisualLogging.action('badge-notification.dismiss').track({click: true})}\n        aria-label=${i18nString(UIStrings.dismiss)}\n        .iconName=${'cross'}\n        .variant=${Buttons.Button.Variant.ICON}\n        .title=${i18nString(UIStrings.dismiss)}\n        .inverseColorTheme=${true}\n    ></devtools-button>`;\n\n  render(html`\n    <style>${badgeNotificationStyles}</style>\n    <div class=\"container\">\n        <div class=\"label-container\">\n            <img class=\"badge-image\" src=${input.imageUri}>\n            <div class=\"message\">${input.message}</div>\n            ${crossButton}\n        </div>\n        <div class=\"long-action-container\">${actionButtons}</div>\n    </div>\n  `, target);\n};\n// clang-format on\n\ntype View = typeof DEFAULT_VIEW;\n\nexport class BadgeNotification extends UI.Widget.Widget {\n  message: Lit.LitTemplate = html``;\n  imageUri = '';\n  actions: BadgeNotificationAction[] = [];\n\n  #view: View;\n\n  constructor(element?: HTMLElement, view: View = DEFAULT_VIEW) {\n    super(element);\n    this.#view = view;\n  }\n\n  static show(properties: BadgeNotificationProperties): BadgeNotification {\n    const widget = new BadgeNotification();\n    widget.message = properties.message;\n    widget.imageUri = properties.imageUri;\n    widget.actions = properties.actions;\n    widget.show(UI.InspectorView.InspectorView.instance().element);\n    return widget;\n  }\n\n  #close = (): void => {\n    this.detach();\n  };\n\n  override wasShown(): void {\n    super.wasShown();\n    this.requestUpdate();\n  }\n\n  override performUpdate(): void {\n    const viewInput: ViewInput = {\n      message: this.message,\n      imageUri: this.imageUri,\n      actions: this.actions,\n      onCloseClick: this.#close,\n    };\n    this.#view(viewInput, undefined, this.contentElement);\n  }\n}\n"]}