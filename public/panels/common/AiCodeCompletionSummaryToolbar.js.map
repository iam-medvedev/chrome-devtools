{"version":3,"file":"AiCodeCompletionSummaryToolbar.js","sourceRoot":"","sources":["../../../../../../front_end/panels/common/AiCodeCompletionSummaryToolbar.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../ui/components/spinners/spinners.js';\nimport '../../ui/components/tooltips/tooltips.js';\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {Directives, html, nothing, render} from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport styles from './aiCodeCompletionSummaryToolbar.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Disclaimer text for AI code completion\n   */\n  relevantData: 'Relevant data',\n  /**\n   * @description Disclaimer text for AI code completion\n   */\n  isSentToGoogle: 'is sent to Google',\n  /**\n   * @description Text for tooltip shown on hovering over \"Relevant Data\" in the disclaimer text for AI code completion.\n   */\n  tooltipDisclaimerTextForAiCodeCompletion:\n      'To generate code suggestions, your console input and the history of your current console session are shared with Google. This data may be seen by human reviewers to improve this feature.',\n  /**\n   * @description Text for tooltip shown on hovering over \"Relevant Data\" in the disclaimer text for AI code completion.\n   */\n  tooltipDisclaimerTextForAiCodeCompletionNoLogging:\n      'To generate code suggestions, your console input and the history of your current console session are shared with Google. This data will not be used to improve Googleâ€™s AI models.',\n  /**\n   * @description Text for tooltip button which redirects to AI settings\n   */\n  manageInSettings: 'Manage in settings',\n  /**\n   * @description Text for recitation notice\n   */\n  generatedCodeMayBeSubjectToALicense: 'Generated code may be subject to a license.',\n  /**\n   * @description Text for citations\n   */\n  viewSources: 'View Sources',\n} as const;\n\nconst lockedString = i18n.i18n.lockedString;\n\nexport interface ViewInput {\n  disclaimerTooltipId: string;\n  panelName: string;\n  citations?: string[];\n  citationsTooltipId: string;\n  noLogging: boolean;\n  onManageInSettingsTooltipClick: () => void;\n}\n\nexport interface ViewOutput {\n  hideTooltip?: () => void;\n  setLoading?: (isLoading: boolean) => void;\n}\n\nexport type View = (input: ViewInput, output: ViewOutput, target: HTMLElement) => void;\n\nexport const DEFAULT_SUMMARY_TOOLBAR_VIEW: View = (input, output, target) => {\n  // clang-format off\n    const recitationNotice = input.citations && input.citations.length > 0 ?\n        html`<div class=\"ai-code-completion-recitation-notice\">${lockedString(UIStrings.generatedCodeMayBeSubjectToALicense)}\n                <span class=\"link\"\n                    role=\"link\"\n                    aria-details=${input.citationsTooltipId}\n                    aria-describedby=${input.citationsTooltipId}\n                    tabIndex=\"0\">\n                  ${lockedString(UIStrings.viewSources)}&nbsp;${lockedString('(' + input.citations.length + ')')}</span>\n                <devtools-tooltip\n                    id=${input.citationsTooltipId}\n                    variant=${'rich'}\n                    jslogContext=${input.panelName + '.ai-code-completion-citations'}\n                ><div class=\"citations-tooltip-container\">\n                    ${Directives.repeat(input.citations, citation => html`<x-link\n                        tabIndex=\"0\"\n                        href=${citation}\n                        jslog=${VisualLogging.link(input.panelName + '.ai-code-completion-citations.citation-link').track({\n                            click: true\n                        })}>${citation}</x-link>`)}</div></devtools-tooltip>\n            </div>` : nothing;\n\n    render(\n        html`\n        <style>${UI.Widget.widgetScoped(styles)}</style>\n        <div class=\"ai-code-completion-summary-toolbar\">\n            <div class=\"ai-code-completion-disclaimer\">\n                <devtools-spinner\n                  .active=${false}\n                  ${Directives.ref(el => {\n                    if (el instanceof HTMLElement) {\n                      output.setLoading = (isLoading: boolean) => {\n                        el.toggleAttribute('active', isLoading);\n                      };\n                    }\n                  })}></devtools-spinner>\n                <span\n                    tabIndex=\"0\"\n                    class=\"link\"\n                    role=\"link\"\n                    jslog=${VisualLogging.link('open-ai-settings').track({\n                        click: true,\n                    })}\n                    aria-details=${input.disclaimerTooltipId}\n                    aria-describedby=${input.disclaimerTooltipId}\n                    @click=${() => {\n                        void UI.ViewManager.ViewManager.instance().showView('chrome-ai');\n                    }}\n                >${lockedString(UIStrings.relevantData)}</span>${lockedString(UIStrings.isSentToGoogle)}\n                <devtools-tooltip\n                    id=${input.disclaimerTooltipId}\n                    variant=${'rich'}\n                    jslogContext=${input.panelName + '.ai-code-completion-disclaimer'}\n                    ${Directives.ref(el => {\n                      if (el instanceof HTMLElement) {\n                        output.hideTooltip = () => {\n                          el.hidePopover();\n                        };\n                      }\n                    })}\n                ><div class=\"disclaimer-tooltip-container\">\n                    <div class=\"tooltip-text\">\n                      ${input.noLogging ? lockedString(UIStrings.tooltipDisclaimerTextForAiCodeCompletionNoLogging) : lockedString(UIStrings.tooltipDisclaimerTextForAiCodeCompletion)}\n                    </div>\n                    <span\n                        class=\"link\"\n                        role=\"link\"\n                        jslog=${VisualLogging.link('open-ai-settings').track({\n                            click: true,\n                        })}\n                        @click=${input.onManageInSettingsTooltipClick}\n                    >${lockedString(UIStrings.manageInSettings)}</span></div></devtools-tooltip>\n            </div>\n            ${recitationNotice}\n        </div>\n        `, target);\n    // clang-format on\n};\n\nconst MINIMUM_LOADING_STATE_TIMEOUT = 1000;\n\nexport class AiCodeCompletionSummaryToolbar extends UI.Widget.Widget {\n  readonly #view: View;\n  #viewOutput: ViewOutput = {};\n\n  #disclaimerTooltipId: string;\n  #citationsTooltipId: string;\n  #panelName: string;\n  #citations: string[] = [];\n  #noLogging: boolean;  // Whether the enterprise setting is `ALLOW_WITHOUT_LOGGING` or not.\n  #loading = false;\n  #loadingStartTime = 0;\n  #spinnerLoadingTimeout: number|undefined;\n\n  constructor(disclaimerTooltipId: string, citationsTooltipId: string, panelName: string, view?: View) {\n    super();\n    this.#disclaimerTooltipId = disclaimerTooltipId;\n    this.#citationsTooltipId = citationsTooltipId;\n    this.#panelName = panelName;\n    this.#noLogging = Root.Runtime.hostConfig.aidaAvailability?.enterprisePolicyValue ===\n        Root.Runtime.GenAiEnterprisePolicyValue.ALLOW_WITHOUT_LOGGING;\n    this.#view = view ?? DEFAULT_SUMMARY_TOOLBAR_VIEW;\n    this.requestUpdate();\n  }\n\n  #onManageInSettingsTooltipClick(): void {\n    this.#viewOutput.hideTooltip?.();\n    void UI.ViewManager.ViewManager.instance().showView('chrome-ai');\n  }\n\n  setLoading(loading: boolean): void {\n    if (!loading && !this.#loading) {\n      return;\n    }\n\n    if (loading) {\n      if (!this.#loading) {\n        this.#viewOutput.setLoading?.(true);\n      }\n      if (this.#spinnerLoadingTimeout) {\n        clearTimeout(this.#spinnerLoadingTimeout);\n        this.#spinnerLoadingTimeout = undefined;\n      }\n      this.#loadingStartTime = performance.now();\n      this.#loading = true;\n    } else {\n      this.#loading = false;\n      const duration = performance.now() - this.#loadingStartTime;\n      const remainingTime = Math.max(MINIMUM_LOADING_STATE_TIMEOUT - duration, 0);\n      this.#spinnerLoadingTimeout = window.setTimeout(() => {\n        this.#viewOutput.setLoading?.(false);\n        this.#spinnerLoadingTimeout = undefined;\n      }, remainingTime);\n    }\n  }\n\n  updateCitations(citations: string[]): void {\n    citations.forEach(citation => {\n      if (!this.#citations.includes(citation)) {\n        this.#citations.push(citation);\n      }\n    });\n    this.requestUpdate();\n  }\n\n  clearCitations(): void {\n    this.#citations = [];\n    this.requestUpdate();\n  }\n\n  override performUpdate(): void {\n    this.#view(\n        {\n          disclaimerTooltipId: this.#disclaimerTooltipId,\n          citations: this.#citations,\n          citationsTooltipId: this.#citationsTooltipId,\n          panelName: this.#panelName,\n          noLogging: this.#noLogging,\n          onManageInSettingsTooltipClick: this.#onManageInSettingsTooltipClick.bind(this),\n        },\n        this.#viewOutput, this.contentElement);\n  }\n}\n"]}