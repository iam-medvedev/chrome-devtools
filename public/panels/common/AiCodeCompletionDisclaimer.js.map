{"version":3,"file":"AiCodeCompletionDisclaimer.js","sourceRoot":"","sources":["../../../../../../front_end/panels/common/AiCodeCompletionDisclaimer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../ui/components/spinners/spinners.js';\nimport '../../ui/components/tooltips/tooltips.js';\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport {Directives, html, nothing, render} from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport styles from './aiCodeCompletionDisclaimer.css.js';\n\nconst UIStringsNotTranslate = {\n  /**\n   * @description Disclaimer text for AI code completion\n   */\n  relevantData: 'Relevant data',\n  /**\n   * @description Disclaimer text for AI code completion\n   */\n  isSentToGoogle: 'is sent to Google',\n  /**\n   * @description Text for tooltip shown on hovering over \"Relevant Data\" in the disclaimer text for AI code completion.\n   */\n  tooltipDisclaimerTextForAiCodeCompletion:\n      'To generate code suggestions, your console input and the history of your current console session are shared with Google. This data may be seen by human reviewers to improve this feature.',\n  /**\n   * @description Text for tooltip shown on hovering over \"Relevant Data\" in the disclaimer text for AI code completion.\n   */\n  tooltipDisclaimerTextForAiCodeCompletionNoLogging:\n      'To generate code suggestions, your console input and the history of your current console session are shared with Google. This data will not be used to improve Googleâ€™s AI models.',\n  /**\n   * @description Text for tooltip button which redirects to AI settings\n   */\n  manageInSettings: 'Manage in settings',\n  /**\n   *@description Text announced when request is sent to AIDA and the spinner is loading\n   */\n  dataIsBeingSentToGoogle: 'Data is being sent to Google',\n} as const;\n\nconst lockedString = i18n.i18n.lockedString;\n\nexport interface ViewInput {\n  disclaimerTooltipId?: string;\n  noLogging: boolean;\n  onManageInSettingsTooltipClick: () => void;\n}\n\nexport interface ViewOutput {\n  hideTooltip?: () => void;\n  setLoading?: (isLoading: boolean) => void;\n}\n\nexport type View = (input: ViewInput, output: ViewOutput, target: HTMLElement) => void;\n\nexport const DEFAULT_SUMMARY_TOOLBAR_VIEW: View =\n    (input, output, target) => {\n      if (!input.disclaimerTooltipId) {\n        render(nothing, target);\n        return;\n      }\n      // clang-format off\n  render(\n    html`\n        <style>${styles}</style>\n        <div class=\"ai-code-completion-disclaimer\"><devtools-spinner\n          .active=${false}\n          ${Directives.ref(el => {\n            if (el instanceof HTMLElement) {\n              output.setLoading = (isLoading: boolean) => {\n                el.toggleAttribute('active', isLoading);\n              };\n            }\n          })}></devtools-spinner>\n          <span\n              tabIndex=\"0\"\n              class=\"link\"\n              role=\"link\"\n              jslog=${VisualLogging.link('open-ai-settings').track({\n                click: true,\n              })}\n              aria-details=${input.disclaimerTooltipId}\n              aria-describedby=${input.disclaimerTooltipId}\n              @click=${() => {\n                void UI.ViewManager.ViewManager.instance().showView('chrome-ai');\n              }}\n          >${lockedString(UIStringsNotTranslate.relevantData)}</span>${lockedString(UIStringsNotTranslate.isSentToGoogle)}\n          <devtools-tooltip\n              id=${input.disclaimerTooltipId}\n              variant=${'rich'}\n              jslogContext=${'ai-code-completion-disclaimer'}\n              ${Directives.ref(el => {\n                if (el instanceof HTMLElement) {\n                  output.hideTooltip = () => {\n                    el.hidePopover();\n                  };\n                }\n              })}>\n            <div class=\"disclaimer-tooltip-container\"><div class=\"tooltip-text\">\n                ${input.noLogging ? lockedString(UIStringsNotTranslate.tooltipDisclaimerTextForAiCodeCompletionNoLogging) : lockedString(UIStringsNotTranslate.tooltipDisclaimerTextForAiCodeCompletion)}\n                </div>\n                <span\n                    class=\"link\"\n                    role=\"link\"\n                    jslog=${VisualLogging.link('open-ai-settings').track({\n                      click: true,\n                    })}\n                    @click=${input.onManageInSettingsTooltipClick}\n                >${lockedString(UIStringsNotTranslate.manageInSettings)}</span></div></devtools-tooltip>\n          </div>\n        `, target);\n      // clang-format on\n    };\n\nconst MINIMUM_LOADING_STATE_TIMEOUT = 1000;\n\nexport class AiCodeCompletionDisclaimer extends UI.Widget.Widget {\n  readonly #view: View;\n  #viewOutput: ViewOutput = {};\n\n  #disclaimerTooltipId?: string;\n  #noLogging: boolean;  // Whether the enterprise setting is `ALLOW_WITHOUT_LOGGING` or not.\n  #loading = false;\n  #loadingStartTime = 0;\n  #spinnerLoadingTimeout: number|undefined;\n\n  constructor(element?: HTMLElement, view: View = DEFAULT_SUMMARY_TOOLBAR_VIEW) {\n    super(element);\n    this.markAsExternallyManaged();\n    this.#noLogging = Root.Runtime.hostConfig.aidaAvailability?.enterprisePolicyValue ===\n        Root.Runtime.GenAiEnterprisePolicyValue.ALLOW_WITHOUT_LOGGING;\n    this.#view = view;\n  }\n\n  set disclaimerTooltipId(disclaimerTooltipId: string) {\n    this.#disclaimerTooltipId = disclaimerTooltipId;\n    this.requestUpdate();\n  }\n\n  set loading(loading: boolean) {\n    if (!loading && !this.#loading) {\n      return;\n    }\n\n    if (loading) {\n      if (!this.#loading) {\n        this.#viewOutput.setLoading?.(true);\n        UI.ARIAUtils.LiveAnnouncer.status(lockedString(UIStringsNotTranslate.dataIsBeingSentToGoogle));\n      }\n      if (this.#spinnerLoadingTimeout) {\n        clearTimeout(this.#spinnerLoadingTimeout);\n        this.#spinnerLoadingTimeout = undefined;\n      }\n      this.#loadingStartTime = performance.now();\n      this.#loading = true;\n    } else {\n      this.#loading = false;\n      const duration = performance.now() - this.#loadingStartTime;\n      const remainingTime = Math.max(MINIMUM_LOADING_STATE_TIMEOUT - duration, 0);\n      this.#spinnerLoadingTimeout = window.setTimeout(() => {\n        this.#viewOutput.setLoading?.(false);\n        this.#spinnerLoadingTimeout = undefined;\n      }, remainingTime);\n    }\n  }\n\n  #onManageInSettingsTooltipClick(): void {\n    this.#viewOutput.hideTooltip?.();\n    void UI.ViewManager.ViewManager.instance().showView('chrome-ai');\n  }\n\n  override performUpdate(): void {\n    this.#view(\n        {\n          disclaimerTooltipId: this.#disclaimerTooltipId,\n          noLogging: this.#noLogging,\n          onManageInSettingsTooltipClick: this.#onManageInSettingsTooltipClick.bind(this),\n        },\n        this.#viewOutput, this.contentElement);\n  }\n}\n"]}