{"version":3,"file":"AiCodeCompletionTeaser.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/common/AiCodeCompletionTeaser.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Root from '../../core/root/root.js';\nimport {renderElementIntoDOM} from '../../testing/DOMHelpers.js';\nimport {describeWithEnvironment, updateHostConfig} from '../../testing/EnvironmentHelpers.js';\nimport {createViewFunctionStub} from '../../testing/ViewFunctionHelpers.js';\nimport * as Snackbars from '../../ui/components/snackbars/snackbars.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as PanelCommon from './common.js';\n\nconst {AiCodeCompletionTeaser, FreDialog} = PanelCommon;\n\ndescribeWithEnvironment('AiCodeCompletionTeaser', () => {\n  let showFreDialogStub: sinon.SinonStub<Parameters<typeof FreDialog.show>, Promise<boolean>>;\n  let checkAccessPreconditionsStub: sinon.SinonStub;\n\n  beforeEach(() => {\n    showFreDialogStub = sinon.stub(FreDialog, 'show');\n    checkAccessPreconditionsStub = sinon.stub(Host.AidaClient.AidaClient, 'checkAccessPreconditions');\n    checkAccessPreconditionsStub.resolves(Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n  });\n\n  async function createTeaser() {\n    const view = createViewFunctionStub(AiCodeCompletionTeaser);\n    const widget = new AiCodeCompletionTeaser({onDetach: sinon.stub()}, view);\n    widget.markAsRoot();\n    renderElementIntoDOM(widget);\n    await view.nextInput;\n    return {view, widget};\n  }\n\n  afterEach(() => {\n    Common.Settings.Settings.instance().settingForTest('ai-code-completion-teaser-dismissed').set(false);\n    Common.Settings.Settings.instance().settingForTest('ai-code-completion-enabled').set(false);\n  });\n\n  it('should dismiss and open snackbar on dismiss click', async () => {\n    const {view, widget} = await createTeaser();\n    const showSnackbar = sinon.stub(Snackbars.Snackbar.Snackbar, 'show');\n\n    assert.isTrue(widget.isShowing());\n    assert.exists(view.input.onDismiss);\n    view.input.onDismiss(new Event('click'));\n    await widget.updateComplete;\n\n    sinon.assert.calledOnce(showSnackbar);\n    assert.isTrue(Common.Settings.Settings.instance().settingForTest('ai-code-completion-teaser-dismissed').get());\n    assert.isFalse(widget.isShowing());\n  });\n\n  it('should open settings on snackbar action click', async () => {\n    const {view, widget} = await createTeaser();\n    const showSnackbar = sinon.stub(Snackbars.Snackbar.Snackbar, 'show');\n    const showViewStub = sinon.stub(UI.ViewManager.ViewManager.instance(), 'showView');\n    assert.exists(view.input.onDismiss);\n    view.input.onDismiss(new Event('click'));\n\n    sinon.assert.calledOnce(showSnackbar);\n    const snackbarOptions = showSnackbar.firstCall.args[0];\n    assert.exists(snackbarOptions.actionProperties);\n    snackbarOptions.actionProperties.onClick();\n\n    assert.isTrue(showViewStub.calledOnceWith('chrome-ai'));\n    widget.detach();\n  });\n\n  it('should FRE text include no logging case when the enterprise policy value is ALLOW_WITHOUT_LOGGING', async () => {\n    updateHostConfig(\n        {aidaAvailability: {enterprisePolicyValue: Root.Runtime.GenAiEnterprisePolicyValue.ALLOW_WITHOUT_LOGGING}});\n\n    const {view, widget} = await createTeaser();\n    view.input.onAction(new Event(''));\n\n    sinon.assert.called(showFreDialogStub);\n    assert.exists(showFreDialogStub.lastCall.args[0].reminderItems.find(\n        reminderItem =>\n            reminderItem.content.toString().includes('This data will not be used to improve Google’s AI models.')));\n    widget.detach();\n  });\n\n  it('should FRE text not include no logging case when the enterprise policy value is ALLOW', async () => {\n    updateHostConfig({aidaAvailability: {enterprisePolicyValue: Root.Runtime.GenAiEnterprisePolicyValue.ALLOW}});\n\n    const {view, widget} = await createTeaser();\n    view.input.onAction(new Event(''));\n\n    sinon.assert.called(showFreDialogStub);\n    assert.notExists(showFreDialogStub.lastCall.args[0].reminderItems.find(\n        reminderItem =>\n            reminderItem.content.toString().includes('This data will not be used to improve Google’s AI models.')));\n    widget.detach();\n  });\n\n  it('renders when AIDA becomes available', async () => {\n    checkAccessPreconditionsStub.resolves(Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL);\n\n    const {view, widget} = await createTeaser();\n\n    assert.strictEqual(view.input.aidaAvailability, Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL);\n\n    checkAccessPreconditionsStub.resolves(Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    Host.AidaClient.HostConfigTracker.instance().dispatchEventToListeners(\n        Host.AidaClient.Events.AIDA_AVAILABILITY_CHANGED);\n\n    await view.nextInput;\n\n    assert.strictEqual(view.input.aidaAvailability, Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    widget.detach();\n  });\n\n  it('does not render when AIDA becomes unavailable', async () => {\n    checkAccessPreconditionsStub.resolves(Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n\n    const {view, widget} = await createTeaser();\n\n    assert.strictEqual(view.input.aidaAvailability, Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n\n    checkAccessPreconditionsStub.resolves(Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL);\n    Host.AidaClient.HostConfigTracker.instance().dispatchEventToListeners(\n        Host.AidaClient.Events.AIDA_AVAILABILITY_CHANGED);\n\n    await view.nextInput;\n\n    assert.strictEqual(view.input.aidaAvailability, Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL);\n    widget.detach();\n  });\n});\n"]}