{"version":3,"file":"BadgeNotification.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/common/BadgeNotification.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Badges from '../../models/badges/badges.js';\nimport {\n  renderElementIntoDOM,\n} from '../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {createViewFunctionStub} from '../../testing/ViewFunctionHelpers.js';\n\nimport * as PanelCommon from './common.js';\n\nclass TestBadge extends Badges.Badge {\n  override name = 'testBadge';\n  override title = 'title';\n  override jslogContext = 'test-badge-jslogcontext';\n  override imageUri = 'image-uri';\n  override interestedActions: readonly Badges.BadgeAction[] = [];\n  override handleAction(): void {\n    throw new Error('Method not implemented.');\n  }\n}\n\nclass TestStarterBadge extends Badges.Badge {\n  override name = 'testStarterBadge';\n  override title = 'starterBadgeTitle';\n  override jslogContext = 'starter-badge-jslogcontext';\n  override imageUri = 'starter-badge-image-uri';\n  override isStarterBadge = true;\n  override interestedActions: readonly Badges.BadgeAction[] = [];\n  override handleAction(): void {\n    throw new Error('Method not implemented.');\n  }\n}\n\nfunction createMockBadge(badgeCtor: new (badgeContext: Badges.BadgeContext) => Badges.Badge): Badges.Badge {\n  return new badgeCtor({\n    onTriggerBadge: () => {},\n    badgeActionEventTarget: new Common.ObjectWrapper.ObjectWrapper<Badges.BadgeActionEvents>(),\n  });\n}\n\nfunction assertMessageIncludes(messageInput: HTMLElement|string, textToInclude: string): void {\n  let actualText: string;\n  if (messageInput instanceof HTMLElement) {\n    actualText = messageInput.textContent;\n  } else {\n    actualText = messageInput;\n  }\n  assert.include(actualText, textToInclude);\n}\n\ndescribeWithEnvironment('BadgeNotification', () => {\n  async function createWidget(properties?: Partial<PanelCommon.BadgeNotification>) {\n    const view = createViewFunctionStub(PanelCommon.BadgeNotification);\n    const widget = new PanelCommon.BadgeNotification(undefined, view);\n    widget.message = properties?.message ?? 'Test message';\n    widget.imageUri = properties?.imageUri ?? 'test.png';\n    widget.actions = properties?.actions ?? [];\n    renderElementIntoDOM(widget, {allowMultipleChildren: true});\n    widget.requestUpdate();\n    await view.nextInput;\n    return {view, widget};\n  }\n\n  it('invokes action callback on click', async () => {\n    const action1Spy = sinon.spy();\n    const {view, widget} = await createWidget({actions: [{jslogContext: '', label: 'Action 1', onClick: action1Spy}]});\n\n    view.input.actions[0].onClick();\n    sinon.assert.calledOnce(action1Spy);\n\n    widget.detach();\n  });\n\n  it('is removed on close click', async () => {\n    const {view, widget} = await createWidget();\n    assert.isTrue(document.body.contains(widget.element));\n\n    view.input.onDismissClick();\n    assert.isFalse(document.body.contains(widget.element));\n\n    widget.detach();\n  });\n\n  it('presents an activity-based badge', async () => {\n    const {view, widget} = await createWidget();\n    const badge = createMockBadge(TestBadge);\n\n    await widget.present(badge);\n    const input = await view.nextInput;\n\n    assert.strictEqual(input.imageUri, badge.imageUri);\n    assert.lengthOf(input.actions, 2);\n    assert.strictEqual(input.actions[0].label, 'Manage settings');\n    assert.strictEqual(input.actions[1].label, 'View profile');\n    assertMessageIncludes(input.message, 'It’s been added to your Developer Profile.');\n\n    widget.detach();\n  });\n\n  it('presents a starter badge as an activity-based badge if the user has a profile and has enabled badges',\n     async () => {\n       sinon.stub(Host.GdpClient.GdpClient.instance(), 'getProfile').resolves({} as Host.GdpClient.Profile);\n       sinon.stub(Badges.UserBadges.instance(), 'isReceiveBadgesSettingEnabled').returns(true);\n\n       const {view, widget} = await createWidget();\n       const badge = createMockBadge(TestStarterBadge);\n\n       await widget.present(badge);\n       const input = await view.nextInput;\n\n       // Should fall back to the activity-based badge flow.\n       assert.strictEqual(input.imageUri, 'starter-badge-image-uri');\n       assert.lengthOf(input.actions, 2);\n       assert.strictEqual(input.actions[0].label, 'Manage settings');\n       assert.strictEqual(input.actions[1].label, 'View profile');\n       assertMessageIncludes(input.message, 'It’s been added to your Developer Profile.');\n\n       widget.detach();\n     });\n\n  it('presents a starter badge with an opt-in message if the user has a profile but has disabled badges', async () => {\n    sinon.stub(Host.GdpClient.GdpClient.instance(), 'getProfile').resolves({} as Host.GdpClient.Profile);\n    sinon.stub(Badges.UserBadges.instance(), 'isReceiveBadgesSettingEnabled').returns(false);\n\n    const {view, widget} = await createWidget();\n    const badge = createMockBadge(TestStarterBadge);\n\n    await widget.present(badge);\n    const input = await view.nextInput;\n\n    assert.strictEqual(input.imageUri, badge.imageUri);\n    assert.lengthOf(input.actions, 2);\n    assert.strictEqual(input.actions[0].label, 'Remind me later');\n    assert.strictEqual(input.actions[1].label, 'Turn on badges');\n    assertMessageIncludes(input.message, 'Turn on badges to claim it.');\n\n    widget.detach();\n  });\n\n  it('presents a starter badge with a create profile message if the user does not have a profile', async () => {\n    sinon.stub(Host.GdpClient.GdpClient.instance(), 'getProfile').resolves(null);\n\n    const {view, widget} = await createWidget();\n    const badge = createMockBadge(TestStarterBadge);\n\n    await widget.present(badge);\n    const input = await view.nextInput;\n\n    assert.strictEqual(input.imageUri, badge.imageUri);\n    assert.lengthOf(input.actions, 2);\n    assert.strictEqual(input.actions[0].label, 'Remind me later');\n    assert.strictEqual(input.actions[1].label, 'Create profile');\n    assertMessageIncludes(input.message, 'Create a profile to claim your badge.');\n\n    widget.detach();\n  });\n\n  it('Calls snoozeStarterBadge when the GDP sign up dialog is opened from starter badge and is canceled', async () => {\n    sinon.stub(Host.GdpClient.GdpClient.instance(), 'getProfile').resolves(null);\n    const snoozeStarterBadgeStub = sinon.stub(Badges.UserBadges.instance(), 'snoozeStarterBadge');\n    const gdpSignUpDialogShowStub = sinon.stub(PanelCommon.GdpSignUpDialog, 'show');\n\n    const {view, widget} = await createWidget();\n    const badge = createMockBadge(TestStarterBadge);\n\n    await widget.present(badge);\n    const input = await view.nextInput;\n\n    assert.strictEqual(input.actions[1].label, 'Create profile');\n    input.actions[1].onClick();\n    sinon.assert.calledOnce(gdpSignUpDialogShowStub);\n\n    const showArgs = gdpSignUpDialogShowStub.lastCall.args[0];\n    showArgs!.onCancel!();\n\n    sinon.assert.calledOnce(snoozeStarterBadgeStub);\n    widget.detach();\n  });\n\n  describe('dismissing', () => {\n    it('a starter badge notification calls `dismissStarterBadge`', async () => {\n      const dismissStarterBadgeSpy = sinon.spy(Badges.UserBadges.instance(), 'dismissStarterBadge');\n      const {view, widget} = await createWidget();\n      const badge = createMockBadge(TestStarterBadge);\n\n      await widget.present(badge);\n      await view.nextInput;\n\n      view.input.onDismissClick();\n\n      sinon.assert.calledOnce(dismissStarterBadgeSpy);\n      assert.isFalse(document.body.contains(widget.element));\n      widget.detach();\n    });\n\n    it('a non-starter badge notification does not call `dismissStarterBadge`', async () => {\n      const dismissStarterBadgeSpy = sinon.spy(Badges.UserBadges.instance(), 'dismissStarterBadge');\n      const {view, widget} = await createWidget();\n      const badge = createMockBadge(TestBadge);\n\n      await widget.present(badge);\n      await view.nextInput;\n\n      view.input.onDismissClick();\n\n      sinon.assert.notCalled(dismissStarterBadgeSpy);\n      assert.isFalse(document.body.contains(widget.element));\n      widget.detach();\n    });\n  });\n\n  describe('auto-closing', () => {\n    let clock: sinon.SinonFakeTimers;\n    beforeEach(() => {\n      clock = sinon.useFakeTimers({toFake: ['setTimeout', 'clearTimeout']});\n    });\n\n    afterEach(() => {\n      clock.restore();\n    });\n\n    it('a starter badge notification calls `snoozeStarterBadge`', async () => {\n      const snoozeStarterBadgeSpy = sinon.spy(Badges.UserBadges.instance(), 'snoozeStarterBadge');\n      const {widget} = await createWidget();\n      const badge = createMockBadge(TestStarterBadge);\n\n      await widget.present(badge);\n      await clock.tickAsync(30000);\n\n      sinon.assert.calledOnce(snoozeStarterBadgeSpy);\n      assert.isFalse(document.body.contains(widget.element));\n    });\n\n    it('a non-starter badge notification does not call `snoozeStarterBadge`', async () => {\n      const snoozeStarterBadgeSpy = sinon.spy(Badges.UserBadges.instance(), 'snoozeStarterBadge');\n      const {widget} = await createWidget();\n      const badge = createMockBadge(TestBadge);\n\n      await widget.present(badge);\n\n      await clock.tickAsync(30000);\n\n      sinon.assert.notCalled(snoozeStarterBadgeSpy);\n      assert.isFalse(document.body.contains(widget.element));\n    });\n\n    it('is cancelled if the widget is detached manually', async () => {\n      const snoozeStarterBadgeSpy = sinon.spy(Badges.UserBadges.instance(), 'snoozeStarterBadge');\n      const {widget} = await createWidget();\n      const badge = createMockBadge(TestStarterBadge);\n\n      await widget.present(badge);\n      widget.detach();\n      await clock.tickAsync(30000);\n\n      sinon.assert.notCalled(snoozeStarterBadgeSpy);\n    });\n  });\n\n  it('snoozes the badge when \"Remind me later\" is clicked', async () => {\n    sinon.stub(Host.GdpClient.GdpClient.instance(), 'getProfile').resolves(null);\n    const snoozeStarterBadgeSpy = sinon.spy(Badges.UserBadges.instance(), 'snoozeStarterBadge');\n    const {view, widget} = await createWidget();\n    const badge = createMockBadge(TestStarterBadge);\n\n    await widget.present(badge);\n    const input = await view.nextInput;\n\n    const remindMeLaterAction = input.actions.find(action => action.label === 'Remind me later');\n    remindMeLaterAction!.onClick();\n\n    sinon.assert.calledOnce(snoozeStarterBadgeSpy);\n    assert.isFalse(document.body.contains(widget.element));\n  });\n});\n"]}