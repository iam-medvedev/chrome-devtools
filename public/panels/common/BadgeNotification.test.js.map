{"version":3,"file":"BadgeNotification.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/common/BadgeNotification.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  renderElementIntoDOM,\n} from '../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {createViewFunctionStub} from '../../testing/ViewFunctionHelpers.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Lit from '../../ui/lit/lit.js';\n\nimport * as BadgeNotification from './BadgeNotification.js';\n\nconst {html} = Lit;\n\ndescribeWithEnvironment('BadgeNotification', () => {\n  async function createWidget(properties?: Partial<BadgeNotification.BadgeNotificationProperties>) {\n    const view = createViewFunctionStub(BadgeNotification.BadgeNotification);\n    const widget = new BadgeNotification.BadgeNotification(undefined, view);\n    widget.message = properties?.message ?? html`Test message`;\n    widget.imageUri = properties?.imageUri ?? 'test.png';\n    widget.actions = properties?.actions ?? [];\n    widget.markAsRoot();\n    renderElementIntoDOM(widget, {allowMultipleChildren: true});\n    widget.requestUpdate();\n    await view.nextInput;\n    return {view, widget};\n  }\n\n  let inspectorViewRootElementStub: HTMLElement;\n  beforeEach(() => {\n    inspectorViewRootElementStub = document.createElement('div');\n    renderElementIntoDOM(inspectorViewRootElementStub, {allowMultipleChildren: true});\n\n    const inspectorViewStub = sinon.createStubInstance(UI.InspectorView.InspectorView);\n    Object.assign(inspectorViewStub, {element: inspectorViewRootElementStub});\n    sinon.stub(UI.InspectorView.InspectorView, 'instance').returns(inspectorViewStub);\n  });\n\n  it('invokes action callback on click', async () => {\n    const action1Spy = sinon.spy();\n    const {view} = await createWidget({actions: [{label: 'Action 1', onClick: action1Spy}]});\n\n    view.input.actions[0].onClick();\n    sinon.assert.calledOnce(action1Spy);\n  });\n\n  it('is removed on close click', async () => {\n    const {view, widget} = await createWidget();\n    widget.show(inspectorViewRootElementStub);\n    assert.isTrue(inspectorViewRootElementStub.contains(widget.element));\n\n    view.input.onCloseClick();\n    assert.isFalse(inspectorViewRootElementStub.contains(widget.element));\n  });\n});\n"]}