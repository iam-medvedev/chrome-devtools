{"version":3,"file":"SourceOrderView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/accessibility/SourceOrderView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../ui/legacy/legacy.js';\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as UI from '../../ui/legacy/legacy.js';\nimport {html, nothing, render} from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {AccessibilitySubPane} from './AccessibilitySubPane.js';\n\nconst UIStrings = {\n  /**\n   * @description Name of a tool which allows the developer to view the contents of the page in the\n   * 'source order' (the order in which the HTML elements show up in the source code). In the\n   * Accessibility panel.\n   */\n  sourceOrderViewer: 'Source Order Viewer',\n  /**\n   * @description Text in Source Order Viewer of the Accessibility panel shown when the selected node has no child elements\n   */\n  noSourceOrderInformation: 'No source order information available',\n  /**\n   * @description Text in Source Order Viewer of the Accessibility panel shown when the selected node has many child elements\n   */\n  thereMayBeADelayInDisplaying: 'There may be a delay in displaying source order for elements with many children',\n  /**\n   * @description Checkbox label in Source Order Viewer of the Accessibility panel. Source order\n   * means the order in which the HTML elements show up in the source code.\n   */\n  showSourceOrder: 'Show source order',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/accessibility/SourceOrderView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst MAX_CHILD_ELEMENTS_THRESHOLD = 300;\n\ninterface ViewInput {\n  childCount: number;\n  showSourceOrder: boolean|undefined;\n  onShowSourceOrderChanged: (showSourceOrder: boolean) => void;\n}\n\ntype View = (input: ViewInput, output: unknown, target: HTMLElement) => void;\n\nconst DEFAULT_VIEW: View = (input, _output, target) => {\n  function onShowSourceOrderChanged(event: Event): void {\n    const checkbox = event.currentTarget as UI.UIUtils.CheckboxLabel;\n    input.onShowSourceOrderChanged(checkbox.checked);\n    event.consume();\n  }\n\n  // clang-format off\n  render(html`\n    ${input.showSourceOrder === undefined\n      ? html`\n        <div class=\"gray-info-message info-message-overflow\">\n          ${i18nString(UIStrings.noSourceOrderInformation)}\n        </div>\n      `\n      : html`\n      ${input.childCount >= MAX_CHILD_ELEMENTS_THRESHOLD\n        ? html`\n          <div class=\"gray-info-message info-message-overflow\"\n                id=\"source-order-warning\">\n            ${i18nString(UIStrings.thereMayBeADelayInDisplaying)}\n          </div>\n        `\n        : nothing\n      }\n      <devtools-checkbox class=\"source-order-checkbox\"\n                          jslog=${VisualLogging.toggle().track({click: true})}\n                          ?checked=${input.showSourceOrder}\n                          @change=${onShowSourceOrderChanged}>\n        ${i18nString(UIStrings.showSourceOrder)}\n      </devtools-checkbox>\n      `\n    }\n  `, target);\n  // clang-format on\n};\n\nexport class SourceOrderPane extends AccessibilitySubPane {\n  #childCount = 0;\n  #showSourceOrder: boolean|undefined = undefined;\n  readonly #view: View;\n\n  constructor(view: View = DEFAULT_VIEW) {\n    super({\n      title: i18nString(UIStrings.sourceOrderViewer),\n      viewId: 'source-order-viewer',\n      jslog: `${VisualLogging.section('source-order-viewer')}`,\n    });\n    this.#view = view;\n  }\n\n  async setNodeAsync(node: SDK.DOMModel.DOMNode|null): Promise<void> {\n    if (this.nodeInternal && this.#showSourceOrder) {\n      this.nodeInternal.domModel().overlayModel().hideSourceOrderInOverlay();\n    }\n    super.setNode(node);\n    this.#childCount = this.nodeInternal?.childNodeCount() ?? 0;\n    if (!this.nodeInternal || !this.#childCount) {\n      this.#showSourceOrder = undefined;\n    } else {\n      if (!this.nodeInternal.children()) {\n        await this.nodeInternal.getSubtree(1, false);\n      }\n      const children = this.nodeInternal.children() as SDK.DOMModel.DOMNode[];\n      if (!children.some(child => child.nodeType() === Node.ELEMENT_NODE)) {\n        this.#showSourceOrder = undefined;\n      } else if (this.#showSourceOrder === undefined) {\n        this.#showSourceOrder = false;\n      }\n      if (this.#showSourceOrder) {\n        this.nodeInternal.domModel().overlayModel().highlightSourceOrderInOverlay(this.nodeInternal);\n      }\n    }\n    this.requestUpdate();\n  }\n\n  override async performUpdate(): Promise<void> {\n    const onShowSourceOrderChanged = (showSourceOrder: boolean): void => {\n      if (!this.nodeInternal) {\n        this.#showSourceOrder = undefined;\n        return;\n      }\n      if (showSourceOrder) {\n        this.nodeInternal.domModel().overlayModel().highlightSourceOrderInOverlay(this.nodeInternal);\n      } else {\n        this.nodeInternal.domModel().overlayModel().hideSourceOrderInOverlay();\n      }\n      this.#showSourceOrder = showSourceOrder;\n    };\n    const input = {\n      childCount: this.#childCount,\n      showSourceOrder: this.#showSourceOrder,\n      onShowSourceOrderChanged,\n    };\n    const output = undefined;\n    this.#view(input, output, this.contentElement);\n  }\n}\n"]}