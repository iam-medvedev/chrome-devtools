{
  "version": 3,
  "sources": ["coverage-meta.prebundle.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as Coverage from './coverage.js';\n\nconst UIStrings = {\n  /**\n   * @description Title of the 'Coverage' tool in the bottom drawer\n   */\n  coverage: 'Coverage',\n  /**\n   * @description Command for showing the 'Coverage' tool in the bottom drawer\n   */\n  showCoverage: 'Show Coverage',\n  /**\n   * @description Title of an action under the Performance category that can be invoked through the Command Menu\n   */\n  instrumentCoverage: 'Instrument coverage',\n  /**\n   * @description Title of an action under the Performance category that can be invoked through the Command Menu\n   */\n  stopInstrumentingCoverageAndShow: 'Stop instrumenting coverage and show results',\n  /**\n   * @description Title of an action in the coverage tool to start with reload\n   */\n  startInstrumentingCoverageAnd: 'Start instrumenting coverage and reload page',\n  /**\n   * @description Title of an action in the Coverage tool to clear all data.\n   */\n  clearCoverage: 'Clear coverage',\n  /**\n   * @description Title of an action in the Coverage tool to export the data.\n   */\n  exportCoverage: 'Export coverage',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/coverage/coverage-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet loadedCoverageModule: (typeof Coverage|undefined);\n\nasync function loadCoverageModule(): Promise<typeof Coverage> {\n  if (!loadedCoverageModule) {\n    loadedCoverageModule = await import('./coverage.js');\n  }\n  return loadedCoverageModule;\n}\n\nfunction maybeRetrieveContextTypes<T = unknown>(getClassCallBack: (coverageModule: typeof Coverage) => T[]): T[] {\n  if (loadedCoverageModule === undefined) {\n    return [];\n  }\n  return getClassCallBack(loadedCoverageModule);\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.DRAWER_VIEW,\n  id: 'coverage',\n  title: i18nLazyString(UIStrings.coverage),\n  commandPrompt: i18nLazyString(UIStrings.showCoverage),\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  order: 100,\n  async loadView() {\n    const Coverage = await loadCoverageModule();\n    return Coverage.CoverageView.CoverageView.instance();\n  },\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'coverage.toggle-recording',\n  iconClass: UI.ActionRegistration.IconClass.START_RECORDING,\n  toggleable: true,\n  toggledIconClass: UI.ActionRegistration.IconClass.STOP_RECORDING,\n  toggleWithRedColor: true,\n  async loadActionDelegate() {\n    const Coverage = await loadCoverageModule();\n    return new Coverage.CoverageView.ActionDelegate();\n  },\n  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,\n  options: [\n    {\n      value: true,\n      title: i18nLazyString(UIStrings.instrumentCoverage),\n    },\n    {\n      value: false,\n      title: i18nLazyString(UIStrings.stopInstrumentingCoverageAndShow),\n    },\n  ],\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'coverage.start-with-reload',\n  iconClass: UI.ActionRegistration.IconClass.REFRESH,\n  async loadActionDelegate() {\n    const Coverage = await loadCoverageModule();\n    return new Coverage.CoverageView.ActionDelegate();\n  },\n  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,\n  title: i18nLazyString(UIStrings.startInstrumentingCoverageAnd),\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'coverage.clear',\n  iconClass: UI.ActionRegistration.IconClass.CLEAR,\n  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,\n  title: i18nLazyString(UIStrings.clearCoverage),\n  async loadActionDelegate() {\n    const Coverage = await loadCoverageModule();\n    return new Coverage.CoverageView.ActionDelegate();\n  },\n  contextTypes() {\n    return maybeRetrieveContextTypes(Coverage => [Coverage.CoverageView.CoverageView]);\n  },\n});\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'coverage.export',\n  iconClass: UI.ActionRegistration.IconClass.DOWNLOAD,\n  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,\n  title: i18nLazyString(UIStrings.exportCoverage),\n  async loadActionDelegate() {\n    const Coverage = await loadCoverageModule();\n    return new Coverage.CoverageView.ActionDelegate();\n  },\n  contextTypes() {\n    return maybeRetrieveContextTypes(Coverage => [Coverage.CoverageView.CoverageView]);\n  },\n});\n"],
  "mappings": ";AAIA,YAAY,UAAU;AACtB,YAAY,QAAQ;AAIpB,IAAM,YAAY;;;;EAIhB,UAAU;;;;EAIV,cAAc;;;;EAId,oBAAoB;;;;EAIpB,kCAAkC;;;;EAIlC,+BAA+B;;;;EAI/B,eAAe;;;;EAIf,gBAAgB;;AAElB,IAAM,OAAY,UAAK,kBAAkB,oCAAoC,SAAS;AACtF,IAAM,iBAAsB,UAAK,iCAAiC,KAAK,QAAW,IAAI;AAEtF,IAAI;AAEJ,eAAe,qBAAkB;AAC/B,MAAI,CAAC,sBAAsB;AACzB,2BAAuB,MAAM,OAAO,eAAe;EACrD;AACA,SAAO;AACT;AAEA,SAAS,0BAAuC,kBAA0D;AACxG,MAAI,yBAAyB,QAAW;AACtC,WAAO,CAAA;EACT;AACA,SAAO,iBAAiB,oBAAoB;AAC9C;AAEG,eAAY,sBAAsB;EACnC,UAAQ;EACR,IAAI;EACJ,OAAO,eAAe,UAAU,QAAQ;EACxC,eAAe,eAAe,UAAU,YAAY;EACpD,aAAW;EACX,OAAO;EACP,MAAM,WAAQ;AACZ,UAAM,WAAW,MAAM,mBAAkB;AACzC,WAAO,SAAS,aAAa,aAAa,SAAQ;EACpD;CACD;AAEE,sBAAmB,wBAAwB;EAC5C,UAAU;EACV,WAAS;EACT,YAAY;EACZ,kBAAgB;EAChB,oBAAoB;EACpB,MAAM,qBAAkB;AACtB,UAAM,WAAW,MAAM,mBAAkB;AACzC,WAAO,IAAI,SAAS,aAAa,eAAc;EACjD;EACA,UAAQ;EACR,SAAS;IACP;MACE,OAAO;MACP,OAAO,eAAe,UAAU,kBAAkB;;IAEpD;MACE,OAAO;MACP,OAAO,eAAe,UAAU,gCAAgC;;;CAGrE;AAEE,sBAAmB,wBAAwB;EAC5C,UAAU;EACV,WAAS;EACT,MAAM,qBAAkB;AACtB,UAAM,WAAW,MAAM,mBAAkB;AACzC,WAAO,IAAI,SAAS,aAAa,eAAc;EACjD;EACA,UAAQ;EACR,OAAO,eAAe,UAAU,6BAA6B;CAC9D;AAEE,sBAAmB,wBAAwB;EAC5C,UAAU;EACV,WAAS;EACT,UAAQ;EACR,OAAO,eAAe,UAAU,aAAa;EAC7C,MAAM,qBAAkB;AACtB,UAAM,WAAW,MAAM,mBAAkB;AACzC,WAAO,IAAI,SAAS,aAAa,eAAc;EACjD;EACA,eAAY;AACV,WAAO,0BAA0B,cAAY,CAAC,SAAS,aAAa,YAAY,CAAC;EACnF;CACD;AAEE,sBAAmB,wBAAwB;EAC5C,UAAU;EACV,WAAS;EACT,UAAQ;EACR,OAAO,eAAe,UAAU,cAAc;EAC9C,MAAM,qBAAkB;AACtB,UAAM,WAAW,MAAM,mBAAkB;AACzC,WAAO,IAAI,SAAS,aAAa,eAAc;EACjD;EACA,eAAY;AACV,WAAO,0BAA0B,cAAY,CAAC,SAAS,aAAa,YAAY,CAAC;EACnF;CACD;",
  "names": []
}
