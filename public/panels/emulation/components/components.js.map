{
  "version": 3,
  "sources": ["../../../../../../../front_end/panels/emulation/components/DeviceSizeInputElement.ts"],
  "sourcesContent": ["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as EmulationModel from '../../../models/emulation/emulation.js';\nimport * as UILegacy from '../../../ui/legacy/legacy.js';\nimport {html, render} from '../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nclass SizeChangedEvent extends Event {\n  static readonly eventName = 'sizechanged';\n  constructor(public size: number) {\n    super(SizeChangedEvent.eventName);\n  }\n}\n\nfunction getInputValue(event: Event): number {\n  return Number((event.target as HTMLInputElement).value);\n}\n\nexport class SizeInputElement extends HTMLElement {\n  #root = this.attachShadow({mode: 'open'});\n  #disabled = false;\n  #size = '0';\n  #placeholder = '';\n  #title: Platform.UIString.LocalizedString;\n  #jslogContext: string;\n\n  constructor(title: Platform.UIString.LocalizedString, {jslogContext}: {jslogContext: string}) {\n    super();\n    this.#title = title;\n    this.#jslogContext = jslogContext;\n  }\n\n  connectedCallback(): void {\n    this.render();\n  }\n\n  set disabled(disabled: boolean) {\n    this.#disabled = disabled;\n    this.render();\n  }\n\n  set size(size: string) {\n    this.#size = size;\n    this.render();\n  }\n\n  set placeholder(placeholder: string) {\n    this.#placeholder = placeholder;\n    this.render();\n  }\n\n  render(): void {\n    render(\n        // Since the emulation code runs in a different frame, we can't\n        // use constructed stylesheets (they are disallowed cross-frame).\n        // For now, use an inline style tag and later we can refactor this\n        // to use proper constructed stylesheets, when the code runs\n        // in the correct frame context.\n        html`\n      <style>\n        input {\n          /*\n           * 4 characters for the maximum size of the value,\n           * 2 characters for the width of the step-buttons,\n           * 2 pixels padding between the characters and the\n           * step-buttons.\n           */\n          width: calc(4ch + 2ch + 2px);\n          max-height: 18px;\n          border: var(--sys-color-neutral-outline);\n          border-radius: 4px;\n          margin: 0 2px;\n          text-align: center;\n          font-size: inherit;\n          font-family: inherit;\n        }\n\n        input:disabled {\n          user-select: none;\n        }\n\n        input:focus::-webkit-input-placeholder {\n          color: transparent;\n        }\n      </style>\n      <input type=\"number\"\n             max=${EmulationModel.DeviceModeModel.MaxDeviceSize}\n             min=${EmulationModel.DeviceModeModel.MinDeviceSize}\n             jslog=${VisualLogging.textField().track({change: true}).context(this.#jslogContext)}\n             maxlength=\"4\"\n             title=${this.#title}\n             placeholder=${this.#placeholder}\n             ?disabled=${this.#disabled}\n             .value=${this.#size}\n             @change=${this.#fireSizeChange}\n             @keydown=${this.#handleModifierKeys} />\n    `,\n        this.#root, {host: this});\n  }\n\n  #fireSizeChange(event: Event): void {\n    this.dispatchEvent(new SizeChangedEvent(getInputValue(event)));\n  }\n\n  #handleModifierKeys(event: Event): void {\n    let modifiedValue = UILegacy.UIUtils.modifiedFloatNumber(getInputValue(event), event);\n    if (modifiedValue === null) {\n      return;\n    }\n\n    modifiedValue = Math.min(modifiedValue, EmulationModel.DeviceModeModel.MaxDeviceSize);\n    modifiedValue = Math.max(modifiedValue, EmulationModel.DeviceModeModel.MinDeviceSize);\n\n    event.preventDefault();\n    (event.target as HTMLInputElement).value = String(modifiedValue);\n    this.dispatchEvent(new SizeChangedEvent(modifiedValue));\n  }\n}\n\ncustomElements.define('device-mode-emulation-size-input', SizeInputElement);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'device-mode-emulation-size-input': SizeInputElement;\n  }\n  interface HTMLElementEventMap {\n    sizechanged: SizeChangedEvent;\n  }\n}\n"],
  "mappings": ";;;;;;;AAAA;;;;AAMA,YAAY,oBAAoB;AAChC,YAAY,cAAc;AAC1B,SAAQ,MAAM,cAAa;AAC3B,YAAY,mBAAmB;AAE/B,IAAM,mBAAN,MAAM,0BAAyB,MAAK;EAEf;EADnB,OAAgB,YAAY;EAC5B,YAAmB,MAAY;AAC7B,UAAM,kBAAiB,SAAS;AADf,SAAA,OAAA;EAEnB;;AAGF,SAAS,cAAc,OAAY;AACjC,SAAO,OAAQ,MAAM,OAA4B,KAAK;AACxD;AAEM,IAAO,mBAAP,cAAgC,YAAW;EAC/C,QAAQ,KAAK,aAAa,EAAC,MAAM,OAAM,CAAC;EACxC,YAAY;EACZ,QAAQ;EACR,eAAe;EACf;EACA;EAEA,YAAY,OAA0C,EAAC,aAAY,GAAyB;AAC1F,UAAK;AACL,SAAK,SAAS;AACd,SAAK,gBAAgB;EACvB;EAEA,oBAAiB;AACf,SAAK,OAAM;EACb;EAEA,IAAI,SAAS,UAAiB;AAC5B,SAAK,YAAY;AACjB,SAAK,OAAM;EACb;EAEA,IAAI,KAAK,MAAY;AACnB,SAAK,QAAQ;AACb,SAAK,OAAM;EACb;EAEA,IAAI,YAAY,aAAmB;AACjC,SAAK,eAAe;AACpB,SAAK,OAAM;EACb;EAEA,SAAM;AACJ;;;;;;MAMI;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBA4B0B,+BAAgB,aAAa;mBAC7B,+BAAgB,aAAa;qBAC5B,wBAAS,EAAG,MAAM,EAAC,QAAQ,KAAI,CAAC,EAAE,QAAQ,KAAK,aAAa,CAAC;;qBAE3E,KAAK,MAAM;2BACL,KAAK,YAAY;yBACnB,KAAK,SAAS;sBACjB,KAAK,KAAK;uBACT,KAAK,eAAe;wBACnB,KAAK,mBAAmB;;MAExC,KAAK;MAAO,EAAC,MAAM,KAAI;IAAC;EAC9B;EAEA,gBAAgB,OAAY;AAC1B,SAAK,cAAc,IAAI,iBAAiB,cAAc,KAAK,CAAC,CAAC;EAC/D;EAEA,oBAAoB,OAAY;AAC9B,QAAI,gBAAyB,iBAAQ,oBAAoB,cAAc,KAAK,GAAG,KAAK;AACpF,QAAI,kBAAkB,MAAM;AAC1B;IACF;AAEA,oBAAgB,KAAK,IAAI,eAA8B,+BAAgB,aAAa;AACpF,oBAAgB,KAAK,IAAI,eAA8B,+BAAgB,aAAa;AAEpF,UAAM,eAAc;AACnB,UAAM,OAA4B,QAAQ,OAAO,aAAa;AAC/D,SAAK,cAAc,IAAI,iBAAiB,aAAa,CAAC;EACxD;;AAGF,eAAe,OAAO,oCAAoC,gBAAgB;",
  "names": []
}
