{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/snippets/ScriptSnippetFileSystem.ts", "../../../../../../front_end/panels/snippets/SnippetsQuickOpen.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n   * @description Default snippet name when a new snippet is created in the Sources panel\n   * @example {1} PH1\n   */\n  scriptSnippet: 'Script snippet #{PH1}',\n  /**\n   * @description Text to show something is linked to another\n   * @example {example.url} PH1\n   */\n  linkedTo: 'Linked to {PH1}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/snippets/ScriptSnippetFileSystem.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nfunction escapeSnippetName(name: Platform.DevToolsPath.RawPathString): Platform.DevToolsPath.EncodedPathString {\n  return Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(name);\n}\n\nfunction unescapeSnippetName(name: Platform.DevToolsPath.EncodedPathString): Platform.DevToolsPath.RawPathString {\n  return Common.ParsedURL.ParsedURL.encodedPathToRawPathString(name);\n}\n\nexport class SnippetFileSystem extends Persistence.PlatformFileSystem.PlatformFileSystem {\n  private readonly lastSnippetIdentifierSetting: Common.Settings.Setting<number>;\n  private readonly snippetsSetting: Common.Settings.Setting<Snippet[]>;\n  constructor() {\n    super(\n        'snippet://' as Platform.DevToolsPath.UrlString, Persistence.PlatformFileSystem.PlatformFileSystemType.SNIPPETS,\n        false);\n    this.lastSnippetIdentifierSetting =\n        Common.Settings.Settings.instance().createSetting('script-snippets-last-identifier', 0);\n    this.snippetsSetting = Common.Settings.Settings.instance().createSetting('script-snippets', []);\n  }\n\n  override initialFilePaths(): Platform.DevToolsPath.EncodedPathString[] {\n    const savedSnippets: Snippet[] = this.snippetsSetting.get();\n    return savedSnippets.map(snippet => escapeSnippetName(snippet.name));\n  }\n\n  override async createFile(\n      _path: Platform.DevToolsPath.EncodedPathString,\n      _name: Platform.DevToolsPath.RawPathString|null): Promise<Platform.DevToolsPath.EncodedPathString|null> {\n    const nextId = this.lastSnippetIdentifierSetting.get() + 1;\n    this.lastSnippetIdentifierSetting.set(nextId);\n\n    const snippetName =\n        i18nString(UIStrings.scriptSnippet, {PH1: nextId}) as string as Platform.DevToolsPath.RawPathString;\n    const snippets = this.snippetsSetting.get();\n    snippets.push({name: snippetName, content: ''});\n    this.snippetsSetting.set(snippets);\n\n    return escapeSnippetName(snippetName);\n  }\n\n  override async deleteFile(path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    const name = unescapeSnippetName(Common.ParsedURL.ParsedURL.substring(path, 1));\n    const allSnippets: Snippet[] = this.snippetsSetting.get();\n    const snippets = allSnippets.filter(snippet => snippet.name !== name);\n    if (allSnippets.length !== snippets.length) {\n      this.snippetsSetting.set(snippets);\n      return true;\n    }\n    return false;\n  }\n\n  override async requestFileContent(path: Platform.DevToolsPath.EncodedPathString):\n      Promise<TextUtils.ContentData.ContentDataOrError> {\n    const name = unescapeSnippetName(Common.ParsedURL.ParsedURL.substring(path, 1));\n    const snippets: Snippet[] = this.snippetsSetting.get();\n    const snippet = snippets.find(snippet => snippet.name === name);\n    if (snippet) {\n      return new TextUtils.ContentData.ContentData(snippet.content, /* isBase64 */ false, 'text/javascript');\n    }\n    return {error: `A snippet with name '${name}' was not found`};\n  }\n\n  override async setFileContent(path: Platform.DevToolsPath.EncodedPathString, content: string, _isBase64: boolean):\n      Promise<boolean> {\n    const name = unescapeSnippetName(Common.ParsedURL.ParsedURL.substring(path, 1));\n    const snippets = this.snippetsSetting.get();\n    const snippet = snippets.find(snippet => snippet.name === name);\n    if (snippet) {\n      snippet.content = content;\n      this.snippetsSetting.set(snippets);\n      return true;\n    }\n    return false;\n  }\n\n  override renameFile(\n      path: Platform.DevToolsPath.EncodedPathString, newName: Platform.DevToolsPath.RawPathString,\n      callback: (arg0: boolean, arg1?: string|undefined) => void): void {\n    const name = unescapeSnippetName(Common.ParsedURL.ParsedURL.substring(path, 1));\n    const snippets: Snippet[] = this.snippetsSetting.get();\n    const snippet = snippets.find(snippet => snippet.name === name);\n    newName = Common.ParsedURL.ParsedURL.trim(newName);\n    if (!snippet || newName.length === 0 || snippets.find(snippet => snippet.name === newName)) {\n      callback(false);\n      return;\n    }\n    snippet.name = newName;\n    this.snippetsSetting.set(snippets);\n    callback(true, newName);\n  }\n\n  override async searchInPath(query: string, _progress: Common.Progress.Progress): Promise<string[]> {\n    const re = new RegExp(Platform.StringUtilities.escapeForRegExp(query), 'i');\n    const allSnippets: Snippet[] = this.snippetsSetting.get();\n    const matchedSnippets = allSnippets.filter(snippet => snippet.content.match(re));\n    return matchedSnippets.map(snippet => `snippet:///${escapeSnippetName(snippet.name)}`);\n  }\n\n  override mimeFromPath(_path: Platform.DevToolsPath.UrlString): string {\n    return 'text/javascript';\n  }\n\n  override contentType(_path: string): Common.ResourceType.ResourceType {\n    return Common.ResourceType.resourceTypes.Script;\n  }\n\n  override tooltipForURL(url: Platform.DevToolsPath.UrlString): string {\n    return i18nString(\n        UIStrings.linkedTo,\n        {PH1: unescapeSnippetName(Common.ParsedURL.ParsedURL.sliceUrlToEncodedPathString(url, this.path().length))});\n  }\n\n  override supportsAutomapping(): boolean {\n    return true;\n  }\n}\n\nexport async function evaluateScriptSnippet(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n  if (!Common.ParsedURL.schemeIs(uiSourceCode.url(), 'snippet:')) {\n    return;\n  }\n\n  const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n  if (!executionContext) {\n    return;\n  }\n\n  const runtimeModel = executionContext.runtimeModel;\n  const consoleModel = executionContext.target().model(SDK.ConsoleModel.ConsoleModel);\n  await uiSourceCode.requestContentData();\n  uiSourceCode.commitWorkingCopy();\n  const expression = uiSourceCode.workingCopy();\n  Common.Console.Console.instance().show();\n\n  const url = uiSourceCode.url();\n\n  const result = await executionContext.evaluate(\n      {\n        expression: `${expression}\\n//# sourceURL=${url}`,\n        objectGroup: 'console',\n        silent: false,\n        includeCommandLineAPI: true,\n        returnByValue: false,\n        generatePreview: true,\n        replMode: true,\n      } as SDK.RuntimeModel.EvaluationOptions,\n      true, true);\n\n  if ('exceptionDetails' in result && result.exceptionDetails) {\n    consoleModel?.addMessage(SDK.ConsoleModel.ConsoleMessage.fromException(\n        runtimeModel, result.exceptionDetails, /* messageType */ undefined, /* timestamp */ undefined, url));\n    return;\n  }\n  if (!('object' in result) || !result.object) {\n    return;\n  }\n\n  const scripts = executionContext.debuggerModel.scriptsForSourceURL(url);\n  if (scripts.length < 1) {\n    return;\n  }\n  const scriptId = scripts[scripts.length - 1].scriptId;\n  const details = {\n    type: SDK.ConsoleModel.FrontendMessageType.Result,\n    url,\n    parameters: [result.object],\n    executionContextId: executionContext.id,\n    scriptId,\n  };\n  consoleModel?.addMessage(new SDK.ConsoleModel.ConsoleMessage(\n      runtimeModel, Protocol.Log.LogEntrySource.Javascript, Protocol.Log.LogEntryLevel.Info, '', details));\n}\n\nexport function isSnippetsUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n  return Common.ParsedURL.schemeIs(uiSourceCode.url(), 'snippet:');\n}\n\nexport function isSnippetsProject(project: Workspace.Workspace.Project): boolean {\n  return project.type() === Workspace.Workspace.projectTypes.FileSystem &&\n      Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.fileSystemType(project) ===\n      Persistence.PlatformFileSystem.PlatformFileSystemType.SNIPPETS;\n}\n\nexport function findSnippetsProject(): Workspace.Workspace.Project {\n  const workspaceProject =\n      Workspace.Workspace.WorkspaceImpl.instance()\n          .projectsForType(Workspace.Workspace.projectTypes.FileSystem)\n          .find(\n              project => Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.fileSystemType(project) ===\n                  'snippets');\n\n  if (!workspaceProject) {\n    throw new Error('Unable to find workspace project for the snippets file system');\n  }\n\n  return workspaceProject;\n}\nexport interface Snippet {\n  name: Platform.DevToolsPath.RawPathString;\n  content: string;\n}\n", "// Copyright 2017 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as QuickOpen from '../../ui/legacy/components/quick_open/quick_open.js';\n\nimport {evaluateScriptSnippet, findSnippetsProject} from './ScriptSnippetFileSystem.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in Snippets Quick Open of the Sources panel when opening snippets\n   */\n  noSnippetsFound: 'No snippets found.',\n  /**\n   * @description Text for command prefix of run a code snippet\n   */\n  run: 'Run',\n  /**\n   * @description Text for suggestion of run a code snippet\n   */\n  snippet: 'Snippet',\n  /**\n   * @description Text for help title of run code snippet menu\n   */\n  runSnippet: 'Run snippet',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/snippets/SnippetsQuickOpen.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet snippetsQuickOpenInstance: SnippetsQuickOpen;\n\nexport class SnippetsQuickOpen extends QuickOpen.FilteredListWidget.Provider {\n  private snippets: Workspace.UISourceCode.UISourceCode[];\n  private constructor() {\n    super('snippet');\n    this.snippets = [];\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): SnippetsQuickOpen {\n    const {forceNew} = opts;\n    if (!snippetsQuickOpenInstance || forceNew) {\n      snippetsQuickOpenInstance = new SnippetsQuickOpen();\n    }\n\n    return snippetsQuickOpenInstance;\n  }\n\n  override selectItem(itemIndex: number|null, _promptValue: string): void {\n    if (itemIndex === null) {\n      return;\n    }\n    void evaluateScriptSnippet(this.snippets[itemIndex]);\n  }\n\n  override notFoundText(_query: string): string {\n    return i18nString(UIStrings.noSnippetsFound);\n  }\n\n  override attach(): void {\n    this.snippets = [...findSnippetsProject().uiSourceCodes()];\n  }\n\n  override detach(): void {\n    this.snippets = [];\n  }\n\n  override itemScoreAt(itemIndex: number, query: string): number {\n    // Prefer short matches over long matches\n    return query.length / this.snippets[itemIndex].name().length;\n  }\n\n  override itemCount(): number {\n    return this.snippets.length;\n  }\n\n  override itemKeyAt(itemIndex: number): string {\n    return this.snippets[itemIndex].name();\n  }\n\n  override renderItem(itemIndex: number, query: string, titleElement: Element, _subtitleElement: Element): void {\n    const icon = IconButton.Icon.create('snippet', 'snippet');\n    titleElement.parentElement?.parentElement?.insertBefore(icon, titleElement.parentElement);\n    titleElement.textContent = this.snippets[itemIndex].name();\n    QuickOpen.FilteredListWidget.FilteredListWidget.highlightRanges(titleElement, query, true);\n  }\n}\n\nQuickOpen.FilteredListWidget.registerProvider({\n  prefix: '!',\n  iconName: 'exclamation',\n  provider: () => Promise.resolve(SnippetsQuickOpen.instance()),\n  helpTitle: i18nLazyString(UIStrings.runSnippet),\n  titlePrefix: i18nLazyString(UIStrings.run),\n  titleSuggestion: i18nLazyString(UIStrings.snippet),\n});\n"],
  "mappings": "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",
  "names": ["snippet", "i18n", "UIStrings", "str_", "i18nString"]
}
