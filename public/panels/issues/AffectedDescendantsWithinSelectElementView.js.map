{"version":3,"file":"AffectedDescendantsWithinSelectElementView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/issues/AffectedDescendantsWithinSelectElementView.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAIhD,OAAO,EAAC,oBAAoB,EAAC,MAAM,2BAA2B,CAAC;AAE/D,MAAM,SAAS,GAAG;IAChB;;OAEG;IACH,YAAY,EAAE,oDAAoD;IAClE;;OAEG;IACH,cAAc,EAAE,uBAAuB;CAC/B,CAAC;AACX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,6DAA6D,EAAE,SAAS,CAAC,CAAC;AACnH,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE,MAAM,OAAO,0CAA2C,SAAQ,oBAAoB;IAClF,qBAAqB,GAAkB,OAAO,CAAC,OAAO,EAAE,CAAC;IAEhD,MAAM;QACb,6EAA6E;QAC7E,oCAAoC;QACpC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1F,CAAC;IAES,eAAe,CAAC,KAAa;QACrC,OAAO,UAAU,CAAC,SAAS,CAAC,YAAY,EAAE,EAAC,CAAC,EAAE,KAAK,EAAC,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,SAAS;QACb,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,MAAM,IAAI,CAAC,kCAAkC,CAAC,IAAI,CAAC,KAAK,CAAC,mCAAmC,EAAE,CAAC,CAAC;IAClG,CAAC;IAED,KAAK,CAAC,iCAAiC,CACnC,KAAoF;QACtF,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACzC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;QAEjE,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;QAChC,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,IAAI,CAAC;QAC/C,GAAG,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,iBAAiB,CACxC,EAAC,QAAQ,EAAE,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,aAAa,EAAE,OAAO,CAAC,MAAM,EAAE,MAAM,EAAC,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAEnH,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,kCAAkC,CACpC,MAA+F;QACjG,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,KAAK,EAAE,CAAC;YACR,MAAM,IAAI,CAAC,iCAAiC,CAAC,KAAK,CAAC,CAAC;QACtD,CAAC;QACD,IAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;CACF","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as IssuesManager from '../../models/issues_manager/issues_manager.js';\n\nimport {AffectedElementsView} from './AffectedElementsView.js';\n\nconst UIStrings = {\n  /**\n   *@description Noun for singular or plural number of affected descendant nodes indication in issue view.\n   */\n  nDescendants: '{n, plural, =1 { descendant} other { descendants}}',\n  /**\n   *@description Label for the disallowed node link in the issue view.\n   */\n  disallowedNode: 'Disallowed descendant',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('panels/issues/AffectedDescendantsWithinSelectElementView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class AffectedDescendantsWithinSelectElementView extends AffectedElementsView {\n  #runningUpdatePromise: Promise<void> = Promise.resolve();\n\n  override update(): void {\n    // Ensure that doUpdate is invoked atomically by serializing the update calls\n    // because it's not re-entrace safe.\n    this.#runningUpdatePromise = this.#runningUpdatePromise.then(this.#doUpdate.bind(this));\n  }\n\n  protected getResourceName(count: number): Platform.UIString.LocalizedString {\n    return i18nString(UIStrings.nDescendants, {n: count});\n  }\n\n  async #doUpdate(): Promise<void> {\n    this.clear();\n    await this.#appendDisallowedSelectDescendants(this.issue.getSelectElementAccessibilityIssues());\n  }\n\n  async #appendDisallowedSelectDescendant(\n      issue: IssuesManager.SelectElementAccessibilityIssue.SelectElementAccessibilityIssue): Promise<void> {\n    const row = document.createElement('tr');\n    row.classList.add('affected-resource-select-element-descendant');\n\n    const details = issue.details();\n    const target = issue.model()?.target() || null;\n    row.appendChild(await this.createElementCell(\n        {nodeName: i18nString(UIStrings.disallowedNode), backendNodeId: details.nodeId, target}, issue.getCategory()));\n\n    this.affectedResources.appendChild(row);\n  }\n\n  async #appendDisallowedSelectDescendants(\n      issues: Iterable<IssuesManager.SelectElementAccessibilityIssue.SelectElementAccessibilityIssue>): Promise<void> {\n    let count = 0;\n    for (const issue of issues) {\n      count++;\n      await this.#appendDisallowedSelectDescendant(issue);\n    }\n    this.updateAffectedResourceCount(count);\n  }\n}\n"]}