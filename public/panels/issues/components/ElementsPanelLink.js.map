{"version":3,"file":"ElementsPanelLink.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/issues/components/ElementsPanelLink.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,IAAI,EAAE,MAAM,EAAC,MAAM,wBAAwB,CAAC;AACpD,OAAO,KAAK,aAAa,MAAM,8CAA8C,CAAC;AAE9E,OAAO,0BAA0B,MAAM,4BAA4B,CAAC;AAEpE,4EAA4E;AAC5E,MAAM,uBAAuB,GAAG,IAAI,aAAa,EAAE,CAAC;AACpD,uBAAuB,CAAC,WAAW,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;AAO3E,MAAM,OAAO,iBAAkB,SAAQ,WAAW;IACvC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAErD,yBAAyB,GAA8B,GAAG,EAAE,GAAE,CAAC,CAAC;IAChE,8BAA8B,GAA8B,GAAG,EAAE,GAAE,CAAC,CAAC;IACrE,8BAA8B,GAA8B,GAAG,EAAE,GAAE,CAAC,CAAC;IAErE,IAAI,IAAI,CAAC,IAA2B;QAClC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,wBAAwB,CAAC;QAC/D,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,6BAA6B,CAAC;QACzE,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,6BAA6B,CAAC;QACzE,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,OAAO;QACL,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,CAAC,uBAAuB,CAAC,CAAC;IAC9D,CAAC;IAED,OAAO;QACL,mBAAmB;QACnB,MAAM,CAAC,IAAI,CAAA;;;gBAGC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC;iBACxD,IAAI,CAAC,yBAAyB;sBACzB,IAAI,CAAC,8BAA8B;sBACnC,IAAI,CAAC,8BAA8B;OAClD,EAAE,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;QACjC,kBAAkB;IACpB,CAAC;CACF;AAED,cAAc,CAAC,MAAM,CAAC,8BAA8B,EAAE,iBAAiB,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {html, render} from '../../../ui/lit/lit.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport elementsPanelLinkStylesRaw from './elementsPanelLink.css.js';\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst elementsPanelLinkStyles = new CSSStyleSheet();\nelementsPanelLinkStyles.replaceSync(elementsPanelLinkStylesRaw.cssContent);\n\nexport interface ElementsPanelLinkData {\n  onElementRevealIconClick: (event?: Event) => void;\n  onElementRevealIconMouseEnter: (event?: Event) => void;\n  onElementRevealIconMouseLeave: (event?: Event) => void;\n}\nexport class ElementsPanelLink extends HTMLElement {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #onElementRevealIconClick: ((event?: Event) => void) = () => {};\n  #onElementRevealIconMouseEnter: ((event?: Event) => void) = () => {};\n  #onElementRevealIconMouseLeave: ((event?: Event) => void) = () => {};\n\n  set data(data: ElementsPanelLinkData) {\n    this.#onElementRevealIconClick = data.onElementRevealIconClick;\n    this.#onElementRevealIconMouseEnter = data.onElementRevealIconMouseEnter;\n    this.#onElementRevealIconMouseLeave = data.onElementRevealIconMouseLeave;\n    this.#update();\n  }\n\n  #update(): void {\n    this.#render();\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [elementsPanelLinkStyles];\n  }\n\n  #render(): void {\n    // clang-format off\n    render(html`\n      <span\n        class=\"element-reveal-icon\"\n        jslog=${VisualLogging.link('elements-panel').track({click: true})}\n        @click=${this.#onElementRevealIconClick}\n        @mouseenter=${this.#onElementRevealIconMouseEnter}\n        @mouseleave=${this.#onElementRevealIconMouseLeave}></span>\n      `, this.#shadow, {host: this});\n    // clang-format on\n  }\n}\n\ncustomElements.define('devtools-elements-panel-link', ElementsPanelLink);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-elements-panel-link': ElementsPanelLink;\n  }\n}\n"]}