{"version":3,"file":"AffectedPartitioningBlobURLView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/issues/AffectedPartitioningBlobURLView.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAIhD,OAAO,EAAC,qBAAqB,EAAC,MAAM,4BAA4B,CAAC;AAEjE,MAAM,SAAS,GAAG;IAChB;;;OAGG;IACH,6BAA6B,EACzB,mGAAmG;IACvG;;;OAGG;IACH,4BAA4B,EACxB,2KAA2K;IAC/K;;;OAGG;IACH,YAAY,EAAE,gCAAgC;IAC9C;;OAEG;IACH,kBAAkB,EAAE,uCAAuC;CACnD,CAAC;AAEX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,kDAAkD,EAAE,SAAS,CAAC,CAAC;AACxG,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE,MAAM,OAAO,+BAAgC,SAAQ,qBAAqB;IACrD,wBAAwB,CAAC,KAAa;QACvD,OAAO,UAAU,CAAC,SAAS,CAAC,YAAY,EAAE,EAAC,KAAK,EAAC,CAAC,CAAC;IACrD,CAAC;IAEQ,MAAM;QACb,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,MAAM,yBAAyB,GAAG,IAAI,CAAC,KAAK,CAAC,4BAA4B,EAAE,CAAC;QAC5E,KAAK,MAAM,KAAK,IAAI,yBAAyB,EAAE,CAAC;YAC9C,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACpC,MAAM,uBAAuB,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC,uBAAuB,CAAC;YAExE,IAAI,OAAO,EAAE,CAAC;gBACZ,IAAI,WAA8C,CAAC;gBAEnD,QAAQ,uBAAuB,EAAE,CAAC;oBAChC;wBACE,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,6BAA6B,EAAE,EAAC,GAAG,EAAE,OAAO,EAAC,CAAC,CAAC;wBAClF,MAAM;oBACR;wBACE,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,4BAA4B,EAAE,EAAC,GAAG,EAAE,OAAO,EAAC,CAAC,CAAC;wBACjF,MAAM;gBACV,CAAC;gBACD,MAAM,kBAAkB,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBACzD,kBAAkB,CAAC,WAAW,GAAG,WAAW,CAAC;gBAC7C,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;gBACvD,KAAK,EAAE,CAAC;YACV,CAAC;iBAAM,CAAC;gBACN,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBACnD,YAAY,CAAC,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;gBACpE,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;YACnD,CAAC;QACH,CAAC;QACD,IAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;CACF","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {AffectedResourcesView} from './AffectedResourcesView.js';\n\nconst UIStrings = {\n  /**\n   * @description Description for Partitioning BlobURL issue when PartitioningBlobURLInfo is BlockedCrossPartitionFetching.\n   * @example {blob:https://web-platform.test:8444/example} url\n   */\n  blockedCrossPartitionFetching:\n      'Access to the Blob URL {url} was blocked because it was performed from a cross-partition context.',\n  /**\n   * @description Description for Partitioning BlobURL issue when PartitioningBlobURLInfo is EnforceNoopenerForNavigation.\n   * @example {blob:https://web-platform.test:8444/example} url\n   */\n  enforceNoopenerForNavigation:\n      'Blob URL {url} top-level navigation had \\'noopener\\' set because the Blob URL origin was cross-site with the top-level site of the context that initiated the navigation.',\n  /**\n   * @description Blob URL issue count\n   * @example {1} count\n   */\n  blobURLCount: 'Blob URL issues count: {count}',\n  /**\n   * @description Message shown when no Blob URL is available for a Partitioning Blob URL issue.\n   */\n  noBlobURLAvailable: 'No Blob URL available for this issue.',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/issues/AffectedPartitioningBlobURLView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class AffectedPartitioningBlobURLView extends AffectedResourcesView {\n  protected override getResourceNameWithCount(count: number): string {\n    return i18nString(UIStrings.blobURLCount, {count});\n  }\n\n  override update(): void {\n    this.clear();\n    let count = 0;\n    const partitioningBlobURLIssues = this.issue.getPartitioningBlobURLIssues();\n    for (const issue of partitioningBlobURLIssues) {\n      const blobURL = issue.details().url;\n      const partitioningBlobURLInfo = issue.details().partitioningBlobURLInfo;\n\n      if (blobURL) {\n        let description: Platform.UIString.LocalizedString;\n\n        switch (partitioningBlobURLInfo) {\n          case Protocol.Audits.PartitioningBlobURLInfo.BlockedCrossPartitionFetching:\n            description = i18nString(UIStrings.blockedCrossPartitionFetching, {url: blobURL});\n            break;\n          case Protocol.Audits.PartitioningBlobURLInfo.EnforceNoopenerForNavigation:\n            description = i18nString(UIStrings.enforceNoopenerForNavigation, {url: blobURL});\n            break;\n        }\n        const descriptionElement = document.createElement('div');\n        descriptionElement.textContent = description;\n        this.affectedResources.appendChild(descriptionElement);\n        count++;\n      } else {\n        const noURLMessage = document.createElement('div');\n        noURLMessage.textContent = i18nString(UIStrings.noBlobURLAvailable);\n        this.affectedResources.appendChild(noURLMessage);\n      }\n    }\n    this.updateAffectedResourceCount(count);\n  }\n}\n"]}