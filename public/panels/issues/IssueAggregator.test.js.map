{"version":3,"file":"IssueAggregator.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/issues/IssueAggregator.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport {\n  createFakeSetting,\n  createTarget,\n  describeWithEnvironment,\n} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {MockIssuesManager} from '../../testing/MockIssuesManager.js';\nimport {StubIssue} from '../../testing/StubIssue.js';\n\nimport * as Issues from './issues.js';\n\nfunction requestIds(...issues: Issues.IssueAggregator.AggregatedIssue[]): Set<string|undefined> {\n  const requestIds = new Set<string|undefined>();\n  for (const issue of issues) {\n    for (const {requestId} of issue.requests()) {\n      requestIds.add(requestId);\n    }\n  }\n  return requestIds;\n}\n\ndescribeWithEnvironment('AggregatedIssue', () => {\n  const aggregationKey = 'key' as unknown as Issues.IssueAggregator.AggregationKey;\n  it('deduplicates network requests across issues', () => {\n    const issue1 = StubIssue.createFromRequestIds(['id1', 'id2']);\n    const issue2 = StubIssue.createFromRequestIds(['id1']);\n\n    const aggregatedIssue = new Issues.IssueAggregator.AggregatedIssue('code', aggregationKey);\n    aggregatedIssue.addInstance(issue1);\n    aggregatedIssue.addInstance(issue2);\n\n    assert.deepEqual(requestIds(aggregatedIssue), new Set(['id1', 'id2']));\n  });\n\n  it('deduplicates affected cookies across issues', () => {\n    const issue1 = StubIssue.createFromCookieNames(['cookie1']);\n    const issue2 = StubIssue.createFromCookieNames(['cookie2']);\n    const issue3 = StubIssue.createFromCookieNames(['cookie1', 'cookie2']);\n\n    const aggregatedIssue = new Issues.IssueAggregator.AggregatedIssue('code', aggregationKey);\n    aggregatedIssue.addInstance(issue1);\n    aggregatedIssue.addInstance(issue2);\n    aggregatedIssue.addInstance(issue3);\n\n    const actualCookieNames = [...aggregatedIssue.cookies()].map(c => c.name).sort();\n    assert.deepEqual(actualCookieNames, ['cookie1', 'cookie2']);\n  });\n});\n\nfunction createModel() {\n  const target = createTarget();\n  const model = target.model(SDK.IssuesModel.IssuesModel);\n  assert.exists(model);\n  return model;\n}\n\ndescribeWithMockConnection('IssueAggregator', () => {\n  it('deduplicates issues with the same code', () => {\n    const issue1 = StubIssue.createFromRequestIds(['id1']);\n    const issue2 = StubIssue.createFromRequestIds(['id2']);\n\n    const model = createModel();\n    const mockManager = new MockIssuesManager([]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n    const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.ISSUE_ADDED, {issuesModel: model, issue: issue1});\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.ISSUE_ADDED, {issuesModel: model, issue: issue2});\n\n    assert.deepEqual(requestIds(...aggregator.aggregatedIssues()), new Set(['id1', 'id2']));\n  });\n\n  it('deduplicates issues with the same code added before its creation', () => {\n    const issue1 = StubIssue.createFromRequestIds(['id1']);\n    const issue2 = StubIssue.createFromRequestIds(['id2']);\n    const issue1b = StubIssue.createFromRequestIds(['id1']);  // Duplicate id.\n    const issue3 = StubIssue.createFromRequestIds(['id3']);\n\n    const model = createModel();\n    const mockManager =\n        new MockIssuesManager([issue1b, issue3]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n    const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.ISSUE_ADDED, {issuesModel: model, issue: issue1});\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.ISSUE_ADDED, {issuesModel: model, issue: issue2});\n\n    assert.deepEqual(requestIds(...aggregator.aggregatedIssues()), new Set(['id1', 'id2', 'id3']));\n  });\n\n  it('keeps issues with different codes separate', () => {\n    const issue1 = new StubIssue('codeA', ['id1'], []);\n    const issue2 = new StubIssue('codeB', ['id1'], []);\n    const issue1b = new StubIssue('codeC', ['id1'], []);\n    const issue3 = new StubIssue('codeA', ['id1'], []);\n\n    const model = createModel();\n    const mockManager =\n        new MockIssuesManager([issue1b, issue3]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n    const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.ISSUE_ADDED, {issuesModel: model, issue: issue1});\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.ISSUE_ADDED, {issuesModel: model, issue: issue2});\n\n    const issues = Array.from(aggregator.aggregatedIssues());\n    assert.lengthOf(issues, 3);\n    const issueCodes = issues.map(r => r.aggregationKey().toString()).sort((a, b) => a.localeCompare(b));\n    assert.deepEqual(issueCodes, ['codeA', 'codeB', 'codeC']);\n  });\n\n  describe('aggregates issue kind', () => {\n    it('for a single issue', () => {\n      const issues = StubIssue.createFromIssueKinds([IssuesManager.Issue.IssueKind.IMPROVEMENT]);\n\n      const mockManager = new MockIssuesManager(issues) as unknown as IssuesManager.IssuesManager.IssuesManager;\n      const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n\n      const aggregatedIssues = Array.from(aggregator.aggregatedIssues());\n      assert.lengthOf(aggregatedIssues, 1);\n      const aggregatedIssue = aggregatedIssues[0];\n      assert.strictEqual(aggregatedIssue.getKind(), IssuesManager.Issue.IssueKind.IMPROVEMENT);\n    });\n\n    it('for issues of two different kinds', () => {\n      const issues = StubIssue.createFromIssueKinds([\n        IssuesManager.Issue.IssueKind.IMPROVEMENT,\n        IssuesManager.Issue.IssueKind.BREAKING_CHANGE,\n        IssuesManager.Issue.IssueKind.IMPROVEMENT,\n      ]);\n\n      const mockManager = new MockIssuesManager(issues) as unknown as IssuesManager.IssuesManager.IssuesManager;\n      const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n\n      const aggregatedIssues = Array.from(aggregator.aggregatedIssues());\n      assert.lengthOf(aggregatedIssues, 1);\n      const aggregatedIssue = aggregatedIssues[0];\n      assert.strictEqual(aggregatedIssue.getKind(), IssuesManager.Issue.IssueKind.BREAKING_CHANGE);\n    });\n\n    it('for issues of three different kinds', () => {\n      const issues = StubIssue.createFromIssueKinds([\n        IssuesManager.Issue.IssueKind.BREAKING_CHANGE,\n        IssuesManager.Issue.IssueKind.PAGE_ERROR,\n        IssuesManager.Issue.IssueKind.IMPROVEMENT,\n      ]);\n\n      const mockManager = new MockIssuesManager(issues) as unknown as IssuesManager.IssuesManager.IssuesManager;\n      const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n\n      const aggregatedIssues = Array.from(aggregator.aggregatedIssues());\n      assert.lengthOf(aggregatedIssues, 1);\n      const aggregatedIssue = aggregatedIssues[0];\n      assert.strictEqual(aggregatedIssue.getKind(), IssuesManager.Issue.IssueKind.PAGE_ERROR);\n    });\n  });\n});\n\ndescribeWithMockConnection('IssueAggregator', () => {\n  it('aggregates heavy ad issues correctly', () => {\n    const model = createModel();\n    const details1 = {\n      resolution: Protocol.Audits.HeavyAdResolutionStatus.HeavyAdBlocked,\n      reason: Protocol.Audits.HeavyAdReason.CpuPeakLimit,\n      frame: {frameId: 'main' as Protocol.Page.FrameId},\n    };\n    const issue1 = new IssuesManager.HeavyAdIssue.HeavyAdIssue(details1, model);\n    const details2 = {\n      resolution: Protocol.Audits.HeavyAdResolutionStatus.HeavyAdWarning,\n      reason: Protocol.Audits.HeavyAdReason.NetworkTotalLimit,\n      frame: {frameId: 'main' as Protocol.Page.FrameId},\n    };\n    const issue2 = new IssuesManager.HeavyAdIssue.HeavyAdIssue(details2, model);\n\n    const mockManager = new MockIssuesManager([]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n    const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.ISSUE_ADDED, {issuesModel: model, issue: issue1});\n    mockManager.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.ISSUE_ADDED, {issuesModel: model, issue: issue2});\n\n    const issues = Array.from(aggregator.aggregatedIssues());\n    assert.lengthOf(issues, 1);\n    const resolutions = [...issues[0].getHeavyAdIssues()].map(r => r.details().resolution).sort();\n    assert.deepEqual(resolutions, [\n      Protocol.Audits.HeavyAdResolutionStatus.HeavyAdBlocked,\n      Protocol.Audits.HeavyAdResolutionStatus.HeavyAdWarning,\n    ]);\n  });\n\n  const scriptId1 = '1' as Protocol.Runtime.ScriptId;\n\n  describe('IssueAggregator', () => {\n    it('aggregates affected locations correctly', () => {\n      const model = createModel();\n      const issue1 = StubIssue.createFromAffectedLocations([{url: 'foo', lineNumber: 1, columnNumber: 1}]);\n      const issue2 = StubIssue.createFromAffectedLocations([\n        {url: 'foo', lineNumber: 1, columnNumber: 1},\n        {url: 'foo', lineNumber: 1, columnNumber: 12},\n      ]);\n      const issue3 = StubIssue.createFromAffectedLocations([\n        {url: 'bar', lineNumber: 1, columnNumber: 1},\n        {url: 'baz', lineNumber: 1, columnNumber: 1},\n      ]);\n      const issue4 = StubIssue.createFromAffectedLocations([\n        {url: 'bar', lineNumber: 1, columnNumber: 1, scriptId: scriptId1},\n        {url: 'foo', lineNumber: 2, columnNumber: 1},\n      ]);\n\n      const mockManager = new MockIssuesManager([]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n      const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n      for (const issue of [issue1, issue2, issue3, issue4]) {\n        mockManager.dispatchEventToListeners(\n            IssuesManager.IssuesManager.Events.ISSUE_ADDED, {issuesModel: model, issue});\n      }\n\n      const issues = Array.from(aggregator.aggregatedIssues());\n      assert.lengthOf(issues, 1);\n      const locations = [...issues[0].sources()].sort((x, y) => JSON.stringify(x).localeCompare(JSON.stringify(y)));\n      assert.deepEqual(locations, [\n        {url: 'bar', lineNumber: 1, columnNumber: 1, scriptId: scriptId1},\n        {url: 'bar', lineNumber: 1, columnNumber: 1},\n        {url: 'baz', lineNumber: 1, columnNumber: 1},\n        {url: 'foo', lineNumber: 1, columnNumber: 1},\n        {url: 'foo', lineNumber: 1, columnNumber: 12},\n        {url: 'foo', lineNumber: 2, columnNumber: 1},\n      ]);\n    });\n  });\n});\n\ndescribeWithMockConnection('IssueAggregator', () => {\n  let hideIssueByCodeSetting: Common.Settings.Setting<IssuesManager.IssuesManager.HideIssueMenuSetting>;\n  let showThirdPartyIssuesSetting: Common.Settings.Setting<boolean>;\n  let issuesManager: IssuesManager.IssuesManager.IssuesManager;\n  let model: SDK.IssuesModel.IssuesModel;\n  let aggregator: Issues.IssueAggregator.IssueAggregator;\n\n  beforeEach(() => {\n    hideIssueByCodeSetting =\n        createFakeSetting('hide by code', ({} as IssuesManager.IssuesManager.HideIssueMenuSetting));\n    showThirdPartyIssuesSetting = createFakeSetting('third party flag', false);\n    issuesManager = new IssuesManager.IssuesManager.IssuesManager(showThirdPartyIssuesSetting, hideIssueByCodeSetting);\n    const target = createTarget();\n    model = target.model(SDK.IssuesModel.IssuesModel) as SDK.IssuesModel.IssuesModel;\n    aggregator = new Issues.IssueAggregator.IssueAggregator(issuesManager);\n  });\n\n  it('aggregates hidden issues correctly', () => {\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n\n    hideIssueByCodeSetting.set({\n      HiddenStubIssue1: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n      HiddenStubIssue2: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n    });\n\n    for (const issue of issues) {\n      issuesManager.addIssue(model, issue);\n    }\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 2);\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 2);\n  });\n\n  it('aggregates hidden issues correctly on updating settings', () => {\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n\n    for (const issue of issues) {\n      issuesManager.addIssue(model, issue);\n    }\n\n    hideIssueByCodeSetting.set({\n      HiddenStubIssue1: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n    });\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 3);\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 1);\n\n    hideIssueByCodeSetting.set({\n      HiddenStubIssue1: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n      HiddenStubIssue2: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n    });\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 2);\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 2);\n  });\n\n  it('aggregates hidden issues correctly when issues get unhidden', () => {\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n\n    hideIssueByCodeSetting.set({\n      HiddenStubIssue1: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n      HiddenStubIssue2: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n      UnhiddenStubIssue1: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n      UnhiddenStubIssue2: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n    });\n\n    for (const issue of issues) {\n      issuesManager.addIssue(model, issue);\n    }\n\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 4);\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 0);\n\n    hideIssueByCodeSetting.set({\n      HiddenStubIssue1: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n      HiddenStubIssue2: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n      UnhiddenStubIssue1: IssuesManager.IssuesManager.IssueStatus.UNHIDDEN,\n      UnhiddenStubIssue2: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n    });\n\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 1);\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 3);\n  });\n\n  it('aggregates hidden issues correctly when all issues get unhidden', () => {\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n\n    hideIssueByCodeSetting.set({\n      HiddenStubIssue1: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n      HiddenStubIssue2: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n      UnhiddenStubIssue1: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n      UnhiddenStubIssue2: IssuesManager.IssuesManager.IssueStatus.HIDDEN,\n    });\n\n    for (const issue of issues) {\n      issuesManager.addIssue(model, issue);\n    }\n\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 4);\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 0);\n\n    issuesManager.unhideAllIssues();\n\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 4);\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 0);\n  });\n});\n\ndescribeWithMockConnection('IssueAggregator', () => {\n  function getTestMitigationCookieIssue(warningReason: Protocol.Audits.CookieWarningReason): IssuesManager.Issue.Issue {\n    return IssuesManager.IssuesManager.createIssuesFromProtocolIssue(model, {\n      code: Protocol.Audits.InspectorIssueCode.CookieIssue,\n      details: {\n        cookieIssueDetails: {\n          cookie: {\n            name: 'test',\n            path: '/',\n            domain: 'a.test',\n          },\n          cookieExclusionReasons: [],\n          cookieWarningReasons: [warningReason],\n          operation: Protocol.Audits.CookieOperation.ReadCookie,\n          cookieUrl: 'a.test',\n        },\n      },\n    })[0];\n  }\n\n  let issuesManager: IssuesManager.IssuesManager.IssuesManager;\n  let model: SDK.IssuesModel.IssuesModel;\n\n  beforeEach(() => {\n    const showThirdPartyIssuesSetting = createFakeSetting('third party flag', true);\n    issuesManager = new IssuesManager.IssuesManager.IssuesManager(showThirdPartyIssuesSetting);\n    const target = createTarget();\n    model = target.model(SDK.IssuesModel.IssuesModel) as SDK.IssuesModel.IssuesModel;\n  });\n\n  it('should not aggregate mitigation related cookie issues', async () => {\n    // Preexisting issues should not be added\n    issuesManager.addIssue(\n        model, getTestMitigationCookieIssue(Protocol.Audits.CookieWarningReason.WarnDeprecationTrialMetadata));\n    issuesManager.addIssue(\n        model, getTestMitigationCookieIssue(Protocol.Audits.CookieWarningReason.WarnThirdPartyCookieHeuristic));\n\n    const aggregator = new Issues.IssueAggregator.IssueAggregator(issuesManager);\n\n    // Issues added after aggregator creation should not exist either\n    issuesManager.addIssue(\n        model, getTestMitigationCookieIssue(Protocol.Audits.CookieWarningReason.WarnDeprecationTrialMetadata));\n    issuesManager.addIssue(\n        model, getTestMitigationCookieIssue(Protocol.Audits.CookieWarningReason.WarnThirdPartyCookieHeuristic));\n\n    assert.strictEqual(aggregator.numberOfAggregatedIssues(), 0);\n    assert.strictEqual(aggregator.numberOfHiddenAggregatedIssues(), 0);\n  });\n});\n"]}