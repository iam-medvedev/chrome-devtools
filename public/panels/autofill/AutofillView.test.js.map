{"version":3,"file":"AutofillView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/autofill/AutofillView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as AutofillManager from '../../models/autofill_manager/autofill_manager.js';\nimport {renderElementIntoDOM} from '../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {createViewFunctionStub} from '../../testing/ViewFunctionHelpers.js';\n\nimport * as Autofill from './autofill.js';\n\ndescribeWithEnvironment('AutofillView', () => {\n  const frameId = 'frame#1' as Protocol.Page.FrameId;\n\n  it('renders nothing if there\\'s no last filled address form', async () => {\n    const view = createViewFunctionStub(Autofill.AutofillView.AutofillView);\n    const autofillManager = sinon.createStubInstance(AutofillManager.AutofillManager.AutofillManager);\n    const autofillView = new Autofill.AutofillView.AutofillView(autofillManager, view);\n    autofillManager.getLastFilledAddressForm.returns(null);\n\n    renderElementIntoDOM(autofillView);\n\n    const input = await view.nextInput;\n    assert.isEmpty(input.address);\n    assert.isEmpty(input.filledFields);\n    assert.isEmpty(input.matches);\n    assert.isEmpty(input.highlightedMatches);\n  });\n\n  it('correctly renders the last filled address form', async () => {\n    const address = 'Max Mustermann\\nMusterstrasse 4\\n12345 Musterstadt';\n    const filledFields: Protocol.Autofill.FilledField[] = [\n      {\n        htmlType: 'text',\n        id: 'name',\n        name: 'name',\n        value: 'Max Mustermann',\n        autofillType: 'FULL_NAME',\n        fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n        frameId,\n        fieldId: 1 as Protocol.DOM.BackendNodeId,\n      },\n      {\n        htmlType: 'text',\n        id: 'street',\n        name: 'street',\n        value: 'Musterstrasse 4',\n        autofillType: 'STREET',\n        fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n        frameId,\n        fieldId: 2 as Protocol.DOM.BackendNodeId,\n      },\n      {\n        htmlType: 'text',\n        id: 'city',\n        name: 'city',\n        value: 'Musterstadt',\n        autofillType: 'FULL_NAME',\n        fillingStrategy: Protocol.Autofill.FillingStrategy.AutocompleteAttribute,\n        frameId,\n        fieldId: 3 as Protocol.DOM.BackendNodeId,\n      },\n    ];\n    const matches: AutofillManager.AutofillManager.Match[] = [{\n      startIndex: 0,\n      endIndex: 14,\n      filledFieldIndex: 0,\n    }];\n    const view = createViewFunctionStub(Autofill.AutofillView.AutofillView);\n    const autofillManager = sinon.createStubInstance(AutofillManager.AutofillManager.AutofillManager);\n    const autofillView = new Autofill.AutofillView.AutofillView(autofillManager, view);\n    autofillManager.getLastFilledAddressForm.returns({\n      address,\n      filledFields,\n      matches,\n    });\n\n    renderElementIntoDOM(autofillView);\n\n    const input = await view.nextInput;\n    assert.strictEqual(input.address, address);\n    assert.strictEqual(input.filledFields, filledFields);\n    assert.strictEqual(input.matches, matches);\n    assert.isEmpty(input.highlightedMatches);\n  });\n\n  it('correctly highlights matches in the address', async () => {\n    const address = 'Max Mustermann\\nMusterstadt';\n    const filledFields: Protocol.Autofill.FilledField[] = [\n      {\n        htmlType: 'text',\n        id: 'firstname',\n        name: 'firstname',\n        value: 'Max',\n        autofillType: 'FIRST_NAME',\n        fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n        frameId,\n        fieldId: 1 as Protocol.DOM.BackendNodeId,\n      },\n      {\n        htmlType: 'text',\n        id: 'lastname',\n        name: 'lastname',\n        value: 'Mustermann',\n        autofillType: 'LAST_NAME',\n        fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n        frameId,\n        fieldId: 2 as Protocol.DOM.BackendNodeId,\n      },\n    ];\n    const matches: AutofillManager.AutofillManager.Match[] = [\n      {\n        startIndex: 0,\n        endIndex: 3,\n        filledFieldIndex: 0,\n      },\n      {\n        startIndex: 4,\n        endIndex: 14,\n        filledFieldIndex: 1,\n      },\n    ];\n    const view = createViewFunctionStub(Autofill.AutofillView.AutofillView);\n    const autofillManager = sinon.createStubInstance(AutofillManager.AutofillManager.AutofillManager);\n    const autofillView = new Autofill.AutofillView.AutofillView(autofillManager, view);\n    autofillManager.getLastFilledAddressForm.returns({\n      address,\n      filledFields,\n      matches,\n    });\n    renderElementIntoDOM(autofillView);\n    let input = await view.nextInput;\n\n    input.onHighlightMatchesInAddress(5);\n\n    input = await view.nextInput;\n    assert.deepEqual(input.highlightedMatches, [{startIndex: 4, endIndex: 14, filledFieldIndex: 1}]);\n\n    input.onClearHighlightedMatches();\n\n    input = await view.nextInput;\n    assert.isEmpty(input.highlightedMatches);\n  });\n\n  it('correctly rerenders upon AddressFormFilled events', async () => {\n    const address = 'Foo Bar';\n    const filledFields: Protocol.Autofill.FilledField[] = [];\n    const matches: AutofillManager.AutofillManager.Match[] = [];\n    const view = createViewFunctionStub(Autofill.AutofillView.AutofillView);\n    const autofillManager = sinon.createStubInstance(AutofillManager.AutofillManager.AutofillManager);\n    const autofillView = new Autofill.AutofillView.AutofillView(autofillManager, view);\n    autofillManager.getLastFilledAddressForm.returns(null);\n    renderElementIntoDOM(autofillView);\n    await view.nextInput;\n\n    Reflect.apply(autofillManager.addEventListener.lastCall.args[1], autofillView, [\n      {data: {address, filledFields, matches}},\n    ]);\n\n    const input = await view.nextInput;\n    assert.strictEqual(input.address, address);\n  });\n\n  it('correctly highlights DOM nodes for filled fields', async () => {\n    const address = 'John\\nDenver';\n    const filledFields: Protocol.Autofill.FilledField[] = [\n      {\n        htmlType: 'text',\n        id: 'firstname',\n        name: 'firstname',\n        value: 'John',\n        autofillType: 'FIRST_NAME',\n        fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n        frameId,\n        fieldId: 1 as Protocol.DOM.BackendNodeId,\n      },\n      {\n        htmlType: 'text',\n        id: 'city',\n        name: 'city',\n        value: 'Denver',\n        autofillType: 'CITY',\n        fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n        frameId,\n        fieldId: 2 as Protocol.DOM.BackendNodeId,\n      },\n    ];\n    const matches: AutofillManager.AutofillManager.Match[] = [\n      {\n        startIndex: 0,\n        endIndex: 4,\n        filledFieldIndex: 0,\n      },\n      {\n        startIndex: 6,\n        endIndex: 12,\n        filledFieldIndex: 1,\n      },\n    ];\n    const view = createViewFunctionStub(Autofill.AutofillView.AutofillView);\n    const autofillManager = sinon.createStubInstance(AutofillManager.AutofillManager.AutofillManager);\n    const autofillView = new Autofill.AutofillView.AutofillView(autofillManager, view);\n    autofillManager.getLastFilledAddressForm.returns({\n      address,\n      filledFields,\n      matches,\n    });\n    renderElementIntoDOM(autofillView);\n    let input = await view.nextInput;\n\n    input.onHighlightMatchesInFilledFiels(1);\n\n    sinon.assert.calledOnceWithExactly(autofillManager.highlightFilledField, filledFields[1]);\n    input = await view.nextInput;\n    assert.deepEqual(input.highlightedMatches, [{startIndex: 6, endIndex: 12, filledFieldIndex: 1}]);\n\n    input.onClearHighlightedMatches();\n\n    sinon.assert.calledOnce(autofillManager.clearHighlightedFilledFields);\n    input = await view.nextInput;\n    assert.isEmpty(input.highlightedMatches);\n  });\n});\n"]}