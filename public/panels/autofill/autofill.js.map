{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/autofill/AutofillView.ts", "autofillView.css.js"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport '../../ui/components/adorners/adorners.js';\nimport '../../ui/legacy/components/data_grid/data_grid.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as AutofillManager from '../../models/autofill_manager/autofill_manager.js';\nimport * as ComponentHelpers from '../../ui/components/helpers/helpers.js';\nimport * as LegacyWrapper from '../../ui/components/legacy_wrapper/legacy_wrapper.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Lit from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport autofillViewStyles from './autofillView.css.js';\n\nconst {html, render, Directives: {styleMap}} = Lit;\nconst {FillingStrategy} = Protocol.Autofill;\n\nconst UIStrings = {\n  /**\n   * @description Text shown when there is no data on autofill available.\n   */\n  noAutofill: 'No autofill detected',\n  /**\n   * @description Explanation for how to populate the autofill panel with data. Shown when there is\n   * no data available.\n   */\n  toStartDebugging: 'To start debugging autofill, use Chrome\\'s autofill menu to fill an address form.',\n  /**\n   * @description Column header for column containing form field values\n   */\n  value: 'Value',\n  /**\n   * @description Column header for column containing the predicted autofill categories\n   */\n  predictedAutofillValue: 'Predicted autofill value',\n  /**\n   * @description Column header for column containing the name/label/id of form fields\n   */\n  formField: 'Form field',\n  /**\n   * @description Tooltip for an adorner for form fields which have an autocomplete attribute\n   * (http://go/mdn/HTML/Attributes/autocomplete)\n   */\n  autocompleteAttribute: 'Autocomplete attribute',\n  /**\n   * @description Abbreviation of 'attribute'. Text content of an adorner for form fields which\n   * have an autocomplete attribute (http://go/mdn/HTML/Attributes/autocomplete)\n   */\n  attr: 'attr',\n  /**\n   * @description Tooltip for an adorner for form fields which don't have an autocomplete attribute\n   * (http://go/mdn/HTML/Attributes/autocomplete) and for which Chrome used heuristics to deduce\n   * the form field's autocomplete category.\n   */\n  inferredByHeuristics: 'Inferred by heuristics',\n  /**\n   * @description Abbreviation of 'heuristics'. Text content of an adorner for form fields which\n   * don't have an autocomplete attribute (http://go/mdn/HTML/Attributes/autocomplete) and for\n   * which Chrome used heuristics to deduce the form field's autocomplete category.\n   */\n  heur: 'heur',\n  /**\n   * @description Label for checkbox in the Autofill panel. If checked, this panel will open\n   * automatically whenever a form is being autofilled.\n   */\n  autoShow: 'Automatically open this panel',\n  /**\n   * @description Label for checkbox in the Autofill panel. If checked, test addresses will be added to the Autofill popup.\n   */\n  showTestAddressesInAutofillMenu: 'Show test addresses in autofill menu',\n  /**\n   * @description Tooltip text for a checkbox label in the Autofill panel. If checked, this panel\n   * will open automatically whenever a form is being autofilled.\n   */\n  autoShowTooltip: 'Open the autofill panel automatically when an autofill activity is detected.',\n  /**\n   * @description Aria text for the section of the autofill view containing a preview of the autofilled address.\n   */\n  addressPreview: 'Address preview',\n  /**\n   * @description Aria text for the section of the autofill view containing the info about the autofilled form fields.\n   */\n  formInspector: 'Form inspector',\n  /**\n   *@description Link text for a hyperlink to more documentation\n   */\n  learnMore: 'Learn more',\n  /**\n   *@description Link text for a hyperlink to webpage for leaving user feedback\n   */\n  sendFeedback: 'Send feedback',\n} as const;\n\nconst AUTOFILL_INFO_URL = 'https://goo.gle/devtools-autofill-panel' as Platform.DevToolsPath.UrlString;\nconst AUTOFILL_FEEDBACK_URL = 'https://crbug.com/329106326' as Platform.DevToolsPath.UrlString;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/autofill/AutofillView.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class AutofillView extends LegacyWrapper.LegacyWrapper.WrappableComponent {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #autoOpenViewSetting: Common.Settings.Setting<boolean>;\n  #showTestAddressesInAutofillMenuSetting: Common.Settings.Setting<boolean>;\n  #address = '';\n  #filledFields: Protocol.Autofill.FilledField[] = [];\n  #matches: AutofillManager.AutofillManager.Match[] = [];\n  #highlightedMatches: AutofillManager.AutofillManager.Match[] = [];\n\n  constructor() {\n    super();\n    this.#autoOpenViewSetting =\n        Common.Settings.Settings.instance().createSetting('auto-open-autofill-view-on-event', true);\n    this.#showTestAddressesInAutofillMenuSetting =\n        Common.Settings.Settings.instance().createSetting('show-test-addresses-in-autofill-menu-on-event', false);\n  }\n\n  connectedCallback(): void {\n    const autofillManager = AutofillManager.AutofillManager.AutofillManager.instance();\n    const formFilledEvent = autofillManager.getLastFilledAddressForm();\n    if (formFilledEvent) {\n      ({\n        address: this.#address,\n        filledFields: this.#filledFields,\n        matches: this.#matches,\n      } = formFilledEvent);\n    }\n    autofillManager.addEventListener(\n        AutofillManager.AutofillManager.Events.ADDRESS_FORM_FILLED, this.#onAddressFormFilled, this);\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.PrimaryPageChanged,\n        this.#onPrimaryPageChanged, this);\n\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  #onPrimaryPageChanged(): void {\n    this.#address = '';\n    this.#filledFields = [];\n    this.#matches = [];\n    this.#highlightedMatches = [];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  #onAddressFormFilled(\n      {data}: Common.EventTarget.EventTargetEvent<AutofillManager.AutofillManager.AddressFormFilledEvent>): void {\n    ({\n      address: this.#address,\n      filledFields: this.#filledFields,\n      matches: this.#matches,\n    } = data);\n    this.#highlightedMatches = [];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  async #render(): Promise<void> {\n    if (!ComponentHelpers.ScheduledRender.isScheduledRender(this)) {\n      throw new Error('AutofillView render was not scheduled');\n    }\n\n    if (!this.#address && !this.#filledFields.length) {\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      render(html`\n        <style>${autofillViewStyles}</style>\n        <style>${UI.inspectorCommonStyles}</style>\n        <main>\n          <div class=\"top-left-corner\">\n            <devtools-checkbox\n                ?checked=${this.#showTestAddressesInAutofillMenuSetting.get()}\n                title=${i18nString(UIStrings.showTestAddressesInAutofillMenu)}\n                @change=${this.#onShowTestAddressesInAutofillMenuChanged.bind(this)}\n                jslog=${VisualLogging.toggle(this.#showTestAddressesInAutofillMenuSetting.name).track({ change: true })}>\n              ${i18nString(UIStrings.showTestAddressesInAutofillMenu)}\n            </devtools-checkbox>\n            <devtools-checkbox\n                title=${i18nString(UIStrings.autoShowTooltip)}\n                ?checked=${this.#autoOpenViewSetting.get()}\n                @change=${this.#onAutoOpenCheckboxChanged.bind(this)}\n                jslog=${VisualLogging.toggle(this.#autoOpenViewSetting.name).track({ change: true })}>\n              ${i18nString(UIStrings.autoShow)}\n            </devtools-checkbox>\n            <x-link href=${AUTOFILL_FEEDBACK_URL} class=\"feedback link\" jslog=${VisualLogging.link('feedback').track({click: true})}>${i18nString(UIStrings.sendFeedback)}</x-link>\n          </div>\n          <div class=\"placeholder-container\" jslog=${VisualLogging.pane('autofill-empty')}>\n            <div class=\"empty-state\">\n              <span class=\"empty-state-header\">${i18nString(UIStrings.noAutofill)}</span>\n              <div class=\"empty-state-description\">\n                <span>${i18nString(UIStrings.toStartDebugging)}</span>\n                <x-link href=${AUTOFILL_INFO_URL} class=\"link\" jslog=${VisualLogging.link('learn-more').track({click: true})}>${i18nString(UIStrings.learnMore)}</x-link>\n              </div>\n            </div>\n          </div>\n        </main>\n      `, this.#shadow, {host: this});\n      // clang-format on\n      return;\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <style>${autofillViewStyles}</style>\n      <style>${UI.inspectorCommonStyles}</style>\n      <main>\n        <div class=\"content-container\" jslog=${VisualLogging.pane('autofill')}>\n          <div class=\"right-to-left\" role=\"region\" aria-label=${i18nString(UIStrings.addressPreview)}>\n            <div class=\"header\">\n              <div class=\"label-container\">\n                <devtools-checkbox\n                    title=${i18nString(UIStrings.showTestAddressesInAutofillMenu)}\n                    ?checked=${this.#showTestAddressesInAutofillMenuSetting.get()}\n                    @change=${this.#onShowTestAddressesInAutofillMenuChanged.bind(this)}\n                    jslog=${VisualLogging.toggle(this.#showTestAddressesInAutofillMenuSetting.name).track({ change: true })}\n                  >${i18nString(UIStrings.showTestAddressesInAutofillMenu)}\n                </devtools-checkbox>\n              </div>\n              <div class=\"label-container\">\n                <devtools-checkbox\n                    title=${i18nString(UIStrings.autoShowTooltip)}\n                    ?checked=${this.#autoOpenViewSetting.get()}\n                    @change=${this.#onAutoOpenCheckboxChanged.bind(this)}\n                    jslog=${VisualLogging.toggle(this.#autoOpenViewSetting.name).track({ change: true })}\n                  >${i18nString(UIStrings.autoShow)}\n                </devtools-checkbox>\n              </div>\n              <x-link href=${AUTOFILL_FEEDBACK_URL} class=\"feedback link\" jslog=${VisualLogging.link('feedback').track({click: true})}>${i18nString(UIStrings.sendFeedback)}</x-link>\n            </div>\n            ${this.#renderAddress()}\n          </div>\n          ${this.#renderFilledFields()}\n        </div>\n      </main>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  #onAutoOpenCheckboxChanged(e: Event): void {\n    const {checked} = e.target as HTMLInputElement;\n    this.#autoOpenViewSetting.set(checked);\n  }\n\n  #onShowTestAddressesInAutofillMenuChanged(e: Event): void {\n    const {checked} = e.target as HTMLInputElement;\n    this.#showTestAddressesInAutofillMenuSetting.set(checked);\n    AutofillManager.AutofillManager.AutofillManager.instance().onShowAutofillTestAddressesSettingsChanged();\n  }\n\n  #renderAddress(): Lit.LitTemplate {\n    if (!this.#address) {\n      return Lit.nothing;\n    }\n\n    const createSpan = (startIndex: number, endIndex: number): Lit.TemplateResult => {\n      const textContentLines = this.#address.substring(startIndex, endIndex).split('\\n');\n      const templateLines =\n          textContentLines.map((line, i) => i === textContentLines.length - 1 ? line : html`${line}<br>`);\n      const hasMatches = this.#matches.some(match => match.startIndex <= startIndex && match.endIndex > startIndex);\n\n      if (!hasMatches) {\n        return html`<span>${templateLines}</span>`;\n      }\n\n      const spanClasses = Lit.Directives.classMap({\n        'matches-filled-field': hasMatches,\n        highlighted:\n            this.#highlightedMatches.some(match => match.startIndex <= startIndex && match.endIndex > startIndex),\n      });\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      return html`\n        <span\n          class=${spanClasses}\n          @mouseenter=${() => this.#onSpanMouseEnter(startIndex)}\n          @mouseleave=${this.#onSpanMouseLeave}\n          jslog=${VisualLogging.item('matched-address-item').track({hover: true})}\n        >${templateLines}</span>`;\n      // clang-format on\n    };\n\n    // Split the address string into multiple spans. Each span is connected to\n    // 0 or more matches. This allows highlighting the corresponding grid rows\n    // when hovering over a span. And vice versa finding the corresponding\n    // spans to highlight when hovering over a grid line.\n    const spans: Lit.TemplateResult[] = [];\n    const matchIndices = new Set<number>([0, this.#address.length]);\n    for (const match of this.#matches) {\n      matchIndices.add(match.startIndex);\n      matchIndices.add(match.endIndex);\n    }\n    const sortedMatchIndices = Array.from(matchIndices).sort((a, b) => a - b);\n    for (let i = 0; i < sortedMatchIndices.length - 1; i++) {\n      spans.push(createSpan(sortedMatchIndices[i], sortedMatchIndices[i + 1]));\n    }\n\n    return html`\n      <div class=\"address\">\n        ${spans}\n      </div>\n    `;\n  }\n\n  #onSpanMouseEnter(startIndex: number): void {\n    this.#highlightedMatches =\n        this.#matches.filter(match => match.startIndex <= startIndex && match.endIndex > startIndex);\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  #onSpanMouseLeave(): void {\n    this.#highlightedMatches = [];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n  }\n\n  #renderFilledFields(): Lit.LitTemplate {\n    if (!this.#filledFields.length) {\n      return Lit.nothing;\n    }\n\n    const highlightedGridRows = new Set(this.#highlightedMatches.map(match => match.filledFieldIndex));\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      <div class=\"grid-wrapper\" role=\"region\" aria-label=${i18nString(UIStrings.formInspector)}>\n        <devtools-data-grid\n          striped\n          class=\"filled-fields-grid\"\n        >\n          <table>\n            <tr>\n              <th id=\"name\" weight=\"50\" sortable>${i18nString(UIStrings.formField)}</th>\n              <th id=\"autofill-type\" weight=\"50\" sortable>${i18nString(UIStrings.predictedAutofillValue)}</th>\n              <th id=\"value\" weight=\"50\" sortable>${i18nString(UIStrings.value)}</th>\n            </tr>\n            ${this.#filledFields.map((field, index) => html`\n                <tr style=${styleMap({\n                    'font-family': 'var(--monospace-font-family)',\n                    'font-size': 'var(--monospace-font-size)',\n                    'background-color': highlightedGridRows.has(index) ? 'var(--sys-color-state-hover-on-subtle)' : null,\n                  })}\n                  @mouseenter=${() => this.#onGridRowMouseEnter(index)}\n                  @mouseleave=${this.#onGridRowMouseLeave.bind(this)}\n                >\n                  <td>${field.name || `#${field.id}`} (${field.htmlType})</td>\n                  <td>\n                      ${field.autofillType}\n                      ${field.fillingStrategy === FillingStrategy.AutocompleteAttribute ?\n                            html`<devtools-adorner title=${i18nString(UIStrings.autocompleteAttribute)} .data=${{name: field.fillingStrategy}}>\n                              <span>${i18nString(UIStrings.attr)}</span>\n                            </devtools-adorner>` :\n                        field.fillingStrategy === FillingStrategy.AutofillInferred ?\n                            html`<devtools-adorner title=${i18nString(UIStrings.inferredByHeuristics)} .data=${{name: field.fillingStrategy}}>\n                              <span>${i18nString(UIStrings.heur)}</span>\n                            </devtools-adorner>` :\n                            Lit.nothing}\n                  </td>\n                  <td>\"${field.value}\"</td>\n                </tr>`\n            )}\n          </table>\n        </devtools-data-grid>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #onGridRowMouseEnter(rowIndex: number): void {\n    this.#highlightedMatches = this.#matches.filter(match => match.filledFieldIndex === rowIndex);\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n\n    const backendNodeId = this.#filledFields[rowIndex].fieldId;\n    const target = SDK.FrameManager.FrameManager.instance()\n                       .getFrame(this.#filledFields[rowIndex].frameId)\n                       ?.resourceTreeModel()\n                       .target();\n    if (target) {\n      const deferredNode = new SDK.DOMModel.DeferredDOMNode(target, backendNodeId);\n      const domModel = target.model(SDK.DOMModel.DOMModel);\n      if (deferredNode && domModel) {\n        domModel.overlayModel().highlightInOverlay({deferredNode}, 'all');\n      }\n    }\n  }\n\n  #onGridRowMouseLeave(): void {\n    this.#highlightedMatches = [];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#render);\n    SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n  }\n}\n\ncustomElements.define('devtools-autofill-view', AutofillView);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-autofill-view': AutofillView;\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright (c) 2023 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\nmain {\n  height: 100%;\n}\n\n.header {\n  display: flex;\n  border-bottom: 1px solid var(--sys-color-divider);\n  width: 100%;\n}\n\n.placeholder-container {\n  height: calc(100% - 29px);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.address {\n  padding: 10px;\n  margin-right: auto;\n}\n\n.filled-fields-grid {\n  border-top: 1px solid var(--sys-color-divider);\n  box-sizing: border-box;\n}\n\n.content-container {\n  display: flex;\n  flex-flow: column;\n  height: 100%;\n}\n\n.grid-wrapper {\n  flex-grow: 1;\n}\n\ndevtools-data-grid {\n  border: none;\n  height: 100%;\n}\n\n.checkbox-label {\n  display: flex;\n  align-items: center;\n}\n\n.right-to-left {\n  border-bottom: 1px solid var(--sys-color-divider);\n  display: flex;\n  flex-flow: row-reverse wrap;\n  justify-content: flex-end;\n}\n\n.label-container {\n  padding: 5px;\n  display: flex;\n  align-items: flex-start;\n}\n\n.top-left-corner {\n  border-bottom: 1px solid var(--sys-color-divider);\n  display: flex;\n  padding: 5px;\n  gap: 10px;\n}\n\n.matches-filled-field {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.highlighted {\n  background-color: var(--sys-color-state-focus-select);\n}\n\n.link {\n  color: var(--sys-color-primary);\n  text-decoration-line: underline;\n}\n\n.feedback {\n  margin: auto 5px auto auto;\n  font-size: var(--sys-typescale-body4-size);\n}\n\n/*# sourceURL=${import.meta.resolve('./autofillView.css')} */`;"],
  "mappings": "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",
  "names": []
}
