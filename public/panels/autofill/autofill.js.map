{
  "version": 3,
  "sources": ["../../../../../../front_end/panels/autofill/AutofillView.ts", "autofillView.css.js"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport '../../ui/components/adorners/adorners.js';\nimport '../../ui/legacy/components/data_grid/data_grid.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as AutofillManager from '../../models/autofill_manager/autofill_manager.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Lit from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport autofillViewStyles from './autofillView.css.js';\n\nconst {html, render, Directives: {styleMap}} = Lit;\nconst {FillingStrategy} = Protocol.Autofill;\nconst {bindToSetting} = UI.SettingsUI;\n\nconst UIStrings = {\n  /**\n   * @description Text shown when there is no data on autofill available.\n   */\n  noAutofill: 'No autofill detected',\n  /**\n   * @description Explanation for how to populate the autofill panel with data. Shown when there is\n   * no data available.\n   */\n  toStartDebugging: 'To start debugging autofill, use Chrome\\'s autofill menu to fill an address form.',\n  /**\n   * @description Column header for column containing form field values\n   */\n  value: 'Value',\n  /**\n   * @description Column header for column containing the predicted autofill categories\n   */\n  predictedAutofillValue: 'Predicted autofill value',\n  /**\n   * @description Column header for column containing the name/label/id of form fields\n   */\n  formField: 'Form field',\n  /**\n   * @description Tooltip for an adorner for form fields which have an autocomplete attribute\n   * (http://go/mdn/HTML/Attributes/autocomplete)\n   */\n  autocompleteAttribute: 'Autocomplete attribute',\n  /**\n   * @description Abbreviation of 'attribute'. Text content of an adorner for form fields which\n   * have an autocomplete attribute (http://go/mdn/HTML/Attributes/autocomplete)\n   */\n  attr: 'attr',\n  /**\n   * @description Tooltip for an adorner for form fields which don't have an autocomplete attribute\n   * (http://go/mdn/HTML/Attributes/autocomplete) and for which Chrome used heuristics to deduce\n   * the form field's autocomplete category.\n   */\n  inferredByHeuristics: 'Inferred by heuristics',\n  /**\n   * @description Abbreviation of 'heuristics'. Text content of an adorner for form fields which\n   * don't have an autocomplete attribute (http://go/mdn/HTML/Attributes/autocomplete) and for\n   * which Chrome used heuristics to deduce the form field's autocomplete category.\n   */\n  heur: 'heur',\n  /**\n   * @description Label for checkbox in the Autofill panel. If checked, this panel will open\n   * automatically whenever a form is being autofilled.\n   */\n  autoShow: 'Automatically open this panel',\n  /**\n   * @description Label for checkbox in the Autofill panel. If checked, test addresses will be added to the Autofill popup.\n   */\n  showTestAddressesInAutofillMenu: 'Show test addresses in autofill menu',\n  /**\n   * @description Tooltip text for a checkbox label in the Autofill panel. If checked, this panel\n   * will open automatically whenever a form is being autofilled.\n   */\n  autoShowTooltip: 'Open the autofill panel automatically when an autofill activity is detected.',\n  /**\n   * @description Aria text for the section of the autofill view containing a preview of the autofilled address.\n   */\n  addressPreview: 'Address preview',\n  /**\n   * @description Aria text for the section of the autofill view containing the info about the autofilled form fields.\n   */\n  formInspector: 'Form inspector',\n  /**\n   * @description Link text for a hyperlink to more documentation\n   */\n  learnMore: 'Learn more',\n  /**\n   * @description Link text for a hyperlink to webpage for leaving user feedback\n   */\n  sendFeedback: 'Send feedback',\n} as const;\n\nconst AUTOFILL_INFO_URL = 'https://goo.gle/devtools-autofill-panel' as Platform.DevToolsPath.UrlString;\nconst AUTOFILL_FEEDBACK_URL = 'https://crbug.com/329106326' as Platform.DevToolsPath.UrlString;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/autofill/AutofillView.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface ViewInput {\n  autoOpenViewSetting: Common.Settings.Setting<boolean>;\n  showTestAddressesInAutofillMenuSetting: Common.Settings.Setting<boolean>;\n\n  address: string;\n  filledFields: Protocol.Autofill.FilledField[];\n  matches: AutofillManager.AutofillManager.Match[];\n  highlightedMatches: AutofillManager.AutofillManager.Match[];\n\n  onHighlightMatchesInAddress: (startIndex: number) => void;\n  onHighlightMatchesInFilledFiels: (rowIndex: number) => void;\n  onClearHighlightedMatches: () => void;\n}\n\ntype ViewOutput = unknown;\n\ntype View = (input: ViewInput, output: ViewOutput, target: HTMLElement) => void;\n\nconst DEFAULT_VIEW: View = (input: ViewInput, _output: ViewOutput, target: HTMLElement): void => {\n  const renderAddress = (): Lit.LitTemplate => {\n    const createSpan = (startIndex: number, endIndex: number): Lit.TemplateResult => {\n      const textContentLines = input.address.substring(startIndex, endIndex).split('\\n');\n      const templateLines =\n          textContentLines.map((line, i) => i === textContentLines.length - 1 ? line : html`${line}<br>`);\n      const hasMatches = input.matches.some(match => match.startIndex <= startIndex && match.endIndex > startIndex);\n\n      if (!hasMatches) {\n        return html`<span>${templateLines}</span>`;\n      }\n\n      const spanClasses = Lit.Directives.classMap({\n        'matches-filled-field': hasMatches,\n        highlighted:\n            input.highlightedMatches.some(match => match.startIndex <= startIndex && match.endIndex > startIndex),\n      });\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      return html`\n        <span class=${spanClasses}\n              jslog=${VisualLogging.item('matched-address-item').track({hover: true})}\n              @mouseenter=${() => input.onHighlightMatchesInAddress(startIndex)}\n              @mouseleave=${input.onClearHighlightedMatches}>\n          ${templateLines}\n        </span>`;\n      // clang-format on\n    };\n\n    // Split the address string into multiple spans. Each span is connected to\n    // 0 or more matches. This allows highlighting the corresponding grid rows\n    // when hovering over a span. And vice versa finding the corresponding\n    // spans to highlight when hovering over a grid line.\n    const spans: Lit.TemplateResult[] = [];\n    const matchIndices = new Set<number>([0, input.address.length]);\n    for (const match of input.matches) {\n      matchIndices.add(match.startIndex);\n      matchIndices.add(match.endIndex);\n    }\n    const sortedMatchIndices = Array.from(matchIndices).sort((a, b) => a - b);\n    for (let i = 0; i < sortedMatchIndices.length - 1; i++) {\n      spans.push(createSpan(sortedMatchIndices[i], sortedMatchIndices[i + 1]));\n    }\n\n    return html`\n      <div class=\"address\">\n        ${spans}\n      </div>\n    `;\n  };\n\n  const renderFilledFields = (): Lit.LitTemplate => {\n    const highlightedGridRows = new Set(input.highlightedMatches.map(match => match.filledFieldIndex));\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      <div class=\"grid-wrapper\" role=\"region\" aria-label=${i18nString(UIStrings.formInspector)}>\n        <devtools-data-grid striped\n                            class=\"filled-fields-grid\">\n          <table>\n            <tr>\n              <th id=\"name\" weight=\"50\" sortable>${i18nString(UIStrings.formField)}</th>\n              <th id=\"autofill-type\" weight=\"50\" sortable>${i18nString(UIStrings.predictedAutofillValue)}</th>\n              <th id=\"value\" weight=\"50\" sortable>${i18nString(UIStrings.value)}</th>\n            </tr>\n            ${input.filledFields.map((field, index) => html`\n                <tr style=${styleMap({\n                            'font-family': 'var(--monospace-font-family)',\n                            'font-size': 'var(--monospace-font-size)',\n                            'background-color': highlightedGridRows.has(index) ? 'var(--sys-color-state-hover-on-subtle)' : null})}\n                    @mouseenter=${() => input.onHighlightMatchesInFilledFiels(index)}\n                    @mouseleave=${input.onClearHighlightedMatches}>\n                  <td>${field.name || `#${field.id}`} (${field.htmlType})</td>\n                  <td>\n                      ${field.autofillType}\n                      ${field.fillingStrategy === FillingStrategy.AutocompleteAttribute ?\n                            html`<devtools-adorner title=${i18nString(UIStrings.autocompleteAttribute)} .data=${{name: field.fillingStrategy}}>\n                              <span>${i18nString(UIStrings.attr)}</span>\n                            </devtools-adorner>` :\n                        field.fillingStrategy === FillingStrategy.AutofillInferred ?\n                            html`<devtools-adorner title=${i18nString(UIStrings.inferredByHeuristics)} .data=${{name: field.fillingStrategy}}>\n                              <span>${i18nString(UIStrings.heur)}</span>\n                            </devtools-adorner>` :\n                            Lit.nothing}\n                  </td>\n                  <td>\"${field.value}\"</td>\n                </tr>`\n            )}\n          </table>\n        </devtools-data-grid>\n      </div>\n    `;\n    // clang-format on\n  };\n\n  if (!input.address && !input.filledFields.length) {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n      render(html`\n        <style>${autofillViewStyles}</style>\n        <style>${UI.inspectorCommonStyles}</style>\n        <main>\n          <div class=\"top-left-corner\">\n            <devtools-checkbox\n                ${bindToSetting(input.showTestAddressesInAutofillMenuSetting)}\n                title=${i18nString(UIStrings.showTestAddressesInAutofillMenu)}\n                jslog=${VisualLogging.toggle(input.showTestAddressesInAutofillMenuSetting.name).track({ change: true })}>\n              ${i18nString(UIStrings.showTestAddressesInAutofillMenu)}\n            </devtools-checkbox>\n            <devtools-checkbox\n                ${bindToSetting(input.autoOpenViewSetting)}\n                title=${i18nString(UIStrings.autoShowTooltip)}\n                jslog=${VisualLogging.toggle(input.autoOpenViewSetting.name).track({ change: true })}>\n              ${i18nString(UIStrings.autoShow)}\n            </devtools-checkbox>\n            <x-link href=${AUTOFILL_FEEDBACK_URL} class=\"feedback link\" jslog=${VisualLogging.link('feedback').track({click: true})}>${i18nString(UIStrings.sendFeedback)}</x-link>\n          </div>\n          <div class=\"placeholder-container\" jslog=${VisualLogging.pane('autofill-empty')}>\n            <div class=\"empty-state\">\n              <span class=\"empty-state-header\">${i18nString(UIStrings.noAutofill)}</span>\n              <div class=\"empty-state-description\">\n                <span>${i18nString(UIStrings.toStartDebugging)}</span>\n                <x-link href=${AUTOFILL_INFO_URL} class=\"link\" jslog=${VisualLogging.link('learn-more').track({click: true})}>${i18nString(UIStrings.learnMore)}</x-link>\n              </div>\n            </div>\n          </div>\n        </main>\n      `, target, {host: this});\n    // clang-format on\n    return;\n  }\n\n  // Disabled until https://crbug.com/1079231 is fixed.\n  // clang-format off\n    render(html`\n      <style>${autofillViewStyles}</style>\n      <style>${UI.inspectorCommonStyles}</style>\n      <main>\n        <div class=\"content-container\" jslog=${VisualLogging.pane('autofill')}>\n          <div class=\"right-to-left\" role=\"region\" aria-label=${i18nString(UIStrings.addressPreview)}>\n            <div class=\"header\">\n              <div class=\"label-container\">\n                <devtools-checkbox\n                    ${bindToSetting(input.showTestAddressesInAutofillMenuSetting)}\n                    title=${i18nString(UIStrings.showTestAddressesInAutofillMenu)}\n                    jslog=${VisualLogging.toggle(input.showTestAddressesInAutofillMenuSetting.name).track({ change: true })}>\n                  ${i18nString(UIStrings.showTestAddressesInAutofillMenu)}\n                </devtools-checkbox>\n              </div>\n              <div class=\"label-container\">\n                <devtools-checkbox\n                    ${bindToSetting(input.autoOpenViewSetting)}\n                    title=${i18nString(UIStrings.autoShowTooltip)}\n                    jslog=${VisualLogging.toggle(input.autoOpenViewSetting.name).track({ change: true })}>\n                  ${i18nString(UIStrings.autoShow)}\n                </devtools-checkbox>\n              </div>\n              <x-link href=${AUTOFILL_FEEDBACK_URL} class=\"feedback link\" jslog=${VisualLogging.link('feedback').track({click: true})}>${i18nString(UIStrings.sendFeedback)}</x-link>\n            </div>\n            ${renderAddress()}\n          </div>\n          ${renderFilledFields()}\n        </div>\n      </main>\n    `, target, {host: this});\n  // clang-format on\n};\n\nexport class AutofillView extends UI.Widget.VBox {\n  readonly #view: View;\n  readonly #autofillManager: AutofillManager.AutofillManager.AutofillManager;\n  #autoOpenViewSetting: Common.Settings.Setting<boolean> =\n      Common.Settings.Settings.instance().createSetting('auto-open-autofill-view-on-event', true);\n  #showTestAddressesInAutofillMenuSetting: Common.Settings.Setting<boolean>;\n  #address = '';\n  #filledFields: Protocol.Autofill.FilledField[] = [];\n  #matches: AutofillManager.AutofillManager.Match[] = [];\n  #highlightedMatches: AutofillManager.AutofillManager.Match[] = [];\n\n  constructor(autofillManager = AutofillManager.AutofillManager.AutofillManager.instance(), view = DEFAULT_VIEW) {\n    super({useShadowDom: true});\n    this.#autofillManager = autofillManager;\n    this.#view = view;\n    this.#showTestAddressesInAutofillMenuSetting =\n        Common.Settings.Settings.instance().createSetting('show-test-addresses-in-autofill-menu-on-event', false);\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n\n    const formFilledEvent = this.#autofillManager.getLastFilledAddressForm();\n    if (formFilledEvent) {\n      ({\n        address: this.#address,\n        filledFields: this.#filledFields,\n        matches: this.#matches,\n      } = formFilledEvent);\n    }\n    this.#autofillManager.addEventListener(\n        AutofillManager.AutofillManager.Events.ADDRESS_FORM_FILLED, this.#onAddressFormFilled, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.PrimaryPageChanged,\n        this.#onPrimaryPageChanged, this);\n\n    this.requestUpdate();\n  }\n\n  override willHide(): void {\n    SDK.TargetManager.TargetManager.instance().removeModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.PrimaryPageChanged,\n        this.#onPrimaryPageChanged, this);\n    this.#autofillManager.removeEventListener(\n        AutofillManager.AutofillManager.Events.ADDRESS_FORM_FILLED, this.#onAddressFormFilled, this);\n\n    super.willHide();\n  }\n\n  #onPrimaryPageChanged(): void {\n    this.#address = '';\n    this.#filledFields = [];\n    this.#matches = [];\n    this.#highlightedMatches = [];\n    this.requestUpdate();\n  }\n\n  async #onAddressFormFilled(\n      {data}: Common.EventTarget.EventTargetEvent<AutofillManager.AutofillManager.AddressFormFilledEvent>):\n      Promise<void> {\n    if (this.#autoOpenViewSetting.get()) {\n      await UI.ViewManager.ViewManager.instance().showView('autofill-view');\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.AutofillReceivedAndTabAutoOpened);\n    } else {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.AutofillReceived);\n    }\n    this.#address = data.address;\n    this.#filledFields = data.filledFields;\n    this.#matches = data.matches;\n    this.#highlightedMatches = [];\n    this.requestUpdate();\n  }\n\n  override performUpdate(): Promise<void>|void {\n    const onHighlightMatchesInAddress = (startIndex: number): void => {\n      this.#highlightedMatches =\n          this.#matches.filter(match => match.startIndex <= startIndex && match.endIndex > startIndex);\n      this.requestUpdate();\n    };\n    const onHighlightMatchesInFilledFiels = (rowIndex: number): void => {\n      this.#autofillManager.highlightFilledField(this.#filledFields[rowIndex]);\n      this.#highlightedMatches = this.#matches.filter(match => match.filledFieldIndex === rowIndex);\n      this.requestUpdate();\n    };\n    const onClearHighlightedMatches = (): void => {\n      this.#autofillManager.clearHighlightedFilledFields();\n      this.#highlightedMatches = [];\n      this.requestUpdate();\n    };\n\n    const input: ViewInput = {\n      autoOpenViewSetting: this.#autoOpenViewSetting,\n      showTestAddressesInAutofillMenuSetting: this.#showTestAddressesInAutofillMenuSetting,\n\n      address: this.#address,\n      filledFields: this.#filledFields,\n      matches: this.#matches,\n      highlightedMatches: this.#highlightedMatches,\n\n      onHighlightMatchesInAddress,\n      onHighlightMatchesInFilledFiels,\n      onClearHighlightedMatches,\n    };\n    const output: ViewOutput = undefined;\n    this.#view(input, output, this.contentElement);\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright (c) 2023 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n@scope to (devtools-widget > *) {\n  main {\n    height: 100%;\n  }\n\n  .header {\n    display: flex;\n    border-bottom: 1px solid var(--sys-color-divider);\n    width: 100%;\n  }\n\n  .placeholder-container {\n    height: calc(100% - 29px);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .address {\n    padding: 10px;\n    margin-right: auto;\n  }\n\n  .filled-fields-grid {\n    border-top: 1px solid var(--sys-color-divider);\n    box-sizing: border-box;\n  }\n\n  .content-container {\n    display: flex;\n    flex-flow: column;\n    height: 100%;\n  }\n\n  .grid-wrapper {\n    flex-grow: 1;\n  }\n\n  devtools-data-grid {\n    border: none;\n    height: 100%;\n  }\n\n  .checkbox-label {\n    display: flex;\n    align-items: center;\n  }\n\n  .right-to-left {\n    border-bottom: 1px solid var(--sys-color-divider);\n    display: flex;\n    flex-flow: row-reverse wrap;\n    justify-content: flex-end;\n  }\n\n  .label-container {\n    padding: 5px;\n    display: flex;\n    align-items: flex-start;\n  }\n\n  .top-left-corner {\n    border-bottom: 1px solid var(--sys-color-divider);\n    display: flex;\n    padding: 5px;\n    gap: 10px;\n  }\n\n  .matches-filled-field {\n    background-color: var(--sys-color-tonal-container);\n  }\n\n  .highlighted {\n    background-color: var(--sys-color-state-focus-select);\n  }\n\n  .link {\n    color: var(--sys-color-primary);\n    text-decoration-line: underline;\n  }\n\n  .feedback {\n    margin: auto 5px auto auto;\n    font-size: var(--sys-typescale-body4-size);\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./autofillView.css')} */`;"],
  "mappings": "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",
  "names": []
}
