{"version":3,"file":"AutofillView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/autofill/AutofillView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as AutofillManager from '../../models/autofill_manager/autofill_manager.js';\nimport * as Adorners from '../../ui/components/adorners/adorners.js';\nimport * as DataGrid from '../../ui/components/data_grid/data_grid.js';\nimport * as ComponentHelpers from '../../ui/components/helpers/helpers.js';\nimport * as Input from '../../ui/components/input/input.js';\nimport * as LegacyWrapper from '../../ui/components/legacy_wrapper/legacy_wrapper.js';\nimport * as LitHtml from '../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport autofillViewStyles from './autofillView.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Title placeholder text when no Autofill data is available.\n   */\n  noDataAvailable: 'No Autofill event detected',\n  /**\n   * @description Column header for column containing form field values\n   */\n  value: 'Value',\n  /**\n   * @description Column header for column containing the predicted autofill categories\n   */\n  predictedAutofillValue: 'Predicted autofill value',\n  /**\n   * @description Column header for column containing the name/label/id of form fields\n   */\n  formField: 'Form field',\n  /**\n   * @description Tooltip for an adorner for form fields which have an autocomplete attribute\n   * (http://go/mdn/HTML/Attributes/autocomplete)\n   */\n  autocompleteAttribute: 'Autocomplete attribute',\n  /**\n   * @description Abbreviation of 'attribute'. Text content of an adorner for form fields which\n   * have an autocomplete attribute (http://go/mdn/HTML/Attributes/autocomplete)\n   */\n  attr: 'attr',\n  /**\n   * @description Tooltip for an adorner for form fields which don't have an autocomplete attribute\n   * (http://go/mdn/HTML/Attributes/autocomplete) and for which Chrome used heuristics to deduce\n   * the form field's autocomplete category.\n   */\n  inferredByHeuristics: 'Inferred by heuristics',\n  /**\n   * @description Abbreviation of 'heuristics'. Text content of an adorner for form fields which\n   * don't have an autocomplete attribute (http://go/mdn/HTML/Attributes/autocomplete) and for\n   * which Chrome used heuristics to deduce the form field's autocomplete category.\n   */\n  heur: 'heur',\n  /**\n   * @description Label for checkbox in the Autofill panel. If checked, this panel will open\n   * automatically whenever a form is being autofilled.\n   */\n  autoShow: 'Open panel on autofill',\n  /**\n   * @description Aria text for the section of the autofill view containing a preview of the autofilled address.\n   */\n  addressPreview: 'Address preview',\n  /**\n   * @description Aria text for the section of the autofill view containing the info about the autofilled form fields.\n   */\n  formInspector: 'Form inspector',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/autofill/AutofillView.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class AutofillView extends LegacyWrapper.LegacyWrapper.WrappableComponent {\n  static readonly litTagName = LitHtml.literal`devtools-autofill-view`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #renderBound = this.#render.bind(this);\n  #autoOpenViewSetting?: Common.Settings.Setting<boolean>;\n  #address: string = '';\n  #filledFields: Protocol.Autofill.FilledField[] = [];\n  #matches: AutofillManager.AutofillManager.Match[] = [];\n  #highlightedMatches: AutofillManager.AutofillManager.Match[] = [];\n  #autofillModel: SDK.AutofillModel.AutofillModel|null = null;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [Input.checkboxStyles, autofillViewStyles];\n    const autofillManager = AutofillManager.AutofillManager.AutofillManager.instance();\n    const formFilledEvent = autofillManager.getLastFilledAddressForm();\n    if (formFilledEvent) {\n      ({\n        address: this.#address,\n        filledFields: this.#filledFields,\n        matches: this.#matches,\n        autofillModel: this.#autofillModel,\n      } = formFilledEvent);\n    }\n    autofillManager.addEventListener(\n        AutofillManager.AutofillManager.Events.AddressFormFilled, this.#onAddressFormFilled, this);\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.PrimaryPageChanged,\n        this.#onPrimaryPageChanged, this);\n    this.#autoOpenViewSetting =\n        Common.Settings.Settings.instance().createSetting('auto-open-autofill-view-on-event', true);\n\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  #onPrimaryPageChanged(): void {\n    this.#address = '';\n    this.#filledFields = [];\n    this.#matches = [];\n    this.#highlightedMatches = [];\n    this.#autofillModel = null;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  #onAddressFormFilled(\n      {data}: Common.EventTarget.EventTargetEvent<AutofillManager.AutofillManager.AddressFormFilledEvent>): void {\n    ({\n      address: this.#address,\n      filledFields: this.#filledFields,\n      matches: this.#matches,\n      autofillModel: this.#autofillModel,\n    } = data);\n    this.#highlightedMatches = [];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  async #render(): Promise<void> {\n    if (!ComponentHelpers.ScheduledRender.isScheduledRender(this)) {\n      throw new Error('AutofillView render was not scheduled');\n    }\n\n    if (!this.#address && !this.#filledFields.length) {\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      LitHtml.render(LitHtml.html`\n        <main>\n          <div class=\"top-right-corner\">\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" tabindex=-1 ?checked=${this.#autoOpenViewSetting?.get()} @change=${this.#onAutoOpenCheckboxChanged.bind(this)} jslog=${VisualLogging.toggle('auto-open').track({ change: true })}>\n              <span>${i18nString(UIStrings.autoShow)}</span>\n            </label>\n          </div>\n          <div class=\"placeholder-container\" jslog=${VisualLogging.pane('autofill-empty')}>\n            <div class=\"placeholder\">${i18nString(UIStrings.noDataAvailable)}</h1>\n          </div>\n        </main>\n      `, this.#shadow, {host: this});\n      // clang-format on\n      return;\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    LitHtml.render(LitHtml.html`\n      <main>\n        <div class=\"content-container\" jslog=${VisualLogging.pane('autofill')}>\n          <div class=\"right-to-left\" role=\"region\" aria-label=${i18nString(UIStrings.addressPreview)}>\n            <div class=\"label-container\">\n              <label class=\"checkbox-label\">\n                <input type=\"checkbox\" tabindex=-1 ?checked=${this.#autoOpenViewSetting?.get()} @change=${this.#onAutoOpenCheckboxChanged.bind(this)} jslog=${VisualLogging.toggle('auto-open').track({ change: true })}>\n                <span>${i18nString(UIStrings.autoShow)}</span>\n              </label>\n            </div>\n            ${this.#renderAddress()}\n          </div>\n          ${this.#renderFilledFields()}\n        </div>\n      </main>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  #onAutoOpenCheckboxChanged(e: Event): void {\n    const {checked} = e.target as HTMLInputElement;\n    this.#autoOpenViewSetting?.set(checked);\n  }\n\n  #renderAddress(): LitHtml.LitTemplate {\n    if (!this.#address) {\n      return LitHtml.nothing;\n    }\n\n    const createSpan = (startIndex: number, endIndex: number): LitHtml.TemplateResult => {\n      const textContentLines = this.#address.substring(startIndex, endIndex).split('\\n');\n      const templateLines =\n          textContentLines.map((line, i) => i === textContentLines.length - 1 ? line : LitHtml.html`${line}<br>`);\n\n      const spanClasses = LitHtml.Directives.classMap({\n        'matches-filled-field':\n            this.#matches.filter(match => match.startIndex <= startIndex && match.endIndex > startIndex).length > 0,\n        highlighted:\n            this.#highlightedMatches.filter(match => match.startIndex <= startIndex && match.endIndex > startIndex)\n                .length > 0,\n      });\n\n      return LitHtml.html`\n        <span\n          class=${spanClasses}\n          @mouseenter=${() => this.#onSpanMouseEnter(startIndex)}\n          @mouseleave=${this.#onSpanMouseLeave}\n        >${templateLines}</span>`;\n    };\n\n    // Split the address string into multiple spans. Each span is connected to\n    // 0 or more matches. This allows highlighting the corresponding grid rows\n    // when hovering over a span. And vice versa finding the corresponding\n    // spans to highlight when hovering over a grid line.\n    const spans: LitHtml.TemplateResult[] = [];\n    const matchIndices = new Set<number>([0, this.#address.length]);\n    for (const match of this.#matches) {\n      matchIndices.add(match.startIndex);\n      matchIndices.add(match.endIndex);\n    }\n    const sortedMatchIndices = Array.from(matchIndices).sort((a, b) => a - b);\n    for (let i = 0; i < sortedMatchIndices.length - 1; i++) {\n      spans.push(createSpan(sortedMatchIndices[i], sortedMatchIndices[i + 1]));\n    }\n\n    return LitHtml.html`\n      <div class=\"address\">\n        ${spans}\n      </div>\n    `;\n  }\n\n  #onSpanMouseEnter(startIndex: number): void {\n    this.#highlightedMatches =\n        this.#matches.filter(match => match.startIndex <= startIndex && match.endIndex > startIndex);\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  #onSpanMouseLeave(): void {\n    this.#highlightedMatches = [];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  #renderFilledFields(): LitHtml.LitTemplate {\n    if (!this.#filledFields.length) {\n      return LitHtml.nothing;\n    }\n\n    const gridData: DataGrid.DataGridController.DataGridControllerData = {\n      columns: [\n        {\n          id: 'name',\n          title: i18nString(UIStrings.formField),\n          widthWeighting: 50,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n        {\n          id: 'autofill-type',\n          title: i18nString(UIStrings.predictedAutofillValue),\n          widthWeighting: 50,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n        {\n          id: 'value',\n          title: i18nString(UIStrings.value),\n          widthWeighting: 50,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n        {\n          id: 'filled-field-index',\n          title: 'filledFieldIndex',\n          widthWeighting: 50,\n          hideable: true,\n          visible: false,\n        },\n      ],\n      rows: this.#buildReportRows(),\n      striped: true,\n    };\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return LitHtml.html`\n      <div class=\"grid-wrapper\" role=\"region\" aria-label=${i18nString(UIStrings.formInspector)}>\n        <${DataGrid.DataGridController.DataGridController.litTagName}\n          @rowmouseenter=${this.#onGridRowMouseEnter}\n          @rowmouseleave=${this.#onGridRowMouseLeave}\n          class=\"filled-fields-grid\"\n          .data=${gridData as DataGrid.DataGridController.DataGridControllerData}\n        >\n        </${DataGrid.DataGridController.DataGridController.litTagName}>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #onGridRowMouseEnter(event: DataGrid.DataGridEvents.RowMouseEnterEvent): void {\n    const rowIndex = event.data.row.cells[3].value;\n    if (typeof rowIndex !== 'number') {\n      return;\n    }\n    this.#highlightedMatches = this.#matches.filter(match => match.filledFieldIndex === rowIndex);\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n\n    const backendNodeId = this.#filledFields[rowIndex].fieldId;\n    if (!this.#autofillModel) {\n      return;\n    }\n    const domModel = this.#autofillModel.target().model(SDK.DOMModel.DOMModel);\n    if (!domModel) {\n      return;\n    }\n    const deferredNode = new SDK.DOMModel.DeferredDOMNode(this.#autofillModel.target(), backendNodeId);\n    if (deferredNode) {\n      domModel.overlayModel().highlightInOverlay({deferredNode}, 'all');\n    }\n  }\n\n  #onGridRowMouseLeave(): void {\n    this.#highlightedMatches = [];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n    SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n  }\n\n  #buildReportRows(): DataGrid.DataGridUtils.Row[] {\n    const highlightedGridRows = new Set(this.#highlightedMatches.map(match => match.filledFieldIndex));\n\n    return this.#filledFields.map(\n        (field, index) => {\n          const fieldName = field.name || `#${field.id}`;\n          return {\n            cells: [\n              {columnId: 'name', value: `${fieldName} (${field.htmlType})`},\n              {\n                columnId: 'autofill-type',\n                value: field.autofillType,\n                renderer: () => this.#autofillTypeRenderer(field.autofillType, field.fillingStrategy),\n              },\n              {columnId: 'value', value: `\"${field.value}\"`},\n              {columnId: 'filled-field-index', value: index},\n            ],\n            styles: {\n              'font-family': 'var(--monospace-font-family)',\n              'font-size': 'var(--monospace-font-size)',\n              ...(highlightedGridRows.has(index) && {'background-color': 'var(--sys-color-state-hover-on-subtle)'}),\n            },\n          };\n        },\n    );\n  }\n\n  #autofillTypeRenderer(autofillType: string, fillingStrategy: Protocol.Autofill.FillingStrategy):\n      LitHtml.TemplateResult {\n    const adornerContent = document.createElement('span');\n    let adornerTitle = '';\n    switch (fillingStrategy) {\n      case Protocol.Autofill.FillingStrategy.AutocompleteAttribute:\n        adornerContent.textContent = i18nString(UIStrings.attr);\n        adornerTitle = i18nString(UIStrings.autocompleteAttribute);\n        break;\n      case Protocol.Autofill.FillingStrategy.AutofillInferred:\n        adornerContent.textContent = i18nString(UIStrings.heur);\n        adornerTitle = i18nString(UIStrings.inferredByHeuristics);\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return LitHtml.html`\n      ${autofillType}\n      ${adornerContent.textContent ? LitHtml.html`\n          <${Adorners.Adorner.Adorner.litTagName} title=${adornerTitle} .data=${{name: fillingStrategy, content: adornerContent} as Adorners.Adorner.AdornerData}>\n        `: LitHtml.nothing}\n    `;\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-autofill-view', AutofillView);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-autofill-view': AutofillView;\n  }\n}\n"]}