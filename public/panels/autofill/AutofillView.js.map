{"version":3,"file":"AutofillView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/autofill/AutofillView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-lit-render-outside-of-view */\n\nimport '../../ui/components/adorners/adorners.js';\nimport '../../ui/legacy/components/data_grid/data_grid.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as AutofillManager from '../../models/autofill_manager/autofill_manager.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Lit from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport autofillViewStyles from './autofillView.css.js';\n\nconst {html, render, Directives: {styleMap}} = Lit;\nconst {FillingStrategy} = Protocol.Autofill;\nconst {bindToSetting} = UI.SettingsUI;\n\nconst UIStrings = {\n  /**\n   * @description Text shown when there is no data on autofill available.\n   */\n  noAutofill: 'No autofill detected',\n  /**\n   * @description Explanation for how to populate the autofill panel with data. Shown when there is\n   * no data available.\n   */\n  toStartDebugging: 'To start debugging autofill, use Chrome\\'s autofill menu to fill an address form.',\n  /**\n   * @description Column header for column containing form field values\n   */\n  value: 'Value',\n  /**\n   * @description Column header for column containing the predicted autofill categories\n   */\n  predictedAutofillValue: 'Predicted autofill value',\n  /**\n   * @description Column header for column containing the name/label/id of form fields\n   */\n  formField: 'Form field',\n  /**\n   * @description Tooltip for an adorner for form fields which have an autocomplete attribute\n   * (http://go/mdn/HTML/Attributes/autocomplete)\n   */\n  autocompleteAttribute: 'Autocomplete attribute',\n  /**\n   * @description Abbreviation of 'attribute'. Text content of an adorner for form fields which\n   * have an autocomplete attribute (http://go/mdn/HTML/Attributes/autocomplete)\n   */\n  attr: 'attr',\n  /**\n   * @description Tooltip for an adorner for form fields which don't have an autocomplete attribute\n   * (http://go/mdn/HTML/Attributes/autocomplete) and for which Chrome used heuristics to deduce\n   * the form field's autocomplete category.\n   */\n  inferredByHeuristics: 'Inferred by heuristics',\n  /**\n   * @description Abbreviation of 'heuristics'. Text content of an adorner for form fields which\n   * don't have an autocomplete attribute (http://go/mdn/HTML/Attributes/autocomplete) and for\n   * which Chrome used heuristics to deduce the form field's autocomplete category.\n   */\n  heur: 'heur',\n  /**\n   * @description Label for checkbox in the Autofill panel. If checked, this panel will open\n   * automatically whenever a form is being autofilled.\n   */\n  autoShow: 'Automatically open this panel',\n  /**\n   * @description Label for checkbox in the Autofill panel. If checked, test addresses will be added to the Autofill popup.\n   */\n  showTestAddressesInAutofillMenu: 'Show test addresses in autofill menu',\n  /**\n   * @description Tooltip text for a checkbox label in the Autofill panel. If checked, this panel\n   * will open automatically whenever a form is being autofilled.\n   */\n  autoShowTooltip: 'Open the autofill panel automatically when an autofill activity is detected.',\n  /**\n   * @description Aria text for the section of the autofill view containing a preview of the autofilled address.\n   */\n  addressPreview: 'Address preview',\n  /**\n   * @description Aria text for the section of the autofill view containing the info about the autofilled form fields.\n   */\n  formInspector: 'Form inspector',\n  /**\n   * @description Link text for a hyperlink to more documentation\n   */\n  learnMore: 'Learn more',\n  /**\n   * @description Link text for a hyperlink to webpage for leaving user feedback\n   */\n  sendFeedback: 'Send feedback',\n} as const;\n\nconst AUTOFILL_INFO_URL = 'https://goo.gle/devtools-autofill-panel' as Platform.DevToolsPath.UrlString;\nconst AUTOFILL_FEEDBACK_URL = 'https://crbug.com/329106326' as Platform.DevToolsPath.UrlString;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/autofill/AutofillView.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ninterface ViewInput {\n  autoOpenViewSetting: Common.Settings.Setting<boolean>;\n  showTestAddressesInAutofillMenuSetting: Common.Settings.Setting<boolean>;\n\n  address: string;\n  filledFields: Protocol.Autofill.FilledField[];\n  matches: AutofillManager.AutofillManager.Match[];\n  highlightedMatches: AutofillManager.AutofillManager.Match[];\n\n  onHighlightMatchesInAddress: (startIndex: number) => void;\n  onHighlightMatchesInFilledFiels: (rowIndex: number) => void;\n  onClearHighlightedMatches: () => void;\n}\n\ntype ViewOutput = unknown;\n\ntype View = (input: ViewInput, output: ViewOutput, target: HTMLElement) => void;\n\nconst DEFAULT_VIEW: View = (input: ViewInput, _output: ViewOutput, target: HTMLElement): void => {\n  const renderAddress = (): Lit.LitTemplate => {\n    const createSpan = (startIndex: number, endIndex: number): Lit.TemplateResult => {\n      const textContentLines = input.address.substring(startIndex, endIndex).split('\\n');\n      const templateLines =\n          textContentLines.map((line, i) => i === textContentLines.length - 1 ? line : html`${line}<br>`);\n      const hasMatches = input.matches.some(match => match.startIndex <= startIndex && match.endIndex > startIndex);\n\n      if (!hasMatches) {\n        return html`<span>${templateLines}</span>`;\n      }\n\n      const spanClasses = Lit.Directives.classMap({\n        'matches-filled-field': hasMatches,\n        highlighted:\n            input.highlightedMatches.some(match => match.startIndex <= startIndex && match.endIndex > startIndex),\n      });\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      return html`\n        <span class=${spanClasses}\n              jslog=${VisualLogging.item('matched-address-item').track({hover: true})}\n              @mouseenter=${() => input.onHighlightMatchesInAddress(startIndex)}\n              @mouseleave=${input.onClearHighlightedMatches}>\n          ${templateLines}\n        </span>`;\n      // clang-format on\n    };\n\n    // Split the address string into multiple spans. Each span is connected to\n    // 0 or more matches. This allows highlighting the corresponding grid rows\n    // when hovering over a span. And vice versa finding the corresponding\n    // spans to highlight when hovering over a grid line.\n    const spans: Lit.TemplateResult[] = [];\n    const matchIndices = new Set<number>([0, input.address.length]);\n    for (const match of input.matches) {\n      matchIndices.add(match.startIndex);\n      matchIndices.add(match.endIndex);\n    }\n    const sortedMatchIndices = Array.from(matchIndices).sort((a, b) => a - b);\n    for (let i = 0; i < sortedMatchIndices.length - 1; i++) {\n      spans.push(createSpan(sortedMatchIndices[i], sortedMatchIndices[i + 1]));\n    }\n\n    return html`\n      <div class=\"address\">\n        ${spans}\n      </div>\n    `;\n  };\n\n  const renderFilledFields = (): Lit.LitTemplate => {\n    const highlightedGridRows = new Set(input.highlightedMatches.map(match => match.filledFieldIndex));\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      <div class=\"grid-wrapper\" role=\"region\" aria-label=${i18nString(UIStrings.formInspector)}>\n        <devtools-data-grid striped\n                            class=\"filled-fields-grid\">\n          <table>\n            <tr>\n              <th id=\"name\" weight=\"50\" sortable>${i18nString(UIStrings.formField)}</th>\n              <th id=\"autofill-type\" weight=\"50\" sortable>${i18nString(UIStrings.predictedAutofillValue)}</th>\n              <th id=\"value\" weight=\"50\" sortable>${i18nString(UIStrings.value)}</th>\n            </tr>\n            ${input.filledFields.map((field, index) => html`\n                <tr style=${styleMap({\n                            'font-family': 'var(--monospace-font-family)',\n                            'font-size': 'var(--monospace-font-size)',\n                            'background-color': highlightedGridRows.has(index) ? 'var(--sys-color-state-hover-on-subtle)' : null})}\n                    @mouseenter=${() => input.onHighlightMatchesInFilledFiels(index)}\n                    @mouseleave=${input.onClearHighlightedMatches}>\n                  <td>${field.name || `#${field.id}`} (${field.htmlType})</td>\n                  <td>\n                      ${field.autofillType}\n                      ${field.fillingStrategy === FillingStrategy.AutocompleteAttribute ?\n                            html`<devtools-adorner title=${i18nString(UIStrings.autocompleteAttribute)} .data=${{name: field.fillingStrategy}}>\n                              <span>${i18nString(UIStrings.attr)}</span>\n                            </devtools-adorner>` :\n                        field.fillingStrategy === FillingStrategy.AutofillInferred ?\n                            html`<devtools-adorner title=${i18nString(UIStrings.inferredByHeuristics)} .data=${{name: field.fillingStrategy}}>\n                              <span>${i18nString(UIStrings.heur)}</span>\n                            </devtools-adorner>` :\n                            Lit.nothing}\n                  </td>\n                  <td>\"${field.value}\"</td>\n                </tr>`\n            )}\n          </table>\n        </devtools-data-grid>\n      </div>\n    `;\n    // clang-format on\n  };\n\n  if (!input.address && !input.filledFields.length) {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n      render(html`\n        <style>${autofillViewStyles}</style>\n        <style>${UI.inspectorCommonStyles}</style>\n        <main>\n          <div class=\"top-left-corner\">\n            <devtools-checkbox\n                ${bindToSetting(input.showTestAddressesInAutofillMenuSetting)}\n                title=${i18nString(UIStrings.showTestAddressesInAutofillMenu)}\n                jslog=${VisualLogging.toggle(input.showTestAddressesInAutofillMenuSetting.name).track({ change: true })}>\n              ${i18nString(UIStrings.showTestAddressesInAutofillMenu)}\n            </devtools-checkbox>\n            <devtools-checkbox\n                ${bindToSetting(input.autoOpenViewSetting)}\n                title=${i18nString(UIStrings.autoShowTooltip)}\n                jslog=${VisualLogging.toggle(input.autoOpenViewSetting.name).track({ change: true })}>\n              ${i18nString(UIStrings.autoShow)}\n            </devtools-checkbox>\n            <x-link href=${AUTOFILL_FEEDBACK_URL} class=\"feedback link\" jslog=${VisualLogging.link('feedback').track({click: true})}>${i18nString(UIStrings.sendFeedback)}</x-link>\n          </div>\n          <div class=\"placeholder-container\" jslog=${VisualLogging.pane('autofill-empty')}>\n            <div class=\"empty-state\">\n              <span class=\"empty-state-header\">${i18nString(UIStrings.noAutofill)}</span>\n              <div class=\"empty-state-description\">\n                <span>${i18nString(UIStrings.toStartDebugging)}</span>\n                <x-link href=${AUTOFILL_INFO_URL} class=\"link\" jslog=${VisualLogging.link('learn-more').track({click: true})}>${i18nString(UIStrings.learnMore)}</x-link>\n              </div>\n            </div>\n          </div>\n        </main>\n      `, target, {host: this});\n    // clang-format on\n    return;\n  }\n\n  // Disabled until https://crbug.com/1079231 is fixed.\n  // clang-format off\n    render(html`\n      <style>${autofillViewStyles}</style>\n      <style>${UI.inspectorCommonStyles}</style>\n      <main>\n        <div class=\"content-container\" jslog=${VisualLogging.pane('autofill')}>\n          <div class=\"right-to-left\" role=\"region\" aria-label=${i18nString(UIStrings.addressPreview)}>\n            <div class=\"header\">\n              <div class=\"label-container\">\n                <devtools-checkbox\n                    ${bindToSetting(input.showTestAddressesInAutofillMenuSetting)}\n                    title=${i18nString(UIStrings.showTestAddressesInAutofillMenu)}\n                    jslog=${VisualLogging.toggle(input.showTestAddressesInAutofillMenuSetting.name).track({ change: true })}>\n                  ${i18nString(UIStrings.showTestAddressesInAutofillMenu)}\n                </devtools-checkbox>\n              </div>\n              <div class=\"label-container\">\n                <devtools-checkbox\n                    ${bindToSetting(input.autoOpenViewSetting)}\n                    title=${i18nString(UIStrings.autoShowTooltip)}\n                    jslog=${VisualLogging.toggle(input.autoOpenViewSetting.name).track({ change: true })}>\n                  ${i18nString(UIStrings.autoShow)}\n                </devtools-checkbox>\n              </div>\n              <x-link href=${AUTOFILL_FEEDBACK_URL} class=\"feedback link\" jslog=${VisualLogging.link('feedback').track({click: true})}>${i18nString(UIStrings.sendFeedback)}</x-link>\n            </div>\n            ${renderAddress()}\n          </div>\n          ${renderFilledFields()}\n        </div>\n      </main>\n    `, target, {host: this});\n  // clang-format on\n};\n\nexport class AutofillView extends UI.Widget.VBox {\n  readonly #view: View;\n  readonly #autofillManager: AutofillManager.AutofillManager.AutofillManager;\n  #autoOpenViewSetting: Common.Settings.Setting<boolean> =\n      Common.Settings.Settings.instance().createSetting('auto-open-autofill-view-on-event', true);\n  #showTestAddressesInAutofillMenuSetting: Common.Settings.Setting<boolean>;\n  #address = '';\n  #filledFields: Protocol.Autofill.FilledField[] = [];\n  #matches: AutofillManager.AutofillManager.Match[] = [];\n  #highlightedMatches: AutofillManager.AutofillManager.Match[] = [];\n\n  constructor(autofillManager = AutofillManager.AutofillManager.AutofillManager.instance(), view = DEFAULT_VIEW) {\n    super({useShadowDom: true});\n    this.#autofillManager = autofillManager;\n    this.#view = view;\n    this.#showTestAddressesInAutofillMenuSetting =\n        Common.Settings.Settings.instance().createSetting('show-test-addresses-in-autofill-menu-on-event', false);\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n\n    const formFilledEvent = this.#autofillManager.getLastFilledAddressForm();\n    if (formFilledEvent) {\n      ({\n        address: this.#address,\n        filledFields: this.#filledFields,\n        matches: this.#matches,\n      } = formFilledEvent);\n    }\n    this.#autofillManager.addEventListener(\n        AutofillManager.AutofillManager.Events.ADDRESS_FORM_FILLED, this.#onAddressFormFilled, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.PrimaryPageChanged,\n        this.#onPrimaryPageChanged, this);\n\n    this.requestUpdate();\n  }\n\n  override willHide(): void {\n    SDK.TargetManager.TargetManager.instance().removeModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.PrimaryPageChanged,\n        this.#onPrimaryPageChanged, this);\n    this.#autofillManager.removeEventListener(\n        AutofillManager.AutofillManager.Events.ADDRESS_FORM_FILLED, this.#onAddressFormFilled, this);\n\n    super.willHide();\n  }\n\n  #onPrimaryPageChanged(): void {\n    this.#address = '';\n    this.#filledFields = [];\n    this.#matches = [];\n    this.#highlightedMatches = [];\n    this.requestUpdate();\n  }\n\n  async #onAddressFormFilled(\n      {data}: Common.EventTarget.EventTargetEvent<AutofillManager.AutofillManager.AddressFormFilledEvent>):\n      Promise<void> {\n    if (this.#autoOpenViewSetting.get()) {\n      await UI.ViewManager.ViewManager.instance().showView('autofill-view');\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.AutofillReceivedAndTabAutoOpened);\n    } else {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.AutofillReceived);\n    }\n    this.#address = data.address;\n    this.#filledFields = data.filledFields;\n    this.#matches = data.matches;\n    this.#highlightedMatches = [];\n    this.requestUpdate();\n  }\n\n  override performUpdate(): Promise<void>|void {\n    const onHighlightMatchesInAddress = (startIndex: number): void => {\n      this.#highlightedMatches =\n          this.#matches.filter(match => match.startIndex <= startIndex && match.endIndex > startIndex);\n      this.requestUpdate();\n    };\n    const onHighlightMatchesInFilledFiels = (rowIndex: number): void => {\n      this.#autofillManager.highlightFilledField(this.#filledFields[rowIndex]);\n      this.#highlightedMatches = this.#matches.filter(match => match.filledFieldIndex === rowIndex);\n      this.requestUpdate();\n    };\n    const onClearHighlightedMatches = (): void => {\n      this.#autofillManager.clearHighlightedFilledFields();\n      this.#highlightedMatches = [];\n      this.requestUpdate();\n    };\n\n    const input: ViewInput = {\n      autoOpenViewSetting: this.#autoOpenViewSetting,\n      showTestAddressesInAutofillMenuSetting: this.#showTestAddressesInAutofillMenuSetting,\n\n      address: this.#address,\n      filledFields: this.#filledFields,\n      matches: this.#matches,\n      highlightedMatches: this.#highlightedMatches,\n\n      onHighlightMatchesInAddress,\n      onHighlightMatchesInFilledFiels,\n      onClearHighlightedMatches,\n    };\n    const output: ViewOutput = undefined;\n    this.#view(input, output, this.contentElement);\n  }\n}\n"]}