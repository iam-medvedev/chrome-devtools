{"version":3,"file":"AutofillView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/autofill/AutofillView.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,0CAA0C,CAAC;AAClD,OAAO,mDAAmD,CAAC;AAE3D,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAEhD,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C,OAAO,KAAK,eAAe,MAAM,mDAAmD,CAAC;AACrF,OAAO,KAAK,gBAAgB,MAAM,wCAAwC,CAAC;AAC3E,OAAO,KAAK,KAAK,MAAM,oCAAoC,CAAC;AAC5D,OAAO,KAAK,aAAa,MAAM,sDAAsD,CAAC;AACtF,gGAAgG;AAChG,sDAAsD;AACtD,OAAO,wBAAwB,MAAM,wCAAwC,CAAC;AAC9E,OAAO,KAAK,GAAG,MAAM,qBAAqB,CAAC;AAC3C,OAAO,KAAK,aAAa,MAAM,2CAA2C,CAAC;AAE3E,OAAO,qBAAqB,MAAM,uBAAuB,CAAC;AAE1D,4EAA4E;AAC5E,MAAM,kBAAkB,GAAG,IAAI,aAAa,EAAE,CAAC;AAC/C,kBAAkB,CAAC,WAAW,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;AAEjE,4EAA4E;AAC5E,MAAM,qBAAqB,GAAG,IAAI,aAAa,EAAE,CAAC;AAClD,qBAAqB,CAAC,WAAW,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;AAEvE,MAAM,EAAC,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAC,QAAQ,EAAC,EAAC,GAAG,GAAG,CAAC;AACnD,MAAM,EAAC,eAAe,EAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC;AAE5C,MAAM,SAAS,GAAG;IAChB;;OAEG;IACH,UAAU,EAAE,sBAAsB;IAClC;;;OAGG;IACH,gBAAgB,EAAE,mFAAmF;IACrG;;OAEG;IACH,KAAK,EAAE,OAAO;IACd;;OAEG;IACH,sBAAsB,EAAE,0BAA0B;IAClD;;OAEG;IACH,SAAS,EAAE,YAAY;IACvB;;;OAGG;IACH,qBAAqB,EAAE,wBAAwB;IAC/C;;;OAGG;IACH,IAAI,EAAE,MAAM;IACZ;;;;OAIG;IACH,oBAAoB,EAAE,wBAAwB;IAC9C;;;;OAIG;IACH,IAAI,EAAE,MAAM;IACZ;;;OAGG;IACH,QAAQ,EAAE,+BAA+B;IACzC;;OAEG;IACH,+BAA+B,EAAE,sCAAsC;IACvE;;;OAGG;IACH,eAAe,EAAE,8EAA8E;IAC/F;;OAEG;IACH,cAAc,EAAE,iBAAiB;IACjC;;OAEG;IACH,aAAa,EAAE,gBAAgB;IAC/B;;OAEG;IACH,SAAS,EAAE,YAAY;IACvB;;OAEG;IACH,YAAY,EAAE,eAAe;CACrB,CAAC;AAEX,MAAM,iBAAiB,GAAG,yCAA4E,CAAC;AACvG,MAAM,qBAAqB,GAAG,6BAAgE,CAAC;AAE/F,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,iCAAiC,EAAE,SAAS,CAAC,CAAC;AACvF,MAAM,CAAC,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAE7E,MAAM,OAAO,YAAa,SAAQ,aAAa,CAAC,aAAa,CAAC,kBAAkB;IACrE,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAC5C,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,oBAAoB,CAAmC;IACvD,uCAAuC,CAAmC;IAC1E,QAAQ,GAAG,EAAE,CAAC;IACd,aAAa,GAAoC,EAAE,CAAC;IACpD,QAAQ,GAA4C,EAAE,CAAC;IACvD,mBAAmB,GAA4C,EAAE,CAAC;IAElE;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,oBAAoB;YACrB,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,kCAAkC,EAAE,IAAI,CAAC,CAAC;QAChG,IAAI,CAAC,uCAAuC;YACxC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,+CAA+C,EAAE,KAAK,CAAC,CAAC;IAChH,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,CAAC,KAAK,CAAC,cAAc,EAAE,kBAAkB,EAAE,qBAAqB,CAAC,CAAC;QACpG,MAAM,eAAe,GAAG,eAAe,CAAC,eAAe,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;QACnF,MAAM,eAAe,GAAG,eAAe,CAAC,wBAAwB,EAAE,CAAC;QACnE,IAAI,eAAe,EAAE,CAAC;YACpB,CAAC;gBACC,OAAO,EAAE,IAAI,CAAC,QAAQ;gBACtB,YAAY,EAAE,IAAI,CAAC,aAAa;gBAChC,OAAO,EAAE,IAAI,CAAC,QAAQ;aACvB,GAAG,eAAe,CAAC,CAAC;QACvB,CAAC;QACD,eAAe,CAAC,gBAAgB,uFACgC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;QAEjG,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CACvD,GAAG,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,kBAAkB,EACxF,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;QAEtC,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IAED,qBAAqB;QACnB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IAED,oBAAoB,CAChB,EAAC,IAAI,EAA8F;QACrG,CAAC;YACC,OAAO,EAAE,IAAI,CAAC,QAAQ;YACtB,YAAY,EAAE,IAAI,CAAC,aAAa;YAChC,OAAO,EAAE,IAAI,CAAC,QAAQ;SACvB,GAAG,IAAI,CAAC,CAAC;QACV,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IAED,KAAK,CAAC,OAAO;QACX,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC;YAC9D,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;QAC3D,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;YACjD,qDAAqD;YACrD,mBAAmB;YACnB,MAAM,CAAC,IAAI,CAAA;;;kDAGiC,UAAU,CAAC,SAAS,CAAC,+BAA+B,CAAC;;;2BAG5E,IAAI,CAAC,uCAAuC,CAAC,GAAG,EAAE;0BACnD,IAAI,CAAC,yCAAyC,CAAC,IAAI,CAAC,IAAI,CAAC;wBAC3D,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;sBACjG,UAAU,CAAC,SAAS,CAAC,+BAA+B,CAAC;;kDAEzB,UAAU,CAAC,SAAS,CAAC,eAAe,CAAC;;;yBAG9D,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE;wBAChC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC;sBAC5C,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;oBAC9E,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC;;2BAEvB,qBAAqB,gCAAgC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC;;qDAEpH,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC;;iDAExC,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC;;wBAEzD,UAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC;+BAC/B,iBAAiB,uBAAuB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC;;;;;OAKxJ,EAAE,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/B,kBAAkB;YAClB,OAAO;QACT,CAAC;QAED,qDAAqD;QACrD,mBAAmB;QACnB,MAAM,CAAC,IAAI,CAAA;;+CAEgC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC;gEACb,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC;;;sDAG9C,UAAU,CAAC,SAAS,CAAC,+BAA+B,CAAC;;;+BAG5E,IAAI,CAAC,uCAAuC,CAAC,GAAG,EAAE;8BACnD,IAAI,CAAC,yCAAyC,CAAC,IAAI,CAAC,IAAI,CAAC;4BAC3D,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;;0BAEjG,UAAU,CAAC,SAAS,CAAC,+BAA+B,CAAC;;;;sDAIzB,UAAU,CAAC,SAAS,CAAC,eAAe,CAAC;;;+BAG5D,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE;8BAChC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC;4BAC5C,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;;0BAE9E,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC;;;6BAG3B,qBAAqB,gCAAgC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC;;cAE7J,IAAI,CAAC,cAAc,EAAE;;YAEvB,IAAI,CAAC,mBAAmB,EAAE;;;KAGjC,EAAE,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/B,kBAAkB;IACpB,CAAC;IAED,0BAA0B,CAAC,CAAQ;QACjC,MAAM,EAAC,OAAO,EAAC,GAAG,CAAC,CAAC,MAA0B,CAAC;QAC/C,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IAED,yCAAyC,CAAC,CAAQ;QAChD,MAAM,EAAC,OAAO,EAAC,GAAG,CAAC,CAAC,MAA0B,CAAC;QAC/C,IAAI,CAAC,uCAAuC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC1D,eAAe,CAAC,eAAe,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,0CAA0C,EAAE,CAAC;IAC1G,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,OAAO,GAAG,CAAC,OAAO,CAAC;QACrB,CAAC;QAED,MAAM,UAAU,GAAG,CAAC,UAAkB,EAAE,QAAgB,EAAsB,EAAE;YAC9E,MAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACnF,MAAM,aAAa,GACf,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAA,GAAG,IAAI,MAAM,CAAC,CAAC;YACpG,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,IAAI,UAAU,IAAI,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC,CAAC;YAE9G,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,OAAO,IAAI,CAAA,SAAS,aAAa,SAAS,CAAC;YAC7C,CAAC;YAED,MAAM,WAAW,GAAG,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC;gBAC1C,sBAAsB,EAAE,UAAU;gBAClC,WAAW,EACP,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,IAAI,UAAU,IAAI,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;aAC1G,CAAC,CAAC;YACH,qDAAqD;YACrD,mBAAmB;YACnB,OAAO,IAAI,CAAA;;kBAEC,WAAW;wBACL,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC;wBACxC,IAAI,CAAC,iBAAiB;kBAC5B,aAAa,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC;WACtE,aAAa,SAAS,CAAC;YAC5B,kBAAkB;QACpB,CAAC,CAAC;QAEF,0EAA0E;QAC1E,0EAA0E;QAC1E,sEAAsE;QACtE,qDAAqD;QACrD,MAAM,KAAK,GAAyB,EAAE,CAAC;QACvC,MAAM,YAAY,GAAG,IAAI,GAAG,CAAS,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;QAChE,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YACnC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC;QACD,MAAM,kBAAkB,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACvD,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3E,CAAC;QAED,OAAO,IAAI,CAAA;;UAEL,KAAK;;KAEV,CAAC;IACJ,CAAC;IAED,iBAAiB,CAAC,UAAkB;QAClC,IAAI,CAAC,mBAAmB;YACpB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,IAAI,UAAU,IAAI,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC,CAAC;QACjG,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IAED,mBAAmB;QACjB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;YAC/B,OAAO,GAAG,CAAC,OAAO,CAAC;QACrB,CAAC;QAED,MAAM,mBAAmB,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACnG,qDAAqD;QACrD,mBAAmB;QACnB,OAAO,IAAI,CAAA;2DAC4C,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC;;;;;;;mDAO3C,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC;4DACtB,UAAU,CAAC,SAAS,CAAC,sBAAsB,CAAC;oDACpD,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC;;cAEjE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,CAAA;4BAC/B,QAAQ,CAAC;YACjB,aAAa,EAAE,8BAA8B;YAC7C,WAAW,EAAE,4BAA4B;YACzC,kBAAkB,EAAE,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,wCAAwC,CAAC,CAAC,CAAC,IAAI;SACrG,CAAC;gCACY,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC;gCACtC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC;;wBAE5C,KAAK,CAAC,IAAI,IAAI,IAAI,KAAK,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,QAAQ;;wBAE/C,KAAK,CAAC,YAAY;wBAClB,KAAK,CAAC,eAAe,wEAA0C,CAAC,CAAC;YAC7D,IAAI,CAAA,2BAA2B,UAAU,CAAC,SAAS,CAAC,qBAAqB,CAAC,UAAU,EAAC,IAAI,EAAE,KAAK,CAAC,eAAe,EAAC;qDACxF,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;gDAC/B,CAAC,CAAC;YAC1B,KAAK,CAAC,eAAe,8DAAqC,CAAC,CAAC;gBACxD,IAAI,CAAA,2BAA2B,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC,UAAU,EAAC,IAAI,EAAE,KAAK,CAAC,eAAe,EAAC;qDACvF,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;gDAC/B,CAAC,CAAC;gBACtB,GAAG,CAAC,OAAO;;yBAEd,KAAK,CAAC,KAAK;sBACd,CACT;;;;KAIR,CAAC;QACF,kBAAkB;IACpB,CAAC;IAED,oBAAoB,CAAC,QAAgB;QACnC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,gBAAgB,KAAK,QAAQ,CAAC,CAAC;QAC9F,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAE9E,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;QAC3D,MAAM,MAAM,GAAG,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE;aACnC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;YAC/C,EAAE,iBAAiB,EAAE;aACpB,MAAM,EAAE,CAAC;QAC7B,IAAI,MAAM,EAAE,CAAC;YACX,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YAC7E,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACrD,IAAI,YAAY,IAAI,QAAQ,EAAE,CAAC;gBAC7B,QAAQ,CAAC,YAAY,EAAE,CAAC,kBAAkB,CAAC,EAAC,YAAY,EAAC,EAAE,KAAK,CAAC,CAAC;YACpE,CAAC;QACH,CAAC;IACH,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,KAAK,gBAAgB,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC9E,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,oBAAoB,EAAE,CAAC;IACvD,CAAC;CACF;AAED,cAAc,CAAC,MAAM,CAAC,wBAAwB,EAAE,YAAY,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport '../../ui/components/adorners/adorners.js';\nimport '../../ui/legacy/components/data_grid/data_grid.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as AutofillManager from '../../models/autofill_manager/autofill_manager.js';\nimport * as ComponentHelpers from '../../ui/components/helpers/helpers.js';\nimport * as Input from '../../ui/components/input/input.js';\nimport * as LegacyWrapper from '../../ui/components/legacy_wrapper/legacy_wrapper.js';\n// inspectorCommonStyles is imported for the empty state styling that is used for the start view\n// eslint-disable-next-line rulesdir/es-modules-import\nimport inspectorCommonStylesRaw from '../../ui/legacy/inspectorCommon.css.js';\nimport * as Lit from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport autofillViewStylesRaw from './autofillView.css.js';\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst autofillViewStyles = new CSSStyleSheet();\nautofillViewStyles.replaceSync(autofillViewStylesRaw.cssContent);\n\n// TODO(crbug.com/391381439): Fully migrate off of constructed style sheets.\nconst inspectorCommonStyles = new CSSStyleSheet();\ninspectorCommonStyles.replaceSync(inspectorCommonStylesRaw.cssContent);\n\nconst {html, render, Directives: {styleMap}} = Lit;\nconst {FillingStrategy} = Protocol.Autofill;\n\nconst UIStrings = {\n  /**\n   * @description Text shown when there is no data on autofill available.\n   */\n  noAutofill: 'No autofill detected',\n  /**\n   * @description Explanation for how to populate the autofill panel with data. Shown when there is\n   * no data available.\n   */\n  toStartDebugging: 'To start debugging autofill, use Chrome\\'s autofill menu to fill an address form.',\n  /**\n   * @description Column header for column containing form field values\n   */\n  value: 'Value',\n  /**\n   * @description Column header for column containing the predicted autofill categories\n   */\n  predictedAutofillValue: 'Predicted autofill value',\n  /**\n   * @description Column header for column containing the name/label/id of form fields\n   */\n  formField: 'Form field',\n  /**\n   * @description Tooltip for an adorner for form fields which have an autocomplete attribute\n   * (http://go/mdn/HTML/Attributes/autocomplete)\n   */\n  autocompleteAttribute: 'Autocomplete attribute',\n  /**\n   * @description Abbreviation of 'attribute'. Text content of an adorner for form fields which\n   * have an autocomplete attribute (http://go/mdn/HTML/Attributes/autocomplete)\n   */\n  attr: 'attr',\n  /**\n   * @description Tooltip for an adorner for form fields which don't have an autocomplete attribute\n   * (http://go/mdn/HTML/Attributes/autocomplete) and for which Chrome used heuristics to deduce\n   * the form field's autocomplete category.\n   */\n  inferredByHeuristics: 'Inferred by heuristics',\n  /**\n   * @description Abbreviation of 'heuristics'. Text content of an adorner for form fields which\n   * don't have an autocomplete attribute (http://go/mdn/HTML/Attributes/autocomplete) and for\n   * which Chrome used heuristics to deduce the form field's autocomplete category.\n   */\n  heur: 'heur',\n  /**\n   * @description Label for checkbox in the Autofill panel. If checked, this panel will open\n   * automatically whenever a form is being autofilled.\n   */\n  autoShow: 'Automatically open this panel',\n  /**\n   * @description Label for checkbox in the Autofill panel. If checked, test addresses will be added to the Autofill popup.\n   */\n  showTestAddressesInAutofillMenu: 'Show test addresses in autofill menu',\n  /**\n   * @description Tooltip text for a checkbox label in the Autofill panel. If checked, this panel\n   * will open automatically whenever a form is being autofilled.\n   */\n  autoShowTooltip: 'Open the autofill panel automatically when an autofill activity is detected.',\n  /**\n   * @description Aria text for the section of the autofill view containing a preview of the autofilled address.\n   */\n  addressPreview: 'Address preview',\n  /**\n   * @description Aria text for the section of the autofill view containing the info about the autofilled form fields.\n   */\n  formInspector: 'Form inspector',\n  /**\n   *@description Link text for a hyperlink to more documentation\n   */\n  learnMore: 'Learn more',\n  /**\n   *@description Link text for a hyperlink to webpage for leaving user feedback\n   */\n  sendFeedback: 'Send feedback',\n} as const;\n\nconst AUTOFILL_INFO_URL = 'https://goo.gle/devtools-autofill-panel' as Platform.DevToolsPath.UrlString;\nconst AUTOFILL_FEEDBACK_URL = 'https://crbug.com/329106326' as Platform.DevToolsPath.UrlString;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/autofill/AutofillView.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class AutofillView extends LegacyWrapper.LegacyWrapper.WrappableComponent {\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #renderBound = this.#render.bind(this);\n  #autoOpenViewSetting: Common.Settings.Setting<boolean>;\n  #showTestAddressesInAutofillMenuSetting: Common.Settings.Setting<boolean>;\n  #address = '';\n  #filledFields: Protocol.Autofill.FilledField[] = [];\n  #matches: AutofillManager.AutofillManager.Match[] = [];\n  #highlightedMatches: AutofillManager.AutofillManager.Match[] = [];\n\n  constructor() {\n    super();\n    this.#autoOpenViewSetting =\n        Common.Settings.Settings.instance().createSetting('auto-open-autofill-view-on-event', true);\n    this.#showTestAddressesInAutofillMenuSetting =\n        Common.Settings.Settings.instance().createSetting('show-test-addresses-in-autofill-menu-on-event', false);\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [Input.checkboxStyles, autofillViewStyles, inspectorCommonStyles];\n    const autofillManager = AutofillManager.AutofillManager.AutofillManager.instance();\n    const formFilledEvent = autofillManager.getLastFilledAddressForm();\n    if (formFilledEvent) {\n      ({\n        address: this.#address,\n        filledFields: this.#filledFields,\n        matches: this.#matches,\n      } = formFilledEvent);\n    }\n    autofillManager.addEventListener(\n        AutofillManager.AutofillManager.Events.ADDRESS_FORM_FILLED, this.#onAddressFormFilled, this);\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.PrimaryPageChanged,\n        this.#onPrimaryPageChanged, this);\n\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  #onPrimaryPageChanged(): void {\n    this.#address = '';\n    this.#filledFields = [];\n    this.#matches = [];\n    this.#highlightedMatches = [];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  #onAddressFormFilled(\n      {data}: Common.EventTarget.EventTargetEvent<AutofillManager.AutofillManager.AddressFormFilledEvent>): void {\n    ({\n      address: this.#address,\n      filledFields: this.#filledFields,\n      matches: this.#matches,\n    } = data);\n    this.#highlightedMatches = [];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  async #render(): Promise<void> {\n    if (!ComponentHelpers.ScheduledRender.isScheduledRender(this)) {\n      throw new Error('AutofillView render was not scheduled');\n    }\n\n    if (!this.#address && !this.#filledFields.length) {\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      render(html`\n        <main>\n          <div class=\"top-left-corner\">\n            <label class=\"checkbox-label\" title=${i18nString(UIStrings.showTestAddressesInAutofillMenu)}>\n              <input\n                type=\"checkbox\"\n                ?checked=${this.#showTestAddressesInAutofillMenuSetting.get()}\n                @change=${this.#onShowTestAddressesInAutofillMenuChanged.bind(this)}\n                jslog=${VisualLogging.toggle(this.#showTestAddressesInAutofillMenuSetting.name).track({ change: true })}>\n              <span>${i18nString(UIStrings.showTestAddressesInAutofillMenu)}</span>\n            </label>\n            <label class=\"checkbox-label\" title=${i18nString(UIStrings.autoShowTooltip)}>\n            <input\n              type=\"checkbox\"\n              ?checked=${this.#autoOpenViewSetting.get()}\n              @change=${this.#onAutoOpenCheckboxChanged.bind(this)}\n              jslog=${VisualLogging.toggle(this.#autoOpenViewSetting.name).track({ change: true })}>\n            <span>${i18nString(UIStrings.autoShow)}</span>\n            </label>\n            <x-link href=${AUTOFILL_FEEDBACK_URL} class=\"feedback link\" jslog=${VisualLogging.link('feedback').track({click: true})}>${i18nString(UIStrings.sendFeedback)}</x-link>\n          </div>\n          <div class=\"placeholder-container\" jslog=${VisualLogging.pane('autofill-empty')}>\n            <div class=\"empty-state\">\n              <span class=\"empty-state-header\">${i18nString(UIStrings.noAutofill)}</span>\n              <div class=\"empty-state-description\">\n                <span>${i18nString(UIStrings.toStartDebugging)}</span>\n                <x-link href=${AUTOFILL_INFO_URL} class=\"link\" jslog=${VisualLogging.link('learn-more').track({click: true})}>${i18nString(UIStrings.learnMore)}</x-link>\n              </div>\n            </div>\n          </div>\n        </main>\n      `, this.#shadow, {host: this});\n      // clang-format on\n      return;\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <main>\n        <div class=\"content-container\" jslog=${VisualLogging.pane('autofill')}>\n          <div class=\"right-to-left\" role=\"region\" aria-label=${i18nString(UIStrings.addressPreview)}>\n            <div class=\"header\">\n              <div class=\"label-container\">\n                <label class=\"checkbox-label\" title=${i18nString(UIStrings.showTestAddressesInAutofillMenu)}>\n                  <input\n                    type=\"checkbox\"\n                    ?checked=${this.#showTestAddressesInAutofillMenuSetting.get()}\n                    @change=${this.#onShowTestAddressesInAutofillMenuChanged.bind(this)}\n                    jslog=${VisualLogging.toggle(this.#showTestAddressesInAutofillMenuSetting.name).track({ change: true })}\n                  >\n                  <span>${i18nString(UIStrings.showTestAddressesInAutofillMenu)}</span>\n                </label>\n              </div>\n              <div class=\"label-container\">\n                <label class=\"checkbox-label\" title=${i18nString(UIStrings.autoShowTooltip)}>\n                  <input\n                    type=\"checkbox\"\n                    ?checked=${this.#autoOpenViewSetting.get()}\n                    @change=${this.#onAutoOpenCheckboxChanged.bind(this)}\n                    jslog=${VisualLogging.toggle(this.#autoOpenViewSetting.name).track({ change: true })}\n                  >\n                  <span>${i18nString(UIStrings.autoShow)}</span>\n                </label>\n              </div>\n              <x-link href=${AUTOFILL_FEEDBACK_URL} class=\"feedback link\" jslog=${VisualLogging.link('feedback').track({click: true})}>${i18nString(UIStrings.sendFeedback)}</x-link>\n            </div>\n            ${this.#renderAddress()}\n          </div>\n          ${this.#renderFilledFields()}\n        </div>\n      </main>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  #onAutoOpenCheckboxChanged(e: Event): void {\n    const {checked} = e.target as HTMLInputElement;\n    this.#autoOpenViewSetting.set(checked);\n  }\n\n  #onShowTestAddressesInAutofillMenuChanged(e: Event): void {\n    const {checked} = e.target as HTMLInputElement;\n    this.#showTestAddressesInAutofillMenuSetting.set(checked);\n    AutofillManager.AutofillManager.AutofillManager.instance().onShowAutofillTestAddressesSettingsChanged();\n  }\n\n  #renderAddress(): Lit.LitTemplate {\n    if (!this.#address) {\n      return Lit.nothing;\n    }\n\n    const createSpan = (startIndex: number, endIndex: number): Lit.TemplateResult => {\n      const textContentLines = this.#address.substring(startIndex, endIndex).split('\\n');\n      const templateLines =\n          textContentLines.map((line, i) => i === textContentLines.length - 1 ? line : html`${line}<br>`);\n      const hasMatches = this.#matches.some(match => match.startIndex <= startIndex && match.endIndex > startIndex);\n\n      if (!hasMatches) {\n        return html`<span>${templateLines}</span>`;\n      }\n\n      const spanClasses = Lit.Directives.classMap({\n        'matches-filled-field': hasMatches,\n        highlighted:\n            this.#highlightedMatches.some(match => match.startIndex <= startIndex && match.endIndex > startIndex),\n      });\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      return html`\n        <span\n          class=${spanClasses}\n          @mouseenter=${() => this.#onSpanMouseEnter(startIndex)}\n          @mouseleave=${this.#onSpanMouseLeave}\n          jslog=${VisualLogging.item('matched-address-item').track({hover: true})}\n        >${templateLines}</span>`;\n      // clang-format on\n    };\n\n    // Split the address string into multiple spans. Each span is connected to\n    // 0 or more matches. This allows highlighting the corresponding grid rows\n    // when hovering over a span. And vice versa finding the corresponding\n    // spans to highlight when hovering over a grid line.\n    const spans: Lit.TemplateResult[] = [];\n    const matchIndices = new Set<number>([0, this.#address.length]);\n    for (const match of this.#matches) {\n      matchIndices.add(match.startIndex);\n      matchIndices.add(match.endIndex);\n    }\n    const sortedMatchIndices = Array.from(matchIndices).sort((a, b) => a - b);\n    for (let i = 0; i < sortedMatchIndices.length - 1; i++) {\n      spans.push(createSpan(sortedMatchIndices[i], sortedMatchIndices[i + 1]));\n    }\n\n    return html`\n      <div class=\"address\">\n        ${spans}\n      </div>\n    `;\n  }\n\n  #onSpanMouseEnter(startIndex: number): void {\n    this.#highlightedMatches =\n        this.#matches.filter(match => match.startIndex <= startIndex && match.endIndex > startIndex);\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  #onSpanMouseLeave(): void {\n    this.#highlightedMatches = [];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  #renderFilledFields(): Lit.LitTemplate {\n    if (!this.#filledFields.length) {\n      return Lit.nothing;\n    }\n\n    const highlightedGridRows = new Set(this.#highlightedMatches.map(match => match.filledFieldIndex));\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      <div class=\"grid-wrapper\" role=\"region\" aria-label=${i18nString(UIStrings.formInspector)}>\n        <devtools-data-grid\n          striped\n          class=\"filled-fields-grid\"\n        >\n          <table>\n            <tr>\n              <th id=\"name\" weight=\"50\" sortable>${i18nString(UIStrings.formField)}</th>\n              <th id=\"autofill-type\" weight=\"50\" sortable>${i18nString(UIStrings.predictedAutofillValue)}</th>\n              <th id=\"value\" weight=\"50\" sortable>${i18nString(UIStrings.value)}</th>\n            </tr>\n            ${this.#filledFields.map((field, index) => html`\n                <tr style=${styleMap({\n                    'font-family': 'var(--monospace-font-family)',\n                    'font-size': 'var(--monospace-font-size)',\n                    'background-color': highlightedGridRows.has(index) ? 'var(--sys-color-state-hover-on-subtle)' : null,\n                  })}\n                  @mouseenter=${() => this.#onGridRowMouseEnter(index)}\n                  @mouseleave=${this.#onGridRowMouseLeave.bind(this)}\n                >\n                  <td>${field.name || `#${field.id}`} (${field.htmlType})</td>\n                  <td>\n                      ${field.autofillType}\n                      ${field.fillingStrategy === FillingStrategy.AutocompleteAttribute ?\n                            html`<devtools-adorner title=${i18nString(UIStrings.autocompleteAttribute)} .data=${{name: field.fillingStrategy}}>\n                              <span slot=\"content\">${i18nString(UIStrings.attr)}</span>\n                            </devtools-adorner>` :\n                        field.fillingStrategy === FillingStrategy.AutofillInferred ?\n                            html`<devtools-adorner title=${i18nString(UIStrings.inferredByHeuristics)} .data=${{name: field.fillingStrategy}}>\n                              <span slot=\"content\">${i18nString(UIStrings.heur)}</span>\n                            </devtools-adorner>` :\n                            Lit.nothing}\n                  </td>\n                  <td>\"${field.value}\"</td>\n                </tr>`\n            )}\n          </table>\n        </devtools-data-grid>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #onGridRowMouseEnter(rowIndex: number): void {\n    this.#highlightedMatches = this.#matches.filter(match => match.filledFieldIndex === rowIndex);\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n\n    const backendNodeId = this.#filledFields[rowIndex].fieldId;\n    const target = SDK.FrameManager.FrameManager.instance()\n                       .getFrame(this.#filledFields[rowIndex].frameId)\n                       ?.resourceTreeModel()\n                       .target();\n    if (target) {\n      const deferredNode = new SDK.DOMModel.DeferredDOMNode(target, backendNodeId);\n      const domModel = target.model(SDK.DOMModel.DOMModel);\n      if (deferredNode && domModel) {\n        domModel.overlayModel().highlightInOverlay({deferredNode}, 'all');\n      }\n    }\n  }\n\n  #onGridRowMouseLeave(): void {\n    this.#highlightedMatches = [];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n    SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n  }\n}\n\ncustomElements.define('devtools-autofill-view', AutofillView);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-autofill-view': AutofillView;\n  }\n}\n"]}