{"version":3,"file":"AutofillView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/autofill/AutofillView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as AutofillManager from '../../models/autofill_manager/autofill_manager.js';\nimport * as Adorners from '../../ui/components/adorners/adorners.js';\nimport * as DataGrid from '../../ui/components/data_grid/data_grid.js';\nimport * as ComponentHelpers from '../../ui/components/helpers/helpers.js';\nimport * as Input from '../../ui/components/input/input.js';\nimport * as LegacyWrapper from '../../ui/components/legacy_wrapper/legacy_wrapper.js';\nimport * as LitHtml from '../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport autofillViewStyles from './autofillView.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Title placeholder text when no Autofill data is available.\n   */\n  noDataAvailable: 'No Autofill event detected',\n  /**\n   * @description Column header for column containing form field values\n   */\n  value: 'Value',\n  /**\n   * @description Column header for column containing the predicted autofill categories\n   */\n  predictedAutofillValue: 'Predicted autofill value',\n  /**\n   * @description Column header for column containing the name/label/id of form fields\n   */\n  formField: 'Form field',\n  /**\n   * @description Tooltip for an adorner for form fields which have an autocomplete attribute\n   * (http://go/mdn/HTML/Attributes/autocomplete)\n   */\n  autocompleteAttribute: 'Autocomplete attribute',\n  /**\n   * @description Abbreviation of 'attribute'. Text content of an adorner for form fields which\n   * have an autocomplete attribute (http://go/mdn/HTML/Attributes/autocomplete)\n   */\n  attr: 'attr',\n  /**\n   * @description Tooltip for an adorner for form fields which don't have an autocomplete attribute\n   * (http://go/mdn/HTML/Attributes/autocomplete) and for which Chrome used heuristics to deduce\n   * the form field's autocomplete category.\n   */\n  inferredByHeuristics: 'Inferred by heuristics',\n  /**\n   * @description Abbreviation of 'heuristics'. Text content of an adorner for form fields which\n   * don't have an autocomplete attribute (http://go/mdn/HTML/Attributes/autocomplete) and for\n   * which Chrome used heuristics to deduce the form field's autocomplete category.\n   */\n  heur: 'heur',\n  /**\n   * @description Label for checkbox in the Autofill tab. If checked, this tab will open\n   * automatically whenever a form is being autofilled.\n   */\n  autoShow: 'Automatically open tab on autofill',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/autofill/AutofillView.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class AutofillView extends LegacyWrapper.LegacyWrapper.WrappableComponent {\n  static readonly litTagName = LitHtml.literal`devtools-autofill-view`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #renderBound = this.#render.bind(this);\n  #addressUi: Protocol.Autofill.AddressUI = {addressFields: []};\n  #filledFields: Protocol.Autofill.FilledField[] = [];\n  #autoOpenViewSetting?: Common.Settings.Setting<boolean>;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [Input.checkboxStyles, autofillViewStyles];\n    const autofillManager = AutofillManager.AutofillManager.AutofillManager.instance();\n    const formFilledEvent = autofillManager.getLastFilledAddressForm();\n    if (formFilledEvent) {\n      ({addressUi: this.#addressUi, filledFields: this.#filledFields} = formFilledEvent.event);\n    }\n    autofillManager.addEventListener(\n        AutofillManager.AutofillManager.Events.AddressFormFilled, this.#onAddressFormFilled, this);\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.PrimaryPageChanged,\n        this.#onPrimaryPageChanged, this);\n    this.#autoOpenViewSetting = Common.Settings.Settings.instance().createSetting('autoOpenAutofillViewOnEvent', true);\n\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  #onPrimaryPageChanged(): void {\n    this.#addressUi = {addressFields: []};\n    this.#filledFields = [];\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  #onAddressFormFilled(\n      {data}: Common.EventTarget.EventTargetEvent<AutofillManager.AutofillManager.AddressFormFilledEvent>): void {\n    ({addressUi: this.#addressUi, filledFields: this.#filledFields} = data.event);\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  async #render(): Promise<void> {\n    if (!ComponentHelpers.ScheduledRender.isScheduledRender(this)) {\n      throw new Error('AutofillView render was not scheduled');\n    }\n\n    if (!this.#addressUi.addressFields.length && !this.#filledFields.length) {\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      LitHtml.render(LitHtml.html`\n        <div class=\"top-right-corner\">\n          <label class=\"checkbox-label\">\n            <input type=\"checkbox\" tabindex=-1 ?checked=${this.#autoOpenViewSetting?.get()} @change=${this.#onAutoOpenCheckboxChanged.bind(this)} jslog=${VisualLogging.toggle().track({ change: true }).context('auto-open')}>\n            <span>${i18nString(UIStrings.autoShow)}</span>\n          </label>\n        </div>\n        <div class=\"placeholder-container\" jslog=${VisualLogging.pane().context('autofill-empty')}>\n          <div class=\"placeholder\">${i18nString(UIStrings.noDataAvailable)}</h1>\n        </div>\n      `, this.#shadow, {host: this});\n      // clang-format on\n      return;\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    LitHtml.render(LitHtml.html`\n      <div class=\"content-container\" jslog=${VisualLogging.pane().context('autofill')}>\n        <div class=\"right-to-left\">\n          <div class=\"label-container\">\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" tabindex=-1 ?checked=${this.#autoOpenViewSetting?.get()} @change=${this.#onAutoOpenCheckboxChanged.bind(this)} jslog=${VisualLogging.toggle().track({ change: true }).context('auto-open')}>\n              <span>${i18nString(UIStrings.autoShow)}</span>\n            </label>\n          </div>\n          ${this.#renderAddressUi()}\n        </div>\n        ${this.#renderFilledFields()}\n      </div>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  #onAutoOpenCheckboxChanged(e: Event): void {\n    const {checked} = e.target as HTMLInputElement;\n    this.#autoOpenViewSetting?.set(checked);\n  }\n\n  #renderAddressUi(): LitHtml.LitTemplate {\n    if (!this.#addressUi.addressFields.length) {\n      return LitHtml.nothing;\n    }\n    return LitHtml.html`\n      <div class=\"address\">\n        ${this.#addressUi.addressFields.map(fields => this.#renderAddressRow(fields))}\n      </div>\n    `;\n  }\n\n  #renderAddressRow(fields: Protocol.Autofill.AddressFields): LitHtml.TemplateResult {\n    return LitHtml.html`\n      <div>${fields.fields.map(field => field.value).join(' ')}</div>\n    `;\n  }\n\n  #renderFilledFields(): LitHtml.LitTemplate {\n    if (!this.#filledFields.length) {\n      return LitHtml.nothing;\n    }\n\n    const gridData: DataGrid.DataGridController.DataGridControllerData = {\n      columns: [\n        {\n          id: 'name',\n          title: i18nString(UIStrings.formField),\n          widthWeighting: 50,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n        {\n          id: 'autofillType',\n          title: i18nString(UIStrings.predictedAutofillValue),\n          widthWeighting: 50,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n        {\n          id: 'value',\n          title: i18nString(UIStrings.value),\n          widthWeighting: 50,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n      ],\n      rows: this.#buildReportRows(),\n      striped: true,\n    };\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return LitHtml.html`\n      <div class=\"grid-wrapper\">\n        <${DataGrid.DataGridController.DataGridController.litTagName} class=\"filled-fields-grid\" .data=${\n          gridData as DataGrid.DataGridController.DataGridControllerData}>\n        </${DataGrid.DataGridController.DataGridController.litTagName}>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #buildReportRows(): DataGrid.DataGridUtils.Row[] {\n    return this.#filledFields.map(\n        field => {\n          const fieldName = field.name || `#${field.id}`;\n          return {\n            cells: [\n              {columnId: 'name', value: `${fieldName} (${field.htmlType})`},\n              {\n                columnId: 'autofillType',\n                value: field.autofillType,\n                renderer: () => this.#autofillTypeRenderer(field.autofillType, field.fillingStrategy),\n              },\n              {columnId: 'value', value: `\"${field.value}\"`},\n            ],\n          };\n        },\n    );\n  }\n\n  #autofillTypeRenderer(autofillType: string, fillingStrategy: Protocol.Autofill.FillingStrategy):\n      LitHtml.TemplateResult {\n    const adornerContent = document.createElement('span');\n    let adornerTitle = '';\n    switch (fillingStrategy) {\n      case Protocol.Autofill.FillingStrategy.AutocompleteAttribute:\n        adornerContent.textContent = i18nString(UIStrings.attr);\n        adornerTitle = i18nString(UIStrings.autocompleteAttribute);\n        break;\n      case Protocol.Autofill.FillingStrategy.AutofillInferred:\n        adornerContent.textContent = i18nString(UIStrings.heur);\n        adornerTitle = i18nString(UIStrings.inferredByHeuristics);\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return LitHtml.html`\n      ${autofillType}\n      ${adornerContent.textContent ? LitHtml.html`\n          <${Adorners.Adorner.Adorner.litTagName} title=${adornerTitle} .data=${{name: fillingStrategy, content: adornerContent} as Adorners.Adorner.AdornerData}>\n        `: LitHtml.nothing}\n    `;\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-autofill-view', AutofillView);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-autofill-view': AutofillView;\n  }\n}\n"]}