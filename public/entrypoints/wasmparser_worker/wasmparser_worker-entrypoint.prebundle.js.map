{"version":3,"file":"wasmparser_worker-entrypoint.prebundle.js","sourceRoot":"","sources":["wasmparser_worker-entrypoint.prebundle.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,gBAAgB,MAAM,wBAAwB,CAAC;AAE3D,IAAI,CAAC,SAAS,GAAG,CAAC,KAA0D,EAAE,EAAE;IAC9E,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;IAEjC,IAAI,MAAM,KAAK,aAAa,EAAE,CAAC;QAC7B,OAAO;IACT,CAAC;IAED,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,OAAgB,EAAE,EAAE;QACvG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC;AAEF,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as WasmParserWorker from './wasmparser_worker.js';\n\nself.onmessage = (event: {data: {method: string, params: {content: string}}}) => {\n  const method = event.data.method;\n\n  if (method !== 'disassemble') {\n    return;\n  }\n\n  self.postMessage(WasmParserWorker.WasmParserWorker.dissambleWASM(event.data.params, (message: unknown) => {\n    self.postMessage(message);\n  }));\n};\n\nself.postMessage('workerReady');\n"]}