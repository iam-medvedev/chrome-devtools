{
  "version": 3,
  "sources": ["../../../../../../front_end/entrypoints/wasmparser_worker/WasmParserWorker.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as WasmParser from '../../third_party/wasmparser/wasmparser.js';\n\nexport function dissambleWASM(\n    params: {\n      content: string,\n    },\n    postMessage: (arg0: unknown) => void): void {\n  try {\n    const dataBuffer = Common.Base64.decode(params.content);\n\n    let parser: WasmParser.WasmParser.BinaryReader = new WasmParser.WasmParser.BinaryReader();\n    parser.setData(dataBuffer.buffer, 0, dataBuffer.byteLength);\n    const nameGenerator = new WasmParser.WasmDis.DevToolsNameGenerator();\n    nameGenerator.read(parser);\n\n    const data = new Uint8Array(dataBuffer);\n    parser = new WasmParser.WasmParser.BinaryReader();\n    const dis = new WasmParser.WasmDis.WasmDisassembler();\n    dis.addOffsets = true;\n    dis.exportMetadata = nameGenerator.getExportMetadata();\n    dis.nameResolver = nameGenerator.getNameResolver();\n    const lines = [];\n    const offsets = [];\n    const functionBodyOffsets = [];\n    let chunkSize: number = 128 * 1024;\n    let buffer = new Uint8Array(chunkSize);\n    let pendingSize = 0;\n    let offsetInModule = 0;\n    for (let i = 0; i < data.length;) {\n      if (chunkSize > data.length - i) {\n        chunkSize = data.length - i;\n      }\n      const bufferSize = pendingSize + chunkSize;\n      if (buffer.byteLength < bufferSize) {\n        const newBuffer = new Uint8Array(bufferSize);\n        newBuffer.set(buffer);\n        buffer = newBuffer;\n      }\n      while (pendingSize < bufferSize) {\n        buffer[pendingSize++] = data[i++];\n      }\n      parser.setData(buffer.buffer, 0, bufferSize, i === data.length);\n\n      // The disassemble will attemp to fetch the data as much as possible.\n      const finished = dis.disassembleChunk(parser, offsetInModule);\n\n      const result = (dis.getResult() as {\n        lines: string[],\n        offsets: number[],\n        functionBodyOffsets: Array<{\n          start: number,\n          end: number,\n        }>,\n      });\n\n      for (const line of result.lines) {\n        lines.push(line);\n      }\n      for (const offset of result.offsets) {\n        offsets.push(offset);\n      }\n      for (const functionBodyOffset of result.functionBodyOffsets) {\n        functionBodyOffsets.push(functionBodyOffset);\n      }\n\n      if (finished) {\n        break;\n      }\n\n      if (parser.position === 0) {\n        // Parser did not consume anything, needs more data.\n        pendingSize = bufferSize;\n        continue;\n      }\n\n      // Shift the data to the beginning of the buffer.\n      const pending = parser.data.subarray(parser.position, parser.length);\n      pendingSize = pending.length;\n      buffer.set(pending);\n      offsetInModule += parser.position;\n\n      const percentage = Math.floor((offsetInModule / data.length) * 100);\n      postMessage({event: 'progress', params: {percentage}});\n    }\n\n    postMessage({event: 'progress', params: {percentage: 100}});\n\n    postMessage({method: 'disassemble', result: {lines, offsets, functionBodyOffsets}});\n  } catch (error) {\n    postMessage({method: 'disassemble', error});\n  }\n}\n"],
  "mappings": ";;;;;;;AAAA;;;;AAIA,YAAY,YAAY;AACxB,YAAY,gBAAgB;AAEtB,SAAU,cACZ,QAGA,aAAoC;AACtC,MAAI;AACF,UAAM,aAAoB,cAAO,OAAO,OAAO,OAAO;AAEtD,QAAI,SAA6C,IAAe,sBAAW,aAAY;AACvF,WAAO,QAAQ,WAAW,QAAQ,GAAG,WAAW,UAAU;AAC1D,UAAM,gBAAgB,IAAe,mBAAQ,sBAAqB;AAClE,kBAAc,KAAK,MAAM;AAEzB,UAAM,OAAO,IAAI,WAAW,UAAU;AACtC,aAAS,IAAe,sBAAW,aAAY;AAC/C,UAAM,MAAM,IAAe,mBAAQ,iBAAgB;AACnD,QAAI,aAAa;AACjB,QAAI,iBAAiB,cAAc,kBAAiB;AACpD,QAAI,eAAe,cAAc,gBAAe;AAChD,UAAM,QAAQ,CAAA;AACd,UAAM,UAAU,CAAA;AAChB,UAAM,sBAAsB,CAAA;AAC5B,QAAI,YAAoB,MAAM;AAC9B,QAAI,SAAS,IAAI,WAAW,SAAS;AACrC,QAAI,cAAc;AAClB,QAAI,iBAAiB;AACrB,aAAS,IAAI,GAAG,IAAI,KAAK,UAAS;AAChC,UAAI,YAAY,KAAK,SAAS,GAAG;AAC/B,oBAAY,KAAK,SAAS;MAC5B;AACA,YAAM,aAAa,cAAc;AACjC,UAAI,OAAO,aAAa,YAAY;AAClC,cAAM,YAAY,IAAI,WAAW,UAAU;AAC3C,kBAAU,IAAI,MAAM;AACpB,iBAAS;MACX;AACA,aAAO,cAAc,YAAY;AAC/B,eAAO,aAAa,IAAI,KAAK,GAAG;MAClC;AACA,aAAO,QAAQ,OAAO,QAAQ,GAAG,YAAY,MAAM,KAAK,MAAM;AAG9D,YAAM,WAAW,IAAI,iBAAiB,QAAQ,cAAc;AAE5D,YAAM,SAAU,IAAI,UAAS;AAS7B,iBAAW,QAAQ,OAAO,OAAO;AAC/B,cAAM,KAAK,IAAI;MACjB;AACA,iBAAW,UAAU,OAAO,SAAS;AACnC,gBAAQ,KAAK,MAAM;MACrB;AACA,iBAAW,sBAAsB,OAAO,qBAAqB;AAC3D,4BAAoB,KAAK,kBAAkB;MAC7C;AAEA,UAAI,UAAU;AACZ;MACF;AAEA,UAAI,OAAO,aAAa,GAAG;AAEzB,sBAAc;AACd;MACF;AAGA,YAAM,UAAU,OAAO,KAAK,SAAS,OAAO,UAAU,OAAO,MAAM;AACnE,oBAAc,QAAQ;AACtB,aAAO,IAAI,OAAO;AAClB,wBAAkB,OAAO;AAEzB,YAAM,aAAa,KAAK,MAAO,iBAAiB,KAAK,SAAU,GAAG;AAClE,kBAAY,EAAC,OAAO,YAAY,QAAQ,EAAC,WAAU,EAAC,CAAC;IACvD;AAEA,gBAAY,EAAC,OAAO,YAAY,QAAQ,EAAC,YAAY,IAAG,EAAC,CAAC;AAE1D,gBAAY,EAAC,QAAQ,eAAe,QAAQ,EAAC,OAAO,SAAS,oBAAmB,EAAC,CAAC;EACpF,SAAS,OAAO;AACd,gBAAY,EAAC,QAAQ,eAAe,MAAK,CAAC;EAC5C;AACF;",
  "names": []
}
