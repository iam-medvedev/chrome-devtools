{"version":3,"file":"InspectorMain.test.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/inspector_main/InspectorMain.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,cAAc,MAAM,+CAA+C,CAAC;AAChF,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C,OAAO,EACL,YAAY,EACZ,gBAAgB,EAChB,gBAAgB,GACjB,MAAM,qCAAqC,CAAC;AAC7C,OAAO,EAAC,UAAU,EAAC,MAAM,iCAAiC,CAAC;AAC3D,OAAO,EACL,0BAA0B,EAC1B,gCAAgC,GACjC,MAAM,iCAAiC,CAAC;AACzC,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAEhD,OAAO,KAAK,aAAa,MAAM,qBAAqB,CAAC;AAErD,0BAA0B,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC7D,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC/B,MAAM,SAAS,GAAG,YAAY,CAAC,EAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;QAC5D,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAC,CAAC,CAAC;QAC9D,MAAM,WAAW,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,CAAC;QAC5D,MAAM,QAAQ,GAAG,IAAI,aAAa,CAAC,aAAa,CAAC,2BAA2B,EAAE,CAAC;QAC/E,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE,qBAAqB,CAAC,CAAC;QAC/E,QAAQ,CAAC,YAAY,CAAC,EAAwB,EAAE,KAAK,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,0BAA0B,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACnD,MAAM,WAAW,GAAG,YAAiD,CAAC;IAEtE,MAAM,eAAe,GAAG,KAAK,IAAI,EAAE;QACjC,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/F,MAAM,UAAU,GAAG,aAAa,CAAC,GAAG,EAAE,CAAC;QACvC,MAAM,UAAU,GAAG,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;QAC3E,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,YAAY,CACnD,cAA0C,EAAE,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;QAC1G,MAAM,UAAU,CAAC;IACnB,CAAC,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iDAAiD,EAAE,GAAG,EAAE;QAC/D,yFAAyF;QACzF,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,CAAC,QAAQ,CAAC,wBAAwB,CAAC;gBACvC,WAAW,EAAE,8BAA8B;gBAC3C,WAAW,qDAAqC;gBAChD,YAAY,EAAE,KAAK;aACpB,CAAC,CAAC;YACH,MAAM,CAAC,QAAQ,CAAC,wBAAwB,CAAC;gBACvC,WAAW,EAAE,6BAA6B;gBAC1C,WAAW,qDAAqC;gBAChD,YAAY,EAAE,KAAK;aACpB,CAAC,CAAC;YACH,MAAM,CAAC,QAAQ,CAAC,wBAAwB,CAAC;gBACvC,WAAW,EAAE,oBAAoB;gBACjC,WAAW,qDAAqC;gBAChD,YAAY,EAAE,KAAK;aACpB,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC;YACjE,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAC7B,EAAC,QAAQ,EAAE,IAAI,EAAE,aAAa,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,YAAY,EAAE,OAAO,EAAC,CAAC,CAAC;QAC/F,CAAC,CAAC,CAAC;QAEH,SAAS,gBAAgB,CACrB,kCAA4C,EAAE,+BAAyC,EACvF,iCAA2C,EAAE,6BAA8C;YAC7F,gBAAgB,CAAC;gBACf,wBAAwB,EAAE;oBACxB,kCAAkC;oBAClC,iCAAiC;oBACjC,+BAA+B;oBAC/B,6BAA6B;iBAC9B;gBACD,iBAAiB,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC;aACnC,CAAC,CAAC;QACL,CAAC;QAED,SAAS,yBAAyB,CAC9B,4BAAsC,EAAE,4BAAsC,EAC9E,0BAAoC;YACtC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,CAC7C,iCAAiC,EAAE,4BAA4B,CAAC,CAAC;YACrE,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,CAC7C,kCAAkC,EAAE,CAAC,4BAA4B,CAAC,CAAC;YACvE,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,+BAA+B,EAAE,CAAC,0BAA0B,CAAC,CAAC;QAClH,CAAC;QAED,EAAE,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;YACrF,MAAM,yBAAyB,GAAG,IAAI,CAAC;YACvC,MAAM,kBAAkB,GAAG,IAAI,CAAC;YAChC,MAAM,iBAAiB,GAAG,IAAI,CAAC;YAC/B,MAAM,iCAAiC,GAAG,IAAI,CAAC;YAC/C,gBAAgB,CACZ,yBAAyB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iCAAiC,CAAC,CAAC;YACzG,yBAAyB,CAAC,yBAAyB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;YAE5F,MAAM,wBAAwB,GAC1B,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,yCAAyC,CAAC,CAAC;YACpG,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;YAE1B,MAAM,CAAC,MAAM,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,yBAAyB,GAAG,IAAI,CAAC;YACvC,MAAM,kBAAkB,GAAG,IAAI,CAAC;YAChC,MAAM,iBAAiB,GAAG,IAAI,CAAC;YAC/B,gBAAgB,CAAC,yBAAyB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;YAEnF,MAAM,wBAAwB,GAC1B,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,yCAAyC,CAAC,CAAC;YACpG,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;YAE1B,MAAM,CAAC,MAAM,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;YAClF,MAAM,yBAAyB,GAAG,IAAI,CAAC;YACvC,MAAM,kBAAkB,GAAG,IAAI,CAAC;YAChC,MAAM,iBAAiB,GAAG,IAAI,CAAC;YAC/B,gBAAgB,CAAC,yBAAyB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;YACnF,yBAAyB,CAAC,yBAAyB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;YAE5F,MAAM,wBAAwB,GAC1B,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,yCAAyC,CAAC,CAAC;YACpG,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;YAE1B,MAAM,CAAC,MAAM,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yEAAyE,EAAE,KAAK,IAAI,EAAE;YACvF,MAAM,yBAAyB,GAAG,IAAI,CAAC;YACvC,MAAM,kBAAkB,GAAG,IAAI,CAAC;YAChC,MAAM,iBAAiB,GAAG,IAAI,CAAC;YAC/B,gBAAgB,CAAC,yBAAyB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;YACnF,yBAAyB,CAAC,CAAC,yBAAyB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;YAE7F,MAAM,wBAAwB,GAC1B,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,yCAAyC,CAAC,CAAC;YACpG,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;YAE1B,MAAM,CAAC,MAAM,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;YACrF,MAAM,yBAAyB,GAAG,IAAI,CAAC;YACvC,MAAM,kBAAkB,GAAG,IAAI,CAAC;YAChC,MAAM,iBAAiB,GAAG,IAAI,CAAC;YAC/B,gBAAgB,CAAC,yBAAyB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;YACnF,yBAAyB,CAAC,yBAAyB,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;YAE7F,MAAM,wBAAwB,GAC1B,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,yCAAyC,CAAC,CAAC;YACpG,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;YAE1B,MAAM,CAAC,MAAM,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,UAAU,CAAC,GAAG,EAAE;YACd,gBAAgB,EAAE,CAAC;YACnB,gBAAgB,CAAC,EAAC,iBAAiB,EAAE,EAAC,OAAO,EAAE,KAAK,EAAC,EAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YAClE,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,IAAI,QAAQ,GAAG,KAAK,CAAC;YACrB,aAAa,CAAC,GAAG,EAAE;iBACd,IAAI,CAAC,GAAG,EAAE;gBACT,QAAQ,GAAG,IAAI,CAAC;YAClB,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,CAAC,EAAE;gBACT,MAAM,CAAC,CAAC;YACV,CAAC,CAAC,CAAC;YACP,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;YACrD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACzB,MAAM,UAAU,GAAG,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;YAC3E,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,YAAY,CACnD,cAA0C,EAAE,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;YAC1G,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;YACrD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAC/D,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;YAC1E,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;YAE1B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1G,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;YAClF,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YAClE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;YAC1E,MAAM,eAAe,EAAE,CAAC;YAExB,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACzG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;YAC1E,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;YAE1B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7G,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2FAA2F,EAAE,KAAK,IAAI,EAAE;YACzG,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YACjE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;YAE1E,MAAM,eAAe,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;YACpC,MAAM,aAAa,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;YAClC,gCAAgC,CAAC,sBAAsB,EAAE,eAAe,CAAC,CAAC;YAC1E,gCAAgC,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,CAAC,EAAC,UAAU,EAAE,WAAW,EAAC,CAAC,CAAC,CAAC;YACvF,gCAAgC,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;YAClE,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;YAC1B,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YAExC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YACjE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;YAE1E,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YACnC,gCAAgC,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;YAClE,MAAM,mBAAmB,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;YAEtD,IAAI,cAAc,GAAG,CAAC,CAAmC,EAAE,EAAE,GAAE,CAAC,CAAC;YACjE,gCAAgC,CAC5B,iBAAiB,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,CAAmC,OAAO,CAAC,EAAE;gBAC5D,cAAc,GAAG,OAAO,CAAC;YAC3B,CAAC,CAAC,CAAC,CAAC;YAE3B,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;YAC1E,MAAM,MAAM,GAAG,aAAa,CAAC,GAAG,EAAE,CAAC;YACnC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YACrC,cAAc,CAAC,EAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,SAAS,EAAC,CAAC,CAAC;YACrE,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YACxC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;YAE1E,gCAAgC,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,CAAC,EAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,wBAAwB,EAAC,CAAC,CAAC,CAAC;YACxG,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;YAE1B,MAAM,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;YACvE,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACzB,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAoC,CAAC;YACvG,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAC/D,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,MAAM,uBAAuB,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;YAC5C,gCAAgC,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,CAAC;YAC7F,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;YAC1B,MAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;YAClD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,MAAM,uBAAuB,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;YAC5C,gCAAgC,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,CAAC;YAC7F,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;YAC1B,MAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;YAC5E,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YAClE,MAAM,uBAAuB,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;YAC5C,gCAAgC,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,CAAC;YAC7F,MAAM,eAAe,EAAE,CAAC;YACxB,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;YAC/C,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,MAAM,uBAAuB,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;YAC5C,gCAAgC,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,CAAC;YAC7F,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;YAC1B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;YACxC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YAClE,MAAM,uBAAuB,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;YAC5C,gCAAgC,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,CAAC;YAC7F,MAAM,eAAe,EAAE,CAAC;YACxB,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC;YAC3F,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YAClE,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/F,MAAM,uBAAuB,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;YAC5C,gCAAgC,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,CAAC;YAC7F,MAAM,UAAU,GAAG,aAAa,CAAC,GAAG,EAAE,CAAC;YACvC,MAAM,eAAe,GAAG,YAAY,CAChC,EAAC,YAAY,EAAE,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,IAAI,SAAS,EAAE,OAAO,EAAE,WAAW,EAAC,CAAC,CAAC;YAChH,MAAM,eAAe,GACjB,YAAY,CAAC,EAAC,YAAY,EAAE,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,IAAI,SAAS,EAAC,CAAC,CAAC;YACvG,MAAM,UAAU,CAAC;YACjB,MAAM,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;YACtD,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;YACnD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as ProtocolClient from '../../core/protocol_client/protocol_client.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport {\n  createTarget,\n  stubNoopSettings,\n  updateHostConfig,\n} from '../../testing/EnvironmentHelpers.js';\nimport {expectCall} from '../../testing/ExpectStubCall.js';\nimport {\n  describeWithMockConnection,\n  setMockConnectionResponseHandler,\n} from '../../testing/MockConnection.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as InspectorMain from './inspector_main.js';\n\ndescribeWithMockConnection('FocusDebuggeeActionDelegate', () => {\n  it('uses main frame', async () => {\n    const tabTarget = createTarget({type: SDK.Target.Type.TAB});\n    createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n    const frameTarget = createTarget({parentTarget: tabTarget});\n    const delegate = new InspectorMain.InspectorMain.FocusDebuggeeActionDelegate();\n    const bringToFront = sinon.spy(frameTarget.pageAgent(), 'invoke_bringToFront');\n    delegate.handleAction({} as UI.Context.Context, 'foo');\n    assert.isTrue(bringToFront.calledOnce);\n  });\n});\n\ndescribeWithMockConnection('InspectorMainImpl', () => {\n  const DEBUGGER_ID = 'debuggerId' as Protocol.Runtime.UniqueDebuggerId;\n\n  const runForTabTarget = async () => {\n    const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n    const runPromise = inspectorMain.run();\n    const rootTarget = SDK.TargetManager.TargetManager.instance().rootTarget();\n    SDK.TargetManager.TargetManager.instance().createTarget(\n        'someTargetID' as Protocol.Target.TargetID, 'someName', SDK.Target.Type.FRAME, rootTarget, undefined);\n    await runPromise;\n  };\n\n  beforeEach(() => {\n    sinon.stub(ProtocolClient.InspectorBackend.Connection, 'setFactory');\n  });\n\n  describe('comparingBrowserSettingWithCookieControlSetting', () => {\n    // Before the tests, we need to add these settings to allow the InspectorMain.run to work\n    beforeEach(async () => {\n      Common.Settings.registerSettingExtension({\n        settingName: 'auto-attach-to-created-pages',\n        settingType: Common.Settings.SettingType.BOOLEAN,\n        defaultValue: false,\n      });\n      Common.Settings.registerSettingExtension({\n        settingName: 'network.ad-blocking-enabled',\n        settingType: Common.Settings.SettingType.BOOLEAN,\n        defaultValue: false,\n      });\n      Common.Settings.registerSettingExtension({\n        settingName: 'emulate-page-focus',\n        settingType: Common.Settings.SettingType.BOOLEAN,\n        defaultValue: false,\n      });\n\n      const storage = Common.Settings.Settings.instance().localStorage;\n      Common.Settings.Settings.instance(\n          {forceNew: true, syncedStorage: storage, globalStorage: storage, localStorage: storage});\n    });\n\n    function setBrowserConfig(\n        thirdPartyCookieRestrictionEnabled?: boolean, thirdPartyCookieMetadataEnabled?: boolean,\n        thirdPartyCookieHeuristicsEnabled?: boolean, managedBlockThirdPartyCookies?: boolean|string) {\n      updateHostConfig({\n        thirdPartyCookieControls: {\n          thirdPartyCookieRestrictionEnabled,\n          thirdPartyCookieHeuristicsEnabled,\n          thirdPartyCookieMetadataEnabled,\n          managedBlockThirdPartyCookies,\n        },\n        devToolsPrivacyUI: {enabled: true}\n      });\n    }\n\n    function setDevtoolsCookieControls(\n        cookieControlOverrideEnabled?: boolean, gracePeriodMitigationEnabled?: boolean,\n        heuristicMitigationEnabled?: boolean) {\n      Common.Settings.Settings.instance().createSetting(\n          'cookie-control-override-enabled', cookieControlOverrideEnabled);\n      Common.Settings.Settings.instance().createSetting(\n          'grace-period-mitigation-disabled', !gracePeriodMitigationEnabled);\n      Common.Settings.Settings.instance().createSetting('heuristic-mitigation-disabled', !heuristicMitigationEnabled);\n    }\n\n    it('does not show infobar when enterpirse is blocking third-party cookies', async () => {\n      const restrictThirdPartyCookies = true;\n      const gracePeriodEnabled = true;\n      const heuristicsEnabled = true;\n      const enterpriseBlocksThirdPartyCookies = true;\n      setBrowserConfig(\n          restrictThirdPartyCookies, gracePeriodEnabled, heuristicsEnabled, enterpriseBlocksThirdPartyCookies);\n      setDevtoolsCookieControls(restrictThirdPartyCookies, gracePeriodEnabled, heuristicsEnabled);\n\n      const reloadRequiredInfobarSpy =\n          sinon.spy(UI.InspectorView.InspectorView.instance(), 'displayDebuggedTabReloadRequiredWarning');\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      await inspectorMain.run();\n\n      assert.isTrue(reloadRequiredInfobarSpy.notCalled);\n    });\n\n    it('does not show infobar when control setting is undefined', async () => {\n      const restrictThirdPartyCookies = true;\n      const gracePeriodEnabled = true;\n      const heuristicsEnabled = true;\n      setBrowserConfig(restrictThirdPartyCookies, gracePeriodEnabled, heuristicsEnabled);\n\n      const reloadRequiredInfobarSpy =\n          sinon.spy(UI.InspectorView.InspectorView.instance(), 'displayDebuggedTabReloadRequiredWarning');\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      await inspectorMain.run();\n\n      assert.isTrue(reloadRequiredInfobarSpy.notCalled);\n    });\n\n    it('does not show infobar when control settings match browser settings', async () => {\n      const restrictThirdPartyCookies = true;\n      const gracePeriodEnabled = true;\n      const heuristicsEnabled = true;\n      setBrowserConfig(restrictThirdPartyCookies, gracePeriodEnabled, heuristicsEnabled);\n      setDevtoolsCookieControls(restrictThirdPartyCookies, gracePeriodEnabled, heuristicsEnabled);\n\n      const reloadRequiredInfobarSpy =\n          sinon.spy(UI.InspectorView.InspectorView.instance(), 'displayDebuggedTabReloadRequiredWarning');\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      await inspectorMain.run();\n\n      assert.isTrue(reloadRequiredInfobarSpy.notCalled);\n    });\n\n    it('shows infobar when cookie control override differs from browser setting', async () => {\n      const restrictThirdPartyCookies = true;\n      const gracePeriodEnabled = true;\n      const heuristicsEnabled = true;\n      setBrowserConfig(restrictThirdPartyCookies, gracePeriodEnabled, heuristicsEnabled);\n      setDevtoolsCookieControls(!restrictThirdPartyCookies, gracePeriodEnabled, heuristicsEnabled);\n\n      const reloadRequiredInfobarSpy =\n          sinon.spy(UI.InspectorView.InspectorView.instance(), 'displayDebuggedTabReloadRequiredWarning');\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      await inspectorMain.run();\n\n      assert.isTrue(reloadRequiredInfobarSpy.calledOnce);\n    });\n\n    it('shows infobar when a mitigation override differs from browser setting', async () => {\n      const restrictThirdPartyCookies = true;\n      const gracePeriodEnabled = true;\n      const heuristicsEnabled = true;\n      setBrowserConfig(restrictThirdPartyCookies, gracePeriodEnabled, heuristicsEnabled);\n      setDevtoolsCookieControls(restrictThirdPartyCookies, !gracePeriodEnabled, heuristicsEnabled);\n\n      const reloadRequiredInfobarSpy =\n          sinon.spy(UI.InspectorView.InspectorView.instance(), 'displayDebuggedTabReloadRequiredWarning');\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      await inspectorMain.run();\n\n      assert.isTrue(reloadRequiredInfobarSpy.calledOnce);\n    });\n  });\n\n  describe('withNoopSettings', () => {\n    beforeEach(() => {\n      stubNoopSettings();\n      updateHostConfig({devToolsPrivacyUI: {enabled: false}});\n    });\n\n    it('continues only after primary page target is available', async () => {\n      Root.Runtime.Runtime.setQueryParamForTesting('targetType', 'tab');\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      let finished = false;\n      inspectorMain.run()\n          .then(() => {\n            finished = true;\n          })\n          .catch(e => {\n            throw e;\n          });\n      await new Promise(resolve => setTimeout(resolve, 0));\n      assert.isFalse(finished);\n      const rootTarget = SDK.TargetManager.TargetManager.instance().rootTarget();\n      SDK.TargetManager.TargetManager.instance().createTarget(\n          'someTargetID' as Protocol.Target.TargetID, 'someName', SDK.Target.Type.FRAME, rootTarget, undefined);\n      await new Promise(resolve => setTimeout(resolve, 0));\n      assert.isTrue(finished);\n    });\n\n    it('sets main target type to Node if v8only query param present', async () => {\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      Root.Runtime.Runtime.setQueryParamForTesting('v8only', 'true');\n      assert.notExists(SDK.TargetManager.TargetManager.instance().rootTarget());\n      await inspectorMain.run();\n\n      assert.strictEqual(SDK.TargetManager.TargetManager.instance().rootTarget()?.type(), SDK.Target.Type.NODE);\n      Root.Runtime.Runtime.setQueryParamForTesting('v8only', '');\n    });\n\n    it('sets main target type to Tab if targetType=tab query param present', async () => {\n      Root.Runtime.Runtime.setQueryParamForTesting('targetType', 'tab');\n      assert.notExists(SDK.TargetManager.TargetManager.instance().rootTarget());\n      await runForTabTarget();\n\n      assert.strictEqual(SDK.TargetManager.TargetManager.instance().rootTarget()?.type(), SDK.Target.Type.TAB);\n      Root.Runtime.Runtime.setQueryParamForTesting('targetType', '');\n    });\n\n    it('sets main target type to Frame by default', async () => {\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      assert.notExists(SDK.TargetManager.TargetManager.instance().rootTarget());\n      await inspectorMain.run();\n\n      assert.strictEqual(SDK.TargetManager.TargetManager.instance().rootTarget()?.type(), SDK.Target.Type.FRAME);\n    });\n\n    it('creates main target waiting for debugger if the main target is frame and panel is sources', async () => {\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      Root.Runtime.Runtime.setQueryParamForTesting('panel', 'sources');\n      assert.notExists(SDK.TargetManager.TargetManager.instance().rootTarget());\n\n      const waitForDebugger = sinon.spy();\n      const debuggerPause = sinon.spy();\n      setMockConnectionResponseHandler('Page.waitForDebugger', waitForDebugger);\n      setMockConnectionResponseHandler('Debugger.enable', () => ({debuggerId: DEBUGGER_ID}));\n      setMockConnectionResponseHandler('Debugger.pause', debuggerPause);\n      await inspectorMain.run();\n      assert.isTrue(waitForDebugger.calledOnce);\n      assert.isTrue(debuggerPause.calledOnce);\n\n      Root.Runtime.Runtime.setQueryParamForTesting('panel', '');\n    });\n\n    it('wait for Debugger.enable before calling Debugger.pause', async () => {\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      Root.Runtime.Runtime.setQueryParamForTesting('panel', 'sources');\n      assert.notExists(SDK.TargetManager.TargetManager.instance().rootTarget());\n\n      const debuggerPause = sinon.stub();\n      setMockConnectionResponseHandler('Debugger.pause', debuggerPause);\n      const debuggerPauseCalled = expectCall(debuggerPause);\n\n      let debuggerEnable = (_: Protocol.Debugger.EnableResponse) => {};\n      setMockConnectionResponseHandler(\n          'Debugger.enable', () => new Promise<Protocol.Debugger.EnableResponse>(resolve => {\n                               debuggerEnable = resolve;\n                             }));\n\n      assert.notExists(SDK.TargetManager.TargetManager.instance().rootTarget());\n      const result = inspectorMain.run();\n      assert.isFalse(debuggerPause.called);\n      debuggerEnable({debuggerId: DEBUGGER_ID, getError: () => undefined});\n      await Promise.all([debuggerPauseCalled, result]);\n      assert.isTrue(debuggerPause.calledOnce);\n      Root.Runtime.Runtime.setQueryParamForTesting('panel', '');\n    });\n\n    it('frontend correctly registers if Debugger.enable fails', async () => {\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      assert.notExists(SDK.TargetManager.TargetManager.instance().rootTarget());\n\n      setMockConnectionResponseHandler('Debugger.enable', () => ({getError: () => 'Debugger.enable failed'}));\n      await inspectorMain.run();\n\n      const target = SDK.TargetManager.TargetManager.instance().rootTarget();\n      assert.isNotNull(target);\n      const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel) as SDK.DebuggerModel.DebuggerModel;\n      assert.isFalse(debuggerModel.debuggerEnabled());\n    });\n\n    it('calls Runtime.runIfWaitingForDebugger for Node target', async () => {\n      Root.Runtime.Runtime.setQueryParamForTesting('v8only', 'true');\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      const runIfWaitingForDebugger = sinon.spy();\n      setMockConnectionResponseHandler('Runtime.runIfWaitingForDebugger', runIfWaitingForDebugger);\n      await inspectorMain.run();\n      assert.isTrue(runIfWaitingForDebugger.calledOnce);\n      Root.Runtime.Runtime.setQueryParamForTesting('v8only', '');\n    });\n\n    it('calls Runtime.runIfWaitingForDebugger for frame target', async () => {\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      const runIfWaitingForDebugger = sinon.spy();\n      setMockConnectionResponseHandler('Runtime.runIfWaitingForDebugger', runIfWaitingForDebugger);\n      await inspectorMain.run();\n      assert.isTrue(runIfWaitingForDebugger.calledOnce);\n    });\n\n    it('does not call Runtime.runIfWaitingForDebugger for Tab target', async () => {\n      Root.Runtime.Runtime.setQueryParamForTesting('targetType', 'tab');\n      const runIfWaitingForDebugger = sinon.spy();\n      setMockConnectionResponseHandler('Runtime.runIfWaitingForDebugger', runIfWaitingForDebugger);\n      await runForTabTarget();\n      assert.isFalse(runIfWaitingForDebugger.called);\n      Root.Runtime.Runtime.setQueryParamForTesting('targetType', '');\n    });\n\n    it('sets frame target to \"main\"', async () => {\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      const runIfWaitingForDebugger = sinon.spy();\n      setMockConnectionResponseHandler('Runtime.runIfWaitingForDebugger', runIfWaitingForDebugger);\n      await inspectorMain.run();\n      assert.strictEqual(SDK.TargetManager.TargetManager.instance().rootTarget()?.name(), 'Main');\n    });\n\n    it('sets tab target to \"tab\"', async () => {\n      Root.Runtime.Runtime.setQueryParamForTesting('targetType', 'tab');\n      const runIfWaitingForDebugger = sinon.spy();\n      setMockConnectionResponseHandler('Runtime.runIfWaitingForDebugger', runIfWaitingForDebugger);\n      await runForTabTarget();\n      assert.strictEqual(SDK.TargetManager.TargetManager.instance().rootTarget()?.name(), 'Tab');\n      Root.Runtime.Runtime.setQueryParamForTesting('targetType', '');\n    });\n\n    it('sets main frame target to \"main\"', async () => {\n      Root.Runtime.Runtime.setQueryParamForTesting('targetType', 'tab');\n      const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n      const runIfWaitingForDebugger = sinon.spy();\n      setMockConnectionResponseHandler('Runtime.runIfWaitingForDebugger', runIfWaitingForDebugger);\n      const runPromise = inspectorMain.run();\n      const prerenderTarget = createTarget(\n          {parentTarget: SDK.TargetManager.TargetManager.instance().rootTarget() || undefined, subtype: 'prerender'});\n      const mainFrameTarget =\n          createTarget({parentTarget: SDK.TargetManager.TargetManager.instance().rootTarget() || undefined});\n      await runPromise;\n      assert.notStrictEqual(prerenderTarget.name(), 'Main');\n      assert.strictEqual(mainFrameTarget.name(), 'Main');\n      Root.Runtime.Runtime.setQueryParamForTesting('targetType', '');\n    });\n  });\n});\n"]}