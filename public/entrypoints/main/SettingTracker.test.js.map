{"version":3,"file":"SettingTracker.test.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/main/SettingTracker.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\n\nimport * as Main from './main.js';\n\ndescribeWithEnvironment('SettingTracker', () => {\n  let settingTracker: Main.SettingTracker.SettingTracker|null;\n\n  afterEach(() => {\n    settingTracker?.dispose();\n  });\n\n  it('resets console-insights-onboarding-finished if console-insights-enabled becomes true', async () => {\n    Common.Settings.moduleSetting('console-insights-enabled').set(true);\n    Common.Settings.moduleSetting('console-insights-enabled').set(false);\n    Common.Settings.Settings.instance().createLocalSetting('console-insights-onboarding-finished', false).set(true);\n    // Force instance that will track the settings.\n    settingTracker = new Main.SettingTracker.SettingTracker();\n    Common.Settings.moduleSetting('console-insights-enabled').set(true);\n    assert.strictEqual(\n        Common.Settings.Settings.instance().createLocalSetting('console-insights-onboarding-finished', false).get(),\n        false);\n  });\n\n  it('sets console-insights-enabled to false if ci_disabledByDefault is true', async () => {\n    Common.Settings.moduleSetting('console-insights-enabled').set(true);\n    const toggledSetting = Common.Settings.Settings.instance().createLocalSetting('console-insights-toggled', false);\n    toggledSetting.set(false);\n    Root.Runtime.Runtime.setQueryParamForTesting('ci_disabledByDefault', 'true');\n    settingTracker = new Main.SettingTracker.SettingTracker();\n    assert.strictEqual(Common.Settings.moduleSetting('console-insights-enabled').get(), false);\n    assert.strictEqual(toggledSetting.get(), false);\n  });\n\n  it('sets console-insights-enabled to true if ci_disabledByDefault is false', async () => {\n    Common.Settings.moduleSetting('console-insights-enabled').set(false);\n    const toggledSetting = Common.Settings.Settings.instance().createLocalSetting('console-insights-toggled', false);\n    toggledSetting.set(false);\n    Root.Runtime.Runtime.setQueryParamForTesting('ci_disabledByDefault', 'false');\n    settingTracker = new Main.SettingTracker.SettingTracker();\n    assert.strictEqual(Common.Settings.moduleSetting('console-insights-enabled').get(), true);\n    assert.strictEqual(toggledSetting.get(), false);\n  });\n\n  it('does not change console-insights-enabled if console-insights-toggled is true', async () => {\n    Common.Settings.moduleSetting('console-insights-enabled').set(true);\n    Common.Settings.Settings.instance().createLocalSetting('console-insights-toggled', false).set(true);\n    Root.Runtime.Runtime.setQueryParamForTesting('ci_disabledByDefault', 'true');\n    settingTracker = new Main.SettingTracker.SettingTracker();\n    assert.strictEqual(Common.Settings.moduleSetting('console-insights-enabled').get(), true);\n  });\n});\n"]}