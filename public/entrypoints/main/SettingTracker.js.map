{"version":3,"file":"SettingTracker.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/main/SettingTracker.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAEhD,MAAM,iCAAiC,GAAG,0BAA0B,CAAC;AACrE,8DAA8D;AAC9D,MAAM,iCAAiC,GAAG,0BAA0B,CAAC;AAErE,MAAM,OAAO,cAAc;IACzB;QACE,IAAI,CAAC,iCAAiC,EAAE,CAAC;QACzC,IAAI,CAAC,0CAA0C,EAAE,CAAC;IACpD,CAAC;IAED,iCAAiC;QAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,iCAAiC,CAAC,CAAC;QAC1E,OAAO,EAAE,iBAAiB,CAAC,GAAG,EAAE;YAC9B,+CAA+C;YAC/C,IAAI,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;gBAClB,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE;qBAC9B,kBAAkB,CAAC,sCAAsC,EAAE,KAAK,CAAC;qBACjE,GAAG,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC;YACD,2EAA2E;YAC3E,oDAAoD;YACpD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,kBAAkB,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC7G,CAAC,CAAC,CAAC;IACL,CAAC;IAED,iBAAiB,CAAC,IAAY;QAC5B,IAAI,CAAC;YACH,OAAO,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC7C,CAAC;QAAC,MAAM,CAAC;YACP,OAAO;QACT,CAAC;IACH,CAAC;IAED,0CAA0C;QACxC,MAAM,cAAc,GAChB,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,kBAAkB,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;QACrG,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,iCAAiC,CAAC,CAAC;QACjF,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,EAAE,CAAC;YAC1B,4EAA4E;YAC5E,cAAc,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,sBAAsB,CAAC,KAAK,MAAM,CAAC,CAAC;QAC1F,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';\n\nconst consoleInsightsToggledSettingName = 'console-insights-toggled';\n// Keep setting names in sync with front_end/panels/explain/*.\nconst consoleInsightsEnabledSettingName = 'console-insights-enabled';\n\nexport class SettingTracker {\n  constructor() {\n    this.#trackConsoleInsightSettingChange();\n    this.#syncConsoleInsightSettingsWithQueryParams();\n  }\n\n  #trackConsoleInsightSettingChange(): void {\n    const setting = this.#getModuleSetting(consoleInsightsEnabledSettingName);\n    setting?.addChangeListener(() => {\n      // If setting was turned on, reset the consent.\n      if (setting.get()) {\n        Common.Settings.Settings.instance()\n            .createLocalSetting('console-insights-onboarding-finished', false)\n            .set(false);\n      }\n      // If console-insights-enabled was edited by the user, it becomes \"sticky\",\n      // which means Finch won't change the setting state.\n      Common.Settings.Settings.instance().createLocalSetting(consoleInsightsToggledSettingName, false).set(true);\n    });\n  }\n\n  #getModuleSetting(name: string): Common.Settings.Setting<unknown>|undefined {\n    try {\n      return Common.Settings.moduleSetting(name);\n    } catch {\n      return;\n    }\n  }\n\n  #syncConsoleInsightSettingsWithQueryParams(): void {\n    const toggledSetting =\n        Common.Settings.Settings.instance().createLocalSetting(consoleInsightsToggledSettingName, false);\n    const enabledSetting = this.#getModuleSetting(consoleInsightsEnabledSettingName);\n    if (!toggledSetting.get()) {\n      // If the setting was not toggled, update according to ci_disabledByDefault.\n      enabledSetting?.set(Root.Runtime.Runtime.queryParam('ci_disabledByDefault') !== 'true');\n    }\n  }\n}\n"]}