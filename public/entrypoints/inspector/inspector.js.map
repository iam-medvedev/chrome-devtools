{
  "version": 3,
  "sources": ["inspector.prebundle.ts", "../../panels/screencast/screencast-meta.prebundle.ts"],
  "sourcesContent": ["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport '../devtools_app/devtools_app.js';\nimport '../../panels/screencast/screencast-meta.js';\n", "// Copyright 2021 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type * as Screencast from './screencast.js';\n\nlet loadedScreencastModule: (typeof Screencast|undefined);\n\nasync function loadScreencastModule(): Promise<typeof Screencast> {\n  if (!loadedScreencastModule) {\n    loadedScreencastModule = await import('./screencast.js');\n  }\n  return loadedScreencastModule;\n}\n\nUI.Toolbar.registerToolbarItem({\n  async loadItem() {\n    const Screencast = await loadScreencastModule();\n    return Screencast.ScreencastApp.ToolbarButtonProvider.instance();\n  },\n  order: 1,\n  location: UI.Toolbar.ToolbarItemLocation.MAIN_TOOLBAR_LEFT,\n});\n\nCommon.AppProvider.registerAppProvider({\n  async loadAppProvider() {\n    const Screencast = await loadScreencastModule();\n    return Screencast.ScreencastApp.ScreencastAppProvider.instance();\n  },\n  order: 1,\n});\n\nUI.ContextMenu.registerItem({\n  location: UI.ContextMenu.ItemLocation.MAIN_MENU,\n  order: 10,\n  actionId: 'components.request-app-banner',\n});\n"],
  "mappings": ";AAGA,OAAO;;;ACCP,YAAY,YAAY;AACxB,YAAY,QAAQ;AAIpB,IAAI;AAEJ,eAAe,uBAAoB;AACjC,MAAI,CAAC,wBAAwB;AAC3B,6BAAyB,MAAM,OAAO,yCAAiB;EACzD;AACA,SAAO;AACT;AAEG,WAAQ,oBAAoB;EAC7B,MAAM,WAAQ;AACZ,UAAM,aAAa,MAAM,qBAAoB;AAC7C,WAAO,WAAW,cAAc,sBAAsB,SAAQ;EAChE;EACA,OAAO;EACP,UAAQ;CACT;AAEM,mBAAY,oBAAoB;EACrC,MAAM,kBAAe;AACnB,UAAM,aAAa,MAAM,qBAAoB;AAC7C,WAAO,WAAW,cAAc,sBAAsB,SAAQ;EAChE;EACA,OAAO;CACR;AAEE,eAAY,aAAa;EAC1B,UAAQ;EACR,OAAO;EACP,UAAU;CACX;",
  "names": []
}
