{
  "version": 3,
  "sources": ["package/dist/esm/WasmDis.js", "package/dist/esm/WasmParser.js"],
  "sourcesContent": ["/* Copyright 2016 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bytesToString, OperatorCodeNames, } from \"./WasmParser.js\";\n\nconst NAME_SECTION_NAME = \"name\";\nconst INVALID_NAME_SYMBOLS_REGEX = /[^0-9A-Za-z!#$%&'*+.:<=>?@^_`|~\\/\\-]/;\nconst INVALID_NAME_SYMBOLS_REGEX_GLOBAL = new RegExp(INVALID_NAME_SYMBOLS_REGEX.source, \"g\");\nfunction formatFloat32(n) {\n    if (n === 0)\n        return 1 / n < 0 ? \"-0.0\" : \"0.0\";\n    if (isFinite(n))\n        return n.toString();\n    if (!isNaN(n))\n        return n < 0 ? \"-inf\" : \"inf\";\n    var view = new DataView(new ArrayBuffer(8));\n    view.setFloat32(0, n, true);\n    var data = view.getInt32(0, true);\n    var payload = data & 0x7fffff;\n    const canonicalBits = 4194304; // 0x800..0\n    if (data > 0 && payload === canonicalBits)\n        return \"nan\";\n    // canonical NaN;\n    else if (payload === canonicalBits)\n        return \"-nan\";\n    return (data < 0 ? \"-\" : \"+\") + \"nan:0x\" + payload.toString(16);\n}\nfunction formatFloat64(n) {\n    if (n === 0)\n        return 1 / n < 0 ? \"-0.0\" : \"0.0\";\n    if (isFinite(n))\n        return n.toString();\n    if (!isNaN(n))\n        return n < 0 ? \"-inf\" : \"inf\";\n    var view = new DataView(new ArrayBuffer(8));\n    view.setFloat64(0, n, true);\n    var data1 = view.getUint32(0, true);\n    var data2 = view.getInt32(4, true);\n    var payload = data1 + (data2 & 0xfffff) * 4294967296;\n    const canonicalBits = 524288 * 4294967296; // 0x800..0\n    if (data2 > 0 && payload === canonicalBits)\n        return \"nan\";\n    // canonical NaN;\n    else if (payload === canonicalBits)\n        return \"-nan\";\n    return (data2 < 0 ? \"-\" : \"+\") + \"nan:0x\" + payload.toString(16);\n}\nfunction formatI32Array(bytes, count) {\n    var dv = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    var result = [];\n    for (var i = 0; i < count; i++)\n        result.push(`0x${formatHex(dv.getInt32(i << 2, true), 8)}`);\n    return result.join(\" \");\n}\nfunction formatI8Array(bytes, count) {\n    var dv = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    var result = [];\n    for (var i = 0; i < count; i++)\n        result.push(`${dv.getInt8(i)}`);\n    return result.join(\" \");\n}\nfunction memoryAddressToString(address, code) {\n    var defaultAlignFlags;\n    switch (code) {\n        case 64768 /* v128_load */:\n        case 64769 /* i16x8_load8x8_s */:\n        case 64770 /* i16x8_load8x8_u */:\n        case 64771 /* i32x4_load16x4_s */:\n        case 64772 /* i32x4_load16x4_u */:\n        case 64773 /* i64x2_load32x2_s */:\n        case 64774 /* i64x2_load32x2_u */:\n        case 64775 /* v8x16_load_splat */:\n        case 64776 /* v16x8_load_splat */:\n        case 64777 /* v32x4_load_splat */:\n        case 64778 /* v64x2_load_splat */:\n        case 64779 /* v128_store */:\n            defaultAlignFlags = 4;\n            break;\n        case 41 /* i64_load */:\n        case 55 /* i64_store */:\n        case 43 /* f64_load */:\n        case 57 /* f64_store */:\n        case 65026 /* i64_atomic_wait */:\n        case 65041 /* i64_atomic_load */:\n        case 65048 /* i64_atomic_store */:\n        case 65055 /* i64_atomic_rmw_add */:\n        case 65062 /* i64_atomic_rmw_sub */:\n        case 65069 /* i64_atomic_rmw_and */:\n        case 65076 /* i64_atomic_rmw_or */:\n        case 65083 /* i64_atomic_rmw_xor */:\n        case 65090 /* i64_atomic_rmw_xchg */:\n        case 65097 /* i64_atomic_rmw_cmpxchg */:\n        case 64861 /* v128_load64_zero */:\n            defaultAlignFlags = 3;\n            break;\n        case 40 /* i32_load */:\n        case 52 /* i64_load32_s */:\n        case 53 /* i64_load32_u */:\n        case 54 /* i32_store */:\n        case 62 /* i64_store32 */:\n        case 42 /* f32_load */:\n        case 56 /* f32_store */:\n        case 65024 /* atomic_notify */:\n        case 65025 /* i32_atomic_wait */:\n        case 65040 /* i32_atomic_load */:\n        case 65046 /* i64_atomic_load32_u */:\n        case 65047 /* i32_atomic_store */:\n        case 65053 /* i64_atomic_store32 */:\n        case 65054 /* i32_atomic_rmw_add */:\n        case 65060 /* i64_atomic_rmw32_add_u */:\n        case 65061 /* i32_atomic_rmw_sub */:\n        case 65067 /* i64_atomic_rmw32_sub_u */:\n        case 65068 /* i32_atomic_rmw_and */:\n        case 65074 /* i64_atomic_rmw32_and_u */:\n        case 65075 /* i32_atomic_rmw_or */:\n        case 65081 /* i64_atomic_rmw32_or_u */:\n        case 65082 /* i32_atomic_rmw_xor */:\n        case 65088 /* i64_atomic_rmw32_xor_u */:\n        case 65089 /* i32_atomic_rmw_xchg */:\n        case 65095 /* i64_atomic_rmw32_xchg_u */:\n        case 65096 /* i32_atomic_rmw_cmpxchg */:\n        case 65102 /* i64_atomic_rmw32_cmpxchg_u */:\n        case 64860 /* v128_load32_zero */:\n            defaultAlignFlags = 2;\n            break;\n        case 46 /* i32_load16_s */:\n        case 47 /* i32_load16_u */:\n        case 50 /* i64_load16_s */:\n        case 51 /* i64_load16_u */:\n        case 59 /* i32_store16 */:\n        case 61 /* i64_store16 */:\n        case 65043 /* i32_atomic_load16_u */:\n        case 65045 /* i64_atomic_load16_u */:\n        case 65050 /* i32_atomic_store16 */:\n        case 65052 /* i64_atomic_store16 */:\n        case 65057 /* i32_atomic_rmw16_add_u */:\n        case 65059 /* i64_atomic_rmw16_add_u */:\n        case 65064 /* i32_atomic_rmw16_sub_u */:\n        case 65066 /* i64_atomic_rmw16_sub_u */:\n        case 65071 /* i32_atomic_rmw16_and_u */:\n        case 65073 /* i64_atomic_rmw16_and_u */:\n        case 65078 /* i32_atomic_rmw16_or_u */:\n        case 65080 /* i64_atomic_rmw16_or_u */:\n        case 65085 /* i32_atomic_rmw16_xor_u */:\n        case 65087 /* i64_atomic_rmw16_xor_u */:\n        case 65092 /* i32_atomic_rmw16_xchg_u */:\n        case 65094 /* i64_atomic_rmw16_xchg_u */:\n        case 65099 /* i32_atomic_rmw16_cmpxchg_u */:\n        case 65101 /* i64_atomic_rmw16_cmpxchg_u */:\n            defaultAlignFlags = 1;\n            break;\n        case 44 /* i32_load8_s */:\n        case 45 /* i32_load8_u */:\n        case 48 /* i64_load8_s */:\n        case 49 /* i64_load8_u */:\n        case 58 /* i32_store8 */:\n        case 60 /* i64_store8 */:\n        case 65042 /* i32_atomic_load8_u */:\n        case 65044 /* i64_atomic_load8_u */:\n        case 65049 /* i32_atomic_store8 */:\n        case 65051 /* i64_atomic_store8 */:\n        case 65056 /* i32_atomic_rmw8_add_u */:\n        case 65058 /* i64_atomic_rmw8_add_u */:\n        case 65063 /* i32_atomic_rmw8_sub_u */:\n        case 65065 /* i64_atomic_rmw8_sub_u */:\n        case 65070 /* i32_atomic_rmw8_and_u */:\n        case 65072 /* i64_atomic_rmw8_and_u */:\n        case 65077 /* i32_atomic_rmw8_or_u */:\n        case 65079 /* i64_atomic_rmw8_or_u */:\n        case 65084 /* i32_atomic_rmw8_xor_u */:\n        case 65086 /* i64_atomic_rmw8_xor_u */:\n        case 65091 /* i32_atomic_rmw8_xchg_u */:\n        case 65093 /* i64_atomic_rmw8_xchg_u */:\n        case 65098 /* i32_atomic_rmw8_cmpxchg_u */:\n        case 65100 /* i64_atomic_rmw8_cmpxchg_u */:\n            defaultAlignFlags = 0;\n            break;\n    }\n    if (address.flags == defaultAlignFlags)\n        // hide default flags\n        return !address.offset ? null : `offset=${address.offset}`;\n    if (!address.offset)\n        // hide default offset\n        return `align=${1 << address.flags}`;\n    return `offset=${address.offset | 0} align=${1 << address.flags}`;\n}\nfunction limitsToString(limits) {\n    return (limits.initial + (limits.maximum !== undefined ? \" \" + limits.maximum : \"\"));\n}\nvar paddingCache = [\"0\", \"00\", \"000\"];\nfunction formatHex(n, width) {\n    var s = (n >>> 0).toString(16).toUpperCase();\n    if (width === undefined || s.length >= width)\n        return s;\n    var paddingIndex = width - s.length - 1;\n    while (paddingIndex >= paddingCache.length)\n        paddingCache.push(paddingCache[paddingCache.length - 1] + \"0\");\n    return paddingCache[paddingIndex] + s;\n}\nconst IndentIncrement = \"  \";\nfunction isValidName(name) {\n    return !INVALID_NAME_SYMBOLS_REGEX.test(name);\n}\nexport class DefaultNameResolver {\n    getTypeName(index, isRef) {\n        return \"$type\" + index;\n    }\n    getTableName(index, isRef) {\n        return \"$table\" + index;\n    }\n    getMemoryName(index, isRef) {\n        return \"$memory\" + index;\n    }\n    getGlobalName(index, isRef) {\n        return \"$global\" + index;\n    }\n    getElementName(index, isRef) {\n        return `$elem${index}`;\n    }\n    getEventName(index, isRef) {\n        return `$event${index}`;\n    }\n    getFunctionName(index, isImport, isRef) {\n        return (isImport ? \"$import\" : \"$func\") + index;\n    }\n    getVariableName(funcIndex, index, isRef) {\n        return \"$var\" + index;\n    }\n    getFieldName(typeIndex, index, isRef) {\n        return \"$field\" + index;\n    }\n    getLabel(index) {\n        return \"$label\" + index;\n    }\n}\nconst EMPTY_STRING_ARRAY = [];\nclass DevToolsExportMetadata {\n    constructor(functionExportNames, globalExportNames, memoryExportNames, tableExportNames, eventExportNames) {\n        this._functionExportNames = functionExportNames;\n        this._globalExportNames = globalExportNames;\n        this._memoryExportNames = memoryExportNames;\n        this._tableExportNames = tableExportNames;\n        this._eventExportNames = eventExportNames;\n    }\n    getFunctionExportNames(index) {\n        var _a;\n        return (_a = this._functionExportNames[index]) !== null && _a !== void 0 ? _a : EMPTY_STRING_ARRAY;\n    }\n    getGlobalExportNames(index) {\n        var _a;\n        return (_a = this._globalExportNames[index]) !== null && _a !== void 0 ? _a : EMPTY_STRING_ARRAY;\n    }\n    getMemoryExportNames(index) {\n        var _a;\n        return (_a = this._memoryExportNames[index]) !== null && _a !== void 0 ? _a : EMPTY_STRING_ARRAY;\n    }\n    getTableExportNames(index) {\n        var _a;\n        return (_a = this._tableExportNames[index]) !== null && _a !== void 0 ? _a : EMPTY_STRING_ARRAY;\n    }\n    getEventExportNames(index) {\n        var _a;\n        return (_a = this._eventExportNames[index]) !== null && _a !== void 0 ? _a : EMPTY_STRING_ARRAY;\n    }\n}\nexport class NumericNameResolver {\n    getTypeName(index, isRef) {\n        return isRef ? \"\" + index : `(;${index};)`;\n    }\n    getTableName(index, isRef) {\n        return isRef ? \"\" + index : `(;${index};)`;\n    }\n    getMemoryName(index, isRef) {\n        return isRef ? \"\" + index : `(;${index};)`;\n    }\n    getGlobalName(index, isRef) {\n        return isRef ? \"\" + index : `(;${index};)`;\n    }\n    getElementName(index, isRef) {\n        return isRef ? \"\" + index : `(;${index};)`;\n    }\n    getEventName(index, isRef) {\n        return isRef ? \"\" + index : `(;${index};)`;\n    }\n    getFunctionName(index, isImport, isRef) {\n        return isRef ? \"\" + index : `(;${index};)`;\n    }\n    getVariableName(funcIndex, index, isRef) {\n        return isRef ? \"\" + index : `(;${index};)`;\n    }\n    getFieldName(typeIndex, index, isRef) {\n        return isRef ? \"\" : index + `(;${index};)`;\n    }\n    getLabel(index) {\n        return null;\n    }\n}\nexport var LabelMode;\n(function (LabelMode) {\n    LabelMode[LabelMode[\"Depth\"] = 0] = \"Depth\";\n    LabelMode[LabelMode[\"WhenUsed\"] = 1] = \"WhenUsed\";\n    LabelMode[LabelMode[\"Always\"] = 2] = \"Always\";\n})(LabelMode || (LabelMode = {}));\nexport class WasmDisassembler {\n    constructor() {\n        this._skipTypes = true;\n        this._exportMetadata = null;\n        this._lines = [];\n        this._offsets = [];\n        this._buffer = \"\";\n        this._indent = null;\n        this._indentLevel = 0;\n        this._addOffsets = false;\n        this._done = false;\n        this._currentPosition = 0;\n        this._nameResolver = new DefaultNameResolver();\n        this._labelMode = LabelMode.WhenUsed;\n        this._functionBodyOffsets = [];\n        this._currentFunctionBodyOffset = 0;\n        this._currentSectionId = -1 /* Unknown */;\n        this._logFirstInstruction = false;\n        this._reset();\n    }\n    _reset() {\n        this._types = [];\n        this._funcIndex = 0;\n        this._funcTypes = [];\n        this._importCount = 0;\n        this._globalCount = 0;\n        this._memoryCount = 0;\n        this._eventCount = 0;\n        this._tableCount = 0;\n        this._elementCount = 0;\n        this._expression = [];\n        this._backrefLabels = null;\n        this._labelIndex = 0;\n    }\n    get addOffsets() {\n        return this._addOffsets;\n    }\n    set addOffsets(value) {\n        if (this._currentPosition)\n            throw new Error(\"Cannot switch addOffsets during processing.\");\n        this._addOffsets = value;\n    }\n    get skipTypes() {\n        return this._skipTypes;\n    }\n    set skipTypes(skipTypes) {\n        if (this._currentPosition)\n            throw new Error(\"Cannot switch skipTypes during processing.\");\n        this._skipTypes = skipTypes;\n    }\n    get labelMode() {\n        return this._labelMode;\n    }\n    set labelMode(value) {\n        if (this._currentPosition)\n            throw new Error(\"Cannot switch labelMode during processing.\");\n        this._labelMode = value;\n    }\n    get exportMetadata() {\n        return this._exportMetadata;\n    }\n    set exportMetadata(exportMetadata) {\n        if (this._currentPosition)\n            throw new Error(\"Cannot switch exportMetadata during processing.\");\n        this._exportMetadata = exportMetadata;\n    }\n    get nameResolver() {\n        return this._nameResolver;\n    }\n    set nameResolver(resolver) {\n        if (this._currentPosition)\n            throw new Error(\"Cannot switch nameResolver during processing.\");\n        this._nameResolver = resolver;\n    }\n    appendBuffer(s) {\n        this._buffer += s;\n    }\n    newLine() {\n        if (this.addOffsets)\n            this._offsets.push(this._currentPosition);\n        this._lines.push(this._buffer);\n        this._buffer = \"\";\n    }\n    logStartOfFunctionBodyOffset() {\n        if (this.addOffsets) {\n            this._currentFunctionBodyOffset = this._currentPosition;\n        }\n    }\n    logEndOfFunctionBodyOffset() {\n        if (this.addOffsets) {\n            this._functionBodyOffsets.push({\n                start: this._currentFunctionBodyOffset,\n                end: this._currentPosition,\n            });\n        }\n    }\n    typeIndexToString(typeIndex) {\n        if (typeIndex >= 0)\n            return this._nameResolver.getTypeName(typeIndex, true);\n        switch (typeIndex) {\n            case -16 /* funcref */:\n                return \"func\";\n            case -17 /* externref */:\n                return \"extern\";\n            case -18 /* anyref */:\n                return \"any\";\n            case -19 /* eqref */:\n                return \"eq\";\n            case -22 /* i31ref */:\n                return \"i31\";\n            case -25 /* dataref */:\n                return \"data\";\n        }\n    }\n    typeToString(type) {\n        switch (type.kind) {\n            case -1 /* i32 */:\n                return \"i32\";\n            case -2 /* i64 */:\n                return \"i64\";\n            case -3 /* f32 */:\n                return \"f32\";\n            case -4 /* f64 */:\n                return \"f64\";\n            case -5 /* v128 */:\n                return \"v128\";\n            case -6 /* i8 */:\n                return \"i8\";\n            case -7 /* i16 */:\n                return \"i16\";\n            case -16 /* funcref */:\n                return \"funcref\";\n            case -17 /* externref */:\n                return \"externref\";\n            case -18 /* anyref */:\n                return \"anyref\";\n            case -19 /* eqref */:\n                return \"eqref\";\n            case -22 /* i31ref */:\n                return \"i31ref\";\n            case -25 /* dataref */:\n                return \"dataref\";\n            case -21 /* ref */:\n                return `(ref ${this.typeIndexToString(type.index)})`;\n            case -20 /* optref */:\n                return `(ref null ${this.typeIndexToString(type.index)})`;\n            case -24 /* rtt */:\n                return `(rtt ${this.typeIndexToString(type.index)})`;\n            case -23 /* rtt_d */:\n                return `(rtt ${type.depth} ${this.typeIndexToString(type.index)})`;\n            default:\n                throw new Error(`Unexpected type ${JSON.stringify(type)}`);\n        }\n    }\n    maybeMut(type, mutability) {\n        return mutability ? `(mut ${type})` : type;\n    }\n    globalTypeToString(type) {\n        const typeStr = this.typeToString(type.contentType);\n        return this.maybeMut(typeStr, !!type.mutability);\n    }\n    printFuncType(typeIndex) {\n        var type = this._types[typeIndex];\n        if (type.params.length > 0) {\n            this.appendBuffer(\" (param\");\n            for (var i = 0; i < type.params.length; i++) {\n                this.appendBuffer(\" \");\n                this.appendBuffer(this.typeToString(type.params[i]));\n            }\n            this.appendBuffer(\")\");\n        }\n        if (type.returns.length > 0) {\n            this.appendBuffer(\" (result\");\n            for (var i = 0; i < type.returns.length; i++) {\n                this.appendBuffer(\" \");\n                this.appendBuffer(this.typeToString(type.returns[i]));\n            }\n            this.appendBuffer(\")\");\n        }\n    }\n    printStructType(typeIndex) {\n        var type = this._types[typeIndex];\n        if (type.fields.length === 0)\n            return;\n        for (var i = 0; i < type.fields.length; i++) {\n            const fieldType = this.maybeMut(this.typeToString(type.fields[i]), type.mutabilities[i]);\n            const fieldName = this._nameResolver.getFieldName(typeIndex, i, false);\n            this.appendBuffer(` (field ${fieldName} ${fieldType})`);\n        }\n    }\n    printArrayType(typeIndex) {\n        var type = this._types[typeIndex];\n        this.appendBuffer(\" (field \");\n        this.appendBuffer(this.maybeMut(this.typeToString(type.elementType), type.mutability));\n    }\n    printBlockType(type) {\n        if (type.kind === -64 /* empty_block_type */) {\n            return;\n        }\n        if (type.kind === 0 /* unspecified */) {\n            return this.printFuncType(type.index);\n        }\n        this.appendBuffer(\" (result \");\n        this.appendBuffer(this.typeToString(type));\n        this.appendBuffer(\")\");\n    }\n    printString(b) {\n        this.appendBuffer('\"');\n        for (var i = 0; i < b.length; i++) {\n            var byte = b[i];\n            if (byte < 0x20 ||\n                byte >= 0x7f ||\n                byte == /* \" */ 0x22 ||\n                byte == /* \\ */ 0x5c) {\n                this.appendBuffer(\"\\\\\" + (byte >> 4).toString(16) + (byte & 15).toString(16));\n            }\n            else {\n                this.appendBuffer(String.fromCharCode(byte));\n            }\n        }\n        this.appendBuffer('\"');\n    }\n    printExpression(expression) {\n        for (const operator of expression) {\n            this.appendBuffer(\"(\");\n            this.printOperator(operator);\n            this.appendBuffer(\")\");\n        }\n    }\n    // extraDepthOffset is used by \"delegate\" instructions.\n    useLabel(depth, extraDepthOffset = 0) {\n        if (!this._backrefLabels) {\n            return \"\" + depth;\n        }\n        var i = this._backrefLabels.length - depth - 1 - extraDepthOffset;\n        if (i < 0) {\n            return \"\" + depth;\n        }\n        var backrefLabel = this._backrefLabels[i];\n        if (!backrefLabel.useLabel) {\n            backrefLabel.useLabel = true;\n            backrefLabel.label = this._nameResolver.getLabel(this._labelIndex);\n            var line = this._lines[backrefLabel.line];\n            this._lines[backrefLabel.line] =\n                line.substring(0, backrefLabel.position) +\n                    \" \" +\n                    backrefLabel.label +\n                    line.substring(backrefLabel.position);\n            this._labelIndex++;\n        }\n        return backrefLabel.label || \"\" + depth;\n    }\n    printOperator(operator) {\n        var code = operator.code;\n        this.appendBuffer(OperatorCodeNames[code]);\n        switch (code) {\n            case 2 /* block */:\n            case 3 /* loop */:\n            case 4 /* if */:\n            case 6 /* try */:\n                if (this._labelMode !== LabelMode.Depth) {\n                    const backrefLabel = {\n                        line: this._lines.length,\n                        position: this._buffer.length,\n                        useLabel: false,\n                        label: null,\n                    };\n                    if (this._labelMode === LabelMode.Always) {\n                        backrefLabel.useLabel = true;\n                        backrefLabel.label = this._nameResolver.getLabel(this._labelIndex++);\n                        if (backrefLabel.label) {\n                            this.appendBuffer(\" \");\n                            this.appendBuffer(backrefLabel.label);\n                        }\n                    }\n                    this._backrefLabels.push(backrefLabel);\n                }\n                this.printBlockType(operator.blockType);\n                break;\n            case 11 /* end */:\n                if (this._labelMode === LabelMode.Depth) {\n                    break;\n                }\n                const backrefLabel = this._backrefLabels.pop();\n                if (backrefLabel.label) {\n                    this.appendBuffer(\" \");\n                    this.appendBuffer(backrefLabel.label);\n                }\n                break;\n            case 12 /* br */:\n            case 13 /* br_if */:\n            case 212 /* br_on_null */:\n            case 214 /* br_on_non_null */:\n            case 64322 /* br_on_cast */:\n            case 64323 /* br_on_cast_fail */:\n            case 64352 /* br_on_func */:\n            case 64355 /* br_on_non_func */:\n            case 64353 /* br_on_data */:\n            case 64356 /* br_on_non_data */:\n            case 64354 /* br_on_i31 */:\n            case 64357 /* br_on_non_i31 */:\n                this.appendBuffer(\" \");\n                this.appendBuffer(this.useLabel(operator.brDepth));\n                break;\n            case 64326 /* br_on_cast_static */:\n            case 64327 /* br_on_cast_static_fail */: {\n                const label = this.useLabel(operator.brDepth);\n                const refType = this._nameResolver.getTypeName(operator.refType, true);\n                this.appendBuffer(` ${label} ${refType}`);\n                break;\n            }\n            case 14 /* br_table */:\n                for (var i = 0; i < operator.brTable.length; i++) {\n                    this.appendBuffer(\" \");\n                    this.appendBuffer(this.useLabel(operator.brTable[i]));\n                }\n                break;\n            case 9 /* rethrow */:\n                this.appendBuffer(\" \");\n                this.appendBuffer(this.useLabel(operator.relativeDepth));\n                break;\n            case 24 /* delegate */:\n                this.appendBuffer(\" \");\n                this.appendBuffer(this.useLabel(operator.relativeDepth, 1));\n                break;\n            case 7 /* catch */:\n            case 8 /* throw */:\n                var eventName = this._nameResolver.getEventName(operator.eventIndex, true);\n                this.appendBuffer(` ${eventName}`);\n                break;\n            case 208 /* ref_null */:\n                this.appendBuffer(\" \");\n                this.appendBuffer(this.typeIndexToString(operator.refType));\n                break;\n            case 16 /* call */:\n            case 18 /* return_call */:\n            case 210 /* ref_func */:\n                var funcName = this._nameResolver.getFunctionName(operator.funcIndex, operator.funcIndex < this._importCount, true);\n                this.appendBuffer(` ${funcName}`);\n                break;\n            case 17 /* call_indirect */:\n            case 19 /* return_call_indirect */:\n                this.printFuncType(operator.typeIndex);\n                break;\n            case 28 /* select_with_type */: {\n                const selectType = this.typeToString(operator.selectType);\n                this.appendBuffer(` ${selectType}`);\n                break;\n            }\n            case 32 /* local_get */:\n            case 33 /* local_set */:\n            case 34 /* local_tee */:\n                var paramName = this._nameResolver.getVariableName(this._funcIndex, operator.localIndex, true);\n                this.appendBuffer(` ${paramName}`);\n                break;\n            case 35 /* global_get */:\n            case 36 /* global_set */:\n                var globalName = this._nameResolver.getGlobalName(operator.globalIndex, true);\n                this.appendBuffer(` ${globalName}`);\n                break;\n            case 40 /* i32_load */:\n            case 41 /* i64_load */:\n            case 42 /* f32_load */:\n            case 43 /* f64_load */:\n            case 44 /* i32_load8_s */:\n            case 45 /* i32_load8_u */:\n            case 46 /* i32_load16_s */:\n            case 47 /* i32_load16_u */:\n            case 48 /* i64_load8_s */:\n            case 49 /* i64_load8_u */:\n            case 50 /* i64_load16_s */:\n            case 51 /* i64_load16_u */:\n            case 52 /* i64_load32_s */:\n            case 53 /* i64_load32_u */:\n            case 54 /* i32_store */:\n            case 55 /* i64_store */:\n            case 56 /* f32_store */:\n            case 57 /* f64_store */:\n            case 58 /* i32_store8 */:\n            case 59 /* i32_store16 */:\n            case 60 /* i64_store8 */:\n            case 61 /* i64_store16 */:\n            case 62 /* i64_store32 */:\n            case 65024 /* atomic_notify */:\n            case 65025 /* i32_atomic_wait */:\n            case 65026 /* i64_atomic_wait */:\n            case 65040 /* i32_atomic_load */:\n            case 65041 /* i64_atomic_load */:\n            case 65042 /* i32_atomic_load8_u */:\n            case 65043 /* i32_atomic_load16_u */:\n            case 65044 /* i64_atomic_load8_u */:\n            case 65045 /* i64_atomic_load16_u */:\n            case 65046 /* i64_atomic_load32_u */:\n            case 65047 /* i32_atomic_store */:\n            case 65048 /* i64_atomic_store */:\n            case 65049 /* i32_atomic_store8 */:\n            case 65050 /* i32_atomic_store16 */:\n            case 65051 /* i64_atomic_store8 */:\n            case 65052 /* i64_atomic_store16 */:\n            case 65053 /* i64_atomic_store32 */:\n            case 65054 /* i32_atomic_rmw_add */:\n            case 65055 /* i64_atomic_rmw_add */:\n            case 65056 /* i32_atomic_rmw8_add_u */:\n            case 65057 /* i32_atomic_rmw16_add_u */:\n            case 65058 /* i64_atomic_rmw8_add_u */:\n            case 65059 /* i64_atomic_rmw16_add_u */:\n            case 65060 /* i64_atomic_rmw32_add_u */:\n            case 65061 /* i32_atomic_rmw_sub */:\n            case 65062 /* i64_atomic_rmw_sub */:\n            case 65063 /* i32_atomic_rmw8_sub_u */:\n            case 65064 /* i32_atomic_rmw16_sub_u */:\n            case 65065 /* i64_atomic_rmw8_sub_u */:\n            case 65066 /* i64_atomic_rmw16_sub_u */:\n            case 65067 /* i64_atomic_rmw32_sub_u */:\n            case 65068 /* i32_atomic_rmw_and */:\n            case 65069 /* i64_atomic_rmw_and */:\n            case 65070 /* i32_atomic_rmw8_and_u */:\n            case 65071 /* i32_atomic_rmw16_and_u */:\n            case 65072 /* i64_atomic_rmw8_and_u */:\n            case 65073 /* i64_atomic_rmw16_and_u */:\n            case 65074 /* i64_atomic_rmw32_and_u */:\n            case 65075 /* i32_atomic_rmw_or */:\n            case 65076 /* i64_atomic_rmw_or */:\n            case 65077 /* i32_atomic_rmw8_or_u */:\n            case 65078 /* i32_atomic_rmw16_or_u */:\n            case 65079 /* i64_atomic_rmw8_or_u */:\n            case 65080 /* i64_atomic_rmw16_or_u */:\n            case 65081 /* i64_atomic_rmw32_or_u */:\n            case 65082 /* i32_atomic_rmw_xor */:\n            case 65083 /* i64_atomic_rmw_xor */:\n            case 65084 /* i32_atomic_rmw8_xor_u */:\n            case 65085 /* i32_atomic_rmw16_xor_u */:\n            case 65086 /* i64_atomic_rmw8_xor_u */:\n            case 65087 /* i64_atomic_rmw16_xor_u */:\n            case 65088 /* i64_atomic_rmw32_xor_u */:\n            case 65089 /* i32_atomic_rmw_xchg */:\n            case 65090 /* i64_atomic_rmw_xchg */:\n            case 65091 /* i32_atomic_rmw8_xchg_u */:\n            case 65092 /* i32_atomic_rmw16_xchg_u */:\n            case 65093 /* i64_atomic_rmw8_xchg_u */:\n            case 65094 /* i64_atomic_rmw16_xchg_u */:\n            case 65095 /* i64_atomic_rmw32_xchg_u */:\n            case 65096 /* i32_atomic_rmw_cmpxchg */:\n            case 65097 /* i64_atomic_rmw_cmpxchg */:\n            case 65098 /* i32_atomic_rmw8_cmpxchg_u */:\n            case 65099 /* i32_atomic_rmw16_cmpxchg_u */:\n            case 65100 /* i64_atomic_rmw8_cmpxchg_u */:\n            case 65101 /* i64_atomic_rmw16_cmpxchg_u */:\n            case 65102 /* i64_atomic_rmw32_cmpxchg_u */:\n            case 64768 /* v128_load */:\n            case 64769 /* i16x8_load8x8_s */:\n            case 64770 /* i16x8_load8x8_u */:\n            case 64771 /* i32x4_load16x4_s */:\n            case 64772 /* i32x4_load16x4_u */:\n            case 64773 /* i64x2_load32x2_s */:\n            case 64774 /* i64x2_load32x2_u */:\n            case 64775 /* v8x16_load_splat */:\n            case 64776 /* v16x8_load_splat */:\n            case 64777 /* v32x4_load_splat */:\n            case 64778 /* v64x2_load_splat */:\n            case 64779 /* v128_store */:\n            case 64860 /* v128_load32_zero */:\n            case 64861 /* v128_load64_zero */:\n                var memoryAddress = memoryAddressToString(operator.memoryAddress, operator.code);\n                if (memoryAddress !== null) {\n                    this.appendBuffer(\" \");\n                    this.appendBuffer(memoryAddress);\n                }\n                break;\n            case 63 /* current_memory */:\n            case 64 /* grow_memory */:\n                break;\n            case 65 /* i32_const */:\n                this.appendBuffer(` ${operator.literal.toString()}`);\n                break;\n            case 66 /* i64_const */:\n                this.appendBuffer(` ${operator.literal.toString()}`);\n                break;\n            case 67 /* f32_const */:\n                this.appendBuffer(` ${formatFloat32(operator.literal)}`);\n                break;\n            case 68 /* f64_const */:\n                this.appendBuffer(` ${formatFloat64(operator.literal)}`);\n                break;\n            case 64780 /* v128_const */:\n                this.appendBuffer(` i32x4 ${formatI32Array(operator.literal, 4)}`);\n                break;\n            case 64781 /* i8x16_shuffle */:\n                this.appendBuffer(` ${formatI8Array(operator.lines, 16)}`);\n                break;\n            case 64789 /* i8x16_extract_lane_s */:\n            case 64790 /* i8x16_extract_lane_u */:\n            case 64791 /* i8x16_replace_lane */:\n            case 64792 /* i16x8_extract_lane_s */:\n            case 64793 /* i16x8_extract_lane_u */:\n            case 64794 /* i16x8_replace_lane */:\n            case 64795 /* i32x4_extract_lane */:\n            case 64796 /* i32x4_replace_lane */:\n            case 64799 /* f32x4_extract_lane */:\n            case 64800 /* f32x4_replace_lane */:\n            case 64797 /* i64x2_extract_lane */:\n            case 64798 /* i64x2_replace_lane */:\n            case 64801 /* f64x2_extract_lane */:\n            case 64802 /* f64x2_replace_lane */:\n                this.appendBuffer(` ${operator.lineIndex}`);\n                break;\n            case 64520 /* memory_init */:\n            case 64521 /* data_drop */:\n                this.appendBuffer(` ${operator.segmentIndex}`);\n                break;\n            case 64525 /* elem_drop */:\n                const elementName = this._nameResolver.getElementName(operator.segmentIndex, true);\n                this.appendBuffer(` ${elementName}`);\n                break;\n            case 38 /* table_set */:\n            case 37 /* table_get */:\n            case 64529 /* table_fill */: {\n                const tableName = this._nameResolver.getTableName(operator.tableIndex, true);\n                this.appendBuffer(` ${tableName}`);\n                break;\n            }\n            case 64526 /* table_copy */: {\n                // Table index might be omitted and defaults to 0.\n                if (operator.tableIndex !== 0 || operator.destinationIndex !== 0) {\n                    const tableName = this._nameResolver.getTableName(operator.tableIndex, true);\n                    const destinationName = this._nameResolver.getTableName(operator.destinationIndex, true);\n                    this.appendBuffer(` ${destinationName} ${tableName}`);\n                }\n                break;\n            }\n            case 64524 /* table_init */: {\n                // Table index might be omitted and defaults to 0.\n                if (operator.tableIndex !== 0) {\n                    const tableName = this._nameResolver.getTableName(operator.tableIndex, true);\n                    this.appendBuffer(` ${tableName}`);\n                }\n                const elementName = this._nameResolver.getElementName(operator.segmentIndex, true);\n                this.appendBuffer(` ${elementName}`);\n                break;\n            }\n            case 64259 /* struct_get */:\n            case 64260 /* struct_get_s */:\n            case 64261 /* struct_get_u */:\n            case 64262 /* struct_set */: {\n                const refType = this._nameResolver.getTypeName(operator.refType, true);\n                const fieldName = this._nameResolver.getFieldName(operator.refType, operator.fieldIndex, true);\n                this.appendBuffer(` ${refType} ${fieldName}`);\n                break;\n            }\n            case 64304 /* rtt_canon */:\n            case 64305 /* rtt_sub */:\n            case 64306 /* rtt_fresh_sub */:\n            case 64324 /* ref_test_static */:\n            case 64325 /* ref_cast_static */:\n            case 64264 /* struct_new_default */:\n            case 64258 /* struct_new_default_with_rtt */:\n            case 64263 /* struct_new */:\n            case 64257 /* struct_new_with_rtt */:\n            case 64284 /* array_new_default */:\n            case 64274 /* array_new_default_with_rtt */:\n            case 64283 /* array_new */:\n            case 64273 /* array_new_with_rtt */:\n            case 64275 /* array_get */:\n            case 64276 /* array_get_s */:\n            case 64277 /* array_get_u */:\n            case 64278 /* array_set */:\n            case 64279 /* array_len */: {\n                const refType = this._nameResolver.getTypeName(operator.refType, true);\n                this.appendBuffer(` ${refType}`);\n                break;\n            }\n            case 64280 /* array_copy */: {\n                const dstType = this._nameResolver.getTypeName(operator.refType, true);\n                const srcType = this._nameResolver.getTypeName(operator.srcType, true);\n                this.appendBuffer(` ${dstType} ${srcType}`);\n                break;\n            }\n            case 64281 /* array_init */:\n            case 64282 /* array_init_static */: {\n                const refType = this._nameResolver.getTypeName(operator.refType, true);\n                const length = operator.brDepth; // Overloaded field.\n                this.appendBuffer(` ${refType} ${length}`);\n                break;\n            }\n        }\n    }\n    printImportSource(info) {\n        this.printString(info.module);\n        this.appendBuffer(\" \");\n        this.printString(info.field);\n    }\n    increaseIndent() {\n        this._indent += IndentIncrement;\n        this._indentLevel++;\n    }\n    decreaseIndent() {\n        this._indent = this._indent.slice(0, -IndentIncrement.length);\n        this._indentLevel--;\n    }\n    disassemble(reader) {\n        const done = this.disassembleChunk(reader);\n        if (!done)\n            return null;\n        let lines = this._lines;\n        if (this._addOffsets) {\n            lines = lines.map((line, index) => {\n                var position = formatHex(this._offsets[index], 4);\n                return line + \" ;; @\" + position;\n            });\n        }\n        lines.push(\"\"); // we need '\\n' after last line\n        const result = lines.join(\"\\n\");\n        this._lines.length = 0;\n        this._offsets.length = 0;\n        this._functionBodyOffsets.length = 0;\n        return result;\n    }\n    getResult() {\n        let linesReady = this._lines.length;\n        if (this._backrefLabels && this._labelMode === LabelMode.WhenUsed) {\n            this._backrefLabels.some((backrefLabel) => {\n                if (backrefLabel.useLabel)\n                    return false;\n                linesReady = backrefLabel.line;\n                return true;\n            });\n        }\n        if (linesReady === 0) {\n            return {\n                lines: [],\n                offsets: this._addOffsets ? [] : undefined,\n                done: this._done,\n                functionBodyOffsets: this._addOffsets ? [] : undefined,\n            };\n        }\n        if (linesReady === this._lines.length) {\n            const result = {\n                lines: this._lines,\n                offsets: this._addOffsets ? this._offsets : undefined,\n                done: this._done,\n                functionBodyOffsets: this._addOffsets\n                    ? this._functionBodyOffsets\n                    : undefined,\n            };\n            this._lines = [];\n            if (this._addOffsets) {\n                this._offsets = [];\n                this._functionBodyOffsets = [];\n            }\n            return result;\n        }\n        const result = {\n            lines: this._lines.splice(0, linesReady),\n            offsets: this._addOffsets\n                ? this._offsets.splice(0, linesReady)\n                : undefined,\n            done: false,\n            functionBodyOffsets: this._addOffsets\n                ? this._functionBodyOffsets\n                : undefined,\n        };\n        if (this._backrefLabels) {\n            this._backrefLabels.forEach((backrefLabel) => {\n                backrefLabel.line -= linesReady;\n            });\n        }\n        return result;\n    }\n    disassembleChunk(reader, offsetInModule = 0) {\n        if (this._done)\n            throw new Error(\"Invalid state: disassembly process was already finished.\");\n        while (true) {\n            this._currentPosition = reader.position + offsetInModule;\n            if (!reader.read())\n                return false;\n            switch (reader.state) {\n                case 2 /* END_WASM */:\n                    this.appendBuffer(\")\");\n                    this.newLine();\n                    this._reset();\n                    if (!reader.hasMoreBytes()) {\n                        this._done = true;\n                        return true;\n                    }\n                    break;\n                case -1 /* ERROR */:\n                    throw reader.error;\n                case 1 /* BEGIN_WASM */:\n                    this.appendBuffer(\"(module\");\n                    this.newLine();\n                    break;\n                case 4 /* END_SECTION */:\n                    this._currentSectionId = -1 /* Unknown */;\n                    break;\n                case 3 /* BEGIN_SECTION */:\n                    var sectionInfo = reader.result;\n                    switch (sectionInfo.id) {\n                        case 1 /* Type */:\n                        case 2 /* Import */:\n                        case 7 /* Export */:\n                        case 6 /* Global */:\n                        case 3 /* Function */:\n                        case 8 /* Start */:\n                        case 10 /* Code */:\n                        case 5 /* Memory */:\n                        case 11 /* Data */:\n                        case 4 /* Table */:\n                        case 9 /* Element */:\n                        case 13 /* Event */:\n                            this._currentSectionId = sectionInfo.id;\n                            break; // reading known section;\n                        default:\n                            reader.skipSection();\n                            break;\n                    }\n                    break;\n                case 15 /* MEMORY_SECTION_ENTRY */:\n                    var memoryInfo = reader.result;\n                    var memoryIndex = this._memoryCount++;\n                    var memoryName = this._nameResolver.getMemoryName(memoryIndex, false);\n                    this.appendBuffer(`  (memory ${memoryName}`);\n                    if (this._exportMetadata !== null) {\n                        for (const exportName of this._exportMetadata.getMemoryExportNames(memoryIndex)) {\n                            this.appendBuffer(` (export ${JSON.stringify(exportName)})`);\n                        }\n                    }\n                    this.appendBuffer(` ${limitsToString(memoryInfo.limits)}`);\n                    if (memoryInfo.shared) {\n                        this.appendBuffer(` shared`);\n                    }\n                    this.appendBuffer(\")\");\n                    this.newLine();\n                    break;\n                case 23 /* EVENT_SECTION_ENTRY */:\n                    var eventInfo = reader.result;\n                    var eventIndex = this._eventCount++;\n                    var eventName = this._nameResolver.getEventName(eventIndex, false);\n                    this.appendBuffer(`  (event ${eventName}`);\n                    if (this._exportMetadata !== null) {\n                        for (const exportName of this._exportMetadata.getEventExportNames(eventIndex)) {\n                            this.appendBuffer(` (export ${JSON.stringify(exportName)})`);\n                        }\n                    }\n                    this.printFuncType(eventInfo.typeIndex);\n                    this.appendBuffer(\")\");\n                    this.newLine();\n                    break;\n                case 14 /* TABLE_SECTION_ENTRY */:\n                    var tableInfo = reader.result;\n                    var tableIndex = this._tableCount++;\n                    var tableName = this._nameResolver.getTableName(tableIndex, false);\n                    this.appendBuffer(`  (table ${tableName}`);\n                    if (this._exportMetadata !== null) {\n                        for (const exportName of this._exportMetadata.getTableExportNames(tableIndex)) {\n                            this.appendBuffer(` (export ${JSON.stringify(exportName)})`);\n                        }\n                    }\n                    this.appendBuffer(` ${limitsToString(tableInfo.limits)} ${this.typeToString(tableInfo.elementType)})`);\n                    this.newLine();\n                    break;\n                case 17 /* EXPORT_SECTION_ENTRY */:\n                    // Skip printing exports here when we have export metadata\n                    // which we can use to print export information inline.\n                    if (this._exportMetadata === null) {\n                        var exportInfo = reader.result;\n                        this.appendBuffer(\"  (export \");\n                        this.printString(exportInfo.field);\n                        this.appendBuffer(\" \");\n                        switch (exportInfo.kind) {\n                            case 0 /* Function */:\n                                var funcName = this._nameResolver.getFunctionName(exportInfo.index, exportInfo.index < this._importCount, true);\n                                this.appendBuffer(`(func ${funcName})`);\n                                break;\n                            case 1 /* Table */:\n                                var tableName = this._nameResolver.getTableName(exportInfo.index, true);\n                                this.appendBuffer(`(table ${tableName})`);\n                                break;\n                            case 2 /* Memory */:\n                                var memoryName = this._nameResolver.getMemoryName(exportInfo.index, true);\n                                this.appendBuffer(`(memory ${memoryName})`);\n                                break;\n                            case 3 /* Global */:\n                                var globalName = this._nameResolver.getGlobalName(exportInfo.index, true);\n                                this.appendBuffer(`(global ${globalName})`);\n                                break;\n                            case 4 /* Event */:\n                                var eventName = this._nameResolver.getEventName(exportInfo.index, true);\n                                this.appendBuffer(`(event ${eventName})`);\n                                break;\n                            default:\n                                throw new Error(`Unsupported export ${exportInfo.kind}`);\n                        }\n                        this.appendBuffer(\")\");\n                        this.newLine();\n                    }\n                    break;\n                case 12 /* IMPORT_SECTION_ENTRY */:\n                    var importInfo = reader.result;\n                    switch (importInfo.kind) {\n                        case 0 /* Function */:\n                            this._importCount++;\n                            var funcIndex = this._funcIndex++;\n                            var funcName = this._nameResolver.getFunctionName(funcIndex, true, false);\n                            this.appendBuffer(`  (func ${funcName}`);\n                            if (this._exportMetadata !== null) {\n                                for (const exportName of this._exportMetadata.getFunctionExportNames(funcIndex)) {\n                                    this.appendBuffer(` (export ${JSON.stringify(exportName)})`);\n                                }\n                            }\n                            this.appendBuffer(` (import `);\n                            this.printImportSource(importInfo);\n                            this.appendBuffer(\")\");\n                            this.printFuncType(importInfo.funcTypeIndex);\n                            this.appendBuffer(\")\");\n                            break;\n                        case 3 /* Global */:\n                            var globalImportInfo = importInfo.type;\n                            var globalIndex = this._globalCount++;\n                            var globalName = this._nameResolver.getGlobalName(globalIndex, false);\n                            this.appendBuffer(`  (global ${globalName}`);\n                            if (this._exportMetadata !== null) {\n                                for (const exportName of this._exportMetadata.getGlobalExportNames(globalIndex)) {\n                                    this.appendBuffer(` (export ${JSON.stringify(exportName)})`);\n                                }\n                            }\n                            this.appendBuffer(` (import `);\n                            this.printImportSource(importInfo);\n                            this.appendBuffer(`) ${this.globalTypeToString(globalImportInfo)})`);\n                            break;\n                        case 2 /* Memory */:\n                            var memoryImportInfo = importInfo.type;\n                            var memoryIndex = this._memoryCount++;\n                            var memoryName = this._nameResolver.getMemoryName(memoryIndex, false);\n                            this.appendBuffer(`  (memory ${memoryName}`);\n                            if (this._exportMetadata !== null) {\n                                for (const exportName of this._exportMetadata.getMemoryExportNames(memoryIndex)) {\n                                    this.appendBuffer(` (export ${JSON.stringify(exportName)})`);\n                                }\n                            }\n                            this.appendBuffer(` (import `);\n                            this.printImportSource(importInfo);\n                            this.appendBuffer(`) ${limitsToString(memoryImportInfo.limits)}`);\n                            if (memoryImportInfo.shared) {\n                                this.appendBuffer(` shared`);\n                            }\n                            this.appendBuffer(\")\");\n                            break;\n                        case 1 /* Table */:\n                            var tableImportInfo = importInfo.type;\n                            var tableIndex = this._tableCount++;\n                            var tableName = this._nameResolver.getTableName(tableIndex, false);\n                            this.appendBuffer(`  (table ${tableName}`);\n                            if (this._exportMetadata !== null) {\n                                for (const exportName of this._exportMetadata.getTableExportNames(tableIndex)) {\n                                    this.appendBuffer(` (export ${JSON.stringify(exportName)})`);\n                                }\n                            }\n                            this.appendBuffer(` (import `);\n                            this.printImportSource(importInfo);\n                            this.appendBuffer(`) ${limitsToString(tableImportInfo.limits)} ${this.typeToString(tableImportInfo.elementType)})`);\n                            break;\n                        case 4 /* Event */:\n                            var eventImportInfo = importInfo.type;\n                            var eventIndex = this._eventCount++;\n                            var eventName = this._nameResolver.getEventName(eventIndex, false);\n                            this.appendBuffer(`  (event ${eventName}`);\n                            if (this._exportMetadata !== null) {\n                                for (const exportName of this._exportMetadata.getEventExportNames(eventIndex)) {\n                                    this.appendBuffer(` (export ${JSON.stringify(exportName)})`);\n                                }\n                            }\n                            this.appendBuffer(` (import `);\n                            this.printImportSource(importInfo);\n                            this.appendBuffer(\")\");\n                            this.printFuncType(eventImportInfo.typeIndex);\n                            this.appendBuffer(\")\");\n                            break;\n                        default:\n                            throw new Error(`NYI other import types: ${importInfo.kind}`);\n                    }\n                    this.newLine();\n                    break;\n                case 33 /* BEGIN_ELEMENT_SECTION_ENTRY */:\n                    var elementSegment = reader.result;\n                    var elementIndex = this._elementCount++;\n                    var elementName = this._nameResolver.getElementName(elementIndex, false);\n                    this.appendBuffer(`  (elem ${elementName}`);\n                    switch (elementSegment.mode) {\n                        case 0 /* Active */:\n                            if (elementSegment.tableIndex !== 0) {\n                                const tableName = this._nameResolver.getTableName(elementSegment.tableIndex, false);\n                                this.appendBuffer(` (table ${tableName})`);\n                            }\n                            break;\n                        case 1 /* Passive */:\n                            break;\n                        case 2 /* Declarative */:\n                            this.appendBuffer(\" declare\");\n                            break;\n                    }\n                    break;\n                case 35 /* END_ELEMENT_SECTION_ENTRY */:\n                    this.appendBuffer(\")\");\n                    this.newLine();\n                    break;\n                case 34 /* ELEMENT_SECTION_ENTRY_BODY */:\n                    const elementSegmentBody = reader.result;\n                    this.appendBuffer(` ${this.typeToString(elementSegmentBody.elementType)}`);\n                    break;\n                case 39 /* BEGIN_GLOBAL_SECTION_ENTRY */:\n                    var globalInfo = reader.result;\n                    var globalIndex = this._globalCount++;\n                    var globalName = this._nameResolver.getGlobalName(globalIndex, false);\n                    this.appendBuffer(`  (global ${globalName}`);\n                    if (this._exportMetadata !== null) {\n                        for (const exportName of this._exportMetadata.getGlobalExportNames(globalIndex)) {\n                            this.appendBuffer(` (export ${JSON.stringify(exportName)})`);\n                        }\n                    }\n                    this.appendBuffer(` ${this.globalTypeToString(globalInfo.type)}`);\n                    break;\n                case 40 /* END_GLOBAL_SECTION_ENTRY */:\n                    this.appendBuffer(\")\");\n                    this.newLine();\n                    break;\n                case 11 /* TYPE_SECTION_ENTRY */:\n                    var typeEntry = reader.result;\n                    var typeIndex = this._types.length;\n                    this._types.push(typeEntry);\n                    if (!this._skipTypes) {\n                        var typeName = this._nameResolver.getTypeName(typeIndex, false);\n                        var superTypeName = undefined;\n                        if (typeEntry.supertype !== undefined) {\n                            superTypeName = this.typeIndexToString(typeEntry.supertype);\n                        }\n                        if (typeEntry.form === -32 /* func */) {\n                            this.appendBuffer(`  (type ${typeName} (func`);\n                            this.printFuncType(typeIndex);\n                            this.appendBuffer(\"))\");\n                        }\n                        else if (typeEntry.form === -35 /* func_subtype */) {\n                            this.appendBuffer(`  (type ${typeName} (func_subtype`);\n                            this.printFuncType(typeIndex);\n                            this.appendBuffer(` (supertype ${superTypeName})))`);\n                        }\n                        else if (typeEntry.form === -33 /* struct */) {\n                            this.appendBuffer(`  (type ${typeName} (struct`);\n                            this.printStructType(typeIndex);\n                            this.appendBuffer(\"))\");\n                        }\n                        else if (typeEntry.form === -36 /* struct_subtype */) {\n                            this.appendBuffer(`  (type ${typeName} (struct_subtype`);\n                            this.printStructType(typeIndex);\n                            this.appendBuffer(` (supertype ${superTypeName})))`);\n                        }\n                        else if (typeEntry.form === -34 /* array */) {\n                            this.appendBuffer(`  (type ${typeName} (array`);\n                            this.printArrayType(typeIndex);\n                            this.appendBuffer(\"))\");\n                        }\n                        else if (typeEntry.form === -37 /* array_subtype */) {\n                            this.appendBuffer(`  (type ${typeName} (array_subtype`);\n                            this.printArrayType(typeIndex);\n                            this.appendBuffer(`) (supertype ${superTypeName})))`);\n                        }\n                        else {\n                            throw new Error(`Unknown type form: ${typeEntry.form}`);\n                        }\n                        this.newLine();\n                    }\n                    break;\n                case 22 /* START_SECTION_ENTRY */:\n                    var startEntry = reader.result;\n                    var funcName = this._nameResolver.getFunctionName(startEntry.index, startEntry.index < this._importCount, true);\n                    this.appendBuffer(`  (start ${funcName})`);\n                    this.newLine();\n                    break;\n                case 36 /* BEGIN_DATA_SECTION_ENTRY */:\n                    this.appendBuffer(\"  (data\");\n                    break;\n                case 37 /* DATA_SECTION_ENTRY_BODY */:\n                    var body = reader.result;\n                    this.appendBuffer(\" \");\n                    this.printString(body.data);\n                    break;\n                case 38 /* END_DATA_SECTION_ENTRY */:\n                    this.appendBuffer(\")\");\n                    this.newLine();\n                    break;\n                case 25 /* BEGIN_INIT_EXPRESSION_BODY */:\n                case 44 /* BEGIN_OFFSET_EXPRESSION_BODY */:\n                    this._expression = [];\n                    break;\n                case 26 /* INIT_EXPRESSION_OPERATOR */:\n                case 45 /* OFFSET_EXPRESSION_OPERATOR */:\n                    var operator = reader.result;\n                    if (operator.code !== 11 /* end */) {\n                        this._expression.push(operator);\n                    }\n                    break;\n                case 46 /* END_OFFSET_EXPRESSION_BODY */:\n                    if (this._expression.length > 1) {\n                        this.appendBuffer(\" (offset \");\n                        this.printExpression(this._expression);\n                        this.appendBuffer(\")\");\n                    }\n                    else {\n                        this.appendBuffer(\" \");\n                        this.printExpression(this._expression);\n                    }\n                    this._expression = [];\n                    break;\n                case 27 /* END_INIT_EXPRESSION_BODY */:\n                    if (this._expression.length > 1 &&\n                        this._currentSectionId === 9 /* Element */) {\n                        this.appendBuffer(\" (item \");\n                        this.printExpression(this._expression);\n                        this.appendBuffer(\")\");\n                    }\n                    else {\n                        this.appendBuffer(\" \");\n                        this.printExpression(this._expression);\n                    }\n                    this._expression = [];\n                    break;\n                case 13 /* FUNCTION_SECTION_ENTRY */:\n                    this._funcTypes.push(reader.result.typeIndex);\n                    break;\n                case 28 /* BEGIN_FUNCTION_BODY */:\n                    var func = reader.result;\n                    var type = this._types[this._funcTypes[this._funcIndex - this._importCount]];\n                    this.appendBuffer(\"  (func \");\n                    this.appendBuffer(this._nameResolver.getFunctionName(this._funcIndex, false, false));\n                    if (this._exportMetadata !== null) {\n                        for (const exportName of this._exportMetadata.getFunctionExportNames(this._funcIndex)) {\n                            this.appendBuffer(` (export ${JSON.stringify(exportName)})`);\n                        }\n                    }\n                    for (var i = 0; i < type.params.length; i++) {\n                        var paramName = this._nameResolver.getVariableName(this._funcIndex, i, false);\n                        this.appendBuffer(` (param ${paramName} ${this.typeToString(type.params[i])})`);\n                    }\n                    for (var i = 0; i < type.returns.length; i++) {\n                        this.appendBuffer(` (result ${this.typeToString(type.returns[i])})`);\n                    }\n                    this.newLine();\n                    var localIndex = type.params.length;\n                    if (func.locals.length > 0) {\n                        this.appendBuffer(\"   \");\n                        for (var l of func.locals) {\n                            for (var i = 0; i < l.count; i++) {\n                                var paramName = this._nameResolver.getVariableName(this._funcIndex, localIndex++, false);\n                                this.appendBuffer(` (local ${paramName} ${this.typeToString(l.type)})`);\n                            }\n                        }\n                        this.newLine();\n                    }\n                    this._indent = \"    \";\n                    this._indentLevel = 0;\n                    this._labelIndex = 0;\n                    this._backrefLabels = this._labelMode === LabelMode.Depth ? null : [];\n                    this._logFirstInstruction = true;\n                    break;\n                case 30 /* CODE_OPERATOR */:\n                    if (this._logFirstInstruction) {\n                        this.logStartOfFunctionBodyOffset();\n                        this._logFirstInstruction = false;\n                    }\n                    var operator = reader.result;\n                    if (operator.code == 11 /* end */ && this._indentLevel == 0) {\n                        // reached of the function, closing function body\n                        this.appendBuffer(`  )`);\n                        this.newLine();\n                        break;\n                    }\n                    switch (operator.code) {\n                        case 11 /* end */:\n                        case 5 /* else */:\n                        case 7 /* catch */:\n                        case 25 /* catch_all */:\n                        case 10 /* unwind */:\n                        case 24 /* delegate */:\n                            this.decreaseIndent();\n                            break;\n                    }\n                    this.appendBuffer(this._indent);\n                    this.printOperator(operator);\n                    this.newLine();\n                    switch (operator.code) {\n                        case 4 /* if */:\n                        case 2 /* block */:\n                        case 3 /* loop */:\n                        case 5 /* else */:\n                        case 6 /* try */:\n                        case 7 /* catch */:\n                        case 25 /* catch_all */:\n                        case 10 /* unwind */:\n                            this.increaseIndent();\n                            break;\n                    }\n                    break;\n                case 31 /* END_FUNCTION_BODY */:\n                    this._funcIndex++;\n                    this._backrefLabels = null;\n                    this.logEndOfFunctionBodyOffset();\n                    // See case BinaryReaderState.CODE_OPERATOR for closing of body\n                    break;\n                default:\n                    throw new Error(`Expectected state: ${reader.state}`);\n            }\n        }\n    }\n}\nconst UNKNOWN_FUNCTION_PREFIX = \"unknown\";\nclass NameSectionNameResolver extends DefaultNameResolver {\n    constructor(functionNames, localNames, eventNames, typeNames, tableNames, memoryNames, globalNames, fieldNames) {\n        super();\n        this._functionNames = functionNames;\n        this._localNames = localNames;\n        this._eventNames = eventNames;\n        this._typeNames = typeNames;\n        this._tableNames = tableNames;\n        this._memoryNames = memoryNames;\n        this._globalNames = globalNames;\n        this._fieldNames = fieldNames;\n    }\n    getTypeName(index, isRef) {\n        const name = this._typeNames[index];\n        if (!name)\n            return super.getTypeName(index, isRef);\n        return isRef ? `$${name}` : `$${name} (;${index};)`;\n    }\n    getTableName(index, isRef) {\n        const name = this._tableNames[index];\n        if (!name)\n            return super.getTableName(index, isRef);\n        return isRef ? `$${name}` : `$${name} (;${index};)`;\n    }\n    getMemoryName(index, isRef) {\n        const name = this._memoryNames[index];\n        if (!name)\n            return super.getMemoryName(index, isRef);\n        return isRef ? `$${name}` : `$${name} (;${index};)`;\n    }\n    getGlobalName(index, isRef) {\n        const name = this._globalNames[index];\n        if (!name)\n            return super.getGlobalName(index, isRef);\n        return isRef ? `$${name}` : `$${name} (;${index};)`;\n    }\n    getEventName(index, isRef) {\n        const name = this._eventNames[index];\n        if (!name)\n            return super.getEventName(index, isRef);\n        return isRef ? `$${name}` : `$${name} (;${index};)`;\n    }\n    getFunctionName(index, isImport, isRef) {\n        const name = this._functionNames[index];\n        if (!name)\n            return `$${UNKNOWN_FUNCTION_PREFIX}${index}`;\n        return isRef ? `$${name}` : `$${name} (;${index};)`;\n    }\n    getVariableName(funcIndex, index, isRef) {\n        const name = this._localNames[funcIndex] && this._localNames[funcIndex][index];\n        if (!name)\n            return super.getVariableName(funcIndex, index, isRef);\n        return isRef ? `$${name}` : `$${name} (;${index};)`;\n    }\n    getFieldName(typeIndex, index, isRef) {\n        const name = this._fieldNames[typeIndex] && this._fieldNames[typeIndex][index];\n        if (!name)\n            return super.getFieldName(typeIndex, index, isRef);\n        return isRef ? `$${name}` : `$${name} (;${index};)`;\n    }\n}\nexport class NameSectionReader {\n    constructor() {\n        this._done = false;\n        this._functionsCount = 0;\n        this._functionImportsCount = 0;\n        this._functionNames = null;\n        this._functionLocalNames = null;\n        this._eventNames = null;\n        this._typeNames = null;\n        this._tableNames = null;\n        this._memoryNames = null;\n        this._globalNames = null;\n        this._fieldNames = null;\n        this._hasNames = false;\n    }\n    read(reader) {\n        if (this._done)\n            throw new Error(\"Invalid state: disassembly process was already finished.\");\n        while (true) {\n            if (!reader.read())\n                return false;\n            switch (reader.state) {\n                case 2 /* END_WASM */:\n                    if (!reader.hasMoreBytes()) {\n                        this._done = true;\n                        return true;\n                    }\n                    break;\n                case -1 /* ERROR */:\n                    throw reader.error;\n                case 1 /* BEGIN_WASM */:\n                    this._functionsCount = 0;\n                    this._functionImportsCount = 0;\n                    this._functionNames = [];\n                    this._functionLocalNames = [];\n                    this._eventNames = [];\n                    this._typeNames = [];\n                    this._tableNames = [];\n                    this._memoryNames = [];\n                    this._globalNames = [];\n                    this._fieldNames = [];\n                    this._hasNames = false;\n                    break;\n                case 4 /* END_SECTION */:\n                    break;\n                case 3 /* BEGIN_SECTION */:\n                    var sectionInfo = reader.result;\n                    if (sectionInfo.id === 0 /* Custom */ &&\n                        bytesToString(sectionInfo.name) === NAME_SECTION_NAME) {\n                        break;\n                    }\n                    if (sectionInfo.id === 3 /* Function */ ||\n                        sectionInfo.id === 2 /* Import */) {\n                        break;\n                    }\n                    reader.skipSection();\n                    break;\n                case 12 /* IMPORT_SECTION_ENTRY */:\n                    var importInfo = reader.result;\n                    if (importInfo.kind === 0 /* Function */)\n                        this._functionImportsCount++;\n                    break;\n                case 13 /* FUNCTION_SECTION_ENTRY */:\n                    this._functionsCount++;\n                    break;\n                case 19 /* NAME_SECTION_ENTRY */:\n                    const nameInfo = reader.result;\n                    if (nameInfo.type === 1 /* Function */) {\n                        const { names } = nameInfo;\n                        names.forEach(({ index, name }) => {\n                            this._functionNames[index] = bytesToString(name);\n                        });\n                        this._hasNames = true;\n                    }\n                    else if (nameInfo.type === 2 /* Local */) {\n                        const { funcs } = nameInfo;\n                        funcs.forEach(({ index, locals }) => {\n                            const localNames = (this._functionLocalNames[index] = []);\n                            locals.forEach(({ index, name }) => {\n                                localNames[index] = bytesToString(name);\n                            });\n                        });\n                        this._hasNames = true;\n                    }\n                    else if (nameInfo.type === 3 /* Event */) {\n                        const { names } = nameInfo;\n                        names.forEach(({ index, name }) => {\n                            this._eventNames[index] = bytesToString(name);\n                        });\n                        this._hasNames = true;\n                    }\n                    else if (nameInfo.type === 4 /* Type */) {\n                        const { names } = nameInfo;\n                        names.forEach(({ index, name }) => {\n                            this._typeNames[index] = bytesToString(name);\n                        });\n                        this._hasNames = true;\n                    }\n                    else if (nameInfo.type === 5 /* Table */) {\n                        const { names } = nameInfo;\n                        names.forEach(({ index, name }) => {\n                            this._tableNames[index] = bytesToString(name);\n                        });\n                        this._hasNames = true;\n                    }\n                    else if (nameInfo.type === 6 /* Memory */) {\n                        const { names } = nameInfo;\n                        names.forEach(({ index, name }) => {\n                            this._memoryNames[index] = bytesToString(name);\n                        });\n                        this._hasNames = true;\n                    }\n                    else if (nameInfo.type === 7 /* Global */) {\n                        const { names } = nameInfo;\n                        names.forEach(({ index, name }) => {\n                            this._globalNames[index] = bytesToString(name);\n                        });\n                        this._hasNames = true;\n                    }\n                    else if (nameInfo.type === 10 /* Field */) {\n                        const { types } = nameInfo;\n                        types.forEach(({ index, fields }) => {\n                            const fieldNames = (this._fieldNames[index] = []);\n                            fields.forEach(({ index, name }) => {\n                                fieldNames[index] = bytesToString(name);\n                            });\n                        });\n                    }\n                    break;\n                default:\n                    throw new Error(`Expectected state: ${reader.state}`);\n            }\n        }\n    }\n    hasValidNames() {\n        return this._hasNames;\n    }\n    getNameResolver() {\n        if (!this.hasValidNames())\n            throw new Error(\"Has no valid name section\");\n        // Fix bad names.\n        const functionNamesLength = this._functionImportsCount + this._functionsCount;\n        const functionNames = this._functionNames.slice(0, functionNamesLength);\n        const usedNameAt = Object.create(null);\n        for (let i = 0; i < functionNames.length; i++) {\n            const name = functionNames[i];\n            if (!name)\n                continue;\n            const goodName = !(name in usedNameAt) &&\n                isValidName(name) &&\n                name.indexOf(UNKNOWN_FUNCTION_PREFIX) !== 0;\n            if (!goodName) {\n                if (usedNameAt[name] >= 0) {\n                    // Remove all non-unique names.\n                    functionNames[usedNameAt[name]] = null;\n                    usedNameAt[name] = -1;\n                }\n                functionNames[i] = null;\n                continue;\n            }\n            usedNameAt[name] = i;\n        }\n        return new NameSectionNameResolver(functionNames, this._functionLocalNames, this._eventNames, this._typeNames, this._tableNames, this._memoryNames, this._globalNames, this._fieldNames);\n    }\n}\nexport class DevToolsNameResolver extends NameSectionNameResolver {\n    constructor(functionNames, localNames, eventNames, typeNames, tableNames, memoryNames, globalNames, fieldNames) {\n        super(functionNames, localNames, eventNames, typeNames, tableNames, memoryNames, globalNames, fieldNames);\n    }\n    getFunctionName(index, isImport, isRef) {\n        const name = this._functionNames[index];\n        if (!name)\n            return isImport ? `$import${index}` : `$func${index}`;\n        return isRef ? `$${name}` : `$${name} (;${index};)`;\n    }\n}\nexport class DevToolsNameGenerator {\n    constructor() {\n        this._done = false;\n        this._functionImportsCount = 0;\n        this._memoryImportsCount = 0;\n        this._tableImportsCount = 0;\n        this._globalImportsCount = 0;\n        this._eventImportsCount = 0;\n        this._functionNames = null;\n        this._functionLocalNames = null;\n        this._eventNames = null;\n        this._memoryNames = null;\n        this._typeNames = null;\n        this._tableNames = null;\n        this._globalNames = null;\n        this._fieldNames = null;\n        this._functionExportNames = null;\n        this._globalExportNames = null;\n        this._memoryExportNames = null;\n        this._tableExportNames = null;\n        this._eventExportNames = null;\n    }\n    _addExportName(exportNames, index, name) {\n        const names = exportNames[index];\n        if (names) {\n            names.push(name);\n        }\n        else {\n            exportNames[index] = [name];\n        }\n    }\n    _setName(names, index, name, isNameSectionName) {\n        if (!name)\n            return;\n        if (isNameSectionName) {\n            if (!isValidName(name))\n                return;\n            names[index] = name;\n        }\n        else if (!names[index]) {\n            names[index] = name.replace(INVALID_NAME_SYMBOLS_REGEX_GLOBAL, \"_\");\n        }\n    }\n    read(reader) {\n        if (this._done)\n            throw new Error(\"Invalid state: disassembly process was already finished.\");\n        while (true) {\n            if (!reader.read())\n                return false;\n            switch (reader.state) {\n                case 2 /* END_WASM */:\n                    if (!reader.hasMoreBytes()) {\n                        this._done = true;\n                        return true;\n                    }\n                    break;\n                case -1 /* ERROR */:\n                    throw reader.error;\n                case 1 /* BEGIN_WASM */:\n                    this._functionImportsCount = 0;\n                    this._memoryImportsCount = 0;\n                    this._tableImportsCount = 0;\n                    this._globalImportsCount = 0;\n                    this._eventImportsCount = 0;\n                    this._functionNames = [];\n                    this._functionLocalNames = [];\n                    this._eventNames = [];\n                    this._memoryNames = [];\n                    this._typeNames = [];\n                    this._tableNames = [];\n                    this._globalNames = [];\n                    this._fieldNames = [];\n                    this._functionExportNames = [];\n                    this._globalExportNames = [];\n                    this._memoryExportNames = [];\n                    this._tableExportNames = [];\n                    this._eventExportNames = [];\n                    break;\n                case 4 /* END_SECTION */:\n                    break;\n                case 3 /* BEGIN_SECTION */:\n                    var sectionInfo = reader.result;\n                    if (sectionInfo.id === 0 /* Custom */ &&\n                        bytesToString(sectionInfo.name) === NAME_SECTION_NAME) {\n                        break;\n                    }\n                    switch (sectionInfo.id) {\n                        case 2 /* Import */:\n                        case 7 /* Export */:\n                            break; // reading known section;\n                        default:\n                            reader.skipSection();\n                            break;\n                    }\n                    break;\n                case 12 /* IMPORT_SECTION_ENTRY */:\n                    var importInfo = reader.result;\n                    const importName = `${bytesToString(importInfo.module)}.${bytesToString(importInfo.field)}`;\n                    switch (importInfo.kind) {\n                        case 0 /* Function */:\n                            this._setName(this._functionNames, this._functionImportsCount++, importName, false);\n                            break;\n                        case 1 /* Table */:\n                            this._setName(this._tableNames, this._tableImportsCount++, importName, false);\n                            break;\n                        case 2 /* Memory */:\n                            this._setName(this._memoryNames, this._memoryImportsCount++, importName, false);\n                            break;\n                        case 3 /* Global */:\n                            this._setName(this._globalNames, this._globalImportsCount++, importName, false);\n                            break;\n                        case 4 /* Event */:\n                            this._setName(this._eventNames, this._eventImportsCount++, importName, false);\n                        default:\n                            throw new Error(`Unsupported export ${importInfo.kind}`);\n                    }\n                    break;\n                case 19 /* NAME_SECTION_ENTRY */:\n                    const nameInfo = reader.result;\n                    if (nameInfo.type === 1 /* Function */) {\n                        const { names } = nameInfo;\n                        names.forEach(({ index, name }) => {\n                            this._setName(this._functionNames, index, bytesToString(name), true);\n                        });\n                    }\n                    else if (nameInfo.type === 2 /* Local */) {\n                        const { funcs } = nameInfo;\n                        funcs.forEach(({ index, locals }) => {\n                            const localNames = (this._functionLocalNames[index] = []);\n                            locals.forEach(({ index, name }) => {\n                                localNames[index] = bytesToString(name);\n                            });\n                        });\n                    }\n                    else if (nameInfo.type === 3 /* Event */) {\n                        const { names } = nameInfo;\n                        names.forEach(({ index, name }) => {\n                            this._setName(this._eventNames, index, bytesToString(name), true);\n                        });\n                    }\n                    else if (nameInfo.type === 4 /* Type */) {\n                        const { names } = nameInfo;\n                        names.forEach(({ index, name }) => {\n                            this._setName(this._typeNames, index, bytesToString(name), true);\n                        });\n                    }\n                    else if (nameInfo.type === 5 /* Table */) {\n                        const { names } = nameInfo;\n                        names.forEach(({ index, name }) => {\n                            this._setName(this._tableNames, index, bytesToString(name), true);\n                        });\n                    }\n                    else if (nameInfo.type === 6 /* Memory */) {\n                        const { names } = nameInfo;\n                        names.forEach(({ index, name }) => {\n                            this._setName(this._memoryNames, index, bytesToString(name), true);\n                        });\n                    }\n                    else if (nameInfo.type === 7 /* Global */) {\n                        const { names } = nameInfo;\n                        names.forEach(({ index, name }) => {\n                            this._setName(this._globalNames, index, bytesToString(name), true);\n                        });\n                    }\n                    else if (nameInfo.type === 10 /* Field */) {\n                        const { types } = nameInfo;\n                        types.forEach(({ index, fields }) => {\n                            const fieldNames = (this._fieldNames[index] = []);\n                            fields.forEach(({ index, name }) => {\n                                fieldNames[index] = bytesToString(name);\n                            });\n                        });\n                    }\n                    break;\n                case 17 /* EXPORT_SECTION_ENTRY */:\n                    var exportInfo = reader.result;\n                    const exportName = bytesToString(exportInfo.field);\n                    switch (exportInfo.kind) {\n                        case 0 /* Function */:\n                            this._addExportName(this._functionExportNames, exportInfo.index, exportName);\n                            this._setName(this._functionNames, exportInfo.index, exportName, false);\n                            break;\n                        case 3 /* Global */:\n                            this._addExportName(this._globalExportNames, exportInfo.index, exportName);\n                            this._setName(this._globalNames, exportInfo.index, exportName, false);\n                            break;\n                        case 2 /* Memory */:\n                            this._addExportName(this._memoryExportNames, exportInfo.index, exportName);\n                            this._setName(this._memoryNames, exportInfo.index, exportName, false);\n                            break;\n                        case 1 /* Table */:\n                            this._addExportName(this._tableExportNames, exportInfo.index, exportName);\n                            this._setName(this._tableNames, exportInfo.index, exportName, false);\n                            break;\n                        case 4 /* Event */:\n                            this._addExportName(this._eventExportNames, exportInfo.index, exportName);\n                            this._setName(this._eventNames, exportInfo.index, exportName, false);\n                            break;\n                        default:\n                            throw new Error(`Unsupported export ${exportInfo.kind}`);\n                    }\n                    break;\n                default:\n                    throw new Error(`Expectected state: ${reader.state}`);\n            }\n        }\n    }\n    getExportMetadata() {\n        return new DevToolsExportMetadata(this._functionExportNames, this._globalExportNames, this._memoryExportNames, this._tableExportNames, this._eventExportNames);\n    }\n    getNameResolver() {\n        return new DevToolsNameResolver(this._functionNames, this._functionLocalNames, this._eventNames, this._typeNames, this._tableNames, this._memoryNames, this._globalNames, this._fieldNames);\n    }\n}\n//# sourceMappingURL=WasmDis.js.map", "/* Copyright 2016 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// See https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md\nconst WASM_MAGIC_NUMBER = 0x6d736100;\nconst WASM_SUPPORTED_EXPERIMENTAL_VERSION = 0xd;\nconst WASM_SUPPORTED_VERSION = 0x1;\nexport var SectionCode;\n(function (SectionCode) {\n    SectionCode[SectionCode[\"Unknown\"] = -1] = \"Unknown\";\n    SectionCode[SectionCode[\"Custom\"] = 0] = \"Custom\";\n    SectionCode[SectionCode[\"Type\"] = 1] = \"Type\";\n    SectionCode[SectionCode[\"Import\"] = 2] = \"Import\";\n    SectionCode[SectionCode[\"Function\"] = 3] = \"Function\";\n    SectionCode[SectionCode[\"Table\"] = 4] = \"Table\";\n    SectionCode[SectionCode[\"Memory\"] = 5] = \"Memory\";\n    SectionCode[SectionCode[\"Global\"] = 6] = \"Global\";\n    SectionCode[SectionCode[\"Export\"] = 7] = \"Export\";\n    SectionCode[SectionCode[\"Start\"] = 8] = \"Start\";\n    SectionCode[SectionCode[\"Element\"] = 9] = \"Element\";\n    SectionCode[SectionCode[\"Code\"] = 10] = \"Code\";\n    SectionCode[SectionCode[\"Data\"] = 11] = \"Data\";\n    SectionCode[SectionCode[\"Event\"] = 13] = \"Event\";\n})(SectionCode || (SectionCode = {}));\nexport var OperatorCode;\n(function (OperatorCode) {\n    OperatorCode[OperatorCode[\"unreachable\"] = 0] = \"unreachable\";\n    OperatorCode[OperatorCode[\"nop\"] = 1] = \"nop\";\n    OperatorCode[OperatorCode[\"block\"] = 2] = \"block\";\n    OperatorCode[OperatorCode[\"loop\"] = 3] = \"loop\";\n    OperatorCode[OperatorCode[\"if\"] = 4] = \"if\";\n    OperatorCode[OperatorCode[\"else\"] = 5] = \"else\";\n    OperatorCode[OperatorCode[\"try\"] = 6] = \"try\";\n    OperatorCode[OperatorCode[\"catch\"] = 7] = \"catch\";\n    OperatorCode[OperatorCode[\"throw\"] = 8] = \"throw\";\n    OperatorCode[OperatorCode[\"rethrow\"] = 9] = \"rethrow\";\n    OperatorCode[OperatorCode[\"unwind\"] = 10] = \"unwind\";\n    OperatorCode[OperatorCode[\"end\"] = 11] = \"end\";\n    OperatorCode[OperatorCode[\"br\"] = 12] = \"br\";\n    OperatorCode[OperatorCode[\"br_if\"] = 13] = \"br_if\";\n    OperatorCode[OperatorCode[\"br_table\"] = 14] = \"br_table\";\n    OperatorCode[OperatorCode[\"return\"] = 15] = \"return\";\n    OperatorCode[OperatorCode[\"call\"] = 16] = \"call\";\n    OperatorCode[OperatorCode[\"call_indirect\"] = 17] = \"call_indirect\";\n    OperatorCode[OperatorCode[\"return_call\"] = 18] = \"return_call\";\n    OperatorCode[OperatorCode[\"return_call_indirect\"] = 19] = \"return_call_indirect\";\n    OperatorCode[OperatorCode[\"call_ref\"] = 20] = \"call_ref\";\n    OperatorCode[OperatorCode[\"return_call_ref\"] = 21] = \"return_call_ref\";\n    OperatorCode[OperatorCode[\"let\"] = 23] = \"let\";\n    OperatorCode[OperatorCode[\"delegate\"] = 24] = \"delegate\";\n    OperatorCode[OperatorCode[\"catch_all\"] = 25] = \"catch_all\";\n    OperatorCode[OperatorCode[\"drop\"] = 26] = \"drop\";\n    OperatorCode[OperatorCode[\"select\"] = 27] = \"select\";\n    OperatorCode[OperatorCode[\"select_with_type\"] = 28] = \"select_with_type\";\n    OperatorCode[OperatorCode[\"local_get\"] = 32] = \"local_get\";\n    OperatorCode[OperatorCode[\"local_set\"] = 33] = \"local_set\";\n    OperatorCode[OperatorCode[\"local_tee\"] = 34] = \"local_tee\";\n    OperatorCode[OperatorCode[\"global_get\"] = 35] = \"global_get\";\n    OperatorCode[OperatorCode[\"global_set\"] = 36] = \"global_set\";\n    OperatorCode[OperatorCode[\"i32_load\"] = 40] = \"i32_load\";\n    OperatorCode[OperatorCode[\"i64_load\"] = 41] = \"i64_load\";\n    OperatorCode[OperatorCode[\"f32_load\"] = 42] = \"f32_load\";\n    OperatorCode[OperatorCode[\"f64_load\"] = 43] = \"f64_load\";\n    OperatorCode[OperatorCode[\"i32_load8_s\"] = 44] = \"i32_load8_s\";\n    OperatorCode[OperatorCode[\"i32_load8_u\"] = 45] = \"i32_load8_u\";\n    OperatorCode[OperatorCode[\"i32_load16_s\"] = 46] = \"i32_load16_s\";\n    OperatorCode[OperatorCode[\"i32_load16_u\"] = 47] = \"i32_load16_u\";\n    OperatorCode[OperatorCode[\"i64_load8_s\"] = 48] = \"i64_load8_s\";\n    OperatorCode[OperatorCode[\"i64_load8_u\"] = 49] = \"i64_load8_u\";\n    OperatorCode[OperatorCode[\"i64_load16_s\"] = 50] = \"i64_load16_s\";\n    OperatorCode[OperatorCode[\"i64_load16_u\"] = 51] = \"i64_load16_u\";\n    OperatorCode[OperatorCode[\"i64_load32_s\"] = 52] = \"i64_load32_s\";\n    OperatorCode[OperatorCode[\"i64_load32_u\"] = 53] = \"i64_load32_u\";\n    OperatorCode[OperatorCode[\"i32_store\"] = 54] = \"i32_store\";\n    OperatorCode[OperatorCode[\"i64_store\"] = 55] = \"i64_store\";\n    OperatorCode[OperatorCode[\"f32_store\"] = 56] = \"f32_store\";\n    OperatorCode[OperatorCode[\"f64_store\"] = 57] = \"f64_store\";\n    OperatorCode[OperatorCode[\"i32_store8\"] = 58] = \"i32_store8\";\n    OperatorCode[OperatorCode[\"i32_store16\"] = 59] = \"i32_store16\";\n    OperatorCode[OperatorCode[\"i64_store8\"] = 60] = \"i64_store8\";\n    OperatorCode[OperatorCode[\"i64_store16\"] = 61] = \"i64_store16\";\n    OperatorCode[OperatorCode[\"i64_store32\"] = 62] = \"i64_store32\";\n    OperatorCode[OperatorCode[\"current_memory\"] = 63] = \"current_memory\";\n    OperatorCode[OperatorCode[\"grow_memory\"] = 64] = \"grow_memory\";\n    OperatorCode[OperatorCode[\"i32_const\"] = 65] = \"i32_const\";\n    OperatorCode[OperatorCode[\"i64_const\"] = 66] = \"i64_const\";\n    OperatorCode[OperatorCode[\"f32_const\"] = 67] = \"f32_const\";\n    OperatorCode[OperatorCode[\"f64_const\"] = 68] = \"f64_const\";\n    OperatorCode[OperatorCode[\"i32_eqz\"] = 69] = \"i32_eqz\";\n    OperatorCode[OperatorCode[\"i32_eq\"] = 70] = \"i32_eq\";\n    OperatorCode[OperatorCode[\"i32_ne\"] = 71] = \"i32_ne\";\n    OperatorCode[OperatorCode[\"i32_lt_s\"] = 72] = \"i32_lt_s\";\n    OperatorCode[OperatorCode[\"i32_lt_u\"] = 73] = \"i32_lt_u\";\n    OperatorCode[OperatorCode[\"i32_gt_s\"] = 74] = \"i32_gt_s\";\n    OperatorCode[OperatorCode[\"i32_gt_u\"] = 75] = \"i32_gt_u\";\n    OperatorCode[OperatorCode[\"i32_le_s\"] = 76] = \"i32_le_s\";\n    OperatorCode[OperatorCode[\"i32_le_u\"] = 77] = \"i32_le_u\";\n    OperatorCode[OperatorCode[\"i32_ge_s\"] = 78] = \"i32_ge_s\";\n    OperatorCode[OperatorCode[\"i32_ge_u\"] = 79] = \"i32_ge_u\";\n    OperatorCode[OperatorCode[\"i64_eqz\"] = 80] = \"i64_eqz\";\n    OperatorCode[OperatorCode[\"i64_eq\"] = 81] = \"i64_eq\";\n    OperatorCode[OperatorCode[\"i64_ne\"] = 82] = \"i64_ne\";\n    OperatorCode[OperatorCode[\"i64_lt_s\"] = 83] = \"i64_lt_s\";\n    OperatorCode[OperatorCode[\"i64_lt_u\"] = 84] = \"i64_lt_u\";\n    OperatorCode[OperatorCode[\"i64_gt_s\"] = 85] = \"i64_gt_s\";\n    OperatorCode[OperatorCode[\"i64_gt_u\"] = 86] = \"i64_gt_u\";\n    OperatorCode[OperatorCode[\"i64_le_s\"] = 87] = \"i64_le_s\";\n    OperatorCode[OperatorCode[\"i64_le_u\"] = 88] = \"i64_le_u\";\n    OperatorCode[OperatorCode[\"i64_ge_s\"] = 89] = \"i64_ge_s\";\n    OperatorCode[OperatorCode[\"i64_ge_u\"] = 90] = \"i64_ge_u\";\n    OperatorCode[OperatorCode[\"f32_eq\"] = 91] = \"f32_eq\";\n    OperatorCode[OperatorCode[\"f32_ne\"] = 92] = \"f32_ne\";\n    OperatorCode[OperatorCode[\"f32_lt\"] = 93] = \"f32_lt\";\n    OperatorCode[OperatorCode[\"f32_gt\"] = 94] = \"f32_gt\";\n    OperatorCode[OperatorCode[\"f32_le\"] = 95] = \"f32_le\";\n    OperatorCode[OperatorCode[\"f32_ge\"] = 96] = \"f32_ge\";\n    OperatorCode[OperatorCode[\"f64_eq\"] = 97] = \"f64_eq\";\n    OperatorCode[OperatorCode[\"f64_ne\"] = 98] = \"f64_ne\";\n    OperatorCode[OperatorCode[\"f64_lt\"] = 99] = \"f64_lt\";\n    OperatorCode[OperatorCode[\"f64_gt\"] = 100] = \"f64_gt\";\n    OperatorCode[OperatorCode[\"f64_le\"] = 101] = \"f64_le\";\n    OperatorCode[OperatorCode[\"f64_ge\"] = 102] = \"f64_ge\";\n    OperatorCode[OperatorCode[\"i32_clz\"] = 103] = \"i32_clz\";\n    OperatorCode[OperatorCode[\"i32_ctz\"] = 104] = \"i32_ctz\";\n    OperatorCode[OperatorCode[\"i32_popcnt\"] = 105] = \"i32_popcnt\";\n    OperatorCode[OperatorCode[\"i32_add\"] = 106] = \"i32_add\";\n    OperatorCode[OperatorCode[\"i32_sub\"] = 107] = \"i32_sub\";\n    OperatorCode[OperatorCode[\"i32_mul\"] = 108] = \"i32_mul\";\n    OperatorCode[OperatorCode[\"i32_div_s\"] = 109] = \"i32_div_s\";\n    OperatorCode[OperatorCode[\"i32_div_u\"] = 110] = \"i32_div_u\";\n    OperatorCode[OperatorCode[\"i32_rem_s\"] = 111] = \"i32_rem_s\";\n    OperatorCode[OperatorCode[\"i32_rem_u\"] = 112] = \"i32_rem_u\";\n    OperatorCode[OperatorCode[\"i32_and\"] = 113] = \"i32_and\";\n    OperatorCode[OperatorCode[\"i32_or\"] = 114] = \"i32_or\";\n    OperatorCode[OperatorCode[\"i32_xor\"] = 115] = \"i32_xor\";\n    OperatorCode[OperatorCode[\"i32_shl\"] = 116] = \"i32_shl\";\n    OperatorCode[OperatorCode[\"i32_shr_s\"] = 117] = \"i32_shr_s\";\n    OperatorCode[OperatorCode[\"i32_shr_u\"] = 118] = \"i32_shr_u\";\n    OperatorCode[OperatorCode[\"i32_rotl\"] = 119] = \"i32_rotl\";\n    OperatorCode[OperatorCode[\"i32_rotr\"] = 120] = \"i32_rotr\";\n    OperatorCode[OperatorCode[\"i64_clz\"] = 121] = \"i64_clz\";\n    OperatorCode[OperatorCode[\"i64_ctz\"] = 122] = \"i64_ctz\";\n    OperatorCode[OperatorCode[\"i64_popcnt\"] = 123] = \"i64_popcnt\";\n    OperatorCode[OperatorCode[\"i64_add\"] = 124] = \"i64_add\";\n    OperatorCode[OperatorCode[\"i64_sub\"] = 125] = \"i64_sub\";\n    OperatorCode[OperatorCode[\"i64_mul\"] = 126] = \"i64_mul\";\n    OperatorCode[OperatorCode[\"i64_div_s\"] = 127] = \"i64_div_s\";\n    OperatorCode[OperatorCode[\"i64_div_u\"] = 128] = \"i64_div_u\";\n    OperatorCode[OperatorCode[\"i64_rem_s\"] = 129] = \"i64_rem_s\";\n    OperatorCode[OperatorCode[\"i64_rem_u\"] = 130] = \"i64_rem_u\";\n    OperatorCode[OperatorCode[\"i64_and\"] = 131] = \"i64_and\";\n    OperatorCode[OperatorCode[\"i64_or\"] = 132] = \"i64_or\";\n    OperatorCode[OperatorCode[\"i64_xor\"] = 133] = \"i64_xor\";\n    OperatorCode[OperatorCode[\"i64_shl\"] = 134] = \"i64_shl\";\n    OperatorCode[OperatorCode[\"i64_shr_s\"] = 135] = \"i64_shr_s\";\n    OperatorCode[OperatorCode[\"i64_shr_u\"] = 136] = \"i64_shr_u\";\n    OperatorCode[OperatorCode[\"i64_rotl\"] = 137] = \"i64_rotl\";\n    OperatorCode[OperatorCode[\"i64_rotr\"] = 138] = \"i64_rotr\";\n    OperatorCode[OperatorCode[\"f32_abs\"] = 139] = \"f32_abs\";\n    OperatorCode[OperatorCode[\"f32_neg\"] = 140] = \"f32_neg\";\n    OperatorCode[OperatorCode[\"f32_ceil\"] = 141] = \"f32_ceil\";\n    OperatorCode[OperatorCode[\"f32_floor\"] = 142] = \"f32_floor\";\n    OperatorCode[OperatorCode[\"f32_trunc\"] = 143] = \"f32_trunc\";\n    OperatorCode[OperatorCode[\"f32_nearest\"] = 144] = \"f32_nearest\";\n    OperatorCode[OperatorCode[\"f32_sqrt\"] = 145] = \"f32_sqrt\";\n    OperatorCode[OperatorCode[\"f32_add\"] = 146] = \"f32_add\";\n    OperatorCode[OperatorCode[\"f32_sub\"] = 147] = \"f32_sub\";\n    OperatorCode[OperatorCode[\"f32_mul\"] = 148] = \"f32_mul\";\n    OperatorCode[OperatorCode[\"f32_div\"] = 149] = \"f32_div\";\n    OperatorCode[OperatorCode[\"f32_min\"] = 150] = \"f32_min\";\n    OperatorCode[OperatorCode[\"f32_max\"] = 151] = \"f32_max\";\n    OperatorCode[OperatorCode[\"f32_copysign\"] = 152] = \"f32_copysign\";\n    OperatorCode[OperatorCode[\"f64_abs\"] = 153] = \"f64_abs\";\n    OperatorCode[OperatorCode[\"f64_neg\"] = 154] = \"f64_neg\";\n    OperatorCode[OperatorCode[\"f64_ceil\"] = 155] = \"f64_ceil\";\n    OperatorCode[OperatorCode[\"f64_floor\"] = 156] = \"f64_floor\";\n    OperatorCode[OperatorCode[\"f64_trunc\"] = 157] = \"f64_trunc\";\n    OperatorCode[OperatorCode[\"f64_nearest\"] = 158] = \"f64_nearest\";\n    OperatorCode[OperatorCode[\"f64_sqrt\"] = 159] = \"f64_sqrt\";\n    OperatorCode[OperatorCode[\"f64_add\"] = 160] = \"f64_add\";\n    OperatorCode[OperatorCode[\"f64_sub\"] = 161] = \"f64_sub\";\n    OperatorCode[OperatorCode[\"f64_mul\"] = 162] = \"f64_mul\";\n    OperatorCode[OperatorCode[\"f64_div\"] = 163] = \"f64_div\";\n    OperatorCode[OperatorCode[\"f64_min\"] = 164] = \"f64_min\";\n    OperatorCode[OperatorCode[\"f64_max\"] = 165] = \"f64_max\";\n    OperatorCode[OperatorCode[\"f64_copysign\"] = 166] = \"f64_copysign\";\n    OperatorCode[OperatorCode[\"i32_wrap_i64\"] = 167] = \"i32_wrap_i64\";\n    OperatorCode[OperatorCode[\"i32_trunc_f32_s\"] = 168] = \"i32_trunc_f32_s\";\n    OperatorCode[OperatorCode[\"i32_trunc_f32_u\"] = 169] = \"i32_trunc_f32_u\";\n    OperatorCode[OperatorCode[\"i32_trunc_f64_s\"] = 170] = \"i32_trunc_f64_s\";\n    OperatorCode[OperatorCode[\"i32_trunc_f64_u\"] = 171] = \"i32_trunc_f64_u\";\n    OperatorCode[OperatorCode[\"i64_extend_i32_s\"] = 172] = \"i64_extend_i32_s\";\n    OperatorCode[OperatorCode[\"i64_extend_i32_u\"] = 173] = \"i64_extend_i32_u\";\n    OperatorCode[OperatorCode[\"i64_trunc_f32_s\"] = 174] = \"i64_trunc_f32_s\";\n    OperatorCode[OperatorCode[\"i64_trunc_f32_u\"] = 175] = \"i64_trunc_f32_u\";\n    OperatorCode[OperatorCode[\"i64_trunc_f64_s\"] = 176] = \"i64_trunc_f64_s\";\n    OperatorCode[OperatorCode[\"i64_trunc_f64_u\"] = 177] = \"i64_trunc_f64_u\";\n    OperatorCode[OperatorCode[\"f32_convert_i32_s\"] = 178] = \"f32_convert_i32_s\";\n    OperatorCode[OperatorCode[\"f32_convert_i32_u\"] = 179] = \"f32_convert_i32_u\";\n    OperatorCode[OperatorCode[\"f32_convert_i64_s\"] = 180] = \"f32_convert_i64_s\";\n    OperatorCode[OperatorCode[\"f32_convert_i64_u\"] = 181] = \"f32_convert_i64_u\";\n    OperatorCode[OperatorCode[\"f32_demote_f64\"] = 182] = \"f32_demote_f64\";\n    OperatorCode[OperatorCode[\"f64_convert_i32_s\"] = 183] = \"f64_convert_i32_s\";\n    OperatorCode[OperatorCode[\"f64_convert_i32_u\"] = 184] = \"f64_convert_i32_u\";\n    OperatorCode[OperatorCode[\"f64_convert_i64_s\"] = 185] = \"f64_convert_i64_s\";\n    OperatorCode[OperatorCode[\"f64_convert_i64_u\"] = 186] = \"f64_convert_i64_u\";\n    OperatorCode[OperatorCode[\"f64_promote_f32\"] = 187] = \"f64_promote_f32\";\n    OperatorCode[OperatorCode[\"i32_reinterpret_f32\"] = 188] = \"i32_reinterpret_f32\";\n    OperatorCode[OperatorCode[\"i64_reinterpret_f64\"] = 189] = \"i64_reinterpret_f64\";\n    OperatorCode[OperatorCode[\"f32_reinterpret_i32\"] = 190] = \"f32_reinterpret_i32\";\n    OperatorCode[OperatorCode[\"f64_reinterpret_i64\"] = 191] = \"f64_reinterpret_i64\";\n    OperatorCode[OperatorCode[\"i32_extend8_s\"] = 192] = \"i32_extend8_s\";\n    OperatorCode[OperatorCode[\"i32_extend16_s\"] = 193] = \"i32_extend16_s\";\n    OperatorCode[OperatorCode[\"i64_extend8_s\"] = 194] = \"i64_extend8_s\";\n    OperatorCode[OperatorCode[\"i64_extend16_s\"] = 195] = \"i64_extend16_s\";\n    OperatorCode[OperatorCode[\"i64_extend32_s\"] = 196] = \"i64_extend32_s\";\n    OperatorCode[OperatorCode[\"prefix_0xfb\"] = 251] = \"prefix_0xfb\";\n    OperatorCode[OperatorCode[\"prefix_0xfc\"] = 252] = \"prefix_0xfc\";\n    OperatorCode[OperatorCode[\"prefix_0xfd\"] = 253] = \"prefix_0xfd\";\n    OperatorCode[OperatorCode[\"prefix_0xfe\"] = 254] = \"prefix_0xfe\";\n    OperatorCode[OperatorCode[\"i32_trunc_sat_f32_s\"] = 64512] = \"i32_trunc_sat_f32_s\";\n    OperatorCode[OperatorCode[\"i32_trunc_sat_f32_u\"] = 64513] = \"i32_trunc_sat_f32_u\";\n    OperatorCode[OperatorCode[\"i32_trunc_sat_f64_s\"] = 64514] = \"i32_trunc_sat_f64_s\";\n    OperatorCode[OperatorCode[\"i32_trunc_sat_f64_u\"] = 64515] = \"i32_trunc_sat_f64_u\";\n    OperatorCode[OperatorCode[\"i64_trunc_sat_f32_s\"] = 64516] = \"i64_trunc_sat_f32_s\";\n    OperatorCode[OperatorCode[\"i64_trunc_sat_f32_u\"] = 64517] = \"i64_trunc_sat_f32_u\";\n    OperatorCode[OperatorCode[\"i64_trunc_sat_f64_s\"] = 64518] = \"i64_trunc_sat_f64_s\";\n    OperatorCode[OperatorCode[\"i64_trunc_sat_f64_u\"] = 64519] = \"i64_trunc_sat_f64_u\";\n    OperatorCode[OperatorCode[\"memory_init\"] = 64520] = \"memory_init\";\n    OperatorCode[OperatorCode[\"data_drop\"] = 64521] = \"data_drop\";\n    OperatorCode[OperatorCode[\"memory_copy\"] = 64522] = \"memory_copy\";\n    OperatorCode[OperatorCode[\"memory_fill\"] = 64523] = \"memory_fill\";\n    OperatorCode[OperatorCode[\"table_init\"] = 64524] = \"table_init\";\n    OperatorCode[OperatorCode[\"elem_drop\"] = 64525] = \"elem_drop\";\n    OperatorCode[OperatorCode[\"table_copy\"] = 64526] = \"table_copy\";\n    OperatorCode[OperatorCode[\"table_grow\"] = 64527] = \"table_grow\";\n    OperatorCode[OperatorCode[\"table_size\"] = 64528] = \"table_size\";\n    OperatorCode[OperatorCode[\"table_fill\"] = 64529] = \"table_fill\";\n    OperatorCode[OperatorCode[\"table_get\"] = 37] = \"table_get\";\n    OperatorCode[OperatorCode[\"table_set\"] = 38] = \"table_set\";\n    OperatorCode[OperatorCode[\"ref_null\"] = 208] = \"ref_null\";\n    OperatorCode[OperatorCode[\"ref_is_null\"] = 209] = \"ref_is_null\";\n    OperatorCode[OperatorCode[\"ref_func\"] = 210] = \"ref_func\";\n    OperatorCode[OperatorCode[\"ref_as_non_null\"] = 211] = \"ref_as_non_null\";\n    OperatorCode[OperatorCode[\"br_on_null\"] = 212] = \"br_on_null\";\n    OperatorCode[OperatorCode[\"ref_eq\"] = 213] = \"ref_eq\";\n    OperatorCode[OperatorCode[\"br_on_non_null\"] = 214] = \"br_on_non_null\";\n    OperatorCode[OperatorCode[\"atomic_notify\"] = 65024] = \"atomic_notify\";\n    OperatorCode[OperatorCode[\"i32_atomic_wait\"] = 65025] = \"i32_atomic_wait\";\n    OperatorCode[OperatorCode[\"i64_atomic_wait\"] = 65026] = \"i64_atomic_wait\";\n    OperatorCode[OperatorCode[\"atomic_fence\"] = 65027] = \"atomic_fence\";\n    OperatorCode[OperatorCode[\"i32_atomic_load\"] = 65040] = \"i32_atomic_load\";\n    OperatorCode[OperatorCode[\"i64_atomic_load\"] = 65041] = \"i64_atomic_load\";\n    OperatorCode[OperatorCode[\"i32_atomic_load8_u\"] = 65042] = \"i32_atomic_load8_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_load16_u\"] = 65043] = \"i32_atomic_load16_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_load8_u\"] = 65044] = \"i64_atomic_load8_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_load16_u\"] = 65045] = \"i64_atomic_load16_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_load32_u\"] = 65046] = \"i64_atomic_load32_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_store\"] = 65047] = \"i32_atomic_store\";\n    OperatorCode[OperatorCode[\"i64_atomic_store\"] = 65048] = \"i64_atomic_store\";\n    OperatorCode[OperatorCode[\"i32_atomic_store8\"] = 65049] = \"i32_atomic_store8\";\n    OperatorCode[OperatorCode[\"i32_atomic_store16\"] = 65050] = \"i32_atomic_store16\";\n    OperatorCode[OperatorCode[\"i64_atomic_store8\"] = 65051] = \"i64_atomic_store8\";\n    OperatorCode[OperatorCode[\"i64_atomic_store16\"] = 65052] = \"i64_atomic_store16\";\n    OperatorCode[OperatorCode[\"i64_atomic_store32\"] = 65053] = \"i64_atomic_store32\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw_add\"] = 65054] = \"i32_atomic_rmw_add\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw_add\"] = 65055] = \"i64_atomic_rmw_add\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw8_add_u\"] = 65056] = \"i32_atomic_rmw8_add_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw16_add_u\"] = 65057] = \"i32_atomic_rmw16_add_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw8_add_u\"] = 65058] = \"i64_atomic_rmw8_add_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw16_add_u\"] = 65059] = \"i64_atomic_rmw16_add_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw32_add_u\"] = 65060] = \"i64_atomic_rmw32_add_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw_sub\"] = 65061] = \"i32_atomic_rmw_sub\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw_sub\"] = 65062] = \"i64_atomic_rmw_sub\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw8_sub_u\"] = 65063] = \"i32_atomic_rmw8_sub_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw16_sub_u\"] = 65064] = \"i32_atomic_rmw16_sub_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw8_sub_u\"] = 65065] = \"i64_atomic_rmw8_sub_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw16_sub_u\"] = 65066] = \"i64_atomic_rmw16_sub_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw32_sub_u\"] = 65067] = \"i64_atomic_rmw32_sub_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw_and\"] = 65068] = \"i32_atomic_rmw_and\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw_and\"] = 65069] = \"i64_atomic_rmw_and\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw8_and_u\"] = 65070] = \"i32_atomic_rmw8_and_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw16_and_u\"] = 65071] = \"i32_atomic_rmw16_and_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw8_and_u\"] = 65072] = \"i64_atomic_rmw8_and_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw16_and_u\"] = 65073] = \"i64_atomic_rmw16_and_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw32_and_u\"] = 65074] = \"i64_atomic_rmw32_and_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw_or\"] = 65075] = \"i32_atomic_rmw_or\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw_or\"] = 65076] = \"i64_atomic_rmw_or\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw8_or_u\"] = 65077] = \"i32_atomic_rmw8_or_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw16_or_u\"] = 65078] = \"i32_atomic_rmw16_or_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw8_or_u\"] = 65079] = \"i64_atomic_rmw8_or_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw16_or_u\"] = 65080] = \"i64_atomic_rmw16_or_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw32_or_u\"] = 65081] = \"i64_atomic_rmw32_or_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw_xor\"] = 65082] = \"i32_atomic_rmw_xor\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw_xor\"] = 65083] = \"i64_atomic_rmw_xor\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw8_xor_u\"] = 65084] = \"i32_atomic_rmw8_xor_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw16_xor_u\"] = 65085] = \"i32_atomic_rmw16_xor_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw8_xor_u\"] = 65086] = \"i64_atomic_rmw8_xor_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw16_xor_u\"] = 65087] = \"i64_atomic_rmw16_xor_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw32_xor_u\"] = 65088] = \"i64_atomic_rmw32_xor_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw_xchg\"] = 65089] = \"i32_atomic_rmw_xchg\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw_xchg\"] = 65090] = \"i64_atomic_rmw_xchg\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw8_xchg_u\"] = 65091] = \"i32_atomic_rmw8_xchg_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw16_xchg_u\"] = 65092] = \"i32_atomic_rmw16_xchg_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw8_xchg_u\"] = 65093] = \"i64_atomic_rmw8_xchg_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw16_xchg_u\"] = 65094] = \"i64_atomic_rmw16_xchg_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw32_xchg_u\"] = 65095] = \"i64_atomic_rmw32_xchg_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw_cmpxchg\"] = 65096] = \"i32_atomic_rmw_cmpxchg\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw_cmpxchg\"] = 65097] = \"i64_atomic_rmw_cmpxchg\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw8_cmpxchg_u\"] = 65098] = \"i32_atomic_rmw8_cmpxchg_u\";\n    OperatorCode[OperatorCode[\"i32_atomic_rmw16_cmpxchg_u\"] = 65099] = \"i32_atomic_rmw16_cmpxchg_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw8_cmpxchg_u\"] = 65100] = \"i64_atomic_rmw8_cmpxchg_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw16_cmpxchg_u\"] = 65101] = \"i64_atomic_rmw16_cmpxchg_u\";\n    OperatorCode[OperatorCode[\"i64_atomic_rmw32_cmpxchg_u\"] = 65102] = \"i64_atomic_rmw32_cmpxchg_u\";\n    OperatorCode[OperatorCode[\"v128_load\"] = 64768] = \"v128_load\";\n    OperatorCode[OperatorCode[\"i16x8_load8x8_s\"] = 64769] = \"i16x8_load8x8_s\";\n    OperatorCode[OperatorCode[\"i16x8_load8x8_u\"] = 64770] = \"i16x8_load8x8_u\";\n    OperatorCode[OperatorCode[\"i32x4_load16x4_s\"] = 64771] = \"i32x4_load16x4_s\";\n    OperatorCode[OperatorCode[\"i32x4_load16x4_u\"] = 64772] = \"i32x4_load16x4_u\";\n    OperatorCode[OperatorCode[\"i64x2_load32x2_s\"] = 64773] = \"i64x2_load32x2_s\";\n    OperatorCode[OperatorCode[\"i64x2_load32x2_u\"] = 64774] = \"i64x2_load32x2_u\";\n    OperatorCode[OperatorCode[\"v8x16_load_splat\"] = 64775] = \"v8x16_load_splat\";\n    OperatorCode[OperatorCode[\"v16x8_load_splat\"] = 64776] = \"v16x8_load_splat\";\n    OperatorCode[OperatorCode[\"v32x4_load_splat\"] = 64777] = \"v32x4_load_splat\";\n    OperatorCode[OperatorCode[\"v64x2_load_splat\"] = 64778] = \"v64x2_load_splat\";\n    OperatorCode[OperatorCode[\"v128_store\"] = 64779] = \"v128_store\";\n    OperatorCode[OperatorCode[\"v128_const\"] = 64780] = \"v128_const\";\n    OperatorCode[OperatorCode[\"i8x16_shuffle\"] = 64781] = \"i8x16_shuffle\";\n    OperatorCode[OperatorCode[\"i8x16_swizzle\"] = 64782] = \"i8x16_swizzle\";\n    OperatorCode[OperatorCode[\"i8x16_splat\"] = 64783] = \"i8x16_splat\";\n    OperatorCode[OperatorCode[\"i16x8_splat\"] = 64784] = \"i16x8_splat\";\n    OperatorCode[OperatorCode[\"i32x4_splat\"] = 64785] = \"i32x4_splat\";\n    OperatorCode[OperatorCode[\"i64x2_splat\"] = 64786] = \"i64x2_splat\";\n    OperatorCode[OperatorCode[\"f32x4_splat\"] = 64787] = \"f32x4_splat\";\n    OperatorCode[OperatorCode[\"f64x2_splat\"] = 64788] = \"f64x2_splat\";\n    OperatorCode[OperatorCode[\"i8x16_extract_lane_s\"] = 64789] = \"i8x16_extract_lane_s\";\n    OperatorCode[OperatorCode[\"i8x16_extract_lane_u\"] = 64790] = \"i8x16_extract_lane_u\";\n    OperatorCode[OperatorCode[\"i8x16_replace_lane\"] = 64791] = \"i8x16_replace_lane\";\n    OperatorCode[OperatorCode[\"i16x8_extract_lane_s\"] = 64792] = \"i16x8_extract_lane_s\";\n    OperatorCode[OperatorCode[\"i16x8_extract_lane_u\"] = 64793] = \"i16x8_extract_lane_u\";\n    OperatorCode[OperatorCode[\"i16x8_replace_lane\"] = 64794] = \"i16x8_replace_lane\";\n    OperatorCode[OperatorCode[\"i32x4_extract_lane\"] = 64795] = \"i32x4_extract_lane\";\n    OperatorCode[OperatorCode[\"i32x4_replace_lane\"] = 64796] = \"i32x4_replace_lane\";\n    OperatorCode[OperatorCode[\"i64x2_extract_lane\"] = 64797] = \"i64x2_extract_lane\";\n    OperatorCode[OperatorCode[\"i64x2_replace_lane\"] = 64798] = \"i64x2_replace_lane\";\n    OperatorCode[OperatorCode[\"f32x4_extract_lane\"] = 64799] = \"f32x4_extract_lane\";\n    OperatorCode[OperatorCode[\"f32x4_replace_lane\"] = 64800] = \"f32x4_replace_lane\";\n    OperatorCode[OperatorCode[\"f64x2_extract_lane\"] = 64801] = \"f64x2_extract_lane\";\n    OperatorCode[OperatorCode[\"f64x2_replace_lane\"] = 64802] = \"f64x2_replace_lane\";\n    OperatorCode[OperatorCode[\"i8x16_eq\"] = 64803] = \"i8x16_eq\";\n    OperatorCode[OperatorCode[\"i8x16_ne\"] = 64804] = \"i8x16_ne\";\n    OperatorCode[OperatorCode[\"i8x16_lt_s\"] = 64805] = \"i8x16_lt_s\";\n    OperatorCode[OperatorCode[\"i8x16_lt_u\"] = 64806] = \"i8x16_lt_u\";\n    OperatorCode[OperatorCode[\"i8x16_gt_s\"] = 64807] = \"i8x16_gt_s\";\n    OperatorCode[OperatorCode[\"i8x16_gt_u\"] = 64808] = \"i8x16_gt_u\";\n    OperatorCode[OperatorCode[\"i8x16_le_s\"] = 64809] = \"i8x16_le_s\";\n    OperatorCode[OperatorCode[\"i8x16_le_u\"] = 64810] = \"i8x16_le_u\";\n    OperatorCode[OperatorCode[\"i8x16_ge_s\"] = 64811] = \"i8x16_ge_s\";\n    OperatorCode[OperatorCode[\"i8x16_ge_u\"] = 64812] = \"i8x16_ge_u\";\n    OperatorCode[OperatorCode[\"i16x8_eq\"] = 64813] = \"i16x8_eq\";\n    OperatorCode[OperatorCode[\"i16x8_ne\"] = 64814] = \"i16x8_ne\";\n    OperatorCode[OperatorCode[\"i16x8_lt_s\"] = 64815] = \"i16x8_lt_s\";\n    OperatorCode[OperatorCode[\"i16x8_lt_u\"] = 64816] = \"i16x8_lt_u\";\n    OperatorCode[OperatorCode[\"i16x8_gt_s\"] = 64817] = \"i16x8_gt_s\";\n    OperatorCode[OperatorCode[\"i16x8_gt_u\"] = 64818] = \"i16x8_gt_u\";\n    OperatorCode[OperatorCode[\"i16x8_le_s\"] = 64819] = \"i16x8_le_s\";\n    OperatorCode[OperatorCode[\"i16x8_le_u\"] = 64820] = \"i16x8_le_u\";\n    OperatorCode[OperatorCode[\"i16x8_ge_s\"] = 64821] = \"i16x8_ge_s\";\n    OperatorCode[OperatorCode[\"i16x8_ge_u\"] = 64822] = \"i16x8_ge_u\";\n    OperatorCode[OperatorCode[\"i32x4_eq\"] = 64823] = \"i32x4_eq\";\n    OperatorCode[OperatorCode[\"i32x4_ne\"] = 64824] = \"i32x4_ne\";\n    OperatorCode[OperatorCode[\"i32x4_lt_s\"] = 64825] = \"i32x4_lt_s\";\n    OperatorCode[OperatorCode[\"i32x4_lt_u\"] = 64826] = \"i32x4_lt_u\";\n    OperatorCode[OperatorCode[\"i32x4_gt_s\"] = 64827] = \"i32x4_gt_s\";\n    OperatorCode[OperatorCode[\"i32x4_gt_u\"] = 64828] = \"i32x4_gt_u\";\n    OperatorCode[OperatorCode[\"i32x4_le_s\"] = 64829] = \"i32x4_le_s\";\n    OperatorCode[OperatorCode[\"i32x4_le_u\"] = 64830] = \"i32x4_le_u\";\n    OperatorCode[OperatorCode[\"i32x4_ge_s\"] = 64831] = \"i32x4_ge_s\";\n    OperatorCode[OperatorCode[\"i32x4_ge_u\"] = 64832] = \"i32x4_ge_u\";\n    OperatorCode[OperatorCode[\"f32x4_eq\"] = 64833] = \"f32x4_eq\";\n    OperatorCode[OperatorCode[\"f32x4_ne\"] = 64834] = \"f32x4_ne\";\n    OperatorCode[OperatorCode[\"f32x4_lt\"] = 64835] = \"f32x4_lt\";\n    OperatorCode[OperatorCode[\"f32x4_gt\"] = 64836] = \"f32x4_gt\";\n    OperatorCode[OperatorCode[\"f32x4_le\"] = 64837] = \"f32x4_le\";\n    OperatorCode[OperatorCode[\"f32x4_ge\"] = 64838] = \"f32x4_ge\";\n    OperatorCode[OperatorCode[\"f64x2_eq\"] = 64839] = \"f64x2_eq\";\n    OperatorCode[OperatorCode[\"f64x2_ne\"] = 64840] = \"f64x2_ne\";\n    OperatorCode[OperatorCode[\"f64x2_lt\"] = 64841] = \"f64x2_lt\";\n    OperatorCode[OperatorCode[\"f64x2_gt\"] = 64842] = \"f64x2_gt\";\n    OperatorCode[OperatorCode[\"f64x2_le\"] = 64843] = \"f64x2_le\";\n    OperatorCode[OperatorCode[\"f64x2_ge\"] = 64844] = \"f64x2_ge\";\n    OperatorCode[OperatorCode[\"v128_not\"] = 64845] = \"v128_not\";\n    OperatorCode[OperatorCode[\"v128_and\"] = 64846] = \"v128_and\";\n    OperatorCode[OperatorCode[\"v128_andnot\"] = 64847] = \"v128_andnot\";\n    OperatorCode[OperatorCode[\"v128_or\"] = 64848] = \"v128_or\";\n    OperatorCode[OperatorCode[\"v128_xor\"] = 64849] = \"v128_xor\";\n    OperatorCode[OperatorCode[\"v128_bitselect\"] = 64850] = \"v128_bitselect\";\n    OperatorCode[OperatorCode[\"v128_any_true\"] = 64851] = \"v128_any_true\";\n    OperatorCode[OperatorCode[\"v128_load8_lane\"] = 64852] = \"v128_load8_lane\";\n    OperatorCode[OperatorCode[\"v128_load16_lane\"] = 64853] = \"v128_load16_lane\";\n    OperatorCode[OperatorCode[\"v128_load32_lane\"] = 64854] = \"v128_load32_lane\";\n    OperatorCode[OperatorCode[\"v128_load64_lane\"] = 64855] = \"v128_load64_lane\";\n    OperatorCode[OperatorCode[\"v128_store8_lane\"] = 64856] = \"v128_store8_lane\";\n    OperatorCode[OperatorCode[\"v128_store16_lane\"] = 64857] = \"v128_store16_lane\";\n    OperatorCode[OperatorCode[\"v128_store32_lane\"] = 64858] = \"v128_store32_lane\";\n    OperatorCode[OperatorCode[\"v128_store64_lane\"] = 64859] = \"v128_store64_lane\";\n    OperatorCode[OperatorCode[\"v128_load32_zero\"] = 64860] = \"v128_load32_zero\";\n    OperatorCode[OperatorCode[\"v128_load64_zero\"] = 64861] = \"v128_load64_zero\";\n    OperatorCode[OperatorCode[\"f32x4_demote_f64x2_zero\"] = 64862] = \"f32x4_demote_f64x2_zero\";\n    OperatorCode[OperatorCode[\"f64x2_promote_low_f32x4\"] = 64863] = \"f64x2_promote_low_f32x4\";\n    OperatorCode[OperatorCode[\"i8x16_abs\"] = 64864] = \"i8x16_abs\";\n    OperatorCode[OperatorCode[\"i8x16_neg\"] = 64865] = \"i8x16_neg\";\n    OperatorCode[OperatorCode[\"i8x16_popcnt\"] = 64866] = \"i8x16_popcnt\";\n    OperatorCode[OperatorCode[\"i8x16_all_true\"] = 64867] = \"i8x16_all_true\";\n    OperatorCode[OperatorCode[\"i8x16_bitmask\"] = 64868] = \"i8x16_bitmask\";\n    OperatorCode[OperatorCode[\"i8x16_narrow_i16x8_s\"] = 64869] = \"i8x16_narrow_i16x8_s\";\n    OperatorCode[OperatorCode[\"i8x16_narrow_i16x8_u\"] = 64870] = \"i8x16_narrow_i16x8_u\";\n    OperatorCode[OperatorCode[\"f32x4_ceil\"] = 64871] = \"f32x4_ceil\";\n    OperatorCode[OperatorCode[\"f32x4_floor\"] = 64872] = \"f32x4_floor\";\n    OperatorCode[OperatorCode[\"f32x4_trunc\"] = 64873] = \"f32x4_trunc\";\n    OperatorCode[OperatorCode[\"f32x4_nearest\"] = 64874] = \"f32x4_nearest\";\n    OperatorCode[OperatorCode[\"i8x16_shl\"] = 64875] = \"i8x16_shl\";\n    OperatorCode[OperatorCode[\"i8x16_shr_s\"] = 64876] = \"i8x16_shr_s\";\n    OperatorCode[OperatorCode[\"i8x16_shr_u\"] = 64877] = \"i8x16_shr_u\";\n    OperatorCode[OperatorCode[\"i8x16_add\"] = 64878] = \"i8x16_add\";\n    OperatorCode[OperatorCode[\"i8x16_add_sat_s\"] = 64879] = \"i8x16_add_sat_s\";\n    OperatorCode[OperatorCode[\"i8x16_add_sat_u\"] = 64880] = \"i8x16_add_sat_u\";\n    OperatorCode[OperatorCode[\"i8x16_sub\"] = 64881] = \"i8x16_sub\";\n    OperatorCode[OperatorCode[\"i8x16_sub_sat_s\"] = 64882] = \"i8x16_sub_sat_s\";\n    OperatorCode[OperatorCode[\"i8x16_sub_sat_u\"] = 64883] = \"i8x16_sub_sat_u\";\n    OperatorCode[OperatorCode[\"f64x2_ceil\"] = 64884] = \"f64x2_ceil\";\n    OperatorCode[OperatorCode[\"f64x2_floor\"] = 64885] = \"f64x2_floor\";\n    OperatorCode[OperatorCode[\"i8x16_min_s\"] = 64886] = \"i8x16_min_s\";\n    OperatorCode[OperatorCode[\"i8x16_min_u\"] = 64887] = \"i8x16_min_u\";\n    OperatorCode[OperatorCode[\"i8x16_max_s\"] = 64888] = \"i8x16_max_s\";\n    OperatorCode[OperatorCode[\"i8x16_max_u\"] = 64889] = \"i8x16_max_u\";\n    OperatorCode[OperatorCode[\"f64x2_trunc\"] = 64890] = \"f64x2_trunc\";\n    OperatorCode[OperatorCode[\"i8x16_avgr_u\"] = 64891] = \"i8x16_avgr_u\";\n    OperatorCode[OperatorCode[\"i16x8_extadd_pairwise_i8x16_s\"] = 64892] = \"i16x8_extadd_pairwise_i8x16_s\";\n    OperatorCode[OperatorCode[\"i16x8_extadd_pairwise_i8x16_u\"] = 64893] = \"i16x8_extadd_pairwise_i8x16_u\";\n    OperatorCode[OperatorCode[\"i32x4_extadd_pairwise_i16x8_s\"] = 64894] = \"i32x4_extadd_pairwise_i16x8_s\";\n    OperatorCode[OperatorCode[\"i32x4_extadd_pairwise_i16x8_u\"] = 64895] = \"i32x4_extadd_pairwise_i16x8_u\";\n    OperatorCode[OperatorCode[\"i16x8_abs\"] = 64896] = \"i16x8_abs\";\n    OperatorCode[OperatorCode[\"i16x8_neg\"] = 64897] = \"i16x8_neg\";\n    OperatorCode[OperatorCode[\"i16x8_q15mulr_sat_s\"] = 64898] = \"i16x8_q15mulr_sat_s\";\n    OperatorCode[OperatorCode[\"i16x8_all_true\"] = 64899] = \"i16x8_all_true\";\n    OperatorCode[OperatorCode[\"i16x8_bitmask\"] = 64900] = \"i16x8_bitmask\";\n    OperatorCode[OperatorCode[\"i16x8_narrow_i32x4_s\"] = 64901] = \"i16x8_narrow_i32x4_s\";\n    OperatorCode[OperatorCode[\"i16x8_narrow_i32x4_u\"] = 64902] = \"i16x8_narrow_i32x4_u\";\n    OperatorCode[OperatorCode[\"i16x8_extend_low_i8x16_s\"] = 64903] = \"i16x8_extend_low_i8x16_s\";\n    OperatorCode[OperatorCode[\"i16x8_extend_high_i8x16_s\"] = 64904] = \"i16x8_extend_high_i8x16_s\";\n    OperatorCode[OperatorCode[\"i16x8_extend_low_i8x16_u\"] = 64905] = \"i16x8_extend_low_i8x16_u\";\n    OperatorCode[OperatorCode[\"i16x8_extend_high_i8x16_u\"] = 64906] = \"i16x8_extend_high_i8x16_u\";\n    OperatorCode[OperatorCode[\"i16x8_shl\"] = 64907] = \"i16x8_shl\";\n    OperatorCode[OperatorCode[\"i16x8_shr_s\"] = 64908] = \"i16x8_shr_s\";\n    OperatorCode[OperatorCode[\"i16x8_shr_u\"] = 64909] = \"i16x8_shr_u\";\n    OperatorCode[OperatorCode[\"i16x8_add\"] = 64910] = \"i16x8_add\";\n    OperatorCode[OperatorCode[\"i16x8_add_sat_s\"] = 64911] = \"i16x8_add_sat_s\";\n    OperatorCode[OperatorCode[\"i16x8_add_sat_u\"] = 64912] = \"i16x8_add_sat_u\";\n    OperatorCode[OperatorCode[\"i16x8_sub\"] = 64913] = \"i16x8_sub\";\n    OperatorCode[OperatorCode[\"i16x8_sub_sat_s\"] = 64914] = \"i16x8_sub_sat_s\";\n    OperatorCode[OperatorCode[\"i16x8_sub_sat_u\"] = 64915] = \"i16x8_sub_sat_u\";\n    OperatorCode[OperatorCode[\"f64x2_nearest\"] = 64916] = \"f64x2_nearest\";\n    OperatorCode[OperatorCode[\"i16x8_mul\"] = 64917] = \"i16x8_mul\";\n    OperatorCode[OperatorCode[\"i16x8_min_s\"] = 64918] = \"i16x8_min_s\";\n    OperatorCode[OperatorCode[\"i16x8_min_u\"] = 64919] = \"i16x8_min_u\";\n    OperatorCode[OperatorCode[\"i16x8_max_s\"] = 64920] = \"i16x8_max_s\";\n    OperatorCode[OperatorCode[\"i16x8_max_u\"] = 64921] = \"i16x8_max_u\";\n    OperatorCode[OperatorCode[\"i16x8_avgr_u\"] = 64923] = \"i16x8_avgr_u\";\n    OperatorCode[OperatorCode[\"i16x8_extmul_low_i8x16_s\"] = 64924] = \"i16x8_extmul_low_i8x16_s\";\n    OperatorCode[OperatorCode[\"i16x8_extmul_high_i8x16_s\"] = 64925] = \"i16x8_extmul_high_i8x16_s\";\n    OperatorCode[OperatorCode[\"i16x8_extmul_low_i8x16_u\"] = 64926] = \"i16x8_extmul_low_i8x16_u\";\n    OperatorCode[OperatorCode[\"i16x8_extmul_high_i8x16_u\"] = 64927] = \"i16x8_extmul_high_i8x16_u\";\n    OperatorCode[OperatorCode[\"i32x4_abs\"] = 64928] = \"i32x4_abs\";\n    OperatorCode[OperatorCode[\"i32x4_neg\"] = 64929] = \"i32x4_neg\";\n    OperatorCode[OperatorCode[\"i32x4_all_true\"] = 64931] = \"i32x4_all_true\";\n    OperatorCode[OperatorCode[\"i32x4_bitmask\"] = 64932] = \"i32x4_bitmask\";\n    OperatorCode[OperatorCode[\"i32x4_extend_low_i16x8_s\"] = 64935] = \"i32x4_extend_low_i16x8_s\";\n    OperatorCode[OperatorCode[\"i32x4_extend_high_i16x8_s\"] = 64936] = \"i32x4_extend_high_i16x8_s\";\n    OperatorCode[OperatorCode[\"i32x4_extend_low_i16x8_u\"] = 64937] = \"i32x4_extend_low_i16x8_u\";\n    OperatorCode[OperatorCode[\"i32x4_extend_high_i16x8_u\"] = 64938] = \"i32x4_extend_high_i16x8_u\";\n    OperatorCode[OperatorCode[\"i32x4_shl\"] = 64939] = \"i32x4_shl\";\n    OperatorCode[OperatorCode[\"i32x4_shr_s\"] = 64940] = \"i32x4_shr_s\";\n    OperatorCode[OperatorCode[\"i32x4_shr_u\"] = 64941] = \"i32x4_shr_u\";\n    OperatorCode[OperatorCode[\"i32x4_add\"] = 64942] = \"i32x4_add\";\n    OperatorCode[OperatorCode[\"i32x4_sub\"] = 64945] = \"i32x4_sub\";\n    OperatorCode[OperatorCode[\"i32x4_mul\"] = 64949] = \"i32x4_mul\";\n    OperatorCode[OperatorCode[\"i32x4_min_s\"] = 64950] = \"i32x4_min_s\";\n    OperatorCode[OperatorCode[\"i32x4_min_u\"] = 64951] = \"i32x4_min_u\";\n    OperatorCode[OperatorCode[\"i32x4_max_s\"] = 64952] = \"i32x4_max_s\";\n    OperatorCode[OperatorCode[\"i32x4_max_u\"] = 64953] = \"i32x4_max_u\";\n    OperatorCode[OperatorCode[\"i32x4_dot_i16x8_s\"] = 64954] = \"i32x4_dot_i16x8_s\";\n    OperatorCode[OperatorCode[\"i32x4_extmul_low_i16x8_s\"] = 64956] = \"i32x4_extmul_low_i16x8_s\";\n    OperatorCode[OperatorCode[\"i32x4_extmul_high_i16x8_s\"] = 64957] = \"i32x4_extmul_high_i16x8_s\";\n    OperatorCode[OperatorCode[\"i32x4_extmul_low_i16x8_u\"] = 64958] = \"i32x4_extmul_low_i16x8_u\";\n    OperatorCode[OperatorCode[\"i32x4_extmul_high_i16x8_u\"] = 64959] = \"i32x4_extmul_high_i16x8_u\";\n    OperatorCode[OperatorCode[\"i64x2_abs\"] = 64960] = \"i64x2_abs\";\n    OperatorCode[OperatorCode[\"i64x2_neg\"] = 64961] = \"i64x2_neg\";\n    OperatorCode[OperatorCode[\"i64x2_all_true\"] = 64963] = \"i64x2_all_true\";\n    OperatorCode[OperatorCode[\"i64x2_bitmask\"] = 64964] = \"i64x2_bitmask\";\n    OperatorCode[OperatorCode[\"i64x2_extend_low_i32x4_s\"] = 64967] = \"i64x2_extend_low_i32x4_s\";\n    OperatorCode[OperatorCode[\"i64x2_extend_high_i32x4_s\"] = 64968] = \"i64x2_extend_high_i32x4_s\";\n    OperatorCode[OperatorCode[\"i64x2_extend_low_i32x4_u\"] = 64969] = \"i64x2_extend_low_i32x4_u\";\n    OperatorCode[OperatorCode[\"i64x2_extend_high_i32x4_u\"] = 64970] = \"i64x2_extend_high_i32x4_u\";\n    OperatorCode[OperatorCode[\"i64x2_shl\"] = 64971] = \"i64x2_shl\";\n    OperatorCode[OperatorCode[\"i64x2_shr_s\"] = 64972] = \"i64x2_shr_s\";\n    OperatorCode[OperatorCode[\"i64x2_shr_u\"] = 64973] = \"i64x2_shr_u\";\n    OperatorCode[OperatorCode[\"i64x2_add\"] = 64974] = \"i64x2_add\";\n    OperatorCode[OperatorCode[\"i64x2_sub\"] = 64977] = \"i64x2_sub\";\n    OperatorCode[OperatorCode[\"i64x2_mul\"] = 64981] = \"i64x2_mul\";\n    OperatorCode[OperatorCode[\"i64x2_eq\"] = 64982] = \"i64x2_eq\";\n    OperatorCode[OperatorCode[\"i64x2_ne\"] = 64983] = \"i64x2_ne\";\n    OperatorCode[OperatorCode[\"i64x2_lt_s\"] = 64984] = \"i64x2_lt_s\";\n    OperatorCode[OperatorCode[\"i64x2_gt_s\"] = 64985] = \"i64x2_gt_s\";\n    OperatorCode[OperatorCode[\"i64x2_le_s\"] = 64986] = \"i64x2_le_s\";\n    OperatorCode[OperatorCode[\"i64x2_ge_s\"] = 64987] = \"i64x2_ge_s\";\n    OperatorCode[OperatorCode[\"i64x2_extmul_low_i32x4_s\"] = 64988] = \"i64x2_extmul_low_i32x4_s\";\n    OperatorCode[OperatorCode[\"i64x2_extmul_high_i32x4_s\"] = 64989] = \"i64x2_extmul_high_i32x4_s\";\n    OperatorCode[OperatorCode[\"i64x2_extmul_low_i32x4_u\"] = 64990] = \"i64x2_extmul_low_i32x4_u\";\n    OperatorCode[OperatorCode[\"i64x2_extmul_high_i32x4_u\"] = 64991] = \"i64x2_extmul_high_i32x4_u\";\n    OperatorCode[OperatorCode[\"f32x4_abs\"] = 64992] = \"f32x4_abs\";\n    OperatorCode[OperatorCode[\"f32x4_neg\"] = 64993] = \"f32x4_neg\";\n    OperatorCode[OperatorCode[\"f32x4_sqrt\"] = 64995] = \"f32x4_sqrt\";\n    OperatorCode[OperatorCode[\"f32x4_add\"] = 64996] = \"f32x4_add\";\n    OperatorCode[OperatorCode[\"f32x4_sub\"] = 64997] = \"f32x4_sub\";\n    OperatorCode[OperatorCode[\"f32x4_mul\"] = 64998] = \"f32x4_mul\";\n    OperatorCode[OperatorCode[\"f32x4_div\"] = 64999] = \"f32x4_div\";\n    OperatorCode[OperatorCode[\"f32x4_min\"] = 65000] = \"f32x4_min\";\n    OperatorCode[OperatorCode[\"f32x4_max\"] = 65001] = \"f32x4_max\";\n    OperatorCode[OperatorCode[\"f32x4_pmin\"] = 65002] = \"f32x4_pmin\";\n    OperatorCode[OperatorCode[\"f32x4_pmax\"] = 65003] = \"f32x4_pmax\";\n    OperatorCode[OperatorCode[\"f64x2_abs\"] = 65004] = \"f64x2_abs\";\n    OperatorCode[OperatorCode[\"f64x2_neg\"] = 65005] = \"f64x2_neg\";\n    OperatorCode[OperatorCode[\"f64x2_sqrt\"] = 65007] = \"f64x2_sqrt\";\n    OperatorCode[OperatorCode[\"f64x2_add\"] = 65008] = \"f64x2_add\";\n    OperatorCode[OperatorCode[\"f64x2_sub\"] = 65009] = \"f64x2_sub\";\n    OperatorCode[OperatorCode[\"f64x2_mul\"] = 65010] = \"f64x2_mul\";\n    OperatorCode[OperatorCode[\"f64x2_div\"] = 65011] = \"f64x2_div\";\n    OperatorCode[OperatorCode[\"f64x2_min\"] = 65012] = \"f64x2_min\";\n    OperatorCode[OperatorCode[\"f64x2_max\"] = 65013] = \"f64x2_max\";\n    OperatorCode[OperatorCode[\"f64x2_pmin\"] = 65014] = \"f64x2_pmin\";\n    OperatorCode[OperatorCode[\"f64x2_pmax\"] = 65015] = \"f64x2_pmax\";\n    OperatorCode[OperatorCode[\"i32x4_trunc_sat_f32x4_s\"] = 65016] = \"i32x4_trunc_sat_f32x4_s\";\n    OperatorCode[OperatorCode[\"i32x4_trunc_sat_f32x4_u\"] = 65017] = \"i32x4_trunc_sat_f32x4_u\";\n    OperatorCode[OperatorCode[\"f32x4_convert_i32x4_s\"] = 65018] = \"f32x4_convert_i32x4_s\";\n    OperatorCode[OperatorCode[\"f32x4_convert_i32x4_u\"] = 65019] = \"f32x4_convert_i32x4_u\";\n    OperatorCode[OperatorCode[\"i32x4_trunc_sat_f64x2_s_zero\"] = 65020] = \"i32x4_trunc_sat_f64x2_s_zero\";\n    OperatorCode[OperatorCode[\"i32x4_trunc_sat_f64x2_u_zero\"] = 65021] = \"i32x4_trunc_sat_f64x2_u_zero\";\n    OperatorCode[OperatorCode[\"f64x2_convert_low_i32x4_s\"] = 65022] = \"f64x2_convert_low_i32x4_s\";\n    OperatorCode[OperatorCode[\"f64x2_convert_low_i32x4_u\"] = 65023] = \"f64x2_convert_low_i32x4_u\";\n    // GC proposal.\n    OperatorCode[OperatorCode[\"struct_new_with_rtt\"] = 64257] = \"struct_new_with_rtt\";\n    OperatorCode[OperatorCode[\"struct_new_default_with_rtt\"] = 64258] = \"struct_new_default_with_rtt\";\n    OperatorCode[OperatorCode[\"struct_get\"] = 64259] = \"struct_get\";\n    OperatorCode[OperatorCode[\"struct_get_s\"] = 64260] = \"struct_get_s\";\n    OperatorCode[OperatorCode[\"struct_get_u\"] = 64261] = \"struct_get_u\";\n    OperatorCode[OperatorCode[\"struct_set\"] = 64262] = \"struct_set\";\n    OperatorCode[OperatorCode[\"struct_new\"] = 64263] = \"struct_new\";\n    OperatorCode[OperatorCode[\"struct_new_default\"] = 64264] = \"struct_new_default\";\n    OperatorCode[OperatorCode[\"array_new_with_rtt\"] = 64273] = \"array_new_with_rtt\";\n    OperatorCode[OperatorCode[\"array_new_default_with_rtt\"] = 64274] = \"array_new_default_with_rtt\";\n    OperatorCode[OperatorCode[\"array_get\"] = 64275] = \"array_get\";\n    OperatorCode[OperatorCode[\"array_get_s\"] = 64276] = \"array_get_s\";\n    OperatorCode[OperatorCode[\"array_get_u\"] = 64277] = \"array_get_u\";\n    OperatorCode[OperatorCode[\"array_set\"] = 64278] = \"array_set\";\n    OperatorCode[OperatorCode[\"array_len\"] = 64279] = \"array_len\";\n    OperatorCode[OperatorCode[\"array_copy\"] = 64280] = \"array_copy\";\n    OperatorCode[OperatorCode[\"array_init\"] = 64281] = \"array_init\";\n    OperatorCode[OperatorCode[\"array_init_static\"] = 64282] = \"array_init_static\";\n    OperatorCode[OperatorCode[\"array_new\"] = 64283] = \"array_new\";\n    OperatorCode[OperatorCode[\"array_new_default\"] = 64284] = \"array_new_default\";\n    OperatorCode[OperatorCode[\"i31_new\"] = 64288] = \"i31_new\";\n    OperatorCode[OperatorCode[\"i31_get_s\"] = 64289] = \"i31_get_s\";\n    OperatorCode[OperatorCode[\"i31_get_u\"] = 64290] = \"i31_get_u\";\n    OperatorCode[OperatorCode[\"rtt_canon\"] = 64304] = \"rtt_canon\";\n    OperatorCode[OperatorCode[\"rtt_sub\"] = 64305] = \"rtt_sub\";\n    OperatorCode[OperatorCode[\"rtt_fresh_sub\"] = 64306] = \"rtt_fresh_sub\";\n    OperatorCode[OperatorCode[\"ref_test\"] = 64320] = \"ref_test\";\n    OperatorCode[OperatorCode[\"ref_test_static\"] = 64324] = \"ref_test_static\";\n    OperatorCode[OperatorCode[\"ref_cast\"] = 64321] = \"ref_cast\";\n    OperatorCode[OperatorCode[\"ref_cast_static\"] = 64325] = \"ref_cast_static\";\n    OperatorCode[OperatorCode[\"br_on_cast\"] = 64322] = \"br_on_cast\";\n    OperatorCode[OperatorCode[\"br_on_cast_static\"] = 64326] = \"br_on_cast_static\";\n    OperatorCode[OperatorCode[\"br_on_cast_fail\"] = 64323] = \"br_on_cast_fail\";\n    OperatorCode[OperatorCode[\"br_on_cast_static_fail\"] = 64327] = \"br_on_cast_static_fail\";\n    OperatorCode[OperatorCode[\"ref_is_func\"] = 64336] = \"ref_is_func\";\n    OperatorCode[OperatorCode[\"ref_is_data\"] = 64337] = \"ref_is_data\";\n    OperatorCode[OperatorCode[\"ref_is_i31\"] = 64338] = \"ref_is_i31\";\n    OperatorCode[OperatorCode[\"ref_as_func\"] = 64344] = \"ref_as_func\";\n    OperatorCode[OperatorCode[\"ref_as_data\"] = 64345] = \"ref_as_data\";\n    OperatorCode[OperatorCode[\"ref_as_i31\"] = 64346] = \"ref_as_i31\";\n    OperatorCode[OperatorCode[\"br_on_func\"] = 64352] = \"br_on_func\";\n    OperatorCode[OperatorCode[\"br_on_data\"] = 64353] = \"br_on_data\";\n    OperatorCode[OperatorCode[\"br_on_i31\"] = 64354] = \"br_on_i31\";\n    OperatorCode[OperatorCode[\"br_on_non_func\"] = 64355] = \"br_on_non_func\";\n    OperatorCode[OperatorCode[\"br_on_non_data\"] = 64356] = \"br_on_non_data\";\n    OperatorCode[OperatorCode[\"br_on_non_i31\"] = 64357] = \"br_on_non_i31\";\n})(OperatorCode || (OperatorCode = {}));\nexport const OperatorCodeNames = [\n    \"unreachable\",\n    \"nop\",\n    \"block\",\n    \"loop\",\n    \"if\",\n    \"else\",\n    \"try\",\n    \"catch\",\n    \"throw\",\n    \"rethrow\",\n    \"unwind\",\n    \"end\",\n    \"br\",\n    \"br_if\",\n    \"br_table\",\n    \"return\",\n    \"call\",\n    \"call_indirect\",\n    \"return_call\",\n    \"return_call_indirect\",\n    \"call_ref\",\n    \"return_call_ref\",\n    undefined,\n    \"let\",\n    \"delegate\",\n    \"catch_all\",\n    \"drop\",\n    \"select\",\n    \"select\",\n    undefined,\n    undefined,\n    undefined,\n    \"local.get\",\n    \"local.set\",\n    \"local.tee\",\n    \"global.get\",\n    \"global.set\",\n    \"table.get\",\n    \"table.set\",\n    undefined,\n    \"i32.load\",\n    \"i64.load\",\n    \"f32.load\",\n    \"f64.load\",\n    \"i32.load8_s\",\n    \"i32.load8_u\",\n    \"i32.load16_s\",\n    \"i32.load16_u\",\n    \"i64.load8_s\",\n    \"i64.load8_u\",\n    \"i64.load16_s\",\n    \"i64.load16_u\",\n    \"i64.load32_s\",\n    \"i64.load32_u\",\n    \"i32.store\",\n    \"i64.store\",\n    \"f32.store\",\n    \"f64.store\",\n    \"i32.store8\",\n    \"i32.store16\",\n    \"i64.store8\",\n    \"i64.store16\",\n    \"i64.store32\",\n    \"current_memory\",\n    \"memory.grow\",\n    \"i32.const\",\n    \"i64.const\",\n    \"f32.const\",\n    \"f64.const\",\n    \"i32.eqz\",\n    \"i32.eq\",\n    \"i32.ne\",\n    \"i32.lt_s\",\n    \"i32.lt_u\",\n    \"i32.gt_s\",\n    \"i32.gt_u\",\n    \"i32.le_s\",\n    \"i32.le_u\",\n    \"i32.ge_s\",\n    \"i32.ge_u\",\n    \"i64.eqz\",\n    \"i64.eq\",\n    \"i64.ne\",\n    \"i64.lt_s\",\n    \"i64.lt_u\",\n    \"i64.gt_s\",\n    \"i64.gt_u\",\n    \"i64.le_s\",\n    \"i64.le_u\",\n    \"i64.ge_s\",\n    \"i64.ge_u\",\n    \"f32.eq\",\n    \"f32.ne\",\n    \"f32.lt\",\n    \"f32.gt\",\n    \"f32.le\",\n    \"f32.ge\",\n    \"f64.eq\",\n    \"f64.ne\",\n    \"f64.lt\",\n    \"f64.gt\",\n    \"f64.le\",\n    \"f64.ge\",\n    \"i32.clz\",\n    \"i32.ctz\",\n    \"i32.popcnt\",\n    \"i32.add\",\n    \"i32.sub\",\n    \"i32.mul\",\n    \"i32.div_s\",\n    \"i32.div_u\",\n    \"i32.rem_s\",\n    \"i32.rem_u\",\n    \"i32.and\",\n    \"i32.or\",\n    \"i32.xor\",\n    \"i32.shl\",\n    \"i32.shr_s\",\n    \"i32.shr_u\",\n    \"i32.rotl\",\n    \"i32.rotr\",\n    \"i64.clz\",\n    \"i64.ctz\",\n    \"i64.popcnt\",\n    \"i64.add\",\n    \"i64.sub\",\n    \"i64.mul\",\n    \"i64.div_s\",\n    \"i64.div_u\",\n    \"i64.rem_s\",\n    \"i64.rem_u\",\n    \"i64.and\",\n    \"i64.or\",\n    \"i64.xor\",\n    \"i64.shl\",\n    \"i64.shr_s\",\n    \"i64.shr_u\",\n    \"i64.rotl\",\n    \"i64.rotr\",\n    \"f32.abs\",\n    \"f32.neg\",\n    \"f32.ceil\",\n    \"f32.floor\",\n    \"f32.trunc\",\n    \"f32.nearest\",\n    \"f32.sqrt\",\n    \"f32.add\",\n    \"f32.sub\",\n    \"f32.mul\",\n    \"f32.div\",\n    \"f32.min\",\n    \"f32.max\",\n    \"f32.copysign\",\n    \"f64.abs\",\n    \"f64.neg\",\n    \"f64.ceil\",\n    \"f64.floor\",\n    \"f64.trunc\",\n    \"f64.nearest\",\n    \"f64.sqrt\",\n    \"f64.add\",\n    \"f64.sub\",\n    \"f64.mul\",\n    \"f64.div\",\n    \"f64.min\",\n    \"f64.max\",\n    \"f64.copysign\",\n    \"i32.wrap_i64\",\n    \"i32.trunc_f32_s\",\n    \"i32.trunc_f32_u\",\n    \"i32.trunc_f64_s\",\n    \"i32.trunc_f64_u\",\n    \"i64.extend_i32_s\",\n    \"i64.extend_i32_u\",\n    \"i64.trunc_f32_s\",\n    \"i64.trunc_f32_u\",\n    \"i64.trunc_f64_s\",\n    \"i64.trunc_f64_u\",\n    \"f32.convert_i32_s\",\n    \"f32.convert_i32_u\",\n    \"f32.convert_i64_s\",\n    \"f32.convert_i64_u\",\n    \"f32.demote_f64\",\n    \"f64.convert_i32_s\",\n    \"f64.convert_i32_u\",\n    \"f64.convert_i64_s\",\n    \"f64.convert_i64_u\",\n    \"f64.promote_f32\",\n    \"i32.reinterpret_f32\",\n    \"i64.reinterpret_f64\",\n    \"f32.reinterpret_i32\",\n    \"f64.reinterpret_i64\",\n    \"i32.extend8_s\",\n    \"i32.extend16_s\",\n    \"i64.extend8_s\",\n    \"i64.extend16_s\",\n    \"i64.extend32_s\",\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    \"ref.null\",\n    \"ref.is_null\",\n    \"ref.func\",\n    \"ref.as_non_null\",\n    \"br_on_null\",\n    \"ref.eq\",\n    \"br_on_non_null\",\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n];\n[\n    \"i32.trunc_sat_f32_s\",\n    \"i32.trunc_sat_f32_u\",\n    \"i32.trunc_sat_f64_s\",\n    \"i32.trunc_sat_f64_u\",\n    \"i64.trunc_sat_f32_s\",\n    \"i64.trunc_sat_f32_u\",\n    \"i64.trunc_sat_f64_s\",\n    \"i64.trunc_sat_f64_u\",\n    \"memory.init\",\n    \"data.drop\",\n    \"memory.copy\",\n    \"memory.fill\",\n    \"table.init\",\n    \"elem.drop\",\n    \"table.copy\",\n    \"table.grow\",\n    \"table.size\",\n    \"table.fill\",\n].forEach((s, i) => {\n    OperatorCodeNames[0xfc00 | i] = s;\n});\n[\n    \"v128.load\",\n    \"i16x8.load8x8_s\",\n    \"i16x8.load8x8_u\",\n    \"i32x4.load16x4_s\",\n    \"i32x4.load16x4_u\",\n    \"i64x2.load32x2_s\",\n    \"i64x2.load32x2_u\",\n    \"v8x16.load_splat\",\n    \"v16x8.load_splat\",\n    \"v32x4.load_splat\",\n    \"v64x2.load_splat\",\n    \"v128.store\",\n    \"v128.const\",\n    \"i8x16.shuffle\",\n    \"i8x16.swizzle\",\n    \"i8x16.splat\",\n    \"i16x8.splat\",\n    \"i32x4.splat\",\n    \"i64x2.splat\",\n    \"f32x4.splat\",\n    \"f64x2.splat\",\n    \"i8x16.extract_lane_s\",\n    \"i8x16.extract_lane_u\",\n    \"i8x16.replace_lane\",\n    \"i16x8.extract_lane_s\",\n    \"i16x8.extract_lane_u\",\n    \"i16x8.replace_lane\",\n    \"i32x4.extract_lane\",\n    \"i32x4.replace_lane\",\n    \"i64x2.extract_lane\",\n    \"i64x2.replace_lane\",\n    \"f32x4.extract_lane\",\n    \"f32x4.replace_lane\",\n    \"f64x2.extract_lane\",\n    \"f64x2.replace_lane\",\n    \"i8x16.eq\",\n    \"i8x16.ne\",\n    \"i8x16.lt_s\",\n    \"i8x16.lt_u\",\n    \"i8x16.gt_s\",\n    \"i8x16.gt_u\",\n    \"i8x16.le_s\",\n    \"i8x16.le_u\",\n    \"i8x16.ge_s\",\n    \"i8x16.ge_u\",\n    \"i16x8.eq\",\n    \"i16x8.ne\",\n    \"i16x8.lt_s\",\n    \"i16x8.lt_u\",\n    \"i16x8.gt_s\",\n    \"i16x8.gt_u\",\n    \"i16x8.le_s\",\n    \"i16x8.le_u\",\n    \"i16x8.ge_s\",\n    \"i16x8.ge_u\",\n    \"i32x4.eq\",\n    \"i32x4.ne\",\n    \"i32x4.lt_s\",\n    \"i32x4.lt_u\",\n    \"i32x4.gt_s\",\n    \"i32x4.gt_u\",\n    \"i32x4.le_s\",\n    \"i32x4.le_u\",\n    \"i32x4.ge_s\",\n    \"i32x4.ge_u\",\n    \"f32x4.eq\",\n    \"f32x4.ne\",\n    \"f32x4.lt\",\n    \"f32x4.gt\",\n    \"f32x4.le\",\n    \"f32x4.ge\",\n    \"f64x2.eq\",\n    \"f64x2.ne\",\n    \"f64x2.lt\",\n    \"f64x2.gt\",\n    \"f64x2.le\",\n    \"f64x2.ge\",\n    \"v128.not\",\n    \"v128.and\",\n    \"v128.andnot\",\n    \"v128.or\",\n    \"v128.xor\",\n    \"v128.bitselect\",\n    \"v128.any_true\",\n    \"v128.load8_lane\",\n    \"v128.load16_lane\",\n    \"v128.load32_lane\",\n    \"v128.load64_lane\",\n    \"v128.store8_lane\",\n    \"v128.store16_lane\",\n    \"v128.store32_lane\",\n    \"v128.store64_lane\",\n    \"v128.load32_zero\",\n    \"v128.load64_zero\",\n    \"f32x4.demote_f64x2_zero\",\n    \"f64x2.promote_low_f32x4\",\n    \"i8x16.abs\",\n    \"i8x16.neg\",\n    \"i8x16_popcnt\",\n    \"i8x16.all_true\",\n    \"i8x16.bitmask\",\n    \"i8x16.narrow_i16x8_s\",\n    \"i8x16.narrow_i16x8_u\",\n    \"f32x4.ceil\",\n    \"f32x4.floor\",\n    \"f32x4.trunc\",\n    \"f32x4.nearest\",\n    \"i8x16.shl\",\n    \"i8x16.shr_s\",\n    \"i8x16.shr_u\",\n    \"i8x16.add\",\n    \"i8x16.add_sat_s\",\n    \"i8x16.add_sat_u\",\n    \"i8x16.sub\",\n    \"i8x16.sub_sat_s\",\n    \"i8x16.sub_sat_u\",\n    \"f64x2.ceil\",\n    \"f64x2.floor\",\n    \"i8x16.min_s\",\n    \"i8x16.min_u\",\n    \"i8x16.max_s\",\n    \"i8x16.max_u\",\n    \"f64x2.trunc\",\n    \"i8x16.avgr_u\",\n    \"i16x8.extadd_pairwise_i8x16_s\",\n    \"i16x8.extadd_pairwise_i8x16_u\",\n    \"i32x4.extadd_pairwise_i16x8_s\",\n    \"i32x4.extadd_pairwise_i16x8_u\",\n    \"i16x8.abs\",\n    \"i16x8.neg\",\n    \"i16x8.q15mulr_sat_s\",\n    \"i16x8.all_true\",\n    \"i16x8.bitmask\",\n    \"i16x8.narrow_i32x4_s\",\n    \"i16x8.narrow_i32x4_u\",\n    \"i16x8.extend_low_i8x16_s\",\n    \"i16x8.extend_high_i8x16_s\",\n    \"i16x8.extend_low_i8x16_u\",\n    \"i16x8.extend_high_i8x16_u\",\n    \"i16x8.shl\",\n    \"i16x8.shr_s\",\n    \"i16x8.shr_u\",\n    \"i16x8.add\",\n    \"i16x8.add_sat_s\",\n    \"i16x8.add_sat_u\",\n    \"i16x8.sub\",\n    \"i16x8.sub_sat_s\",\n    \"i16x8.sub_sat_u\",\n    \"f64x2.nearest\",\n    \"i16x8.mul\",\n    \"i16x8.min_s\",\n    \"i16x8.min_u\",\n    \"i16x8.max_s\",\n    \"i16x8.max_u\",\n    undefined,\n    \"i16x8.avgr_u\",\n    \"i16x8.extmul_low_i8x16_s\",\n    \"i16x8.extmul_high_i8x16_s\",\n    \"i16x8.extmul_low_i8x16_u\",\n    \"i16x8.extmul_high_i8x16_u\",\n    \"i32x4.abs\",\n    \"i32x4.neg\",\n    undefined,\n    \"i32x4.all_true\",\n    \"i32x4.bitmask\",\n    undefined,\n    undefined,\n    \"i32x4.extend_low_i16x8_s\",\n    \"i32x4.extend_high_i16x8_s\",\n    \"i32x4.extend_low_i16x8_u\",\n    \"i32x4.extend_high_i16x8_u\",\n    \"i32x4.shl\",\n    \"i32x4.shr_s\",\n    \"i32x4.shr_u\",\n    \"i32x4.add\",\n    undefined,\n    undefined,\n    \"i32x4.sub\",\n    undefined,\n    undefined,\n    undefined,\n    \"i32x4.mul\",\n    \"i32x4.min_s\",\n    \"i32x4.min_u\",\n    \"i32x4.max_s\",\n    \"i32x4.max_u\",\n    \"i32x4.dot_i16x8_s\",\n    undefined,\n    \"i32x4.extmul_low_i16x8_s\",\n    \"i32x4.extmul_high_i16x8_s\",\n    \"i32x4.extmul_low_i16x8_u\",\n    \"i32x4.extmul_high_i16x8_u\",\n    \"i64x2.abs\",\n    \"i64x2.neg\",\n    undefined,\n    \"i64x2.all_true\",\n    \"i64x2.bitmask\",\n    undefined,\n    undefined,\n    \"i64x2.extend_low_i32x4_s\",\n    \"i64x2.extend_high_i32x4_s\",\n    \"i64x2.extend_low_i32x4_u\",\n    \"i64x2.extend_high_i32x4_u\",\n    \"i64x2.shl\",\n    \"i64x2.shr_s\",\n    \"i64x2.shr_u\",\n    \"i64x2.add\",\n    undefined,\n    undefined,\n    \"i64x2.sub\",\n    undefined,\n    undefined,\n    undefined,\n    \"i64x2.mul\",\n    \"i64x2.eq\",\n    \"i64x2.ne\",\n    \"i64x2.lt_s\",\n    \"i64x2.gt_s\",\n    \"i64x2.le_s\",\n    \"i64x2.ge_s\",\n    \"i64x2.extmul_low_i32x4_s\",\n    \"i64x2.extmul_high_i32x4_s\",\n    \"i64x2.extmul_low_i32x4_u\",\n    \"i64x2.extmul_high_i32x4_u\",\n    \"f32x4.abs\",\n    \"f32x4.neg\",\n    undefined,\n    \"f32x4.sqrt\",\n    \"f32x4.add\",\n    \"f32x4.sub\",\n    \"f32x4.mul\",\n    \"f32x4.div\",\n    \"f32x4.min\",\n    \"f32x4.max\",\n    \"f32x4.pmin\",\n    \"f32x4.pmax\",\n    \"f64x2.abs\",\n    \"f64x2.neg\",\n    undefined,\n    \"f64x2.sqrt\",\n    \"f64x2.add\",\n    \"f64x2.sub\",\n    \"f64x2.mul\",\n    \"f64x2.div\",\n    \"f64x2.min\",\n    \"f64x2.max\",\n    \"f64x2.pmin\",\n    \"f64x2.pmax\",\n    \"i32x4.trunc_sat_f32x4_s\",\n    \"i32x4.trunc_sat_f32x4_u\",\n    \"f32x4.convert_i32x4_s\",\n    \"f32x4.convert_i32x4_u\",\n    \"i32x4.trunc_sat_f64x2_s_zero\",\n    \"i32x4.trunc_sat_f64x2_u_zero\",\n    \"f64x2.convert_low_i32x4_s\",\n    \"f64x2.convert_low_i32x4_u\",\n].forEach((s, i) => {\n    OperatorCodeNames[0xfd00 | i] = s;\n});\n[\n    \"atomic.notify\",\n    \"i32.atomic.wait\",\n    \"i64.atomic.wait\",\n    \"atomic.fence\",\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    \"i32.atomic.load\",\n    \"i64.atomic.load\",\n    \"i32.atomic.load8_u\",\n    \"i32.atomic.load16_u\",\n    \"i64.atomic.load8_u\",\n    \"i64.atomic.load16_u\",\n    \"i64.atomic.load32_u\",\n    \"i32.atomic.store\",\n    \"i64.atomic.store\",\n    \"i32.atomic.store8\",\n    \"i32.atomic.store16\",\n    \"i64.atomic.store8\",\n    \"i64.atomic.store16\",\n    \"i64.atomic.store32\",\n    \"i32.atomic.rmw.add\",\n    \"i64.atomic.rmw.add\",\n    \"i32.atomic.rmw8.add_u\",\n    \"i32.atomic.rmw16.add_u\",\n    \"i64.atomic.rmw8.add_u\",\n    \"i64.atomic.rmw16.add_u\",\n    \"i64.atomic.rmw32.add_u\",\n    \"i32.atomic.rmw.sub\",\n    \"i64.atomic.rmw.sub\",\n    \"i32.atomic.rmw8.sub_u\",\n    \"i32.atomic.rmw16.sub_u\",\n    \"i64.atomic.rmw8.sub_u\",\n    \"i64.atomic.rmw16.sub_u\",\n    \"i64.atomic.rmw32.sub_u\",\n    \"i32.atomic.rmw.and\",\n    \"i64.atomic.rmw.and\",\n    \"i32.atomic.rmw8.and_u\",\n    \"i32.atomic.rmw16.and_u\",\n    \"i64.atomic.rmw8.and_u\",\n    \"i64.atomic.rmw16.and_u\",\n    \"i64.atomic.rmw32.and_u\",\n    \"i32.atomic.rmw.or\",\n    \"i64.atomic.rmw.or\",\n    \"i32.atomic.rmw8.or_u\",\n    \"i32.atomic.rmw16.or_u\",\n    \"i64.atomic.rmw8.or_u\",\n    \"i64.atomic.rmw16.or_u\",\n    \"i64.atomic.rmw32.or_u\",\n    \"i32.atomic.rmw.xor\",\n    \"i64.atomic.rmw.xor\",\n    \"i32.atomic.rmw8.xor_u\",\n    \"i32.atomic.rmw16.xor_u\",\n    \"i64.atomic.rmw8.xor_u\",\n    \"i64.atomic.rmw16.xor_u\",\n    \"i64.atomic.rmw32.xor_u\",\n    \"i32.atomic.rmw.xchg\",\n    \"i64.atomic.rmw.xchg\",\n    \"i32.atomic.rmw8.xchg_u\",\n    \"i32.atomic.rmw16.xchg_u\",\n    \"i64.atomic.rmw8.xchg_u\",\n    \"i64.atomic.rmw16.xchg_u\",\n    \"i64.atomic.rmw32.xchg_u\",\n    \"i32.atomic.rmw.cmpxchg\",\n    \"i64.atomic.rmw.cmpxchg\",\n    \"i32.atomic.rmw8.cmpxchg_u\",\n    \"i32.atomic.rmw16.cmpxchg_u\",\n    \"i64.atomic.rmw8.cmpxchg_u\",\n    \"i64.atomic.rmw16.cmpxchg_u\",\n    \"i64.atomic.rmw32.cmpxchg_u\",\n].forEach((s, i) => {\n    OperatorCodeNames[0xfe00 | i] = s;\n});\nOperatorCodeNames[0xfb01] = \"struct.new_with_rtt\";\nOperatorCodeNames[0xfb02] = \"struct.new_default_with_rtt\";\nOperatorCodeNames[0xfb03] = \"struct.get\";\nOperatorCodeNames[0xfb04] = \"struct.get_s\";\nOperatorCodeNames[0xfb05] = \"struct.get_u\";\nOperatorCodeNames[0xfb06] = \"struct.set\";\nOperatorCodeNames[0xfb07] = \"struct.new\";\nOperatorCodeNames[0xfb08] = \"struct.new_default\";\nOperatorCodeNames[0xfb11] = \"array.new_with_rtt\";\nOperatorCodeNames[0xfb12] = \"array.new_default_with_rtt\";\nOperatorCodeNames[0xfb13] = \"array.get\";\nOperatorCodeNames[0xfb14] = \"array.get_s\";\nOperatorCodeNames[0xfb15] = \"array.get_u\";\nOperatorCodeNames[0xfb16] = \"array.set\";\nOperatorCodeNames[0xfb17] = \"array.len\";\nOperatorCodeNames[0xfb18] = \"array.copy\";\nOperatorCodeNames[0xfb19] = \"array.init\";\nOperatorCodeNames[0xfb1a] = \"array.init_static\";\nOperatorCodeNames[0xfb1b] = \"array.new\";\nOperatorCodeNames[0xfb1c] = \"array.new_default\";\nOperatorCodeNames[0xfb20] = \"i31.new\";\nOperatorCodeNames[0xfb21] = \"i31.get_s\";\nOperatorCodeNames[0xfb22] = \"i31.get_u\";\nOperatorCodeNames[0xfb30] = \"rtt.canon\";\nOperatorCodeNames[0xfb31] = \"rtt.sub\";\nOperatorCodeNames[0xfb32] = \"rtt.fresh_sub\";\nOperatorCodeNames[0xfb40] = \"ref.test\";\nOperatorCodeNames[0xfb41] = \"ref.cast\";\nOperatorCodeNames[0xfb42] = \"br_on_cast\";\nOperatorCodeNames[0xfb43] = \"br_on_cast_fail\";\nOperatorCodeNames[0xfb44] = \"ref.test_static\";\nOperatorCodeNames[0xfb45] = \"ref.cast_static\";\nOperatorCodeNames[0xfb46] = \"br_on_cast_static\";\nOperatorCodeNames[0xfb47] = \"br_on_cast_static_fail\";\nOperatorCodeNames[0xfb50] = \"ref.is_func\";\nOperatorCodeNames[0xfb51] = \"ref.is_data\";\nOperatorCodeNames[0xfb52] = \"ref.is_i31\";\nOperatorCodeNames[0xfb58] = \"ref.as_func\";\nOperatorCodeNames[0xfb59] = \"ref.as_data\";\nOperatorCodeNames[0xfb5a] = \"ref.as_i31\";\nOperatorCodeNames[0xfb60] = \"br_on_func\";\nOperatorCodeNames[0xfb61] = \"br_on_data\";\nOperatorCodeNames[0xfb62] = \"br_on_i31\";\nOperatorCodeNames[0xfb63] = \"br_on_non_func\";\nOperatorCodeNames[0xfb64] = \"br_on_non_data\";\nOperatorCodeNames[0xfb65] = \"br_on_non_i31\";\nexport var ExternalKind;\n(function (ExternalKind) {\n    ExternalKind[ExternalKind[\"Function\"] = 0] = \"Function\";\n    ExternalKind[ExternalKind[\"Table\"] = 1] = \"Table\";\n    ExternalKind[ExternalKind[\"Memory\"] = 2] = \"Memory\";\n    ExternalKind[ExternalKind[\"Global\"] = 3] = \"Global\";\n    ExternalKind[ExternalKind[\"Event\"] = 4] = \"Event\";\n})(ExternalKind || (ExternalKind = {}));\nexport var TypeKind;\n(function (TypeKind) {\n    TypeKind[TypeKind[\"unspecified\"] = 0] = \"unspecified\";\n    TypeKind[TypeKind[\"i32\"] = -1] = \"i32\";\n    TypeKind[TypeKind[\"i64\"] = -2] = \"i64\";\n    TypeKind[TypeKind[\"f32\"] = -3] = \"f32\";\n    TypeKind[TypeKind[\"f64\"] = -4] = \"f64\";\n    TypeKind[TypeKind[\"v128\"] = -5] = \"v128\";\n    TypeKind[TypeKind[\"i8\"] = -6] = \"i8\";\n    TypeKind[TypeKind[\"i16\"] = -7] = \"i16\";\n    TypeKind[TypeKind[\"funcref\"] = -16] = \"funcref\";\n    TypeKind[TypeKind[\"externref\"] = -17] = \"externref\";\n    TypeKind[TypeKind[\"anyref\"] = -18] = \"anyref\";\n    TypeKind[TypeKind[\"eqref\"] = -19] = \"eqref\";\n    TypeKind[TypeKind[\"optref\"] = -20] = \"optref\";\n    TypeKind[TypeKind[\"ref\"] = -21] = \"ref\";\n    TypeKind[TypeKind[\"i31ref\"] = -22] = \"i31ref\";\n    TypeKind[TypeKind[\"rtt_d\"] = -23] = \"rtt_d\";\n    TypeKind[TypeKind[\"rtt\"] = -24] = \"rtt\";\n    TypeKind[TypeKind[\"dataref\"] = -25] = \"dataref\";\n    TypeKind[TypeKind[\"func\"] = -32] = \"func\";\n    TypeKind[TypeKind[\"struct\"] = -33] = \"struct\";\n    TypeKind[TypeKind[\"array\"] = -34] = \"array\";\n    TypeKind[TypeKind[\"func_subtype\"] = -35] = \"func_subtype\";\n    TypeKind[TypeKind[\"struct_subtype\"] = -36] = \"struct_subtype\";\n    TypeKind[TypeKind[\"array_subtype\"] = -37] = \"array_subtype\";\n    TypeKind[TypeKind[\"empty_block_type\"] = -64] = \"empty_block_type\";\n})(TypeKind || (TypeKind = {}));\nexport class Type {\n    constructor(kind, index = -1, depth = -1) {\n        if (kind < 0 || (kind === 0 && index >= 0)) {\n            // all good\n        }\n        else {\n            throw new Error(`invalid type: ${kind}/${index}/${depth}`);\n        }\n        this.kind = kind;\n        this.index = index;\n        this.depth = depth;\n        // Canonicalize (ref any) to (anyref) etc.\n        if ((index === -16 /* funcref */ && kind === -20 /* optref */) ||\n            (index === -17 /* externref */ && kind === -20 /* optref */) ||\n            (index === -18 /* anyref */ && kind === -20 /* optref */) ||\n            (index === -19 /* eqref */ && kind === -20 /* optref */) ||\n            (index === -22 /* i31ref */ && kind === -21 /* ref */) ||\n            (index === -25 /* dataref */ && kind === -21 /* ref */)) {\n            this.kind = index;\n            this.index = -1;\n        }\n    }\n}\n// Convenience singletons.\nType.funcref = new Type(-16 /* funcref */);\nType.externref = new Type(-17 /* externref */);\nexport var RelocType;\n(function (RelocType) {\n    RelocType[RelocType[\"FunctionIndex_LEB\"] = 0] = \"FunctionIndex_LEB\";\n    RelocType[RelocType[\"TableIndex_SLEB\"] = 1] = \"TableIndex_SLEB\";\n    RelocType[RelocType[\"TableIndex_I32\"] = 2] = \"TableIndex_I32\";\n    RelocType[RelocType[\"GlobalAddr_LEB\"] = 3] = \"GlobalAddr_LEB\";\n    RelocType[RelocType[\"GlobalAddr_SLEB\"] = 4] = \"GlobalAddr_SLEB\";\n    RelocType[RelocType[\"GlobalAddr_I32\"] = 5] = \"GlobalAddr_I32\";\n    RelocType[RelocType[\"TypeIndex_LEB\"] = 6] = \"TypeIndex_LEB\";\n    RelocType[RelocType[\"GlobalIndex_LEB\"] = 7] = \"GlobalIndex_LEB\";\n})(RelocType || (RelocType = {}));\nexport var LinkingType;\n(function (LinkingType) {\n    LinkingType[LinkingType[\"StackPointer\"] = 1] = \"StackPointer\";\n})(LinkingType || (LinkingType = {}));\nexport var NameType;\n(function (NameType) {\n    NameType[NameType[\"Module\"] = 0] = \"Module\";\n    NameType[NameType[\"Function\"] = 1] = \"Function\";\n    NameType[NameType[\"Local\"] = 2] = \"Local\";\n    NameType[NameType[\"Event\"] = 3] = \"Event\";\n    NameType[NameType[\"Type\"] = 4] = \"Type\";\n    NameType[NameType[\"Table\"] = 5] = \"Table\";\n    NameType[NameType[\"Memory\"] = 6] = \"Memory\";\n    NameType[NameType[\"Global\"] = 7] = \"Global\";\n    NameType[NameType[\"Field\"] = 10] = \"Field\";\n})(NameType || (NameType = {}));\nexport var BinaryReaderState;\n(function (BinaryReaderState) {\n    BinaryReaderState[BinaryReaderState[\"ERROR\"] = -1] = \"ERROR\";\n    BinaryReaderState[BinaryReaderState[\"INITIAL\"] = 0] = \"INITIAL\";\n    BinaryReaderState[BinaryReaderState[\"BEGIN_WASM\"] = 1] = \"BEGIN_WASM\";\n    BinaryReaderState[BinaryReaderState[\"END_WASM\"] = 2] = \"END_WASM\";\n    BinaryReaderState[BinaryReaderState[\"BEGIN_SECTION\"] = 3] = \"BEGIN_SECTION\";\n    BinaryReaderState[BinaryReaderState[\"END_SECTION\"] = 4] = \"END_SECTION\";\n    BinaryReaderState[BinaryReaderState[\"SKIPPING_SECTION\"] = 5] = \"SKIPPING_SECTION\";\n    BinaryReaderState[BinaryReaderState[\"READING_SECTION_RAW_DATA\"] = 6] = \"READING_SECTION_RAW_DATA\";\n    BinaryReaderState[BinaryReaderState[\"SECTION_RAW_DATA\"] = 7] = \"SECTION_RAW_DATA\";\n    BinaryReaderState[BinaryReaderState[\"TYPE_SECTION_ENTRY\"] = 11] = \"TYPE_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"IMPORT_SECTION_ENTRY\"] = 12] = \"IMPORT_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"FUNCTION_SECTION_ENTRY\"] = 13] = \"FUNCTION_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"TABLE_SECTION_ENTRY\"] = 14] = \"TABLE_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"MEMORY_SECTION_ENTRY\"] = 15] = \"MEMORY_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"GLOBAL_SECTION_ENTRY\"] = 16] = \"GLOBAL_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"EXPORT_SECTION_ENTRY\"] = 17] = \"EXPORT_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"DATA_SECTION_ENTRY\"] = 18] = \"DATA_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"NAME_SECTION_ENTRY\"] = 19] = \"NAME_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"ELEMENT_SECTION_ENTRY\"] = 20] = \"ELEMENT_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"LINKING_SECTION_ENTRY\"] = 21] = \"LINKING_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"START_SECTION_ENTRY\"] = 22] = \"START_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"EVENT_SECTION_ENTRY\"] = 23] = \"EVENT_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"BEGIN_INIT_EXPRESSION_BODY\"] = 25] = \"BEGIN_INIT_EXPRESSION_BODY\";\n    BinaryReaderState[BinaryReaderState[\"INIT_EXPRESSION_OPERATOR\"] = 26] = \"INIT_EXPRESSION_OPERATOR\";\n    BinaryReaderState[BinaryReaderState[\"END_INIT_EXPRESSION_BODY\"] = 27] = \"END_INIT_EXPRESSION_BODY\";\n    BinaryReaderState[BinaryReaderState[\"BEGIN_FUNCTION_BODY\"] = 28] = \"BEGIN_FUNCTION_BODY\";\n    BinaryReaderState[BinaryReaderState[\"READING_FUNCTION_HEADER\"] = 29] = \"READING_FUNCTION_HEADER\";\n    BinaryReaderState[BinaryReaderState[\"CODE_OPERATOR\"] = 30] = \"CODE_OPERATOR\";\n    BinaryReaderState[BinaryReaderState[\"END_FUNCTION_BODY\"] = 31] = \"END_FUNCTION_BODY\";\n    BinaryReaderState[BinaryReaderState[\"SKIPPING_FUNCTION_BODY\"] = 32] = \"SKIPPING_FUNCTION_BODY\";\n    BinaryReaderState[BinaryReaderState[\"BEGIN_ELEMENT_SECTION_ENTRY\"] = 33] = \"BEGIN_ELEMENT_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"ELEMENT_SECTION_ENTRY_BODY\"] = 34] = \"ELEMENT_SECTION_ENTRY_BODY\";\n    BinaryReaderState[BinaryReaderState[\"END_ELEMENT_SECTION_ENTRY\"] = 35] = \"END_ELEMENT_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"BEGIN_DATA_SECTION_ENTRY\"] = 36] = \"BEGIN_DATA_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"DATA_SECTION_ENTRY_BODY\"] = 37] = \"DATA_SECTION_ENTRY_BODY\";\n    BinaryReaderState[BinaryReaderState[\"END_DATA_SECTION_ENTRY\"] = 38] = \"END_DATA_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"BEGIN_GLOBAL_SECTION_ENTRY\"] = 39] = \"BEGIN_GLOBAL_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"END_GLOBAL_SECTION_ENTRY\"] = 40] = \"END_GLOBAL_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"RELOC_SECTION_HEADER\"] = 41] = \"RELOC_SECTION_HEADER\";\n    BinaryReaderState[BinaryReaderState[\"RELOC_SECTION_ENTRY\"] = 42] = \"RELOC_SECTION_ENTRY\";\n    BinaryReaderState[BinaryReaderState[\"SOURCE_MAPPING_URL\"] = 43] = \"SOURCE_MAPPING_URL\";\n    BinaryReaderState[BinaryReaderState[\"BEGIN_OFFSET_EXPRESSION_BODY\"] = 44] = \"BEGIN_OFFSET_EXPRESSION_BODY\";\n    BinaryReaderState[BinaryReaderState[\"OFFSET_EXPRESSION_OPERATOR\"] = 45] = \"OFFSET_EXPRESSION_OPERATOR\";\n    BinaryReaderState[BinaryReaderState[\"END_OFFSET_EXPRESSION_BODY\"] = 46] = \"END_OFFSET_EXPRESSION_BODY\";\n})(BinaryReaderState || (BinaryReaderState = {}));\nvar DataSegmentType;\n(function (DataSegmentType) {\n    DataSegmentType[DataSegmentType[\"Active\"] = 0] = \"Active\";\n    DataSegmentType[DataSegmentType[\"Passive\"] = 1] = \"Passive\";\n    DataSegmentType[DataSegmentType[\"ActiveWithMemoryIndex\"] = 2] = \"ActiveWithMemoryIndex\";\n})(DataSegmentType || (DataSegmentType = {}));\nfunction isActiveDataSegmentType(segmentType) {\n    switch (segmentType) {\n        case 0 /* Active */:\n        case 2 /* ActiveWithMemoryIndex */:\n            return true;\n        default:\n            return false;\n    }\n}\nexport var DataMode;\n(function (DataMode) {\n    DataMode[DataMode[\"Active\"] = 0] = \"Active\";\n    DataMode[DataMode[\"Passive\"] = 1] = \"Passive\";\n})(DataMode || (DataMode = {}));\nvar ElementSegmentType;\n(function (ElementSegmentType) {\n    ElementSegmentType[ElementSegmentType[\"LegacyActiveFuncrefExternval\"] = 0] = \"LegacyActiveFuncrefExternval\";\n    ElementSegmentType[ElementSegmentType[\"PassiveExternval\"] = 1] = \"PassiveExternval\";\n    ElementSegmentType[ElementSegmentType[\"ActiveExternval\"] = 2] = \"ActiveExternval\";\n    ElementSegmentType[ElementSegmentType[\"DeclaredExternval\"] = 3] = \"DeclaredExternval\";\n    ElementSegmentType[ElementSegmentType[\"LegacyActiveFuncrefElemexpr\"] = 4] = \"LegacyActiveFuncrefElemexpr\";\n    ElementSegmentType[ElementSegmentType[\"PassiveElemexpr\"] = 5] = \"PassiveElemexpr\";\n    ElementSegmentType[ElementSegmentType[\"ActiveElemexpr\"] = 6] = \"ActiveElemexpr\";\n    ElementSegmentType[ElementSegmentType[\"DeclaredElemexpr\"] = 7] = \"DeclaredElemexpr\";\n})(ElementSegmentType || (ElementSegmentType = {}));\nfunction isActiveElementSegmentType(segmentType) {\n    switch (segmentType) {\n        case 0 /* LegacyActiveFuncrefExternval */:\n        case 2 /* ActiveExternval */:\n        case 4 /* LegacyActiveFuncrefElemexpr */:\n        case 6 /* ActiveElemexpr */:\n            return true;\n        default:\n            return false;\n    }\n}\nfunction isExternvalElementSegmentType(segmentType) {\n    switch (segmentType) {\n        case 0 /* LegacyActiveFuncrefExternval */:\n        case 1 /* PassiveExternval */:\n        case 2 /* ActiveExternval */:\n        case 3 /* DeclaredExternval */:\n            return true;\n        default:\n            return false;\n    }\n}\nexport var ElementMode;\n(function (ElementMode) {\n    ElementMode[ElementMode[\"Active\"] = 0] = \"Active\";\n    ElementMode[ElementMode[\"Passive\"] = 1] = \"Passive\";\n    ElementMode[ElementMode[\"Declarative\"] = 2] = \"Declarative\";\n})(ElementMode || (ElementMode = {}));\nclass DataRange {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n    offset(delta) {\n        this.start += delta;\n        this.end += delta;\n    }\n}\nexport class Int64 {\n    constructor(data) {\n        this._data = data || new Uint8Array(8);\n    }\n    toInt32() {\n        return (this._data[0] |\n            (this._data[1] << 8) |\n            (this._data[2] << 16) |\n            (this._data[3] << 24));\n    }\n    toDouble() {\n        var power = 1;\n        var sum;\n        if (this._data[7] & 0x80) {\n            sum = -1;\n            for (var i = 0; i < 8; i++, power *= 256)\n                sum -= power * (0xff ^ this._data[i]);\n        }\n        else {\n            sum = 0;\n            for (var i = 0; i < 8; i++, power *= 256)\n                sum += power * this._data[i];\n        }\n        return sum;\n    }\n    toString() {\n        var low = (this._data[0] |\n            (this._data[1] << 8) |\n            (this._data[2] << 16) |\n            (this._data[3] << 24)) >>>\n            0;\n        var high = (this._data[4] |\n            (this._data[5] << 8) |\n            (this._data[6] << 16) |\n            (this._data[7] << 24)) >>>\n            0;\n        if (low === 0 && high === 0) {\n            return \"0\";\n        }\n        var sign = false;\n        if (high >> 31) {\n            high = 4294967296 - high;\n            if (low > 0) {\n                high--;\n                low = 4294967296 - low;\n            }\n            sign = true;\n        }\n        var buf = [];\n        while (high > 0) {\n            var t = (high % 10) * 4294967296 + low;\n            high = Math.floor(high / 10);\n            buf.unshift((t % 10).toString());\n            low = Math.floor(t / 10);\n        }\n        while (low > 0) {\n            buf.unshift((low % 10).toString());\n            low = Math.floor(low / 10);\n        }\n        if (sign)\n            buf.unshift(\"-\");\n        return buf.join(\"\");\n    }\n    get data() {\n        return this._data;\n    }\n}\nexport class BinaryReader {\n    constructor() {\n        this._data = null;\n        this._pos = 0;\n        this._length = 0;\n        this._eof = false;\n        this.state = 0 /* INITIAL */;\n        this.result = null;\n        this.error = null;\n        this._sectionEntriesLeft = 0;\n        this._sectionId = -1 /* Unknown */;\n        this._sectionRange = null;\n        this._functionRange = null;\n        this._segmentType = 0;\n        this._segmentEntriesLeft = 0;\n    }\n    get data() {\n        return this._data;\n    }\n    get position() {\n        return this._pos;\n    }\n    get length() {\n        return this._length;\n    }\n    setData(buffer, pos, length, eof) {\n        var posDelta = pos - this._pos;\n        this._data = new Uint8Array(buffer);\n        this._pos = pos;\n        this._length = length;\n        this._eof = eof === undefined ? true : eof;\n        if (this._sectionRange)\n            this._sectionRange.offset(posDelta);\n        if (this._functionRange)\n            this._functionRange.offset(posDelta);\n    }\n    hasBytes(n) {\n        return this._pos + n <= this._length;\n    }\n    hasMoreBytes() {\n        return this.hasBytes(1);\n    }\n    readUint8() {\n        return this._data[this._pos++];\n    }\n    readInt32() {\n        var b1 = this._data[this._pos++];\n        var b2 = this._data[this._pos++];\n        var b3 = this._data[this._pos++];\n        var b4 = this._data[this._pos++];\n        return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24);\n    }\n    readUint32() {\n        return this.readInt32();\n    }\n    peekInt32() {\n        var b1 = this._data[this._pos];\n        var b2 = this._data[this._pos + 1];\n        var b3 = this._data[this._pos + 2];\n        var b4 = this._data[this._pos + 3];\n        return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24);\n    }\n    hasVarIntBytes() {\n        var pos = this._pos;\n        while (pos < this._length) {\n            if ((this._data[pos++] & 0x80) == 0)\n                return true;\n        }\n        return false;\n    }\n    readVarUint1() {\n        return this.readUint8();\n    }\n    readVarInt7() {\n        return (this.readUint8() << 25) >> 25;\n    }\n    readVarUint7() {\n        return this.readUint8();\n    }\n    readVarInt32() {\n        var result = 0;\n        var shift = 0;\n        while (true) {\n            var byte = this.readUint8();\n            result |= (byte & 0x7f) << shift;\n            shift += 7;\n            if ((byte & 0x80) === 0)\n                break;\n        }\n        if (shift >= 32)\n            return result;\n        var ashift = 32 - shift;\n        return (result << ashift) >> ashift;\n    }\n    readVarUint32() {\n        var result = 0;\n        var shift = 0;\n        while (true) {\n            var byte = this.readUint8();\n            result |= (byte & 0x7f) << shift;\n            shift += 7;\n            if ((byte & 0x80) === 0)\n                break;\n        }\n        return result >>> 0;\n    }\n    readVarInt64() {\n        var result = new Uint8Array(8);\n        var i = 0;\n        var c = 0;\n        var shift = 0;\n        while (true) {\n            var byte = this.readUint8();\n            c |= (byte & 0x7f) << shift;\n            shift += 7;\n            if (shift > 8) {\n                result[i++] = c & 0xff;\n                c >>= 8;\n                shift -= 8;\n            }\n            if ((byte & 0x80) === 0)\n                break;\n        }\n        var ashift = 32 - shift;\n        c = (c << ashift) >> ashift;\n        while (i < 8) {\n            result[i++] = c & 0xff;\n            c >>= 8;\n        }\n        return new Int64(result);\n    }\n    // Reads any \"s33\" (signed 33-bit integer) value correctly; no guarantees\n    // outside that range.\n    readHeapType() {\n        var result = 0;\n        var shift = 0;\n        var byte;\n        while (true) {\n            byte = this.readUint8();\n            if (shift === 28) {\n                var signed = (byte << 25) >> 25;\n                return signed * Math.pow(2, 28) + result;\n            }\n            result |= (byte & 0x7f) << shift;\n            shift += 7;\n            if ((byte & 0x80) === 0)\n                break;\n        }\n        shift = 32 - shift;\n        return (result << shift) >> shift;\n    }\n    readTypeInternal(kind) {\n        if (kind === -21 /* ref */ ||\n            kind === -20 /* optref */ ||\n            kind === -24 /* rtt */) {\n            var index = this.readHeapType();\n            return new Type(kind, index);\n        }\n        if (kind === -23 /* rtt_d */) {\n            var index = this.readHeapType();\n            var depth = this.readVarUint32();\n            return new Type(kind, index, depth);\n        }\n        return new Type(kind);\n    }\n    readType() {\n        var kind = this.readVarInt7();\n        return this.readTypeInternal(kind);\n    }\n    readBlockType() {\n        var block_type = this.readHeapType();\n        if (block_type < 0) {\n            return this.readTypeInternal(block_type);\n        }\n        var func_index = block_type;\n        return new Type(0 /* unspecified */, func_index);\n    }\n    readStringBytes() {\n        var length = this.readVarUint32();\n        return this.readBytes(length);\n    }\n    readBytes(length) {\n        var result = this._data.subarray(this._pos, this._pos + length);\n        this._pos += length;\n        return new Uint8Array(result); // making a clone of the data\n    }\n    skipBytes(length) {\n        this._pos += length;\n    }\n    hasStringBytes() {\n        if (!this.hasVarIntBytes())\n            return false;\n        var pos = this._pos;\n        var length = this.readVarUint32();\n        var result = this.hasBytes(length);\n        this._pos = pos;\n        return result;\n    }\n    hasSectionPayload() {\n        return this.hasBytes(this._sectionRange.end - this._pos);\n    }\n    readFuncType() {\n        var paramCount = this.readVarUint32();\n        var paramTypes = new Array(paramCount);\n        for (var i = 0; i < paramCount; i++)\n            paramTypes[i] = this.readType();\n        var returnCount = this.readVarUint1();\n        var returnTypes = new Array(returnCount);\n        for (var i = 0; i < returnCount; i++)\n            returnTypes[i] = this.readType();\n        return {\n            form: -32 /* func */,\n            params: paramTypes,\n            returns: returnTypes,\n        };\n    }\n    readFuncSubtype() {\n        var result = this.readFuncType();\n        result.form = -35 /* func_subtype */;\n        result.supertype = this.readHeapType();\n        return result;\n    }\n    readStructType() {\n        var fieldCount = this.readVarUint32();\n        var fieldTypes = new Array(fieldCount);\n        var fieldMutabilities = new Array(fieldCount);\n        for (var i = 0; i < fieldCount; i++) {\n            fieldTypes[i] = this.readType();\n            fieldMutabilities[i] = !!this.readVarUint1();\n        }\n        return {\n            form: -33 /* struct */,\n            fields: fieldTypes,\n            mutabilities: fieldMutabilities,\n        };\n    }\n    readStructSubtype() {\n        var result = this.readStructType();\n        result.form = -36 /* struct_subtype */;\n        result.supertype = this.readHeapType();\n        return result;\n    }\n    readArrayType() {\n        var elementType = this.readType();\n        var mutability = !!this.readVarUint1();\n        return {\n            form: -34 /* array */,\n            elementType: elementType,\n            mutability: mutability,\n        };\n    }\n    readArraySubtype() {\n        var result = this.readArrayType();\n        result.form = -37 /* array_subtype */;\n        result.supertype = this.readHeapType();\n        return result;\n    }\n    readResizableLimits(maxPresent) {\n        var initial = this.readVarUint32();\n        var maximum;\n        if (maxPresent) {\n            maximum = this.readVarUint32();\n        }\n        return { initial: initial, maximum: maximum };\n    }\n    readTableType() {\n        var elementType = this.readType();\n        var flags = this.readVarUint32();\n        var limits = this.readResizableLimits(!!(flags & 0x01));\n        return { elementType: elementType, limits: limits };\n    }\n    readMemoryType() {\n        var flags = this.readVarUint32();\n        var shared = !!(flags & 0x02);\n        return {\n            limits: this.readResizableLimits(!!(flags & 0x01)),\n            shared: shared,\n        };\n    }\n    readGlobalType() {\n        if (!this.hasVarIntBytes()) {\n            return null;\n        }\n        var pos = this._pos;\n        var contentType = this.readType();\n        if (!this.hasVarIntBytes()) {\n            this._pos = pos;\n            return null;\n        }\n        var mutability = this.readVarUint1();\n        return { contentType: contentType, mutability: mutability };\n    }\n    readEventType() {\n        var attribute = this.readVarUint32();\n        var typeIndex = this.readVarUint32();\n        return {\n            attribute: attribute,\n            typeIndex: typeIndex,\n        };\n    }\n    readTypeEntry() {\n        if (this._sectionEntriesLeft === 0) {\n            this.skipSection();\n            return this.read();\n        }\n        this.state = 11 /* TYPE_SECTION_ENTRY */;\n        var form = this.readVarInt7();\n        switch (form) {\n            case -32 /* func */:\n                this.result = this.readFuncType();\n                break;\n            case -35 /* func_subtype */:\n                this.result = this.readFuncSubtype();\n                break;\n            case -33 /* struct */:\n                this.result = this.readStructType();\n                break;\n            case -36 /* struct_subtype */:\n                this.result = this.readStructSubtype();\n                break;\n            case -34 /* array */:\n                this.result = this.readArrayType();\n                break;\n            case -37 /* array_subtype */:\n                this.result = this.readArraySubtype();\n                break;\n            default:\n                throw new Error(`Unknown type kind: ${form}`);\n        }\n        this._sectionEntriesLeft--;\n        return true;\n    }\n    readImportEntry() {\n        if (this._sectionEntriesLeft === 0) {\n            this.skipSection();\n            return this.read();\n        }\n        this.state = 12 /* IMPORT_SECTION_ENTRY */;\n        var module = this.readStringBytes();\n        var field = this.readStringBytes();\n        var kind = this.readUint8();\n        var funcTypeIndex;\n        var type;\n        switch (kind) {\n            case 0 /* Function */:\n                funcTypeIndex = this.readVarUint32();\n                break;\n            case 1 /* Table */:\n                type = this.readTableType();\n                break;\n            case 2 /* Memory */:\n                type = this.readMemoryType();\n                break;\n            case 3 /* Global */:\n                type = this.readGlobalType();\n                break;\n            case 4 /* Event */:\n                type = this.readEventType();\n                break;\n        }\n        this.result = {\n            module: module,\n            field: field,\n            kind: kind,\n            funcTypeIndex: funcTypeIndex,\n            type: type,\n        };\n        this._sectionEntriesLeft--;\n        return true;\n    }\n    readExportEntry() {\n        if (this._sectionEntriesLeft === 0) {\n            this.skipSection();\n            return this.read();\n        }\n        var field = this.readStringBytes();\n        var kind = this.readUint8();\n        var index = this.readVarUint32();\n        this.state = 17 /* EXPORT_SECTION_ENTRY */;\n        this.result = { field: field, kind: kind, index: index };\n        this._sectionEntriesLeft--;\n        return true;\n    }\n    readFunctionEntry() {\n        if (this._sectionEntriesLeft === 0) {\n            this.skipSection();\n            return this.read();\n        }\n        var typeIndex = this.readVarUint32();\n        this.state = 13 /* FUNCTION_SECTION_ENTRY */;\n        this.result = { typeIndex: typeIndex };\n        this._sectionEntriesLeft--;\n        return true;\n    }\n    readTableEntry() {\n        if (this._sectionEntriesLeft === 0) {\n            this.skipSection();\n            return this.read();\n        }\n        this.state = 14 /* TABLE_SECTION_ENTRY */;\n        this.result = this.readTableType();\n        this._sectionEntriesLeft--;\n        return true;\n    }\n    readMemoryEntry() {\n        if (this._sectionEntriesLeft === 0) {\n            this.skipSection();\n            return this.read();\n        }\n        this.state = 15 /* MEMORY_SECTION_ENTRY */;\n        this.result = this.readMemoryType();\n        this._sectionEntriesLeft--;\n        return true;\n    }\n    readEventEntry() {\n        if (this._sectionEntriesLeft === 0) {\n            this.skipSection();\n            return this.read();\n        }\n        this.state = 23 /* EVENT_SECTION_ENTRY */;\n        this.result = this.readEventType();\n        this._sectionEntriesLeft--;\n        return true;\n    }\n    readGlobalEntry() {\n        if (this._sectionEntriesLeft === 0) {\n            this.skipSection();\n            return this.read();\n        }\n        var globalType = this.readGlobalType();\n        if (!globalType) {\n            this.state = 16 /* GLOBAL_SECTION_ENTRY */;\n            return false;\n        }\n        this.state = 39 /* BEGIN_GLOBAL_SECTION_ENTRY */;\n        this.result = {\n            type: globalType,\n        };\n        this._sectionEntriesLeft--;\n        return true;\n    }\n    readElementEntry() {\n        if (this._sectionEntriesLeft === 0) {\n            this.skipSection();\n            return this.read();\n        }\n        const pos = this._pos;\n        if (!this.hasMoreBytes()) {\n            this.state = 20 /* ELEMENT_SECTION_ENTRY */;\n            return false;\n        }\n        const segmentType = this.readUint8();\n        let mode, tableIndex;\n        switch (segmentType) {\n            case 0 /* LegacyActiveFuncrefExternval */:\n            case 4 /* LegacyActiveFuncrefElemexpr */:\n                mode = 0 /* Active */;\n                tableIndex = 0;\n                break;\n            case 1 /* PassiveExternval */:\n            case 5 /* PassiveElemexpr */:\n                mode = 1 /* Passive */;\n                break;\n            case 2 /* ActiveExternval */:\n            case 6 /* ActiveElemexpr */:\n                mode = 0 /* Active */;\n                if (!this.hasVarIntBytes()) {\n                    this.state = 20 /* ELEMENT_SECTION_ENTRY */;\n                    this._pos = pos;\n                    return false;\n                }\n                tableIndex = this.readVarUint32();\n                break;\n            case 3 /* DeclaredExternval */:\n            case 7 /* DeclaredElemexpr */:\n                mode = 2 /* Declarative */;\n                break;\n            default:\n                throw new Error(`Unsupported element segment type ${segmentType}`);\n        }\n        this.state = 33 /* BEGIN_ELEMENT_SECTION_ENTRY */;\n        this.result = { mode, tableIndex };\n        this._sectionEntriesLeft--;\n        this._segmentType = segmentType;\n        return true;\n    }\n    readElementEntryBody() {\n        let elementType = Type.funcref;\n        switch (this._segmentType) {\n            case 1 /* PassiveExternval */:\n            case 2 /* ActiveExternval */:\n            case 3 /* DeclaredExternval */:\n                if (!this.hasMoreBytes())\n                    return false;\n                // We just skip the 0x00 byte, the `elemkind` byte\n                // is reserved for future versions of WebAssembly.\n                this.skipBytes(1);\n                break;\n            case 5 /* PassiveElemexpr */:\n            case 6 /* ActiveElemexpr */:\n            case 7 /* DeclaredElemexpr */:\n                if (!this.hasMoreBytes())\n                    return false;\n                elementType = this.readType();\n                break;\n            case 0 /* LegacyActiveFuncrefExternval */:\n            case 4 /* LegacyActiveFuncrefElemexpr */:\n                // The element type is implicitly `funcref`.\n                break;\n            default:\n                throw new Error(`Unsupported element segment type ${this._segmentType}`);\n        }\n        this.state = 34 /* ELEMENT_SECTION_ENTRY_BODY */;\n        this.result = { elementType };\n        return true;\n    }\n    readDataEntry() {\n        if (this._sectionEntriesLeft === 0) {\n            this.skipSection();\n            return this.read();\n        }\n        const pos = this._pos;\n        if (!this.hasVarIntBytes()) {\n            this.state = 18 /* DATA_SECTION_ENTRY */;\n            return false;\n        }\n        const segmentType = this.readVarUint32();\n        let mode, memoryIndex;\n        switch (segmentType) {\n            case 0 /* Active */:\n                mode = 0 /* Active */;\n                memoryIndex = 0;\n                break;\n            case 1 /* Passive */:\n                mode = 1 /* Passive */;\n                break;\n            case 2 /* ActiveWithMemoryIndex */:\n                mode = 0 /* Active */;\n                if (!this.hasVarIntBytes()) {\n                    this._pos = pos;\n                    this.state = 18 /* DATA_SECTION_ENTRY */;\n                    return false;\n                }\n                memoryIndex = this.readVarUint32();\n                break;\n            default:\n                throw new Error(`Unsupported data segment type ${segmentType}`);\n        }\n        this.state = 36 /* BEGIN_DATA_SECTION_ENTRY */;\n        this.result = { mode, memoryIndex };\n        this._sectionEntriesLeft--;\n        this._segmentType = segmentType;\n        return true;\n    }\n    readDataEntryBody() {\n        if (!this.hasStringBytes()) {\n            return false;\n        }\n        this.state = 37 /* DATA_SECTION_ENTRY_BODY */;\n        this.result = {\n            data: this.readStringBytes(),\n        };\n        return true;\n    }\n    readInitExpressionBody() {\n        this.state = 25 /* BEGIN_INIT_EXPRESSION_BODY */;\n        this.result = null;\n        return true;\n    }\n    readOffsetExpressionBody() {\n        this.state = 44 /* BEGIN_OFFSET_EXPRESSION_BODY */;\n        this.result = null;\n        return true;\n    }\n    readMemoryImmediate() {\n        var flags = this.readVarUint32();\n        var offset = this.readVarUint32();\n        return { flags: flags, offset: offset };\n    }\n    readNameMap() {\n        var count = this.readVarUint32();\n        var result = [];\n        for (var i = 0; i < count; i++) {\n            var index = this.readVarUint32();\n            var name = this.readStringBytes();\n            result.push({ index: index, name: name });\n        }\n        return result;\n    }\n    readNameEntry() {\n        var pos = this._pos;\n        if (pos >= this._sectionRange.end) {\n            this.skipSection();\n            return this.read();\n        }\n        if (!this.hasVarIntBytes())\n            return false;\n        var type = this.readVarUint7();\n        if (!this.hasVarIntBytes()) {\n            this._pos = pos;\n            return false;\n        }\n        var payloadLength = this.readVarUint32();\n        if (!this.hasBytes(payloadLength)) {\n            this._pos = pos;\n            return false;\n        }\n        var result;\n        switch (type) {\n            case 0 /* Module */:\n                result = {\n                    type,\n                    moduleName: this.readStringBytes(),\n                };\n                break;\n            case 1 /* Function */:\n            case 3 /* Event */:\n            case 4 /* Type */:\n            case 5 /* Table */:\n            case 6 /* Memory */:\n            case 7 /* Global */:\n                result = {\n                    type,\n                    names: this.readNameMap(),\n                };\n                break;\n            case 2 /* Local */:\n                var funcsLength = this.readVarUint32();\n                var funcs = [];\n                for (var i = 0; i < funcsLength; i++) {\n                    var funcIndex = this.readVarUint32();\n                    funcs.push({\n                        index: funcIndex,\n                        locals: this.readNameMap(),\n                    });\n                }\n                result = {\n                    type,\n                    funcs: funcs,\n                };\n                break;\n            case 10 /* Field */:\n                var typesLength = this.readVarUint32();\n                var types = [];\n                for (var i = 0; i < typesLength; i++) {\n                    var fieldIndex = this.readVarUint32();\n                    types.push({\n                        index: fieldIndex,\n                        fields: this.readNameMap(),\n                    });\n                }\n                result = {\n                    type,\n                    types: types,\n                };\n                break;\n            default:\n                // Skip this unknown name subsection (as per specification,\n                // custom section errors shouldn't cause Wasm parsing to fail).\n                this.skipBytes(payloadLength);\n                return this.read();\n        }\n        this.state = 19 /* NAME_SECTION_ENTRY */;\n        this.result = result;\n        return true;\n    }\n    readRelocHeader() {\n        // See https://github.com/WebAssembly/tool-conventions/blob/master/Linking.md\n        if (!this.hasVarIntBytes()) {\n            return false;\n        }\n        var pos = this._pos;\n        var sectionId = this.readVarUint7();\n        var sectionName;\n        if (sectionId === 0 /* Custom */) {\n            if (!this.hasStringBytes()) {\n                this._pos = pos;\n                return false;\n            }\n            sectionName = this.readStringBytes();\n        }\n        this.state = 41 /* RELOC_SECTION_HEADER */;\n        this.result = {\n            id: sectionId,\n            name: sectionName,\n        };\n        return true;\n    }\n    readLinkingEntry() {\n        if (this._sectionEntriesLeft === 0) {\n            this.skipSection();\n            return this.read();\n        }\n        if (!this.hasVarIntBytes())\n            return false;\n        var pos = this._pos;\n        var type = this.readVarUint32();\n        var index;\n        switch (type) {\n            case 1 /* StackPointer */:\n                if (!this.hasVarIntBytes()) {\n                    this._pos = pos;\n                    return false;\n                }\n                index = this.readVarUint32();\n                break;\n            default:\n                this.error = new Error(`Bad linking type: ${type}`);\n                this.state = -1 /* ERROR */;\n                return true;\n        }\n        this.state = 21 /* LINKING_SECTION_ENTRY */;\n        this.result = { type: type, index: index };\n        this._sectionEntriesLeft--;\n        return true;\n    }\n    readSourceMappingURL() {\n        if (!this.hasStringBytes())\n            return false;\n        var url = this.readStringBytes();\n        this.state = 43 /* SOURCE_MAPPING_URL */;\n        this.result = { url: url };\n        return true;\n    }\n    readRelocEntry() {\n        if (this._sectionEntriesLeft === 0) {\n            this.skipSection();\n            return this.read();\n        }\n        if (!this.hasVarIntBytes())\n            return false;\n        var pos = this._pos;\n        var type = this.readVarUint7();\n        if (!this.hasVarIntBytes()) {\n            this._pos = pos;\n            return false;\n        }\n        var offset = this.readVarUint32();\n        if (!this.hasVarIntBytes()) {\n            this._pos = pos;\n            return false;\n        }\n        var index = this.readVarUint32();\n        var addend;\n        switch (type) {\n            case 0 /* FunctionIndex_LEB */:\n            case 1 /* TableIndex_SLEB */:\n            case 2 /* TableIndex_I32 */:\n            case 6 /* TypeIndex_LEB */:\n            case 7 /* GlobalIndex_LEB */:\n                break;\n            case 3 /* GlobalAddr_LEB */:\n            case 4 /* GlobalAddr_SLEB */:\n            case 5 /* GlobalAddr_I32 */:\n                if (!this.hasVarIntBytes()) {\n                    this._pos = pos;\n                    return false;\n                }\n                addend = this.readVarUint32();\n                break;\n            default:\n                this.error = new Error(`Bad relocation type: ${type}`);\n                this.state = -1 /* ERROR */;\n                return true;\n        }\n        this.state = 42 /* RELOC_SECTION_ENTRY */;\n        this.result = {\n            type: type,\n            offset: offset,\n            index: index,\n            addend: addend,\n        };\n        this._sectionEntriesLeft--;\n        return true;\n    }\n    readCodeOperator_0xfb() {\n        // The longest instructions have: 2 bytes opcode, 5 bytes type index,\n        // 5 bytes field index.\n        const MAX_CODE_OPERATOR_0XFB_SIZE = 12;\n        if (!this._eof && !this.hasBytes(MAX_CODE_OPERATOR_0XFB_SIZE)) {\n            return false;\n        }\n        var code, brDepth, refType, srcType, fieldIndex;\n        code = this._data[this._pos++] | 0xfb00;\n        switch (code) {\n            case 64322 /* br_on_cast */:\n            case 64323 /* br_on_cast_fail */:\n            case 64352 /* br_on_func */:\n            case 64355 /* br_on_non_func */:\n            case 64353 /* br_on_data */:\n            case 64356 /* br_on_non_data */:\n            case 64354 /* br_on_i31 */:\n            case 64357 /* br_on_non_i31 */:\n                brDepth = this.readVarUint32();\n                break;\n            case 64326 /* br_on_cast_static */:\n            case 64327 /* br_on_cast_static_fail */:\n                brDepth = this.readVarUint32();\n                refType = this.readHeapType();\n                break;\n            case 64275 /* array_get */:\n            case 64276 /* array_get_s */:\n            case 64277 /* array_get_u */:\n            case 64279 /* array_len */:\n            case 64278 /* array_set */:\n            case 64283 /* array_new */:\n            case 64273 /* array_new_with_rtt */:\n            case 64284 /* array_new_default */:\n            case 64274 /* array_new_default_with_rtt */:\n            case 64263 /* struct_new */:\n            case 64257 /* struct_new_with_rtt */:\n            case 64264 /* struct_new_default */:\n            case 64258 /* struct_new_default_with_rtt */:\n            case 64304 /* rtt_canon */:\n            case 64305 /* rtt_sub */:\n            case 64306 /* rtt_fresh_sub */:\n            case 64324 /* ref_test_static */:\n            case 64325 /* ref_cast_static */:\n                refType = this.readHeapType();\n                break;\n            case 64280 /* array_copy */:\n                refType = this.readHeapType();\n                srcType = this.readHeapType();\n                break;\n            case 64259 /* struct_get */:\n            case 64260 /* struct_get_s */:\n            case 64261 /* struct_get_u */:\n            case 64262 /* struct_set */:\n                refType = this.readHeapType();\n                fieldIndex = this.readVarUint32();\n                break;\n            case 64281 /* array_init */:\n            case 64282 /* array_init_static */:\n                refType = this.readHeapType();\n                // This really is the \"length\" value. Overload \"brDepth\" to keep the\n                // IOperatorInformation interface a little leaner.\n                brDepth = this.readVarUint32();\n                break;\n            case 64336 /* ref_is_func */:\n            case 64337 /* ref_is_data */:\n            case 64338 /* ref_is_i31 */:\n            case 64344 /* ref_as_func */:\n            case 64345 /* ref_as_data */:\n            case 64346 /* ref_as_i31 */:\n            case 64320 /* ref_test */:\n            case 64321 /* ref_cast */:\n            case 64288 /* i31_new */:\n            case 64289 /* i31_get_s */:\n            case 64290 /* i31_get_u */:\n                break;\n            default:\n                this.error = new Error(`Unknown operator: 0x${code.toString(16).padStart(4, \"0\")}`);\n                this.state = -1 /* ERROR */;\n                return true;\n        }\n        this.result = {\n            code,\n            blockType: undefined,\n            refType,\n            srcType,\n            brDepth,\n            brTable: undefined,\n            tableIndex: undefined,\n            funcIndex: undefined,\n            typeIndex: undefined,\n            localIndex: undefined,\n            globalIndex: undefined,\n            fieldIndex,\n            memoryAddress: undefined,\n            literal: undefined,\n            segmentIndex: undefined,\n            destinationIndex: undefined,\n            lines: undefined,\n            lineIndex: undefined,\n        };\n        return true;\n    }\n    readCodeOperator_0xfc() {\n        if (!this.hasVarIntBytes()) {\n            return false;\n        }\n        var code = this.readVarUint32() | 0xfc00;\n        var reserved, segmentIndex, destinationIndex, tableIndex;\n        switch (code) {\n            case 64512 /* i32_trunc_sat_f32_s */:\n            case 64513 /* i32_trunc_sat_f32_u */:\n            case 64514 /* i32_trunc_sat_f64_s */:\n            case 64515 /* i32_trunc_sat_f64_u */:\n            case 64516 /* i64_trunc_sat_f32_s */:\n            case 64517 /* i64_trunc_sat_f32_u */:\n            case 64518 /* i64_trunc_sat_f64_s */:\n            case 64519 /* i64_trunc_sat_f64_u */:\n                break;\n            case 64522 /* memory_copy */:\n                // Currently memory index must be zero.\n                reserved = this.readVarUint1();\n                reserved = this.readVarUint1();\n                break;\n            case 64523 /* memory_fill */:\n                reserved = this.readVarUint1();\n                break;\n            case 64524 /* table_init */:\n                segmentIndex = this.readVarUint32();\n                tableIndex = this.readVarUint32();\n                break;\n            case 64526 /* table_copy */:\n                tableIndex = this.readVarUint32();\n                destinationIndex = this.readVarUint32();\n                break;\n            case 64527 /* table_grow */:\n            case 64528 /* table_size */:\n            case 64529 /* table_fill */:\n                tableIndex = this.readVarUint32();\n                break;\n            case 64520 /* memory_init */:\n                segmentIndex = this.readVarUint32();\n                reserved = this.readVarUint1();\n                break;\n            case 64521 /* data_drop */:\n            case 64525 /* elem_drop */:\n                segmentIndex = this.readVarUint32();\n                break;\n            default:\n                this.error = new Error(`Unknown operator: 0x${code.toString(16).padStart(4, \"0\")}`);\n                this.state = -1 /* ERROR */;\n                return true;\n        }\n        this.result = {\n            code: code,\n            blockType: undefined,\n            selectType: undefined,\n            refType: undefined,\n            srcType: undefined,\n            brDepth: undefined,\n            brTable: undefined,\n            funcIndex: undefined,\n            typeIndex: undefined,\n            tableIndex: tableIndex,\n            localIndex: undefined,\n            globalIndex: undefined,\n            fieldIndex: undefined,\n            memoryAddress: undefined,\n            literal: undefined,\n            segmentIndex: segmentIndex,\n            destinationIndex: destinationIndex,\n            lines: undefined,\n            lineIndex: undefined,\n        };\n        return true;\n    }\n    readCodeOperator_0xfd() {\n        const MAX_CODE_OPERATOR_0XFD_SIZE = 17;\n        var pos = this._pos;\n        if (!this._eof && pos + MAX_CODE_OPERATOR_0XFD_SIZE > this._length) {\n            return false;\n        }\n        if (!this.hasVarIntBytes()) {\n            return false;\n        }\n        var code = this.readVarUint32() | 0xfd00;\n        var memoryAddress;\n        var literal;\n        var lineIndex;\n        var lines;\n        switch (code) {\n            case 64768 /* v128_load */:\n            case 64769 /* i16x8_load8x8_s */:\n            case 64770 /* i16x8_load8x8_u */:\n            case 64771 /* i32x4_load16x4_s */:\n            case 64772 /* i32x4_load16x4_u */:\n            case 64773 /* i64x2_load32x2_s */:\n            case 64774 /* i64x2_load32x2_u */:\n            case 64775 /* v8x16_load_splat */:\n            case 64776 /* v16x8_load_splat */:\n            case 64777 /* v32x4_load_splat */:\n            case 64778 /* v64x2_load_splat */:\n            case 64779 /* v128_store */:\n            case 64860 /* v128_load32_zero */:\n            case 64861 /* v128_load64_zero */:\n                memoryAddress = this.readMemoryImmediate();\n                break;\n            case 64780 /* v128_const */:\n                literal = this.readBytes(16);\n                break;\n            case 64781 /* i8x16_shuffle */:\n                lines = new Uint8Array(16);\n                for (var i = 0; i < lines.length; i++) {\n                    lines[i] = this.readUint8();\n                }\n                break;\n            case 64789 /* i8x16_extract_lane_s */:\n            case 64790 /* i8x16_extract_lane_u */:\n            case 64791 /* i8x16_replace_lane */:\n            case 64792 /* i16x8_extract_lane_s */:\n            case 64793 /* i16x8_extract_lane_u */:\n            case 64794 /* i16x8_replace_lane */:\n            case 64795 /* i32x4_extract_lane */:\n            case 64796 /* i32x4_replace_lane */:\n            case 64797 /* i64x2_extract_lane */:\n            case 64798 /* i64x2_replace_lane */:\n            case 64799 /* f32x4_extract_lane */:\n            case 64800 /* f32x4_replace_lane */:\n            case 64801 /* f64x2_extract_lane */:\n            case 64802 /* f64x2_replace_lane */:\n                lineIndex = this.readUint8();\n                break;\n            case 64782 /* i8x16_swizzle */:\n            case 64783 /* i8x16_splat */:\n            case 64784 /* i16x8_splat */:\n            case 64785 /* i32x4_splat */:\n            case 64786 /* i64x2_splat */:\n            case 64787 /* f32x4_splat */:\n            case 64788 /* f64x2_splat */:\n            case 64803 /* i8x16_eq */:\n            case 64804 /* i8x16_ne */:\n            case 64805 /* i8x16_lt_s */:\n            case 64806 /* i8x16_lt_u */:\n            case 64807 /* i8x16_gt_s */:\n            case 64808 /* i8x16_gt_u */:\n            case 64809 /* i8x16_le_s */:\n            case 64810 /* i8x16_le_u */:\n            case 64811 /* i8x16_ge_s */:\n            case 64812 /* i8x16_ge_u */:\n            case 64813 /* i16x8_eq */:\n            case 64814 /* i16x8_ne */:\n            case 64815 /* i16x8_lt_s */:\n            case 64816 /* i16x8_lt_u */:\n            case 64817 /* i16x8_gt_s */:\n            case 64818 /* i16x8_gt_u */:\n            case 64819 /* i16x8_le_s */:\n            case 64820 /* i16x8_le_u */:\n            case 64821 /* i16x8_ge_s */:\n            case 64822 /* i16x8_ge_u */:\n            case 64823 /* i32x4_eq */:\n            case 64824 /* i32x4_ne */:\n            case 64825 /* i32x4_lt_s */:\n            case 64826 /* i32x4_lt_u */:\n            case 64827 /* i32x4_gt_s */:\n            case 64828 /* i32x4_gt_u */:\n            case 64829 /* i32x4_le_s */:\n            case 64830 /* i32x4_le_u */:\n            case 64831 /* i32x4_ge_s */:\n            case 64832 /* i32x4_ge_u */:\n            case 64833 /* f32x4_eq */:\n            case 64834 /* f32x4_ne */:\n            case 64835 /* f32x4_lt */:\n            case 64836 /* f32x4_gt */:\n            case 64837 /* f32x4_le */:\n            case 64838 /* f32x4_ge */:\n            case 64839 /* f64x2_eq */:\n            case 64840 /* f64x2_ne */:\n            case 64841 /* f64x2_lt */:\n            case 64842 /* f64x2_gt */:\n            case 64843 /* f64x2_le */:\n            case 64844 /* f64x2_ge */:\n            case 64845 /* v128_not */:\n            case 64846 /* v128_and */:\n            case 64847 /* v128_andnot */:\n            case 64848 /* v128_or */:\n            case 64849 /* v128_xor */:\n            case 64850 /* v128_bitselect */:\n            case 64851 /* v128_any_true */:\n            case 64862 /* f32x4_demote_f64x2_zero */:\n            case 64863 /* f64x2_promote_low_f32x4 */:\n            case 64864 /* i8x16_abs */:\n            case 64865 /* i8x16_neg */:\n            case 64866 /* i8x16_popcnt */:\n            case 64867 /* i8x16_all_true */:\n            case 64868 /* i8x16_bitmask */:\n            case 64869 /* i8x16_narrow_i16x8_s */:\n            case 64870 /* i8x16_narrow_i16x8_u */:\n            case 64871 /* f32x4_ceil */:\n            case 64872 /* f32x4_floor */:\n            case 64873 /* f32x4_trunc */:\n            case 64874 /* f32x4_nearest */:\n            case 64875 /* i8x16_shl */:\n            case 64876 /* i8x16_shr_s */:\n            case 64877 /* i8x16_shr_u */:\n            case 64878 /* i8x16_add */:\n            case 64879 /* i8x16_add_sat_s */:\n            case 64880 /* i8x16_add_sat_u */:\n            case 64881 /* i8x16_sub */:\n            case 64882 /* i8x16_sub_sat_s */:\n            case 64883 /* i8x16_sub_sat_u */:\n            case 64884 /* f64x2_ceil */:\n            case 64885 /* f64x2_floor */:\n            case 64886 /* i8x16_min_s */:\n            case 64887 /* i8x16_min_u */:\n            case 64888 /* i8x16_max_s */:\n            case 64889 /* i8x16_max_u */:\n            case 64890 /* f64x2_trunc */:\n            case 64891 /* i8x16_avgr_u */:\n            case 64892 /* i16x8_extadd_pairwise_i8x16_s */:\n            case 64893 /* i16x8_extadd_pairwise_i8x16_u */:\n            case 64894 /* i32x4_extadd_pairwise_i16x8_s */:\n            case 64895 /* i32x4_extadd_pairwise_i16x8_u */:\n            case 64896 /* i16x8_abs */:\n            case 64897 /* i16x8_neg */:\n            case 64898 /* i16x8_q15mulr_sat_s */:\n            case 64899 /* i16x8_all_true */:\n            case 64900 /* i16x8_bitmask */:\n            case 64901 /* i16x8_narrow_i32x4_s */:\n            case 64902 /* i16x8_narrow_i32x4_u */:\n            case 64903 /* i16x8_extend_low_i8x16_s */:\n            case 64904 /* i16x8_extend_high_i8x16_s */:\n            case 64905 /* i16x8_extend_low_i8x16_u */:\n            case 64906 /* i16x8_extend_high_i8x16_u */:\n            case 64907 /* i16x8_shl */:\n            case 64908 /* i16x8_shr_s */:\n            case 64909 /* i16x8_shr_u */:\n            case 64910 /* i16x8_add */:\n            case 64911 /* i16x8_add_sat_s */:\n            case 64912 /* i16x8_add_sat_u */:\n            case 64913 /* i16x8_sub */:\n            case 64914 /* i16x8_sub_sat_s */:\n            case 64915 /* i16x8_sub_sat_u */:\n            case 64916 /* f64x2_nearest */:\n            case 64917 /* i16x8_mul */:\n            case 64918 /* i16x8_min_s */:\n            case 64919 /* i16x8_min_u */:\n            case 64920 /* i16x8_max_s */:\n            case 64921 /* i16x8_max_u */:\n            case 64923 /* i16x8_avgr_u */:\n            case 64924 /* i16x8_extmul_low_i8x16_s */:\n            case 64925 /* i16x8_extmul_high_i8x16_s */:\n            case 64926 /* i16x8_extmul_low_i8x16_u */:\n            case 64927 /* i16x8_extmul_high_i8x16_u */:\n            case 64928 /* i32x4_abs */:\n            case 64929 /* i32x4_neg */:\n            case 64931 /* i32x4_all_true */:\n            case 64932 /* i32x4_bitmask */:\n            case 64935 /* i32x4_extend_low_i16x8_s */:\n            case 64936 /* i32x4_extend_high_i16x8_s */:\n            case 64937 /* i32x4_extend_low_i16x8_u */:\n            case 64938 /* i32x4_extend_high_i16x8_u */:\n            case 64939 /* i32x4_shl */:\n            case 64940 /* i32x4_shr_s */:\n            case 64941 /* i32x4_shr_u */:\n            case 64942 /* i32x4_add */:\n            case 64945 /* i32x4_sub */:\n            case 64949 /* i32x4_mul */:\n            case 64950 /* i32x4_min_s */:\n            case 64951 /* i32x4_min_u */:\n            case 64952 /* i32x4_max_s */:\n            case 64953 /* i32x4_max_u */:\n            case 64954 /* i32x4_dot_i16x8_s */:\n            case 64956 /* i32x4_extmul_low_i16x8_s */:\n            case 64957 /* i32x4_extmul_high_i16x8_s */:\n            case 64958 /* i32x4_extmul_low_i16x8_u */:\n            case 64959 /* i32x4_extmul_high_i16x8_u */:\n            case 64960 /* i64x2_abs */:\n            case 64961 /* i64x2_neg */:\n            case 64963 /* i64x2_all_true */:\n            case 64964 /* i64x2_bitmask */:\n            case 64967 /* i64x2_extend_low_i32x4_s */:\n            case 64968 /* i64x2_extend_high_i32x4_s */:\n            case 64969 /* i64x2_extend_low_i32x4_u */:\n            case 64970 /* i64x2_extend_high_i32x4_u */:\n            case 64971 /* i64x2_shl */:\n            case 64972 /* i64x2_shr_s */:\n            case 64973 /* i64x2_shr_u */:\n            case 64974 /* i64x2_add */:\n            case 64977 /* i64x2_sub */:\n            case 64981 /* i64x2_mul */:\n            case 64982 /* i64x2_eq */:\n            case 64983 /* i64x2_ne */:\n            case 64984 /* i64x2_lt_s */:\n            case 64985 /* i64x2_gt_s */:\n            case 64986 /* i64x2_le_s */:\n            case 64987 /* i64x2_ge_s */:\n            case 64988 /* i64x2_extmul_low_i32x4_s */:\n            case 64989 /* i64x2_extmul_high_i32x4_s */:\n            case 64988 /* i64x2_extmul_low_i32x4_s */:\n            case 64989 /* i64x2_extmul_high_i32x4_s */:\n            case 64992 /* f32x4_abs */:\n            case 64992 /* f32x4_abs */:\n            case 64993 /* f32x4_neg */:\n            case 64995 /* f32x4_sqrt */:\n            case 64996 /* f32x4_add */:\n            case 64997 /* f32x4_sub */:\n            case 64998 /* f32x4_mul */:\n            case 64999 /* f32x4_div */:\n            case 65000 /* f32x4_min */:\n            case 65001 /* f32x4_max */:\n            case 65002 /* f32x4_pmin */:\n            case 65003 /* f32x4_pmax */:\n            case 65004 /* f64x2_abs */:\n            case 65005 /* f64x2_neg */:\n            case 65007 /* f64x2_sqrt */:\n            case 65008 /* f64x2_add */:\n            case 65009 /* f64x2_sub */:\n            case 65010 /* f64x2_mul */:\n            case 65011 /* f64x2_div */:\n            case 65012 /* f64x2_min */:\n            case 65013 /* f64x2_max */:\n            case 65014 /* f64x2_pmin */:\n            case 65015 /* f64x2_pmax */:\n            case 65016 /* i32x4_trunc_sat_f32x4_s */:\n            case 65017 /* i32x4_trunc_sat_f32x4_u */:\n            case 65018 /* f32x4_convert_i32x4_s */:\n            case 65019 /* f32x4_convert_i32x4_u */:\n            case 65020 /* i32x4_trunc_sat_f64x2_s_zero */:\n            case 65021 /* i32x4_trunc_sat_f64x2_u_zero */:\n            case 65022 /* f64x2_convert_low_i32x4_s */:\n            case 65023 /* f64x2_convert_low_i32x4_u */:\n                break;\n            default:\n                this.error = new Error(`Unknown operator: 0x${code.toString(16).padStart(4, \"0\")}`);\n                this.state = -1 /* ERROR */;\n                return true;\n        }\n        this.result = {\n            code: code,\n            blockType: undefined,\n            selectType: undefined,\n            refType: undefined,\n            srcType: undefined,\n            brDepth: undefined,\n            brTable: undefined,\n            funcIndex: undefined,\n            typeIndex: undefined,\n            localIndex: undefined,\n            globalIndex: undefined,\n            fieldIndex: undefined,\n            memoryAddress: memoryAddress,\n            literal: literal,\n            segmentIndex: undefined,\n            destinationIndex: undefined,\n            lines: lines,\n            lineIndex: lineIndex,\n        };\n        return true;\n    }\n    readCodeOperator_0xfe() {\n        const MAX_CODE_OPERATOR_0XFE_SIZE = 11;\n        var pos = this._pos;\n        if (!this._eof && pos + MAX_CODE_OPERATOR_0XFE_SIZE > this._length) {\n            return false;\n        }\n        if (!this.hasVarIntBytes()) {\n            return false;\n        }\n        var code = this.readVarUint32() | 0xfe00;\n        var memoryAddress;\n        switch (code) {\n            case 65024 /* atomic_notify */:\n            case 65025 /* i32_atomic_wait */:\n            case 65026 /* i64_atomic_wait */:\n            case 65040 /* i32_atomic_load */:\n            case 65041 /* i64_atomic_load */:\n            case 65042 /* i32_atomic_load8_u */:\n            case 65043 /* i32_atomic_load16_u */:\n            case 65044 /* i64_atomic_load8_u */:\n            case 65045 /* i64_atomic_load16_u */:\n            case 65046 /* i64_atomic_load32_u */:\n            case 65047 /* i32_atomic_store */:\n            case 65048 /* i64_atomic_store */:\n            case 65049 /* i32_atomic_store8 */:\n            case 65050 /* i32_atomic_store16 */:\n            case 65051 /* i64_atomic_store8 */:\n            case 65052 /* i64_atomic_store16 */:\n            case 65053 /* i64_atomic_store32 */:\n            case 65054 /* i32_atomic_rmw_add */:\n            case 65055 /* i64_atomic_rmw_add */:\n            case 65056 /* i32_atomic_rmw8_add_u */:\n            case 65057 /* i32_atomic_rmw16_add_u */:\n            case 65058 /* i64_atomic_rmw8_add_u */:\n            case 65059 /* i64_atomic_rmw16_add_u */:\n            case 65060 /* i64_atomic_rmw32_add_u */:\n            case 65061 /* i32_atomic_rmw_sub */:\n            case 65062 /* i64_atomic_rmw_sub */:\n            case 65063 /* i32_atomic_rmw8_sub_u */:\n            case 65064 /* i32_atomic_rmw16_sub_u */:\n            case 65065 /* i64_atomic_rmw8_sub_u */:\n            case 65066 /* i64_atomic_rmw16_sub_u */:\n            case 65067 /* i64_atomic_rmw32_sub_u */:\n            case 65068 /* i32_atomic_rmw_and */:\n            case 65069 /* i64_atomic_rmw_and */:\n            case 65070 /* i32_atomic_rmw8_and_u */:\n            case 65071 /* i32_atomic_rmw16_and_u */:\n            case 65072 /* i64_atomic_rmw8_and_u */:\n            case 65073 /* i64_atomic_rmw16_and_u */:\n            case 65074 /* i64_atomic_rmw32_and_u */:\n            case 65075 /* i32_atomic_rmw_or */:\n            case 65076 /* i64_atomic_rmw_or */:\n            case 65077 /* i32_atomic_rmw8_or_u */:\n            case 65078 /* i32_atomic_rmw16_or_u */:\n            case 65079 /* i64_atomic_rmw8_or_u */:\n            case 65080 /* i64_atomic_rmw16_or_u */:\n            case 65081 /* i64_atomic_rmw32_or_u */:\n            case 65082 /* i32_atomic_rmw_xor */:\n            case 65083 /* i64_atomic_rmw_xor */:\n            case 65084 /* i32_atomic_rmw8_xor_u */:\n            case 65085 /* i32_atomic_rmw16_xor_u */:\n            case 65086 /* i64_atomic_rmw8_xor_u */:\n            case 65087 /* i64_atomic_rmw16_xor_u */:\n            case 65088 /* i64_atomic_rmw32_xor_u */:\n            case 65089 /* i32_atomic_rmw_xchg */:\n            case 65090 /* i64_atomic_rmw_xchg */:\n            case 65091 /* i32_atomic_rmw8_xchg_u */:\n            case 65092 /* i32_atomic_rmw16_xchg_u */:\n            case 65093 /* i64_atomic_rmw8_xchg_u */:\n            case 65094 /* i64_atomic_rmw16_xchg_u */:\n            case 65095 /* i64_atomic_rmw32_xchg_u */:\n            case 65096 /* i32_atomic_rmw_cmpxchg */:\n            case 65097 /* i64_atomic_rmw_cmpxchg */:\n            case 65098 /* i32_atomic_rmw8_cmpxchg_u */:\n            case 65099 /* i32_atomic_rmw16_cmpxchg_u */:\n            case 65100 /* i64_atomic_rmw8_cmpxchg_u */:\n            case 65101 /* i64_atomic_rmw16_cmpxchg_u */:\n            case 65102 /* i64_atomic_rmw32_cmpxchg_u */:\n                memoryAddress = this.readMemoryImmediate();\n                break;\n            case 65027 /* atomic_fence */: {\n                var consistency_model = this.readUint8();\n                if (consistency_model != 0) {\n                    this.error = new Error(\"atomic.fence consistency model must be 0\");\n                    this.state = -1 /* ERROR */;\n                    return true;\n                }\n                break;\n            }\n            default:\n                this.error = new Error(`Unknown operator: 0x${code.toString(16).padStart(4, \"0\")}`);\n                this.state = -1 /* ERROR */;\n                return true;\n        }\n        this.result = {\n            code: code,\n            blockType: undefined,\n            selectType: undefined,\n            refType: undefined,\n            srcType: undefined,\n            brDepth: undefined,\n            brTable: undefined,\n            funcIndex: undefined,\n            typeIndex: undefined,\n            localIndex: undefined,\n            globalIndex: undefined,\n            fieldIndex: undefined,\n            memoryAddress: memoryAddress,\n            literal: undefined,\n            segmentIndex: undefined,\n            destinationIndex: undefined,\n            lines: undefined,\n            lineIndex: undefined,\n        };\n        return true;\n    }\n    readCodeOperator() {\n        switch (this.state) {\n            case 30 /* CODE_OPERATOR */:\n                if (this._pos >= this._functionRange.end) {\n                    this.skipFunctionBody();\n                    return this.read();\n                }\n                break;\n            case 26 /* INIT_EXPRESSION_OPERATOR */:\n                if (this.result &&\n                    this.result.code === 11 /* end */) {\n                    this.state = 27 /* END_INIT_EXPRESSION_BODY */;\n                    this.result = null;\n                    return true;\n                }\n                break;\n            case 45 /* OFFSET_EXPRESSION_OPERATOR */:\n                if (this.result &&\n                    this.result.code === 11 /* end */) {\n                    this.state = 46 /* END_OFFSET_EXPRESSION_BODY */;\n                    this.result = null;\n                    return true;\n                }\n                break;\n        }\n        var code, blockType, selectType, refType, brDepth, brTable, relativeDepth, funcIndex, typeIndex, tableIndex, localIndex, globalIndex, eventIndex, memoryAddress, literal, reserved;\n        if (this.state === 26 /* INIT_EXPRESSION_OPERATOR */ &&\n            this._sectionId === 9 /* Element */ &&\n            isExternvalElementSegmentType(this._segmentType)) {\n            // We are reading a `vec(funcidx)` here, which is a dense encoding\n            // for a sequence of `((ref.func y) end)` instructions.\n            if (this.result &&\n                this.result.code === 210 /* ref_func */) {\n                code = 11 /* end */;\n            }\n            else {\n                if (!this.hasVarIntBytes())\n                    return false;\n                code = 210 /* ref_func */;\n                funcIndex = this.readVarUint32();\n            }\n        }\n        else {\n            const MAX_CODE_OPERATOR_SIZE = 11; // i64.const or load/store\n            var pos = this._pos;\n            if (!this._eof && pos + MAX_CODE_OPERATOR_SIZE > this._length) {\n                return false;\n            }\n            code = this._data[this._pos++];\n            switch (code) {\n                case 2 /* block */:\n                case 3 /* loop */:\n                case 4 /* if */:\n                case 6 /* try */:\n                    blockType = this.readBlockType();\n                    break;\n                case 12 /* br */:\n                case 13 /* br_if */:\n                case 212 /* br_on_null */:\n                case 214 /* br_on_non_null */:\n                    brDepth = this.readVarUint32();\n                    break;\n                case 14 /* br_table */:\n                    var tableCount = this.readVarUint32();\n                    if (!this.hasBytes(tableCount + 1)) {\n                        // We need at least (tableCount + 1) bytes\n                        this._pos = pos;\n                        return false;\n                    }\n                    brTable = [];\n                    for (var i = 0; i <= tableCount; i++) {\n                        // including default\n                        if (!this.hasVarIntBytes()) {\n                            this._pos = pos;\n                            return false;\n                        }\n                        brTable.push(this.readVarUint32());\n                    }\n                    break;\n                case 9 /* rethrow */:\n                case 24 /* delegate */:\n                    relativeDepth = this.readVarUint32();\n                    break;\n                case 7 /* catch */:\n                case 8 /* throw */:\n                    eventIndex = this.readVarInt32();\n                    break;\n                case 208 /* ref_null */:\n                    refType = this.readHeapType();\n                    break;\n                case 16 /* call */:\n                case 18 /* return_call */:\n                case 210 /* ref_func */:\n                    funcIndex = this.readVarUint32();\n                    break;\n                case 17 /* call_indirect */:\n                case 19 /* return_call_indirect */:\n                    typeIndex = this.readVarUint32();\n                    reserved = this.readVarUint1();\n                    break;\n                case 32 /* local_get */:\n                case 33 /* local_set */:\n                case 34 /* local_tee */:\n                    localIndex = this.readVarUint32();\n                    break;\n                case 35 /* global_get */:\n                case 36 /* global_set */:\n                    globalIndex = this.readVarUint32();\n                    break;\n                case 37 /* table_get */:\n                case 38 /* table_set */:\n                    tableIndex = this.readVarUint32();\n                    break;\n                case 40 /* i32_load */:\n                case 41 /* i64_load */:\n                case 42 /* f32_load */:\n                case 43 /* f64_load */:\n                case 44 /* i32_load8_s */:\n                case 45 /* i32_load8_u */:\n                case 46 /* i32_load16_s */:\n                case 47 /* i32_load16_u */:\n                case 48 /* i64_load8_s */:\n                case 49 /* i64_load8_u */:\n                case 50 /* i64_load16_s */:\n                case 51 /* i64_load16_u */:\n                case 52 /* i64_load32_s */:\n                case 53 /* i64_load32_u */:\n                case 54 /* i32_store */:\n                case 55 /* i64_store */:\n                case 56 /* f32_store */:\n                case 57 /* f64_store */:\n                case 58 /* i32_store8 */:\n                case 59 /* i32_store16 */:\n                case 60 /* i64_store8 */:\n                case 61 /* i64_store16 */:\n                case 62 /* i64_store32 */:\n                    memoryAddress = this.readMemoryImmediate();\n                    break;\n                case 63 /* current_memory */:\n                case 64 /* grow_memory */:\n                    reserved = this.readVarUint1();\n                    break;\n                case 65 /* i32_const */:\n                    literal = this.readVarInt32();\n                    break;\n                case 66 /* i64_const */:\n                    literal = this.readVarInt64();\n                    break;\n                case 67 /* f32_const */:\n                    literal = new DataView(this._data.buffer, this._data.byteOffset).getFloat32(this._pos, true);\n                    this._pos += 4;\n                    break;\n                case 68 /* f64_const */:\n                    literal = new DataView(this._data.buffer, this._data.byteOffset).getFloat64(this._pos, true);\n                    this._pos += 8;\n                    break;\n                case 28 /* select_with_type */:\n                    const num_types = this.readVarInt32();\n                    // Only 1 is a valid value currently.\n                    if (num_types == 1) {\n                        selectType = this.readType();\n                    }\n                    break;\n                case 251 /* prefix_0xfb */:\n                    if (this.readCodeOperator_0xfb()) {\n                        return true;\n                    }\n                    this._pos = pos;\n                    return false;\n                case 252 /* prefix_0xfc */:\n                    if (this.readCodeOperator_0xfc()) {\n                        return true;\n                    }\n                    this._pos = pos;\n                    return false;\n                case 253 /* prefix_0xfd */:\n                    if (this.readCodeOperator_0xfd()) {\n                        return true;\n                    }\n                    this._pos = pos;\n                    return false;\n                case 254 /* prefix_0xfe */:\n                    if (this.readCodeOperator_0xfe()) {\n                        return true;\n                    }\n                    this._pos = pos;\n                    return false;\n                case 0 /* unreachable */:\n                case 1 /* nop */:\n                case 5 /* else */:\n                case 10 /* unwind */:\n                case 11 /* end */:\n                case 15 /* return */:\n                case 25 /* catch_all */:\n                case 26 /* drop */:\n                case 27 /* select */:\n                case 69 /* i32_eqz */:\n                case 70 /* i32_eq */:\n                case 71 /* i32_ne */:\n                case 72 /* i32_lt_s */:\n                case 73 /* i32_lt_u */:\n                case 74 /* i32_gt_s */:\n                case 75 /* i32_gt_u */:\n                case 76 /* i32_le_s */:\n                case 77 /* i32_le_u */:\n                case 78 /* i32_ge_s */:\n                case 79 /* i32_ge_u */:\n                case 80 /* i64_eqz */:\n                case 81 /* i64_eq */:\n                case 82 /* i64_ne */:\n                case 83 /* i64_lt_s */:\n                case 84 /* i64_lt_u */:\n                case 85 /* i64_gt_s */:\n                case 86 /* i64_gt_u */:\n                case 87 /* i64_le_s */:\n                case 88 /* i64_le_u */:\n                case 89 /* i64_ge_s */:\n                case 90 /* i64_ge_u */:\n                case 91 /* f32_eq */:\n                case 92 /* f32_ne */:\n                case 93 /* f32_lt */:\n                case 94 /* f32_gt */:\n                case 95 /* f32_le */:\n                case 96 /* f32_ge */:\n                case 97 /* f64_eq */:\n                case 98 /* f64_ne */:\n                case 99 /* f64_lt */:\n                case 100 /* f64_gt */:\n                case 101 /* f64_le */:\n                case 102 /* f64_ge */:\n                case 103 /* i32_clz */:\n                case 104 /* i32_ctz */:\n                case 105 /* i32_popcnt */:\n                case 106 /* i32_add */:\n                case 107 /* i32_sub */:\n                case 108 /* i32_mul */:\n                case 109 /* i32_div_s */:\n                case 110 /* i32_div_u */:\n                case 111 /* i32_rem_s */:\n                case 112 /* i32_rem_u */:\n                case 113 /* i32_and */:\n                case 114 /* i32_or */:\n                case 115 /* i32_xor */:\n                case 116 /* i32_shl */:\n                case 117 /* i32_shr_s */:\n                case 118 /* i32_shr_u */:\n                case 119 /* i32_rotl */:\n                case 120 /* i32_rotr */:\n                case 121 /* i64_clz */:\n                case 122 /* i64_ctz */:\n                case 123 /* i64_popcnt */:\n                case 124 /* i64_add */:\n                case 125 /* i64_sub */:\n                case 126 /* i64_mul */:\n                case 127 /* i64_div_s */:\n                case 128 /* i64_div_u */:\n                case 129 /* i64_rem_s */:\n                case 130 /* i64_rem_u */:\n                case 131 /* i64_and */:\n                case 132 /* i64_or */:\n                case 133 /* i64_xor */:\n                case 134 /* i64_shl */:\n                case 135 /* i64_shr_s */:\n                case 136 /* i64_shr_u */:\n                case 137 /* i64_rotl */:\n                case 138 /* i64_rotr */:\n                case 139 /* f32_abs */:\n                case 140 /* f32_neg */:\n                case 141 /* f32_ceil */:\n                case 142 /* f32_floor */:\n                case 143 /* f32_trunc */:\n                case 144 /* f32_nearest */:\n                case 145 /* f32_sqrt */:\n                case 146 /* f32_add */:\n                case 147 /* f32_sub */:\n                case 148 /* f32_mul */:\n                case 149 /* f32_div */:\n                case 150 /* f32_min */:\n                case 151 /* f32_max */:\n                case 152 /* f32_copysign */:\n                case 153 /* f64_abs */:\n                case 154 /* f64_neg */:\n                case 155 /* f64_ceil */:\n                case 156 /* f64_floor */:\n                case 157 /* f64_trunc */:\n                case 158 /* f64_nearest */:\n                case 159 /* f64_sqrt */:\n                case 160 /* f64_add */:\n                case 161 /* f64_sub */:\n                case 162 /* f64_mul */:\n                case 163 /* f64_div */:\n                case 164 /* f64_min */:\n                case 165 /* f64_max */:\n                case 166 /* f64_copysign */:\n                case 167 /* i32_wrap_i64 */:\n                case 168 /* i32_trunc_f32_s */:\n                case 169 /* i32_trunc_f32_u */:\n                case 170 /* i32_trunc_f64_s */:\n                case 171 /* i32_trunc_f64_u */:\n                case 172 /* i64_extend_i32_s */:\n                case 173 /* i64_extend_i32_u */:\n                case 174 /* i64_trunc_f32_s */:\n                case 175 /* i64_trunc_f32_u */:\n                case 176 /* i64_trunc_f64_s */:\n                case 177 /* i64_trunc_f64_u */:\n                case 178 /* f32_convert_i32_s */:\n                case 179 /* f32_convert_i32_u */:\n                case 180 /* f32_convert_i64_s */:\n                case 181 /* f32_convert_i64_u */:\n                case 182 /* f32_demote_f64 */:\n                case 183 /* f64_convert_i32_s */:\n                case 184 /* f64_convert_i32_u */:\n                case 185 /* f64_convert_i64_s */:\n                case 186 /* f64_convert_i64_u */:\n                case 187 /* f64_promote_f32 */:\n                case 188 /* i32_reinterpret_f32 */:\n                case 189 /* i64_reinterpret_f64 */:\n                case 190 /* f32_reinterpret_i32 */:\n                case 191 /* f64_reinterpret_i64 */:\n                case 192 /* i32_extend8_s */:\n                case 193 /* i32_extend16_s */:\n                case 194 /* i64_extend8_s */:\n                case 195 /* i64_extend16_s */:\n                case 196 /* i64_extend32_s */:\n                case 20 /* call_ref */:\n                case 21 /* return_call_ref */:\n                case 209 /* ref_is_null */:\n                case 211 /* ref_as_non_null */:\n                case 213 /* ref_eq */:\n                    break;\n                default:\n                    this.error = new Error(`Unknown operator: ${code}`);\n                    this.state = -1 /* ERROR */;\n                    return true;\n            }\n        }\n        this.result = {\n            code,\n            blockType,\n            selectType,\n            refType,\n            srcType: undefined,\n            brDepth,\n            brTable,\n            relativeDepth,\n            tableIndex,\n            funcIndex,\n            typeIndex,\n            localIndex,\n            globalIndex,\n            fieldIndex: undefined,\n            eventIndex,\n            memoryAddress,\n            literal,\n            segmentIndex: undefined,\n            destinationIndex: undefined,\n            lines: undefined,\n            lineIndex: undefined,\n        };\n        return true;\n    }\n    readFunctionBody() {\n        if (this._sectionEntriesLeft === 0) {\n            this.skipSection();\n            return this.read();\n        }\n        if (!this.hasVarIntBytes())\n            return false;\n        var pos = this._pos;\n        var size = this.readVarUint32();\n        var bodyEnd = this._pos + size;\n        if (!this.hasVarIntBytes()) {\n            this._pos = pos;\n            return false;\n        }\n        var localCount = this.readVarUint32();\n        var locals = [];\n        for (var i = 0; i < localCount; i++) {\n            if (!this.hasVarIntBytes()) {\n                this._pos = pos;\n                return false;\n            }\n            var count = this.readVarUint32();\n            if (!this.hasVarIntBytes()) {\n                this._pos = pos;\n                return false;\n            }\n            var type = this.readType();\n            locals.push({ count: count, type: type });\n        }\n        var bodyStart = this._pos;\n        this.state = 28 /* BEGIN_FUNCTION_BODY */;\n        this.result = {\n            locals: locals,\n        };\n        this._functionRange = new DataRange(bodyStart, bodyEnd);\n        this._sectionEntriesLeft--;\n        return true;\n    }\n    readSectionHeader() {\n        if (this._pos >= this._length && this._eof) {\n            this._sectionId = -1 /* Unknown */;\n            this._sectionRange = null;\n            this.result = null;\n            this.state = 2 /* END_WASM */;\n            return true;\n        }\n        // TODO: Handle _eof.\n        if (this._pos < this._length - 4) {\n            var magicNumber = this.peekInt32();\n            if (magicNumber === WASM_MAGIC_NUMBER) {\n                this._sectionId = -1 /* Unknown */;\n                this._sectionRange = null;\n                this.result = null;\n                this.state = 2 /* END_WASM */;\n                return true;\n            }\n        }\n        if (!this.hasVarIntBytes())\n            return false;\n        var sectionStart = this._pos;\n        var id = this.readVarUint7();\n        if (!this.hasVarIntBytes()) {\n            this._pos = sectionStart;\n            return false;\n        }\n        var payloadLength = this.readVarUint32();\n        var name = null;\n        var payloadEnd = this._pos + payloadLength;\n        if (id == 0) {\n            if (!this.hasStringBytes()) {\n                this._pos = sectionStart;\n                return false;\n            }\n            name = this.readStringBytes();\n        }\n        this.result = { id: id, name: name };\n        this._sectionId = id;\n        this._sectionRange = new DataRange(this._pos, payloadEnd);\n        this.state = 3 /* BEGIN_SECTION */;\n        return true;\n    }\n    readSectionRawData() {\n        var payloadLength = this._sectionRange.end - this._sectionRange.start;\n        if (!this.hasBytes(payloadLength)) {\n            return false;\n        }\n        this.state = 7 /* SECTION_RAW_DATA */;\n        this.result = this.readBytes(payloadLength);\n        return true;\n    }\n    readSectionBody() {\n        if (this._pos >= this._sectionRange.end) {\n            this.result = null;\n            this.state = 4 /* END_SECTION */;\n            this._sectionId = -1 /* Unknown */;\n            this._sectionRange = null;\n            return true;\n        }\n        var currentSection = this.result;\n        switch (currentSection.id) {\n            case 1 /* Type */:\n                if (!this.hasSectionPayload())\n                    return false;\n                this._sectionEntriesLeft = this.readVarUint32();\n                return this.readTypeEntry();\n            case 2 /* Import */:\n                if (!this.hasSectionPayload())\n                    return false;\n                this._sectionEntriesLeft = this.readVarUint32();\n                return this.readImportEntry();\n            case 7 /* Export */:\n                if (!this.hasSectionPayload())\n                    return false;\n                this._sectionEntriesLeft = this.readVarUint32();\n                return this.readExportEntry();\n            case 3 /* Function */:\n                if (!this.hasSectionPayload())\n                    return false;\n                this._sectionEntriesLeft = this.readVarUint32();\n                return this.readFunctionEntry();\n            case 4 /* Table */:\n                if (!this.hasSectionPayload())\n                    return false;\n                this._sectionEntriesLeft = this.readVarUint32();\n                return this.readTableEntry();\n            case 5 /* Memory */:\n                if (!this.hasSectionPayload())\n                    return false;\n                this._sectionEntriesLeft = this.readVarUint32();\n                return this.readMemoryEntry();\n            case 6 /* Global */:\n                if (!this.hasVarIntBytes())\n                    return false;\n                this._sectionEntriesLeft = this.readVarUint32();\n                return this.readGlobalEntry();\n            case 8 /* Start */:\n                if (!this.hasVarIntBytes())\n                    return false;\n                this.state = 22 /* START_SECTION_ENTRY */;\n                this.result = { index: this.readVarUint32() };\n                return true;\n            case 10 /* Code */:\n                if (!this.hasVarIntBytes())\n                    return false;\n                this._sectionEntriesLeft = this.readVarUint32();\n                this.state = 29 /* READING_FUNCTION_HEADER */;\n                return this.readFunctionBody();\n            case 9 /* Element */:\n                if (!this.hasVarIntBytes())\n                    return false;\n                this._sectionEntriesLeft = this.readVarUint32();\n                return this.readElementEntry();\n            case 11 /* Data */:\n                if (!this.hasVarIntBytes())\n                    return false;\n                this._sectionEntriesLeft = this.readVarUint32();\n                return this.readDataEntry();\n            case 13 /* Event */:\n                if (!this.hasVarIntBytes())\n                    return false;\n                this._sectionEntriesLeft = this.readVarUint32();\n                return this.readEventEntry();\n            case 0 /* Custom */:\n                var customSectionName = bytesToString(currentSection.name);\n                if (customSectionName === \"name\") {\n                    return this.readNameEntry();\n                }\n                if (customSectionName.indexOf(\"reloc.\") === 0) {\n                    return this.readRelocHeader();\n                }\n                if (customSectionName === \"linking\") {\n                    if (!this.hasVarIntBytes())\n                        return false;\n                    this._sectionEntriesLeft = this.readVarUint32();\n                    return this.readLinkingEntry();\n                }\n                if (customSectionName === \"sourceMappingURL\") {\n                    return this.readSourceMappingURL();\n                }\n                return this.readSectionRawData();\n            default:\n                this.error = new Error(`Unsupported section: ${this._sectionId}`);\n                this.state = -1 /* ERROR */;\n                return true;\n        }\n    }\n    read() {\n        switch (this.state) {\n            case 0 /* INITIAL */:\n                if (!this.hasBytes(8))\n                    return false;\n                var magicNumber = this.readUint32();\n                if (magicNumber != WASM_MAGIC_NUMBER) {\n                    this.error = new Error(\"Bad magic number\");\n                    this.state = -1 /* ERROR */;\n                    return true;\n                }\n                var version = this.readUint32();\n                if (version != WASM_SUPPORTED_VERSION &&\n                    version != WASM_SUPPORTED_EXPERIMENTAL_VERSION) {\n                    this.error = new Error(`Bad version number ${version}`);\n                    this.state = -1 /* ERROR */;\n                    return true;\n                }\n                this.result = { magicNumber: magicNumber, version: version };\n                this.state = 1 /* BEGIN_WASM */;\n                return true;\n            case 2 /* END_WASM */:\n                this.result = null;\n                this.state = 1 /* BEGIN_WASM */;\n                if (this.hasMoreBytes()) {\n                    this.state = 0 /* INITIAL */;\n                    return this.read();\n                }\n                return false;\n            case -1 /* ERROR */:\n                return true;\n            case 1 /* BEGIN_WASM */:\n            case 4 /* END_SECTION */:\n                return this.readSectionHeader();\n            case 3 /* BEGIN_SECTION */:\n                return this.readSectionBody();\n            case 5 /* SKIPPING_SECTION */:\n                if (!this.hasSectionPayload()) {\n                    return false;\n                }\n                this.state = 4 /* END_SECTION */;\n                this._pos = this._sectionRange.end;\n                this._sectionId = -1 /* Unknown */;\n                this._sectionRange = null;\n                this.result = null;\n                return true;\n            case 32 /* SKIPPING_FUNCTION_BODY */:\n                this.state = 31 /* END_FUNCTION_BODY */;\n                this._pos = this._functionRange.end;\n                this._functionRange = null;\n                this.result = null;\n                return true;\n            case 11 /* TYPE_SECTION_ENTRY */:\n                return this.readTypeEntry();\n            case 12 /* IMPORT_SECTION_ENTRY */:\n                return this.readImportEntry();\n            case 17 /* EXPORT_SECTION_ENTRY */:\n                return this.readExportEntry();\n            case 13 /* FUNCTION_SECTION_ENTRY */:\n                return this.readFunctionEntry();\n            case 14 /* TABLE_SECTION_ENTRY */:\n                return this.readTableEntry();\n            case 15 /* MEMORY_SECTION_ENTRY */:\n                return this.readMemoryEntry();\n            case 23 /* EVENT_SECTION_ENTRY */:\n                return this.readEventEntry();\n            case 16 /* GLOBAL_SECTION_ENTRY */:\n            case 40 /* END_GLOBAL_SECTION_ENTRY */:\n                return this.readGlobalEntry();\n            case 39 /* BEGIN_GLOBAL_SECTION_ENTRY */:\n                return this.readInitExpressionBody();\n            case 20 /* ELEMENT_SECTION_ENTRY */:\n            case 35 /* END_ELEMENT_SECTION_ENTRY */:\n                return this.readElementEntry();\n            case 33 /* BEGIN_ELEMENT_SECTION_ENTRY */:\n                if (isActiveElementSegmentType(this._segmentType)) {\n                    return this.readOffsetExpressionBody();\n                }\n                else {\n                    // passive or declared element segment\n                    return this.readElementEntryBody();\n                }\n            case 34 /* ELEMENT_SECTION_ENTRY_BODY */:\n                if (!this.hasVarIntBytes())\n                    return false;\n                this._segmentEntriesLeft = this.readVarUint32();\n                if (this._segmentEntriesLeft === 0) {\n                    this.state = 35 /* END_ELEMENT_SECTION_ENTRY */;\n                    this.result = null;\n                    return true;\n                }\n                return this.readInitExpressionBody();\n            case 18 /* DATA_SECTION_ENTRY */:\n            case 38 /* END_DATA_SECTION_ENTRY */:\n                return this.readDataEntry();\n            case 36 /* BEGIN_DATA_SECTION_ENTRY */:\n                if (isActiveDataSegmentType(this._segmentType)) {\n                    return this.readOffsetExpressionBody();\n                }\n                else {\n                    // passive data segment\n                    return this.readDataEntryBody();\n                }\n            case 37 /* DATA_SECTION_ENTRY_BODY */:\n                this.state = 38 /* END_DATA_SECTION_ENTRY */;\n                this.result = null;\n                return true;\n            case 27 /* END_INIT_EXPRESSION_BODY */:\n                switch (this._sectionId) {\n                    case 6 /* Global */:\n                        this.state = 40 /* END_GLOBAL_SECTION_ENTRY */;\n                        return true;\n                    case 9 /* Element */:\n                        if (--this._segmentEntriesLeft > 0) {\n                            return this.readInitExpressionBody();\n                        }\n                        this.state = 35 /* END_ELEMENT_SECTION_ENTRY */;\n                        this.result = null;\n                        return true;\n                }\n                this.error = new Error(`Unexpected section type: ${this._sectionId}`);\n                this.state = -1 /* ERROR */;\n                return true;\n            case 46 /* END_OFFSET_EXPRESSION_BODY */:\n                if (this._sectionId === 11 /* Data */) {\n                    return this.readDataEntryBody();\n                }\n                else {\n                    return this.readElementEntryBody();\n                }\n            case 19 /* NAME_SECTION_ENTRY */:\n                return this.readNameEntry();\n            case 41 /* RELOC_SECTION_HEADER */:\n                if (!this.hasVarIntBytes())\n                    return false;\n                this._sectionEntriesLeft = this.readVarUint32();\n                return this.readRelocEntry();\n            case 21 /* LINKING_SECTION_ENTRY */:\n                return this.readLinkingEntry();\n            case 43 /* SOURCE_MAPPING_URL */:\n                this.state = 4 /* END_SECTION */;\n                this.result = null;\n                return true;\n            case 42 /* RELOC_SECTION_ENTRY */:\n                return this.readRelocEntry();\n            case 29 /* READING_FUNCTION_HEADER */:\n            case 31 /* END_FUNCTION_BODY */:\n                return this.readFunctionBody();\n            case 28 /* BEGIN_FUNCTION_BODY */:\n                this.state = 30 /* CODE_OPERATOR */;\n                return this.readCodeOperator();\n            case 25 /* BEGIN_INIT_EXPRESSION_BODY */:\n                this.state = 26 /* INIT_EXPRESSION_OPERATOR */;\n                return this.readCodeOperator();\n            case 44 /* BEGIN_OFFSET_EXPRESSION_BODY */:\n                this.state = 45 /* OFFSET_EXPRESSION_OPERATOR */;\n                return this.readCodeOperator();\n            case 30 /* CODE_OPERATOR */:\n            case 26 /* INIT_EXPRESSION_OPERATOR */:\n            case 45 /* OFFSET_EXPRESSION_OPERATOR */:\n                return this.readCodeOperator();\n            case 6 /* READING_SECTION_RAW_DATA */:\n                return this.readSectionRawData();\n            case 22 /* START_SECTION_ENTRY */:\n            case 7 /* SECTION_RAW_DATA */:\n                this.state = 4 /* END_SECTION */;\n                this.result = null;\n                return true;\n            default:\n                this.error = new Error(`Unsupported state: ${this.state}`);\n                this.state = -1 /* ERROR */;\n                return true;\n        }\n    }\n    skipSection() {\n        if (this.state === -1 /* ERROR */ ||\n            this.state === 0 /* INITIAL */ ||\n            this.state === 4 /* END_SECTION */ ||\n            this.state === 1 /* BEGIN_WASM */ ||\n            this.state === 2 /* END_WASM */)\n            return;\n        this.state = 5 /* SKIPPING_SECTION */;\n    }\n    skipFunctionBody() {\n        if (this.state !== 28 /* BEGIN_FUNCTION_BODY */ &&\n            this.state !== 30 /* CODE_OPERATOR */)\n            return;\n        this.state = 32 /* SKIPPING_FUNCTION_BODY */;\n    }\n    skipInitExpression() {\n        while (this.state === 26 /* INIT_EXPRESSION_OPERATOR */)\n            this.readCodeOperator();\n    }\n    fetchSectionRawData() {\n        if (this.state !== 3 /* BEGIN_SECTION */) {\n            this.error = new Error(`Unsupported state: ${this.state}`);\n            this.state = -1 /* ERROR */;\n            return;\n        }\n        this.state = 6 /* READING_SECTION_RAW_DATA */;\n    }\n}\nexport var bytesToString;\nif (typeof TextDecoder !== \"undefined\") {\n    try {\n        bytesToString = (function () {\n            var utf8Decoder = new TextDecoder(\"utf-8\");\n            utf8Decoder.decode(new Uint8Array([97, 208, 144]));\n            return (b) => utf8Decoder.decode(b);\n        })();\n    }\n    catch (_) {\n        /* ignore */\n    }\n}\nif (!bytesToString) {\n    bytesToString = (b) => {\n        var str = String.fromCharCode.apply(null, b);\n        return decodeURIComponent(escape(str));\n    };\n}\n//# sourceMappingURL=WasmParser.js.map"],
  "mappings": "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AAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,UAAU,IAAI,KAAK,IAAI;AACjD,EAAAA,cAAaA,cAAa,UAAU,IAAI,KAAK,IAAI;AACjD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,YAAY,IAAI,KAAK,IAAI;AACnD,EAAAA,cAAaA,cAAa,UAAU,IAAI,KAAK,IAAI;AACjD,EAAAA,cAAaA,cAAa,UAAU,IAAI,KAAK,IAAI;AACjD,EAAAA,cAAaA,cAAa,UAAU,IAAI,KAAK,IAAI;AACjD,EAAAA,cAAaA,cAAa,UAAU,IAAI,KAAK,IAAI;AACjD,EAAAA,cAAaA,cAAa,UAAU,IAAI,KAAK,IAAI;AACjD,EAAAA,cAAaA,cAAa,UAAU,IAAI,KAAK,IAAI;AACjD,EAAAA,cAAaA,cAAa,UAAU,IAAI,KAAK,IAAI;AACjD,EAAAA,cAAaA,cAAa,UAAU,IAAI,KAAK,IAAI;AACjD,EAAAA,cAAaA,cAAa,UAAU,IAAI,KAAK,IAAI;AACjD,EAAAA,cAAaA,cAAa,UAAU,IAAI,KAAK,IAAI;AACjD,EAAAA,cAAaA,cAAa,UAAU,IA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AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,oBAAY,KAAK,UAAU;AAC3B;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAA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;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,0BAAoB;AACpB;AAAA,IACJ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,0BAAoB;AACpB;AAAA,IACJ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,0BAAoB;AACpB;AAAA,IACJ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,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",
  "names": ["SectionCode", "OperatorCode", "ExternalKind", "TypeKind", "RelocType", "LinkingType", "NameType", "BinaryReaderState", "DataSegmentType", "DataMode", "ElementSegmentType", "ElementMode", "LabelMode", "backrefLabel", "elementName", "result", "tableName", "index"]
}
