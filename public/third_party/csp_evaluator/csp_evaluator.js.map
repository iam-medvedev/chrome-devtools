{
  "version": 3,
  "sources": ["../../../../../../front_end/third_party/csp_evaluator/package/evaluator.ts", "../../../../../../front_end/third_party/csp_evaluator/package/finding.ts", "../../../../../../front_end/third_party/csp_evaluator/package/csp.ts", "../../../../../../front_end/third_party/csp_evaluator/package/checks/parser_checks.ts", "../../../../../../front_end/third_party/csp_evaluator/package/allowlist_bypasses/angular.ts", "../../../../../../front_end/third_party/csp_evaluator/package/allowlist_bypasses/flash.ts", "../../../../../../front_end/third_party/csp_evaluator/package/allowlist_bypasses/jsonp.ts", "../../../../../../front_end/third_party/csp_evaluator/package/utils.ts", "../../../../../../front_end/third_party/csp_evaluator/package/checks/security_checks.ts", "../../../../../../front_end/third_party/csp_evaluator/package/checks/strictcsp_checks.ts", "../../../../../../front_end/third_party/csp_evaluator/package/parser.ts"],
  "sourcesContent": ["/**\n * @author lwe@google.com (Lukas Weichselbaum)\n *\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CheckerFunction} from './checks/checker.js';\nimport * as parserChecks from './checks/parser_checks.js';\nimport * as securityChecks from './checks/security_checks.js';\nimport * as strictcspChecks from './checks/strictcsp_checks.js';\nimport * as csp from './csp.js';\nimport {Csp, Version} from './csp.js';\nimport {Finding} from './finding.js';\n\n\n\n/**\n * A class to hold a CSP Evaluator.\n * Evaluates a parsed CSP and reports security findings.\n * @unrestricted\n */\nexport class CspEvaluator {\n  version: Version;\n  csp: Csp;\n\n  /**\n   * List of findings reported by checks.\n   *\n   */\n  findings: Finding[] = [];\n  /**\n   * @param parsedCsp A parsed Content Security Policy.\n   * @param cspVersion CSP version to apply checks for.\n   */\n  constructor(parsedCsp: Csp, cspVersion?: Version) {\n    /**\n     * CSP version.\n     */\n    this.version = cspVersion || csp.Version.CSP3;\n\n    /**\n     * Parsed CSP.\n     */\n    this.csp = parsedCsp;\n  }\n\n  /**\n   * Evaluates a parsed CSP against a set of checks\n   * @param parsedCspChecks list of checks to run on the parsed CSP (i.e.\n   *     checks like backward compatibility checks, which are independent of the\n   *     actual CSP version).\n   * @param effectiveCspChecks list of checks to run on the effective CSP.\n   * @return List of Findings.\n   * @export\n   */\n  evaluate(\n      parsedCspChecks?: CheckerFunction[],\n      effectiveCspChecks?: CheckerFunction[]): Finding[] {\n    this.findings = [];\n    const checks = effectiveCspChecks || DEFAULT_CHECKS;\n\n    // We're applying checks on the policy as it would be seen by a browser\n    // supporting a specific version of CSP.\n    // For example a browser supporting only CSP1 will ignore nonces and\n    // therefore 'unsafe-inline' would not get ignored if a policy has nonces.\n    const effectiveCsp = this.csp.getEffectiveCsp(this.version, this.findings);\n\n    // Checks independent of CSP version.\n    if (parsedCspChecks) {\n      for (const check of parsedCspChecks) {\n        this.findings = this.findings.concat(check(this.csp));\n      }\n    }\n\n    // Checks depenent on CSP version.\n    for (const check of checks) {\n      this.findings = this.findings.concat(check(effectiveCsp));\n    }\n\n    return this.findings;\n  }\n}\n\n\n/**\n * Set of default checks to run.\n */\nexport const DEFAULT_CHECKS: CheckerFunction[] = [\n  securityChecks.checkScriptUnsafeInline, securityChecks.checkScriptUnsafeEval,\n  securityChecks.checkPlainUrlSchemes, securityChecks.checkWildcards,\n  securityChecks.checkMissingDirectives,\n  securityChecks.checkScriptAllowlistBypass,\n  securityChecks.checkFlashObjectAllowlistBypass, securityChecks.checkIpSource,\n  securityChecks.checkNonceLength, securityChecks.checkSrcHttp,\n  securityChecks.checkDeprecatedDirective, parserChecks.checkUnknownDirective,\n  parserChecks.checkMissingSemicolon, parserChecks.checkInvalidKeyword\n];\n\n\n/**\n * Strict CSP and backward compatibility checks.\n */\nexport const STRICTCSP_CHECKS: CheckerFunction[] = [\n  strictcspChecks.checkStrictDynamic,\n  strictcspChecks.checkStrictDynamicNotStandalone,\n  strictcspChecks.checkUnsafeInlineFallback,\n  strictcspChecks.checkAllowlistFallback,\n  strictcspChecks.checkRequiresTrustedTypesForScripts\n];\n", "/**\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author lwe@google.com (Lukas Weichselbaum)\n */\n\n\n/**\n * A CSP Finding is returned by a CSP check and can either reference a directive\n * value or a directive. If a directive value is referenced opt_index must be\n * provided.\n * @unrestricted\n */\nexport class Finding {\n  /**\n   * @param type Type of the finding.\n   * @param description Description of the finding.\n   * @param severity Severity of the finding.\n   * @param directive The CSP directive in which the finding occurred.\n   * @param value The directive value, if exists.\n   */\n  constructor(\n      public type: Type, public description: string, public severity: Severity,\n      public directive: string, public value?: string) {}\n\n  /**\n   * Returns the highest severity of a list of findings.\n   * @param findings List of findings.\n   * @return highest severity of a list of findings.\n   */\n  static getHighestSeverity(findings: Finding[]): Severity {\n    if (findings.length === 0) {\n      return Severity.NONE;\n    }\n\n    const severities = findings.map((finding) => finding.severity);\n    const min = (prev: Severity, cur: Severity) => prev < cur ? prev : cur;\n    return severities.reduce(min, Severity.NONE);\n  }\n\n  equals(obj: unknown): boolean {\n    if (!(obj instanceof Finding)) {\n      return false;\n    }\n    return obj.type === this.type && obj.description === this.description &&\n        obj.severity === this.severity && obj.directive === this.directive &&\n        obj.value === this.value;\n  }\n}\n\n\n/**\n * Finding severities.\n */\nexport enum Severity {\n  HIGH = 10,\n  SYNTAX = 20,\n  MEDIUM = 30,\n  HIGH_MAYBE = 40,\n  STRICT_CSP = 45,\n  MEDIUM_MAYBE = 50,\n  INFO = 60,\n  NONE = 100\n}\n\n\n/**\n * Finding types for evluator checks.\n */\nexport enum Type {\n  // Parser checks\n  MISSING_SEMICOLON = 100,\n  UNKNOWN_DIRECTIVE,\n  INVALID_KEYWORD,\n  NONCE_CHARSET = 106,\n\n  // Security cheks\n  MISSING_DIRECTIVES = 300,\n  SCRIPT_UNSAFE_INLINE,\n  SCRIPT_UNSAFE_EVAL,\n  PLAIN_URL_SCHEMES,\n  PLAIN_WILDCARD,\n  SCRIPT_ALLOWLIST_BYPASS,\n  OBJECT_ALLOWLIST_BYPASS,\n  NONCE_LENGTH,\n  IP_SOURCE,\n  DEPRECATED_DIRECTIVE,\n  SRC_HTTP,\n\n  // Strict dynamic and backward compatibility checks\n  STRICT_DYNAMIC = 400,\n  STRICT_DYNAMIC_NOT_STANDALONE,\n  NONCE_HASH,\n  UNSAFE_INLINE_FALLBACK,\n  ALLOWLIST_FALLBACK,\n  IGNORED,\n\n  // Trusted Types checks\n  REQUIRE_TRUSTED_TYPES_FOR_SCRIPTS = 500,\n\n  // Lighthouse checks\n  REPORTING_DESTINATION_MISSING = 600,\n  REPORT_TO_ONLY,\n}\n", "/**\n * @fileoverview CSP definitions and helper functions.\n * @author lwe@google.com (Lukas Weichselbaum)\n *\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {Finding, Severity, Type} from './finding.js';\n\n/**\n * Content Security Policy object.\n * List of valid CSP directives:\n *  - http://www.w3.org/TR/CSP2/#directives\n *  - https://www.w3.org/TR/upgrade-insecure-requests/\n */\nexport class Csp {\n  directives: Record<string, string[]|undefined> = {};\n\n  /**\n   * Clones a CSP object.\n   * @return clone of parsedCsp.\n   */\n  clone(): Csp {\n    const clone = new Csp();\n    for (const [directive, directiveValues] of Object.entries(\n             this.directives)) {\n      if (directiveValues) {\n        clone.directives[directive] = [...directiveValues];\n      }\n    }\n    return clone;\n  }\n\n  /**\n   * Converts this CSP back into a string.\n   * @return CSP string.\n   */\n  convertToString(): string {\n    let cspString = '';\n\n    for (const [directive, directiveValues] of Object.entries(\n             this.directives)) {\n      cspString += directive;\n      if (directiveValues !== undefined) {\n        for (let value, i = 0; (value = directiveValues[i]); i++) {\n          cspString += ' ';\n          cspString += value;\n        }\n      }\n      cspString += '; ';\n    }\n\n    return cspString;\n  }\n\n  /**\n   * Returns CSP as it would be seen by a UA supporting a specific CSP version.\n   * @param cspVersion CSP.\n   * @param optFindings findings about ignored directive values will be added\n   *     to this array, if passed. (e.g. CSP2 ignores 'unsafe-inline' in\n   *     presence of a nonce or a hash)\n   * @return The effective CSP.\n   */\n  getEffectiveCsp(cspVersion: Version, optFindings?: Finding[]): Csp {\n    const findings = optFindings || [];\n    const effectiveCsp = this.clone();\n    const directive = effectiveCsp.getEffectiveDirective(Directive.SCRIPT_SRC);\n    const values = this.directives[directive] || [];\n    const effectiveCspValues = effectiveCsp.directives[directive];\n\n    if (effectiveCspValues &&\n        (effectiveCsp.policyHasScriptNonces() ||\n         effectiveCsp.policyHasScriptHashes())) {\n      if (cspVersion >= Version.CSP2) {\n        // Ignore 'unsafe-inline' in CSP >= v2, if a nonce or a hash is present.\n        if (values.includes(Keyword.UNSAFE_INLINE)) {\n          arrayRemove(effectiveCspValues, Keyword.UNSAFE_INLINE);\n          findings.push(new Finding(\n              Type.IGNORED,\n              'unsafe-inline is ignored if a nonce or a hash is present. ' +\n                  '(CSP2 and above)',\n              Severity.NONE, directive, Keyword.UNSAFE_INLINE));\n        }\n      } else {\n        // remove nonces and hashes (not supported in CSP < v2).\n        for (const value of values) {\n          if (value.startsWith('\\'nonce-') || value.startsWith('\\'sha')) {\n            arrayRemove(effectiveCspValues, value);\n          }\n        }\n      }\n    }\n\n    if (effectiveCspValues && this.policyHasStrictDynamic()) {\n      // Ignore allowlist in CSP >= v3 in presence of 'strict-dynamic'.\n      if (cspVersion >= Version.CSP3) {\n        for (const value of values) {\n          // Because of 'strict-dynamic' all host-source and scheme-source\n          // expressions, as well as the \"'unsafe-inline'\" and \"'self'\n          // keyword-sources will be ignored.\n          // https://w3c.github.io/webappsec-csp/#strict-dynamic-usage\n          if (!value.startsWith('\\'') || value === Keyword.SELF ||\n              value === Keyword.UNSAFE_INLINE) {\n            arrayRemove(effectiveCspValues, value);\n            findings.push(new Finding(\n                Type.IGNORED,\n                'Because of strict-dynamic this entry is ignored in CSP3 and above',\n                Severity.NONE, directive, value));\n          }\n        }\n      } else {\n        // strict-dynamic not supported.\n        arrayRemove(effectiveCspValues, Keyword.STRICT_DYNAMIC);\n      }\n    }\n\n    if (cspVersion < Version.CSP3) {\n      // Remove CSP3 directives from pre-CSP3 policies.\n      // https://w3c.github.io/webappsec-csp/#changes-from-level-2\n      delete effectiveCsp.directives[Directive.REPORT_TO];\n      delete effectiveCsp.directives[Directive.WORKER_SRC];\n      delete effectiveCsp.directives[Directive.MANIFEST_SRC];\n      delete effectiveCsp.directives[Directive.TRUSTED_TYPES];\n      delete effectiveCsp.directives[Directive.REQUIRE_TRUSTED_TYPES_FOR];\n    }\n\n    return effectiveCsp;\n  }\n\n  /**\n   * Returns default-src if directive is a fetch directive and is not present in\n   * this CSP. Otherwise the provided directive is returned.\n   * @param directive CSP.\n   * @return The effective directive.\n   */\n  getEffectiveDirective(directive: string): string {\n    // Only fetch directives default to default-src.\n    if (!(directive in this.directives) &&\n        FETCH_DIRECTIVES.includes(directive as Directive)) {\n      return Directive.DEFAULT_SRC;\n    }\n\n    return directive;\n  }\n\n  /**\n   * Returns the passed directives if present in this CSP or default-src\n   * otherwise.\n   * @param directives CSP.\n   * @return The effective directives.\n   */\n  getEffectiveDirectives(directives: string[]): string[] {\n    const effectiveDirectives =\n        new Set(directives.map((val) => this.getEffectiveDirective(val)));\n    return [...effectiveDirectives];\n  }\n\n  /**\n   * Checks if this CSP is using nonces for scripts.\n   * @return true, if this CSP is using script nonces.\n   */\n  policyHasScriptNonces(): boolean {\n    const directiveName = this.getEffectiveDirective(Directive.SCRIPT_SRC);\n    const values = this.directives[directiveName] || [];\n    return values.some((val) => isNonce(val));\n  }\n\n  /**\n   * Checks if this CSP is using hashes for scripts.\n   * @return true, if this CSP is using script hashes.\n   */\n  policyHasScriptHashes(): boolean {\n    const directiveName = this.getEffectiveDirective(Directive.SCRIPT_SRC);\n    const values = this.directives[directiveName] || [];\n    return values.some((val) => isHash(val));\n  }\n\n  /**\n   * Checks if this CSP is using strict-dynamic.\n   * @return true, if this CSP is using CSP nonces.\n   */\n  policyHasStrictDynamic(): boolean {\n    const directiveName = this.getEffectiveDirective(Directive.SCRIPT_SRC);\n    const values = this.directives[directiveName] || [];\n    return values.includes(Keyword.STRICT_DYNAMIC);\n  }\n}\n\n\n/**\n * CSP directive source keywords.\n */\nexport enum Keyword {\n  SELF = '\\'self\\'',\n  NONE = '\\'none\\'',\n  UNSAFE_INLINE = '\\'unsafe-inline\\'',\n  UNSAFE_EVAL = '\\'unsafe-eval\\'',\n  WASM_EVAL = '\\'wasm-eval\\'',\n  WASM_UNSAFE_EVAL = '\\'wasm-unsafe-eval\\'',\n  STRICT_DYNAMIC = '\\'strict-dynamic\\'',\n  UNSAFE_HASHED_ATTRIBUTES = '\\'unsafe-hashed-attributes\\'',\n  UNSAFE_HASHES = '\\'unsafe-hashes\\'',\n  REPORT_SAMPLE = '\\'report-sample\\'',\n  BLOCK = '\\'block\\'',\n  ALLOW = '\\'allow\\'',\n}\n\n\n/**\n * CSP directive source keywords.\n */\nexport enum TrustedTypesSink {\n  SCRIPT = '\\'script\\''\n}\n\n\n/**\n * CSP v3 directives.\n * List of valid CSP directives:\n *  - http://www.w3.org/TR/CSP2/#directives\n *  - https://www.w3.org/TR/upgrade-insecure-requests/\n *\n */\nexport enum Directive {\n  // Fetch directives\n  CHILD_SRC = 'child-src',\n  CONNECT_SRC = 'connect-src',\n  DEFAULT_SRC = 'default-src',\n  FONT_SRC = 'font-src',\n  FRAME_SRC = 'frame-src',\n  IMG_SRC = 'img-src',\n  MEDIA_SRC = 'media-src',\n  OBJECT_SRC = 'object-src',\n  SCRIPT_SRC = 'script-src',\n  SCRIPT_SRC_ATTR = 'script-src-attr',\n  SCRIPT_SRC_ELEM = 'script-src-elem',\n  STYLE_SRC = 'style-src',\n  STYLE_SRC_ATTR = 'style-src-attr',\n  STYLE_SRC_ELEM = 'style-src-elem',\n  PREFETCH_SRC = 'prefetch-src',\n\n  MANIFEST_SRC = 'manifest-src',\n  WORKER_SRC = 'worker-src',\n\n  // Document directives\n  BASE_URI = 'base-uri',\n  PLUGIN_TYPES = 'plugin-types',\n  SANDBOX = 'sandbox',\n  DISOWN_OPENER = 'disown-opener',\n\n  // Navigation directives\n  FORM_ACTION = 'form-action',\n  FRAME_ANCESTORS = 'frame-ancestors',\n  NAVIGATE_TO = 'navigate-to',\n\n  // Reporting directives\n  REPORT_TO = 'report-to',\n  REPORT_URI = 'report-uri',\n\n  // Other directives\n  BLOCK_ALL_MIXED_CONTENT = 'block-all-mixed-content',\n  UPGRADE_INSECURE_REQUESTS = 'upgrade-insecure-requests',\n  REFLECTED_XSS = 'reflected-xss',\n  REFERRER = 'referrer',\n  REQUIRE_SRI_FOR = 'require-sri-for',\n  TRUSTED_TYPES = 'trusted-types',\n  // https://github.com/WICG/trusted-types\n  REQUIRE_TRUSTED_TYPES_FOR = 'require-trusted-types-for',\n  WEBRTC = 'webrtc',\n}\n\n/**\n * CSP v3 fetch directives.\n * Fetch directives control the locations from which resources may be loaded.\n * https://w3c.github.io/webappsec-csp/#directives-fetch\n *\n */\nexport const FETCH_DIRECTIVES: Directive[] = [\n  Directive.CHILD_SRC, Directive.CONNECT_SRC, Directive.DEFAULT_SRC,\n  Directive.FONT_SRC, Directive.FRAME_SRC, Directive.IMG_SRC,\n  Directive.MANIFEST_SRC, Directive.MEDIA_SRC, Directive.OBJECT_SRC,\n  Directive.SCRIPT_SRC, Directive.SCRIPT_SRC_ATTR, Directive.SCRIPT_SRC_ELEM,\n  Directive.STYLE_SRC, Directive.STYLE_SRC_ATTR, Directive.STYLE_SRC_ELEM,\n  Directive.WORKER_SRC\n];\n\n/**\n * CSP version.\n */\nexport enum Version {\n  CSP1 = 1,\n  CSP2,\n  CSP3\n}\n\n\n/**\n * Checks if a string is a valid CSP directive.\n * @param directive value to check.\n * @return True if directive is a valid CSP directive.\n */\nexport function isDirective(directive: string): boolean {\n  return Object.values(Directive).includes(directive as Directive);\n}\n\n\n/**\n * Checks if a string is a valid CSP keyword.\n * @param keyword value to check.\n * @return True if keyword is a valid CSP keyword.\n */\nexport function isKeyword(keyword: string): boolean {\n  return Object.values(Keyword).includes(keyword as Keyword);\n}\n\n\n/**\n * Checks if a string is a valid URL scheme.\n * Scheme part + \":\"\n * For scheme part see https://tools.ietf.org/html/rfc3986#section-3.1\n * @param urlScheme value to check.\n * @return True if urlScheme has a valid scheme.\n */\nexport function isUrlScheme(urlScheme: string): boolean {\n  const pattern = new RegExp('^[a-zA-Z][+a-zA-Z0-9.-]*:$');\n  return pattern.test(urlScheme);\n}\n\n\n/**\n * A regex pattern to check nonce prefix and Base64 formatting of a nonce value.\n */\nexport const STRICT_NONCE_PATTERN =\n    new RegExp('^\\'nonce-[a-zA-Z0-9+/_-]+[=]{0,2}\\'$');\n\n\n/** A regex pattern for checking if nonce prefix. */\nexport const NONCE_PATTERN = new RegExp('^\\'nonce-(.+)\\'$');\n\n\n/**\n * Checks if a string is a valid CSP nonce.\n * See http://www.w3.org/TR/CSP2/#nonce_value\n * @param nonce value to check.\n * @param strictCheck Check if the nonce uses the base64 charset.\n * @return True if nonce is has a valid CSP nonce.\n */\nexport function isNonce(nonce: string, strictCheck?: boolean): boolean {\n  const pattern = strictCheck ? STRICT_NONCE_PATTERN : NONCE_PATTERN;\n  return pattern.test(nonce);\n}\n\n\n/**\n * A regex pattern to check hash prefix and Base64 formatting of a hash value.\n */\nexport const STRICT_HASH_PATTERN =\n    new RegExp('^\\'(sha256|sha384|sha512)-[a-zA-Z0-9+/]+[=]{0,2}\\'$');\n\n\n/** A regex pattern to check hash prefix. */\nexport const HASH_PATTERN = new RegExp('^\\'(sha256|sha384|sha512)-(.+)\\'$');\n\n\n/**\n * Checks if a string is a valid CSP hash.\n * See http://www.w3.org/TR/CSP2/#hash_value\n * @param hash value to check.\n * @param strictCheck Check if the hash uses the base64 charset.\n * @return True if hash is has a valid CSP hash.\n */\nexport function isHash(hash: string, strictCheck?: boolean): boolean {\n  const pattern = strictCheck ? STRICT_HASH_PATTERN : HASH_PATTERN;\n  return pattern.test(hash);\n}\n\n\n/**\n * Class to represent all generic CSP errors.\n */\nexport class CspError extends Error {\n  /**\n   * @param message An optional error message.\n   */\n  constructor(message?: string) {\n    super(message);\n  }\n}\n\n/**\n * Mutate the given array to remove the first instance of the given item\n */\nfunction arrayRemove<T>(arr: T[], item: T): void {\n  if (arr.includes(item)) {\n    const idx = arr.findIndex(elem => item === elem);\n    arr.splice(idx, 1);\n  }\n}\n", "/**\n * @fileoverview Collection of CSP parser checks which can be used to find\n * common syntax mistakes like missing semicolons, invalid directives or\n * invalid keywords.\n * @author lwe@google.com (Lukas Weichselbaum)\n *\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as csp from '../csp.js';\nimport {Csp, Keyword} from '../csp.js';\n\nimport {Finding, Severity, Type} from '../finding.js';\n\n\n/**\n * Checks if the csp contains invalid directives.\n *\n * Example policy where this check would trigger:\n *  foobar-src foo.bar\n *\n * @param parsedCsp A parsed csp.\n */\nexport function checkUnknownDirective(parsedCsp: Csp): Finding[] {\n  const findings: Finding[] = [];\n\n  for (const directive of Object.keys(parsedCsp.directives)) {\n    if (csp.isDirective(directive)) {\n      // Directive is known.\n      continue;\n    }\n\n    if (directive.endsWith(':')) {\n      findings.push(new Finding(\n          Type.UNKNOWN_DIRECTIVE, 'CSP directives don\\'t end with a colon.',\n          Severity.SYNTAX, directive));\n    } else {\n      findings.push(new Finding(\n          Type.UNKNOWN_DIRECTIVE,\n          'Directive \"' + directive + '\" is not a known CSP directive.',\n          Severity.SYNTAX, directive));\n    }\n  }\n\n  return findings;\n}\n\n\n/**\n * Checks if semicolons are missing in the csp.\n *\n * Example policy where this check would trigger (missing semicolon before\n * start of object-src):\n *  script-src foo.bar object-src 'none'\n *\n * @param parsedCsp A parsed csp.\n */\nexport function checkMissingSemicolon(parsedCsp: Csp): Finding[] {\n  const findings: Finding[] = [];\n\n  for (const [directive, directiveValues] of Object.entries(\n           parsedCsp.directives)) {\n    if (directiveValues === undefined) {\n      continue;\n    }\n    for (const value of directiveValues) {\n      // If we find a known directive inside a directive value, it is very\n      // likely that a semicolon was forgoten.\n      if (csp.isDirective(value)) {\n        findings.push(new Finding(\n            Type.MISSING_SEMICOLON,\n            'Did you forget the semicolon? ' +\n                '\"' + value + '\" seems to be a directive, not a value.',\n            Severity.SYNTAX, directive, value));\n      }\n    }\n  }\n\n  return findings;\n}\n\n\n/**\n * Checks if csp contains invalid keywords.\n *\n * Example policy where this check would trigger:\n *  script-src 'notAkeyword'\n *\n * @param parsedCsp A parsed csp.\n */\nexport function checkInvalidKeyword(parsedCsp: Csp): Finding[] {\n  const findings: Finding[] = [];\n  const keywordsNoTicks =\n      Object.values(Keyword).map((k) => k.replace(/'/g, ''));\n\n  for (const [directive, directiveValues] of Object.entries(\n           parsedCsp.directives)) {\n    if (directiveValues === undefined) {\n      continue;\n    }\n    for (const value of directiveValues) {\n      // Check if single ticks have been forgotten.\n      if (keywordsNoTicks.some((k) => k === value) ||\n          value.startsWith('nonce-') ||\n          value.match(/^(sha256|sha384|sha512)-/)) {\n        findings.push(new Finding(\n            Type.INVALID_KEYWORD,\n            'Did you forget to surround \"' + value + '\" with single-ticks?',\n            Severity.SYNTAX, directive, value));\n        continue;\n      }\n\n      // Continue, if the value doesn't start with single tick.\n      // All CSP keywords start with a single tick.\n      if (!value.startsWith('\\'')) {\n        continue;\n      }\n\n      if (directive === csp.Directive.REQUIRE_TRUSTED_TYPES_FOR) {\n        // Continue, if it's an allowed Trusted Types sink.\n        if (value === csp.TrustedTypesSink.SCRIPT) {\n          continue;\n        }\n      } else if (directive === csp.Directive.TRUSTED_TYPES) {\n        // Continue, if it's an allowed Trusted Types keyword.\n        if (value === '\\'allow-duplicates\\'' || value === '\\'none\\'') {\n          continue;\n        }\n      } else {\n        // Continue, if it's a valid keyword.\n        if (csp.isKeyword(value) || csp.isHash(value) || csp.isNonce(value)) {\n          continue;\n        }\n      }\n\n      findings.push(new Finding(\n          Type.INVALID_KEYWORD, value + ' seems to be an invalid CSP keyword.',\n          Severity.SYNTAX, directive, value));\n    }\n  }\n\n  return findings;\n}\n\n", "/**\n * @fileoverview Collection of popular sites/CDNs hosting Angular.\n * @author lwe@google.com (Lukas Weichselbaum)\n *\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Angular libraries on commonly allowlisted origins (e.g. CDNs) that would\n * allow a CSP bypass.\n * Only most common paths are listed here. Hence there might still be other\n * paths on these domains that would allow a bypass.\n */\nexport const URLS: string[] = [\n  '//gstatic.com/fsn/angular_js-bundle1.js',\n  '//www.gstatic.com/fsn/angular_js-bundle1.js',\n  '//www.googleadservices.com/pageadimg/imgad',\n  '//yandex.st/angularjs/1.2.16/angular-cookies.min.js',\n  '//yastatic.net/angularjs/1.2.23/angular.min.js',\n  '//yuedust.yuedu.126.net/js/components/angular/angular.js',\n  '//art.jobs.netease.com/script/angular.js',\n  '//csu-c45.kxcdn.com/angular/angular.js',\n  '//elysiumwebsite.s3.amazonaws.com/uploads/blog-media/rockstar/angular.min.js',\n  '//inno.blob.core.windows.net/new/libs/AngularJS/1.2.1/angular.min.js',\n  '//gift-talk.kakao.com/public/javascripts/angular.min.js',\n  '//ajax.googleapis.com/ajax/libs/angularjs/1.2.0rc1/angular-route.min.js',\n  '//master-sumok.ru/vendors/angular/angular-cookies.js',\n  '//ayicommon-a.akamaihd.net/static/vendor/angular-1.4.2.min.js',\n  '//pangxiehaitao.com/framework/angular-1.3.9/angular-animate.min.js',\n  '//cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.16/angular.min.js',\n  '//96fe3ee995e96e922b6b-d10c35bd0a0de2c718b252bc575fdb73.ssl.cf1.rackcdn.com/angular.js',\n  '//oss.maxcdn.com/angularjs/1.2.20/angular.min.js',\n  '//reports.zemanta.com/smedia/common/angularjs/1.2.11/angular.js',\n  '//cdn.shopify.com/s/files/1/0225/6463/t/1/assets/angular-animate.min.js',\n  '//parademanagement.com.s3-website-ap-southeast-1.amazonaws.com/js/angular.min.js',\n  '//cdn.jsdelivr.net/angularjs/1.1.2/angular.min.js',\n  '//eb2883ede55c53e09fd5-9c145fb03d93709ea57875d307e2d82e.ssl.cf3.rackcdn.com/components/angular-resource.min.js',\n  '//andors-trail.googlecode.com/git/AndorsTrailEdit/lib/angular.min.js',\n  '//cdn.walkme.com/General/EnvironmentTests/angular/angular.min.js',\n  '//laundrymail.com/angular/angular.js',\n  '//s3-eu-west-1.amazonaws.com/staticancpa/js/angular-cookies.min.js',\n  '//collade.demo.stswp.com/js/vendor/angular.min.js',\n  '//mrfishie.github.io/sailor/bower_components/angular/angular.min.js',\n  '//askgithub.com/static/js/angular.min.js',\n  '//services.amazon.com/solution-providers/assets/vendor/angular-cookies.min.js',\n  '//raw.githubusercontent.com/angular/code.angularjs.org/master/1.0.7/angular-resource.js',\n  '//prb-resume.appspot.com/bower_components/angular-animate/angular-animate.js',\n  '//dl.dropboxusercontent.com/u/30877786/angular.min.js',\n  '//static.tumblr.com/x5qdx0r/nPOnngtff/angular-resource.min_1_.js',\n  '//storage.googleapis.com/assets-prod.urbansitter.net/us-sym/assets/vendor/angular-sanitize/angular-sanitize.min.js',\n  '//twitter.github.io/labella.js/bower_components/angular/angular.min.js',\n  '//cdn2-casinoroom.global.ssl.fastly.net/js/lib/angular-animate.min.js',\n  '//www.adobe.com/devnet-apps/flashshowcase/lib/angular/angular.1.1.5.min.js',\n  '//eternal-sunset.herokuapp.com/bower_components/angular/angular.js',\n  '//cdn.bootcss.com/angular.js/1.2.0/angular.min.js'\n];\n", "/**\n * @fileoverview Collection of popular sites/CDNs hosting flash with user\n * provided JS.\n * @author lwe@google.com (Lukas Weichselbaum)\n *\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Domains that would allow a CSP bypass if allowlisted.\n * Only most common paths will be listed here. Hence there might still be other\n * paths on these domains that would allow a bypass.\n */\nexport const URLS: string[] = [\n  '//vk.com/swf/video.swf',\n  '//ajax.googleapis.com/ajax/libs/yui/2.8.0r4/build/charts/assets/charts.swf'\n];\n", "/**\n * @fileoverview Collection of popular sites/CDNs hosting JSONP-like endpoints.\n * Endpoints don't contain necessary parameters to trigger JSONP response\n * because parameters are ignored in CSP allowlists.\n * Usually per domain only one (popular) file path is listed to allow bypasses\n * of the most common path based allowlists. It's not practical to ship a list\n * for all possible paths/domains. Therefore the jsonp bypass check usually only\n * works efficient for domain based allowlists.\n * @author lwe@google.com (Lukas Weichselbaum)\n *\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Some JSONP-like bypasses only work if the CSP allows 'eval()'.\n */\nexport const NEEDS_EVAL: string[] = [\n  'googletagmanager.com', 'www.googletagmanager.com',\n\n  'www.googleadservices.com', 'google-analytics.com',\n  'ssl.google-analytics.com', 'www.google-analytics.com'\n];\n\n\n\n/**\n * JSONP endpoints on commonly allowlisted origins (e.g. CDNs) that would allow\n * a CSP bypass.\n * Only most common paths are listed here. Hence there might still be other\n * paths on these domains that would allow a bypass.\n */\nexport const URLS: string[] = [\n  '//bebezoo.1688.com/fragment/index.htm',\n  '//www.google-analytics.com/gtm/js',\n  '//googleads.g.doubleclick.net/pagead/conversion/1036918760/wcm',\n  '//www.googleadservices.com/pagead/conversion/1070110417/wcm',\n  '//www.google.com/tools/feedback/escalation-options',\n  '//pin.aliyun.com/check_audio',\n  '//offer.alibaba.com/market/CID100002954/5/fetchKeyword.do',\n  '//ccrprod.alipay.com/ccr/arriveTime.json',\n  '//group.aliexpress.com/ajaxAcquireGroupbuyProduct.do',\n  '//detector.alicdn.com/2.7.3/index.php',\n  '//suggest.taobao.com/sug',\n  '//translate.google.com/translate_a/l',\n  '//count.tbcdn.cn//counter3',\n  '//wb.amap.com/channel.php',\n  '//translate.googleapis.com/translate_a/l',\n  '//afpeng.alimama.com/ex',\n  '//accounts.google.com/o/oauth2/revoke',\n  '//pagead2.googlesyndication.com/relatedsearch',\n  '//yandex.ru/soft/browsers/check',\n  '//api.facebook.com/restserver.php',\n  '//mts0.googleapis.com/maps/vt',\n  '//syndication.twitter.com/widgets/timelines/765840589183213568',\n  '//www.youtube.com/profile_style',\n  '//googletagmanager.com/gtm/js',\n  '//mc.yandex.ru/watch/24306916/1',\n  '//share.yandex.net/counter/gpp/',\n  '//ok.go.mail.ru/lady_on_lady_recipes_r.json',\n  '//d1f69o4buvlrj5.cloudfront.net/__efa_15_1_ornpba.xekq.arg/optout_check',\n  '//www.googletagmanager.com/gtm/js',\n  '//api.vk.com/method/wall.get',\n  '//www.sharethis.com/get-publisher-info.php',\n  '//google.ru/maps/vt',\n  '//pro.netrox.sc/oapi/h_checksite.ashx',\n  '//vimeo.com/api/oembed.json/',\n  '//de.blog.newrelic.com/wp-admin/admin-ajax.php',\n  '//ajax.googleapis.com/ajax/services/search/news',\n  '//ssl.google-analytics.com/gtm/js',\n  '//pubsub.pubnub.com/subscribe/demo/hello_world/',\n  '//pass.yandex.ua/services',\n  '//id.rambler.ru/script/topline_info.js',\n  '//m.addthis.com/live/red_lojson/100eng.json',\n  '//passport.ngs.ru/ajax/check',\n  '//catalog.api.2gis.ru/ads/search',\n  '//gum.criteo.com/sync',\n  '//maps.google.com/maps/vt',\n  '//ynuf.alipay.com/service/um.json',\n  '//securepubads.g.doubleclick.net/gampad/ads',\n  '//c.tiles.mapbox.com/v3/texastribune.tx-congress-cvap/6/15/26.grid.json',\n  '//rexchange.begun.ru/banners',\n  '//an.yandex.ru/page/147484',\n  '//links.services.disqus.com/api/ping',\n  '//api.map.baidu.com/',\n  '//tj.gongchang.com/api/keywordrecomm/',\n  '//data.gongchang.com/livegrail/',\n  '//ulogin.ru/token.php',\n  '//beta.gismeteo.ru/api/informer/layout.js/120x240-3/ru/',\n  '//maps.googleapis.com/maps/api/js/GeoPhotoService.GetMetadata',\n  '//a.config.skype.com/config/v1/Skype/908_1.33.0.111/SkypePersonalization',\n  '//maps.beeline.ru/w',\n  '//target.ukr.net/',\n  '//www.meteoprog.ua/data/weather/informer/Poltava.js',\n  '//cdn.syndication.twimg.com/widgets/timelines/599200054310604802',\n  '//wslocker.ru/client/user.chk.php',\n  '//community.adobe.com/CommunityPod/getJSON',\n  '//maps.google.lv/maps/vt',\n  '//dev.virtualearth.net/REST/V1/Imagery/Metadata/AerialWithLabels/26.318581',\n  '//awaps.yandex.ru/10/8938/02400400.',\n  '//a248.e.akamai.net/h5.hulu.com/h5.mp4',\n  '//nominatim.openstreetmap.org/',\n  '//plugins.mozilla.org/en-us/plugins_list.json',\n  '//h.cackle.me/widget/32153/bootstrap',\n  '//graph.facebook.com/1/',\n  '//fellowes.ugc.bazaarvoice.com/data/reviews.json',\n  '//widgets.pinterest.com/v3/pidgets/boards/ciciwin/hedgehog-squirrel-crafts/pins/',\n  '//www.linkedin.com/countserv/count/share',\n  '//se.wikipedia.org/w/api.php',\n  '//cse.google.com/api/007627024705277327428/cse/r3vs7b0fcli/queries/js',\n  '//relap.io/api/v2/similar_pages_jsonp.js',\n  '//c1n3.hypercomments.com/stream/subscribe',\n  '//maps.google.de/maps/vt',\n  '//books.google.com/books',\n  '//connect.mail.ru/share_count',\n  '//tr.indeed.com/m/newjobs',\n  '//www-onepick-opensocial.googleusercontent.com/gadgets/proxy',\n  '//www.panoramio.com/map/get_panoramas.php',\n  '//client.siteheart.com/streamcli/client',\n  '//www.facebook.com/restserver.php',\n  '//autocomplete.travelpayouts.com/avia',\n  '//www.googleapis.com/freebase/v1/topic/m/0344_',\n  '//mts1.googleapis.com/mapslt/ft',\n  '//api.twitter.com/1/statuses/oembed.json',\n  '//fast.wistia.com/embed/medias/o75jtw7654.json',\n  '//partner.googleadservices.com/gampad/ads',\n  '//pass.yandex.ru/services',\n  '//gupiao.baidu.com/stocks/stockbets',\n  '//widget.admitad.com/widget/init',\n  '//api.instagram.com/v1/tags/partykungen23328/media/recent',\n  '//video.media.yql.yahoo.com/v1/video/sapi/streams/063fb76c-6c70-38c5-9bbc-04b7c384de2b',\n  '//ib.adnxs.com/jpt',\n  '//pass.yandex.com/services',\n  '//www.google.de/maps/vt',\n  '//clients1.google.com/complete/search',\n  '//api.userlike.com/api/chat/slot/proactive/',\n  '//www.youku.com/index_cookielist/s/jsonp',\n  '//mt1.googleapis.com/mapslt/ft',\n  '//api.mixpanel.com/track/',\n  '//wpd.b.qq.com/cgi/get_sign.php',\n  '//pipes.yahooapis.com/pipes/pipe.run',\n  '//gdata.youtube.com/feeds/api/videos/WsJIHN1kNWc',\n  '//9.chart.apis.google.com/chart',\n  '//cdn.syndication.twitter.com/moments/709229296800440320',\n  '//api.flickr.com/services/feeds/photos_friends.gne',\n  '//cbks0.googleapis.com/cbk',\n  '//www.blogger.com/feeds/5578653387562324002/posts/summary/4427562025302749269',\n  '//query.yahooapis.com/v1/public/yql',\n  '//kecngantang.blogspot.com/feeds/posts/default/-/Komik',\n  '//www.travelpayouts.com/widgets/50f53ce9ada1b54bcc000031.json',\n  '//i.cackle.me/widget/32586/bootstrap',\n  '//translate.yandex.net/api/v1.5/tr.json/detect',\n  '//a.tiles.mapbox.com/v3/zentralmedia.map-n2raeauc.jsonp',\n  '//maps.google.ru/maps/vt',\n  '//c1n2.hypercomments.com/stream/subscribe',\n  '//rec.ydf.yandex.ru/cookie',\n  '//cdn.jsdelivr.net'\n];\n", "/**\n * @fileoverview Utils for CSP evaluator.\n * @author lwe@google.com (Lukas Weichselbaum)\n *\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport * as csp from './csp.js';\n\n\n/**\n * Removes scheme from url.\n * @param url Url.\n * @return url without scheme.\n */\nexport function getSchemeFreeUrl(url: string): string {\n  url = url.replace(/^\\w[+\\w.-]*:\\/\\//i, '');\n  // Remove URL scheme.\n  url = url.replace(/^\\/\\//, '');\n  // Remove protocol agnostic \"//\"\n  return url;\n}\n\n/**\n * Get the hostname from the given url string in a way that supports schemeless\n * URLs and wildcards (aka `*`) in hostnames\n */\nexport function getHostname(url: string): string {\n  const hostname =\n      new URL(\n          'https://' +\n      getSchemeFreeUrl(url)\n        .replace(':*', '')  // Remove wildcard port\n        .replace('*', 'wildcard_placeholder'))\n          .hostname.replace('wildcard_placeholder', '*');\n\n  // Some browsers strip the brackets from IPv6 addresses when you access the\n  // hostname. If the scheme free url starts with something that vaguely looks\n  // like an IPv6 address and our parsed hostname doesn't have the brackets,\n  // then we add them back to work around this\n  const ipv6Regex = /^\\[[\\d:]+\\]/;\n  if (getSchemeFreeUrl(url).match(ipv6Regex) && !hostname.match(ipv6Regex)) {\n    return '[' + hostname + ']';\n  }\n  return hostname;\n}\n\nfunction setScheme(u: string): string {\n  if (u.startsWith('//')) {\n    return u.replace('//', 'https://');\n  }\n  return u;\n}\n\n/**\n * Searches for allowlisted CSP origin (URL with wildcards) in list of urls.\n * @param cspUrlString The allowlisted CSP origin. Can contain domain and\n *   path wildcards.\n * @param listOfUrlStrings List of urls to search in.\n * @return First match found in url list, null otherwise.\n */\nexport function matchWildcardUrls(\n    cspUrlString: string, listOfUrlStrings: string[]): URL|null {\n  // non-Chromium browsers don't support wildcards in domain names. We work\n  // around this by replacing the wildcard with `wildcard_placeholder` before\n  // parsing the domain and using that as a magic string. This magic string is\n  // encapsulated in this function such that callers of this function do not\n  // have to worry about this detail.\n  const cspUrl =\n      new URL(setScheme(cspUrlString\n        .replace(':*', '')  // Remove wildcard port\n        .replace('*', 'wildcard_placeholder')));\n  const listOfUrls = listOfUrlStrings.map(u => new URL(setScheme(u)));\n  const host = cspUrl.hostname.toLowerCase();\n  const hostHasWildcard = host.startsWith('wildcard_placeholder.');\n  const wildcardFreeHost = host.replace(/^\\wildcard_placeholder/i, '');\n  const path = cspUrl.pathname;\n  const hasPath = path !== '/';\n\n  for (const url of listOfUrls) {\n    const domain = url.hostname;\n    if (!domain.endsWith(wildcardFreeHost)) {\n      // Domains don't match.\n      continue;\n    }\n\n    // If the host has no subdomain wildcard and doesn't match, continue.\n    if (!hostHasWildcard && host !== domain) {\n      continue;\n    }\n\n    // If the allowlisted url has a path, check if one of the url paths\n    // match.\n    if (hasPath) {\n      // https://www.w3.org/TR/CSP2/#source-list-path-patching\n      if (path.endsWith('/')) {\n        if (!url.pathname.startsWith(path)) {\n          continue;\n        }\n      } else {\n        if (url.pathname !== path) {\n          // Path doesn't match.\n          continue;\n        }\n      }\n    }\n\n    // We found a match.\n    return url;\n  }\n\n  // No match was found.\n  return null;\n}\n\n\n/**\n * Applies a check to all directive values of a csp.\n * @param parsedCsp Parsed CSP.\n * @param check The check function that\n *   should get applied on directive values.\n */\nexport function applyCheckFunktionToDirectives(\n    parsedCsp: csp.Csp,\n    check: (directive: string, directiveValues: string[]) => void,\n) {\n  const directiveNames = Object.keys(parsedCsp.directives);\n\n  for (const directive of directiveNames) {\n    const directiveValues = parsedCsp.directives[directive];\n    if (directiveValues) {\n      check(directive, directiveValues);\n    }\n  }\n}\n", "/**\n * @fileoverview Collection of CSP evaluation checks.\n * @author lwe@google.com (Lukas Weichselbaum)\n *\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as angular from '../allowlist_bypasses/angular.js';\nimport * as flash from '../allowlist_bypasses/flash.js';\nimport * as jsonp from '../allowlist_bypasses/jsonp.js';\nimport * as csp from '../csp.js';\nimport {Csp, Directive, Keyword} from '../csp.js';\nimport {Finding, Severity, Type} from '../finding.js';\nimport * as utils from '../utils.js';\n\n\n/**\n * A list of CSP directives that can allow XSS vulnerabilities if they fail\n * validation.\n */\nexport const DIRECTIVES_CAUSING_XSS: Directive[] =\n    [Directive.SCRIPT_SRC, Directive.OBJECT_SRC, Directive.BASE_URI];\n\n/**\n * A list of URL schemes that can allow XSS vulnerabilities when requests to\n * them are made.\n */\nexport const URL_SCHEMES_CAUSING_XSS: string[] = ['data:', 'http:', 'https:'];\n\n\n/**\n * Checks if passed csp allows inline scripts.\n * Findings of this check are critical and FP free.\n * unsafe-inline is ignored in the presence of a nonce or a hash. This check\n * does not account for this and therefore the effectiveCsp needs to be passed.\n *\n * Example policy where this check would trigger:\n *  script-src 'unsafe-inline'\n *\n * @param effectiveCsp A parsed csp that only contains values which\n *  are active in a certain version of CSP (e.g. no unsafe-inline if a nonce\n *  is present).\n */\nexport function checkScriptUnsafeInline(effectiveCsp: Csp): Finding[] {\n  const directiveName =\n      effectiveCsp.getEffectiveDirective(Directive.SCRIPT_SRC);\n  const values: string[] = effectiveCsp.directives[directiveName] || [];\n\n  // Check if unsafe-inline is present.\n  if (values.includes(Keyword.UNSAFE_INLINE)) {\n    return [new Finding(\n        Type.SCRIPT_UNSAFE_INLINE,\n        `'unsafe-inline' allows the execution of unsafe in-page scripts ` +\n            'and event handlers.',\n        Severity.HIGH, directiveName, Keyword.UNSAFE_INLINE)];\n  }\n\n  return [];\n}\n\n\n/**\n * Checks if passed csp allows eval in scripts.\n * Findings of this check have a medium severity and are FP free.\n *\n * Example policy where this check would trigger:\n *  script-src 'unsafe-eval'\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkScriptUnsafeEval(parsedCsp: Csp): Finding[] {\n  const directiveName = parsedCsp.getEffectiveDirective(Directive.SCRIPT_SRC);\n  const values: string[] = parsedCsp.directives[directiveName] || [];\n\n  // Check if unsafe-eval is present.\n  if (values.includes(Keyword.UNSAFE_EVAL)) {\n    return [new Finding(\n        Type.SCRIPT_UNSAFE_EVAL,\n        `'unsafe-eval' allows the execution of code injected into DOM APIs ` +\n            'such as eval().',\n        Severity.MEDIUM_MAYBE, directiveName, Keyword.UNSAFE_EVAL)];\n  }\n\n  return [];\n}\n\n\n/**\n * Checks if plain URL schemes (e.g. http:) are allowed in sensitive directives.\n * Findings of this check have a high severity and are FP free.\n *\n * Example policy where this check would trigger:\n *  script-src https: http: data:\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkPlainUrlSchemes(parsedCsp: Csp): Finding[] {\n  const violations: Finding[] = [];\n  const directivesToCheck =\n      parsedCsp.getEffectiveDirectives(DIRECTIVES_CAUSING_XSS);\n\n  for (const directive of directivesToCheck) {\n    const values = parsedCsp.directives[directive] || [];\n    for (const value of values) {\n      if (URL_SCHEMES_CAUSING_XSS.includes(value)) {\n        violations.push(new Finding(\n            Type.PLAIN_URL_SCHEMES,\n            value + ' URI in ' + directive + ' allows the execution of ' +\n                'unsafe scripts.',\n            Severity.HIGH, directive, value));\n      }\n    }\n  }\n\n  return violations;\n}\n\n\n/**\n * Checks if csp contains wildcards in sensitive directives.\n * Findings of this check have a high severity and are FP free.\n *\n * Example policy where this check would trigger:\n *  script-src *\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkWildcards(parsedCsp: Csp): Finding[] {\n  const violations: Finding[] = [];\n  const directivesToCheck =\n      parsedCsp.getEffectiveDirectives(DIRECTIVES_CAUSING_XSS);\n\n  for (const directive of directivesToCheck) {\n    const values = parsedCsp.directives[directive] || [];\n    for (const value of values) {\n      const url = utils.getSchemeFreeUrl(value);\n      if (url === '*') {\n        violations.push(new Finding(\n            Type.PLAIN_WILDCARD, directive + ` should not allow '*' as source`,\n            Severity.HIGH, directive, value));\n        continue;\n      }\n    }\n  }\n\n  return violations;\n}\n\n/**\n * Checks if object-src is restricted to none either directly or via a\n * default-src.\n */\nexport function checkMissingObjectSrcDirective(parsedCsp: Csp): Finding[] {\n  let objectRestrictions: string[]|undefined = [];\n  if (Directive.OBJECT_SRC in parsedCsp.directives) {\n    objectRestrictions = parsedCsp.directives[Directive.OBJECT_SRC];\n  } else if (Directive.DEFAULT_SRC in parsedCsp.directives) {\n    objectRestrictions = parsedCsp.directives[Directive.DEFAULT_SRC];\n  }\n  if (objectRestrictions !== undefined && objectRestrictions.length >= 1) {\n    return [];\n  }\n  return [new Finding(\n      Type.MISSING_DIRECTIVES,\n      `Missing object-src allows the injection of plugins which can execute JavaScript. Can you set it to 'none'?`,\n      Severity.HIGH, Directive.OBJECT_SRC)];\n}\n\n/**\n * Checks if script-src is restricted either directly or via a default-src.\n */\nexport function checkMissingScriptSrcDirective(parsedCsp: Csp): Finding[] {\n  if (Directive.SCRIPT_SRC in parsedCsp.directives ||\n      Directive.DEFAULT_SRC in parsedCsp.directives) {\n    return [];\n  }\n  return [new Finding(\n      Type.MISSING_DIRECTIVES, 'script-src directive is missing.',\n      Severity.HIGH, Directive.SCRIPT_SRC)];\n}\n\n/**\n * Checks if the base-uri needs to be restricted and if so, whether it has been\n * restricted.\n */\nexport function checkMissingBaseUriDirective(parsedCsp: Csp): Finding[] {\n  return checkMultipleMissingBaseUriDirective([parsedCsp]);\n}\n\n/**\n * Checks if the base-uri needs to be restricted and if so, whether it has been\n * restricted.\n */\nexport function checkMultipleMissingBaseUriDirective(parsedCsps: Csp[]):\n    Finding[] {\n  // base-uri can be used to bypass nonce based CSPs and hash based CSPs that\n  // use strict dynamic\n  const needsBaseUri = (csp: Csp) =>\n      (csp.policyHasScriptNonces() ||\n       (csp.policyHasScriptHashes() && csp.policyHasStrictDynamic()));\n  const hasBaseUri = (csp: Csp) => Directive.BASE_URI in csp.directives;\n\n  if (parsedCsps.some(needsBaseUri) && !parsedCsps.some(hasBaseUri)) {\n    const description = 'Missing base-uri allows the injection of base tags. ' +\n        'They can be used to set the base URL for all relative (script) ' +\n        'URLs to an attacker controlled domain. ' +\n        `Can you set it to 'none' or 'self'?`;\n    return [new Finding(\n        Type.MISSING_DIRECTIVES, description, Severity.HIGH,\n        Directive.BASE_URI)];\n  }\n  return [];\n}\n\n\n/**\n * Checks if all necessary directives for preventing XSS are set.\n * Findings of this check have a high severity and are FP free.\n *\n * Example policy where this check would trigger:\n *  script-src 'none'\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkMissingDirectives(parsedCsp: Csp): Finding[] {\n  return [\n    ...checkMissingObjectSrcDirective(parsedCsp),\n    ...checkMissingScriptSrcDirective(parsedCsp),\n    ...checkMissingBaseUriDirective(parsedCsp),\n  ];\n}\n\n\n/**\n * Checks if allowlisted origins are bypassable by JSONP/Angular endpoints.\n * High severity findings of this check are FP free.\n *\n * Example policy where this check would trigger:\n *  default-src 'none'; script-src www.google.com\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkScriptAllowlistBypass(parsedCsp: Csp): Finding[] {\n  const violations: Finding[] = [];\n  const effectiveScriptSrcDirective =\n      parsedCsp.getEffectiveDirective(Directive.SCRIPT_SRC);\n  const scriptSrcValues =\n      parsedCsp.directives[effectiveScriptSrcDirective] || [];\n  if (scriptSrcValues.includes(Keyword.NONE)) {\n    return violations;\n  }\n\n  for (const value of scriptSrcValues) {\n    if (value === Keyword.SELF) {\n      violations.push(new Finding(\n          Type.SCRIPT_ALLOWLIST_BYPASS,\n          `'self' can be problematic if you host JSONP, AngularJS or user ` +\n              'uploaded files.',\n          Severity.MEDIUM_MAYBE, effectiveScriptSrcDirective, value));\n      continue;\n    }\n\n    // Ignore keywords, nonces and hashes (they start with a single quote).\n    if (value.startsWith('\\'')) {\n      continue;\n    }\n\n    // Ignore standalone schemes and things that don't look like URLs (no dot).\n    if (csp.isUrlScheme(value) || value.indexOf('.') === -1) {\n      continue;\n    }\n\n    const url = '//' + utils.getSchemeFreeUrl(value);\n\n    const angularBypass = utils.matchWildcardUrls(url, angular.URLS);\n\n    let jsonpBypass = utils.matchWildcardUrls(url, jsonp.URLS);\n\n    // Some JSONP bypasses only work in presence of unsafe-eval.\n    if (jsonpBypass) {\n      const evalRequired = jsonp.NEEDS_EVAL.includes(jsonpBypass.hostname);\n      const evalPresent = scriptSrcValues.includes(Keyword.UNSAFE_EVAL);\n      if (evalRequired && !evalPresent) {\n        jsonpBypass = null;\n      }\n    }\n\n    if (jsonpBypass || angularBypass) {\n      let bypassDomain = '';\n      let bypassTxt = '';\n      if (jsonpBypass) {\n        bypassDomain = jsonpBypass.hostname;\n        bypassTxt = ' JSONP endpoints';\n      }\n      if (angularBypass) {\n        bypassDomain = angularBypass.hostname;\n        bypassTxt += (bypassTxt.trim() === '') ? '' : ' and';\n        bypassTxt += ' Angular libraries';\n      }\n\n      violations.push(new Finding(\n          Type.SCRIPT_ALLOWLIST_BYPASS,\n          bypassDomain + ' is known to host' + bypassTxt +\n              ' which allow to bypass this CSP.',\n          Severity.HIGH, effectiveScriptSrcDirective, value));\n    } else {\n      violations.push(new Finding(\n          Type.SCRIPT_ALLOWLIST_BYPASS,\n          `No bypass found; make sure that this URL doesn't serve JSONP ` +\n              'replies or Angular libraries.',\n          Severity.MEDIUM_MAYBE, effectiveScriptSrcDirective, value));\n    }\n  }\n\n  return violations;\n}\n\n\n/**\n * Checks if allowlisted object-src origins are bypassable.\n * Findings of this check have a high severity and are FP free.\n *\n * Example policy where this check would trigger:\n *  default-src 'none'; object-src ajax.googleapis.com\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkFlashObjectAllowlistBypass(parsedCsp: Csp): Finding[] {\n  const violations = [];\n  const effectiveObjectSrcDirective =\n      parsedCsp.getEffectiveDirective(Directive.OBJECT_SRC);\n  const objectSrcValues =\n      parsedCsp.directives[effectiveObjectSrcDirective] || [];\n\n  // If flash is not allowed in plugin-types, continue.\n  const pluginTypes = parsedCsp.directives[Directive.PLUGIN_TYPES];\n  if (pluginTypes && !pluginTypes.includes('application/x-shockwave-flash')) {\n    return [];\n  }\n\n  for (const value of objectSrcValues) {\n    // Nothing to do here if 'none'.\n    if (value === Keyword.NONE) {\n      return [];\n    }\n\n    const url = '//' + utils.getSchemeFreeUrl(value);\n    const flashBypass = utils.matchWildcardUrls(url, flash.URLS);\n\n    if (flashBypass) {\n      violations.push(new Finding(\n          Type.OBJECT_ALLOWLIST_BYPASS,\n          flashBypass.hostname +\n              ' is known to host Flash files which allow to bypass this CSP.',\n          Severity.HIGH, effectiveObjectSrcDirective, value));\n    } else if (effectiveObjectSrcDirective === Directive.OBJECT_SRC) {\n      violations.push(new Finding(\n          Type.OBJECT_ALLOWLIST_BYPASS,\n          `Can you restrict object-src to 'none' only?`, Severity.MEDIUM_MAYBE,\n          effectiveObjectSrcDirective, value));\n    }\n  }\n\n  return violations;\n}\n\n/**\n * Returns whether the given string \"looks\" like an IP address. This function\n * only uses basic heuristics and does not accept all valid IPs nor reject all\n * invalid IPs.\n */\nexport function looksLikeIpAddress(maybeIp: string): boolean {\n  if (maybeIp.startsWith('[') && maybeIp.endsWith(']')) {\n    // Looks like an IPv6 address and not a hostname (though it may be some\n    // nonsense like `[foo]`)\n    return true;\n  }\n  if (/^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$/.test(maybeIp)) {\n    // Looks like an IPv4 address (though it may be something like\n    // `500.600.700.800`\n    return true;\n  }\n  // Won't match IP addresses encoded in other manners (eg octal or\n  // decimal)\n  return false;\n}\n\n/**\n * Checks if csp contains IP addresses.\n * Findings of this check are informal only and are FP free.\n *\n * Example policy where this check would trigger:\n *  script-src 127.0.0.1\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkIpSource(parsedCsp: Csp): Finding[] {\n  const violations: Finding[] = [];\n\n  // Function for checking if directive values contain IP addresses.\n  const checkIp = (directive: string, directiveValues: string[]) => {\n    for (const value of directiveValues) {\n      const host = utils.getHostname(value);\n      if (looksLikeIpAddress(host)) {\n        // Check if localhost.\n        // See 4.8 in https://www.w3.org/TR/CSP2/#match-source-expression\n        if (host === '127.0.0.1') {\n          violations.push(new Finding(\n              Type.IP_SOURCE,\n              directive + ' directive allows localhost as source. ' +\n                  'Please make sure to remove this in production environments.',\n              Severity.INFO, directive, value));\n        } else {\n          violations.push(new Finding(\n              Type.IP_SOURCE,\n              directive + ' directive has an IP-Address as source: ' + host +\n                  ' (will be ignored by browsers!). ',\n              Severity.INFO, directive, value));\n        }\n      }\n    }\n  };\n\n  // Apply check to values of all directives.\n  utils.applyCheckFunktionToDirectives(parsedCsp, checkIp);\n  return violations;\n}\n\n\n/**\n * Checks if csp contains directives that are deprecated in CSP3.\n * Findings of this check are informal only and are FP free.\n *\n * Example policy where this check would trigger:\n *  report-uri foo.bar/csp\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkDeprecatedDirective(parsedCsp: Csp): Finding[] {\n  const violations = [];\n\n  // More details: https://www.chromestatus.com/feature/5769374145183744\n  if (Directive.REFLECTED_XSS in parsedCsp.directives) {\n    violations.push(new Finding(\n        Type.DEPRECATED_DIRECTIVE,\n        'reflected-xss is deprecated since CSP2. ' +\n            'Please, use the X-XSS-Protection header instead.',\n        Severity.INFO, Directive.REFLECTED_XSS));\n  }\n\n  // More details: https://www.chromestatus.com/feature/5680800376815616\n  if (Directive.REFERRER in parsedCsp.directives) {\n    violations.push(new Finding(\n        Type.DEPRECATED_DIRECTIVE,\n        'referrer is deprecated since CSP2. ' +\n            'Please, use the Referrer-Policy header instead.',\n        Severity.INFO, Directive.REFERRER));\n  }\n\n  // More details: https://github.com/w3c/webappsec-csp/pull/327\n  if (Directive.DISOWN_OPENER in parsedCsp.directives) {\n    violations.push(new Finding(\n        Type.DEPRECATED_DIRECTIVE,\n        'disown-opener is deprecated since CSP3. ' +\n            'Please, use the Cross Origin Opener Policy header instead.',\n        Severity.INFO, Directive.DISOWN_OPENER));\n  }\n  return violations;\n}\n\n\n/**\n * Checks if csp nonce is at least 8 characters long.\n * Findings of this check are of medium severity and are FP free.\n *\n * Example policy where this check would trigger:\n *  script-src 'nonce-short'\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkNonceLength(parsedCsp: Csp): Finding[] {\n  const noncePattern = new RegExp('^\\'nonce-(.+)\\'$');\n  const violations: Finding[] = [];\n\n  utils.applyCheckFunktionToDirectives(\n      parsedCsp, (directive, directiveValues) => {\n        for (const value of directiveValues) {\n          const match = value.match(noncePattern);\n          if (!match) {\n            continue;\n          }\n          // Not a nonce.\n\n          const nonceValue = match[1];\n          if (nonceValue.length < 8) {\n            violations.push(new Finding(\n                Type.NONCE_LENGTH,\n                'Nonces should be at least 8 characters long.', Severity.MEDIUM,\n                directive, value));\n          }\n\n          if (!csp.isNonce(value, true)) {\n            violations.push(new Finding(\n                Type.NONCE_CHARSET,\n                'Nonces should only use the base64 charset.', Severity.INFO,\n                directive, value));\n          }\n        }\n      });\n\n  return violations;\n}\n\n\n/**\n * Checks if CSP allows sourcing from http://\n * Findings of this check are of medium severity and are FP free.\n *\n * Example policy where this check would trigger:\n *  report-uri http://foo.bar/csp\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkSrcHttp(parsedCsp: Csp): Finding[] {\n  const violations: Finding[] = [];\n\n  utils.applyCheckFunktionToDirectives(\n      parsedCsp, (directive, directiveValues) => {\n        for (const value of directiveValues) {\n          const description = directive === Directive.REPORT_URI ?\n              'Use HTTPS to send violation reports securely.' :\n              'Allow only resources downloaded over HTTPS.';\n          if (value.startsWith('http://')) {\n            violations.push(new Finding(\n                Type.SRC_HTTP, description, Severity.MEDIUM, directive, value));\n          }\n        }\n      });\n\n  return violations;\n}\n\n/**\n * Checks if the policy has configured reporting in a robust manner.\n */\nexport function checkHasConfiguredReporting(parsedCsp: Csp): Finding[] {\n  const reportUriValues: string[] =\n      parsedCsp.directives[Directive.REPORT_URI] || [];\n  if (reportUriValues.length > 0) {\n    return [];\n  }\n\n  const reportToValues: string[] =\n      parsedCsp.directives[Directive.REPORT_TO] || [];\n  if (reportToValues.length > 0) {\n    return [new Finding(\n        Type.REPORT_TO_ONLY,\n        `This CSP policy only provides a reporting destination via the 'report-to' directive. This directive is only supported in Chromium-based browsers so it is recommended to also use a 'report-uri' directive.`,\n        Severity.INFO, Directive.REPORT_TO)];\n  }\n\n  return [new Finding(\n      Type.REPORTING_DESTINATION_MISSING,\n      'This CSP policy does not configure a reporting destination. This makes it difficult to maintain the CSP policy over time and monitor for any breakages.',\n      Severity.INFO, Directive.REPORT_URI)];\n}\n", "/**\n * @fileoverview Collection of \"strict\" CSP and backward compatibility checks.\n * A \"strict\" CSP is based on nonces or hashes and drops the allowlist.\n * These checks ensure that 'strict-dynamic' and a CSP nonce/hash are present.\n * Due to 'strict-dynamic' any allowlist will get dropped in CSP3.\n * The backward compatibility checks ensure that the strict nonce/hash based CSP\n * will be a no-op in older browsers by checking for presence of 'unsafe-inline'\n * (will be dropped in newer browsers if a nonce or hash is present) and for\n * prsensence of http: and https: url schemes (will be droped in the presence of\n * 'strict-dynamic' in newer browsers).\n *\n * @author lwe@google.com (Lukas Weichselbaum)\n *\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as csp from '../csp.js';\nimport {Csp, Keyword} from '../csp.js';\n\nimport {Finding, Severity, Type} from '../finding.js';\n\n\n/**\n * Checks if 'strict-dynamic' is present.\n *\n * Example policy where this check would trigger:\n *  script-src foo.bar\n *\n * @param parsedCsp A parsed csp.\n */\nexport function checkStrictDynamic(parsedCsp: Csp): Finding[] {\n  const directiveName =\n      parsedCsp.getEffectiveDirective(csp.Directive.SCRIPT_SRC);\n  const values: string[] = parsedCsp.directives[directiveName] || [];\n\n  const schemeOrHostPresent = values.some((v) => !v.startsWith('\\''));\n\n  // Check if strict-dynamic is present in case a host/scheme allowlist is used.\n  if (schemeOrHostPresent && !values.includes(Keyword.STRICT_DYNAMIC)) {\n    return [new Finding(\n        Type.STRICT_DYNAMIC,\n        'Host allowlists can frequently be bypassed. Consider using ' +\n            '\\'strict-dynamic\\' in combination with CSP nonces or hashes.',\n        Severity.STRICT_CSP, directiveName)];\n  }\n\n  return [];\n}\n\n\n/**\n * Checks if 'strict-dynamic' is only used together with a nonce or a hash.\n *\n * Example policy where this check would trigger:\n *  script-src 'strict-dynamic'\n *\n * @param parsedCsp A parsed csp.\n */\nexport function checkStrictDynamicNotStandalone(parsedCsp: Csp): Finding[] {\n  const directiveName =\n      parsedCsp.getEffectiveDirective(csp.Directive.SCRIPT_SRC);\n  const values: string[] = parsedCsp.directives[directiveName] || [];\n\n  if (values.includes(Keyword.STRICT_DYNAMIC) &&\n      (!parsedCsp.policyHasScriptNonces() &&\n       !parsedCsp.policyHasScriptHashes())) {\n    return [new Finding(\n        Type.STRICT_DYNAMIC_NOT_STANDALONE,\n        '\\'strict-dynamic\\' without a CSP nonce/hash will block all scripts.',\n        Severity.INFO, directiveName)];\n  }\n\n  return [];\n}\n\n\n/**\n * Checks if the policy has 'unsafe-inline' when a nonce or hash are present.\n * This will ensure backward compatibility to browser that don't support\n * CSP nonces or hasehs.\n *\n * Example policy where this check would trigger:\n *  script-src 'nonce-test'\n *\n * @param parsedCsp A parsed csp.\n */\nexport function checkUnsafeInlineFallback(parsedCsp: Csp): Finding[] {\n  if (!parsedCsp.policyHasScriptNonces() &&\n      !parsedCsp.policyHasScriptHashes()) {\n    return [];\n  }\n\n  const directiveName =\n      parsedCsp.getEffectiveDirective(csp.Directive.SCRIPT_SRC);\n  const values: string[] = parsedCsp.directives[directiveName] || [];\n\n  if (!values.includes(Keyword.UNSAFE_INLINE)) {\n    return [new Finding(\n        Type.UNSAFE_INLINE_FALLBACK,\n        'Consider adding \\'unsafe-inline\\' (ignored by browsers supporting ' +\n            'nonces/hashes) to be backward compatible with older browsers.',\n        Severity.STRICT_CSP, directiveName)];\n  }\n\n  return [];\n}\n\n\n/**\n * Checks if the policy has an allowlist fallback (* or http: and https:) when\n * 'strict-dynamic' is present.\n * This will ensure backward compatibility to browser that don't support\n * 'strict-dynamic'.\n *\n * Example policy where this check would trigger:\n *  script-src 'nonce-test' 'strict-dynamic'\n *\n * @param parsedCsp A parsed csp.\n */\nexport function checkAllowlistFallback(parsedCsp: Csp): Finding[] {\n  const directiveName =\n      parsedCsp.getEffectiveDirective(csp.Directive.SCRIPT_SRC);\n  const values: string[] = parsedCsp.directives[directiveName] || [];\n\n  if (!values.includes(Keyword.STRICT_DYNAMIC)) {\n    return [];\n  }\n\n  // Check if there's already an allowlist (url scheme or url)\n  if (!values.some(\n          (v) => ['http:', 'https:', '*'].includes(v) || v.includes('.'))) {\n    return [new Finding(\n        Type.ALLOWLIST_FALLBACK,\n        'Consider adding https: and http: url schemes (ignored by browsers ' +\n            'supporting \\'strict-dynamic\\') to be backward compatible with older ' +\n            'browsers.',\n        Severity.STRICT_CSP, directiveName)];\n  }\n\n  return [];\n}\n\n\n/**\n * Checks if the policy requires Trusted Types for scripts.\n *\n * I.e. the policy should have the following dirctive:\n *  require-trusted-types-for 'script'\n *\n * @param parsedCsp A parsed csp.\n */\nexport function checkRequiresTrustedTypesForScripts(parsedCsp: Csp): Finding[] {\n  const directiveName =\n      parsedCsp.getEffectiveDirective(csp.Directive.REQUIRE_TRUSTED_TYPES_FOR);\n  const values: string[] = parsedCsp.directives[directiveName] || [];\n\n  if (!values.includes(csp.TrustedTypesSink.SCRIPT)) {\n    return [new Finding(\n        Type.REQUIRE_TRUSTED_TYPES_FOR_SCRIPTS,\n        'Consider requiring Trusted Types for scripts to lock down DOM XSS ' +\n            'injection sinks. You can do this by adding ' +\n            '\"require-trusted-types-for \\'script\\'\" to your policy.',\n        Severity.INFO, csp.Directive.REQUIRE_TRUSTED_TYPES_FOR)];\n  }\n\n  return [];\n}\n", "/**\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author lwe@google.com (Lukas Weichselbaum)\n */\n\nimport * as csp from './csp.js';\n\n\n\n/**\n * A class to hold a parser for CSP in string format.\n * @unrestricted\n */\nexport class CspParser {\n  csp: csp.Csp;\n  /**\n   * @param unparsedCsp A Content Security Policy as string.\n   */\n  constructor(unparsedCsp: string) {\n    /**\n     * Parsed CSP\n     */\n    this.csp = new csp.Csp();\n\n    this.parse(unparsedCsp);\n  }\n\n  /**\n   * Parses a CSP from a string.\n   * @param unparsedCsp CSP as string.\n   */\n  parse(unparsedCsp: string): csp.Csp {\n    // Reset the internal state:\n    this.csp = new csp.Csp();\n\n    // Split CSP into directive tokens.\n    const directiveTokens = unparsedCsp.split(';');\n    for (let i = 0; i < directiveTokens.length; i++) {\n      const directiveToken = directiveTokens[i].trim();\n\n      // Split directive tokens into directive name and directive values.\n      const directiveParts = directiveToken.match(/\\S+/g);\n      if (Array.isArray(directiveParts)) {\n        const directiveName = directiveParts[0].toLowerCase();\n\n        // If the set of directives already contains a directive whose name is a\n        // case insensitive match for directive name, ignore this instance of\n        // the directive and continue to the next token.\n        if (directiveName in this.csp.directives) {\n          continue;\n        }\n\n        if (!csp.isDirective(directiveName)) {\n        }\n\n        const directiveValues: string[] = [];\n        for (let directiveValue, j = 1; (directiveValue = directiveParts[j]);\n             j++) {\n          directiveValue = normalizeDirectiveValue(directiveValue);\n          if (!directiveValues.includes(directiveValue)) {\n            directiveValues.push(directiveValue);\n          }\n        }\n        this.csp.directives[directiveName] = directiveValues;\n      }\n    }\n\n    return this.csp;\n  }\n}\n\n/**\n * Remove whitespaces and turn to lower case if CSP keyword or protocol\n * handler.\n * @param directiveValue directive value.\n * @return normalized directive value.\n */\nfunction normalizeDirectiveValue(directiveValue: string): string {\n  directiveValue = directiveValue.trim();\n  const directiveValueLower = directiveValue.toLowerCase();\n  if (csp.isKeyword(directiveValueLower) || csp.isUrlScheme(directiveValue)) {\n    return directiveValueLower;\n  }\n  return directiveValue;\n}\n\nexport const TEST_ONLY = {normalizeDirectiveValue};\n"],
  "mappings": ";;;;;;;AAAA;;;;;;;;ACyBM,IAAO,UAAP,MAAO,SAAO;EASP;EAAmB;EAA4B;EAC/C;EAA0B;;;;;;;;EAFrC,YACW,MAAmB,aAA4B,UAC/C,WAA0B,OAAc;AADxC,SAAA,OAAA;AAAmB,SAAA,cAAA;AAA4B,SAAA,WAAA;AAC/C,SAAA,YAAA;AAA0B,SAAA,QAAA;EAAiB;;;;;;EAOtD,OAAO,mBAAmB,UAAmB;AAC3C,QAAI,SAAS,WAAW,GAAG;AACzB,aAAO,SAAS;IAClB;AAEA,UAAM,aAAa,SAAS,IAAI,CAAC,YAAY,QAAQ,QAAQ;AAC7D,UAAM,MAAM,CAAC,MAAgB,QAAkB,OAAO,MAAM,OAAO;AACnE,WAAO,WAAW,OAAO,KAAK,SAAS,IAAI;EAC7C;EAEA,OAAO,KAAY;AACjB,QAAI,EAAE,eAAe,WAAU;AAC7B,aAAO;IACT;AACA,WAAO,IAAI,SAAS,KAAK,QAAQ,IAAI,gBAAgB,KAAK,eACtD,IAAI,aAAa,KAAK,YAAY,IAAI,cAAc,KAAK,aACzD,IAAI,UAAU,KAAK;EACzB;;AAOF,IAAY;CAAZ,SAAYA,WAAQ;AAClB,EAAAA,UAAAA,UAAA,MAAA,IAAA,EAAA,IAAA;AACA,EAAAA,UAAAA,UAAA,QAAA,IAAA,EAAA,IAAA;AACA,EAAAA,UAAAA,UAAA,QAAA,IAAA,EAAA,IAAA;AACA,EAAAA,UAAAA,UAAA,YAAA,IAAA,EAAA,IAAA;AACA,EAAAA,UAAAA,UAAA,YAAA,IAAA,EAAA,IAAA;AACA,EAAAA,UAAAA,UAAA,cAAA,IAAA,EAAA,IAAA;AACA,EAAAA,UAAAA,UAAA,MAAA,IAAA,EAAA,IAAA;AACA,EAAAA,UAAAA,UAAA,MAAA,IAAA,GAAA,IAAA;AACF,GATY,aAAA,WAAQ,CAAA,EAAA;AAepB,IAAY;CAAZ,SAAYC,OAAI;AAEd,EAAAA,MAAAA,MAAA,mBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,mBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,iBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,eAAA,IAAA,GAAA,IAAA;AAGA,EAAAA,MAAAA,MAAA,oBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,sBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,oBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,mBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,gBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,yBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,yBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,cAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,WAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,sBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,UAAA,IAAA,GAAA,IAAA;AAGA,EAAAA,MAAAA,MAAA,gBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,+BAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,YAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,wBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,oBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,SAAA,IAAA,GAAA,IAAA;AAGA,EAAAA,MAAAA,MAAA,mCAAA,IAAA,GAAA,IAAA;AAGA,EAAAA,MAAAA,MAAA,+BAAA,IAAA,GAAA,IAAA;AACA,EAAAA,MAAAA,MAAA,gBAAA,IAAA,GAAA,IAAA;AACF,GAlCY,SAAA,OAAI,CAAA,EAAA;;;ACrDV,IAAO,MAAP,MAAO,KAAG;EACd,aAAiD,CAAA;;;;;EAMjD,QAAK;AACH,UAAM,QAAQ,IAAI,KAAG;AACrB,eAAW,CAAC,WAAW,eAAe,KAAK,OAAO,QACzC,KAAK,UAAU,GAAG;AACzB,UAAI,iBAAiB;AACnB,cAAM,WAAW,SAAS,IAAI,CAAC,GAAG,eAAe;MACnD;IACF;AACA,WAAO;EACT;;;;;EAMA,kBAAe;AACb,QAAI,YAAY;AAEhB,eAAW,CAAC,WAAW,eAAe,KAAK,OAAO,QACzC,KAAK,UAAU,GAAG;AACzB,mBAAa;AACb,UAAI,oBAAoB,QAAW;AACjC,iBAAS,OAAO,IAAI,GAAI,QAAQ,gBAAgB,CAAC,GAAI,KAAK;AACxD,uBAAa;AACb,uBAAa;QACf;MACF;AACA,mBAAa;IACf;AAEA,WAAO;EACT;;;;;;;;;EAUA,gBAAgB,YAAqB,aAAuB;AAC1D,UAAM,WAAW,eAAe,CAAA;AAChC,UAAM,eAAe,KAAK,MAAK;AAC/B,UAAM,YAAY,aAAa,sBAAsB,UAAU,UAAU;AACzE,UAAM,SAAS,KAAK,WAAW,SAAS,KAAK,CAAA;AAC7C,UAAM,qBAAqB,aAAa,WAAW,SAAS;AAE5D,QAAI,uBACC,aAAa,sBAAqB,KAClC,aAAa,sBAAqB,IAAK;AAC1C,UAAI,cAAc,QAAQ,MAAM;AAE9B,YAAI,OAAO,SAAS,QAAQ,aAAa,GAAG;AAC1C,sBAAY,oBAAoB,QAAQ,aAAa;AACrD,mBAAS,KAAK,IAAI,QACd,KAAK,SACL,8EAEA,SAAS,MAAM,WAAW,QAAQ,aAAa,CAAC;QACtD;MACF,OAAO;AAEL,mBAAW,SAAS,QAAQ;AAC1B,cAAI,MAAM,WAAW,SAAU,KAAK,MAAM,WAAW,MAAO,GAAG;AAC7D,wBAAY,oBAAoB,KAAK;UACvC;QACF;MACF;IACF;AAEA,QAAI,sBAAsB,KAAK,uBAAsB,GAAI;AAEvD,UAAI,cAAc,QAAQ,MAAM;AAC9B,mBAAW,SAAS,QAAQ;AAK1B,cAAI,CAAC,MAAM,WAAW,GAAI,KAAK,UAAU,QAAQ,QAC7C,UAAU,QAAQ,eAAe;AACnC,wBAAY,oBAAoB,KAAK;AACrC,qBAAS,KAAK,IAAI,QACd,KAAK,SACL,qEACA,SAAS,MAAM,WAAW,KAAK,CAAC;UACtC;QACF;MACF,OAAO;AAEL,oBAAY,oBAAoB,QAAQ,cAAc;MACxD;IACF;AAEA,QAAI,aAAa,QAAQ,MAAM;AAG7B,aAAO,aAAa,WAAW,UAAU,SAAS;AAClD,aAAO,aAAa,WAAW,UAAU,UAAU;AACnD,aAAO,aAAa,WAAW,UAAU,YAAY;AACrD,aAAO,aAAa,WAAW,UAAU,aAAa;AACtD,aAAO,aAAa,WAAW,UAAU,yBAAyB;IACpE;AAEA,WAAO;EACT;;;;;;;EAQA,sBAAsB,WAAiB;AAErC,QAAI,EAAE,aAAa,KAAK,eACpB,iBAAiB,SAAS,SAAsB,GAAG;AACrD,aAAO,UAAU;IACnB;AAEA,WAAO;EACT;;;;;;;EAQA,uBAAuB,YAAoB;AACzC,UAAM,sBACF,IAAI,IAAI,WAAW,IAAI,CAAC,QAAQ,KAAK,sBAAsB,GAAG,CAAC,CAAC;AACpE,WAAO,CAAC,GAAG,mBAAmB;EAChC;;;;;EAMA,wBAAqB;AACnB,UAAM,gBAAgB,KAAK,sBAAsB,UAAU,UAAU;AACrE,UAAM,SAAS,KAAK,WAAW,aAAa,KAAK,CAAA;AACjD,WAAO,OAAO,KAAK,CAAC,QAAQ,QAAQ,GAAG,CAAC;EAC1C;;;;;EAMA,wBAAqB;AACnB,UAAM,gBAAgB,KAAK,sBAAsB,UAAU,UAAU;AACrE,UAAM,SAAS,KAAK,WAAW,aAAa,KAAK,CAAA;AACjD,WAAO,OAAO,KAAK,CAAC,QAAQ,OAAO,GAAG,CAAC;EACzC;;;;;EAMA,yBAAsB;AACpB,UAAM,gBAAgB,KAAK,sBAAsB,UAAU,UAAU;AACrE,UAAM,SAAS,KAAK,WAAW,aAAa,KAAK,CAAA;AACjD,WAAO,OAAO,SAAS,QAAQ,cAAc;EAC/C;;AAOF,IAAY;CAAZ,SAAYC,UAAO;AACjB,EAAAA,SAAA,MAAA,IAAA;AACA,EAAAA,SAAA,MAAA,IAAA;AACA,EAAAA,SAAA,eAAA,IAAA;AACA,EAAAA,SAAA,aAAA,IAAA;AACA,EAAAA,SAAA,WAAA,IAAA;AACA,EAAAA,SAAA,kBAAA,IAAA;AACA,EAAAA,SAAA,gBAAA,IAAA;AACA,EAAAA,SAAA,0BAAA,IAAA;AACA,EAAAA,SAAA,eAAA,IAAA;AACA,EAAAA,SAAA,eAAA,IAAA;AACA,EAAAA,SAAA,OAAA,IAAA;AACA,EAAAA,SAAA,OAAA,IAAA;AACF,GAbY,YAAA,UAAO,CAAA,EAAA;AAmBnB,IAAY;CAAZ,SAAYC,mBAAgB;AAC1B,EAAAA,kBAAA,QAAA,IAAA;AACF,GAFY,qBAAA,mBAAgB,CAAA,EAAA;AAY5B,IAAY;CAAZ,SAAYC,YAAS;AAEnB,EAAAA,WAAA,WAAA,IAAA;AACA,EAAAA,WAAA,aAAA,IAAA;AACA,EAAAA,WAAA,aAAA,IAAA;AACA,EAAAA,WAAA,UAAA,IAAA;AACA,EAAAA,WAAA,WAAA,IAAA;AACA,EAAAA,WAAA,SAAA,IAAA;AACA,EAAAA,WAAA,WAAA,IAAA;AACA,EAAAA,WAAA,YAAA,IAAA;AACA,EAAAA,WAAA,YAAA,IAAA;AACA,EAAAA,WAAA,iBAAA,IAAA;AACA,EAAAA,WAAA,iBAAA,IAAA;AACA,EAAAA,WAAA,WAAA,IAAA;AACA,EAAAA,WAAA,gBAAA,IAAA;AACA,EAAAA,WAAA,gBAAA,IAAA;AACA,EAAAA,WAAA,cAAA,IAAA;AAEA,EAAAA,WAAA,cAAA,IAAA;AACA,EAAAA,WAAA,YAAA,IAAA;AAGA,EAAAA,WAAA,UAAA,IAAA;AACA,EAAAA,WAAA,cAAA,IAAA;AACA,EAAAA,WAAA,SAAA,IAAA;AACA,EAAAA,WAAA,eAAA,IAAA;AAGA,EAAAA,WAAA,aAAA,IAAA;AACA,EAAAA,WAAA,iBAAA,IAAA;AACA,EAAAA,WAAA,aAAA,IAAA;AAGA,EAAAA,WAAA,WAAA,IAAA;AACA,EAAAA,WAAA,YAAA,IAAA;AAGA,EAAAA,WAAA,yBAAA,IAAA;AACA,EAAAA,WAAA,2BAAA,IAAA;AACA,EAAAA,WAAA,eAAA,IAAA;AACA,EAAAA,WAAA,UAAA,IAAA;AACA,EAAAA,WAAA,iBAAA,IAAA;AACA,EAAAA,WAAA,eAAA,IAAA;AAEA,EAAAA,WAAA,2BAAA,IAAA;AACA,EAAAA,WAAA,QAAA,IAAA;AACF,GA9CY,cAAA,YAAS,CAAA,EAAA;AAsDd,IAAM,mBAAgC;EAC3C,UAAU;EAAW,UAAU;EAAa,UAAU;EACtD,UAAU;EAAU,UAAU;EAAW,UAAU;EACnD,UAAU;EAAc,UAAU;EAAW,UAAU;EACvD,UAAU;EAAY,UAAU;EAAiB,UAAU;EAC3D,UAAU;EAAW,UAAU;EAAgB,UAAU;EACzD,UAAU;;AAMZ,IAAY;CAAZ,SAAYC,UAAO;AACjB,EAAAA,SAAAA,SAAA,MAAA,IAAA,CAAA,IAAA;AACA,EAAAA,SAAAA,SAAA,MAAA,IAAA,CAAA,IAAA;AACA,EAAAA,SAAAA,SAAA,MAAA,IAAA,CAAA,IAAA;AACF,GAJY,YAAA,UAAO,CAAA,EAAA;AAYb,SAAU,YAAY,WAAiB;AAC3C,SAAO,OAAO,OAAO,SAAS,EAAE,SAAS,SAAsB;AACjE;AAQM,SAAU,UAAU,SAAe;AACvC,SAAO,OAAO,OAAO,OAAO,EAAE,SAAS,OAAkB;AAC3D;AAUM,SAAU,YAAY,WAAiB;AAC3C,QAAM,UAAU,IAAI,OAAO,4BAA4B;AACvD,SAAO,QAAQ,KAAK,SAAS;AAC/B;AAMO,IAAM,uBACT,IAAI,OAAO,oCAAsC;AAI9C,IAAM,gBAAgB,IAAI,OAAO,gBAAkB;AAUpD,SAAU,QAAQ,OAAe,aAAqB;AAC1D,QAAM,UAAU,cAAc,uBAAuB;AACrD,SAAO,QAAQ,KAAK,KAAK;AAC3B;AAMO,IAAM,sBACT,IAAI,OAAO,mDAAqD;AAI7D,IAAM,eAAe,IAAI,OAAO,iCAAmC;AAUpE,SAAU,OAAO,MAAc,aAAqB;AACxD,QAAM,UAAU,cAAc,sBAAsB;AACpD,SAAO,QAAQ,KAAK,IAAI;AAC1B;AAkBA,SAAS,YAAe,KAAU,MAAO;AACvC,MAAI,IAAI,SAAS,IAAI,GAAG;AACtB,UAAM,MAAM,IAAI,UAAU,UAAQ,SAAS,IAAI;AAC/C,QAAI,OAAO,KAAK,CAAC;EACnB;AACF;;;ACvXM,SAAU,sBAAsB,WAAc;AAClD,QAAM,WAAsB,CAAA;AAE5B,aAAW,aAAa,OAAO,KAAK,UAAU,UAAU,GAAG;AACzD,QAAQ,YAAY,SAAS,GAAG;AAE9B;IACF;AAEA,QAAI,UAAU,SAAS,GAAG,GAAG;AAC3B,eAAS,KAAK,IAAI,QACd,KAAK,mBAAmB,0CACxB,SAAS,QAAQ,SAAS,CAAC;IACjC,OAAO;AACL,eAAS,KAAK,IAAI,QACd,KAAK,mBACL,gBAAgB,YAAY,mCAC5B,SAAS,QAAQ,SAAS,CAAC;IACjC;EACF;AAEA,SAAO;AACT;AAYM,SAAU,sBAAsB,WAAc;AAClD,QAAM,WAAsB,CAAA;AAE5B,aAAW,CAAC,WAAW,eAAe,KAAK,OAAO,QACzC,UAAU,UAAU,GAAG;AAC9B,QAAI,oBAAoB,QAAW;AACjC;IACF;AACA,eAAW,SAAS,iBAAiB;AAGnC,UAAQ,YAAY,KAAK,GAAG;AAC1B,iBAAS,KAAK,IAAI,QACd,KAAK,mBACL,oCACU,QAAQ,2CAClB,SAAS,QAAQ,WAAW,KAAK,CAAC;MACxC;IACF;EACF;AAEA,SAAO;AACT;AAWM,SAAU,oBAAoB,WAAc;AAChD,QAAM,WAAsB,CAAA;AAC5B,QAAM,kBACF,OAAO,OAAO,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,QAAQ,MAAM,EAAE,CAAC;AAEzD,aAAW,CAAC,WAAW,eAAe,KAAK,OAAO,QACzC,UAAU,UAAU,GAAG;AAC9B,QAAI,oBAAoB,QAAW;AACjC;IACF;AACA,eAAW,SAAS,iBAAiB;AAEnC,UAAI,gBAAgB,KAAK,CAAC,MAAM,MAAM,KAAK,KACvC,MAAM,WAAW,QAAQ,KACzB,MAAM,MAAM,0BAA0B,GAAG;AAC3C,iBAAS,KAAK,IAAI,QACd,KAAK,iBACL,iCAAiC,QAAQ,wBACzC,SAAS,QAAQ,WAAW,KAAK,CAAC;AACtC;MACF;AAIA,UAAI,CAAC,MAAM,WAAW,GAAI,GAAG;AAC3B;MACF;AAEA,UAAI,cAAkB,UAAU,2BAA2B;AAEzD,YAAI,UAAc,iBAAiB,QAAQ;AACzC;QACF;MACF,WAAW,cAAkB,UAAU,eAAe;AAEpD,YAAI,UAAU,wBAA0B,UAAU,UAAY;AAC5D;QACF;MACF,OAAO;AAEL,YAAQ,UAAU,KAAK,KAAS,OAAO,KAAK,KAAS,QAAQ,KAAK,GAAG;AACnE;QACF;MACF;AAEA,eAAS,KAAK,IAAI,QACd,KAAK,iBAAiB,QAAQ,wCAC9B,SAAS,QAAQ,WAAW,KAAK,CAAC;IACxC;EACF;AAEA,SAAO;AACT;;;AChIO,IAAM,OAAiB;EAC5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;;ACzCK,IAAMC,QAAiB;EAC5B;EACA;;;;ACCK,IAAM,aAAuB;EAClC;EAAwB;EAExB;EAA4B;EAC5B;EAA4B;;AAWvB,IAAMC,QAAiiBAAiB,KAAW;AAC1C,QAAM,IAAI,QAAQ,qBAAqB,EAAE;AAEzC,QAAM,IAAI,QAAQ,SAAS,EAAE;AAE7B,SAAO;AACT;AAMM,SAAU,YAAY,KAAW;AACrC,QAAM,WACF,IAAI,IACA,aACJ,iBAAiB,GAAG,EACjB,QAAQ,MAAM,EAAE,EAChB,QAAQ,KAAK,sBAAsB,CAAC,EAClC,SAAS,QAAQ,wBAAwB,GAAG;AAMrD,QAAM,YAAY;AAClB,MAAI,iBAAiB,GAAG,EAAE,MAAM,SAAS,KAAK,CAAC,SAAS,MAAM,SAAS,GAAG;AACxE,WAAO,MAAM,WAAW;EAC1B;AACA,SAAO;AACT;AAEA,SAAS,UAAU,GAAS;AAC1B,MAAI,EAAE,WAAW,IAAI,GAAG;AACtB,WAAO,EAAE,QAAQ,MAAM,UAAU;EACnC;AACA,SAAO;AACT;AASM,SAAU,kBACZ,cAAsB,kBAA0B;AAMlD,QAAM,SACF,IAAI,IAAI,UAAU,aACf,QAAQ,MAAM,EAAE,EAChB,QAAQ,KAAK,sBAAsB,CAAC,CAAC;AAC5C,QAAM,aAAa,iBAAiB,IAAI,OAAK,IAAI,IAAI,UAAU,CAAC,CAAC,CAAC;AAClE,QAAM,OAAO,OAAO,SAAS,YAAW;AACxC,QAAM,kBAAkB,KAAK,WAAW,uBAAuB;AAC/D,QAAM,mBAAmB,KAAK,QAAQ,2BAA2B,EAAE;AACnE,QAAM,OAAO,OAAO;AACpB,QAAM,UAAU,SAAS;AAEzB,aAAW,OAAO,YAAY;AAC5B,UAAM,SAAS,IAAI;AACnB,QAAI,CAAC,OAAO,SAAS,gBAAgB,GAAG;AAEtC;IACF;AAGA,QAAI,CAAC,mBAAmB,SAAS,QAAQ;AACvC;IACF;AAIA,QAAI,SAAS;AAEX,UAAI,KAAK,SAAS,GAAG,GAAG;AACtB,YAAI,CAAC,IAAI,SAAS,WAAW,IAAI,GAAG;AAClC;QACF;MACF,OAAO;AACL,YAAI,IAAI,aAAa,MAAM;AAEzB;QACF;MACF;IACF;AAGA,WAAO;EACT;AAGA,SAAO;AACT;AASM,SAAU,+BACZ,WACA,OAA6D;AAE/D,QAAM,iBAAiB,OAAO,KAAK,UAAU,UAAU;AAEvD,aAAW,aAAa,gBAAgB;AACtC,UAAM,kBAAkB,UAAU,WAAW,SAAS;AACtD,QAAI,iBAAiB;AACnB,YAAM,WAAW,eAAe;IAClC;EACF;AACF;;;ACnHO,IAAM,yBACT,CAAC,UAAU,YAAY,UAAU,YAAY,UAAU,QAAQ;AAM5D,IAAM,0BAAoC,CAAC,SAAS,SAAS,QAAQ;AAgBtE,SAAU,wBAAwB,cAAiB;AACvD,QAAM,gBACF,aAAa,sBAAsB,UAAU,UAAU;AAC3D,QAAM,SAAmB,aAAa,WAAW,aAAa,KAAK,CAAA;AAGnE,MAAI,OAAO,SAAS,QAAQ,aAAa,GAAG;AAC1C,WAAO,CAAC,IAAI,QACR,KAAK,sBACL,sFAEA,SAAS,MAAM,eAAe,QAAQ,aAAa,CAAC;EAC1D;AAEA,SAAO,CAAA;AACT;AAYM,SAAU,sBAAsB,WAAc;AAClD,QAAM,gBAAgB,UAAU,sBAAsB,UAAU,UAAU;AAC1E,QAAM,SAAmB,UAAU,WAAW,aAAa,KAAK,CAAA;AAGhE,MAAI,OAAO,SAAS,QAAQ,WAAW,GAAG;AACxC,WAAO,CAAC,IAAI,QACR,KAAK,oBACL,qFAEA,SAAS,cAAc,eAAe,QAAQ,WAAW,CAAC;EAChE;AAEA,SAAO,CAAA;AACT;AAYM,SAAU,qBAAqB,WAAc;AACjD,QAAM,aAAwB,CAAA;AAC9B,QAAM,oBACF,UAAU,uBAAuB,sBAAsB;AAE3D,aAAW,aAAa,mBAAmB;AACzC,UAAM,SAAS,UAAU,WAAW,SAAS,KAAK,CAAA;AAClD,eAAW,SAAS,QAAQ;AAC1B,UAAI,wBAAwB,SAAS,KAAK,GAAG;AAC3C,mBAAW,KAAK,IAAI,QAChB,KAAK,mBACL,QAAQ,aAAa,YAAY,4CAEjC,SAAS,MAAM,WAAW,KAAK,CAAC;MACtC;IACF;EACF;AAEA,SAAO;AACT;AAYM,SAAU,eAAe,WAAc;AAC3C,QAAM,aAAwB,CAAA;AAC9B,QAAM,oBACF,UAAU,uBAAuB,sBAAsB;AAE3D,aAAW,aAAa,mBAAmB;AACzC,UAAM,SAAS,UAAU,WAAW,SAAS,KAAK,CAAA;AAClD,eAAW,SAAS,QAAQ;AAC1B,YAAM,MAAY,iBAAiB,KAAK;AACxC,UAAI,QAAQ,KAAK;AACf,mBAAW,KAAK,IAAI,QAChB,KAAK,gBAAgB,YAAY,mCACjC,SAAS,MAAM,WAAW,KAAK,CAAC;AACpC;MACF;IACF;EACF;AAEA,SAAO;AACT;AAMM,SAAU,+BAA+B,WAAc;AAC3D,MAAI,qBAAyC,CAAA;AAC7C,MAAI,UAAU,cAAc,UAAU,YAAY;AAChD,yBAAqB,UAAU,WAAW,UAAU,UAAU;EAChE,WAAW,UAAU,eAAe,UAAU,YAAY;AACxD,yBAAqB,UAAU,WAAW,UAAU,WAAW;EACjE;AACA,MAAI,uBAAuB,UAAa,mBAAmB,UAAU,GAAG;AACtE,WAAO,CAAA;EACT;AACA,SAAO,CAAC,IAAI,QACR,KAAK,oBACL,8GACA,SAAS,MAAM,UAAU,UAAU,CAAC;AAC1C;AAKM,SAAU,+BAA+B,WAAc;AAC3D,MAAI,UAAU,cAAc,UAAU,cAClC,UAAU,eAAe,UAAU,YAAY;AACjD,WAAO,CAAA;EACT;AACA,SAAO,CAAC,IAAI,QACR,KAAK,oBAAoB,oCACzB,SAAS,MAAM,UAAU,UAAU,CAAC;AAC1C;AAMM,SAAU,6BAA6B,WAAc;AACzD,SAAO,qCAAqC,CAAC,SAAS,CAAC;AACzD;AAMM,SAAU,qCAAqC,YAAiB;AAIpE,QAAM,eAAe,CAAC,QACjB,IAAI,sBAAqB,KACxB,IAAI,sBAAqB,KAAM,IAAI,uBAAsB;AAC/D,QAAM,aAAa,CAAC,QAAa,UAAU,YAAY,IAAI;AAE3D,MAAI,WAAW,KAAK,YAAY,KAAK,CAAC,WAAW,KAAK,UAAU,GAAG;AACjE,UAAM,cAAc;AAIpB,WAAO,CAAC,IAAI,QACR,KAAK,oBAAoB,aAAa,SAAS,MAC/C,UAAU,QAAQ,CAAC;EACzB;AACA,SAAO,CAAA;AACT;AAYM,SAAU,uBAAuB,WAAc;AACnD,SAAO;IACL,GAAG,+BAA+B,SAAS;IAC3C,GAAG,+BAA+B,SAAS;IAC3C,GAAG,6BAA6B,SAAS;;AAE7C;AAYM,SAAU,2BAA2B,WAAc;AACvD,QAAM,aAAwB,CAAA;AAC9B,QAAM,8BACF,UAAU,sBAAsB,UAAU,UAAU;AACxD,QAAM,kBACF,UAAU,WAAW,2BAA2B,KAAK,CAAA;AACzD,MAAI,gBAAgB,SAAS,QAAQ,IAAI,GAAG;AAC1C,WAAO;EACT;AAEA,aAAW,SAAS,iBAAiB;AACnC,QAAI,UAAU,QAAQ,MAAM;AAC1B,iBAAW,KAAK,IAAI,QAChB,KAAK,yBACL,kFAEA,SAAS,cAAc,6BAA6B,KAAK,CAAC;AAC9D;IACF;AAGA,QAAI,MAAM,WAAW,GAAI,GAAG;AAC1B;IACF;AAGA,QAAQ,YAAY,KAAK,KAAK,MAAM,QAAQ,GAAG,MAAM,IAAI;AACvD;IACF;AAEA,UAAM,MAAM,OAAa,iBAAiB,KAAK;AAE/C,UAAM,gBAAsB,kBAAkB,KAAa,IAAI;AAE/D,QAAI,cAAoB,kBAAkB,KAAWC,KAAI;AAGzD,QAAI,aAAa;AACf,YAAM,eAAqB,WAAW,SAAS,YAAY,QAAQ;AACnE,YAAM,cAAc,gBAAgB,SAAS,QAAQ,WAAW;AAChE,UAAI,gBAAgB,CAAC,aAAa;AAChC,sBAAc;MAChB;IACF;AAEA,QAAI,eAAe,eAAe;AAChC,UAAI,eAAe;AACnB,UAAI,YAAY;AAChB,UAAI,aAAa;AACf,uBAAe,YAAY;AAC3B,oBAAY;MACd;AACA,UAAI,eAAe;AACjB,uBAAe,cAAc;AAC7B,qBAAc,UAAU,KAAI,MAAO,KAAM,KAAK;AAC9C,qBAAa;MACf;AAEA,iBAAW,KAAK,IAAI,QAChB,KAAK,yBACL,eAAe,sBAAsB,YACjC,oCACJ,SAAS,MAAM,6BAA6B,KAAK,CAAC;IACxD,OAAO;AACL,iBAAW,KAAK,IAAI,QAChB,KAAK,yBACL,8FAEA,SAAS,cAAc,6BAA6B,KAAK,CAAC;IAChE;EACF;AAEA,SAAO;AACT;AAYM,SAAU,gCAAgC,WAAc;AAC5D,QAAM,aAAa,CAAA;AACnB,QAAM,8BACF,UAAU,sBAAsB,UAAU,UAAU;AACxD,QAAM,kBACF,UAAU,WAAW,2BAA2B,KAAK,CAAA;AAGzD,QAAM,cAAc,UAAU,WAAW,UAAU,YAAY;AAC/D,MAAI,eAAe,CAAC,YAAY,SAAS,+BAA+B,GAAG;AACzE,WAAO,CAAA;EACT;AAEA,aAAW,SAAS,iBAAiB;AAEnC,QAAI,UAAU,QAAQ,MAAM;AAC1B,aAAO,CAAA;IACT;AAEA,UAAM,MAAM,OAAa,iBAAiB,KAAK;AAC/C,UAAM,cAAoB,kBAAkB,KAAWA,KAAI;AAE3D,QAAI,aAAa;AACf,iBAAW,KAAK,IAAI,QAChB,KAAK,yBACL,YAAY,WACR,iEACJ,SAAS,MAAM,6BAA6B,KAAK,CAAC;IACxD,WAAW,gCAAgC,UAAU,YAAY;AAC/D,iBAAW,KAAK,IAAI,QAChB,KAAK,yBACL,+CAA+C,SAAS,cACxD,6BAA6B,KAAK,CAAC;IACzC;EACF;AAEA,SAAO;AACT;AAOM,SAAU,mBAAmB,SAAe;AAChD,MAAI,QAAQ,WAAW,GAAG,KAAK,QAAQ,SAAS,GAAG,GAAG;AAGpD,WAAO;EACT;AACA,MAAI,mDAAmD,KAAK,OAAO,GAAG;AAGpE,WAAO;EACT;AAGA,SAAO;AACT;AAWM,SAAU,cAAc,WAAc;AAC1C,QAAM,aAAwB,CAAA;AAG9B,QAAM,UAAU,CAAC,WAAmB,oBAA6B;AAC/D,eAAW,SAAS,iBAAiB;AACnC,YAAM,OAAa,YAAY,KAAK;AACpC,UAAI,mBAAmB,IAAI,GAAG;AAG5B,YAAI,SAAS,aAAa;AACxB,qBAAW,KAAK,IAAI,QAChB,KAAK,WACL,YAAY,sGAEZ,SAAS,MAAM,WAAW,KAAK,CAAC;QACtC,OAAO;AACL,qBAAW,KAAK,IAAI,QAChB,KAAK,WACL,YAAY,6CAA6C,OACrD,qCACJ,SAAS,MAAM,WAAW,KAAK,CAAC;QACtC;MACF;IACF;EACF;AAGA,EAAM,+BAA+B,WAAW,OAAO;AACvD,SAAO;AACT;AAYM,SAAU,yBAAyB,WAAc;AACrD,QAAM,aAAa,CAAA;AAGnB,MAAI,UAAU,iBAAiB,UAAU,YAAY;AACnD,eAAW,KAAK,IAAI,QAChB,KAAK,sBACL,4FAEA,SAAS,MAAM,UAAU,aAAa,CAAC;EAC7C;AAGA,MAAI,UAAU,YAAY,UAAU,YAAY;AAC9C,eAAW,KAAK,IAAI,QAChB,KAAK,sBACL,sFAEA,SAAS,MAAM,UAAU,QAAQ,CAAC;EACxC;AAGA,MAAI,UAAU,iBAAiB,UAAU,YAAY;AACnD,eAAW,KAAK,IAAI,QAChB,KAAK,sBACL,sGAEA,SAAS,MAAM,UAAU,aAAa,CAAC;EAC7C;AACA,SAAO;AACT;AAYM,SAAU,iBAAiB,WAAc;AAC7C,QAAM,eAAe,IAAI,OAAO,gBAAkB;AAClD,QAAM,aAAwB,CAAA;AAE9B,EAAM,+BACF,WAAW,CAAC,WAAW,oBAAmB;AACxC,eAAW,SAAS,iBAAiB;AACnC,YAAM,QAAQ,MAAM,MAAM,YAAY;AACtC,UAAI,CAAC,OAAO;AACV;MACF;AAGA,YAAM,aAAa,MAAM,CAAC;AAC1B,UAAI,WAAW,SAAS,GAAG;AACzB,mBAAW,KAAK,IAAI,QAChB,KAAK,cACL,gDAAgD,SAAS,QACzD,WAAW,KAAK,CAAC;MACvB;AAEA,UAAI,CAAK,QAAQ,OAAO,IAAI,GAAG;AAC7B,mBAAW,KAAK,IAAI,QAChB,KAAK,eACL,8CAA8C,SAAS,MACvD,WAAW,KAAK,CAAC;MACvB;IACF;EACF,CAAC;AAEL,SAAO;AACT;AAYM,SAAU,aAAa,WAAc;AACzC,QAAM,aAAwB,CAAA;AAE9B,EAAM,+BACF,WAAW,CAAC,WAAW,oBAAmB;AACxC,eAAW,SAAS,iBAAiB;AACnC,YAAM,cAAc,cAAc,UAAU,aACxC,kDACA;AACJ,UAAI,MAAM,WAAW,SAAS,GAAG;AAC/B,mBAAW,KAAK,IAAI,QAChB,KAAK,UAAU,aAAa,SAAS,QAAQ,WAAW,KAAK,CAAC;MACpE;IACF;EACF,CAAC;AAEL,SAAO;AACT;;;AC9fM,SAAU,mBAAmB,WAAc;AAC/C,QAAM,gBACF,UAAU,sBAA0B,UAAU,UAAU;AAC5D,QAAM,SAAmB,UAAU,WAAW,aAAa,KAAK,CAAA;AAEhE,QAAM,sBAAsB,OAAO,KAAK,CAAC,MAAM,CAAC,EAAE,WAAW,GAAI,CAAC;AAGlE,MAAI,uBAAuB,CAAC,OAAO,SAAS,QAAQ,cAAc,GAAG;AACnE,WAAO,CAAC,IAAI,QACR,KAAK,gBACL,yHAEA,SAAS,YAAY,aAAa,CAAC;EACzC;AAEA,SAAO,CAAA;AACT;AAWM,SAAU,gCAAgC,WAAc;AAC5D,QAAM,gBACF,UAAU,sBAA0B,UAAU,UAAU;AAC5D,QAAM,SAAmB,UAAU,WAAW,aAAa,KAAK,CAAA;AAEhE,MAAI,OAAO,SAAS,QAAQ,cAAc,MACrC,CAAC,UAAU,sBAAqB,KAChC,CAAC,UAAU,sBAAqB,IAAK;AACxC,WAAO,CAAC,IAAI,QACR,KAAK,+BACL,qEACA,SAAS,MAAM,aAAa,CAAC;EACnC;AAEA,SAAO,CAAA;AACT;AAaM,SAAU,0BAA0B,WAAc;AACtD,MAAI,CAAC,UAAU,sBAAqB,KAChC,CAAC,UAAU,sBAAqB,GAAI;AACtC,WAAO,CAAA;EACT;AAEA,QAAM,gBACF,UAAU,sBAA0B,UAAU,UAAU;AAC5D,QAAM,SAAmB,UAAU,WAAW,aAAa,KAAK,CAAA;AAEhE,MAAI,CAAC,OAAO,SAAS,QAAQ,aAAa,GAAG;AAC3C,WAAO,CAAC,IAAI,QACR,KAAK,wBACL,iIAEA,SAAS,YAAY,aAAa,CAAC;EACzC;AAEA,SAAO,CAAA;AACT;AAcM,SAAU,uBAAuB,WAAc;AACnD,QAAM,gBACF,UAAU,sBAA0B,UAAU,UAAU;AAC5D,QAAM,SAAmB,UAAU,WAAW,aAAa,KAAK,CAAA;AAEhE,MAAI,CAAC,OAAO,SAAS,QAAQ,cAAc,GAAG;AAC5C,WAAO,CAAA;EACT;AAGA,MAAI,CAAC,OAAO,KACJ,CAAC,MAAM,CAAC,SAAS,UAAU,GAAG,EAAE,SAAS,CAAC,KAAK,EAAE,SAAS,GAAG,CAAC,GAAG;AACvE,WAAO,CAAC,IAAI,QACR,KAAK,oBACL,iJAGA,SAAS,YAAY,aAAa,CAAC;EACzC;AAEA,SAAO,CAAA;AACT;AAWM,SAAU,oCAAoC,WAAc;AAChE,QAAM,gBACF,UAAU,sBAA0B,UAAU,yBAAyB;AAC3E,QAAM,SAAmB,UAAU,WAAW,aAAa,KAAK,CAAA;AAEhE,MAAI,CAAC,OAAO,SAAa,iBAAiB,MAAM,GAAG;AACjD,WAAO,CAAC,IAAI,QACR,KAAK,mCACL,qKAGA,SAAS,MAAU,UAAU,yBAAyB,CAAC;EAC7D;AAEA,SAAO,CAAA;AACT;;;ATjJM,IAAO,eAAP,MAAmB;EACvB;EACA;;;;;EAMA,WAAsB,CAAA;;;;;EAKtB,YAAY,WAAgB,YAAoB;AAI9C,SAAK,UAAU,cAAkB,QAAQ;AAKzC,SAAK,MAAM;EACb;;;;;;;;;;EAWA,SACI,iBACA,oBAAsC;AACxC,SAAK,WAAW,CAAA;AAChB,UAAM,SAAS,sBAAsB;AAMrC,UAAM,eAAe,KAAK,IAAI,gBAAgB,KAAK,SAAS,KAAK,QAAQ;AAGzE,QAAI,iBAAiB;AACnB,iBAAW,SAAS,iBAAiB;AACnC,aAAK,WAAW,KAAK,SAAS,OAAO,MAAM,KAAK,GAAG,CAAC;MACtD;IACF;AAGA,eAAW,SAAS,QAAQ;AAC1B,WAAK,WAAW,KAAK,SAAS,OAAO,MAAM,YAAY,CAAC;IAC1D;AAEA,WAAO,KAAK;EACd;;AAOK,IAAM,iBAAoC;EAChC;EAAwC;EACxC;EAAqC;EACrC;EACA;EACA;EAAgD;EAChD;EAAiC;EACjC;EAAuC;EACzC;EAAoC;;AAO5C,IAAM,mBAAsC;EACjC;EACA;EACA;EACA;EACA;;;;AUvHlB;;;;;AA0BM,IAAO,YAAP,MAAgB;EACpB;;;;EAIA,YAAY,aAAmB;AAI7B,SAAK,MAAM,IAAQ,IAAG;AAEtB,SAAK,MAAM,WAAW;EACxB;;;;;EAMA,MAAM,aAAmB;AAEvB,SAAK,MAAM,IAAQ,IAAG;AAGtB,UAAM,kBAAkB,YAAY,MAAM,GAAG;AAC7C,aAAS,IAAI,GAAG,IAAI,gBAAgB,QAAQ,KAAK;AAC/C,YAAM,iBAAiB,gBAAgB,CAAC,EAAE,KAAI;AAG9C,YAAM,iBAAiB,eAAe,MAAM,MAAM;AAClD,UAAI,MAAM,QAAQ,cAAc,GAAG;AACjC,cAAM,gBAAgB,eAAe,CAAC,EAAE,YAAW;AAKnD,YAAI,iBAAiB,KAAK,IAAI,YAAY;AACxC;QACF;AAEA,YAAI,CAAK,YAAY,aAAa,GAAG;QACrC;AAEA,cAAM,kBAA4B,CAAA;AAClC,iBAAS,gBAAgB,IAAI,GAAI,iBAAiB,eAAe,CAAC,GAC7D,KAAK;AACR,2BAAiB,wBAAwB,cAAc;AACvD,cAAI,CAAC,gBAAgB,SAAS,cAAc,GAAG;AAC7C,4BAAgB,KAAK,cAAc;UACrC;QACF;AACA,aAAK,IAAI,WAAW,aAAa,IAAI;MACvC;IACF;AAEA,WAAO,KAAK;EACd;;AASF,SAAS,wBAAwB,gBAAsB;AACrD,mBAAiB,eAAe,KAAI;AACpC,QAAM,sBAAsB,eAAe,YAAW;AACtD,MAAQ,UAAU,mBAAmB,KAAS,YAAY,cAAc,GAAG;AACzE,WAAO;EACT;AACA,SAAO;AACT;AAEO,IAAM,YAAY,EAAC,wBAAuB;",
  "names": ["Severity", "Type", "Keyword", "TrustedTypesSink", "Directive", "Version", "URLS", "URLS", "URLS"]
}
