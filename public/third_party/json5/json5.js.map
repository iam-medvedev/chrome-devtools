{
  "version": 3,
  "sources": ["lib/index.js", "json5.prebundle.ts"],
  "sourcesContent": ["var __getOwnPropNames = Object.getOwnPropertyNames;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\n\n// package/lib/unicode.js\nvar require_unicode = __commonJS({\n  \"package/lib/unicode.js\"(exports, module) {\n    \"use strict\";\n    module.exports.Space_Separator = /[\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\n    module.exports.ID_Start = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\n    module.exports.ID_Continue = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF9\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE83\\uDE86-\\uDE99\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\n  }\n});\n\n// package/lib/util.js\nvar require_util = __commonJS({\n  \"package/lib/util.js\"(exports, module) {\n    \"use strict\";\n    var unicode = require_unicode();\n    module.exports = {\n      isSpaceSeparator(c) {\n        return typeof c === \"string\" && unicode.Space_Separator.test(c);\n      },\n      isIdStartChar(c) {\n        return typeof c === \"string\" && (c >= \"a\" && c <= \"z\" || c >= \"A\" && c <= \"Z\" || c === \"$\" || c === \"_\" || unicode.ID_Start.test(c));\n      },\n      isIdContinueChar(c) {\n        return typeof c === \"string\" && (c >= \"a\" && c <= \"z\" || c >= \"A\" && c <= \"Z\" || c >= \"0\" && c <= \"9\" || c === \"$\" || c === \"_\" || c === \"\\u200C\" || c === \"\\u200D\" || unicode.ID_Continue.test(c));\n      },\n      isDigit(c) {\n        return typeof c === \"string\" && /[0-9]/.test(c);\n      },\n      isHexDigit(c) {\n        return typeof c === \"string\" && /[0-9A-Fa-f]/.test(c);\n      }\n    };\n  }\n});\n\n// package/lib/parse.js\nvar require_parse = __commonJS({\n  \"package/lib/parse.js\"(exports, module) {\n    \"use strict\";\n    var util = require_util();\n    var source;\n    var parseState;\n    var stack;\n    var pos;\n    var line;\n    var column;\n    var token;\n    var key;\n    var root;\n    module.exports = function parse(text, reviver) {\n      source = String(text);\n      parseState = \"start\";\n      stack = [];\n      pos = 0;\n      line = 1;\n      column = 0;\n      token = void 0;\n      key = void 0;\n      root = void 0;\n      do {\n        token = lex();\n        parseStates[parseState]();\n      } while (token.type !== \"eof\");\n      if (typeof reviver === \"function\") {\n        return internalize({ \"\": root }, \"\", reviver);\n      }\n      return root;\n    };\n    function internalize(holder, name, reviver) {\n      const value = holder[name];\n      if (value != null && typeof value === \"object\") {\n        if (Array.isArray(value)) {\n          for (let i = 0; i < value.length; i++) {\n            const key2 = String(i);\n            const replacement = internalize(value, key2, reviver);\n            if (replacement === void 0) {\n              delete value[key2];\n            } else {\n              Object.defineProperty(value, key2, {\n                value: replacement,\n                writable: true,\n                enumerable: true,\n                configurable: true\n              });\n            }\n          }\n        } else {\n          for (const key2 in value) {\n            const replacement = internalize(value, key2, reviver);\n            if (replacement === void 0) {\n              delete value[key2];\n            } else {\n              Object.defineProperty(value, key2, {\n                value: replacement,\n                writable: true,\n                enumerable: true,\n                configurable: true\n              });\n            }\n          }\n        }\n      }\n      return reviver.call(holder, name, value);\n    }\n    var lexState;\n    var buffer;\n    var doubleQuote;\n    var sign;\n    var c;\n    function lex() {\n      lexState = \"default\";\n      buffer = \"\";\n      doubleQuote = false;\n      sign = 1;\n      for (; ; ) {\n        c = peek();\n        const token2 = lexStates[lexState]();\n        if (token2) {\n          return token2;\n        }\n      }\n    }\n    function peek() {\n      if (source[pos]) {\n        return String.fromCodePoint(source.codePointAt(pos));\n      }\n    }\n    function read() {\n      const c2 = peek();\n      if (c2 === \"\\n\") {\n        line++;\n        column = 0;\n      } else if (c2) {\n        column += c2.length;\n      } else {\n        column++;\n      }\n      if (c2) {\n        pos += c2.length;\n      }\n      return c2;\n    }\n    var lexStates = {\n      default() {\n        switch (c) {\n          case \"\t\":\n          case \"\\v\":\n          case \"\\f\":\n          case \" \":\n          case \"\\xA0\":\n          case \"\\uFEFF\":\n          case \"\\n\":\n          case \"\\r\":\n          case \"\\u2028\":\n          case \"\\u2029\":\n            read();\n            return;\n          case \"/\":\n            read();\n            lexState = \"comment\";\n            return;\n          case void 0:\n            read();\n            return newToken(\"eof\");\n        }\n        if (util.isSpaceSeparator(c)) {\n          read();\n          return;\n        }\n        return lexStates[parseState]();\n      },\n      comment() {\n        switch (c) {\n          case \"*\":\n            read();\n            lexState = \"multiLineComment\";\n            return;\n          case \"/\":\n            read();\n            lexState = \"singleLineComment\";\n            return;\n        }\n        throw invalidChar(read());\n      },\n      multiLineComment() {\n        switch (c) {\n          case \"*\":\n            read();\n            lexState = \"multiLineCommentAsterisk\";\n            return;\n          case void 0:\n            throw invalidChar(read());\n        }\n        read();\n      },\n      multiLineCommentAsterisk() {\n        switch (c) {\n          case \"*\":\n            read();\n            return;\n          case \"/\":\n            read();\n            lexState = \"default\";\n            return;\n          case void 0:\n            throw invalidChar(read());\n        }\n        read();\n        lexState = \"multiLineComment\";\n      },\n      singleLineComment() {\n        switch (c) {\n          case \"\\n\":\n          case \"\\r\":\n          case \"\\u2028\":\n          case \"\\u2029\":\n            read();\n            lexState = \"default\";\n            return;\n          case void 0:\n            read();\n            return newToken(\"eof\");\n        }\n        read();\n      },\n      value() {\n        switch (c) {\n          case \"{\":\n          case \"[\":\n            return newToken(\"punctuator\", read());\n          case \"n\":\n            read();\n            literal(\"ull\");\n            return newToken(\"null\", null);\n          case \"t\":\n            read();\n            literal(\"rue\");\n            return newToken(\"boolean\", true);\n          case \"f\":\n            read();\n            literal(\"alse\");\n            return newToken(\"boolean\", false);\n          case \"-\":\n          case \"+\":\n            if (read() === \"-\") {\n              sign = -1;\n            }\n            lexState = \"sign\";\n            return;\n          case \".\":\n            buffer = read();\n            lexState = \"decimalPointLeading\";\n            return;\n          case \"0\":\n            buffer = read();\n            lexState = \"zero\";\n            return;\n          case \"1\":\n          case \"2\":\n          case \"3\":\n          case \"4\":\n          case \"5\":\n          case \"6\":\n          case \"7\":\n          case \"8\":\n          case \"9\":\n            buffer = read();\n            lexState = \"decimalInteger\";\n            return;\n          case \"I\":\n            read();\n            literal(\"nfinity\");\n            return newToken(\"numeric\", Infinity);\n          case \"N\":\n            read();\n            literal(\"aN\");\n            return newToken(\"numeric\", NaN);\n          case '\"':\n          case \"'\":\n            doubleQuote = read() === '\"';\n            buffer = \"\";\n            lexState = \"string\";\n            return;\n        }\n        throw invalidChar(read());\n      },\n      identifierNameStartEscape() {\n        if (c !== \"u\") {\n          throw invalidChar(read());\n        }\n        read();\n        const u = unicodeEscape();\n        switch (u) {\n          case \"$\":\n          case \"_\":\n            break;\n          default:\n            if (!util.isIdStartChar(u)) {\n              throw invalidIdentifier();\n            }\n            break;\n        }\n        buffer += u;\n        lexState = \"identifierName\";\n      },\n      identifierName() {\n        switch (c) {\n          case \"$\":\n          case \"_\":\n          case \"\\u200C\":\n          case \"\\u200D\":\n            buffer += read();\n            return;\n          case \"\\\\\":\n            read();\n            lexState = \"identifierNameEscape\";\n            return;\n        }\n        if (util.isIdContinueChar(c)) {\n          buffer += read();\n          return;\n        }\n        return newToken(\"identifier\", buffer);\n      },\n      identifierNameEscape() {\n        if (c !== \"u\") {\n          throw invalidChar(read());\n        }\n        read();\n        const u = unicodeEscape();\n        switch (u) {\n          case \"$\":\n          case \"_\":\n          case \"\\u200C\":\n          case \"\\u200D\":\n            break;\n          default:\n            if (!util.isIdContinueChar(u)) {\n              throw invalidIdentifier();\n            }\n            break;\n        }\n        buffer += u;\n        lexState = \"identifierName\";\n      },\n      sign() {\n        switch (c) {\n          case \".\":\n            buffer = read();\n            lexState = \"decimalPointLeading\";\n            return;\n          case \"0\":\n            buffer = read();\n            lexState = \"zero\";\n            return;\n          case \"1\":\n          case \"2\":\n          case \"3\":\n          case \"4\":\n          case \"5\":\n          case \"6\":\n          case \"7\":\n          case \"8\":\n          case \"9\":\n            buffer = read();\n            lexState = \"decimalInteger\";\n            return;\n          case \"I\":\n            read();\n            literal(\"nfinity\");\n            return newToken(\"numeric\", sign * Infinity);\n          case \"N\":\n            read();\n            literal(\"aN\");\n            return newToken(\"numeric\", NaN);\n        }\n        throw invalidChar(read());\n      },\n      zero() {\n        switch (c) {\n          case \".\":\n            buffer += read();\n            lexState = \"decimalPoint\";\n            return;\n          case \"e\":\n          case \"E\":\n            buffer += read();\n            lexState = \"decimalExponent\";\n            return;\n          case \"x\":\n          case \"X\":\n            buffer += read();\n            lexState = \"hexadecimal\";\n            return;\n        }\n        return newToken(\"numeric\", sign * 0);\n      },\n      decimalInteger() {\n        switch (c) {\n          case \".\":\n            buffer += read();\n            lexState = \"decimalPoint\";\n            return;\n          case \"e\":\n          case \"E\":\n            buffer += read();\n            lexState = \"decimalExponent\";\n            return;\n        }\n        if (util.isDigit(c)) {\n          buffer += read();\n          return;\n        }\n        return newToken(\"numeric\", sign * Number(buffer));\n      },\n      decimalPointLeading() {\n        if (util.isDigit(c)) {\n          buffer += read();\n          lexState = \"decimalFraction\";\n          return;\n        }\n        throw invalidChar(read());\n      },\n      decimalPoint() {\n        switch (c) {\n          case \"e\":\n          case \"E\":\n            buffer += read();\n            lexState = \"decimalExponent\";\n            return;\n        }\n        if (util.isDigit(c)) {\n          buffer += read();\n          lexState = \"decimalFraction\";\n          return;\n        }\n        return newToken(\"numeric\", sign * Number(buffer));\n      },\n      decimalFraction() {\n        switch (c) {\n          case \"e\":\n          case \"E\":\n            buffer += read();\n            lexState = \"decimalExponent\";\n            return;\n        }\n        if (util.isDigit(c)) {\n          buffer += read();\n          return;\n        }\n        return newToken(\"numeric\", sign * Number(buffer));\n      },\n      decimalExponent() {\n        switch (c) {\n          case \"+\":\n          case \"-\":\n            buffer += read();\n            lexState = \"decimalExponentSign\";\n            return;\n        }\n        if (util.isDigit(c)) {\n          buffer += read();\n          lexState = \"decimalExponentInteger\";\n          return;\n        }\n        throw invalidChar(read());\n      },\n      decimalExponentSign() {\n        if (util.isDigit(c)) {\n          buffer += read();\n          lexState = \"decimalExponentInteger\";\n          return;\n        }\n        throw invalidChar(read());\n      },\n      decimalExponentInteger() {\n        if (util.isDigit(c)) {\n          buffer += read();\n          return;\n        }\n        return newToken(\"numeric\", sign * Number(buffer));\n      },\n      hexadecimal() {\n        if (util.isHexDigit(c)) {\n          buffer += read();\n          lexState = \"hexadecimalInteger\";\n          return;\n        }\n        throw invalidChar(read());\n      },\n      hexadecimalInteger() {\n        if (util.isHexDigit(c)) {\n          buffer += read();\n          return;\n        }\n        return newToken(\"numeric\", sign * Number(buffer));\n      },\n      string() {\n        switch (c) {\n          case \"\\\\\":\n            read();\n            buffer += escape();\n            return;\n          case '\"':\n            if (doubleQuote) {\n              read();\n              return newToken(\"string\", buffer);\n            }\n            buffer += read();\n            return;\n          case \"'\":\n            if (!doubleQuote) {\n              read();\n              return newToken(\"string\", buffer);\n            }\n            buffer += read();\n            return;\n          case \"\\n\":\n          case \"\\r\":\n            throw invalidChar(read());\n          case \"\\u2028\":\n          case \"\\u2029\":\n            separatorChar(c);\n            break;\n          case void 0:\n            throw invalidChar(read());\n        }\n        buffer += read();\n      },\n      start() {\n        switch (c) {\n          case \"{\":\n          case \"[\":\n            return newToken(\"punctuator\", read());\n        }\n        lexState = \"value\";\n      },\n      beforePropertyName() {\n        switch (c) {\n          case \"$\":\n          case \"_\":\n            buffer = read();\n            lexState = \"identifierName\";\n            return;\n          case \"\\\\\":\n            read();\n            lexState = \"identifierNameStartEscape\";\n            return;\n          case \"}\":\n            return newToken(\"punctuator\", read());\n          case '\"':\n          case \"'\":\n            doubleQuote = read() === '\"';\n            lexState = \"string\";\n            return;\n        }\n        if (util.isIdStartChar(c)) {\n          buffer += read();\n          lexState = \"identifierName\";\n          return;\n        }\n        throw invalidChar(read());\n      },\n      afterPropertyName() {\n        if (c === \":\") {\n          return newToken(\"punctuator\", read());\n        }\n        throw invalidChar(read());\n      },\n      beforePropertyValue() {\n        lexState = \"value\";\n      },\n      afterPropertyValue() {\n        switch (c) {\n          case \",\":\n          case \"}\":\n            return newToken(\"punctuator\", read());\n        }\n        throw invalidChar(read());\n      },\n      beforeArrayValue() {\n        if (c === \"]\") {\n          return newToken(\"punctuator\", read());\n        }\n        lexState = \"value\";\n      },\n      afterArrayValue() {\n        switch (c) {\n          case \",\":\n          case \"]\":\n            return newToken(\"punctuator\", read());\n        }\n        throw invalidChar(read());\n      },\n      end() {\n        throw invalidChar(read());\n      }\n    };\n    function newToken(type, value) {\n      return {\n        type,\n        value,\n        line,\n        column\n      };\n    }\n    function literal(s) {\n      for (const c2 of s) {\n        const p = peek();\n        if (p !== c2) {\n          throw invalidChar(read());\n        }\n        read();\n      }\n    }\n    function escape() {\n      const c2 = peek();\n      switch (c2) {\n        case \"b\":\n          read();\n          return \"\\b\";\n        case \"f\":\n          read();\n          return \"\\f\";\n        case \"n\":\n          read();\n          return \"\\n\";\n        case \"r\":\n          read();\n          return \"\\r\";\n        case \"t\":\n          read();\n          return \"\t\";\n        case \"v\":\n          read();\n          return \"\\v\";\n        case \"0\":\n          read();\n          if (util.isDigit(peek())) {\n            throw invalidChar(read());\n          }\n          return \"\\0\";\n        case \"x\":\n          read();\n          return hexEscape();\n        case \"u\":\n          read();\n          return unicodeEscape();\n        case \"\\n\":\n        case \"\\u2028\":\n        case \"\\u2029\":\n          read();\n          return \"\";\n        case \"\\r\":\n          read();\n          if (peek() === \"\\n\") {\n            read();\n          }\n          return \"\";\n        case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\":\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case \"8\":\n        case \"9\":\n          throw invalidChar(read());\n        case void 0:\n          throw invalidChar(read());\n      }\n      return read();\n    }\n    function hexEscape() {\n      let buffer2 = \"\";\n      let c2 = peek();\n      if (!util.isHexDigit(c2)) {\n        throw invalidChar(read());\n      }\n      buffer2 += read();\n      c2 = peek();\n      if (!util.isHexDigit(c2)) {\n        throw invalidChar(read());\n      }\n      buffer2 += read();\n      return String.fromCodePoint(parseInt(buffer2, 16));\n    }\n    function unicodeEscape() {\n      let buffer2 = \"\";\n      let count = 4;\n      while (count-- > 0) {\n        const c2 = peek();\n        if (!util.isHexDigit(c2)) {\n          throw invalidChar(read());\n        }\n        buffer2 += read();\n      }\n      return String.fromCodePoint(parseInt(buffer2, 16));\n    }\n    var parseStates = {\n      start() {\n        if (token.type === \"eof\") {\n          throw invalidEOF();\n        }\n        push();\n      },\n      beforePropertyName() {\n        switch (token.type) {\n          case \"identifier\":\n          case \"string\":\n            key = token.value;\n            parseState = \"afterPropertyName\";\n            return;\n          case \"punctuator\":\n            pop();\n            return;\n          case \"eof\":\n            throw invalidEOF();\n        }\n      },\n      afterPropertyName() {\n        if (token.type === \"eof\") {\n          throw invalidEOF();\n        }\n        parseState = \"beforePropertyValue\";\n      },\n      beforePropertyValue() {\n        if (token.type === \"eof\") {\n          throw invalidEOF();\n        }\n        push();\n      },\n      beforeArrayValue() {\n        if (token.type === \"eof\") {\n          throw invalidEOF();\n        }\n        if (token.type === \"punctuator\" && token.value === \"]\") {\n          pop();\n          return;\n        }\n        push();\n      },\n      afterPropertyValue() {\n        if (token.type === \"eof\") {\n          throw invalidEOF();\n        }\n        switch (token.value) {\n          case \",\":\n            parseState = \"beforePropertyName\";\n            return;\n          case \"}\":\n            pop();\n        }\n      },\n      afterArrayValue() {\n        if (token.type === \"eof\") {\n          throw invalidEOF();\n        }\n        switch (token.value) {\n          case \",\":\n            parseState = \"beforeArrayValue\";\n            return;\n          case \"]\":\n            pop();\n        }\n      },\n      end() {\n      }\n    };\n    function push() {\n      let value;\n      switch (token.type) {\n        case \"punctuator\":\n          switch (token.value) {\n            case \"{\":\n              value = {};\n              break;\n            case \"[\":\n              value = [];\n              break;\n          }\n          break;\n        case \"null\":\n        case \"boolean\":\n        case \"numeric\":\n        case \"string\":\n          value = token.value;\n          break;\n      }\n      if (root === void 0) {\n        root = value;\n      } else {\n        const parent = stack[stack.length - 1];\n        if (Array.isArray(parent)) {\n          parent.push(value);\n        } else {\n          Object.defineProperty(parent, key, {\n            value,\n            writable: true,\n            enumerable: true,\n            configurable: true\n          });\n        }\n      }\n      if (value !== null && typeof value === \"object\") {\n        stack.push(value);\n        if (Array.isArray(value)) {\n          parseState = \"beforeArrayValue\";\n        } else {\n          parseState = \"beforePropertyName\";\n        }\n      } else {\n        const current = stack[stack.length - 1];\n        if (current == null) {\n          parseState = \"end\";\n        } else if (Array.isArray(current)) {\n          parseState = \"afterArrayValue\";\n        } else {\n          parseState = \"afterPropertyValue\";\n        }\n      }\n    }\n    function pop() {\n      stack.pop();\n      const current = stack[stack.length - 1];\n      if (current == null) {\n        parseState = \"end\";\n      } else if (Array.isArray(current)) {\n        parseState = \"afterArrayValue\";\n      } else {\n        parseState = \"afterPropertyValue\";\n      }\n    }\n    function invalidChar(c2) {\n      if (c2 === void 0) {\n        return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);\n      }\n      return syntaxError(`JSON5: invalid character '${formatChar(c2)}' at ${line}:${column}`);\n    }\n    function invalidEOF() {\n      return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);\n    }\n    function invalidIdentifier() {\n      column -= 5;\n      return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`);\n    }\n    function separatorChar(c2) {\n      console.warn(`JSON5: '${formatChar(c2)}' in strings is not valid ECMAScript; consider escaping`);\n    }\n    function formatChar(c2) {\n      const replacements = {\n        \"'\": \"\\\\'\",\n        '\"': '\\\\\"',\n        \"\\\\\": \"\\\\\\\\\",\n        \"\\b\": \"\\\\b\",\n        \"\\f\": \"\\\\f\",\n        \"\\n\": \"\\\\n\",\n        \"\\r\": \"\\\\r\",\n        \"\t\": \"\\\\t\",\n        \"\\v\": \"\\\\v\",\n        \"\\0\": \"\\\\0\",\n        \"\\u2028\": \"\\\\u2028\",\n        \"\\u2029\": \"\\\\u2029\"\n      };\n      if (replacements[c2]) {\n        return replacements[c2];\n      }\n      if (c2 < \" \") {\n        const hexString = c2.charCodeAt(0).toString(16);\n        return \"\\\\x\" + (\"00\" + hexString).substring(hexString.length);\n      }\n      return c2;\n    }\n    function syntaxError(message) {\n      const err = new SyntaxError(message);\n      err.lineNumber = line;\n      err.columnNumber = column;\n      return err;\n    }\n  }\n});\n\n// package/lib/stringify.js\nvar require_stringify = __commonJS({\n  \"package/lib/stringify.js\"(exports, module) {\n    \"use strict\";\n    var util = require_util();\n    module.exports = function stringify(value, replacer, space) {\n      const stack = [];\n      let indent = \"\";\n      let propertyList;\n      let replacerFunc;\n      let gap = \"\";\n      let quote;\n      if (replacer != null && typeof replacer === \"object\" && !Array.isArray(replacer)) {\n        space = replacer.space;\n        quote = replacer.quote;\n        replacer = replacer.replacer;\n      }\n      if (typeof replacer === \"function\") {\n        replacerFunc = replacer;\n      } else if (Array.isArray(replacer)) {\n        propertyList = [];\n        for (const v of replacer) {\n          let item;\n          if (typeof v === \"string\") {\n            item = v;\n          } else if (typeof v === \"number\" || v instanceof String || v instanceof Number) {\n            item = String(v);\n          }\n          if (item !== void 0 && propertyList.indexOf(item) < 0) {\n            propertyList.push(item);\n          }\n        }\n      }\n      if (space instanceof Number) {\n        space = Number(space);\n      } else if (space instanceof String) {\n        space = String(space);\n      }\n      if (typeof space === \"number\") {\n        if (space > 0) {\n          space = Math.min(10, Math.floor(space));\n          gap = \"          \".substr(0, space);\n        }\n      } else if (typeof space === \"string\") {\n        gap = space.substr(0, 10);\n      }\n      return serializeProperty(\"\", { \"\": value });\n      function serializeProperty(key, holder) {\n        let value2 = holder[key];\n        if (value2 != null) {\n          if (typeof value2.toJSON5 === \"function\") {\n            value2 = value2.toJSON5(key);\n          } else if (typeof value2.toJSON === \"function\") {\n            value2 = value2.toJSON(key);\n          }\n        }\n        if (replacerFunc) {\n          value2 = replacerFunc.call(holder, key, value2);\n        }\n        if (value2 instanceof Number) {\n          value2 = Number(value2);\n        } else if (value2 instanceof String) {\n          value2 = String(value2);\n        } else if (value2 instanceof Boolean) {\n          value2 = value2.valueOf();\n        }\n        switch (value2) {\n          case null:\n            return \"null\";\n          case true:\n            return \"true\";\n          case false:\n            return \"false\";\n        }\n        if (typeof value2 === \"string\") {\n          return quoteString(value2, false);\n        }\n        if (typeof value2 === \"number\") {\n          return String(value2);\n        }\n        if (typeof value2 === \"object\") {\n          return Array.isArray(value2) ? serializeArray(value2) : serializeObject(value2);\n        }\n        return void 0;\n      }\n      function quoteString(value2) {\n        const quotes = {\n          \"'\": 0.1,\n          '\"': 0.2\n        };\n        const replacements = {\n          \"'\": \"\\\\'\",\n          '\"': '\\\\\"',\n          \"\\\\\": \"\\\\\\\\\",\n          \"\\b\": \"\\\\b\",\n          \"\\f\": \"\\\\f\",\n          \"\\n\": \"\\\\n\",\n          \"\\r\": \"\\\\r\",\n          \"\t\": \"\\\\t\",\n          \"\\v\": \"\\\\v\",\n          \"\\0\": \"\\\\0\",\n          \"\\u2028\": \"\\\\u2028\",\n          \"\\u2029\": \"\\\\u2029\"\n        };\n        let product = \"\";\n        for (let i = 0; i < value2.length; i++) {\n          const c = value2[i];\n          switch (c) {\n            case \"'\":\n            case '\"':\n              quotes[c]++;\n              product += c;\n              continue;\n            case \"\\0\":\n              if (util.isDigit(value2[i + 1])) {\n                product += \"\\\\x00\";\n                continue;\n              }\n          }\n          if (replacements[c]) {\n            product += replacements[c];\n            continue;\n          }\n          if (c < \" \") {\n            let hexString = c.charCodeAt(0).toString(16);\n            product += \"\\\\x\" + (\"00\" + hexString).substring(hexString.length);\n            continue;\n          }\n          product += c;\n        }\n        const quoteChar = quote || Object.keys(quotes).reduce((a, b) => quotes[a] < quotes[b] ? a : b);\n        product = product.replace(new RegExp(quoteChar, \"g\"), replacements[quoteChar]);\n        return quoteChar + product + quoteChar;\n      }\n      function serializeObject(value2) {\n        if (stack.indexOf(value2) >= 0) {\n          throw TypeError(\"Converting circular structure to JSON5\");\n        }\n        stack.push(value2);\n        let stepback = indent;\n        indent = indent + gap;\n        let keys = propertyList || Object.keys(value2);\n        let partial = [];\n        for (const key of keys) {\n          const propertyString = serializeProperty(key, value2);\n          if (propertyString !== void 0) {\n            let member = serializeKey(key) + \":\";\n            if (gap !== \"\") {\n              member += \" \";\n            }\n            member += propertyString;\n            partial.push(member);\n          }\n        }\n        let final;\n        if (partial.length === 0) {\n          final = \"{}\";\n        } else {\n          let properties;\n          if (gap === \"\") {\n            properties = partial.join(\",\");\n            final = \"{\" + properties + \"}\";\n          } else {\n            let separator = \",\\n\" + indent;\n            properties = partial.join(separator);\n            final = \"{\\n\" + indent + properties + \",\\n\" + stepback + \"}\";\n          }\n        }\n        stack.pop();\n        indent = stepback;\n        return final;\n      }\n      function serializeKey(key) {\n        if (key.length === 0) {\n          return quoteString(key, true);\n        }\n        const firstChar = String.fromCodePoint(key.codePointAt(0));\n        if (!util.isIdStartChar(firstChar)) {\n          return quoteString(key, true);\n        }\n        for (let i = firstChar.length; i < key.length; i++) {\n          if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {\n            return quoteString(key, true);\n          }\n        }\n        return key;\n      }\n      function serializeArray(value2) {\n        if (stack.indexOf(value2) >= 0) {\n          throw TypeError(\"Converting circular structure to JSON5\");\n        }\n        stack.push(value2);\n        let stepback = indent;\n        indent = indent + gap;\n        let partial = [];\n        for (let i = 0; i < value2.length; i++) {\n          const propertyString = serializeProperty(String(i), value2);\n          partial.push(propertyString !== void 0 ? propertyString : \"null\");\n        }\n        let final;\n        if (partial.length === 0) {\n          final = \"[]\";\n        } else {\n          if (gap === \"\") {\n            let properties = partial.join(\",\");\n            final = \"[\" + properties + \"]\";\n          } else {\n            let separator = \",\\n\" + indent;\n            let properties = partial.join(separator);\n            final = \"[\\n\" + indent + properties + \",\\n\" + stepback + \"]\";\n          }\n        }\n        stack.pop();\n        indent = stepback;\n        return final;\n      }\n    };\n  }\n});\n\n// package/lib/index.js\nvar require_index = __commonJS({\n  \"package/lib/index.js\"(exports, module) {\n    var parse = require_parse();\n    var stringify = require_stringify();\n    var JSON5 = {\n      parse,\n      stringify\n    };\n    module.exports = JSON5;\n  }\n});\nexport default require_index();\n", "import JSON5 from './lib/index.js';\n\nexport const parse = JSON5.parse;\nexport const stringify = JSON5.stringify;\n"],
  "mappings": "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",
  "names": ["parse", "stringify"]
}
