{"version":3,"file":"CrUXManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/crux-manager/CrUXManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as EmulationModel from '../../models/emulation/emulation.js';\nimport {createTarget, updateHostConfig} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\n\nimport * as CrUXManager from './crux-manager.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\nfunction mockResponse(scopes: {pageScope: CrUXManager.PageScope, deviceScope: CrUXManager.DeviceScope}|null = null):\n    CrUXManager.CrUXResponse {\n  return {\n    record: {\n      key: {},\n      metrics: {\n        largest_contentful_paint: {\n          histogram: [\n            {start: 0, end: 2500, density: 0.5},\n            {start: 2500, end: 4000, density: 0.3},\n            {start: 4000, density: 0.2},\n          ],\n          percentiles: {p75: 1000},\n          // @ts-expect-error\n          testScopes: scopes,\n        },\n        cumulative_layout_shift: {\n          histogram: [\n            {start: 0, end: 0.1, density: 0.1},\n            {start: 0.1, end: 0.25, density: 0.1},\n            {start: 0.25, density: 0.8},\n          ],\n          percentiles: {p75: 0.25},\n          // @ts-expect-error\n          testScopes: scopes,\n        },\n      },\n      collectionPeriod: {\n        firstDate: {year: 2024, month: 1, day: 1},\n        lastDate: {year: 2024, month: 1, day: 29},\n      },\n    },\n  };\n}\n\nasync function triggerMicroTaskQueue(): Promise<void> {\n  await new Promise(resolve => setTimeout(resolve, 0));\n}\n\ndescribeWithMockConnection('CrUXManager', () => {\n  let cruxManager: CrUXManager.CrUXManager;\n  let target: SDK.Target.Target;\n  let resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel;\n  let mockFetch: sinon.SinonStub;\n  let mockConsoleError: sinon.SinonStub;\n\n  beforeEach(async () => {\n    const tabTarget = createTarget({type: SDK.Target.Type.TAB});\n    target = createTarget({parentTarget: tabTarget});\n    resourceTreeModel =\n        target.model(SDK.ResourceTreeModel.ResourceTreeModel) as SDK.ResourceTreeModel.ResourceTreeModel;\n    cruxManager = CrUXManager.CrUXManager.instance({forceNew: true});\n    mockFetch = sinon.stub(window, 'fetch');\n    mockConsoleError = sinon.stub(console, 'error');\n    EmulationModel.DeviceModeModel.DeviceModeModel.instance({forceNew: true});\n  });\n\n  afterEach(() => {\n    mockFetch.restore();\n    mockConsoleError.restore();\n    cruxManager.getConfigSetting().set({enabled: false});\n  });\n\n  describe('storing the user consent', () => {\n    it('uses global storage if the user is not in an OffTheRecord profile', async () => {\n      updateHostConfig({isOffTheRecord: false});\n      const dummyStorage = new Common.Settings.SettingsStorage({});\n      const globalStorage = new Common.Settings.SettingsStorage({});\n\n      Common.Settings.Settings.instance({\n        forceNew: true,\n        syncedStorage: dummyStorage,\n        globalStorage,\n        localStorage: dummyStorage,\n      });\n      const manager = CrUXManager.CrUXManager.instance({forceNew: true});\n      manager.getConfigSetting().set({enabled: true});\n      assert.isTrue(globalStorage.has(manager.getConfigSetting().name));\n    });\n\n    it('uses session storage if the user is in an OffTheRecord profile', async () => {\n      updateHostConfig({isOffTheRecord: true});\n      const dummyStorage = new Common.Settings.SettingsStorage({});\n\n      Common.Settings.Settings.instance({\n        forceNew: true,\n        syncedStorage: dummyStorage,\n        globalStorage: dummyStorage,\n        localStorage: dummyStorage,\n      });\n      const manager = CrUXManager.CrUXManager.instance({forceNew: true});\n      manager.getConfigSetting().set({enabled: true});\n      // SessionStorage is created and managed internally to the Settings\n      // class, and is a private instance variable, so we cannot actually\n      // assert that it contains the value. Best we can do here is to assert\n      // that it did not use the dummy storage, which means that it must have\n      // used session storage as those are the 4 available storage types.\n      assert.isFalse(dummyStorage.has(manager.getConfigSetting().name));\n    });\n  });\n\n  it('isEnabled() returns if the user has consented)', async () => {\n    const manager = CrUXManager.CrUXManager.instance({forceNew: true});\n    manager.getConfigSetting().set({enabled: true});\n    assert.isTrue(manager.isEnabled());\n    manager.getConfigSetting().set({enabled: false});\n    assert.isFalse(manager.isEnabled());\n  });\n\n  describe('getFieldDataForPage', () => {\n    it('should request data for all scopes', async () => {\n      mockFetch.callsFake(async () => new Response(JSON.stringify(mockResponse()), {\n                            status: 200,\n                          }));\n      const pageResult = await cruxManager.getFieldDataForPage('https://example.com');\n\n      const fetchBodies = mockFetch.getCalls()\n                              .map(call => call.args[1].body)\n                              .sort()\n                              .map(body => JSON.parse(body) as CrUXManager.CrUXRequest);\n\n      assert.deepEqual(pageResult, {\n        'origin-ALL': mockResponse(),\n        'origin-DESKTOP': mockResponse(),\n        'origin-PHONE': mockResponse(),\n        'origin-TABLET': null,\n        'url-ALL': mockResponse(),\n        'url-DESKTOP': mockResponse(),\n        'url-PHONE': mockResponse(),\n        'url-TABLET': null,\n        warnings: [],\n      });\n\n      assert.deepEqual(fetchBodies, [\n        {\n          formFactor: 'DESKTOP',\n          metrics: [\n            'first_contentful_paint',\n            'largest_contentful_paint',\n            'cumulative_layout_shift',\n            'interaction_to_next_paint',\n            'round_trip_time',\n            'form_factors',\n            'largest_contentful_paint_image_time_to_first_byte',\n            'largest_contentful_paint_image_resource_load_delay',\n            'largest_contentful_paint_image_resource_load_duration',\n            'largest_contentful_paint_image_element_render_delay',\n          ],\n          origin: 'https://example.com',\n        },\n        {\n          formFactor: 'PHONE',\n          metrics: [\n            'first_contentful_paint',\n            'largest_contentful_paint',\n            'cumulative_layout_shift',\n            'interaction_to_next_paint',\n            'round_trip_time',\n            'form_factors',\n            'largest_contentful_paint_image_time_to_first_byte',\n            'largest_contentful_paint_image_resource_load_delay',\n            'largest_contentful_paint_image_resource_load_duration',\n            'largest_contentful_paint_image_element_render_delay',\n          ],\n          origin: 'https://example.com',\n        },\n        {\n          metrics: [\n            'first_contentful_paint',\n            'largest_contentful_paint',\n            'cumulative_layout_shift',\n            'interaction_to_next_paint',\n            'round_trip_time',\n            'form_factors',\n            'largest_contentful_paint_image_time_to_first_byte',\n            'largest_contentful_paint_image_resource_load_delay',\n            'largest_contentful_paint_image_resource_load_duration',\n            'largest_contentful_paint_image_element_render_delay',\n          ],\n          origin: 'https://example.com',\n        },\n        {\n          formFactor: 'DESKTOP',\n          metrics: [\n            'first_contentful_paint',\n            'largest_contentful_paint',\n            'cumulative_layout_shift',\n            'interaction_to_next_paint',\n            'round_trip_time',\n            'form_factors',\n            'largest_contentful_paint_image_time_to_first_byte',\n            'largest_contentful_paint_image_resource_load_delay',\n            'largest_contentful_paint_image_resource_load_duration',\n            'largest_contentful_paint_image_element_render_delay',\n          ],\n          url: 'https://example.com/',\n        },\n        {\n          formFactor: 'PHONE',\n          metrics: [\n            'first_contentful_paint',\n            'largest_contentful_paint',\n            'cumulative_layout_shift',\n            'interaction_to_next_paint',\n            'round_trip_time',\n            'form_factors',\n            'largest_contentful_paint_image_time_to_first_byte',\n            'largest_contentful_paint_image_resource_load_delay',\n            'largest_contentful_paint_image_resource_load_duration',\n            'largest_contentful_paint_image_element_render_delay',\n          ],\n          url: 'https://example.com/',\n        },\n        {\n          metrics: [\n            'first_contentful_paint',\n            'largest_contentful_paint',\n            'cumulative_layout_shift',\n            'interaction_to_next_paint',\n            'round_trip_time',\n            'form_factors',\n            'largest_contentful_paint_image_time_to_first_byte',\n            'largest_contentful_paint_image_resource_load_delay',\n            'largest_contentful_paint_image_resource_load_duration',\n            'largest_contentful_paint_image_element_render_delay',\n          ],\n          url: 'https://example.com/',\n        },\n      ]);\n    });\n\n    it('should return null for all scopes if no data is found', async () => {\n      mockFetch.callsFake(async () => new Response('{\"error\": {\"status\": \"NOT_FOUND\"}}', {\n                            status: 404,\n                          }));\n      const pageResult = await cruxManager.getFieldDataForPage('https://example.com');\n      assert.deepEqual(pageResult, {\n        'origin-ALL': null,\n        'origin-DESKTOP': null,\n        'origin-PHONE': null,\n        'origin-TABLET': null,\n        'url-ALL': null,\n        'url-DESKTOP': null,\n        'url-PHONE': null,\n        'url-TABLET': null,\n        warnings: [],\n      });\n    });\n\n    it('should cache responses', async () => {\n      mockFetch.callsFake(async () => new Response(JSON.stringify(mockResponse()), {\n                            status: 200,\n                          }));\n\n      await cruxManager.getFieldDataForPage('https://example.com');\n\n      assert.strictEqual(mockFetch.callCount, 6);\n\n      await cruxManager.getFieldDataForPage('https://example.com');\n\n      assert.strictEqual(mockFetch.callCount, 6);\n    });\n\n    it('should cache \"NOT_FOUND\" responses', async () => {\n      mockFetch.callsFake(async () => new Response('{\"error\": {\"status\": \"NOT_FOUND\"}}', {\n                            status: 404,\n                          }));\n\n      await cruxManager.getFieldDataForPage('https://example.com');\n\n      assert.strictEqual(mockFetch.callCount, 6);\n\n      await cruxManager.getFieldDataForPage('https://example.com');\n\n      assert.strictEqual(mockFetch.callCount, 6);\n    });\n\n    it('should not cache error responses', async () => {\n      mockFetch.callsFake(async () => new Response('', {\n                            status: 500,\n                          }));\n\n      await cruxManager.getFieldDataForPage('https://example.com');\n\n      assert.strictEqual(mockFetch.callCount, 6);\n      assert.strictEqual(mockConsoleError.callCount, 6);\n\n      await cruxManager.getFieldDataForPage('https://example.com');\n\n      assert.strictEqual(mockFetch.callCount, 12);\n      assert.strictEqual(mockConsoleError.callCount, 12);\n    });\n\n    it('should ignore hash and search params for caching', async () => {\n      mockFetch.callsFake(async () => new Response(JSON.stringify(mockResponse()), {\n                            status: 200,\n                          }));\n\n      await cruxManager.getFieldDataForPage('https://example.com#hash');\n\n      assert.strictEqual(mockFetch.callCount, 6);\n\n      await cruxManager.getFieldDataForPage('https://example.com?search');\n\n      assert.strictEqual(mockFetch.callCount, 6);\n    });\n\n    it('should exit early for localhost and non-public URLs', async () => {\n      mockFetch.callsFake(async () => new Response(JSON.stringify(mockResponse()), {\n                            status: 200,\n                          }));\n\n      await cruxManager.getFieldDataForPage('https://localhost:8080/');\n      await cruxManager.getFieldDataForPage('https://127.0.0.1:8000/');\n      await cruxManager.getFieldDataForPage('about:blank');\n      await cruxManager.getFieldDataForPage('chrome://tracing');\n      await cruxManager.getFieldDataForPage('chrome-extension://sdkfsddsdsisdof/dashboard.html');\n\n      assert.strictEqual(mockFetch.callCount, 0);\n    });\n  });\n\n  describe('getFieldDataForCurrentPage', () => {\n    let getFieldDataMock: sinon.SinonStub;\n\n    beforeEach(() => {\n      getFieldDataMock = sinon.stub(cruxManager, 'getFieldDataForPage');\n      getFieldDataMock.resolves({\n        'origin-ALL': mockResponse({pageScope: 'origin', deviceScope: 'ALL'}),\n        'origin-DESKTOP': mockResponse({pageScope: 'origin', deviceScope: 'DESKTOP'}),\n        'origin-PHONE': mockResponse({pageScope: 'origin', deviceScope: 'PHONE'}),\n        'origin-TABLET': null,\n        'url-ALL': mockResponse({pageScope: 'url', deviceScope: 'ALL'}),\n        'url-DESKTOP': mockResponse({pageScope: 'url', deviceScope: 'DESKTOP'}),\n        'url-PHONE': mockResponse({pageScope: 'url', deviceScope: 'PHONE'}),\n        'url-TABLET': null,\n        warnings: [],\n      });\n    });\n\n    afterEach(() => {\n      getFieldDataMock.restore();\n    });\n\n    it('should use main document URL if available', async () => {\n      resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.FrameNavigated, {\n        url: 'https://example.com/main/',\n        isPrimaryFrame: () => true,\n      } as SDK.ResourceTreeModel.ResourceTreeFrame);\n      resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.FrameNavigated, {\n        url: 'https://example.com/frame/',\n        isPrimaryFrame: () => false,\n      } as SDK.ResourceTreeModel.ResourceTreeFrame);\n\n      const result = await cruxManager.getFieldDataForCurrentPageForTesting();\n\n      assert.deepEqual(result.warnings, []);\n      assert.strictEqual(getFieldDataMock.callCount, 1);\n      assert.strictEqual(getFieldDataMock.firstCall.args[0], 'https://example.com/main/');\n    });\n\n    it('should use URL override if set', async () => {\n      target.setInspectedURL(urlString`https://example.com/inspected`);\n      cruxManager.getConfigSetting().set(\n          {enabled: false, override: 'https://example.com/override', overrideEnabled: true});\n\n      const result = await cruxManager.getFieldDataForCurrentPageForTesting();\n\n      assert.deepEqual(result.warnings, ['Field data is configured for a different URL than the current page.']);\n      assert.strictEqual(getFieldDataMock.callCount, 1);\n      assert.strictEqual(getFieldDataMock.firstCall.args[0], 'https://example.com/override');\n    });\n\n    it('should use origin map if set', async () => {\n      target.setInspectedURL(urlString`http://localhost:8080/inspected?param`);\n      cruxManager.getConfigSetting().set({\n        enabled: false,\n        originMappings: [{\n          developmentOrigin: 'http://localhost:8080',\n          productionOrigin: 'https://example.com',\n        }],\n      });\n\n      const result = await cruxManager.getFieldDataForCurrentPageForTesting();\n\n      assert.deepEqual(result.warnings, ['Field data is configured for a different URL than the current page.']);\n      assert.strictEqual(getFieldDataMock.callCount, 1);\n      assert.strictEqual(getFieldDataMock.firstCall.args[0], 'https://example.com/inspected');\n    });\n\n    it('should not use origin map if URL override is set', async () => {\n      target.setInspectedURL(urlString`http://localhost:8080/inspected?param`);\n      cruxManager.getConfigSetting().set({\n        enabled: false,\n        override: 'https://google.com',\n        overrideEnabled: true,\n        originMappings: [{\n          developmentOrigin: 'http://localhost:8080',\n          productionOrigin: 'https://example.com',\n        }],\n      });\n\n      const result = await cruxManager.getFieldDataForCurrentPageForTesting();\n\n      assert.deepEqual(result.warnings, ['Field data is configured for a different URL than the current page.']);\n      assert.strictEqual(getFieldDataMock.callCount, 1);\n      assert.strictEqual(getFieldDataMock.firstCall.args[0], 'https://google.com');\n    });\n\n    it('should use inspected URL if main document is unavailable', async () => {\n      target.setInspectedURL(urlString`https://example.com/inspected`);\n\n      const result = await cruxManager.getFieldDataForCurrentPageForTesting();\n\n      assert.deepEqual(result.warnings, []);\n      assert.strictEqual(getFieldDataMock.callCount, 1);\n      assert.strictEqual(getFieldDataMock.firstCall.args[0], 'https://example.com/inspected');\n    });\n\n    it('should wait for inspected URL if main document and inspected URL are unavailable', async () => {\n      target.setInspectedURL(Platform.DevToolsPath.EmptyUrlString);\n\n      const finishPromise = cruxManager.getFieldDataForCurrentPageForTesting();\n\n      await triggerMicroTaskQueue();\n\n      target.setInspectedURL(urlString`https://example.com/awaitInspected`);\n\n      const result = await finishPromise;\n\n      assert.deepEqual(result.warnings, []);\n      assert.strictEqual(getFieldDataMock.callCount, 1);\n      assert.strictEqual(getFieldDataMock.firstCall.args[0], 'https://example.com/awaitInspected');\n    });\n\n    it('getSelectedFieldMetricData - should take from selected page scope', async () => {\n      cruxManager.getConfigSetting().set({enabled: true});\n      await cruxManager.refresh();\n\n      let data: CrUXManager.MetricResponse|undefined;\n\n      cruxManager.fieldPageScope = 'origin';\n      data = cruxManager.getSelectedFieldMetricData('largest_contentful_paint');\n      assert.strictEqual(data?.percentiles?.p75, 1000);\n      // @ts-expect-error\n      assert.strictEqual(data?.testScopes.pageScope, 'origin');\n\n      cruxManager.fieldPageScope = 'url';\n      data = cruxManager.getSelectedFieldMetricData('largest_contentful_paint');\n      assert.strictEqual(data?.percentiles?.p75, 1000);\n      // @ts-expect-error\n      assert.strictEqual(data?.testScopes.pageScope, 'url');\n    });\n\n    it('should take from selected device scope', async () => {\n      cruxManager.getConfigSetting().set({enabled: true});\n      await cruxManager.refresh();\n      cruxManager.fieldPageScope = 'url';\n\n      let data: CrUXManager.MetricResponse|undefined;\n\n      cruxManager.fieldDeviceOption = 'ALL';\n      data = cruxManager.getSelectedFieldMetricData('largest_contentful_paint');\n      assert.strictEqual(data?.percentiles?.p75, 1000);\n      // @ts-expect-error\n      assert.strictEqual(data?.testScopes?.deviceScope, 'ALL');\n\n      cruxManager.fieldDeviceOption = 'PHONE';\n      data = cruxManager.getSelectedFieldMetricData('largest_contentful_paint');\n      assert.strictEqual(data?.percentiles?.p75, 1000);\n      // @ts-expect-error\n      assert.strictEqual(data?.testScopes?.deviceScope, 'PHONE');\n    });\n\n    it('auto device option should chose based on emulation', async () => {\n      cruxManager.fieldDeviceOption = 'AUTO';\n      assert.strictEqual(cruxManager.getSelectedDeviceScope(), 'ALL');\n\n      cruxManager.getConfigSetting().set({enabled: true});\n      await cruxManager.refresh();\n      assert.strictEqual(cruxManager.getSelectedDeviceScope(), 'DESKTOP');\n\n      for (const device of EmulationModel.EmulatedDevices.EmulatedDevicesList.instance().standard()) {\n        if (device.title === 'Moto G Power') {\n          EmulationModel.DeviceModeModel.DeviceModeModel.instance().emulate(\n              EmulationModel.DeviceModeModel.Type.Device, device, device.modes[0], 1);\n        }\n      }\n\n      assert.strictEqual(cruxManager.getSelectedDeviceScope(), 'PHONE');\n    });\n  });\n\n  describe('automatic refresh', () => {\n    let getFieldDataMock: sinon.SinonStub;\n    let eventBodies: Array<CrUXManager.PageResult|undefined> = [];\n\n    beforeEach(() => {\n      eventBodies = [];\n      cruxManager.addEventListener(CrUXManager.Events.FIELD_DATA_CHANGED, event => {\n        eventBodies.push(event.data);\n      });\n      getFieldDataMock = sinon.stub(cruxManager, 'getFieldDataForPage');\n      getFieldDataMock.resolves({\n        'origin-ALL': null,\n        'origin-DESKTOP': null,\n        'origin-PHONE': null,\n        'origin-TABLET': null,\n        'url-ALL': null,\n        'url-DESKTOP': null,\n        'url-PHONE': null,\n        'url-TABLET': null,\n        warnings: [],\n      });\n    });\n\n    afterEach(() => {\n      getFieldDataMock.restore();\n    });\n\n    it('should update when enabled setting changes', async () => {\n      const setting = cruxManager.getConfigSetting();\n\n      setting.set({enabled: true});\n      await triggerMicroTaskQueue();\n\n      assert.strictEqual(getFieldDataMock.callCount, 1);\n      assert.lengthOf(eventBodies, 2);\n      assert.isUndefined(eventBodies[0]);\n      assert.isObject(eventBodies[1]);\n\n      setting.set({enabled: false});\n      await triggerMicroTaskQueue();\n\n      assert.strictEqual(getFieldDataMock.callCount, 1);\n      assert.lengthOf(eventBodies, 3);\n      assert.isUndefined(eventBodies[0]);\n      assert.isObject(eventBodies[1]);\n      assert.isUndefined(eventBodies[2]);\n    });\n\n    it('should trigger on frame navigation if enabled', async () => {\n      const setting = cruxManager.getConfigSetting();\n      setting.set({enabled: true});\n\n      await triggerMicroTaskQueue();\n\n      resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.FrameNavigated, {\n        url: 'https://example.com/main/',\n        isPrimaryFrame: () => true,\n      } as SDK.ResourceTreeModel.ResourceTreeFrame);\n\n      await triggerMicroTaskQueue();\n\n      assert.strictEqual(getFieldDataMock.callCount, 2);\n      assert.lengthOf(eventBodies, 4);\n      assert.isUndefined(eventBodies[0]);\n      assert.isObject(eventBodies[1]);\n      assert.isUndefined(eventBodies[2]);\n      assert.isObject(eventBodies[3]);\n    });\n\n    it('should trigger when URL override set', async () => {\n      const setting = cruxManager.getConfigSetting();\n      setting.set({enabled: true});\n\n      await triggerMicroTaskQueue();\n\n      setting.set({enabled: true, override: 'https://example.com/override', overrideEnabled: true});\n\n      await triggerMicroTaskQueue();\n\n      assert.strictEqual(getFieldDataMock.callCount, 2);\n      assert.lengthOf(eventBodies, 4);\n      assert.isUndefined(eventBodies[0]);\n      assert.isObject(eventBodies[1]);\n      assert.isUndefined(eventBodies[2]);\n      assert.isObject(eventBodies[3]);\n    });\n\n    it('should not trigger on frame navigation if disabled', async () => {\n      const setting = cruxManager.getConfigSetting();\n      setting.set({enabled: false});\n\n      resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.FrameNavigated, {\n        url: 'https://example.com/main/',\n        isPrimaryFrame: () => true,\n      } as SDK.ResourceTreeModel.ResourceTreeFrame);\n\n      await triggerMicroTaskQueue();\n\n      assert.strictEqual(getFieldDataMock.callCount, 0);\n      assert.lengthOf(eventBodies, 2);\n      assert.isUndefined(eventBodies[0]);\n      assert.isUndefined(eventBodies[1]);\n    });\n  });\n});\n"]}