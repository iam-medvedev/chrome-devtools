{"version":3,"file":"CrUXManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/crux-manager/CrUXManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\n\nimport * as CrUXManager from './crux-manager.js';\n\nfunction mockResponse(): CrUXManager.CrUXResponse {\n  return {\n    record: {\n      key: {},\n      metrics: {\n        'largest_contentful_paint': {\n          histogram: [\n            {start: 0, end: 2500, density: 0.5},\n            {start: 2500, end: 4000, density: 0.3},\n            {start: 4000, density: 0.2},\n          ],\n          percentiles: {p75: 1000},\n        },\n        'cumulative_layout_shift': {\n          histogram: [\n            {start: 0, end: 0.1, density: 0.1},\n            {start: 0.1, end: 0.25, density: 0.1},\n            {start: 0.25, density: 0.8},\n          ],\n          percentiles: {p75: 0.25},\n        },\n      },\n      collectionPeriod: {\n        firstDate: {year: 2024, month: 1, day: 1},\n        lastDate: {year: 2024, month: 1, day: 29},\n      },\n    },\n  };\n}\n\nasync function triggerMicroTaskQueue(): Promise<void> {\n  await new Promise(resolve => setTimeout(resolve, 0));\n}\n\ndescribeWithMockConnection('CrUXManager', () => {\n  let cruxManager: CrUXManager.CrUXManager;\n  let target: SDK.Target.Target;\n  let resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel;\n  let mockFetch: sinon.SinonStub;\n  let mockConsoleError: sinon.SinonStub;\n\n  beforeEach(async () => {\n    const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n    target = createTarget({parentTarget: tabTarget});\n    resourceTreeModel =\n        target.model(SDK.ResourceTreeModel.ResourceTreeModel) as SDK.ResourceTreeModel.ResourceTreeModel;\n    cruxManager = CrUXManager.CrUXManager.instance({forceNew: true});\n    mockFetch = sinon.stub(window, 'fetch');\n    mockConsoleError = sinon.stub(console, 'error');\n  });\n\n  afterEach(() => {\n    mockFetch.restore();\n    mockConsoleError.restore();\n    cruxManager.getConfigSetting().set({enabled: false, override: ''});\n  });\n\n  describe('getFieldDataForPage', () => {\n    it('should request data for all scopes', async () => {\n      mockFetch.callsFake(async () => new Response(JSON.stringify(mockResponse()), {\n                            status: 200,\n                          }));\n      const pageResult = await cruxManager.getFieldDataForPage('https://example.com');\n\n      const fetchBodies = mockFetch.getCalls()\n                              .map(call => call.args[1].body)\n                              .sort()\n                              .map(body => JSON.parse(body) as CrUXManager.CrUXRequest);\n\n      assert.deepStrictEqual(pageResult, {\n        'origin-ALL': mockResponse(),\n        'origin-DESKTOP': mockResponse(),\n        'origin-PHONE': mockResponse(),\n        'origin-TABLET': null,\n        'url-ALL': mockResponse(),\n        'url-DESKTOP': mockResponse(),\n        'url-PHONE': mockResponse(),\n        'url-TABLET': null,\n      });\n\n      assert.deepStrictEqual(fetchBodies, [\n        {\n          formFactor: 'DESKTOP',\n          metrics: [\n            'largest_contentful_paint',\n            'cumulative_layout_shift',\n            'interaction_to_next_paint',\n            'round_trip_time',\n          ],\n          origin: 'https://example.com',\n        },\n        {\n          formFactor: 'PHONE',\n          metrics: [\n            'largest_contentful_paint',\n            'cumulative_layout_shift',\n            'interaction_to_next_paint',\n            'round_trip_time',\n          ],\n          origin: 'https://example.com',\n        },\n        {\n          metrics: [\n            'largest_contentful_paint',\n            'cumulative_layout_shift',\n            'interaction_to_next_paint',\n            'round_trip_time',\n          ],\n          origin: 'https://example.com',\n        },\n        {\n          formFactor: 'DESKTOP',\n          metrics: [\n            'largest_contentful_paint',\n            'cumulative_layout_shift',\n            'interaction_to_next_paint',\n            'round_trip_time',\n          ],\n          url: 'https://example.com/',\n        },\n        {\n          formFactor: 'PHONE',\n          metrics: [\n            'largest_contentful_paint',\n            'cumulative_layout_shift',\n            'interaction_to_next_paint',\n            'round_trip_time',\n          ],\n          url: 'https://example.com/',\n        },\n        {\n          metrics: [\n            'largest_contentful_paint',\n            'cumulative_layout_shift',\n            'interaction_to_next_paint',\n            'round_trip_time',\n          ],\n          url: 'https://example.com/',\n        },\n      ]);\n    });\n\n    it('should return null for all scopes if no data is found', async () => {\n      mockFetch.callsFake(async () => new Response('{\"error\": {\"status\": \"NOT_FOUND\"}}', {\n                            status: 404,\n                          }));\n      const pageResult = await cruxManager.getFieldDataForPage('https://example.com');\n      assert.deepStrictEqual(pageResult, {\n        'origin-ALL': null,\n        'origin-DESKTOP': null,\n        'origin-PHONE': null,\n        'origin-TABLET': null,\n        'url-ALL': null,\n        'url-DESKTOP': null,\n        'url-PHONE': null,\n        'url-TABLET': null,\n      });\n    });\n\n    it('should cache responses', async () => {\n      mockFetch.callsFake(async () => new Response(JSON.stringify(mockResponse()), {\n                            status: 200,\n                          }));\n\n      await cruxManager.getFieldDataForPage('https://example.com');\n\n      assert.strictEqual(mockFetch.callCount, 6);\n\n      await cruxManager.getFieldDataForPage('https://example.com');\n\n      assert.strictEqual(mockFetch.callCount, 6);\n    });\n\n    it('should cache \"NOT_FOUND\" responses', async () => {\n      mockFetch.callsFake(async () => new Response('{\"error\": {\"status\": \"NOT_FOUND\"}}', {\n                            status: 404,\n                          }));\n\n      await cruxManager.getFieldDataForPage('https://example.com');\n\n      assert.strictEqual(mockFetch.callCount, 6);\n\n      await cruxManager.getFieldDataForPage('https://example.com');\n\n      assert.strictEqual(mockFetch.callCount, 6);\n    });\n\n    it('should not cache error responses', async () => {\n      mockFetch.callsFake(async () => new Response('', {\n                            status: 500,\n                          }));\n\n      await cruxManager.getFieldDataForPage('https://example.com');\n\n      assert.strictEqual(mockFetch.callCount, 6);\n      assert.strictEqual(mockConsoleError.callCount, 6);\n\n      await cruxManager.getFieldDataForPage('https://example.com');\n\n      assert.strictEqual(mockFetch.callCount, 12);\n      assert.strictEqual(mockConsoleError.callCount, 12);\n    });\n\n    it('should ignore hash and search params for caching', async () => {\n      mockFetch.callsFake(async () => new Response(JSON.stringify(mockResponse()), {\n                            status: 200,\n                          }));\n\n      await cruxManager.getFieldDataForPage('https://example.com#hash');\n\n      assert.strictEqual(mockFetch.callCount, 6);\n\n      await cruxManager.getFieldDataForPage('https://example.com?search');\n\n      assert.strictEqual(mockFetch.callCount, 6);\n    });\n  });\n\n  describe('getFieldDataForCurrentPage', () => {\n    let getFieldDataMock: sinon.SinonStub;\n\n    beforeEach(() => {\n      getFieldDataMock = sinon.stub(cruxManager, 'getFieldDataForPage');\n    });\n\n    afterEach(() => {\n      getFieldDataMock.restore();\n    });\n\n    it('should use main document URL if available', async () => {\n      resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.FrameNavigated, {\n        url: 'https://example.com/main/',\n        isPrimaryFrame: () => true,\n      } as SDK.ResourceTreeModel.ResourceTreeFrame);\n      resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.FrameNavigated, {\n        url: 'https://example.com/frame/',\n        isPrimaryFrame: () => false,\n      } as SDK.ResourceTreeModel.ResourceTreeFrame);\n\n      await cruxManager.getFieldDataForCurrentPage();\n\n      assert.strictEqual(getFieldDataMock.callCount, 1);\n      assert.strictEqual(getFieldDataMock.firstCall.args[0], 'https://example.com/main/');\n    });\n\n    it('should use URL override if set', async () => {\n      target.setInspectedURL('https://example.com/inspected' as Platform.DevToolsPath.UrlString);\n      cruxManager.getConfigSetting().set({enabled: false, override: 'https://example.com/override'});\n\n      await cruxManager.getFieldDataForCurrentPage();\n\n      assert.strictEqual(getFieldDataMock.callCount, 1);\n      assert.strictEqual(getFieldDataMock.firstCall.args[0], 'https://example.com/override');\n    });\n\n    it('should use inspected URL if main document is unavailable', async () => {\n      target.setInspectedURL('https://example.com/inspected' as Platform.DevToolsPath.UrlString);\n\n      await cruxManager.getFieldDataForCurrentPage();\n\n      assert.strictEqual(getFieldDataMock.callCount, 1);\n      assert.strictEqual(getFieldDataMock.firstCall.args[0], 'https://example.com/inspected');\n    });\n\n    it('should wait for inspected URL if main document and inspected URL are unavailable', async () => {\n      target.setInspectedURL(Platform.DevToolsPath.EmptyUrlString);\n\n      const finishPromise = cruxManager.getFieldDataForCurrentPage();\n\n      await triggerMicroTaskQueue();\n\n      target.setInspectedURL('https://example.com/awaitInspected' as Platform.DevToolsPath.UrlString);\n\n      await finishPromise;\n\n      assert.strictEqual(getFieldDataMock.callCount, 1);\n      assert.strictEqual(getFieldDataMock.firstCall.args[0], 'https://example.com/awaitInspected');\n    });\n  });\n\n  describe('automatic refresh', () => {\n    let getFieldDataMock: sinon.SinonStub;\n    let eventBodies: Array<CrUXManager.PageResult|undefined> = [];\n\n    beforeEach(() => {\n      eventBodies = [];\n      cruxManager.addEventListener(CrUXManager.Events.FieldDataChanged, event => {\n        eventBodies.push(event.data);\n      });\n      getFieldDataMock = sinon.stub(cruxManager, 'getFieldDataForCurrentPage');\n      getFieldDataMock.resolves({\n        'origin-ALL': null,\n        'origin-DESKTOP': null,\n        'origin-PHONE': null,\n        'origin-TABLET': null,\n        'url-ALL': null,\n        'url-DESKTOP': null,\n        'url-PHONE': null,\n        'url-TABLET': null,\n      });\n    });\n\n    afterEach(() => {\n      getFieldDataMock.restore();\n    });\n\n    it('should update when enabled setting changes', async () => {\n      const setting = cruxManager.getConfigSetting();\n\n      setting.set({enabled: true, override: ''});\n      await triggerMicroTaskQueue();\n\n      assert.strictEqual(getFieldDataMock.callCount, 1);\n      assert.lengthOf(eventBodies, 2);\n      assert.isUndefined(eventBodies[0]);\n      assert.isObject(eventBodies[1]);\n\n      setting.set({enabled: false, override: ''});\n      await triggerMicroTaskQueue();\n\n      assert.strictEqual(getFieldDataMock.callCount, 1);\n      assert.lengthOf(eventBodies, 3);\n      assert.isUndefined(eventBodies[0]);\n      assert.isObject(eventBodies[1]);\n      assert.isUndefined(eventBodies[2]);\n    });\n\n    it('should trigger on frame navigation if enabled', async () => {\n      const setting = cruxManager.getConfigSetting();\n      setting.set({enabled: true, override: ''});\n\n      await triggerMicroTaskQueue();\n\n      resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.FrameNavigated, {\n        url: 'https://example.com/main/',\n        isPrimaryFrame: () => true,\n      } as SDK.ResourceTreeModel.ResourceTreeFrame);\n\n      await triggerMicroTaskQueue();\n\n      assert.strictEqual(getFieldDataMock.callCount, 2);\n      assert.lengthOf(eventBodies, 4);\n      assert.isUndefined(eventBodies[0]);\n      assert.isObject(eventBodies[1]);\n      assert.isUndefined(eventBodies[2]);\n      assert.isObject(eventBodies[3]);\n    });\n\n    it('should trigger when URL override set', async () => {\n      const setting = cruxManager.getConfigSetting();\n      setting.set({enabled: true, override: ''});\n\n      await triggerMicroTaskQueue();\n\n      setting.set({enabled: true, override: 'https://example.com/override'});\n\n      await triggerMicroTaskQueue();\n\n      assert.strictEqual(getFieldDataMock.callCount, 2);\n      assert.lengthOf(eventBodies, 4);\n      assert.isUndefined(eventBodies[0]);\n      assert.isObject(eventBodies[1]);\n      assert.isUndefined(eventBodies[2]);\n      assert.isObject(eventBodies[3]);\n    });\n\n    it('should not trigger on frame navigation if disabled', async () => {\n      const setting = cruxManager.getConfigSetting();\n      setting.set({enabled: false, override: ''});\n\n      resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.FrameNavigated, {\n        url: 'https://example.com/main/',\n        isPrimaryFrame: () => true,\n      } as SDK.ResourceTreeModel.ResourceTreeFrame);\n\n      await triggerMicroTaskQueue();\n\n      assert.strictEqual(getFieldDataMock.callCount, 0);\n      assert.lengthOf(eventBodies, 2);\n      assert.isUndefined(eventBodies[0]);\n      assert.isUndefined(eventBodies[1]);\n    });\n  });\n});\n"]}