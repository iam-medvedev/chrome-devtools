{
  "version": 3,
  "sources": ["../../../../../../front_end/models/crux-manager/CrUXManager.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as EmulationModel from '../../models/emulation/emulation.js';\n\nconst UIStrings = {\n  /**\n   * @description Warning message indicating that the user will see real user data for a URL which is different from the URL they are currently looking at.\n   */\n  fieldOverrideWarning: 'Field metrics are configured for a different URL than the current page.',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/crux-manager/CrUXManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// This key is expected to be visible in the frontend.\n// b/349721878\nconst CRUX_API_KEY = 'AIzaSyCCSOx25vrb5z0tbedCB3_JRzzbVW6Uwgw';\nconst DEFAULT_ENDPOINT = `https://chromeuxreport.googleapis.com/v1/records:queryRecord?key=${CRUX_API_KEY}`;\n\nexport type StandardMetricNames = 'cumulative_layout_shift'|'first_contentful_paint'|'first_input_delay'|\n    'interaction_to_next_paint'|'largest_contentful_paint'|'experimental_time_to_first_byte'|'round_trip_time'|\n    'largest_contentful_paint_image_time_to_first_byte'|'largest_contentful_paint_image_resource_load_delay'|\n    'largest_contentful_paint_image_resource_load_duration'|'largest_contentful_paint_image_element_render_delay';\nexport type MetricNames = StandardMetricNames|'form_factors';\nexport type FormFactor = 'DESKTOP'|'PHONE'|'TABLET';\nexport type DeviceScope = FormFactor|'ALL';\nexport type DeviceOption = DeviceScope|'AUTO';\nexport type PageScope = 'url'|'origin';\nexport interface Scope {\n  pageScope: PageScope;\n  deviceScope: DeviceScope;\n}\nexport type ConnectionType = 'offline'|'slow-2G'|'2G'|'3G'|'4G';\n\nexport interface CrUXRequest {\n  effectiveConnectionType?: ConnectionType;\n  formFactor?: FormFactor;\n  metrics?: MetricNames[];\n  origin?: string;\n  url?: string;\n}\n\nexport interface MetricResponse {\n  histogram?: Array<{start: number, end?: number, density?: number}>;\n  percentiles?: {p75: number|string};\n}\n\nexport interface FormFactorsResponse {\n  fractions?: {\n    desktop: number,\n    phone: number,\n    tablet: number,\n  };\n}\n\ninterface CollectionDate {\n  year: number;\n  month: number;\n  day: number;\n}\n\ninterface CrUXRecord {\n  key: Omit<CrUXRequest, 'metrics'>;\n  metrics: Partial<Record<StandardMetricNames, MetricResponse>>&{\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    form_factors?: FormFactorsResponse,\n  };\n  collectionPeriod: {\n    firstDate: CollectionDate,\n    lastDate: CollectionDate,\n  };\n}\n\nexport interface CrUXResponse {\n  record: CrUXRecord;\n  urlNormalizationDetails?: {\n    originalUrl: string,\n    normalizedUrl: string,\n  };\n}\n\nexport type PageResult = Record<`${PageScope}-${DeviceScope}`, CrUXResponse|null>&{\n  warnings: string[],\n};\n\nexport interface OriginMapping {\n  developmentOrigin: string;\n  productionOrigin: string;\n}\n\nexport interface ConfigSetting {\n  enabled: boolean;\n  override?: string;\n  overrideEnabled?: boolean;\n  originMappings?: OriginMapping[];\n}\n\nlet cruxManagerInstance: CrUXManager;\n\n/** TODO: Potentially support `TABLET`. Tablet field data will always be `null` until then. **/\nexport const DEVICE_SCOPE_LIST: DeviceScope[] = ['ALL', 'DESKTOP', 'PHONE'];\n\nconst pageScopeList: PageScope[] = ['origin', 'url'];\nconst metrics: MetricNames[] = [\n  'first_contentful_paint',\n  'largest_contentful_paint',\n  'cumulative_layout_shift',\n  'interaction_to_next_paint',\n  'round_trip_time',\n  'form_factors',\n  'largest_contentful_paint_image_time_to_first_byte',\n  'largest_contentful_paint_image_resource_load_delay',\n  'largest_contentful_paint_image_resource_load_duration',\n  'largest_contentful_paint_image_element_render_delay',\n];\n\nexport class CrUXManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #originCache = new Map<string, CrUXResponse|null>();\n  #urlCache = new Map<string, CrUXResponse|null>();\n  #mainDocumentUrl?: string;\n  #configSetting: Common.Settings.Setting<ConfigSetting>;\n  #endpoint = DEFAULT_ENDPOINT;\n  #pageResult?: PageResult;\n  fieldDeviceOption: DeviceOption = 'AUTO';\n  fieldPageScope: PageScope = 'url';\n\n  private constructor() {\n    super();\n\n    /**\n     * In an incognito or guest window - which is called an \"OffTheRecord\"\n     * profile in Chromium -, we do not want to persist the user consent and\n     * should ask for it every time. This is why we see what window type the\n     * user is in before choosing where to look/create this setting. If the\n     * user is in OTR, we store it in the session, which uses sessionStorage\n     * and is short-lived. If the user is not in OTR, we use global, which is\n     * the default behaviour and persists the value to the Chrome profile.\n     * This behaviour has been approved by Chrome Privacy as part of the launch\n     * review.\n     */\n    const useSessionStorage = Root.Runtime.hostConfig.isOffTheRecord === true;\n    const storageTypeForConsent =\n        useSessionStorage ? Common.Settings.SettingStorageType.SESSION : Common.Settings.SettingStorageType.GLOBAL;\n\n    this.#configSetting = Common.Settings.Settings.instance().createSetting<ConfigSetting>(\n        'field-data', {enabled: false, override: '', originMappings: [], overrideEnabled: false},\n        storageTypeForConsent);\n\n    this.#configSetting.addChangeListener(() => {\n      void this.refresh();\n    });\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.FrameNavigated, this.#onFrameNavigated,\n        this);\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): CrUXManager {\n    const {forceNew} = opts;\n    if (!cruxManagerInstance || forceNew) {\n      cruxManagerInstance = new CrUXManager();\n    }\n\n    return cruxManagerInstance;\n  }\n\n  /** The most recent page result from the CrUX service. */\n  get pageResult(): PageResult|undefined {\n    return this.#pageResult;\n  }\n\n  getConfigSetting(): Common.Settings.Setting<ConfigSetting> {\n    return this.#configSetting;\n  }\n\n  isEnabled(): boolean {\n    return this.#configSetting.get().enabled;\n  }\n\n  async getFieldDataForPage(pageUrl: string): Promise<PageResult> {\n    const pageResult: PageResult = {\n      'origin-ALL': null,\n      'origin-DESKTOP': null,\n      'origin-PHONE': null,\n      'origin-TABLET': null,\n      'url-ALL': null,\n      'url-DESKTOP': null,\n      'url-PHONE': null,\n      'url-TABLET': null,\n      warnings: [],\n    };\n\n    try {\n      const normalizedUrl = this.#normalizeUrl(pageUrl);\n      const promises: Array<Promise<void>> = [];\n\n      for (const pageScope of pageScopeList) {\n        for (const deviceScope of DEVICE_SCOPE_LIST) {\n          const promise = this.#getScopedData(normalizedUrl, pageScope, deviceScope).then(response => {\n            pageResult[`${pageScope}-${deviceScope}`] = response;\n          });\n          promises.push(promise);\n        }\n      }\n\n      await Promise.all(promises);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      return pageResult;\n    }\n  }\n\n  #getMappedUrl(unmappedUrl: string): string {\n    try {\n      const unmapped = new URL(unmappedUrl);\n      const mappings = this.#configSetting.get().originMappings || [];\n      const mapping = mappings.find(m => m.developmentOrigin === unmapped.origin);\n      if (!mapping) {\n        return unmappedUrl;\n      }\n\n      const mapped = new URL(mapping.productionOrigin);\n      mapped.pathname = unmapped.pathname;\n\n      return mapped.href;\n    } catch {\n      return unmappedUrl;\n    }\n  }\n\n  async getFieldDataForCurrentPageForTesting(): Promise<PageResult> {\n    return await this.#getFieldDataForCurrentPage();\n  }\n\n  /**\n   * In general, this function should use the main document URL\n   * (i.e. the URL after all redirects but before SPA navigations)\n   *\n   * However, we can't detect the main document URL of the current page if it's\n   * navigation occurred before DevTools was first opened. This function will fall\n   * back to the currently inspected URL (i.e. what is displayed in the omnibox) if\n   * the main document URL cannot be found.\n   */\n  async #getFieldDataForCurrentPage(): Promise<PageResult> {\n    const currentUrl = this.#mainDocumentUrl || await this.#getInspectedURL();\n    const urlForCrux = this.#configSetting.get().overrideEnabled ? this.#configSetting.get().override || '' :\n                                                                   this.#getMappedUrl(currentUrl);\n\n    const result = await this.getFieldDataForPage(urlForCrux);\n    if (currentUrl !== urlForCrux) {\n      result.warnings.push(i18nString(UIStrings.fieldOverrideWarning));\n    }\n    return result;\n  }\n\n  async #getInspectedURL(): Promise<string> {\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    let inspectedURL = targetManager.inspectedURL();\n    if (!inspectedURL) {\n      inspectedURL = await new Promise(resolve => {\n        function handler(event: {data: SDK.Target.Target}): void {\n          const newInspectedURL = event.data.inspectedURL();\n          if (newInspectedURL) {\n            resolve(newInspectedURL);\n            targetManager.removeEventListener(SDK.TargetManager.Events.INSPECTED_URL_CHANGED, handler);\n          }\n        }\n        targetManager.addEventListener(SDK.TargetManager.Events.INSPECTED_URL_CHANGED, handler);\n      });\n    }\n    return inspectedURL;\n  }\n\n  async #onFrameNavigated(event: {data: SDK.ResourceTreeModel.ResourceTreeFrame}): Promise<void> {\n    if (!event.data.isPrimaryFrame()) {\n      return;\n    }\n\n    this.#mainDocumentUrl = event.data.url;\n\n    await this.refresh();\n  }\n\n  async refresh(): Promise<void> {\n    // This does 2 things:\n    // - Tells listeners to clear old data so it isn't shown during a URL transition\n    // - Tells listeners to clear old data when field data is disabled.\n    this.#pageResult = undefined;\n    this.dispatchEventToListeners(Events.FIELD_DATA_CHANGED, undefined);\n\n    if (!this.#configSetting.get().enabled) {\n      return;\n    }\n\n    this.#pageResult = await this.#getFieldDataForCurrentPage();\n    this.dispatchEventToListeners(Events.FIELD_DATA_CHANGED, this.#pageResult);\n  }\n\n  #normalizeUrl(inputUrl: string): URL {\n    const normalizedUrl = new URL(inputUrl);\n    normalizedUrl.hash = '';\n    normalizedUrl.search = '';\n    return normalizedUrl;\n  }\n\n  async #getScopedData(normalizedUrl: URL, pageScope: PageScope, deviceScope: DeviceScope): Promise<CrUXResponse|null> {\n    const {origin, href: url, hostname} = normalizedUrl;\n\n    if (hostname === 'localhost' || hostname === '127.0.0.1' || !origin.startsWith('http')) {\n      return null;\n    }\n\n    const cache = pageScope === 'origin' ? this.#originCache : this.#urlCache;\n    const cacheKey = pageScope === 'origin' ? `${origin}-${deviceScope}` : `${url}-${deviceScope}`;\n    const cachedResponse = cache.get(cacheKey);\n    if (cachedResponse !== undefined) {\n      return cachedResponse;\n    }\n\n    // We shouldn't cache the result in the case of an error\n    // The error could be a transient issue with the network/CrUX server/etc.\n    try {\n      const formFactor = deviceScope === 'ALL' ? undefined : deviceScope;\n      const result = pageScope === 'origin' ? await this.#makeRequest({origin, metrics, formFactor}) :\n                                              await this.#makeRequest({url, metrics, formFactor});\n      cache.set(cacheKey, result);\n      return result;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  async #makeRequest(request: CrUXRequest): Promise<CrUXResponse|null> {\n    const body = JSON.stringify(request);\n    const response = await fetch(this.#endpoint, {\n      method: 'POST',\n      body,\n    });\n\n    if (!response.ok && response.status !== 404) {\n      throw new Error(`Failed to fetch data from CrUX server (Status code: ${response.status})`);\n    }\n\n    const responseData = await response.json();\n    if (response.status === 404) {\n      // This is how CrUX tells us that there is not data available for the provided url/origin\n      // Since it's a valid response, just return null instead of throwing an error.\n      if (responseData?.error?.status === 'NOT_FOUND') {\n        return null;\n      }\n\n      throw new Error(`Failed to fetch data from CrUX server (Status code: ${response.status})`);\n    }\n\n    if (!('record' in responseData)) {\n      throw new Error(`Failed to find data in CrUX response: ${JSON.stringify(responseData)}`);\n    }\n\n    return responseData;\n  }\n\n  #getAutoDeviceScope(): DeviceScope {\n    const emulationModel = EmulationModel.DeviceModeModel.DeviceModeModel.tryInstance();\n    if (emulationModel === null) {\n      return 'ALL';\n    }\n\n    if (emulationModel.isMobile()) {\n      if (this.#pageResult?.[`${this.fieldPageScope}-PHONE`]) {\n        return 'PHONE';\n      }\n\n      return 'ALL';\n    }\n\n    if (this.#pageResult?.[`${this.fieldPageScope}-DESKTOP`]) {\n      return 'DESKTOP';\n    }\n\n    return 'ALL';\n  }\n\n  resolveDeviceOptionToScope(option: DeviceOption): DeviceScope {\n    return option === 'AUTO' ? this.#getAutoDeviceScope() : option;\n  }\n\n  getSelectedDeviceScope(): DeviceScope {\n    return this.resolveDeviceOptionToScope(this.fieldDeviceOption);\n  }\n\n  getSelectedScope(): Scope {\n    return {pageScope: this.fieldPageScope, deviceScope: this.getSelectedDeviceScope()};\n  }\n\n  getSelectedFieldResponse(): CrUXResponse|null|undefined {\n    const pageScope = this.fieldPageScope;\n    const deviceScope = this.getSelectedDeviceScope();\n    return this.getFieldResponse(pageScope, deviceScope);\n  }\n\n  getSelectedFieldMetricData(fieldMetric: StandardMetricNames): MetricResponse|undefined {\n    return this.getSelectedFieldResponse()?.record.metrics[fieldMetric];\n  }\n\n  getFieldResponse(pageScope: PageScope, deviceScope: DeviceScope): CrUXResponse|null|undefined {\n    return this.#pageResult?.[`${pageScope}-${deviceScope}`];\n  }\n\n  setEndpointForTesting(endpoint: string): void {\n    this.#endpoint = endpoint;\n  }\n}\n\nexport const enum Events {\n  FIELD_DATA_CHANGED = 'field-data-changed',\n}\n\ninterface EventTypes {\n  [Events.FIELD_DATA_CHANGED]: PageResult|undefined;\n}\n"],
  "mappings": "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",
  "names": []
}
