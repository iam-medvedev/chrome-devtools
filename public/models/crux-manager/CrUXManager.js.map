{"version":3,"file":"CrUXManager.js","sourceRoot":"","sources":["../../../../../../front_end/models/crux-manager/CrUXManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\n// This key is expected to be visible in the frontend.\n// b/349721878\nconst CRUX_API_KEY = 'AIzaSyCCSOx25vrb5z0tbedCB3_JRzzbVW6Uwgw';\nconst DEFAULT_ENDPOINT = `https://chromeuxreport.googleapis.com/v1/records:queryRecord?key=${CRUX_API_KEY}`;\n\nexport type MetricNames = 'cumulative_layout_shift'|'first_contentful_paint'|'first_input_delay'|\n    'interaction_to_next_paint'|'largest_contentful_paint'|'experimental_time_to_first_byte'|'round_trip_time';\nexport type FormFactor = 'DESKTOP'|'PHONE'|'TABLET';\nexport type DeviceScope = FormFactor|'ALL';\nexport type PageScope = 'url'|'origin';\nexport type ConnectionType = 'offline'|'slow-2G'|'2G'|'3G'|'4G';\n\nexport interface CrUXRequest {\n  effectiveConnectionType?: ConnectionType;\n  formFactor?: FormFactor;\n  metrics?: Array<MetricNames>;\n  origin?: string;\n  url?: string;\n}\n\nexport interface MetricResponse {\n  histogram?: Array<{start: number, end?: number, density?: number}>;\n  percentiles?: {p75: number|string};\n}\n\ninterface CollectionDate {\n  year: number;\n  month: number;\n  day: number;\n}\n\ninterface Record {\n  key: Omit<CrUXRequest, 'metrics'>;\n  metrics: {[K in MetricNames]?: MetricResponse;};\n  collectionPeriod: {\n    firstDate: CollectionDate,\n    lastDate: CollectionDate,\n  };\n}\n\nexport interface CrUXResponse {\n  record: Record;\n  urlNormalizationDetails?: {\n    originalUrl: string,\n    normalizedUrl: string,\n  };\n}\n\nexport type PageResult = {\n  [K in`${PageScope}-${DeviceScope}`]: CrUXResponse|null;\n};\n\nexport interface ConfigSetting {\n  enabled: boolean;\n  override: string;\n}\n\nlet cruxManagerInstance: CrUXManager;\n\n// TODO: Potentially support `TABLET`. Tablet field data will always be `null` until then.\nexport const DEVICE_SCOPE_LIST: DeviceScope[] = ['ALL', 'DESKTOP', 'PHONE'];\n\nconst pageScopeList: PageScope[] = ['origin', 'url'];\nconst metrics: MetricNames[] =\n    ['largest_contentful_paint', 'cumulative_layout_shift', 'interaction_to_next_paint', 'round_trip_time'];\n\nexport class CrUXManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #originCache = new Map<string, CrUXResponse|null>();\n  #urlCache = new Map<string, CrUXResponse|null>();\n  #mainDocumentUrl?: string;\n  #configSetting =\n      Common.Settings.Settings.instance().createSetting<ConfigSetting>('field-data', {enabled: false, override: ''});\n  #endpoint = DEFAULT_ENDPOINT;\n\n  private constructor() {\n    super();\n\n    this.#configSetting.addChangeListener(() => {\n      void this.#automaticRefresh();\n    });\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.FrameNavigated, this.#onFrameNavigated,\n        this);\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): CrUXManager {\n    const {forceNew} = opts;\n    if (!cruxManagerInstance || forceNew) {\n      cruxManagerInstance = new CrUXManager();\n    }\n\n    return cruxManagerInstance;\n  }\n\n  getConfigSetting(): Common.Settings.Setting<ConfigSetting> {\n    return this.#configSetting;\n  }\n\n  async getFieldDataForPage(pageUrl: string): Promise<PageResult> {\n    const pageResult: PageResult = {\n      'origin-ALL': null,\n      'origin-DESKTOP': null,\n      'origin-PHONE': null,\n      'origin-TABLET': null,\n      'url-ALL': null,\n      'url-DESKTOP': null,\n      'url-PHONE': null,\n      'url-TABLET': null,\n    };\n\n    try {\n      const normalizedUrl = this.#normalizeUrl(pageUrl);\n      const promises: Promise<void>[] = [];\n\n      for (const pageScope of pageScopeList) {\n        for (const deviceScope of DEVICE_SCOPE_LIST) {\n          const promise = this.#getScopedData(normalizedUrl, pageScope, deviceScope).then(response => {\n            pageResult[`${pageScope}-${deviceScope}`] = response;\n          });\n          promises.push(promise);\n        }\n      }\n\n      await Promise.all(promises);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      return pageResult;\n    }\n  }\n\n  /**\n   * In general, this function should use the main document URL\n   * (i.e. the URL after all redirects but before SPA navigations)\n   *\n   * However, we can't detect the main document URL of the current page if it's\n   * navigation occurred before DevTools was first opened. This function will fall\n   * back to the currently inspected URL (i.e. what is displayed in the omnibox) if\n   * the main document URL cannot be found.\n   */\n  async getFieldDataForCurrentPage(): Promise<PageResult> {\n    const pageUrl = this.#configSetting.get().override || this.#mainDocumentUrl || await this.#getInspectedURL();\n    return this.getFieldDataForPage(pageUrl);\n  }\n\n  async #getInspectedURL(): Promise<string> {\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    let inspectedURL = targetManager.inspectedURL();\n    if (!inspectedURL) {\n      inspectedURL = await new Promise(resolve => {\n        function handler(event: {data: SDK.Target.Target}): void {\n          const newInspectedURL = event.data.inspectedURL();\n          if (newInspectedURL) {\n            resolve(newInspectedURL);\n            targetManager.removeEventListener(SDK.TargetManager.Events.InspectedURLChanged, handler);\n          }\n        }\n        targetManager.addEventListener(SDK.TargetManager.Events.InspectedURLChanged, handler);\n      });\n    }\n    return inspectedURL;\n  }\n\n  async #onFrameNavigated(event: {data: SDK.ResourceTreeModel.ResourceTreeFrame}): Promise<void> {\n    if (!event.data.isPrimaryFrame()) {\n      return;\n    }\n\n    this.#mainDocumentUrl = event.data.url;\n\n    await this.#automaticRefresh();\n  }\n\n  async #automaticRefresh(): Promise<void> {\n    // This does 2 things:\n    // - Tells listeners to clear old data so it isn't shown during a URL transition\n    // - Tells listeners to clear old data when field data is disabled.\n    this.dispatchEventToListeners(Events.FieldDataChanged, undefined);\n\n    if (!this.#configSetting.get().enabled) {\n      return;\n    }\n\n    const pageResult = await this.getFieldDataForCurrentPage();\n\n    this.dispatchEventToListeners(Events.FieldDataChanged, pageResult);\n  }\n\n  #normalizeUrl(inputUrl: string): URL {\n    const normalizedUrl = new URL(inputUrl);\n    normalizedUrl.hash = '';\n    normalizedUrl.search = '';\n    return normalizedUrl;\n  }\n\n  async #getScopedData(normalizedUrl: URL, pageScope: PageScope, deviceScope: DeviceScope): Promise<CrUXResponse|null> {\n    const {origin, href: url} = normalizedUrl;\n\n    const cache = pageScope === 'origin' ? this.#originCache : this.#urlCache;\n    const cacheKey = pageScope === 'origin' ? `${origin}-${deviceScope}` : `${url}-${deviceScope}`;\n    const cachedResponse = cache.get(cacheKey);\n    if (cachedResponse !== undefined) {\n      return cachedResponse;\n    }\n\n    // We shouldn't cache the result in the case of an error\n    // The error could be a transient issue with the network/CrUX server/etc.\n    try {\n      const formFactor = deviceScope === 'ALL' ? undefined : deviceScope;\n      const result = pageScope === 'origin' ? await this.#makeRequest({origin, metrics, formFactor}) :\n                                              await this.#makeRequest({url, metrics, formFactor});\n      cache.set(cacheKey, result);\n      return result;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  async #makeRequest(request: CrUXRequest): Promise<CrUXResponse|null> {\n    const body = JSON.stringify(request);\n    const response = await fetch(this.#endpoint, {\n      method: 'POST',\n      body,\n    });\n\n    if (!response.ok && response.status !== 404) {\n      throw new Error(`Failed to fetch data from CrUX server (Status code: ${response.status})`);\n    }\n\n    const responseData = await response.json();\n    if (response.status === 404) {\n      // This is how CrUX tells us that there is not data available for the provided url/origin\n      // Since it's a valid response, just return null instead of throwing an error.\n      if (responseData?.error?.status === 'NOT_FOUND') {\n        return null;\n      }\n\n      throw new Error(`Failed to fetch data from CrUX server (Status code: ${response.status})`);\n    }\n\n    if (!('record' in responseData)) {\n      throw new Error(`Failed to find data in CrUX response: ${JSON.stringify(responseData)}`);\n    }\n\n    return responseData;\n  }\n\n  setEndpointForTesting(endpoint: string): void {\n    this.#endpoint = endpoint;\n  }\n}\n\nexport const enum Events {\n  FieldDataChanged = 'field-data-changed',\n}\n\ntype EventTypes = {\n  [Events.FieldDataChanged]: PageResult|undefined,\n};\n"]}