{"version":3,"file":"LanguageExtensionEndpoint.js","sourceRoot":"","sources":["../../../../../../front_end/models/extensions/LanguageExtensionEndpoint.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {Chrome} from '../../../extension-api/ExtensionAPI.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../bindings/bindings.js';\n\nimport {PrivateAPI} from './ExtensionAPI.js';\nimport {ExtensionEndpoint} from './ExtensionEndpoint.js';\n\nclass LanguageExtensionEndpointImpl extends ExtensionEndpoint {\n  private plugin: LanguageExtensionEndpoint;\n  constructor(plugin: LanguageExtensionEndpoint, port: MessagePort) {\n    super(port);\n    this.plugin = plugin;\n  }\n  protected override handleEvent({event}: {event: string}): void {\n    switch (event) {\n      case PrivateAPI.LanguageExtensionPluginEvents.UnregisteredLanguageExtensionPlugin: {\n        this.disconnect();\n        const {pluginManager} = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n        pluginManager.removePlugin(this.plugin);\n        break;\n      }\n    }\n  }\n}\n\nexport class LanguageExtensionEndpoint implements Bindings.DebuggerLanguagePlugins.DebuggerLanguagePlugin {\n  private readonly supportedScriptTypes: {\n    language: string,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    symbol_types: string[],\n  };\n  private readonly endpoint: LanguageExtensionEndpointImpl;\n  private readonly extensionOrigin: string;\n  readonly allowFileAccess: boolean;\n  readonly name: string;\n\n  constructor(\n      allowFileAccess: boolean, extensionOrigin: string, name: string, supportedScriptTypes: {\n        language: string,\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        symbol_types: string[],\n      },\n      port: MessagePort) {\n    this.name = name;\n    this.extensionOrigin = extensionOrigin;\n    this.supportedScriptTypes = supportedScriptTypes;\n    this.endpoint = new LanguageExtensionEndpointImpl(this, port);\n    this.allowFileAccess = allowFileAccess;\n  }\n\n  canAccessURL(url: string): boolean {\n    try {\n      return !url || this.allowFileAccess || new URL(url).protocol !== 'file:';\n    } catch {\n      // If the URL isn't valid, it also isn't a valid file url and it's safe to tell the extensions about it.\n      return true;\n    }\n  }\n\n  handleScript(script: SDK.Script.Script): boolean {\n    try {\n      if (!this.canAccessURL(script.contentURL()) || (script.hasSourceURL && !this.canAccessURL(script.sourceURL)) ||\n          (script.debugSymbols?.externalURL && !this.canAccessURL(script.debugSymbols.externalURL))) {\n        return false;\n      }\n    } catch {\n      return false;\n    }\n    const language = script.scriptLanguage();\n    return language !== null && script.debugSymbols !== null && language === this.supportedScriptTypes.language &&\n        this.supportedScriptTypes.symbol_types.includes(script.debugSymbols.type);\n  }\n\n  createPageResourceLoadInitiator(): SDK.PageResourceLoader.PageResourceLoadInitiator {\n    return {\n      target: null,\n      frameId: null,\n      extensionId: this.extensionOrigin,\n      initiatorUrl: this.extensionOrigin as Platform.DevToolsPath.UrlString,\n    };\n  }\n\n  /** Notify the plugin about a new script\n   */\n  addRawModule(rawModuleId: string, symbolsURL: string, rawModule: Chrome.DevTools.RawModule): Promise<string[]> {\n    if (!this.canAccessURL(symbolsURL) || !this.canAccessURL(rawModule.url)) {\n      return Promise.resolve([]);\n    }\n    return this.endpoint.sendRequest(\n        PrivateAPI.LanguageExtensionPluginCommands.AddRawModule, {rawModuleId, symbolsURL, rawModule});\n  }\n\n  /**\n   * Notifies the plugin that a script is removed.\n   */\n  removeRawModule(rawModuleId: string): Promise<void> {\n    return this.endpoint.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.RemoveRawModule, {rawModuleId});\n  }\n\n  /** Find locations in raw modules from a location in a source file\n   */\n  sourceLocationToRawLocation(sourceLocation: Chrome.DevTools.SourceLocation):\n      Promise<Chrome.DevTools.RawLocationRange[]> {\n    return this.endpoint.sendRequest(\n        PrivateAPI.LanguageExtensionPluginCommands.SourceLocationToRawLocation, {sourceLocation});\n  }\n\n  /** Find locations in source files from a location in a raw module\n   */\n  rawLocationToSourceLocation(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.SourceLocation[]> {\n    return this.endpoint.sendRequest(\n        PrivateAPI.LanguageExtensionPluginCommands.RawLocationToSourceLocation, {rawLocation});\n  }\n\n  getScopeInfo(type: string): Promise<Chrome.DevTools.ScopeInfo> {\n    return this.endpoint.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetScopeInfo, {type});\n  }\n\n  /** List all variables in lexical scope at a given location in a raw module\n   */\n  listVariablesInScope(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.Variable[]> {\n    return this.endpoint.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.ListVariablesInScope, {rawLocation});\n  }\n\n  /** List all function names (including inlined frames) at location\n   */\n  getFunctionInfo(rawLocation: Chrome.DevTools.RawLocation): Promise<{\n    frames: Chrome.DevTools.FunctionInfo[],\n  }> {\n    return this.endpoint.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetFunctionInfo, {rawLocation});\n  }\n\n  /** Find locations in raw modules corresponding to the inline function\n   *  that rawLocation is in.\n   */\n  getInlinedFunctionRanges(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.RawLocationRange[]> {\n    return this.endpoint.sendRequest(\n        PrivateAPI.LanguageExtensionPluginCommands.GetInlinedFunctionRanges, {rawLocation});\n  }\n\n  /** Find locations in raw modules corresponding to inline functions\n   *  called by the function or inline frame that rawLocation is in.\n   */\n  getInlinedCalleesRanges(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.RawLocationRange[]> {\n    return this.endpoint.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetInlinedCalleesRanges, {rawLocation});\n  }\n\n  async getMappedLines(rawModuleId: string, sourceFileURL: string): Promise<number[]|undefined> {\n    return await this.endpoint.sendRequest(\n        PrivateAPI.LanguageExtensionPluginCommands.GetMappedLines, {rawModuleId, sourceFileURL});\n  }\n\n  async evaluate(expression: string, context: Chrome.DevTools.RawLocation, stopId: number):\n      Promise<Chrome.DevTools.RemoteObject> {\n    return await this.endpoint.sendRequest(\n        PrivateAPI.LanguageExtensionPluginCommands.FormatValue, {expression, context, stopId});\n  }\n\n  getProperties(objectId: Chrome.DevTools.RemoteObjectId): Promise<Chrome.DevTools.PropertyDescriptor[]> {\n    return this.endpoint.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.GetProperties, {objectId});\n  }\n\n  releaseObject(objectId: Chrome.DevTools.RemoteObjectId): Promise<void> {\n    return this.endpoint.sendRequest(PrivateAPI.LanguageExtensionPluginCommands.ReleaseObject, {objectId});\n  }\n}\n"]}