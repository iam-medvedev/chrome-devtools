{"version":3,"file":"AutomaticFileSystemWorkspaceBinding.js","sourceRoot":"","sources":["../../../../../../front_end/models/persistence/AutomaticFileSystemWorkspaceBinding.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAIhD,OAAO,KAAK,SAAS,MAAM,2BAA2B,CAAC;AAOvD,OAAO,EACL,MAAM,IAAI,+BAA+B,EAE1C,MAAM,gCAAgC,CAAC;AAExC;;;;;;GAMG;AACH,MAAM,OAAO,UAAU;IACZ,mBAAmB,CAAgC;IACnD,0BAA0B,CAA6B;IACvD,UAAU,CAAoC;IAEvD,YACI,mBAAkD,EAAE,0BAAsD,EAC1G,SAA4C;QAC9C,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,0BAA0B,GAAG,0BAA0B,CAAC;QAC7D,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,EAAE;QACA,OAAO,GAAG,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,IAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;IAC5F,CAAC;IAED,IAAI;QACF,OAAO,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,qBAAqB,CAAC;IAChE,CAAC;IAED,gBAAgB;QACd,OAAO,KAAK,CAAC;IACf,CAAC;IAED,WAAW;QACT,MAAM,EAAC,IAAI,EAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC;QACxC,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,KAAK,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC;YAC1C,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,aAAkD;QAEtE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,aAAkD;QACzE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,iBAAiB;QACf,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,aAAkD,EAAE,WAAmB,EAAE,SAAkB;QAE9G,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,eAAe,CAAC,aAAkD;QAChE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,QAAQ,CAAC,aAAkD;QACzD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,SAAS;QACP,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,CACF,aAAkD,EAAE,QAA6C,EACjG,SAEqD;QACvD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,aAAa,CAAC,KAAsC;QAClD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,gBAAgB,CAAC,KAA8C;QAC7D,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,UAAU,CACZ,KAA8C,EAAE,KAAkB,EAAE,QAAgB,EACpF,SAAmB;QACrB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,aAAa;QACX,OAAO,KAAK,CAAC;IACf,CAAC;IAED,UAAU,CAAC,aAAkD;QAC3D,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,0BAA0B,CAAC,KAA8C;QAC7E,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,MAAM;IACN,CAAC;IAED,kBAAkB,CAAC,IAAqC;QACtD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,mBAAmB,CACrB,aAAkD,EAAE,MAAc,EAAE,cAAuB,EAC3F,QAAiB;QACnB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,KAAK,CAAC,8BAA8B,CAChC,aAAkD,EAClD,uBAA8D,EAC9D,SAAmC;QACrC,OAAO,IAAI,GAAG,EAAE,CAAC;IACnB,CAAC;IAED,YAAY,CAAC,SAAmC;IAChD,CAAC;IAED,kBAAkB,CAAC,IAAqC;QACtD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,aAAa;QACX,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AAED,IAAI,2CAA0F,CAAC;AAE/F;;;;;GAKG;AACH,MAAM,OAAO,mCAAmC;IACrC,2BAA2B,CAA6B;IACjE,WAAW,GAAoB,IAAI,CAAC;IAC3B,0BAA0B,CAA4B;IACtD,UAAU,CAAoC;IAEvD;;OAEG;IACH,YACI,0BAAsD,EACtD,yBAAoD,EACpD,SAA4C;QAE9C,IAAI,CAAC,2BAA2B,GAAG,0BAA0B,CAAC;QAC9D,IAAI,CAAC,0BAA0B,GAAG,yBAAyB,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,2BAA2B,CAAC,gBAAgB,oGACmB,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACxF,IAAI,CAAC,0BAA0B,CAAC,gBAAgB,CAC5C,+BAA+B,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACzE,IAAI,CAAC,0BAA0B,CAAC,gBAAgB,CAC5C,+BAA+B,CAAC,iBAAiB,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC3E,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,0BAA0B,EAAE,yBAAyB,EAAE,SAAS,KAKvF;QACF,QAAQ,EAAE,KAAK;QACf,0BAA0B,EAAE,IAAI;QAChC,yBAAyB,EAAE,IAAI;QAC/B,SAAS,EAAE,IAAI;KAChB;QACC,IAAI,CAAC,2CAA2C,IAAI,QAAQ,EAAE,CAAC;YAC7D,IAAI,CAAC,0BAA0B,IAAI,CAAC,yBAAyB,IAAI,CAAC,SAAS,EAAE,CAAC;gBAC5E,MAAM,IAAI,KAAK,CACX,wDAAwD;oBACxD,yDAAyD;oBACzD,gCAAgC,CAAC,CAAC;YACxC,CAAC;YACD,2CAA2C,GAAG,IAAI,mCAAmC,CACjF,0BAA0B,EAC1B,yBAAyB,EACzB,SAAS,CACZ,CAAC;QACJ,CAAC;QACD,OAAO,2CAA2C,CAAC;IACrD,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,cAAc;QACnB,IAAI,2CAA2C,EAAE,CAAC;YAChD,2CAA2C,CAAC,QAAQ,EAAE,CAAC;YACvD,2CAA2C,GAAG,SAAS,CAAC;QAC1D,CAAC;IACH,CAAC;IAED,QAAQ;QACN,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAClD,CAAC;QACD,IAAI,CAAC,2BAA2B,CAAC,mBAAmB,oGACgB,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACxF,IAAI,CAAC,0BAA0B,CAAC,mBAAmB,CAC/C,+BAA+B,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACzE,IAAI,CAAC,0BAA0B,CAAC,mBAAmB,CAC/C,+BAA+B,CAAC,iBAAiB,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC7E,CAAC;IAED,OAAO;QACL,MAAM,mBAAmB,GAAG,IAAI,CAAC,2BAA2B,CAAC,mBAAmB,CAAC;QACjF,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE,CAAC;YAC9B,IAAI,IAAI,CAAC,WAAW,CAAC,mBAAmB,KAAK,mBAAmB,EAAE,CAAC;gBACjE,OAAO;YACT,CAAC;YACD,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAChD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC1B,CAAC;QACD,IAAI,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,CAAC,KAAK,KAAK,WAAW,EAAE,CAAC;YAC9E,4EAA4E;YAC5E,yDAAyD;YACzD,MAAM,aAAa,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAC9F,IAAI,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,IAAI,EAAE,CAAC;gBACvE,IAAI,CAAC,WAAW,GAAG,IAAI,UAAU,CAC7B,mBAAmB,EACnB,IAAI,CAAC,2BAA2B,EAChC,IAAI,CAAC,UAAU,CAClB,CAAC;gBACF,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC/C,CAAC;QACH,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type {ContentDataOrError} from '../text_utils/ContentData.js';\nimport type {SearchMatch} from '../text_utils/ContentProvider.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {\n  type AutomaticFileSystem,\n  type AutomaticFileSystemManager,\n  Events as AutomaticFileSystemManagerEvents\n} from './AutomaticFileSystemManager.js';\nimport {\n  Events as IsolatedFileSystemManagerEvents,\n  type IsolatedFileSystemManager\n} from './IsolatedFileSystemManager.js';\n\n/**\n * Placeholder project that acts as an empty file system within the workspace,\n * and automatically disappears when the user connects the automatic workspace\n * folder.\n *\n * @see AutomaticFileSystemWorkspaceBinding\n */\nexport class FileSystem implements Workspace.Workspace.Project {\n  readonly automaticFileSystem: Readonly<AutomaticFileSystem>;\n  readonly automaticFileSystemManager: AutomaticFileSystemManager;\n  readonly #workspace: Workspace.Workspace.WorkspaceImpl;\n\n  constructor(\n      automaticFileSystem: Readonly<AutomaticFileSystem>, automaticFileSystemManager: AutomaticFileSystemManager,\n      workspace: Workspace.Workspace.WorkspaceImpl) {\n    this.automaticFileSystem = automaticFileSystem;\n    this.automaticFileSystemManager = automaticFileSystemManager;\n    this.#workspace = workspace;\n  }\n\n  workspace(): Workspace.Workspace.WorkspaceImpl {\n    return this.#workspace;\n  }\n\n  id(): string {\n    return `${this.type()}:${this.automaticFileSystem.root}:${this.automaticFileSystem.uuid}`;\n  }\n\n  type(): Workspace.Workspace.projectTypes {\n    return Workspace.Workspace.projectTypes.ConnectableFileSystem;\n  }\n\n  isServiceProject(): boolean {\n    return false;\n  }\n\n  displayName(): string {\n    const {root} = this.automaticFileSystem;\n    let slash = root.lastIndexOf('/');\n    if (slash === -1 && Host.Platform.isWin()) {\n      slash = root.lastIndexOf('\\\\');\n    }\n    return root.substr(slash + 1);\n  }\n\n  async requestMetadata(_uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Promise<Workspace.UISourceCode.UISourceCodeMetadata|null> {\n    throw new Error('Not implemented');\n  }\n\n  async requestFileContent(_uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<ContentDataOrError> {\n    throw new Error('Not implemented');\n  }\n\n  canSetFileContent(): boolean {\n    return false;\n  }\n\n  async setFileContent(_uiSourceCode: Workspace.UISourceCode.UISourceCode, _newContent: string, _isBase64: boolean):\n      Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  fullDisplayName(_uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    throw new Error('Not implemented');\n  }\n\n  mimeType(_uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    throw new Error('Not implemented');\n  }\n\n  canRename(): boolean {\n    return false;\n  }\n\n  rename(\n      _uiSourceCode: Workspace.UISourceCode.UISourceCode, _newName: Platform.DevToolsPath.RawPathString,\n      _callback:\n          (arg0: boolean, arg1?: string, arg2?: Platform.DevToolsPath.UrlString,\n           arg3?: Common.ResourceType.ResourceType) => void): void {\n    throw new Error('Not implemented');\n  }\n\n  excludeFolder(_path: Platform.DevToolsPath.UrlString): void {\n    throw new Error('Not implemented');\n  }\n\n  canExcludeFolder(_path: Platform.DevToolsPath.EncodedPathString): boolean {\n    return false;\n  }\n\n  async createFile(\n      _path: Platform.DevToolsPath.EncodedPathString, _name: string|null, _content: string,\n      _isBase64?: boolean): Promise<Workspace.UISourceCode.UISourceCode|null> {\n    throw new Error('Not implemented');\n  }\n\n  canCreateFile(): boolean {\n    return false;\n  }\n\n  deleteFile(_uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    throw new Error('Not implemented');\n  }\n\n  async deleteDirectoryRecursively(_path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    throw new Error('Not implemented');\n  }\n\n  remove(): void {\n  }\n\n  removeUISourceCode(_url: Platform.DevToolsPath.UrlString): void {\n    throw new Error('Not implemented');\n  }\n\n  async searchInFileContent(\n      _uiSourceCode: Workspace.UISourceCode.UISourceCode, _query: string, _caseSensitive: boolean,\n      _isRegex: boolean): Promise<SearchMatch[]> {\n    return [];\n  }\n\n  async findFilesMatchingSearchRequest(\n      _searchConfig: Workspace.SearchConfig.SearchConfig,\n      _filesMatchingFileQuery: Workspace.UISourceCode.UISourceCode[],\n      _progress: Common.Progress.Progress): Promise<Map<Workspace.UISourceCode.UISourceCode, SearchMatch[]|null>> {\n    return new Map();\n  }\n\n  indexContent(_progress: Common.Progress.Progress): void {\n  }\n\n  uiSourceCodeForURL(_url: Platform.DevToolsPath.UrlString): Workspace.UISourceCode.UISourceCode|null {\n    return null;\n  }\n\n  uiSourceCodes(): Iterable<Workspace.UISourceCode.UISourceCode> {\n    return [];\n  }\n}\n\nlet automaticFileSystemWorkspaceBindingInstance: AutomaticFileSystemWorkspaceBinding|undefined;\n\n/**\n * Provides a transient workspace `Project` that doesn't contain any `UISourceCode`s,\n * and only acts as a placeholder for the automatic file system, while it's not\n * connected yet. The placeholder project automatically disappears as soon as\n * the automatic file system is connected successfully.\n */\nexport class AutomaticFileSystemWorkspaceBinding {\n  readonly #automaticFileSystemManager: AutomaticFileSystemManager;\n  #fileSystem: FileSystem|null = null;\n  readonly #isolatedFileSystemManager: IsolatedFileSystemManager;\n  readonly #workspace: Workspace.Workspace.WorkspaceImpl;\n\n  /**\n   * @internal\n   */\n  private constructor(\n      automaticFileSystemManager: AutomaticFileSystemManager,\n      isolatedFileSystemManager: IsolatedFileSystemManager,\n      workspace: Workspace.Workspace.WorkspaceImpl,\n  ) {\n    this.#automaticFileSystemManager = automaticFileSystemManager;\n    this.#isolatedFileSystemManager = isolatedFileSystemManager;\n    this.#workspace = workspace;\n    this.#automaticFileSystemManager.addEventListener(\n        AutomaticFileSystemManagerEvents.AUTOMATIC_FILE_SYSTEM_CHANGED, this.#update, this);\n    this.#isolatedFileSystemManager.addEventListener(\n        IsolatedFileSystemManagerEvents.FileSystemAdded, this.#update, this);\n    this.#isolatedFileSystemManager.addEventListener(\n        IsolatedFileSystemManagerEvents.FileSystemRemoved, this.#update, this);\n    this.#update();\n  }\n\n  /**\n   * Yields the `AutomaticFileSystemWorkspaceBinding` singleton.\n   *\n   * @returns the singleton.\n   */\n  static instance({forceNew, automaticFileSystemManager, isolatedFileSystemManager, workspace}: {\n    forceNew: boolean|null,\n    automaticFileSystemManager: AutomaticFileSystemManager|null,\n    isolatedFileSystemManager: IsolatedFileSystemManager|null,\n    workspace: Workspace.Workspace.WorkspaceImpl|null,\n  } = {\n    forceNew: false,\n    automaticFileSystemManager: null,\n    isolatedFileSystemManager: null,\n    workspace: null,\n  }): AutomaticFileSystemWorkspaceBinding {\n    if (!automaticFileSystemWorkspaceBindingInstance || forceNew) {\n      if (!automaticFileSystemManager || !isolatedFileSystemManager || !workspace) {\n        throw new Error(\n            'Unable to create AutomaticFileSystemWorkspaceBinding: ' +\n            'automaticFileSystemManager, isolatedFileSystemManager, ' +\n            'and workspace must be provided');\n      }\n      automaticFileSystemWorkspaceBindingInstance = new AutomaticFileSystemWorkspaceBinding(\n          automaticFileSystemManager,\n          isolatedFileSystemManager,\n          workspace,\n      );\n    }\n    return automaticFileSystemWorkspaceBindingInstance;\n  }\n\n  /**\n   * Clears the `AutomaticFileSystemWorkspaceBinding` singleton (if any);\n   */\n  static removeInstance(): void {\n    if (automaticFileSystemWorkspaceBindingInstance) {\n      automaticFileSystemWorkspaceBindingInstance.#dispose();\n      automaticFileSystemWorkspaceBindingInstance = undefined;\n    }\n  }\n\n  #dispose(): void {\n    if (this.#fileSystem) {\n      this.#workspace.removeProject(this.#fileSystem);\n    }\n    this.#automaticFileSystemManager.removeEventListener(\n        AutomaticFileSystemManagerEvents.AUTOMATIC_FILE_SYSTEM_CHANGED, this.#update, this);\n    this.#isolatedFileSystemManager.removeEventListener(\n        IsolatedFileSystemManagerEvents.FileSystemAdded, this.#update, this);\n    this.#isolatedFileSystemManager.removeEventListener(\n        IsolatedFileSystemManagerEvents.FileSystemRemoved, this.#update, this);\n  }\n\n  #update(): void {\n    const automaticFileSystem = this.#automaticFileSystemManager.automaticFileSystem;\n    if (this.#fileSystem !== null) {\n      if (this.#fileSystem.automaticFileSystem === automaticFileSystem) {\n        return;\n      }\n      this.#workspace.removeProject(this.#fileSystem);\n      this.#fileSystem = null;\n    }\n    if (automaticFileSystem !== null && automaticFileSystem.state !== 'connected') {\n      // Check if we already have a (manually added) file system, and if so, don't\n      // offer the option to connect the automatic file system.\n      const fileSystemURL = Common.ParsedURL.ParsedURL.rawPathToUrlString(automaticFileSystem.root);\n      if (this.#isolatedFileSystemManager.fileSystem(fileSystemURL) === null) {\n        this.#fileSystem = new FileSystem(\n            automaticFileSystem,\n            this.#automaticFileSystemManager,\n            this.#workspace,\n        );\n        this.#workspace.addProject(this.#fileSystem);\n      }\n    }\n  }\n}\n"]}