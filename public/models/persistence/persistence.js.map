{
  "version": 3,
  "sources": ["../../../../../../front_end/models/persistence/Automapping.ts", "../../../../../../front_end/models/persistence/FileSystemWorkspaceBinding.ts", "../../../../../../front_end/models/persistence/IsolatedFileSystemManager.ts", "../../../../../../front_end/models/persistence/IsolatedFileSystem.ts", "../../../../../../front_end/models/persistence/PlatformFileSystem.ts", "../../../../../../front_end/models/persistence/PersistenceImpl.ts", "../../../../../../front_end/models/persistence/PersistenceUtils.ts", "../../../../../../front_end/models/persistence/NetworkPersistenceManager.ts", "../../../../../../front_end/models/persistence/AutomaticFileSystemManager.ts", "../../../../../../front_end/models/persistence/AutomaticFileSystemWorkspaceBinding.ts", "../../../../../../front_end/models/persistence/EditFileSystemView.ts", "editFileSystemView.css.js", "../../../../../../front_end/models/persistence/PersistenceActions.ts", "../../../../../../front_end/models/persistence/WorkspaceSettingsTab.ts", "workspaceSettingsTab.css.js"],
  "sourcesContent": ["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {type FileSystem, FileSystemWorkspaceBinding} from './FileSystemWorkspaceBinding.js';\nimport {PersistenceImpl} from './PersistenceImpl.js';\n\nexport class Automapping {\n  readonly #workspace: Workspace.Workspace.WorkspaceImpl;\n  readonly #onStatusAdded: (arg0: AutomappingStatus) => Promise<void>;\n  readonly #onStatusRemoved: (arg0: AutomappingStatus) => Promise<void>;\n  // Used in web tests\n  private readonly statuses = new Set<AutomappingStatus>();\n\n  readonly #fileSystemUISourceCodes = new FileSystemUISourceCodes();\n\n  // Used in web tests\n  private readonly sweepThrottler = new Common.Throttler.Throttler(100);\n  readonly #sourceCodeToProcessingPromiseMap = new WeakMap<Workspace.UISourceCode.UISourceCode, Promise<void>>();\n\n  readonly #sourceCodeToAutoMappingStatusMap = new WeakMap<Workspace.UISourceCode.UISourceCode, AutomappingStatus>();\n\n  readonly #sourceCodeToMetadataMap =\n      new WeakMap<Workspace.UISourceCode.UISourceCode, Workspace.UISourceCode.UISourceCodeMetadata|null>();\n\n  readonly #filesIndex: FilePathIndex = new FilePathIndex();\n  readonly #projectFoldersIndex: FolderIndex = new FolderIndex();\n  readonly #activeFoldersIndex: FolderIndex = new FolderIndex();\n  readonly #interceptors: Array<(arg0: Workspace.UISourceCode.UISourceCode) => boolean> = [];\n\n  constructor(\n      workspace: Workspace.Workspace.WorkspaceImpl, onStatusAdded: (arg0: AutomappingStatus) => Promise<void>,\n      onStatusRemoved: (arg0: AutomappingStatus) => Promise<void>) {\n    this.#workspace = workspace;\n\n    this.#onStatusAdded = onStatusAdded;\n    this.#onStatusRemoved = onStatusRemoved;\n\n    this.#workspace.addEventListener(\n        Workspace.Workspace.Events.UISourceCodeAdded, event => this.#onUISourceCodeAdded(event.data));\n    this.#workspace.addEventListener(\n        Workspace.Workspace.Events.UISourceCodeRemoved, event => this.#onUISourceCodeRemoved(event.data));\n    this.#workspace.addEventListener(Workspace.Workspace.Events.UISourceCodeRenamed, this.#onUISourceCodeRenamed, this);\n    this.#workspace.addEventListener(\n        Workspace.Workspace.Events.ProjectAdded, event => this.#onProjectAdded(event.data), this);\n    this.#workspace.addEventListener(\n        Workspace.Workspace.Events.ProjectRemoved, event => this.#onProjectRemoved(event.data), this);\n\n    for (const fileSystem of workspace.projects()) {\n      this.#onProjectAdded(fileSystem);\n    }\n    for (const uiSourceCode of workspace.uiSourceCodes()) {\n      this.#onUISourceCodeAdded(uiSourceCode);\n    }\n  }\n\n  addNetworkInterceptor(interceptor: (arg0: Workspace.UISourceCode.UISourceCode) => boolean): void {\n    this.#interceptors.push(interceptor);\n    this.scheduleRemap();\n  }\n\n  scheduleRemap(): void {\n    for (const status of this.statuses.values()) {\n      this.#clearNetworkStatus(status.network);\n    }\n    this.#scheduleSweep();\n  }\n\n  #scheduleSweep(): void {\n    void this.sweepThrottler.schedule(sweepUnmapped.bind(this));\n\n    function sweepUnmapped(this: Automapping): Promise<void> {\n      const networkProjects = this.#workspace.projectsForType(Workspace.Workspace.projectTypes.Network);\n      for (const networkProject of networkProjects) {\n        for (const uiSourceCode of networkProject.uiSourceCodes()) {\n          void this.computeNetworkStatus(uiSourceCode);\n        }\n      }\n      this.onSweepHappenedForTest();\n      return Promise.resolve();\n    }\n  }\n\n  private onSweepHappenedForTest(): void {\n  }\n\n  #onProjectRemoved(project: Workspace.Workspace.Project): void {\n    for (const uiSourceCode of project.uiSourceCodes()) {\n      this.#onUISourceCodeRemoved(uiSourceCode);\n    }\n    if (project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n    const fileSystem = project as FileSystem;\n    for (const gitFolder of fileSystem.initialGitFolders()) {\n      this.#projectFoldersIndex.removeFolder(gitFolder);\n    }\n    this.#projectFoldersIndex.removeFolder(fileSystem.fileSystemPath());\n    this.scheduleRemap();\n  }\n\n  #onProjectAdded(project: Workspace.Workspace.Project): void {\n    if (project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n    const fileSystem = project as FileSystem;\n    for (const gitFolder of fileSystem.initialGitFolders()) {\n      this.#projectFoldersIndex.addFolder(gitFolder);\n    }\n    this.#projectFoldersIndex.addFolder(fileSystem.fileSystemPath());\n    for (const uiSourceCode of project.uiSourceCodes()) {\n      this.#onUISourceCodeAdded(uiSourceCode);\n    }\n    this.scheduleRemap();\n  }\n\n  #onUISourceCodeAdded(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const project = uiSourceCode.project();\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      if (!FileSystemWorkspaceBinding.fileSystemSupportsAutomapping(project)) {\n        return;\n      }\n      this.#filesIndex.addPath(uiSourceCode.url());\n      this.#fileSystemUISourceCodes.add(uiSourceCode);\n      this.#scheduleSweep();\n    } else if (project.type() === Workspace.Workspace.projectTypes.Network) {\n      void this.computeNetworkStatus(uiSourceCode);\n    }\n  }\n\n  #onUISourceCodeRemoved(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.FileSystem) {\n      this.#filesIndex.removePath(uiSourceCode.url());\n      this.#fileSystemUISourceCodes.delete(uiSourceCode.url());\n      const status = this.#sourceCodeToAutoMappingStatusMap.get(uiSourceCode);\n      if (status) {\n        this.#clearNetworkStatus(status.network);\n      }\n    } else if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.Network) {\n      this.#clearNetworkStatus(uiSourceCode);\n    }\n  }\n\n  #onUISourceCodeRenamed(event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.UISourceCodeRenamedEvent>):\n      void {\n    const {uiSourceCode, oldURL} = event.data;\n    if (uiSourceCode.project().type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n\n    this.#filesIndex.removePath(oldURL);\n    this.#fileSystemUISourceCodes.delete(oldURL);\n    const status = this.#sourceCodeToAutoMappingStatusMap.get(uiSourceCode);\n    if (status) {\n      this.#clearNetworkStatus(status.network);\n    }\n\n    this.#filesIndex.addPath(uiSourceCode.url());\n    this.#fileSystemUISourceCodes.add(uiSourceCode);\n    this.#scheduleSweep();\n  }\n\n  computeNetworkStatus(networkSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const processingPromise = this.#sourceCodeToProcessingPromiseMap.get(networkSourceCode);\n    if (processingPromise) {\n      return processingPromise;\n    }\n    if (this.#sourceCodeToAutoMappingStatusMap.has(networkSourceCode)) {\n      return Promise.resolve();\n    }\n    if (this.#interceptors.some(interceptor => interceptor(networkSourceCode))) {\n      return Promise.resolve();\n    }\n    if (Common.ParsedURL.schemeIs(networkSourceCode.url(), 'wasm:')) {\n      return Promise.resolve();\n    }\n    const createBindingPromise =\n        this.#createBinding(networkSourceCode).then(validateStatus.bind(this)).then(onStatus.bind(this));\n    this.#sourceCodeToProcessingPromiseMap.set(networkSourceCode, createBindingPromise);\n    return createBindingPromise;\n\n    async function validateStatus(this: Automapping, status: AutomappingStatus|null): Promise<AutomappingStatus|null> {\n      if (!status) {\n        return null;\n      }\n      if (this.#sourceCodeToProcessingPromiseMap.get(networkSourceCode) !== createBindingPromise) {\n        return null;\n      }\n      if (status.network.contentType().isFromSourceMap() || !status.fileSystem.contentType().isTextType()) {\n        return status;\n      }\n\n      // At the time binding comes, there are multiple user scenarios:\n      // 1. Both network and fileSystem files are **not** dirty.\n      //    This is a typical scenario when user hasn't done any edits yet to the\n      //    files in question.\n      // 2. FileSystem file has unsaved changes, network is clear.\n      //    This typically happens with CSS files editing. Consider the following\n      //    scenario:\n      //      - user edits file that has been successfully mapped before\n      //      - user doesn't save the file\n      //      - user hits reload\n      // 3. Network file has either unsaved changes or commits, but fileSystem file is clear.\n      //    This typically happens when we've been editing file and then realized we'd like to drop\n      //    a folder and persist all the changes.\n      // 4. Network file has either unsaved changes or commits, and fileSystem file has unsaved changes.\n      //    We consider this to be un-realistic scenario and in this case just fail gracefully.\n      //\n      // To support usecase (3), we need to validate against original network content.\n      if (status.fileSystem.isDirty() && (status.network.isDirty() || status.network.hasCommits())) {\n        return null;\n      }\n\n      const [fileSystemContent, networkContent] = (await Promise.all([\n                                                    status.fileSystem.requestContentData(),\n                                                    status.network.project().requestFileContent(status.network),\n                                                  ])).map(TextUtils.ContentData.ContentData.asDeferredContent);\n      if (fileSystemContent.content === null || networkContent === null) {\n        return null;\n      }\n\n      if (this.#sourceCodeToProcessingPromiseMap.get(networkSourceCode) !== createBindingPromise) {\n        return null;\n      }\n\n      const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(status.network);\n      let isValid = false;\n      const fileContent = fileSystemContent.content;\n      if (target && target.type() === SDK.Target.Type.NODE) {\n        if (networkContent.content) {\n          const rewrappedNetworkContent =\n              PersistenceImpl.rewrapNodeJSContent(status.fileSystem, fileContent, networkContent.content);\n          isValid = fileContent === rewrappedNetworkContent;\n        }\n      } else if (networkContent.content) {\n        // Trim trailing whitespaces because V8 adds trailing newline.\n        isValid = fileContent.trimEnd() === networkContent.content.trimEnd();\n      }\n      if (!isValid) {\n        this.prevalidationFailedForTest(status);\n        return null;\n      }\n      return status;\n    }\n\n    async function onStatus(this: Automapping, status: AutomappingStatus|null): Promise<void> {\n      if (this.#sourceCodeToProcessingPromiseMap.get(networkSourceCode) !== createBindingPromise) {\n        return;\n      }\n      if (!status) {\n        this.onBindingFailedForTest();\n        this.#sourceCodeToProcessingPromiseMap.delete(networkSourceCode);\n        return;\n      }\n      // TODO(lushnikov): remove this check once there's a single uiSourceCode per url. @see crbug.com/670180\n      if (this.#sourceCodeToAutoMappingStatusMap.has(status.network) ||\n          this.#sourceCodeToAutoMappingStatusMap.has(status.fileSystem)) {\n        this.#sourceCodeToProcessingPromiseMap.delete(networkSourceCode);\n        return;\n      }\n\n      this.statuses.add(status);\n      this.#sourceCodeToAutoMappingStatusMap.set(status.network, status);\n      this.#sourceCodeToAutoMappingStatusMap.set(status.fileSystem, status);\n      if (status.exactMatch) {\n        const projectFolder = this.#projectFoldersIndex.closestParentFolder(status.fileSystem.url());\n        const newFolderAdded = projectFolder ? this.#activeFoldersIndex.addFolder(projectFolder) : false;\n        if (newFolderAdded) {\n          this.#scheduleSweep();\n        }\n      }\n      await this.#onStatusAdded.call(null, status);\n      this.#sourceCodeToProcessingPromiseMap.delete(networkSourceCode);\n    }\n  }\n\n  private prevalidationFailedForTest(_binding: AutomappingStatus): void {\n  }\n\n  private onBindingFailedForTest(): void {\n  }\n\n  #clearNetworkStatus(networkSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (this.#sourceCodeToProcessingPromiseMap.has(networkSourceCode)) {\n      this.#sourceCodeToProcessingPromiseMap.delete(networkSourceCode);\n      return;\n    }\n    const status = this.#sourceCodeToAutoMappingStatusMap.get(networkSourceCode);\n    if (!status) {\n      return;\n    }\n\n    this.statuses.delete(status);\n    this.#sourceCodeToAutoMappingStatusMap.delete(status.network);\n    this.#sourceCodeToAutoMappingStatusMap.delete(status.fileSystem);\n    if (status.exactMatch) {\n      const projectFolder = this.#projectFoldersIndex.closestParentFolder(status.fileSystem.url());\n      if (projectFolder) {\n        this.#activeFoldersIndex.removeFolder(projectFolder);\n      }\n    }\n    void this.#onStatusRemoved.call(null, status);\n  }\n\n  async #createBinding(networkSourceCode: Workspace.UISourceCode.UISourceCode): Promise<AutomappingStatus|null> {\n    const url = networkSourceCode.url();\n    if (Common.ParsedURL.schemeIs(url, 'file:') || Common.ParsedURL.schemeIs(url, 'snippet:')) {\n      const fileSourceCode = this.#fileSystemUISourceCodes.get(url);\n      const status = fileSourceCode ? new AutomappingStatus(networkSourceCode, fileSourceCode, false) : null;\n      return status;\n    }\n\n    let networkPath = Common.ParsedURL.ParsedURL.extractPath(url);\n    if (networkPath === null) {\n      return null;\n    }\n\n    if (networkPath.endsWith('/')) {\n      networkPath = Common.ParsedURL.ParsedURL.concatenate(networkPath, 'index.html');\n    }\n\n    const similarFiles =\n        this.#filesIndex.similarFiles(networkPath).map(path => this.#fileSystemUISourceCodes.get(path)) as\n        Workspace.UISourceCode.UISourceCode[];\n    if (!similarFiles.length) {\n      return null;\n    }\n\n    await Promise.all(similarFiles.concat(networkSourceCode).map(async sourceCode => {\n      this.#sourceCodeToMetadataMap.set(sourceCode, await sourceCode.requestMetadata());\n    }));\n\n    const activeFiles = similarFiles.filter(file => !!this.#activeFoldersIndex.closestParentFolder(file.url()));\n    const networkMetadata = this.#sourceCodeToMetadataMap.get(networkSourceCode);\n    if (!networkMetadata || (!networkMetadata.modificationTime && typeof networkMetadata.contentSize !== 'number')) {\n      // If networkSourceCode does not have metadata, try to match against active folders.\n      if (activeFiles.length !== 1) {\n        return null;\n      }\n      return new AutomappingStatus(networkSourceCode, activeFiles[0], false);\n    }\n\n    // Try to find exact matches, prioritizing active folders.\n    let exactMatches = this.#filterWithMetadata(activeFiles, networkMetadata);\n    if (!exactMatches.length) {\n      exactMatches = this.#filterWithMetadata(similarFiles, networkMetadata);\n    }\n    if (exactMatches.length !== 1) {\n      return null;\n    }\n    return new AutomappingStatus(networkSourceCode, exactMatches[0], true);\n  }\n\n  #filterWithMetadata(\n      files: Workspace.UISourceCode.UISourceCode[],\n      networkMetadata: Workspace.UISourceCode.UISourceCodeMetadata): Workspace.UISourceCode.UISourceCode[] {\n    return files.filter(file => {\n      const fileMetadata = this.#sourceCodeToMetadataMap.get(file);\n      if (!fileMetadata) {\n        return false;\n      }\n      // Allow a second of difference due to network timestamps lack of precision.\n      const timeMatches = !networkMetadata.modificationTime || !fileMetadata.modificationTime ||\n          Math.abs(networkMetadata.modificationTime.getTime() - fileMetadata.modificationTime.getTime()) < 1000;\n      const contentMatches = !networkMetadata.contentSize || fileMetadata.contentSize === networkMetadata.contentSize;\n      return timeMatches && contentMatches;\n    });\n  }\n}\n\nclass FilePathIndex {\n  readonly #reversedIndex = Common.Trie.Trie.newArrayTrie<string[]>();\n\n  addPath(path: Platform.DevToolsPath.UrlString): void {\n    const reversePathParts = path.split('/').reverse();\n    this.#reversedIndex.add(reversePathParts);\n  }\n\n  removePath(path: Platform.DevToolsPath.UrlString): void {\n    const reversePathParts = path.split('/').reverse();\n    this.#reversedIndex.remove(reversePathParts);\n  }\n\n  similarFiles(networkPath: Platform.DevToolsPath.EncodedPathString): Platform.DevToolsPath.UrlString[] {\n    const reversePathParts = networkPath.split('/').reverse();\n    const longestCommonPrefix = this.#reversedIndex.longestPrefix(reversePathParts, false);\n    if (longestCommonPrefix.length === 0) {\n      return [];\n    }\n    return this.#reversedIndex.words(longestCommonPrefix)\n               .map(reversePathParts => reversePathParts.reverse().join('/')) as Platform.DevToolsPath.UrlString[];\n  }\n}\n\nclass FolderIndex {\n  readonly #index = Common.Trie.Trie.newArrayTrie<string[]>();\n  readonly #folderCount = new Map<string, number>();\n\n  addFolder(path: Platform.DevToolsPath.UrlString): boolean {\n    const pathParts = this.#removeTrailingSlash(path).split('/');\n    this.#index.add(pathParts);\n\n    const pathForCount = pathParts.join('/');\n    const count = this.#folderCount.get(pathForCount) ?? 0;\n    this.#folderCount.set(pathForCount, count + 1);\n    return count === 0;\n  }\n\n  removeFolder(path: Platform.DevToolsPath.UrlString): boolean {\n    const pathParts = this.#removeTrailingSlash(path).split('/');\n    const pathForCount = pathParts.join('/');\n    const count = this.#folderCount.get(pathForCount) ?? 0;\n    if (!count) {\n      return false;\n    }\n    if (count > 1) {\n      this.#folderCount.set(pathForCount, count - 1);\n      return false;\n    }\n    this.#index.remove(pathParts);\n    this.#folderCount.delete(pathForCount);\n    return true;\n  }\n\n  closestParentFolder(path: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    const pathParts = path.split('/');\n    const commonPrefix = this.#index.longestPrefix(pathParts, /* fullWordOnly */ true);\n    return commonPrefix.join('/') as Platform.DevToolsPath.UrlString;\n  }\n\n  #removeTrailingSlash(path: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    if (path.endsWith('/')) {\n      return Common.ParsedURL.ParsedURL.substring(path, 0, path.length - 1);\n    }\n    return path;\n  }\n}\n\nclass FileSystemUISourceCodes {\n  readonly #sourceCodes = new Map<Platform.DevToolsPath.UrlString, Workspace.UISourceCode.UISourceCode>();\n\n  private getPlatformCanonicalFileUrl(path: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    return Host.Platform.isWin() ? Common.ParsedURL.ParsedURL.toLowerCase(path) : path;\n  }\n\n  add(sourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const fileUrl = this.getPlatformCanonicalFileUrl(sourceCode.url());\n    this.#sourceCodes.set(fileUrl, sourceCode);\n  }\n\n  get(fileUrl: Platform.DevToolsPath.UrlString): Workspace.UISourceCode.UISourceCode|undefined {\n    fileUrl = this.getPlatformCanonicalFileUrl(fileUrl);\n    return this.#sourceCodes.get(fileUrl);\n  }\n\n  delete(fileUrl: Platform.DevToolsPath.UrlString): void {\n    fileUrl = this.getPlatformCanonicalFileUrl(fileUrl);\n    this.#sourceCodes.delete(fileUrl);\n  }\n}\n\nexport class AutomappingStatus {\n  network: Workspace.UISourceCode.UISourceCode;\n  fileSystem: Workspace.UISourceCode.UISourceCode;\n  exactMatch: boolean;\n  constructor(\n      network: Workspace.UISourceCode.UISourceCode, fileSystem: Workspace.UISourceCode.UISourceCode,\n      exactMatch: boolean) {\n    this.network = network;\n    this.fileSystem = fileSystem;\n    this.exactMatch = exactMatch;\n  }\n}\n", "/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport type {IsolatedFileSystem} from './IsolatedFileSystem.js';\nimport {Events, type IsolatedFileSystemManager} from './IsolatedFileSystemManager.js';\nimport type {PlatformFileSystem, PlatformFileSystemType} from './PlatformFileSystem.js';\n\nexport class FileSystemWorkspaceBinding {\n  readonly isolatedFileSystemManager: IsolatedFileSystemManager;\n  readonly #workspace: Workspace.Workspace.WorkspaceImpl;\n  readonly #eventListeners: Common.EventTarget.EventDescriptor[];\n  readonly #boundFileSystems = new Map<string, FileSystem>();\n  constructor(isolatedFileSystemManager: IsolatedFileSystemManager, workspace: Workspace.Workspace.WorkspaceImpl) {\n    this.isolatedFileSystemManager = isolatedFileSystemManager;\n    this.#workspace = workspace;\n    this.#eventListeners = [\n      this.isolatedFileSystemManager.addEventListener(Events.FileSystemAdded, this.onFileSystemAdded, this),\n      this.isolatedFileSystemManager.addEventListener(Events.FileSystemRemoved, this.onFileSystemRemoved, this),\n      this.isolatedFileSystemManager.addEventListener(Events.FileSystemFilesChanged, this.fileSystemFilesChanged, this),\n    ];\n    void this.isolatedFileSystemManager.waitForFileSystems().then(this.onFileSystemsLoaded.bind(this));\n  }\n\n  static projectId(fileSystemPath: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    return fileSystemPath;\n  }\n\n  static relativePath(uiSourceCode: Workspace.UISourceCode.UISourceCode): Platform.DevToolsPath.EncodedPathString[] {\n    const baseURL = (uiSourceCode.project() as FileSystem).fileSystemBaseURL;\n    return Common.ParsedURL.ParsedURL.split(\n        Common.ParsedURL.ParsedURL.sliceUrlToEncodedPathString(uiSourceCode.url(), baseURL.length), '/');\n  }\n\n  static tooltipForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    const fileSystem = (uiSourceCode.project() as FileSystem).fileSystem();\n    return fileSystem.tooltipForURL(uiSourceCode.url());\n  }\n\n  static fileSystemType(project: Workspace.Workspace.Project): PlatformFileSystemType {\n    if (project instanceof FileSystem) {\n      return project.fileSystem().type();\n    }\n    throw new TypeError('project is not a FileSystem');\n  }\n\n  static fileSystemSupportsAutomapping(project: Workspace.Workspace.Project): boolean {\n    const fileSystem = (project as FileSystem).fileSystem();\n    return fileSystem.supportsAutomapping();\n  }\n\n  static completeURL(project: Workspace.Workspace.Project, relativePath: string): Platform.DevToolsPath.UrlString {\n    const fsProject = project as FileSystem;\n    return Common.ParsedURL.ParsedURL.concatenate(fsProject.fileSystemBaseURL, relativePath);\n  }\n\n  static fileSystemPath(projectId: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    return projectId;\n  }\n\n  private onFileSystemsLoaded(fileSystems: IsolatedFileSystem[]): void {\n    for (const fileSystem of fileSystems) {\n      this.addFileSystem(fileSystem);\n    }\n  }\n\n  private onFileSystemAdded(event: Common.EventTarget.EventTargetEvent<PlatformFileSystem>): void {\n    const fileSystem = event.data;\n    this.addFileSystem(fileSystem);\n  }\n\n  private addFileSystem(fileSystem: PlatformFileSystem): void {\n    const boundFileSystem = new FileSystem(this, fileSystem, this.#workspace);\n    this.#boundFileSystems.set(fileSystem.path(), boundFileSystem);\n  }\n\n  private onFileSystemRemoved(event: Common.EventTarget.EventTargetEvent<PlatformFileSystem>): void {\n    const fileSystem = event.data;\n    const boundFileSystem = this.#boundFileSystems.get(fileSystem.path());\n    if (boundFileSystem) {\n      boundFileSystem.dispose();\n    }\n    this.#boundFileSystems.delete(fileSystem.path());\n  }\n\n  private fileSystemFilesChanged(event: Common.EventTarget.EventTargetEvent<FilesChangedData>): void {\n    const paths = event.data;\n    for (const fileSystemPath of paths.changed.keysArray()) {\n      const fileSystem = this.#boundFileSystems.get(fileSystemPath);\n      if (!fileSystem) {\n        continue;\n      }\n      paths.changed.get(fileSystemPath).forEach(path => fileSystem.fileChanged(path));\n    }\n\n    for (const fileSystemPath of paths.added.keysArray()) {\n      const fileSystem = this.#boundFileSystems.get(fileSystemPath);\n      if (!fileSystem) {\n        continue;\n      }\n      paths.added.get(fileSystemPath).forEach(path => fileSystem.fileChanged(path));\n    }\n\n    for (const fileSystemPath of paths.removed.keysArray()) {\n      const fileSystem = this.#boundFileSystems.get(fileSystemPath);\n      if (!fileSystem) {\n        continue;\n      }\n      paths.removed.get(fileSystemPath).forEach(path => fileSystem.removeUISourceCode(path));\n    }\n  }\n\n  dispose(): void {\n    Common.EventTarget.removeEventListeners(this.#eventListeners);\n    for (const fileSystem of this.#boundFileSystems.values()) {\n      fileSystem.dispose();\n      this.#boundFileSystems.delete(fileSystem.fileSystem().path());\n    }\n  }\n}\n\nexport class FileSystem extends Workspace.Workspace.ProjectStore {\n  #fileSystem: PlatformFileSystem;\n  readonly fileSystemBaseURL: Platform.DevToolsPath.UrlString;\n  readonly #fileSystemParentURL: Platform.DevToolsPath.UrlString;\n  readonly #fileSystemWorkspaceBinding: FileSystemWorkspaceBinding;\n  readonly #fileSystemPath: Platform.DevToolsPath.UrlString;\n  readonly #creatingFilesGuard = new Set<string>();\n\n  constructor(\n      fileSystemWorkspaceBinding: FileSystemWorkspaceBinding, isolatedFileSystem: PlatformFileSystem,\n      workspace: Workspace.Workspace.WorkspaceImpl) {\n    const fileSystemPath = isolatedFileSystem.path();\n    const id = FileSystemWorkspaceBinding.projectId(fileSystemPath);\n    console.assert(!workspace.project(id));\n    const displayName = fileSystemPath.substr(fileSystemPath.lastIndexOf('/') + 1);\n\n    super(workspace, id, Workspace.Workspace.projectTypes.FileSystem, displayName);\n\n    this.#fileSystem = isolatedFileSystem;\n    this.fileSystemBaseURL = Common.ParsedURL.ParsedURL.concatenate(this.#fileSystem.path(), '/');\n    this.#fileSystemParentURL =\n        Common.ParsedURL.ParsedURL.substr(this.fileSystemBaseURL, 0, fileSystemPath.lastIndexOf('/') + 1);\n    this.#fileSystemWorkspaceBinding = fileSystemWorkspaceBinding;\n    this.#fileSystemPath = fileSystemPath;\n\n    workspace.addProject(this);\n    this.populate();\n  }\n\n  fileSystemPath(): Platform.DevToolsPath.UrlString {\n    return this.#fileSystemPath;\n  }\n\n  fileSystem(): PlatformFileSystem {\n    return this.#fileSystem;\n  }\n\n  mimeType(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    return this.#fileSystem.mimeFromPath(uiSourceCode.url());\n  }\n\n  initialGitFolders(): Platform.DevToolsPath.UrlString[] {\n    return this.#fileSystem.initialGitFolders().map(\n        folder => Common.ParsedURL.ParsedURL.concatenate(this.#fileSystemPath, '/', folder));\n  }\n\n  private filePathForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Platform.DevToolsPath.EncodedPathString {\n    return Common.ParsedURL.ParsedURL.sliceUrlToEncodedPathString(uiSourceCode.url(), this.#fileSystemPath.length);\n  }\n\n  isServiceProject(): boolean {\n    return false;\n  }\n\n  requestMetadata(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Promise<Workspace.UISourceCode.UISourceCodeMetadata|null> {\n    const metadata = sourceCodeToMetadataMap.get(uiSourceCode);\n    if (metadata) {\n      return metadata;\n    }\n    const relativePath = this.filePathForUISourceCode(uiSourceCode);\n    const promise = this.#fileSystem.getMetadata(relativePath).then(onMetadata);\n    sourceCodeToMetadataMap.set(uiSourceCode, promise);\n    return promise;\n\n    function onMetadata(metadata: {modificationTime: Date, size: number}|null):\n        Workspace.UISourceCode.UISourceCodeMetadata|null {\n      if (!metadata) {\n        return null;\n      }\n      return new Workspace.UISourceCode.UISourceCodeMetadata(metadata.modificationTime, metadata.size);\n    }\n  }\n\n  requestFileBlob(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<Blob|null> {\n    return this.#fileSystem.requestFileBlob(this.filePathForUISourceCode(uiSourceCode));\n  }\n\n  requestFileContent(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Promise<TextUtils.ContentData.ContentDataOrError> {\n    const filePath = this.filePathForUISourceCode(uiSourceCode);\n    return this.#fileSystem.requestFileContent(filePath);\n  }\n\n  canSetFileContent(): boolean {\n    return true;\n  }\n\n  async setFileContent(uiSourceCode: Workspace.UISourceCode.UISourceCode, newContent: string, isBase64: boolean):\n      Promise<void> {\n    const filePath = this.filePathForUISourceCode(uiSourceCode);\n    this.#fileSystem.setFileContent(filePath, newContent, isBase64);\n  }\n\n  fullDisplayName(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    const baseURL = (uiSourceCode.project() as FileSystem).#fileSystemParentURL;\n    return uiSourceCode.url().substring(baseURL.length);\n  }\n\n  canRename(): boolean {\n    return true;\n  }\n\n  override rename(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, newName: Platform.DevToolsPath.RawPathString,\n      callback:\n          (arg0: boolean, arg1?: string|undefined, arg2?: Platform.DevToolsPath.UrlString|undefined,\n           arg3?: Common.ResourceType.ResourceType|undefined) => void): void {\n    if (newName === uiSourceCode.name()) {\n      callback(true, uiSourceCode.name(), uiSourceCode.url(), uiSourceCode.contentType());\n      return;\n    }\n\n    let filePath = this.filePathForUISourceCode(uiSourceCode);\n    this.#fileSystem.renameFile(filePath, newName, innerCallback.bind(this));\n\n    function innerCallback(this: FileSystem, success: boolean, newName?: string): void {\n      if (!success || !newName) {\n        callback(false, newName);\n        return;\n      }\n      console.assert(Boolean(newName));\n      const slash = filePath.lastIndexOf('/');\n      const parentPath = Common.ParsedURL.ParsedURL.substr(filePath, 0, slash);\n      filePath = Common.ParsedURL.ParsedURL.encodedFromParentPathAndName(parentPath, newName);\n      filePath = Common.ParsedURL.ParsedURL.substr(filePath, 1);\n      const newURL = Common.ParsedURL.ParsedURL.concatenate(this.fileSystemBaseURL, filePath);\n      const newContentType = this.#fileSystem.contentType(newName);\n      this.renameUISourceCode(uiSourceCode, newName);\n      callback(true, newName, newURL, newContentType);\n    }\n  }\n\n  async searchInFileContent(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, query: string, caseSensitive: boolean,\n      isRegex: boolean): Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    const filePath = this.filePathForUISourceCode(uiSourceCode);\n    const content = await this.#fileSystem.requestFileContent(filePath);\n    return TextUtils.TextUtils.performSearchInContentData(content, query, caseSensitive, isRegex);\n  }\n\n  async findFilesMatchingSearchRequest(\n      searchConfig: Workspace.SearchConfig.SearchConfig, filesMatchingFileQuery: Workspace.UISourceCode.UISourceCode[],\n      progress: Common.Progress.Progress):\n      Promise<Map<Workspace.UISourceCode.UISourceCode, TextUtils.ContentProvider.SearchMatch[]|null>> {\n    let workingFileSet: string[] = filesMatchingFileQuery.map(uiSoureCode => uiSoureCode.url());\n    const queriesToRun = searchConfig.queries().slice();\n    if (!queriesToRun.length) {\n      queriesToRun.push('');\n    }\n    progress.setTotalWork(queriesToRun.length);\n\n    for (const query of queriesToRun) {\n      const files = await this.#fileSystem.searchInPath(searchConfig.isRegex() ? '' : query, progress);\n      files.sort(Platform.StringUtilities.naturalOrderComparator);\n      workingFileSet = Platform.ArrayUtilities.intersectOrdered(\n          workingFileSet, files, Platform.StringUtilities.naturalOrderComparator);\n      progress.incrementWorked(1);\n    }\n\n    const result = new Map();\n    for (const file of workingFileSet) {\n      const uiSourceCode = this.uiSourceCodeForURL(file as Platform.DevToolsPath.UrlString);\n      if (uiSourceCode) {\n        result.set(uiSourceCode, null);\n      }\n    }\n\n    progress.done();\n    return result;\n  }\n\n  override indexContent(progress: Common.Progress.Progress): void {\n    this.#fileSystem.indexContent(progress);\n  }\n\n  populate(): void {\n    const filePaths = this.#fileSystem.initialFilePaths();\n    if (filePaths.length === 0) {\n      return;\n    }\n\n    const chunkSize = 1000;\n    const startTime = performance.now();\n    reportFileChunk.call(this, 0);\n\n    function reportFileChunk(this: FileSystem, from: number): void {\n      const to = Math.min(from + chunkSize, filePaths.length);\n      for (let i = from; i < to; ++i) {\n        this.addFile(filePaths[i]);\n      }\n      if (to < filePaths.length) {\n        window.setTimeout(reportFileChunk.bind(this, to), 100);\n      } else if (this.type() === 'filesystem') {\n        Host.userMetrics.workspacesPopulated(performance.now() - startTime);\n      }\n    }\n  }\n\n  override excludeFolder(url: Platform.DevToolsPath.UrlString): void {\n    let relativeFolder = Common.ParsedURL.ParsedURL.sliceUrlToEncodedPathString(url, this.fileSystemBaseURL.length);\n    if (!relativeFolder.startsWith('/')) {\n      relativeFolder = Common.ParsedURL.ParsedURL.prepend('/', relativeFolder);\n    }\n    if (!relativeFolder.endsWith('/')) {\n      relativeFolder = Common.ParsedURL.ParsedURL.concatenate(relativeFolder, '/');\n    }\n    this.#fileSystem.addExcludedFolder(relativeFolder);\n\n    for (const uiSourceCode of this.uiSourceCodes()) {\n      if (uiSourceCode.url().startsWith(url)) {\n        this.removeUISourceCode(uiSourceCode.url());\n      }\n    }\n  }\n\n  canExcludeFolder(path: Platform.DevToolsPath.EncodedPathString): boolean {\n    return this.#fileSystem.canExcludeFolder(path);\n  }\n\n  canCreateFile(): boolean {\n    return true;\n  }\n\n  async createFile(\n      path: Platform.DevToolsPath.EncodedPathString, name: Platform.DevToolsPath.RawPathString|null, content: string,\n      isBase64?: boolean): Promise<Workspace.UISourceCode.UISourceCode|null> {\n    const guardFileName = this.#fileSystemPath + path + (!path.endsWith('/') ? '/' : '') + name;\n    this.#creatingFilesGuard.add(guardFileName);\n    const filePath = await this.#fileSystem.createFile(path, name);\n    if (!filePath) {\n      return null;\n    }\n    const uiSourceCode = this.addFile(filePath, content, isBase64);\n    this.#creatingFilesGuard.delete(guardFileName);\n    return uiSourceCode;\n  }\n\n  override deleteFile(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const relativePath = this.filePathForUISourceCode(uiSourceCode);\n    void this.#fileSystem.deleteFile(relativePath).then(success => {\n      if (success) {\n        this.removeUISourceCode(uiSourceCode.url());\n      }\n    });\n  }\n\n  override deleteDirectoryRecursively(path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    return this.#fileSystem.deleteDirectoryRecursively(path);\n  }\n\n  override remove(): void {\n    this.#fileSystemWorkspaceBinding.isolatedFileSystemManager.removeFileSystem(this.#fileSystem);\n  }\n\n  private addFile(filePath: Platform.DevToolsPath.EncodedPathString, content?: string, isBase64?: boolean):\n      Workspace.UISourceCode.UISourceCode {\n    const contentType = this.#fileSystem.contentType(filePath);\n    const uiSourceCode =\n        this.createUISourceCode(Common.ParsedURL.ParsedURL.concatenate(this.fileSystemBaseURL, filePath), contentType);\n    if (content !== undefined) {\n      uiSourceCode.setContent(content, Boolean(isBase64));\n    }\n    this.addUISourceCode(uiSourceCode);\n    return uiSourceCode;\n  }\n\n  fileChanged(path: Platform.DevToolsPath.UrlString): void {\n    // Ignore files that are being created but do not have content yet.\n    if (this.#creatingFilesGuard.has(path)) {\n      return;\n    }\n    const uiSourceCode = this.uiSourceCodeForURL(path);\n    if (!uiSourceCode) {\n      const contentType = this.#fileSystem.contentType(path);\n      this.addUISourceCode(this.createUISourceCode(path, contentType));\n      return;\n    }\n    sourceCodeToMetadataMap.delete(uiSourceCode);\n    void uiSourceCode.checkContentUpdated();\n  }\n\n  tooltipForURL(url: Platform.DevToolsPath.UrlString): string {\n    return this.#fileSystem.tooltipForURL(url);\n  }\n\n  dispose(): void {\n    this.removeProject();\n  }\n}\n\nconst sourceCodeToMetadataMap =\n    new WeakMap<Workspace.UISourceCode.UISourceCode, Promise<Workspace.UISourceCode.UISourceCodeMetadata|null>>();\nexport interface FilesChangedData {\n  changed: Platform.MapUtilities.Multimap<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.UrlString>;\n  added: Platform.MapUtilities.Multimap<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.UrlString>;\n  removed: Platform.MapUtilities.Multimap<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.UrlString>;\n}\n", "/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\n\nimport type {FilesChangedData} from './FileSystemWorkspaceBinding.js';\nimport {IsolatedFileSystem} from './IsolatedFileSystem.js';\nimport {\n  Events as PlatformFileSystemEvents,\n  type PlatformFileSystem,\n  PlatformFileSystemType\n} from './PlatformFileSystem.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in Isolated File System Manager of the Workspace settings in Settings\n   * @example {folder does not exist} PH1\n   */\n  unableToAddFilesystemS: 'Unable to add filesystem: {PH1}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/IsolatedFileSystemManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet isolatedFileSystemManagerInstance: IsolatedFileSystemManager|null;\n\nexport class IsolatedFileSystemManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly fileSystemsInternal: Map<Platform.DevToolsPath.UrlString, PlatformFileSystem>;\n  private readonly callbacks: Map<number, (arg0: Platform.DevToolsPath.RawPathString[]) => void>;\n  private readonly progresses: Map<number, Common.Progress.Progress>;\n  private readonly workspaceFolderExcludePatternSettingInternal: Common.Settings.RegExpSetting;\n  private fileSystemRequestResolve: ((arg0: IsolatedFileSystem|null) => void)|null;\n  private readonly fileSystemsLoadedPromise: Promise<IsolatedFileSystem[]>;\n  private constructor() {\n    super();\n\n    this.fileSystemsInternal = new Map();\n    this.callbacks = new Map();\n    this.progresses = new Map();\n\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.FileSystemRemoved, this.onFileSystemRemoved, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.FileSystemAdded, event => {\n          this.onFileSystemAdded(event);\n        }, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.FileSystemFilesChangedAddedRemoved, this.onFileSystemFilesChanged, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.IndexingTotalWorkCalculated, this.onIndexingTotalWorkCalculated, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.IndexingWorked, this.onIndexingWorked, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.IndexingDone, this.onIndexingDone, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.SearchCompleted, this.onSearchCompleted, this);\n\n    // Initialize exclude pattern settings\n    const defaultCommonExcludedFolders = [\n      '/node_modules/',\n      '/\\\\.devtools',\n      '/\\\\.git/',\n      '/\\\\.sass-cache/',\n      '/\\\\.hg/',\n      '/\\\\.idea/',\n      '/\\\\.svn/',\n      '/\\\\.cache/',\n      '/\\\\.project/',\n      '/\\\\.next/',\n    ];\n    const defaultWinExcludedFolders = ['/Thumbs.db$', '/ehthumbs.db$', '/Desktop.ini$', '/\\\\$RECYCLE.BIN/'];\n    const defaultMacExcludedFolders = [\n      '/\\\\.DS_Store$',\n      '/\\\\.Trashes$',\n      '/\\\\.Spotlight-V100$',\n      '/\\\\.AppleDouble$',\n      '/\\\\.LSOverride$',\n      '/Icon$',\n      '/\\\\._.*$',\n    ];\n    const defaultLinuxExcludedFolders = ['/.*~$'];\n    let defaultExcludedFolders: string[] = defaultCommonExcludedFolders;\n    if (Host.Platform.isWin()) {\n      defaultExcludedFolders = defaultExcludedFolders.concat(defaultWinExcludedFolders);\n    } else if (Host.Platform.isMac()) {\n      defaultExcludedFolders = defaultExcludedFolders.concat(defaultMacExcludedFolders);\n    } else {\n      defaultExcludedFolders = defaultExcludedFolders.concat(defaultLinuxExcludedFolders);\n    }\n    const defaultExcludedFoldersPattern = defaultExcludedFolders.join('|');\n    this.workspaceFolderExcludePatternSettingInternal = Common.Settings.Settings.instance().createRegExpSetting(\n        'workspace-folder-exclude-pattern', defaultExcludedFoldersPattern, Host.Platform.isWin() ? 'i' : '');\n\n    this.fileSystemRequestResolve = null;\n    this.fileSystemsLoadedPromise = this.requestFileSystems();\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): IsolatedFileSystemManager {\n    const {forceNew} = opts;\n    if (!isolatedFileSystemManagerInstance || forceNew) {\n      isolatedFileSystemManagerInstance = new IsolatedFileSystemManager();\n    }\n\n    return isolatedFileSystemManagerInstance;\n  }\n\n  static removeInstance(): void {\n    isolatedFileSystemManagerInstance = null;\n  }\n\n  private requestFileSystems(): Promise<IsolatedFileSystem[]> {\n    const {resolve, promise} = Promise.withResolvers<IsolatedFileSystem[]>();\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.FileSystemsLoaded, onFileSystemsLoaded, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.requestFileSystems();\n    return promise;\n\n    function onFileSystemsLoaded(\n        this: IsolatedFileSystemManager,\n        event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.DevToolsFileSystem[]>): void {\n      const fileSystems = event.data;\n      const promises = [];\n      for (let i = 0; i < fileSystems.length; ++i) {\n        promises.push(this.innerAddFileSystem(fileSystems[i], false));\n      }\n      void Promise.all(promises).then(onFileSystemsAdded);\n    }\n\n    function onFileSystemsAdded(fileSystems: Array<IsolatedFileSystem|null>): void {\n      resolve(fileSystems.filter(fs => !!fs));\n    }\n  }\n\n  addFileSystem(type?: string): Promise<IsolatedFileSystem|null> {\n    Host.userMetrics.actionTaken(\n        type === 'overrides' ? Host.UserMetrics.Action.OverrideTabAddFolder :\n                               Host.UserMetrics.Action.WorkspaceTabAddFolder);\n    return new Promise(resolve => {\n      this.fileSystemRequestResolve = resolve;\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.addFileSystem(type || '');\n    });\n  }\n\n  removeFileSystem(fileSystem: PlatformFileSystem): void {\n    Host.userMetrics.actionTaken(\n        fileSystem.type() === PlatformFileSystemType.OVERRIDES ? Host.UserMetrics.Action.OverrideTabRemoveFolder :\n                                                                 Host.UserMetrics.Action.WorkspaceTabRemoveFolder);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.removeFileSystem(fileSystem.embedderPath());\n  }\n\n  waitForFileSystems(): Promise<IsolatedFileSystem[]> {\n    return this.fileSystemsLoadedPromise;\n  }\n\n  private innerAddFileSystem(fileSystem: Host.InspectorFrontendHostAPI.DevToolsFileSystem, dispatchEvent: boolean):\n      Promise<IsolatedFileSystem|null> {\n    const embedderPath = fileSystem.fileSystemPath;\n    const fileSystemURL = Common.ParsedURL.ParsedURL.rawPathToUrlString(fileSystem.fileSystemPath);\n    const promise = IsolatedFileSystem.create(\n        this, fileSystemURL, embedderPath, hostFileSystemTypeToPlatformFileSystemType(fileSystem.type),\n        fileSystem.fileSystemName, fileSystem.rootURL, fileSystem.type === 'automatic');\n    return promise.then(storeFileSystem.bind(this));\n\n    function storeFileSystem(this: IsolatedFileSystemManager, fileSystem: IsolatedFileSystem|null): IsolatedFileSystem|\n        null {\n      if (!fileSystem) {\n        return null;\n      }\n      this.fileSystemsInternal.set(fileSystemURL, fileSystem);\n      fileSystem.addEventListener(PlatformFileSystemEvents.FILE_SYSTEM_ERROR, this.#onFileSystemError, this);\n      if (dispatchEvent) {\n        this.dispatchEventToListeners(Events.FileSystemAdded, fileSystem);\n      }\n      return fileSystem;\n    }\n  }\n\n  addPlatformFileSystem(fileSystemURL: Platform.DevToolsPath.UrlString, fileSystem: PlatformFileSystem): void {\n    this.fileSystemsInternal.set(fileSystemURL, fileSystem);\n    fileSystem.addEventListener(PlatformFileSystemEvents.FILE_SYSTEM_ERROR, this.#onFileSystemError, this);\n    this.dispatchEventToListeners(Events.FileSystemAdded, fileSystem);\n  }\n\n  private onFileSystemAdded(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.FileSystemAddedEvent>): void {\n    const {errorMessage, fileSystem} = event.data;\n    if (errorMessage) {\n      if (errorMessage !== '<selection cancelled>' && errorMessage !== '<permission denied>') {\n        Common.Console.Console.instance().error(i18nString(UIStrings.unableToAddFilesystemS, {PH1: errorMessage}));\n      }\n      if (!this.fileSystemRequestResolve) {\n        return;\n      }\n      this.fileSystemRequestResolve.call(null, null);\n      this.fileSystemRequestResolve = null;\n    } else if (fileSystem) {\n      void this.innerAddFileSystem(fileSystem, true).then(fileSystem => {\n        if (this.fileSystemRequestResolve) {\n          this.fileSystemRequestResolve.call(null, fileSystem);\n          this.fileSystemRequestResolve = null;\n        }\n      });\n    }\n  }\n\n  #onFileSystemError(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.dispatchEventToListeners(Events.FileSystemError, event.data);\n  }\n\n  private onFileSystemRemoved(event: Common.EventTarget.EventTargetEvent<Platform.DevToolsPath.RawPathString>): void {\n    const embedderPath = event.data;\n    const fileSystemPath = Common.ParsedURL.ParsedURL.rawPathToUrlString(embedderPath);\n    const isolatedFileSystem = this.fileSystemsInternal.get(fileSystemPath);\n    if (!isolatedFileSystem) {\n      return;\n    }\n    this.fileSystemsInternal.delete(fileSystemPath);\n    isolatedFileSystem.removeEventListener(PlatformFileSystemEvents.FILE_SYSTEM_ERROR, this.#onFileSystemError, this);\n    isolatedFileSystem.fileSystemRemoved();\n    this.dispatchEventToListeners(Events.FileSystemRemoved, isolatedFileSystem);\n  }\n\n  private onFileSystemFilesChanged(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.FilesChangedEvent>): void {\n    const urlPaths = {\n      changed: groupFilePathsIntoFileSystemPaths.call(this, event.data.changed),\n      added: groupFilePathsIntoFileSystemPaths.call(this, event.data.added),\n      removed: groupFilePathsIntoFileSystemPaths.call(this, event.data.removed),\n    };\n\n    this.dispatchEventToListeners(Events.FileSystemFilesChanged, urlPaths);\n\n    function groupFilePathsIntoFileSystemPaths(\n        this: IsolatedFileSystemManager, embedderPaths: Platform.DevToolsPath.RawPathString[]):\n        Platform.MapUtilities.Multimap<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.UrlString> {\n      const paths =\n          new Platform.MapUtilities.Multimap<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.UrlString>();\n      for (const embedderPath of embedderPaths) {\n        const filePath = Common.ParsedURL.ParsedURL.rawPathToUrlString(embedderPath);\n        for (const fileSystemPath of this.fileSystemsInternal.keys()) {\n          const fileSystem = this.fileSystemsInternal.get(fileSystemPath);\n          if (fileSystem?.isFileExcluded(Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(embedderPath))) {\n            continue;\n          }\n          const pathPrefix = fileSystemPath.endsWith('/') ? fileSystemPath : fileSystemPath + '/';\n          if (!filePath.startsWith(pathPrefix)) {\n            continue;\n          }\n          paths.set(fileSystemPath, filePath);\n        }\n      }\n      return paths;\n    }\n  }\n\n  fileSystems(): PlatformFileSystem[] {\n    return [...this.fileSystemsInternal.values()];\n  }\n\n  fileSystem(fileSystemPath: Platform.DevToolsPath.UrlString): PlatformFileSystem|null {\n    return this.fileSystemsInternal.get(fileSystemPath) || null;\n  }\n\n  workspaceFolderExcludePatternSetting(): Common.Settings.RegExpSetting {\n    return this.workspaceFolderExcludePatternSettingInternal;\n  }\n\n  registerCallback(callback: (arg0: Platform.DevToolsPath.RawPathString[]) => void): number {\n    const requestId = ++lastRequestId;\n    this.callbacks.set(requestId, callback);\n    return requestId;\n  }\n\n  registerProgress(progress: Common.Progress.Progress): number {\n    const requestId = ++lastRequestId;\n    this.progresses.set(requestId, progress);\n    return requestId;\n  }\n\n  private onIndexingTotalWorkCalculated(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.IndexingTotalWorkCalculatedEvent>):\n      void {\n    const {requestId, totalWork} = event.data;\n    const progress = this.progresses.get(requestId);\n    if (!progress) {\n      return;\n    }\n    progress.setTotalWork(totalWork);\n  }\n\n  private onIndexingWorked(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.IndexingWorkedEvent>): void {\n    const {requestId, worked} = event.data;\n    const progress = this.progresses.get(requestId);\n    if (!progress) {\n      return;\n    }\n    progress.incrementWorked(worked);\n    if (progress.isCanceled()) {\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.stopIndexing(requestId);\n      this.onIndexingDone(event);\n    }\n  }\n\n  private onIndexingDone(event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.IndexingEvent>):\n      void {\n    const {requestId} = event.data;\n    const progress = this.progresses.get(requestId);\n    if (!progress) {\n      return;\n    }\n    progress.done();\n    this.progresses.delete(requestId);\n  }\n\n  private onSearchCompleted(\n      event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.SearchCompletedEvent>): void {\n    const {requestId, files} = event.data;\n    const callback = this.callbacks.get(requestId);\n    if (!callback) {\n      return;\n    }\n    callback.call(null, files);\n    this.callbacks.delete(requestId);\n  }\n}\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  FileSystemAdded = 'FileSystemAdded',\n  FileSystemRemoved = 'FileSystemRemoved',\n  FileSystemFilesChanged = 'FileSystemFilesChanged',\n  ExcludedFolderAdded = 'ExcludedFolderAdded',\n  ExcludedFolderRemoved = 'ExcludedFolderRemoved',\n  FileSystemError = 'FileSystemError',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface EventTypes {\n  [Events.FileSystemAdded]: PlatformFileSystem;\n  [Events.FileSystemRemoved]: PlatformFileSystem;\n  [Events.FileSystemFilesChanged]: FilesChangedData;\n  [Events.ExcludedFolderAdded]: Platform.DevToolsPath.EncodedPathString;\n  [Events.ExcludedFolderRemoved]: Platform.DevToolsPath.EncodedPathString;\n  [Events.FileSystemError]: string;\n}\n\nlet lastRequestId = 0;\n\nfunction hostFileSystemTypeToPlatformFileSystemType(type: string): PlatformFileSystemType {\n  switch (type) {\n    case 'snippets':\n      return PlatformFileSystemType.SNIPPETS;\n    case 'overrides':\n      return PlatformFileSystemType.OVERRIDES;\n    default:\n      return PlatformFileSystemType.WORKSPACE_PROJECT;\n  }\n}\n", "/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\n\nimport {Events, type IsolatedFileSystemManager} from './IsolatedFileSystemManager.js';\nimport {Events as PlatformFileSystemEvents, PlatformFileSystem, PlatformFileSystemType} from './PlatformFileSystem.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in Isolated File System of the Workspace settings in Settings\n   * @example {folder does not exist} PH1\n   */\n  fileSystemErrorS: 'File system error: {PH1}',\n  /**\n   * @description Error message when reading a remote blob\n   */\n  blobCouldNotBeLoaded: 'Blob could not be loaded.',\n  /**\n   * @description Error message when reading a file.\n   * @example {c:\\dir\\file.js} PH1\n   * @example {Underlying error} PH2\n   */\n  cantReadFileSS: 'Can\\'t read file: {PH1}: {PH2}',\n  /**\n   * @description Text to show something is linked to another\n   * @example {example.url} PH1\n   */\n  linkedToS: 'Linked to {PH1}',\n  /**\n   * @description Error message shown when devtools failed to create a file system directory.\n   * @example {path/} PH1\n   */\n  createDirFailedBecausePathIsFile:\n      'Overrides: Failed to create directory {PH1} because the path exists and is a file.',\n  /**\n   * @description Error message shown when devtools failed to create a file system directory.\n   * @example {path/} PH1\n   */\n  createDirFailed: 'Overrides: Failed to create directory {PH1}. Are the workspace or overrides configured correctly?'\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/IsolatedFileSystem.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class IsolatedFileSystem extends PlatformFileSystem {\n  private readonly manager: IsolatedFileSystemManager;\n  private readonly embedderPathInternal: Platform.DevToolsPath.RawPathString;\n  private readonly domFileSystem: FileSystem;\n  private readonly excludedFoldersSetting:\n      Common.Settings.Setting<Record<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.EncodedPathString[]>>;\n  private excludedFoldersInternal: Set<Platform.DevToolsPath.EncodedPathString>;\n  private readonly excludedEmbedderFolders: Platform.DevToolsPath.RawPathString[] = [];\n  private readonly initialFilePathsInternal = new Set<Platform.DevToolsPath.EncodedPathString>();\n  private readonly initialGitFoldersInternal = new Set<Platform.DevToolsPath.EncodedPathString>();\n  private readonly fileLocks = new Map<Platform.DevToolsPath.EncodedPathString, Promise<unknown>>();\n\n  constructor(\n      manager: IsolatedFileSystemManager, path: Platform.DevToolsPath.UrlString,\n      embedderPath: Platform.DevToolsPath.RawPathString, domFileSystem: FileSystem, type: PlatformFileSystemType,\n      automatic: boolean) {\n    super(path, type, automatic);\n    this.manager = manager;\n    this.embedderPathInternal = embedderPath;\n    this.domFileSystem = domFileSystem;\n    this.excludedFoldersSetting =\n        Common.Settings.Settings.instance().createLocalSetting('workspace-excluded-folders', {});\n    this.excludedFoldersInternal = new Set(this.excludedFoldersSetting.get()[path] || []);\n  }\n\n  static async create(\n      manager: IsolatedFileSystemManager, path: Platform.DevToolsPath.UrlString,\n      embedderPath: Platform.DevToolsPath.RawPathString, type: PlatformFileSystemType, name: string, rootURL: string,\n      automatic: boolean): Promise<IsolatedFileSystem|null> {\n    const domFileSystem = Host.InspectorFrontendHost.InspectorFrontendHostInstance.isolatedFileSystem(name, rootURL);\n    if (!domFileSystem) {\n      return null;\n    }\n\n    const fileSystem = new IsolatedFileSystem(manager, path, embedderPath, domFileSystem, type, automatic);\n    return await fileSystem.initializeFilePaths().then(() => fileSystem).catch(error => {\n      console.error(error);\n      return null;\n    });\n  }\n\n  static errorMessage(error: DOMError): string {\n    return i18nString(UIStrings.fileSystemErrorS, {PH1: error.message});\n  }\n\n  private serializedFileOperation<T>(path: Platform.DevToolsPath.EncodedPathString, operation: () => Promise<T>):\n      Promise<T> {\n    const promise = Promise.resolve(this.fileLocks.get(path)).then(() => operation.call(null));\n    this.fileLocks.set(path, promise);\n    return promise;\n  }\n\n  override getMetadata(path: Platform.DevToolsPath.EncodedPathString): Promise<Metadata|null> {\n    const {promise, resolve} = Promise.withResolvers<Metadata|null>();\n    this.domFileSystem.root.getFile(\n        Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), undefined, fileEntryLoaded, errorHandler);\n    return promise;\n\n    function fileEntryLoaded(entry: FileEntry): void {\n      entry.getMetadata(resolve, errorHandler);\n    }\n\n    function errorHandler(error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when getting file metadata \\'' + path);\n      resolve(null);\n    }\n  }\n\n  override initialFilePaths(): Platform.DevToolsPath.EncodedPathString[] {\n    return [...this.initialFilePathsInternal];\n  }\n\n  override initialGitFolders(): Platform.DevToolsPath.EncodedPathString[] {\n    return [...this.initialGitFoldersInternal];\n  }\n\n  override embedderPath(): Platform.DevToolsPath.RawPathString {\n    return this.embedderPathInternal;\n  }\n\n  private initializeFilePaths(): Promise<void> {\n    return new Promise(fulfill => {\n      let pendingRequests = 1;\n      const boundInnerCallback = innerCallback.bind(this);\n      this.requestEntries(Platform.DevToolsPath.EmptyRawPathString, boundInnerCallback);\n\n      function innerCallback(this: IsolatedFileSystem, entries: FileEntry[]): void {\n        for (let i = 0; i < entries.length; ++i) {\n          const entry = entries[i];\n          if (!entry.isDirectory) {\n            if (this.isFileExcluded(Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n                    entry.fullPath as Platform.DevToolsPath.RawPathString))) {\n              continue;\n            }\n            this.initialFilePathsInternal.add(Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n                Common.ParsedURL.ParsedURL.substr(entry.fullPath as Platform.DevToolsPath.RawPathString, 1)));\n          } else {\n            if (entry.fullPath.endsWith('/.git')) {\n              const lastSlash = entry.fullPath.lastIndexOf('/');\n              const parentFolder = Common.ParsedURL.ParsedURL.substr(\n                  entry.fullPath as Platform.DevToolsPath.RawPathString, 1, lastSlash);\n              this.initialGitFoldersInternal.add(Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(parentFolder));\n            }\n            if (this.isFileExcluded(Common.ParsedURL.ParsedURL.concatenate(\n                    Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n                        entry.fullPath as Platform.DevToolsPath.RawPathString),\n                    '/'))) {\n              const url = Common.ParsedURL.ParsedURL.concatenate(\n                  this.path(),\n                  Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n                      entry.fullPath as Platform.DevToolsPath.RawPathString));\n              this.excludedEmbedderFolders.push(\n                  Common.ParsedURL.ParsedURL.urlToRawPathString(url, Host.Platform.isWin()));\n              continue;\n            }\n            ++pendingRequests;\n            this.requestEntries(entry.fullPath as Platform.DevToolsPath.RawPathString, boundInnerCallback);\n          }\n        }\n        if ((--pendingRequests === 0)) {\n          fulfill();\n        }\n      }\n    });\n  }\n\n  private async createFoldersIfNotExist(folderPath: Platform.DevToolsPath.RawPathString): Promise<DirectoryEntry|null> {\n    // Fast-path. If parent directory already exists we return it immidiatly.\n    let dirEntry = await new Promise<DirectoryEntry|null>(\n        resolve => this.domFileSystem.root.getDirectory(folderPath, undefined, resolve, () => resolve(null)));\n    if (dirEntry) {\n      return dirEntry;\n    }\n    const paths = folderPath.split('/');\n    let activePath = '';\n    for (const path of paths) {\n      activePath = activePath + '/' + path;\n      dirEntry = await this.innerCreateFolderIfNeeded(activePath);\n      if (!dirEntry) {\n        return null;\n      }\n    }\n    return dirEntry;\n  }\n\n  private innerCreateFolderIfNeeded(path: string): Promise<DirectoryEntry|null> {\n    return new Promise(resolve => {\n      this.domFileSystem.root.getDirectory(path, {create: true}, dirEntry => resolve(dirEntry), error => {\n        this.domFileSystem.root.getFile(\n            path, undefined,\n            () => this.dispatchEventToListeners(\n                PlatformFileSystemEvents.FILE_SYSTEM_ERROR,\n                i18nString(UIStrings.createDirFailedBecausePathIsFile, {PH1: path})),\n            () => this.dispatchEventToListeners(\n                PlatformFileSystemEvents.FILE_SYSTEM_ERROR, i18nString(UIStrings.createDirFailed, {PH1: path})));\n        const errorMessage = IsolatedFileSystem.errorMessage(error);\n        console.error(errorMessage + ' trying to create directory \\'' + path + '\\'');\n        resolve(null);\n      });\n    });\n  }\n\n  override async createFile(\n      path: Platform.DevToolsPath.EncodedPathString,\n      name: Platform.DevToolsPath.RawPathString|null): Promise<Platform.DevToolsPath.EncodedPathString|null> {\n    const dirEntry = await this.createFoldersIfNotExist(Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path));\n    if (!dirEntry) {\n      return null;\n    }\n    const fileEntry = await this.serializedFileOperation(\n        path, createFileCandidate.bind(this, name || 'NewFile' as Platform.DevToolsPath.RawPathString));\n    if (!fileEntry) {\n      return null;\n    }\n    return Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(\n        Common.ParsedURL.ParsedURL.substr(fileEntry.fullPath as Platform.DevToolsPath.RawPathString, 1));\n\n    function createFileCandidate(\n        this: IsolatedFileSystem, name: Platform.DevToolsPath.RawPathString,\n        newFileIndex?: number): Promise<FileEntry|null> {\n      return new Promise(resolve => {\n        const nameCandidate = Common.ParsedURL.ParsedURL.concatenate(name, (newFileIndex || '').toString());\n        (dirEntry as DirectoryEntry).getFile(nameCandidate, {create: true, exclusive: true}, resolve, error => {\n          if (error.name === 'InvalidModificationError') {\n            resolve(createFileCandidate.call(this, name, (newFileIndex ? newFileIndex + 1 : 1)));\n            return;\n          }\n          const errorMessage = IsolatedFileSystem.errorMessage(error);\n          console.error(\n              errorMessage + ' when testing if file exists \\'' + (this.path() + '/' + path + '/' + nameCandidate) +\n              '\\'');\n          resolve(null);\n        });\n      });\n    }\n  }\n\n  override deleteFile(path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    const {promise, resolve} = Promise.withResolvers<boolean>();\n    this.domFileSystem.root.getFile(\n        Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), undefined, fileEntryLoaded.bind(this),\n        errorHandler.bind(this));\n    return promise;\n\n    function fileEntryLoaded(this: IsolatedFileSystem, fileEntry: FileEntry): void {\n      fileEntry.remove(fileEntryRemoved, errorHandler.bind(this));\n    }\n\n    function fileEntryRemoved(): void {\n      resolve(true);\n    }\n\n    /**\n     * TODO(jsbell): Update externs replacing DOMError with DOMException. https://crbug.com/496901\n     */\n    function errorHandler(this: IsolatedFileSystem, error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when deleting file \\'' + (this.path() + '/' + path) + '\\'');\n      resolve(false);\n    }\n  }\n\n  override deleteDirectoryRecursively(path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    const {promise, resolve} = Promise.withResolvers<boolean>();\n    this.domFileSystem.root.getDirectory(\n        Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), undefined, dirEntryLoaded.bind(this),\n        errorHandler.bind(this));\n    return promise;\n\n    function dirEntryLoaded(this: IsolatedFileSystem, dirEntry: DirectoryEntry): void {\n      dirEntry.removeRecursively(dirEntryRemoved, errorHandler.bind(this));\n    }\n\n    function dirEntryRemoved(): void {\n      resolve(true);\n    }\n\n    /**\n     * TODO(jsbell): Update externs replacing DOMError with DOMException. https://crbug.com/496901\n     */\n    function errorHandler(this: IsolatedFileSystem, error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when deleting directory \\'' + (this.path() + '/' + path) + '\\'');\n      resolve(false);\n    }\n  }\n\n  override requestFileBlob(path: Platform.DevToolsPath.EncodedPathString): Promise<Blob|null> {\n    return new Promise(resolve => {\n      this.domFileSystem.root.getFile(Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), undefined, entry => {\n        entry.file(resolve, errorHandler.bind(this));\n      }, errorHandler.bind(this));\n\n      function errorHandler(this: IsolatedFileSystem, error: DOMError): void {\n        if (error.name === 'NotFoundError') {\n          resolve(null);\n          return;\n        }\n\n        const errorMessage = IsolatedFileSystem.errorMessage(error);\n        console.error(errorMessage + ' when getting content for file \\'' + (this.path() + '/' + path) + '\\'');\n        resolve(null);\n      }\n    });\n  }\n\n  override requestFileContent(path: Platform.DevToolsPath.EncodedPathString):\n      Promise<TextUtils.ContentData.ContentDataOrError> {\n    return this.serializedFileOperation(path, () => this.innerRequestFileContent(path));\n  }\n\n  private async innerRequestFileContent(path: Platform.DevToolsPath.EncodedPathString):\n      Promise<TextUtils.ContentData.ContentDataOrError> {\n    const blob = await this.requestFileBlob(path);\n    if (!blob) {\n      return {error: i18nString(UIStrings.blobCouldNotBeLoaded)};\n    }\n\n    const mimeType = mimeTypeForBlob(path, blob);\n    try {\n      if (Platform.MimeType.isTextType(mimeType)) {\n        return new TextUtils.ContentData.ContentData(await blob.text(), /* isBase64 */ false, mimeType);\n      }\n      return new TextUtils.ContentData.ContentData(await Common.Base64.encode(blob), /* isBase64 */ true, mimeType);\n    } catch (e) {\n      return {error: i18nString(UIStrings.cantReadFileSS, {PH1: path, PH2: e.message})};\n    }\n  }\n\n  override async setFileContent(path: Platform.DevToolsPath.EncodedPathString, content: string, isBase64: boolean):\n      Promise<void> {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.FileSavedInWorkspace);\n    let resolve: (result: ProgressEvent<EventTarget>|undefined) => void;\n    const innerSetFileContent = (): Promise<ProgressEvent<EventTarget>|undefined> => {\n      const promise = new Promise<ProgressEvent<EventTarget>|undefined>(x => {\n        resolve = x;\n      });\n      this.domFileSystem.root.getFile(\n          Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), {create: true}, fileEntryLoaded.bind(this),\n          errorHandler.bind(this));\n      return promise;\n    };\n\n    void this.serializedFileOperation(path, innerSetFileContent);\n\n    function fileEntryLoaded(this: IsolatedFileSystem, entry: FileEntry): void {\n      entry.createWriter(fileWriterCreated.bind(this), errorHandler.bind(this));\n    }\n\n    async function fileWriterCreated(this: IsolatedFileSystem, fileWriter: FileWriter): Promise<void> {\n      fileWriter.onerror = errorHandler.bind(this);\n      fileWriter.onwriteend = fileWritten;\n      let blob: Blob;\n      if (isBase64) {\n        blob = await (await fetch(`data:application/octet-stream;base64,${content}`)).blob();\n      } else {\n        blob = new Blob([content], {type: 'text/plain'});\n      }\n      fileWriter.write(blob);\n\n      function fileWritten(): void {\n        fileWriter.onwriteend = resolve;\n        fileWriter.truncate(blob.size);\n      }\n    }\n\n    function errorHandler(this: IsolatedFileSystem, error: DOMError|ProgressEvent<EventTarget>): void {\n      // @ts-expect-error TODO(crbug.com/1172300) Properly type this after jsdoc to ts migration\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when setting content for file \\'' + (this.path() + '/' + path) + '\\'');\n      resolve(undefined);\n    }\n  }\n\n  override renameFile(\n      path: Platform.DevToolsPath.EncodedPathString, newName: Platform.DevToolsPath.RawPathString,\n      callback: (arg0: boolean, arg1?: string|undefined) => void): void {\n    newName = newName ? Common.ParsedURL.ParsedURL.trim(newName) : newName;\n    if (!newName || newName.indexOf('/') !== -1) {\n      callback(false);\n      return;\n    }\n    let fileEntry: FileEntry;\n    let dirEntry: DirectoryEntry;\n\n    this.domFileSystem.root.getFile(\n        Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path), undefined, fileEntryLoaded.bind(this),\n        errorHandler.bind(this));\n\n    function fileEntryLoaded(this: IsolatedFileSystem, entry: FileEntry): void {\n      if (entry.name === newName) {\n        callback(false);\n        return;\n      }\n\n      fileEntry = entry;\n      fileEntry.getParent(dirEntryLoaded.bind(this), errorHandler.bind(this));\n    }\n\n    function dirEntryLoaded(this: IsolatedFileSystem, entry: DirectoryEntry): void {\n      dirEntry = entry;\n      dirEntry.getFile(newName, undefined, newFileEntryLoaded, newFileEntryLoadErrorHandler.bind(this));\n    }\n\n    function newFileEntryLoaded(_entry: FileEntry): void {\n      callback(false);\n    }\n\n    function newFileEntryLoadErrorHandler(this: IsolatedFileSystem, error: DOMError): void {\n      if (error.name !== 'NotFoundError') {\n        callback(false);\n        return;\n      }\n      fileEntry.moveTo(dirEntry, newName, fileRenamed, errorHandler.bind(this));\n    }\n\n    function fileRenamed(entry: Entry): void {\n      callback(true, entry.name);\n    }\n\n    function errorHandler(this: IsolatedFileSystem, error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when renaming file \\'' + (this.path() + '/' + path) + '\\' to \\'' + newName + '\\'');\n      callback(false);\n    }\n  }\n\n  private readDirectory(dirEntry: DirectoryEntry, callback: (arg0: FileEntry[]) => void): void {\n    const dirReader = dirEntry.createReader();\n    let entries: FileEntry[] = [];\n\n    function innerCallback(results: Entry[]): void {\n      if (!results.length) {\n        callback(entries.sort());\n      } else {\n        entries = entries.concat(toArray(results));\n        dirReader.readEntries(innerCallback, errorHandler);\n      }\n    }\n\n    function toArray(list: Entry[]): FileEntry[] {\n      return Array.prototype.slice.call(list || [], 0);\n    }\n\n    dirReader.readEntries(innerCallback, errorHandler);\n\n    function errorHandler(error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when reading directory \\'' + dirEntry.fullPath + '\\'');\n      callback([]);\n    }\n  }\n\n  private requestEntries(path: Platform.DevToolsPath.RawPathString, callback: (arg0: FileEntry[]) => void): void {\n    this.domFileSystem.root.getDirectory(path, undefined, innerCallback.bind(this), errorHandler);\n\n    function innerCallback(this: IsolatedFileSystem, dirEntry: DirectoryEntry): void {\n      this.readDirectory(dirEntry, callback);\n    }\n\n    function errorHandler(error: DOMError): void {\n      const errorMessage = IsolatedFileSystem.errorMessage(error);\n      console.error(errorMessage + ' when requesting entry \\'' + path + '\\'');\n      callback([]);\n    }\n  }\n\n  private saveExcludedFolders(): void {\n    const settingValue = this.excludedFoldersSetting.get();\n    settingValue[this.path()] = [...this.excludedFoldersInternal];\n    this.excludedFoldersSetting.set(settingValue);\n  }\n\n  override addExcludedFolder(path: Platform.DevToolsPath.EncodedPathString): void {\n    this.excludedFoldersInternal.add(path);\n    this.saveExcludedFolders();\n    this.manager.dispatchEventToListeners(Events.ExcludedFolderAdded, path);\n  }\n\n  override removeExcludedFolder(path: Platform.DevToolsPath.EncodedPathString): void {\n    this.excludedFoldersInternal.delete(path);\n    this.saveExcludedFolders();\n    this.manager.dispatchEventToListeners(Events.ExcludedFolderRemoved, path);\n  }\n\n  override fileSystemRemoved(): void {\n    const settingValue = this.excludedFoldersSetting.get();\n    delete settingValue[this.path()];\n    this.excludedFoldersSetting.set(settingValue);\n  }\n\n  override isFileExcluded(folderPath: Platform.DevToolsPath.EncodedPathString): boolean {\n    if (this.excludedFoldersInternal.has(folderPath)) {\n      return true;\n    }\n    const regex = (this.manager.workspaceFolderExcludePatternSetting()).asRegExp();\n    return Boolean(regex?.test(Common.ParsedURL.ParsedURL.encodedPathToRawPathString(folderPath)));\n  }\n\n  override excludedFolders(): Set<Platform.DevToolsPath.EncodedPathString> {\n    return this.excludedFoldersInternal;\n  }\n\n  override searchInPath(query: string, progress: Common.Progress.Progress): Promise<string[]> {\n    return new Promise(resolve => {\n      const requestId = this.manager.registerCallback(innerCallback);\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.searchInPath(\n          requestId, this.embedderPathInternal, query);\n\n      function innerCallback(files: Platform.DevToolsPath.RawPathString[]): void {\n        resolve(files.map(path => Common.ParsedURL.ParsedURL.rawPathToUrlString(path)));\n        progress.incrementWorked(1);\n      }\n    });\n  }\n\n  override indexContent(progress: Common.Progress.Progress): void {\n    progress.setTotalWork(1);\n    const requestId = this.manager.registerProgress(progress);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.indexPath(\n        requestId, this.embedderPathInternal, JSON.stringify(this.excludedEmbedderFolders));\n  }\n\n  override mimeFromPath(path: Platform.DevToolsPath.UrlString): string {\n    return Common.ResourceType.ResourceType.mimeFromURL(path) || 'text/plain';\n  }\n\n  override canExcludeFolder(path: Platform.DevToolsPath.EncodedPathString): boolean {\n    return Boolean(path) && this.type() !== PlatformFileSystemType.OVERRIDES;\n  }\n\n  // path not typed as Branded Types as here we are interested in extention only\n  override contentType(path: string): Common.ResourceType.ResourceType {\n    const extension = Common.ParsedURL.ParsedURL.extractExtension(path);\n    if (STYLE_SHEET_EXTENSIONS.has(extension)) {\n      return Common.ResourceType.resourceTypes.Stylesheet;\n    }\n    if (DOCUMENT_EXTENSIONS.has(extension)) {\n      return Common.ResourceType.resourceTypes.Document;\n    }\n    if (IMAGE_EXTENSIONS.has(extension)) {\n      return Common.ResourceType.resourceTypes.Image;\n    }\n    if (SCRIPT_EXTENSIONS.has(extension)) {\n      return Common.ResourceType.resourceTypes.Script;\n    }\n    return BinaryExtensions.has(extension) ? Common.ResourceType.resourceTypes.Other :\n                                             Common.ResourceType.resourceTypes.Document;\n  }\n\n  override tooltipForURL(url: Platform.DevToolsPath.UrlString): string {\n    const path = Platform.StringUtilities.trimMiddle(\n        Common.ParsedURL.ParsedURL.urlToRawPathString(url, Host.Platform.isWin()), 150);\n    return i18nString(UIStrings.linkedToS, {PH1: path});\n  }\n\n  override supportsAutomapping(): boolean {\n    return this.type() !== PlatformFileSystemType.OVERRIDES;\n  }\n}\n\n/**\n * @returns Tries to determine the mime type for this Blob:\n *   1) If blob.type is non-empty, we return that.\n *   2) If we know it from the extension, use that.\n *   3) Check the list of known binary extensions and use application/octet-stream.\n *   4) Use text/plain\n */\nfunction mimeTypeForBlob(path: Platform.DevToolsPath.EncodedPathString, blob: Blob): string {\n  if (blob.type) {\n    return blob.type;\n  }\n\n  const extension = Common.ParsedURL.ParsedURL.extractExtension(path);\n  const maybeMime = Common.ResourceType.ResourceType.mimeFromExtension(extension);\n  if (maybeMime) {\n    return maybeMime;\n  }\n\n  return BinaryExtensions.has(extension) ? 'application/octet-stream' : 'text/plain';\n}\n\nconst STYLE_SHEET_EXTENSIONS = new Set<string>(['css', 'scss', 'sass', 'less']);\nconst DOCUMENT_EXTENSIONS = new Set<string>(['htm', 'html', 'asp', 'aspx', 'phtml', 'jsp']);\n\nconst SCRIPT_EXTENSIONS = new Set<string>([\n  'asp', 'aspx', 'c', 'cc', 'cljs', 'coffee', 'cpp', 'cs', 'dart', 'java', 'js',\n  'jsp', 'jsx',  'h', 'm',  'mjs',  'mm',     'py',  'sh', 'ts',   'tsx',  'ls',\n]);\n\nconst IMAGE_EXTENSIONS = new Set<string>(['jpeg', 'jpg', 'svg', 'gif', 'webp', 'png', 'ico', 'tiff', 'tif', 'bmp']);\n\nexport const BinaryExtensions = new Set<string>([\n  // Executable extensions, roughly taken from https://en.wikipedia.org/wiki/Comparison_of_executable_file_formats\n  'cmd',\n  'com',\n  'exe',\n  // Archive extensions, roughly taken from https://en.wikipedia.org/wiki/List_of_archive_formats\n  'a',\n  'ar',\n  'iso',\n  'tar',\n  'bz2',\n  'gz',\n  'lz',\n  'lzma',\n  'z',\n  '7z',\n  'apk',\n  'arc',\n  'cab',\n  'dmg',\n  'jar',\n  'pak',\n  'rar',\n  'zip',\n  // Audio file extensions, roughly taken from https://en.wikipedia.org/wiki/Audio_file_format#List_of_formats\n  '3gp',\n  'aac',\n  'aiff',\n  'flac',\n  'm4a',\n  'mmf',\n  'mp3',\n  'ogg',\n  'oga',\n  'raw',\n  'sln',\n  'wav',\n  'wma',\n  'webm',\n  // Video file extensions, roughly taken from https://en.wikipedia.org/wiki/Video_file_format\n  'mkv',\n  'flv',\n  'vob',\n  'ogv',\n  'gifv',\n  'avi',\n  'mov',\n  'qt',\n  'mp4',\n  'm4p',\n  'm4v',\n  'mpg',\n  'mpeg',\n  // Image file extensions\n  'jpeg',\n  'jpg',\n  'gif',\n  'webp',\n  'png',\n  'ico',\n  'tiff',\n  'tif',\n  'bmp',\n]);\n", "// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as TextUtils from '../text_utils/text_utils.js';\n\nconst UIStrings = {\n  /**\n   * @description Assertion error message when failing to load a file.\n   */\n  unableToReadFilesWithThis: '`PlatformFileSystem` cannot read files.',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/PlatformFileSystem.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport enum PlatformFileSystemType {\n  /**\n   * Snippets are implemented as a PlatformFileSystem but they are\n   * actually stored in the browser's profile directory and do not\n   * create files on the actual filesystem.\n   *\n   * See Sources > Snippets in the UI.\n   */\n  SNIPPETS = 'snippets',\n  /**\n   * Overrides is a filesystem that represents a user-selected folder on\n   * disk. This folder is used to replace page resources using request\n   * interception.\n   *\n   * See Sources > Overrides in the UI.\n   */\n  OVERRIDES = 'overrides',\n  /**\n   * Represents a filesystem for a workspace folder that the user added\n   * to DevTools. It can be manually connected or it can be\n   * automatically discovered based on the hints found in devtools.json\n   * served by the inspected page (see\n   * https://goo.gle/devtools-json-design). DevTools tries to map the\n   * page content to the content in such folder but does not use request\n   * interception for this.\n   */\n  WORKSPACE_PROJECT = 'workspace-project',\n}\n\nexport const enum Events {\n  FILE_SYSTEM_ERROR = 'file-system-error',\n}\n\ninterface EventTypes {\n  [Events.FILE_SYSTEM_ERROR]: string;\n}\n\nexport class PlatformFileSystem extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #path: Platform.DevToolsPath.UrlString;\n  #type: PlatformFileSystemType;\n  /**\n   * True if the filesystem was automatically discovered (see\n   * https://goo.gle/devtools-json-design).\n   */\n  readonly automatic: boolean;\n\n  constructor(path: Platform.DevToolsPath.UrlString, type: PlatformFileSystemType, automatic: boolean) {\n    super();\n    this.#path = path;\n    this.#type = type;\n    this.automatic = automatic;\n  }\n\n  getMetadata(_path: Platform.DevToolsPath.EncodedPathString): Promise<{modificationTime: Date, size: number}|null> {\n    return Promise.resolve(null);\n  }\n\n  initialFilePaths(): Platform.DevToolsPath.EncodedPathString[] {\n    return [];\n  }\n\n  initialGitFolders(): Platform.DevToolsPath.EncodedPathString[] {\n    return [];\n  }\n\n  path(): Platform.DevToolsPath.UrlString {\n    return this.#path;\n  }\n\n  embedderPath(): Platform.DevToolsPath.RawPathString {\n    throw new Error('Not implemented');\n  }\n\n  type(): PlatformFileSystemType {\n    return this.#type;\n  }\n\n  async createFile(_path: Platform.DevToolsPath.EncodedPathString, _name: Platform.DevToolsPath.RawPathString|null):\n      Promise<Platform.DevToolsPath.EncodedPathString|null> {\n    return await Promise.resolve(null);\n  }\n\n  deleteFile(_path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  deleteDirectoryRecursively(_path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  requestFileBlob(_path: Platform.DevToolsPath.EncodedPathString): Promise<Blob|null> {\n    return Promise.resolve(null as Blob | null);\n  }\n\n  async requestFileContent(_path: Platform.DevToolsPath.EncodedPathString):\n      Promise<TextUtils.ContentData.ContentDataOrError> {\n    return {error: i18nString(UIStrings.unableToReadFilesWithThis)};\n  }\n\n  setFileContent(_path: Platform.DevToolsPath.EncodedPathString, _content: string, _isBase64: boolean): void {\n    throw new Error('Not implemented');\n  }\n\n  renameFile(\n      _path: Platform.DevToolsPath.EncodedPathString, _newName: Platform.DevToolsPath.RawPathString,\n      callback: (arg0: boolean, arg1?: string|undefined) => void): void {\n    callback(false);\n  }\n\n  addExcludedFolder(_path: Platform.DevToolsPath.EncodedPathString): void {\n  }\n\n  removeExcludedFolder(_path: Platform.DevToolsPath.EncodedPathString): void {\n  }\n\n  fileSystemRemoved(): void {\n  }\n\n  isFileExcluded(_folderPath: Platform.DevToolsPath.EncodedPathString): boolean {\n    return false;\n  }\n\n  excludedFolders(): Set<Platform.DevToolsPath.EncodedPathString> {\n    return new Set();\n  }\n\n  searchInPath(_query: string, _progress: Common.Progress.Progress): Promise<string[]> {\n    return Promise.resolve([]);\n  }\n\n  indexContent(progress: Common.Progress.Progress): void {\n    queueMicrotask(() => {\n      progress.done();\n    });\n  }\n\n  mimeFromPath(_path: Platform.DevToolsPath.UrlString): string {\n    throw new Error('Not implemented');\n  }\n\n  canExcludeFolder(_path: Platform.DevToolsPath.EncodedPathString): boolean {\n    return false;\n  }\n\n  contentType(_path: string): Common.ResourceType.ResourceType {\n    throw new Error('Not implemented');\n  }\n\n  tooltipForURL(_url: Platform.DevToolsPath.UrlString): string {\n    throw new Error('Not implemented');\n  }\n\n  supportsAutomapping(): boolean {\n    throw new Error('Not implemented');\n  }\n}\n", "// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport * as BreakpointManager from '../breakpoints/breakpoints.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {Automapping, type AutomappingStatus} from './Automapping.js';\nimport {LinkDecorator} from './PersistenceUtils.js';\n\nlet persistenceInstance: PersistenceImpl;\n\nexport class PersistenceImpl extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #workspace: Workspace.Workspace.WorkspaceImpl;\n  readonly #breakpointManager: BreakpointManager.BreakpointManager.BreakpointManager;\n  readonly #filePathPrefixesToBindingCount = new FilePathPrefixesBindingCounts();\n  #subscribedBindingEventListeners =\n      new Platform.MapUtilities.Multimap<Workspace.UISourceCode.UISourceCode, () => void>();\n  readonly #mapping: Automapping;\n\n  constructor(\n      workspace: Workspace.Workspace.WorkspaceImpl,\n      breakpointManager: BreakpointManager.BreakpointManager.BreakpointManager) {\n    super();\n    this.#workspace = workspace;\n    this.#breakpointManager = breakpointManager;\n    this.#breakpointManager.addUpdateBindingsCallback(this.#setupBindings.bind(this));\n\n    const linkDecorator = new LinkDecorator(this);\n    Components.Linkifier.Linkifier.setLinkDecorator(linkDecorator);\n\n    this.#mapping = new Automapping(this.#workspace, this.onStatusAdded.bind(this), this.onStatusRemoved.bind(this));\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    workspace: Workspace.Workspace.WorkspaceImpl|null,\n    breakpointManager: BreakpointManager.BreakpointManager.BreakpointManager|null,\n  } = {forceNew: null, workspace: null, breakpointManager: null}): PersistenceImpl {\n    const {forceNew, workspace, breakpointManager} = opts;\n    if (!persistenceInstance || forceNew) {\n      if (!workspace || !breakpointManager) {\n        throw new Error('Missing arguments for workspace');\n      }\n      persistenceInstance = new PersistenceImpl(workspace, breakpointManager);\n    }\n\n    return persistenceInstance;\n  }\n\n  addNetworkInterceptor(interceptor: (arg0: Workspace.UISourceCode.UISourceCode) => boolean): void {\n    this.#mapping.addNetworkInterceptor(interceptor);\n  }\n\n  refreshAutomapping(): void {\n    this.#mapping.scheduleRemap();\n  }\n\n  async addBinding(binding: PersistenceBinding): Promise<void> {\n    await this.innerAddBinding(binding);\n  }\n\n  async addBindingForTest(binding: PersistenceBinding): Promise<void> {\n    await this.innerAddBinding(binding);\n  }\n\n  async removeBinding(binding: PersistenceBinding): Promise<void> {\n    await this.innerRemoveBinding(binding);\n  }\n\n  async removeBindingForTest(binding: PersistenceBinding): Promise<void> {\n    await this.innerRemoveBinding(binding);\n  }\n\n  #setupBindings(networkUISourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (networkUISourceCode.project().type() !== Workspace.Workspace.projectTypes.Network) {\n      return Promise.resolve();\n    }\n    return this.#mapping.computeNetworkStatus(networkUISourceCode);\n  }\n\n  private async innerAddBinding(binding: PersistenceBinding): Promise<void> {\n    bindings.set(binding.network, binding);\n    bindings.set(binding.fileSystem, binding);\n\n    binding.fileSystem.forceLoadOnCheckContent();\n\n    binding.network.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.onWorkingCopyCommitted, this);\n    binding.fileSystem.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.onWorkingCopyCommitted, this);\n    binding.network.addEventListener(Workspace.UISourceCode.Events.WorkingCopyChanged, this.onWorkingCopyChanged, this);\n    binding.fileSystem.addEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.onWorkingCopyChanged, this);\n\n    this.#filePathPrefixesToBindingCount.add(binding.fileSystem.url());\n\n    await this.moveBreakpoints(binding.fileSystem, binding.network);\n\n    console.assert(!binding.fileSystem.isDirty() || !binding.network.isDirty());\n    if (binding.fileSystem.isDirty()) {\n      this.syncWorkingCopy(binding.fileSystem);\n    } else if (binding.network.isDirty()) {\n      this.syncWorkingCopy(binding.network);\n    } else if (binding.network.hasCommits() && binding.network.content() !== binding.fileSystem.content()) {\n      binding.network.setWorkingCopy(binding.network.content());\n      this.syncWorkingCopy(binding.network);\n    }\n\n    this.notifyBindingEvent(binding.network);\n    this.notifyBindingEvent(binding.fileSystem);\n    this.dispatchEventToListeners(Events.BindingCreated, binding);\n  }\n\n  private async innerRemoveBinding(binding: PersistenceBinding): Promise<void> {\n    if (bindings.get(binding.network) !== binding) {\n      return;\n    }\n    console.assert(\n        bindings.get(binding.network) === bindings.get(binding.fileSystem),\n        'ERROR: inconsistent binding for networkURL ' + binding.network.url());\n\n    bindings.delete(binding.network);\n    bindings.delete(binding.fileSystem);\n\n    binding.network.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.onWorkingCopyCommitted, this);\n    binding.fileSystem.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyCommitted, this.onWorkingCopyCommitted, this);\n    binding.network.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.onWorkingCopyChanged, this);\n    binding.fileSystem.removeEventListener(\n        Workspace.UISourceCode.Events.WorkingCopyChanged, this.onWorkingCopyChanged, this);\n\n    this.#filePathPrefixesToBindingCount.remove(binding.fileSystem.url());\n    await this.#breakpointManager.copyBreakpoints(binding.network, binding.fileSystem);\n\n    this.notifyBindingEvent(binding.network);\n    this.notifyBindingEvent(binding.fileSystem);\n    this.dispatchEventToListeners(Events.BindingRemoved, binding);\n  }\n\n  private onStatusAdded(status: AutomappingStatus): Promise<void> {\n    const binding = new PersistenceBinding(status.network, status.fileSystem);\n    statusBindings.set(status, binding);\n    return this.innerAddBinding(binding);\n  }\n\n  private async onStatusRemoved(status: AutomappingStatus): Promise<void> {\n    const binding = statusBindings.get(status) as PersistenceBinding;\n    await this.innerRemoveBinding(binding);\n  }\n\n  private onWorkingCopyChanged(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    this.syncWorkingCopy(uiSourceCode);\n  }\n\n  private syncWorkingCopy(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const binding = bindings.get(uiSourceCode);\n    if (!binding || mutedWorkingCopies.has(binding)) {\n      return;\n    }\n    const other = binding.network === uiSourceCode ? binding.fileSystem : binding.network;\n    if (!uiSourceCode.isDirty()) {\n      mutedWorkingCopies.add(binding);\n      other.resetWorkingCopy();\n      mutedWorkingCopies.delete(binding);\n      this.contentSyncedForTest();\n      return;\n    }\n\n    const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(binding.network);\n    if (target && target.type() === SDK.Target.Type.NODE) {\n      const newContent = uiSourceCode.workingCopy();\n      void other.requestContentData().then(() => {\n        const nodeJSContent = PersistenceImpl.rewrapNodeJSContent(other, other.workingCopy(), newContent);\n        setWorkingCopy.call(this, () => nodeJSContent);\n      });\n      return;\n    }\n\n    setWorkingCopy.call(this, () => uiSourceCode.workingCopy());\n\n    function setWorkingCopy(this: PersistenceImpl, workingCopyGetter: () => string): void {\n      if (binding) {\n        mutedWorkingCopies.add(binding);\n      }\n      other.setWorkingCopyGetter(workingCopyGetter);\n      if (binding) {\n        mutedWorkingCopies.delete(binding);\n      }\n      this.contentSyncedForTest();\n    }\n  }\n\n  private onWorkingCopyCommitted(\n      event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.WorkingCopyCommittedEvent>): void {\n    const uiSourceCode = event.data.uiSourceCode;\n    const newContent = event.data.content;\n    this.syncContent(uiSourceCode, newContent, Boolean(event.data.encoded));\n  }\n\n  syncContent(uiSourceCode: Workspace.UISourceCode.UISourceCode, newContent: string, encoded: boolean): void {\n    const binding = bindings.get(uiSourceCode);\n    if (!binding || mutedCommits.has(binding)) {\n      return;\n    }\n    const other = binding.network === uiSourceCode ? binding.fileSystem : binding.network;\n    const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(binding.network);\n    if (target && target.type() === SDK.Target.Type.NODE) {\n      void other.requestContentData()\n          .then(contentDataOrError => TextUtils.ContentData.ContentData.textOr(contentDataOrError, ''))\n          .then(currentContent => {\n            const nodeJSContent = PersistenceImpl.rewrapNodeJSContent(other, currentContent, newContent);\n            setContent.call(this, nodeJSContent);\n          });\n      return;\n    }\n    setContent.call(this, newContent);\n\n    function setContent(this: PersistenceImpl, newContent: string): void {\n      if (binding) {\n        mutedCommits.add(binding);\n      }\n      other.setContent(newContent, encoded);\n      if (binding) {\n        mutedCommits.delete(binding);\n      }\n      this.contentSyncedForTest();\n    }\n  }\n\n  static rewrapNodeJSContent(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, currentContent: string, newContent: string): string {\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.FileSystem) {\n      if (newContent.startsWith(NodePrefix) && newContent.endsWith(NodeSuffix)) {\n        newContent = newContent.substring(NodePrefix.length, newContent.length - NodeSuffix.length);\n      }\n      if (currentContent.startsWith(NodeShebang)) {\n        newContent = NodeShebang + newContent;\n      }\n    } else {\n      if (newContent.startsWith(NodeShebang)) {\n        newContent = newContent.substring(NodeShebang.length);\n      }\n      if (currentContent.startsWith(NodePrefix) && currentContent.endsWith(NodeSuffix)) {\n        newContent = NodePrefix + newContent + NodeSuffix;\n      }\n    }\n    return newContent;\n  }\n\n  private contentSyncedForTest(): void {\n  }\n\n  private async moveBreakpoints(from: Workspace.UISourceCode.UISourceCode, to: Workspace.UISourceCode.UISourceCode):\n      Promise<void> {\n    const breakpoints = this.#breakpointManager.breakpointLocationsForUISourceCode(from).map(\n        breakpointLocation => breakpointLocation.breakpoint);\n    await Promise.all(breakpoints.map(async breakpoint => {\n      await breakpoint.remove(false /* keepInStorage */);\n      return await this.#breakpointManager.setBreakpoint(\n          to, breakpoint.lineNumber(), breakpoint.columnNumber(), breakpoint.condition(), breakpoint.enabled(),\n          breakpoint.isLogpoint(), BreakpointManager.BreakpointManager.BreakpointOrigin.OTHER);\n    }));\n  }\n\n  hasUnsavedCommittedChanges(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    if (this.#workspace.hasResourceContentTrackingExtensions()) {\n      return false;\n    }\n    if (uiSourceCode.project().canSetFileContent()) {\n      return false;\n    }\n    if (bindings.has(uiSourceCode)) {\n      return false;\n    }\n    return Boolean(uiSourceCode.hasCommits());\n  }\n\n  binding(uiSourceCode: Workspace.UISourceCode.UISourceCode): PersistenceBinding|null {\n    return bindings.get(uiSourceCode) || null;\n  }\n\n  subscribeForBindingEvent(uiSourceCode: Workspace.UISourceCode.UISourceCode, listener: () => void): void {\n    this.#subscribedBindingEventListeners.set(uiSourceCode, listener);\n  }\n\n  unsubscribeFromBindingEvent(uiSourceCode: Workspace.UISourceCode.UISourceCode, listener: () => void): void {\n    this.#subscribedBindingEventListeners.delete(uiSourceCode, listener);\n  }\n\n  private notifyBindingEvent(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (!this.#subscribedBindingEventListeners.has(uiSourceCode)) {\n      return;\n    }\n    const listeners = Array.from(this.#subscribedBindingEventListeners.get(uiSourceCode));\n    for (const listener of listeners) {\n      listener.call(null);\n    }\n  }\n\n  fileSystem(uiSourceCode: Workspace.UISourceCode.UISourceCode): Workspace.UISourceCode.UISourceCode|null {\n    const binding = this.binding(uiSourceCode);\n    return binding ? binding.fileSystem : null;\n  }\n\n  network(uiSourceCode: Workspace.UISourceCode.UISourceCode): Workspace.UISourceCode.UISourceCode|null {\n    const binding = this.binding(uiSourceCode);\n    return binding ? binding.network : null;\n  }\n\n  filePathHasBindings(filePath: Platform.DevToolsPath.UrlString): boolean {\n    return this.#filePathPrefixesToBindingCount.hasBindingPrefix(filePath);\n  }\n}\n\nclass FilePathPrefixesBindingCounts {\n  #prefixCounts = new Map<string, number>();\n\n  private getPlatformCanonicalFilePath(path: Platform.DevToolsPath.UrlString): Platform.DevToolsPath.UrlString {\n    return Host.Platform.isWin() ? Common.ParsedURL.ParsedURL.toLowerCase(path) : path;\n  }\n\n  add(filePath: Platform.DevToolsPath.UrlString): void {\n    filePath = this.getPlatformCanonicalFilePath(filePath);\n    let relative = '';\n    for (const token of filePath.split('/')) {\n      relative += token + '/';\n      const count = this.#prefixCounts.get(relative) || 0;\n      this.#prefixCounts.set(relative, count + 1);\n    }\n  }\n\n  remove(filePath: Platform.DevToolsPath.UrlString): void {\n    filePath = this.getPlatformCanonicalFilePath(filePath);\n    let relative = '';\n    for (const token of filePath.split('/')) {\n      relative += token + '/';\n      const count = this.#prefixCounts.get(relative);\n      if (count === 1) {\n        this.#prefixCounts.delete(relative);\n      } else if (count !== undefined) {\n        this.#prefixCounts.set(relative, count - 1);\n      }\n    }\n  }\n\n  hasBindingPrefix(filePath: Platform.DevToolsPath.UrlString): boolean {\n    filePath = this.getPlatformCanonicalFilePath(filePath);\n    if (!filePath.endsWith('/')) {\n      filePath = Common.ParsedURL.ParsedURL.concatenate(filePath, '/');\n    }\n    return this.#prefixCounts.has(filePath);\n  }\n}\n\nconst bindings = new WeakMap<Workspace.UISourceCode.UISourceCode, PersistenceBinding>();\nconst statusBindings = new WeakMap<AutomappingStatus, PersistenceBinding>();\n\nconst mutedCommits = new WeakSet<PersistenceBinding>();\n\nconst mutedWorkingCopies = new WeakSet<PersistenceBinding>();\n\nexport const NodePrefix = '(function (exports, require, module, __filename, __dirname) { ';\nexport const NodeSuffix = '\\n});';\nexport const NodeShebang = '#!/usr/bin/env node';\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  BindingCreated = 'BindingCreated',\n  BindingRemoved = 'BindingRemoved',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface EventTypes {\n  [Events.BindingCreated]: PersistenceBinding;\n  [Events.BindingRemoved]: PersistenceBinding;\n}\n\nexport class PersistenceBinding {\n  readonly network: Workspace.UISourceCode.UISourceCode;\n  readonly fileSystem: Workspace.UISourceCode.UISourceCode;\n  constructor(network: Workspace.UISourceCode.UISourceCode, fileSystem: Workspace.UISourceCode.UISourceCode) {\n    this.network = network;\n    this.fileSystem = fileSystem;\n  }\n}\n", "// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n/* eslint-disable rulesdir/no-imperative-dom-api */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\n// TODO(crbug.com/442509324): remove UI dependency\n// eslint-disable-next-line rulesdir/no-imports-in-directory\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {FileSystemWorkspaceBinding} from './FileSystemWorkspaceBinding.js';\nimport {NetworkPersistenceManager} from './NetworkPersistenceManager.js';\nimport {Events, type PersistenceBinding, PersistenceImpl} from './PersistenceImpl.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in Persistence Utils of the Workspace settings in Settings\n   * @example {example.url} PH1\n   */\n  linkedToSourceMapS: 'Linked to source map: {PH1}',\n  /**\n   * @description Text to show something is linked to another\n   * @example {example.url} PH1\n   */\n  linkedToS: 'Linked to {PH1}',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/PersistenceUtils.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class PersistenceUtils {\n  static tooltipForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    const binding = PersistenceImpl.instance().binding(uiSourceCode);\n    if (!binding) {\n      return '';\n    }\n    if (uiSourceCode === binding.network) {\n      return FileSystemWorkspaceBinding.tooltipForUISourceCode(binding.fileSystem);\n    }\n    if (binding.network.contentType().isFromSourceMap()) {\n      return i18nString(\n          UIStrings.linkedToSourceMapS, {PH1: Platform.StringUtilities.trimMiddle(binding.network.url(), 150)});\n    }\n    return i18nString(UIStrings.linkedToS, {PH1: Platform.StringUtilities.trimMiddle(binding.network.url(), 150)});\n  }\n\n  static iconForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): IconButton.Icon.Icon|null {\n    const binding = PersistenceImpl.instance().binding(uiSourceCode);\n    if (binding) {\n      if (!Common.ParsedURL.schemeIs(binding.fileSystem.url(), 'file:')) {\n        return null;\n      }\n      const icon = new IconButton.Icon.Icon();\n      icon.name = 'document';\n      icon.classList.add('small');\n      UI.Tooltip.Tooltip.install(icon, PersistenceUtils.tooltipForUISourceCode(binding.network));\n      if (NetworkPersistenceManager.instance().project() === binding.fileSystem.project()) {\n        icon.classList.add('dot', 'purple');\n      } else {\n        icon.classList.add('dot', 'green');\n      }\n      return icon;\n    }\n\n    if (uiSourceCode.project().type() !== Workspace.Workspace.projectTypes.FileSystem ||\n        !Common.ParsedURL.schemeIs(uiSourceCode.url(), 'file:')) {\n      return null;\n    }\n\n    if (NetworkPersistenceManager.instance().isActiveHeaderOverrides(uiSourceCode)) {\n      const icon = new IconButton.Icon.Icon();\n      icon.name = 'document';\n      icon.classList.add('small');\n      icon.classList.add('dot', 'purple');\n      return icon;\n    }\n\n    const icon = new IconButton.Icon.Icon();\n    icon.name = 'document';\n    icon.classList.add('small');\n    UI.Tooltip.Tooltip.install(icon, PersistenceUtils.tooltipForUISourceCode(uiSourceCode));\n    return icon;\n  }\n}\n\nexport class LinkDecorator extends Common.ObjectWrapper.ObjectWrapper<Components.Linkifier.LinkDecorator.EventTypes>\n    implements Components.Linkifier.LinkDecorator {\n  constructor(persistence: PersistenceImpl) {\n    super();\n    persistence.addEventListener(Events.BindingCreated, this.bindingChanged, this);\n    persistence.addEventListener(Events.BindingRemoved, this.bindingChanged, this);\n  }\n\n  private bindingChanged(event: Common.EventTarget.EventTargetEvent<PersistenceBinding>): void {\n    const binding = event.data;\n    this.dispatchEventToListeners(Components.Linkifier.LinkDecorator.Events.LINK_ICON_CHANGED, binding.network);\n  }\n\n  linkIcon(uiSourceCode: Workspace.UISourceCode.UISourceCode): IconButton.Icon.Icon|null {\n    return PersistenceUtils.iconForUISourceCode(uiSourceCode);\n  }\n}\n", "// Copyright (c) 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n// TODO(crbug.com/442509324): remove UI dependency\n// eslint-disable-next-line rulesdir/no-imports-in-directory\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Breakpoints from '../breakpoints/breakpoints.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {type FileSystem, FileSystemWorkspaceBinding} from './FileSystemWorkspaceBinding.js';\nimport {IsolatedFileSystemManager} from './IsolatedFileSystemManager.js';\nimport {PersistenceBinding, PersistenceImpl} from './PersistenceImpl.js';\n\nlet networkPersistenceManagerInstance: NetworkPersistenceManager|null;\n\nconst forbiddenUrls = ['chromewebstore.google.com', 'chrome.google.com'];\n\nexport class NetworkPersistenceManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDK.TargetManager.Observer {\n  #bindings = new WeakMap<Workspace.UISourceCode.UISourceCode, PersistenceBinding>();\n  readonly #originalResponseContentPromises = new WeakMap<Workspace.UISourceCode.UISourceCode, Promise<string|null>>();\n  #savingForOverrides = new WeakSet<Workspace.UISourceCode.UISourceCode>();\n  #enabledSetting = Common.Settings.Settings.instance().moduleSetting<boolean>('persistence-network-overrides-enabled');\n  readonly #workspace: Workspace.Workspace.WorkspaceImpl;\n  readonly #networkUISourceCodeForEncodedPath =\n      new Map<Platform.DevToolsPath.EncodedPathString, Workspace.UISourceCode.UISourceCode>();\n  readonly #interceptionHandlerBound: (interceptedRequest: SDK.NetworkManager.InterceptedRequest) => Promise<void>;\n  readonly #updateInterceptionThrottler = new Common.Throttler.Throttler(50);\n  #project: Workspace.Workspace.Project|null = null;\n  #active = false;\n  #enabled = false;\n  #eventDescriptors: Common.EventTarget.EventDescriptor[] = [];\n  #headerOverridesMap = new Map<Platform.DevToolsPath.EncodedPathString, HeaderOverrideWithRegex[]>();\n  readonly #sourceCodeToBindProcessMutex = new WeakMap<Workspace.UISourceCode.UISourceCode, Common.Mutex.Mutex>();\n  readonly #eventDispatchThrottler = new Common.Throttler.Throttler(50);\n  #headerOverridesForEventDispatch = new Set<Workspace.UISourceCode.UISourceCode>();\n\n  private constructor(workspace: Workspace.Workspace.WorkspaceImpl) {\n    super();\n\n    this.#enabledSetting.addChangeListener(this.enabledChanged, this);\n\n    this.#workspace = workspace;\n\n    this.#interceptionHandlerBound = this.interceptionHandler.bind(this);\n\n    this.#workspace.addEventListener(Workspace.Workspace.Events.ProjectAdded, event => {\n      void this.onProjectAdded(event.data);\n    });\n    this.#workspace.addEventListener(Workspace.Workspace.Events.ProjectRemoved, event => {\n      void this.onProjectRemoved(event.data);\n    });\n\n    PersistenceImpl.instance().addNetworkInterceptor(this.canHandleNetworkUISourceCode.bind(this));\n    Breakpoints.BreakpointManager.BreakpointManager.instance().addUpdateBindingsCallback(\n        this.networkUISourceCodeAdded.bind(this));\n\n    void this.enabledChanged();\n\n    SDK.TargetManager.TargetManager.instance().observeTargets(this);\n  }\n\n  targetAdded(): void {\n    void this.updateActiveProject();\n  }\n  targetRemoved(): void {\n    void this.updateActiveProject();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    workspace: Workspace.Workspace.WorkspaceImpl|null,\n  } = {forceNew: null, workspace: null}): NetworkPersistenceManager {\n    const {forceNew, workspace} = opts;\n    if (!networkPersistenceManagerInstance || forceNew) {\n      if (!workspace) {\n        throw new Error('Missing workspace for NetworkPersistenceManager');\n      }\n      networkPersistenceManagerInstance = new NetworkPersistenceManager(workspace);\n    }\n\n    return networkPersistenceManagerInstance;\n  }\n\n  active(): boolean {\n    return this.#active;\n  }\n\n  project(): Workspace.Workspace.Project|null {\n    return this.#project;\n  }\n\n  originalContentForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<string|null>|null {\n    const binding = this.#bindings.get(uiSourceCode);\n    if (!binding) {\n      return null;\n    }\n    const fileSystemUISourceCode = binding.fileSystem;\n    return this.#originalResponseContentPromises.get(fileSystemUISourceCode) || null;\n  }\n\n  private async enabledChanged(): Promise<void> {\n    if (this.#enabled === this.#enabledSetting.get()) {\n      return;\n    }\n    this.#enabled = this.#enabledSetting.get();\n    if (this.#enabled) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.PersistenceNetworkOverridesEnabled);\n      this.#eventDescriptors = [\n        Workspace.Workspace.WorkspaceImpl.instance().addEventListener(\n            Workspace.Workspace.Events.UISourceCodeRenamed,\n            event => {\n              void this.uiSourceCodeRenamedListener(event);\n            }),\n        Workspace.Workspace.WorkspaceImpl.instance().addEventListener(\n            Workspace.Workspace.Events.UISourceCodeAdded,\n            event => {\n              void this.uiSourceCodeAdded(event);\n            }),\n        Workspace.Workspace.WorkspaceImpl.instance().addEventListener(\n            Workspace.Workspace.Events.UISourceCodeRemoved,\n            event => {\n              void this.uiSourceCodeRemovedListener(event);\n            }),\n        Workspace.Workspace.WorkspaceImpl.instance().addEventListener(\n            Workspace.Workspace.Events.WorkingCopyCommitted,\n            event => this.onUISourceCodeWorkingCopyCommitted(event.data.uiSourceCode)),\n      ];\n      await this.updateActiveProject();\n    } else {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.PersistenceNetworkOverridesDisabled);\n      Common.EventTarget.removeEventListeners(this.#eventDescriptors);\n      await this.updateActiveProject();\n    }\n    this.dispatchEventToListeners(Events.LOCAL_OVERRIDES_PROJECT_UPDATED, this.#enabled);\n  }\n\n  private async uiSourceCodeRenamedListener(\n      event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.UISourceCodeRenamedEvent>): Promise<void> {\n    const uiSourceCode = event.data.uiSourceCode;\n    await this.onUISourceCodeRemoved(uiSourceCode);\n    await this.onUISourceCodeAdded(uiSourceCode);\n  }\n\n  private async uiSourceCodeRemovedListener(\n      event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): Promise<void> {\n    await this.onUISourceCodeRemoved(event.data);\n  }\n\n  private async uiSourceCodeAdded(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>):\n      Promise<void> {\n    await this.onUISourceCodeAdded(event.data);\n  }\n\n  private async updateActiveProject(): Promise<void> {\n    const wasActive = this.#active;\n    this.#active =\n        Boolean(this.#enabledSetting.get() && SDK.TargetManager.TargetManager.instance().rootTarget() && this.#project);\n    if (this.#active === wasActive) {\n      return;\n    }\n\n    if (this.#active && this.#project) {\n      await Promise.all(\n          [...this.#project.uiSourceCodes()].map(uiSourceCode => this.filesystemUISourceCodeAdded(uiSourceCode)));\n\n      const networkProjects = this.#workspace.projectsForType(Workspace.Workspace.projectTypes.Network);\n      for (const networkProject of networkProjects) {\n        await Promise.all(\n            [...networkProject.uiSourceCodes()].map(uiSourceCode => this.networkUISourceCodeAdded(uiSourceCode)));\n      }\n    } else if (this.#project) {\n      await Promise.all(\n          [...this.#project.uiSourceCodes()].map(uiSourceCode => this.filesystemUISourceCodeRemoved(uiSourceCode)));\n      this.#networkUISourceCodeForEncodedPath.clear();\n    }\n    PersistenceImpl.instance().refreshAutomapping();\n  }\n\n  encodedPathFromUrl(url: Platform.DevToolsPath.UrlString, ignoreInactive?: boolean):\n      Platform.DevToolsPath.EncodedPathString {\n    return Common.ParsedURL.ParsedURL.rawPathToEncodedPathString(this.rawPathFromUrl(url, ignoreInactive));\n  }\n\n  rawPathFromUrl(url: Platform.DevToolsPath.UrlString, ignoreInactive?: boolean): Platform.DevToolsPath.RawPathString {\n    if ((!this.#active && !ignoreInactive) || !this.#project) {\n      return Platform.DevToolsPath.EmptyRawPathString;\n    }\n    let initialEncodedPath = Common.ParsedURL.ParsedURL.urlWithoutHash(url.replace(/^https?:\\/\\//, '')) as\n        Platform.DevToolsPath.EncodedPathString;\n    if (initialEncodedPath.endsWith('/') && initialEncodedPath.indexOf('?') === -1) {\n      initialEncodedPath = Common.ParsedURL.ParsedURL.concatenate(initialEncodedPath, 'index.html');\n    }\n    let encodedPathParts = NetworkPersistenceManager.encodeEncodedPathToLocalPathParts(initialEncodedPath);\n    const projectPath =\n        FileSystemWorkspaceBinding.fileSystemPath(this.#project.id() as Platform.DevToolsPath.UrlString);\n    const encodedPath = encodedPathParts.join('/');\n    if (projectPath.length + encodedPath.length > 200) {\n      const domain = encodedPathParts[0];\n      const encodedFileName = encodedPathParts[encodedPathParts.length - 1];\n      const shortFileName = encodedFileName ? encodedFileName.substr(0, 10) + '-' : '';\n      const extension = Common.ParsedURL.ParsedURL.extractExtension(initialEncodedPath);\n      const extensionPart = extension ? '.' + extension.substr(0, 10) : '';\n      encodedPathParts = [\n        domain,\n        'longurls',\n        shortFileName + Platform.StringUtilities.hashCode(encodedPath).toString(16) + extensionPart,\n      ];\n    }\n    return Common.ParsedURL.ParsedURL.join(encodedPathParts as Platform.DevToolsPath.RawPathString[], '/');\n  }\n\n  static encodeEncodedPathToLocalPathParts(encodedPath: Platform.DevToolsPath.EncodedPathString): string[] {\n    const encodedParts = [];\n    for (const pathPart of this.#fileNamePartsFromEncodedPath(encodedPath)) {\n      if (!pathPart) {\n        continue;\n      }\n      // encodeURI() escapes all the unsafe filename characters except '/' and '*'\n      let encodedName =\n          encodeURI(pathPart).replace(/[\\/\\*]/g, match => '%' + match[0].charCodeAt(0).toString(16).toUpperCase());\n      if (Host.Platform.isWin()) {\n        // Windows does not allow ':' and '?' in filenames\n        encodedName = encodedName.replace(/[:\\?]/g, match => '%' + match[0].charCodeAt(0).toString(16).toUpperCase());\n        // Windows does not allow a small set of filenames.\n        if (RESERVED_FILENAMES.has(encodedName.toLowerCase())) {\n          encodedName = encodedName.split('').map(char => '%' + char.charCodeAt(0).toString(16).toUpperCase()).join('');\n        }\n        // Windows does not allow the file to end in a space or dot (space should already be encoded).\n        const lastChar = encodedName.charAt(encodedName.length - 1);\n        if (lastChar === '.') {\n          encodedName = encodedName.substr(0, encodedName.length - 1) + '%2E';\n        }\n      }\n      encodedParts.push(encodedName);\n    }\n    return encodedParts;\n  }\n\n  static #fileNamePartsFromEncodedPath(encodedPath: Platform.DevToolsPath.EncodedPathString): string[] {\n    encodedPath = Common.ParsedURL.ParsedURL.urlWithoutHash(encodedPath) as Platform.DevToolsPath.EncodedPathString;\n    const queryIndex = encodedPath.indexOf('?');\n    if (queryIndex === -1) {\n      return encodedPath.split('/');\n    }\n    if (queryIndex === 0) {\n      return [encodedPath];\n    }\n    const endSection = encodedPath.substr(queryIndex);\n    const parts = encodedPath.substr(0, encodedPath.length - endSection.length).split('/');\n    parts[parts.length - 1] += endSection;\n    return parts;\n  }\n\n  fileUrlFromNetworkUrl(url: Platform.DevToolsPath.UrlString, ignoreInactive?: boolean):\n      Platform.DevToolsPath.UrlString {\n    if (!this.#project) {\n      return Platform.DevToolsPath.EmptyUrlString;\n    }\n    return Common.ParsedURL.ParsedURL.concatenate(\n        (this.#project as FileSystem).fileSystemPath(), '/', this.encodedPathFromUrl(url, ignoreInactive));\n  }\n\n  getHeadersUISourceCodeFromUrl(url: Platform.DevToolsPath.UrlString): Workspace.UISourceCode.UISourceCode|null {\n    const fileUrlFromRequest = this.fileUrlFromNetworkUrl(url, /* ignoreNoActive */ true);\n    const folderUrlFromRequest =\n        Common.ParsedURL.ParsedURL.substring(fileUrlFromRequest, 0, fileUrlFromRequest.lastIndexOf('/'));\n    const headersFileUrl = Common.ParsedURL.ParsedURL.concatenate(folderUrlFromRequest, '/', HEADERS_FILENAME);\n    return Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(headersFileUrl);\n  }\n\n  async getOrCreateHeadersUISourceCodeFromUrl(url: Platform.DevToolsPath.UrlString):\n      Promise<Workspace.UISourceCode.UISourceCode|null> {\n    let uiSourceCode = this.getHeadersUISourceCodeFromUrl(url);\n    if (!uiSourceCode && this.#project) {\n      const encodedFilePath = this.encodedPathFromUrl(url, /* ignoreNoActive */ true);\n      const encodedPath = Common.ParsedURL.ParsedURL.substring(encodedFilePath, 0, encodedFilePath.lastIndexOf('/'));\n      uiSourceCode = await this.#project.createFile(encodedPath, HEADERS_FILENAME, '');\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.HeaderOverrideFileCreated);\n    }\n    return uiSourceCode;\n  }\n\n  private decodeLocalPathToUrlPath(path: string): string {\n    try {\n      return unescape(path);\n    } catch (e) {\n      console.error(e);\n    }\n    return path;\n  }\n\n  async #unbind(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const binding = this.#bindings.get(uiSourceCode);\n    const headerBinding = uiSourceCode.url().endsWith(HEADERS_FILENAME);\n    if (binding) {\n      const mutex = this.#getOrCreateMutex(binding.network);\n      await mutex.run(this.#innerUnbind.bind(this, binding));\n    } else if (headerBinding) {\n      this.dispatchEventToListeners(Events.REQUEST_FOR_HEADER_OVERRIDES_FILE_CHANGED, uiSourceCode);\n    }\n  }\n\n  async #unbindUnguarded(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const binding = this.#bindings.get(uiSourceCode);\n    if (binding) {\n      await this.#innerUnbind(binding);\n    }\n  }\n\n  #innerUnbind(binding: PersistenceBinding): Promise<void> {\n    this.#bindings.delete(binding.network);\n    this.#bindings.delete(binding.fileSystem);\n    return PersistenceImpl.instance().removeBinding(binding);\n  }\n\n  async #bind(\n      networkUISourceCode: Workspace.UISourceCode.UISourceCode,\n      fileSystemUISourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const mutex = this.#getOrCreateMutex(networkUISourceCode);\n    await mutex.run(async () => {\n      const existingBinding = this.#bindings.get(networkUISourceCode);\n      if (existingBinding) {\n        const {network, fileSystem} = existingBinding;\n        if (networkUISourceCode === network && fileSystemUISourceCode === fileSystem) {\n          return;\n        }\n        await this.#unbindUnguarded(networkUISourceCode);\n        await this.#unbindUnguarded(fileSystemUISourceCode);\n      }\n\n      await this.#innerAddBinding(networkUISourceCode, fileSystemUISourceCode);\n    });\n  }\n\n  #getOrCreateMutex(networkUISourceCode: Workspace.UISourceCode.UISourceCode): Common.Mutex.Mutex {\n    let mutex = this.#sourceCodeToBindProcessMutex.get(networkUISourceCode);\n    if (!mutex) {\n      mutex = new Common.Mutex.Mutex();\n      this.#sourceCodeToBindProcessMutex.set(networkUISourceCode, mutex);\n    }\n    return mutex;\n  }\n\n  async #innerAddBinding(\n      networkUISourceCode: Workspace.UISourceCode.UISourceCode,\n      fileSystemUISourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const binding = new PersistenceBinding(networkUISourceCode, fileSystemUISourceCode);\n    this.#bindings.set(networkUISourceCode, binding);\n    this.#bindings.set(fileSystemUISourceCode, binding);\n    await PersistenceImpl.instance().addBinding(binding);\n    const uiSourceCodeOfTruth =\n        this.#savingForOverrides.has(networkUISourceCode) ? networkUISourceCode : fileSystemUISourceCode;\n    const contentDataOrError = await uiSourceCodeOfTruth.requestContentData();\n    const {content, isEncoded} = TextUtils.ContentData.ContentData.asDeferredContent(contentDataOrError);\n    PersistenceImpl.instance().syncContent(uiSourceCodeOfTruth, content || '', isEncoded);\n  }\n\n  private onUISourceCodeWorkingCopyCommitted(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    void this.saveUISourceCodeForOverrides(uiSourceCode);\n    this.updateInterceptionPatterns();\n  }\n\n  isActiveHeaderOverrides(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    // If this overridden file is actively in use at the moment.\n    if (!this.#enabledSetting.get()) {\n      return false;\n    }\n    return uiSourceCode.url().endsWith(HEADERS_FILENAME) &&\n        this.hasMatchingNetworkUISourceCodeForHeaderOverridesFile(uiSourceCode);\n  }\n\n  isUISourceCodeOverridable(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return uiSourceCode.project().type() === Workspace.Workspace.projectTypes.Network &&\n        !NetworkPersistenceManager.isForbiddenNetworkUrl(uiSourceCode.url());\n  }\n\n  #isUISourceCodeAlreadyOverridden(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return this.#bindings.has(uiSourceCode) || this.#savingForOverrides.has(uiSourceCode);\n  }\n\n  #shouldPromptSaveForOverridesDialog(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return this.isUISourceCodeOverridable(uiSourceCode) && !this.#isUISourceCodeAlreadyOverridden(uiSourceCode) &&\n        !this.#active && !this.#project;\n  }\n\n  #canSaveUISourceCodeForOverrides(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return this.#active && this.isUISourceCodeOverridable(uiSourceCode) &&\n        !this.#isUISourceCodeAlreadyOverridden(uiSourceCode);\n  }\n\n  async setupAndStartLocalOverrides(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<boolean> {\n    // No overrides folder, set it up\n    if (this.#shouldPromptSaveForOverridesDialog(uiSourceCode)) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideContentContextMenuSetup);\n      await new Promise<void>(\n          resolve => UI.InspectorView.InspectorView.instance().displaySelectOverrideFolderInfobar(resolve));\n      await IsolatedFileSystemManager.instance().addFileSystem('overrides');\n    }\n\n    if (!this.project()) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideContentContextMenuAbandonSetup);\n      return false;\n    }\n\n    // Already have an overrides folder, enable setting\n    if (!this.#enabledSetting.get()) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideContentContextMenuActivateDisabled);\n      this.#enabledSetting.set(true);\n      await this.once(Events.LOCAL_OVERRIDES_PROJECT_UPDATED);\n    }\n\n    // Save new file\n    if (!this.#isUISourceCodeAlreadyOverridden(uiSourceCode)) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideContentContextMenuSaveNewFile);\n      uiSourceCode.commitWorkingCopy();\n      await this.saveUISourceCodeForOverrides(uiSourceCode);\n    } else {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideContentContextMenuOpenExistingFile);\n    }\n\n    return true;\n  }\n\n  async saveUISourceCodeForOverrides(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (!this.#canSaveUISourceCodeForOverrides(uiSourceCode)) {\n      return;\n    }\n    this.#savingForOverrides.add(uiSourceCode);\n    let encodedPath = this.encodedPathFromUrl(uiSourceCode.url());\n    const contentDataOrError = await uiSourceCode.requestContentData();\n    const {content, isEncoded} = TextUtils.ContentData.ContentData.asDeferredContent(contentDataOrError);\n    const lastIndexOfSlash = encodedPath.lastIndexOf('/');\n    const encodedFileName = Common.ParsedURL.ParsedURL.substring(encodedPath, lastIndexOfSlash + 1);\n    const rawFileName = Common.ParsedURL.ParsedURL.encodedPathToRawPathString(encodedFileName);\n    encodedPath = Common.ParsedURL.ParsedURL.substr(encodedPath, 0, lastIndexOfSlash);\n    if (this.#project) {\n      await this.#project.createFile(encodedPath, rawFileName, content ?? '', isEncoded);\n    }\n    this.fileCreatedForTest(encodedPath, rawFileName);\n    this.#savingForOverrides.delete(uiSourceCode);\n  }\n\n  private fileCreatedForTest(_path: Platform.DevToolsPath.EncodedPathString, _fileName: string): void {\n  }\n\n  private patternForFileSystemUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    const relativePathParts = FileSystemWorkspaceBinding.relativePath(uiSourceCode);\n    if (relativePathParts.length < 2) {\n      return '';\n    }\n    if (relativePathParts[1] === 'longurls' && relativePathParts.length !== 2) {\n      if (relativePathParts[0] === 'file:') {\n        return 'file:///*';\n      }\n      return 'http?://' + relativePathParts[0] + '/*';\n    }\n    // 'relativePath' returns an encoded string of the local file name which itself is already encoded.\n    // We therefore need to decode twice to get the raw path.\n    const path = this.decodeLocalPathToUrlPath(this.decodeLocalPathToUrlPath(relativePathParts.join('/')));\n    if (path.startsWith('file:/')) {\n      // The file path of the override file looks like '/path/to/overrides/file:/path/to/local/files/index.html'.\n      // The decoded relative path then starts with 'file:/' which we modify to start with 'file:///' instead.\n      return 'file:///' + path.substring('file:/'.length);\n    }\n    return 'http?://' + path;\n  }\n\n  // 'chrome://'-URLs and the Chrome Web Store are privileged URLs. We don't want users\n  // to be able to override those. Ideally we'd have a similar check in the backend,\n  // because the fix here has no effect on non-DevTools CDP clients.\n  private isForbiddenFileUrl(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    const relativePathParts = FileSystemWorkspaceBinding.relativePath(uiSourceCode);\n    // Decode twice to handle paths generated on Windows OS.\n    const host = this.decodeLocalPathToUrlPath(this.decodeLocalPathToUrlPath(relativePathParts[0] || ''));\n    return host === 'chrome:' || forbiddenUrls.includes(host);\n  }\n\n  static isForbiddenNetworkUrl(urlString: Platform.DevToolsPath.UrlString): boolean {\n    const url = Common.ParsedURL.ParsedURL.fromString(urlString);\n    if (!url) {\n      return false;\n    }\n    return url.scheme === 'chrome' || forbiddenUrls.includes(url.host);\n  }\n\n  private async onUISourceCodeAdded(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    await this.networkUISourceCodeAdded(uiSourceCode);\n    await this.filesystemUISourceCodeAdded(uiSourceCode);\n  }\n\n  private canHandleNetworkUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return this.#active && !Common.ParsedURL.schemeIs(uiSourceCode.url(), 'snippet:');\n  }\n\n  private async networkUISourceCodeAdded(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (uiSourceCode.project().type() !== Workspace.Workspace.projectTypes.Network ||\n        !this.canHandleNetworkUISourceCode(uiSourceCode)) {\n      return;\n    }\n    const url = Common.ParsedURL.ParsedURL.urlWithoutHash(uiSourceCode.url()) as Platform.DevToolsPath.UrlString;\n    this.#networkUISourceCodeForEncodedPath.set(this.encodedPathFromUrl(url), uiSourceCode);\n\n    const project = this.#project as FileSystem;\n    const fileSystemUISourceCode = project.uiSourceCodeForURL(this.fileUrlFromNetworkUrl(url));\n    if (fileSystemUISourceCode) {\n      await this.#bind(uiSourceCode, fileSystemUISourceCode);\n    }\n    this.#maybeDispatchRequestsForHeaderOverridesFileChanged(uiSourceCode);\n  }\n\n  private async filesystemUISourceCodeAdded(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (!this.#active || uiSourceCode.project() !== this.#project) {\n      return;\n    }\n    this.updateInterceptionPatterns();\n\n    const relativePath = FileSystemWorkspaceBinding.relativePath(uiSourceCode);\n    const networkUISourceCode =\n        this.#networkUISourceCodeForEncodedPath.get(Common.ParsedURL.ParsedURL.join(relativePath, '/'));\n    if (networkUISourceCode) {\n      await this.#bind(networkUISourceCode, uiSourceCode);\n    }\n  }\n\n  async #getHeaderOverridesFromUiSourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Promise<HeaderOverride[]> {\n    const contentData =\n        await uiSourceCode.requestContentData().then(TextUtils.ContentData.ContentData.contentDataOrEmpty);\n    const content = contentData.text || '[]';\n    let headerOverrides: HeaderOverride[] = [];\n    try {\n      headerOverrides = JSON.parse(content) as HeaderOverride[];\n      if (!headerOverrides.every(isHeaderOverride)) {\n        throw new Error('Type mismatch after parsing');\n      }\n    } catch {\n      console.error('Failed to parse', uiSourceCode.url(), 'for locally overriding headers.');\n      return [];\n    }\n    return headerOverrides;\n  }\n\n  #doubleDecodeEncodedPathString(relativePath: Platform.DevToolsPath.EncodedPathString):\n      {singlyDecodedPath: Platform.DevToolsPath.EncodedPathString, decodedPath: Platform.DevToolsPath.RawPathString} {\n    // 'relativePath' is an encoded string of a local file path, which is itself already encoded.\n    // e.g. relativePath: 'www.example.com%253A443/path/.headers'\n    // singlyDecodedPath: 'www.example.com%3A443/path/.headers'\n    // decodedPath: 'www.example.com:443/path/.headers'\n    const singlyDecodedPath = this.decodeLocalPathToUrlPath(relativePath) as Platform.DevToolsPath.EncodedPathString;\n    const decodedPath = this.decodeLocalPathToUrlPath(singlyDecodedPath) as Platform.DevToolsPath.RawPathString;\n    return {singlyDecodedPath, decodedPath};\n  }\n\n  async generateHeaderPatterns(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<{\n    headerPatterns: Set<string>,\n    path: Platform.DevToolsPath.EncodedPathString,\n    overridesWithRegex: HeaderOverrideWithRegex[],\n  }> {\n    const headerOverrides = await this.#getHeaderOverridesFromUiSourceCode(uiSourceCode);\n    const relativePathParts = FileSystemWorkspaceBinding.relativePath(uiSourceCode);\n    const relativePath = Common.ParsedURL.ParsedURL.slice(\n        Common.ParsedURL.ParsedURL.join(relativePathParts, '/'), 0, -HEADERS_FILENAME.length);\n    const {singlyDecodedPath, decodedPath} = this.#doubleDecodeEncodedPathString(relativePath);\n    let patterns;\n\n    // Long URLS are encoded as `[domain]/longurls/[hashed path]` by `rawPathFromUrl()`.\n    if (relativePathParts.length > 2 && relativePathParts[1] === 'longurls' && headerOverrides.length) {\n      patterns = this.#generateHeaderPatternsForLongUrl(decodedPath, headerOverrides, relativePathParts[0]);\n    } else if (decodedPath.startsWith('file:/')) {\n      patterns = this.#generateHeaderPatternsForFileUrl(\n          Common.ParsedURL.ParsedURL.substring(decodedPath, 'file:/'.length), headerOverrides);\n    } else {\n      patterns = this.#generateHeaderPatternsForHttpUrl(decodedPath, headerOverrides);\n    }\n    return {...patterns, path: singlyDecodedPath};\n  }\n\n  #generateHeaderPatternsForHttpUrl(\n      decodedPath: Platform.DevToolsPath.RawPathString, headerOverrides: HeaderOverride[]): {\n    headerPatterns: Set<string>,\n    overridesWithRegex: HeaderOverrideWithRegex[],\n  } {\n    const headerPatterns = new Set<string>();\n    const overridesWithRegex: HeaderOverrideWithRegex[] = [];\n    for (const headerOverride of headerOverrides) {\n      headerPatterns.add('http?://' + decodedPath + headerOverride.applyTo);\n\n      // Make 'global' overrides apply to file URLs as well.\n      if (decodedPath === '') {\n        headerPatterns.add('file:///' + headerOverride.applyTo);\n        overridesWithRegex.push({\n          applyToRegex: new RegExp('^file:\\/\\/\\/' + escapeRegex(decodedPath + headerOverride.applyTo) + '$'),\n          headers: headerOverride.headers,\n        });\n      }\n\n      // Most servers have the concept of a \"directory index\", which is a\n      // default resource name for a request targeting a \"directory\", e. g.\n      // requesting \"example.com/path/\" would result in the same response as\n      // requesting \"example.com/path/index.html\". To match this behavior we\n      // generate an additional pattern without \"index.html\" as the longer\n      // pattern would not match against a shorter request.\n      const {head, tail} = extractDirectoryIndex(headerOverride.applyTo);\n      if (tail) {\n        headerPatterns.add('http?://' + decodedPath + head);\n\n        overridesWithRegex.push({\n          applyToRegex: new RegExp(`^${escapeRegex(decodedPath + head)}(${escapeRegex(tail)})?$`),\n          headers: headerOverride.headers,\n        });\n      } else {\n        overridesWithRegex.push({\n          applyToRegex: new RegExp(`^${escapeRegex(decodedPath + headerOverride.applyTo)}$`),\n          headers: headerOverride.headers,\n        });\n      }\n    }\n    return {headerPatterns, overridesWithRegex};\n  }\n\n  #generateHeaderPatternsForFileUrl(\n      decodedPath: Platform.DevToolsPath.RawPathString, headerOverrides: HeaderOverride[]): {\n    headerPatterns: Set<string>,\n    overridesWithRegex: HeaderOverrideWithRegex[],\n  } {\n    const headerPatterns = new Set<string>();\n    const overridesWithRegex: HeaderOverrideWithRegex[] = [];\n    for (const headerOverride of headerOverrides) {\n      headerPatterns.add('file:///' + decodedPath + headerOverride.applyTo);\n      overridesWithRegex.push({\n        applyToRegex: new RegExp(`^file:\\/${escapeRegex(decodedPath + headerOverride.applyTo)}$`),\n        headers: headerOverride.headers,\n      });\n    }\n    return {headerPatterns, overridesWithRegex};\n  }\n\n  // For very long URLs, part of the URL is hashed for local overrides, so that\n  // the URL appears shorter. This special case is handled here.\n  #generateHeaderPatternsForLongUrl(\n      decodedPath: Platform.DevToolsPath.RawPathString, headerOverrides: HeaderOverride[],\n      relativePathPart: Platform.DevToolsPath.EncodedPathString): {\n    headerPatterns: Set<string>,\n    overridesWithRegex: HeaderOverrideWithRegex[],\n  } {\n    const headerPatterns = new Set<string>();\n\n    // Use pattern with wildcard => every request which matches will be paused\n    // and checked whether its hashed URL matches a stored local override in\n    // `maybeMergeHeadersForPathSegment()`.\n    let {decodedPath: decodedPattern} =\n        this.#doubleDecodeEncodedPathString(Common.ParsedURL.ParsedURL.concatenate(relativePathPart, '/*'));\n\n    const isFileUrl = decodedPath.startsWith('file:/');\n    if (isFileUrl) {\n      decodedPath = Common.ParsedURL.ParsedURL.substring(decodedPath, 'file:/'.length);\n      decodedPattern = Common.ParsedURL.ParsedURL.substring(decodedPattern, 'file:/'.length);\n    }\n    headerPatterns.add((isFileUrl ? 'file:///' : 'http?://') + decodedPattern);\n\n    const overridesWithRegex: HeaderOverrideWithRegex[] = [];\n    for (const headerOverride of headerOverrides) {\n      overridesWithRegex.push({\n        applyToRegex: new RegExp(`^${isFileUrl ? 'file:\\/' : ''}${escapeRegex(decodedPath + headerOverride.applyTo)}$`),\n        headers: headerOverride.headers,\n      });\n    }\n    return {headerPatterns, overridesWithRegex};\n  }\n\n  async updateInterceptionPatternsForTests(): Promise<void> {\n    await this.#innerUpdateInterceptionPatterns();\n  }\n\n  updateInterceptionPatterns(): void {\n    void this.#updateInterceptionThrottler.schedule(this.#innerUpdateInterceptionPatterns.bind(this));\n  }\n\n  async #innerUpdateInterceptionPatterns(): Promise<void> {\n    this.#headerOverridesMap.clear();\n    if (!this.#active || !this.#project) {\n      return await SDK.NetworkManager.MultitargetNetworkManager.instance().setInterceptionHandlerForPatterns(\n          [], this.#interceptionHandlerBound);\n    }\n    let patterns = new Set<string>();\n    for (const uiSourceCode of this.#project.uiSourceCodes()) {\n      if (this.isForbiddenFileUrl(uiSourceCode)) {\n        continue;\n      }\n      const pattern = this.patternForFileSystemUISourceCode(uiSourceCode);\n      if (uiSourceCode.name() === HEADERS_FILENAME) {\n        const {headerPatterns, path, overridesWithRegex} = await this.generateHeaderPatterns(uiSourceCode);\n        if (headerPatterns.size > 0) {\n          patterns = new Set([...patterns, ...headerPatterns]);\n          this.#headerOverridesMap.set(path, overridesWithRegex);\n        }\n      } else {\n        patterns.add(pattern);\n      }\n      // Most servers have the concept of a \"directory index\", which is a\n      // default resource name for a request targeting a \"directory\", e. g.\n      // requesting \"example.com/path/\" would result in the same response as\n      // requesting \"example.com/path/index.html\". To match this behavior we\n      // generate an additional pattern without \"index.html\" as the longer\n      // pattern would not match against a shorter request.\n      const {head, tail} = extractDirectoryIndex(pattern);\n      if (tail) {\n        patterns.add(head);\n      }\n    }\n\n    return await SDK.NetworkManager.MultitargetNetworkManager.instance().setInterceptionHandlerForPatterns(\n        Array.from(patterns).map(\n            pattern => ({urlPattern: pattern, requestStage: Protocol.Fetch.RequestStage.Response})),\n        this.#interceptionHandlerBound);\n  }\n\n  private async onUISourceCodeRemoved(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    await this.networkUISourceCodeRemoved(uiSourceCode);\n    await this.filesystemUISourceCodeRemoved(uiSourceCode);\n  }\n\n  private async networkUISourceCodeRemoved(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.Network) {\n      await this.#unbind(uiSourceCode);\n      this.#sourceCodeToBindProcessMutex.delete(uiSourceCode);\n      this.#networkUISourceCodeForEncodedPath.delete(this.encodedPathFromUrl(uiSourceCode.url()));\n    }\n    this.#maybeDispatchRequestsForHeaderOverridesFileChanged(uiSourceCode);\n  }\n\n  // We consider a header override file as active, if it matches (= potentially contains\n  // header overrides for) some of the current page's requests.\n  // The editors (in the Sources panel) of active header override files should have an\n  // emphasized icon. For regular overrides we use bindings to determine which editors\n  // are active. For header overrides we do not have a 1:1 matching between the file\n  // defining the header overrides and the request matching the override definition,\n  // because a single '.headers' file can contain header overrides for multiple requests.\n  // For each request, we therefore look whether one or more matching header override\n  // files exist, and if they do, for each of them we emit an event, which causes\n  // potential matching editors to update their icon.\n  #maybeDispatchRequestsForHeaderOverridesFileChanged(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (!this.#project) {\n      return;\n    }\n    const project = this.#project as FileSystem;\n    const fileUrl = this.fileUrlFromNetworkUrl(uiSourceCode.url());\n\n    for (let i = project.fileSystemPath().length; i < fileUrl.length; i++) {\n      if (fileUrl[i] !== '/') {\n        continue;\n      }\n      const headersFilePath =\n          Common.ParsedURL.ParsedURL.concatenate(Common.ParsedURL.ParsedURL.substring(fileUrl, 0, i + 1), '.headers');\n      const headersFileUiSourceCode = project.uiSourceCodeForURL(headersFilePath);\n      if (!headersFileUiSourceCode) {\n        continue;\n      }\n      this.#headerOverridesForEventDispatch.add(headersFileUiSourceCode);\n      void this.#eventDispatchThrottler.schedule(this.#dispatchRequestsForHeaderOverridesFileChanged.bind(this));\n    }\n  }\n\n  #dispatchRequestsForHeaderOverridesFileChanged(): Promise<void> {\n    for (const headersFileUiSourceCode of this.#headerOverridesForEventDispatch) {\n      this.dispatchEventToListeners(Events.REQUEST_FOR_HEADER_OVERRIDES_FILE_CHANGED, headersFileUiSourceCode);\n    }\n    this.#headerOverridesForEventDispatch.clear();\n    return Promise.resolve();\n  }\n\n  hasMatchingNetworkUISourceCodeForHeaderOverridesFile(headersFile: Workspace.UISourceCode.UISourceCode): boolean {\n    const relativePathParts = FileSystemWorkspaceBinding.relativePath(headersFile);\n    const relativePath = Common.ParsedURL.ParsedURL.slice(\n        Common.ParsedURL.ParsedURL.join(relativePathParts, '/'), 0, -HEADERS_FILENAME.length);\n\n    for (const encodedNetworkPath of this.#networkUISourceCodeForEncodedPath.keys()) {\n      if (encodedNetworkPath.startsWith(relativePath)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private async filesystemUISourceCodeRemoved(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (uiSourceCode.project() !== this.#project) {\n      return;\n    }\n    this.updateInterceptionPatterns();\n    this.#originalResponseContentPromises.delete(uiSourceCode);\n    await this.#unbind(uiSourceCode);\n  }\n\n  async setProject(project: Workspace.Workspace.Project|null): Promise<void> {\n    if (project === this.#project) {\n      return;\n    }\n\n    if (this.#project) {\n      await Promise.all(\n          [...this.#project.uiSourceCodes()].map(uiSourceCode => this.filesystemUISourceCodeRemoved(uiSourceCode)));\n    }\n\n    this.#project = project;\n\n    if (this.#project) {\n      await Promise.all(\n          [...this.#project.uiSourceCodes()].map(uiSourceCode => this.filesystemUISourceCodeAdded(uiSourceCode)));\n    }\n\n    await this.updateActiveProject();\n    this.dispatchEventToListeners(Events.PROJECT_CHANGED, this.#project);\n  }\n\n  private async onProjectAdded(project: Workspace.Workspace.Project): Promise<void> {\n    if (project.type() !== Workspace.Workspace.projectTypes.FileSystem ||\n        FileSystemWorkspaceBinding.fileSystemType(project) !== 'overrides') {\n      return;\n    }\n    const fileSystemPath = FileSystemWorkspaceBinding.fileSystemPath(project.id() as Platform.DevToolsPath.UrlString);\n    if (!fileSystemPath) {\n      return;\n    }\n    if (this.#project) {\n      this.#project.remove();\n    }\n\n    await this.setProject(project);\n  }\n\n  private async onProjectRemoved(project: Workspace.Workspace.Project): Promise<void> {\n    for (const uiSourceCode of project.uiSourceCodes()) {\n      await this.networkUISourceCodeRemoved(uiSourceCode);\n    }\n    if (project === this.#project) {\n      await this.setProject(null);\n    }\n  }\n\n  mergeHeaders(baseHeaders: Protocol.Fetch.HeaderEntry[], overrideHeaders: Protocol.Fetch.HeaderEntry[]):\n      Protocol.Fetch.HeaderEntry[] {\n    const headerMap = new Platform.MapUtilities.Multimap<string, string>();\n    for (const {name, value} of overrideHeaders) {\n      if (name.toLowerCase() !== 'set-cookie') {\n        headerMap.set(name.toLowerCase(), value);\n      }\n    }\n\n    const overriddenHeaderNames = new Set(headerMap.keysArray());\n    for (const {name, value} of baseHeaders) {\n      const lowerCaseName = name.toLowerCase();\n      if (!overriddenHeaderNames.has(lowerCaseName) && lowerCaseName !== 'set-cookie') {\n        headerMap.set(lowerCaseName, value);\n      }\n    }\n\n    const result: Protocol.Fetch.HeaderEntry[] = [];\n    for (const headerName of headerMap.keysArray()) {\n      for (const headerValue of headerMap.get(headerName)) {\n        result.push({name: headerName, value: headerValue});\n      }\n    }\n\n    const originalSetCookieHeaders = baseHeaders.filter(header => header.name.toLowerCase() === 'set-cookie') || [];\n    const setCookieHeadersFromOverrides = overrideHeaders.filter(header => header.name.toLowerCase() === 'set-cookie');\n    const mergedHeaders = SDK.NetworkManager.InterceptedRequest.mergeSetCookieHeaders(\n        originalSetCookieHeaders, setCookieHeadersFromOverrides);\n    result.push(...mergedHeaders);\n\n    return result;\n  }\n\n  #maybeMergeHeadersForPathSegment(\n      path: Platform.DevToolsPath.EncodedPathString, requestUrl: Platform.DevToolsPath.UrlString,\n      headers: Protocol.Fetch.HeaderEntry[]): Protocol.Fetch.HeaderEntry[] {\n    const headerOverrides = this.#headerOverridesMap.get(path) || [];\n    for (const headerOverride of headerOverrides) {\n      const requestUrlWithLongUrlReplacement = this.decodeLocalPathToUrlPath(this.rawPathFromUrl(requestUrl));\n      if (headerOverride.applyToRegex.test(requestUrlWithLongUrlReplacement)) {\n        headers = this.mergeHeaders(headers, headerOverride.headers);\n      }\n    }\n    return headers;\n  }\n\n  handleHeaderInterception(interceptedRequest: SDK.NetworkManager.InterceptedRequest): Protocol.Fetch.HeaderEntry[] {\n    let result: Protocol.Fetch.HeaderEntry[] = interceptedRequest.responseHeaders || [];\n    // 'rawPathFromUrl()''s return value is already (singly-)encoded, so we can\n    // treat it as an 'EncodedPathString' here.\n    const urlSegments =\n        this.rawPathFromUrl(interceptedRequest.request.url as Platform.DevToolsPath.UrlString).split('/') as\n        Platform.DevToolsPath.EncodedPathString[];\n    // Traverse the hierarchy of overrides from the most general to the most\n    // specific. Check with empty string first to match overrides applying to\n    // all domains.\n    // e.g. '', 'www.example.com/', 'www.example.com/path/', ...\n    let path = Platform.DevToolsPath.EmptyEncodedPathString;\n    result = this.#maybeMergeHeadersForPathSegment(\n        path, interceptedRequest.request.url as Platform.DevToolsPath.UrlString, result);\n    for (const segment of urlSegments) {\n      path = Common.ParsedURL.ParsedURL.concatenate(path, segment, '/');\n      result = this.#maybeMergeHeadersForPathSegment(\n          path, interceptedRequest.request.url as Platform.DevToolsPath.UrlString, result);\n    }\n    return result;\n  }\n\n  private async interceptionHandler(interceptedRequest: SDK.NetworkManager.InterceptedRequest): Promise<void> {\n    const method = interceptedRequest.request.method;\n    if (!this.#active || (method === 'OPTIONS')) {\n      return;\n    }\n    const proj = this.#project as FileSystem;\n    const path = this.fileUrlFromNetworkUrl(interceptedRequest.request.url as Platform.DevToolsPath.UrlString);\n    const fileSystemUISourceCode = proj.uiSourceCodeForURL(path);\n    let responseHeaders = this.handleHeaderInterception(interceptedRequest);\n    if (!fileSystemUISourceCode && !responseHeaders.length) {\n      return;\n    }\n    if (!responseHeaders.length) {\n      responseHeaders = interceptedRequest.responseHeaders || [];\n    }\n\n    let {mimeType} = interceptedRequest.getMimeTypeAndCharset();\n    if (!mimeType) {\n      const expectedResourceType =\n          Common.ResourceType.resourceTypes[interceptedRequest.resourceType] || Common.ResourceType.resourceTypes.Other;\n      mimeType = fileSystemUISourceCode?.mimeType() || '';\n      if (Common.ResourceType.ResourceType.fromMimeType(mimeType) !== expectedResourceType) {\n        mimeType = expectedResourceType.canonicalMimeType();\n      }\n    }\n\n    if (fileSystemUISourceCode) {\n      this.#originalResponseContentPromises.set(\n          fileSystemUISourceCode, interceptedRequest.responseBody().then(response => {\n            if (TextUtils.ContentData.ContentData.isError(response) || !response.isTextContent) {\n              return null;\n            }\n            return response.text;\n          }));\n\n      const project = fileSystemUISourceCode.project() as FileSystem;\n      const blob = await project.requestFileBlob(fileSystemUISourceCode);\n      if (blob) {\n        void interceptedRequest.continueRequestWithContent(\n            new Blob([blob], {type: mimeType}), /* encoded */ false, responseHeaders, /* isBodyOverridden */ true);\n      }\n    } else if (interceptedRequest.isRedirect()) {\n      void interceptedRequest.continueRequestWithContent(\n          new Blob([], {type: mimeType}), /* encoded */ true, responseHeaders, /* isBodyOverridden */ false);\n    } else {\n      const responseBody = await interceptedRequest.responseBody();\n      if (!TextUtils.ContentData.ContentData.isError(responseBody)) {\n        const content = responseBody.isTextContent ? responseBody.text : responseBody.base64;\n        void interceptedRequest.continueRequestWithContent(\n            new Blob([content], {type: mimeType}), /* encoded */ !responseBody.isTextContent, responseHeaders,\n            /* isBodyOverridden */ false);\n      }\n    }\n  }\n}\n\nconst RESERVED_FILENAMES = new Set<string>([\n  'con',  'prn',  'aux',  'nul',  'com1', 'com2', 'com3', 'com4', 'com5', 'com6', 'com7',\n  'com8', 'com9', 'lpt1', 'lpt2', 'lpt3', 'lpt4', 'lpt5', 'lpt6', 'lpt7', 'lpt8', 'lpt9',\n]);\n\nexport const HEADERS_FILENAME = '.headers';\n\nexport const enum Events {\n  PROJECT_CHANGED = 'ProjectChanged',\n  REQUEST_FOR_HEADER_OVERRIDES_FILE_CHANGED = 'RequestsForHeaderOverridesFileChanged',\n  LOCAL_OVERRIDES_PROJECT_UPDATED = 'LocalOverridesProjectUpdated',\n}\n\nexport interface EventTypes {\n  [Events.PROJECT_CHANGED]: Workspace.Workspace.Project|null;\n  [Events.REQUEST_FOR_HEADER_OVERRIDES_FILE_CHANGED]: Workspace.UISourceCode.UISourceCode;\n  [Events.LOCAL_OVERRIDES_PROJECT_UPDATED]: boolean;\n}\n\nexport interface HeaderOverride {\n  applyTo: string;\n  headers: Protocol.Fetch.HeaderEntry[];\n}\n\ninterface HeaderOverrideWithRegex {\n  applyToRegex: RegExp;\n  headers: Protocol.Fetch.HeaderEntry[];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isHeaderOverride(arg: any): arg is HeaderOverride {\n  if (!(arg && typeof arg.applyTo === 'string' && arg.headers?.length && Array.isArray(arg.headers))) {\n    return false;\n  }\n  return arg.headers.every(\n      (header: Protocol.Fetch.HeaderEntry) => typeof header.name === 'string' && typeof header.value === 'string');\n}\n\nexport function escapeRegex(pattern: string): string {\n  return Platform.StringUtilities.escapeCharacters(pattern, '[]{}()\\\\.^$+|-,?').replaceAll('*', '.*');\n}\n\nexport function extractDirectoryIndex(pattern: string): {head: string, tail?: string} {\n  const lastSlash = pattern.lastIndexOf('/');\n  const tail = lastSlash >= 0 ? pattern.slice(lastSlash + 1) : pattern;\n  const head = lastSlash >= 0 ? pattern.slice(0, lastSlash + 1) : '';\n  const regex = new RegExp('^' + escapeRegex(tail) + '$');\n  if (tail !== '*' && (regex.test('index.html') || regex.test('index.htm') || regex.test('index.php'))) {\n    return {head, tail};\n  }\n  return {head: pattern};\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as ProjectSettings from '../project_settings/project_settings.js';\n\n/**\n * Description and state of the automatic file system.\n */\nexport interface AutomaticFileSystem {\n  root: Platform.DevToolsPath.RawPathString;\n  uuid: string;\n  state: 'disconnected'|'connecting'|'connected';\n}\n\n/**\n * Indicates the availability of the Automatic Workspace Folders feature.\n *\n * `'available'` means that the feature is enabled and the project settings\n * are also available. It doesn't indicate whether or not the page is actually\n * providing a `com.chrome.devtools.json` or not, and whether or not that file\n * (if it exists) provides workspace information.\n */\nexport type AutomaticFileSystemAvailability = 'available'|'unavailable';\n\nlet automaticFileSystemManagerInstance: AutomaticFileSystemManager|undefined;\n\n/**\n * Automatically connects and disconnects workspace folders.\n *\n * @see http://go/chrome-devtools:automatic-workspace-folders-design\n */\nexport class AutomaticFileSystemManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #automaticFileSystem: AutomaticFileSystem|null;\n  #availability: AutomaticFileSystemAvailability = 'unavailable';\n  #inspectorFrontendHost: Host.InspectorFrontendHostAPI.InspectorFrontendHostAPI;\n  #projectSettingsModel: ProjectSettings.ProjectSettingsModel.ProjectSettingsModel;\n\n  /**\n   * Yields the current `AutomaticFileSystem` (if any).\n   *\n   * @returns the current automatic file system or `null`.\n   */\n  get automaticFileSystem(): Readonly<AutomaticFileSystem>|null {\n    return this.#automaticFileSystem;\n  }\n\n  /**\n   * Yields the availability of the Automatic Workspace Folders feature.\n   *\n   * `'available'` means that the feature is enabled and the project settings\n   * are also available. It doesn't indicate whether or not the page is actually\n   * providing a `com.chrome.devtools.json` or not, and whether or not that file\n   * (if it exists) provides workspace information.\n   *\n   * @returns `'available'` if the feature is available and the project settings\n   *         feature is also available, otherwise `'unavailable'`.\n   */\n  get availability(): AutomaticFileSystemAvailability {\n    return this.#availability;\n  }\n\n  /**\n   * @internal\n   */\n  private constructor(\n      inspectorFrontendHost: Host.InspectorFrontendHostAPI.InspectorFrontendHostAPI,\n      projectSettingsModel: ProjectSettings.ProjectSettingsModel.ProjectSettingsModel) {\n    super();\n    this.#automaticFileSystem = null;\n    this.#inspectorFrontendHost = inspectorFrontendHost;\n    this.#projectSettingsModel = projectSettingsModel;\n    this.#inspectorFrontendHost.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.FileSystemRemoved, this.#fileSystemRemoved, this);\n    this.#projectSettingsModel.addEventListener(\n        ProjectSettings.ProjectSettingsModel.Events.AVAILABILITY_CHANGED, this.#availabilityChanged, this);\n    this.#availabilityChanged({data: this.#projectSettingsModel.availability});\n    this.#projectSettingsModel.addEventListener(\n        ProjectSettings.ProjectSettingsModel.Events.PROJECT_SETTINGS_CHANGED, this.#projectSettingsChanged, this);\n    this.#projectSettingsChanged({data: this.#projectSettingsModel.projectSettings});\n  }\n\n  /**\n   * Yields the `AutomaticFileSystemManager` singleton.\n   *\n   * @returns the singleton.\n   */\n  static instance({forceNew, inspectorFrontendHost, projectSettingsModel}: {\n    forceNew: boolean|null,\n    inspectorFrontendHost: Host.InspectorFrontendHostAPI.InspectorFrontendHostAPI|null,\n    projectSettingsModel: ProjectSettings.ProjectSettingsModel.ProjectSettingsModel|null,\n  } = {forceNew: false, inspectorFrontendHost: null, projectSettingsModel: null}): AutomaticFileSystemManager {\n    if (!automaticFileSystemManagerInstance || forceNew) {\n      if (!inspectorFrontendHost || !projectSettingsModel) {\n        throw new Error(\n            'Unable to create AutomaticFileSystemManager: ' +\n            'inspectorFrontendHost, and projectSettingsModel must be provided');\n      }\n      automaticFileSystemManagerInstance = new AutomaticFileSystemManager(\n          inspectorFrontendHost,\n          projectSettingsModel,\n      );\n    }\n    return automaticFileSystemManagerInstance;\n  }\n\n  /**\n   * Clears the `AutomaticFileSystemManager` singleton (if any);\n   */\n  static removeInstance(): void {\n    if (automaticFileSystemManagerInstance) {\n      automaticFileSystemManagerInstance.#dispose();\n      automaticFileSystemManagerInstance = undefined;\n    }\n  }\n\n  #dispose(): void {\n    this.#inspectorFrontendHost.events.removeEventListener(\n        Host.InspectorFrontendHostAPI.Events.FileSystemRemoved, this.#fileSystemRemoved, this);\n    this.#projectSettingsModel.removeEventListener(\n        ProjectSettings.ProjectSettingsModel.Events.AVAILABILITY_CHANGED, this.#availabilityChanged, this);\n    this.#projectSettingsModel.removeEventListener(\n        ProjectSettings.ProjectSettingsModel.Events.PROJECT_SETTINGS_CHANGED, this.#projectSettingsChanged, this);\n  }\n\n  #availabilityChanged(\n      event: Common.EventTarget.EventTargetEvent<ProjectSettings.ProjectSettingsModel.ProjectSettingsAvailability>):\n      void {\n    const availability = event.data;\n    if (this.#availability !== availability) {\n      this.#availability = availability;\n      this.dispatchEventToListeners(Events.AVAILABILITY_CHANGED, this.#availability);\n    }\n  }\n\n  #fileSystemRemoved(event: Common.EventTarget.EventTargetEvent<Platform.DevToolsPath.RawPathString>): void {\n    if (this.#automaticFileSystem === null) {\n      return;\n    }\n    if (this.#automaticFileSystem.root === event.data) {\n      this.#automaticFileSystem = Object.freeze({\n        ...this.#automaticFileSystem,\n        state: 'disconnected',\n      });\n      this.dispatchEventToListeners(Events.AUTOMATIC_FILE_SYSTEM_CHANGED, this.#automaticFileSystem);\n    }\n  }\n\n  #projectSettingsChanged(\n      event: Common.EventTarget.EventTargetEvent<ProjectSettings.ProjectSettingsModel.ProjectSettings>): void {\n    const projectSettings = event.data;\n    let automaticFileSystem = this.#automaticFileSystem;\n    if (projectSettings.workspace) {\n      const {root, uuid} = projectSettings.workspace;\n      if (automaticFileSystem === null || automaticFileSystem.root !== root || automaticFileSystem.uuid !== uuid) {\n        automaticFileSystem = Object.freeze({root, uuid, state: 'disconnected'});\n      }\n    } else if (automaticFileSystem !== null) {\n      automaticFileSystem = null;\n    }\n\n    if (this.#automaticFileSystem !== automaticFileSystem) {\n      this.disconnectedAutomaticFileSystem();\n      this.#automaticFileSystem = automaticFileSystem;\n      this.dispatchEventToListeners(Events.AUTOMATIC_FILE_SYSTEM_CHANGED, this.#automaticFileSystem);\n      void this.connectAutomaticFileSystem(/* addIfMissing= */ false);\n    }\n  }\n\n  /**\n   * Attempt to connect the automatic workspace folder (if any).\n   *\n   * @param addIfMissing if `false` (the default), this will only try to connect\n   *                     to a previously connected automatic workspace folder.\n   *                     If the folder was never connected before and `true` is\n   *                     specified, the user will be asked to grant permission\n   *                     to allow Chrome DevTools to access the folder first.\n   * @returns `true` if the automatic workspace folder was connected, `false`\n   *          if there wasn't any, or the connection attempt failed (e.g. the\n   *          user did not grant permission).\n   */\n  async connectAutomaticFileSystem(addIfMissing = false): Promise<boolean> {\n    if (!this.#automaticFileSystem) {\n      return false;\n    }\n    const {root, uuid, state} = this.#automaticFileSystem;\n    if (state === 'disconnected') {\n      const automaticFileSystem = this.#automaticFileSystem =\n          Object.freeze({...this.#automaticFileSystem, state: 'connecting'});\n      this.dispatchEventToListeners(Events.AUTOMATIC_FILE_SYSTEM_CHANGED, this.#automaticFileSystem);\n      const {success} = await new Promise<{success: boolean}>(\n          resolve => this.#inspectorFrontendHost.connectAutomaticFileSystem(root, uuid, addIfMissing, resolve));\n      if (this.#automaticFileSystem === automaticFileSystem) {\n        const state = success ? 'connected' : 'disconnected';\n        this.#automaticFileSystem = Object.freeze({...automaticFileSystem, state});\n        this.dispatchEventToListeners(Events.AUTOMATIC_FILE_SYSTEM_CHANGED, this.#automaticFileSystem);\n      }\n    }\n    return this.#automaticFileSystem?.state === 'connected';\n  }\n\n  /**\n   * Disconnects any automatic workspace folder.\n   */\n  disconnectedAutomaticFileSystem(): void {\n    if (this.#automaticFileSystem && this.#automaticFileSystem.state !== 'disconnected') {\n      this.#inspectorFrontendHost.disconnectAutomaticFileSystem(this.#automaticFileSystem.root);\n      this.#automaticFileSystem = Object.freeze({...this.#automaticFileSystem, state: 'disconnected'});\n      this.dispatchEventToListeners(Events.AUTOMATIC_FILE_SYSTEM_CHANGED, this.#automaticFileSystem);\n    }\n  }\n}\n\n/**\n * Events emitted by the `AutomaticFileSystemManager`.\n */\nexport const enum Events {\n  /**\n   * Emitted whenever the `automaticFileSystem` property of the\n   * `AutomaticFileSystemManager` changes.\n   */\n  AUTOMATIC_FILE_SYSTEM_CHANGED = 'AutomaticFileSystemChanged',\n\n  /**\n   * Emitted whenever the `availability` property of the\n   * `AutomaticFileSystemManager` changes.\n   */\n  AVAILABILITY_CHANGED = 'AvailabilityChanged',\n}\n\n/**\n * @internal\n */\nexport interface EventTypes {\n  [Events.AUTOMATIC_FILE_SYSTEM_CHANGED]: Readonly<AutomaticFileSystem>|null;\n  [Events.AVAILABILITY_CHANGED]: AutomaticFileSystemAvailability;\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type {ContentDataOrError} from '../text_utils/ContentData.js';\nimport type {SearchMatch} from '../text_utils/ContentProvider.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {\n  type AutomaticFileSystem,\n  type AutomaticFileSystemManager,\n  Events as AutomaticFileSystemManagerEvents\n} from './AutomaticFileSystemManager.js';\nimport {\n  Events as IsolatedFileSystemManagerEvents,\n  type IsolatedFileSystemManager\n} from './IsolatedFileSystemManager.js';\n\n/**\n * Placeholder project that acts as an empty file system within the workspace,\n * and automatically disappears when the user connects the automatic workspace\n * folder.\n *\n * @see AutomaticFileSystemWorkspaceBinding\n */\nexport class FileSystem implements Workspace.Workspace.Project {\n  readonly automaticFileSystem: Readonly<AutomaticFileSystem>;\n  readonly automaticFileSystemManager: AutomaticFileSystemManager;\n  readonly #workspace: Workspace.Workspace.WorkspaceImpl;\n\n  constructor(\n      automaticFileSystem: Readonly<AutomaticFileSystem>, automaticFileSystemManager: AutomaticFileSystemManager,\n      workspace: Workspace.Workspace.WorkspaceImpl) {\n    this.automaticFileSystem = automaticFileSystem;\n    this.automaticFileSystemManager = automaticFileSystemManager;\n    this.#workspace = workspace;\n  }\n\n  workspace(): Workspace.Workspace.WorkspaceImpl {\n    return this.#workspace;\n  }\n\n  id(): string {\n    return `${this.type()}:${this.automaticFileSystem.root}:${this.automaticFileSystem.uuid}`;\n  }\n\n  type(): Workspace.Workspace.projectTypes {\n    return Workspace.Workspace.projectTypes.ConnectableFileSystem;\n  }\n\n  isServiceProject(): boolean {\n    return false;\n  }\n\n  displayName(): string {\n    const {root} = this.automaticFileSystem;\n    let slash = root.lastIndexOf('/');\n    if (slash === -1 && Host.Platform.isWin()) {\n      slash = root.lastIndexOf('\\\\');\n    }\n    return root.substr(slash + 1);\n  }\n\n  async requestMetadata(_uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Promise<Workspace.UISourceCode.UISourceCodeMetadata|null> {\n    throw new Error('Not implemented');\n  }\n\n  async requestFileContent(_uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<ContentDataOrError> {\n    throw new Error('Not implemented');\n  }\n\n  canSetFileContent(): boolean {\n    return false;\n  }\n\n  async setFileContent(_uiSourceCode: Workspace.UISourceCode.UISourceCode, _newContent: string, _isBase64: boolean):\n      Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  fullDisplayName(_uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    throw new Error('Not implemented');\n  }\n\n  mimeType(_uiSourceCode: Workspace.UISourceCode.UISourceCode): string {\n    throw new Error('Not implemented');\n  }\n\n  canRename(): boolean {\n    return false;\n  }\n\n  rename(\n      _uiSourceCode: Workspace.UISourceCode.UISourceCode, _newName: Platform.DevToolsPath.RawPathString,\n      _callback:\n          (arg0: boolean, arg1?: string, arg2?: Platform.DevToolsPath.UrlString,\n           arg3?: Common.ResourceType.ResourceType) => void): void {\n    throw new Error('Not implemented');\n  }\n\n  excludeFolder(_path: Platform.DevToolsPath.UrlString): void {\n    throw new Error('Not implemented');\n  }\n\n  canExcludeFolder(_path: Platform.DevToolsPath.EncodedPathString): boolean {\n    return false;\n  }\n\n  async createFile(\n      _path: Platform.DevToolsPath.EncodedPathString, _name: string|null, _content: string,\n      _isBase64?: boolean): Promise<Workspace.UISourceCode.UISourceCode|null> {\n    throw new Error('Not implemented');\n  }\n\n  canCreateFile(): boolean {\n    return false;\n  }\n\n  deleteFile(_uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    throw new Error('Not implemented');\n  }\n\n  async deleteDirectoryRecursively(_path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    throw new Error('Not implemented');\n  }\n\n  remove(): void {\n  }\n\n  removeUISourceCode(_url: Platform.DevToolsPath.UrlString): void {\n    throw new Error('Not implemented');\n  }\n\n  async searchInFileContent(\n      _uiSourceCode: Workspace.UISourceCode.UISourceCode, _query: string, _caseSensitive: boolean,\n      _isRegex: boolean): Promise<SearchMatch[]> {\n    return [];\n  }\n\n  async findFilesMatchingSearchRequest(\n      _searchConfig: Workspace.SearchConfig.SearchConfig,\n      _filesMatchingFileQuery: Workspace.UISourceCode.UISourceCode[],\n      _progress: Common.Progress.Progress): Promise<Map<Workspace.UISourceCode.UISourceCode, SearchMatch[]|null>> {\n    return new Map();\n  }\n\n  indexContent(_progress: Common.Progress.Progress): void {\n  }\n\n  uiSourceCodeForURL(_url: Platform.DevToolsPath.UrlString): Workspace.UISourceCode.UISourceCode|null {\n    return null;\n  }\n\n  uiSourceCodes(): Iterable<Workspace.UISourceCode.UISourceCode> {\n    return [];\n  }\n}\n\nlet automaticFileSystemWorkspaceBindingInstance: AutomaticFileSystemWorkspaceBinding|undefined;\n\n/**\n * Provides a transient workspace `Project` that doesn't contain any `UISourceCode`s,\n * and only acts as a placeholder for the automatic file system, while it's not\n * connected yet. The placeholder project automatically disappears as soon as\n * the automatic file system is connected successfully.\n */\nexport class AutomaticFileSystemWorkspaceBinding {\n  readonly #automaticFileSystemManager: AutomaticFileSystemManager;\n  #fileSystem: FileSystem|null = null;\n  readonly #isolatedFileSystemManager: IsolatedFileSystemManager;\n  readonly #workspace: Workspace.Workspace.WorkspaceImpl;\n\n  /**\n   * @internal\n   */\n  private constructor(\n      automaticFileSystemManager: AutomaticFileSystemManager,\n      isolatedFileSystemManager: IsolatedFileSystemManager,\n      workspace: Workspace.Workspace.WorkspaceImpl,\n  ) {\n    this.#automaticFileSystemManager = automaticFileSystemManager;\n    this.#isolatedFileSystemManager = isolatedFileSystemManager;\n    this.#workspace = workspace;\n    this.#automaticFileSystemManager.addEventListener(\n        AutomaticFileSystemManagerEvents.AUTOMATIC_FILE_SYSTEM_CHANGED, this.#update, this);\n    this.#isolatedFileSystemManager.addEventListener(\n        IsolatedFileSystemManagerEvents.FileSystemAdded, this.#update, this);\n    this.#isolatedFileSystemManager.addEventListener(\n        IsolatedFileSystemManagerEvents.FileSystemRemoved, this.#update, this);\n    this.#update();\n  }\n\n  /**\n   * Yields the `AutomaticFileSystemWorkspaceBinding` singleton.\n   *\n   * @returns the singleton.\n   */\n  static instance({forceNew, automaticFileSystemManager, isolatedFileSystemManager, workspace}: {\n    forceNew: boolean|null,\n    automaticFileSystemManager: AutomaticFileSystemManager|null,\n    isolatedFileSystemManager: IsolatedFileSystemManager|null,\n    workspace: Workspace.Workspace.WorkspaceImpl|null,\n  } = {\n    forceNew: false,\n    automaticFileSystemManager: null,\n    isolatedFileSystemManager: null,\n    workspace: null,\n  }): AutomaticFileSystemWorkspaceBinding {\n    if (!automaticFileSystemWorkspaceBindingInstance || forceNew) {\n      if (!automaticFileSystemManager || !isolatedFileSystemManager || !workspace) {\n        throw new Error(\n            'Unable to create AutomaticFileSystemWorkspaceBinding: ' +\n            'automaticFileSystemManager, isolatedFileSystemManager, ' +\n            'and workspace must be provided');\n      }\n      automaticFileSystemWorkspaceBindingInstance = new AutomaticFileSystemWorkspaceBinding(\n          automaticFileSystemManager,\n          isolatedFileSystemManager,\n          workspace,\n      );\n    }\n    return automaticFileSystemWorkspaceBindingInstance;\n  }\n\n  /**\n   * Clears the `AutomaticFileSystemWorkspaceBinding` singleton (if any);\n   */\n  static removeInstance(): void {\n    if (automaticFileSystemWorkspaceBindingInstance) {\n      automaticFileSystemWorkspaceBindingInstance.#dispose();\n      automaticFileSystemWorkspaceBindingInstance = undefined;\n    }\n  }\n\n  #dispose(): void {\n    if (this.#fileSystem) {\n      this.#workspace.removeProject(this.#fileSystem);\n    }\n    this.#automaticFileSystemManager.removeEventListener(\n        AutomaticFileSystemManagerEvents.AUTOMATIC_FILE_SYSTEM_CHANGED, this.#update, this);\n    this.#isolatedFileSystemManager.removeEventListener(\n        IsolatedFileSystemManagerEvents.FileSystemAdded, this.#update, this);\n    this.#isolatedFileSystemManager.removeEventListener(\n        IsolatedFileSystemManagerEvents.FileSystemRemoved, this.#update, this);\n  }\n\n  #update(): void {\n    const automaticFileSystem = this.#automaticFileSystemManager.automaticFileSystem;\n    if (this.#fileSystem !== null) {\n      if (this.#fileSystem.automaticFileSystem === automaticFileSystem) {\n        return;\n      }\n      this.#workspace.removeProject(this.#fileSystem);\n      this.#fileSystem = null;\n    }\n    if (automaticFileSystem !== null && automaticFileSystem.state !== 'connected') {\n      // Check if we already have a (manually added) file system, and if so, don't\n      // offer the option to connect the automatic file system.\n      const fileSystemURL = Common.ParsedURL.ParsedURL.rawPathToUrlString(automaticFileSystem.root);\n      if (this.#isolatedFileSystemManager.fileSystem(fileSystemURL) === null) {\n        this.#fileSystem = new FileSystem(\n            automaticFileSystem,\n            this.#automaticFileSystemManager,\n            this.#workspace,\n        );\n        this.#workspace.addProject(this.#fileSystem);\n      }\n    }\n  }\n}\n", "/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport '../../ui/legacy/components/data_grid/data_grid.js';\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\n// TODO(crbug.com/442509324): remove UI dependency\n// eslint-disable-next-line rulesdir/no-imports-in-directory\nimport * as UI from '../../ui/legacy/legacy.js';\n// TODO(crbug.com/442509324): remove UI dependency\n// eslint-disable-next-line rulesdir/no-imports-in-directory\nimport {Directives, html, render} from '../../ui/lit/lit.js';\n\nimport editFileSystemViewStyles from './editFileSystemView.css.js';\nimport type {PlatformFileSystem} from './PlatformFileSystem.js';\n\nconst {styleMap} = Directives;\n\nconst UIStrings = {\n  /**\n   * @description Text in Edit File System View of the Workspace settings in Settings to indicate that the following string is a folder URL\n   */\n  url: 'URL',\n  /**\n   * @description Text in Edit File System View of the Workspace settings in Settings\n   */\n  excludedFolders: 'Excluded sub-folders',\n  /**\n   * @description Error message when a file system path is an empty string.\n   */\n  enterAPath: 'Enter a path',\n  /**\n   * @description Error message when a file system path is identical to an existing path.\n   */\n  enterAUniquePath: 'Enter a unique path',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/EditFileSystemView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport const enum ExcludedFolderStatus {\n  VALID = 1,\n  ERROR_NOT_A_PATH = 2,\n  ERROR_NOT_UNIQUE = 3,\n}\n\nfunction statusString(status: ExcludedFolderStatus): Platform.UIString.LocalizedString {\n  switch (status) {\n    case ExcludedFolderStatus.ERROR_NOT_A_PATH:\n      return i18nString(UIStrings.enterAPath);\n    case ExcludedFolderStatus.ERROR_NOT_UNIQUE:\n      return i18nString(UIStrings.enterAUniquePath);\n    case ExcludedFolderStatus.VALID:\n      throw new Error('unreachable');\n  }\n}\n\nexport interface PathWithStatus {\n  path: Platform.DevToolsPath.EncodedPathString;\n  status: ExcludedFolderStatus;\n}\n\nexport interface EditFileSystemViewInput {\n  fileSystemPath: Platform.DevToolsPath.UrlString;\n  excludedFolderPaths: PathWithStatus[];\n  onCreate: (event: CustomEvent<{url?: string}>) => void;\n  onEdit:\n      (event: CustomEvent<{node: HTMLElement, columnId: string, valueBeforeEditing: string, newText: string}>) => void;\n  onDelete: (event: CustomEvent<HTMLElement>) => void;\n}\n\nexport type View = (input: EditFileSystemViewInput, output: object, target: HTMLElement) => void;\n\nexport const DEFAULT_VIEW: View = (input, _output, target) => {\n  // clang-format off\n  render(html`\n      <style>${editFileSystemViewStyles}</style>\n      <div class=\"excluded-folder-header\">\n        <span>${i18nString(UIStrings.url)}</span>\n        <span class=\"excluded-folder-url\">${input.fileSystemPath}</span>\n        <devtools-data-grid\n          @create=${input.onCreate}\n          @edit=${input.onEdit}\n          @delete=${input.onDelete}\n          class=\"exclude-subfolders-table\"\n          parts=\"excluded-folder-row-with-error\"\n          inline striped>\n          <table>\n            <thead>\n              <tr>\n                <th id=\"url\" editable>${i18nString(UIStrings.excludedFolders)}</th>\n              </tr>\n            </thead>\n            <tbody>\n            ${input.excludedFolderPaths.map((path, index) => html`\n              <tr data-url=${path.path} data-index=${index}>\n                <td style=${styleMap({backgroundColor: path.status !== ExcludedFolderStatus.VALID ? 'var(--sys-color-error-container)' : undefined})}>${path.path}</td>\n              </tr>\n            `)}\n            <tr placeholder></tr>\n            </tbody>\n          </table>\n        </devtools-data-grid>\n        ${input.excludedFolderPaths.filter(({status}) => status !== ExcludedFolderStatus.VALID).map(({status}) =>\n          html`<span class=\"excluded-folder-error\">${statusString(status)}</span>`)}\n    </div>`, target);\n  // clang-format on\n};\n\nexport class EditFileSystemView extends UI.Widget.VBox {\n  #fileSystem?: PlatformFileSystem;\n  #excludedFolderPaths: PathWithStatus[] = [];\n  readonly #view: View;\n\n  constructor(element: HTMLElement|undefined, view: View = DEFAULT_VIEW) {\n    super(element);\n    this.#view = view;\n  }\n\n  set fileSystem(fileSystem: PlatformFileSystem) {\n    this.#fileSystem = fileSystem;\n    this.#resyncExcludedFolderPaths();\n    this.requestUpdate();\n  }\n\n  override wasShown(): void {\n    this.#resyncExcludedFolderPaths();\n    this.requestUpdate();\n  }\n\n  #resyncExcludedFolderPaths(): void {\n    this.#excludedFolderPaths = this.#fileSystem?.excludedFolders()\n                                    .values()\n                                    .map(path => ({path, status: ExcludedFolderStatus.VALID}))\n                                    .toArray() ??\n        [];\n  }\n\n  override performUpdate(): void {\n    const input: EditFileSystemViewInput = {\n      fileSystemPath: this.#fileSystem?.path() ?? Platform.DevToolsPath.urlString``,\n      excludedFolderPaths: this.#excludedFolderPaths,\n      onCreate: e => this.#onCreate(e.detail.url),\n      onEdit: e => this.#onEdit(e.detail.node.dataset.index ?? '-1', e.detail.valueBeforeEditing, e.detail.newText),\n      onDelete: e => this.#onDelete(e.detail.dataset.index ?? '-1'),\n    };\n    this.#view(input, {}, this.contentElement);\n  }\n\n  #onCreate(url?: string): void {\n    if (url === undefined) {\n      // The data grid fires onCreate even when the user just selects and then deselects the\n      // creation row. Ignore those occurrences.\n      return;\n    }\n\n    const pathWithStatus = this.#validateFolder(url);\n    this.#excludedFolderPaths.push(pathWithStatus);\n    if (pathWithStatus.status === ExcludedFolderStatus.VALID) {\n      this.#fileSystem?.addExcludedFolder(pathWithStatus.path);\n    }\n\n    this.requestUpdate();\n  }\n\n  #onEdit(idx: string, valueBeforeEditing: string, newText: string): void {\n    const index = Number.parseInt(idx, 10);\n    if (index < 0 || index >= this.#excludedFolderPaths.length) {\n      return;\n    }\n\n    const pathWithStatus = this.#validateFolder(newText);\n    const oldPathWithStatus = this.#excludedFolderPaths[index];\n    this.#excludedFolderPaths[index] = pathWithStatus;\n\n    if (oldPathWithStatus.status === ExcludedFolderStatus.VALID) {\n      this.#fileSystem?.removeExcludedFolder(valueBeforeEditing as Platform.DevToolsPath.EncodedPathString);\n    }\n\n    if (pathWithStatus.status === ExcludedFolderStatus.VALID) {\n      this.#fileSystem?.addExcludedFolder(pathWithStatus.path);\n    }\n\n    this.requestUpdate();\n  }\n\n  #onDelete(idx: string): void {\n    const index = Number.parseInt(idx, 10);\n    if (index < 0 || index >= this.#excludedFolderPaths.length) {\n      return;\n    }\n\n    this.#fileSystem?.removeExcludedFolder(this.#excludedFolderPaths[index].path);\n    this.#excludedFolderPaths.splice(index, 1);\n\n    this.requestUpdate();\n  }\n\n  #validateFolder(rawInput: string): PathWithStatus {\n    const path = EditFileSystemView.#normalizePrefix(rawInput.trim()) as Platform.DevToolsPath.EncodedPathString;\n    if (!path) {\n      return {path, status: ExcludedFolderStatus.ERROR_NOT_A_PATH};\n    }\n\n    if (this.#excludedFolderPaths.findIndex(({path: p}) => p === path) !== -1) {\n      return {path, status: ExcludedFolderStatus.ERROR_NOT_UNIQUE};\n    }\n\n    return {path, status: ExcludedFolderStatus.VALID};\n  }\n\n  static #normalizePrefix(prefix: string): string {\n    if (!prefix) {\n      return '';\n    }\n    return prefix + (prefix[prefix.length - 1] === '/' ? '' : '/');\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2015 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n@scope to (devtools-widget > *) {\n  .excluded-folder-header {\n    display: flex;\n    flex-direction: column;\n    min-height: var(--sys-size-16);\n    padding: var(--sys-size-4) var(--sys-size-6);\n    gap: var(--sys-size-4);\n\n    & > .excluded-folder-url {\n      color: var(--sys-color-on-surface-subtle);\n      overflow-wrap: break-word;\n    }\n  }\n\n  .exclude-subfolders-table {\n    padding: var(--sys-size-4) 0;\n  }\n\n  .excluded-folder-error {\n    color: var(--sys-color-error);\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./editFileSystemView.css')} */`;", "// Copyright (c) 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n// TODO(crbug.com/442509324): remove UI dependency\n// eslint-disable-next-line rulesdir/no-imports-in-directory\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport {NetworkPersistenceManager} from './NetworkPersistenceManager.js';\nimport {PersistenceImpl} from './PersistenceImpl.js';\n\nconst UIStrings = {\n  /**\n   * @description Text to save content as a specific file type\n   */\n  saveAs: 'Save as…',\n  /**\n   * @description Context menu item for saving an image\n   */\n  saveImage: 'Save image',\n  /**\n   * @description Context menu item for showing all overridden files\n   */\n  showOverrides: 'Show all overrides',\n  /**\n   * @description A context menu item in the Persistence Actions of the Workspace settings in Settings\n   */\n  overrideContent: 'Override content',\n  /**\n   * @description A context menu item in the Persistence Actions of the Workspace settings in Settings\n   */\n  openInContainingFolder: 'Open in containing folder',\n  /**\n   * @description A message in a confirmation dialog in the Persistence Actions\n   * @example {bundle.min.js} PH1\n   */\n  overrideSourceMappedFileWarning: 'Override ‘{PH1}’ instead?',\n  /**\n   * @description A message in a confirmation dialog to explain why the action is failed in the Persistence Actions\n   * @example {index.ts} PH1\n   */\n  overrideSourceMappedFileExplanation: '‘{PH1}’ is a source mapped file and cannot be overridden.',\n  /**\n   * @description An error message shown in the DevTools console after the user clicked \"Save as\" in\n   * the context menu of a page resource.\n   */\n  saveFailed: 'Failed to save file to disk.',\n  /**\n   * @description An error message shown in the DevTools console after the user clicked \"Save as\" in\n   * the context menu of a WebAssembly file.\n   */\n  saveWasmFailed: 'Unable to save WASM module to disk. Most likely the module is too large.',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/PersistenceActions.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ContextMenuProvider implements\n    UI.ContextMenu\n        .Provider<Workspace.UISourceCode.UISourceCode|SDK.Resource.Resource|SDK.NetworkRequest.NetworkRequest> {\n  appendApplicableItems(\n      _event: Event, contextMenu: UI.ContextMenu.ContextMenu,\n      contentProvider: TextUtils.ContentProvider.ContentProvider): void {\n    async function saveAs(): Promise<void> {\n      if (contentProvider instanceof Workspace.UISourceCode.UISourceCode) {\n        (contentProvider).commitWorkingCopy();\n      }\n      const url = contentProvider.contentURL();\n      let contentData: TextUtils.ContentData.ContentData;\n      const maybeScript = getScript(contentProvider);\n      if (maybeScript?.isWasm()) {\n        try {\n          const base64 = await maybeScript.getWasmBytecode().then(Common.Base64.encode);\n          contentData = new TextUtils.ContentData.ContentData(base64, /* isBase64=*/ true, 'application/wasm');\n        } catch (e) {\n          console.error(`Unable to convert WASM byte code for ${url} to base64. Not saving to disk`, e.stack);\n          Common.Console.Console.instance().error(i18nString(UIStrings.saveWasmFailed), /* show=*/ false);\n          return;\n        }\n      } else {\n        const contentDataOrError = await contentProvider.requestContentData();\n        if (TextUtils.ContentData.ContentData.isError(contentDataOrError)) {\n          console.error(`Failed to retrieve content for ${url}: ${contentDataOrError}`);\n          Common.Console.Console.instance().error(i18nString(UIStrings.saveFailed), /* show=*/ false);\n          return;\n        }\n        contentData = contentDataOrError;\n      }\n      await Workspace.FileManager.FileManager.instance().save(url, contentData, /* forceSaveAs=*/ true);\n      Workspace.FileManager.FileManager.instance().close(url);\n    }\n\n    async function saveImage(): Promise<void> {\n      const targetObject = contentProvider as SDK.Resource.Resource;\n      const contentDataOrError = await targetObject.requestContentData();\n      const content = TextUtils.ContentData.ContentData.textOr(contentDataOrError, '');\n      /* eslint-disable-next-line rulesdir/no-imperative-dom-api */\n      const link = document.createElement('a');\n      link.download = targetObject.displayName;\n      link.href = 'data:' + targetObject.mimeType + ';base64,' + content;\n      link.click();\n    }\n\n    if (contentProvider.contentType().isDocumentOrScriptOrStyleSheet()) {\n      contextMenu.saveSection().appendItem(i18nString(UIStrings.saveAs), saveAs, {jslogContext: 'save-as'});\n    } else if (contentProvider instanceof SDK.Resource.Resource && contentProvider.contentType().isImage()) {\n      contextMenu.saveSection().appendItem(i18nString(UIStrings.saveImage), saveImage, {jslogContext: 'save-image'});\n    }\n\n    // Retrieve uiSourceCode by URL to pick network resources everywhere.\n    const uiSourceCode = Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(contentProvider.contentURL());\n    const networkPersistenceManager = NetworkPersistenceManager.instance();\n\n    const binding = uiSourceCode && PersistenceImpl.instance().binding(uiSourceCode);\n    const fileURL = binding ? binding.fileSystem.contentURL() : contentProvider.contentURL();\n\n    if (Common.ParsedURL.schemeIs(fileURL, 'file:')) {\n      const path = Common.ParsedURL.ParsedURL.urlToRawPathString(fileURL, Host.Platform.isWin());\n      contextMenu.revealSection().appendItem(\n          i18nString(UIStrings.openInContainingFolder),\n          () => Host.InspectorFrontendHost.InspectorFrontendHostInstance.showItemInFolder(path),\n          {jslogContext: 'open-in-containing-folder'});\n    }\n\n    if (contentProvider instanceof Workspace.UISourceCode.UISourceCode &&\n        (contentProvider.project().type() === Workspace.Workspace.projectTypes.FileSystem)) {\n      // Do not append in Sources > Workspace & Overrides tab\n      return;\n    }\n\n    let disabled = true;\n    let handler = (): void => {};\n    if (uiSourceCode && networkPersistenceManager.isUISourceCodeOverridable(uiSourceCode)) {\n      if (!uiSourceCode.contentType().isFromSourceMap()) {\n        disabled = false;\n        handler = this.handleOverrideContent.bind(this, uiSourceCode, contentProvider);\n      } else {\n        // show redirect dialog for source mapped file\n        const deployedUiSourceCode = this.getDeployedUiSourceCode(uiSourceCode);\n        if (deployedUiSourceCode) {\n          disabled = false;\n          handler = this.redirectOverrideToDeployedUiSourceCode.bind(this, deployedUiSourceCode, uiSourceCode);\n        }\n      }\n    }\n    contextMenu.overrideSection().appendItem(\n        i18nString(UIStrings.overrideContent), handler, {disabled, jslogContext: 'override-content'});\n\n    if (contentProvider instanceof SDK.NetworkRequest.NetworkRequest) {\n      contextMenu.overrideSection().appendItem(i18nString(UIStrings.showOverrides), async () => {\n        await UI.ViewManager.ViewManager.instance().showView('navigator-overrides');\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.ShowAllOverridesFromNetworkContextMenu);\n      }, {jslogContext: 'show-overrides'});\n    }\n  }\n\n  private async handleOverrideContent(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode,\n      contentProvider: TextUtils.ContentProvider.ContentProvider): Promise<void> {\n    const networkPersistenceManager = NetworkPersistenceManager.instance();\n    const isSuccess = await networkPersistenceManager.setupAndStartLocalOverrides(uiSourceCode);\n    if (isSuccess) {\n      await Common.Revealer.reveal(uiSourceCode);\n    }\n\n    // Collect metrics: Context menu access point\n    if (contentProvider instanceof SDK.NetworkRequest.NetworkRequest) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideContentFromNetworkContextMenu);\n    } else if (contentProvider instanceof Workspace.UISourceCode.UISourceCode) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideContentFromSourcesContextMenu);\n    }\n    // Collect metrics: Content type\n    if (uiSourceCode.isFetchXHR()) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideFetchXHR);\n    } else if (contentProvider.contentType().isScript()) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideScript);\n    } else if (contentProvider.contentType().isDocument()) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideDocument);\n    } else if (contentProvider.contentType().isStyleSheet()) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideStyleSheet);\n    } else if (contentProvider.contentType().isImage()) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideImage);\n    } else if (contentProvider.contentType().isFont()) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideFont);\n    }\n  }\n\n  private async redirectOverrideToDeployedUiSourceCode(\n      deployedUiSourceCode: Workspace.UISourceCode.UISourceCode,\n      originalUiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideContentContextMenuSourceMappedWarning);\n    const deployedUrl = deployedUiSourceCode.url();\n    const deployedName = Bindings.ResourceUtils.displayNameForURL(deployedUrl);\n\n    const originalUrl = originalUiSourceCode.url();\n    const originalName = Bindings.ResourceUtils.displayNameForURL(originalUrl);\n\n    const shouldJumpToDeployedFile = await UI.UIUtils.ConfirmDialog.show(\n        i18nString(UIStrings.overrideSourceMappedFileExplanation, {PH1: originalName}),\n        i18nString(UIStrings.overrideSourceMappedFileWarning, {PH1: deployedName}), undefined,\n        {jslogContext: 'override-source-mapped-file-warning'});\n\n    if (shouldJumpToDeployedFile) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideContentContextMenuRedirectToDeployed);\n      await this.handleOverrideContent(deployedUiSourceCode, deployedUiSourceCode);\n    }\n  }\n\n  private getDeployedUiSourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode):\n      Workspace.UISourceCode.UISourceCode|null {\n    const debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n\n    for (const deployedScript of debuggerWorkspaceBinding.scriptsForUISourceCode(uiSourceCode)) {\n      const deployedUiSourceCode = debuggerWorkspaceBinding.uiSourceCodeForScript(deployedScript);\n      if (deployedUiSourceCode) {\n        return deployedUiSourceCode;\n      }\n    }\n\n    const [deployedStylesUrl] = Bindings.SASSSourceMapping.SASSSourceMapping.uiSourceOrigin(uiSourceCode);\n\n    if (!deployedStylesUrl) {\n      return null;\n    }\n\n    const deployedUiSourceCode = Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(deployedStylesUrl) ||\n        Workspace.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(\n            Common.ParsedURL.ParsedURL.urlWithoutHash(deployedStylesUrl) as Platform.DevToolsPath.UrlString);\n\n    return deployedUiSourceCode;\n  }\n}\n\n/**\n * @returns The script if the content provider is a UISourceCode and the DebuggerModel actually created one for the UISourceCode.\n */\nfunction getScript(contentProvider: TextUtils.ContentProvider.ContentProvider): SDK.Script.Script|null {\n  if (!(contentProvider instanceof Workspace.UISourceCode.UISourceCode)) {\n    return null;\n  }\n\n  // First we try to resolve the target and use that to get the script.\n  const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(contentProvider);\n  const model = target?.model(SDK.DebuggerModel.DebuggerModel);\n  if (model) {\n    const resourceFile =\n        Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().scriptFile(contentProvider, model);\n    if (resourceFile?.script) {\n      return resourceFile.script;\n    }\n  }\n\n  // Otherwise we'll check all possible scripts for this UISourceCode and take the first one.\n  return Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().scriptsForUISourceCode(\n             contentProvider)[0] ??\n      null;\n}\n", "// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// TODO(crbug.com/442509324): remove UI dependency\n// eslint-disable-next-line rulesdir/no-imports-in-directory\nimport '../../ui/legacy/legacy.js';\nimport '../../ui/components/buttons/buttons.js';\nimport '../../ui/components/cards/cards.js';\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\n// TODO(crbug.com/442509324): remove UI dependency\n// eslint-disable-next-line rulesdir/no-imports-in-directory\nimport * as UI from '../../ui/legacy/legacy.js';\n// TODO(crbug.com/442509324): remove UI dependency\n// eslint-disable-next-line rulesdir/no-imports-in-directory\nimport {html, render} from '../../ui/lit/lit.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {EditFileSystemView} from './EditFileSystemView.js';\nimport type {FileSystem} from './FileSystemWorkspaceBinding.js';\nimport {IsolatedFileSystem} from './IsolatedFileSystem.js';\nimport {Events, IsolatedFileSystemManager} from './IsolatedFileSystemManager.js';\nimport {NetworkPersistenceManager} from './NetworkPersistenceManager.js';\nimport type {PlatformFileSystem} from './PlatformFileSystem.js';\nimport workspaceSettingsTabStyles from './workspaceSettingsTab.css.js';\n\nconst UIStrings = {\n  /**\n   * @description Text of a DOM element in Workspace Settings Tab of the Workspace settings in Settings\n   */\n  workspace: 'Workspace',\n  /**\n   * @description Text of a DOM element in Workspace Settings Tab of the Workspace settings in Settings\n   */\n  mappingsAreInferredAutomatically: 'Mappings are inferred automatically.',\n  /**\n   * @description Text of the add button in Workspace Settings Tab of the Workspace settings in Settings\n   */\n  addFolder: 'Add folder',\n  /**\n   * @description Label element text content in Workspace Settings Tab of the Workspace settings in Settings\n   */\n  folderExcludePattern: 'Exclude from workspace',\n  /**\n   * @description Label for an item to remove something\n   */\n  remove: 'Remove',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/WorkspaceSettingsTab.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface WorkspaceSettingsTabInput {\n  excludePatternSetting: Common.Settings.RegExpSetting;\n  fileSystems: Array<{displayName: string, fileSystem: IsolatedFileSystem}>;\n  onAddClicked: () => void;\n  onRemoveClicked: (fileSystem: IsolatedFileSystem) => void;\n}\nexport type View = (input: WorkspaceSettingsTabInput, output: object, target: HTMLElement) => void;\nexport const DEFAULT_VIEW: View = (input, _output, target) => {\n  // clang-format off\n  render(html`\n    <style>${workspaceSettingsTabStyles}</style>\n    <div class=\"settings-card-container-wrapper\" jslog=${VisualLogging.pane('workspace')}>\n      <div class=\"settings-card-container\">\n        <devtools-card heading=${i18nString(UIStrings.workspace)}>\n          <div class=\"folder-exclude-pattern\">\n            <label for=\"workspace-setting-folder-exclude-pattern\">${i18nString(UIStrings.folderExcludePattern)}</label>\n            <input\n              class=\"harmony-input\"\n              jslog=${VisualLogging.textField().track({keydown: 'Enter', change: true}).context(input.excludePatternSetting.name)}\n              ${UI.SettingsUI.bindToSetting(input.excludePatternSetting)}\n              id=\"workspace-setting-folder-exclude-pattern\"></input>\n          </div>\n          <div class=\"mappings-info\">${i18nString(UIStrings.mappingsAreInferredAutomatically)}</div>\n        </devtools-card>\n        ${input.fileSystems.map(fileSystem => html`\n          <devtools-card heading=${fileSystem.displayName}>\n            <devtools-icon name=\"folder\" slot=\"heading-prefix\"></devtools-icon>\n            <div class=\"mapping-view-container\">\n              <devtools-widget .widgetConfig=${UI.Widget.widgetConfig(EditFileSystemView, { fileSystem: fileSystem.fileSystem })}>\n              </devtools-widget>\n            </div>\n            <devtools-button\n              slot=\"heading-suffix\"\n              .variant=${Buttons.Button.Variant.OUTLINED}\n              jslog=${VisualLogging.action().track({click: true}).context('settings.remove-file-system')}\n              @click=${input.onRemoveClicked.bind(null, fileSystem.fileSystem)}>${i18nString(UIStrings.remove)}</devtools-button>\n          </devtools-card>\n        `)}\n        <div class=\"add-button-container\">\n          <devtools-button\n            class=\"add-folder\"\n            .variant=${Buttons.Button.Variant.OUTLINED}\n            jslog=${VisualLogging.action().track({click: true}).context('sources.add-folder-to-workspace')}\n            @click=${input.onAddClicked}>${i18nString(UIStrings.addFolder)}</devtools-button>\n        </div>\n      </div>\n    </div>`, target);\n  // clang-format on\n};\n\nexport class WorkspaceSettingsTab extends UI.Widget.VBox {\n  readonly #view: View;\n  #eventListeners: Common.EventTarget.EventDescriptor[] = [];\n\n  constructor(view: View = DEFAULT_VIEW) {\n    super();\n    this.#view = view;\n  }\n\n  override wasShown(): void {\n    this.#eventListeners = [\n      IsolatedFileSystemManager.instance().addEventListener(Events.FileSystemAdded, this.requestUpdate.bind(this)),\n      IsolatedFileSystemManager.instance().addEventListener(Events.FileSystemRemoved, this.requestUpdate.bind(this)),\n    ];\n\n    this.requestUpdate();\n  }\n\n  override willHide(): void {\n    Common.EventTarget.removeEventListeners(this.#eventListeners);\n    this.#eventListeners = [];\n  }\n\n  override performUpdate(): void {\n    const input: WorkspaceSettingsTabInput = {\n      excludePatternSetting: IsolatedFileSystemManager.instance().workspaceFolderExcludePatternSetting(),\n      onAddClicked: () => IsolatedFileSystemManager.instance().addFileSystem(),\n      onRemoveClicked: fs => IsolatedFileSystemManager.instance().removeFileSystem(fs),\n      fileSystems: IsolatedFileSystemManager.instance()\n                       .fileSystems()\n                       .filter(fileSystem => {\n                         const networkPersistenceProject = NetworkPersistenceManager.instance().project();\n                         return fileSystem instanceof IsolatedFileSystem &&\n                             (!networkPersistenceProject ||\n                              IsolatedFileSystemManager.instance().fileSystem(\n                                  (networkPersistenceProject as FileSystem).fileSystemPath()) !== fileSystem);\n                       })\n                       .map(fileSystem => {\n                         const displayName = WorkspaceSettingsTab.#getFilename(fileSystem);\n                         return {displayName, fileSystem: fileSystem as IsolatedFileSystem};\n                       })\n                       .sort((fs1, fs2) => fs1.displayName.localeCompare(fs2.displayName)),\n    };\n    this.#view(input, {}, this.contentElement);\n  }\n\n  static #getFilename(fileSystem: PlatformFileSystem): string {\n    const fileSystemPath = fileSystem.path();\n    const lastIndexOfSlash = fileSystemPath.lastIndexOf('/');\n    const lastPathComponent = fileSystemPath.substring(lastIndexOfSlash + 1);\n    return decodeURIComponent(lastPathComponent);\n  }\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n// IMPORTANT: this file is auto generated. Please do not edit this file.\n/* istanbul ignore file */\nexport default `/*\n * Copyright 2017 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n@scope to (devtools-widget > *) {\n  .mappings-info,\n  .folder-exclude-pattern {\n    height: var(--settings-single-item-height);\n  }\n\n  .mapping-view-container {\n    padding-left: 0;\n    padding-right: 0;\n  }\n\n  .folder-exclude-pattern {\n    display: flex;\n    align-items: center;\n\n    & > input {\n      flex: 1;\n    }\n  }\n\n  label {\n    padding-bottom: 0;\n  }\n\n  .mappings-info {\n    border: none;\n  }\n\n  .add-button-container {\n    max-width: var(--sys-size-35);\n    margin-left: var(--sys-size-8);\n    width: 100%;\n\n    & .add-folder {\n      min-width: var(--sys-size-31);\n      max-width: var(--sys-size-35);\n    }\n  }\n}\n\n/*# sourceURL=${import.meta.resolve('./workspaceSettingsTab.css')} */`;"],
  "mappings": "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",
  "names": ["Common", "Host", "SDK", "Bindings", "TextUtils", "Workspace", "Common", "Host", "Platform", "TextUtils", "Common", "Host", "i18n", "Platform", "Common", "i18n", "Platform", "PlatformFileSystemType", "UIStrings", "str_", "i18nString", "name", "UIStrings", "str_", "i18nString", "fileSystem", "Events", "metadata", "newName", "Events", "Common", "Host", "Platform", "SDK", "Components", "BreakpointManager", "TextUtils", "Workspace", "Common", "i18n", "Platform", "UI", "Workspace", "Common", "Host", "Platform", "TextUtils", "Workspace", "UIStrings", "str_", "i18nString", "icon", "Events", "Events", "newContent", "reversePathParts", "Common", "Host", "state", "FileSystem", "Common", "Host", "Workspace", "FileSystem", "i18n", "Platform", "UI", "UIStrings", "str_", "i18nString", "Common", "Host", "i18n", "SDK", "UI", "Bindings", "TextUtils", "Workspace", "UIStrings", "str_", "i18nString", "deployedUiSourceCode", "DEFAULT_VIEW", "Common", "i18n", "UI", "html", "render", "UIStrings", "str_", "i18nString", "DEFAULT_VIEW", "render", "html"]
}
