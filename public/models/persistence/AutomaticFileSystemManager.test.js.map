{"version":3,"file":"AutomaticFileSystemManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/persistence/AutomaticFileSystemManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport * as ProjectSettings from '../project_settings/project_settings.js';\n\nimport * as Persistence from './persistence.js';\n\ndescribe('AutomaticFileSystemManager', () => {\n  const AUTOMATIC_FILE_SYSTEM_CHANGED = Persistence.AutomaticFileSystemManager.Events.AUTOMATIC_FILE_SYSTEM_CHANGED;\n  const {AutomaticFileSystemManager} = Persistence.AutomaticFileSystemManager;\n  const root = '/path/to/bar';\n  const uuid = '549bbf9b-48b2-4af7-aebd-d3ba68993094';\n  const hostConfig = {devToolsAutomaticFileSystems: {enabled: true}};\n\n  afterEach(() => {\n    AutomaticFileSystemManager.removeInstance();\n  });\n\n  it('initially doesn\\'t report an automatic file system', () => {\n    const inspectorFrontendHost = sinon.createStubInstance(Host.InspectorFrontendHost.InspectorFrontendHostStub);\n    const projectSettingsModel = sinon.createStubInstance(ProjectSettings.ProjectSettingsModel.ProjectSettingsModel);\n    sinon.stub(projectSettingsModel, 'projectSettings').value({});\n\n    const manager = AutomaticFileSystemManager.instance({\n      forceNew: true,\n      hostConfig,\n      inspectorFrontendHost,\n      projectSettingsModel,\n    });\n\n    assert.isNull(manager.automaticFileSystem);\n  });\n\n  it('doesn\\'t listen to project settings changes when `devToolsAutomaticFileSystems` is off', () => {\n    const hostConfig = {devToolsAutomaticFileSystems: {enabled: false}};\n    const inspectorFrontendHost = sinon.createStubInstance(Host.InspectorFrontendHost.InspectorFrontendHostStub);\n    const projectSettingsModel = sinon.createStubInstance(ProjectSettings.ProjectSettingsModel.ProjectSettingsModel);\n\n    AutomaticFileSystemManager.instance({\n      forceNew: true,\n      hostConfig,\n      inspectorFrontendHost,\n      projectSettingsModel,\n    });\n\n    assert(projectSettingsModel.addEventListener.notCalled);\n  });\n\n  it('attempts to automatically connect the file system initially', () => {\n    const inspectorFrontendHost = sinon.createStubInstance(Host.InspectorFrontendHost.InspectorFrontendHostStub);\n    const projectSettingsModel = sinon.createStubInstance(ProjectSettings.ProjectSettingsModel.ProjectSettingsModel);\n    sinon.stub(projectSettingsModel, 'projectSettings').value({workspace: {root, uuid}});\n\n    const manager = AutomaticFileSystemManager.instance({\n      forceNew: true,\n      hostConfig,\n      inspectorFrontendHost,\n      projectSettingsModel,\n    });\n\n    assert.deepEqual(manager.automaticFileSystem, {root, uuid, state: 'connecting'});\n    assert(inspectorFrontendHost.connectAutomaticFileSystem.calledOnceWith(root, uuid, false));\n  });\n\n  it('reflects state correctly when automatic connection succeeds', async () => {\n    const inspectorFrontendHost = sinon.createStubInstance(Host.InspectorFrontendHost.InspectorFrontendHostStub);\n    const projectSettingsModel = sinon.createStubInstance(ProjectSettings.ProjectSettingsModel.ProjectSettingsModel);\n    sinon.stub(projectSettingsModel, 'projectSettings').value({workspace: {root, uuid}});\n\n    const manager = AutomaticFileSystemManager.instance({\n      forceNew: true,\n      hostConfig,\n      inspectorFrontendHost,\n      projectSettingsModel,\n    });\n    const [, , , setupCallback] = inspectorFrontendHost.connectAutomaticFileSystem.lastCall.args;\n    setupCallback({success: true});\n    const automaticFileSystem = await manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n\n    assert.strictEqual(automaticFileSystem, manager.automaticFileSystem);\n    assert.deepEqual(automaticFileSystem, {root, uuid, state: 'connected'});\n  });\n\n  it('reflects state correctly when automatic connection fails', async () => {\n    const inspectorFrontendHost = sinon.createStubInstance(Host.InspectorFrontendHost.InspectorFrontendHostStub);\n    const projectSettingsModel = sinon.createStubInstance(ProjectSettings.ProjectSettingsModel.ProjectSettingsModel);\n    sinon.stub(projectSettingsModel, 'projectSettings').value({workspace: {root, uuid}});\n\n    const manager = AutomaticFileSystemManager.instance({\n      forceNew: true,\n      hostConfig,\n      inspectorFrontendHost,\n      projectSettingsModel,\n    });\n    const [, , , setupCallback] = inspectorFrontendHost.connectAutomaticFileSystem.lastCall.args;\n    setupCallback({success: false});\n    const automaticFileSystem = await manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n\n    assert.strictEqual(automaticFileSystem, manager.automaticFileSystem);\n    assert.deepEqual(automaticFileSystem, {root, uuid, state: 'disconnected'});\n  });\n\n  it('performs first-time setup of automatic file system correctly', async () => {\n    const inspectorFrontendHost = sinon.createStubInstance(Host.InspectorFrontendHost.InspectorFrontendHostStub);\n    const projectSettingsModel = sinon.createStubInstance(ProjectSettings.ProjectSettingsModel.ProjectSettingsModel);\n    sinon.stub(projectSettingsModel, 'projectSettings').value({workspace: {root, uuid}});\n    const manager = AutomaticFileSystemManager.instance({\n      forceNew: true,\n      hostConfig,\n      inspectorFrontendHost,\n      projectSettingsModel,\n    });\n    const [, , , setupCallback] = inspectorFrontendHost.connectAutomaticFileSystem.lastCall.args;\n    setupCallback({success: false});\n    await manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n    inspectorFrontendHost.connectAutomaticFileSystem.reset();\n    const connectingPromise = manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n\n    const successPromise = manager.connectAutomaticFileSystem(/* addIfMissing= */ true);\n    assert.strictEqual(manager.automaticFileSystem, await connectingPromise);\n    assert.deepEqual(manager.automaticFileSystem, {root, uuid, state: 'connecting'});\n    const connectedPromise = manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n    const [, , , connectCallback] = inspectorFrontendHost.connectAutomaticFileSystem.lastCall.args;\n    connectCallback({success: true});\n\n    const [success, automaticFileSystem] = await Promise.all([successPromise, connectedPromise]);\n    assert.isTrue(success);\n    assert.strictEqual(manager.automaticFileSystem, automaticFileSystem);\n    assert.deepEqual(manager.automaticFileSystem, {root, uuid, state: 'connected'});\n  });\n\n  it('correctly disconnects automatic file systems', async () => {\n    const inspectorFrontendHost = sinon.createStubInstance(Host.InspectorFrontendHost.InspectorFrontendHostStub);\n    const projectSettingsModel = sinon.createStubInstance(ProjectSettings.ProjectSettingsModel.ProjectSettingsModel);\n    sinon.stub(projectSettingsModel, 'projectSettings').value({workspace: {root, uuid}});\n    const manager = AutomaticFileSystemManager.instance({\n      forceNew: true,\n      hostConfig,\n      inspectorFrontendHost,\n      projectSettingsModel,\n    });\n    const [, , , setupCallback] = inspectorFrontendHost.connectAutomaticFileSystem.lastCall.args;\n    setupCallback({success: true});\n    await manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n    const automaticFileSystemPromise = manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n\n    manager.disconnectedAutomaticFileSystem();\n\n    const automaticFileSystem = await automaticFileSystemPromise;\n    assert(inspectorFrontendHost.disconnectAutomaticFileSystem.calledOnceWith(root));\n    assert.strictEqual(manager.automaticFileSystem, automaticFileSystem);\n    assert.deepEqual(manager.automaticFileSystem, {root, uuid, state: 'disconnected'});\n  });\n});\n"]}