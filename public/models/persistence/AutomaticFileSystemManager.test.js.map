{"version":3,"file":"AutomaticFileSystemManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/persistence/AutomaticFileSystemManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as ProjectSettings from '../project_settings/project_settings.js';\n\nimport * as Persistence from './persistence.js';\n\nfunction createStubInstances(\n    availability: ProjectSettings.ProjectSettingsModel.ProjectSettingsAvailability,\n    projectSettings: ProjectSettings.ProjectSettingsModel.ProjectSettings,\n) {\n  const inspectorFrontendHost =\n      sinon.createStubInstance(class extends Host.InspectorFrontendHost.InspectorFrontendHostStub {\n        override events = sinon.createStubInstance(Common.ObjectWrapper.ObjectWrapper);\n      });\n  inspectorFrontendHost.events = sinon.createStubInstance(Common.ObjectWrapper.ObjectWrapper);\n  const projectSettingsModel = sinon.createStubInstance(ProjectSettings.ProjectSettingsModel.ProjectSettingsModel);\n  sinon.stub(projectSettingsModel, 'availability').value(availability);\n  sinon.stub(projectSettingsModel, 'projectSettings').value(projectSettings);\n  return {inspectorFrontendHost, projectSettingsModel};\n}\n\ndescribe('Persistence', () => {\n  describe('AutomaticFileSystemManager', () => {\n    describe('AutomaticFileSystemManager', () => {\n      const AUTOMATIC_FILE_SYSTEM_CHANGED = Persistence.AutomaticFileSystemManager.Events.AUTOMATIC_FILE_SYSTEM_CHANGED;\n      const {AutomaticFileSystemManager} = Persistence.AutomaticFileSystemManager;\n      const root = '/path/to/bar' as Platform.DevToolsPath.RawPathString;\n      const uuid = '549bbf9b-48b2-4af7-aebd-d3ba68993094';\n\n      afterEach(() => {\n        AutomaticFileSystemManager.removeInstance();\n      });\n\n      it('initially doesn\\'t report an automatic file system', () => {\n        const {inspectorFrontendHost, projectSettingsModel} = createStubInstances('available', {});\n\n        const manager = AutomaticFileSystemManager.instance({\n          forceNew: true,\n          inspectorFrontendHost,\n          projectSettingsModel,\n        });\n\n        assert.isNull(manager.automaticFileSystem);\n      });\n\n      it('listens to FileSystemRemoved events', () => {\n        const {inspectorFrontendHost, projectSettingsModel} = createStubInstances('available', {});\n\n        const automaticFileSystemManager = AutomaticFileSystemManager.instance({\n          forceNew: true,\n          inspectorFrontendHost,\n          projectSettingsModel,\n        });\n\n        sinon.assert.calledOnceWithMatch(\n            inspectorFrontendHost.events.addEventListener, Host.InspectorFrontendHostAPI.Events.FileSystemRemoved,\n            sinon.match.func, automaticFileSystemManager);\n      });\n\n      it('attempts to automatically connect the file system initially', () => {\n        const {inspectorFrontendHost, projectSettingsModel} =\n            createStubInstances('available', {workspace: {root, uuid}});\n\n        const manager = AutomaticFileSystemManager.instance({\n          forceNew: true,\n          inspectorFrontendHost,\n          projectSettingsModel,\n        });\n\n        assert.deepEqual(manager.automaticFileSystem, {root, uuid, state: 'connecting'});\n        sinon.assert.calledOnceWithMatch(\n            inspectorFrontendHost.connectAutomaticFileSystem, root, uuid, false, sinon.match.func);\n      });\n\n      it('reflects state correctly when automatic connection succeeds', async () => {\n        const {inspectorFrontendHost, projectSettingsModel} =\n            createStubInstances('available', {workspace: {root, uuid}});\n\n        const manager = AutomaticFileSystemManager.instance({\n          forceNew: true,\n          inspectorFrontendHost,\n          projectSettingsModel,\n        });\n        const [, , , setupCallback] = inspectorFrontendHost.connectAutomaticFileSystem.lastCall.args;\n        setupCallback({success: true});\n        const automaticFileSystem = await manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n\n        assert.strictEqual(automaticFileSystem, manager.automaticFileSystem);\n        assert.deepEqual(automaticFileSystem, {root, uuid, state: 'connected'});\n      });\n\n      it('reflects state correctly when automatic connection fails', async () => {\n        const {inspectorFrontendHost, projectSettingsModel} =\n            createStubInstances('available', {workspace: {root, uuid}});\n\n        const manager = AutomaticFileSystemManager.instance({\n          forceNew: true,\n          inspectorFrontendHost,\n          projectSettingsModel,\n        });\n        const [, , , setupCallback] = inspectorFrontendHost.connectAutomaticFileSystem.lastCall.args;\n        setupCallback({success: false});\n        const automaticFileSystem = await manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n\n        assert.strictEqual(automaticFileSystem, manager.automaticFileSystem);\n        assert.deepEqual(automaticFileSystem, {root, uuid, state: 'disconnected'});\n      });\n\n      it('performs first-time setup of automatic file system correctly', async () => {\n        const {inspectorFrontendHost, projectSettingsModel} =\n            createStubInstances('available', {workspace: {root, uuid}});\n        const manager = AutomaticFileSystemManager.instance({\n          forceNew: true,\n          inspectorFrontendHost,\n          projectSettingsModel,\n        });\n        const [, , , setupCallback] = inspectorFrontendHost.connectAutomaticFileSystem.lastCall.args;\n        setupCallback({success: false});\n        await manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n        inspectorFrontendHost.connectAutomaticFileSystem.reset();\n        const connectingPromise = manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n\n        const successPromise = manager.connectAutomaticFileSystem(/* addIfMissing= */ true);\n        assert.strictEqual(manager.automaticFileSystem, await connectingPromise);\n        assert.deepEqual(manager.automaticFileSystem, {root, uuid, state: 'connecting'});\n        const connectedPromise = manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n        const [, , , connectCallback] = inspectorFrontendHost.connectAutomaticFileSystem.lastCall.args;\n        connectCallback({success: true});\n\n        const [success, automaticFileSystem] = await Promise.all([successPromise, connectedPromise]);\n        assert.isTrue(success);\n        assert.strictEqual(manager.automaticFileSystem, automaticFileSystem);\n        assert.deepEqual(manager.automaticFileSystem, {root, uuid, state: 'connected'});\n      });\n\n      it('correctly disconnects automatic file systems', async () => {\n        const {inspectorFrontendHost, projectSettingsModel} =\n            createStubInstances('available', {workspace: {root, uuid}});\n        const manager = AutomaticFileSystemManager.instance({\n          forceNew: true,\n          inspectorFrontendHost,\n          projectSettingsModel,\n        });\n        const [, , , setupCallback] = inspectorFrontendHost.connectAutomaticFileSystem.lastCall.args;\n        setupCallback({success: true});\n        await manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n        const automaticFileSystemPromise = manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n\n        manager.disconnectedAutomaticFileSystem();\n\n        const automaticFileSystem = await automaticFileSystemPromise;\n        sinon.assert.calledOnceWithExactly(inspectorFrontendHost.disconnectAutomaticFileSystem, root);\n        assert.strictEqual(manager.automaticFileSystem, automaticFileSystem);\n        assert.deepEqual(manager.automaticFileSystem, {root, uuid, state: 'disconnected'});\n      });\n\n      it('reflects disconnected state correctly when the file system is removed', async () => {\n        const {inspectorFrontendHost, projectSettingsModel} =\n            createStubInstances('available', {workspace: {root, uuid}});\n        const manager = AutomaticFileSystemManager.instance({\n          forceNew: true,\n          inspectorFrontendHost,\n          projectSettingsModel,\n        });\n        const [, fileSystemRemoved] = inspectorFrontendHost.events.addEventListener.lastCall.args;\n        const [, , , setupCallback] = inspectorFrontendHost.connectAutomaticFileSystem.lastCall.args;\n        setupCallback({success: true});\n        await manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n        const automaticFileSystemPromise = manager.once(AUTOMATIC_FILE_SYSTEM_CHANGED);\n\n        fileSystemRemoved.call(manager, {data: root});\n\n        const automaticFileSystem = await automaticFileSystemPromise;\n        assert.strictEqual(manager.automaticFileSystem, automaticFileSystem);\n        assert.deepEqual(manager.automaticFileSystem, {root, uuid, state: 'disconnected'});\n      });\n\n      it('reports available when project settings are available', () => {\n        const {inspectorFrontendHost, projectSettingsModel} = createStubInstances('available', {});\n\n        const manager = AutomaticFileSystemManager.instance({\n          forceNew: true,\n          inspectorFrontendHost,\n          projectSettingsModel,\n        });\n\n        assert.strictEqual(manager.availability, 'available');\n      });\n\n      it('reports unavailable when project settings are unavailable', () => {\n        const {inspectorFrontendHost, projectSettingsModel} = createStubInstances('unavailable', {});\n\n        const manager = AutomaticFileSystemManager.instance({\n          forceNew: true,\n          inspectorFrontendHost,\n          projectSettingsModel,\n        });\n\n        assert.strictEqual(manager.availability, 'unavailable');\n      });\n    });\n  });\n});\n"]}