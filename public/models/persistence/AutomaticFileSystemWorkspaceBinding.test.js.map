{"version":3,"file":"AutomaticFileSystemWorkspaceBinding.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/persistence/AutomaticFileSystemWorkspaceBinding.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport * as Persistence from './persistence.js';\n\ndescribe('Persistence', () => {\n  describe('AutomaticFileSystemWorkspaceBinding', () => {\n    const {AutomaticFileSystemManager, Events: AutomaticFileSystemManagerEvents} =\n        Persistence.AutomaticFileSystemManager;\n    const {AutomaticFileSystemWorkspaceBinding, FileSystem} = Persistence.AutomaticFileSystemWorkspaceBinding;\n    const {IsolatedFileSystemManager} = Persistence.IsolatedFileSystemManager;\n    const {PlatformFileSystem} = Persistence.PlatformFileSystem;\n    const root = '/path/to/bar' as Platform.DevToolsPath.RawPathString;\n    const rootURL = Platform.DevToolsPath.urlString`file://${root}`;\n    const uuid = '549bbf9b-48b2-4af7-aebd-d3ba68993094';\n\n    describe('FileSystem', () => {\n      it('is of type ConnectableFileSystem', () => {\n        const automaticFileSystemManager = sinon.createStubInstance(AutomaticFileSystemManager);\n        const workspace = sinon.createStubInstance(Workspace.Workspace.WorkspaceImpl);\n        const fileSystem = new FileSystem({root, uuid, state: 'disconnected'}, automaticFileSystemManager, workspace);\n\n        assert.strictEqual(fileSystem.type(), Workspace.Workspace.projectTypes.ConnectableFileSystem);\n      });\n\n      it('uses the last path component as display name', () => {\n        const automaticFileSystemManager = sinon.createStubInstance(AutomaticFileSystemManager);\n        const workspace = sinon.createStubInstance(Workspace.Workspace.WorkspaceImpl);\n        const fileSystem = new FileSystem({root, uuid, state: 'disconnected'}, automaticFileSystemManager, workspace);\n\n        assert.strictEqual(fileSystem.displayName(), 'bar');\n      });\n    });\n\n    describe('AutomaticFileSystemWorkspaceBinding', () => {\n      afterEach(() => {\n        AutomaticFileSystemWorkspaceBinding.removeInstance();\n      });\n\n      it('listens to automatic file system changes', () => {\n        const automaticFileSystemManager = sinon.createStubInstance(AutomaticFileSystemManager);\n        sinon.stub(automaticFileSystemManager, 'automaticFileSystem').value(null);\n        const isolatedFileSystemManager = sinon.createStubInstance(IsolatedFileSystemManager);\n        const workspace = sinon.createStubInstance(Workspace.Workspace.WorkspaceImpl);\n\n        const automaticFileSystemWorkspaceBinding = AutomaticFileSystemWorkspaceBinding.instance({\n          forceNew: true,\n          automaticFileSystemManager,\n          isolatedFileSystemManager,\n          workspace,\n        });\n\n        sinon.assert.calledOnceWithMatch(\n            automaticFileSystemManager.addEventListener, AutomaticFileSystemManagerEvents.AUTOMATIC_FILE_SYSTEM_CHANGED,\n            sinon.match.func, automaticFileSystemWorkspaceBinding);\n      });\n\n      it('doesn\\'t add a placeholder project when there\\'s no automatic file system', () => {\n        const automaticFileSystemManager = sinon.createStubInstance(AutomaticFileSystemManager);\n        sinon.stub(automaticFileSystemManager, 'automaticFileSystem').value(null);\n        const isolatedFileSystemManager = sinon.createStubInstance(IsolatedFileSystemManager);\n        const workspace = sinon.createStubInstance(Workspace.Workspace.WorkspaceImpl);\n\n        AutomaticFileSystemWorkspaceBinding.instance({\n          forceNew: true,\n          automaticFileSystemManager,\n          isolatedFileSystemManager,\n          workspace,\n        });\n\n        sinon.assert.notCalled(workspace.addProject);\n      });\n\n      it('doesn\\'t add a placeholder project when there\\'s a connected automatic file system', () => {\n        const automaticFileSystemManager = sinon.createStubInstance(AutomaticFileSystemManager);\n        sinon.stub(automaticFileSystemManager, 'automaticFileSystem').value({root, uuid, state: 'connected'});\n        const isolatedFileSystemManager = sinon.createStubInstance(IsolatedFileSystemManager);\n        const workspace = sinon.createStubInstance(Workspace.Workspace.WorkspaceImpl);\n\n        AutomaticFileSystemWorkspaceBinding.instance({\n          forceNew: true,\n          automaticFileSystemManager,\n          isolatedFileSystemManager,\n          workspace,\n        });\n\n        sinon.assert.notCalled(workspace.addProject);\n      });\n\n      it('doesn\\'t add a placeholder project when there\\'s a manually added file system with the same path', () => {\n        const automaticFileSystemManager = sinon.createStubInstance(AutomaticFileSystemManager);\n        sinon.stub(automaticFileSystemManager, 'automaticFileSystem').value({root, uuid, state: 'connecting'});\n        const isolatedFileSystemManager = sinon.createStubInstance(IsolatedFileSystemManager);\n        isolatedFileSystemManager.fileSystem.returns(sinon.createStubInstance(PlatformFileSystem));\n        const workspace = sinon.createStubInstance(Workspace.Workspace.WorkspaceImpl);\n\n        AutomaticFileSystemWorkspaceBinding.instance({\n          forceNew: true,\n          automaticFileSystemManager,\n          isolatedFileSystemManager,\n          workspace,\n        });\n\n        sinon.assert.calledOnceWithExactly(isolatedFileSystemManager.fileSystem, rootURL);\n        sinon.assert.notCalled(workspace.addProject);\n      });\n\n      it('adds a placeholder project when there\\'s a connecting automatic file system', () => {\n        const automaticFileSystem = {root, uuid, state: 'connecting'};\n        const automaticFileSystemManager = sinon.createStubInstance(AutomaticFileSystemManager);\n        sinon.stub(automaticFileSystemManager, 'automaticFileSystem').value(automaticFileSystem);\n        const isolatedFileSystemManager = sinon.createStubInstance(IsolatedFileSystemManager);\n        isolatedFileSystemManager.fileSystem.returns(null);\n        const workspace = sinon.createStubInstance(Workspace.Workspace.WorkspaceImpl);\n\n        AutomaticFileSystemWorkspaceBinding.instance({\n          forceNew: true,\n          automaticFileSystemManager,\n          isolatedFileSystemManager,\n          workspace,\n        });\n\n        sinon.assert.calledOnceWithExactly(isolatedFileSystemManager.fileSystem, rootURL);\n        sinon.assert.calledOnceWithMatch(\n            workspace.addProject,\n            sinon.match.instanceOf(FileSystem).and(sinon.match.has('automaticFileSystem', automaticFileSystem)));\n      });\n\n      it('adds a placeholder project when there\\'s a disconnected automatic file system', () => {\n        const automaticFileSystem = {root, uuid, state: 'disconnected'};\n        const automaticFileSystemManager = sinon.createStubInstance(AutomaticFileSystemManager);\n        sinon.stub(automaticFileSystemManager, 'automaticFileSystem').value(automaticFileSystem);\n        const isolatedFileSystemManager = sinon.createStubInstance(IsolatedFileSystemManager);\n        isolatedFileSystemManager.fileSystem.returns(null);\n        const workspace = sinon.createStubInstance(Workspace.Workspace.WorkspaceImpl);\n\n        AutomaticFileSystemWorkspaceBinding.instance({\n          forceNew: true,\n          automaticFileSystemManager,\n          isolatedFileSystemManager,\n          workspace,\n        });\n\n        sinon.assert.calledOnceWithMatch(\n            workspace.addProject,\n            sinon.match.instanceOf(FileSystem).and(sinon.match.has('automaticFileSystem', automaticFileSystem)));\n      });\n\n      it('correctly transitions from none to disconnected automatic file system', () => {\n        const automaticFileSystemManager = sinon.createStubInstance(AutomaticFileSystemManager);\n        sinon.stub(automaticFileSystemManager, 'automaticFileSystem').value(null);\n        const isolatedFileSystemManager = sinon.createStubInstance(IsolatedFileSystemManager);\n        isolatedFileSystemManager.fileSystem.returns(null);\n        const workspace = sinon.createStubInstance(Workspace.Workspace.WorkspaceImpl);\n        const automaticFileSystemWorkspaceBinding = AutomaticFileSystemWorkspaceBinding.instance({\n          forceNew: true,\n          automaticFileSystemManager,\n          isolatedFileSystemManager,\n          workspace,\n        });\n        const [, automaticFileSystemChanged] = automaticFileSystemManager.addEventListener.lastCall.args;\n\n        const automaticFileSystem = {root, uuid, state: 'disconnected'} as const;\n        sinon.stub(automaticFileSystemManager, 'automaticFileSystem').value(automaticFileSystem);\n        automaticFileSystemChanged.call(automaticFileSystemWorkspaceBinding, {data: automaticFileSystem});\n\n        sinon.assert.calledOnceWithMatch(\n            workspace.addProject,\n            sinon.match.instanceOf(FileSystem).and(sinon.match.has('automaticFileSystem', automaticFileSystem)));\n      });\n\n      it('correctly transitions from disconnected to connecting automatic file system', () => {\n        const automaticFileSystemManager = sinon.createStubInstance(AutomaticFileSystemManager);\n        sinon.stub(automaticFileSystemManager, 'automaticFileSystem').value({root, uuid, state: 'disconnected'});\n        const isolatedFileSystemManager = sinon.createStubInstance(IsolatedFileSystemManager);\n        isolatedFileSystemManager.fileSystem.returns(null);\n        const workspace = sinon.createStubInstance(Workspace.Workspace.WorkspaceImpl);\n        const automaticFileSystemWorkspaceBinding = AutomaticFileSystemWorkspaceBinding.instance({\n          forceNew: true,\n          automaticFileSystemManager,\n          isolatedFileSystemManager,\n          workspace,\n        });\n        const [, automaticFileSystemChanged] = automaticFileSystemManager.addEventListener.lastCall.args;\n        const [fileSystem] = workspace.addProject.lastCall.args;\n        workspace.addProject.resetHistory();\n\n        const automaticFileSystem = {root, uuid, state: 'connecting'} as const;\n        sinon.stub(automaticFileSystemManager, 'automaticFileSystem').value(automaticFileSystem);\n        automaticFileSystemChanged.call(automaticFileSystemWorkspaceBinding, {data: automaticFileSystem});\n\n        sinon.assert.calledOnceWithExactly(workspace.removeProject, fileSystem);\n        sinon.assert.calledOnceWithMatch(\n            workspace.addProject,\n            sinon.match.instanceOf(FileSystem).and(sinon.match.has('automaticFileSystem', automaticFileSystem)));\n      });\n\n      it('correctly transitions from connecting to connected automatic file system', () => {\n        const automaticFileSystemManager = sinon.createStubInstance(AutomaticFileSystemManager);\n        sinon.stub(automaticFileSystemManager, 'automaticFileSystem').value({root, uuid, state: 'connecting'});\n        const isolatedFileSystemManager = sinon.createStubInstance(IsolatedFileSystemManager);\n        isolatedFileSystemManager.fileSystem.returns(null);\n        const workspace = sinon.createStubInstance(Workspace.Workspace.WorkspaceImpl);\n        const automaticFileSystemWorkspaceBinding = AutomaticFileSystemWorkspaceBinding.instance({\n          forceNew: true,\n          automaticFileSystemManager,\n          isolatedFileSystemManager,\n          workspace,\n        });\n        const [, automaticFileSystemChanged] = automaticFileSystemManager.addEventListener.lastCall.args;\n        const [fileSystem] = workspace.addProject.lastCall.args;\n        workspace.addProject.resetHistory();\n\n        const automaticFileSystem = {root, uuid, state: 'connected'} as const;\n        sinon.stub(automaticFileSystemManager, 'automaticFileSystem').value(automaticFileSystem);\n        automaticFileSystemChanged.call(automaticFileSystemWorkspaceBinding, {data: automaticFileSystem});\n\n        sinon.assert.calledOnceWithExactly(workspace.removeProject, fileSystem);\n        sinon.assert.notCalled(workspace.addProject);\n      });\n    });\n  });\n});\n"]}