{"version":3,"file":"PlatformFileSystem.js","sourceRoot":"","sources":["../../../../../../front_end/models/persistence/PlatformFileSystem.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as TextUtils from '../text_utils/text_utils.js';\n\nconst UIStrings = {\n  /**\n   * @description Assertion error message when failing to load a file.\n   */\n  unableToReadFilesWithThis: '`PlatformFileSystem` cannot read files.',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/PlatformFileSystem.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport enum PlatformFileSystemType {\n  /**\n   * Snippets are implemented as a PlatformFileSystem but they are\n   * actually stored in the browser's profile directory and do not\n   * create files on the actual filesystem.\n   *\n   * See Sources > Snippets in the UI.\n   */\n  SNIPPETS = 'snippets',\n  /**\n   * Overrides is a filesystem that represents a user-selected folder on\n   * disk. This folder is used to replace page resources using request\n   * interception.\n   *\n   * See Sources > Overrides in the UI.\n   */\n  OVERRIDES = 'overrides',\n  /**\n   * Represents a filesystem for a workspace folder that the user added\n   * to DevTools. It can be manually connected or it can be\n   * automatically discovered based on the hints found in devtools.json\n   * served by the inspected page (see\n   * https://goo.gle/devtools-json-design). DevTools tries to map the\n   * page content to the content in such folder but does not use request\n   * interception for this.\n   */\n  WORKSPACE_PROJECT = 'workspace-project',\n}\n\nexport class PlatformFileSystem {\n  private readonly pathInternal: Platform.DevToolsPath.UrlString;\n  #type: PlatformFileSystemType;\n  #automatic: boolean;\n  constructor(path: Platform.DevToolsPath.UrlString, type: PlatformFileSystemType, automatic: boolean) {\n    this.pathInternal = path;\n    this.#type = type;\n    this.#automatic = automatic;\n  }\n\n  getMetadata(_path: Platform.DevToolsPath.EncodedPathString): Promise<{modificationTime: Date, size: number}|null> {\n    return Promise.resolve(null);\n  }\n\n  initialFilePaths(): Platform.DevToolsPath.EncodedPathString[] {\n    return [];\n  }\n\n  initialGitFolders(): Platform.DevToolsPath.EncodedPathString[] {\n    return [];\n  }\n\n  path(): Platform.DevToolsPath.UrlString {\n    return this.pathInternal;\n  }\n\n  embedderPath(): Platform.DevToolsPath.RawPathString {\n    throw new Error('Not implemented');\n  }\n\n  type(): string {\n    return this.#type;\n  }\n\n  /**\n   * True if the filesystem was automatically discovered (see\n   * https://goo.gle/devtools-json-design).\n   */\n  automatic(): boolean {\n    return this.#automatic;\n  }\n\n  async createFile(_path: Platform.DevToolsPath.EncodedPathString, _name: Platform.DevToolsPath.RawPathString|null):\n      Promise<Platform.DevToolsPath.EncodedPathString|null> {\n    return await Promise.resolve(null);\n  }\n\n  deleteFile(_path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  deleteDirectoryRecursively(_path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  requestFileBlob(_path: Platform.DevToolsPath.EncodedPathString): Promise<Blob|null> {\n    return Promise.resolve(null as Blob | null);\n  }\n\n  async requestFileContent(_path: Platform.DevToolsPath.EncodedPathString):\n      Promise<TextUtils.ContentData.ContentDataOrError> {\n    return {error: i18nString(UIStrings.unableToReadFilesWithThis)};\n  }\n\n  setFileContent(_path: Platform.DevToolsPath.EncodedPathString, _content: string, _isBase64: boolean): void {\n    throw new Error('Not implemented');\n  }\n\n  renameFile(\n      _path: Platform.DevToolsPath.EncodedPathString, _newName: Platform.DevToolsPath.RawPathString,\n      callback: (arg0: boolean, arg1?: string|undefined) => void): void {\n    callback(false);\n  }\n\n  addExcludedFolder(_path: Platform.DevToolsPath.EncodedPathString): void {\n  }\n\n  removeExcludedFolder(_path: Platform.DevToolsPath.EncodedPathString): void {\n  }\n\n  fileSystemRemoved(): void {\n  }\n\n  isFileExcluded(_folderPath: Platform.DevToolsPath.EncodedPathString): boolean {\n    return false;\n  }\n\n  excludedFolders(): Set<Platform.DevToolsPath.EncodedPathString> {\n    return new Set();\n  }\n\n  searchInPath(_query: string, _progress: Common.Progress.Progress): Promise<string[]> {\n    return Promise.resolve([]);\n  }\n\n  indexContent(progress: Common.Progress.Progress): void {\n    queueMicrotask(() => {\n      progress.done();\n    });\n  }\n\n  mimeFromPath(_path: Platform.DevToolsPath.UrlString): string {\n    throw new Error('Not implemented');\n  }\n\n  canExcludeFolder(_path: Platform.DevToolsPath.EncodedPathString): boolean {\n    return false;\n  }\n\n  contentType(_path: string): Common.ResourceType.ResourceType {\n    throw new Error('Not implemented');\n  }\n\n  tooltipForURL(_url: Platform.DevToolsPath.UrlString): string {\n    throw new Error('Not implemented');\n  }\n\n  supportsAutomapping(): boolean {\n    throw new Error('Not implemented');\n  }\n}\n"]}