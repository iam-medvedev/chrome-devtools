{"version":3,"file":"ProjectSettingsModel.js","sourceRoot":"","sources":["../../../../../../front_end/models/project_settings/ProjectSettingsModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\n/**\n * The structure of the project settings.\n *\n * @see https://goo.gle/devtools-json-design\n */\nexport interface ProjectSettings {\n  readonly workspace?: {readonly root: Platform.DevToolsPath.RawPathString, readonly uuid: string};\n}\n\nconst EMPTY_PROJECT_SETTINGS: ProjectSettings = Object.freeze({});\nconst IDLE_PROMISE: Promise<void> = Promise.resolve();\n\nlet projectSettingsModelInstance: ProjectSettingsModel|undefined;\n\nexport class ProjectSettingsModel extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #pageResourceLoader: SDK.PageResourceLoader.PageResourceLoader;\n  readonly #targetManager: SDK.TargetManager.TargetManager;\n  #projectSettings: ProjectSettings = EMPTY_PROJECT_SETTINGS;\n  #promise: Promise<void> = IDLE_PROMISE;\n\n  /**\n   * Yields the current project settings.\n   *\n   * @return the current project settings.\n   */\n  get projectSettings(): ProjectSettings {\n    return this.#projectSettings;\n  }\n\n  get projectSettingsPromise(): Promise<ProjectSettings> {\n    return this.#promise.then(() => this.#projectSettings);\n  }\n\n  private constructor(\n      hostConfig: Root.Runtime.HostConfig,\n      pageResourceLoader: SDK.PageResourceLoader.PageResourceLoader,\n      targetManager: SDK.TargetManager.TargetManager,\n  ) {\n    super();\n    this.#pageResourceLoader = pageResourceLoader;\n    this.#targetManager = targetManager;\n    if (hostConfig.devToolsWellKnown?.enabled) {\n      this.#targetManager.addEventListener(\n          SDK.TargetManager.Events.INSPECTED_URL_CHANGED,\n          this.#inspectedURLChanged,\n          this,\n      );\n      const target = this.#targetManager.primaryPageTarget();\n      if (target !== null) {\n        this.#inspectedURLChanged({data: target});\n      }\n    }\n  }\n\n  /**\n   * Yields the `ProjectSettingsModel` singleton.\n   *\n   * @returns the singleton.\n   */\n  static instance({forceNew, hostConfig, pageResourceLoader, targetManager}: {\n    forceNew: boolean|null,\n    hostConfig: Root.Runtime.HostConfig|null,\n    pageResourceLoader: SDK.PageResourceLoader.PageResourceLoader|null,\n    targetManager: SDK.TargetManager.TargetManager|null,\n  }): ProjectSettingsModel {\n    if (!projectSettingsModelInstance || forceNew) {\n      if (!hostConfig || !pageResourceLoader || !targetManager) {\n        throw new Error(\n            'Unable to create ProjectSettingsModel: ' +\n            'hostConfig, pageResourceLoader, and targetManager must be provided');\n      }\n      projectSettingsModelInstance = new ProjectSettingsModel(hostConfig, pageResourceLoader, targetManager);\n    }\n    return projectSettingsModelInstance;\n  }\n\n  /**\n   * Clears the `ProjectSettingsModel` singleton (if any).\n   */\n  static removeInstance(): void {\n    if (projectSettingsModelInstance) {\n      projectSettingsModelInstance.#dispose();\n      projectSettingsModelInstance = undefined;\n    }\n  }\n\n  #dispose(): void {\n    this.#targetManager.removeEventListener(\n        SDK.TargetManager.Events.INSPECTED_URL_CHANGED,\n        this.#inspectedURLChanged,\n        this,\n    );\n  }\n\n  #inspectedURLChanged(event: Common.EventTarget.EventTargetEvent<SDK.Target.Target>): void {\n    const target = event.data;\n\n    const promise = this.#promise = this.#promise.then(async(): Promise<void> => {\n      let projectSettings: ProjectSettings = EMPTY_PROJECT_SETTINGS;\n      try {\n        projectSettings = await this.#loadAndValidateProjectSettings(target);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.debug(`Could not load project settings for ${target.inspectedURL()}: ${error.message}`);\n      }\n      if (this.#promise === promise) {\n        if (this.#projectSettings !== projectSettings) {\n          this.#projectSettings = projectSettings;\n          this.dispatchEventToListeners(Events.PROJECT_SETTINGS_CHANGED, projectSettings);\n        }\n        this.#promise = IDLE_PROMISE;\n      }\n    });\n  }\n\n  async #loadAndValidateProjectSettings(target: SDK.Target.Target): Promise<ProjectSettings> {\n    const frame = target.model(SDK.ResourceTreeModel.ResourceTreeModel)?.mainFrame;\n    if (!frame?.securityOriginDetails?.isLocalhost) {\n      return EMPTY_PROJECT_SETTINGS;\n    }\n    const initiatorUrl = frame.url;\n    const frameId = frame.id;\n    const url = new URL('/.well-known/appspecific/com.chrome.devtools.json', initiatorUrl);\n    const {content} = await this.#pageResourceLoader.loadResource(\n        Platform.DevToolsPath.urlString`${url}`,\n        {target, frameId, initiatorUrl},\n    );\n    const devtoolsJSON = JSON.parse(content);\n    if (typeof devtoolsJSON.workspace !== 'undefined') {\n      const {workspace} = devtoolsJSON;\n      if (typeof workspace !== 'object' || workspace === null) {\n        throw new Error('Invalid \"workspace\" field');\n      }\n      if (typeof workspace.root !== 'string') {\n        throw new Error('Invalid or missing \"workspace.root\" field');\n      }\n      if (typeof workspace.uuid !== 'string') {\n        throw new Error('Invalid or missing \"workspace.uuid\" field');\n      }\n    }\n    return Object.freeze(devtoolsJSON);\n  }\n}\n\nexport const enum Events {\n  PROJECT_SETTINGS_CHANGED = 'ProjectSettingsChanged',\n}\n\nexport interface EventTypes {\n  [Events.PROJECT_SETTINGS_CHANGED]: ProjectSettings;\n}\n"]}