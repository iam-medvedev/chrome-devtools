{
  "version": 3,
  "sources": ["../../../../../../front_end/models/project_settings/ProjectSettingsModel.ts"],
  "sourcesContent": ["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\n/** The security origin for all DevTools (front-end) resources. */\nconst DEVTOOLS_SECURITY_ORIGIN = 'devtools://devtools';\n\n/** The (absolute) path to the project settings file. */\nconst WELL_KNOWN_DEVTOOLS_JSON_PATH = '/.well-known/appspecific/com.chrome.devtools.json';\n\n/**\n * Checks if the origin of the `url` is `devtools://devtools` (meaning that it's\n * served by the `DevToolsDataSource` in Chromium) and it's path starts with\n * `/bundled/`.\n *\n * @param url the URL string to check.\n * @returns `true` if `url` refers to a resource in the Chromium DevTools bundle.\n */\nfunction isDevToolsBundledURL(url: string): boolean {\n  return url.startsWith(`${DEVTOOLS_SECURITY_ORIGIN}/bundled/`);\n}\n\n/**\n * Checks if the `frame` should be considered local and safe for loading the\n * project settings from.\n *\n * This checks the security origin of `frame` for whether Chromium considers it\n * to be localhost. It also supports special logic for when the origin of the\n * `frame` is `'devtools://devtools'`, in which case we check whether the path\n * starts with `'/bundled/'` and `debugFrontend=true` is passed as a query\n * parameter (indicating that `--custom-devtools-frontend=` command line option\n * was used).\n *\n * @param frame the `ResourceTreeFrame` to check.\n * @returns `true` if `frame` is considered safe for loading the project settings.\n * @see https://goo.gle/devtools-json-design\n */\nfunction isLocalFrame(frame: SDK.ResourceTreeModel.ResourceTreeFrame|null|undefined):\n    frame is SDK.ResourceTreeModel.ResourceTreeFrame {\n  if (!frame) {\n    return false;\n  }\n  if (isDevToolsBundledURL(frame.url)) {\n    return new URL(frame.url).searchParams.get('debugFrontend') === 'true';\n  }\n  return frame.securityOriginDetails?.isLocalhost ?? false;\n}\n\n/**\n * The structure of the project settings.\n *\n * @see https://goo.gle/devtools-json-design\n */\nexport interface ProjectSettings {\n  readonly workspace?: {readonly root: Platform.DevToolsPath.RawPathString, readonly uuid: string};\n}\n\n/**\n * Indicates the availability of the project settings feature.\n *\n * `'available'` means that the feature is enabled, the origin of the inspected\n * page is `localhost`. It doesn't however indicate whether or not the page is\n * actually providing a `com.chrome.devtools.json` or not.\n */\nexport type ProjectSettingsAvailability = 'available'|'unavailable';\n\nconst EMPTY_PROJECT_SETTINGS: ProjectSettings = Object.freeze({});\nconst IDLE_PROMISE: Promise<void> = Promise.resolve();\n\nlet projectSettingsModelInstance: ProjectSettingsModel|undefined;\n\nexport class ProjectSettingsModel extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #pageResourceLoader: SDK.PageResourceLoader.PageResourceLoader;\n  readonly #targetManager: SDK.TargetManager.TargetManager;\n  #availability: ProjectSettingsAvailability = 'unavailable';\n  #projectSettings: ProjectSettings = EMPTY_PROJECT_SETTINGS;\n  #promise: Promise<void> = IDLE_PROMISE;\n\n  /**\n   * Yields the availability of the project settings feature.\n   *\n   * `'available'` means that the feature is enabled, the origin of the inspected\n   * page is `localhost`. It doesn't however indicate whether or not the page is\n   * actually providing a `com.chrome.devtools.json` or not.\n   *\n   * @returns `'available'` if the feature is enabled and the inspected page is\n   *         `localhost`, otherwise `'unavailable'`.\n   */\n  get availability(): ProjectSettingsAvailability {\n    return this.#availability;\n  }\n\n  /**\n   * Yields the current project settings.\n   *\n   * @returns the current project settings.\n   */\n  get projectSettings(): ProjectSettings {\n    return this.#projectSettings;\n  }\n\n  get projectSettingsPromise(): Promise<ProjectSettings> {\n    return this.#promise.then(() => this.#projectSettings);\n  }\n\n  private constructor(\n      hostConfig: Root.Runtime.HostConfig,\n      pageResourceLoader: SDK.PageResourceLoader.PageResourceLoader,\n      targetManager: SDK.TargetManager.TargetManager,\n  ) {\n    super();\n    this.#pageResourceLoader = pageResourceLoader;\n    this.#targetManager = targetManager;\n    if (hostConfig.devToolsWellKnown?.enabled) {\n      this.#targetManager.addEventListener(\n          SDK.TargetManager.Events.INSPECTED_URL_CHANGED,\n          this.#inspectedURLChanged,\n          this,\n      );\n      const target = this.#targetManager.primaryPageTarget();\n      if (target !== null) {\n        this.#inspectedURLChanged({data: target});\n      }\n    }\n  }\n\n  /**\n   * Yields the `ProjectSettingsModel` singleton.\n   *\n   * @returns the singleton.\n   */\n  static instance({forceNew, hostConfig, pageResourceLoader, targetManager}: {\n    forceNew: boolean|null,\n    hostConfig: Root.Runtime.HostConfig|null,\n    pageResourceLoader: SDK.PageResourceLoader.PageResourceLoader|null,\n    targetManager: SDK.TargetManager.TargetManager|null,\n  }): ProjectSettingsModel {\n    if (!projectSettingsModelInstance || forceNew) {\n      if (!hostConfig || !pageResourceLoader || !targetManager) {\n        throw new Error(\n            'Unable to create ProjectSettingsModel: ' +\n            'hostConfig, pageResourceLoader, and targetManager must be provided');\n      }\n      projectSettingsModelInstance = new ProjectSettingsModel(hostConfig, pageResourceLoader, targetManager);\n    }\n    return projectSettingsModelInstance;\n  }\n\n  /**\n   * Clears the `ProjectSettingsModel` singleton (if any).\n   */\n  static removeInstance(): void {\n    if (projectSettingsModelInstance) {\n      projectSettingsModelInstance.#dispose();\n      projectSettingsModelInstance = undefined;\n    }\n  }\n\n  #dispose(): void {\n    this.#targetManager.removeEventListener(\n        SDK.TargetManager.Events.INSPECTED_URL_CHANGED,\n        this.#inspectedURLChanged,\n        this,\n    );\n  }\n\n  #inspectedURLChanged(event: Common.EventTarget.EventTargetEvent<SDK.Target.Target>): void {\n    const target = event.data;\n\n    const promise = this.#promise = this.#promise.then(async(): Promise<void> => {\n      let projectSettings: ProjectSettings = EMPTY_PROJECT_SETTINGS;\n      try {\n        projectSettings = await this.#loadAndValidateProjectSettings(target);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.debug(`Could not load project settings for ${target.inspectedURL()}: ${error.message}`);\n      }\n      if (this.#promise === promise) {\n        if (this.#projectSettings !== projectSettings) {\n          this.#projectSettings = projectSettings;\n          this.dispatchEventToListeners(Events.PROJECT_SETTINGS_CHANGED, projectSettings);\n        }\n        this.#promise = IDLE_PROMISE;\n      }\n    });\n  }\n\n  async #loadAndValidateProjectSettings(target: SDK.Target.Target): Promise<ProjectSettings> {\n    const frame = target.model(SDK.ResourceTreeModel.ResourceTreeModel)?.mainFrame;\n    if (!isLocalFrame(frame)) {\n      if (this.#availability !== 'unavailable') {\n        this.#availability = 'unavailable';\n        this.dispatchEventToListeners(Events.AVAILABILITY_CHANGED, this.#availability);\n      }\n      return EMPTY_PROJECT_SETTINGS;\n    }\n    if (this.#availability !== 'available') {\n      this.#availability = 'available';\n      this.dispatchEventToListeners(Events.AVAILABILITY_CHANGED, this.#availability);\n    }\n    const initiatorUrl = frame.url;\n    const frameId = frame.id;\n    let url = WELL_KNOWN_DEVTOOLS_JSON_PATH;\n    if (isDevToolsBundledURL(initiatorUrl)) {\n      url = '/bundled' + url;\n    }\n    url = new URL(url, initiatorUrl).toString();\n    const {content} = await this.#pageResourceLoader.loadResource(\n        Platform.DevToolsPath.urlString`${url}`,\n        {target, frameId, initiatorUrl},\n    );\n    const devtoolsJSON = JSON.parse(content);\n    if (typeof devtoolsJSON.workspace !== 'undefined') {\n      const {workspace} = devtoolsJSON;\n      if (typeof workspace !== 'object' || workspace === null) {\n        throw new Error('Invalid \"workspace\" field');\n      }\n      if (typeof workspace.root !== 'string') {\n        throw new Error('Invalid or missing \"workspace.root\" field');\n      }\n      if (typeof workspace.uuid !== 'string') {\n        throw new Error('Invalid or missing \"workspace.uuid\" field');\n      }\n    }\n    return Object.freeze(devtoolsJSON);\n  }\n}\n\n/**\n * Events emitted by the `ProjectSettingsModel`.\n */\nexport const enum Events {\n  /**\n   * Emitted whenever the `availability` property of the\n   * `ProjectSettingsModel` changes.\n   */\n  AVAILABILITY_CHANGED = 'AvailabilityChanged',\n\n  /**\n   * Emitted whenever the `projectSettings` property of the\n   * `ProjectSettingsModel` changes.\n   */\n  PROJECT_SETTINGS_CHANGED = 'ProjectSettingsChanged',\n}\n\n/**\n * @internal\n */\nexport interface EventTypes {\n  [Events.AVAILABILITY_CHANGED]: ProjectSettingsAvailability;\n  [Events.PROJECT_SETTINGS_CHANGED]: ProjectSettings;\n}\n"],
  "mappings": "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",
  "names": []
}
