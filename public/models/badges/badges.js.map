{
  "version": 3,
  "sources": ["../../../../../../front_end/models/badges/Badge.ts", "../../../../../../front_end/models/badges/SpeedsterBadge.ts", "../../../../../../front_end/models/badges/StarterBadge.ts", "../../../../../../front_end/models/badges/UserBadges.ts"],
  "sourcesContent": ["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\n\nexport enum BadgeAction {\n  CSS_RULE_MODIFIED = 'css-rule-modified',\n  PERFORMANCE_INSIGHT_CLICKED = 'performance-insight-clicked',\n}\n\nexport type BadgeActionEvents = Record<BadgeAction, void>;\n\nexport interface BadgeContext {\n  dispatchBadgeTriggeredEvent: (badge: Badge) => void;\n  badgeActionEventTarget: Common.ObjectWrapper.ObjectWrapper<BadgeActionEvents>;\n}\n\nexport abstract class Badge {\n  #dispatchBadgeTriggeredEvent: (badge: Badge) => void;\n  #badgeActionEventTarget: Common.ObjectWrapper.ObjectWrapper<BadgeActionEvents>;\n  #eventListeners: Common.EventTarget.EventDescriptor[] = [];\n  #triggeredBefore = false;\n\n  abstract readonly name: string;\n  abstract readonly title: string;\n  abstract readonly interestedActions: readonly BadgeAction[];\n  readonly isStarterBadge: boolean = false;\n\n  constructor(context: BadgeContext) {\n    this.#dispatchBadgeTriggeredEvent = context.dispatchBadgeTriggeredEvent;\n    this.#badgeActionEventTarget = context.badgeActionEventTarget;\n  }\n\n  abstract handleAction(action: BadgeAction): void;\n  protected trigger(): void {\n    if (this.#triggeredBefore) {\n      return;\n    }\n\n    this.#triggeredBefore = true;\n    this.deactivate();\n    this.#dispatchBadgeTriggeredEvent(this);\n  }\n\n  activate(): void {\n    // We don't reactivate a badge that's triggered before.\n    if (this.#triggeredBefore) {\n      return;\n    }\n\n    // The event listeners are already registered, we don't re-register them.\n    if (this.#eventListeners.length > 0) {\n      return;\n    }\n\n    this.#eventListeners =\n        this.interestedActions.map(actionType => this.#badgeActionEventTarget.addEventListener(actionType, () => {\n          this.handleAction(actionType);\n        }, this));\n  }\n\n  deactivate(): void {\n    if (!this.#eventListeners.length) {\n      return;\n    }\n\n    Common.EventTarget.removeEventListeners(this.#eventListeners);\n    this.#eventListeners = [];\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {Badge, BadgeAction} from './Badge.js';\n\nexport class SpeedsterBadge extends Badge {\n  override readonly name = 'awards/speedster';\n  override readonly title = 'Speedster';\n  override readonly interestedActions = [BadgeAction.PERFORMANCE_INSIGHT_CLICKED] as const;\n\n  handleAction(_action: BadgeAction): void {\n    this.trigger();\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {Badge, BadgeAction} from './Badge.js';\n\nexport class StarterBadge extends Badge {\n  override readonly isStarterBadge = true;\n  override readonly name = 'awards/chrome-devtools-user';\n  override readonly title = 'Chrome DevTools User';\n\n  // TODO(ergunsh): Add remaining non-trivial event definitions\n  override readonly interestedActions = [\n    BadgeAction.CSS_RULE_MODIFIED,\n  ] as const;\n\n  handleAction(_action: BadgeAction): void {\n    this.trigger();\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\n\nimport type {Badge, BadgeAction, BadgeActionEvents, BadgeContext} from './Badge.js';\nimport {SpeedsterBadge} from './SpeedsterBadge.js';\nimport {StarterBadge} from './StarterBadge.js';\n\ntype BadgeClass = new (badgeContext: BadgeContext) => Badge;\n\nexport const enum Events {\n  BADGE_TRIGGERED = 'BadgeTriggered',\n}\n\nexport interface EventTypes {\n  [Events.BADGE_TRIGGERED]: Badge;\n}\n\nlet userBadgesInstance: UserBadges|undefined = undefined;\nexport class UserBadges extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #badgeActionEventTarget = new Common.ObjectWrapper.ObjectWrapper<BadgeActionEvents>();\n\n  #receiveBadgesSetting?: Common.Settings.Setting<Boolean>;\n  #allBadges: Badge[];\n\n  static readonly BADGE_REGISTRY: BadgeClass[] = [\n    StarterBadge,\n    SpeedsterBadge,\n  ];\n\n  private constructor() {\n    super();\n\n    this.#receiveBadgesSetting = Common.Settings.Settings.instance().moduleSetting('receive-gdp-badges');\n    this.#receiveBadgesSetting.addChangeListener(this.#reconcileBadges, this);\n\n    this.#allBadges =\n        UserBadges.BADGE_REGISTRY.map(badgeCtor => new badgeCtor({\n                                        dispatchBadgeTriggeredEvent: this.#dispatchBadgeTriggeredEvent.bind(this),\n                                        badgeActionEventTarget: this.#badgeActionEventTarget,\n                                      }));\n  }\n\n  static instance({forceNew}: {forceNew: boolean} = {forceNew: false}): UserBadges {\n    if (!userBadgesInstance || forceNew) {\n      userBadgesInstance = new UserBadges();\n    }\n    return userBadgesInstance;\n  }\n\n  async initialize(): Promise<void> {\n    return await this.#reconcileBadges();\n  }\n\n  recordAction(action: BadgeAction): void {\n    // `Common.ObjectWrapper.ObjectWrapper` does not allow passing unions to\n    // the `dispatchEventToListeners` and `action` in this case is a union.\n    // We want to support listening to specific actions here, that's why we suppress\n    // the TypeScript errors. This is safe to do so since every `BadgeAction`\n    // is a valid event type and all events are typed as void.\n    // @ts-expect-error\n    this.#badgeActionEventTarget.dispatchEventToListeners(action);\n  }\n\n  #dispatchBadgeTriggeredEvent(badge: Badge): void {\n    this.dispatchEventToListeners(Events.BADGE_TRIGGERED, badge);\n  }\n\n  #deactivateAllBadges(): void {\n    this.#allBadges.forEach(badge => {\n      badge.deactivate();\n    });\n  }\n\n  // TODO(ergunsh): Implement starter badge dismissal, snooze count & timestamp checks.\n  // TODO(ergunsh): Implement checking for previously awarded badges.\n  async #reconcileBadges(): Promise<void> {\n    const syncInfo = await new Promise<Host.InspectorFrontendHostAPI.SyncInformation>(\n        resolve => Host.InspectorFrontendHost.InspectorFrontendHostInstance.getSyncInformation(resolve));\n    // If the user is not signed in, do not activate any badges.\n    if (!syncInfo.accountEmail) {\n      this.#deactivateAllBadges();\n      return;\n    }\n\n    const [gdpProfile, isEligibleToCreateProfile] = await Promise.all([\n      Host.GdpClient.GdpClient.instance().getProfile(),\n      Host.GdpClient.GdpClient.instance().isEligibleToCreateProfile(),\n    ]);\n\n    // User does not have a GDP profile & not eligible to create one.\n    // So, we don't activate any badges for them.\n    if (!gdpProfile && !isEligibleToCreateProfile) {\n      this.#deactivateAllBadges();\n      return;\n    }\n\n    const receiveBadgesSettingEnabled = Boolean(this.#receiveBadgesSetting?.get());\n    for (const badge of this.#allBadges) {\n      const shouldActivateStarterBadge = badge.isStarterBadge && isEligibleToCreateProfile;\n      const shouldActivateActivityBasedBadge =\n          !badge.isStarterBadge && Boolean(gdpProfile) && receiveBadgesSettingEnabled;\n      if (shouldActivateStarterBadge || shouldActivateActivityBasedBadge) {\n        badge.activate();\n      } else {\n        badge.deactivate();\n      }\n    }\n\n    this.reconcileBadgesFinishedForTest();\n  }\n\n  reconcileBadgesFinishedForTest(): void {\n  }\n}\n"],
  "mappings": "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",
  "names": ["BadgeAction", "Common"]
}
