{
  "version": 3,
  "sources": ["../../../../../../front_end/models/badges/AiExplorerBadge.ts", "../../../../../../front_end/models/badges/Badge.ts", "../../../../../../front_end/models/badges/SpeedsterBadge.ts", "../../../../../../front_end/models/badges/StarterBadge.ts", "../../../../../../front_end/models/badges/UserBadges.ts", "../../../../../../front_end/models/badges/CodeWhispererBadge.ts", "../../../../../../front_end/models/badges/DOMDetectiveBadge.ts"],
  "sourcesContent": ["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\n\nimport {Badge, BadgeAction} from './Badge.js';\n\nconst AI_EXPLORER_BADGE_URI = new URL('../../Images/ai-explorer-badge.svg', import.meta.url).toString();\nconst AI_CONVERSATION_COUNT_SETTING_NAME = 'gdp.ai-conversation-count';\nconst AI_CONVERSATION_COUNT_LIMIT = 5;\n\nexport class AiExplorerBadge extends Badge {\n  override readonly name =\n      'profiles/me/awards/developers.google.com%2Fprofile%2Fbadges%2Factivity%2Fchrome-devtools%2Fai-explorer';\n  override readonly title = 'AI Explorer';\n  override readonly jslogContext = 'ai-explorer';\n  override readonly imageUri = AI_EXPLORER_BADGE_URI;\n  #aiConversationCountSetting: Common.Settings.Setting<number> = Common.Settings.Settings.instance().createSetting(\n      AI_CONVERSATION_COUNT_SETTING_NAME, 0, Common.Settings.SettingStorageType.SYNCED);\n\n  override readonly interestedActions = [\n    BadgeAction.STARTED_AI_CONVERSATION,\n  ] as const;\n\n  handleAction(_action: BadgeAction): void {\n    const currentCount = this.#aiConversationCountSetting.get();\n    if (currentCount >= AI_CONVERSATION_COUNT_LIMIT) {\n      return;\n    }\n\n    this.#aiConversationCountSetting.set(currentCount + 1);\n    if (this.#aiConversationCountSetting.get() === AI_CONVERSATION_COUNT_LIMIT) {\n      this.trigger();\n    }\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\n\nexport enum BadgeAction {\n  GDP_SIGN_UP_COMPLETE = 'gdp-sign-up-complete',\n  RECEIVE_BADGES_SETTING_ENABLED = 'receive-badges-setting-enabled',\n  CSS_RULE_MODIFIED = 'css-rule-modified',\n  DOM_ELEMENT_OR_ATTRIBUTE_EDITED = 'dom-element-or-attribute-edited',\n  MODERN_DOM_BADGE_CLICKED = 'modern-dom-badge-clicked',\n  STARTED_AI_CONVERSATION = 'started-ai-conversation',\n  // TODO(ergunsh): Instrument performance insight clicks.\n  PERFORMANCE_INSIGHT_CLICKED = 'performance-insight-clicked',\n  DEBUGGER_PAUSED = 'debugger-paused',\n  BREAKPOINT_ADDED = 'breakpoint-added',\n  CONSOLE_PROMPT_EXECUTED = 'console-prompt-executed',\n  PERFORMANCE_RECORDING_STARTED = 'performance-recording-started',\n  NETWORK_SPEED_THROTTLED = 'network-speed-throttled',\n  RECORDER_RECORDING_STARTED = 'recorder-recording-started',\n}\n\nexport type BadgeActionEvents = Record<BadgeAction, void>;\n\nexport interface BadgeContext {\n  onTriggerBadge: (badge: Badge) => void;\n  badgeActionEventTarget: Common.ObjectWrapper.ObjectWrapper<BadgeActionEvents>;\n}\n\nexport interface TriggerOptions {\n  immediate?: boolean;\n}\n\nexport abstract class Badge {\n  #onTriggerBadge: (badge: Badge, opts?: TriggerOptions) => void;\n  #badgeActionEventTarget: Common.ObjectWrapper.ObjectWrapper<BadgeActionEvents>;\n  #eventListeners: Common.EventTarget.EventDescriptor[] = [];\n  #triggeredBefore = false;\n\n  abstract readonly name: string;\n  abstract readonly title: string;\n  abstract readonly imageUri: string;\n  abstract readonly interestedActions: readonly BadgeAction[];\n  abstract readonly jslogContext: string;\n  readonly isStarterBadge: boolean = false;\n\n  constructor(context: BadgeContext) {\n    this.#onTriggerBadge = context.onTriggerBadge;\n    this.#badgeActionEventTarget = context.badgeActionEventTarget;\n  }\n\n  abstract handleAction(action: BadgeAction): void;\n  protected trigger(opts?: TriggerOptions): void {\n    if (this.#triggeredBefore) {\n      return;\n    }\n\n    this.#triggeredBefore = true;\n    this.deactivate();\n    this.#onTriggerBadge(this, opts);\n  }\n\n  activate(): void {\n    // The event listeners are already registered, we don't re-register them.\n    if (this.#eventListeners.length > 0) {\n      return;\n    }\n\n    this.#eventListeners =\n        this.interestedActions.map(actionType => this.#badgeActionEventTarget.addEventListener(actionType, () => {\n          this.handleAction(actionType);\n        }, this));\n  }\n\n  deactivate(): void {\n    if (!this.#eventListeners.length) {\n      return;\n    }\n\n    Common.EventTarget.removeEventListeners(this.#eventListeners);\n    this.#eventListeners = [];\n    this.#triggeredBefore = false;\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {Badge, BadgeAction} from './Badge.js';\n\nconst SPEEDSTER_BADGE_URI = new URL('../../Images/speedster-badge.svg', import.meta.url).toString();\nexport class SpeedsterBadge extends Badge {\n  override readonly name =\n      'profiles/me/awards/developers.google.com%2Fprofile%2Fbadges%2Factivity%2Fchrome-devtools%2Fspeedster';\n  override readonly title = 'Speedster';\n  override readonly jslogContext = 'speedster';\n  override readonly interestedActions = [\n    BadgeAction.PERFORMANCE_INSIGHT_CLICKED,\n  ] as const;\n  override readonly imageUri = SPEEDSTER_BADGE_URI;\n\n  handleAction(_action: BadgeAction): void {\n    this.trigger();\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {Badge, BadgeAction} from './Badge.js';\n\nconst STARTER_BADGE_IMAGE_URI = new URL('../../Images/devtools-user-badge.svg', import.meta.url).toString();\nexport class StarterBadge extends Badge {\n  override readonly isStarterBadge = true;\n  override readonly name =\n      'profiles/me/awards/developers.google.com%2Fprofile%2Fbadges%2Factivity%2Fchrome-devtools%2Fchrome-devtools-user';\n  override readonly title = 'Chrome DevTools User';\n  override readonly jslogContext = 'chrome-devtools-user';\n  override readonly imageUri = STARTER_BADGE_IMAGE_URI;\n\n  // TODO(ergunsh): Add remaining non-trivial event definitions\n  override readonly interestedActions = [\n    BadgeAction.GDP_SIGN_UP_COMPLETE,\n    BadgeAction.RECEIVE_BADGES_SETTING_ENABLED,\n    BadgeAction.CSS_RULE_MODIFIED,\n    BadgeAction.DOM_ELEMENT_OR_ATTRIBUTE_EDITED,\n    BadgeAction.BREAKPOINT_ADDED,\n    BadgeAction.CONSOLE_PROMPT_EXECUTED,\n    BadgeAction.PERFORMANCE_RECORDING_STARTED,\n    BadgeAction.NETWORK_SPEED_THROTTLED,\n    BadgeAction.RECORDER_RECORDING_STARTED,\n  ] as const;\n\n  handleAction(action: BadgeAction): void {\n    this.trigger({immediate: action === BadgeAction.GDP_SIGN_UP_COMPLETE});\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Root from '../../core/root/root.js';\n\nimport {AiExplorerBadge} from './AiExplorerBadge.js';\nimport type {Badge, BadgeAction, BadgeActionEvents, BadgeContext, TriggerOptions} from './Badge.js';\nimport {CodeWhispererBadge} from './CodeWhispererBadge.js';\nimport {DOMDetectiveBadge} from './DOMDetectiveBadge.js';\nimport {SpeedsterBadge} from './SpeedsterBadge.js';\nimport {StarterBadge} from './StarterBadge.js';\n\ntype BadgeClass = new (badgeContext: BadgeContext) => Badge;\n\nexport const enum Events {\n  BADGE_TRIGGERED = 'BadgeTriggered',\n}\n\nexport interface EventTypes {\n  [Events.BADGE_TRIGGERED]: Badge;\n}\n\nconst SNOOZE_TIME_MS = 24 * 60 * 60 * 1000;  // 24 hours\nconst MAX_SNOOZE_COUNT = 3;\nconst DELAY_BEFORE_TRIGGER = 1500;\n\nlet userBadgesInstance: UserBadges|undefined = undefined;\nexport class UserBadges extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #badgeActionEventTarget = new Common.ObjectWrapper.ObjectWrapper<BadgeActionEvents>();\n\n  #receiveBadgesSetting: Common.Settings.Setting<Boolean>;\n  #allBadges: Badge[];\n\n  #starterBadgeSnoozeCount: Common.Settings.Setting<number>;\n  #starterBadgeLastSnoozedTimestamp: Common.Settings.Setting<number>;\n  #starterBadgeDismissed: Common.Settings.Setting<boolean>;\n\n  static readonly BADGE_REGISTRY: BadgeClass[] = [\n    StarterBadge,\n    SpeedsterBadge,\n    DOMDetectiveBadge,\n    CodeWhispererBadge,\n    AiExplorerBadge,\n  ];\n\n  private constructor() {\n    super();\n\n    this.#receiveBadgesSetting = Common.Settings.Settings.instance().moduleSetting('receive-gdp-badges');\n    if (Host.GdpClient.getGdpProfilesEnterprisePolicy() ===\n        Root.Runtime.GdpProfilesEnterprisePolicyValue.ENABLED_WITHOUT_BADGES) {\n      this.#receiveBadgesSetting.set(false);\n    }\n    this.#receiveBadgesSetting.addChangeListener(this.#reconcileBadges, this);\n\n    this.#starterBadgeSnoozeCount = Common.Settings.Settings.instance().createSetting(\n        'starter-badge-snooze-count', 0, Common.Settings.SettingStorageType.SYNCED);\n    this.#starterBadgeLastSnoozedTimestamp = Common.Settings.Settings.instance().createSetting(\n        'starter-badge-last-snoozed-timestamp', 0, Common.Settings.SettingStorageType.SYNCED);\n    this.#starterBadgeDismissed = Common.Settings.Settings.instance().createSetting(\n        'starter-badge-dismissed', false, Common.Settings.SettingStorageType.SYNCED);\n\n    this.#allBadges = UserBadges.BADGE_REGISTRY.map(badgeCtor => new badgeCtor({\n                                                      onTriggerBadge: this.#onTriggerBadge.bind(this),\n                                                      badgeActionEventTarget: this.#badgeActionEventTarget,\n                                                    }));\n  }\n\n  static instance({forceNew}: {forceNew: boolean} = {forceNew: false}): UserBadges {\n    if (!userBadgesInstance || forceNew) {\n      userBadgesInstance = new UserBadges();\n    }\n    return userBadgesInstance;\n  }\n\n  async initialize(): Promise<void> {\n    return await this.#reconcileBadges();\n  }\n\n  snoozeStarterBadge(): void {\n    this.#starterBadgeSnoozeCount.set(this.#starterBadgeSnoozeCount.get() + 1);\n    this.#starterBadgeLastSnoozedTimestamp.set(Date.now());\n  }\n\n  dismissStarterBadge(): void {\n    this.#starterBadgeDismissed.set(true);\n  }\n\n  recordAction(action: BadgeAction): void {\n    // `Common.ObjectWrapper.ObjectWrapper` does not allow passing unions to\n    // the `dispatchEventToListeners` and `action` in this case is a union.\n    // We want to support listening to specific actions here, that's why we suppress\n    // the TypeScript errors. This is safe to do so since every `BadgeAction`\n    // is a valid event type and all events are typed as void.\n    // @ts-expect-error\n    this.#badgeActionEventTarget.dispatchEventToListeners(action);\n  }\n\n  async #onTriggerBadge(badge: Badge, opts?: TriggerOptions): Promise<void> {\n    const triggerTime = Date.now();\n    let shouldAwardBadge = false;\n    // By default, we award non-starter badges directly when they are triggered.\n    if (!badge.isStarterBadge) {\n      shouldAwardBadge = true;\n    } else {\n      const gdpProfile = await Host.GdpClient.GdpClient.instance().getProfile();\n      const receiveBadgesSettingEnabled = Boolean(this.#receiveBadgesSetting.get());\n      // If there is a GDP profile and the user has enabled receiving badges, we award the starter badge as well.\n      if (gdpProfile && receiveBadgesSettingEnabled && !this.#isStarterBadgeDismissed() &&\n          !this.#isStarterBadgeSnoozed()) {\n        shouldAwardBadge = true;\n      }\n    }\n\n    // Awarding was needed and not successful, we don't show the notification\n    if (shouldAwardBadge) {\n      const result = await Host.GdpClient.GdpClient.instance().createAward({name: badge.name});\n      if (!result) {\n        return;\n      }\n    }\n\n    const timeElapsedAfterTriggerCall = Date.now() - triggerTime;\n    // We want to add exactly 1.5 second delay between the trigger action & the notification.\n    const delay = opts?.immediate ? 0 : Math.max(DELAY_BEFORE_TRIGGER - timeElapsedAfterTriggerCall, 0);\n    setTimeout(() => {\n      this.dispatchEventToListeners(Events.BADGE_TRIGGERED, badge);\n    }, delay);\n  }\n\n  #deactivateAllBadges(): void {\n    this.#allBadges.forEach(badge => {\n      badge.deactivate();\n    });\n  }\n\n  #isStarterBadgeDismissed(): boolean {\n    return this.#starterBadgeDismissed.get();\n  }\n\n  #isStarterBadgeSnoozed(): boolean {\n    const snoozeCount = this.#starterBadgeSnoozeCount.get();\n    const lastSnoozed = this.#starterBadgeLastSnoozedTimestamp.get();\n    const snoozedRecently = (Date.now() - lastSnoozed) < SNOOZE_TIME_MS;\n    return snoozeCount >= MAX_SNOOZE_COUNT || snoozedRecently;\n  }\n\n  async #reconcileBadges(): Promise<void> {\n    const syncInfo = await new Promise<Host.InspectorFrontendHostAPI.SyncInformation>(\n        resolve => Host.InspectorFrontendHost.InspectorFrontendHostInstance.getSyncInformation(resolve));\n    // If the user is not signed in, do not activate any badges.\n    if (!syncInfo.accountEmail) {\n      this.#deactivateAllBadges();\n      return;\n    }\n\n    if (!Host.GdpClient.isGdpProfilesAvailable() ||\n        Host.GdpClient.getGdpProfilesEnterprisePolicy() !== Root.Runtime.GdpProfilesEnterprisePolicyValue.ENABLED) {\n      this.#deactivateAllBadges();\n      return;\n    }\n\n    const gdpProfile = await Host.GdpClient.GdpClient.instance().getProfile();\n    let isEligibleToCreateProfile = Boolean(gdpProfile);\n    if (!gdpProfile) {\n      isEligibleToCreateProfile = await Host.GdpClient.GdpClient.instance().isEligibleToCreateProfile();\n    }\n\n    // User does not have a GDP profile & not eligible to create one.\n    // So, we don't activate any badges for them.\n    if (!gdpProfile && !isEligibleToCreateProfile) {\n      this.#deactivateAllBadges();\n      return;\n    }\n\n    let awardedBadgeNames: Set<string>|null = null;\n    if (gdpProfile) {\n      awardedBadgeNames = await Host.GdpClient.GdpClient.instance().getAwardedBadgeNames(\n          {names: this.#allBadges.map(badge => badge.name)});\n      // This is a conservative approach. We bail out if `awardedBadgeNames` is null\n      // when there is a profile to prevent a negative user experience.\n      //\n      // A failure here (e.g., from a typo in a badge name) could cause us to\n      // re-trigger the \"Receive badges\" nudge for a user who has already earned the\n      // starter badge and opted out of receiving badges.\n      //\n      // The trade-off is, we silently failing to enable badge mechanism rather than annoying the user.\n      if (!awardedBadgeNames) {\n        this.#deactivateAllBadges();\n        return;\n      }\n    }\n\n    const receiveBadgesSettingEnabled = Boolean(this.#receiveBadgesSetting.get());\n    for (const badge of this.#allBadges) {\n      if (awardedBadgeNames?.has(badge.name)) {\n        badge.deactivate();\n        continue;\n      }\n\n      const shouldActivateStarterBadge = badge.isStarterBadge && isEligibleToCreateProfile &&\n          !this.#isStarterBadgeDismissed() && !this.#isStarterBadgeSnoozed();\n      const shouldActivateActivityBasedBadge =\n          !badge.isStarterBadge && Boolean(gdpProfile) && receiveBadgesSettingEnabled;\n      if (shouldActivateStarterBadge || shouldActivateActivityBasedBadge) {\n        badge.activate();\n      } else {\n        badge.deactivate();\n      }\n    }\n\n    this.reconcileBadgesFinishedForTest();\n  }\n\n  reconcileBadgesFinishedForTest(): void {\n  }\n\n  isReceiveBadgesSettingEnabled(): boolean {\n    return Boolean(this.#receiveBadgesSetting.get());\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {Badge, BadgeAction} from './Badge.js';\n\nconst CODE_WHISPERER_BADGE_IMAGE_URI = new URL('../../Images/code-whisperer-badge.svg', import.meta.url).toString();\nexport class CodeWhispererBadge extends Badge {\n  override readonly name =\n      'profiles/me/awards/developers.google.com%2Fprofile%2Fbadges%2Factivity%2Fchrome-devtools%2Fcode-whisperer';\n  override readonly title = 'Code Whisperer';\n  override readonly jslogContext = 'code-whisperer';\n  override readonly imageUri = CODE_WHISPERER_BADGE_IMAGE_URI;\n\n  override readonly interestedActions = [BadgeAction.DEBUGGER_PAUSED] as const;\n\n  handleAction(_action: BadgeAction): void {\n    this.trigger();\n  }\n}\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {Badge, BadgeAction} from './Badge.js';\n\nconst DOM_DETECTIVE_BADGE_IMAGE_URI = new URL('../../Images/dom-detective-badge.svg', import.meta.url).toString();\nexport class DOMDetectiveBadge extends Badge {\n  override readonly name =\n      'profiles/me/awards/developers.google.com%2Fprofile%2Fbadges%2Factivity%2Fchrome-devtools%2Fdom-detective';\n  override readonly title = 'DOM Detective';\n  override readonly jslogContext = 'dom-detective';\n  override readonly imageUri = DOM_DETECTIVE_BADGE_IMAGE_URI;\n\n  override readonly interestedActions = [\n    BadgeAction.MODERN_DOM_BADGE_CLICKED,\n  ] as const;\n\n  handleAction(_action: BadgeAction): void {\n    this.trigger();\n  }\n}\n"],
  "mappings": "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",
  "names": ["Common", "BadgeAction", "Common"]
}
