{"version":3,"file":"UserBadges.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/badges/UserBadges.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {expectCall} from '../../testing/ExpectStubCall.js';\n\nimport * as Badges from './badges.js';\nclass MockActivityBadge extends Badges.Badge {\n  override name = 'badges/test-badge';\n  override title = 'test-badge-title';\n  override imageUri = 'test-image-uri';\n  override interestedActions: readonly Badges.BadgeAction[] = [\n    Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED,\n  ] as const;\n\n  override handleAction(): void {\n    this.trigger();\n  }\n}\n\nclass MockStarterBadge extends Badges.Badge {\n  override name = 'badges/starter-test-badge';\n  override title = 'starter-test-badge';\n  override imageUri = 'starte-test-image-uri';\n  override isStarterBadge = true;\n  override interestedActions: readonly Badges.BadgeAction[] = [\n    Badges.BadgeAction.CSS_RULE_MODIFIED,\n  ] as const;\n\n  override handleAction(): void {\n    this.trigger();\n  }\n}\n\nconst MOCK_BADGE_REGISTRY = [\n  MockActivityBadge,\n  MockStarterBadge,\n];\n\nfunction mockGetSyncInformation(information: Host.InspectorFrontendHostAPI.SyncInformation): void {\n  sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'getSyncInformation').callsFake(cb => {\n    cb(information);\n  });\n}\n\nfunction stubGdpClientCreateAward(name: string|null):\n    sinon.SinonStub<Parameters<typeof Host.GdpClient.GdpClient.prototype.createAward>> {\n  return sinon.stub(Host.GdpClient.GdpClient.instance(), 'createAward')\n      .resolves(name ? {name} as Host.GdpClient.Award : null);\n}\n\nfunction mockGdpClientGetProfile(profile: Host.GdpClient.Profile|null): void {\n  sinon.stub(Host.GdpClient.GdpClient.instance(), 'getProfile').resolves(profile);\n}\n\nfunction mockIsEligibleToCreateProfile(eligible: boolean): void {\n  sinon.stub(Host.GdpClient.GdpClient.instance(), 'isEligibleToCreateProfile').resolves(eligible);\n}\n\nfunction mockGetAwardedBadgeNames(names: string[]|null): void {\n  sinon.stub(Host.GdpClient.GdpClient.instance(), 'getAwardedBadgeNames').resolves(names ? new Set(names) : null);\n}\n\nfunction setReceiveBadgesSetting(value: boolean) {\n  Common.Settings.Settings.instance().moduleSetting('receive-gdp-badges').set(value);\n}\n\nfunction setUpEnvironmentForActivatedBadges(): void {\n  setReceiveBadgesSetting(true);\n  mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n  mockGdpClientGetProfile({name: 'names/profile-id'});\n  mockIsEligibleToCreateProfile(true);\n  mockGetAwardedBadgeNames([]);\n}\n\nfunction assertActiveBadges({\n  shouldStarterBadgeBeActive,\n  shouldActivityBadgeBeActive,\n}: {\n  shouldStarterBadgeBeActive: boolean,\n  shouldActivityBadgeBeActive: boolean,\n}): void {\n  // Record actions that'll trigger both badges.\n  const handleActivityBadgeActionStub = sinon.stub(MockActivityBadge.prototype, 'handleAction');\n  const handleStarterBadgeActionStub = sinon.stub(MockStarterBadge.prototype, 'handleAction');\n\n  Badges.UserBadges.instance().recordAction(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n  Badges.UserBadges.instance().recordAction(Badges.BadgeAction.CSS_RULE_MODIFIED);\n\n  if (shouldStarterBadgeBeActive) {\n    sinon.assert.calledOnce(handleStarterBadgeActionStub);\n  } else {\n    sinon.assert.notCalled(handleStarterBadgeActionStub);\n  }\n\n  if (shouldActivityBadgeBeActive) {\n    sinon.assert.calledOnce(handleActivityBadgeActionStub);\n  } else {\n    sinon.assert.notCalled(handleActivityBadgeActionStub);\n  }\n\n  handleStarterBadgeActionStub.restore();\n  handleActivityBadgeActionStub.restore();\n}\n\ndescribeWithEnvironment('UserBadges', () => {\n  beforeEach(() => {\n    Object.assign(Badges.UserBadges.BADGE_REGISTRY, MOCK_BADGE_REGISTRY);\n    Badges.UserBadges.instance({forceNew: true});\n  });\n\n  it('should dispatch a badge triggered event when a badge is triggered for the first time', async () => {\n    setUpEnvironmentForActivatedBadges();\n    stubGdpClientCreateAward('test/test-badge');\n    await Badges.UserBadges.instance().initialize();\n    const badgeTriggeredPromise = Badges.UserBadges.instance().once(Badges.Events.BADGE_TRIGGERED);\n\n    Badges.UserBadges.instance().recordAction(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n\n    await badgeTriggeredPromise;\n  });\n\n  it('should only dispatch a badge triggered event once when the same action is recorded multiple times', async () => {\n    setUpEnvironmentForActivatedBadges();\n    stubGdpClientCreateAward('test/test-badge');\n    await Badges.UserBadges.instance().initialize();\n    const badgeTriggeredPromise = Badges.UserBadges.instance().once(Badges.Events.BADGE_TRIGGERED);\n\n    Badges.UserBadges.instance().recordAction(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n    Badges.UserBadges.instance().recordAction(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n\n    await badgeTriggeredPromise;\n  });\n\n  describe('onTriggerBadge', () => {\n    describe('non-starter badges', () => {\n      it('should award a non-starter badge and dispatch event when `createAward` succeeds', async () => {\n        setUpEnvironmentForActivatedBadges();\n        const createAwardStub = stubGdpClientCreateAward('test/test-badge');\n        await Badges.UserBadges.instance().initialize();\n        const badgeTriggeredPromise = Badges.UserBadges.instance().once(Badges.Events.BADGE_TRIGGERED);\n\n        Badges.UserBadges.instance().recordAction(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n        const badge = await badgeTriggeredPromise;\n\n        assert.strictEqual(badge.name, 'badges/test-badge');\n        sinon.assert.calledWith(createAwardStub, {name: 'badges/test-badge'});\n      });\n\n      it('should not dispatch event for a non-starter badge when `createAward` fails', async () => {\n        setUpEnvironmentForActivatedBadges();\n        const createAwardStub = stubGdpClientCreateAward(null);\n        const badgeTriggeredSpy = sinon.spy();\n        await Badges.UserBadges.instance().initialize();\n        Badges.UserBadges.instance().addEventListener(Badges.Events.BADGE_TRIGGERED, badgeTriggeredSpy);\n\n        Badges.UserBadges.instance().recordAction(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n        await new Promise(resolve => setTimeout(resolve, 0));\n\n        sinon.assert.calledOnce(createAwardStub);\n        sinon.assert.notCalled(badgeTriggeredSpy);\n      });\n    });\n\n    describe('starter-badges', () => {\n      it('should award a starter badge if the user has a profile and the setting is enabled', async () => {\n        setUpEnvironmentForActivatedBadges();\n        const createAwardStub = stubGdpClientCreateAward('test/test-badge');\n        await Badges.UserBadges.instance().initialize();\n        const badgeTriggeredPromise = Badges.UserBadges.instance().once(Badges.Events.BADGE_TRIGGERED);\n\n        Badges.UserBadges.instance().recordAction(Badges.BadgeAction.CSS_RULE_MODIFIED);\n        const badge = await badgeTriggeredPromise;\n\n        assert.strictEqual(badge.name, 'badges/starter-test-badge');\n        sinon.assert.calledWith(createAwardStub, {name: 'badges/starter-test-badge'});\n      });\n\n      it('should not award a starter badge if the user does not have a GDP profile', async () => {\n        setReceiveBadgesSetting(true);\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGdpClientGetProfile(null);\n        const createAwardStub = stubGdpClientCreateAward(null);\n        const badgeTriggeredSpy = sinon.spy();\n        await Badges.UserBadges.instance().initialize();\n        Badges.UserBadges.instance().addEventListener(Badges.Events.BADGE_TRIGGERED, badgeTriggeredSpy);\n\n        Badges.UserBadges.instance().recordAction(Badges.BadgeAction.CSS_RULE_MODIFIED);\n        await new Promise(resolve => setTimeout(resolve, 0));\n\n        sinon.assert.notCalled(createAwardStub);\n        sinon.assert.notCalled(badgeTriggeredSpy);\n      });\n\n      it('should not award a starter badge if the \"receive badges\" setting is disabled', async () => {\n        setReceiveBadgesSetting(false);\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGdpClientGetProfile({name: 'names/profile-id'});\n        const createAwardStub = stubGdpClientCreateAward(null);\n        const badgeTriggeredSpy = sinon.spy();\n        await Badges.UserBadges.instance().initialize();\n        Badges.UserBadges.instance().addEventListener(Badges.Events.BADGE_TRIGGERED, badgeTriggeredSpy);\n\n        Badges.UserBadges.instance().recordAction(Badges.BadgeAction.CSS_RULE_MODIFIED);\n        await new Promise(resolve => setTimeout(resolve, 0));\n\n        sinon.assert.notCalled(createAwardStub);\n        sinon.assert.notCalled(badgeTriggeredSpy);\n      });\n    });\n  });\n\n  describe('recordAction', () => {\n    it('should result in a call to `handleAction` for the badges that are interested in that action', async () => {\n      setUpEnvironmentForActivatedBadges();\n      await Badges.UserBadges.instance().initialize();\n      const handleActionStub = sinon.stub(MockActivityBadge.prototype, 'handleAction');\n\n      Badges.UserBadges.instance().recordAction(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n\n      sinon.assert.calledOnce(handleActionStub);\n    });\n  });\n\n  describe('initialize and reconcile badges', () => {\n    describe('no active badges', () => {\n      it('should not activate any badges if the user is not signed in', async () => {\n        mockGetSyncInformation({isSyncActive: false});\n\n        await Badges.UserBadges.instance().initialize();\n\n        assertActiveBadges({\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: false,\n        });\n      });\n\n      it('should not activate any badges if the user is signed in but is neither eligible to create a GDP profile nor has an existing one',\n         async () => {\n           mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n           mockIsEligibleToCreateProfile(false);\n           mockGdpClientGetProfile(null);\n\n           await Badges.UserBadges.instance().initialize();\n\n           assertActiveBadges({\n             shouldActivityBadgeBeActive: false,\n             shouldStarterBadgeBeActive: false,\n           });\n         });\n\n      it('should deactivate all badges if the awarded badges check fails', async () => {\n        setReceiveBadgesSetting(true);\n        mockIsEligibleToCreateProfile(true);\n        mockGdpClientGetProfile({name: 'profiles/test'});\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames(null);\n\n        await Badges.UserBadges.instance().initialize();\n\n        assertActiveBadges({\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: false,\n        });\n      });\n    });\n\n    describe('only starter badge', () => {\n      it('should activate only the starter badge if the user does not have a GDP profile and is eligible for one',\n         async () => {\n           mockGdpClientGetProfile(null);\n           mockIsEligibleToCreateProfile(true);\n           mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n           mockGetAwardedBadgeNames([]);\n\n           await Badges.UserBadges.instance().initialize();\n\n           assertActiveBadges({\n             shouldActivityBadgeBeActive: false,\n             shouldStarterBadgeBeActive: true,\n           });\n         });\n\n      it('should activate only the starter badge if the user does not have a GDP profile and is eligible for one, even if awarded badges check fails',\n         async () => {\n           mockGdpClientGetProfile(null);\n           mockIsEligibleToCreateProfile(true);\n           mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n           mockGetAwardedBadgeNames(null);\n\n           await Badges.UserBadges.instance().initialize();\n\n           assertActiveBadges({\n             shouldActivityBadgeBeActive: false,\n             shouldStarterBadgeBeActive: true,\n           });\n         });\n\n      it('should activate only the starter badge if the user has a GDP profile and the receive badges setting is off',\n         async () => {\n           setReceiveBadgesSetting(false);\n           mockIsEligibleToCreateProfile(true);\n           mockGdpClientGetProfile({name: 'profiles/test'});\n           mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n           mockGetAwardedBadgeNames([]);\n\n           await Badges.UserBadges.instance().initialize();\n\n           assertActiveBadges({\n             shouldActivityBadgeBeActive: false,\n             shouldStarterBadgeBeActive: true,\n           });\n         });\n\n      it('should not activate the starter badge if it was awarded before', async () => {\n        mockIsEligibleToCreateProfile(true);\n        mockGdpClientGetProfile({name: 'profiles/test'});\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames(['badges/starter-test-badge']);\n\n        await Badges.UserBadges.instance().initialize();\n\n        assertActiveBadges({\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: false,\n        });\n      });\n    });\n\n    describe('all badges', () => {\n      it('should activate starter and activity badges if the user has a GDP profile AND the receive badges setting is on AND they are not awarded before',\n         async () => {\n           setReceiveBadgesSetting(true);\n           mockIsEligibleToCreateProfile(true);\n           mockGdpClientGetProfile({name: 'profiles/test'});\n           mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n           mockGetAwardedBadgeNames([]);\n\n           await Badges.UserBadges.instance().initialize();\n\n           assertActiveBadges({\n             shouldActivityBadgeBeActive: true,\n             shouldStarterBadgeBeActive: true,\n           });\n         });\n\n      it('should not activate the activity badge if it was awarded before', async () => {\n        setReceiveBadgesSetting(true);\n        mockIsEligibleToCreateProfile(true);\n        mockGdpClientGetProfile({name: 'profiles/test'});\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames(['badges/test-badge']);\n\n        await Badges.UserBadges.instance().initialize();\n\n        assertActiveBadges({\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: true,\n        });\n      });\n    });\n\n    it('should deactivate activity based badges when receive badges setting turns to false', async () => {\n      setReceiveBadgesSetting(true);\n      mockIsEligibleToCreateProfile(true);\n      mockGdpClientGetProfile({name: 'profiles/test'});\n      mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n      mockGetAwardedBadgeNames([]);\n\n      await Badges.UserBadges.instance().initialize();\n      assertActiveBadges({\n        shouldActivityBadgeBeActive: true,\n        shouldStarterBadgeBeActive: true,\n      });\n\n      const waitForReconcileBadgesToFinish =\n          expectCall(sinon.stub(Badges.UserBadges.instance(), 'reconcileBadgesFinishedForTest'));\n      setReceiveBadgesSetting(false);\n      await waitForReconcileBadgesToFinish;\n      assertActiveBadges({\n        shouldActivityBadgeBeActive: false,\n        shouldStarterBadgeBeActive: true,\n      });\n    });\n  });\n});\n"]}