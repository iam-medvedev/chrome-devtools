{"version":3,"file":"UserBadges.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/badges/UserBadges.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Root from '../../core/root/root.js';\nimport {describeWithEnvironment, updateHostConfig} from '../../testing/EnvironmentHelpers.js';\nimport {expectCall} from '../../testing/ExpectStubCall.js';\n\nimport * as Badges from './badges.js';\n\nclass MockActivityBadge extends Badges.Badge {\n  override name = 'badges/test-badge';\n  override title = 'test-badge-title';\n  override jslogContext = 'test-badge-jslogcontext';\n  override imageUri = 'test-image-uri';\n  override interestedActions: readonly Badges.BadgeAction[] = [\n    Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED,\n  ] as const;\n\n  override handleAction(): void {\n    this.trigger();\n  }\n}\n\nclass MockStarterBadge extends Badges.Badge {\n  override name = 'badges/starter-test-badge';\n  override title = 'starter-test-badge';\n  override jslogContext = 'starter-test-badge-jslogcontext';\n  override imageUri = 'starte-test-image-uri';\n  override isStarterBadge = true;\n  override interestedActions: readonly Badges.BadgeAction[] = [\n    Badges.BadgeAction.CSS_RULE_MODIFIED,\n  ] as const;\n\n  override handleAction(): void {\n    this.trigger();\n  }\n}\n\nconst MOCK_BADGE_REGISTRY = [\n  MockActivityBadge,\n  MockStarterBadge,\n];\n\nfunction mockGetSyncInformation(information: Host.InspectorFrontendHostAPI.SyncInformation): void {\n  sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'getSyncInformation').callsFake(cb => {\n    cb(information);\n  });\n}\n\nfunction stubGdpClientCreateAward(name: string|null):\n    sinon.SinonStub<Parameters<typeof Host.GdpClient.GdpClient.prototype.createAward>> {\n  return sinon.stub(Host.GdpClient.GdpClient.instance(), 'createAward')\n      .resolves(name ? {name} as Host.GdpClient.Award : null);\n}\n\nfunction mockGdpClientGetProfile(response: Host.GdpClient.GetProfileResponse|null): void {\n  sinon.stub(Host.GdpClient.GdpClient.instance(), 'getProfile').resolves(response);\n}\n\nfunction mockGetAwardedBadgeNames(names: string[]|null): void {\n  sinon.stub(Host.GdpClient.GdpClient.instance(), 'getAwardedBadgeNames').resolves(names ? new Set(names) : null);\n}\n\nfunction setReceiveBadgesSetting(value: boolean) {\n  Common.Settings.Settings.instance().moduleSetting('receive-gdp-badges').set(value);\n}\n\nfunction setStarterBadgeSnoozeCount(value: number) {\n  Common.Settings.Settings.instance().createSetting('starter-badge-snooze-count', 0).set(value);\n}\n\nfunction setStarterBadgeLastSnoozedTimestamp(value: number) {\n  Common.Settings.Settings.instance().createSetting('starter-badge-last-snoozed-timestamp', 0).set(value);\n}\n\nfunction setStarterBadgeDismissed(value: boolean) {\n  Common.Settings.Settings.instance().createSetting('starter-badge-dismissed', false).set(value);\n}\n\nfunction setUpEnvironmentForActivatedBadges(): void {\n  setStarterBadgeSnoozeCount(0);\n  setStarterBadgeLastSnoozedTimestamp(NOW - TWO_DAYS);\n  setStarterBadgeDismissed(false);\n  setReceiveBadgesSetting(true);\n  mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n  mockGdpClientGetProfile({\n    profile: {name: 'names/profile-id'},\n    isEligible: true,\n  });\n  mockGetAwardedBadgeNames([]);\n}\n\nasync function assertActiveBadges({\n  clock,\n  shouldStarterBadgeBeActive,\n  shouldActivityBadgeBeActive,\n}: {\n  clock: sinon.SinonFakeTimers,\n  shouldStarterBadgeBeActive: boolean,\n  shouldActivityBadgeBeActive: boolean,\n}): Promise<void> {\n  // Record actions that'll trigger both badges.\n  const handleActivityBadgeActionStub = sinon.stub(MockActivityBadge.prototype, 'handleAction');\n  const handleStarterBadgeActionStub = sinon.stub(MockStarterBadge.prototype, 'handleAction');\n\n  Badges.UserBadges.instance().recordAction(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n  Badges.UserBadges.instance().recordAction(Badges.BadgeAction.CSS_RULE_MODIFIED);\n  await clock.tickAsync(DELAY_BEFORE_TRIGGER);\n\n  if (shouldStarterBadgeBeActive) {\n    sinon.assert.calledOnce(handleStarterBadgeActionStub);\n  } else {\n    sinon.assert.notCalled(handleStarterBadgeActionStub);\n  }\n\n  if (shouldActivityBadgeBeActive) {\n    sinon.assert.calledOnce(handleActivityBadgeActionStub);\n  } else {\n    sinon.assert.notCalled(handleActivityBadgeActionStub);\n  }\n\n  handleStarterBadgeActionStub.restore();\n  handleActivityBadgeActionStub.restore();\n}\n\nconst DELAY_BEFORE_TRIGGER = 1500;\nconst NOW = 683935200000;  // Sep 4, 1991\nconst TWO_DAYS = 2 * 24 * 60 * 60 * 1000;\n\ndescribeWithEnvironment('UserBadges', () => {\n  let clock: sinon.SinonFakeTimers;\n  beforeEach(() => {\n    updateHostConfig({\n      devToolsGdpProfiles: {\n        enabled: true,\n        starterBadgeEnabled: true,\n        badgesEnabled: true,\n      },\n      devToolsGdpProfilesAvailability: {\n        enabled: true,\n        enterprisePolicyValue: Root.Runtime.GdpProfilesEnterprisePolicyValue.ENABLED,\n      },\n    });\n    clock = sinon.useFakeTimers({toFake: ['Date', 'setTimeout'], now: NOW});\n    Object.assign(Badges.UserBadges.BADGE_REGISTRY, MOCK_BADGE_REGISTRY);\n    Badges.UserBadges.instance({forceNew: true});\n  });\n\n  afterEach(() => {\n    clock.restore();\n  });\n\n  it('should dispatch a badge triggered event when a badge is triggered for the first time', async () => {\n    setUpEnvironmentForActivatedBadges();\n    stubGdpClientCreateAward('test/test-badge');\n    await Badges.UserBadges.instance().initialize();\n    const badgeTriggeredPromise = Badges.UserBadges.instance().once(Badges.Events.BADGE_TRIGGERED);\n\n    Badges.UserBadges.instance().recordAction(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n    await clock.tickAsync(DELAY_BEFORE_TRIGGER);\n\n    await badgeTriggeredPromise;\n  });\n\n  it('should only dispatch a badge triggered event once when the same action is recorded multiple times', async () => {\n    setUpEnvironmentForActivatedBadges();\n    stubGdpClientCreateAward('test/test-badge');\n    await Badges.UserBadges.instance().initialize();\n    const badgeTriggeredPromise = Badges.UserBadges.instance().once(Badges.Events.BADGE_TRIGGERED);\n\n    Badges.UserBadges.instance().recordAction(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n    Badges.UserBadges.instance().recordAction(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n    await clock.tickAsync(DELAY_BEFORE_TRIGGER);\n\n    await badgeTriggeredPromise;\n  });\n\n  describe('onTriggerBadge', () => {\n    describe('non-starter badges', () => {\n      it('should award a non-starter badge and dispatch event when `createAward` succeeds', async () => {\n        setUpEnvironmentForActivatedBadges();\n        const createAwardStub = stubGdpClientCreateAward('test/test-badge');\n        await Badges.UserBadges.instance().initialize();\n        const badgeTriggeredPromise = Badges.UserBadges.instance().once(Badges.Events.BADGE_TRIGGERED);\n\n        Badges.UserBadges.instance().recordAction(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n        await clock.tickAsync(DELAY_BEFORE_TRIGGER);\n        const badge = await badgeTriggeredPromise;\n\n        assert.strictEqual(badge.name, 'badges/test-badge');\n        sinon.assert.calledWith(createAwardStub, {name: 'badges/test-badge'});\n      });\n\n      it('should not dispatch event for a non-starter badge when `createAward` fails', async () => {\n        setUpEnvironmentForActivatedBadges();\n        const createAwardStub = stubGdpClientCreateAward(null);\n        const badgeTriggeredSpy = sinon.spy();\n        await Badges.UserBadges.instance().initialize();\n        Badges.UserBadges.instance().addEventListener(Badges.Events.BADGE_TRIGGERED, badgeTriggeredSpy);\n\n        Badges.UserBadges.instance().recordAction(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n        await clock.tickAsync(DELAY_BEFORE_TRIGGER);\n\n        sinon.assert.calledOnce(createAwardStub);\n        sinon.assert.notCalled(badgeTriggeredSpy);\n      });\n    });\n\n    describe('starter-badges', () => {\n      it('should award a starter badge if the user has a profile and the setting is enabled', async () => {\n        setUpEnvironmentForActivatedBadges();\n        const createAwardStub = stubGdpClientCreateAward('test/test-badge');\n        await Badges.UserBadges.instance().initialize();\n        const badgeTriggeredPromise = Badges.UserBadges.instance().once(Badges.Events.BADGE_TRIGGERED);\n\n        Badges.UserBadges.instance().recordAction(Badges.BadgeAction.CSS_RULE_MODIFIED);\n        await clock.tickAsync(DELAY_BEFORE_TRIGGER);\n        const badge = await badgeTriggeredPromise;\n\n        assert.strictEqual(badge.name, 'badges/starter-test-badge');\n        sinon.assert.calledWith(createAwardStub, {name: 'badges/starter-test-badge'});\n      });\n\n      it('should not award a starter badge if the user does not have a GDP profile but trigger the badge', async () => {\n        setReceiveBadgesSetting(true);\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGdpClientGetProfile({\n          profile: null,\n          isEligible: true,\n        });\n        const createAwardStub = stubGdpClientCreateAward(null);\n        const badgeTriggeredSpy = sinon.spy();\n        await Badges.UserBadges.instance().initialize();\n        Badges.UserBadges.instance().addEventListener(Badges.Events.BADGE_TRIGGERED, badgeTriggeredSpy);\n\n        Badges.UserBadges.instance().recordAction(Badges.BadgeAction.CSS_RULE_MODIFIED);\n        await clock.tickAsync(DELAY_BEFORE_TRIGGER);\n\n        sinon.assert.notCalled(createAwardStub);\n        sinon.assert.calledOnce(badgeTriggeredSpy);\n      });\n\n      it('should not award a starter badge if the \"receive badges\" setting is disabled but trigger the badge',\n         async () => {\n           setReceiveBadgesSetting(false);\n           mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n           mockGdpClientGetProfile({\n             profile: {name: 'names/profile-id'},\n             isEligible: true,\n           });\n           mockGetAwardedBadgeNames([]);\n           const createAwardStub = stubGdpClientCreateAward(null);\n           const badgeTriggeredSpy = sinon.spy();\n           await Badges.UserBadges.instance().initialize();\n           Badges.UserBadges.instance().addEventListener(Badges.Events.BADGE_TRIGGERED, badgeTriggeredSpy);\n\n           Badges.UserBadges.instance().recordAction(Badges.BadgeAction.CSS_RULE_MODIFIED);\n           await clock.tickAsync(DELAY_BEFORE_TRIGGER);\n\n           sinon.assert.notCalled(createAwardStub);\n           sinon.assert.calledOnce(badgeTriggeredSpy);\n         });\n    });\n  });\n\n  describe('recordAction', () => {\n    it('should result in a call to `handleAction` for the badges that are interested in that action', async () => {\n      setUpEnvironmentForActivatedBadges();\n      await Badges.UserBadges.instance().initialize();\n      const handleActionStub = sinon.stub(MockActivityBadge.prototype, 'handleAction');\n\n      Badges.UserBadges.instance().recordAction(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n      await clock.tickAsync(DELAY_BEFORE_TRIGGER);\n\n      sinon.assert.calledOnce(handleActionStub);\n    });\n  });\n\n  describe('initialize and reconcile badges', () => {\n    describe('no active badges', () => {\n      it('should not activate any badges if the user is not signed in', async () => {\n        mockGetSyncInformation({isSyncActive: false});\n\n        await Badges.UserBadges.instance().initialize();\n\n        await assertActiveBadges({\n          clock,\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: false,\n        });\n      });\n\n      it('should not activate any badges if the user is signed in but is neither eligible to create a GDP profile nor has an existing one',\n         async () => {\n           mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n           mockGdpClientGetProfile({\n             profile: null,\n             isEligible: false,\n           });\n\n           await Badges.UserBadges.instance().initialize();\n\n           await assertActiveBadges({\n             clock,\n             shouldActivityBadgeBeActive: false,\n             shouldStarterBadgeBeActive: false,\n           });\n         });\n\n      it('should deactivate all badges if the awarded badges check fails', async () => {\n        setReceiveBadgesSetting(true);\n        mockGdpClientGetProfile({\n          profile: {name: 'names/profile-id'},\n          isEligible: true,\n        });\n\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames(null);\n\n        await Badges.UserBadges.instance().initialize();\n\n        await assertActiveBadges({\n          clock,\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: false,\n        });\n      });\n\n      it('should not activate any badges on non-branded builds', async () => {\n        setReceiveBadgesSetting(true);\n        mockGdpClientGetProfile({\n          profile: {name: 'names/profile-id'},\n          isEligible: true,\n        });\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames([]);\n        updateHostConfig({\n          devToolsGdpProfilesAvailability: {\n            enabled: false,\n            enterprisePolicyValue: Root.Runtime.GdpProfilesEnterprisePolicyValue.ENABLED,\n          },\n        });\n\n        await Badges.UserBadges.instance().initialize();\n\n        await assertActiveBadges({\n          clock,\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: false,\n        });\n      });\n\n      it('should not activate any badges if the badges kill-switch is on', async () => {\n        setReceiveBadgesSetting(true);\n        mockGdpClientGetProfile({\n          profile: {name: 'names/profile-id'},\n          isEligible: true,\n        });\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames([]);\n        updateHostConfig({\n          devToolsGdpProfiles: {\n            enabled: true,\n            starterBadgeEnabled: true,\n            badgesEnabled: false,\n          },\n        });\n\n        await Badges.UserBadges.instance().initialize();\n\n        await assertActiveBadges({\n          clock,\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: false,\n        });\n      });\n\n      it('should not activate any badges if not allowed by enterprise policy', async () => {\n        setReceiveBadgesSetting(true);\n        mockGdpClientGetProfile({\n          profile: {name: 'names/profile-id'},\n          isEligible: true,\n        });\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames([]);\n        updateHostConfig({\n          devToolsGdpProfilesAvailability: {\n            enabled: true,\n            enterprisePolicyValue: Root.Runtime.GdpProfilesEnterprisePolicyValue.ENABLED_WITHOUT_BADGES,\n          },\n        });\n\n        await Badges.UserBadges.instance().initialize();\n\n        await assertActiveBadges({\n          clock,\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: false,\n        });\n      });\n\n      it('should not activate any badges if `GetProfile` call returns null', async () => {\n        setReceiveBadgesSetting(true);\n        mockGdpClientGetProfile(null);\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames([]);\n\n        await Badges.UserBadges.instance().initialize();\n\n        await assertActiveBadges({\n          clock,\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: false,\n        });\n      });\n    });\n\n    describe('only starter badge', () => {\n      it('should activate only the starter badge if the user does not have a GDP profile and is eligible for one',\n         async () => {\n           mockGdpClientGetProfile({\n             profile: null,\n             isEligible: true,\n           });\n           mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n           mockGetAwardedBadgeNames([]);\n\n           await Badges.UserBadges.instance().initialize();\n\n           await assertActiveBadges({\n             clock,\n             shouldActivityBadgeBeActive: false,\n             shouldStarterBadgeBeActive: true,\n           });\n         });\n\n      it('should activate only the starter badge if the user does not have a GDP profile and is eligible for one, even if awarded badges check fails',\n         async () => {\n           mockGdpClientGetProfile({\n             profile: null,\n             isEligible: true,\n           });\n           mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n           mockGetAwardedBadgeNames(null);\n\n           await Badges.UserBadges.instance().initialize();\n\n           await assertActiveBadges({\n             clock,\n             shouldActivityBadgeBeActive: false,\n             shouldStarterBadgeBeActive: true,\n           });\n         });\n\n      it('should activate only the starter badge if the user has a GDP profile and the receive badges setting is off',\n         async () => {\n           setReceiveBadgesSetting(false);\n           mockGdpClientGetProfile({\n             profile: {name: 'names/profile-id'},\n             isEligible: true,\n           });\n           mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n           mockGetAwardedBadgeNames([]);\n\n           await Badges.UserBadges.instance().initialize();\n\n           await assertActiveBadges({\n             clock,\n             shouldActivityBadgeBeActive: false,\n             shouldStarterBadgeBeActive: true,\n           });\n         });\n\n      it('should not activate the starter badge if it was awarded before', async () => {\n        mockGdpClientGetProfile({\n          profile: {name: 'names/profile-id'},\n          isEligible: true,\n        });\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames(['badges/starter-test-badge']);\n\n        await Badges.UserBadges.instance().initialize();\n\n        await assertActiveBadges({\n          clock,\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: false,\n        });\n      });\n\n      it('should not activate the starter badge if the starter badge kill-switch is on', async () => {\n        setReceiveBadgesSetting(true);\n        mockGdpClientGetProfile({\n          profile: {name: 'names/profile-id'},\n          isEligible: true,\n        });\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames([]);\n        updateHostConfig({\n          devToolsGdpProfiles: {\n            enabled: true,\n            badgesEnabled: true,\n            starterBadgeEnabled: false,\n          },\n        });\n\n        await Badges.UserBadges.instance().initialize();\n\n        await assertActiveBadges({\n          clock,\n          shouldActivityBadgeBeActive: true,\n          shouldStarterBadgeBeActive: false,\n        });\n      });\n    });\n\n    describe('all badges', () => {\n      it('should activate starter and activity badges if the user has a GDP profile AND the receive badges setting is on AND they are not awarded before',\n         async () => {\n           setReceiveBadgesSetting(true);\n           mockGdpClientGetProfile({\n             profile: {name: 'names/profile-id'},\n             isEligible: true,\n           });\n           mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n           mockGetAwardedBadgeNames([]);\n\n           await Badges.UserBadges.instance().initialize();\n\n           await assertActiveBadges({\n             clock,\n             shouldActivityBadgeBeActive: true,\n             shouldStarterBadgeBeActive: true,\n           });\n         });\n\n      it('should not activate the activity badge if it was awarded before', async () => {\n        setReceiveBadgesSetting(true);\n        mockGdpClientGetProfile({\n          profile: {name: 'names/profile-id'},\n          isEligible: true,\n        });\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames(['badges/test-badge']);\n\n        await Badges.UserBadges.instance().initialize();\n\n        await assertActiveBadges({\n          clock,\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: true,\n        });\n      });\n    });\n\n    it('should deactivate activity based badges when receive badges setting turns to false', async () => {\n      setReceiveBadgesSetting(true);\n      mockGdpClientGetProfile({\n        profile: {name: 'names/profile-id'},\n        isEligible: true,\n      });\n      mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n      mockGetAwardedBadgeNames([]);\n\n      await Badges.UserBadges.instance().initialize();\n      await assertActiveBadges({\n        clock,\n        shouldActivityBadgeBeActive: true,\n        shouldStarterBadgeBeActive: true,\n      });\n\n      const waitForReconcileBadgesToFinish =\n          expectCall(sinon.stub(Badges.UserBadges.instance(), 'reconcileBadgesFinishedForTest'));\n      setReceiveBadgesSetting(false);\n      await waitForReconcileBadgesToFinish;\n      await assertActiveBadges({\n        clock,\n        shouldActivityBadgeBeActive: false,\n        shouldStarterBadgeBeActive: true,\n      });\n    });\n  });\n\n  describe('starter badge snooze and dismiss', () => {\n    beforeEach(() => {\n      setStarterBadgeSnoozeCount(0);\n      setStarterBadgeLastSnoozedTimestamp(0);\n      setStarterBadgeDismissed(false);\n    });\n\n    describe('snoozeStarterBadge', () => {\n      it('should increment the snooze count and update the timestamp', () => {\n        Badges.UserBadges.instance().snoozeStarterBadge();\n        assert.strictEqual(Common.Settings.Settings.instance().settingForTest('starter-badge-snooze-count').get(), 1);\n        assert.strictEqual(\n            Common.Settings.Settings.instance().settingForTest('starter-badge-last-snoozed-timestamp').get(),\n            Date.now());\n      });\n    });\n\n    describe('dismissStarterBadge', () => {\n      it('should set the dismissed setting to true', () => {\n        Badges.UserBadges.instance().dismissStarterBadge();\n        assert.isTrue(Common.Settings.Settings.instance().settingForTest('starter-badge-dismissed').get());\n      });\n    });\n\n    describe('reconcileBadges', () => {\n      it('should not activate the starter badge if it has been dismissed', async () => {\n        setStarterBadgeDismissed(true);\n        mockGdpClientGetProfile({\n          profile: null,\n          isEligible: true,\n        });\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames([]);\n\n        await Badges.UserBadges.instance().initialize();\n\n        await assertActiveBadges({\n          clock,\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: false,\n        });\n      });\n\n      it('should not activate the starter badge if it was snoozed recently', async () => {\n        setStarterBadgeLastSnoozedTimestamp(NOW - 500);\n        mockGdpClientGetProfile({\n          profile: null,\n          isEligible: true,\n        });\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames([]);\n\n        await Badges.UserBadges.instance().initialize();\n\n        await assertActiveBadges({\n          clock,\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: false,\n        });\n      });\n\n      it('should not activate the starter badge if the max snooze count has been reached', async () => {\n        setStarterBadgeSnoozeCount(3);\n        mockGdpClientGetProfile({\n          profile: null,\n          isEligible: true,\n        });\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames([]);\n\n        await Badges.UserBadges.instance().initialize();\n\n        await assertActiveBadges({\n          clock,\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: false,\n        });\n      });\n\n      it('should activate the starter badge if the snooze period has passed', async () => {\n        setStarterBadgeLastSnoozedTimestamp(NOW - TWO_DAYS);\n        mockGdpClientGetProfile({\n          profile: null,\n          isEligible: true,\n        });\n        mockGetSyncInformation({accountEmail: 'test@test.com', isSyncActive: false});\n        mockGetAwardedBadgeNames([]);\n\n        await Badges.UserBadges.instance().initialize();\n\n        await assertActiveBadges({\n          clock,\n          shouldActivityBadgeBeActive: false,\n          shouldStarterBadgeBeActive: true,\n        });\n      });\n    });\n\n    describe('onTriggerBadge', () => {\n      it('should not award the starter badge if it has been dismissed', async () => {\n        setUpEnvironmentForActivatedBadges();\n        setStarterBadgeDismissed(true);\n        const createAwardStub = stubGdpClientCreateAward(null);\n        const badgeTriggeredSpy = sinon.spy();\n        await Badges.UserBadges.instance().initialize();\n        Badges.UserBadges.instance().addEventListener(Badges.Events.BADGE_TRIGGERED, badgeTriggeredSpy);\n\n        Badges.UserBadges.instance().recordAction(Badges.BadgeAction.CSS_RULE_MODIFIED);\n        await clock.tickAsync(DELAY_BEFORE_TRIGGER);\n\n        sinon.assert.notCalled(createAwardStub);\n        sinon.assert.notCalled(badgeTriggeredSpy);\n      });\n\n      it('should not award the starter badge if it was snoozed recently', async () => {\n        setUpEnvironmentForActivatedBadges();\n        setStarterBadgeLastSnoozedTimestamp(NOW - 500);\n        const createAwardStub = stubGdpClientCreateAward(null);\n        const badgeTriggeredSpy = sinon.spy();\n        await Badges.UserBadges.instance().initialize();\n        Badges.UserBadges.instance().addEventListener(Badges.Events.BADGE_TRIGGERED, badgeTriggeredSpy);\n\n        Badges.UserBadges.instance().recordAction(Badges.BadgeAction.CSS_RULE_MODIFIED);\n        await clock.tickAsync(DELAY_BEFORE_TRIGGER);\n\n        sinon.assert.notCalled(createAwardStub);\n        sinon.assert.notCalled(badgeTriggeredSpy);\n      });\n\n      it('should award the starter badge if the snooze period has passed', async () => {\n        setStarterBadgeLastSnoozedTimestamp(NOW - TWO_DAYS);\n        setUpEnvironmentForActivatedBadges();\n        const createAwardStub = stubGdpClientCreateAward('test/test-badge');\n        await Badges.UserBadges.instance().initialize();\n        const badgeTriggeredPromise = Badges.UserBadges.instance().once(Badges.Events.BADGE_TRIGGERED);\n\n        Badges.UserBadges.instance().recordAction(Badges.BadgeAction.CSS_RULE_MODIFIED);\n        await clock.tickAsync(DELAY_BEFORE_TRIGGER);\n        await badgeTriggeredPromise;\n\n        sinon.assert.calledOnce(createAwardStub);\n      });\n    });\n  });\n});\n"]}