{"version":3,"file":"AiExplorerBadge.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/badges/AiExplorerBadge.test.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,EAAC,uBAAuB,EAAC,MAAM,qCAAqC,CAAC;AAE5E,OAAO,KAAK,MAAM,MAAM,aAAa,CAAC;AAGtC,uBAAuB,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC9C,IAAI,KAA6B,CAAC;IAClC,IAAI,WAAkE,CAAC;IACvE,IAAI,aAA8B,CAAC;IAEnC,UAAU,CAAC,GAAG,EAAE;QACd,aAAa,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;QAC7B,WAAW,GAAG,IAAI,MAAM,CAAC,aAAa,CAAC,aAAa,EAAqB,CAAC;QAC1E,KAAK,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,EAAC,cAAc,EAAE,aAAa,EAAE,sBAAsB,EAAE,WAAW,EAAC,CAAC,CAAC;QACzG,KAAK,CAAC,QAAQ,EAAE,CAAC;IACnB,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,KAAK,CAAC,UAAU,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;QAClF,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC;QAChG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACf,WAAW,CAAC,wBAAwB,CAAC,MAAM,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC;QACjF,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAChE,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC;QAChG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACf,WAAW,CAAC,wBAAwB,CAAC,MAAM,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC;QACjF,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,2BAA2B,CAAC,CAAC;QAChG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACf,WAAW,CAAC,wBAAwB,CAAC,MAAM,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC;QACjF,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QACvC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\n\nimport * as Badges from './badges.js';\nimport type {BadgeActionEvents} from './badges.js';\n\ndescribeWithEnvironment('AiExplorerBadge', () => {\n  let badge: Badges.AiExplorerBadge;\n  let eventTarget: Common.ObjectWrapper.ObjectWrapper<BadgeActionEvents>;\n  let onTriggerStub: sinon.SinonStub;\n\n  beforeEach(() => {\n    onTriggerStub = sinon.stub();\n    eventTarget = new Common.ObjectWrapper.ObjectWrapper<BadgeActionEvents>();\n    badge = new Badges.AiExplorerBadge({onTriggerBadge: onTriggerStub, badgeActionEventTarget: eventTarget});\n    badge.activate();\n  });\n\n  afterEach(() => {\n    badge.deactivate();\n  });\n\n  it('should increase the count of the setting by 1 if less than a limit', async () => {\n    const setting = Common.Settings.Settings.instance().settingForTest('gdp.ai-conversation-count');\n    setting.set(0);\n    eventTarget.dispatchEventToListeners(Badges.BadgeAction.STARTED_AI_CONVERSATION);\n    assert.strictEqual(setting.get(), 1);\n  });\n\n  it('should not increase the setting when it hits the limit', () => {\n    const setting = Common.Settings.Settings.instance().settingForTest('gdp.ai-conversation-count');\n    setting.set(5);\n    eventTarget.dispatchEventToListeners(Badges.BadgeAction.STARTED_AI_CONVERSATION);\n    assert.strictEqual(setting.get(), 5);\n  });\n\n  it('should trigger the badge when it hits the limit', () => {\n    const setting = Common.Settings.Settings.instance().settingForTest('gdp.ai-conversation-count');\n    setting.set(4);\n    eventTarget.dispatchEventToListeners(Badges.BadgeAction.STARTED_AI_CONVERSATION);\n    sinon.assert.calledOnce(onTriggerStub);\n    assert.strictEqual(setting.get(), 5);\n  });\n});\n"]}