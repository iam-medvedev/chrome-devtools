{"version":3,"file":"Badge.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/badges/Badge.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\n\nimport * as Badges from './badges.js';\n\nclass TestBadge extends Badges.Badge {\n  override name = 'badges/test-badge';\n  override title = 'test-badge-title';\n  override imageUri = 'image-uri';\n  override interestedActions: readonly Badges.BadgeAction[] = [\n    Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED,\n  ] as const;\n\n  override handleAction(): void {\n    this.trigger();\n  }\n}\n\ndescribe('Badge', () => {\n  let badgeActionEventTarget: Common.ObjectWrapper.ObjectWrapper<Badges.BadgeActionEvents>;\n  let testBadge: TestBadge;\n  let handleActionSpy: sinon.SinonSpy;\n  let onTriggerBadgeStub: sinon.SinonStub;\n\n  beforeEach(() => {\n    badgeActionEventTarget = new Common.ObjectWrapper.ObjectWrapper();\n    handleActionSpy = sinon.spy(TestBadge.prototype, 'handleAction');\n    onTriggerBadgeStub = sinon.stub();\n    testBadge = new TestBadge({\n      onTriggerBadge: onTriggerBadgeStub,\n      badgeActionEventTarget,\n    });\n  });\n\n  it('events received for interestedActions trigger `handleAction`', () => {\n    testBadge.activate();\n\n    badgeActionEventTarget.dispatchEventToListeners(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n\n    sinon.assert.calledOnce(handleActionSpy);\n  });\n\n  it('events received for unrelated actions does not trigger `handleAction`', () => {\n    testBadge.activate();\n\n    badgeActionEventTarget.dispatchEventToListeners(Badges.BadgeAction.CSS_RULE_MODIFIED);\n\n    sinon.assert.notCalled(handleActionSpy);\n  });\n\n  it('calling `activate` more than one time only adds event listeners once', () => {\n    testBadge.activate();\n    testBadge.activate();\n\n    badgeActionEventTarget.dispatchEventToListeners(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n\n    sinon.assert.calledOnce(handleActionSpy);\n  });\n\n  it('calling `deactivate` removes event listeners from the badgeActionEventTarget', () => {\n    testBadge.activate();\n    badgeActionEventTarget.dispatchEventToListeners(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n    sinon.assert.calledOnce(handleActionSpy);\n\n    handleActionSpy.resetHistory();\n    testBadge.deactivate();\n    badgeActionEventTarget.dispatchEventToListeners(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n    sinon.assert.notCalled(handleActionSpy);\n  });\n\n  it('events received more than once only calls `onTriggerBadge` once', () => {\n    testBadge.activate();\n\n    badgeActionEventTarget.dispatchEventToListeners(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n    badgeActionEventTarget.dispatchEventToListeners(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n\n    sinon.assert.calledOnce(onTriggerBadgeStub);\n  });\n\n  it('a badge can be re-triggered after it has been triggered and then re-activated', () => {\n    testBadge.activate();\n\n    badgeActionEventTarget.dispatchEventToListeners(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n    sinon.assert.calledOnce(onTriggerBadgeStub);\n\n    testBadge.activate();\n    badgeActionEventTarget.dispatchEventToListeners(Badges.BadgeAction.PERFORMANCE_INSIGHT_CLICKED);\n    sinon.assert.calledTwice(onTriggerBadgeStub);\n  });\n});\n"]}