{"version":3,"file":"Badge.js","sourceRoot":"","sources":["../../../../../../front_end/models/badges/Badge.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AAEtD,MAAM,CAAN,IAAY,WAGX;AAHD,WAAY,WAAW;IACrB,sDAAuC,CAAA;IACvC,0EAA2D,CAAA;AAC7D,CAAC,EAHW,WAAW,KAAX,WAAW,QAGtB;AASD,MAAM,OAAgB,KAAK;IACzB,4BAA4B,CAAyB;IACrD,uBAAuB,CAAwD;IAC/E,eAAe,GAAyC,EAAE,CAAC;IAC3D,gBAAgB,GAAG,KAAK,CAAC;IAKhB,cAAc,GAAY,KAAK,CAAC;IAEzC,YAAY,OAAqB;QAC/B,IAAI,CAAC,4BAA4B,GAAG,OAAO,CAAC,2BAA2B,CAAC;QACxE,IAAI,CAAC,uBAAuB,GAAG,OAAO,CAAC,sBAAsB,CAAC;IAChE,CAAC;IAGS,OAAO;QACf,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED,QAAQ;QACN,uDAAuD;QACvD,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,yEAAyE;QACzE,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACpC,OAAO;QACT,CAAC;QAED,IAAI,CAAC,eAAe;YAChB,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,UAAU,EAAE,GAAG,EAAE;gBACtG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YAChC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAChB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;YACjC,OAAO;QACT,CAAC;QAED,MAAM,CAAC,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC9D,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAC5B,CAAC;CACF","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\n\nexport enum BadgeAction {\n  CSS_RULE_MODIFIED = 'css-rule-modified',\n  PERFORMANCE_INSIGHT_CLICKED = 'performance-insight-clicked',\n}\n\nexport type BadgeActionEvents = Record<BadgeAction, void>;\n\nexport interface BadgeContext {\n  dispatchBadgeTriggeredEvent: (badge: Badge) => void;\n  badgeActionEventTarget: Common.ObjectWrapper.ObjectWrapper<BadgeActionEvents>;\n}\n\nexport abstract class Badge {\n  #dispatchBadgeTriggeredEvent: (badge: Badge) => void;\n  #badgeActionEventTarget: Common.ObjectWrapper.ObjectWrapper<BadgeActionEvents>;\n  #eventListeners: Common.EventTarget.EventDescriptor[] = [];\n  #triggeredBefore = false;\n\n  abstract readonly name: string;\n  abstract readonly title: string;\n  abstract readonly interestedActions: readonly BadgeAction[];\n  readonly isStarterBadge: boolean = false;\n\n  constructor(context: BadgeContext) {\n    this.#dispatchBadgeTriggeredEvent = context.dispatchBadgeTriggeredEvent;\n    this.#badgeActionEventTarget = context.badgeActionEventTarget;\n  }\n\n  abstract handleAction(action: BadgeAction): void;\n  protected trigger(): void {\n    if (this.#triggeredBefore) {\n      return;\n    }\n\n    this.#triggeredBefore = true;\n    this.deactivate();\n    this.#dispatchBadgeTriggeredEvent(this);\n  }\n\n  activate(): void {\n    // We don't reactivate a badge that's triggered before.\n    if (this.#triggeredBefore) {\n      return;\n    }\n\n    // The event listeners are already registered, we don't re-register them.\n    if (this.#eventListeners.length > 0) {\n      return;\n    }\n\n    this.#eventListeners =\n        this.interestedActions.map(actionType => this.#badgeActionEventTarget.addEventListener(actionType, () => {\n          this.handleAction(actionType);\n        }, this));\n  }\n\n  deactivate(): void {\n    if (!this.#eventListeners.length) {\n      return;\n    }\n\n    Common.EventTarget.removeEventListeners(this.#eventListeners);\n    this.#eventListeners = [];\n  }\n}\n"]}