{"version":3,"file":"UserBadges.js","sourceRoot":"","sources":["../../../../../../front_end/models/badges/UserBadges.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\n\nimport {AiExplorerBadge} from './AiExplorerBadge.js';\nimport type {Badge, BadgeAction, BadgeActionEvents, BadgeContext} from './Badge.js';\nimport {CodeWhispererBadge} from './CodeWhispererBadge.js';\nimport {DOMDetectiveBadge} from './DOMDetectiveBadge.js';\nimport {SpeedsterBadge} from './SpeedsterBadge.js';\nimport {StarterBadge} from './StarterBadge.js';\n\ntype BadgeClass = new (badgeContext: BadgeContext) => Badge;\n\nexport const enum Events {\n  BADGE_TRIGGERED = 'BadgeTriggered',\n}\n\nexport interface EventTypes {\n  [Events.BADGE_TRIGGERED]: Badge;\n}\n\nlet userBadgesInstance: UserBadges|undefined = undefined;\nexport class UserBadges extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #badgeActionEventTarget = new Common.ObjectWrapper.ObjectWrapper<BadgeActionEvents>();\n\n  #receiveBadgesSetting: Common.Settings.Setting<Boolean>;\n  #allBadges: Badge[];\n\n  static readonly BADGE_REGISTRY: BadgeClass[] = [\n    StarterBadge,\n    SpeedsterBadge,\n    DOMDetectiveBadge,\n    CodeWhispererBadge,\n    AiExplorerBadge,\n  ];\n\n  private constructor() {\n    super();\n\n    this.#receiveBadgesSetting = Common.Settings.Settings.instance().moduleSetting('receive-gdp-badges');\n    this.#receiveBadgesSetting.addChangeListener(this.#reconcileBadges, this);\n\n    this.#allBadges = UserBadges.BADGE_REGISTRY.map(badgeCtor => new badgeCtor({\n                                                      onTriggerBadge: this.#onTriggerBadge.bind(this),\n                                                      badgeActionEventTarget: this.#badgeActionEventTarget,\n                                                    }));\n  }\n\n  static instance({forceNew}: {forceNew: boolean} = {forceNew: false}): UserBadges {\n    if (!userBadgesInstance || forceNew) {\n      userBadgesInstance = new UserBadges();\n    }\n    return userBadgesInstance;\n  }\n\n  async initialize(): Promise<void> {\n    return await this.#reconcileBadges();\n  }\n\n  recordAction(action: BadgeAction): void {\n    // `Common.ObjectWrapper.ObjectWrapper` does not allow passing unions to\n    // the `dispatchEventToListeners` and `action` in this case is a union.\n    // We want to support listening to specific actions here, that's why we suppress\n    // the TypeScript errors. This is safe to do so since every `BadgeAction`\n    // is a valid event type and all events are typed as void.\n    // @ts-expect-error\n    this.#badgeActionEventTarget.dispatchEventToListeners(action);\n  }\n\n  async #onTriggerBadge(badge: Badge): Promise<void> {\n    let shouldAwardBadge = false;\n    // By default, we award non-starter badges directly when they are triggered.\n    if (!badge.isStarterBadge) {\n      shouldAwardBadge = true;\n    } else {\n      const gdpProfile = await Host.GdpClient.GdpClient.instance().getProfile();\n      const receiveBadgesSettingEnabled = Boolean(this.#receiveBadgesSetting.get());\n      // If there is a GDP profile and the user has enabled receiving badges, we award the starter badge as well.\n      if (gdpProfile && receiveBadgesSettingEnabled) {\n        shouldAwardBadge = true;\n      }\n    }\n\n    // Awarding was needed and not successful, we don't show the notification\n    if (shouldAwardBadge) {\n      const result = await Host.GdpClient.GdpClient.instance().createAward({name: badge.name});\n      if (!result) {\n        return;\n      }\n    }\n\n    this.dispatchEventToListeners(Events.BADGE_TRIGGERED, badge);\n  }\n\n  #deactivateAllBadges(): void {\n    this.#allBadges.forEach(badge => {\n      badge.deactivate();\n    });\n  }\n\n  // TODO(ergunsh): Implement starter badge dismissal, snooze count & timestamp checks.\n  async #reconcileBadges(): Promise<void> {\n    const syncInfo = await new Promise<Host.InspectorFrontendHostAPI.SyncInformation>(\n        resolve => Host.InspectorFrontendHost.InspectorFrontendHostInstance.getSyncInformation(resolve));\n    // If the user is not signed in, do not activate any badges.\n    if (!syncInfo.accountEmail) {\n      this.#deactivateAllBadges();\n      return;\n    }\n\n    const [gdpProfile, isEligibleToCreateProfile] = await Promise.all([\n      Host.GdpClient.GdpClient.instance().getProfile(),\n      Host.GdpClient.GdpClient.instance().isEligibleToCreateProfile(),\n    ]);\n\n    // User does not have a GDP profile & not eligible to create one.\n    // So, we don't activate any badges for them.\n    if (!gdpProfile && !isEligibleToCreateProfile) {\n      this.#deactivateAllBadges();\n      return;\n    }\n\n    let awardedBadgeNames: Set<string>|null = null;\n    if (gdpProfile) {\n      awardedBadgeNames = await Host.GdpClient.GdpClient.instance().getAwardedBadgeNames(\n          {names: this.#allBadges.map(badge => badge.name)});\n      // This is a conservative approach. We bail out if `awardedBadgeNames` is null\n      // when there is a profile to prevent a negative user experience.\n      //\n      // A failure here (e.g., from a typo in a badge name) could cause us to\n      // re-trigger the \"Receive badges\" nudge for a user who has already earned the\n      // starter badge and opted out of receiving badges.\n      //\n      // The trade-off is, we silently failing to enable badge mechanism rather than annoying the user.\n      if (!awardedBadgeNames) {\n        this.#deactivateAllBadges();\n        return;\n      }\n    }\n\n    const receiveBadgesSettingEnabled = Boolean(this.#receiveBadgesSetting.get());\n    for (const badge of this.#allBadges) {\n      if (awardedBadgeNames?.has(badge.name)) {\n        badge.deactivate();\n        continue;\n      }\n\n      const shouldActivateStarterBadge = badge.isStarterBadge && isEligibleToCreateProfile;\n      const shouldActivateActivityBasedBadge =\n          !badge.isStarterBadge && Boolean(gdpProfile) && receiveBadgesSettingEnabled;\n      if (shouldActivateStarterBadge || shouldActivateActivityBasedBadge) {\n        badge.activate();\n      } else {\n        badge.deactivate();\n      }\n    }\n\n    this.reconcileBadgesFinishedForTest();\n  }\n\n  reconcileBadgesFinishedForTest(): void {\n  }\n\n  isReceiveBadgesSettingEnabled(): boolean {\n    return Boolean(this.#receiveBadgesSetting.get());\n  }\n}\n"]}