{"version":3,"file":"StaticContentProvider.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/text_utils/StaticContentProvider.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AAGtD,OAAO,KAAK,SAAS,MAAM,iBAAiB,CAAC;AAE7C,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AAEtB,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;IACvF,MAAM,OAAO,GAAG,iBAAoD,CAAC;IAErE,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,QAAQ,GACV,SAAS,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,UAAU,CAAC,OAAO,EAAE,YAAY,EAAE,sBAAsB,CAAC,CAAC;QAEpH,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;QACzE,MAAM,WAAW,GAAG,sBAAsB,CAAC;QAC3C,MAAM,QAAQ,GACV,SAAS,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,UAAU,CAAC,OAAO,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;QAEzG,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,cAAc,EAAE,CAAC;QAEjD,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE;YACzB,OAAO,EAAE,WAAW;YACpB,SAAS,EAAE,KAAK;SACjB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\n\nimport * as TextUtils from './text_utils.js';\n\nconst {assert} = chai;\n\ndescribe('StaticContentProvider', () => {\n  const jsonResource = Common.ResourceType.ResourceType.fromMimeType('application/json');\n  const testUrl = 'www.testurl.com' as Platform.DevToolsPath.UrlString;\n\n  it('can be created from a string source', () => {\n    const provider =\n        TextUtils.StaticContentProvider.StaticContentProvider.fromString(testUrl, jsonResource, '{ \"hello\": \"world\" }');\n\n    assert.instanceOf(provider, TextUtils.StaticContentProvider.StaticContentProvider);\n  });\n\n  it('lazily fetches its contents when requestContent is called', async () => {\n    const jsonContent = '{ \"hello\": \"world\" }';\n    const provider =\n        TextUtils.StaticContentProvider.StaticContentProvider.fromString(testUrl, jsonResource, jsonContent);\n\n    const contents = await provider.requestContent();\n\n    assert.deepEqual(contents, {\n      content: jsonContent,\n      isEncoded: false,\n    });\n  });\n});\n"]}