{"version":3,"file":"ContentData.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/text_utils/ContentData.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\n\nimport * as TextUtils from './text_utils.js';\n\ndescribe('ContentData', () => {\n  const {ContentData} = TextUtils.ContentData;\n  type ContentDataOrError = TextUtils.ContentData.ContentDataOrError;\n  const {MimeType} = Platform.MimeType;\n\n  it('throws an error when trying to encode text content into base64', () => {\n    const contentData = new ContentData('a simple text', false, MimeType.HTML);\n\n    assert.throws(() => contentData.base64);\n  });\n\n  it('decodes text based on the provided encoding', () => {\n    const contentData = new ContentData(\n        '//48ACEARABPAEMAVABZAFAARQAgAGgAdABtAGwAPgAKADwAcAA+AEkA8QB0AOsAcgBuAOIAdABpAPQAbgDgAGwAaQB6AOYAdABpAPgAbgADJjTYBt88AC8AcAA+AAoA',\n        true, MimeType.HTML, 'utf-16');\n\n    assert.strictEqual(contentData.text, '<!DOCTYPE html>\\n<p>I√±t√´rn√¢ti√¥n√†liz√¶ti√∏n‚òÉùåÜ</p>\\n');\n  });\n\n  it('throws an error  when trying to decode data not considered text content', () => {\n    const contentData = new ContentData('AQIDBA==', true, 'application/wasm');\n\n    assert.throws(() => contentData.text);\n  });\n\n  it('treats an empty string for charset as utf-8', () => {\n    const contentData = new ContentData(\n        'PCFET0NUWVBFIGh0bWw+CjxwPknDsXTDq3Juw6J0acO0bsOgbGl6w6Z0acO4buKYg/CdjIY8L3A+Cg==', true, MimeType.HTML, '');\n\n    assert.strictEqual(contentData.text, '<!DOCTYPE html>\\n<p>I√±t√´rn√¢ti√¥n√†liz√¶ti√∏n‚òÉùåÜ</p>\\n');\n  });\n\n  it('falls back to default mime types if none is provided', () => {\n    const textData = new ContentData('foo', false, '');\n    assert.strictEqual(textData.mimeType, 'text/plain');\n\n    const binaryData = new ContentData('AQIDBA==', true, '');\n    assert.strictEqual(binaryData.mimeType, 'application/octet-stream');\n  });\n\n  it('converts to a data URL', () => {\n    const textContent = new ContentData('a simple text', false, MimeType.HTML);\n    assert.strictEqual(textContent.asDataUrl(), 'data:text/html,a%20simple%20text');\n\n    const binaryData = new ContentData('AQIDBA==', true, 'application/wasm');\n    assert.strictEqual(binaryData.asDataUrl(), 'data:application/wasm;base64,AQIDBA==');\n\n    const textAsBase64Utf16 = new ContentData(\n        '//48ACEARABPAEMAVABZAFAARQAgAGgAdABtAGwAPgAKADwAcAA+AEkA8QB0AOsAcgBuAOIAdABpAPQAbgDgAGwAaQB6AOYAdABpAPgAbgADJjTYBt88AC8AcAA+AAoA',\n        true, MimeType.HTML, 'utf-16');\n    assert.strictEqual(\n        textAsBase64Utf16.asDataUrl(),\n        'data:text/html;charset=utf-16;base64,//48ACEARABPAEMAVABZAFAARQAgAGgAdABtAGwAPgAKADwAcAA+AEkA8QB0AOsAcgBuAOIAdABpAPQAbgDgAGwAaQB6AOYAdABpAPgAbgADJjTYBt88AC8AcAA+AAoA');\n  });\n\n  it('does not include charset for already decoded text in the data URL', () => {\n    const textWithCharsetContent = new ContentData('a simple text', false, MimeType.HTML, 'utf-16');\n    assert.strictEqual(textWithCharsetContent.asDataUrl(), 'data:text/html,a%20simple%20text');\n  });\n\n  it('converts to DeferredContent', () => {\n    const textContent = new ContentData('a simple text', false, MimeType.HTML);\n    const deferredTextContent = textContent.asDeferedContent();\n\n    assert.isFalse(deferredTextContent.isEncoded);\n    assert.strictEqual(deferredTextContent.content, 'a simple text');\n\n    const binaryData = new ContentData('AQIDBA==', true, 'application/wasm');\n    const deferredBinaryData = binaryData.asDeferedContent();\n\n    assert.isTrue(deferredBinaryData.isEncoded);\n    assert.strictEqual(deferredBinaryData.content, 'AQIDBA==');\n\n    const binaryTextData = new ContentData(\n        'PCFET0NUWVBFIGh0bWw+CjxwPknDsXTDq3Juw6J0acO0bsOgbGl6w6Z0acO4buKYg/CdjIY8L3A+Cg==', true, MimeType.HTML,\n        'utf-8');\n    const deferredBinaryTextData = binaryTextData.asDeferedContent();\n\n    assert.isFalse(deferredBinaryTextData.isEncoded);\n    assert.strictEqual(deferredBinaryTextData.content, '<!DOCTYPE html>\\n<p>I√±t√´rn√¢ti√¥n√†liz√¶ti√∏n‚òÉùåÜ</p>\\n');\n\n    const unknownTextData = new ContentData('foobar', false, 'some/weird-text-mime');\n    const deferredUnknownTextData = unknownTextData.asDeferedContent();\n\n    assert.isFalse(deferredUnknownTextData.isEncoded);\n    assert.strictEqual(deferredUnknownTextData.content, 'foobar');\n  });\n\n  it('converts ContentDataOrError to DeferredContent', () => {\n    const textContent: ContentDataOrError = new ContentData('a simple text', false, MimeType.HTML);\n    const deferredTextContent = ContentData.asDeferredContent(textContent);\n\n    assert.isFalse(deferredTextContent.isEncoded);\n    assert.strictEqual(deferredTextContent.content, 'a simple text');\n\n    const error: ContentDataOrError = {error: 'something went wrong'};\n    const deferedErrorContent = ContentData.asDeferredContent(error);\n\n    // TypeScript somehow doesn't think DeferredContent.error is a thing.\n    assert.property(deferedErrorContent, 'error');\n    assert.propertyVal(deferedErrorContent, 'error', 'something went wrong');\n  });\n});\n"]}