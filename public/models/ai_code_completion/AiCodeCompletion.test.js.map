{"version":3,"file":"AiCodeCompletion.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/ai_code_completion/AiCodeCompletion.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport {\n  describeWithEnvironment,\n  updateHostConfig,\n} from '../../testing/EnvironmentHelpers.js';\nimport * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\nimport * as TextEditor from '../../ui/components/text_editor/text_editor.js';\n\nimport * as AiCodeCompletion from './ai_code_completion.js';\n\nconst DEFAULT_CURSOR_POSITION = 0;\n\nfunction makeState(doc: string, extensions: CodeMirror.Extension = []) {\n  return CodeMirror.EditorState.create({\n    doc,\n    extensions: [\n      extensions,\n      TextEditor.Config.baseConfiguration(doc),\n      TextEditor.Config.autocompletion.instance(),\n    ],\n    selection: CodeMirror.EditorSelection.cursor(DEFAULT_CURSOR_POSITION),\n  });\n}\n\ndescribeWithEnvironment('AiCodeCompletion', () => {\n  let clock: sinon.SinonFakeTimers;\n\n  beforeEach(() => {\n    clock = sinon.useFakeTimers();\n    updateHostConfig({\n      devToolsAiCodeCompletion: {\n        enabled: true,\n        temperature: 0.5,\n        modelId: 'test-model',\n        userTier: 'BETA',\n      },\n    });\n  });\n\n  afterEach(() => {\n    clock.restore();\n  });\n\n  it('builds a request and calls the AIDA client on text changed', async () => {\n    const mockAidaClient = sinon.createStubInstance(Host.AidaClient.AidaClient, {\n      completeCode: Promise.resolve(null),\n    });\n    const aiCodeCompletion = new AiCodeCompletion.AiCodeCompletion.AiCodeCompletion(\n        {aidaClient: mockAidaClient},\n        sinon.createStubInstance(TextEditor.TextEditor.TextEditor),\n        AiCodeCompletion.AiCodeCompletion.ContextFlavor.CONSOLE,\n        ['\\n'],\n    );\n\n    aiCodeCompletion.onTextChanged('prefix', 'suffix', 6);\n\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS + 1);\n    sinon.assert.calledOnce(mockAidaClient.completeCode);\n    const request = mockAidaClient.completeCode.firstCall.args[0];\n    assert.strictEqual(request.client, 'CHROME_DEVTOOLS');\n    assert.strictEqual(request.prefix, '\\nprefix');\n    assert.strictEqual(request.suffix, 'suffix');\n    assert.deepEqual(request.options, {\n      temperature: 0.5,\n      model_id: 'test-model',\n      inference_language: Host.AidaClient.AidaInferenceLanguage.JAVASCRIPT,\n      stop_sequences: ['\\n'],\n    });\n  });\n\n  it('dispatches a suggestion to the editor when AIDA returns one', async () => {\n    const editor = new TextEditor.TextEditor.TextEditor(makeState('', TextEditor.Config.aiAutoCompleteSuggestion));\n    const dispatchSpy = sinon.spy(editor, 'dispatch');\n    const mockAidaClient = sinon.createStubInstance(Host.AidaClient.AidaClient, {\n      completeCode: Promise.resolve({\n        generatedSamples: [{\n          generationString: 'suggestion',\n          sampleId: 1,\n          score: 1,\n        }],\n        metadata: {rpcGlobalId: 1},\n      }),\n    });\n    const aiCodeCompletion = new AiCodeCompletion.AiCodeCompletion.AiCodeCompletion(\n        {aidaClient: mockAidaClient},\n        editor,\n        AiCodeCompletion.AiCodeCompletion.ContextFlavor.CONSOLE,\n    );\n\n    aiCodeCompletion.onTextChanged('prefix', '\\n', DEFAULT_CURSOR_POSITION);\n\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS + 1);\n    sinon.assert.calledOnce(mockAidaClient.completeCode);\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.DELAY_BEFORE_SHOWING_RESPONSE_MS + 1);\n    const suggestion = editor.editor.state.field(TextEditor.Config.aiAutoCompleteSuggestionState);\n    assert.strictEqual(suggestion?.text, 'suggestion');\n    assert.strictEqual(suggestion?.from, DEFAULT_CURSOR_POSITION);\n    assert.strictEqual(suggestion?.sampleId, 1);\n    assert.strictEqual(suggestion?.rpcGlobalId, 1);\n    sinon.assert.calledOnce(dispatchSpy);\n  });\n\n  it('trims a suggestion with suffix overlap and dispatches it to the editor', async () => {\n    const editor = new TextEditor.TextEditor.TextEditor(makeState('', TextEditor.Config.aiAutoCompleteSuggestion));\n    const dispatchSpy = sinon.spy(editor, 'dispatch');\n    const mockAidaClient = sinon.createStubInstance(Host.AidaClient.AidaClient, {\n      completeCode: Promise.resolve({\n        generatedSamples: [{\n          generationString: 'Hello World\");',\n          sampleId: 1,\n          score: 1,\n        }],\n        metadata: {rpcGlobalId: 1},\n      }),\n    });\n    const aiCodeCompletion = new AiCodeCompletion.AiCodeCompletion.AiCodeCompletion(\n        {aidaClient: mockAidaClient},\n        editor,\n        AiCodeCompletion.AiCodeCompletion.ContextFlavor.CONSOLE,\n    );\n\n    aiCodeCompletion.onTextChanged('console.log(\"', '\");\\n', DEFAULT_CURSOR_POSITION);\n\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS + 1);\n    sinon.assert.calledOnce(mockAidaClient.completeCode);\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.DELAY_BEFORE_SHOWING_RESPONSE_MS + 1);\n    const suggestion = editor.editor.state.field(TextEditor.Config.aiAutoCompleteSuggestionState);\n    assert.strictEqual(suggestion?.text, 'Hello World');\n    assert.strictEqual(suggestion?.from, DEFAULT_CURSOR_POSITION);\n    assert.strictEqual(suggestion?.sampleId, 1);\n    assert.strictEqual(suggestion?.rpcGlobalId, 1);\n    sinon.assert.calledOnce(dispatchSpy);\n  });\n\n  it('debounces requests to AIDA', async () => {\n    const mockAidaClient = sinon.createStubInstance(Host.AidaClient.AidaClient, {\n      completeCode: Promise.resolve(null),\n    });\n    const aiCodeCompletion = new AiCodeCompletion.AiCodeCompletion.AiCodeCompletion(\n        {aidaClient: mockAidaClient},\n        sinon.createStubInstance(TextEditor.TextEditor.TextEditor),\n        AiCodeCompletion.AiCodeCompletion.ContextFlavor.CONSOLE,\n    );\n\n    aiCodeCompletion.onTextChanged('p', '', 1);\n    aiCodeCompletion.onTextChanged('pr', '', 2);\n    aiCodeCompletion.onTextChanged('pre', '', 3);\n\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS + 1);\n    sinon.assert.calledOnce(mockAidaClient.completeCode);\n    assert.strictEqual(mockAidaClient.completeCode.firstCall.args[0].prefix, '\\npre');\n  });\n\n  it('does not dispatch suggestion or citation if recitation action is BLOCK', async () => {\n    const editor = new TextEditor.TextEditor.TextEditor(makeState('', TextEditor.Config.aiAutoCompleteSuggestion));\n    const dispatchSpy = sinon.spy(editor, 'dispatch');\n    const mockAidaClient = sinon.createStubInstance(Host.AidaClient.AidaClient, {\n      completeCode: Promise.resolve({\n        generatedSamples: [{\n          generationString: 'suggestion',\n          sampleId: 1,\n          score: 1,\n          attributionMetadata: {\n            attributionAction: Host.AidaClient.RecitationAction.BLOCK,\n            citations: [{uri: 'https://www.example.com'}],\n          }\n        }],\n        metadata: {},\n      }),\n    });\n    const aiCodeCompletion = new AiCodeCompletion.AiCodeCompletion.AiCodeCompletion(\n        {aidaClient: mockAidaClient},\n        editor,\n        AiCodeCompletion.AiCodeCompletion.ContextFlavor.CONSOLE,\n    );\n    const dispatchEventSpy = sinon.spy(aiCodeCompletion, 'dispatchEventToListeners');\n\n    aiCodeCompletion.onTextChanged('prefix', '\\n', DEFAULT_CURSOR_POSITION);\n\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS + 1);\n    sinon.assert.calledOnce(mockAidaClient.completeCode);\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.DELAY_BEFORE_SHOWING_RESPONSE_MS + 1);\n    sinon.assert.notCalled(dispatchSpy);\n    sinon.assert.calledWith(\n        dispatchEventSpy, sinon.match(AiCodeCompletion.AiCodeCompletion.Events.RESPONSE_RECEIVED), sinon.match({}));\n  });\n\n  it('does not dispatch suggestion or citation if generated suggestion repeats existing text', async () => {\n    const editor = new TextEditor.TextEditor.TextEditor(makeState('', TextEditor.Config.aiAutoCompleteSuggestion));\n    const dispatchSpy = sinon.spy(editor, 'dispatch');\n    const mockAidaClient = sinon.createStubInstance(Host.AidaClient.AidaClient, {\n      completeCode: Promise.resolve({\n        generatedSamples: [{\n          generationString: 'suggestion',\n          sampleId: 1,\n          score: 1,\n        }],\n        metadata: {},\n      }),\n    });\n    const aiCodeCompletion = new AiCodeCompletion.AiCodeCompletion.AiCodeCompletion(\n        {aidaClient: mockAidaClient},\n        editor,\n        AiCodeCompletion.AiCodeCompletion.ContextFlavor.CONSOLE,\n    );\n    const dispatchEventSpy = sinon.spy(aiCodeCompletion, 'dispatchEventToListeners');\n\n    aiCodeCompletion.onTextChanged('prefix suggestion', '\\n', DEFAULT_CURSOR_POSITION);\n\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS + 1);\n    sinon.assert.calledOnce(mockAidaClient.completeCode);\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.DELAY_BEFORE_SHOWING_RESPONSE_MS + 1);\n    sinon.assert.notCalled(dispatchSpy);\n    sinon.assert.calledWith(\n        dispatchEventSpy, sinon.match(AiCodeCompletion.AiCodeCompletion.Events.RESPONSE_RECEIVED), sinon.match({}));\n  });\n\n  it('does not dispatch if cursor position changes', async () => {\n    const editor =\n        new TextEditor.TextEditor.TextEditor(makeState('prefix', TextEditor.Config.aiAutoCompleteSuggestion));\n    const dispatchSpy = sinon.spy(editor, 'dispatch');\n    const mockAidaClient = sinon.createStubInstance(Host.AidaClient.AidaClient, {\n      completeCode: Promise.resolve({\n        generatedSamples: [{\n          generationString: 'suggestion',\n          sampleId: 1,\n          score: 1,\n        }],\n        metadata: {},\n      }),\n    });\n    const aiCodeCompletion = new AiCodeCompletion.AiCodeCompletion.AiCodeCompletion(\n        {aidaClient: mockAidaClient},\n        editor,\n        AiCodeCompletion.AiCodeCompletion.ContextFlavor.CONSOLE,\n    );\n    const dispatchEventSpy = sinon.spy(aiCodeCompletion, 'dispatchEventToListeners');\n\n    aiCodeCompletion.onTextChanged('prefix', '\\n', DEFAULT_CURSOR_POSITION);\n\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS + 1);\n    sinon.assert.calledOnce(mockAidaClient.completeCode);\n    editor.editor.dispatch({\n      selection: CodeMirror.EditorSelection.cursor(1),\n    });\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.DELAY_BEFORE_SHOWING_RESPONSE_MS + 1);\n    sinon.assert.notCalled(dispatchSpy);\n    sinon.assert.calledWith(\n        dispatchEventSpy, sinon.match(AiCodeCompletion.AiCodeCompletion.Events.RESPONSE_RECEIVED), sinon.match({}));\n  });\n\n  it('dispatches response received event with citations', async () => {\n    const editor = new TextEditor.TextEditor.TextEditor(makeState('', TextEditor.Config.aiAutoCompleteSuggestion));\n    const citations = [{uri: 'https://example.com'}];\n    const mockAidaClient = sinon.createStubInstance(Host.AidaClient.AidaClient, {\n      completeCode: Promise.resolve({\n        generatedSamples: [{\n          generationString: 'suggestion',\n          sampleId: 1,\n          score: 1,\n          attributionMetadata: {\n            attributionAction: Host.AidaClient.RecitationAction.CITE,\n            citations,\n          },\n        }],\n        metadata: {},\n      }),\n    });\n    const aiCodeCompletion = new AiCodeCompletion.AiCodeCompletion.AiCodeCompletion(\n        {aidaClient: mockAidaClient},\n        editor,\n        AiCodeCompletion.AiCodeCompletion.ContextFlavor.CONSOLE,\n    );\n    const dispatchSpy = sinon.spy(aiCodeCompletion, 'dispatchEventToListeners');\n\n    aiCodeCompletion.onTextChanged('prefix', '\\n', DEFAULT_CURSOR_POSITION);\n\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS + 1);\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.DELAY_BEFORE_SHOWING_RESPONSE_MS + 1);\n\n    assert.deepEqual(dispatchSpy.secondCall.args[0], AiCodeCompletion.AiCodeCompletion.Events.RESPONSE_RECEIVED);\n    assert.deepEqual(dispatchSpy.secondCall.args[1], {citations});\n  });\n\n  it('caches suggestions from AIDA', async () => {\n    const editor = new TextEditor.TextEditor.TextEditor(makeState('', TextEditor.Config.aiAutoCompleteSuggestion));\n    const dispatchSpy = sinon.spy(editor, 'dispatch');\n    const mockAidaClient = sinon.createStubInstance(Host.AidaClient.AidaClient, {\n      completeCode: Promise.resolve({\n        generatedSamples: [{\n          generationString: 'suggestion',\n          sampleId: 1,\n          score: 1,\n        }],\n        metadata: {\n          rpcGlobalId: 1,\n        },\n      }),\n    });\n    const aiCodeCompletion = new AiCodeCompletion.AiCodeCompletion.AiCodeCompletion(\n        {aidaClient: mockAidaClient},\n        editor,\n        AiCodeCompletion.AiCodeCompletion.ContextFlavor.CONSOLE,\n    );\n\n    aiCodeCompletion.onTextChanged('prefix', 'suffix', DEFAULT_CURSOR_POSITION);\n    await clock.tickAsync(\n        AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS +\n        AiCodeCompletion.AiCodeCompletion.DELAY_BEFORE_SHOWING_RESPONSE_MS + 1);\n    let suggestion = editor.editor.state.field(TextEditor.Config.aiAutoCompleteSuggestionState);\n    assert.strictEqual(suggestion?.text, 'suggestion');\n    assert.strictEqual(suggestion?.from, DEFAULT_CURSOR_POSITION);\n    assert.strictEqual(suggestion?.sampleId, 1);\n    assert.strictEqual(suggestion?.rpcGlobalId, 1);\n\n    aiCodeCompletion.onTextChanged('prefix', 'suffix', DEFAULT_CURSOR_POSITION);\n    await clock.tickAsync(\n        AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS +\n        AiCodeCompletion.AiCodeCompletion.DELAY_BEFORE_SHOWING_RESPONSE_MS + 1);\n\n    sinon.assert.calledOnce(mockAidaClient.completeCode);\n    suggestion = editor.editor.state.field(TextEditor.Config.aiAutoCompleteSuggestionState);\n    assert.strictEqual(suggestion?.text, 'suggestion');\n    assert.strictEqual(suggestion?.from, DEFAULT_CURSOR_POSITION);\n    assert.strictEqual(suggestion?.sampleId, 1);\n    assert.strictEqual(suggestion?.rpcGlobalId, 1);\n    sinon.assert.calledTwice(dispatchSpy);\n  });\n\n  it('caches suggestions from AIDA and returns only valid generated samples from cache', async () => {\n    const editor = new TextEditor.TextEditor.TextEditor(makeState('', TextEditor.Config.aiAutoCompleteSuggestion));\n    const dispatchSpy = sinon.spy(editor, 'dispatch');\n    const mockAidaClient = sinon.createStubInstance(Host.AidaClient.AidaClient, {\n      completeCode: Promise.resolve({\n        generatedSamples: [\n          {\n            generationString: 'suggestion',\n            sampleId: 1,\n            score: 1,\n          },\n          {\n            generationString: 'recommendation',\n            sampleId: 2,\n            score: 0.5,\n          }\n        ],\n        metadata: {},\n      }),\n    });\n    const aiCodeCompletion = new AiCodeCompletion.AiCodeCompletion.AiCodeCompletion(\n        {aidaClient: mockAidaClient},\n        editor,\n        AiCodeCompletion.AiCodeCompletion.ContextFlavor.CONSOLE,\n    );\n\n    aiCodeCompletion.onTextChanged('prefix ', 'suffix', DEFAULT_CURSOR_POSITION);\n    await clock.tickAsync(\n        AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS +\n        AiCodeCompletion.AiCodeCompletion.DELAY_BEFORE_SHOWING_RESPONSE_MS + 1);\n\n    let suggestion = editor.editor.state.field(TextEditor.Config.aiAutoCompleteSuggestionState);\n    assert.strictEqual(suggestion?.text, 'suggestion');\n    assert.strictEqual(suggestion?.from, DEFAULT_CURSOR_POSITION);\n    assert.strictEqual(suggestion?.sampleId, 1);\n\n    aiCodeCompletion.onTextChanged('prefix re', 'suffix', DEFAULT_CURSOR_POSITION);\n    await clock.tickAsync(\n        AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS +\n        AiCodeCompletion.AiCodeCompletion.DELAY_BEFORE_SHOWING_RESPONSE_MS + 1);\n\n    sinon.assert.calledOnce(mockAidaClient.completeCode);\n    suggestion = editor.editor.state.field(TextEditor.Config.aiAutoCompleteSuggestionState);\n    assert.strictEqual(suggestion?.text, 'commendation');\n    assert.strictEqual(suggestion?.from, DEFAULT_CURSOR_POSITION);\n    assert.strictEqual(suggestion?.sampleId, 2);\n    sinon.assert.calledTwice(dispatchSpy);\n  });\n\n  it('does not use cache for different requests', async () => {\n    const editor = new TextEditor.TextEditor.TextEditor(makeState('', TextEditor.Config.aiAutoCompleteSuggestion));\n    const mockAidaClient = sinon.createStubInstance(Host.AidaClient.AidaClient, {\n      completeCode: Promise.resolve({\n        generatedSamples: [{\n          generationString: 'suggestion',\n          sampleId: 1,\n          score: 1,\n        }],\n        metadata: {},\n      }),\n    });\n    const aiCodeCompletion = new AiCodeCompletion.AiCodeCompletion.AiCodeCompletion(\n        {aidaClient: mockAidaClient},\n        editor,\n        AiCodeCompletion.AiCodeCompletion.ContextFlavor.CONSOLE,\n    );\n\n    aiCodeCompletion.onTextChanged('prefix', 'suffix', DEFAULT_CURSOR_POSITION);\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS + 1);\n\n    aiCodeCompletion.onTextChanged('prefix re', 'suffix', DEFAULT_CURSOR_POSITION);\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS + 1);\n\n    sinon.assert.calledTwice(mockAidaClient.completeCode);\n  });\n\n  it('does not use cache for different suffix', async () => {\n    const editor = new TextEditor.TextEditor.TextEditor(makeState('', TextEditor.Config.aiAutoCompleteSuggestion));\n    const mockAidaClient = sinon.createStubInstance(Host.AidaClient.AidaClient, {\n      completeCode: Promise.resolve({\n        generatedSamples: [{\n          generationString: 'suggestion',\n          sampleId: 1,\n          score: 1,\n        }],\n        metadata: {},\n      }),\n    });\n    const aiCodeCompletion = new AiCodeCompletion.AiCodeCompletion.AiCodeCompletion(\n        {aidaClient: mockAidaClient},\n        editor,\n        AiCodeCompletion.AiCodeCompletion.ContextFlavor.CONSOLE,\n    );\n\n    aiCodeCompletion.onTextChanged('prefix', 'suffix', DEFAULT_CURSOR_POSITION);\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS + 1);\n\n    aiCodeCompletion.onTextChanged('prefix', 'suffixes', DEFAULT_CURSOR_POSITION);\n    await clock.tickAsync(AiCodeCompletion.AiCodeCompletion.AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS + 1);\n\n    sinon.assert.calledTwice(mockAidaClient.completeCode);\n  });\n});\n"]}