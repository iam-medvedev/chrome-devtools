{"version":3,"file":"AiCodeCompletion.js","sourceRoot":"","sources":["../../../../../../front_end/models/ai_code_completion/AiCodeCompletion.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Root from '../../core/root/root.js';\nimport * as TextEditor from '../../ui/components/text_editor/text_editor.js';\nimport type {AgentOptions, RequestOptions} from '../ai_assistance/ai_assistance.js';\n\nexport class AiCodeCompletion {\n  #aidaRequestThrottler: Common.Throttler.Throttler;\n  #editor: TextEditor.TextEditor.TextEditor;\n\n  readonly #sessionId: string = crypto.randomUUID();\n  readonly #aidaClient: Host.AidaClient.AidaClient;\n  readonly #serverSideLoggingEnabled: boolean;\n\n  constructor(opts: AgentOptions, editor: TextEditor.TextEditor.TextEditor, throttler: Common.Throttler.Throttler) {\n    this.#aidaClient = opts.aidaClient;\n    this.#serverSideLoggingEnabled = opts.serverSideLoggingEnabled ?? false;\n    this.#editor = editor;\n    this.#aidaRequestThrottler = throttler;\n  }\n\n  #buildRequest(\n      prefix: string, suffix: string,\n      inferenceLanguage: Host.AidaClient.AidaInferenceLanguage = Host.AidaClient.AidaInferenceLanguage.JAVASCRIPT):\n      Host.AidaClient.CompletionRequest {\n    const userTier = Host.AidaClient.convertToUserTierEnum(this.#userTier);\n    function validTemperature(temperature: number|undefined): number|undefined {\n      return typeof temperature === 'number' && temperature >= 0 ? temperature : undefined;\n    }\n    return {\n      client: Host.AidaClient.CLIENT_NAME,\n      prefix,\n      suffix,\n      options: {\n        inference_language: inferenceLanguage,\n        temperature: validTemperature(this.#options.temperature),\n        model_id: this.#options.modelId || undefined,\n        stop_sequences: ['\\n'],  // We are prioritizing single line suggestions to reduce noise\n      },\n      metadata: {\n        disable_user_content_logging: !(this.#serverSideLoggingEnabled ?? false),\n        string_session_id: this.#sessionId,\n        user_tier: userTier,\n        client_version: Root.Runtime.getChromeVersion(),\n      },\n    };\n  }\n\n  async #requestAidaSuggestion(request: Host.AidaClient.CompletionRequest): Promise<void> {\n    const response = await this.#aidaClient.completeCode(request);\n    if (response && response.generatedSamples.length > 0 && response.generatedSamples[0].generationString) {\n      this.#editor.dispatch({\n        effects: TextEditor.Config.setAiAutoCompleteSuggestion.of(response.generatedSamples[0].generationString),\n      });\n    }\n  }\n\n  get #userTier(): string|undefined {\n    return Root.Runtime.hostConfig.devToolsAiCodeCompletion?.userTier;\n  }\n\n  get #options(): RequestOptions {\n    const temperature = Root.Runtime.hostConfig.devToolsAiCodeCompletion?.temperature;\n    const modelId = Root.Runtime.hostConfig.devToolsAiCodeCompletion?.modelId;\n\n    return {\n      temperature,\n      modelId,\n    };\n  }\n\n  onTextChanged(prefix: string, suffix: string): void {\n    void this.#aidaRequestThrottler.schedule(() => this.#requestAidaSuggestion(this.#buildRequest(prefix, suffix)));\n  }\n}\n"]}