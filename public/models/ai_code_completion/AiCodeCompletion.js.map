{"version":3,"file":"AiCodeCompletion.js","sourceRoot":"","sources":["../../../../../../front_end/models/ai_code_completion/AiCodeCompletion.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Root from '../../core/root/root.js';\nimport * as TextEditor from '../../ui/components/text_editor/text_editor.js';\n\nexport const DELAY_BEFORE_SHOWING_RESPONSE_MS = 500;\nexport const AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS = 200;\n\n// TODO(b/404796739): Remove these definitions of AgentOptions and RequestOptions and\n// use the existing ones which are used for AI assistance panel agents.\ninterface AgentOptions {\n  aidaClient: Host.AidaClient.AidaClient;\n  serverSideLoggingEnabled?: boolean;\n  confirmSideEffectForTest?: typeof Promise.withResolvers;\n}\n\ninterface RequestOptions {\n  temperature?: number;\n  modelId?: string;\n}\n\n/**\n * The AiCodeCompletion class is responsible for fetching code completion suggestions\n * from the AIDA backend and displaying them in the text editor.\n *\n * 1. **Debouncing requests:** As the user types, we don't want to send a request\n *    for every keystroke. Instead, we use debouncing to schedule a request\n *    only after the user has paused typing for a short period\n *    (AIDA_REQUEST_THROTTLER_TIMEOUT_MS). This prevents spamming the backend with\n *    requests for intermediate typing states.\n *\n * 2. **Delaying suggestions:** When a suggestion is received from the AIDA\n *    backend, we don't show it immediately. There is a minimum delay\n *    (DELAY_BEFORE_SHOWING_RESPONSE_MS) from when the request was sent to when\n *    the suggestion is displayed.\n */\nexport class AiCodeCompletion extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #editor: TextEditor.TextEditor.TextEditor;\n  #renderingTimeout?: number;\n\n  readonly #sessionId: string = crypto.randomUUID();\n  readonly #aidaClient: Host.AidaClient.AidaClient;\n  readonly #serverSideLoggingEnabled: boolean;\n\n  constructor(opts: AgentOptions, editor: TextEditor.TextEditor.TextEditor) {\n    super();\n    this.#aidaClient = opts.aidaClient;\n    this.#serverSideLoggingEnabled = opts.serverSideLoggingEnabled ?? false;\n    this.#editor = editor;\n  }\n\n  #debouncedRequestAidaSuggestion = Common.Debouncer.debounce(\n      (prefix: string, suffix: string, cursor: number, inferenceLanguage?: Host.AidaClient.AidaInferenceLanguage) => {\n        void this.#requestAidaSuggestion(this.#buildRequest(prefix, suffix, inferenceLanguage), cursor);\n      },\n      AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS);\n\n  #buildRequest(\n      prefix: string, suffix: string,\n      inferenceLanguage: Host.AidaClient.AidaInferenceLanguage = Host.AidaClient.AidaInferenceLanguage.JAVASCRIPT):\n      Host.AidaClient.CompletionRequest {\n    const userTier = Host.AidaClient.convertToUserTierEnum(this.#userTier);\n    function validTemperature(temperature: number|undefined): number|undefined {\n      return typeof temperature === 'number' && temperature >= 0 ? temperature : undefined;\n    }\n    return {\n      client: Host.AidaClient.CLIENT_NAME,\n      prefix,\n      suffix,\n      options: {\n        inference_language: inferenceLanguage,\n        temperature: validTemperature(this.#options.temperature),\n        model_id: this.#options.modelId || undefined,\n        stop_sequences: ['\\n'],  // We are prioritizing single line suggestions to reduce noise\n      },\n      metadata: {\n        disable_user_content_logging: !(this.#serverSideLoggingEnabled ?? false),\n        string_session_id: this.#sessionId,\n        user_tier: userTier,\n        client_version: Root.Runtime.getChromeVersion(),\n      },\n    };\n  }\n\n  async #requestAidaSuggestion(request: Host.AidaClient.CompletionRequest, cursor: number): Promise<void> {\n    const startTime = performance.now();\n    this.dispatchEventToListeners(Events.REQUEST_TRIGGERED, {});\n\n    try {\n      const response = await this.#aidaClient.completeCode(request);\n      if (response && response.generatedSamples.length > 0 && response.generatedSamples[0].generationString) {\n        if (response.generatedSamples[0].attributionMetadata?.attributionAction ===\n            Host.AidaClient.RecitationAction.BLOCK) {\n          this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {});\n          return;\n        }\n\n        const remainderDelay = Math.max(DELAY_BEFORE_SHOWING_RESPONSE_MS - (performance.now() - startTime), 0);\n        // Delays the rendering of the Code completion\n        this.#renderingTimeout = window.setTimeout(() => {\n          // We are not cancelling the previous responses even when there are more recent responses\n          // from the LLM as:\n          // In case the user kept typing characters that are prefix of the previous suggestion, it\n          // is a valid suggestion and we should display it to the user.\n          // In case the user typed a different character, the config for AI auto complete suggestion\n          // will set the suggestion to null.\n          this.#editor.dispatch({\n            effects: TextEditor.Config.setAiAutoCompleteSuggestion.of({\n              text: response.generatedSamples[0].generationString,\n              from: cursor,\n              rpcGlobalId: response.metadata.rpcGlobalId,\n              sampleId: response.generatedSamples[0].sampleId,\n            })\n          });\n          if (response.metadata.rpcGlobalId) {\n            const latency = performance.now() - startTime;\n            this.#registerUserImpression(response.metadata.rpcGlobalId, response.generatedSamples[0].sampleId, latency);\n          }\n          const citations = response.generatedSamples[0].attributionMetadata?.citations;\n          this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {citations});\n        }, remainderDelay);\n      } else {\n        this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {});\n      }\n    } catch {\n      this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {});\n    }\n  }\n\n  get #userTier(): string|undefined {\n    return Root.Runtime.hostConfig.devToolsAiCodeCompletion?.userTier;\n  }\n\n  get #options(): RequestOptions {\n    const temperature = Root.Runtime.hostConfig.devToolsAiCodeCompletion?.temperature;\n    const modelId = Root.Runtime.hostConfig.devToolsAiCodeCompletion?.modelId;\n\n    return {\n      temperature,\n      modelId,\n    };\n  }\n\n  #registerUserImpression(rpcGlobalId: Host.AidaClient.RpcGlobalId, sampleId: number, latency: number): void {\n    const seconds = Math.floor(latency / 1_000);\n    const remainingMs = latency % 1_000;\n    const nanos = remainingMs * 1_000_000;\n\n    void this.#aidaClient.registerClientEvent({\n      corresponding_aida_rpc_global_id: rpcGlobalId,\n      disable_user_content_logging: true,\n      complete_code_client_event: {\n        user_impression: {\n          sample: {\n            sample_id: sampleId,\n          },\n          latency: {\n            duration: {\n              seconds,\n              nanos,\n            },\n          }\n        },\n      },\n    });\n  }\n\n  registerUserAcceptance(rpcGlobalId: Host.AidaClient.RpcGlobalId, sampleId: number): void {\n    void this.#aidaClient.registerClientEvent({\n      corresponding_aida_rpc_global_id: rpcGlobalId,\n      disable_user_content_logging: true,\n      complete_code_client_event: {\n        user_acceptance: {\n          sample: {\n            sample_id: sampleId,\n          }\n        },\n      },\n    });\n  }\n\n  onTextChanged(\n      prefix: string, suffix: string, cursor: number, inferenceLanguage?: Host.AidaClient.AidaInferenceLanguage): void {\n    this.#debouncedRequestAidaSuggestion(prefix, suffix, cursor, inferenceLanguage);\n  }\n\n  remove(): void {\n    if (this.#renderingTimeout) {\n      clearTimeout(this.#renderingTimeout);\n      this.#renderingTimeout = undefined;\n    }\n  }\n}\n\nexport const enum Events {\n  RESPONSE_RECEIVED = 'ResponseReceived',\n  REQUEST_TRIGGERED = 'RequestTriggered',\n}\n\nexport interface ResponseReceivedEvent {\n  citations?: Host.AidaClient.Citation[];\n}\n\nexport interface EventTypes {\n  [Events.RESPONSE_RECEIVED]: ResponseReceivedEvent;\n  // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n  [Events.REQUEST_TRIGGERED]: {};\n}\n"]}