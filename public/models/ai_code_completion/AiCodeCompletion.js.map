{"version":3,"file":"AiCodeCompletion.js","sourceRoot":"","sources":["../../../../../../front_end/models/ai_code_completion/AiCodeCompletion.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Root from '../../core/root/root.js';\nimport * as TextEditor from '../../ui/components/text_editor/text_editor.js';\n\nimport {debugLog} from './debug.js';\n\nexport const DELAY_BEFORE_SHOWING_RESPONSE_MS = 500;\nexport const AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS = 200;\n\n// TODO(b/404796739): Remove these definitions of AgentOptions and RequestOptions and\n// use the existing ones which are used for AI assistance panel agents.\ninterface AgentOptions {\n  aidaClient: Host.AidaClient.AidaClient;\n  serverSideLoggingEnabled?: boolean;\n  confirmSideEffectForTest?: typeof Promise.withResolvers;\n}\n\ninterface RequestOptions {\n  temperature?: number;\n  modelId?: string;\n}\n\ninterface CachedRequest {\n  request: Host.AidaClient.CompletionRequest;\n  response: Host.AidaClient.CompletionResponse;\n}\n\n/* clang-format off */\nconst consoleAdditionalContextFileContent = `/**\n * This file describes the execution environment of the Chrome DevTools Console.\n * The code is JavaScript, but with special global functions and variables.\n * Top-level await is available.\n * The console has direct access to the inspected page's \\`window\\` and \\`document\\`.\n */\n\n/**\n * @description Returns the value of the most recently evaluated expression.\n */\nlet $_;\n\n/**\n * @description A reference to the most recently selected DOM element.\n * $0, $1, $2, $3, $4 can be used to reference the last five selected DOM elements.\n */\nlet $0;\n\n/**\n * @description A query selector alias. $$('.my-class') is equivalent to document.querySelectorAll('.my-class').\n */\nfunction $$(selector, startNode) {}\n\n/**\n * @description An XPath selector. $x('//p') returns an array of all <p> elements.\n */\nfunction $x(path, startNode) {}\n\nfunction clear() {}\n\nfunction copy(object) {}\n\n/**\n * @description Selects and reveals the specified element in the Elements panel.\n */\nfunction inspect(object) {}\n\nfunction keys(object) {}\n\nfunction values(object) {}\n\n/**\n * @description When the specified function is called, the debugger is invoked.\n */\nfunction debug(func) {}\n\n/**\n * @description Stops the debugging of the specified function.\n */\nfunction undebug(func) {}\n\n/**\n * @description Logs a message to the console whenever the specified function is called,\n * along with the arguments passed to it.\n */\nfunction monitor(func) {}\n\n/**\n * @description Stops monitoring the specified function.\n */\nfunction unmonitor(func) {}\n\n/**\n * @description Logs all events dispatched to the specified object to the console.\n */\nfunction monitorEvents(object, events) {}\n\n/**\n * @description Returns an object containing all event listeners registered on the specified object.\n */\nfunction getEventListeners(object) {}\n\n/**\n * The global \\`console\\` object has several helpful methods\n */\nconst console = {\n  log: (...args) => {},\n  warn: (...args) => {},\n  error: (...args) => {},\n  info: (...args) => {},\n  debug: (...args) => {},\n  assert: (assertion, ...args) => {},\n  dir: (object) => {}, // Displays an interactive property listing of an object.\n  dirxml: (object) => {}, // Displays an XML/HTML representation of an object.\n  table: (data, columns) => {}, // Displays tabular data as a table.\n  group: (label) => {}, // Creates a new inline collapsible group.\n  groupEnd: () => {},\n  time: (label) => {}, // Starts a timer.\n  timeEnd: (label) => {} // Stops a timer and logs the elapsed time.\n};`;\n/* clang-format on */\n\n/**\n * The AiCodeCompletion class is responsible for fetching code completion suggestions\n * from the AIDA backend and displaying them in the text editor.\n *\n * 1. **Debouncing requests:** As the user types, we don't want to send a request\n *    for every keystroke. Instead, we use debouncing to schedule a request\n *    only after the user has paused typing for a short period\n *    (AIDA_REQUEST_THROTTLER_TIMEOUT_MS). This prevents spamming the backend with\n *    requests for intermediate typing states.\n *\n * 2. **Delaying suggestions:** When a suggestion is received from the AIDA\n *    backend, we don't show it immediately. There is a minimum delay\n *    (DELAY_BEFORE_SHOWING_RESPONSE_MS) from when the request was sent to when\n *    the suggestion is displayed.\n */\nexport class AiCodeCompletion extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #editor: TextEditor.TextEditor.TextEditor;\n  #stopSequences: string[];\n  #renderingTimeout?: number;\n  #aidaRequestCache?: CachedRequest;\n  #panel: ContextFlavor;\n\n  readonly #sessionId: string = crypto.randomUUID();\n  readonly #aidaClient: Host.AidaClient.AidaClient;\n  readonly #serverSideLoggingEnabled: boolean;\n\n  constructor(\n      opts: AgentOptions, editor: TextEditor.TextEditor.TextEditor, panel: ContextFlavor, stopSequences?: string[]) {\n    super();\n    this.#aidaClient = opts.aidaClient;\n    this.#serverSideLoggingEnabled = opts.serverSideLoggingEnabled ?? false;\n    this.#editor = editor;\n    this.#panel = panel;\n    this.#stopSequences = stopSequences ?? [];\n  }\n\n  #debouncedRequestAidaSuggestion = Common.Debouncer.debounce(\n      (prefix: string, suffix: string, cursorPositionAtRequest: number,\n       inferenceLanguage?: Host.AidaClient.AidaInferenceLanguage) => {\n        void this.#requestAidaSuggestion(\n            this.#buildRequest(prefix, suffix, inferenceLanguage), cursorPositionAtRequest);\n      },\n      AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS);\n\n  #buildRequest(\n      prefix: string, suffix: string,\n      inferenceLanguage: Host.AidaClient.AidaInferenceLanguage = Host.AidaClient.AidaInferenceLanguage.JAVASCRIPT):\n      Host.AidaClient.CompletionRequest {\n    const userTier = Host.AidaClient.convertToUserTierEnum(this.#userTier);\n    function validTemperature(temperature: number|undefined): number|undefined {\n      return typeof temperature === 'number' && temperature >= 0 ? temperature : undefined;\n    }\n    // As a temporary fix for b/441221870 we are prepending a newline for each prefix.\n    prefix = '\\n' + prefix;\n\n    const additionalFiles = this.#panel === ContextFlavor.CONSOLE ? [{\n      path: 'devtools-console-context.js',\n      content: consoleAdditionalContextFileContent,\n      included_reason: Host.AidaClient.Reason.RELATED_FILE,\n    }] :\n                                                                    undefined;\n\n    return {\n      client: Host.AidaClient.CLIENT_NAME,\n      prefix,\n      suffix,\n      options: {\n        inference_language: inferenceLanguage,\n        temperature: validTemperature(this.#options.temperature),\n        model_id: this.#options.modelId || undefined,\n        stop_sequences: this.#stopSequences,\n      },\n      metadata: {\n        disable_user_content_logging: !(this.#serverSideLoggingEnabled ?? false),\n        string_session_id: this.#sessionId,\n        user_tier: userTier,\n        client_version: Root.Runtime.getChromeVersion(),\n      },\n      additional_files: additionalFiles,\n    };\n  }\n\n  async #completeCodeCached(request: Host.AidaClient.CompletionRequest): Promise<{\n    response: Host.AidaClient.CompletionResponse | null,\n    fromCache: boolean,\n  }> {\n    const cachedResponse = this.#checkCachedRequestForResponse(request);\n    if (cachedResponse) {\n      return {response: cachedResponse, fromCache: true};\n    }\n\n    const response = await this.#aidaClient.completeCode(request);\n    if (!response) {\n      return {\n        response: null,\n        fromCache: false,\n      };\n    }\n\n    this.#updateCachedRequest(request, response);\n    return {\n      response,\n      fromCache: false,\n    };\n  }\n\n  #pickSampleFromResponse(response: Host.AidaClient.CompletionResponse): Host.AidaClient.GenerationSample|null {\n    if (!response.generatedSamples.length) {\n      return null;\n    }\n\n    // `currentHint` is the portion of a standard autocomplete suggestion that the user has not yet typed.\n    // For example, if the user types `document.queryS` and the autocomplete suggests `document.querySelector`,\n    // the `currentHint` is `elector`.\n    const currentHintInMenu = this.#editor.editor.plugin(TextEditor.Config.showCompletionHint)?.currentHint;\n    // TODO(ergunsh): We should not do this check here. Instead, the AI code suggestions should be provided\n    // as it is to the view plugin. The view plugin should choose which one to use based on the completion hint\n    // and selected completion.\n    if (!currentHintInMenu) {\n      return response.generatedSamples[0];\n    }\n\n    // TODO(ergunsh): This does not handle looking for `selectedCompletion`. The `currentHint` is `null`\n    // for the Sources panel case.\n    // Even though there is no match, we still return the first suggestion which will be displayed\n    // when the traditional autocomplete menu is closed.\n    return response.generatedSamples.find(sample => sample.generationString.startsWith(currentHintInMenu)) ??\n        response.generatedSamples[0];\n  }\n\n  async #generateSampleForRequest(request: Host.AidaClient.CompletionRequest, cursor: number): Promise<{\n    suggestionText: string,\n    sampleId: number,\n    fromCache: boolean,\n    citations: Host.AidaClient.Citation[],\n    rpcGlobalId?: Host.AidaClient.RpcGlobalId,\n  }|null> {\n    const {response, fromCache} = await this.#completeCodeCached(request);\n    debugLog('At cursor position', cursor, {request, response, fromCache});\n    if (!response) {\n      return null;\n    }\n\n    const suggestionSample = this.#pickSampleFromResponse(response);\n    if (!suggestionSample) {\n      return null;\n    }\n\n    const shouldBlock =\n        suggestionSample.attributionMetadata?.attributionAction === Host.AidaClient.RecitationAction.BLOCK;\n    if (shouldBlock) {\n      return null;\n    }\n\n    const isRepetitive = this.#checkIfSuggestionRepeatsExistingText(suggestionSample.generationString, request);\n    if (isRepetitive) {\n      return null;\n    }\n\n    const suggestionText = this.#trimSuggestionOverlap(suggestionSample.generationString, request);\n    if (suggestionText.length === 0) {\n      return null;\n    }\n\n    return {\n      suggestionText,\n      sampleId: suggestionSample.sampleId,\n      fromCache,\n      citations: suggestionSample.attributionMetadata?.citations ?? [],\n      rpcGlobalId: response.metadata.rpcGlobalId,\n    };\n  }\n\n  async #requestAidaSuggestion(request: Host.AidaClient.CompletionRequest, cursorPositionAtRequest: number):\n      Promise<void> {\n    const startTime = performance.now();\n    this.dispatchEventToListeners(Events.REQUEST_TRIGGERED, {});\n    // Registering AiCodeCompletionRequestTriggered metric even if the request is served from cache\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiCodeCompletionRequestTriggered);\n\n    try {\n      const sampleResponse = await this.#generateSampleForRequest(request, cursorPositionAtRequest);\n      if (!sampleResponse) {\n        this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {});\n        return;\n      }\n\n      const {\n        suggestionText,\n        sampleId,\n        fromCache,\n        citations,\n        rpcGlobalId,\n      } = sampleResponse;\n      const remainingDelay = Math.max(DELAY_BEFORE_SHOWING_RESPONSE_MS - (performance.now() - startTime), 0);\n      this.#renderingTimeout = window.setTimeout(() => {\n        const currentCursorPosition = this.#editor.editor.state.selection.main.head;\n        if (currentCursorPosition !== cursorPositionAtRequest) {\n          this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {});\n          return;\n        }\n        this.#editor.dispatch({\n          effects: TextEditor.Config.setAiAutoCompleteSuggestion.of({\n            text: suggestionText,\n            from: cursorPositionAtRequest,\n            rpcGlobalId,\n            sampleId,\n            startTime,\n            onImpression: this.#registerUserImpression.bind(this),\n            clearCachedRequest: this.clearCachedRequest.bind(this),\n          })\n        });\n\n        if (fromCache) {\n          Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiCodeCompletionResponseServedFromCache);\n        }\n\n        debugLog('Suggestion dispatched to the editor', suggestionText, 'at cursor position', cursorPositionAtRequest);\n        this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {citations});\n      }, remainingDelay);\n    } catch (e) {\n      debugLog('Error while fetching code completion suggestions from AIDA', e);\n      this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {});\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiCodeCompletionError);\n    }\n  }\n\n  get #userTier(): string|undefined {\n    return Root.Runtime.hostConfig.devToolsAiCodeCompletion?.userTier;\n  }\n\n  get #options(): RequestOptions {\n    const temperature = Root.Runtime.hostConfig.devToolsAiCodeCompletion?.temperature;\n    const modelId = Root.Runtime.hostConfig.devToolsAiCodeCompletion?.modelId;\n\n    return {\n      temperature,\n      modelId,\n    };\n  }\n\n  /**\n   * Removes the end of a suggestion if it overlaps with the start of the suffix.\n   */\n  #trimSuggestionOverlap(generationString: string, request: Host.AidaClient.CompletionRequest): string {\n    const suffix = request.suffix;\n    if (!suffix) {\n      return generationString;\n    }\n\n    // Iterate from the longest possible overlap down to the shortest\n    for (let i = Math.min(generationString.length, suffix.length); i > 0; i--) {\n      const overlapCandidate = suffix.substring(0, i);\n      if (generationString.endsWith(overlapCandidate)) {\n        return generationString.slice(0, -i);\n      }\n    }\n    return generationString;\n  }\n\n  #checkIfSuggestionRepeatsExistingText(generationString: string, request: Host.AidaClient.CompletionRequest): boolean {\n    const {prefix, suffix} = request;\n    return Boolean(prefix.includes(generationString.trim()) || suffix?.includes(generationString.trim()));\n  }\n\n  #checkCachedRequestForResponse(request: Host.AidaClient.CompletionRequest): Host.AidaClient.CompletionResponse|null {\n    if (!this.#aidaRequestCache || this.#aidaRequestCache.request.suffix !== request.suffix ||\n        JSON.stringify(this.#aidaRequestCache.request.options) !== JSON.stringify(request.options)) {\n      return null;\n    }\n    const possibleGeneratedSamples: Host.AidaClient.GenerationSample[] = [];\n    for (const sample of this.#aidaRequestCache.response.generatedSamples) {\n      const prefixWithSample = this.#aidaRequestCache.request.prefix + sample.generationString;\n      if (prefixWithSample.startsWith(request.prefix)) {\n        possibleGeneratedSamples.push({\n          generationString: prefixWithSample.substring(request.prefix.length),\n          sampleId: sample.sampleId,\n          score: sample.score,\n          attributionMetadata: sample.attributionMetadata,\n        });\n      }\n    }\n    if (possibleGeneratedSamples.length === 0) {\n      return null;\n    }\n    return {generatedSamples: possibleGeneratedSamples, metadata: this.#aidaRequestCache.response.metadata};\n  }\n\n  #updateCachedRequest(request: Host.AidaClient.CompletionRequest, response: Host.AidaClient.CompletionResponse): void {\n    this.#aidaRequestCache = {request, response};\n  }\n\n  #registerUserImpression(rpcGlobalId: Host.AidaClient.RpcGlobalId, sampleId: number, latency: number): void {\n    const seconds = Math.floor(latency / 1_000);\n    const remainingMs = latency % 1_000;\n    const nanos = Math.floor(remainingMs * 1_000_000);\n\n    void this.#aidaClient.registerClientEvent({\n      corresponding_aida_rpc_global_id: rpcGlobalId,\n      disable_user_content_logging: true,\n      complete_code_client_event: {\n        user_impression: {\n          sample: {\n            sample_id: sampleId,\n          },\n          latency: {\n            duration: {\n              seconds,\n              nanos,\n            },\n          }\n        },\n      },\n    });\n    debugLog('Registered user impression with latency {seconds:', seconds, ', nanos:', nanos, '}');\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiCodeCompletionSuggestionDisplayed);\n  }\n\n  registerUserAcceptance(rpcGlobalId: Host.AidaClient.RpcGlobalId, sampleId: number): void {\n    void this.#aidaClient.registerClientEvent({\n      corresponding_aida_rpc_global_id: rpcGlobalId,\n      disable_user_content_logging: true,\n      complete_code_client_event: {\n        user_acceptance: {\n          sample: {\n            sample_id: sampleId,\n          }\n        },\n      },\n    });\n    debugLog('Registered user acceptance');\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiCodeCompletionSuggestionAccepted);\n  }\n\n  clearCachedRequest(): void {\n    this.#aidaRequestCache = undefined;\n  }\n\n  onTextChanged(\n      prefix: string, suffix: string, cursorPositionAtRequest: number,\n      inferenceLanguage?: Host.AidaClient.AidaInferenceLanguage): void {\n    this.#debouncedRequestAidaSuggestion(prefix, suffix, cursorPositionAtRequest, inferenceLanguage);\n  }\n\n  remove(): void {\n    if (this.#renderingTimeout) {\n      clearTimeout(this.#renderingTimeout);\n      this.#renderingTimeout = undefined;\n    }\n    this.#editor.dispatch({\n      effects: TextEditor.Config.setAiAutoCompleteSuggestion.of(null),\n    });\n  }\n}\n\nexport const enum ContextFlavor {\n  CONSOLE = 'console',  // generated code can contain console specific APIs like `$0`.\n  SOURCES = 'sources',\n}\n\nexport const enum Events {\n  RESPONSE_RECEIVED = 'ResponseReceived',\n  REQUEST_TRIGGERED = 'RequestTriggered',\n}\n\nexport interface ResponseReceivedEvent {\n  citations?: Host.AidaClient.Citation[];\n}\n\nexport interface EventTypes {\n  [Events.RESPONSE_RECEIVED]: ResponseReceivedEvent;\n  // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n  [Events.REQUEST_TRIGGERED]: {};\n}\n"]}