{
  "version": 3,
  "sources": ["../../../../../../front_end/models/ai_code_completion/debug.ts", "../../../../../../front_end/models/ai_code_completion/AiCodeCompletion.ts"],
  "sourcesContent": ["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * @file Local debugging utilities.\n */\n\nexport function isDebugMode(): boolean {\n  return Boolean(localStorage.getItem('debugAiCodeCompletionEnabled'));\n}\n\nexport function debugLog(...log: unknown[]): void {\n  if (!isDebugMode()) {\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(...log);\n}\n\nfunction setDebugAiCodeCompletionEnabled(enabled: boolean): void {\n  if (enabled) {\n    localStorage.setItem('debugAiCodeCompletionEnabled', 'true');\n  } else {\n    localStorage.removeItem('debugAiCodeCompletionEnabled');\n  }\n}\n// @ts-expect-error\nglobalThis.setDebugAiCodeCompletionEnabled = setDebugAiCodeCompletionEnabled;\n", "// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Root from '../../core/root/root.js';\nimport * as TextEditor from '../../ui/components/text_editor/text_editor.js';\n\nimport {debugLog} from './debug.js';\n\nexport const DELAY_BEFORE_SHOWING_RESPONSE_MS = 500;\nexport const AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS = 200;\n\n// TODO(b/404796739): Remove these definitions of AgentOptions and RequestOptions and\n// use the existing ones which are used for AI assistance panel agents.\ninterface AgentOptions {\n  aidaClient: Host.AidaClient.AidaClient;\n  serverSideLoggingEnabled?: boolean;\n  confirmSideEffectForTest?: typeof Promise.withResolvers;\n}\n\ninterface RequestOptions {\n  temperature?: number;\n  modelId?: string;\n}\n\ninterface CachedRequest {\n  request: Host.AidaClient.CompletionRequest;\n  response: Host.AidaClient.CompletionResponse;\n}\n\n/* clang-format off */\nconst consoleAdditionalContextFileContent = `/**\n * This file describes the execution environment of the Chrome DevTools Console.\n * The code is JavaScript, but with special global functions and variables.\n * Top-level await is available.\n * The console has direct access to the inspected page's \\`window\\` and \\`document\\`.\n */\n\n/**\n * @description Returns the value of the most recently evaluated expression.\n */\nlet $_;\n\n/**\n * @description A reference to the most recently selected DOM element.\n * $0, $1, $2, $3, $4 can be used to reference the last five selected DOM elements.\n */\nlet $0;\n\n/**\n * @description A query selector alias. $$('.my-class') is equivalent to document.querySelectorAll('.my-class').\n */\nfunction $$(selector, startNode) {}\n\n/**\n * @description An XPath selector. $x('//p') returns an array of all <p> elements.\n */\nfunction $x(path, startNode) {}\n\nfunction clear() {}\n\nfunction copy(object) {}\n\n/**\n * @description Selects and reveals the specified element in the Elements panel.\n */\nfunction inspect(object) {}\n\nfunction keys(object) {}\n\nfunction values(object) {}\n\n/**\n * @description When the specified function is called, the debugger is invoked.\n */\nfunction debug(func) {}\n\n/**\n * @description Stops the debugging of the specified function.\n */\nfunction undebug(func) {}\n\n/**\n * @description Logs a message to the console whenever the specified function is called,\n * along with the arguments passed to it.\n */\nfunction monitor(func) {}\n\n/**\n * @description Stops monitoring the specified function.\n */\nfunction unmonitor(func) {}\n\n/**\n * @description Logs all events dispatched to the specified object to the console.\n */\nfunction monitorEvents(object, events) {}\n\n/**\n * @description Returns an object containing all event listeners registered on the specified object.\n */\nfunction getEventListeners(object) {}\n\n/**\n * The global \\`console\\` object has several helpful methods\n */\nconst console = {\n  log: (...args) => {},\n  warn: (...args) => {},\n  error: (...args) => {},\n  info: (...args) => {},\n  debug: (...args) => {},\n  assert: (assertion, ...args) => {},\n  dir: (object) => {}, // Displays an interactive property listing of an object.\n  dirxml: (object) => {}, // Displays an XML/HTML representation of an object.\n  table: (data, columns) => {}, // Displays tabular data as a table.\n  group: (label) => {}, // Creates a new inline collapsible group.\n  groupEnd: () => {},\n  time: (label) => {}, // Starts a timer.\n  timeEnd: (label) => {} // Stops a timer and logs the elapsed time.\n};`;\n/* clang-format on */\n\n/**\n * The AiCodeCompletion class is responsible for fetching code completion suggestions\n * from the AIDA backend and displaying them in the text editor.\n *\n * 1. **Debouncing requests:** As the user types, we don't want to send a request\n *    for every keystroke. Instead, we use debouncing to schedule a request\n *    only after the user has paused typing for a short period\n *    (AIDA_REQUEST_THROTTLER_TIMEOUT_MS). This prevents spamming the backend with\n *    requests for intermediate typing states.\n *\n * 2. **Delaying suggestions:** When a suggestion is received from the AIDA\n *    backend, we don't show it immediately. There is a minimum delay\n *    (DELAY_BEFORE_SHOWING_RESPONSE_MS) from when the request was sent to when\n *    the suggestion is displayed.\n */\nexport class AiCodeCompletion extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #editor: TextEditor.TextEditor.TextEditor;\n  #stopSequences: string[];\n  #renderingTimeout?: number;\n  #aidaRequestCache?: CachedRequest;\n  #panel: ContextFlavor;\n\n  readonly #sessionId: string = crypto.randomUUID();\n  readonly #aidaClient: Host.AidaClient.AidaClient;\n  readonly #serverSideLoggingEnabled: boolean;\n\n  constructor(\n      opts: AgentOptions, editor: TextEditor.TextEditor.TextEditor, panel: ContextFlavor, stopSequences?: string[]) {\n    super();\n    this.#aidaClient = opts.aidaClient;\n    this.#serverSideLoggingEnabled = opts.serverSideLoggingEnabled ?? false;\n    this.#editor = editor;\n    this.#panel = panel;\n    this.#stopSequences = stopSequences ?? [];\n  }\n\n  #debouncedRequestAidaSuggestion = Common.Debouncer.debounce(\n      (prefix: string, suffix: string, cursorPositionAtRequest: number,\n       inferenceLanguage?: Host.AidaClient.AidaInferenceLanguage) => {\n        void this.#requestAidaSuggestion(\n            this.#buildRequest(prefix, suffix, inferenceLanguage), cursorPositionAtRequest);\n      },\n      AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS);\n\n  #buildRequest(\n      prefix: string, suffix: string,\n      inferenceLanguage: Host.AidaClient.AidaInferenceLanguage = Host.AidaClient.AidaInferenceLanguage.JAVASCRIPT):\n      Host.AidaClient.CompletionRequest {\n    const userTier = Host.AidaClient.convertToUserTierEnum(this.#userTier);\n    function validTemperature(temperature: number|undefined): number|undefined {\n      return typeof temperature === 'number' && temperature >= 0 ? temperature : undefined;\n    }\n    // As a temporary fix for b/441221870 we are prepending a newline for each prefix.\n    prefix = '\\n' + prefix;\n\n    const additionalFiles = this.#panel === ContextFlavor.CONSOLE ? [{\n      path: 'devtools-console-context.js',\n      content: consoleAdditionalContextFileContent,\n      included_reason: Host.AidaClient.Reason.RELATED_FILE,\n    }] :\n                                                                    undefined;\n\n    return {\n      client: Host.AidaClient.CLIENT_NAME,\n      prefix,\n      suffix,\n      options: {\n        inference_language: inferenceLanguage,\n        temperature: validTemperature(this.#options.temperature),\n        model_id: this.#options.modelId || undefined,\n        stop_sequences: this.#stopSequences,\n      },\n      metadata: {\n        disable_user_content_logging: !(this.#serverSideLoggingEnabled ?? false),\n        string_session_id: this.#sessionId,\n        user_tier: userTier,\n        client_version: Root.Runtime.getChromeVersion(),\n      },\n      additional_files: additionalFiles,\n    };\n  }\n\n  async #completeCodeCached(request: Host.AidaClient.CompletionRequest): Promise<{\n    response: Host.AidaClient.CompletionResponse | null,\n    fromCache: boolean,\n  }> {\n    const cachedResponse = this.#checkCachedRequestForResponse(request);\n    if (cachedResponse) {\n      return {response: cachedResponse, fromCache: true};\n    }\n\n    const response = await this.#aidaClient.completeCode(request);\n    if (!response) {\n      return {\n        response: null,\n        fromCache: false,\n      };\n    }\n\n    this.#updateCachedRequest(request, response);\n    return {\n      response,\n      fromCache: false,\n    };\n  }\n\n  #pickSampleFromResponse(response: Host.AidaClient.CompletionResponse): Host.AidaClient.GenerationSample|null {\n    if (!response.generatedSamples.length) {\n      return null;\n    }\n\n    // `currentHint` is the portion of a standard autocomplete suggestion that the user has not yet typed.\n    // For example, if the user types `document.queryS` and the autocomplete suggests `document.querySelector`,\n    // the `currentHint` is `elector`.\n    const currentHintInMenu = this.#editor.editor.plugin(TextEditor.Config.showCompletionHint)?.currentHint;\n    // TODO(ergunsh): We should not do this check here. Instead, the AI code suggestions should be provided\n    // as it is to the view plugin. The view plugin should choose which one to use based on the completion hint\n    // and selected completion.\n    if (!currentHintInMenu) {\n      return response.generatedSamples[0];\n    }\n\n    // TODO(ergunsh): This does not handle looking for `selectedCompletion`. The `currentHint` is `null`\n    // for the Sources panel case.\n    // Even though there is no match, we still return the first suggestion which will be displayed\n    // when the traditional autocomplete menu is closed.\n    return response.generatedSamples.find(sample => sample.generationString.startsWith(currentHintInMenu)) ??\n        response.generatedSamples[0];\n  }\n\n  async #generateSampleForRequest(request: Host.AidaClient.CompletionRequest, cursor: number): Promise<{\n    suggestionText: string,\n    sampleId: number,\n    fromCache: boolean,\n    citations: Host.AidaClient.Citation[],\n    rpcGlobalId?: Host.AidaClient.RpcGlobalId,\n  }|null> {\n    const {response, fromCache} = await this.#completeCodeCached(request);\n    debugLog('At cursor position', cursor, {request, response, fromCache});\n    if (!response) {\n      return null;\n    }\n\n    const suggestionSample = this.#pickSampleFromResponse(response);\n    if (!suggestionSample) {\n      return null;\n    }\n\n    const shouldBlock =\n        suggestionSample.attributionMetadata?.attributionAction === Host.AidaClient.RecitationAction.BLOCK;\n    if (shouldBlock) {\n      return null;\n    }\n\n    const isRepetitive = this.#checkIfSuggestionRepeatsExistingText(suggestionSample.generationString, request);\n    if (isRepetitive) {\n      return null;\n    }\n\n    const suggestionText = this.#trimSuggestionOverlap(suggestionSample.generationString, request);\n    if (suggestionText.length === 0) {\n      return null;\n    }\n\n    return {\n      suggestionText,\n      sampleId: suggestionSample.sampleId,\n      fromCache,\n      citations: suggestionSample.attributionMetadata?.citations ?? [],\n      rpcGlobalId: response.metadata.rpcGlobalId,\n    };\n  }\n\n  async #requestAidaSuggestion(request: Host.AidaClient.CompletionRequest, cursorPositionAtRequest: number):\n      Promise<void> {\n    const startTime = performance.now();\n    this.dispatchEventToListeners(Events.REQUEST_TRIGGERED, {});\n    // Registering AiCodeCompletionRequestTriggered metric even if the request is served from cache\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiCodeCompletionRequestTriggered);\n\n    try {\n      const sampleResponse = await this.#generateSampleForRequest(request, cursorPositionAtRequest);\n      if (!sampleResponse) {\n        this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {});\n        return;\n      }\n\n      const {\n        suggestionText,\n        sampleId,\n        fromCache,\n        citations,\n        rpcGlobalId,\n      } = sampleResponse;\n      const remainingDelay = Math.max(DELAY_BEFORE_SHOWING_RESPONSE_MS - (performance.now() - startTime), 0);\n      this.#renderingTimeout = window.setTimeout(() => {\n        const currentCursorPosition = this.#editor.editor.state.selection.main.head;\n        if (currentCursorPosition !== cursorPositionAtRequest) {\n          this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {});\n          return;\n        }\n        this.#editor.dispatch({\n          effects: TextEditor.Config.setAiAutoCompleteSuggestion.of({\n            text: suggestionText,\n            from: cursorPositionAtRequest,\n            rpcGlobalId,\n            sampleId,\n            startTime,\n            onImpression: this.#registerUserImpression.bind(this),\n            clearCachedRequest: this.clearCachedRequest.bind(this),\n          })\n        });\n\n        if (fromCache) {\n          Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiCodeCompletionResponseServedFromCache);\n        }\n\n        debugLog('Suggestion dispatched to the editor', suggestionText, 'at cursor position', cursorPositionAtRequest);\n        this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {citations});\n      }, remainingDelay);\n    } catch (e) {\n      debugLog('Error while fetching code completion suggestions from AIDA', e);\n      this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {});\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiCodeCompletionError);\n    }\n  }\n\n  get #userTier(): string|undefined {\n    return Root.Runtime.hostConfig.devToolsAiCodeCompletion?.userTier;\n  }\n\n  get #options(): RequestOptions {\n    const temperature = Root.Runtime.hostConfig.devToolsAiCodeCompletion?.temperature;\n    const modelId = Root.Runtime.hostConfig.devToolsAiCodeCompletion?.modelId;\n\n    return {\n      temperature,\n      modelId,\n    };\n  }\n\n  /**\n   * Removes the end of a suggestion if it overlaps with the start of the suffix.\n   */\n  #trimSuggestionOverlap(generationString: string, request: Host.AidaClient.CompletionRequest): string {\n    const suffix = request.suffix;\n    if (!suffix) {\n      return generationString;\n    }\n\n    // Iterate from the longest possible overlap down to the shortest\n    for (let i = Math.min(generationString.length, suffix.length); i > 0; i--) {\n      const overlapCandidate = suffix.substring(0, i);\n      if (generationString.endsWith(overlapCandidate)) {\n        return generationString.slice(0, -i);\n      }\n    }\n    return generationString;\n  }\n\n  #checkIfSuggestionRepeatsExistingText(generationString: string, request: Host.AidaClient.CompletionRequest): boolean {\n    const {prefix, suffix} = request;\n    return Boolean(prefix.includes(generationString.trim()) || suffix?.includes(generationString.trim()));\n  }\n\n  #checkCachedRequestForResponse(request: Host.AidaClient.CompletionRequest): Host.AidaClient.CompletionResponse|null {\n    if (!this.#aidaRequestCache || this.#aidaRequestCache.request.suffix !== request.suffix ||\n        JSON.stringify(this.#aidaRequestCache.request.options) !== JSON.stringify(request.options)) {\n      return null;\n    }\n    const possibleGeneratedSamples: Host.AidaClient.GenerationSample[] = [];\n    for (const sample of this.#aidaRequestCache.response.generatedSamples) {\n      const prefixWithSample = this.#aidaRequestCache.request.prefix + sample.generationString;\n      if (prefixWithSample.startsWith(request.prefix)) {\n        possibleGeneratedSamples.push({\n          generationString: prefixWithSample.substring(request.prefix.length),\n          sampleId: sample.sampleId,\n          score: sample.score,\n          attributionMetadata: sample.attributionMetadata,\n        });\n      }\n    }\n    if (possibleGeneratedSamples.length === 0) {\n      return null;\n    }\n    return {generatedSamples: possibleGeneratedSamples, metadata: this.#aidaRequestCache.response.metadata};\n  }\n\n  #updateCachedRequest(request: Host.AidaClient.CompletionRequest, response: Host.AidaClient.CompletionResponse): void {\n    this.#aidaRequestCache = {request, response};\n  }\n\n  #registerUserImpression(rpcGlobalId: Host.AidaClient.RpcGlobalId, sampleId: number, latency: number): void {\n    const seconds = Math.floor(latency / 1_000);\n    const remainingMs = latency % 1_000;\n    const nanos = Math.floor(remainingMs * 1_000_000);\n\n    void this.#aidaClient.registerClientEvent({\n      corresponding_aida_rpc_global_id: rpcGlobalId,\n      disable_user_content_logging: true,\n      complete_code_client_event: {\n        user_impression: {\n          sample: {\n            sample_id: sampleId,\n          },\n          latency: {\n            duration: {\n              seconds,\n              nanos,\n            },\n          }\n        },\n      },\n    });\n    debugLog('Registered user impression with latency {seconds:', seconds, ', nanos:', nanos, '}');\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiCodeCompletionSuggestionDisplayed);\n  }\n\n  registerUserAcceptance(rpcGlobalId: Host.AidaClient.RpcGlobalId, sampleId: number): void {\n    void this.#aidaClient.registerClientEvent({\n      corresponding_aida_rpc_global_id: rpcGlobalId,\n      disable_user_content_logging: true,\n      complete_code_client_event: {\n        user_acceptance: {\n          sample: {\n            sample_id: sampleId,\n          }\n        },\n      },\n    });\n    debugLog('Registered user acceptance');\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiCodeCompletionSuggestionAccepted);\n  }\n\n  clearCachedRequest(): void {\n    this.#aidaRequestCache = undefined;\n  }\n\n  onTextChanged(\n      prefix: string, suffix: string, cursorPositionAtRequest: number,\n      inferenceLanguage?: Host.AidaClient.AidaInferenceLanguage): void {\n    this.#debouncedRequestAidaSuggestion(prefix, suffix, cursorPositionAtRequest, inferenceLanguage);\n  }\n\n  remove(): void {\n    if (this.#renderingTimeout) {\n      clearTimeout(this.#renderingTimeout);\n      this.#renderingTimeout = undefined;\n    }\n    this.#editor.dispatch({\n      effects: TextEditor.Config.setAiAutoCompleteSuggestion.of(null),\n    });\n  }\n}\n\nexport const enum ContextFlavor {\n  CONSOLE = 'console',  // generated code can contain console specific APIs like `$0`.\n  SOURCES = 'sources',\n}\n\nexport const enum Events {\n  RESPONSE_RECEIVED = 'ResponseReceived',\n  REQUEST_TRIGGERED = 'RequestTriggered',\n}\n\nexport interface ResponseReceivedEvent {\n  citations?: Host.AidaClient.Citation[];\n}\n\nexport interface EventTypes {\n  [Events.RESPONSE_RECEIVED]: ResponseReceivedEvent;\n  // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n  [Events.REQUEST_TRIGGERED]: {};\n}\n"],
  "mappings": "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",
  "names": []
}
