{
  "version": 3,
  "sources": ["../../../../../../front_end/models/ai_code_completion/debug.ts", "../../../../../../front_end/models/ai_code_completion/AiCodeCompletion.ts"],
  "sourcesContent": ["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * @file Local debugging utilities.\n */\n\nexport function isDebugMode(): boolean {\n  return Boolean(localStorage.getItem('debugAiCodeCompletionEnabled'));\n}\n\nexport function debugLog(...log: unknown[]): void {\n  if (!isDebugMode()) {\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(...log);\n}\n\nfunction setDebugAiCodeCompletionEnabled(enabled: boolean): void {\n  if (enabled) {\n    localStorage.setItem('debugAiCodeCompletionEnabled', 'true');\n  } else {\n    localStorage.removeItem('debugAiCodeCompletionEnabled');\n  }\n}\n// @ts-expect-error\nglobalThis.setDebugAiCodeCompletionEnabled = setDebugAiCodeCompletionEnabled;\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Root from '../../core/root/root.js';\nimport * as TextEditor from '../../ui/components/text_editor/text_editor.js';\n\nimport {debugLog} from './debug.js';\n\nexport const DELAY_BEFORE_SHOWING_RESPONSE_MS = 500;\nexport const AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS = 200;\n\n// TODO(b/404796739): Remove these definitions of AgentOptions and RequestOptions and\n// use the existing ones which are used for AI assistance panel agents.\ninterface AgentOptions {\n  aidaClient: Host.AidaClient.AidaClient;\n  serverSideLoggingEnabled?: boolean;\n  confirmSideEffectForTest?: typeof Promise.withResolvers;\n}\n\ninterface RequestOptions {\n  temperature?: number;\n  modelId?: string;\n}\n\ninterface CachedRequest {\n  request: Host.AidaClient.CompletionRequest;\n  response: Host.AidaClient.CompletionResponse;\n}\n\n/* clang-format off */\nconst consoleAdditionalContextFileContent = `/**\n * This file describes the execution environment of the Chrome DevTools Console.\n * The code is JavaScript, but with special global functions and variables.\n * Top-level await is available.\n * The console has direct access to the inspected page's \\`window\\` and \\`document\\`.\n */\n\n/**\n * @description Returns the value of the most recently evaluated expression.\n */\nlet $_;\n\n/**\n * @description A reference to the most recently selected DOM element.\n * $0, $1, $2, $3, $4 can be used to reference the last five selected DOM elements.\n */\nlet $0;\n\n/**\n * @description A query selector alias. $$('.my-class') is equivalent to document.querySelectorAll('.my-class').\n */\nfunction $$(selector, startNode) {}\n\n/**\n * @description An XPath selector. $x('//p') returns an array of all <p> elements.\n */\nfunction $x(path, startNode) {}\n\nfunction clear() {}\n\nfunction copy(object) {}\n\n/**\n * @description Selects and reveals the specified element in the Elements panel.\n */\nfunction inspect(object) {}\n\nfunction keys(object) {}\n\nfunction values(object) {}\n\n/**\n * @description When the specified function is called, the debugger is invoked.\n */\nfunction debug(func) {}\n\n/**\n * @description Stops the debugging of the specified function.\n */\nfunction undebug(func) {}\n\n/**\n * @description Logs a message to the console whenever the specified function is called,\n * along with the arguments passed to it.\n */\nfunction monitor(func) {}\n\n/**\n * @description Stops monitoring the specified function.\n */\nfunction unmonitor(func) {}\n\n/**\n * @description Logs all events dispatched to the specified object to the console.\n */\nfunction monitorEvents(object, events) {}\n\n/**\n * @description Returns an object containing all event listeners registered on the specified object.\n */\nfunction getEventListeners(object) {}\n\n/**\n * The global \\`console\\` object has several helpful methods\n */\nconst console = {\n  log: (...args) => {},\n  warn: (...args) => {},\n  error: (...args) => {},\n  info: (...args) => {},\n  debug: (...args) => {},\n  assert: (assertion, ...args) => {},\n  dir: (object) => {}, // Displays an interactive property listing of an object.\n  dirxml: (object) => {}, // Displays an XML/HTML representation of an object.\n  table: (data, columns) => {}, // Displays tabular data as a table.\n  group: (label) => {}, // Creates a new inline collapsible group.\n  groupEnd: () => {},\n  time: (label) => {}, // Starts a timer.\n  timeEnd: (label) => {} // Stops a timer and logs the elapsed time.\n};`;\n/* clang-format on */\n\n/**\n * The AiCodeCompletion class is responsible for fetching code completion suggestions\n * from the AIDA backend and displaying them in the text editor.\n *\n * 1. **Debouncing requests:** As the user types, we don't want to send a request\n *    for every keystroke. Instead, we use debouncing to schedule a request\n *    only after the user has paused typing for a short period\n *    (AIDA_REQUEST_THROTTLER_TIMEOUT_MS). This prevents spamming the backend with\n *    requests for intermediate typing states.\n *\n * 2. **Delaying suggestions:** When a suggestion is received from the AIDA\n *    backend, we don't show it immediately. There is a minimum delay\n *    (DELAY_BEFORE_SHOWING_RESPONSE_MS) from when the request was sent to when\n *    the suggestion is displayed.\n */\nexport class AiCodeCompletion extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #editor: TextEditor.TextEditor.TextEditor;\n  #stopSequences: string[];\n  #renderingTimeout?: number;\n  #aidaRequestCache?: CachedRequest;\n  #panel: Panel;\n\n  readonly #sessionId: string = crypto.randomUUID();\n  readonly #aidaClient: Host.AidaClient.AidaClient;\n  readonly #serverSideLoggingEnabled: boolean;\n\n  constructor(opts: AgentOptions, editor: TextEditor.TextEditor.TextEditor, panel: Panel, stopSequences?: string[]) {\n    super();\n    this.#aidaClient = opts.aidaClient;\n    this.#serverSideLoggingEnabled = opts.serverSideLoggingEnabled ?? false;\n    this.#editor = editor;\n    this.#panel = panel;\n    this.#stopSequences = stopSequences ?? [];\n  }\n\n  #debouncedRequestAidaSuggestion = Common.Debouncer.debounce(\n      (prefix: string, suffix: string, cursor: number, inferenceLanguage?: Host.AidaClient.AidaInferenceLanguage) => {\n        void this.#requestAidaSuggestion(this.#buildRequest(prefix, suffix, inferenceLanguage), cursor);\n      },\n      AIDA_REQUEST_DEBOUNCE_TIMEOUT_MS);\n\n  #buildRequest(\n      prefix: string, suffix: string,\n      inferenceLanguage: Host.AidaClient.AidaInferenceLanguage = Host.AidaClient.AidaInferenceLanguage.JAVASCRIPT):\n      Host.AidaClient.CompletionRequest {\n    const userTier = Host.AidaClient.convertToUserTierEnum(this.#userTier);\n    function validTemperature(temperature: number|undefined): number|undefined {\n      return typeof temperature === 'number' && temperature >= 0 ? temperature : undefined;\n    }\n    // As a temporary fix for b/441221870 we are prepending a newline for each prefix.\n    prefix = '\\n' + prefix;\n\n    const additionalFiles = this.#panel === Panel.CONSOLE ? [{\n      path: 'devtools-console-context.js',\n      content: consoleAdditionalContextFileContent,\n      included_reason: Host.AidaClient.Reason.RELATED_FILE,\n    }] :\n                                                            undefined;\n\n    return {\n      client: Host.AidaClient.CLIENT_NAME,\n      prefix,\n      suffix,\n      options: {\n        inference_language: inferenceLanguage,\n        temperature: validTemperature(this.#options.temperature),\n        model_id: this.#options.modelId || undefined,\n        stop_sequences: this.#stopSequences,\n      },\n      metadata: {\n        disable_user_content_logging: !(this.#serverSideLoggingEnabled ?? false),\n        string_session_id: this.#sessionId,\n        user_tier: userTier,\n        client_version: Root.Runtime.getChromeVersion(),\n      },\n      additional_files: additionalFiles,\n    };\n  }\n\n  async #requestAidaSuggestion(request: Host.AidaClient.CompletionRequest, cursor: number): Promise<void> {\n    const startTime = performance.now();\n    let servedFromCache = false;\n    this.dispatchEventToListeners(Events.REQUEST_TRIGGERED, {});\n\n    try {\n      let response = this.#checkCachedRequestForResponse(request);\n      if (!response) {\n        response = await this.#aidaClient.completeCode(request);\n        if (response) {\n          this.#updateCachedRequest(request, response);\n        }\n      } else {\n        servedFromCache = true;\n      }\n      debugLog('At cursor position', cursor, {request, response});\n      if (response && response.generatedSamples.length > 0 && response.generatedSamples[0].generationString) {\n        if (response.generatedSamples[0].attributionMetadata?.attributionAction ===\n            Host.AidaClient.RecitationAction.BLOCK) {\n          this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {});\n          return;\n        }\n\n        // Use the suffix from the request to find and remove any overlap.\n        let suggestionText = response.generatedSamples[0].generationString;\n        if (request.suffix && request.suffix.length > 0) {\n          suggestionText = this.#trimSuggestionOverlap(response.generatedSamples[0].generationString, request.suffix);\n        }\n        if (suggestionText.length === 0) {\n          this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {});\n          return;\n        }\n\n        const remainderDelay = Math.max(DELAY_BEFORE_SHOWING_RESPONSE_MS - (performance.now() - startTime), 0);\n        // Delays the rendering of the Code completion\n        this.#renderingTimeout = window.setTimeout(() => {\n          // We are not cancelling the previous responses even when there are more recent responses\n          // from the LLM as:\n          // In case the user kept typing characters that are prefix of the previous suggestion, it\n          // is a valid suggestion and we should display it to the user.\n          // In case the user typed a different character, the config for AI auto complete suggestion\n          // will set the suggestion to null.\n          this.#editor.dispatch({\n            effects: TextEditor.Config.setAiAutoCompleteSuggestion.of({\n              text: suggestionText,\n              from: cursor,\n              rpcGlobalId: response.metadata.rpcGlobalId,\n              sampleId: response.generatedSamples[0].sampleId,\n            })\n          });\n          if (servedFromCache) {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.AiCodeCompletionResponseServedFromCache);\n          }\n          debugLog('Suggestion dispatched to the editor', response.generatedSamples[0], 'at cursor position', cursor);\n          if (response.metadata.rpcGlobalId) {\n            const latency = performance.now() - startTime;\n            this.#registerUserImpression(response.metadata.rpcGlobalId, response.generatedSamples[0].sampleId, latency);\n          }\n          const citations = response.generatedSamples[0].attributionMetadata?.citations;\n          this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {citations});\n        }, remainderDelay);\n      } else {\n        this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {});\n      }\n    } catch (e) {\n      debugLog('Error while fetching code completion suggestions from AIDA', e);\n      this.dispatchEventToListeners(Events.RESPONSE_RECEIVED, {});\n    }\n  }\n\n  get #userTier(): string|undefined {\n    return Root.Runtime.hostConfig.devToolsAiCodeCompletion?.userTier;\n  }\n\n  get #options(): RequestOptions {\n    const temperature = Root.Runtime.hostConfig.devToolsAiCodeCompletion?.temperature;\n    const modelId = Root.Runtime.hostConfig.devToolsAiCodeCompletion?.modelId;\n\n    return {\n      temperature,\n      modelId,\n    };\n  }\n\n  /**\n   * Removes the end of a suggestion if it overlaps with the start of the suffix.\n   */\n  #trimSuggestionOverlap(generationString: string, suffix: string): string {\n    // Iterate from the longest possible overlap down to the shortest\n    for (let i = Math.min(generationString.length, suffix.length); i > 0; i--) {\n      const overlapCandidate = suffix.substring(0, i);\n      if (generationString.endsWith(overlapCandidate)) {\n        return generationString.slice(0, -i);\n      }\n    }\n    return generationString;\n  }\n\n  #checkCachedRequestForResponse(request: Host.AidaClient.CompletionRequest): Host.AidaClient.CompletionResponse|null {\n    if (!this.#aidaRequestCache || this.#aidaRequestCache.request.suffix !== request.suffix ||\n        JSON.stringify(this.#aidaRequestCache.request.options) !== JSON.stringify(request.options)) {\n      return null;\n    }\n    const possibleGeneratedSamples: Host.AidaClient.GenerationSample[] = [];\n    for (const sample of this.#aidaRequestCache.response.generatedSamples) {\n      const prefixWithSample = this.#aidaRequestCache.request.prefix + sample.generationString;\n      if (prefixWithSample.startsWith(request.prefix)) {\n        possibleGeneratedSamples.push({\n          generationString: prefixWithSample.substring(request.prefix.length),\n          sampleId: sample.sampleId,\n          score: sample.score,\n          attributionMetadata: sample.attributionMetadata,\n        });\n      }\n    }\n    if (possibleGeneratedSamples.length === 0) {\n      return null;\n    }\n    return {generatedSamples: possibleGeneratedSamples, metadata: this.#aidaRequestCache.response.metadata};\n  }\n\n  #updateCachedRequest(request: Host.AidaClient.CompletionRequest, response: Host.AidaClient.CompletionResponse): void {\n    this.#aidaRequestCache = {request, response};\n  }\n\n  #registerUserImpression(rpcGlobalId: Host.AidaClient.RpcGlobalId, sampleId: number, latency: number): void {\n    const seconds = Math.floor(latency / 1_000);\n    const remainingMs = latency % 1_000;\n    const nanos = Math.floor(remainingMs * 1_000_000);\n\n    void this.#aidaClient.registerClientEvent({\n      corresponding_aida_rpc_global_id: rpcGlobalId,\n      disable_user_content_logging: true,\n      complete_code_client_event: {\n        user_impression: {\n          sample: {\n            sample_id: sampleId,\n          },\n          latency: {\n            duration: {\n              seconds,\n              nanos,\n            },\n          }\n        },\n      },\n    });\n    debugLog('Registered user impression with latency {seconds:', seconds, ', nanos:', nanos, '}');\n  }\n\n  registerUserAcceptance(rpcGlobalId: Host.AidaClient.RpcGlobalId, sampleId: number): void {\n    void this.#aidaClient.registerClientEvent({\n      corresponding_aida_rpc_global_id: rpcGlobalId,\n      disable_user_content_logging: true,\n      complete_code_client_event: {\n        user_acceptance: {\n          sample: {\n            sample_id: sampleId,\n          }\n        },\n      },\n    });\n    debugLog('Registered user acceptance');\n  }\n\n  onTextChanged(\n      prefix: string, suffix: string, cursor: number, inferenceLanguage?: Host.AidaClient.AidaInferenceLanguage): void {\n    this.#debouncedRequestAidaSuggestion(prefix, suffix, cursor, inferenceLanguage);\n  }\n\n  remove(): void {\n    if (this.#renderingTimeout) {\n      clearTimeout(this.#renderingTimeout);\n      this.#renderingTimeout = undefined;\n    }\n    this.#editor.dispatch({\n      effects: TextEditor.Config.setAiAutoCompleteSuggestion.of(null),\n    });\n  }\n}\n\nexport const enum Panel {\n  CONSOLE = 'console',\n  SOURCES = 'sources',\n}\n\nexport const enum Events {\n  RESPONSE_RECEIVED = 'ResponseReceived',\n  REQUEST_TRIGGERED = 'RequestTriggered',\n}\n\nexport interface ResponseReceivedEvent {\n  citations?: Host.AidaClient.Citation[];\n}\n\nexport interface EventTypes {\n  [Events.RESPONSE_RECEIVED]: ResponseReceivedEvent;\n  // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n  [Events.REQUEST_TRIGGERED]: {};\n}\n"],
  "mappings": ";;;;;;;AAQM,SAAU,cAAW;AACzB,SAAO,QAAQ,aAAa,QAAQ,8BAA8B,CAAC;AACrE;AAEM,SAAU,YAAY,KAAc;AACxC,MAAI,CAAC,YAAW,GAAI;AAClB;EACF;AAGA,UAAQ,IAAI,GAAG,GAAG;AACpB;AAEA,SAAS,gCAAgC,SAAgB;AACvD,MAAI,SAAS;AACX,iBAAa,QAAQ,gCAAgC,MAAM;EAC7D,OAAO;AACL,iBAAa,WAAW,8BAA8B;EACxD;AACF;AAEA,WAAW,kCAAkC;;;AC7B7C;;;;;;AAIA,YAAY,YAAY;AACxB,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,YAAY,gBAAgB;AAIrB,IAAM,mCAAmC;AACzC,IAAM,mCAAmC;AAqBhD,IAAM,sCAAsC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GtC,IAAO,mBAAP,cAAuC,qBAAc,cAAyB;EAClF;EACA;EACA;EACA;EACA;EAES,aAAqB,OAAO,WAAU;EACtC;EACA;EAET,YAAY,MAAoB,QAA0C,OAAc,eAAwB;AAC9G,UAAK;AACL,SAAK,cAAc,KAAK;AACxB,SAAK,4BAA4B,KAAK,4BAA4B;AAClE,SAAK,UAAU;AACf,SAAK,SAAS;AACd,SAAK,iBAAiB,iBAAiB,CAAA;EACzC;EAEA,kCAAyC,iBAAU,SAC/C,CAAC,QAAgB,QAAgB,QAAgB,sBAA6D;AAC5G,SAAK,KAAK,uBAAuB,KAAK,cAAc,QAAQ,QAAQ,iBAAiB,GAAG,MAAM;EAChG,GACA,gCAAgC;EAEpC,cACI,QAAgB,QAChB,oBAAA,cAA2G;AAE7G,UAAM,WAAgB,gBAAW,sBAAsB,KAAK,SAAS;AACrE,aAAS,iBAAiB,aAA6B;AACrD,aAAO,OAAO,gBAAgB,YAAY,eAAe,IAAI,cAAc;IAC7E;AAEA,aAAS,OAAO;AAEhB,UAAM,kBAAkB,KAAK,WAAM,YAAqB,CAAC;MACvD,MAAM;MACN,SAAS;MACT,iBAAsB,gBAAW,OAAO;KACzC,IACuD;AAExD,WAAO;MACL,QAAa,gBAAW;MACxB;MACA;MACA,SAAS;QACP,oBAAoB;QACpB,aAAa,iBAAiB,KAAK,SAAS,WAAW;QACvD,UAAU,KAAK,SAAS,WAAW;QACnC,gBAAgB,KAAK;;MAEvB,UAAU;QACR,8BAA8B,EAAE,KAAK,6BAA6B;QAClE,mBAAmB,KAAK;QACxB,WAAW;QACX,gBAAqB,aAAQ,iBAAgB;;MAE/C,kBAAkB;;EAEtB;EAEA,MAAM,uBAAuB,SAA4C,QAAc;AACrF,UAAM,YAAY,YAAY,IAAG;AACjC,QAAI,kBAAkB;AACtB,SAAK,yBAAwB,oBAA2B,CAAA,CAAE;AAE1D,QAAI;AACF,UAAI,WAAW,KAAK,+BAA+B,OAAO;AAC1D,UAAI,CAAC,UAAU;AACb,mBAAW,MAAM,KAAK,YAAY,aAAa,OAAO;AACtD,YAAI,UAAU;AACZ,eAAK,qBAAqB,SAAS,QAAQ;QAC7C;MACF,OAAO;AACL,0BAAkB;MACpB;AACA,eAAS,sBAAsB,QAAQ,EAAC,SAAS,SAAQ,CAAC;AAC1D,UAAI,YAAY,SAAS,iBAAiB,SAAS,KAAK,SAAS,iBAAiB,CAAC,EAAE,kBAAkB;AACrG,YAAI,SAAS,iBAAiB,CAAC,EAAE,qBAAqB,sBAC7C,gBAAW,iBAAiB,OAAO;AAC1C,eAAK,yBAAwB,oBAA2B,CAAA,CAAE;AAC1D;QACF;AAGA,YAAI,iBAAiB,SAAS,iBAAiB,CAAC,EAAE;AAClD,YAAI,QAAQ,UAAU,QAAQ,OAAO,SAAS,GAAG;AAC/C,2BAAiB,KAAK,uBAAuB,SAAS,iBAAiB,CAAC,EAAE,kBAAkB,QAAQ,MAAM;QAC5G;AACA,YAAI,eAAe,WAAW,GAAG;AAC/B,eAAK,yBAAwB,oBAA2B,CAAA,CAAE;AAC1D;QACF;AAEA,cAAM,iBAAiB,KAAK,IAAI,oCAAoC,YAAY,IAAG,IAAK,YAAY,CAAC;AAErG,aAAK,oBAAoB,OAAO,WAAW,MAAK;AAO9C,eAAK,QAAQ,SAAS;YACpB,SAAoB,kBAAO,4BAA4B,GAAG;cACxD,MAAM;cACN,MAAM;cACN,aAAa,SAAS,SAAS;cAC/B,UAAU,SAAS,iBAAiB,CAAC,EAAE;aACxC;WACF;AACD,cAAI,iBAAiB;AACnB,YAAK,iBAAY,YAAiB,iBAAY,OAAO,uCAAuC;UAC9F;AACA,mBAAS,uCAAuC,SAAS,iBAAiB,CAAC,GAAG,sBAAsB,MAAM;AAC1G,cAAI,SAAS,SAAS,aAAa;AACjC,kBAAM,UAAU,YAAY,IAAG,IAAK;AACpC,iBAAK,wBAAwB,SAAS,SAAS,aAAa,SAAS,iBAAiB,CAAC,EAAE,UAAU,OAAO;UAC5G;AACA,gBAAM,YAAY,SAAS,iBAAiB,CAAC,EAAE,qBAAqB;AACpE,eAAK,yBAAwB,oBAA2B,EAAC,UAAS,CAAC;QACrE,GAAG,cAAc;MACnB,OAAO;AACL,aAAK,yBAAwB,oBAA2B,CAAA,CAAE;MAC5D;IACF,SAAS,GAAG;AACV,eAAS,8DAA8D,CAAC;AACxE,WAAK,yBAAwB,oBAA2B,CAAA,CAAE;IAC5D;EACF;EAEA,IAAI,YAAS;AACX,WAAY,aAAQ,WAAW,0BAA0B;EAC3D;EAEA,IAAI,WAAQ;AACV,UAAM,cAAmB,aAAQ,WAAW,0BAA0B;AACtE,UAAM,UAAe,aAAQ,WAAW,0BAA0B;AAElE,WAAO;MACL;MACA;;EAEJ;;;;EAKA,uBAAuB,kBAA0B,QAAc;AAE7D,aAAS,IAAI,KAAK,IAAI,iBAAiB,QAAQ,OAAO,MAAM,GAAG,IAAI,GAAG,KAAK;AACzE,YAAM,mBAAmB,OAAO,UAAU,GAAG,CAAC;AAC9C,UAAI,iBAAiB,SAAS,gBAAgB,GAAG;AAC/C,eAAO,iBAAiB,MAAM,GAAG,CAAC,CAAC;MACrC;IACF;AACA,WAAO;EACT;EAEA,+BAA+B,SAA0C;AACvE,QAAI,CAAC,KAAK,qBAAqB,KAAK,kBAAkB,QAAQ,WAAW,QAAQ,UAC7E,KAAK,UAAU,KAAK,kBAAkB,QAAQ,OAAO,MAAM,KAAK,UAAU,QAAQ,OAAO,GAAG;AAC9F,aAAO;IACT;AACA,UAAM,2BAA+D,CAAA;AACrE,eAAW,UAAU,KAAK,kBAAkB,SAAS,kBAAkB;AACrE,YAAM,mBAAmB,KAAK,kBAAkB,QAAQ,SAAS,OAAO;AACxE,UAAI,iBAAiB,WAAW,QAAQ,MAAM,GAAG;AAC/C,iCAAyB,KAAK;UAC5B,kBAAkB,iBAAiB,UAAU,QAAQ,OAAO,MAAM;UAClE,UAAU,OAAO;UACjB,OAAO,OAAO;UACd,qBAAqB,OAAO;SAC7B;MACH;IACF;AACA,QAAI,yBAAyB,WAAW,GAAG;AACzC,aAAO;IACT;AACA,WAAO,EAAC,kBAAkB,0BAA0B,UAAU,KAAK,kBAAkB,SAAS,SAAQ;EACxG;EAEA,qBAAqB,SAA4C,UAA4C;AAC3G,SAAK,oBAAoB,EAAC,SAAS,SAAQ;EAC7C;EAEA,wBAAwB,aAA0C,UAAkB,SAAe;AACjG,UAAM,UAAU,KAAK,MAAM,UAAU,GAAK;AAC1C,UAAM,cAAc,UAAU;AAC9B,UAAM,QAAQ,KAAK,MAAM,cAAc,GAAS;AAEhD,SAAK,KAAK,YAAY,oBAAoB;MACxC,kCAAkC;MAClC,8BAA8B;MAC9B,4BAA4B;QAC1B,iBAAiB;UACf,QAAQ;YACN,WAAW;;UAEb,SAAS;YACP,UAAU;cACR;cACA;;;;;KAKT;AACD,aAAS,qDAAqD,SAAS,YAAY,OAAO,GAAG;EAC/F;EAEA,uBAAuB,aAA0C,UAAgB;AAC/E,SAAK,KAAK,YAAY,oBAAoB;MACxC,kCAAkC;MAClC,8BAA8B;MAC9B,4BAA4B;QAC1B,iBAAiB;UACf,QAAQ;YACN,WAAW;;;;KAIlB;AACD,aAAS,4BAA4B;EACvC;EAEA,cACI,QAAgB,QAAgB,QAAgB,mBAAyD;AAC3G,SAAK,gCAAgC,QAAQ,QAAQ,QAAQ,iBAAiB;EAChF;EAEA,SAAM;AACJ,QAAI,KAAK,mBAAmB;AAC1B,mBAAa,KAAK,iBAAiB;AACnC,WAAK,oBAAoB;IAC3B;AACA,SAAK,QAAQ,SAAS;MACpB,SAAoB,kBAAO,4BAA4B,GAAG,IAAI;KAC/D;EACH;;",
  "names": []
}
