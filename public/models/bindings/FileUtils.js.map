{"version":3,"file":"FileUtils.js","sourceRoot":"","sources":["../../../../../../front_end/models/bindings/FileUtils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2012 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nexport interface ChunkedReader {\n  fileSize(): number;\n\n  loadedSize(): number;\n\n  fileName(): string;\n\n  cancel(): void;\n\n  error(): DOMError|null;\n}\n\nexport class ChunkedFileReader implements ChunkedReader {\n  #file: File|null;\n  readonly #fileSize: number;\n  #loadedSize: number;\n  #streamReader: ReadableStreamDefaultReader<Uint8Array<ArrayBuffer>>|null;\n  readonly #chunkSize: number;\n  readonly #chunkTransferredCallback: ((arg0: ChunkedReader) => void)|undefined;\n  readonly #decoder: TextDecoder;\n  #isCanceled: boolean;\n  #error: DOMException|null;\n  #transferFinished!: (arg0: boolean) => void;\n  #output?: Common.StringOutputStream.OutputStream;\n  #reader?: FileReader|null;\n\n  constructor(file: File, chunkSize?: number, chunkTransferredCallback?: ((arg0: ChunkedReader) => void)) {\n    this.#file = file;\n    this.#fileSize = file.size;\n    this.#loadedSize = 0;\n    this.#chunkSize = (chunkSize) ? chunkSize : Number.MAX_VALUE;\n    this.#chunkTransferredCallback = chunkTransferredCallback;\n    this.#decoder = new TextDecoder();\n    this.#isCanceled = false;\n    this.#error = null;\n    this.#streamReader = null;\n  }\n\n  async read(output: Common.StringOutputStream.OutputStream): Promise<boolean> {\n    if (this.#chunkTransferredCallback) {\n      this.#chunkTransferredCallback(this);\n    }\n\n    if (this.#file?.type.endsWith('gzip')) {\n      const fileStream = this.#file.stream();\n      const stream = Common.Gzip.decompressStream(fileStream);\n      this.#streamReader = stream.getReader();\n    } else {\n      this.#reader = new FileReader();\n      this.#reader.onload = this.onChunkLoaded.bind(this);\n      this.#reader.onerror = this.onError.bind(this);\n    }\n\n    this.#output = output;\n    void this.loadChunk();\n\n    return await new Promise(resolve => {\n      this.#transferFinished = resolve;\n    });\n  }\n\n  cancel(): void {\n    this.#isCanceled = true;\n  }\n\n  loadedSize(): number {\n    return this.#loadedSize;\n  }\n\n  fileSize(): number {\n    return this.#fileSize;\n  }\n\n  fileName(): string {\n    if (!this.#file) {\n      return '';\n    }\n    return this.#file.name;\n  }\n\n  error(): DOMException|null {\n    return this.#error;\n  }\n\n  private onChunkLoaded(event: Event): void {\n    if (this.#isCanceled) {\n      return;\n    }\n\n    const eventTarget = (event.target as FileReader);\n    if (eventTarget.readyState !== FileReader.DONE) {\n      return;\n    }\n\n    if (!this.#reader) {\n      return;\n    }\n\n    const buffer = (this.#reader.result as ArrayBuffer);\n    this.#loadedSize += buffer.byteLength;\n    const endOfFile = this.#loadedSize === this.#fileSize;\n    void this.decodeChunkBuffer(buffer, endOfFile);\n  }\n\n  private async decodeChunkBuffer(buffer: ArrayBuffer, endOfFile: boolean): Promise<void> {\n    if (!this.#output) {\n      return;\n    }\n    const decodedString = this.#decoder.decode(buffer, {stream: !endOfFile});\n    await this.#output.write(decodedString, endOfFile);\n    if (this.#isCanceled) {\n      return;\n    }\n    if (this.#chunkTransferredCallback) {\n      this.#chunkTransferredCallback(this);\n    }\n\n    if (endOfFile) {\n      void this.finishRead();\n      return;\n    }\n    void this.loadChunk();\n  }\n\n  private async finishRead(): Promise<void> {\n    if (!this.#output) {\n      return;\n    }\n    this.#file = null;\n    this.#reader = null;\n    await this.#output.close();\n    this.#transferFinished(!this.#error);\n  }\n\n  private async loadChunk(): Promise<void> {\n    if (!this.#output || !this.#file) {\n      return;\n    }\n    if (this.#streamReader) {\n      const {value, done} = await this.#streamReader.read();\n      if (done || !value) {\n        // Write empty string to inform of file end\n        await this.#output.write('', true);\n        return await this.finishRead();\n      }\n      void this.decodeChunkBuffer(value.buffer, false);\n    }\n    if (this.#reader) {\n      const chunkStart = this.#loadedSize;\n      const chunkEnd = Math.min(this.#fileSize, chunkStart + this.#chunkSize);\n      const nextPart = this.#file.slice(chunkStart, chunkEnd);\n      this.#reader.readAsArrayBuffer(nextPart);\n    }\n  }\n\n  private onError(event: Event): void {\n    const eventTarget = (event.target as FileReader);\n    this.#error = eventTarget.error;\n    this.#transferFinished(false);\n  }\n}\n\nexport class FileOutputStream implements Common.StringOutputStream.OutputStream {\n  #writeCallbacks: Array<() => void>;\n  #fileName!: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString;\n  #closed?: boolean;\n  constructor() {\n    this.#writeCallbacks = [];\n  }\n\n  async open(fileName: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString): Promise<boolean> {\n    this.#closed = false;\n    this.#writeCallbacks = [];\n    this.#fileName = fileName;\n    const saveResponse = await Workspace.FileManager.FileManager.instance().save(\n        this.#fileName, TextUtils.ContentData.EMPTY_TEXT_CONTENT_DATA, /* forceSaveAs=*/ true);\n    if (saveResponse) {\n      Workspace.FileManager.FileManager.instance().addEventListener(\n          Workspace.FileManager.Events.APPENDED_TO_URL, this.onAppendDone, this);\n    }\n    return Boolean(saveResponse);\n  }\n\n  write(data: string): Promise<void> {\n    return new Promise(resolve => {\n      this.#writeCallbacks.push(resolve);\n      Workspace.FileManager.FileManager.instance().append(this.#fileName, data);\n    });\n  }\n\n  async close(): Promise<void> {\n    this.#closed = true;\n    if (this.#writeCallbacks.length) {\n      return;\n    }\n    Workspace.FileManager.FileManager.instance().removeEventListener(\n        Workspace.FileManager.Events.APPENDED_TO_URL, this.onAppendDone, this);\n    Workspace.FileManager.FileManager.instance().close(this.#fileName);\n  }\n\n  private onAppendDone(event: Common.EventTarget.EventTargetEvent<string>): void {\n    if (event.data !== this.#fileName) {\n      return;\n    }\n    const writeCallback = this.#writeCallbacks.shift();\n    if (writeCallback) {\n      writeCallback();\n    }\n    if (this.#writeCallbacks.length) {\n      return;\n    }\n    if (!this.#closed) {\n      return;\n    }\n    Workspace.FileManager.FileManager.instance().removeEventListener(\n        Workspace.FileManager.Events.APPENDED_TO_URL, this.onAppendDone, this);\n    Workspace.FileManager.FileManager.instance().close(this.#fileName);\n  }\n}\n"]}