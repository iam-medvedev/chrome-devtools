{"version":3,"file":"DebuggerLanguagePlugins.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/bindings/DebuggerLanguagePlugins.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,EAAC,UAAU,EAAC,MAAM,wCAAwC,CAAC;AAElE,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACzC,EAAE,CAAC,qEAAqE,EAAE,GAAG,EAAE;gBAC7E,MAAM,SAAS,GAAG,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;gBACxE,MAAM,eAAe,GAAiC;oBACpD,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,KAAK;iBACnB,CAAC;gBACF,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC;gBAC5C,MAAM,YAAY,GACd,IAAI,QAAQ,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,SAAS,EAAE,eAAe,EAAE,MAAM,CAAC,CAAC;gBACnG,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,yBAAyB,EAAE,CAAC,CAAC;YAC3D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,mEAAmE,EAAE,GAAG,EAAE;gBAC3E,MAAM,SAAS,GAAG,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;gBACxE,MAAM,eAAe,GAAiC;oBACpD,IAAI,EAAE,QAAQ;oBACd,mBAAmB,EAAE,EAAE;oBACvB,WAAW,EAAE,KAAK;iBACnB,CAAC;gBACF,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC;gBAC5C,MAAM,YAAY,GACd,IAAI,QAAQ,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,SAAS,EAAE,eAAe,EAAE,MAAM,CAAC,CAAC;gBACnG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,yBAAyB,EAAE,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {type Chrome} from '../../../extension-api/ExtensionAPI.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {TestPlugin} from '../../testing/LanguagePluginHelpers.js';\n\nimport * as Bindings from './bindings.js';\n\ndescribe('DebuggerLanguagePlugins', () => {\n  describe('ExtensionRemoteObject', () => {\n    describe('isLinearMemoryInspectable', () => {\n      it('yields false when the extension object has no linear memory address', () => {\n        const callFrame = sinon.createStubInstance(SDK.DebuggerModel.CallFrame);\n        const extensionObject: Chrome.DevTools.RemoteObject = {\n          type: 'object',\n          hasChildren: false,\n        };\n        const plugin = new TestPlugin('TestPlugin');\n        const remoteObject =\n            new Bindings.DebuggerLanguagePlugins.ExtensionRemoteObject(callFrame, extensionObject, plugin);\n        assert.isFalse(remoteObject.isLinearMemoryInspectable());\n      });\n\n      it('yields true when the extension object has a linear memory address', () => {\n        const callFrame = sinon.createStubInstance(SDK.DebuggerModel.CallFrame);\n        const extensionObject: Chrome.DevTools.RemoteObject = {\n          type: 'object',\n          linearMemoryAddress: 42,\n          hasChildren: false,\n        };\n        const plugin = new TestPlugin('TestPlugin');\n        const remoteObject =\n            new Bindings.DebuggerLanguagePlugins.ExtensionRemoteObject(callFrame, extensionObject, plugin);\n        assert.isTrue(remoteObject.isLinearMemoryInspectable());\n      });\n    });\n  });\n});\n"]}