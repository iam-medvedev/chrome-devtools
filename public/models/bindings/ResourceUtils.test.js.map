{"version":3,"file":"ResourceUtils.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/bindings/ResourceUtils.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport * as Bindings from './bindings.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\ndescribeWithMockConnection('ResourceUtils', () => {\n  const INSPECTED_URL_SCHEME = 'http://';\n  const INSPECTED_URL_DOMAIN = 'example.com';\n  const OTHER_DOMAIN = 'example.org';\n  const INSPECTED_URL_PATH_COMPONENTS = ['', 'foo', 'bar'];\n  const INSPECTED_URL_PATH = INSPECTED_URL_PATH_COMPONENTS.join('/');\n  const INSPECTED_URL = urlString`${INSPECTED_URL_SCHEME}${INSPECTED_URL_DOMAIN}${INSPECTED_URL_PATH}`;\n  const QUERY_STRING = '?QUERY_STRING';\n  const OTHER_PATH = '/OTHER/PATH';\n  const INVALID_URL = urlString`:~INVALID_URL~:`;\n  let target: SDK.Target.Target;\n  let resourceForURLStub: sinon.SinonStub;\n  let uiSourceCodeForURLStub: sinon.SinonStub;\n\n  describe('displayNameForURL', () => {\n    const {displayNameForURL} = Bindings.ResourceUtils;\n\n    beforeEach(() => {\n      const tabTarget = createTarget({type: SDK.Target.Type.TAB});\n      createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n      target = createTarget({parentTarget: tabTarget});\n      target.setInspectedURL(INSPECTED_URL);\n      resourceForURLStub = sinon.stub(SDK.ResourceTreeModel.ResourceTreeModel, 'resourceForURL').returns(null);\n      uiSourceCodeForURLStub =\n          sinon.stub(Workspace.Workspace.WorkspaceImpl.instance(), 'uiSourceCodeForURL').returns(null);\n    });\n\n    it('favors displayName from UISourceCode', () => {\n      const resource = sinon.createStubInstance(SDK.Resource.Resource);\n      resourceForURLStub.returns(resource);\n      const uiSourceCode = sinon.createStubInstance(Workspace.UISourceCode.UISourceCode);\n      uiSourceCode.displayName.returns('UI_SOURCE_CODE_DISPLAY_NAME');\n      uiSourceCodeForURLStub.returns(uiSourceCode);\n\n      assert.strictEqual(displayNameForURL(urlString`${INSPECTED_URL}${QUERY_STRING}`), 'UI_SOURCE_CODE_DISPLAY_NAME');\n    });\n\n    it('falls back to displayName from Resource', () => {\n      const resource = sinon.createStubInstance(SDK.Resource.Resource);\n      sinon.stub(resource, 'displayName').value('RESOURCE_DISPLAY_NAME');\n      resourceForURLStub.returns(resource);\n\n      assert.strictEqual(displayNameForURL(urlString`${INSPECTED_URL}${QUERY_STRING}`), 'RESOURCE_DISPLAY_NAME');\n    });\n\n    it('returns path relative to the last main URL component if it matches and does not have query string', () => {\n      assert.strictEqual(\n          displayNameForURL(urlString`${INSPECTED_URL}${QUERY_STRING}`),\n          `${INSPECTED_URL_PATH_COMPONENTS.slice(-1)[0]}${QUERY_STRING}`);\n      assert.strictEqual(\n          displayNameForURL(urlString`${INSPECTED_URL}${OTHER_PATH}`),\n          `${INSPECTED_URL_PATH_COMPONENTS.slice(-1)[0] + OTHER_PATH}`);\n    });\n\n    it('returns path relative to the main URL domain if it matches and does have query string', () => {\n      target.setInspectedURL(urlString`${INSPECTED_URL}${QUERY_STRING}`);\n      assert.strictEqual(\n          displayNameForURL(urlString`${INSPECTED_URL}${QUERY_STRING}`), `${INSPECTED_URL_PATH}${QUERY_STRING}`);\n      assert.strictEqual(\n          displayNameForURL(urlString`${INSPECTED_URL}${OTHER_PATH}`), `${INSPECTED_URL_PATH}${OTHER_PATH}`);\n    });\n\n    it('returns path relative to the main URL domain if only domain matches', () => {\n      assert.strictEqual(\n          displayNameForURL(urlString`${INSPECTED_URL_SCHEME + INSPECTED_URL_DOMAIN + OTHER_PATH}`), `${OTHER_PATH}`);\n    });\n\n    it('returns path relative to the main URL domain if path partially matches', () => {\n      assert.strictEqual(\n          displayNameForURL(\n              urlString`${INSPECTED_URL_SCHEME + INSPECTED_URL_DOMAIN + '/' + INSPECTED_URL_PATH_COMPONENTS[1] + '/'}`),\n          `${'/' + INSPECTED_URL_PATH_COMPONENTS[1] + '/'}`);\n    });\n\n    it('returns main URL domain if it matches and the path is empty', () => {\n      assert.strictEqual(\n          displayNameForURL(urlString`${INSPECTED_URL_SCHEME + INSPECTED_URL_DOMAIN + '/'}`),\n          `${INSPECTED_URL_DOMAIN + '/'}`);\n    });\n\n    it('strips scheme if domain does not match main URL', () => {\n      assert.strictEqual(\n          displayNameForURL(urlString`${INSPECTED_URL_SCHEME + OTHER_DOMAIN + OTHER_PATH}`),\n          `${OTHER_DOMAIN + OTHER_PATH}`);\n    });\n\n    it('returns URL as is if it cannot be parsed', () => {\n      assert.strictEqual(displayNameForURL(INVALID_URL), INVALID_URL);\n    });\n  });\n});\n"]}