{"version":3,"file":"ResourceUtils.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/bindings/ResourceUtils.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nimport * as Bindings from './bindings.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\ndescribeWithMockConnection('ResourceUtils', () => {\n  const INSPECTED_URL_SCHEME = 'http://';\n  const INSPECTED_URL_DOMAIN = 'example.com';\n  const OTHER_DOMAIN = 'example.org';\n  const INSPECTED_URL_PATH_COMPONENTS = ['', 'foo', 'bar'] as Platform.DevToolsPath.UrlString[];\n  const INSPECTED_URL_PATH = urlString`${INSPECTED_URL_PATH_COMPONENTS.join('/')}`;\n  const INSPECTED_URL = urlString`${INSPECTED_URL_SCHEME + INSPECTED_URL_DOMAIN + INSPECTED_URL_PATH}`;\n\n  const RESOURCE_URL = urlString`${INSPECTED_URL + '?RESOURCE_URL'}`;\n  const RESOURCE = {displayName: 'RESOURCE_DISPLAY_NAME'} as SDK.Resource.Resource;\n  const UI_SOURCE_CODE_URL = urlString`${INSPECTED_URL + '?UI_SOURCE_CODE_URL'}`;\n  const UI_SOURCE_CODE = {displayName: () => 'UI_SOURCE_CODE_DISPLAY_NAME'} as Workspace.UISourceCode.UISourceCode;\n  const QUERY_STRING = '?QUERY_STRING';\n  const OTHER_PATH = '/OTHER/PATH';\n  const INVALID_URL = urlString`:~INVALID_URL~:`;\n  let target: SDK.Target.Target;\n\n  beforeEach(() => {\n    const tabTarget = createTarget({type: SDK.Target.Type.TAB});\n    createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n    target = createTarget({parentTarget: tabTarget});\n    target.setInspectedURL(INSPECTED_URL);\n    sinon.stub(SDK.ResourceTreeModel.ResourceTreeModel, 'resourceForURL')\n        .returns(null)\n        .withArgs(RESOURCE_URL)\n        .returns(RESOURCE);\n\n    const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n    sinon.stub(workspace, 'uiSourceCodeForURL')\n        .returns(null)\n        .withArgs(RESOURCE_URL)\n        .returns(UI_SOURCE_CODE)\n        .withArgs(UI_SOURCE_CODE_URL)\n        .returns(UI_SOURCE_CODE);\n  });\n\n  it('returns a resource name if available', async () => {\n    assert.strictEqual(Bindings.ResourceUtils.displayNameForURL(RESOURCE_URL), RESOURCE.displayName);\n  });\n\n  it('returns a resource name if available', async () => {\n    assert.strictEqual(Bindings.ResourceUtils.displayNameForURL(UI_SOURCE_CODE_URL), UI_SOURCE_CODE.displayName());\n  });\n\n  it('returns path relative to the last main URL component if it matches and does not have query string', async () => {\n    assert.strictEqual(\n        Bindings.ResourceUtils.displayNameForURL(urlString`${INSPECTED_URL + QUERY_STRING}`),\n        urlString`${INSPECTED_URL_PATH_COMPONENTS.slice(-1)[0] + QUERY_STRING}`);\n    assert.strictEqual(\n        Bindings.ResourceUtils.displayNameForURL(urlString`${INSPECTED_URL + OTHER_PATH}`),\n        urlString`${INSPECTED_URL_PATH_COMPONENTS.slice(-1)[0] + OTHER_PATH}`);\n  });\n\n  it('returns path relative to the main URL domain if it matches and does have query string', async () => {\n    target.setInspectedURL(urlString`${INSPECTED_URL + QUERY_STRING}`);\n    assert.strictEqual(\n        Bindings.ResourceUtils.displayNameForURL(urlString`${INSPECTED_URL + QUERY_STRING}`),\n        urlString`${INSPECTED_URL_PATH + QUERY_STRING}`);\n    assert.strictEqual(\n        Bindings.ResourceUtils.displayNameForURL(urlString`${INSPECTED_URL + OTHER_PATH}`),\n        urlString`${INSPECTED_URL_PATH + OTHER_PATH}`);\n  });\n\n  it('returns path relative to the main URL domain if only domain matches', async () => {\n    assert.strictEqual(\n        Bindings.ResourceUtils.displayNameForURL(\n            urlString`${INSPECTED_URL_SCHEME + INSPECTED_URL_DOMAIN + OTHER_PATH}`),\n        urlString`${OTHER_PATH}`);\n  });\n\n  it('returns path relative to the main URL domain if path partially matches', async () => {\n    assert.strictEqual(\n        Bindings.ResourceUtils.displayNameForURL(\n            urlString`${INSPECTED_URL_SCHEME + INSPECTED_URL_DOMAIN + '/' + INSPECTED_URL_PATH_COMPONENTS[1] + '/'}`),\n        urlString`${'/' + INSPECTED_URL_PATH_COMPONENTS[1] + '/'}`);\n  });\n\n  it('returns main URL domain if it matches and the path is empty', async () => {\n    assert.strictEqual(\n        Bindings.ResourceUtils.displayNameForURL(urlString`${INSPECTED_URL_SCHEME + INSPECTED_URL_DOMAIN + '/'}`),\n        urlString`${INSPECTED_URL_DOMAIN + '/'}`);\n  });\n\n  it('strips scheme if domain does not match main URL', async () => {\n    assert.strictEqual(\n        Bindings.ResourceUtils.displayNameForURL(urlString`${INSPECTED_URL_SCHEME + OTHER_DOMAIN + OTHER_PATH}`),\n        urlString`${OTHER_DOMAIN + OTHER_PATH}`);\n  });\n\n  it('returns URL as is if it cannot be parsed', async () => {\n    assert.strictEqual(Bindings.ResourceUtils.displayNameForURL(INVALID_URL), INVALID_URL);\n  });\n});\n"]}