{"version":3,"file":"TimelineModelFilter.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/timeline_model/TimelineModelFilter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as TraceEngine from '../trace/trace.js';\nimport * as TimelineModel from '../timeline_model/timeline_model.js';\nimport {\n  DevToolsTimelineCategory,\n  makeFakeSDKEventFromPayload,\n} from '../../testing/TraceHelpers.js';\n\nconst consoleEvent = makeFakeSDKEventFromPayload({\n  categories: [DevToolsTimelineCategory, TimelineModel.TimelineModel.TimelineModelImpl.Category.Console],\n  name: TimelineModel.TimelineModel.RecordType.ConsoleTime,\n  ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n  ts: 1,\n});\n\nconst userTimingEvent = makeFakeSDKEventFromPayload({\n  categories: [DevToolsTimelineCategory, TimelineModel.TimelineModel.TimelineModelImpl.Category.UserTiming],\n  name: TimelineModel.TimelineModel.RecordType.UserTiming,\n  ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n  ts: 1,\n});\n\ndescribe('TimelineModelFilter', () => {\n  describe('TimelineVisibleEventsFilter', () => {\n    it('accepts events that are set in the constructor and rejects other events', () => {\n      const visibleFilter = new TimelineModel.TimelineModelFilter.TimelineVisibleEventsFilter([\n        // Set an random record type to be visible - the exact type is not important for the test.\n        TimelineModel.TimelineModel.RecordType.ConsoleTime,\n      ]);\n\n      assert.isTrue(visibleFilter.accept(consoleEvent));\n    });\n\n    describe('eventType', () => {\n      it('returns ConsoleTime if the event has the Console category', () => {\n        assert.strictEqual(\n            TimelineModel.TimelineModelFilter.TimelineVisibleEventsFilter.eventType(consoleEvent),\n            TimelineModel.TimelineModel.RecordType.ConsoleTime);\n      });\n\n      it('returns UserTiming if the event has the UserTiming category', () => {\n        assert.strictEqual(\n            TimelineModel.TimelineModelFilter.TimelineVisibleEventsFilter.eventType(userTimingEvent),\n            TimelineModel.TimelineModel.RecordType.UserTiming);\n      });\n\n      it('returns the event name if the event is any other category', () => {\n        const otherEvent = makeFakeSDKEventFromPayload({\n          categories: [DevToolsTimelineCategory, TimelineModel.TimelineModel.TimelineModelImpl.Category.Loading],\n          name: 'other',\n          ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n          ts: 1,\n        });\n        assert.strictEqual(\n            TimelineModel.TimelineModelFilter.TimelineVisibleEventsFilter.eventType(otherEvent), 'other');\n      });\n    });\n  });\n\n  describe('TimelineInvisibleEventsFilter', () => {\n    it('does not accept events that have been set as invisible', () => {\n      const invisibleFilter = new TimelineModel.TimelineModelFilter.TimelineInvisibleEventsFilter([\n        // Set an random record type to be invisible - the exact type is not important for the test.\n        TimelineModel.TimelineModel.RecordType.ConsoleTime,\n      ]);\n      assert.isFalse(invisibleFilter.accept(consoleEvent));\n    });\n    it('accepts events that have not been set as invisible', () => {\n      const invisibleFilter = new TimelineModel.TimelineModelFilter.TimelineInvisibleEventsFilter([\n        // Set an random record type to be invisible - the exact type is not important for the test.\n        TimelineModel.TimelineModel.RecordType.ConsoleTime,\n      ]);\n      assert.isTrue(invisibleFilter.accept(userTimingEvent));\n    });\n  });\n\n  describe('ExclusiveNameFilter', () => {\n    function makeEventWithName(name: string): TraceEngine.Legacy.Event {\n      return makeFakeSDKEventFromPayload({\n        categories: [DevToolsTimelineCategory],\n        name,\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n        ts: 1,\n      });\n    }\n    it('accepts events that do not match the provided set of names to exclude', () => {\n      const filter = new TimelineModel.TimelineModelFilter.ExclusiveNameFilter(['exclude-name']);\n      const event = makeEventWithName('some-event');\n      assert.isTrue(filter.accept(event));\n    });\n    it('rejects events that match the provided set of names to exclude', () => {\n      const filter = new TimelineModel.TimelineModelFilter.ExclusiveNameFilter(['exclude-name']);\n      const event = makeEventWithName('exclude-name');\n      assert.isFalse(filter.accept(event));\n    });\n  });\n});\n"]}