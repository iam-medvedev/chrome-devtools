{"version":3,"file":"TimelineModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/timeline_model/TimelineModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\nimport * as TimelineModel from '../timeline_model/timeline_model.js';\nimport * as TraceEngine from '../trace/trace.js';\n\ndescribeWithEnvironment('TimelineData', function() {\n  function getAllTracingModelPayloadEvents(tracingModel: TraceEngine.Legacy.TracingModel):\n      TraceEngine.Legacy.PayloadEvent[] {\n    const allSDKEvents = tracingModel.sortedProcesses().flatMap(process => {\n      return process.sortedThreads().flatMap(thread => thread.events().filter(TraceEngine.Legacy.eventHasPayload));\n    });\n    allSDKEvents.sort((eventA, eventB) => {\n      if (eventA.startTime > eventB.startTime) {\n        return 1;\n      }\n      if (eventB.startTime > eventA.startTime) {\n        return -1;\n      }\n      return 0;\n    });\n    return allSDKEvents;\n  }\n\n  it('stores data for an SDK.TracingModel.PayloadEvent using the raw payload as the key', async function() {\n    const data = await TraceLoader.allModels(this, 'web-dev.json.gz');\n    const allSDKEvents = getAllTracingModelPayloadEvents(data.tracingModel);\n    // The exact event we use is not important, so let's use the first LCP event.\n    const lcpSDKEvent =\n        allSDKEvents.find(event => event.name === TimelineModel.TimelineModel.RecordType.MarkLCPCandidate);\n    if (!lcpSDKEvent) {\n      throw new Error('Could not find SDK Event.');\n    }\n\n    // Now find the same event from the new engine\n    const lcpNewEngineEvent = data.traceParsedData.PageLoadMetrics.allMarkerEvents.find(event => {\n      return TraceEngine.Types.TraceEvents.isTraceEventLargestContentfulPaintCandidate(event);\n    });\n    if (!lcpNewEngineEvent) {\n      throw new Error('Could not find LCP New engine event.');\n    }\n    // Make sure we got the matching events.\n    assert.strictEqual(lcpNewEngineEvent, lcpSDKEvent.rawPayload());\n  });\n\n  it('extracts image url for a Decode Image event', async function() {\n    const data = await TraceLoader.allModels(this, 'web-dev.json.gz');\n    const allSDKEvents = getAllTracingModelPayloadEvents(data.tracingModel);\n\n    const decodeImageEvent =\n        allSDKEvents.find(event => event.name === TraceEngine.Types.TraceEvents.KnownEventName.DecodeImage);\n    if (!decodeImageEvent) {\n      throw new Error('Could not find Decode Image event Event.');\n    }\n    const dataForEvent = TimelineModel.TimelineModel.EventOnTimelineData.forEvent(decodeImageEvent);\n    assert.isTrue(dataForEvent.url?.includes('.jpg'));\n  });\n});\n"]}