{"version":3,"file":"TimelineModelFilter.js","sourceRoot":"","sources":["../../../../../../front_end/models/timeline_model/TimelineModelFilter.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,WAAW,MAAM,6BAA6B,CAAC;AAE3D,OAAO,EAAC,UAAU,EAAE,iBAAiB,EAAC,MAAM,oBAAoB,CAAC;AAEjE,MAAM,OAAgB,mBAAmB;CAIxC;AAED,MAAM,OAAO,2BAA4B,SAAQ,mBAAmB;IACjD,YAAY,CAAc;IAC3C,YAAY,YAAsB;QAChC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,KAA8C;QACnD,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,2BAA2B,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7E,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,KAA8C;QAC7D,IAAI,WAAW,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,EAAE,iBAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YAClF,OAAO,UAAU,CAAC,WAAW,CAAC;SAC/B;QACD,IAAI,WAAW,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,EAAE,iBAAiB,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACrF,OAAO,UAAU,CAAC,UAAU,CAAC;SAC9B;QACD,IAAI,WAAW,CAAC,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;YACxG,yEAAyE;YACzE,yEAAyE;YACzE,0BAA0B;YAC1B,OAAO,UAAU,CAAC,OAAO,CAAC;SAC3B;QACD,OAAO,KAAK,CAAC,IAAkB,CAAC;IAClC,CAAC;CACF;AAED,MAAM,OAAO,6BAA8B,SAAQ,mBAAmB;IAC5D,cAAc,CAAc;IACpC,YAAY,cAAwB;QAClC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,cAAc,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,CAAC;IAChD,CAAC;IAED,MAAM,CAAC,KAA8C;QACnD,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,2BAA2B,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAChF,CAAC;CACF;AAED,MAAM,OAAO,mBAAoB,SAAQ,mBAAmB;IAClD,YAAY,CAAc;IAClC,YAAY,YAAsB;QAChC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,KAA8C;QACnD,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;CACF","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TraceEngine from '../../models/trace/trace.js';\n\nimport {RecordType, TimelineModelImpl} from './TimelineModel.js';\n\nexport abstract class TimelineModelFilter {\n  abstract accept(\n      _event: TraceEngine.Legacy.CompatibleTraceEvent,\n      traceParsedData?: TraceEngine.Handlers.Types.TraceParseData): boolean;\n}\n\nexport class TimelineVisibleEventsFilter extends TimelineModelFilter {\n  private readonly visibleTypes: Set<string>;\n  constructor(visibleTypes: string[]) {\n    super();\n    this.visibleTypes = new Set(visibleTypes);\n  }\n\n  accept(event: TraceEngine.Legacy.CompatibleTraceEvent): boolean {\n    return this.visibleTypes.has(TimelineVisibleEventsFilter.eventType(event));\n  }\n\n  static eventType(event: TraceEngine.Legacy.CompatibleTraceEvent): RecordType {\n    if (TraceEngine.Legacy.eventHasCategory(event, TimelineModelImpl.Category.Console)) {\n      return RecordType.ConsoleTime;\n    }\n    if (TraceEngine.Legacy.eventHasCategory(event, TimelineModelImpl.Category.UserTiming)) {\n      return RecordType.UserTiming;\n    }\n    if (TraceEngine.Legacy.eventIsFromNewEngine(event) && TraceEngine.Types.TraceEvents.isProfileCall(event)) {\n      // ProfileCalls from the new engine are broadly equivalent to JSFrames in\n      // the old engine, so map them as such, as we do not have a RecordType to\n      // represent ProfileCalls.\n      return RecordType.JSFrame;\n    }\n    return event.name as RecordType;\n  }\n}\n\nexport class TimelineInvisibleEventsFilter extends TimelineModelFilter {\n  private invisibleTypes: Set<string>;\n  constructor(invisibleTypes: string[]) {\n    super();\n    this.invisibleTypes = new Set(invisibleTypes);\n  }\n\n  accept(event: TraceEngine.Legacy.CompatibleTraceEvent): boolean {\n    return !this.invisibleTypes.has(TimelineVisibleEventsFilter.eventType(event));\n  }\n}\n\nexport class ExclusiveNameFilter extends TimelineModelFilter {\n  private excludeNames: Set<string>;\n  constructor(excludeNames: string[]) {\n    super();\n    this.excludeNames = new Set(excludeNames);\n  }\n\n  accept(event: TraceEngine.Legacy.CompatibleTraceEvent): boolean {\n    return !this.excludeNames.has(event.name);\n  }\n}\n"]}