{"version":3,"file":"TimelineModelFilter.js","sourceRoot":"","sources":["../../../../../../front_end/models/timeline_model/TimelineModelFilter.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,KAAK,MAAM,6BAA6B,CAAC;AAErD,MAAM,OAAgB,mBAAmB;CAExC;AAED,MAAM,OAAO,2BAA4B,SAAQ,mBAAmB;IACjD,YAAY,CAAc;IAC3C,YAAY,YAAsB;QAChC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,KAA+B;QACpC,IAAI,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,yBAAyB,CAAC,KAAK,CAAC,EAAE,CAAC;YAC5D,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,2BAA2B,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7E,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,KAA+B;QAC9C,sEAAsE;QACtE,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC;YACxC,gEAA4C;QAC9C,CAAC;QACD,sEAAsE;QACtE,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,mBAAmB,CAAC,EAAE,CAAC;YAC5C,8DAA2C;QAC7C,CAAC;QACD,OAAO,KAAK,CAAC,IAA+B,CAAC;IAC/C,CAAC;CACF;AAED,MAAM,OAAO,6BAA8B,SAAQ,mBAAmB;IACpE,eAAe,CAA+B;IAE9C,YAAY,cAAyC;QACnD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,CAAC;IACjD,CAAC;IAED,MAAM,CAAC,KAA+B;QACpC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,2BAA2B,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACjF,CAAC;CACF;AAED,MAAM,OAAO,mBAAoB,SAAQ,mBAAmB;IAC1D,aAAa,CAA+B;IAC5C,YAAY,YAAuC;QACjD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;IAC7C,CAAC;IAED,MAAM,CAAC,KAA+B;QACpC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,IAA+B,CAAC,CAAC;IACxE,CAAC;CACF","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../models/trace/trace.js';\n\nexport abstract class TimelineModelFilter {\n  abstract accept(_event: Trace.Types.Events.Event, parsedTrace?: Trace.Handlers.Types.ParsedTrace): boolean;\n}\n\nexport class TimelineVisibleEventsFilter extends TimelineModelFilter {\n  private readonly visibleTypes: Set<string>;\n  constructor(visibleTypes: string[]) {\n    super();\n    this.visibleTypes = new Set(visibleTypes);\n  }\n\n  accept(event: Trace.Types.Events.Event): boolean {\n    if (Trace.Types.Extensions.isSyntheticExtensionEntry(event)) {\n      return true;\n    }\n    return this.visibleTypes.has(TimelineVisibleEventsFilter.eventType(event));\n  }\n\n  static eventType(event: Trace.Types.Events.Event): Trace.Types.Events.Name {\n    // Any blink.console category events are treated as ConsoleTime events\n    if (event.cat.includes('blink.console')) {\n      return Trace.Types.Events.Name.CONSOLE_TIME;\n    }\n    // Any blink.user_timing egory events are treated as UserTiming events\n    if (event.cat.includes('blink.user_timing')) {\n      return Trace.Types.Events.Name.USER_TIMING;\n    }\n    return event.name as Trace.Types.Events.Name;\n  }\n}\n\nexport class TimelineInvisibleEventsFilter extends TimelineModelFilter {\n  #invisibleTypes: Set<Trace.Types.Events.Name>;\n\n  constructor(invisibleTypes: Trace.Types.Events.Name[]) {\n    super();\n    this.#invisibleTypes = new Set(invisibleTypes);\n  }\n\n  accept(event: Trace.Types.Events.Event): boolean {\n    return !this.#invisibleTypes.has(TimelineVisibleEventsFilter.eventType(event));\n  }\n}\n\nexport class ExclusiveNameFilter extends TimelineModelFilter {\n  #excludeNames: Set<Trace.Types.Events.Name>;\n  constructor(excludeNames: Trace.Types.Events.Name[]) {\n    super();\n    this.#excludeNames = new Set(excludeNames);\n  }\n\n  accept(event: Trace.Types.Events.Event): boolean {\n    return !this.#excludeNames.has(event.name as Trace.Types.Events.Name);\n  }\n}\n"]}