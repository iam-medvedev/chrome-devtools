{
  "version": 3,
  "sources": ["../../../../../../front_end/models/workspace/FileManager.ts", "../../../../../../front_end/models/workspace/IgnoreListManager.ts", "../../../../../../front_end/models/workspace/WorkspaceImpl.ts", "../../../../../../front_end/models/workspace/UISourceCode.ts", "../../../../../../front_end/models/workspace/SearchConfig.ts"],
  "sourcesContent": ["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as TextUtils from '../text_utils/text_utils.js';\n\nlet fileManagerInstance: FileManager|null;\n\nexport interface SaveCallbackParam {\n  fileSystemPath?: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString;\n}\n\nexport class FileManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #saveCallbacks = new Map<\n      Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString, (arg0: SaveCallbackParam|null) => void>();\n  private constructor() {\n    super();\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.SavedURL, this.savedURL, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.CanceledSaveURL, this.#canceledSavedURL, this);\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.addEventListener(\n        Host.InspectorFrontendHostAPI.Events.AppendedToURL, this.appendedToURL, this);\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): FileManager {\n    const {forceNew} = opts;\n    if (!fileManagerInstance || forceNew) {\n      fileManagerInstance = new FileManager();\n    }\n\n    return fileManagerInstance;\n  }\n\n  /**\n   * {@link FileManager.close | close} *must* be called, for the InspectorFrontendHostStub case, to complete the saving.\n   * @param url The url of the file to save. **NOTE:** The backend truncates this filename to 64 characters.\n   */\n  save(\n      url: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString,\n      contentData: TextUtils.ContentData.ContentData,\n      forceSaveAs: boolean,\n      ): Promise<SaveCallbackParam|null> {\n    // Remove this url from the saved URLs while it is being saved.\n    const result = new Promise<SaveCallbackParam|null>(resolve => this.#saveCallbacks.set(url, resolve));\n    const {isTextContent} = contentData;\n    const content = isTextContent ? contentData.text : contentData.base64;\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.save(url, content, forceSaveAs, !isTextContent);\n    return result;\n  }\n\n  /**\n   * Used in web tests\n   */\n  private savedURL(event: Common.EventTarget.EventTargetEvent<Host.InspectorFrontendHostAPI.SavedURLEvent>): void {\n    const {url, fileSystemPath} = event.data;\n    const callback = this.#saveCallbacks.get(url);\n    this.#saveCallbacks.delete(url);\n    if (callback) {\n      callback({fileSystemPath});\n    }\n  }\n\n  #canceledSavedURL({data: url}: Common.EventTarget.EventTargetEvent<Platform.DevToolsPath.UrlString>): void {\n    const callback = this.#saveCallbacks.get(url);\n    this.#saveCallbacks.delete(url);\n    if (callback) {\n      callback(null);\n    }\n  }\n\n  append(url: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString, content: string): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.append(url, content);\n  }\n\n  close(url: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.UrlString): void {\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.close(url);\n  }\n\n  /**\n   * Used in web tests\n   */\n  private appendedToURL({data: url}: Common.EventTarget.EventTargetEvent<string>): void {\n    this.dispatchEventToListeners(Events.APPENDED_TO_URL, url);\n  }\n}\n\nexport const enum Events {\n  APPENDED_TO_URL = 'AppendedToURL',\n}\n\nexport interface EventTypes {\n  [Events.APPENDED_TO_URL]: string;\n}\n", "// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nimport type {UISourceCode} from './UISourceCode.js';\nimport {projectTypes} from './WorkspaceImpl.js';\n\nconst UIStrings = {\n  /**\n   * @description Text to stop preventing the debugger from stepping into library code\n   */\n  removeFromIgnoreList: 'Remove from ignore list',\n  /**\n   * @description Text for scripts that should not be stepped into when debugging\n   */\n  addScriptToIgnoreList: 'Add script to ignore list',\n  /**\n   * @description Text for directories whose scripts should not be stepped into when debugging\n   */\n  addDirectoryToIgnoreList: 'Add directory to ignore list',\n  /**\n   * @description A context menu item in the Call Stack Sidebar Pane of the Sources panel\n   */\n  addAllContentScriptsToIgnoreList: 'Add all extension scripts to ignore list',\n  /**\n   * @description A context menu item in the Call Stack Sidebar Pane of the Sources panel\n   */\n  addAllThirdPartyScriptsToIgnoreList: 'Add all third-party scripts to ignore list',\n  /**\n   * @description A context menu item in the Call Stack Sidebar Pane of the Sources panel\n   */\n  addAllAnonymousScriptsToIgnoreList: 'Add all anonymous scripts to ignore list',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/workspace/IgnoreListManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet ignoreListManagerInstance: IgnoreListManager|undefined;\n\nexport interface IgnoreListGeneralRules {\n  isContentScript?: boolean;\n  isKnownThirdParty?: boolean;\n  isCurrentlyIgnoreListed?: boolean;\n}\n\nexport class IgnoreListManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDK.TargetManager.SDKModelObserver<SDK.DebuggerModel.DebuggerModel> {\n  readonly #listeners: Set<() => void>;\n  readonly #isIgnoreListedURLCache: Map<string, boolean>;\n  readonly #contentScriptExecutionContexts: Set<string>;\n\n  private constructor() {\n    super();\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.GlobalObjectCleared,\n        this.clearCacheIfNeeded.bind(this), this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextCreated, this.onExecutionContextCreated,\n        this, {scoped: true});\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextDestroyed,\n        this.onExecutionContextDestroyed, this, {scoped: true});\n    Common.Settings.Settings.instance()\n        .moduleSetting('skip-stack-frames-pattern')\n        .addChangeListener(this.patternChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('skip-content-scripts')\n        .addChangeListener(this.patternChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('automatically-ignore-list-known-third-party-scripts')\n        .addChangeListener(this.patternChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('enable-ignore-listing')\n        .addChangeListener(this.patternChanged.bind(this));\n    Common.Settings.Settings.instance()\n        .moduleSetting('skip-anonymous-scripts')\n        .addChangeListener(this.patternChanged.bind(this));\n\n    this.#listeners = new Set();\n    this.#isIgnoreListedURLCache = new Map();\n    this.#contentScriptExecutionContexts = new Set();\n\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.DebuggerModel.DebuggerModel, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): IgnoreListManager {\n    const {forceNew} = opts;\n    if (!ignoreListManagerInstance || forceNew) {\n      ignoreListManagerInstance = new IgnoreListManager();\n    }\n\n    return ignoreListManagerInstance;\n  }\n\n  static removeInstance(): void {\n    ignoreListManagerInstance = undefined;\n  }\n\n  addChangeListener(listener: () => void): void {\n    this.#listeners.add(listener);\n  }\n\n  removeChangeListener(listener: () => void): void {\n    this.#listeners.delete(listener);\n  }\n\n  modelAdded(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    void this.setIgnoreListPatterns(debuggerModel);\n    const sourceMapManager = debuggerModel.sourceMapManager();\n    sourceMapManager.addEventListener(SDK.SourceMapManager.Events.SourceMapAttached, this.sourceMapAttached, this);\n    sourceMapManager.addEventListener(SDK.SourceMapManager.Events.SourceMapDetached, this.sourceMapDetached, this);\n  }\n\n  modelRemoved(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    this.clearCacheIfNeeded();\n    const sourceMapManager = debuggerModel.sourceMapManager();\n    sourceMapManager.removeEventListener(SDK.SourceMapManager.Events.SourceMapAttached, this.sourceMapAttached, this);\n    sourceMapManager.removeEventListener(SDK.SourceMapManager.Events.SourceMapDetached, this.sourceMapDetached, this);\n  }\n\n  private isContentScript(executionContext: SDK.RuntimeModel.ExecutionContext): boolean {\n    return !executionContext.isDefault;\n  }\n\n  private onExecutionContextCreated(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext>):\n      void {\n    if (this.isContentScript(event.data)) {\n      this.#contentScriptExecutionContexts.add(event.data.uniqueId);\n      if (this.skipContentScripts) {\n        for (const debuggerModel of SDK.TargetManager.TargetManager.instance().models(\n                 SDK.DebuggerModel.DebuggerModel)) {\n          void this.updateIgnoredExecutionContexts(debuggerModel);\n        }\n      }\n    }\n  }\n\n  private onExecutionContextDestroyed(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext>):\n      void {\n    if (this.isContentScript(event.data)) {\n      this.#contentScriptExecutionContexts.delete(event.data.uniqueId);\n      if (this.skipContentScripts) {\n        for (const debuggerModel of SDK.TargetManager.TargetManager.instance().models(\n                 SDK.DebuggerModel.DebuggerModel)) {\n          void this.updateIgnoredExecutionContexts(debuggerModel);\n        }\n      }\n    }\n  }\n\n  private clearCacheIfNeeded(): void {\n    if (this.#isIgnoreListedURLCache.size > 1024) {\n      this.#isIgnoreListedURLCache.clear();\n    }\n  }\n\n  private getSkipStackFramesPatternSetting(): Common.Settings.RegExpSetting {\n    return Common.Settings.Settings.instance().moduleSetting('skip-stack-frames-pattern') as\n        Common.Settings.RegExpSetting;\n  }\n\n  private setIgnoreListPatterns(debuggerModel: SDK.DebuggerModel.DebuggerModel): Promise<boolean> {\n    const regexPatterns = this.enableIgnoreListing ? this.getSkipStackFramesPatternSetting().getAsArray() : [];\n    const patterns = ([] as string[]);\n    for (const item of regexPatterns) {\n      if (!item.disabled && item.pattern) {\n        patterns.push(item.pattern);\n      }\n    }\n    return debuggerModel.setBlackboxPatterns(patterns, this.skipAnonymousScripts);\n  }\n\n  private updateIgnoredExecutionContexts(debuggerModel: SDK.DebuggerModel.DebuggerModel): Promise<boolean> {\n    return debuggerModel.setBlackboxExecutionContexts(\n        this.skipContentScripts ? Array.from(this.#contentScriptExecutionContexts) : []);\n  }\n\n  private getGeneralRulesForUISourceCode(uiSourceCode: UISourceCode): IgnoreListGeneralRules {\n    const projectType = uiSourceCode.project().type();\n    const isContentScript = projectType === projectTypes.ContentScripts;\n    const isKnownThirdParty = uiSourceCode.isKnownThirdParty();\n    return {isContentScript, isKnownThirdParty};\n  }\n\n  isUserOrSourceMapIgnoreListedUISourceCode(uiSourceCode: UISourceCode): boolean {\n    if (uiSourceCode.isUnconditionallyIgnoreListed()) {\n      return true;\n    }\n    const url = this.uiSourceCodeURL(uiSourceCode);\n    return this.isUserIgnoreListedURL(url, this.getGeneralRulesForUISourceCode(uiSourceCode));\n  }\n\n  isUserIgnoreListedURL(url: Platform.DevToolsPath.UrlString|null, options?: IgnoreListGeneralRules): boolean {\n    if (!this.enableIgnoreListing) {\n      return false;\n    }\n    if (options?.isContentScript && this.skipContentScripts) {\n      return true;\n    }\n    if (options?.isKnownThirdParty && this.automaticallyIgnoreListKnownThirdPartyScripts) {\n      return true;\n    }\n    if (!url) {\n      return this.skipAnonymousScripts;\n    }\n    if (this.#isIgnoreListedURLCache.has(url)) {\n      return Boolean(this.#isIgnoreListedURLCache.get(url));\n    }\n\n    const isIgnoreListed = this.getFirstMatchedRegex(url) !== null;\n    this.#isIgnoreListedURLCache.set(url, isIgnoreListed);\n    return isIgnoreListed;\n  }\n\n  getFirstMatchedRegex(url: Platform.DevToolsPath.UrlString): RegExp|null {\n    if (!url) {\n      return null;\n    }\n    const regexPatterns = this.getSkipStackFramesPatternSetting().getAsArray();\n    const regexValue = this.urlToRegExpString(url);\n    if (!regexValue) {\n      return null;\n    }\n\n    for (let i = 0; i < regexPatterns.length; ++i) {\n      const item = regexPatterns[i];\n      if (item.disabled || item.disabledForUrl === url) {\n        continue;\n      }\n      const regex = new RegExp(item.pattern);\n      if (regex.test(url)) {\n        return regex;\n      }\n    }\n    return null;\n  }\n\n  private sourceMapAttached(\n      event: Common.EventTarget.EventTargetEvent<{client: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap}>):\n      void {\n    const script = event.data.client;\n    const sourceMap = event.data.sourceMap;\n    void this.updateScriptRanges(script, sourceMap);\n  }\n\n  private sourceMapDetached(\n      event: Common.EventTarget.EventTargetEvent<{client: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap}>):\n      void {\n    const script = event.data.client;\n    void this.updateScriptRanges(script, undefined);\n  }\n\n  private async updateScriptRanges(script: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap|undefined):\n      Promise<void> {\n    let hasIgnoreListedMappings = false;\n    if (!IgnoreListManager.instance().isUserIgnoreListedURL(\n            script.sourceURL, {isContentScript: script.isContentScript()})) {\n      hasIgnoreListedMappings =\n          sourceMap?.sourceURLs().some(\n              url => this.isUserIgnoreListedURL(url, {isKnownThirdParty: sourceMap.hasIgnoreListHint(url)})) ??\n          false;\n    }\n    if (!hasIgnoreListedMappings) {\n      if (scriptToRange.get(script) && await script.setBlackboxedRanges([])) {\n        scriptToRange.delete(script);\n      }\n      this.dispatchEventToListeners(Events.IGNORED_SCRIPT_RANGES_UPDATED, script);\n      return;\n    }\n\n    if (!sourceMap) {\n      return;\n    }\n\n    const newRanges =\n        sourceMap\n            .findRanges(\n                srcURL => this.isUserIgnoreListedURL(srcURL, {isKnownThirdParty: sourceMap.hasIgnoreListHint(srcURL)}),\n                {isStartMatching: true})\n            .flatMap(range => [range.start, range.end]);\n\n    const oldRanges = scriptToRange.get(script) || [];\n    if (!isEqual(oldRanges, newRanges) && await script.setBlackboxedRanges(newRanges)) {\n      scriptToRange.set(script, newRanges);\n    }\n    this.dispatchEventToListeners(Events.IGNORED_SCRIPT_RANGES_UPDATED, script);\n\n    function isEqual(rangesA: SourceRange[], rangesB: SourceRange[]): boolean {\n      if (rangesA.length !== rangesB.length) {\n        return false;\n      }\n      for (let i = 0; i < rangesA.length; ++i) {\n        if (rangesA[i].lineNumber !== rangesB[i].lineNumber || rangesA[i].columnNumber !== rangesB[i].columnNumber) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  private uiSourceCodeURL(uiSourceCode: UISourceCode): Platform.DevToolsPath.UrlString|null {\n    return uiSourceCode.project().type() === projectTypes.Debugger ? null : uiSourceCode.url();\n  }\n\n  canIgnoreListUISourceCode(uiSourceCode: UISourceCode): boolean {\n    const url = this.uiSourceCodeURL(uiSourceCode);\n    return url ? Boolean(this.urlToRegExpString(url)) : false;\n  }\n\n  ignoreListUISourceCode(uiSourceCode: UISourceCode): void {\n    const url = this.uiSourceCodeURL(uiSourceCode);\n    if (url) {\n      this.ignoreListURL(url);\n    }\n  }\n\n  unIgnoreListUISourceCode(uiSourceCode: UISourceCode): void {\n    this.unIgnoreListURL(this.uiSourceCodeURL(uiSourceCode), this.getGeneralRulesForUISourceCode(uiSourceCode));\n  }\n\n  get enableIgnoreListing(): boolean {\n    return Common.Settings.Settings.instance().moduleSetting('enable-ignore-listing').get();\n  }\n\n  set enableIgnoreListing(value: boolean) {\n    Common.Settings.Settings.instance().moduleSetting('enable-ignore-listing').set(value);\n  }\n\n  get skipContentScripts(): boolean {\n    return this.enableIgnoreListing && Common.Settings.Settings.instance().moduleSetting('skip-content-scripts').get();\n  }\n\n  get skipAnonymousScripts(): boolean {\n    return this.enableIgnoreListing &&\n        Common.Settings.Settings.instance().moduleSetting('skip-anonymous-scripts').get();\n  }\n\n  get automaticallyIgnoreListKnownThirdPartyScripts(): boolean {\n    return this.enableIgnoreListing &&\n        Common.Settings.Settings.instance().moduleSetting('automatically-ignore-list-known-third-party-scripts').get();\n  }\n\n  ignoreListContentScripts(): void {\n    if (!this.enableIgnoreListing) {\n      this.enableIgnoreListing = true;\n    }\n    Common.Settings.Settings.instance().moduleSetting('skip-content-scripts').set(true);\n  }\n\n  unIgnoreListContentScripts(): void {\n    Common.Settings.Settings.instance().moduleSetting('skip-content-scripts').set(false);\n  }\n\n  ignoreListAnonymousScripts(): void {\n    if (!this.enableIgnoreListing) {\n      this.enableIgnoreListing = true;\n    }\n    Common.Settings.Settings.instance().moduleSetting('skip-anonymous-scripts').set(true);\n  }\n\n  unIgnoreListAnonymousScripts(): void {\n    Common.Settings.Settings.instance().moduleSetting('skip-anonymous-scripts').set(false);\n  }\n\n  ignoreListThirdParty(): void {\n    if (!this.enableIgnoreListing) {\n      this.enableIgnoreListing = true;\n    }\n    Common.Settings.Settings.instance().moduleSetting('automatically-ignore-list-known-third-party-scripts').set(true);\n  }\n\n  unIgnoreListThirdParty(): void {\n    Common.Settings.Settings.instance().moduleSetting('automatically-ignore-list-known-third-party-scripts').set(false);\n  }\n\n  ignoreListURL(url: Platform.DevToolsPath.UrlString): void {\n    const regexValue = this.urlToRegExpString(url);\n    if (!regexValue) {\n      return;\n    }\n    this.addRegexToIgnoreList(regexValue, url);\n  }\n\n  addRegexToIgnoreList(regexValue: string, disabledForUrl?: Platform.DevToolsPath.UrlString): void {\n    const regexPatterns = this.getSkipStackFramesPatternSetting().getAsArray();\n\n    let found = false;\n    for (let i = 0; i < regexPatterns.length; ++i) {\n      const item = regexPatterns[i];\n      if (item.pattern === regexValue || (disabledForUrl && item.disabledForUrl === disabledForUrl)) {\n        item.disabled = false;\n        item.disabledForUrl = undefined;\n        found = true;\n      }\n    }\n    if (!found) {\n      regexPatterns.push({pattern: regexValue, disabled: false});\n    }\n    if (!this.enableIgnoreListing) {\n      this.enableIgnoreListing = true;\n    }\n    this.getSkipStackFramesPatternSetting().setAsArray(regexPatterns);\n  }\n\n  unIgnoreListURL(url: Platform.DevToolsPath.UrlString|null, options?: IgnoreListGeneralRules): void {\n    if (options?.isContentScript) {\n      this.unIgnoreListContentScripts();\n    }\n\n    if (options?.isKnownThirdParty) {\n      this.unIgnoreListThirdParty();\n    }\n\n    if (!url) {\n      this.unIgnoreListAnonymousScripts();\n      return;\n    }\n\n    let regexPatterns = this.getSkipStackFramesPatternSetting().getAsArray();\n    const regexValue = IgnoreListManager.instance().urlToRegExpString(url);\n    if (!regexValue) {\n      return;\n    }\n\n    regexPatterns = regexPatterns.filter(function(item) {\n      return item.pattern !== regexValue;\n    });\n    for (let i = 0; i < regexPatterns.length; ++i) {\n      const item = regexPatterns[i];\n      if (item.disabled) {\n        continue;\n      }\n      try {\n        const regex = new RegExp(item.pattern);\n        if (regex.test(url)) {\n          item.disabled = true;\n          item.disabledForUrl = url;\n        }\n      } catch {\n      }\n    }\n    this.getSkipStackFramesPatternSetting().setAsArray(regexPatterns);\n  }\n\n  private removeIgnoreListPattern(regexValue: string): void {\n    let regexPatterns = this.getSkipStackFramesPatternSetting().getAsArray();\n    regexPatterns = regexPatterns.filter(function(item) {\n      return item.pattern !== regexValue;\n    });\n    this.getSkipStackFramesPatternSetting().setAsArray(regexPatterns);\n  }\n\n  private ignoreListHasPattern(regexValue: string, enabledOnly: boolean): boolean {\n    const regexPatterns = this.getSkipStackFramesPatternSetting().getAsArray();\n    return regexPatterns.some(item => !(enabledOnly && item.disabled) && item.pattern === regexValue);\n  }\n\n  private async patternChanged(): Promise<void> {\n    this.#isIgnoreListedURLCache.clear();\n\n    const promises: Array<Promise<unknown>> = [];\n    for (const debuggerModel of SDK.TargetManager.TargetManager.instance().models(SDK.DebuggerModel.DebuggerModel)) {\n      promises.push(this.setIgnoreListPatterns(debuggerModel));\n      const sourceMapManager = debuggerModel.sourceMapManager();\n      for (const script of debuggerModel.scripts()) {\n        promises.push(this.updateScriptRanges(script, sourceMapManager.sourceMapForClient(script)));\n      }\n      promises.push(this.updateIgnoredExecutionContexts(debuggerModel));\n    }\n    await Promise.all(promises);\n    const listeners = Array.from(this.#listeners);\n    for (const listener of listeners) {\n      listener();\n    }\n    this.patternChangeFinishedForTests();\n  }\n\n  private patternChangeFinishedForTests(): void {\n    // This method is sniffed in tests.\n  }\n\n  private urlToRegExpString(url: Platform.DevToolsPath.UrlString): string {\n    const parsedURL = new Common.ParsedURL.ParsedURL(url);\n    if (parsedURL.isAboutBlank() || parsedURL.isDataURL()) {\n      return '';\n    }\n    if (!parsedURL.isValid) {\n      return '^' + Platform.StringUtilities.escapeForRegExp(url) + '$';\n    }\n    let name: string = parsedURL.lastPathComponent;\n    if (name) {\n      name = '/' + name;\n    } else if (parsedURL.folderPathComponents) {\n      name = parsedURL.folderPathComponents + '/';\n    }\n    if (!name) {\n      name = parsedURL.host;\n    }\n    if (!name) {\n      return '';\n    }\n    const scheme = parsedURL.scheme;\n    let prefix = '';\n    if (scheme && scheme !== 'http' && scheme !== 'https') {\n      prefix = '^' + scheme + '://';\n      if (scheme === 'chrome-extension') {\n        prefix += parsedURL.host + '\\\\b';\n      }\n      prefix += '.*';\n    }\n    return prefix + Platform.StringUtilities.escapeForRegExp(name) + (url.endsWith(name) ? '$' : '\\\\b');\n  }\n\n  getIgnoreListURLContextMenuItems(uiSourceCode: UISourceCode):\n      Array<{text: string, callback: () => void, jslogContext: string}> {\n    if (uiSourceCode.project().type() === projectTypes.FileSystem) {\n      return [];\n    }\n\n    const menuItems: Array<{text: string, callback: () => void, jslogContext: string}> = [];\n    const canIgnoreList = this.canIgnoreListUISourceCode(uiSourceCode);\n    const isIgnoreListed = this.isUserOrSourceMapIgnoreListedUISourceCode(uiSourceCode);\n    const isAnonymous = !this.uiSourceCodeURL(uiSourceCode);\n    const {isContentScript, isKnownThirdParty} = this.getGeneralRulesForUISourceCode(uiSourceCode);\n\n    if (isIgnoreListed) {\n      if (canIgnoreList || isContentScript || isKnownThirdParty || isAnonymous) {\n        menuItems.push({\n          text: i18nString(UIStrings.removeFromIgnoreList),\n          callback: this.unIgnoreListUISourceCode.bind(this, uiSourceCode),\n          jslogContext: 'remove-script-from-ignorelist',\n        });\n      }\n    } else {\n      if (canIgnoreList) {\n        menuItems.push({\n          text: i18nString(UIStrings.addScriptToIgnoreList),\n          callback: this.ignoreListUISourceCode.bind(this, uiSourceCode),\n          jslogContext: 'add-script-to-ignorelist',\n        });\n      } else if (isAnonymous) {\n        menuItems.push({\n          text: i18nString(UIStrings.addAllAnonymousScriptsToIgnoreList),\n          callback: this.ignoreListAnonymousScripts.bind(this),\n          jslogContext: 'add-anonymous-scripts-to-ignorelist',\n        });\n      }\n      menuItems.push(...this.getIgnoreListGeneralContextMenuItems({isContentScript, isKnownThirdParty}));\n    }\n\n    return menuItems;\n  }\n\n  private getIgnoreListGeneralContextMenuItems(options?: IgnoreListGeneralRules):\n      Array<{text: string, callback: () => void, jslogContext: string}> {\n    const menuItems: Array<{text: string, callback: () => void, jslogContext: string}> = [];\n    if (options?.isContentScript) {\n      menuItems.push({\n        text: i18nString(UIStrings.addAllContentScriptsToIgnoreList),\n        callback: this.ignoreListContentScripts.bind(this),\n        jslogContext: 'add-content-scripts-to-ignorelist',\n      });\n    }\n    if (options?.isKnownThirdParty) {\n      menuItems.push({\n        text: i18nString(UIStrings.addAllThirdPartyScriptsToIgnoreList),\n        callback: this.ignoreListThirdParty.bind(this),\n        jslogContext: 'add-3p-scripts-to-ignorelist',\n      });\n    }\n    return menuItems;\n  }\n\n  getIgnoreListFolderContextMenuItems(url: Platform.DevToolsPath.UrlString, options?: IgnoreListGeneralRules):\n      Array<{text: string, callback: () => void, jslogContext: string}> {\n    const menuItems: Array<{text: string, callback: () => void, jslogContext: string}> = [];\n\n    const regexValue = '^' + Platform.StringUtilities.escapeForRegExp(url) + '/';\n    if (this.ignoreListHasPattern(regexValue, true)) {\n      menuItems.push({\n        text: i18nString(UIStrings.removeFromIgnoreList),\n        callback: this.removeIgnoreListPattern.bind(this, regexValue),\n        jslogContext: 'remove-from-ignore-list',\n      });\n    } else if (this.isUserIgnoreListedURL(url, options)) {\n      // This specific url isn't on the ignore list, but there are rules that match it.\n      menuItems.push({\n        text: i18nString(UIStrings.removeFromIgnoreList),\n        callback: this.unIgnoreListURL.bind(this, url, options),\n        jslogContext: 'remove-from-ignore-list',\n      });\n    } else if (!options?.isCurrentlyIgnoreListed) {\n      // Provide options to add to ignore list, unless folder currently displays\n      // as entirely ignored.\n      menuItems.push({\n        text: i18nString(UIStrings.addDirectoryToIgnoreList),\n        callback: this.addRegexToIgnoreList.bind(this, regexValue),\n        jslogContext: 'add-directory-to-ignore-list',\n      });\n      menuItems.push(...this.getIgnoreListGeneralContextMenuItems(options));\n    }\n\n    return menuItems;\n  }\n}\n\nexport interface SourceRange {\n  lineNumber: number;\n  columnNumber: number;\n}\n\nconst scriptToRange = new WeakMap<SDK.Script.Script, SourceRange[]>();\n\nexport const enum Events {\n  IGNORED_SCRIPT_RANGES_UPDATED = 'IGNORED_SCRIPT_RANGES_UPDATED',\n}\n\nexport interface EventTypes {\n  [Events.IGNORED_SCRIPT_RANGES_UPDATED]: SDK.Script.Script;\n}\n", "/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as TextUtils from '../text_utils/text_utils.js';\n\nimport type {SearchConfig} from './SearchConfig.js';\nimport {UISourceCode, type UISourceCodeMetadata} from './UISourceCode.js';\n\nexport interface Project {\n  workspace(): WorkspaceImpl;\n  id(): string;\n  type(): projectTypes;\n  isServiceProject(): boolean;\n  displayName(): string;\n  requestMetadata(uiSourceCode: UISourceCode): Promise<UISourceCodeMetadata|null>;\n  requestFileContent(uiSourceCode: UISourceCode): Promise<TextUtils.ContentData.ContentDataOrError>;\n  canSetFileContent(): boolean;\n  setFileContent(uiSourceCode: UISourceCode, newContent: string, isBase64: boolean): Promise<void>;\n  fullDisplayName(uiSourceCode: UISourceCode): string;\n  mimeType(uiSourceCode: UISourceCode): string;\n  canRename(): boolean;\n  rename(\n      uiSourceCode: UISourceCode, newName: Platform.DevToolsPath.RawPathString,\n      callback:\n          (arg0: boolean, arg1?: string, arg2?: Platform.DevToolsPath.UrlString,\n           arg3?: Common.ResourceType.ResourceType) => void): void;\n  excludeFolder(path: Platform.DevToolsPath.UrlString): void;\n  canExcludeFolder(path: Platform.DevToolsPath.EncodedPathString): boolean;\n  createFile(path: Platform.DevToolsPath.EncodedPathString, name: string|null, content: string, isBase64?: boolean):\n      Promise<UISourceCode|null>;\n  canCreateFile(): boolean;\n  deleteFile(uiSourceCode: UISourceCode): void;\n  deleteDirectoryRecursively(path: Platform.DevToolsPath.EncodedPathString): Promise<boolean>;\n  remove(): void;\n  removeUISourceCode(url: Platform.DevToolsPath.UrlString): void;\n  searchInFileContent(uiSourceCode: UISourceCode, query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]>;\n  findFilesMatchingSearchRequest(\n      searchConfig: SearchConfig, filesMatchingFileQuery: UISourceCode[],\n      progress: Common.Progress.Progress): Promise<Map<UISourceCode, TextUtils.ContentProvider.SearchMatch[]|null>>;\n  indexContent(progress: Common.Progress.Progress): void;\n  uiSourceCodeForURL(url: Platform.DevToolsPath.UrlString): UISourceCode|null;\n\n  /**\n   * Returns an iterator for the currently registered {@link UISourceCode}s for this project. When\n   * new {@link UISourceCode}s are added while iterating, they might show up already. When removing\n   * {@link UISourceCode}s while iterating, these will no longer show up, and will have no effect\n   * on the other entries.\n   *\n   * @returns an iterator for the sources provided by this project.\n   */\n  uiSourceCodes(): Iterable<UISourceCode>;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\nexport enum projectTypes {\n  Debugger = 'debugger',\n  Formatter = 'formatter',\n  Network = 'network',\n  FileSystem = 'filesystem',\n  ConnectableFileSystem = 'connectablefilesystem',\n  ContentScripts = 'contentscripts',\n  Service = 'service',\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\nexport abstract class ProjectStore implements Project {\n  readonly #workspace: WorkspaceImpl;\n  readonly #id: string;\n  readonly #type: projectTypes;\n  readonly #displayName: string;\n  readonly #uiSourceCodes = new Map<Platform.DevToolsPath.UrlString, UISourceCode>();\n\n  constructor(workspace: WorkspaceImpl, id: string, type: projectTypes, displayName: string) {\n    this.#workspace = workspace;\n    this.#id = id;\n    this.#type = type;\n    this.#displayName = displayName;\n  }\n\n  id(): string {\n    return this.#id;\n  }\n\n  type(): projectTypes {\n    return this.#type;\n  }\n\n  displayName(): string {\n    return this.#displayName;\n  }\n\n  workspace(): WorkspaceImpl {\n    return this.#workspace;\n  }\n\n  createUISourceCode(url: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType):\n      UISourceCode {\n    return new UISourceCode(this, url, contentType);\n  }\n\n  addUISourceCode(uiSourceCode: UISourceCode): boolean {\n    const url = uiSourceCode.url();\n    if (this.uiSourceCodeForURL(url)) {\n      return false;\n    }\n    this.#uiSourceCodes.set(url, uiSourceCode);\n    this.#workspace.dispatchEventToListeners(Events.UISourceCodeAdded, uiSourceCode);\n    return true;\n  }\n\n  removeUISourceCode(url: Platform.DevToolsPath.UrlString): void {\n    const uiSourceCode = this.#uiSourceCodes.get(url);\n    if (uiSourceCode === undefined) {\n      return;\n    }\n    this.#uiSourceCodes.delete(url);\n    this.#workspace.dispatchEventToListeners(Events.UISourceCodeRemoved, uiSourceCode);\n  }\n\n  removeProject(): void {\n    this.#workspace.removeProject(this);\n    this.#uiSourceCodes.clear();\n  }\n\n  uiSourceCodeForURL(url: Platform.DevToolsPath.UrlString): UISourceCode|null {\n    return this.#uiSourceCodes.get(url) ?? null;\n  }\n\n  uiSourceCodes(): Iterable<UISourceCode> {\n    return this.#uiSourceCodes.values();\n  }\n\n  renameUISourceCode(uiSourceCode: UISourceCode, newName: string): void {\n    const oldPath = uiSourceCode.url();\n    const newPath = uiSourceCode.parentURL() ?\n        Common.ParsedURL.ParsedURL.urlFromParentUrlAndName(uiSourceCode.parentURL(), newName) :\n        Common.ParsedURL.ParsedURL.preEncodeSpecialCharactersInPath(newName) as Platform.DevToolsPath.UrlString;\n    this.#uiSourceCodes.set(newPath, uiSourceCode);\n    this.#uiSourceCodes.delete(oldPath);\n  }\n\n  // No-op implementation for a handful of interface methods.\n\n  rename(\n      _uiSourceCode: UISourceCode, _newName: string,\n      _callback:\n          (arg0: boolean, arg1?: string, arg2?: Platform.DevToolsPath.UrlString,\n           arg3?: Common.ResourceType.ResourceType) => void): void {\n  }\n  excludeFolder(_path: Platform.DevToolsPath.UrlString): void {\n  }\n  deleteFile(_uiSourceCode: UISourceCode): void {\n  }\n  deleteDirectoryRecursively(_path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n  remove(): void {\n  }\n  indexContent(_progress: Common.Progress.Progress): void {\n  }\n\n  abstract isServiceProject(): boolean;\n  abstract requestMetadata(uiSourceCode: UISourceCode): Promise<UISourceCodeMetadata|null>;\n  abstract requestFileContent(uiSourceCode: UISourceCode): Promise<TextUtils.ContentData.ContentDataOrError>;\n  abstract canSetFileContent(): boolean;\n  abstract setFileContent(uiSourceCode: UISourceCode, newContent: string, isBase64: boolean): Promise<void>;\n  abstract fullDisplayName(uiSourceCode: UISourceCode): string;\n  abstract mimeType(uiSourceCode: UISourceCode): string;\n  abstract canRename(): boolean;\n  abstract canExcludeFolder(path: Platform.DevToolsPath.EncodedPathString): boolean;\n  abstract createFile(\n      path: Platform.DevToolsPath.EncodedPathString, name: string|null, content: string,\n      isBase64?: boolean): Promise<UISourceCode|null>;\n  abstract canCreateFile(): boolean;\n  abstract searchInFileContent(uiSourceCode: UISourceCode, query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]>;\n  abstract findFilesMatchingSearchRequest(\n      searchConfig: SearchConfig, filesMatchingFileQuery: UISourceCode[],\n      progress: Common.Progress.Progress): Promise<Map<UISourceCode, TextUtils.ContentProvider.SearchMatch[]|null>>;\n}\n\nlet workspaceInstance: WorkspaceImpl|undefined;\n\nexport class WorkspaceImpl extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #projects = new Map<string, Project>();\n  #hasResourceContentTrackingExtensions = false;\n\n  private constructor() {\n    super();\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): WorkspaceImpl {\n    const {forceNew} = opts;\n    if (!workspaceInstance || forceNew) {\n      workspaceInstance = new WorkspaceImpl();\n    }\n\n    return workspaceInstance;\n  }\n\n  static removeInstance(): void {\n    workspaceInstance = undefined;\n  }\n\n  uiSourceCode(projectId: string, url: Platform.DevToolsPath.UrlString): UISourceCode|null {\n    const project = this.#projects.get(projectId);\n    return project ? project.uiSourceCodeForURL(url) : null;\n  }\n\n  uiSourceCodeForURL(url: Platform.DevToolsPath.UrlString): UISourceCode|null {\n    for (const project of this.#projects.values()) {\n      const uiSourceCode = project.uiSourceCodeForURL(url);\n      if (uiSourceCode) {\n        return uiSourceCode;\n      }\n    }\n    return null;\n  }\n\n  findCompatibleUISourceCodes(uiSourceCode: UISourceCode): UISourceCode[] {\n    const url = uiSourceCode.url();\n    const contentType = uiSourceCode.contentType();\n    const result: UISourceCode[] = [];\n    for (const project of this.#projects.values()) {\n      if (uiSourceCode.project().type() !== project.type()) {\n        continue;\n      }\n      const candidate = project.uiSourceCodeForURL(url);\n      if (candidate && candidate.url() === url && candidate.contentType() === contentType) {\n        result.push(candidate);\n      }\n    }\n    return result;\n  }\n\n  uiSourceCodesForProjectType(type: projectTypes): UISourceCode[] {\n    const result: UISourceCode[] = [];\n    for (const project of this.#projects.values()) {\n      if (project.type() === type) {\n        for (const uiSourceCode of project.uiSourceCodes()) {\n          result.push(uiSourceCode);\n        }\n      }\n    }\n    return result;\n  }\n\n  addProject(project: Project): void {\n    console.assert(!this.#projects.has(project.id()), `A project with id ${project.id()} already exists!`);\n    this.#projects.set(project.id(), project);\n    this.dispatchEventToListeners(Events.ProjectAdded, project);\n  }\n\n  removeProject(project: Project): void {\n    this.#projects.delete(project.id());\n    this.dispatchEventToListeners(Events.ProjectRemoved, project);\n  }\n\n  project(projectId: string): Project|null {\n    return this.#projects.get(projectId) || null;\n  }\n\n  projectForFileSystemRoot(root: Platform.DevToolsPath.RawPathString): Project|null {\n    const projectId = Common.ParsedURL.ParsedURL.rawPathToUrlString(root);\n    return this.project(projectId);\n  }\n\n  projects(): Project[] {\n    return [...this.#projects.values()];\n  }\n\n  projectsForType(type: string): Project[] {\n    function filterByType(project: Project): boolean {\n      return project.type() === type;\n    }\n    return this.projects().filter(filterByType);\n  }\n\n  uiSourceCodes(): UISourceCode[] {\n    const result: UISourceCode[] = [];\n    for (const project of this.#projects.values()) {\n      for (const uiSourceCode of project.uiSourceCodes()) {\n        result.push(uiSourceCode);\n      }\n    }\n    return result;\n  }\n\n  setHasResourceContentTrackingExtensions(hasExtensions: boolean): void {\n    this.#hasResourceContentTrackingExtensions = hasExtensions;\n  }\n\n  hasResourceContentTrackingExtensions(): boolean {\n    return this.#hasResourceContentTrackingExtensions;\n  }\n}\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  UISourceCodeAdded = 'UISourceCodeAdded',\n  UISourceCodeRemoved = 'UISourceCodeRemoved',\n  UISourceCodeRenamed = 'UISourceCodeRenamed',\n  WorkingCopyChanged = 'WorkingCopyChanged',\n  WorkingCopyCommitted = 'WorkingCopyCommitted',\n  WorkingCopyCommittedByUser = 'WorkingCopyCommittedByUser',\n  ProjectAdded = 'ProjectAdded',\n  ProjectRemoved = 'ProjectRemoved',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface UISourceCodeRenamedEvent {\n  oldURL: Platform.DevToolsPath.UrlString;\n  uiSourceCode: UISourceCode;\n}\n\nexport interface WorkingCopyChangedEvent {\n  uiSourceCode: UISourceCode;\n}\n\nexport interface WorkingCopyCommittedEvent {\n  uiSourceCode: UISourceCode;\n  content: string;\n  encoded?: boolean;\n}\n\nexport interface EventTypes {\n  [Events.UISourceCodeAdded]: UISourceCode;\n  [Events.UISourceCodeRemoved]: UISourceCode;\n  [Events.UISourceCodeRenamed]: UISourceCodeRenamedEvent;\n  [Events.WorkingCopyChanged]: WorkingCopyChangedEvent;\n  [Events.WorkingCopyCommitted]: WorkingCopyCommittedEvent;\n  [Events.WorkingCopyCommittedByUser]: WorkingCopyCommittedEvent;\n  [Events.ProjectAdded]: Project;\n  [Events.ProjectRemoved]: Project;\n}\n", "/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\n\nimport {IgnoreListManager} from './IgnoreListManager.js';\nimport {Events as WorkspaceImplEvents, type Project} from './WorkspaceImpl.js';\n\nconst UIStrings = {\n  /**\n   * @description Text for the index of something\n   */\n  index: '(index)',\n  /**\n   * @description Text in UISource Code of the DevTools local workspace\n   */\n  thisFileWasChangedExternally: 'This file was changed externally. Would you like to reload it?',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/workspace/UISourceCode.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class UISourceCode extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    TextUtils.ContentProvider.ContentProvider {\n  readonly #origin: Platform.DevToolsPath.UrlString;\n  readonly #parentURL: Platform.DevToolsPath.UrlString;\n  #project: Project;\n  #url: Platform.DevToolsPath.UrlString;\n  #name: string;\n  #contentType: Common.ResourceType.ResourceType;\n  #requestContentPromise: Promise<TextUtils.ContentData.ContentDataOrError>|null = null;\n  #decorations = new Map<string, any>();\n  #hasCommits = false;\n  #messages: Set<Message>|null = null;\n  #content: TextUtils.ContentData.ContentDataOrError|null = null;\n  #forceLoadOnCheckContent = false;\n  #checkingContent = false;\n  #lastAcceptedContent: string|null = null;\n  #workingCopy: string|null = null;\n  #workingCopyGetter: (() => string)|null = null;\n  #disableEdit = false;\n  #contentEncoded: boolean|undefined;\n  #isKnownThirdParty = false;\n  #isUnconditionallyIgnoreListed = false;\n  #containsAiChanges = false;\n\n  constructor(project: Project, url: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType) {\n    super();\n    this.#project = project;\n    this.#url = url;\n\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString(url);\n    if (parsedURL) {\n      this.#origin = parsedURL.securityOrigin();\n      this.#parentURL = Common.ParsedURL.ParsedURL.concatenate(this.#origin, parsedURL.folderPathComponents);\n      if (parsedURL.queryParams && !(parsedURL.lastPathComponent && contentType.isFromSourceMap())) {\n        // If there is a query param, display it like a URL. Unless it is from a source map,\n        // in which case the query param is probably a hash that is best left hidden.\n        this.#name = parsedURL.lastPathComponent + '?' + parsedURL.queryParams;\n      } else {\n        // file name looks best decoded\n        try {\n          this.#name = decodeURIComponent(parsedURL.lastPathComponent);\n        } catch {\n          // Decoding might fail.\n          this.#name = parsedURL.lastPathComponent;\n        }\n      }\n    } else {\n      this.#origin = Platform.DevToolsPath.EmptyUrlString;\n      this.#parentURL = Platform.DevToolsPath.EmptyUrlString;\n      this.#name = url;\n    }\n\n    this.#contentType = contentType;\n  }\n\n  requestMetadata(): Promise<UISourceCodeMetadata|null> {\n    return this.#project.requestMetadata(this);\n  }\n\n  name(): string {\n    return this.#name;\n  }\n\n  mimeType(): string {\n    return this.#project.mimeType(this);\n  }\n\n  url(): Platform.DevToolsPath.UrlString {\n    return this.#url;\n  }\n\n  // Identifier used for deduplicating scripts that are considered by the\n  // DevTools UI to be the same script. For now this is just the url but this\n  // is likely to change in the future.\n  canonicalScriptId(): string {\n    return `${this.#contentType.name()},${this.#url}`;\n  }\n\n  parentURL(): Platform.DevToolsPath.UrlString {\n    return this.#parentURL;\n  }\n\n  origin(): Platform.DevToolsPath.UrlString {\n    return this.#origin;\n  }\n\n  fullDisplayName(): string {\n    return this.#project.fullDisplayName(this);\n  }\n\n  displayName(skipTrim?: boolean): string {\n    if (!this.#name) {\n      return i18nString(UIStrings.index);\n    }\n    const name = this.#name;\n    return skipTrim ? name : Platform.StringUtilities.trimEndWithMaxLength(name, 100);\n  }\n\n  canRename(): boolean {\n    return this.#project.canRename();\n  }\n\n  rename(newName: Platform.DevToolsPath.RawPathString): Promise<boolean> {\n    const {resolve, promise} = Promise.withResolvers<boolean>();\n    this.#project.rename(this, newName, innerCallback.bind(this));\n    return promise;\n\n    function innerCallback(\n        this: UISourceCode, success: boolean, newName?: string, newURL?: Platform.DevToolsPath.UrlString,\n        newContentType?: Common.ResourceType.ResourceType): void {\n      if (success) {\n        this.#updateName(\n            newName as Platform.DevToolsPath.RawPathString, newURL as Platform.DevToolsPath.UrlString,\n            newContentType as Common.ResourceType.ResourceType);\n      }\n      resolve(success);\n    }\n  }\n\n  remove(): void {\n    this.#project.deleteFile(this);\n  }\n\n  #updateName(\n      name: Platform.DevToolsPath.RawPathString, url: Platform.DevToolsPath.UrlString,\n      contentType?: Common.ResourceType.ResourceType): void {\n    const oldURL = this.#url;\n    this.#name = name;\n    if (url) {\n      this.#url = url;\n    } else {\n      this.#url = Common.ParsedURL.ParsedURL.relativePathToUrlString(name, oldURL);\n    }\n    if (contentType) {\n      this.#contentType = contentType;\n    }\n    this.dispatchEventToListeners(Events.TitleChanged, this);\n    this.project().workspace().dispatchEventToListeners(\n        WorkspaceImplEvents.UISourceCodeRenamed, {oldURL, uiSourceCode: this});\n  }\n\n  contentURL(): Platform.DevToolsPath.UrlString {\n    return this.url();\n  }\n\n  contentType(): Common.ResourceType.ResourceType {\n    return this.#contentType;\n  }\n\n  project(): Project {\n    return this.#project;\n  }\n\n  requestContentData({cachedWasmOnly}: {cachedWasmOnly?: boolean} = {}):\n      Promise<TextUtils.ContentData.ContentDataOrError> {\n    if (this.#requestContentPromise) {\n      return this.#requestContentPromise;\n    }\n\n    if (this.#content) {\n      return Promise.resolve(this.#content);\n    }\n\n    if (cachedWasmOnly && this.mimeType() === 'application/wasm') {\n      return Promise.resolve(new TextUtils.WasmDisassembly.WasmDisassembly([], [], []));\n    }\n\n    this.#requestContentPromise = this.#requestContent();\n    return this.#requestContentPromise;\n  }\n\n  async #requestContent(): Promise<TextUtils.ContentData.ContentDataOrError> {\n    if (this.#content) {\n      throw new Error('Called UISourceCode#requestContentImpl even though content is available for ' + this.#url);\n    }\n\n    try {\n      this.#content = await this.#project.requestFileContent(this);\n    } catch (err) {\n      this.#content = {error: err ? String(err) : ''};\n    }\n\n    return this.#content;\n  }\n\n  #decodeContent(content: TextUtils.ContentProvider.DeferredContent|null): string|null {\n    if (!content) {\n      return null;\n    }\n    return content.isEncoded && content.content ? window.atob(content.content) : content.content;\n  }\n\n  /** Only used to compare whether content changed */\n  #unsafeDecodeContentData(content: TextUtils.ContentData.ContentDataOrError|null): string|null {\n    if (!content || TextUtils.ContentData.ContentData.isError(content)) {\n      return null;\n    }\n    return content.createdFromBase64 ? window.atob(content.base64) : content.text;\n  }\n\n  async checkContentUpdated(): Promise<void> {\n    if (!this.#content && !this.#forceLoadOnCheckContent) {\n      return;\n    }\n\n    if (!this.#project.canSetFileContent() || this.#checkingContent) {\n      return;\n    }\n\n    this.#checkingContent = true;\n    const updatedContent =\n        TextUtils.ContentData.ContentData.asDeferredContent(await this.#project.requestFileContent(this));\n    if ('error' in updatedContent) {\n      return;\n    }\n    this.#checkingContent = false;\n    if (updatedContent.content === null) {\n      const workingCopy = this.workingCopy();\n      this.#contentCommitted('', false);\n      this.setWorkingCopy(workingCopy);\n      return;\n    }\n    if (this.#lastAcceptedContent === updatedContent.content) {\n      return;\n    }\n\n    if (this.#unsafeDecodeContentData(this.#content) === this.#decodeContent(updatedContent)) {\n      this.#lastAcceptedContent = null;\n      return;\n    }\n\n    if (!this.isDirty() || this.#workingCopy === updatedContent.content) {\n      this.#contentCommitted(updatedContent.content, false);\n      return;\n    }\n\n    await Common.Revealer.reveal(this);\n\n    // Make sure we are in the next frame before stopping the world with confirm\n    await new Promise(resolve => window.setTimeout(resolve, 0));\n\n    const shouldUpdate = window.confirm(i18nString(UIStrings.thisFileWasChangedExternally));\n    if (shouldUpdate) {\n      this.#contentCommitted(updatedContent.content, false);\n    } else {\n      this.#lastAcceptedContent = updatedContent.content;\n    }\n  }\n\n  forceLoadOnCheckContent(): void {\n    this.#forceLoadOnCheckContent = true;\n  }\n\n  #commitContent(content: string): void {\n    if (this.#project.canSetFileContent()) {\n      void this.#project.setFileContent(this, content, false);\n    }\n    this.#contentCommitted(content, true);\n  }\n\n  #contentCommitted(content: string, committedByUser: boolean): void {\n    this.#lastAcceptedContent = null;\n    this.#content = new TextUtils.ContentData.ContentData(content, Boolean(this.#contentEncoded), this.mimeType());\n    this.#requestContentPromise = null;\n\n    this.#hasCommits = true;\n\n    this.#resetWorkingCopy();\n    const data = {uiSourceCode: this, content, encoded: this.#contentEncoded};\n    this.dispatchEventToListeners(Events.WorkingCopyCommitted, data);\n    this.#project.workspace().dispatchEventToListeners(WorkspaceImplEvents.WorkingCopyCommitted, data);\n    if (committedByUser) {\n      this.#project.workspace().dispatchEventToListeners(WorkspaceImplEvents.WorkingCopyCommittedByUser, data);\n    }\n  }\n\n  addRevision(content: string): void {\n    this.#commitContent(content);\n  }\n\n  hasCommits(): boolean {\n    return this.#hasCommits;\n  }\n\n  workingCopy(): string {\n    return this.workingCopyContent().content || '';\n  }\n\n  workingCopyContent(): TextUtils.ContentProvider.DeferredContent {\n    return this.workingCopyContentData().asDeferedContent();\n  }\n\n  workingCopyContentData(): TextUtils.ContentData.ContentData {\n    if (this.#workingCopyGetter) {\n      this.#workingCopy = this.#workingCopyGetter();\n      this.#workingCopyGetter = null;\n    }\n    const contentData = this.#content ? TextUtils.ContentData.ContentData.contentDataOrEmpty(this.#content) :\n                                        TextUtils.ContentData.EMPTY_TEXT_CONTENT_DATA;\n    if (this.#workingCopy !== null) {\n      return new TextUtils.ContentData.ContentData(this.#workingCopy, /* isBase64 */ false, contentData.mimeType);\n    }\n    return contentData;\n  }\n\n  resetWorkingCopy(): void {\n    this.#resetWorkingCopy();\n    this.#workingCopyChanged();\n  }\n\n  #resetWorkingCopy(): void {\n    this.#workingCopy = null;\n    this.#workingCopyGetter = null;\n    this.setContainsAiChanges(false);\n  }\n\n  setWorkingCopy(newWorkingCopy: string): void {\n    this.#workingCopy = newWorkingCopy;\n    this.#workingCopyGetter = null;\n    this.#workingCopyChanged();\n  }\n\n  setContainsAiChanges(containsAiChanges: boolean): void {\n    this.#containsAiChanges = containsAiChanges;\n  }\n\n  containsAiChanges(): boolean {\n    return this.#containsAiChanges;\n  }\n\n  setContent(content: string, isBase64: boolean): void {\n    this.#contentEncoded = isBase64;\n    if (this.#project.canSetFileContent()) {\n      void this.#project.setFileContent(this, content, isBase64);\n    }\n    this.#contentCommitted(content, true);\n  }\n\n  setWorkingCopyGetter(workingCopyGetter: () => string): void {\n    this.#workingCopyGetter = workingCopyGetter;\n    this.#workingCopyChanged();\n  }\n\n  #workingCopyChanged(): void {\n    this.#removeAllMessages();\n    this.dispatchEventToListeners(Events.WorkingCopyChanged, this);\n    this.#project.workspace().dispatchEventToListeners(WorkspaceImplEvents.WorkingCopyChanged, {uiSourceCode: this});\n  }\n\n  removeWorkingCopyGetter(): void {\n    if (!this.#workingCopyGetter) {\n      return;\n    }\n    this.#workingCopy = this.#workingCopyGetter();\n    this.#workingCopyGetter = null;\n  }\n\n  commitWorkingCopy(): void {\n    if (this.isDirty()) {\n      this.#commitContent(this.workingCopy());\n    }\n  }\n\n  isDirty(): boolean {\n    return this.#workingCopy !== null || this.#workingCopyGetter !== null;\n  }\n\n  isKnownThirdParty(): boolean {\n    return this.#isKnownThirdParty;\n  }\n\n  markKnownThirdParty(): void {\n    this.#isKnownThirdParty = true;\n  }\n\n  /**\n   * {@link markAsUnconditionallyIgnoreListed}\n   */\n  isUnconditionallyIgnoreListed(): boolean {\n    return this.#isUnconditionallyIgnoreListed;\n  }\n\n  isFetchXHR(): boolean {\n    return [Common.ResourceType.resourceTypes.XHR, Common.ResourceType.resourceTypes.Fetch].includes(\n        this.contentType());\n  }\n\n  /**\n   * Unconditionally ignore list this UISourcecode, ignoring any user\n   * setting. We use this to mark breakpoint/logpoint condition scripts for now.\n   */\n  markAsUnconditionallyIgnoreListed(): void {\n    this.#isUnconditionallyIgnoreListed = true;\n  }\n\n  extension(): string {\n    return Common.ParsedURL.ParsedURL.extractExtension(this.#name);\n  }\n\n  content(): string {\n    if (!this.#content || 'error' in this.#content) {\n      return '';\n    }\n    return this.#content.text;\n  }\n\n  loadError(): string|null {\n    return (this.#content && 'error' in this.#content && this.#content.error) || null;\n  }\n\n  searchInContent(query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    if (!this.#content || 'error' in this.#content) {\n      return this.#project.searchInFileContent(this, query, caseSensitive, isRegex);\n    }\n    return Promise.resolve(\n        TextUtils.TextUtils.performSearchInContentData(this.#content, query, caseSensitive, isRegex));\n  }\n\n  contentLoaded(): boolean {\n    return Boolean(this.#content);\n  }\n\n  uiLocation(lineNumber: number, columnNumber?: number): UILocation {\n    return new UILocation(this, lineNumber, columnNumber);\n  }\n\n  messages(): Set<Message> {\n    return this.#messages ? new Set(this.#messages) : new Set();\n  }\n\n  addLineMessage(\n      level: Message.Level, text: string, lineNumber: number, columnNumber?: number,\n      clickHandler?: (() => void)): Message {\n    const range = TextUtils.TextRange.TextRange.createFromLocation(lineNumber, columnNumber || 0);\n    const message = new Message(level, text, clickHandler, range);\n    this.addMessage(message);\n    return message;\n  }\n\n  addMessage(message: Message): void {\n    if (!this.#messages) {\n      this.#messages = new Set();\n    }\n    this.#messages.add(message);\n    this.dispatchEventToListeners(Events.MessageAdded, message);\n  }\n\n  removeMessage(message: Message): void {\n    if (this.#messages?.delete(message)) {\n      this.dispatchEventToListeners(Events.MessageRemoved, message);\n    }\n  }\n\n  #removeAllMessages(): void {\n    if (!this.#messages) {\n      return;\n    }\n    for (const message of this.#messages) {\n      this.dispatchEventToListeners(Events.MessageRemoved, message);\n    }\n    this.#messages = null;\n  }\n\n  setDecorationData(type: string, data: any): void {\n    if (data !== this.#decorations.get(type)) {\n      this.#decorations.set(type, data);\n      this.dispatchEventToListeners(Events.DecorationChanged, type);\n    }\n  }\n\n  getDecorationData(type: string): any {\n    return this.#decorations.get(type);\n  }\n\n  disableEdit(): void {\n    this.#disableEdit = true;\n  }\n\n  editDisabled(): boolean {\n    return this.#disableEdit;\n  }\n\n  isIgnoreListed(): boolean {\n    return IgnoreListManager.instance().isUserOrSourceMapIgnoreListedUISourceCode(this);\n  }\n}\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  WorkingCopyChanged = 'WorkingCopyChanged',\n  WorkingCopyCommitted = 'WorkingCopyCommitted',\n  TitleChanged = 'TitleChanged',\n  MessageAdded = 'MessageAdded',\n  MessageRemoved = 'MessageRemoved',\n  DecorationChanged = 'DecorationChanged',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface WorkingCopyCommittedEvent {\n  uiSourceCode: UISourceCode;\n  content: string;\n  encoded: boolean|undefined;\n}\n\nexport interface EventTypes {\n  [Events.WorkingCopyChanged]: UISourceCode;\n  [Events.WorkingCopyCommitted]: WorkingCopyCommittedEvent;\n  [Events.TitleChanged]: UISourceCode;\n  [Events.MessageAdded]: Message;\n  [Events.MessageRemoved]: Message;\n  [Events.DecorationChanged]: string;\n}\n\nexport class UILocation {\n  uiSourceCode: UISourceCode;\n  lineNumber: number;\n  columnNumber: number|undefined;\n  constructor(uiSourceCode: UISourceCode, lineNumber: number, columnNumber?: number) {\n    this.uiSourceCode = uiSourceCode;\n    this.lineNumber = lineNumber;\n    this.columnNumber = columnNumber;\n  }\n\n  linkText(skipTrim = false, showColumnNumber = false): string {\n    const displayName = this.uiSourceCode.displayName(skipTrim);\n    const lineAndColumnText = this.lineAndColumnText(showColumnNumber);\n    let text = lineAndColumnText ? displayName + ':' + lineAndColumnText : displayName;\n    if (this.uiSourceCode.isDirty()) {\n      text = '*' + text;\n    }\n    return text;\n  }\n\n  lineAndColumnText(showColumnNumber = false): string|undefined {\n    let lineAndColumnText;\n    if (this.uiSourceCode.mimeType() === 'application/wasm') {\n      // For WebAssembly locations, we follow the conventions described in\n      // github.com/WebAssembly/design/blob/master/Web.md#developer-facing-display-conventions\n      if (typeof this.columnNumber === 'number') {\n        lineAndColumnText = `0x${this.columnNumber.toString(16)}`;\n      }\n    } else {\n      lineAndColumnText = `${this.lineNumber + 1}`;\n      if (showColumnNumber && typeof this.columnNumber === 'number') {\n        lineAndColumnText += ':' + (this.columnNumber + 1);\n      }\n    }\n    return lineAndColumnText;\n  }\n\n  id(): string {\n    if (typeof this.columnNumber === 'number') {\n      return this.uiSourceCode.project().id() + ':' + this.uiSourceCode.url() + ':' + this.lineNumber + ':' +\n          this.columnNumber;\n    }\n    return this.lineId();\n  }\n\n  lineId(): string {\n    return this.uiSourceCode.project().id() + ':' + this.uiSourceCode.url() + ':' + this.lineNumber;\n  }\n\n  static comparator(location1: UILocation, location2: UILocation): number {\n    return location1.compareTo(location2);\n  }\n\n  compareTo(other: UILocation): number {\n    if (this.uiSourceCode.url() !== other.uiSourceCode.url()) {\n      return this.uiSourceCode.url() > other.uiSourceCode.url() ? 1 : -1;\n    }\n    if (this.lineNumber !== other.lineNumber) {\n      return this.lineNumber - other.lineNumber;\n    }\n    // We consider `undefined` less than an actual column number, since\n    // UI location without a column number corresponds to the whole line.\n    if (this.columnNumber === other.columnNumber) {\n      return 0;\n    }\n    if (typeof this.columnNumber !== 'number') {\n      return -1;\n    }\n    if (typeof other.columnNumber !== 'number') {\n      return 1;\n    }\n    return this.columnNumber - other.columnNumber;\n  }\n\n  isIgnoreListed(): boolean {\n    return this.uiSourceCode.isIgnoreListed();\n  }\n}\n\n/**\n * A text range inside a specific {@link UISourceCode}.\n *\n * We use a class instead of an interface so we can implement a revealer for it.\n */\nexport class UILocationRange {\n  readonly uiSourceCode: UISourceCode;\n  readonly range: TextUtils.TextRange.TextRange;\n\n  constructor(uiSourceCode: UISourceCode, range: TextUtils.TextRange.TextRange) {\n    this.uiSourceCode = uiSourceCode;\n    this.range = range;\n  }\n}\n\n/**\n * A message associated with a range in a `UISourceCode`. The range will be\n * underlined starting at the range's start and ending at the line end (the\n * end of the range is currently disregarded).\n * An icon is going to appear at the end of the line according to the\n * `level` of the Message. This is only the model; displaying is handled\n * where UISourceCode displaying is handled.\n */\nexport class Message {\n  readonly #level: Message.Level;\n  readonly #text: string;\n  range: TextUtils.TextRange.TextRange;\n  readonly #clickHandler?: (() => void);\n\n  constructor(level: Message.Level, text: string, clickHandler?: (() => void), range?: TextUtils.TextRange.TextRange) {\n    this.#level = level;\n    this.#text = text;\n    this.range = range ?? new TextUtils.TextRange.TextRange(0, 0, 0, 0);\n    this.#clickHandler = clickHandler;\n  }\n\n  level(): Message.Level {\n    return this.#level;\n  }\n\n  text(): string {\n    return this.#text;\n  }\n\n  clickHandler(): (() => void)|undefined {\n    return this.#clickHandler;\n  }\n\n  lineNumber(): number {\n    return this.range.startLine;\n  }\n\n  columnNumber(): number|undefined {\n    return this.range.startColumn;\n  }\n\n  isEqual(another: Message): boolean {\n    return this.text() === another.text() && this.level() === another.level() && this.range.equal(another.range);\n  }\n}\n\nexport namespace Message {\n  export const enum Level {\n    ERROR = 'Error',\n    ISSUE = 'Issue',\n    WARNING = 'Warning',\n  }\n}\n\nexport class UISourceCodeMetadata {\n  modificationTime: Date|null;\n  contentSize: number|null;\n\n  constructor(modificationTime: Date|null, contentSize: number|null) {\n    this.modificationTime = modificationTime;\n    this.contentSize = contentSize;\n  }\n}\n", "// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\n\nexport class SearchConfig {\n  readonly #query: string;\n  readonly #ignoreCase: boolean;\n  readonly #isRegex: boolean;\n  readonly #queries: string[];\n  readonly #fileRegexQueries: RegexQuery[];\n\n  constructor(query: string, ignoreCase: boolean, isRegex: boolean) {\n    this.#query = query;\n    this.#ignoreCase = ignoreCase;\n    this.#isRegex = isRegex;\n\n    const {queries, fileRegexQueries} = SearchConfig.#parse(query, ignoreCase, isRegex);\n    this.#queries = queries;\n    this.#fileRegexQueries = fileRegexQueries;\n  }\n\n  static fromPlainObject(object: {\n    query: string,\n    ignoreCase: boolean,\n    isRegex: boolean,\n  }): SearchConfig {\n    return new SearchConfig(object.query, object.ignoreCase, object.isRegex);\n  }\n\n  filePathMatchesFileQuery(\n      filePath: Platform.DevToolsPath.RawPathString|Platform.DevToolsPath.EncodedPathString|\n      Platform.DevToolsPath.UrlString): boolean {\n    return this.#fileRegexQueries.every(({regex, shouldMatch}) => (Boolean(filePath.match(regex)) === shouldMatch));\n  }\n\n  queries(): string[] {\n    return this.#queries;\n  }\n\n  query(): string {\n    return this.#query;\n  }\n\n  ignoreCase(): boolean {\n    return this.#ignoreCase;\n  }\n\n  isRegex(): boolean {\n    return this.#isRegex;\n  }\n\n  toPlainObject(): {\n    query: string,\n    ignoreCase: boolean,\n    isRegex: boolean,\n  } {\n    return {query: this.query(), ignoreCase: this.ignoreCase(), isRegex: this.isRegex()};\n  }\n\n  static #parse(query: string, ignoreCase: boolean, isRegex: boolean):\n      {queries: string[], fileRegexQueries: RegexQuery[]} {\n    // Inside double quotes: any symbol except double quote and backslash or any symbol escaped with a backslash.\n    const quotedPattern = /\"([^\\\\\"]|\\\\.)+\"/;\n    // A word is a sequence of any symbols except space and backslash or any symbols escaped with a backslash, that does not start with file:.\n    const unquotedWordPattern = /(\\s*(?!-?f(ile)?:)[^\\\\ ]|\\\\.)+/;\n    const unquotedPattern = unquotedWordPattern.source + '(\\\\s+' + unquotedWordPattern.source + ')*';\n\n    const pattern = [\n      '(\\\\s*' + FilePatternRegex.source + '\\\\s*)',\n      '(' + quotedPattern.source + ')',\n      '(' + unquotedPattern + ')',\n    ].join('|');\n    const regexp = new RegExp(pattern, 'g');\n    const queryParts = query.match(regexp) || [];\n\n    const queries: string[] = [];\n    const fileRegexQueries: RegexQuery[] = [];\n\n    for (const queryPart of queryParts) {\n      if (!queryPart) {\n        continue;\n      }\n      const fileQuery = SearchConfig.#parseFileQuery(queryPart);\n      if (fileQuery) {\n        const regex = new RegExp(fileQuery.text, ignoreCase ? 'i' : '');\n        fileRegexQueries.push({regex, shouldMatch: fileQuery.shouldMatch});\n      } else if (isRegex) {\n        queries.push(queryPart);\n      } else if (queryPart.startsWith('\"') && queryPart.endsWith('\"')) {\n        queries.push(SearchConfig.#parseQuotedQuery(queryPart));\n      } else {\n        queries.push(SearchConfig.#parseUnquotedQuery(queryPart));\n      }\n    }\n\n    return {queries, fileRegexQueries};\n  }\n\n  static #parseUnquotedQuery(query: string): string {\n    return query.replace(/\\\\(.)/g, '$1');\n  }\n\n  static #parseQuotedQuery(query: string): string {\n    return query.substring(1, query.length - 1).replace(/\\\\(.)/g, '$1');\n  }\n\n  static #parseFileQuery(query: string): QueryTerm|null {\n    const match = query.match(FilePatternRegex);\n    if (!match) {\n      return null;\n    }\n    query = match[3];\n    let result = '';\n    for (let i = 0; i < query.length; ++i) {\n      const char = query[i];\n      if (char === '*') {\n        result += '.*';\n      } else if (char === '\\\\') {\n        ++i;\n        const nextChar = query[i];\n        if (nextChar === ' ') {\n          result += ' ';\n        }\n      } else {\n        if (Platform.StringUtilities.regexSpecialCharacters().indexOf(query.charAt(i)) !== -1) {\n          result += '\\\\';\n        }\n        result += query.charAt(i);\n      }\n    }\n    const shouldMatch = !Boolean(match[1]);\n    return {text: result, shouldMatch};\n  }\n}\n\n// After file: prefix: any symbol except space and backslash or any symbol escaped with a backslash.\nconst FilePatternRegex = /(-)?f(ile)?:((?:[^\\\\ ]|\\\\.)+)/;\n\ninterface QueryTerm {\n  text: string;\n  shouldMatch: boolean;\n}\n\ninterface RegexQuery {\n  regex: RegExp;\n  shouldMatch: boolean;\n}\n"],
  "mappings": "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",
  "names": ["Common", "i18n", "Platform", "Common", "Events", "Common", "newName", "Events", "projectTypes", "Events", "UIStrings", "str_", "i18nString", "Platform"]
}
