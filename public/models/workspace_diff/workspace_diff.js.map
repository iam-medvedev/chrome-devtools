{
  "version": 3,
  "sources": ["../../../../../../front_end/models/workspace_diff/WorkspaceDiff.ts"],
  "sourcesContent": ["// Copyright 2017 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Diff from '../../third_party/diff/diff.js';\nimport * as FormatterModule from '../formatter/formatter.js';\nimport * as Persistence from '../persistence/persistence.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\ninterface DiffResponse {\n  diff: Diff.Diff.DiffArray;\n  formattedCurrentMapping?: FormatterModule.ScriptFormatter.FormatterSourceMapping;\n}\n\nexport class WorkspaceDiffImpl extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #persistence = Persistence.Persistence.PersistenceImpl.instance();\n  readonly #diffs = new WeakMap<Workspace.UISourceCode.UISourceCode, UISourceCodeDiff>();\n  /** used in web tests */\n  private readonly loadingUISourceCodes =\n      new Map<Workspace.UISourceCode.UISourceCode, Promise<[string | null, string|null]>>();\n  readonly #modified = new Set<Workspace.UISourceCode.UISourceCode>();\n\n  constructor(workspace: Workspace.Workspace.WorkspaceImpl) {\n    super();\n    workspace.addEventListener(Workspace.Workspace.Events.WorkingCopyChanged, this.#uiSourceCodeChanged, this);\n    workspace.addEventListener(Workspace.Workspace.Events.WorkingCopyCommitted, this.#uiSourceCodeChanged, this);\n    workspace.addEventListener(Workspace.Workspace.Events.UISourceCodeAdded, this.#uiSourceCodeAdded, this);\n    workspace.addEventListener(Workspace.Workspace.Events.UISourceCodeRemoved, this.#uiSourceCodeRemoved, this);\n    workspace.addEventListener(Workspace.Workspace.Events.ProjectRemoved, this.#projectRemoved, this);\n    workspace.uiSourceCodes().forEach(this.#updateModifiedState.bind(this));\n  }\n\n  requestDiff(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<DiffResponse|null> {\n    return this.#uiSourceCodeDiff(uiSourceCode).requestDiff();\n  }\n\n  subscribeToDiffChange(uiSourceCode: Workspace.UISourceCode.UISourceCode, callback: () => void, thisObj?: Object):\n      void {\n    this.#uiSourceCodeDiff(uiSourceCode).addEventListener(UISourceCodeDiffEvents.DIFF_CHANGED, callback, thisObj);\n  }\n\n  unsubscribeFromDiffChange(uiSourceCode: Workspace.UISourceCode.UISourceCode, callback: () => void, thisObj?: Object):\n      void {\n    this.#uiSourceCodeDiff(uiSourceCode).removeEventListener(UISourceCodeDiffEvents.DIFF_CHANGED, callback, thisObj);\n  }\n\n  modifiedUISourceCodes(): Workspace.UISourceCode.UISourceCode[] {\n    return Array.from(this.#modified);\n  }\n\n  #uiSourceCodeDiff(uiSourceCode: Workspace.UISourceCode.UISourceCode): UISourceCodeDiff {\n    let diff = this.#diffs.get(uiSourceCode);\n    if (!diff) {\n      diff = new UISourceCodeDiff(uiSourceCode);\n      this.#diffs.set(uiSourceCode, diff);\n    }\n    return diff;\n  }\n\n  #uiSourceCodeChanged(event: Common.EventTarget.EventTargetEvent<{uiSourceCode: Workspace.UISourceCode.UISourceCode}>):\n      void {\n    const uiSourceCode = event.data.uiSourceCode;\n    void this.#updateModifiedState(uiSourceCode);\n  }\n\n  #uiSourceCodeAdded(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    void this.#updateModifiedState(uiSourceCode);\n  }\n\n  #uiSourceCodeRemoved(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    this.#removeUISourceCode(uiSourceCode);\n  }\n\n  #projectRemoved(event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.Project>): void {\n    const project = event.data;\n    for (const uiSourceCode of project.uiSourceCodes()) {\n      this.#removeUISourceCode(uiSourceCode);\n    }\n  }\n\n  #removeUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    this.loadingUISourceCodes.delete(uiSourceCode);\n    const uiSourceCodeDiff = this.#diffs.get(uiSourceCode);\n    if (uiSourceCodeDiff) {\n      uiSourceCodeDiff.dispose = true;\n    }\n    this.#markAsUnmodified(uiSourceCode);\n  }\n\n  #markAsUnmodified(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    this.uiSourceCodeProcessedForTest();\n    if (this.#modified.delete(uiSourceCode)) {\n      this.dispatchEventToListeners(Events.MODIFIED_STATUS_CHANGED, {uiSourceCode, isModified: false});\n    }\n  }\n\n  #markAsModified(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    this.uiSourceCodeProcessedForTest();\n    if (this.#modified.has(uiSourceCode)) {\n      return;\n    }\n    this.#modified.add(uiSourceCode);\n    this.dispatchEventToListeners(Events.MODIFIED_STATUS_CHANGED, {uiSourceCode, isModified: true});\n  }\n\n  private uiSourceCodeProcessedForTest(): void {\n  }\n\n  #shouldTrack(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    switch (uiSourceCode.project().type()) {\n      case Workspace.Workspace.projectTypes.Network:\n        // We track differences for all Network resources.\n        return this.#persistence.binding(uiSourceCode) === null;\n\n      case Workspace.Workspace.projectTypes.FileSystem:\n        // We track differences for FileSystem resources without bindings.\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  async #updateModifiedState(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    this.loadingUISourceCodes.delete(uiSourceCode);\n\n    if (!this.#shouldTrack(uiSourceCode)) {\n      this.#markAsUnmodified(uiSourceCode);\n      return;\n    }\n    if (uiSourceCode.isDirty()) {\n      this.#markAsModified(uiSourceCode);\n      return;\n    }\n    if (!uiSourceCode.hasCommits()) {\n      this.#markAsUnmodified(uiSourceCode);\n      return;\n    }\n\n    const contentsPromise = Promise.all([\n      this.requestOriginalContentForUISourceCode(uiSourceCode),\n      uiSourceCode.requestContentData().then(\n          contentDataOrError => TextUtils.ContentData.ContentData.textOr(contentDataOrError, null))\n    ]);\n\n    this.loadingUISourceCodes.set(uiSourceCode, contentsPromise);\n    const contents = await contentsPromise;\n    if (this.loadingUISourceCodes.get(uiSourceCode) !== contentsPromise) {\n      return;\n    }\n    this.loadingUISourceCodes.delete(uiSourceCode);\n\n    if (contents[0] !== null && contents[1] !== null && contents[0] !== contents[1]) {\n      this.#markAsModified(uiSourceCode);\n    } else {\n      this.#markAsUnmodified(uiSourceCode);\n    }\n  }\n\n  requestOriginalContentForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<string|null> {\n    return this.#uiSourceCodeDiff(uiSourceCode).originalContent();\n  }\n\n  revertToOriginal(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    function callback(content: string|null): void {\n      if (typeof content !== 'string') {\n        return;\n      }\n\n      uiSourceCode.addRevision(content);\n    }\n\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.RevisionApplied);\n    return this.requestOriginalContentForUISourceCode(uiSourceCode).then(callback);\n  }\n}\n\nexport const enum Events {\n  MODIFIED_STATUS_CHANGED = 'ModifiedStatusChanged',\n}\n\nexport interface ModifiedStatusChangedEvent {\n  uiSourceCode: Workspace.UISourceCode.UISourceCode;\n  isModified: boolean;\n}\n\nexport interface EventTypes {\n  [Events.MODIFIED_STATUS_CHANGED]: ModifiedStatusChangedEvent;\n}\n\nexport class UISourceCodeDiff extends Common.ObjectWrapper.ObjectWrapper<UISourceCodeDiffEventTypes> {\n  #uiSourceCode: Workspace.UISourceCode.UISourceCode;\n  #requestDiffPromise: Promise<DiffResponse|null>|null = null;\n  #pendingChanges: number|null = null;\n  dispose = false;\n  constructor(uiSourceCode: Workspace.UISourceCode.UISourceCode) {\n    super();\n    this.#uiSourceCode = uiSourceCode;\n    uiSourceCode.addEventListener(Workspace.UISourceCode.Events.WorkingCopyChanged, this.#uiSourceCodeChanged, this);\n    uiSourceCode.addEventListener(Workspace.UISourceCode.Events.WorkingCopyCommitted, this.#uiSourceCodeChanged, this);\n  }\n\n  #uiSourceCodeChanged(): void {\n    if (this.#pendingChanges) {\n      clearTimeout(this.#pendingChanges);\n      this.#pendingChanges = null;\n    }\n    this.#requestDiffPromise = null;\n\n    const content = this.#uiSourceCode.content();\n    const delay = (!content || content.length < 65536) ? 0 : 200;\n    this.#pendingChanges = window.setTimeout(emitDiffChanged.bind(this), delay);\n\n    function emitDiffChanged(this: UISourceCodeDiff): void {\n      if (this.dispose) {\n        return;\n      }\n      this.dispatchEventToListeners(UISourceCodeDiffEvents.DIFF_CHANGED);\n      this.#pendingChanges = null;\n    }\n  }\n\n  requestDiff(): Promise<DiffResponse|null> {\n    if (!this.#requestDiffPromise) {\n      this.#requestDiffPromise = this.#requestDiff();\n    }\n    return this.#requestDiffPromise;\n  }\n\n  async originalContent(): Promise<string|null> {\n    const originalNetworkContent =\n        Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance().originalContentForUISourceCode(\n            this.#uiSourceCode);\n    if (originalNetworkContent) {\n      return await originalNetworkContent;\n    }\n\n    const content = await this.#uiSourceCode.project().requestFileContent(this.#uiSourceCode);\n    if (TextUtils.ContentData.ContentData.isError(content)) {\n      return content.error;\n    }\n    return content.asDeferedContent().content;\n  }\n\n  async #requestDiff(): Promise<DiffResponse|null> {\n    if (this.dispose) {\n      return null;\n    }\n\n    let baseline = await this.originalContent();\n    if (baseline === null) {\n      return null;\n    }\n    if (baseline.length > 1024 * 1024) {\n      return null;\n    }\n    // ------------ ASYNC ------------\n    if (this.dispose) {\n      return null;\n    }\n\n    let current = this.#uiSourceCode.workingCopy();\n    if (!current && !this.#uiSourceCode.contentLoaded()) {\n      const contentDataOrError = await this.#uiSourceCode.requestContentData();\n      if (TextUtils.ContentData.ContentData.isError(contentDataOrError)) {\n        return null;\n      }\n      current = contentDataOrError.text;\n    }\n\n    if (current.length > 1024 * 1024) {\n      return null;\n    }\n\n    if (this.dispose) {\n      return null;\n    }\n\n    baseline = (await FormatterModule.ScriptFormatter.format(\n                    this.#uiSourceCode.contentType(), this.#uiSourceCode.mimeType(), baseline))\n                   .formattedContent;\n    const formatCurrentResult = await FormatterModule.ScriptFormatter.format(\n        this.#uiSourceCode.contentType(), this.#uiSourceCode.mimeType(), current);\n    current = formatCurrentResult.formattedContent;\n    const formattedCurrentMapping = formatCurrentResult.formattedMapping;\n    const reNewline = /\\r\\n?|\\n/;\n    const diff = Diff.Diff.DiffWrapper.lineDiff(baseline.split(reNewline), current.split(reNewline));\n    return {\n      diff,\n      formattedCurrentMapping,\n    };\n  }\n}\n\nexport const enum UISourceCodeDiffEvents {\n  DIFF_CHANGED = 'DiffChanged',\n}\n\nexport interface UISourceCodeDiffEventTypes {\n  [UISourceCodeDiffEvents.DIFF_CHANGED]: void;\n}\n\nlet workspaceDiffImplInstance: WorkspaceDiffImpl|null = null;\n\nexport function workspaceDiff({forceNew}: {forceNew?: boolean} = {}): WorkspaceDiffImpl {\n  if (!workspaceDiffImplInstance || forceNew) {\n    workspaceDiffImplInstance = new WorkspaceDiffImpl(Workspace.Workspace.WorkspaceImpl.instance());\n  }\n  return workspaceDiffImplInstance;\n}\n"],
  "mappings": "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",
  "names": []
}
