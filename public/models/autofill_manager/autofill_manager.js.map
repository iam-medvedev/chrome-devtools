{
  "version": 3,
  "sources": ["../../../../../../front_end/models/autofill_manager/AutofillManager.ts"],
  "sourcesContent": ["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nlet autofillManagerInstance: AutofillManager;\n\nexport class AutofillManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #autoOpenViewSetting: Common.Settings.Setting<boolean>;\n  #address = '';\n  #filledFields: Protocol.Autofill.FilledField[] = [];\n  #matches: Match[] = [];\n  #autofillModel: SDK.AutofillModel.AutofillModel|null = null;\n\n  private constructor() {\n    super();\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.AutofillModel.AutofillModel, SDK.AutofillModel.Events.ADDRESS_FORM_FILLED, this.#addressFormFilled, this,\n        {scoped: true});\n    this.#autoOpenViewSetting =\n        Common.Settings.Settings.instance().createSetting('auto-open-autofill-view-on-event', true);\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): AutofillManager {\n    const {forceNew} = opts;\n    if (!autofillManagerInstance || forceNew) {\n      autofillManagerInstance = new AutofillManager();\n    }\n    return autofillManagerInstance;\n  }\n\n  onShowAutofillTestAddressesSettingsChanged(): void {\n    for (const autofillModel of SDK.TargetManager.TargetManager.instance().models(SDK.AutofillModel.AutofillModel)) {\n      autofillModel.setTestAddresses();\n    }\n  }\n\n  async #addressFormFilled({data}: Common.EventTarget.EventTargetEvent<\n                           SDK.AutofillModel.EventTypes[SDK.AutofillModel.Events.ADDRESS_FORM_FILLED]>): Promise<void> {\n    if (this.#autoOpenViewSetting.get()) {\n      await UI.ViewManager.ViewManager.instance().showView('autofill-view');\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.AutofillReceivedAndTabAutoOpened);\n    } else {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.AutofillReceived);\n    }\n    this.#autofillModel = data.autofillModel;\n    this.#processAddressFormFilledData(data.event);\n    if (this.#address) {\n      this.dispatchEventToListeners(Events.ADDRESS_FORM_FILLED, {\n        address: this.#address,\n        filledFields: this.#filledFields,\n        matches: this.#matches,\n        autofillModel: this.#autofillModel,\n      });\n    }\n  }\n\n  getLastFilledAddressForm(): AddressFormFilledEvent|null {\n    if (!this.#address || !this.#autofillModel) {\n      return null;\n    }\n    return {\n      address: this.#address,\n      filledFields: this.#filledFields,\n      matches: this.#matches,\n      autofillModel: this.#autofillModel,\n    };\n  }\n\n  #processAddressFormFilledData({addressUi, filledFields}: Protocol.Autofill.AddressFormFilledEvent): void {\n    // Transform addressUi into a single (multi-line) string.\n    const concatAddressFields = (addressFields: Protocol.Autofill.AddressFields): string =>\n        addressFields.fields.filter(field => field.value.length).map(field => field.value).join(' ');\n    this.#address = addressUi.addressFields.map(addressFields => concatAddressFields(addressFields))\n                        .filter(str => str.length)\n                        .join('\\n');\n\n    this.#filledFields = filledFields;\n    this.#matches = [];\n\n    // Populate a list of matches by searching in the address string for\n    // occurences of filled field values.\n    for (let i = 0; i < this.#filledFields.length; i++) {\n      if (this.#filledFields[i].value === '') {\n        continue;\n      }\n      // 1) Replace multiple whitespaces with a single space.\n      // 2) Escape special characters.\n      // 3) For ',' or '.' before whitespace, insert the '?' quantifier.\n      const needle = Platform.StringUtilities.escapeForRegExp(this.#filledFields[i].value.replaceAll(/\\s/g, ' '))\n                         .replaceAll(/([.,]+)\\s/g, '$1? ');\n      const matches = this.#address.replaceAll(/\\s/g, ' ').matchAll(new RegExp(needle, 'g'));\n      for (const match of matches) {\n        if (typeof match.index !== 'undefined') {\n          this.#matches.push({startIndex: match.index, endIndex: match.index + match[0].length, filledFieldIndex: i});\n        }\n      }\n    }\n  }\n}\n\n// A Match describes how the value of a filled field corresponds to a substring\n// of address from startIndex to endIndex.\nexport interface Match {\n  startIndex: number;\n  endIndex: number;\n  filledFieldIndex: number;\n}\n\nexport const enum Events {\n  ADDRESS_FORM_FILLED = 'AddressFormFilled',\n}\n\nexport interface AddressFormFilledEvent {\n  address: string;\n  filledFields: Protocol.Autofill.FilledField[];\n  matches: Match[];\n  autofillModel: SDK.AutofillModel.AutofillModel;\n}\n\nexport interface EventTypes {\n  [Events.ADDRESS_FORM_FILLED]: AddressFormFilledEvent;\n}\n"],
  "mappings": ";;;;;;;AAAA;;;;AAIA,YAAY,YAAY;AACxB,YAAY,UAAU;AACtB,YAAY,cAAc;AAC1B,YAAY,SAAS;AAErB,YAAY,QAAQ;AAEpB,IAAI;AAEE,IAAO,kBAAP,MAAO,yBAA+B,qBAAc,cAAyB;EACjF;EACA,WAAW;EACX,gBAAiD,CAAA;EACjD,WAAoB,CAAA;EACpB,iBAAuD;EAEvD,cAAA;AACE,UAAK;AACL,IAAI,kBAAc,cAAc,SAAQ,EAAG,iBACnC,kBAAc,eAAa,qBAAgD,KAAK,oBAAoB,MACxG,EAAC,QAAQ,KAAI,CAAC;AAClB,SAAK,uBACM,gBAAS,SAAS,SAAQ,EAAG,cAAc,oCAAoC,IAAI;EAChG;EAEA,OAAO,SAAS,OAAiC,EAAC,UAAU,KAAI,GAAC;AAC/D,UAAM,EAAC,SAAQ,IAAI;AACnB,QAAI,CAAC,2BAA2B,UAAU;AACxC,gCAA0B,IAAI,iBAAe;IAC/C;AACA,WAAO;EACT;EAEA,6CAA0C;AACxC,eAAW,iBAAqB,kBAAc,cAAc,SAAQ,EAAG,OAAW,kBAAc,aAAa,GAAG;AAC9G,oBAAc,iBAAgB;IAChC;EACF;EAEA,MAAM,mBAAmB,EAAC,KAAI,GACsE;AAClG,QAAI,KAAK,qBAAqB,IAAG,GAAI;AACnC,YAAS,eAAY,YAAY,SAAQ,EAAG,SAAS,eAAe;AACpE,MAAK,iBAAY,YAAiB,iBAAY,OAAO,gCAAgC;IACvF,OAAO;AACL,MAAK,iBAAY,YAAiB,iBAAY,OAAO,gBAAgB;IACvE;AACA,SAAK,iBAAiB,KAAK;AAC3B,SAAK,8BAA8B,KAAK,KAAK;AAC7C,QAAI,KAAK,UAAU;AACjB,WAAK,yBAAwB,qBAA6B;QACxD,SAAS,KAAK;QACd,cAAc,KAAK;QACnB,SAAS,KAAK;QACd,eAAe,KAAK;OACrB;IACH;EACF;EAEA,2BAAwB;AACtB,QAAI,CAAC,KAAK,YAAY,CAAC,KAAK,gBAAgB;AAC1C,aAAO;IACT;AACA,WAAO;MACL,SAAS,KAAK;MACd,cAAc,KAAK;MACnB,SAAS,KAAK;MACd,eAAe,KAAK;;EAExB;EAEA,8BAA8B,EAAC,WAAW,aAAY,GAA2C;AAE/F,UAAM,sBAAsB,CAAC,kBACzB,cAAc,OAAO,OAAO,WAAS,MAAM,MAAM,MAAM,EAAE,IAAI,WAAS,MAAM,KAAK,EAAE,KAAK,GAAG;AAC/F,SAAK,WAAW,UAAU,cAAc,IAAI,mBAAiB,oBAAoB,aAAa,CAAC,EAC1E,OAAO,SAAO,IAAI,MAAM,EACxB,KAAK,IAAI;AAE9B,SAAK,gBAAgB;AACrB,SAAK,WAAW,CAAA;AAIhB,aAAS,IAAI,GAAG,IAAI,KAAK,cAAc,QAAQ,KAAK;AAClD,UAAI,KAAK,cAAc,CAAC,EAAE,UAAU,IAAI;AACtC;MACF;AAIA,YAAM,SAAkB,yBAAgB,gBAAgB,KAAK,cAAc,CAAC,EAAE,MAAM,WAAW,OAAO,GAAG,CAAC,EACtF,WAAW,cAAc,MAAM;AACnD,YAAM,UAAU,KAAK,SAAS,WAAW,OAAO,GAAG,EAAE,SAAS,IAAI,OAAO,QAAQ,GAAG,CAAC;AACrF,iBAAW,SAAS,SAAS;AAC3B,YAAI,OAAO,MAAM,UAAU,aAAa;AACtC,eAAK,SAAS,KAAK,EAAC,YAAY,MAAM,OAAO,UAAU,MAAM,QAAQ,MAAM,CAAC,EAAE,QAAQ,kBAAkB,EAAC,CAAC;QAC5G;MACF;IACF;EACF;;",
  "names": []
}
