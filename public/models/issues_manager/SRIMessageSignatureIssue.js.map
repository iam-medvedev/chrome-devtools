{"version":3,"file":"SRIMessageSignatureIssue.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/SRIMessageSignatureIssue.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {Issue, IssueCategory, IssueKind} from './Issue.js';\nimport {\n  type LazyMarkdownIssueDescription,\n  type MarkdownIssueDescription,\n  resolveLazyDescription,\n} from './MarkdownIssueDescription.js';\n\nconst UIStrings = {\n  /**\n   * @description Title for HTTP Message Signatures specification url\n   */\n  httpMessageSignatures: 'HTTP Message Signatures (RFC9421)',\n  /**\n   * @description Title for Signature-based Integrity specification url\n   */\n  signatureBasedIntegrity: 'Signature-based Integrity',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/issues_manager/SRIMessageSignatureIssue.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nfunction generateGroupingIssueCode(details: Protocol.Audits.SRIMessageSignatureIssueDetails): string {\n  const issueCode = `${Protocol.Audits.InspectorIssueCode.SRIMessageSignatureIssue}::${details.error}`;\n  if (details.error === Protocol.Audits.SRIMessageSignatureError.ValidationFailedSignatureMismatch) {\n    // Signature mismatch errors should be grouped by \"signature base\".\n    return issueCode + details.signatureBase;\n  }\n  if (details.error === Protocol.Audits.SRIMessageSignatureError.ValidationFailedIntegrityMismatch) {\n    // Integrity mismatch errors should be grouped by integrity assertion.\n    return issueCode + details.integrityAssertions.join();\n  }\n\n  // Otherwise, simply group by issue type:\n  return issueCode;\n}\n\nexport class SRIMessageSignatureIssue extends Issue<string> {\n  readonly #issueDetails: Protocol.Audits.SRIMessageSignatureIssueDetails;\n\n  constructor(issueDetails: Protocol.Audits.SRIMessageSignatureIssueDetails, issuesModel: SDK.IssuesModel.IssuesModel) {\n    super(\n        {\n          code: generateGroupingIssueCode(issueDetails),\n          umaCode: `${Protocol.Audits.InspectorIssueCode.SRIMessageSignatureIssue}::${issueDetails.error}`,\n        },\n        issuesModel);\n    this.#issueDetails = issueDetails;\n  }\n\n  details(): Protocol.Audits.SRIMessageSignatureIssueDetails {\n    return this.#issueDetails;\n  }\n\n  // Overriding `Issue<String>`:\n  override primaryKey(): string {\n    return JSON.stringify(this.details());\n  }\n\n  override getDescription(): MarkdownIssueDescription|null {\n    const description: LazyMarkdownIssueDescription = {\n      file: `sri${this.details().error}.md`,\n      links: [\n        {\n          link: 'https://www.rfc-editor.org/rfc/rfc9421.html',\n          linkTitle: i18nLazyString(UIStrings.httpMessageSignatures),\n        },\n        {\n          link: 'https://wicg.github.io/signature-based-sri/',\n          linkTitle: i18nLazyString(UIStrings.signatureBasedIntegrity),\n        }\n      ],\n      substitutions: new Map()\n    };\n    if (this.#issueDetails.error === Protocol.Audits.SRIMessageSignatureError.ValidationFailedSignatureMismatch) {\n      description.substitutions?.set('PLACEHOLDER_signatureBase', () => this.#issueDetails.signatureBase);\n    }\n    if (this.#issueDetails.error === Protocol.Audits.SRIMessageSignatureError.ValidationFailedIntegrityMismatch) {\n      description.substitutions?.set('PLACEHOLDER_integrityAssertions', () => {\n        const prefix = '\\n* ';\n        return prefix + this.details().integrityAssertions.join(prefix);\n      });\n    }\n    return resolveLazyDescription(description);\n  }\n\n  override getCategory(): IssueCategory {\n    return IssueCategory.OTHER;\n  }\n\n  override getKind(): IssueKind {\n    return IssueKind.PAGE_ERROR;\n  }\n\n  override requests(): Iterable<Protocol.Audits.AffectedRequest> {\n    return this.details().request ? [this.details().request] : [];\n  }\n\n  static fromInspectorIssue(issuesModel: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue):\n      SRIMessageSignatureIssue[] {\n    const details = inspectorIssue.details.sriMessageSignatureIssueDetails;\n    if (!details) {\n      console.warn('SRI Message Signature issue without details received.');\n      return [];\n    }\n    return [new SRIMessageSignatureIssue(details, issuesModel)];\n  }\n}\n"]}