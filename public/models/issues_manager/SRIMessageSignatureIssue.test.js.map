{"version":3,"file":"SRIMessageSignatureIssue.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/SRIMessageSignatureIssue.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B,OAAO,EAAC,kBAAkB,EAAC,MAAM,qCAAqC,CAAC;AACvE,OAAO,EAAC,eAAe,EAAC,MAAM,kCAAkC,CAAC;AACjE,OAAO,KAAK,aAAa,MAAM,qCAAqC,CAAC;AAErE,SAAS,mBAAmB,CAAC,+BAAgF;IAE3G,OAAO;QACL,IAAI,8FAA6D;QACjE,OAAO,EAAE,EAAC,+BAA+B,EAAC;KAC3C,CAAC;AACJ,CAAC;AAED,kBAAkB,CAAC,0BAA0B,EAAE,GAAG,EAAE;IAClD,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,EAAE,CAA2C,CAAC;IAEpF,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,YAAY,GAAG;;;;;;;;;;;;;;;;;;;;;SAqBpB,CAAC;QACF,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;YACvC,MAAM,YAAY,GAAG;gBACnB,KAAK,EAAE,WAAW;gBAClB,OAAO,EAAE;oBACP,SAAS,EAAE,iBAA+C;oBAC1D,GAAG,EAAE,sBAAsB;iBAC5B;aACF,CAAC;YACF,MAAM,KAAK,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC;YAChD,MAAM,yBAAyB,GAC3B,aAAa,CAAC,wBAAwB,CAAC,wBAAwB,CAAC,kBAAkB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACzG,MAAM,CAAC,QAAQ,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC;YAC9C,MAAM,wBAAwB,GAAG,yBAAyB,CAAC,CAAC,CAAC,CAAC;YAE9D,MAAM,CAAC,WAAW,CAAC,wBAAwB,CAAC,WAAW,EAAE,wDAA0C,CAAC;YACpG,MAAM,CAAC,SAAS,CAAC,wBAAwB,CAAC,OAAO,EAAE,EAAE,YAAY,CAAC,CAAC;YACnE,MAAM,CAAC,WAAW,CAAC,wBAAwB,CAAC,OAAO,EAAE,6DAA2C,CAAC;YACjG,MAAM,CAAC,SAAS,CAAC,wBAAwB,CAAC,cAAc,EAAE,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {describeWithLocale} from '../../testing/EnvironmentHelpers.js';\nimport {MockIssuesModel} from '../../testing/MockIssuesModel.js';\nimport * as IssuesManager from '../issues_manager/issues_manager.js';\n\nfunction createProtocolIssue(sriMessageSignatureIssueDetails: Protocol.Audits.SRIMessageSignatureIssueDetails):\n    Protocol.Audits.InspectorIssue {\n  return {\n    code: Protocol.Audits.InspectorIssueCode.SRIMessageSignatureIssue,\n    details: {sriMessageSignatureIssueDetails},\n  };\n}\n\ndescribeWithLocale('SRIMessageSignatureIssue', () => {\n  const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n\n  it('can be created for various error reasons', () => {\n    const errorReasons = [\n      Protocol.Audits.SRIMessageSignatureError.MissingSignatureHeader,\n      Protocol.Audits.SRIMessageSignatureError.MissingSignatureInputHeader,\n      Protocol.Audits.SRIMessageSignatureError.InvalidSignatureHeader,\n      Protocol.Audits.SRIMessageSignatureError.InvalidSignatureInputHeader,\n      Protocol.Audits.SRIMessageSignatureError.SignatureHeaderValueIsNotByteSequence,\n      Protocol.Audits.SRIMessageSignatureError.SignatureHeaderValueIsParameterized,\n      Protocol.Audits.SRIMessageSignatureError.SignatureHeaderValueIsIncorrectLength,\n      Protocol.Audits.SRIMessageSignatureError.SignatureInputHeaderMissingLabel,\n      Protocol.Audits.SRIMessageSignatureError.SignatureInputHeaderValueNotInnerList,\n      Protocol.Audits.SRIMessageSignatureError.SignatureInputHeaderValueMissingComponents,\n      Protocol.Audits.SRIMessageSignatureError.SignatureInputHeaderInvalidComponentType,\n      Protocol.Audits.SRIMessageSignatureError.SignatureInputHeaderInvalidComponentName,\n      Protocol.Audits.SRIMessageSignatureError.SignatureInputHeaderInvalidHeaderComponentParameter,\n      Protocol.Audits.SRIMessageSignatureError.SignatureInputHeaderInvalidDerivedComponentParameter,\n      Protocol.Audits.SRIMessageSignatureError.SignatureInputHeaderKeyIdLength,\n      Protocol.Audits.SRIMessageSignatureError.SignatureInputHeaderInvalidParameter,\n      Protocol.Audits.SRIMessageSignatureError.SignatureInputHeaderMissingRequiredParameters,\n      Protocol.Audits.SRIMessageSignatureError.ValidationFailedSignatureExpired,\n      Protocol.Audits.SRIMessageSignatureError.ValidationFailedInvalidLength,\n      Protocol.Audits.SRIMessageSignatureError.ValidationFailedSignatureMismatch,\n    ];\n    for (const errorReason of errorReasons) {\n      const issueDetails = {\n        error: errorReason,\n        request: {\n          requestId: 'test-request-id' as Protocol.Network.RequestId,\n          url: 'https://example.com/',\n        },\n      };\n      const issue = createProtocolIssue(issueDetails);\n      const sriMessageSignatureIssues =\n          IssuesManager.SRIMessageSignatureIssue.SRIMessageSignatureIssue.fromInspectorIssue(mockModel, issue);\n      assert.lengthOf(sriMessageSignatureIssues, 1);\n      const sriMessageSignatureIssue = sriMessageSignatureIssues[0];\n\n      assert.strictEqual(sriMessageSignatureIssue.getCategory(), IssuesManager.Issue.IssueCategory.OTHER);\n      assert.deepEqual(sriMessageSignatureIssue.details(), issueDetails);\n      assert.strictEqual(sriMessageSignatureIssue.getKind(), IssuesManager.Issue.IssueKind.PAGE_ERROR);\n      assert.isNotNull(sriMessageSignatureIssue.getDescription());\n    }\n  });\n});\n"]}