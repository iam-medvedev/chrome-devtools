{"version":3,"file":"UnencodedDigestIssue.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/UnencodedDigestIssue.test.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAI7B,OAAO,EAAC,kBAAkB,EAAC,MAAM,qCAAqC,CAAC;AACvE,OAAO,EAAC,eAAe,EAAC,MAAM,kCAAkC,CAAC;AACjE,OAAO,KAAK,aAAa,MAAM,qCAAqC,CAAC;AAErE,SAAS,mBAAmB,CAAC,2BAAwE;IAEnG,OAAO;QACL,IAAI,sFAAyD;QAC7D,OAAO,EAAE,EAAC,2BAA2B,EAAC;KACvC,CAAC;AACJ,CAAC;AAED,kBAAkB,CAAC,sBAAsB,EAAE,GAAG,EAAE;IAC9C,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,EAAE,CAA2C,CAAC;IAEpF,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,YAAY,GAAG;;;;;SAKpB,CAAC;QACF,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;YACvC,MAAM,YAAY,GAAG;gBACnB,KAAK,EAAE,WAAW;gBAClB,OAAO,EAAE;oBACP,SAAS,EAAE,iBAA+C;oBAC1D,GAAG,EAAE,sBAAsB;iBAC5B;aACF,CAAC;YACF,MAAM,KAAK,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC;YAChD,MAAM,qBAAqB,GACvB,aAAa,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACjG,MAAM,CAAC,QAAQ,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC;YAC1C,MAAM,oBAAoB,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAEtD,MAAM,CAAC,WAAW,CAAC,oBAAoB,CAAC,WAAW,EAAE,wDAA0C,CAAC;YAChG,MAAM,CAAC,SAAS,CAAC,oBAAoB,CAAC,OAAO,EAAE,EAAE,YAAY,CAAC,CAAC;YAC/D,MAAM,CAAC,WAAW,CAAC,oBAAoB,CAAC,OAAO,EAAE,6DAA2C,CAAC;YAC7F,MAAM,CAAC,SAAS,CAAC,oBAAoB,CAAC,cAAc,EAAE,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {describeWithLocale} from '../../testing/EnvironmentHelpers.js';\nimport {MockIssuesModel} from '../../testing/MockIssuesModel.js';\nimport * as IssuesManager from '../issues_manager/issues_manager.js';\n\nfunction createProtocolIssue(unencodedDigestIssueDetails: Protocol.Audits.UnencodedDigestIssueDetails):\n    Protocol.Audits.InspectorIssue {\n  return {\n    code: Protocol.Audits.InspectorIssueCode.UnencodedDigestIssue,\n    details: {unencodedDigestIssueDetails},\n  };\n}\n\ndescribeWithLocale('UnencodedDigestIssue', () => {\n  const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n\n  it('can be created for various error reasons', () => {\n    const errorReasons = [\n      Protocol.Audits.UnencodedDigestError.IncorrectDigestLength,\n      Protocol.Audits.UnencodedDigestError.IncorrectDigestType,\n      Protocol.Audits.UnencodedDigestError.MalformedDictionary,\n      Protocol.Audits.UnencodedDigestError.UnknownAlgorithm,\n    ];\n    for (const errorReason of errorReasons) {\n      const issueDetails = {\n        error: errorReason,\n        request: {\n          requestId: 'test-request-id' as Protocol.Network.RequestId,\n          url: 'https://example.com/',\n        },\n      };\n      const issue = createProtocolIssue(issueDetails);\n      const unencodedDigestIssues =\n          IssuesManager.UnencodedDigestIssue.UnencodedDigestIssue.fromInspectorIssue(mockModel, issue);\n      assert.lengthOf(unencodedDigestIssues, 1);\n      const unencodedDigestIssue = unencodedDigestIssues[0];\n\n      assert.strictEqual(unencodedDigestIssue.getCategory(), IssuesManager.Issue.IssueCategory.OTHER);\n      assert.deepEqual(unencodedDigestIssue.details(), issueDetails);\n      assert.strictEqual(unencodedDigestIssue.getKind(), IssuesManager.Issue.IssueKind.PAGE_ERROR);\n      assert.isNotNull(unencodedDigestIssue.getDescription());\n    }\n  });\n});\n"]}