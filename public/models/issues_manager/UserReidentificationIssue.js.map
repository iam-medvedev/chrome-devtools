{"version":3,"file":"UserReidentificationIssue.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/UserReidentificationIssue.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAK7B,OAAO,EAAC,KAAK,EAA2B,MAAM,YAAY,CAAC;AAC3D,OAAO,EAGL,sBAAsB,GACvB,MAAM,+BAA+B,CAAC;AAEvC,MAAM,OAAO,yBAA0B,SAAQ,KAAK;IAClD,aAAa,CAAmD;IAEhE,YACI,YAA8D,EAAE,WAAwC;QAC1G,KAAK,CAAC,2BAA2B,EAAE,WAAW,CAAC,CAAC;QAChD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACpC,CAAC;IAED,UAAU;QACR,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC;QACnG,OAAO,GAAG,IAAI,CAAC,IAAI,EAAE,KAAK,SAAS,GAAG,CAAC;IACzC,CAAC;IAEQ,QAAQ;QACf,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACxE,CAAC;IAED,WAAW;QACT,yCAA2B;IAC7B,CAAC;IAED,cAAc;QACZ,MAAM,WAAW,GAAG,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC;IAC7C,CAAC;IAED,OAAO;QACL,iDAA6B;IAC/B,CAAC;IAED,MAAM,CAAC,kBAAkB,CAAC,WAAwC,EAAE,cAA8C;QAEhH,MAAM,gCAAgC,GAAG,cAAc,CAAC,OAAO,CAAC,gCAAgC,CAAC;QACjG,IAAI,CAAC,gCAAgC,EAAE,CAAC;YACtC,OAAO,CAAC,IAAI,CAAC,uDAAuD,CAAC,CAAC;YACtE,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,OAAO,CAAC,IAAI,yBAAyB,CAAC,gCAAgC,EAAE,WAAW,CAAC,CAAC,CAAC;IACxF,CAAC;CACF;AAED,iEAAiE;AACjE,MAAM,iBAAiB,GAAG,IAAI,GAAG,CAAuC;IACtE;QACE,2BAA2B;QAC3B;YACE,IAAI,EAAE,gCAAgC;YACtC,4DAA4D;YAC5D,0CAA0C;YAC1C,KAAK,EAAE,EAAE;SACV;KACF;CACF,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {Issue, IssueCategory, IssueKind} from './Issue.js';\nimport {\n  type LazyMarkdownIssueDescription,\n  type MarkdownIssueDescription,\n  resolveLazyDescription,\n} from './MarkdownIssueDescription.js';\n\nexport class UserReidentificationIssue extends Issue {\n  #issueDetails: Protocol.Audits.UserReidentificationIssueDetails;\n\n  constructor(\n      issueDetails: Protocol.Audits.UserReidentificationIssueDetails, issuesModel: SDK.IssuesModel.IssuesModel) {\n    super('UserReidentificationIssue', issuesModel);\n    this.#issueDetails = issueDetails;\n  }\n\n  primaryKey(): string {\n    const requestId = this.#issueDetails.request ? this.#issueDetails.request.requestId : 'no-request';\n    return `${this.code()}-(${requestId})`;\n  }\n\n  override requests(): Iterable<Protocol.Audits.AffectedRequest> {\n    return this.#issueDetails.request ? [this.#issueDetails.request] : [];\n  }\n\n  getCategory(): IssueCategory {\n    return IssueCategory.OTHER;\n  }\n\n  getDescription(): MarkdownIssueDescription|null {\n    const description = issueDescriptions.get(this.code());\n    if (!description) {\n      return null;\n    }\n    return resolveLazyDescription(description);\n  }\n\n  getKind(): IssueKind {\n    return IssueKind.IMPROVEMENT;\n  }\n\n  static fromInspectorIssue(issuesModel: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue):\n      UserReidentificationIssue[] {\n    const userReidentificationIssueDetails = inspectorIssue.details.userReidentificationIssueDetails;\n    if (!userReidentificationIssueDetails) {\n      console.warn('User Reidentification issue without details received.');\n      return [];\n    }\n    return [new UserReidentificationIssue(userReidentificationIssueDetails, issuesModel)];\n  }\n}\n\n// Add new issue types to this map (with a unique code per type).\nconst issueDescriptions = new Map<string, LazyMarkdownIssueDescription>([\n  [\n    'UserReidentificationIssue',\n    {\n      file: 'userReidentificationBlocked.md',\n      // TODO(https://g-issues.chromium.org/issues/409596758): Add\n      // internationalized learn more link text.\n      links: [],\n    },\n  ],\n]);\n"]}