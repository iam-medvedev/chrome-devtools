{"version":3,"file":"UnencodedDigestIssue.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/UnencodedDigestIssue.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAIhD,OAAO,EAAC,KAAK,EAA2B,MAAM,YAAY,CAAC;AAC3D,OAAO,EAGL,sBAAsB,GACvB,MAAM,+BAA+B,CAAC;AAEvC,MAAM,SAAS,GAAG;IAChB;;OAEG;IACH,qBAAqB,EAAE,qCAAqC;IAC5D;;OAEG;IACH,oBAAoB,EAAE,mCAAmC;CACjD,CAAC;AACX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,+CAA+C,EAAE,SAAS,CAAC,CAAC;AACrG,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAExF,MAAM,OAAO,oBAAqB,SAAQ,KAAa;IAC5C,aAAa,CAA8C;IAEpE,YAAY,YAAyD,EAAE,WAAwC;QAC7G,KAAK,CACD;YACE,IAAI,EAAE,GAAG,oFAAuD,KAAK,YAAY,CAAC,KAAK,EAAE;YACzF,OAAO,EAAE,GAAG,oFAAuD,KAAK,YAAY,CAAC,KAAK,EAAE;SAC7F,EACD,WAAW,CAAC,CAAC;QACjB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACpC,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAEQ,UAAU;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACxC,CAAC;IAEQ,cAAc;QACrB,MAAM,WAAW,GAAiC;YAChD,IAAI,EAAE,kBAAkB,IAAI,CAAC,OAAO,EAAE,CAAC,KAAK,KAAK;YACjD,KAAK,EAAE;gBACL;oBACE,IAAI,EAAE,6EAA6E;oBACnF,SAAS,EAAE,cAAc,CAAC,SAAS,CAAC,qBAAqB,CAAC;iBAC3D;gBACD;oBACE,IAAI,EAAE,yEAAyE;oBAC/E,SAAS,EAAE,cAAc,CAAC,SAAS,CAAC,oBAAoB,CAAC;iBAC1D;aACF;SACF,CAAC;QACF,OAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC;IAC7C,CAAC;IAEQ,WAAW;QAClB,yCAA2B;IAC7B,CAAC;IAEQ,OAAO;QACd,8CAA4B;IAC9B,CAAC;IAEQ,QAAQ;QACf,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAChE,CAAC;IAED,MAAM,CAAC,kBAAkB,CAAC,WAAwC,EAAE,cAA8C;QAEhH,MAAM,OAAO,GAAG,cAAc,CAAC,OAAO,CAAC,2BAA2B,CAAC;QACnE,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;YACjE,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,OAAO,CAAC,IAAI,oBAAoB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;IAC1D,CAAC;CACF","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {Issue, IssueCategory, IssueKind} from './Issue.js';\nimport {\n  type LazyMarkdownIssueDescription,\n  type MarkdownIssueDescription,\n  resolveLazyDescription,\n} from './MarkdownIssueDescription.js';\n\nconst UIStrings = {\n  /**\n   *@description Title for HTTP Unencoded Digest specification url\n   */\n  unencodedDigestHeader: 'HTTP Unencoded Digest specification',\n  /**\n   *@description Title for the URL of the integration of unencoded-digest and SRI.\n   */\n  integrityIntegration: 'Server-Initiated Integrity Checks',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/issues_manager/UnencodedDigestIssue.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nexport class UnencodedDigestIssue extends Issue<string> {\n  readonly #issueDetails: Protocol.Audits.UnencodedDigestIssueDetails;\n\n  constructor(issueDetails: Protocol.Audits.UnencodedDigestIssueDetails, issuesModel: SDK.IssuesModel.IssuesModel) {\n    super(\n        {\n          code: `${Protocol.Audits.InspectorIssueCode.UnencodedDigestIssue}::${issueDetails.error}`,\n          umaCode: `${Protocol.Audits.InspectorIssueCode.UnencodedDigestIssue}::${issueDetails.error}`,\n        },\n        issuesModel);\n    this.#issueDetails = issueDetails;\n  }\n\n  details(): Protocol.Audits.UnencodedDigestIssueDetails {\n    return this.#issueDetails;\n  }\n\n  override primaryKey(): string {\n    return JSON.stringify(this.details());\n  }\n\n  override getDescription(): MarkdownIssueDescription|null {\n    const description: LazyMarkdownIssueDescription = {\n      file: `unencodedDigest${this.details().error}.md`,\n      links: [\n        {\n          link: 'https://www.ietf.org/archive/id/draft-ietf-httpbis-unencoded-digest-01.html',\n          linkTitle: i18nLazyString(UIStrings.unencodedDigestHeader),\n        },\n        {\n          link: 'https://wicg.github.io/signature-based-sri/#unencoded-digest-validation',\n          linkTitle: i18nLazyString(UIStrings.integrityIntegration),\n        },\n      ],\n    };\n    return resolveLazyDescription(description);\n  }\n\n  override getCategory(): IssueCategory {\n    return IssueCategory.OTHER;\n  }\n\n  override getKind(): IssueKind {\n    return IssueKind.PAGE_ERROR;\n  }\n\n  override requests(): Iterable<Protocol.Audits.AffectedRequest> {\n    return this.details().request ? [this.details().request] : [];\n  }\n\n  static fromInspectorIssue(issuesModel: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue):\n      UnencodedDigestIssue[] {\n    const details = inspectorIssue.details.unencodedDigestIssueDetails;\n    if (!details) {\n      console.warn('Unencoded-Digest issue without details received.');\n      return [];\n    }\n    return [new UnencodedDigestIssue(details, issuesModel)];\n  }\n}\n"]}