{"version":3,"file":"TCPConnection.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/models/trace/lantern/simulation/TCPConnection.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Lantern from '../lantern.js';\n\nconst {TCPConnection} = Lantern.Simulation;\n\ndescribe('TCPConnection', () => {\n  describe('#constructor', () => {\n    it('should create the connection', () => {\n      const rtt = 150;\n      const throughput = 1600 * 1024;\n      const connection = new TCPConnection(rtt, throughput);\n      assert.ok(connection);\n      assert.strictEqual(connection._rtt, rtt);\n    });\n  });\n\n  describe('#maximumSaturatedConnections', () => {\n    it('should compute number of supported simulated requests', () => {\n      const availableThroughput = 1460 * 8 * 10;  // 10 TCP segments/second\n      assert.strictEqual(TCPConnection.maximumSaturatedConnections(100, availableThroughput), 1);\n      assert.strictEqual(TCPConnection.maximumSaturatedConnections(300, availableThroughput), 3);\n      assert.strictEqual(TCPConnection.maximumSaturatedConnections(1000, availableThroughput), 10);\n    });\n  });\n\n  describe('.setWarmed', () => {\n    it('adjusts the time to download appropriately', () => {\n      const connection = new TCPConnection(100, Infinity);\n      assert.strictEqual(connection.simulateDownloadUntil(0).timeElapsed, 300);\n      connection.setWarmed(true);\n      assert.strictEqual(connection.simulateDownloadUntil(0).timeElapsed, 100);\n    });\n  });\n\n  describe('.setCongestionWindow', () => {\n    it('adjusts the time to download appropriately', () => {\n      const connection = new TCPConnection(100, Infinity);\n      assert.deepEqual(connection.simulateDownloadUntil(50000), {\n        bytesDownloaded: 50000,\n        extraBytesDownloaded: 0,\n        congestionWindow: 40,\n        roundTrips: 5,\n        timeElapsed: 500,\n        connectionTiming: {\n          connectionTime: 250,\n          dnsResolutionTime: 0,\n          sslTime: 100,\n          timeToFirstByte: 300,\n        },\n      });\n      connection.setCongestionWindow(40);  // will download all in one round trip\n      assert.deepEqual(connection.simulateDownloadUntil(50000), {\n        bytesDownloaded: 50000,\n        extraBytesDownloaded: 0,\n        congestionWindow: 40,\n        roundTrips: 3,\n        timeElapsed: 300,\n        connectionTiming: {\n          connectionTime: 250,\n          dnsResolutionTime: 0,\n          sslTime: 100,\n          timeToFirstByte: 300,\n        },\n      });\n    });\n  });\n\n  describe('.setH2OverflowBytesDownloaded', () => {\n    it('adjusts the time to download appropriately for H2 connections', () => {\n      const connection = new TCPConnection(100, Infinity, 0, true, true);\n      connection.setWarmed(true);\n      assert.strictEqual(connection.simulateDownloadUntil(30000).timeElapsed, 200);\n      connection.setH2OverflowBytesDownloaded(20000);\n      assert.strictEqual(connection.simulateDownloadUntil(30000).timeElapsed, 100);\n      connection.setH2OverflowBytesDownloaded(50000);\n      assert.strictEqual(connection.simulateDownloadUntil(30000).timeElapsed, 0);\n    });\n\n    it('does not adjust the time to download for non-H2 connections', () => {\n      const connection = new TCPConnection(100, Infinity, 0, true, false);\n      connection.setWarmed(true);\n      assert.strictEqual(connection.simulateDownloadUntil(30000).timeElapsed, 200);\n      connection.setH2OverflowBytesDownloaded(20000);\n      assert.strictEqual(connection.simulateDownloadUntil(30000).timeElapsed, 200);\n      connection.setH2OverflowBytesDownloaded(50000);\n      assert.strictEqual(connection.simulateDownloadUntil(30000).timeElapsed, 200);\n    });\n  });\n\n  describe('.simulateDownloadUntil', () => {\n    describe('when maximumTime is not set', () => {\n      it('should provide the correct values small payload non-SSL', () => {\n        const connection = new TCPConnection(100, Infinity, 0, false);\n        assert.deepEqual(connection.simulateDownloadUntil(7300), {\n          bytesDownloaded: 7300,\n          extraBytesDownloaded: 0,\n          congestionWindow: 10,\n          roundTrips: 2,\n          timeElapsed: 200,\n          connectionTiming: {\n            connectionTime: 150,\n            dnsResolutionTime: 0,\n            sslTime: undefined,  // non-SSL\n            timeToFirstByte: 200,\n          },\n        });\n      });\n\n      it('should provide the correct values small payload SSL', () => {\n        const connection = new TCPConnection(100, Infinity, 0, true);\n        assert.deepEqual(connection.simulateDownloadUntil(7300), {\n          bytesDownloaded: 7300,\n          extraBytesDownloaded: 0,\n          congestionWindow: 10,\n          roundTrips: 3,\n          timeElapsed: 300,\n          connectionTiming: {\n            connectionTime: 250,\n            dnsResolutionTime: 0,\n            sslTime: 100,\n            timeToFirstByte: 300,\n          },\n        });\n      });\n\n      it('should provide the correct values small payload H2', () => {\n        const connection = new TCPConnection(100, Infinity, 0, true, true);\n        assert.deepEqual(connection.simulateDownloadUntil(7300), {\n          bytesDownloaded: 7300,\n          extraBytesDownloaded: 7300,\n          congestionWindow: 10,\n          roundTrips: 3,\n          timeElapsed: 300,\n          connectionTiming: {\n            connectionTime: 250,\n            dnsResolutionTime: 0,\n            sslTime: 100,\n            timeToFirstByte: 300,\n          },\n        });\n      });\n\n      it('should provide the correct values response time', () => {\n        const responseTime = 78;\n        const connection = new TCPConnection(100, Infinity, responseTime, true);\n        assert.deepEqual(connection.simulateDownloadUntil(7300), {\n          bytesDownloaded: 7300,\n          extraBytesDownloaded: 0,\n          congestionWindow: 10,\n          roundTrips: 3,\n          timeElapsed: 300 + responseTime,\n          connectionTiming: {\n            connectionTime: 250,\n            dnsResolutionTime: 0,\n            sslTime: 100,\n            timeToFirstByte: 378,\n          },\n        });\n      });\n\n      it('should provide the correct values large payload', () => {\n        const connection = new TCPConnection(100, 8 * 1000 * 1000);\n        const bytesToDownload = 10 * 1000 * 1000;  // 10 mb\n        assert.deepEqual(connection.simulateDownloadUntil(bytesToDownload), {\n          bytesDownloaded: bytesToDownload,\n          extraBytesDownloaded: 0,\n          congestionWindow: 68,\n          roundTrips: 105,\n          timeElapsed: 10500,\n          connectionTiming: {\n            connectionTime: 250,\n            dnsResolutionTime: 0,\n            sslTime: 100,\n            timeToFirstByte: 300,\n          },\n        });\n      });\n\n      it('should provide the correct values resumed small payload', () => {\n        const connection = new TCPConnection(100, Infinity, 0, true);\n        assert.deepEqual(connection.simulateDownloadUntil(7300, {timeAlreadyElapsed: 250}), {\n          bytesDownloaded: 7300,\n          extraBytesDownloaded: 0,\n          congestionWindow: 10,\n          roundTrips: 3,\n          timeElapsed: 50,\n          connectionTiming: {\n            connectionTime: 250,\n            dnsResolutionTime: 0,\n            sslTime: 100,\n            timeToFirstByte: 300,\n          },\n        });\n      });\n\n      it('should provide the correct values resumed small payload H2', () => {\n        const connection = new TCPConnection(100, Infinity, 0, true, true);\n        connection.setWarmed(true);\n        connection.setH2OverflowBytesDownloaded(10000);\n        assert.deepEqual(connection.simulateDownloadUntil(7300), {\n          bytesDownloaded: 0,\n          extraBytesDownloaded: 2700,  // 10000 - 7300\n          congestionWindow: 10,\n          roundTrips: 0,\n          timeElapsed: 0,\n          connectionTiming: {\n            timeToFirstByte: 0,\n          },\n        });\n      });\n\n      it('should provide the correct values resumed large payload', () => {\n        const connection = new TCPConnection(100, 8 * 1000 * 1000);\n        const bytesToDownload = 5 * 1000 * 1000;  // 5 mb\n        connection.setCongestionWindow(68);\n        assert.deepEqual(\n            connection.simulateDownloadUntil(bytesToDownload, {timeAlreadyElapsed: 5234}),\n            {\n              bytesDownloaded: bytesToDownload,\n              extraBytesDownloaded: 0,\n              congestionWindow: 68,\n              roundTrips: 51,  // 5 mb / (1460 * 68)\n              timeElapsed: 5100,\n              connectionTiming: {\n                connectionTime: 250,\n                dnsResolutionTime: 0,\n                sslTime: 100,\n                timeToFirstByte: 300,\n              },\n            },\n        );\n      });\n    });\n\n    describe('when maximumTime is set', () => {\n      it('should provide the correct values less than TTFB', () => {\n        const connection = new TCPConnection(100, Infinity, 0, false);\n        assert.deepEqual(\n            connection.simulateDownloadUntil(7300, {timeAlreadyElapsed: 0, maximumTimeToElapse: 68}),\n            {\n              bytesDownloaded: 7300,\n              extraBytesDownloaded: 0,\n              congestionWindow: 10,\n              roundTrips: 2,\n              timeElapsed: 200,\n              connectionTiming: {\n                connectionTime: 150,\n                dnsResolutionTime: 0,\n                sslTime: undefined,  // non-SSL\n                timeToFirstByte: 200,\n              },\n            },\n        );\n      });\n\n      it('should provide the correct values just over TTFB', () => {\n        const connection = new TCPConnection(100, Infinity, 0, false);\n        assert.deepEqual(\n            connection.simulateDownloadUntil(7300, {timeAlreadyElapsed: 0, maximumTimeToElapse: 250}),\n            {\n              bytesDownloaded: 7300,\n              extraBytesDownloaded: 0,\n              congestionWindow: 10,\n              roundTrips: 2,\n              timeElapsed: 200,\n              connectionTiming: {\n                connectionTime: 150,\n                dnsResolutionTime: 0,\n                sslTime: undefined,  // non-SSL\n                timeToFirstByte: 200,\n              },\n            },\n        );\n      });\n\n      it('should provide the correct values with already elapsed', () => {\n        const connection = new TCPConnection(100, Infinity, 0, false);\n        assert.deepEqual(\n            connection.simulateDownloadUntil(7300, {\n              timeAlreadyElapsed: 75,\n              maximumTimeToElapse: 250,\n            }),\n            {\n              bytesDownloaded: 7300,\n              extraBytesDownloaded: 0,\n              congestionWindow: 10,\n              roundTrips: 2,\n              timeElapsed: 125,\n              connectionTiming: {\n                connectionTime: 150,\n                dnsResolutionTime: 0,\n                sslTime: undefined,  // non-SSL\n                timeToFirstByte: 200,\n              },\n            },\n        );\n      });\n\n      it('should provide the correct values large payloads', () => {\n        const connection = new TCPConnection(100, 8 * 1000 * 1000);\n        const bytesToDownload = 10 * 1000 * 1000;  // 10 mb\n        assert.deepEqual(\n            connection.simulateDownloadUntil(bytesToDownload, {\n              timeAlreadyElapsed: 500,\n              maximumTimeToElapse: 740,\n            }),\n            {\n              bytesDownloaded: 683280,  // should be less than 68 * 1460 * 8\n              extraBytesDownloaded: 0,\n              congestionWindow: 68,\n              roundTrips: 8,\n              timeElapsed: 800,  // skips the handshake because time already elapsed\n              connectionTiming: {\n                connectionTime: 250,\n                dnsResolutionTime: 0,\n                sslTime: 100,\n                timeToFirstByte: 300,\n              },\n            },\n        );\n      });\n\n      it('should all add up', () => {\n        const connection = new TCPConnection(100, 8 * 1000 * 1000);\n        const bytesToDownload = 10 * 1000 * 1000;  // 10 mb\n        const firstStoppingPoint = 5234;\n        const secondStoppingPoint = 315;\n        const thirdStoppingPoint = 10500 - firstStoppingPoint - secondStoppingPoint;\n\n        const firstSegment = connection.simulateDownloadUntil(bytesToDownload, {\n          timeAlreadyElapsed: 0,\n          maximumTimeToElapse: firstStoppingPoint,\n        });\n        const firstOvershoot = firstSegment.timeElapsed - firstStoppingPoint;\n\n        connection.setCongestionWindow(firstSegment.congestionWindow);\n        const secondSegment = connection.simulateDownloadUntil(\n            bytesToDownload - firstSegment.bytesDownloaded,\n            {\n              timeAlreadyElapsed: firstSegment.timeElapsed,\n              maximumTimeToElapse: secondStoppingPoint - firstOvershoot,\n            },\n        );\n        const secondOvershoot = firstOvershoot + secondSegment.timeElapsed - secondStoppingPoint;\n\n        connection.setCongestionWindow(secondSegment.congestionWindow);\n        const thirdSegment = connection.simulateDownloadUntil(\n            bytesToDownload - firstSegment.bytesDownloaded - secondSegment.bytesDownloaded,\n            {timeAlreadyElapsed: firstSegment.timeElapsed + secondSegment.timeElapsed},\n        );\n        const thirdOvershoot = secondOvershoot + thirdSegment.timeElapsed - thirdStoppingPoint;\n\n        assert.strictEqual(thirdOvershoot, 0);\n        assert.strictEqual(\n            firstSegment.bytesDownloaded + secondSegment.bytesDownloaded + thirdSegment.bytesDownloaded,\n            bytesToDownload,\n        );\n        assert.strictEqual(\n            firstSegment.timeElapsed + secondSegment.timeElapsed + thirdSegment.timeElapsed,\n            10500,\n        );\n      });\n    });\n  });\n});\n"]}