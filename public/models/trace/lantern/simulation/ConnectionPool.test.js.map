{"version":3,"file":"ConnectionPool.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/models/trace/lantern/simulation/ConnectionPool.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,OAAO,MAAM,eAAe,CAAC;AAEzC,MAAM,EAAC,cAAc,EAAC,GAAG,OAAO,CAAC,UAAU,CAAC;AAE5C,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,MAAM,GAAG,GAAG,GAAG,CAAC;IAChB,MAAM,UAAU,GAAG,KAAK,GAAG,IAAI,CAAC;IAChC,IAAI,SAAiB,CAAC;IAEtB,SAAS,OAAO,CAAC,OAA8C,EAAE;QAC/D,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,oBAAoB,CAAC;QAC7C,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;QACnC,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC;QAEnC,OAAO;YACL,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC;YAC9B,GAAG;YACH,QAAQ,EAAE,UAAU;YACpB,SAAS,EAAE,EAAC,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,IAAI,EAAC;YACjD,GAAG,IAAI;SACwB,CAAC;IACpC,CAAC;IAED,SAAS,iBAAiB,CAAC,OAK1B;QACC,MAAM,QAAQ,GAA+C;YAC3D,GAAG,EAAE,GAAG;YACR,UAAU,EAAE,IAAI;YAChB,qBAAqB,EAAE,IAAI,GAAG,EAAE;YAChC,0BAA0B,EAAE,IAAI,GAAG,EAAE;YACrC,+EAA+E;YAC/E,qBAAqB,EAAE,CAAC;YACxB,oBAAoB,EAAE,CAAC;YACvB,kBAAkB,EAAE,CAAC;YACrB,yBAAyB,EAAE,CAAC;SAC7B,CAAC;QACF,OAAO,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED,UAAU,CAAC,GAAG,EAAE;QACd,SAAS,GAAG,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;YAChC,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,iBAAiB,CAAC,EAAC,GAAG,EAAE,UAAU,EAAC,CAAC,CAAC,CAAC;YACnF,sDAAsD;YACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,oBAAoB,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;YAC7E,6CAA6C;YAC7C,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YAE1D,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACxB,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YACtD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,CAAE,wBAAwB;QAC7E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;YACjC,MAAM,OAAO,GAAG,OAAO,CAAC,EAAC,GAAG,EAAE,qBAAqB,EAAC,CAAC,CAAC;YACtD,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC,OAAO,CAAC,EAAE,iBAAiB,CAAC,EAAC,GAAG,EAAE,UAAU,EAAC,CAAC,CAAC,CAAC;YACjF,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC5E,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE,gCAAgC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;YAChC,MAAM,OAAO,GAAG,OAAO,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YAC1C,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC,OAAO,CAAC,EAAE,iBAAiB,CAAC,EAAC,GAAG,EAAE,UAAU,EAAC,CAAC,CAAC,CAAC;YACjF,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,wBAAwB,CAAC,CAAC;YAC1D,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,oBAAoB,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,qBAAqB,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YACpE,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,iBAAiB,CAAC,EAAC,GAAG,EAAE,UAAU,EAAE,qBAAqB,EAAC,CAAC,CAAC,CAAC;YAC1G,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACxB,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC5D,MAAM,0BAA0B,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YACzE,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,iBAAiB,CAAC,EAAC,GAAG,EAAE,UAAU,EAAE,0BAA0B,EAAC,CAAC,CAAC,CAAC;YAC/G,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACxB,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;YACrE,MAAM,QAAQ,GAAG,OAAO,EAAE,CAAC;YAC3B,MAAM,QAAQ,GAAG,OAAO,EAAE,CAAC;YAC3B,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,iBAAiB,CAAC,EAAC,GAAG,EAAE,UAAU,EAAC,CAAC,CAAC,CAAC;YAE5F,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC9C,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,kCAAkC,CAAC,QAAQ,CAAC,EAAE,cAAc,CAAC,CAAC;gBACtF,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,kCAAkC,CAAC,QAAQ,CAAC,EAAE,cAAc,CAAC,CAAC;YACxF,CAAC;YAED,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,iBAAiB,CAAC,EAAC,GAAG,EAAE,UAAU,EAAC,CAAC,CAAC,CAAC;YACnF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE,+BAA+B,CAAC,YAAY,CAAC,CAAC;YACrF,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,OAAO,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;YACxE,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,OAAO,EAAE,iBAAiB,CAAC,EAAC,GAAG,EAAE,UAAU,EAAC,CAAC,CAAC,CAAC;YAC/E,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YAClE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,yCAAyC,CAAC,CAAC;YACvE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,yCAAyC,CAAC,CAAC;YACvE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,yCAAyC,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,UAAU,GAAG,OAAO,EAAE,CAAC;YAC7B,MAAM,UAAU,GAAG,OAAO,EAAE,CAAC;YAC7B,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,iBAAiB,CAAC,EAAC,GAAG,EAAE,UAAU,EAAC,CAAC,CAAC,CAAC;YAChG,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAEjE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,iCAAiC,CAAC,CAAC;YACzE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,iCAAiC,CAAC,CAAC;YACzE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAEzB,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,oBAAoB,CAAC,IAAI,EAAE,EAAE,CAAC;gBAClF,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC7B,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,iCAAiC,CAAC,CAAC;YACzE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,kCAAkC,CAAC,UAAU,CAAC,EAAE,iCAAiC,CAAC,CAAC;QACtG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,OAAO,GAAG,OAAO,EAAE,CAAC;YAC1B,MAAM,OAAO,GAAG,OAAO,EAAE,CAAC;YAC1B,MAAM,OAAO,GAAG,OAAO,EAAE,CAAC;YAC1B,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,iBAAiB,CAAC,EAAC,GAAG,EAAE,UAAU,EAAC,CAAC,CAAC,CAAC;YACnG,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAC9D,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAC9D,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAE9D,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;YACvE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACzB,MAAM,CAAC,cAAc,EAAE,gBAAgB,EAAE,iBAAiB,CAAC,GAAG,WAAW,CAAC;YAC1E,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC/B,cAAc,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;YACvC,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACjC,gBAAgB,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;YAC1C,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAClC,iBAAiB,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAE5C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,iBAAiB,CAAC,CAAC;YAC7D,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,gBAAgB,CAAC,CAAC;YAC5D,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,cAAc,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,QAAQ,GAAG,OAAO,EAAE,CAAC;YAC3B,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,CAAC,QAAQ,CAAC,EAAE,iBAAiB,CAAC,EAAC,GAAG,EAAE,UAAU,EAAC,CAAC,CAAC,CAAC;YAClF,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;YACzE,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,QAAQ,EAAE,iBAAiB,CAAC,EAAC,GAAG,EAAE,UAAU,EAAC,CAAC,CAAC,CAAC;YAChF,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;YAEzB,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YAEnD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,+BAA+B,CAAC,CAAC;YAEzE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC,CAAC;YAE5C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,uCAAuC,CAAC,CAAC;YAChF,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,+BAA+B,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Lantern from '../lantern.js';\n\nconst {ConnectionPool} = Lantern.Simulation;\n\ndescribe('ConnectionPool', () => {\n  const rtt = 100;\n  const throughput = 10000 * 1024;\n  let requestId: number;\n\n  function request(data: Partial<Lantern.Types.NetworkRequest> = {}): Lantern.Types.NetworkRequest {\n    const url = data.url || 'http://example.com';\n    const origin = new URL(url).origin;\n    const scheme = url.split(':')[0];\n    const host = new URL(url).hostname;\n\n    return {\n      requestId: String(requestId++),\n      url,\n      protocol: 'http/1.1',\n      parsedURL: {scheme, securityOrigin: origin, host},\n      ...data,\n    } as Lantern.Types.NetworkRequest;\n  }\n\n  function simulationOptions(options: {\n    rtt?: number,\n    throughput?: number,\n    additionalRttByOrigin?: Map<string, number>,\n    serverResponseTimeByOrigin?: Map<string, number>,\n  }): Required<Lantern.Types.Simulation.Options> {\n    const defaults: Required<Lantern.Types.Simulation.Options> = {\n      rtt: 150,\n      throughput: 1024,\n      additionalRttByOrigin: new Map(),\n      serverResponseTimeByOrigin: new Map(),\n      // These options are not used by ConnectionPool, but are required in the types.\n      cpuSlowdownMultiplier: 1,\n      layoutTaskMultiplier: 1,\n      observedThroughput: 1,\n      maximumConcurrentRequests: 8,\n    };\n    return Object.assign(defaults, options);\n  }\n\n  beforeEach(() => {\n    requestId = 1;\n  });\n\n  describe('#constructor', () => {\n    it('should create the pool', () => {\n      const pool = new ConnectionPool([request()], simulationOptions({rtt, throughput}));\n      // Make sure 6 connections are created for each origin\n      assert.lengthOf(pool.connectionsByOrigin.get('http://example.com') ?? [], 6);\n      // Make sure it populates connectionWasReused\n      assert.isFalse(pool.connectionReusedByRequestId.get('1'));\n\n      const connection = pool.connectionsByOrigin.get('http://example.com')?.[0];\n      assert.isOk(connection);\n      assert.strictEqual(connection.rtt, rtt);\n      assert.strictEqual(connection.throughput, throughput);\n      assert.strictEqual(connection.serverLatency, 30);  // sets to default value\n    });\n\n    it('should set TLS properly', () => {\n      const recordA = request({url: 'https://example.com'});\n      const pool = new ConnectionPool([recordA], simulationOptions({rtt, throughput}));\n      const connection = pool.connectionsByOrigin.get('https://example.com')?.[0];\n      assert.isOk(connection?.ssl, 'should have set connection TLS');\n    });\n\n    it('should set H2 properly', () => {\n      const recordA = request({protocol: 'h2'});\n      const pool = new ConnectionPool([recordA], simulationOptions({rtt, throughput}));\n      const connection = pool.connectionsByOrigin.get('http://example.com')?.[0];\n      assert.isOk(connection?.isH2(), 'should have set HTTP/2');\n      assert.lengthOf(pool.connectionsByOrigin.get('http://example.com') ?? [], 1);\n    });\n\n    it('should set origin-specific RTT properly', () => {\n      const additionalRttByOrigin = new Map([['http://example.com', 63]]);\n      const pool = new ConnectionPool([request()], simulationOptions({rtt, throughput, additionalRttByOrigin}));\n      const connection = pool.connectionsByOrigin.get('http://example.com')?.[0];\n      assert.isOk(connection);\n      assert.strictEqual(connection.rtt, rtt + 63);\n    });\n\n    it('should set origin-specific server latency properly', () => {\n      const serverResponseTimeByOrigin = new Map([['http://example.com', 63]]);\n      const pool = new ConnectionPool([request()], simulationOptions({rtt, throughput, serverResponseTimeByOrigin}));\n      const connection = pool.connectionsByOrigin.get('http://example.com')?.[0];\n      assert.isOk(connection);\n      assert.strictEqual(connection.serverLatency, 63);\n    });\n  });\n\n  describe('.acquire', () => {\n    it('should remember the connection associated with each request', () => {\n      const requestA = request();\n      const requestB = request();\n      const pool = new ConnectionPool([requestA, requestB], simulationOptions({rtt, throughput}));\n\n      const connectionForA = pool.acquire(requestA);\n      const connectionForB = pool.acquire(requestB);\n      for (let i = 0; i < 10; i++) {\n        assert.strictEqual(pool.acquireActiveConnectionFromRequest(requestA), connectionForA);\n        assert.strictEqual(pool.acquireActiveConnectionFromRequest(requestB), connectionForB);\n      }\n\n      assert.deepEqual(pool.connectionsInUse(), [connectionForA, connectionForB]);\n    });\n\n    it('should allocate at least 6 connections', () => {\n      const pool = new ConnectionPool([request()], simulationOptions({rtt, throughput}));\n      for (let i = 0; i < 6; i++) {\n        assert.isOk(pool.acquire(request()), `did not find connection for ${i}th request`);\n      }\n    });\n\n    it('should allocate all connections', () => {\n      const records = new Array(7).fill(undefined, 0, 7).map(() => request());\n      const pool = new ConnectionPool(records, simulationOptions({rtt, throughput}));\n      const connections = records.map(request => pool.acquire(request));\n      assert.isOk(connections[0], 'did not find connection for 1st request');\n      assert.isOk(connections[5], 'did not find connection for 6th request');\n      assert.isOk(connections[6], 'did not find connection for 7th request');\n    });\n\n    it('should be oblivious to connection reuse', () => {\n      const coldRecord = request();\n      const warmRecord = request();\n      const pool = new ConnectionPool([coldRecord, warmRecord], simulationOptions({rtt, throughput}));\n      pool.connectionReusedByRequestId.set(warmRecord.requestId, true);\n\n      assert.isOk(pool.acquire(coldRecord), 'should have acquired connection');\n      assert.isOk(pool.acquire(warmRecord), 'should have acquired connection');\n      pool.release(coldRecord);\n\n      for (const connection of pool.connectionsByOrigin.get('http://example.com') ?? []) {\n        connection.setWarmed(true);\n      }\n\n      assert.isOk(pool.acquire(coldRecord), 'should have acquired connection');\n      assert.isOk(pool.acquireActiveConnectionFromRequest(warmRecord), 'should have acquired connection');\n    });\n\n    it('should acquire in order of warmness', () => {\n      const recordA = request();\n      const recordB = request();\n      const recordC = request();\n      const pool = new ConnectionPool([recordA, recordB, recordC], simulationOptions({rtt, throughput}));\n      pool.connectionReusedByRequestId.set(recordA.requestId, true);\n      pool.connectionReusedByRequestId.set(recordB.requestId, true);\n      pool.connectionReusedByRequestId.set(recordC.requestId, true);\n\n      const connections = pool.connectionsByOrigin.get('http://example.com');\n      assert.isOk(connections);\n      const [connectionWarm, connectionWarmer, connectionWarmest] = connections;\n      connectionWarm.setWarmed(true);\n      connectionWarm.setCongestionWindow(10);\n      connectionWarmer.setWarmed(true);\n      connectionWarmer.setCongestionWindow(100);\n      connectionWarmest.setWarmed(true);\n      connectionWarmest.setCongestionWindow(1000);\n\n      assert.strictEqual(pool.acquire(recordA), connectionWarmest);\n      assert.strictEqual(pool.acquire(recordB), connectionWarmer);\n      assert.strictEqual(pool.acquire(recordC), connectionWarm);\n    });\n  });\n\n  describe('.release', () => {\n    it('noop for request without connection', () => {\n      const requestA = request();\n      const pool = new ConnectionPool([requestA], simulationOptions({rtt, throughput}));\n      assert.isUndefined(pool.release(requestA));\n    });\n\n    it('frees the connection for reissue', () => {\n      const requests = new Array(6).fill(undefined, 0, 7).map(() => request());\n      const pool = new ConnectionPool(requests, simulationOptions({rtt, throughput}));\n      requests.push(request());\n\n      requests.forEach(request => pool.acquire(request));\n\n      assert.lengthOf(pool.connectionsInUse(), 6);\n      assert.isOk(!pool.acquire(requests[6]), 'had connection that is in use');\n\n      pool.release(requests[0]);\n      assert.lengthOf(pool.connectionsInUse(), 5);\n\n      assert.isOk(pool.acquire(requests[6]), 'could not reissue released connection');\n      assert.isOk(!pool.acquire(requests[0]), 'had connection that is in use');\n    });\n  });\n});\n"]}