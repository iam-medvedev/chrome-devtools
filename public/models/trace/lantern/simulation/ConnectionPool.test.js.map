{"version":3,"file":"ConnectionPool.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/models/trace/lantern/simulation/ConnectionPool.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// @ts-nocheck TODO(crbug.com/348449529)\n\nimport * as Lantern from '../lantern.js';\n\nconst {ConnectionPool} = Lantern.Simulation;\n\ndescribe('ConnectionPool', () => {\n  const rtt = 100;\n  const throughput = 10000 * 1024;\n  let requestId: number;\n\n  function request(data: Partial<Lantern.NetworkRequest> = {}): Lantern.NetworkRequest {\n    const url = data.url || 'http://example.com';\n    const origin = new URL(url).origin;\n    const scheme = url.split(':')[0];\n\n    return {\n      requestId: String(requestId++),\n      url,\n      protocol: 'http/1.1',\n      parsedURL: {scheme, securityOrigin: origin},\n      ...data,\n    };\n  }\n\n  function simulationOptions(options) {\n    return Object.assign(\n        {\n          rtt: 150,\n          throughput: 1024,\n          additionalRttByOrigin: new Map(),\n          serverResponseTimeByOrigin: new Map(),\n        },\n        options,\n    );\n  }\n\n  beforeEach(() => {\n    requestId = 1;\n  });\n\n  describe('#constructor', () => {\n    it('should create the pool', () => {\n      const pool = new ConnectionPool([request()], simulationOptions({rtt, throughput}));\n      // Make sure 6 connections are created for each origin\n      assert.strictEqual(pool._connectionsByOrigin.get('http://example.com').length, 6);\n      // Make sure it populates connectionWasReused\n      assert.strictEqual(pool._connectionReusedByRequestId.get('1'), false);\n\n      const connection = pool._connectionsByOrigin.get('http://example.com')[0];\n      assert.strictEqual(connection._rtt, rtt);\n      assert.strictEqual(connection._throughput, throughput);\n      assert.strictEqual(connection._serverLatency, 30);  // sets to default value\n    });\n\n    it('should set TLS properly', () => {\n      const recordA = request({url: 'https://example.com'});\n      const pool = new ConnectionPool([recordA], simulationOptions({rtt, throughput}));\n      const connection = pool._connectionsByOrigin.get('https://example.com')[0];\n      assert.ok(connection._ssl, 'should have set connection TLS');\n    });\n\n    it('should set H2 properly', () => {\n      const recordA = request({protocol: 'h2'});\n      const pool = new ConnectionPool([recordA], simulationOptions({rtt, throughput}));\n      const connection = pool._connectionsByOrigin.get('http://example.com')[0];\n      assert.ok(connection.isH2(), 'should have set HTTP/2');\n      assert.strictEqual(pool._connectionsByOrigin.get('http://example.com').length, 1);\n    });\n\n    it('should set origin-specific RTT properly', () => {\n      const additionalRttByOrigin = new Map([['http://example.com', 63]]);\n      const pool = new ConnectionPool([request()], simulationOptions({rtt, throughput, additionalRttByOrigin}));\n      const connection = pool._connectionsByOrigin.get('http://example.com')[0];\n      assert.ok(connection._rtt, rtt + 63);\n    });\n\n    it('should set origin-specific server latency properly', () => {\n      const serverResponseTimeByOrigin = new Map([['http://example.com', 63]]);\n      const pool = new ConnectionPool([request()], simulationOptions({rtt, throughput, serverResponseTimeByOrigin}));\n      const connection = pool._connectionsByOrigin.get('http://example.com')[0];\n      assert.ok(connection._serverLatency, 63);\n    });\n  });\n\n  describe('.acquire', () => {\n    it('should remember the connection associated with each request', () => {\n      const requestA = request();\n      const requestB = request();\n      const pool = new ConnectionPool([requestA, requestB], simulationOptions({rtt, throughput}));\n\n      const connectionForA = pool.acquire(requestA);\n      const connectionForB = pool.acquire(requestB);\n      for (let i = 0; i < 10; i++) {\n        assert.strictEqual(pool.acquireActiveConnectionFromRequest(requestA), connectionForA);\n        assert.strictEqual(pool.acquireActiveConnectionFromRequest(requestB), connectionForB);\n      }\n\n      assert.deepStrictEqual(pool.connectionsInUse(), [connectionForA, connectionForB]);\n    });\n\n    it('should allocate at least 6 connections', () => {\n      const pool = new ConnectionPool([request()], simulationOptions({rtt, throughput}));\n      for (let i = 0; i < 6; i++) {\n        assert.ok(pool.acquire(request()), `did not find connection for ${i}th request`);\n      }\n    });\n\n    it('should allocate all connections', () => {\n      const records = new Array(7).fill(undefined, 0, 7).map(() => request());\n      const pool = new ConnectionPool(records, simulationOptions({rtt, throughput}));\n      const connections = records.map(request => pool.acquire(request));\n      assert.ok(connections[0], 'did not find connection for 1st request');\n      assert.ok(connections[5], 'did not find connection for 6th request');\n      assert.ok(connections[6], 'did not find connection for 7th request');\n    });\n\n    it('should be oblivious to connection reuse', () => {\n      const coldRecord = request();\n      const warmRecord = request();\n      const pool = new ConnectionPool([coldRecord, warmRecord], simulationOptions({rtt, throughput}));\n      pool._connectionReusedByRequestId.set(warmRecord.requestId, true);\n\n      assert.ok(pool.acquire(coldRecord), 'should have acquired connection');\n      assert.ok(pool.acquire(warmRecord), 'should have acquired connection');\n      pool.release(coldRecord);\n\n      for (const connection of pool._connectionsByOrigin.get('http://example.com')) {\n        connection.setWarmed(true);\n      }\n\n      assert.ok(pool.acquire(coldRecord), 'should have acquired connection');\n      assert.ok(pool.acquireActiveConnectionFromRequest(warmRecord), 'should have acquired connection');\n    });\n\n    it('should acquire in order of warmness', () => {\n      const recordA = request();\n      const recordB = request();\n      const recordC = request();\n      const pool = new ConnectionPool([recordA, recordB, recordC], simulationOptions({rtt, throughput}));\n      pool._connectionReusedByRequestId.set(recordA.requestId, true);\n      pool._connectionReusedByRequestId.set(recordB.requestId, true);\n      pool._connectionReusedByRequestId.set(recordC.requestId, true);\n\n      const [connectionWarm, connectionWarmer, connectionWarmest] = pool._connectionsByOrigin.get('http://example.com');\n      connectionWarm.setWarmed(true);\n      connectionWarm.setCongestionWindow(10);\n      connectionWarmer.setWarmed(true);\n      connectionWarmer.setCongestionWindow(100);\n      connectionWarmest.setWarmed(true);\n      connectionWarmest.setCongestionWindow(1000);\n\n      assert.strictEqual(pool.acquire(recordA), connectionWarmest);\n      assert.strictEqual(pool.acquire(recordB), connectionWarmer);\n      assert.strictEqual(pool.acquire(recordC), connectionWarm);\n    });\n  });\n\n  describe('.release', () => {\n    it('noop for request without connection', () => {\n      const requestA = request();\n      const pool = new ConnectionPool([requestA], simulationOptions({rtt, throughput}));\n      assert.strictEqual(pool.release(requestA), undefined);\n    });\n\n    it('frees the connection for reissue', () => {\n      const requests = new Array(6).fill(undefined, 0, 7).map(() => request());\n      const pool = new ConnectionPool(requests, simulationOptions({rtt, throughput}));\n      requests.push(request());\n\n      requests.forEach(request => pool.acquire(request));\n\n      assert.strictEqual(pool.connectionsInUse().length, 6);\n      assert.ok(!pool.acquire(requests[6]), 'had connection that is in use');\n\n      pool.release(requests[0]);\n      assert.strictEqual(pool.connectionsInUse().length, 5);\n\n      assert.ok(pool.acquire(requests[6]), 'could not reissue released connection');\n      assert.ok(!pool.acquire(requests[0]), 'had connection that is in use');\n    });\n  });\n});\n"]}