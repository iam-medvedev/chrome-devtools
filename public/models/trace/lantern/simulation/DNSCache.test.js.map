{"version":3,"file":"DNSCache.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/models/trace/lantern/simulation/DNSCache.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,mGAAmG;AAEnG,OAAO,KAAK,OAAO,MAAM,eAAe,CAAC;AAEzC,MAAM,EAAC,QAAQ,EAAC,GAAG,OAAO,CAAC,UAAU,CAAC;AAEtC,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC;AAE1C,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,IAAI,GAAgC,CAAC;IACrC,IAAI,OAA+B,CAAC;IAEpC,UAAU,CAAC,GAAG,EAAE;QACd,GAAG,GAAG,IAAI,QAAQ,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC;QAC/B,OAAO,GAAG;YACR,SAAS,EAAE;gBACT,IAAI,EAAE,aAAa;gBACnB,MAAM,EAAE,OAAO;gBACf,cAAc,EAAE,EAAE;aACnB;SACwB,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,cAAc,GAAG,GAAG,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;YAC3D,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,cAAc,GAAG,GAAG,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC,CAAC;YAChF,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,GAAG,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAC,WAAW,EAAE,CAAC,EAAC,CAAC,CAAC;YACtD,MAAM,cAAc,GAAG,GAAG,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC,CAAC;YAChF,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;YAChC,GAAG,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAC,WAAW,EAAE,CAAC,EAAE,iBAAiB,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/E,MAAM,cAAc,GAAG,GAAG,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC,CAAC;YAChF,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;YAChC,GAAG,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAC,WAAW,EAAE,CAAC,EAAE,iBAAiB,EAAE,IAAI,EAAC,CAAC,CAAC;YAC/E,MAAM,YAAY,GAAG,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,mBAAmB,EAAC,EAAC,CAAC;YAC9D,MAAM,cAAc,GAAG,GAAG,CAAC,sBAAsB,CAAC,YAAY,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC,CAAC;YACrF,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,GAAG,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAC,WAAW,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAC,CAAC,CAAC;YAClF,GAAG,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAC,WAAW,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAC,CAAC,CAAC;YAClF,GAAG,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAC,WAAW,EAAE,GAAG,EAAE,iBAAiB,EAAE,IAAI,EAAC,CAAC,CAAC;YACjF,GAAG,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAC,WAAW,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAC,CAAC,CAAC;YAElF,MAAM,CAAC,GAAG,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAC,WAAW,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC;YACzF,MAAM,CAAC,GAAG,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,UAAU,GAAG,EAAE,CAAC,CAAC;YAChG,MAAM,CAAC,GAAG,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7E,MAAM,CAAC,GAAG,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YAC/C,MAAM,cAAc,GAAG,GAAG,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;YAC3D,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// @ts-nocheck - TODO(crbug.com/348449529) requests need to be whole Lantern.NetworkRequest objects\n\nimport * as Lantern from '../lantern.js';\n\nconst {DNSCache} = Lantern.Simulation;\n\nconst MULTIPLIER = DNSCache.rttMultiplier;\n\ndescribe('DNSCache', () => {\n  let dns: Lantern.Simulation.DNSCache;\n  let request: Lantern.NetworkRequest;\n\n  beforeEach(() => {\n    dns = new DNSCache({rtt: 100});\n    request = {\n      parsedURL: {\n        host: 'example.com',\n        scheme: 'https',\n        securityOrigin: '',\n      },\n    } as Lantern.NetworkRequest;\n  });\n\n  describe('.getTimeUntilResolution', () => {\n    it('should return the RTT multiplied', () => {\n      const resolutionTime = dns.getTimeUntilResolution(request);\n      expect(resolutionTime).to.equal(100 * MULTIPLIER);\n    });\n\n    it('should return time with requestedAt', () => {\n      const resolutionTime = dns.getTimeUntilResolution(request, {requestedAt: 1500});\n      expect(resolutionTime).to.equal(100 * MULTIPLIER);\n    });\n\n    it('should not cache by default', () => {\n      dns.getTimeUntilResolution(request, {requestedAt: 0});\n      const resolutionTime = dns.getTimeUntilResolution(request, {requestedAt: 1000});\n      expect(resolutionTime).to.equal(100 * MULTIPLIER);\n    });\n\n    it('should cache when told', () => {\n      dns.getTimeUntilResolution(request, {requestedAt: 0, shouldUpdateCache: true});\n      const resolutionTime = dns.getTimeUntilResolution(request, {requestedAt: 1000});\n      expect(resolutionTime).to.equal(0);\n    });\n\n    it('should cache by domain', () => {\n      dns.getTimeUntilResolution(request, {requestedAt: 0, shouldUpdateCache: true});\n      const otherRequest = {parsedURL: {host: 'other-example.com'}};\n      const resolutionTime = dns.getTimeUntilResolution(otherRequest, {requestedAt: 1000});\n      expect(resolutionTime).to.equal(100 * MULTIPLIER);\n    });\n\n    it('should not update cache with later times', () => {\n      dns.getTimeUntilResolution(request, {requestedAt: 1000, shouldUpdateCache: true});\n      dns.getTimeUntilResolution(request, {requestedAt: 1500, shouldUpdateCache: true});\n      dns.getTimeUntilResolution(request, {requestedAt: 500, shouldUpdateCache: true});\n      dns.getTimeUntilResolution(request, {requestedAt: 5000, shouldUpdateCache: true});\n\n      expect(dns.getTimeUntilResolution(request, {requestedAt: 0})).to.equal(100 * MULTIPLIER);\n      expect(dns.getTimeUntilResolution(request, {requestedAt: 550})).to.equal(100 * MULTIPLIER - 50);\n      expect(dns.getTimeUntilResolution(request, {requestedAt: 1000})).to.equal(0);\n      expect(dns.getTimeUntilResolution(request, {requestedAt: 2000})).to.equal(0);\n    });\n  });\n\n  describe('.setResolvedAt', () => {\n    it('should set the DNS resolution time for a request', () => {\n      dns.setResolvedAt(request.parsedURL.host, 123);\n      const resolutionTime = dns.getTimeUntilResolution(request);\n      expect(resolutionTime).to.equal(123);\n    });\n  });\n});\n"]}