{"version":3,"file":"Interactive.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/models/trace/lantern/metrics/Interactive.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Lantern from '../lantern.js';\nimport {getComputationDataFromFixture, loadTrace} from '../testing/testing.js';\n\nconst {Interactive, FirstContentfulPaint, LargestContentfulPaint} = Lantern.Metrics;\n\ndescribe('Metrics: Lantern TTI', () => {\n  let trace: Lantern.Types.Trace;\n  let iframeTrace: Lantern.Types.Trace;\n  before(async function() {\n    trace = await loadTrace(this, 'lantern/progressive-app/trace.json.gz');\n    iframeTrace = await loadTrace(this, 'lantern/iframe/trace.json.gz');\n  });\n\n  it('should compute predicted value', async () => {\n    const data = await getComputationDataFromFixture({trace});\n    const result = Interactive.compute(data, {\n      lcpResult: LargestContentfulPaint.compute(data, {\n        fcpResult: FirstContentfulPaint.compute(data),\n      }),\n    });\n\n    assert.deepStrictEqual(\n        {\n          timing: Math.round(result.timing),\n          optimistic: Math.round(result.optimisticEstimate.timeInMs),\n          pessimistic: Math.round(result.pessimisticEstimate.timeInMs),\n        },\n        {\n          optimistic: 1107,\n          pessimistic: 1134,\n          timing: 1122,\n        });\n    assert.strictEqual(result.optimisticEstimate.nodeTimings.size, 14);\n    assert.strictEqual(result.pessimisticEstimate.nodeTimings.size, 31);\n    assert.ok(result.optimisticGraph, 'should have created optimistic graph');\n    assert.ok(result.pessimisticGraph, 'should have created pessimistic graph');\n  });\n\n  it('should compute predicted value on iframes with substantial layout', async () => {\n    const data = await getComputationDataFromFixture({\n      trace: iframeTrace,\n    });\n    const result = await Interactive.compute(data, {\n      lcpResult: await LargestContentfulPaint.compute(data, {\n        fcpResult: await FirstContentfulPaint.compute(data),\n      }),\n    });\n\n    assert.deepStrictEqual(\n        {\n          timing: Math.round(result.timing),\n          optimistic: Math.round(result.optimisticEstimate.timeInMs),\n          pessimistic: Math.round(result.pessimisticEstimate.timeInMs),\n        },\n        {\n          optimistic: 2372,\n          pessimistic: 2386,\n          timing: 2379,\n        });\n    assert.ok(result.optimisticGraph, 'should have created optimistic graph');\n    assert.ok(result.pessimisticGraph, 'should have created pessimistic graph');\n  });\n});\n"]}