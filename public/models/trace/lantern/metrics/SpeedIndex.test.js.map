{"version":3,"file":"SpeedIndex.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/models/trace/lantern/metrics/SpeedIndex.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Lantern from '../lantern.js';\nimport {getComputationDataFromFixture, loadTrace} from '../testing/testing.js';\n\nconst {SpeedIndex, FirstContentfulPaint} = Lantern.Metrics;\n\nconst defaultThrottling = Lantern.Simulation.Constants.throttling.mobileSlow4G;\n\ndescribe('Metrics: Lantern Speed Index', () => {\n  let trace: Lantern.Types.Trace;\n  before(async function() {\n    trace = await loadTrace(this, 'lantern/progressive-app/trace.json.gz');\n  });\n\n  it('should compute predicted value', async () => {\n    const data = await getComputationDataFromFixture({trace});\n    // TODO: observedSpeedIndex is from the Speedline library, and is used for optimistic\n    // mode. At the moment callers must pass the result into Lantern.\n    const observedSpeedIndex = 379.04474997520487;\n    const result = SpeedIndex.compute(data, {\n      fcpResult: FirstContentfulPaint.compute(data),\n      observedSpeedIndex,\n    });\n\n    assert.deepStrictEqual(\n        {\n          timing: Math.round(result.timing),\n          optimistic: Math.round(result.optimisticEstimate.timeInMs),\n          pessimistic: Math.round(result.pessimisticEstimate.timeInMs),\n        },\n        {\n          timing: 1107,\n          optimistic: 379,\n          pessimistic: 1122,\n        });\n  });\n\n  it('should compute predicted value for different settings', async () => {\n    const settings: Lantern.Types.Simulation.Settings = {\n      throttlingMethod: 'simulate',\n      throttling: {...defaultThrottling, rttMs: 300},\n      // @ts-expect-error: not needed for test\n      networkAnalysis: null,\n    };\n    const data = await getComputationDataFromFixture({trace, settings});\n    const observedSpeedIndex = 379.04474997520487;\n    const result = SpeedIndex.compute(data, {\n      fcpResult: FirstContentfulPaint.compute(data),\n      observedSpeedIndex,\n    });\n\n    assert.deepStrictEqual(\n        {\n          timing: Math.round(result.timing),\n          optimistic: Math.round(result.optimisticEstimate.timeInMs),\n          pessimistic: Math.round(result.pessimisticEstimate.timeInMs),\n        },\n        {\n          timing: 2007,\n          optimistic: 379,\n          pessimistic: 2022,\n        });\n  });\n\n  it('should not scale coefficients at default', async () => {\n    const result = SpeedIndex.getScaledCoefficients(defaultThrottling.rttMs);\n    expect(result).to.deep.equal(SpeedIndex.coefficients);\n  });\n\n  it('should scale coefficients back', async () => {\n    const result = SpeedIndex.getScaledCoefficients(5);\n    expect(result).to.deep.equal({intercept: 0, pessimistic: 0.5, optimistic: 0.5});\n  });\n\n  it('should scale coefficients forward', async () => {\n    const result = SpeedIndex.getScaledCoefficients(300);\n    assert.deepStrictEqual(result, {\n      intercept: 0,\n      optimistic: 2.525,\n      pessimistic: 0.275,\n    });\n  });\n});\n"]}