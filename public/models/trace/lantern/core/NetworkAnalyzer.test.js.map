{"version":3,"file":"NetworkAnalyzer.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/models/trace/lantern/core/NetworkAnalyzer.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// @ts-nocheck TODO(crbug.com/348449529)\n\nimport * as TraceModel from '../../trace.js';\nimport * as Lantern from '../lantern.js';\nimport {loadTrace, runTraceEngine} from '../testing/testing.js';\n\nconst {NetworkAnalyzer} = Lantern.Core;\n\nasync function createRequests(trace: Lantern.Types.Trace) {\n  const traceEngineData = await runTraceEngine(trace);\n  return TraceModel.LanternComputationData.createNetworkRequests(trace, traceEngineData);\n}\n\ndescribe('NetworkAnalyzer', () => {\n  let trace: Lantern.Types.Trace;\n  let traceWithRedirect: Lantern.Types.Trace;\n  before(async function() {\n    trace = await loadTrace(this, 'lantern/paul/trace.json.gz');\n    traceWithRedirect = await loadTrace(this, 'lantern/redirect/trace.json.gz');\n  });\n\n  let recordId;\n\n  function createRecord(opts) {\n    const url = opts.url || 'https://example.com';\n    if (opts.networkRequestTime) {\n      opts.networkRequestTime *= 1000;\n    }\n    if (opts.networkEndTime) {\n      opts.networkEndTime *= 1000;\n    }\n    return Object.assign(\n        {\n          url,\n          requestId: recordId++,\n          connectionId: 0,\n          connectionReused: false,\n          networkRequestTime: 10,\n          networkEndTime: 10,\n          transferSize: 0,\n          protocol: opts.protocol || 'http/1.1',\n          parsedURL: {scheme: url.match(/https?/)[0], securityOrigin: url.match(/.*\\.com/)[0]},\n          timing: opts.timing || null,\n        },\n        opts,\n    );\n  }\n\n  beforeEach(() => {\n    recordId = 1;\n  });\n\n  function assertCloseEnough(valueA, valueB, threshold = 1) {\n    const message = `${valueA} was not close enough to ${valueB}`;\n    assert.ok(Math.abs(valueA - valueB) < threshold, message);\n  }\n\n  describe('#estimateIfConnectionWasReused', () => {\n    it('should use built-in value when trustworthy', () => {\n      const records = [\n        {requestId: 1, connectionId: 1, connectionReused: false},\n        {requestId: 2, connectionId: 1, connectionReused: true},\n        {requestId: 3, connectionId: 2, connectionReused: false},\n        {requestId: 4, connectionId: 3, connectionReused: false},\n        {requestId: 5, connectionId: 2, connectionReused: true},\n      ];\n\n      const result = NetworkAnalyzer.estimateIfConnectionWasReused(records);\n      const expected = new Map([[1, false], [2, true], [3, false], [4, false], [5, true]]);\n      assert.deepStrictEqual(result, expected);\n    });\n\n    it('should estimate values when not trustworthy (duplicate IDs)', () => {\n      const records = [\n        createRecord({requestId: 1, networkRequestTime: 0, networkEndTime: 15}),\n        createRecord({requestId: 2, networkRequestTime: 10, networkEndTime: 25}),\n        createRecord({requestId: 3, networkRequestTime: 20, networkEndTime: 40}),\n        createRecord({requestId: 4, networkRequestTime: 30, networkEndTime: 40}),\n      ];\n\n      const result = NetworkAnalyzer.estimateIfConnectionWasReused(records);\n      const expected = new Map([[1, false], [2, false], [3, true], [4, true]]);\n      assert.deepStrictEqual(result, expected);\n    });\n\n    it('should estimate values when not trustworthy (connectionReused nonsense)', () => {\n      const records = [\n        createRecord({\n          requestId: 1,\n          connectionId: 1,\n          connectionReused: true,\n          networkRequestTime: 0,\n          networkEndTime: 15,\n        }),\n        createRecord({\n          requestId: 2,\n          connectionId: 1,\n          connectionReused: true,\n          networkRequestTime: 10,\n          networkEndTime: 25,\n        }),\n        createRecord({\n          requestId: 3,\n          connectionId: 1,\n          connectionReused: true,\n          networkRequestTime: 20,\n          networkEndTime: 40,\n        }),\n        createRecord({\n          requestId: 4,\n          connectionId: 2,\n          connectionReused: false,\n          networkRequestTime: 30,\n          networkEndTime: 40,\n        }),\n      ];\n\n      const result = NetworkAnalyzer.estimateIfConnectionWasReused(records);\n      const expected = new Map([[1, false], [2, false], [3, true], [4, true]]);\n      assert.deepStrictEqual(result, expected);\n    });\n\n    it('should estimate with earliest allowed reuse', () => {\n      const records = [\n        createRecord({requestId: 1, networkRequestTime: 0, networkEndTime: 40}),\n        createRecord({requestId: 2, networkRequestTime: 10, networkEndTime: 15}),\n        createRecord({requestId: 3, networkRequestTime: 20, networkEndTime: 30}),\n        createRecord({requestId: 4, networkRequestTime: 35, networkEndTime: 40}),\n      ];\n\n      const result = NetworkAnalyzer.estimateIfConnectionWasReused(records);\n      const expected = new Map([[1, false], [2, false], [3, true], [4, true]]);\n      assert.deepStrictEqual(result, expected);\n    });\n\n    it('should work on a real trace', async () => {\n      const requests = await createRequests(trace);\n      const result = NetworkAnalyzer.estimateIfConnectionWasReused(requests);\n      const distinctConnections = Array.from(result.values()).filter(item => !item).length;\n      assert.strictEqual(result.size, 25);\n      assert.strictEqual(distinctConnections, 9);\n    });\n  });\n\n  describe('#estimateRTTByOrigin', () => {\n    it('should infer from tcp timing when available', () => {\n      const timing = {connectStart: 0, connectEnd: 99};\n      const request = createRecord({networkRequestTime: 0, networkEndTime: 1, timing});\n      const result = NetworkAnalyzer.estimateRTTByOrigin([request]);\n      const expected = {min: 99, max: 99, avg: 99, median: 99};\n      assert.deepStrictEqual(result.get('https://example.com'), expected);\n    });\n\n    it('should infer only one estimate if tcp and ssl start times are equal', () => {\n      const timing = {connectStart: 0, connectEnd: 99, sslStart: 0, sslEnd: 99};\n      const request = createRecord({networkRequestTime: 0, networkEndTime: 1, timing});\n      const result = NetworkAnalyzer.estimateRTTByOrigin([request]);\n      const expected = {min: 99, max: 99, avg: 99, median: 99};\n      assert.deepStrictEqual(result.get('https://example.com'), expected);\n    });\n\n    it('should infer from tcp and ssl timing when available', () => {\n      const timing = {connectStart: 0, connectEnd: 99, sslStart: 50, sslEnd: 99};\n      const request = createRecord({networkRequestTime: 0, networkEndTime: 1, timing});\n      const result = NetworkAnalyzer.estimateRTTByOrigin([request]);\n      const expected = {min: 49, max: 50, avg: 49.5, median: 49.5};\n      assert.deepStrictEqual(result.get('https://example.com'), expected);\n    });\n\n    it('should infer from connection timing when available for h3 (one estimate)', () => {\n      const timing = {connectStart: 0, connectEnd: 99, sslStart: 1, sslEnd: 99};\n      const request = createRecord({networkRequestTime: 0, networkEndTime: 1, timing, protocol: 'h3'});\n      const result = NetworkAnalyzer.estimateRTTByOrigin([request]);\n      const expected = {min: 99, max: 99, avg: 99, median: 99};\n      assert.deepStrictEqual(result.get('https://example.com'), expected);\n    });\n\n    it('should infer from sendStart when available', () => {\n      const timing = {sendStart: 150};\n      // this request took 150ms before Chrome could send the request\n      // i.e. DNS (maybe) + queuing (maybe) + TCP handshake took ~100ms\n      // 150ms / 3 round trips ~= 50ms RTT\n      const request = createRecord({networkRequestTime: 0, networkEndTime: 1, timing});\n      const result = NetworkAnalyzer.estimateRTTByOrigin([request], {coarseEstimateMultiplier: 1});\n      const expected = {min: 50, max: 50, avg: 50, median: 50};\n      assert.deepStrictEqual(result.get('https://example.com'), expected);\n    });\n\n    it('should infer from download timing when available', () => {\n      const timing = {receiveHeadersEnd: 100};\n      // this request took 1000ms after the first byte was received to download the payload\n      // i.e. it took at least one full additional roundtrip after first byte to download the rest\n      // 1000ms / 1 round trip ~= 1000ms RTT\n      const request = createRecord({networkRequestTime: 0, networkEndTime: 1.1, transferSize: 28 * 1024, timing});\n      const result = NetworkAnalyzer.estimateRTTByOrigin([request], {\n        coarseEstimateMultiplier: 1,\n        useHeadersEndEstimates: false,\n      });\n      const expected = {min: 1000, max: 1000, avg: 1000, median: 1000};\n      assert.deepStrictEqual(result.get('https://example.com'), expected);\n    });\n\n    it('should infer from TTFB when available', () => {\n      const timing = {receiveHeadersEnd: 1000};\n      const request = createRecord({networkRequestTime: 0, networkEndTime: 1, timing, resourceType: 'Other'});\n      const result = NetworkAnalyzer.estimateRTTByOrigin([request], {\n        coarseEstimateMultiplier: 1,\n      });\n\n      // this request's TTFB was 1000ms, it used SSL and was a fresh connection requiring a handshake\n      // which needs ~4 RTs. We don't know its resource type so it'll be assumed that 40% of it was\n      // server response time.\n      // 600 ms / 4 = 150ms\n      const expected = {min: 150, max: 150, avg: 150, median: 150};\n      assert.deepStrictEqual(result.get('https://example.com'), expected);\n    });\n\n    it('should use coarse estimates on a per-origin basis', () => {\n      const records = [\n        createRecord({url: 'https://example.com', timing: {connectStart: 1, connectEnd: 100, sendStart: 150}}),\n        createRecord({url: 'https://example2.com', timing: {sendStart: 150}}),\n      ];\n      const result = NetworkAnalyzer.estimateRTTByOrigin(records);\n      assert.deepStrictEqual(result.get('https://example.com'), {min: 99, max: 99, avg: 99, median: 99});\n      assert.deepStrictEqual(result.get('https://example2.com'), {min: 15, max: 15, avg: 15, median: 15});\n    });\n\n    it('should handle untrustworthy connection information', () => {\n      const timing = {sendStart: 150};\n      const recordA = createRecord({networkRequestTime: 0, networkEndTime: 1, timing, connectionReused: true});\n      const recordB = createRecord({\n        networkRequestTime: 0,\n        networkEndTime: 1,\n        timing,\n        connectionId: 2,\n        connectionReused: true,\n      });\n      const result = NetworkAnalyzer.estimateRTTByOrigin([recordA, recordB], {\n        coarseEstimateMultiplier: 1,\n      });\n      const expected = {min: 50, max: 50, avg: 50, median: 50};\n      assert.deepStrictEqual(result.get('https://example.com'), expected);\n    });\n\n    it('should work on a real trace', async () => {\n      const requests = await createRequests(trace);\n      const result = NetworkAnalyzer.estimateRTTByOrigin(requests);\n      assertCloseEnough(result.get('https://www.paulirish.com').min, 10);\n      assertCloseEnough(result.get('https://www.googletagmanager.com').min, 17);\n      assertCloseEnough(result.get('https://www.google-analytics.com').min, 10);\n    });\n\n    it('should approximate well with either method', async () => {\n      const requests = await createRequests(trace);\n      const result = NetworkAnalyzer.estimateRTTByOrigin(requests).get(NetworkAnalyzer.summary);\n      const resultApprox = NetworkAnalyzer\n                               .estimateRTTByOrigin(requests, {\n                                 forceCoarseEstimates: true,\n                               })\n                               .get(NetworkAnalyzer.summary);\n      assertCloseEnough(result.min, resultApprox.min, 20);\n      assertCloseEnough(result.avg, resultApprox.avg, 30);\n      assertCloseEnough(result.median, resultApprox.median, 30);\n    });\n  });\n\n  describe('#estimateServerResponseTimeByOrigin', () => {\n    it('should estimate server response time using ttfb times', () => {\n      const timing = {sendEnd: 100, receiveHeadersEnd: 200};\n      const request = createRecord({networkRequestTime: 0, networkEndTime: 1, timing});\n      const rttByOrigin = new Map([[NetworkAnalyzer.summary, 0]]);\n      const result = NetworkAnalyzer.estimateServerResponseTimeByOrigin([request], {rttByOrigin});\n      const expected = {min: 100, max: 100, avg: 100, median: 100};\n      assert.deepStrictEqual(result.get('https://example.com'), expected);\n    });\n\n    it('should subtract out rtt', () => {\n      const timing = {sendEnd: 100, receiveHeadersEnd: 200};\n      const request = createRecord({networkRequestTime: 0, networkEndTime: 1, timing});\n      const rttByOrigin = new Map([[NetworkAnalyzer.summary, 50]]);\n      const result = NetworkAnalyzer.estimateServerResponseTimeByOrigin([request], {rttByOrigin});\n      const expected = {min: 50, max: 50, avg: 50, median: 50};\n      assert.deepStrictEqual(result.get('https://example.com'), expected);\n    });\n\n    it('should compute rtts when not provided', () => {\n      const timing = {connectStart: 5, connectEnd: 55, sendEnd: 100, receiveHeadersEnd: 200};\n      const request = createRecord({networkRequestTime: 0, networkEndTime: 1, timing});\n      const result = NetworkAnalyzer.estimateServerResponseTimeByOrigin([request]);\n      const expected = {min: 50, max: 50, avg: 50, median: 50};\n      assert.deepStrictEqual(result.get('https://example.com'), expected);\n    });\n\n    it('should work on a real trace', async () => {\n      const requests = await createRequests(trace);\n      const result = NetworkAnalyzer.estimateServerResponseTimeByOrigin(requests);\n      assertCloseEnough(result.get('https://www.paulirish.com').avg, 35);\n      assertCloseEnough(result.get('https://www.googletagmanager.com').avg, 8);\n      assertCloseEnough(result.get('https://www.google-analytics.com').avg, 8);\n    });\n\n    it('should approximate well with either method', async () => {\n      const requests = await createRequests(trace);\n      const result = NetworkAnalyzer.estimateServerResponseTimeByOrigin(requests).get(\n          NetworkAnalyzer.summary,\n      );\n      const resultApprox = NetworkAnalyzer\n                               .estimateServerResponseTimeByOrigin(requests, {\n                                 forceCoarseEstimates: true,\n                               })\n                               .get(NetworkAnalyzer.summary);\n      assertCloseEnough(result.min, resultApprox.min, 20);\n      assertCloseEnough(result.avg, resultApprox.avg, 30);\n      assertCloseEnough(result.median, resultApprox.median, 30);\n    });\n  });\n\n  describe('#estimateThroughput', () => {\n    const estimateThroughput = NetworkAnalyzer.estimateThroughput;\n\n    function createThroughputRecord(responseHeadersEndTimeInS, networkEndTimeInS, extras) {\n      return Object.assign(\n          {\n            responseHeadersEndTime: responseHeadersEndTimeInS * 1000,\n            networkEndTime: networkEndTimeInS * 1000,\n            transferSize: 1000,\n            finished: true,\n            failed: false,\n            statusCode: 200,\n            url: 'https://google.com/logo.png',\n            parsedURL: {scheme: 'https'},\n          },\n          extras,\n      );\n    }\n\n    it('should return Infinity for no/missing records', () => {\n      assert.strictEqual(estimateThroughput([]), Infinity);\n      assert.strictEqual(estimateThroughput([createThroughputRecord(0, 0, {finished: false})]), Infinity);\n    });\n\n    it('should compute correctly for a basic waterfall', () => {\n      const result = estimateThroughput([\n        createThroughputRecord(0, 1),\n        createThroughputRecord(1, 2),\n        createThroughputRecord(2, 6),\n      ]);\n\n      assert.strictEqual(result, 500 * 8);\n    });\n\n    it('should compute correctly for concurrent requests', () => {\n      const result = estimateThroughput([\n        createThroughputRecord(0, 1),\n        createThroughputRecord(0.5, 1),\n      ]);\n\n      assert.strictEqual(result, 2000 * 8);\n    });\n\n    it('should compute correctly for gaps', () => {\n      const result = estimateThroughput([\n        createThroughputRecord(0, 1),\n        createThroughputRecord(3, 4),\n      ]);\n\n      assert.strictEqual(result, 1000 * 8);\n    });\n\n    it('should compute correctly for partially overlapping requests', () => {\n      const result = estimateThroughput([\n        createThroughputRecord(0, 1),\n        createThroughputRecord(0.5, 1.5),\n        createThroughputRecord(1.25, 3),\n        createThroughputRecord(1.4, 4),\n        createThroughputRecord(5, 9),\n      ]);\n\n      assert.strictEqual(result, 625 * 8);\n    });\n\n    it('should exclude failed records', () => {\n      const result = estimateThroughput([\n        createThroughputRecord(0, 2),\n        createThroughputRecord(3, 4, {failed: true}),\n      ]);\n      assert.strictEqual(result, 500 * 8);\n    });\n\n    it('should exclude cached records', () => {\n      const result = estimateThroughput([\n        createThroughputRecord(0, 2),\n        createThroughputRecord(3, 4, {statusCode: 304}),\n      ]);\n      assert.strictEqual(result, 500 * 8);\n    });\n\n    it('should exclude unfinished records', () => {\n      const result = estimateThroughput([\n        createThroughputRecord(0, 2),\n        createThroughputRecord(3, 4, {finished: false}),\n      ]);\n      assert.strictEqual(result, 500 * 8);\n    });\n\n    it('should exclude data URIs', () => {\n      const result = estimateThroughput([\n        createThroughputRecord(0, 2),\n        createThroughputRecord(3, 4, {parsedURL: {scheme: 'data'}}),\n      ]);\n      assert.strictEqual(result, 500 * 8);\n    });\n  });\n\n  describe('#computeRTTAndServerResponseTime', () => {\n    it('should work', async () => {\n      const requests = await createRequests(trace);\n      const result = NetworkAnalyzer.computeRTTAndServerResponseTime(requests);\n\n      expect(result.rtt).to.be.closeTo(0.082, 0.001);\n      assert.deepStrictEqual([...result.additionalRttByOrigin.entries()], [\n        [\n          'https://www.paulirish.com',\n          9.788999999999994,\n        ],\n        [\n          'https://www.googletagmanager.com',\n          17.21999999999999,\n        ],\n        [\n          'https://fonts.googleapis.com',\n          16.816000000000003,\n        ],\n        [\n          'https://fonts.gstatic.com',\n          1.6889999999999998,\n        ],\n        [\n          'https://www.google-analytics.com',\n          9.924999999999997,\n        ],\n        [\n          'https://paulirish.disqus.com',\n          9.000999999999998,\n        ],\n        [\n          'https://firebaseinstallations.googleapis.com',\n          0,\n        ],\n        [\n          'https://firebaseremoteconfig.googleapis.com',\n          0.1823,\n        ],\n        [\n          '__SUMMARY__',\n          0,\n        ],\n      ]);\n    });\n  });\n\n  describe('#findMainDocument', () => {\n    it('should find the main document', async () => {\n      const requests = await createRequests(trace);\n      const mainDocument = NetworkAnalyzer.findResourceForUrl(requests, 'https://www.paulirish.com/');\n      assert.strictEqual(mainDocument.url, 'https://www.paulirish.com/');\n    });\n\n    it('should find the main document if the URL includes a fragment', async () => {\n      const requests = await createRequests(trace);\n      const mainDocument = NetworkAnalyzer.findResourceForUrl(requests, 'https://www.paulirish.com/#info');\n      assert.strictEqual(mainDocument.url, 'https://www.paulirish.com/');\n    });\n  });\n\n  describe('#resolveRedirects', () => {\n    it('should resolve to the same document when no redirect', async () => {\n      const requests = await createRequests(trace);\n      const mainDocument = NetworkAnalyzer.findResourceForUrl(requests, 'https://www.paulirish.com/');\n      const finalDocument = NetworkAnalyzer.resolveRedirects(mainDocument);\n      assert.strictEqual(mainDocument.url, finalDocument.url);\n      assert.strictEqual(finalDocument.url, 'https://www.paulirish.com/');\n    });\n\n    it('should resolve to the final document with redirects', async () => {\n      const requests = await createRequests(traceWithRedirect);\n      const mainDocument = NetworkAnalyzer.findResourceForUrl(requests, 'http://www.vkontakte.ru/');\n      const finalDocument = NetworkAnalyzer.resolveRedirects(mainDocument);\n      assert.notEqual(mainDocument.url, finalDocument.url);\n      assert.strictEqual(finalDocument.url, 'https://m.vk.com/');\n    });\n  });\n});\n"]}