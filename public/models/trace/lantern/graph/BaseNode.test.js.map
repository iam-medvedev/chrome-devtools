{"version":3,"file":"BaseNode.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/models/trace/lantern/graph/BaseNode.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Lantern from '../lantern.js';\n\nconst {BaseNode, NetworkNode} = Lantern.Graph;\n\nfunction sortedById(nodeArray: Lantern.Graph.Node[]) {\n  return nodeArray.sort((node1, node2) => node1.id.localeCompare(node2.id));\n}\n\n/**\n * In the real implementation we pass around Node<T>, which are either CPUNodes\n * or NetworkNodes. Rather than construct those for these tests, which don't\n * need real nodes, we instead create BaseNodes and cast them to satisfy TS.\n */\nfunction makeFakeNode(name: string): Lantern.Graph.Node {\n  return new BaseNode(name) as Lantern.Graph.Node;\n}\n\nfunction createComplexGraph() {\n  //   B       F\n  //  / \\     /\n  // A   D - E\n  //  \\ /     \\\n  //   C       G - H\n\n  const nodeA = makeFakeNode('A');\n  const nodeB = makeFakeNode('B');\n  const nodeC = makeFakeNode('C');\n  const nodeD = makeFakeNode('D');\n  const nodeE = makeFakeNode('E');\n  const nodeF = makeFakeNode('F');\n  const nodeG = makeFakeNode('G');\n  const nodeH = makeFakeNode('H');\n\n  nodeA.addDependent(nodeB);\n  nodeA.addDependent(nodeC);\n  nodeB.addDependent(nodeD);\n  nodeC.addDependent(nodeD);\n  nodeD.addDependent(nodeE);\n  nodeE.addDependent(nodeF);\n  nodeE.addDependent(nodeG);\n  nodeG.addDependent(nodeH);\n\n  return {\n    nodeA,\n    nodeB,\n    nodeC,\n    nodeD,\n    nodeE,\n    nodeF,\n    nodeG,\n    nodeH,\n  };\n}\n\ndescribe('BaseNode', () => {\n  describe('#constructor', () => {\n    it('should set the ID', () => {\n      const node = makeFakeNode('foo');\n      assert.strictEqual(node.id, 'foo');\n    });\n  });\n\n  describe('.addDependent', () => {\n    it('should add the correct edge', () => {\n      const nodeA = makeFakeNode('1');\n      const nodeB = makeFakeNode('2');\n      nodeA.addDependent(nodeB);\n\n      assert.deepEqual(nodeA.getDependents(), [nodeB]);\n      assert.deepEqual(nodeB.getDependencies(), [nodeA]);\n    });\n  });\n\n  describe('.addDependency', () => {\n    it('should add the correct edge', () => {\n      const nodeA = makeFakeNode('1');\n      const nodeB = makeFakeNode('2');\n      nodeA.addDependency(nodeB);\n\n      assert.deepEqual(nodeA.getDependencies(), [nodeB]);\n      assert.deepEqual(nodeB.getDependents(), [nodeA]);\n    });\n\n    it('throw when trying to add a dependency on itself', () => {\n      const nodeA = makeFakeNode('1');\n      expect(() => nodeA.addDependency(nodeA)).to.throw();\n    });\n  });\n\n  describe('.isDependentOn', () => {\n    it('should identify the dependency relationships', () => {\n      const graph = createComplexGraph();\n      const nodes = Object.values(graph);\n      const {nodeA, nodeB, nodeD, nodeF, nodeH} = graph;\n\n      for (const node of nodes) {\n        expect(nodeA.isDependentOn(node)).equals(node === nodeA);\n        expect(nodeB.isDependentOn(node)).equals(node === nodeA || node === nodeB);\n        expect(nodeH.isDependentOn(node)).equals(node !== nodeF);\n      }\n\n      expect(nodeD.isDependentOn(nodeA)).equals(true);\n      expect(nodeD.isDependentOn(nodeB)).equals(true);\n      expect(nodeD.isDependentOn(nodeD)).equals(true);\n\n      expect(nodeD.isDependentOn(nodeH)).equals(false);\n      expect(nodeH.isDependentOn(nodeD)).equals(true);\n\n      expect(nodeF.isDependentOn(nodeH)).equals(false);\n      expect(nodeH.isDependentOn(nodeF)).equals(false);\n    });\n  });\n\n  describe('.getRootNode', () => {\n    it('should return the root node', () => {\n      const graph = createComplexGraph();\n\n      assert.strictEqual(graph.nodeA.getRootNode(), graph.nodeA);\n      assert.strictEqual(graph.nodeB.getRootNode(), graph.nodeA);\n      assert.strictEqual(graph.nodeD.getRootNode(), graph.nodeA);\n      assert.strictEqual(graph.nodeF.getRootNode(), graph.nodeA);\n    });\n  });\n\n  describe('.cloneWithoutRelationships', () => {\n    it('should create a copy', () => {\n      const node = makeFakeNode('1');\n      const neighbor = makeFakeNode('2');\n      node.addDependency(neighbor);\n      const clone = node.cloneWithoutRelationships();\n\n      assert.strictEqual(clone.id, '1');\n      assert.notEqual(node, clone);\n      assert.lengthOf(clone.getDependencies(), 0);\n    });\n\n    it('should copy isMainDocument', () => {\n      const node = makeFakeNode('1');\n      node.setIsMainDocument(true);\n      const networkNode = new NetworkNode({} as Lantern.Types.NetworkRequest);\n      networkNode.setIsMainDocument(true);\n\n      assert.isOk(node.cloneWithoutRelationships().isMainDocument());\n      assert.isOk(networkNode.cloneWithoutRelationships().isMainDocument());\n    });\n  });\n\n  describe('.cloneWithRelationships', () => {\n    it('should create a copy of a basic graph', () => {\n      const node = makeFakeNode('1');\n      const neighbor = makeFakeNode('2');\n      node.addDependency(neighbor);\n      const clone = node.cloneWithRelationships();\n\n      assert.strictEqual(clone.id, '1');\n      assert.notEqual(node, clone);\n\n      const dependencies = clone.getDependencies();\n      assert.lengthOf(dependencies, 1);\n\n      const neighborClone = dependencies[0];\n      assert.strictEqual(neighborClone.id, neighbor.id);\n      assert.notEqual(neighborClone, neighbor);\n      assert.strictEqual(neighborClone.getDependents()[0], clone);\n    });\n\n    it('should create a copy of a complex graph', () => {\n      const graph = createComplexGraph();\n      const clone = graph.nodeA.cloneWithRelationships();\n\n      const clonedIdMap = new Map();\n      clone.traverse(node => clonedIdMap.set(node.id, node));\n      assert.strictEqual(clonedIdMap.size, 8);\n\n      graph.nodeA.traverse(node => {\n        const clone = clonedIdMap.get(node.id);\n        assert.strictEqual(clone.id, node.id);\n        assert.notEqual(clone, node);\n\n        const actualDependents = sortedById(clone.getDependents());\n        const expectedDependents = sortedById(node.getDependents());\n        actualDependents.forEach((cloneDependent, index) => {\n          const originalDependent = expectedDependents[index];\n          assert.strictEqual(cloneDependent.id, originalDependent.id);\n          assert.notEqual(cloneDependent, originalDependent);\n        });\n      });\n    });\n\n    it('should create a copy of a graph with long dependency chains', () => {\n      //   C - D - E - F\n      //  /             \\\n      // A - - - - - - - B\n      const nodeA = makeFakeNode('A');\n      const nodeB = makeFakeNode('B');\n      const nodeC = makeFakeNode('C');\n      const nodeD = makeFakeNode('D');\n      const nodeE = makeFakeNode('E');\n      const nodeF = makeFakeNode('F');\n\n      nodeA.addDependent(nodeB);\n      nodeF.addDependent(nodeB);\n\n      nodeA.addDependent(nodeC);\n      nodeC.addDependent(nodeD);\n      nodeD.addDependent(nodeE);\n      nodeE.addDependent(nodeF);\n\n      const clone = nodeA.cloneWithRelationships();\n\n      const clonedIdMap = new Map();\n      clone.traverse(node => clonedIdMap.set(node.id, node));\n      assert.strictEqual(clonedIdMap.size, 6);\n    });\n\n    it('should create a copy when not starting at root node', () => {\n      const graph = createComplexGraph();\n      const cloneD = graph.nodeD.cloneWithRelationships();\n      assert.strictEqual(cloneD.id, 'D');\n      assert.strictEqual(cloneD.getRootNode().id, 'A');\n    });\n\n    it('should create a partial copy of a complex graph', () => {\n      const graph = createComplexGraph();\n      // create a clone with F and all its dependencies\n      const clone = graph.nodeA.cloneWithRelationships(node => node.id === 'F');\n\n      const clonedIdMap = new Map();\n      clone.traverse(node => clonedIdMap.set(node.id, node));\n\n      assert.strictEqual(clonedIdMap.size, 6);\n      assert.isOk(clonedIdMap.has('F'), 'did not include target node');\n      assert.isOk(clonedIdMap.has('E'), 'did not include dependency');\n      assert.isOk(clonedIdMap.has('B'), 'did not include branched dependency');\n      assert.isOk(clonedIdMap.has('C'), 'did not include branched dependency');\n      assert.isUndefined(clonedIdMap.get('G'));\n      assert.isUndefined(clonedIdMap.get('H'));\n    });\n\n    it('should throw if original node is not in cloned graph', () => {\n      const graph = createComplexGraph();\n      assert.throws(\n          // clone from root to nodeB, but called on nodeD\n          () => graph.nodeD.cloneWithRelationships(node => node.id === 'B'),\n          /^Cloned graph missing node$/,\n      );\n    });\n  });\n\n  describe('.traverse', () => {\n    it('should visit every dependent node', () => {\n      const graph = createComplexGraph();\n      const ids: string[] = [];\n      graph.nodeA.traverse(node => ids.push(node.id));\n\n      assert.deepEqual(ids, ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']);\n    });\n\n    it('should include a shortest traversal path to every dependent node', () => {\n      const graph = createComplexGraph();\n      const paths: string[][] = [];\n      graph.nodeA.traverse((node, traversalPath) => {\n        assert.strictEqual(node.id, traversalPath[0].id);\n        paths.push(traversalPath.map(node => node.id));\n      });\n\n      assert.deepEqual(paths, [\n        ['A'],\n        ['B', 'A'],\n        ['C', 'A'],\n        ['D', 'B', 'A'],\n        ['E', 'D', 'B', 'A'],\n        ['F', 'E', 'D', 'B', 'A'],\n        ['G', 'E', 'D', 'B', 'A'],\n        ['H', 'G', 'E', 'D', 'B', 'A'],\n      ]);\n    });\n\n    it('should respect getNext', () => {\n      const graph = createComplexGraph();\n      const ids: string[] = [];\n      graph.nodeF.traverse(\n          node => ids.push(node.id),\n          node => node.getDependencies(),\n      );\n\n      assert.deepEqual(ids, ['F', 'E', 'D', 'B', 'C', 'A']);\n    });\n  });\n\n  describe('#hasCycle', () => {\n    it('should return false for DAGs', () => {\n      const graph = createComplexGraph();\n      assert.isFalse(BaseNode.hasCycle(graph.nodeA));\n    });\n\n    it('should return false for triangular DAGs', () => {\n      //   B\n      //  / \\\n      // A - C\n      const nodeA = makeFakeNode('A');\n      const nodeB = makeFakeNode('B');\n      const nodeC = makeFakeNode('C');\n\n      nodeA.addDependent(nodeC);\n      nodeA.addDependent(nodeB);\n      nodeB.addDependent(nodeC);\n\n      assert.isFalse(BaseNode.hasCycle(nodeA));\n    });\n\n    it('should return true for basic cycles', () => {\n      // A - B - C - A!\n      const nodeA = makeFakeNode('A');\n      const nodeB = makeFakeNode('B');\n      const nodeC = makeFakeNode('C');\n\n      nodeA.addDependent(nodeB);\n      nodeB.addDependent(nodeC);\n      nodeC.addDependent(nodeA);\n\n      assert.isTrue(BaseNode.hasCycle(nodeA));\n    });\n\n    it('should return true for children', () => {\n      //       A!\n      //      /\n      // A - B - C\n      const nodeA = makeFakeNode('A');\n      const nodeB = makeFakeNode('B');\n      const nodeC = makeFakeNode('C');\n\n      nodeA.addDependent(nodeB);\n      nodeB.addDependent(nodeC);\n      nodeB.addDependent(nodeA);\n\n      assert.isTrue(BaseNode.hasCycle(nodeC));\n    });\n\n    it('should return true for complex cycles', () => {\n      //   B - D - F - G - C!\n      //  /      /\n      // A - - C - E - H\n      const nodeA = makeFakeNode('A');\n      const nodeB = makeFakeNode('B');\n      const nodeC = makeFakeNode('C');\n      const nodeD = makeFakeNode('D');\n      const nodeE = makeFakeNode('E');\n      const nodeF = makeFakeNode('F');\n      const nodeG = makeFakeNode('G');\n      const nodeH = makeFakeNode('H');\n\n      nodeA.addDependent(nodeB);\n      nodeA.addDependent(nodeC);\n      nodeB.addDependent(nodeD);\n      nodeC.addDependent(nodeE);\n      nodeC.addDependent(nodeF);\n      nodeD.addDependent(nodeF);\n      nodeE.addDependent(nodeH);\n      nodeF.addDependent(nodeG);\n      nodeG.addDependent(nodeC);\n\n      assert.isTrue(BaseNode.hasCycle(nodeA));\n      assert.isTrue(BaseNode.hasCycle(nodeB));\n      assert.isTrue(BaseNode.hasCycle(nodeC));\n      assert.isTrue(BaseNode.hasCycle(nodeD));\n      assert.isTrue(BaseNode.hasCycle(nodeE));\n      assert.isTrue(BaseNode.hasCycle(nodeF));\n      assert.isTrue(BaseNode.hasCycle(nodeG));\n      assert.isTrue(BaseNode.hasCycle(nodeH));\n    });\n\n    it('works for very large graphs', () => {\n      const root = makeFakeNode('root');\n\n      let lastNode = root;\n      for (let i = 0; i < 10000; i++) {\n        const nextNode = makeFakeNode(`child${i}`);\n        lastNode.addDependent(nextNode);\n        lastNode = nextNode;\n      }\n\n      lastNode.addDependent(root);\n      assert.isTrue(BaseNode.hasCycle(root));\n    });\n  });\n});\n"]}