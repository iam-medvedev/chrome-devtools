{"version":3,"file":"PageDependencyGraph.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/models/trace/lantern/graph/PageDependencyGraph.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,wCAAwC;AAExC,OAAO,KAAK,OAAO,MAAM,eAAe,CAAC;AAEzC,MAAM,EAAC,mBAAmB,EAAC,GAAG,OAAO,CAAC,KAAK,CAAC;AAC5C,MAAM,EAAC,mBAAmB,EAAC,GAAG,OAAO,CAAC,KAAK,CAAC;AAE5C,SAAS,aAAa,CAClB,SAAS,EACT,GAAG,EACH,iBAAiB,GAAG,CAAC,EACrB,SAAS,GAAG,IAAI,EAChB,YAAY,GAAG,mBAAmB,CAAC,QAAQ,EAC3C,UAAU,GAAG,KAAK;IAEpB,MAAM,cAAc,GAAG,iBAAiB,GAAG,EAAE,CAAC;IAC9C,OAAO;QACL,SAAS;QACT,GAAG;QACH,iBAAiB;QACjB,cAAc;QACd,SAAS;QACT,YAAY;QACZ,UAAU;KACX,CAAC;AACJ,CAAC;AAED,MAAM,kBAAkB,GAAG,4CAA4C,CAAC;AACxE,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,IAAI,WAAW,CAAC;IAChB,IAAI,GAAG,CAAC;IAER,SAAS,aAAa,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI;QAC5C,MAAM,SAAS,GAAG;YAChB,IAAI,EAAE,kBAAkB;YACxB,GAAG,EAAE,CAAC;YACN,EAAE,EAAE,OAAO,GAAG,IAAI;YAClB,GAAG,EAAE,QAAQ,GAAG,IAAI;YACpB,IAAI,EAAE,EAAE;SACT,CAAC;QAEF,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAE5B,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,CAAC,EAAE,CAAC;YACJ,WAAW,CAAC,IAAI,CAAC;gBACf,IAAI,EAAE,GAAG,CAAC,IAAI;gBACd,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,CAAC,CAAC;gBAC3C,IAAI,EAAE,EAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAC;aACvB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,UAAU,CAAC,GAAG,EAAE;QACd,WAAW,GAAG,EAAE,CAAC;QACjB,GAAG,GAAG,EAAC,YAAY,EAAE,sBAAsB,EAAE,eAAe,EAAE,sBAAsB,EAAC,CAAC;IACxF,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,sBAAsB,CAAC,CAAC;QAC1D,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,0BAA0B,CAAC,CAAC;QAC9D,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,0BAA0B,CAAC,CAAC;QAC9D,MAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAEvD,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,oBAAoB,CAAC,eAAe,CAAC,CAAC;YACpF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAChD,MAAM,IAAI,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,gCAAgC,CAAC,EAAE,CAAC,CAAC;gBACrD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;gBACnC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;gBACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;YACvD,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACvC,MAAM,aAAa,GAAG,aAAa,CAAC,CAAC,EAAE,+BAA+B,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;YACjG,MAAM,iBAAiB,GAAG;gBACxB,GAAG,eAAe;gBAClB,aAAa;aACd,CAAC;YAEF,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;YAEtF,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;YAClC,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,oBAAoB,CAAC,eAAe,CAAC,CAAC;YACpF,MAAM,WAAW,GAAG,iBAAiB,CAAC,WAAW,CAAC;YAClD,KAAK,MAAM,OAAO,IAAI,eAAe,EAAE,CAAC;gBACtC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC1E,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,oBAAoB,CAAC,eAAe,CAAC,CAAC;YACpF,MAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC;YACtC,MAAM,YAAY,GAAG,iBAAiB,CAAC,YAAY,CAAC;YACpD,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,CAAC,sBAAsB,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACvE,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,CAAC,0BAA0B,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,oBAAoB,CAAC;gBACjE,EAAC,GAAG,aAAa,CAAC,CAAC,EAAE,sBAAsB,CAAC,EAAE,WAAW,EAAE,sBAAsB,EAAE,OAAO,EAAE,GAAG,EAAC;gBAChG,EAAC,GAAG,aAAa,CAAC,CAAC,EAAE,0BAA0B,CAAC,EAAE,WAAW,EAAE,sBAAsB,EAAE,OAAO,EAAE,GAAG,EAAC;gBACpG;oBACE,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,CAAC;oBAChD,WAAW,EAAE,2BAA2B;oBACxC,OAAO,EAAE,GAAG;oBACZ,YAAY,EAAE,mBAAmB,CAAC,GAAG;iBACtC;gBACD,EAAC,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,CAAC,EAAE,WAAW,EAAE,2BAA2B,EAAE,OAAO,EAAE,GAAG,EAAC;gBAC1G;oBACE,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,CAAC;oBAChD,WAAW,EAAE,2BAA2B;oBACxC,OAAO,EAAE,SAAS;iBACnB;gBACD;oBACE,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,CAAC;oBAChD,WAAW,EAAE,2BAA2B;oBACxC,OAAO,EAAE,WAAW;iBACrB;gBACD;oBACE,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,CAAC;oBAChD,WAAW,EAAE,2BAA2B;oBACxC,OAAO,EAAE,WAAW;iBACrB;aACF,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC;YACtC,MAAM,cAAc,GAAG,iBAAiB,CAAC,gBAAgB,CAAC;YAC1D,MAAM,CAAC,CAAC,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;gBAChD,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;gBACf,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;gBACf,CAAC,WAAW,EAAE,IAAI,CAAC;aACpB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;YACjC,aAAa,CAAC,CAAC,EAAE,GAAG,EAAE;gBACpB,EAAC,IAAI,EAAE,eAAe,EAAC,EAAE,EAAC,IAAI,EAAE,YAAY,EAAC,EAAE,EAAC,IAAI,EAAE,kBAAkB,EAAE,EAAE,EAAE,GAAG,EAAC;gBAClF,EAAC,IAAI,EAAE,eAAe,EAAC,EAAG,yDAAyD;aACpF,CAAC,CAAC;YAEH,aAAa,CAAC,GAAG,EAAE,EAAE,EAAE;gBACrB,EAAC,IAAI,EAAE,YAAY,EAAC;aACrB,CAAC,CAAC;YAEH,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEpC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;YAE5D,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;YACzC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,aAAa,CAAC,CAAC,EAAE,GAAG,EAAE;gBACpB,EAAC,IAAI,EAAE,eAAe,EAAC;gBACvB,EAAC,IAAI,EAAE,YAAY,EAAC;aACrB,CAAC,CAAC;YAEH,aAAa,CAAC,GAAG,EAAE,EAAE,EAAE;gBACrB,EAAC,IAAI,EAAE,kBAAkB,EAAC;aAC3B,CAAC,CAAC;YAEH,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEpC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;YAC/D,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;YAE5D,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;YACzC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,sBAAsB,EAAE,CAAC,CAAC,CAAC;YAC7D,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,0BAA0B,EAAE,CAAC,CAAC,CAAC;YACjE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,CAAC,CAAC,CAAC;YAClE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,EAAE,EAAE,EAAC,GAAG,EAAE,0BAA0B,EAAC,CAAC,CAAC;YACtG,MAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAEjE,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAExB,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEzC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,sBAAsB,EAAE,CAAC,CAAC,CAAC;YAC7D,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,0BAA0B,EAAE,EAAE,CAAC,CAAC;YAClE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,EAAE,CAAC,CAAC;YACnE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,GAAG,EAAE,IAAI,EAAE,mBAAmB,CAAC,GAAG,CAAC,CAAC;YACnG,MAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAEjE,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE;gBACtB,EAAC,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,EAAC,GAAG,EAAE,0BAA0B,EAAC,EAAC;gBACjE,EAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,EAAC,SAAS,EAAE,CAAC,EAAC,EAAC;aACpD,CAAC,CAAC;YAEH,aAAa,CAAC,GAAG,EAAE,EAAE,EAAE;gBACrB,EAAC,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,EAAC,UAAU,EAAE,CAAC,EAAC,GAAG,EAAE,2BAA2B,EAAC,CAAC,EAAC,EAAC;gBACpF,EAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,EAAC,UAAU,EAAE,CAAC,EAAE,GAAG,EAAE,2BAA2B,EAAC,EAAC;aACvF,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEzC,MAAM,MAAM,GAAG,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACnD,MAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;YAEhE,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;YACtE,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC5D,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,sBAAsB,EAAE,CAAC,CAAC,CAAC;YAC7D,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,0BAA0B,EAAE,CAAC,CAAC,CAAC;YACjE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,0BAA0B,EAAE,CAAC,CAAC,CAAC,CAAE,gBAAgB;YACnF,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,EAAE,EAAE,EAAC,GAAG,EAAE,0BAA0B,EAAC,CAAC,CAAC;YACtG,MAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAEjE,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAExB,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEzC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,oCAAoC;QACjG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,sBAAsB,EAAE,CAAC,CAAC,CAAC;YAC7D,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,0BAA0B,EAAE,GAAG,EAAE,IAAI,EAAE,mBAAmB,CAAC,GAAG,CAAC,CAAC;YAClG,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,GAAG,CAAC,CAAC;YACpE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,GAAG,CAAC,CAAC;YACpE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,GAAG,EAAE,IAAI,EAAE,mBAAmB,CAAC,GAAG,CAAC,CAAC;YACnG,MAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAE3E,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE;gBACtB,qCAAqC;gBACrC,EAAC,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,EAAC,GAAG,EAAE,sBAAsB,EAAC,EAAC;gBAE7D,6EAA6E;gBAC7E,EAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,EAAC,SAAS,EAAE,CAAC,EAAC,EAAC;gBACnD,EAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,EAAC,UAAU,EAAE,CAAC,EAAE,GAAG,EAAE,0BAA0B,EAAC,EAAC;gBAErF,yEAAyE;gBACzE,EAAC,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,EAAC,GAAG,EAAE,2BAA2B,EAAC,EAAC;aACnE,CAAC,CAAC;YAEH,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE;gBACtB,kEAAkE;gBAClE,EAAC,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,EAAC,UAAU,EAAE,CAAC,EAAC,GAAG,EAAE,2BAA2B,EAAC,CAAC,EAAC,EAAC;gBACpF,2EAA2E;gBAC3E,EAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,EAAC,SAAS,EAAE,CAAC,EAAC,EAAC;aACpD,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEzC,MAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAE7E,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,sBAAsB,EAAE,CAAC,CAAC,CAAC;YAC7D,MAAM,eAAe,GAAG,CAAC,QAAQ,CAAC,CAAC;YAEnC,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE;gBACtB,qCAAqC;gBACrC,EAAC,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,EAAC,GAAG,EAAE,sBAAsB,EAAC,EAAC;gBAC7D,gFAAgF;gBAChF,EAAC,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,QAAQ,EAAC,EAAC;gBACjD,EAAC,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,QAAQ,EAAC,EAAC;aAC/C,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEzC,MAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAE7E,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;YAClC,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,CAAC,CAAC,CAAC;YAClE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,sBAAsB,EAAE,GAAG,EAAE,IAAI,EAAE,mBAAmB,CAAC,MAAM,CAAC,CAAC;YACjG,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,0BAA0B,EAAE,GAAG,EAAE,IAAI,EAAE,mBAAmB,CAAC,GAAG,CAAC,CAAC;YAClG,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,GAAG,EAAE,IAAI,EAAE,mBAAmB,CAAC,MAAM,CAAC,CAAC;YACtG,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,GAAG,EAAE,IAAI,EAAE,mBAAmB,CAAC,GAAG,CAAC,CAAC;YACnG,MAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAC3E,GAAG,GAAG,EAAC,YAAY,EAAE,2BAA2B,EAAE,eAAe,EAAE,2BAA2B,EAAC,CAAC;YAEhG,2CAA2C;YAC3C,aAAa,CAAC,GAAG,EAAE,EAAE,EAAE;gBACrB,EAAC,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,EAAC,GAAG,EAAE,sBAAsB,EAAC,EAAC;gBAC7D,EAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,EAAC,SAAS,EAAE,CAAC,EAAC,EAAC;gBACnD,EAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,EAAC,UAAU,EAAE,CAAC,EAAE,GAAG,EAAE,0BAA0B,EAAC,EAAC;aACtF,CAAC,CAAC;YAEH,6EAA6E;YAC7E,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE;gBACpB,EAAC,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,EAAC,GAAG,EAAE,2BAA2B,EAAC,EAAC;gBAClE,EAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,EAAC,SAAS,EAAE,CAAC,EAAC,EAAC;gBACnD,EAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,EAAC,UAAU,EAAE,CAAC,EAAE,GAAG,EAAE,2BAA2B,EAAC,EAAC;aACvF,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEzC,MAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAE7E,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEpC,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAErD,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,CAAC,CAAC,CAAC;YAClE,MAAM,QAAQ,GAAG;gBACf,GAAG,aAAa,CAAC,CAAC,EAAE,sBAAsB,EAAE,GAAG,EAAE,IAAI,EAAE,mBAAmB,CAAC,QAAQ,CAAC;gBACpF,WAAW,EAAE,sBAAsB;gBACnC,OAAO,EAAE,QAAQ;aAClB,CAAC;YACF,MAAM,QAAQ,GAAG;gBACf,GAAG,aAAa,CAAC,CAAC,EAAE,0BAA0B,EAAE,GAAG,EAAE,IAAI,EAAE,mBAAmB,CAAC,MAAM,CAAC;gBACtF,WAAW,EAAE,sBAAsB;gBACnC,OAAO,EAAE,QAAQ;aAClB,CAAC;YACF,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,GAAG,EAAE,IAAI,EAAE,mBAAmB,CAAC,GAAG,CAAC,CAAC;YACnG,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,GAAG,EAAE,IAAI,EAAE,mBAAmB,CAAC,GAAG,CAAC,CAAC;YACnG,MAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAC3E,GAAG,GAAG,EAAC,YAAY,EAAE,2BAA2B,EAAE,eAAe,EAAE,2BAA2B,EAAC,CAAC;YAEhG,uDAAuD;YACvD,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE;gBACpB,EAAC,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,EAAC,GAAG,EAAE,0BAA0B,EAAE,KAAK,EAAE,QAAQ,EAAC,EAAC;gBAElF,EAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,EAAC,SAAS,EAAE,CAAC,EAAC,EAAC;gBACnD,EAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,EAAC,UAAU,EAAE,CAAC,EAAE,GAAG,EAAE,2BAA2B,EAAC,EAAC;gBAEtF,EAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,EAAC,SAAS,EAAE,CAAC,EAAC,EAAC;gBACnD,EAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,EAAE,EAAC,UAAU,EAAE,CAAC,EAAE,GAAG,EAAE,2BAA2B,EAAC,EAAC;aACvF,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEzC,MAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAE7E,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEpC,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;YAE9D,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;YAChE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,CAAC,CAAC,CAAC;YAClE,MAAM,eAAe,GAAG,CAAC,QAAQ,CAAC,CAAC;YACnC,GAAG,GAAG,EAAC,YAAY,EAAE,2BAA2B,EAAE,eAAe,EAAE,2BAA2B,EAAC,CAAC;YAEhG,MAAM,cAAc,GAAG,cAAc,CAAC,EAAE;gBACtC,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,GAAG,GAAG,CAAC;gBACzC,aAAa,CAAC,OAAO,EAAE,CAAC,EAAE;oBACxB,EAAC,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,EAAC,GAAG,EAAE,2BAA2B,EAAC,EAAC;iBACjE,CAAC,CAAC;YACL,CAAC,CAAC;YAEF,MAAM,kBAAkB,GAAG;gBACzB,OAAO;gBACP,QAAQ;gBACR,WAAW;aACZ,CAAC;YACF,KAAK,MAAM,SAAS,IAAI,kBAAkB,EAAE,CAAC;gBAC3C,cAAc,CAAC,SAAS,CAAC,CAAC;gBAC1B,cAAc,CAAC,SAAS,CAAC,CAAC;YAC5B,CAAC;YAED,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,KAAK,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEnE,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACzB,OAAO;oBACL,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI;iBAC/B,CAAC;YACJ,CAAC,CAAC,CAAC;iBACE,IAAI,CAAC,MAAM,CAAC;gBACX;oBACE,EAAE,EAAE,KAAK;oBACT,IAAI,EAAE,OAAO;iBACd;gBACD;oBACE,sGAAsG;oBACtG,EAAE,EAAE,UAAU;oBACd,IAAI,EAAE,QAAQ;iBACf;gBACD;oBACE,EAAE,EAAE,UAAU;oBACd,IAAI,EAAE,WAAW;iBAClB;aACF,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;YACnE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,sBAAsB,EAAE,CAAC,EAAE,IAAI,EAAE,mBAAmB,CAAC,KAAK,CAAC,CAAC;YAC9F,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,0BAA0B,EAAE,CAAC,EAAE,IAAI,EAAE,mBAAmB,CAAC,QAAQ,CAAC,CAAC;YACrG,kFAAkF;YAClF,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,CAAC,EAAE,IAAI,EAAE,mBAAmB,CAAC,KAAK,CAAC,CAAC;YACnG,QAAQ,CAAC,SAAS,GAAG,CAAC,QAAQ,CAAC,CAAC;YAChC,MAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACvD,GAAG,GAAG,EAAC,YAAY,EAAE,sBAAsB,EAAE,eAAe,EAAE,0BAA0B,EAAC,CAAC;YAE1F,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAExB,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEzC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,EAAE,KAAK,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,EAAE,IAAI,CAAC,CAAC;YACpD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,EAAE,KAAK,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,sBAAsB,EAAE,CAAC,CAAC,CAAC;YAC7D,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,0BAA0B,EAAE,CAAC,CAAC,CAAC;YACjE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,CAAC,CAAC,CAAC;YAClE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,EAAE,CAAC,CAAC;YACnE,wDAAwD;YACxD,QAAQ,CAAC,SAAS,GAAG;gBACnB,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE;oBACL,UAAU,EAAE,CAAC,EAAC,GAAG,EAAE,0BAA0B,EAAC,CAAC;oBAC/C,MAAM,EAAE,EAAC,MAAM,EAAE,EAAC,UAAU,EAAE,CAAC,EAAC,GAAG,EAAE,2BAA2B,EAAC,CAAC,EAAC,EAAC;iBACrE;aACF,CAAC;YACF,+EAA+E;YAC/E,sDAAsD;YACtD,QAAQ,CAAC,gBAAgB,GAAG,QAAQ,CAAC;YACrC,MAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAEjE,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAExB,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEzC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,sBAAsB,EAAE,CAAC,CAAC,CAAC;YAC7D,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,0BAA0B,EAAE,GAAG,CAAC,CAAC;YACnE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,GAAG,CAAC,CAAC;YACpE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,2BAA2B,EAAE,EAAE,CAAC,CAAC;YACnE,QAAQ,CAAC,SAAS,GAAG;gBACnB,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE;oBACL,UAAU,EAAE,CAAC,EAAC,GAAG,EAAE,0BAA0B,EAAC,CAAC;oBAC/C,MAAM,EAAE,EAAC,MAAM,EAAE,EAAC,UAAU,EAAE,CAAC,EAAC,GAAG,EAAE,2BAA2B,EAAC,CAAC,EAAC,EAAC;iBACrE;aACF,CAAC;YACF,MAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAEjE,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAExB,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEzC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,iBAAiB,EAAE,CAAC,CAAC,CAAC;YACxD,MAAM,gBAAgB,GAAG,aAAa,CAAC,CAAC,EAAE,kBAAkB,EAAE,CAAC,CAAC,CAAC;YACjE,MAAM,aAAa,GAAG,aAAa,CAAC,CAAC,EAAE,kBAAkB,EAAE,EAAE,CAAC,CAAC;YAC/D,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,iBAAiB,EAAE,EAAE,CAAC,CAAC;YACzD,oFAAoF;YACpF,QAAQ,CAAC,SAAS,GAAG;gBACnB,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,EAAC,UAAU,EAAE,CAAC,EAAC,GAAG,EAAE,kBAAkB,EAAC,CAAC,EAAE,MAAM,EAAE,EAAC,MAAM,EAAE,EAAC,UAAU,EAAE,CAAC,EAAC,GAAG,EAAE,IAAI,EAAC,CAAC,EAAC,EAAC,EAAC;aAChG,CAAC;YACF,uDAAuD;YACvD,QAAQ,CAAC,gBAAgB,GAAG,aAAa,CAAC;YAC1C,MAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,gBAAgB,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;YAC9E,GAAG,GAAG,EAAC,YAAY,EAAE,iBAAiB,EAAE,eAAe,EAAE,iBAAiB,EAAC,CAAC;YAE5E,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAExB,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEzC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;YAClE,MAAM,WAAW,GAAG,aAAa,CAAC,CAAC,EAAE,eAAe,EAAE,CAAC,CAAC,CAAC;YACzD,qCAAqC;YACrC,qBAAqB;YACrB,qCAAqC;YACrC,MAAM,UAAU,GAAG,aAAa,CAAC,CAAC,EAAE,mBAAmB,EAAE,CAAC,EAAE,EAAC,GAAG,EAAE,mBAAmB,EAAC,CAAC,CAAC;YACxF,MAAM,UAAU,GAAG,aAAa,CAAC,CAAC,EAAE,mBAAmB,EAAE,CAAC,EAAE,EAAC,GAAG,EAAE,mBAAmB,EAAC,CAAC,CAAC;YACxF,MAAM,eAAe,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC9D,GAAG,GAAG,EAAC,YAAY,EAAE,eAAe,EAAE,eAAe,EAAE,eAAe,EAAC,CAAC;YAExE,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAExB,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACzC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;YAElC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,EAAE,CAAC,CAAC;YACjD,2EAA2E;YAC3E,yDAAyD;YACzD,8EAA8E;YAC9E,0EAA0E;YAC1E,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iEAAiE,EAAE,GAAG,EAAE;YACzE,MAAM,WAAW,GAAG,aAAa,CAAC,CAAC,EAAE,eAAe,EAAE,CAAC,CAAC,CAAC;YACzD,qCAAqC;YACrC,qBAAqB;YACrB,qCAAqC;YACrC,MAAM,UAAU,GAAG,aAAa,CAAC,CAAC,EAAE,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAC5D,MAAM,UAAU,GAAG,aAAa,CAAC,CAAC,EAAE,mBAAmB,EAAE,CAAC,CAAC,CAAC;YAC5D,UAAU,CAAC,gBAAgB,GAAG,UAAU,CAAC;YACzC,UAAU,CAAC,gBAAgB,GAAG,UAAU,CAAC;YACzC,MAAM,eAAe,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAC9D,GAAG,GAAG,EAAC,YAAY,EAAE,eAAe,EAAE,eAAe,EAAE,eAAe,EAAC,CAAC;YAExE,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAExB,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACzC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;YAElC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,sBAAsB,EAAE,CAAC,EAAE,IAAI,EAAE,mBAAmB,CAAC,KAAK,CAAC,CAAC;YAC9F,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,EAAE,0BAA0B,EAAE,CAAC,EAAE,IAAI,EAAE,mBAAmB,CAAC,QAAQ,CAAC,CAAC;YACrG,MAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAC7C,GAAG,GAAG,EAAC,YAAY,EAAE,0BAA0B,EAAE,eAAe,EAAE,0BAA0B,EAAC,CAAC;YAE9F,iCAAiC;YACjC,aAAa,CAAC,GAAG,EAAE,EAAE,EAAE;gBACrB,EAAC,IAAI,EAAE,gBAAgB,EAAC;aACzB,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YACjF,MAAM,KAAK,GAAG,EAAE,CAAC;YACjB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEzC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,EAAE,EAAE,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// @ts-nocheck TODO(crbug.com/348449529)\n\nimport * as Lantern from '../lantern.js';\n\nconst {NetworkRequestTypes} = Lantern.Types;\nconst {PageDependencyGraph} = Lantern.Graph;\n\nfunction createRequest(\n    requestId,\n    url,\n    rendererStartTime = 0,\n    initiator = null,\n    resourceType = NetworkRequestTypes.Document,\n    fromWorker = false,\n    ): Lantern.NetworkRequest {\n  const networkEndTime = rendererStartTime + 50;\n  return {\n    requestId,\n    url,\n    rendererStartTime,\n    networkEndTime,\n    initiator,\n    resourceType,\n    fromWorker,\n  };\n}\n\nconst TOPLEVEL_TASK_NAME = 'TaskQueueManager::ProcessTaskFromWorkQueue';\ndescribe('PageDependencyGraph', () => {\n  let traceEvents;\n  let url;\n\n  function addTaskEvents(startTs, duration, evts) {\n    const mainEvent = {\n      name: TOPLEVEL_TASK_NAME,\n      tid: 1,\n      ts: startTs * 1000,\n      dur: duration * 1000,\n      args: {},\n    };\n\n    traceEvents.push(mainEvent);\n\n    let i = 0;\n    for (const evt of evts) {\n      i++;\n      traceEvents.push({\n        name: evt.name,\n        ts: (evt.ts * 1000) || (startTs * 1000 + i),\n        args: {data: evt.data},\n      });\n    }\n  }\n\n  beforeEach(() => {\n    traceEvents = [];\n    url = {requestedUrl: 'https://example.com/', mainDocumentUrl: 'https://example.com/'};\n  });\n\n  describe('#getNetworkNodeOutput', () => {\n    const request1 = createRequest(1, 'https://example.com/');\n    const request2 = createRequest(2, 'https://example.com/page');\n    const request3 = createRequest(3, 'https://example.com/page');\n    const networkRequests = [request1, request2, request3];\n\n    it('should create network nodes', () => {\n      const networkNodeOutput = PageDependencyGraph.getNetworkNodeOutput(networkRequests);\n      for (let i = 0; i < networkRequests.length; i++) {\n        const node = networkNodeOutput.nodes[i];\n        assert.ok(node, `did not create node at index ${i}`);\n        assert.strictEqual(node.id, i + 1);\n        assert.strictEqual(node.type, 'network');\n        assert.strictEqual(node.request, networkRequests[i]);\n      }\n    });\n\n    it('should ignore worker requests', () => {\n      const workerRequest = createRequest(4, 'https://example.com/worker.js', 0, null, 'Script', true);\n      const recordsWithWorker = [\n        ...networkRequests,\n        workerRequest,\n      ];\n\n      const networkNodeOutput = PageDependencyGraph.getNetworkNodeOutput(recordsWithWorker);\n\n      expect(networkNodeOutput.nodes).to.have.lengthOf(3);\n      expect(networkNodeOutput.nodes.map(node => node.request)).not.contain(workerRequest);\n    });\n\n    it('should index nodes by ID', () => {\n      const networkNodeOutput = PageDependencyGraph.getNetworkNodeOutput(networkRequests);\n      const indexedById = networkNodeOutput.idToNodeMap;\n      for (const request of networkRequests) {\n        assert.strictEqual(indexedById.get(request.requestId).request, request);\n      }\n    });\n\n    it('should index nodes by URL', () => {\n      const networkNodeOutput = PageDependencyGraph.getNetworkNodeOutput(networkRequests);\n      const nodes = networkNodeOutput.nodes;\n      const indexedByUrl = networkNodeOutput.urlToNodeMap;\n      assert.deepEqual(indexedByUrl.get('https://example.com/'), [nodes[0]]);\n      assert.deepEqual(indexedByUrl.get('https://example.com/page'), [nodes[1], nodes[2]]);\n    });\n\n    it('should index nodes by frame', () => {\n      const networkNodeOutput = PageDependencyGraph.getNetworkNodeOutput([\n        {...createRequest(1, 'https://example.com/'), documentURL: 'https://example.com/', frameId: 'A'},\n        {...createRequest(2, 'https://example.com/page'), documentURL: 'https://example.com/', frameId: 'A'},\n        {\n          ...createRequest(3, 'https://example.com/page2'),\n          documentURL: 'https://example.com/page2',\n          frameId: 'C',\n          resourceType: NetworkRequestTypes.XHR,\n        },\n        {...createRequest(4, 'https://example.com/page3'), documentURL: 'https://example.com/page3', frameId: 'D'},\n        {\n          ...createRequest(4, 'https://example.com/page4'),\n          documentURL: 'https://example.com/page4',\n          frameId: undefined,\n        },\n        {\n          ...createRequest(4, 'https://example.com/page5'),\n          documentURL: 'https://example.com/page5',\n          frameId: 'collision',\n        },\n        {\n          ...createRequest(4, 'https://example.com/page6'),\n          documentURL: 'https://example.com/page6',\n          frameId: 'collision',\n        },\n      ]);\n\n      const nodes = networkNodeOutput.nodes;\n      const indexedByFrame = networkNodeOutput.frameIdToNodeMap;\n      expect([...indexedByFrame.entries()]).deep.equals([\n        ['A', nodes[0]],\n        ['D', nodes[3]],\n        ['collision', null],\n      ]);\n    });\n  });\n\n  describe('#getCPUNodes', () => {\n    it('should create CPU nodes', () => {\n      addTaskEvents(0, 100, [\n        {name: 'MyCustomEvent'}, {name: 'OtherEvent'}, {name: 'OutsideTheWindow', ts: 200},\n        {name: 'OrphanedEvent'},  // should be ignored since we stopped at OutsideTheWindow\n      ]);\n\n      addTaskEvents(250, 50, [\n        {name: 'LaterEvent'},\n      ]);\n\n      assert.strictEqual(traceEvents.length, 7);\n      const nodes = PageDependencyGraph.getCPUNodes(traceEvents);\n      assert.strictEqual(nodes.length, 2);\n\n      const node1 = nodes[0];\n      assert.strictEqual(node1.id, '1.0');\n      assert.strictEqual(node1.type, 'cpu');\n      assert.strictEqual(node1.event, traceEvents[0]);\n      assert.strictEqual(node1.childEvents.length, 2);\n      assert.strictEqual(node1.childEvents[1].name, 'OtherEvent');\n\n      const node2 = nodes[1];\n      assert.strictEqual(node2.id, '1.250000');\n      assert.strictEqual(node2.type, 'cpu');\n      assert.strictEqual(node2.event, traceEvents[5]);\n      assert.strictEqual(node2.childEvents.length, 1);\n      assert.strictEqual(node2.childEvents[0].name, 'LaterEvent');\n    });\n\n    it('should correct overlapping tasks', () => {\n      addTaskEvents(0, 500, [\n        {name: 'MyCustomEvent'},\n        {name: 'OtherEvent'},\n      ]);\n\n      addTaskEvents(400, 50, [\n        {name: 'OverlappingEvent'},\n      ]);\n\n      assert.strictEqual(traceEvents.length, 5);\n      const nodes = PageDependencyGraph.getCPUNodes(traceEvents);\n      assert.strictEqual(nodes.length, 2);\n\n      const node1 = nodes[0];\n      assert.strictEqual(node1.id, '1.0');\n      assert.strictEqual(node1.type, 'cpu');\n      assert.strictEqual(node1.event, traceEvents[0]);\n      assert.strictEqual(node1.childEvents.length, 2);\n      assert.strictEqual(node1.childEvents[0].name, 'MyCustomEvent');\n      assert.strictEqual(node1.childEvents[1].name, 'OtherEvent');\n\n      const node2 = nodes[1];\n      assert.strictEqual(node2.id, '1.400000');\n      assert.strictEqual(node2.type, 'cpu');\n      assert.strictEqual(node2.event, traceEvents[3]);\n      assert.strictEqual(node2.childEvents.length, 1);\n      assert.strictEqual(node2.childEvents[0].name, 'OverlappingEvent');\n    });\n  });\n\n  describe('#createGraph', () => {\n    it('should compute a simple network graph', () => {\n      const request1 = createRequest(1, 'https://example.com/', 0);\n      const request2 = createRequest(2, 'https://example.com/page', 5);\n      const request3 = createRequest(3, 'https://example.com/page2', 5);\n      const request4 = createRequest(4, 'https://example.com/page3', 10, {url: 'https://example.com/page'});\n      const networkRequests = [request1, request2, request3, request4];\n\n      addTaskEvents(0, 0, []);\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const nodes = [];\n      graph.traverse(node => nodes.push(node));\n\n      assert.strictEqual(nodes.length, 4);\n      assert.deepEqual(nodes.map(node => node.id), [1, 2, 3, 4]);\n      assert.deepEqual(nodes[0].getDependencies(), []);\n      assert.deepEqual(nodes[1].getDependencies(), [nodes[0]]);\n      assert.deepEqual(nodes[2].getDependencies(), [nodes[0]]);\n      assert.deepEqual(nodes[3].getDependencies(), [nodes[1]]);\n    });\n\n    it('should compute a simple network and CPU graph', () => {\n      const request1 = createRequest(1, 'https://example.com/', 0);\n      const request2 = createRequest(2, 'https://example.com/page', 50);\n      const request3 = createRequest(3, 'https://example.com/page2', 50);\n      const request4 = createRequest(4, 'https://example.com/page3', 300, null, NetworkRequestTypes.XHR);\n      const networkRequests = [request1, request2, request3, request4];\n\n      addTaskEvents(200, 200, [\n        {name: 'EvaluateScript', data: {url: 'https://example.com/page'}},\n        {name: 'ResourceSendRequest', data: {requestId: 4}},\n      ]);\n\n      addTaskEvents(700, 50, [\n        {name: 'InvalidateLayout', data: {stackTrace: [{url: 'https://example.com/page2'}]}},\n        {name: 'XHRReadyStateChange', data: {readyState: 4, url: 'https://example.com/page3'}},\n      ]);\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const nodes = [];\n      graph.traverse(node => nodes.push(node));\n\n      const getIds = nodes => nodes.map(node => node.id);\n      const getDependencyIds = node => getIds(node.getDependencies());\n\n      assert.strictEqual(nodes.length, 6);\n      assert.deepEqual(getIds(nodes), [1, 2, 3, 4, '1.200000', '1.700000']);\n      assert.deepEqual(getDependencyIds(nodes[0]), []);\n      assert.deepEqual(getDependencyIds(nodes[1]), [1]);\n      assert.deepEqual(getDependencyIds(nodes[2]), [1]);\n      assert.deepEqual(getDependencyIds(nodes[3]), [1, '1.200000']);\n      assert.deepEqual(getDependencyIds(nodes[4]), [2]);\n      assert.deepEqual(getDependencyIds(nodes[5]), [3, 4]);\n    });\n\n    it('should compute a network graph with duplicate URLs', () => {\n      const request1 = createRequest(1, 'https://example.com/', 0);\n      const request2 = createRequest(2, 'https://example.com/page', 5);\n      const request3 = createRequest(3, 'https://example.com/page', 5);  // duplicate URL\n      const request4 = createRequest(4, 'https://example.com/page3', 10, {url: 'https://example.com/page'});\n      const networkRequests = [request1, request2, request3, request4];\n\n      addTaskEvents(0, 0, []);\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const nodes = [];\n      graph.traverse(node => nodes.push(node));\n\n      assert.strictEqual(nodes.length, 4);\n      assert.deepEqual(nodes.map(node => node.id), [1, 2, 3, 4]);\n      assert.deepEqual(nodes[0].getDependencies(), []);\n      assert.deepEqual(nodes[1].getDependencies(), [nodes[0]]);\n      assert.deepEqual(nodes[2].getDependencies(), [nodes[0]]);\n      assert.deepEqual(nodes[3].getDependencies(), [nodes[0]]);  // should depend on rootNode instead\n    });\n\n    it('should be forgiving without cyclic dependencies', () => {\n      const request1 = createRequest(1, 'https://example.com/', 0);\n      const request2 = createRequest(2, 'https://example.com/page', 250, null, NetworkRequestTypes.XHR);\n      const request3 = createRequest(3, 'https://example.com/page2', 210);\n      const request4 = createRequest(4, 'https://example.com/page3', 590);\n      const request5 = createRequest(5, 'https://example.com/page4', 595, null, NetworkRequestTypes.XHR);\n      const networkRequests = [request1, request2, request3, request4, request5];\n\n      addTaskEvents(200, 200, [\n        // CPU 1.2 should depend on Network 1\n        {name: 'EvaluateScript', data: {url: 'https://example.com/'}},\n\n        // Network 2 should depend on CPU 1.2, but 1.2 should not depend on Network 1\n        {name: 'ResourceSendRequest', data: {requestId: 2}},\n        {name: 'XHRReadyStateChange', data: {readyState: 4, url: 'https://example.com/page'}},\n\n        // CPU 1.2 should not depend on Network 3 because it starts after CPU 1.2\n        {name: 'EvaluateScript', data: {url: 'https://example.com/page2'}},\n      ]);\n\n      addTaskEvents(600, 150, [\n        // CPU 1.6 should depend on Network 4 even though it ends at 410ms\n        {name: 'InvalidateLayout', data: {stackTrace: [{url: 'https://example.com/page3'}]}},\n        // Network 5 should not depend on CPU 1.6 because it started before CPU 1.6\n        {name: 'ResourceSendRequest', data: {requestId: 5}},\n      ]);\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const nodes = [];\n      graph.traverse(node => nodes.push(node));\n\n      const getDependencyIds = node => node.getDependencies().map(node => node.id);\n\n      assert.strictEqual(nodes.length, 7);\n      assert.deepEqual(getDependencyIds(nodes[0]), []);\n      assert.deepEqual(getDependencyIds(nodes[1]), [1, '1.200000']);\n      assert.deepEqual(getDependencyIds(nodes[2]), [1]);\n      assert.deepEqual(getDependencyIds(nodes[3]), [1]);\n      assert.deepEqual(getDependencyIds(nodes[4]), [1]);\n      assert.deepEqual(getDependencyIds(nodes[5]), [1]);\n      assert.deepEqual(getDependencyIds(nodes[6]), [4]);\n    });\n\n    it('should not install timer dependency on itself', () => {\n      const request1 = createRequest(1, 'https://example.com/', 0);\n      const networkRequests = [request1];\n\n      addTaskEvents(200, 200, [\n        // CPU 1.2 should depend on Network 1\n        {name: 'EvaluateScript', data: {url: 'https://example.com/'}},\n        // CPU 1.2 will install and fire it's own timer, but should not depend on itself\n        {name: 'TimerInstall', data: {timerId: 'timer1'}},\n        {name: 'TimerFire', data: {timerId: 'timer1'}},\n      ]);\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const nodes = [];\n      graph.traverse(node => nodes.push(node));\n\n      const getDependencyIds = node => node.getDependencies().map(node => node.id);\n\n      assert.strictEqual(nodes.length, 2);\n      assert.deepEqual(getDependencyIds(nodes[0]), []);\n      assert.deepEqual(getDependencyIds(nodes[1]), [1]);\n    });\n\n    it('should prune short tasks', () => {\n      const request0 = createRequest(0, 'https://example.com/page0', 0);\n      const request1 = createRequest(1, 'https://example.com/', 100, null, NetworkRequestTypes.Script);\n      const request2 = createRequest(2, 'https://example.com/page', 200, null, NetworkRequestTypes.XHR);\n      const request3 = createRequest(3, 'https://example.com/page2', 300, null, NetworkRequestTypes.Script);\n      const request4 = createRequest(4, 'https://example.com/page3', 400, null, NetworkRequestTypes.XHR);\n      const networkRequests = [request0, request1, request2, request3, request4];\n      url = {requestedUrl: 'https://example.com/page0', mainDocumentUrl: 'https://example.com/page0'};\n\n      // Long task, should be kept in the output.\n      addTaskEvents(120, 50, [\n        {name: 'EvaluateScript', data: {url: 'https://example.com/'}},\n        {name: 'ResourceSendRequest', data: {requestId: 2}},\n        {name: 'XHRReadyStateChange', data: {readyState: 4, url: 'https://example.com/page'}},\n      ]);\n\n      // Short task, should be pruned, but the 3->4 relationship should be retained\n      addTaskEvents(350, 5, [\n        {name: 'EvaluateScript', data: {url: 'https://example.com/page2'}},\n        {name: 'ResourceSendRequest', data: {requestId: 4}},\n        {name: 'XHRReadyStateChange', data: {readyState: 4, url: 'https://example.com/page3'}},\n      ]);\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const nodes = [];\n      graph.traverse(node => nodes.push(node));\n\n      const getDependencyIds = node => node.getDependencies().map(node => node.id);\n\n      assert.strictEqual(nodes.length, 6);\n\n      assert.deepEqual(getDependencyIds(nodes[0]), []);\n      assert.deepEqual(getDependencyIds(nodes[1]), [0]);\n      assert.deepEqual(getDependencyIds(nodes[2]), [0, '1.120000']);\n      assert.deepEqual(getDependencyIds(nodes[3]), [0]);\n      assert.deepEqual(getDependencyIds(nodes[4]), [0, 3]);\n\n      assert.strictEqual('1.120000', nodes[5].id);\n      assert.deepEqual(getDependencyIds(nodes[5]), [1]);\n    });\n\n    it('should not prune highly-connected short tasks', () => {\n      const request0 = createRequest(0, 'https://example.com/page0', 0);\n      const request1 = {\n        ...createRequest(1, 'https://example.com/', 100, null, NetworkRequestTypes.Document),\n        documentURL: 'https://example.com/',\n        frameId: 'frame1',\n      };\n      const request2 = {\n        ...createRequest(2, 'https://example.com/page', 200, null, NetworkRequestTypes.Script),\n        documentURL: 'https://example.com/',\n        frameId: 'frame1',\n      };\n      const request3 = createRequest(3, 'https://example.com/page2', 300, null, NetworkRequestTypes.XHR);\n      const request4 = createRequest(4, 'https://example.com/page3', 400, null, NetworkRequestTypes.XHR);\n      const networkRequests = [request0, request1, request2, request3, request4];\n      url = {requestedUrl: 'https://example.com/page0', mainDocumentUrl: 'https://example.com/page0'};\n\n      // Short task, evaluates script (2) and sends two XHRs.\n      addTaskEvents(220, 5, [\n        {name: 'EvaluateScript', data: {url: 'https://example.com/page', frame: 'frame1'}},\n\n        {name: 'ResourceSendRequest', data: {requestId: 3}},\n        {name: 'XHRReadyStateChange', data: {readyState: 4, url: 'https://example.com/page2'}},\n\n        {name: 'ResourceSendRequest', data: {requestId: 4}},\n        {name: 'XHRReadyStateChange', data: {readyState: 4, url: 'https://example.com/page3'}},\n      ]);\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const nodes = [];\n      graph.traverse(node => nodes.push(node));\n\n      const getDependencyIds = node => node.getDependencies().map(node => node.id);\n\n      assert.strictEqual(nodes.length, 6);\n\n      assert.deepEqual(getDependencyIds(nodes[0]), []);\n      assert.deepEqual(getDependencyIds(nodes[1]), [0]);\n      assert.deepEqual(getDependencyIds(nodes[2]), [0]);\n      assert.deepEqual(getDependencyIds(nodes[3]), [0, '1.220000']);\n      assert.deepEqual(getDependencyIds(nodes[4]), [0, '1.220000']);\n\n      assert.strictEqual('1.220000', nodes[5].id);\n      assert.deepEqual(getDependencyIds(nodes[5]), [1, 2]);\n    });\n\n    it('should not prune short, first tasks of critical events', () => {\n      const request0 = createRequest(0, 'https://example.com/page0', 0);\n      const networkRequests = [request0];\n      url = {requestedUrl: 'https://example.com/page0', mainDocumentUrl: 'https://example.com/page0'};\n\n      const makeShortEvent = firstEventName => {\n        const startTs = traceEvents.length * 100;\n        addTaskEvents(startTs, 5, [\n          {name: firstEventName, data: {url: 'https://example.com/page0'}},\n        ]);\n      };\n\n      const criticalEventNames = [\n        'Paint',\n        'Layout',\n        'ParseHTML',\n      ];\n      for (const eventName of criticalEventNames) {\n        makeShortEvent(eventName);\n        makeShortEvent(eventName);\n      }\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const cpuNodes = [];\n      graph.traverse(node => node.type === 'cpu' && cpuNodes.push(node));\n\n      expect(cpuNodes.map(node => {\n        return {\n          id: node.id,\n          name: node.childEvents[0].name,\n        };\n      }))\n          .deep.equals([\n            {\n              id: '1.0',\n              name: 'Paint',\n            },\n            {\n              // ID jumps by 4 between each because each node has 2 CPU tasks and we skip the 2nd of each event type\n              id: '1.400000',\n              name: 'Layout',\n            },\n            {\n              id: '1.800000',\n              name: 'ParseHTML',\n            },\n          ]);\n    });\n\n    it('should set isMainDocument on request with mainDocumentUrl', () => {\n      const request1 = createRequest(1, 'https://example.com/', 0, null, NetworkRequestTypes.Other);\n      const request2 = createRequest(2, 'https://example.com/page', 5, null, NetworkRequestTypes.Document);\n      // Add in another unrelated + early request to make sure we pick the correct chain\n      const request3 = createRequest(3, 'https://example.com/page2', 0, null, NetworkRequestTypes.Other);\n      request2.redirects = [request1];\n      const networkRequests = [request1, request2, request3];\n      url = {requestedUrl: 'https://example.com/', mainDocumentUrl: 'https://example.com/page'};\n\n      addTaskEvents(0, 0, []);\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const nodes = [];\n      graph.traverse(node => nodes.push(node));\n\n      assert.strictEqual(nodes.length, 3);\n      assert.strictEqual(nodes[0].id, 1);\n      assert.strictEqual(nodes[0].isMainDocument(), false);\n      assert.strictEqual(nodes[1].isMainDocument(), true);\n      assert.strictEqual(nodes[2].isMainDocument(), false);\n    });\n\n    it('should link up script initiators', () => {\n      const request1 = createRequest(1, 'https://example.com/', 0);\n      const request2 = createRequest(2, 'https://example.com/page', 5);\n      const request3 = createRequest(3, 'https://example.com/page2', 5);\n      const request4 = createRequest(4, 'https://example.com/page3', 20);\n      // Set multiple initiator requests through script stack.\n      request4.initiator = {\n        type: 'script',\n        stack: {\n          callFrames: [{url: 'https://example.com/page'}],\n          parent: {parent: {callFrames: [{url: 'https://example.com/page2'}]}},\n        },\n      };\n      // Also set the initiatorRequest that Lighthouse's network-recorder.js creates.\n      // This should be ignored and only used as a fallback.\n      request4.initiatorRequest = request1;\n      const networkRequests = [request1, request2, request3, request4];\n\n      addTaskEvents(0, 0, []);\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const nodes = [];\n      graph.traverse(node => nodes.push(node));\n\n      assert.strictEqual(nodes.length, 4);\n      assert.deepEqual(nodes.map(node => node.id), [1, 2, 3, 4]);\n      assert.deepEqual(nodes[0].getDependencies(), []);\n      assert.deepEqual(nodes[1].getDependencies(), [nodes[0]]);\n      assert.deepEqual(nodes[2].getDependencies(), [nodes[0]]);\n      assert.deepEqual(nodes[3].getDependencies(), [nodes[1], nodes[2]]);\n    });\n\n    it('should link up script initiators only when timing is valid', () => {\n      const request1 = createRequest(1, 'https://example.com/', 0);\n      const request2 = createRequest(2, 'https://example.com/page', 500);\n      const request3 = createRequest(3, 'https://example.com/page2', 500);\n      const request4 = createRequest(4, 'https://example.com/page3', 20);\n      request4.initiator = {\n        type: 'script',\n        stack: {\n          callFrames: [{url: 'https://example.com/page'}],\n          parent: {parent: {callFrames: [{url: 'https://example.com/page2'}]}},\n        },\n      };\n      const networkRequests = [request1, request2, request3, request4];\n\n      addTaskEvents(0, 0, []);\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const nodes = [];\n      graph.traverse(node => nodes.push(node));\n\n      assert.strictEqual(nodes.length, 4);\n      assert.deepEqual(nodes.map(node => node.id), [1, 2, 3, 4]);\n      assert.deepEqual(nodes[0].getDependencies(), []);\n      assert.deepEqual(nodes[1].getDependencies(), [nodes[0]]);\n      assert.deepEqual(nodes[2].getDependencies(), [nodes[0]]);\n      assert.deepEqual(nodes[3].getDependencies(), [nodes[0]]);\n    });\n\n    it('should link up script initiators with prefetch requests', () => {\n      const request1 = createRequest(1, 'https://a.com/1', 0);\n      const request2Prefetch = createRequest(2, 'https://a.com/js', 5);\n      const request2Fetch = createRequest(3, 'https://a.com/js', 10);\n      const request3 = createRequest(4, 'https://a.com/4', 20);\n      // Set the initiator to an ambiguous URL (there are 2 requests for https://a.com/js)\n      request3.initiator = {\n        type: 'script',\n        stack: {callFrames: [{url: 'https://a.com/js'}], parent: {parent: {callFrames: [{url: 'js'}]}}},\n      };\n      // Set the initiatorRequest that it should fallback to.\n      request3.initiatorRequest = request2Fetch;\n      const networkRequests = [request1, request2Prefetch, request2Fetch, request3];\n      url = {requestedUrl: 'https://a.com/1', mainDocumentUrl: 'https://a.com/1'};\n\n      addTaskEvents(0, 0, []);\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const nodes = [];\n      graph.traverse(node => nodes.push(node));\n\n      assert.strictEqual(nodes.length, 4);\n      assert.deepEqual(nodes.map(node => node.id), [1, 2, 3, 4]);\n      assert.deepEqual(nodes[0].getDependencies(), []);\n      assert.deepEqual(nodes[1].getDependencies(), [nodes[0]]);\n      assert.deepEqual(nodes[2].getDependencies(), [nodes[0]]);\n      assert.deepEqual(nodes[3].getDependencies(), [nodes[2]]);\n    });\n\n    it('should not link up initiators with circular dependencies', () => {\n      const rootRequest = createRequest(1, 'https://a.com', 0);\n      // jsRequest1 initiated by jsRequest2\n      //              *AND*\n      // jsRequest2 initiated by jsRequest1\n      const jsRequest1 = createRequest(2, 'https://a.com/js1', 1, {url: 'https://a.com/js2'});\n      const jsRequest2 = createRequest(3, 'https://a.com/js2', 1, {url: 'https://a.com/js1'});\n      const networkRequests = [rootRequest, jsRequest1, jsRequest2];\n      url = {requestedUrl: 'https://a.com', mainDocumentUrl: 'https://a.com'};\n\n      addTaskEvents(0, 0, []);\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const nodes = [];\n      graph.traverse(node => nodes.push(node));\n      nodes.sort((a, b) => a.id - b.id);\n\n      assert.strictEqual(nodes.length, 3);\n      assert.deepEqual(nodes.map(node => node.id), [1, 2, 3]);\n      assert.deepEqual(nodes[0].getDependencies(), []);\n      // We don't know which of the initiators to trust in a cycle, so for now we\n      // trust the earliest one (mostly because it's simplest).\n      // In the wild so far we've only seen this for self-referential relationships.\n      // If the evidence changes, then feel free to change these expectations :)\n      assert.deepEqual(nodes[1].getDependencies(), [nodes[2]]);\n      assert.deepEqual(nodes[2].getDependencies(), [nodes[0]]);\n    });\n\n    it('should not link up initiatorRequests with circular dependencies', () => {\n      const rootRequest = createRequest(1, 'https://a.com', 0);\n      // jsRequest1 initiated by jsRequest2\n      //              *AND*\n      // jsRequest2 initiated by jsRequest1\n      const jsRequest1 = createRequest(2, 'https://a.com/js1', 1);\n      const jsRequest2 = createRequest(3, 'https://a.com/js2', 1);\n      jsRequest1.initiatorRequest = jsRequest2;\n      jsRequest2.initiatorRequest = jsRequest1;\n      const networkRequests = [rootRequest, jsRequest1, jsRequest2];\n      url = {requestedUrl: 'https://a.com', mainDocumentUrl: 'https://a.com'};\n\n      addTaskEvents(0, 0, []);\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const nodes = [];\n      graph.traverse(node => nodes.push(node));\n      nodes.sort((a, b) => a.id - b.id);\n\n      assert.strictEqual(nodes.length, 3);\n      assert.deepEqual(nodes.map(node => node.id), [1, 2, 3]);\n      assert.deepEqual(nodes[0].getDependencies(), []);\n      assert.deepEqual(nodes[1].getDependencies(), [nodes[2]]);\n      assert.deepEqual(nodes[2].getDependencies(), [nodes[0]]);\n    });\n\n    it('should find root if it is not the first node', () => {\n      const request1 = createRequest(1, 'https://example.com/', 0, null, NetworkRequestTypes.Other);\n      const request2 = createRequest(2, 'https://example.com/page', 5, null, NetworkRequestTypes.Document);\n      const networkRequests = [request1, request2];\n      url = {requestedUrl: 'https://example.com/page', mainDocumentUrl: 'https://example.com/page'};\n\n      // Evaluated before root request.\n      addTaskEvents(0.1, 50, [\n        {name: 'EvaluateScript'},\n      ]);\n\n      const graph = PageDependencyGraph.createGraph(traceEvents, networkRequests, url);\n      const nodes = [];\n      graph.traverse(node => nodes.push(node));\n\n      assert.strictEqual(nodes.length, 1);\n      assert.deepEqual(nodes.map(node => node.id), [2]);\n      assert.deepEqual(nodes[0].getDependencies(), []);\n      assert.deepEqual(nodes[0].getDependents(), []);\n    });\n  });\n});\n"]}