{"version":3,"file":"MetricTestUtils.js","sourceRoot":"","sources":["../../../../../../../../front_end/models/trace/lantern/testing/MetricTestUtils.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,KAAK,MAAM,gBAAgB,CAAC;AACxC,OAAO,KAAK,OAAO,MAAM,eAAe,CAAC;AAEzC,SAAS,cAAc,CAAC,WAAgD;IACtE,OAAO;QACL,WAAW,EAAE,WAAoD;KAClE,CAAC;AACJ,CAAC;AAED,KAAK,UAAU,QAAQ,CAAC,KAA0B;IAChD,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,cAAc,CAAC,qBAAqB,EAAE,CAAC;IACzE,MAAM,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,WAAyC,EAAE,EAAC,YAAY,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;IACtH,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QAC3B,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;IAC7B,CAAC;IACD,OAAO,SAAS,CAAC,WAAW,CAAC;AAC/B,CAAC;AAED,KAAK,UAAU,6BAA6B,CAAC,EAAC,KAAK,EAAE,QAAQ,EAAE,GAAG,EAIjE;IACC,QAAQ,GAAG,QAAQ,IAAI,EAAuC,CAAC;IAC/D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QAC/B,QAAQ,CAAC,gBAAgB,GAAG,UAAU,CAAC;IACzC,CAAC;IACD,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC1C,MAAM,QAAQ,GAAG,KAAK,CAAC,sBAAsB,CAAC,qBAAqB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IACxF,MAAM,eAAe,GAAG,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACvE,IAAI,CAAC,eAAe,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACxC,CAAC;IAED,MAAM,OAAO,GAAG,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC;IAC7C,MAAM,YAAY,GAAG,WAAW,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC;IACtF,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC5C,CAAC;IAED,OAAO;QACL,SAAS,EAAE,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,eAAe,CAAC,EAAC,GAAG,QAAQ,EAAE,eAAe,EAAC,CAAC;QACvF,KAAK,EAAE,KAAK,CAAC,sBAAsB,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,CAAC;QAClF,mBAAmB,EAAE,KAAK,CAAC,sBAAsB,CAAC,yBAAyB,CAAC,WAAW,EAAE,OAAO,EAAE,YAAY,CAAC;KAChH,CAAC;AACJ,CAAC;AAED,OAAO,EACL,6BAA6B,EAC7B,QAAQ,EACR,cAAc,GACf,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../trace.js';\nimport * as Lantern from '../lantern.js';\n\nfunction toLanternTrace(traceEvents: readonly Trace.Types.Events.Event[]): Lantern.Types.Trace {\n  return {\n    traceEvents: traceEvents as unknown as Lantern.Types.TraceEvent[],\n  };\n}\n\nasync function runTrace(trace: Lantern.Types.Trace) {\n  const processor = Trace.Processor.TraceProcessor.createWithAllHandlers();\n  await processor.parse(trace.traceEvents as Trace.Types.Events.Event[], {isCPUProfile: false, isFreshRecording: true});\n  if (!processor.parsedTrace) {\n    throw new Error('No data');\n  }\n  return processor.parsedTrace;\n}\n\nasync function getComputationDataFromFixture({trace, settings, url}: {\n  trace: Lantern.Types.Trace,\n  settings?: Lantern.Types.Simulation.Settings,\n  url?: Lantern.Types.Simulation.URL,\n}) {\n  settings = settings ?? {} as Lantern.Types.Simulation.Settings;\n  if (!settings.throttlingMethod) {\n    settings.throttlingMethod = 'simulate';\n  }\n  const parsedTrace = await runTrace(trace);\n  const requests = Trace.LanternComputationData.createNetworkRequests(trace, parsedTrace);\n  const networkAnalysis = Lantern.Core.NetworkAnalyzer.analyze(requests);\n  if (!networkAnalysis) {\n    throw new Error('no networkAnalysis');\n  }\n\n  const frameId = parsedTrace.Meta.mainFrameId;\n  const navigationId = parsedTrace.Meta.mainFrameNavigations[0].args.data?.navigationId;\n  if (!navigationId) {\n    throw new Error('no navigation id found');\n  }\n\n  return {\n    simulator: Lantern.Simulation.Simulator.createSimulator({...settings, networkAnalysis}),\n    graph: Trace.LanternComputationData.createGraph(requests, trace, parsedTrace, url),\n    processedNavigation: Trace.LanternComputationData.createProcessedNavigation(parsedTrace, frameId, navigationId),\n  };\n}\n\nexport {\n  getComputationDataFromFixture,\n  runTrace,\n  toLanternTrace,\n};\n"]}