{"version":3,"file":"MetricTestUtils.js","sourceRoot":"","sources":["../../../../../../../../front_end/models/trace/lantern/testing/MetricTestUtils.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,sEAAsE;AACtE,sDAAsD;AACtD,OAAO,EAAC,WAAW,EAAC,MAAM,oCAAoC,CAAC;AAC/D,OAAO,KAAK,UAAU,MAAM,gBAAgB,CAAC;AAC7C,OAAO,KAAK,OAAO,MAAM,eAAe,CAAC;AAEzC,KAAK,UAAU,SAAS,CAAC,OAAuC,EAAE,IAAY;IAC5E,MAAM,WAAW,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC/D,OAAO;QACL,WAAW,EAAE,WAAoD;KAClE,CAAC;AACJ,CAAC;AAED,KAAK,UAAU,cAAc,CAAC,KAA0B;IACtD,MAAM,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,qBAAqB,EAAE,CAAC;IAC9E,MAAM,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,WAA4D,CAAC,CAAC;IAC1F,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;IAC7B,CAAC;IACD,OAAO,SAAS,CAAC,eAAe,CAAC;AACnC,CAAC;AAED,KAAK,UAAU,6BAA6B,CAAC,EAAC,KAAK,EAAE,QAAQ,EAAE,GAAG,EAIjE;IACC,QAAQ,GAAG,QAAQ,IAAI,EAAuC,CAAC;IAC/D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QAC/B,QAAQ,CAAC,gBAAgB,GAAG,UAAU,CAAC;IACzC,CAAC;IACD,MAAM,eAAe,GAAG,MAAM,cAAc,CAAC,KAAK,CAAC,CAAC;IACpD,MAAM,QAAQ,GAAG,UAAU,CAAC,sBAAsB,CAAC,qBAAqB,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;IACjG,MAAM,eAAe,GAAG,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAEvE,OAAO;QACL,SAAS,EAAE,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,eAAe,CAAC,EAAC,GAAG,QAAQ,EAAE,eAAe,EAAC,CAAC;QACvF,KAAK,EAAE,UAAU,CAAC,sBAAsB,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,EAAE,eAAe,EAAE,GAAG,CAAC;QAC3F,mBAAmB,EAAE,UAAU,CAAC,sBAAsB,CAAC,yBAAyB,CAAC,eAAe,CAAC;KAClG,CAAC;AACJ,CAAC;AAED,OAAO,EACL,SAAS,EACT,cAAc,EACd,6BAA6B,GAC9B,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// Why can other tests import this directly but we get yelled at here?\n// eslint-disable-next-line rulesdir/es_modules_import\nimport {TraceLoader} from '../../../../testing/TraceLoader.js';\nimport * as TraceModel from '../../trace.js';\nimport * as Lantern from '../lantern.js';\n\nasync function loadTrace(context: Mocha.Context|Mocha.Suite|null, name: string): Promise<Lantern.Types.Trace> {\n  const traceEvents = await TraceLoader.rawEvents(context, name);\n  return {\n    traceEvents: traceEvents as unknown as Lantern.Types.TraceEvent[],\n  };\n}\n\nasync function runTraceEngine(trace: Lantern.Types.Trace) {\n  const processor = TraceModel.Processor.TraceProcessor.createWithAllHandlers();\n  await processor.parse(trace.traceEvents as TraceModel.Types.TraceEvents.TraceEventData[]);\n  if (!processor.traceParsedData) {\n    throw new Error('No data');\n  }\n  return processor.traceParsedData;\n}\n\nasync function getComputationDataFromFixture({trace, settings, url}: {\n  trace: Lantern.Types.Trace,\n  settings?: Lantern.Types.Simulation.Settings,\n  url?: Lantern.Types.Simulation.URL,\n}) {\n  settings = settings ?? {} as Lantern.Types.Simulation.Settings;\n  if (!settings.throttlingMethod) {\n    settings.throttlingMethod = 'simulate';\n  }\n  const traceEngineData = await runTraceEngine(trace);\n  const requests = TraceModel.LanternComputationData.createNetworkRequests(trace, traceEngineData);\n  const networkAnalysis = Lantern.Core.NetworkAnalyzer.analyze(requests);\n\n  return {\n    simulator: Lantern.Simulation.Simulator.createSimulator({...settings, networkAnalysis}),\n    graph: TraceModel.LanternComputationData.createGraph(requests, trace, traceEngineData, url),\n    processedNavigation: TraceModel.LanternComputationData.createProcessedNavigation(traceEngineData),\n  };\n}\n\nexport {\n  loadTrace,\n  runTraceEngine,\n  getComputationDataFromFixture,\n};\n"]}