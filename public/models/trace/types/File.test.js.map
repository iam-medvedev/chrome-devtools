{"version":3,"file":"File.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/types/File.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,WAAW,MAAM,aAAa,CAAC;AAE3C,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YACrE,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,EAAC,IAAI,qEAA2D,EAAE,QAAQ,EAAE,GAAG,EAAC,CAAC,CAAC;QAC7G,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YACrE,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,EAAC,IAAI,yDAA+C,EAAE,QAAQ,EAAE,GAAG,EAAC,CAAC,CAAC;QACjG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YACrE,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,EAAC,IAAI,+DAAqD,EAAE,QAAQ,EAAE,GAAG,EAAC,CAAC,CAAC;QACvG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACvD,MAAM,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACjE,MAAM,MAAM,GAAG,CAAqB,CAAC;YAErC,MAAM,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAqD,CAAC;YAC/G,MAAM,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;YACjE,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE;gBACvB,IAAI,4DAAkD;gBACtD,SAAS,EAAE,GAAG;gBACd,QAAQ,EAAE,GAAG;gBACb,WAAW;gBACX,QAAQ,EAAE,MAAM;aACjB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as TraceEngine from '../trace.js';\n\ndescribe('TraceEngine file types', () => {\n  describe('traceEventKeyToValues', () => {\n    it('converts the values for a LegacyTimelineFrame', async () => {\n      const result = TraceEngine.Types.File.traceEventKeyToValues('l-101');\n      assert.deepEqual(result, {type: TraceEngine.Types.File.EventKeyType.LEGACY_TIMELINE_FRAME, rawIndex: 101});\n    });\n\n    it('converts the values for a raw event', async () => {\n      const result = TraceEngine.Types.File.traceEventKeyToValues('r-101');\n      assert.deepEqual(result, {type: TraceEngine.Types.File.EventKeyType.RAW_EVENT, rawIndex: 101});\n    });\n\n    it('converts the values for a synthetic event', async () => {\n      const result = TraceEngine.Types.File.traceEventKeyToValues('s-101');\n      assert.deepEqual(result, {type: TraceEngine.Types.File.EventKeyType.SYNTHETIC_EVENT, rawIndex: 101});\n    });\n\n    it('converts the values for a profile call event', async () => {\n      const pid = TraceEngine.Types.TraceEvents.ProcessID(1);\n      const tid = TraceEngine.Types.TraceEvents.ThreadID(2);\n      const sampleIndex = TraceEngine.Types.TraceEvents.SampleIndex(3);\n      const nodeId = 4 as Protocol.integer;\n\n      const key = ['p', pid, tid, sampleIndex, nodeId].join('-') as TraceEngine.Types.File.TraceEventSerializableKey;\n      const result = TraceEngine.Types.File.traceEventKeyToValues(key);\n      assert.deepEqual(result, {\n        type: TraceEngine.Types.File.EventKeyType.PROFILE_CALL,\n        processID: pid,\n        threadID: tid,\n        sampleIndex,\n        protocol: nodeId,\n      });\n    });\n  });\n});\n"]}