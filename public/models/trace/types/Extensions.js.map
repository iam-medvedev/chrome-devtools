{"version":3,"file":"Extensions.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/types/Extensions.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAS7B,MAAM,CAAC,MAAM,gBAAgB,GAAG;IAC9B,SAAS;IACT,eAAe;IACf,cAAc;IACd,WAAW;IACX,iBAAiB;IACjB,gBAAgB;IAChB,UAAU;IACV,gBAAgB;IAChB,eAAe;IACf,OAAO;IACP,SAAS;CACD,CAAC;AA0EX,yDAAyD;AACzD,MAAM,UAAU,wBAAwB,CAAC,OAA4B;IACnE,OAAO,OAAO,CAAC,QAAQ,KAAK,QAAQ,CAAC;AACvC,CAAC;AAED,uEAAuE;AACvE,MAAM,UAAU,mBAAmB,CAAC,OAA4C;IAC9E,MAAM,QAAQ,GAAG,OAAO,IAAI,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC9D,MAAM,cAAc,GAAG,OAAO,CAAC,QAAQ,KAAK,aAAa,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,CAAC;IAC5F,OAAO,cAAc,IAAI,QAAQ,CAAC;AACpC,CAAC;AAED,oEAAoE;AACpE,MAAM,UAAU,mCAAmC,CAAC,OAA6C;IAE/F,OAAO,OAAO,CAAC,GAAG,KAAK,SAAS,IAAI,OAAO,CAAC,WAAW,KAAK,SAAS,CAAC;AACxE,CAAC;AAED,MAAM,UAAU,uBAAuB,CACnC,OAAgF;IAElF,OAAO,wBAAwB,CAAC,OAAO,CAAC,IAAI,mBAAmB,CAAC,OAAO,CAAC;QACpE,mCAAmC,CAAC,OAAO,CAAC,CAAC;AACnD,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,KAAY;IACpD,OAAO,KAAK,CAAC,GAAG,KAAK,oBAAoB,CAAC;AAC5C,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../core/platform/platform.js';\n\nimport type {\n  ConsoleTimeStamp, Event, PerformanceMark, PerformanceMeasureBegin, Phase, SyntheticBased} from './TraceEvents.js';\n\nexport type ExtensionEntryType = 'track-entry'|'marker';\n\nexport const extensionPalette = [\n  'primary',\n  'primary-light',\n  'primary-dark',\n  'secondary',\n  'secondary-light',\n  'secondary-dark',\n  'tertiary',\n  'tertiary-light',\n  'tertiary-dark',\n  'error',\n  'warning',\n] as const;\n\nexport type ExtensionColorFromPalette = typeof extensionPalette[number];\n\n/**\n * Represents any valid value that can be produced by JSON.parse()\n * without a reviver.\n */\nexport type JsonValue = string|number|boolean|null|JsonValue[]|{[key: string]: JsonValue};\n\nexport interface DevToolsObjBase {\n  color?: ExtensionColorFromPalette;\n  /**\n   * We document to users that we support only string values here, but because\n   * this is coming from user code the values could be anything, so we ensure we\n   * deal with bad data by typing this as unknown.\n   */\n  properties?: Array<[string, JsonValue]>;\n  tooltipText?: string;\n}\n\nexport type DevToolsObj = DevToolsObjEntry|DevToolsObjMarker;\n\nexport interface ExtensionTrackEntryPayloadDeeplink {\n  // The URL (deep-link) to show in the summary for the track.\n  url: Platform.DevToolsPath.UrlString;\n  // The label to show in front of the URL when the deep-link is shown in the\n  // graph.\n  description: string;\n}\n\nexport interface DevToolsObjEntry extends DevToolsObjBase {\n  // Typed as possibly undefined since when no data type is provided\n  // the entry is defaulted to a track entry\n  dataType?: 'track-entry';\n  // The name of the track the entry will be displayed in.\n  // Entries intended to be displayed in the same track must contain the\n  // same value in this property.\n  // If undefined, measurement is added to the Timings track\n  track: string;\n  // The track group an entryâ€™s track belongs to.\n  // Entries intended to be displayed in the same track must contain the\n  // same value in this property as well as the same value in the track\n  // property.\n  trackGroup?: string;\n  // Additional data (e.g. deep-link URL) that can be shown in the summary\n  // In perf.mark/measure, it's anything in the `detail` object that's not the `devtools` object\n  // In console.timestamp, it's the 7th argument to console.timeStamp().\n  userDetail?: JsonValue;\n}\n\nexport interface DevToolsObjMarker extends DevToolsObjBase {\n  dataType: 'marker';\n}\n\n/**\n * Synthetic events created for extension tracks.\n */\nexport interface SyntheticExtensionTrackEntry extends\n    SyntheticBased<Phase.COMPLETE, PerformanceMeasureBegin|PerformanceMark|ConsoleTimeStamp> {\n  devtoolsObj: DevToolsObjEntry;\n  userDetail: JsonValue|null;\n}\n\n/**\n * Synthetic events created for extension marks.\n */\nexport interface SyntheticExtensionMarker extends SyntheticBased<Phase.INSTANT, PerformanceMark> {\n  devtoolsObj: DevToolsObjMarker;\n  userDetail: JsonValue|null;\n}\n\nexport type SyntheticExtensionEntry = SyntheticExtensionTrackEntry|SyntheticExtensionMarker;\n\n/** Returns true if this is a devtoolsObj for a marker */\nexport function isExtensionPayloadMarker(payload: {dataType?: string}): payload is DevToolsObjMarker {\n  return payload.dataType === 'marker';\n}\n\n/** Returns true if this is a devtoolsObj for an entry (non-instant) */\nexport function isExtensionEntryObj(payload: {track?: string, dataType?: string}): payload is DevToolsObjEntry {\n  const hasTrack = 'track' in payload && Boolean(payload.track);\n  const validEntryType = payload.dataType === 'track-entry' || payload.dataType === undefined;\n  return validEntryType && hasTrack;\n}\n\n/** Returns true if this is a devtoolsObj for a console.timeStamp */\nexport function isConsoleTimestampPayloadTrackEntry(payload: {description?: string, url?: string}):\n    payload is ExtensionTrackEntryPayloadDeeplink {\n  return payload.url !== undefined && payload.description !== undefined;\n}\n\nexport function isValidExtensionPayload(\n    payload: {track?: string, dataType?: string, description?: string, url?: string}): payload is DevToolsObj|\n    ExtensionTrackEntryPayloadDeeplink {\n  return isExtensionPayloadMarker(payload) || isExtensionEntryObj(payload) ||\n      isConsoleTimestampPayloadTrackEntry(payload);\n}\n\nexport function isSyntheticExtensionEntry(entry: Event): entry is SyntheticExtensionEntry {\n  return entry.cat === 'devtools.extension';\n}\n\nexport interface ExtensionTrackData {\n  // Name of the top level track. If it's a track group then this value\n  // has the name of the group, otherwise it has the name of the track.\n  name: string;\n  isTrackGroup: boolean;\n  // If this contains the data of a track group, this property contains\n  // the entries of each of the tracks in the the group. If this is a\n  // standalone track, then this contains that track's entries only.\n  entriesByTrack: Record<string, SyntheticExtensionTrackEntry[]>;\n}\n"]}