{"version":3,"file":"TraceEvents.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/types/TraceEvents.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceEngine from '../trace.js';\n\ndescribeWithEnvironment('TraceEvent types', function() {\n  const {Phase, isNestableAsyncPhase, isAsyncPhase, isFlowPhase} = TraceEngine.Types.TraceEvents;\n  it('is able to determine if a phase is a nestable async phase', function() {\n    assert.isTrue(isNestableAsyncPhase(Phase.ASYNC_NESTABLE_START));\n    assert.isTrue(isNestableAsyncPhase(Phase.ASYNC_NESTABLE_END));\n    assert.isTrue(isNestableAsyncPhase(Phase.ASYNC_NESTABLE_INSTANT));\n  });\n\n  it('is able to determine if a phase is not a nestable async phase', function() {\n    assert.isFalse(isNestableAsyncPhase(Phase.BEGIN));\n    assert.isFalse(isNestableAsyncPhase(Phase.END));\n    assert.isFalse(isNestableAsyncPhase(Phase.ASYNC_BEGIN));\n  });\n\n  it('is able to determine if a phase is an async phase', function() {\n    assert.isTrue(isAsyncPhase(Phase.ASYNC_NESTABLE_START));\n    assert.isTrue(isAsyncPhase(Phase.ASYNC_NESTABLE_END));\n    assert.isTrue(isAsyncPhase(Phase.ASYNC_NESTABLE_INSTANT));\n    assert.isTrue(isAsyncPhase(Phase.ASYNC_BEGIN));\n    assert.isTrue(isAsyncPhase(Phase.ASYNC_STEP_INTO));\n    assert.isTrue(isAsyncPhase(Phase.ASYNC_STEP_PAST));\n    assert.isTrue(isAsyncPhase(Phase.ASYNC_END));\n  });\n\n  it('is able to determine if a phase is not an async phase', function() {\n    assert.isFalse(isAsyncPhase(Phase.BEGIN));\n    assert.isFalse(isAsyncPhase(Phase.METADATA));\n    assert.isFalse(isAsyncPhase(Phase.OBJECT_CREATED));\n  });\n\n  it('is able to determine if a phase is a flow phase', function() {\n    assert.isTrue(isFlowPhase(Phase.FLOW_START));\n    assert.isTrue(isFlowPhase(Phase.FLOW_STEP));\n    assert.isTrue(isFlowPhase(Phase.FLOW_END));\n  });\n\n  it('is able to determine if a phase is not a flow phase', function() {\n    assert.isFalse(isFlowPhase(Phase.ASYNC_STEP_INTO));\n    assert.isFalse(isFlowPhase(Phase.ASYNC_NESTABLE_START));\n    assert.isFalse(isFlowPhase(Phase.BEGIN));\n  });\n\n  it('is able to determine that an event is a synthetic user timing event', async function() {\n    const {traceData} = await TraceLoader.traceEngine(this, 'timings-track.json.gz');\n    const timingEvent = traceData.UserTimings.performanceMeasures[0];\n    assert.isTrue(TraceEngine.Types.TraceEvents.isSyntheticUserTiming(timingEvent));\n    const consoleEvent = traceData.UserTimings.consoleTimings[0];\n    assert.isFalse(TraceEngine.Types.TraceEvents.isSyntheticUserTiming(consoleEvent));\n  });\n\n  it('is able to determine that an event is a synthetic console event', async function() {\n    const {traceData} = await TraceLoader.traceEngine(this, 'timings-track.json.gz');\n    const consoleEvent = traceData.UserTimings.consoleTimings[0];\n    assert.isTrue(TraceEngine.Types.TraceEvents.isSyntheticConsoleTiming(consoleEvent));\n    const timingEvent = traceData.UserTimings.performanceMeasures[0];\n    assert.isFalse(TraceEngine.Types.TraceEvents.isSyntheticConsoleTiming(timingEvent));\n  });\n\n  it('is able to detemrine that an event is a synthetic network request event', async function() {\n    const {traceData} = await TraceLoader.traceEngine(this, 'lcp-images.json.gz');\n    const networkEvent = traceData.NetworkRequests.byTime[0];\n    assert.isTrue(TraceEngine.Types.TraceEvents.isSyntheticNetworkRequestEvent(networkEvent));\n    const otherEvent = traceData.Renderer.allTraceEntries[0];\n    assert.isFalse(TraceEngine.Types.TraceEvents.isSyntheticNetworkRequestEvent(otherEvent));\n  });\n\n  it('is able to determine that an event is a synthetic layout shift event', async function() {\n    const {traceData} = await TraceLoader.traceEngine(this, 'cls-single-frame.json.gz');\n    const syntheticLayoutShift = traceData.LayoutShifts.clusters[0].events[0];\n    assert.isTrue(TraceEngine.Types.TraceEvents.isSyntheticLayoutShift(syntheticLayoutShift));\n  });\n});\n"]}