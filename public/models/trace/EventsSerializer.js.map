{"version":3,"file":"EventsSerializer.js","sourceRoot":"","sources":["../../../../../../front_end/models/trace/EventsSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Helpers from './helpers/helpers.js';\nimport type {ParsedTrace} from './ModelImpl.js';\nimport * as Types from './types/types.js';\n\nexport class EventsSerializer {\n  #modifiedProfileCallByKey = new Map<Types.File.ProfileCallKeyValues, Types.Events.SyntheticProfileCall>();\n\n  keyForEvent(event: Types.Events.Event): Types.File.SerializableKey|null {\n    if (Types.Events.isProfileCall(event)) {\n      return `${Types.File.EventKeyType.PROFILE_CALL}-${event.pid}-${event.tid}-${\n          Types.Events.SampleIndex(event.sampleIndex)}-${event.nodeId}`;\n    }\n\n    if (Types.Events.isLegacyTimelineFrame(event)) {\n      return `${Types.File.EventKeyType.LEGACY_TIMELINE_FRAME}-${event.index}`;\n    }\n\n    const rawEvents = Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getRawTraceEvents();\n    const key: Types.File.SyntheticEventKey|Types.File.RawEventKey = Types.Events.isSyntheticBased(event) ?\n        `${Types.File.EventKeyType.SYNTHETIC_EVENT}-${rawEvents.indexOf(event.rawSourceEvent)}` :\n        `${Types.File.EventKeyType.RAW_EVENT}-${rawEvents.indexOf(event)}`;\n    if (key.length < 3) {\n      return null;\n    }\n    return key;\n  }\n\n  eventForKey(key: Types.File.SerializableKey, parsedTrace: ParsedTrace): Types.Events.Event {\n    const eventValues = Types.File.traceEventKeyToValues(key);\n\n    if (EventsSerializer.isProfileCallKey(eventValues)) {\n      return this.#getModifiedProfileCallByKeyValues(eventValues, parsedTrace);\n    }\n\n    if (EventsSerializer.isLegacyTimelineFrameKey(eventValues)) {\n      const event = parsedTrace.data.Frames.frames.at(eventValues.rawIndex);\n      if (!event) {\n        throw new Error(`Could not find frame with index ${eventValues.rawIndex}`);\n      }\n      return event;\n    }\n\n    if (EventsSerializer.isSyntheticEventKey(eventValues)) {\n      const syntheticEvents = Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getSyntheticTraces();\n      const syntheticEvent = syntheticEvents.at(eventValues.rawIndex);\n      if (!syntheticEvent) {\n        throw new Error(`Attempted to get a synthetic event from an unknown raw event index: ${eventValues.rawIndex}`);\n      }\n      return syntheticEvent;\n    }\n\n    if (EventsSerializer.isRawEventKey(eventValues)) {\n      const rawEvents = Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getRawTraceEvents();\n      return rawEvents[eventValues.rawIndex];\n    }\n    throw new Error(`Unknown trace event serializable key values: ${(eventValues as unknown[]).join('-')}`);\n  }\n\n  static isProfileCallKey(key: Types.File.SerializableKeyValues): key is Types.File.ProfileCallKeyValues {\n    return key.type === Types.File.EventKeyType.PROFILE_CALL;\n  }\n  static isLegacyTimelineFrameKey(key: Types.File.SerializableKeyValues):\n      key is Types.File.LegacyTimelineFrameKeyValues {\n    return key.type === Types.File.EventKeyType.LEGACY_TIMELINE_FRAME;\n  }\n\n  static isRawEventKey(key: Types.File.SerializableKeyValues): key is Types.File.RawEventKeyValues {\n    return key.type === Types.File.EventKeyType.RAW_EVENT;\n  }\n  static isSyntheticEventKey(key: Types.File.SerializableKeyValues): key is Types.File.SyntheticEventKeyValues {\n    return key.type === Types.File.EventKeyType.SYNTHETIC_EVENT;\n  }\n\n  #getModifiedProfileCallByKeyValues(key: Types.File.ProfileCallKeyValues, parsedTrace: ParsedTrace):\n      Types.Events.SyntheticProfileCall {\n    const cacheResult = this.#modifiedProfileCallByKey.get(key);\n    if (cacheResult) {\n      return cacheResult;\n    }\n    const profileCallsInThread =\n        parsedTrace.data.Renderer.processes.get(key.processID)?.threads.get(key.threadID)?.profileCalls;\n    if (!profileCallsInThread) {\n      throw new Error(`Unknown profile call serializable key: ${(key)}`);\n    }\n\n    const match = profileCallsInThread?.find((e: Types.Events.SyntheticProfileCall) => {\n      return e.sampleIndex === key.sampleIndex && e.nodeId === key.protocol;\n    });\n    if (!match) {\n      throw new Error(`Unknown profile call serializable key: ${(JSON.stringify(key))}`);\n    }\n    // Cache to avoid looking up in subsequent calls.\n    this.#modifiedProfileCallByKey.set(key, match);\n    return match;\n  }\n}\n"]}