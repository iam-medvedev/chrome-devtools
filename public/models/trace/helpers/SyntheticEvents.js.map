{"version":3,"file":"SyntheticEvents.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/helpers/SyntheticEvents.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B,MAAM,kCAAkC,GAA6B,EAAE,CAAC;AAExE,MAAM,kBAAkB,GAAG,IAAI,GAAG,EAAuE,CAAC;AAE1G,IAAI,aAAa,GAAgC,IAAI,CAAC;AAEtD,MAAM,OAAO,sBAAsB;IACjC;;;OAGG;IACH,qBAAqB,GAA4C,EAAE,CAAC;IACpE;;OAEG;IACH,eAAe,GAAgD,EAAE,CAAC;IAElE;;;;;;;OAOG;IACH,MAAM,CAAC,eAAe,CAAC,SAAsD;QAC3E,MAAM,eAAe,GAAG,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC1D,IAAI,eAAe,EAAE,CAAC;YACpB,aAAa,GAAG,eAAe,CAAC;QAClC,CAAC;aAAM,CAAC;YACN,MAAM,OAAO,GAAG,IAAI,sBAAsB,CAAC,SAAS,CAAC,CAAC;YACtD,kBAAkB,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC3C,aAAa,GAAG,OAAO,CAAC;QAC1B,CAAC;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,gBAAgB;QACrB,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;QACpF,CAAC;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,KAAK;QACV,kCAAkC,CAAC,MAAM,GAAG,CAAC,CAAC;QAC9C,aAAa,GAAG,IAAI,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,2BAA2B,CAAkD,cAA+B;QAEjH,IAAI,CAAC;YACH,OAAO,sBAAsB,CAAC,gBAAgB,EAAE,CAAC,2BAA2B,CAAC,cAAc,CAAC,CAAC;QAC/F,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,2EAA2E;YAC3E,sEAAsE;YACtE,sEAAsE;YACtE,+BAA+B;YAC/B,OAAO,cAAmB,CAAC;QAC7B,CAAC;IACH,CAAC;IAED,YAAoB,SAAsD;QACxE,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,2BAA2B,CAAkD,cAA+B;QAC1G,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QAC7E,IAAI,QAAQ,GAAG,CAAC,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;QAC7F,CAAC;QACD,MAAM,gBAAgB,GAAG,cAAmB,CAAC;QAC7C,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,GAAG,gBAAgB,CAAC;QACxD,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED,8BAA8B,CAAC,aAAqB;QAClD,MAAM,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;QACpE,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,uEAAuE,aAAa,EAAE,CAAC,CAAC;QAC1G,CAAC;QACD,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,uBAAuB;QACrB,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACpC,CAAC;IAED,iBAAiB;QACf,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;CACF","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Types from '../types/types.js';\n\nconst syntheticEventsManagerByTraceIndex: SyntheticEventsManager[] = [];\n\nconst managerByRawEvents = new Map<readonly Types.TraceEvents.TraceEventData[], SyntheticEventsManager>();\n\nlet activeManager: SyntheticEventsManager|null = null;\n\nexport class SyntheticEventsManager {\n  /**\n   * All synthetic entries created in a trace from a corresponding trace events.\n   * (ProfileCalls are excluded because)\n   */\n  #syntheticTraceEvents: Types.TraceEvents.SyntheticBasedEvent[] = [];\n  /**\n   * All raw entries from a trace.\n   */\n  #rawTraceEvents: readonly Types.TraceEvents.TraceEventData[] = [];\n\n  /**\n   * Initializes a SyntheticEventsManager for a trace. This needs to be\n   * called before running the trace engine handlers, since the instance\n   * created here will be used by the handlers to register their\n   * synthetic trace events.\n   *\n   * Can be called multiple times for the same set of raw events, in which case it will re-use the existing manager rather than recreate it again.\n   */\n  static initAndActivate(rawEvents: readonly Types.TraceEvents.TraceEventData[]): SyntheticEventsManager {\n    const existingManager = managerByRawEvents.get(rawEvents);\n    if (existingManager) {\n      activeManager = existingManager;\n    } else {\n      const manager = new SyntheticEventsManager(rawEvents);\n      managerByRawEvents.set(rawEvents, manager);\n      activeManager = manager;\n    }\n    return activeManager;\n  }\n\n  static getActiveManager(): SyntheticEventsManager {\n    if (!activeManager) {\n      throw new Error('Attempted to get a SyntheticEventsManager without initializing');\n    }\n    return activeManager;\n  }\n\n  static reset(): void {\n    syntheticEventsManagerByTraceIndex.length = 0;\n    activeManager = null;\n  }\n\n  static registerSyntheticBasedEvent<T extends Types.TraceEvents.SyntheticBasedEvent>(syntheticEvent: Omit<T, '_tag'>):\n      T {\n    try {\n      return SyntheticEventsManager.getActiveManager().registerSyntheticBasedEvent(syntheticEvent);\n    } catch (e) {\n      // If no active manager has been initialized, we assume the trace engine is\n      // not running as part of the Performance panel. In this case we don't\n      // register synthetic events because we don't need to support timeline\n      // modifications serialization.\n      return syntheticEvent as T;\n    }\n  }\n\n  private constructor(rawEvents: readonly Types.TraceEvents.TraceEventData[]) {\n    this.#rawTraceEvents = rawEvents;\n  }\n\n  /**\n   * Registers and returns a branded synthetic event. Synthetic events need to\n   * be created with this method to ensure they are registered and made\n   * available to load events using serialized keys.\n   */\n  registerSyntheticBasedEvent<T extends Types.TraceEvents.SyntheticBasedEvent>(syntheticEvent: Omit<T, '_tag'>): T {\n    const rawIndex = this.#rawTraceEvents.indexOf(syntheticEvent.rawSourceEvent);\n    if (rawIndex < 0) {\n      throw new Error('Attempted to register a synthetic event paired to an unknown raw event.');\n    }\n    const eventAsSynthetic = syntheticEvent as T;\n    this.#syntheticTraceEvents[rawIndex] = eventAsSynthetic;\n    return eventAsSynthetic;\n  }\n\n  syntheticEventForRawEventIndex(rawEventIndex: number): Types.TraceEvents.SyntheticBasedEvent {\n    const syntheticEvent = this.#syntheticTraceEvents.at(rawEventIndex);\n    if (!syntheticEvent) {\n      throw new Error(`Attempted to get a synthetic event from an unknown raw event index: ${rawEventIndex}`);\n    }\n    return syntheticEvent;\n  }\n\n  getSyntheticTraceEvents(): Types.TraceEvents.SyntheticBasedEvent[] {\n    return this.#syntheticTraceEvents;\n  }\n\n  getRawTraceEvents(): readonly Types.TraceEvents.TraceEventData[] {\n    return this.#rawTraceEvents;\n  }\n}\n"]}