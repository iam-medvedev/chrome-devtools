{"version":3,"file":"Timing.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/helpers/Timing.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,uBAAuB,EAAC,MAAM,wCAAwC,CAAC;AAC/E,OAAO,EAAC,uBAAuB,EAAC,MAAM,kCAAkC,CAAC;AACzE,OAAO,EAAC,WAAW,EAAC,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,KAAK,MAAM,aAAa,CAAC;AAErC,SAAS,YAAY,CAAC,KAAa;IACjC,OAAO,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;AAChD,CAAC;AAED,uBAAuB,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC7C,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC5C,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC5C,+BAA+B;YAC/B,6CAA6C;YAC7C,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAClD,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,KAAK,GAAG;YACZ,EAAE,EAAE,EAAE;YACN,GAAG,EAAE,CAAC;SACgC,CAAC;QACzC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE;YACrE,SAAS,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YACvC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YACrC,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SACtC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,KAAK,GAAG;YACZ,EAAE,EAAE,MAAM;YACV,GAAG,EAAE,KAAK;SAC4B,CAAC;QACzC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE;YACrE,SAAS,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YACvC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YACrC,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SACtC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8CAA8C,EAAE,GAAG,EAAE;QAC5D,EAAE,CAAC,wDAAwD,EAAE,KAAK;YAChE,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;YAC7E,MAAM,QAAQ,GAAG,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACxE,0FAA0F;gBAC1F,OAAO,KAAK,CAAC,IAAI,KAAK,mCAAmC,CAAC;YAC5D,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAC9C,CAAC;YACD,+CAA+C;YAC/C,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;YAChD,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,4CAA4C,CAClF,QAAQ,EACR,WAAW,CAAC,IAAI,CAAC,WAAW,EAC5B,WAAW,CAAC,IAAI,CAAC,yBAAyB,EAC1C,WAAW,CAAC,IAAI,CAAC,oBAAoB,CACxC,CAAC;YAEF,MAAM,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CACpD,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,GAAG,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAC3E,CAAC;YACF,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAE9D,wCAAwC;YACxC,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YACjE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK;YAC3D,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;YAC7E,MAAM,QAAQ,GAAG,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACxE,OAAO,KAAK,CAAC,IAAI,KAAK,gBAAgB,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,KAAK,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC;YACpG,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAC9C,CAAC;YACD,0CAA0C;YAC1C,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;YAErD,MAAM,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CACpD,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,GAAG,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAC3E,CAAC;YACF,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAC9D,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,4CAA4C,CAClF,QAAQ,EACR,WAAW,CAAC,IAAI,CAAC,WAAW,EAC5B,WAAW,CAAC,IAAI,CAAC,yBAAyB,EAC1C,WAAW,CAAC,IAAI,CAAC,oBAAoB,CACxC,CAAC;YAEF,wCAAwC;YACxC,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YACjE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACvD,EAAE,CAAC,yCAAyC,EAAE,KAAK;YACjD,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,2BAA2B,CAChE,YAAY,CAAC,EAAE,CAAC,EAChB,YAAY,CAAC,EAAE,CAAC,CACnB,CAAC;YAEF,MAAM,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,2BAA2B,CACnE,YAAY,CAAC,CAAC,CAAC,EACf,YAAY,CAAC,GAAG,CAAC,CACpB,CAAC;YAEF,MAAM,mBAAmB,GACrB,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,uCAAuC,CAAC,WAAW,EAAE,cAAc,EAAE,EAAE,CAAC,CAAC;YAElG,2FAA2F;YAC3F,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACrD,wEAAwE;YACxE,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oFAAoF,EAAE,KAAK;YAC5F,kDAAkD;YAClD,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,2BAA2B,CAChE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAC9B,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CACjC,CAAC;YACF,MAAM,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,2BAA2B,CACnE,YAAY,CAAC,CAAC,CAAC,EACf,YAAY,CAAC,GAAG,CAAC,CACpB,CAAC;YAEF,MAAM,mBAAmB,GACrB,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,uCAAuC,CAAC,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;YAEjG,2EAA2E;YAC3E,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpD,6CAA6C;YAC7C,MAAM,CAAC,WAAW,CACd,CAAC,WAAW,CAAC,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,mBAAmB,CAAC,GAAG,GAAG,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YAEtG,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK;YAC7D,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,2BAA2B,CAChE,YAAY,CAAC,CAAC,CAAC,EACf,YAAY,CAAC,EAAE,CAAC,CACnB,CAAC;YACF,MAAM,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,2BAA2B,CACnE,YAAY,CAAC,CAAC,CAAC,EACf,YAAY,CAAC,GAAG,CAAC,CACpB,CAAC;YAEF,MAAM,mBAAmB,GACrB,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,uCAAuC,CAAC,WAAW,EAAE,cAAc,EAAE,EAAE,CAAC,CAAC;YAClG,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACrD,oJAAoJ;YACpJ,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,MAAM,EAAC,sBAAsB,EAAE,2BAA2B,EAAC,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;QAEnF,EAAE,CAAC,qEAAqE,EAAE,GAAG,EAAE;YAC7E,MAAM,MAAM,GAAG,2BAA2B,CACtC,YAAY,CAAC,EAAE,CAAC,EAChB,YAAY,CAAC,GAAG,CAAC,CACpB,CAAC;YAEF,MAAM,SAAS,GAAG,2BAA2B,CACzC,YAAY,CAAC,EAAE,CAAC,EAChB,YAAY,CAAC,EAAE,CAAC,CACnB,CAAC;YAEF,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC;gBACpC,MAAM;gBACN,SAAS;aACV,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qEAAqE,EAAE,GAAG,EAAE;YAC7E,MAAM,MAAM,GAAG,2BAA2B,CACtC,YAAY,CAAC,EAAE,CAAC,EAChB,YAAY,CAAC,GAAG,CAAC,CACpB,CAAC;YAEF,MAAM,SAAS,GAAG,2BAA2B,CACzC,YAAY,CAAC,GAAG,CAAC,EACjB,YAAY,CAAC,GAAG,CAAC,CACpB,CAAC;YAEF,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC;gBACpC,MAAM;gBACN,SAAS;aACV,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;YAClE,MAAM,MAAM,GAAG,2BAA2B,CACtC,YAAY,CAAC,EAAE,CAAC,EAChB,YAAY,CAAC,GAAG,CAAC,CACpB,CAAC;YAEF,MAAM,SAAS,GAAG,2BAA2B,CACzC,YAAY,CAAC,CAAC,CAAC,EACf,YAAY,CAAC,EAAE,CAAC,CACnB,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC;gBACnC,MAAM;gBACN,SAAS;aACV,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;YAClE,MAAM,MAAM,GAAG,2BAA2B,CACtC,YAAY,CAAC,EAAE,CAAC,EAChB,YAAY,CAAC,GAAG,CAAC,CACpB,CAAC;YAEF,MAAM,SAAS,GAAG,2BAA2B,CACzC,YAAY,CAAC,EAAE,CAAC,EAChB,YAAY,CAAC,GAAG,CAAC,CACpB,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC;gBACnC,MAAM;gBACN,SAAS;aACV,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,MAAM,GAAG,2BAA2B,CACtC,YAAY,CAAC,EAAE,CAAC,EAChB,YAAY,CAAC,GAAG,CAAC,CACpB,CAAC;YAEF,MAAM,SAAS,GAAG,2BAA2B,CACzC,YAAY,CAAC,EAAE,CAAC,EAChB,YAAY,CAAC,EAAE,CAAC,CACnB,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC;gBACnC,MAAM;gBACN,SAAS;aACV,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC7D,MAAM,MAAM,GAAG,2BAA2B,CACtC,YAAY,CAAC,EAAE,CAAC,EAChB,YAAY,CAAC,GAAG,CAAC,CACpB,CAAC;YAEF,MAAM,SAAS,GAAG,2BAA2B,CACzC,YAAY,CAAC,CAAC,CAAC,EACf,YAAY,CAAC,GAAG,CAAC,CACpB,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC;gBACnC,MAAM;gBACN,SAAS;aACV,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,MAAM,EAAC,eAAe,EAAC,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;QAC/C,MAAM,EAAC,KAAK,EAAE,YAAY,EAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;QAEjD,MAAM,MAAM,GAAwC;YAClD,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC;YACtB,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC;YACtB,KAAK,EAAE,YAAY,CAAC,GAAG,CAAC;SACzB,CAAC;QAEF,MAAM,SAAS,GAAG,CAAC,EAAU,EAAE,GAAW,EAAE,EAAE,CAAC,CAAC;YACC,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YAChC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;SACnC,CAAwC,CAAC;QAEzF,gBAAgB;QAChB,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QAC1D,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QAC1D,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QAC5D,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QAC1D,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QAEzD,iBAAiB;QACjB,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QAC1D,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QAC1D,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QAC3D,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,MAAM,EAAC,mBAAmB,EAAC,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;QACnD,MAAM,EAAC,KAAK,EAAE,YAAY,EAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;QACjD,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YACzE,MAAM,MAAM,GAAwC;gBAClD,GAAG,EAAE,YAAY,CAAC,CAAC,CAAC;gBACpB,GAAG,EAAE,YAAY,CAAC,EAAE,CAAC;gBACrB,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC;aACvB,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,MAAM,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,MAAM,EAAC,sBAAsB,EAAC,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;QACtD,MAAM,EAAC,KAAK,EAAE,YAAY,EAAC,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;QAEjD,MAAM,MAAM,GAAwC;YAClD,GAAG,EAAE,YAAY,CAAC,CAAC,CAAC;YACpB,GAAG,EAAE,YAAY,CAAC,EAAE,CAAC;YACrB,KAAK,EAAE,YAAY,CAAC,EAAE,CAAC;SACxB,CAAC;QAEF,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,EAAC,MAAM,EAAE,uBAAuB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;YACvF,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,EAAC,MAAM,EAAE,uBAAuB,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;YACxF,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,EAAC,MAAM,EAAE,uBAAuB,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;YACrE,6BAA6B;YAC7B,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAC,MAAM,EAAE,uBAAuB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;YACxF,8BAA8B;YAC9B,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAC,MAAM,EAAE,uBAAuB,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;YAC1F,0BAA0B;YAC1B,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAC,MAAM,EAAE,uBAAuB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;YACxF,yBAAyB;YACzB,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAC,MAAM,EAAE,uBAAuB,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {microsecondsTraceWindow} from '../../../testing/TraceHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../trace.js';\n\nfunction milliToMicro(value: number) {\n  return Trace.Types.Timing.Micro(value * 1000);\n}\n\ndescribeWithEnvironment('Timing helpers', () => {\n  describe('Timing conversions', () => {\n    it('can convert milliseconds to microseconds', () => {\n      const input = Trace.Types.Timing.Milli(1);\n      const expected = Trace.Types.Timing.Micro(1000);\n      assert.strictEqual(Trace.Helpers.Timing.milliToMicro(input), expected);\n    });\n\n    it('can convert seconds to milliseconds', () => {\n      const input = Trace.Types.Timing.Seconds(1);\n      const expected = Trace.Types.Timing.Milli(1000);\n      assert.strictEqual(Trace.Helpers.Timing.secondsToMilli(input), expected);\n    });\n\n    it('can convert seconds to microseconds', () => {\n      const input = Trace.Types.Timing.Seconds(1);\n      // 1 Second = 1000 Milliseconds\n      // 1000 Milliseconds = 1,000,000 Microseconds\n      const expected = Trace.Types.Timing.Micro(1_000_000);\n      assert.strictEqual(Trace.Helpers.Timing.secondsToMicro(input), expected);\n    });\n\n    it('can convert microSeconds milliseconds', () => {\n      const input = Trace.Types.Timing.Micro(1_000_000);\n      const expected = Trace.Types.Timing.Milli(1_000);\n      assert.strictEqual(Trace.Helpers.Timing.microToMilli(input), expected);\n    });\n  });\n\n  it('eventTimingsMicroSeconds returns the right numbers', async () => {\n    const event = {\n      ts: 10,\n      dur: 5,\n    } as unknown as Trace.Types.Events.Event;\n    assert.deepEqual(Trace.Helpers.Timing.eventTimingsMicroSeconds(event), {\n      startTime: Trace.Types.Timing.Micro(10),\n      endTime: Trace.Types.Timing.Micro(15),\n      duration: Trace.Types.Timing.Micro(5),\n    });\n  });\n\n  it('eventTimingsMilliSeconds returns the right numbers', async () => {\n    const event = {\n      ts: 10_000,\n      dur: 5_000,\n    } as unknown as Trace.Types.Events.Event;\n    assert.deepEqual(Trace.Helpers.Timing.eventTimingsMilliSeconds(event), {\n      startTime: Trace.Types.Timing.Milli(10),\n      endTime: Trace.Types.Timing.Milli(15),\n      duration: Trace.Types.Timing.Milli(5),\n    });\n  });\n\n  describe('timeStampForEventAdjustedByClosestNavigation', () => {\n    it('can use the navigation ID to adjust the time correctly', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n      const lcpEvent = parsedTrace.PageLoadMetrics.allMarkerEvents.find(event => {\n        // Just one LCP Event so we do not need to worry about ordering and finding the right one.\n        return event.name === 'largestContentfulPaint::Candidate';\n      });\n      if (!lcpEvent) {\n        throw new Error('Could not find LCP event');\n      }\n      // Ensure we are testing the navigationID path!\n      assert.exists(lcpEvent.args.data?.navigationId);\n      const adjustedTime = Trace.Helpers.Timing.timeStampForEventAdjustedByClosestNavigation(\n          lcpEvent,\n          parsedTrace.Meta.traceBounds,\n          parsedTrace.Meta.navigationsByNavigationId,\n          parsedTrace.Meta.navigationsByFrameId,\n      );\n\n      const unadjustedTime = Trace.Helpers.Timing.microToMilli(\n          Trace.Types.Timing.Micro(lcpEvent.ts - parsedTrace.Meta.traceBounds.min),\n      );\n      assert.strictEqual(unadjustedTime.toFixed(2), String(130.31));\n\n      // To make the assertion easier to read.\n      const timeAsMS = Trace.Helpers.Timing.microToMilli(adjustedTime);\n      assert.strictEqual(timeAsMS.toFixed(2), String(118.44));\n    });\n\n    it('can use the frame ID to adjust the time correctly', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n      const dclEvent = parsedTrace.PageLoadMetrics.allMarkerEvents.find(event => {\n        return event.name === 'MarkDOMContent' && event.args.data?.frame === parsedTrace.Meta.mainFrameId;\n      });\n      if (!dclEvent) {\n        throw new Error('Could not find DCL event');\n      }\n      // Ensure we are testing the frameID path!\n      assert.isUndefined(dclEvent.args.data?.navigationId);\n\n      const unadjustedTime = Trace.Helpers.Timing.microToMilli(\n          Trace.Types.Timing.Micro(dclEvent.ts - parsedTrace.Meta.traceBounds.min),\n      );\n      assert.strictEqual(unadjustedTime.toFixed(2), String(190.79));\n      const adjustedTime = Trace.Helpers.Timing.timeStampForEventAdjustedByClosestNavigation(\n          dclEvent,\n          parsedTrace.Meta.traceBounds,\n          parsedTrace.Meta.navigationsByNavigationId,\n          parsedTrace.Meta.navigationsByFrameId,\n      );\n\n      // To make the assertion easier to read.\n      const timeAsMS = Trace.Helpers.Timing.microToMilli(adjustedTime);\n      assert.strictEqual(timeAsMS.toFixed(2), String(178.92));\n    });\n  });\n\n  describe('expandWindowByPercentOrToOneMillisecond', () => {\n    it('can expand trace window by a percentage', async function() {\n      const traceWindow = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          milliToMicro(40),\n          milliToMicro(60),\n      );\n\n      const maxTraceWindow = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          milliToMicro(0),\n          milliToMicro(100),\n      );\n\n      const expandedTraceWindow =\n          Trace.Helpers.Timing.expandWindowByPercentOrToOneMillisecond(traceWindow, maxTraceWindow, 50);\n\n      // Since initial window was 20ms, make sure the that it is 30ms after being expanded by 50%\n      assert.strictEqual(expandedTraceWindow.range, 30000);\n      // min and max bounds are expanded by 25% from the initial window bounds\n      assert.strictEqual(expandedTraceWindow.min, 35000);\n      assert.strictEqual(expandedTraceWindow.max, 65000);\n    });\n\n    it('if the expanded window is smaller than 1 millisecond, expands it to 1 millisecond ', async function() {\n      // Trace window that is smaller than 1 millisecond\n      const traceWindow = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          Trace.Types.Timing.Micro(1000),\n          Trace.Types.Timing.Micro(1500),\n      );\n      const maxTraceWindow = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          milliToMicro(0),\n          milliToMicro(100),\n      );\n\n      const expandedTraceWindow =\n          Trace.Helpers.Timing.expandWindowByPercentOrToOneMillisecond(traceWindow, maxTraceWindow, 5);\n\n      // Make sure the window was expanded to 1 millisecond instead of 5 percent.\n      assert.strictEqual(expandedTraceWindow.range, 1000);\n      // The middle of the window should not change\n      assert.strictEqual(\n          (traceWindow.max + traceWindow.min) / 2, (expandedTraceWindow.max + expandedTraceWindow.min) / 2);\n\n      assert.strictEqual(expandedTraceWindow.min, 750);\n      assert.strictEqual(expandedTraceWindow.max, 1750);\n    });\n\n    it('window does not expand past the provided max window', async function() {\n      const traceWindow = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          milliToMicro(5),\n          milliToMicro(55),\n      );\n      const maxTraceWindow = Trace.Helpers.Timing.traceWindowFromMicroSeconds(\n          milliToMicro(0),\n          milliToMicro(100),\n      );\n\n      const expandedTraceWindow =\n          Trace.Helpers.Timing.expandWindowByPercentOrToOneMillisecond(traceWindow, maxTraceWindow, 50);\n      assert.strictEqual(expandedTraceWindow.range, 67500);\n      // Since the expanded window min bound would be smaller than the max window min bound, the expanded window min should be equal to the max window min\n      assert.strictEqual(expandedTraceWindow.min, 0);\n      assert.strictEqual(expandedTraceWindow.max, 67500);\n    });\n  });\n\n  describe('BoundsIncludeTimeRange', () => {\n    const {boundsIncludeTimeRange, traceWindowFromMicroSeconds} = Trace.Helpers.Timing;\n\n    it('is false for an event that is outside the LHS of the visible bounds', () => {\n      const bounds = traceWindowFromMicroSeconds(\n          milliToMicro(50),\n          milliToMicro(100),\n      );\n\n      const timeRange = traceWindowFromMicroSeconds(\n          milliToMicro(10),\n          milliToMicro(20),\n      );\n\n      assert.isFalse(boundsIncludeTimeRange({\n        bounds,\n        timeRange,\n      }));\n    });\n\n    it('is false for an event that is outside the RHS of the visible bounds', () => {\n      const bounds = traceWindowFromMicroSeconds(\n          milliToMicro(50),\n          milliToMicro(100),\n      );\n\n      const timeRange = traceWindowFromMicroSeconds(\n          milliToMicro(101),\n          milliToMicro(200),\n      );\n\n      assert.isFalse(boundsIncludeTimeRange({\n        bounds,\n        timeRange,\n      }));\n    });\n\n    it('is true for an event that overlaps the LHS of the bounds', () => {\n      const bounds = traceWindowFromMicroSeconds(\n          milliToMicro(50),\n          milliToMicro(100),\n      );\n\n      const timeRange = traceWindowFromMicroSeconds(\n          milliToMicro(0),\n          milliToMicro(52),\n      );\n\n      assert.isTrue(boundsIncludeTimeRange({\n        bounds,\n        timeRange,\n      }));\n    });\n\n    it('is true for an event that overlaps the RHS of the bounds', () => {\n      const bounds = traceWindowFromMicroSeconds(\n          milliToMicro(50),\n          milliToMicro(100),\n      );\n\n      const timeRange = traceWindowFromMicroSeconds(\n          milliToMicro(99),\n          milliToMicro(101),\n      );\n\n      assert.isTrue(boundsIncludeTimeRange({\n        bounds,\n        timeRange,\n      }));\n    });\n\n    it('is true for an event that is entirely within the bounds', () => {\n      const bounds = traceWindowFromMicroSeconds(\n          milliToMicro(50),\n          milliToMicro(100),\n      );\n\n      const timeRange = traceWindowFromMicroSeconds(\n          milliToMicro(51),\n          milliToMicro(75),\n      );\n\n      assert.isTrue(boundsIncludeTimeRange({\n        bounds,\n        timeRange,\n      }));\n    });\n\n    it('is true for an event that is larger than the bounds', () => {\n      const bounds = traceWindowFromMicroSeconds(\n          milliToMicro(50),\n          milliToMicro(100),\n      );\n\n      const timeRange = traceWindowFromMicroSeconds(\n          milliToMicro(0),\n          milliToMicro(200),\n      );\n\n      assert.isTrue(boundsIncludeTimeRange({\n        bounds,\n        timeRange,\n      }));\n    });\n  });\n\n  describe('timestampIsInBounds', () => {\n    const {eventIsInBounds} = Trace.Helpers.Timing;\n    const {Micro: MicroSeconds} = Trace.Types.Timing;\n\n    const bounds: Trace.Types.Timing.TraceWindowMicro = {\n      min: MicroSeconds(100),\n      max: MicroSeconds(200),\n      range: MicroSeconds(100),\n    };\n\n    const makeEvent = (ts: number, dur: number) => ({\n                                                     ts: Trace.Types.Timing.Micro(ts),\n                                                     dur: Trace.Types.Timing.Micro(dur),\n                                                   }) as unknown as Trace.Types.Events.Event;\n\n    // Left boundary\n    assert.isTrue(eventIsInBounds(makeEvent(101, 1), bounds));\n    assert.isTrue(eventIsInBounds(makeEvent(100, 1), bounds));\n    assert.isTrue(eventIsInBounds(makeEvent(99, 1), bounds));\n    assert.isTrue(eventIsInBounds(makeEvent(150, 500), bounds));\n    assert.isFalse(eventIsInBounds(makeEvent(98, 1), bounds));\n    assert.isFalse(eventIsInBounds(makeEvent(0, 1), bounds));\n    assert.isFalse(eventIsInBounds(makeEvent(0, 0), bounds));\n\n    // Right boundary\n    assert.isTrue(eventIsInBounds(makeEvent(199, 1), bounds));\n    assert.isTrue(eventIsInBounds(makeEvent(200, 1), bounds));\n    assert.isFalse(eventIsInBounds(makeEvent(201, 1), bounds));\n    assert.isFalse(eventIsInBounds(makeEvent(300, 50), bounds));\n  });\n\n  describe('timestampIsInBounds', () => {\n    const {timestampIsInBounds} = Trace.Helpers.Timing;\n    const {Micro: MicroSeconds} = Trace.Types.Timing;\n    it('is true if the value is in the bounds and false otherwise', async () => {\n      const bounds: Trace.Types.Timing.TraceWindowMicro = {\n        min: MicroSeconds(1),\n        max: MicroSeconds(10),\n        range: MicroSeconds(9),\n      };\n\n      assert.isTrue(timestampIsInBounds(bounds, MicroSeconds(1)));\n      assert.isTrue(timestampIsInBounds(bounds, MicroSeconds(5)));\n      assert.isTrue(timestampIsInBounds(bounds, MicroSeconds(10)));\n      assert.isFalse(timestampIsInBounds(bounds, MicroSeconds(0)));\n      assert.isFalse(timestampIsInBounds(bounds, MicroSeconds(11)));\n    });\n  });\n\n  describe('WindowFitsInsideBounds', () => {\n    const {windowFitsInsideBounds} = Trace.Helpers.Timing;\n    const {Micro: MicroSeconds} = Trace.Types.Timing;\n\n    const bounds: Trace.Types.Timing.TraceWindowMicro = {\n      min: MicroSeconds(5),\n      max: MicroSeconds(15),\n      range: MicroSeconds(10),\n    };\n\n    it('is true if the window fits within the bounds', () => {\n      assert.isTrue(windowFitsInsideBounds({window: microsecondsTraceWindow(5, 8), bounds}));\n      assert.isTrue(windowFitsInsideBounds({window: microsecondsTraceWindow(5, 14), bounds}));\n      assert.isTrue(windowFitsInsideBounds({window: microsecondsTraceWindow(5, 15), bounds}));\n    });\n\n    it('is false if the window does not fully fit within the bounds', () => {\n      // Outside the left hand edge\n      assert.isFalse(windowFitsInsideBounds({window: microsecondsTraceWindow(0, 8), bounds}));\n      // Outside the right hand edge\n      assert.isFalse(windowFitsInsideBounds({window: microsecondsTraceWindow(10, 20), bounds}));\n      // Outside entirely before\n      assert.isFalse(windowFitsInsideBounds({window: microsecondsTraceWindow(0, 5), bounds}));\n      // Outside entirely after\n      assert.isFalse(windowFitsInsideBounds({window: microsecondsTraceWindow(20, 25), bounds}));\n    });\n  });\n});\n"]}