{"version":3,"file":"Extensions.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/helpers/Extensions.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,QAAQ,MAAM,oCAAoC,CAAC;AAG/D,OAAO,EAAC,sBAAsB,EAAC,MAAM,YAAY,CAAC;AAClD,OAAO,EAAC,uBAAuB,EAAuB,MAAM,EAAC,MAAM,kBAAkB,CAAC;AAEtF,MAAM,UAAU,kCAAkC,CAC9C,gBAAiE,EACjE,kBAAyD,EACzD,WAAoD;IAKtD,MAAM,WAAW,GAAG,IAAI,GAAG,EAA+C,CAAC;IAC3E,KAAK,MAAM,KAAK,IAAI,gBAAgB,EAAE,CAAC;QACrC,mEAAmE;QACnE,iEAAiE;QACjE,kEAAkE;QAClE,8DAA8D;QAC9D,mCAAmC;QACnC,MAAM,GAAG,GAAG,KAAK,CAAC,WAAW,CAAC,UAAU,IAAI,cAAc,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACpF,MAAM,WAAW,GAAG,QAAQ,CAAC,YAAY,CAAC,cAAc,CACpD,WAAW,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;YACL,IAAI,EAAE,KAAK,CAAC,WAAW,CAAC,UAAU,IAAI,KAAK,CAAC,WAAW,CAAC,KAAK;YAC7D,YAAY,EAAE,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC;YACnD,cAAc,EAAE,EAAC,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,EAAE,EAAC;SAChD,CAAC,CAAC,CAAC;QAE1B,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC;YACzD,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;QAC3D,CAAC;QACD,MAAM,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC3E,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IACD,gEAAgE;IAChE,kBAAkB;IAClB,KAAK,MAAM,SAAS,IAAI,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC;QAC7C,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,CAAC;YAC9D,sBAAsB,CAAC,OAAO,CAAC,CAAC;YAChC,IAAI,uBAAuB,CAAC,OAAO,CAAC,EAAE,CAAC;gBACrC,KAAK,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;oBACxD,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC/B,CAAC;YACH,CAAC;QACH,CAAC;QACD,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;IACD,OAAO,EAAC,kBAAkB,EAAE,WAAW,EAAC,CAAC;AAC3C,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\nimport type * as Types from '../types/types.js';\n\nimport {sortTraceEventsInPlace} from './Trace.js';\nimport {canBuildTreesFromEvents, type TraceEntryNode, treify} from './TreeHelpers.js';\n\nexport function buildTrackDataFromExtensionEntries(\n    extensionEntries: Types.Extensions.SyntheticExtensionTrackEntry[],\n    extensionTrackData: Types.Extensions.ExtensionTrackData[],\n    entryToNode: Map<Types.Events.Event, TraceEntryNode>,\n    ): {\n  extensionTrackData: Types.Extensions.ExtensionTrackData[],\n  entryToNode?: Map<Types.Events.Event, TraceEntryNode>,\n} {\n  const dataByTrack = new Map<string, Types.Extensions.ExtensionTrackData>();\n  for (const entry of extensionEntries) {\n    // Batch data by track group. For each batch, add the data of every\n    // track in the group. In cases where no track group is provided,\n    // we use the standalone track data, but use a fixed prefix in the\n    // batch key to prevent collisions where a track group has the\n    // same name as a standalone track.\n    const key = entry.devtoolsObj.trackGroup || `track-name-${entry.devtoolsObj.track}`;\n    const batchedData = Platform.MapUtilities.getWithDefault(\n        dataByTrack, key, () => ({\n                            name: entry.devtoolsObj.trackGroup || entry.devtoolsObj.track,\n                            isTrackGroup: Boolean(entry.devtoolsObj.trackGroup),\n                            entriesByTrack: {[entry.devtoolsObj.track]: []},\n                          }));\n\n    if (!batchedData.entriesByTrack[entry.devtoolsObj.track]) {\n      batchedData.entriesByTrack[entry.devtoolsObj.track] = [];\n    }\n    const entriesInTrack = batchedData.entriesByTrack[entry.devtoolsObj.track];\n    entriesInTrack.push(entry);\n  }\n  // Calculate self time if possible for track entries, on a track\n  // by track basis.\n  for (const trackData of dataByTrack.values()) {\n    for (const entries of Object.values(trackData.entriesByTrack)) {\n      sortTraceEventsInPlace(entries);\n      if (canBuildTreesFromEvents(entries)) {\n        for (const [entry, node] of treify(entries).entryToNode) {\n          entryToNode.set(entry, node);\n        }\n      }\n    }\n    extensionTrackData.push(trackData);\n  }\n  return {extensionTrackData, entryToNode};\n}\n"]}