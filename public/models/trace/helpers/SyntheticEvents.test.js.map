{"version":3,"file":"SyntheticEvents.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/helpers/SyntheticEvents.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceModel from '../trace.js';\n\ndescribe('SyntheticEvents', function() {\n  beforeEach(() => {\n    TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.reset();\n  });\n\n  afterEach(() => {\n    TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.reset();\n  });\n\n  describe('Initialization', function() {\n    it('does not throw when invoking getActiveManager after executing the trace engine', async function() {\n      const events = await TraceLoader.fixtureContents(this, 'basic.json.gz');\n      await TraceLoader.executeTraceEngineOnFileContents(events);\n      assert.doesNotThrow(TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager);\n    });\n\n    it('always returns the manager for the most recent trace and re-uses managers for the same set of input events',\n       async function() {\n         // Exact traces do not matter, as long as they are different\n         const trace1 = await TraceLoader.fixtureContents(this, 'basic.json.gz');\n         const trace2 = await TraceLoader.fixtureContents(this, 'basic-stack.json.gz');\n\n         const events1 = Array.isArray(trace1) ? trace1 : trace1.traceEvents;\n         const events2 = Array.isArray(trace2) ? trace2 : trace2.traceEvents;\n\n         const manager1 = TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.initAndActivate(events1);\n         const manager2 = TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.initAndActivate(events2);\n\n         // Manager2 is active as it was the last one to be initialized\n         assert.strictEqual(TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager(), manager2);\n         // Now re-init with events1 (should use the existing manager from the cache)\n         TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.initAndActivate(events1);\n         // Now manager1 is active\n         assert.strictEqual(TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager(), manager1);\n       });\n  });\n\n  describe('SyntheticBasedEvent registration', () => {\n    it('stores synthetic based events at the same index as their corresponding raw event in the source array',\n       async function() {\n         const contents = await TraceLoader.fixtureContents(this, 'web-dev.json.gz');\n         const rawEvents = 'traceEvents' in contents ?\n             contents.traceEvents as TraceModel.Types.TraceEvents.TraceEventData[] :\n             contents;\n         const {traceData} = await TraceLoader.executeTraceEngineOnFileContents(rawEvents);\n         const allSyntheticEvents = [\n           ...traceData.Animations.animations,\n           ...traceData.NetworkRequests.byTime,\n           ...traceData.Screenshots,\n         ];\n         const syntheticEventsManager = TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager();\n         for (const syntheticEvent of allSyntheticEvents) {\n           const rawEventIndex = rawEvents.indexOf(syntheticEvent.rawSourceEvent);\n           // Test synthetic events are stored in the correct position.\n           assert.strictEqual(syntheticEventsManager.syntheticEventForRawEventIndex(rawEventIndex), syntheticEvent);\n         }\n         const allSyntheticEventsInManagerCount = syntheticEventsManager.getSyntheticTraceEvents().reduce(\n             (count, event) => event !== undefined ? (count + 1) : 0, 0);\n         // Test synthetic events are stored only once.\n         assert.strictEqual(allSyntheticEventsInManagerCount, allSyntheticEvents.length);\n       });\n  });\n});\n"]}