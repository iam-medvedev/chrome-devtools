{"version":3,"file":"Processor.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/trace/Processor.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\nimport * as Trace from '../trace/trace.js';\n\ndescribeWithEnvironment('TraceProcessor', function() {\n  it('can use a trace processor', async function() {\n    const processor = Trace.Processor.TraceProcessor.createWithAllHandlers();\n    const file = await TraceLoader.rawEvents(this, 'basic.json.gz');\n\n    // Check parsing after instantiation.\n    assert.isNull(processor.parsedTrace);\n    await processor.parse(file);\n    assert.isNotNull(processor.parsedTrace);\n\n    // Check parsing without a reset.\n    let thrown;\n    try {\n      await processor.parse(file);\n    } catch (e) {\n      thrown = e as Error;\n    }\n    assert.strictEqual(\n        thrown?.message, 'Trace processor can\\'t start parsing when not idle. Current state: FINISHED_PARSING');\n\n    // Check parsing after reset.\n    processor.reset();\n    assert.isNull(processor.parsedTrace);\n    assert.isNull(processor.insights);\n    await processor.parse(file);\n    assert.isNotNull(processor.parsedTrace);\n    assert.isNotNull(processor.insights);\n    // Cleanup.\n    processor.reset();\n\n    // Check simultaneous parsing without waiting.\n    let promise;\n    try {\n      promise = processor.parse(file);\n      await processor.parse(file);\n    } catch (e) {\n      thrown = e as Error;\n    } finally {\n      // Cleanup.\n      await promise;\n      processor.reset();\n    }\n    assert.strictEqual(thrown?.message, 'Trace processor can\\'t start parsing when not idle. Current state: PARSING');\n\n    // Check if data is null immediately after resetting.\n    assert.isNull(processor.parsedTrace);\n    assert.isNull(processor.insights);\n    await processor.parse(file);\n    assert.isNotNull(processor.parsedTrace);\n    assert.isNotNull(processor.insights);\n    processor.reset();\n    assert.isNull(processor.parsedTrace);\n    assert.isNull(processor.insights);\n\n    // Check resetting while parsing.\n    try {\n      promise = processor.parse(file);\n      processor.reset();\n    } catch (e) {\n      thrown = e as Error;\n    } finally {\n      // Cleanup.\n      await promise;\n      processor.reset();\n    }\n    assert.strictEqual(thrown?.message, 'Trace processor can\\'t reset while parsing.');\n\n    // Check parsing after resetting while parsing.\n    assert.isNull(processor.parsedTrace);\n    assert.isNull(processor.insights);\n    await processor.parse(file);\n    assert.isNotNull(processor.parsedTrace);\n    assert.isNotNull(processor.insights);\n  });\n\n  it('can be given a subset of handlers to run and will run just those along with the meta handler', async function() {\n    const processor = new Trace.Processor.TraceProcessor({\n      Animations: Trace.Handlers.ModelHandlers.Animations,\n    });\n    const events = await TraceLoader.rawEvents(this, 'animation.json.gz');\n    await processor.parse(events);\n    assert.isNotNull(processor.parsedTrace);\n    assert.deepEqual(Object.keys(processor.parsedTrace || {}), ['Meta', 'Animations']);\n  });\n\n  it('does not error if the user does not enable the Meta handler when it is a dependency', async function() {\n    assert.doesNotThrow(() => {\n      new Trace.Processor.TraceProcessor({\n        // Screenshots handler depends on Meta handler, so this is invalid.\n        // However, the Processor automatically ensures the Meta handler is\n        // enabled, so this should not cause an error.\n        Screenshots: Trace.Handlers.ModelHandlers.Screenshots,\n      });\n    });\n  });\n\n  it('errors if the user does not provide the right handler dependencies', async function() {\n    assert.throws(() => {\n      new Trace.Processor.TraceProcessor({\n        Renderer: Trace.Handlers.ModelHandlers.Renderer,\n        // Invalid: the renderer depends on the samples handler, so the user should pass that in too.\n      });\n    }, /Required handler Samples not provided/);\n  });\n\n  it('emits periodic trace updates', async function() {\n    const processor = new Trace.Processor.TraceProcessor(\n        {\n          Renderer: Trace.Handlers.ModelHandlers.Renderer,\n          Samples: Trace.Handlers.ModelHandlers.Samples,\n          AuctionWorklets: Trace.Handlers.ModelHandlers.AuctionWorklets,\n        },\n        Trace.Types.Configuration.defaults());\n\n    let updateEventCount = 0;\n\n    processor.addEventListener(Trace.Processor.TraceParseProgressEvent.eventName, () => {\n      updateEventCount++;\n    });\n\n    const rawEvents = await TraceLoader.rawEvents(this, 'web-dev-outermost-frames.json.gz');\n    // This trace has 106,110 events. At default of 50k chunks we should see 2 updates.\n    // Additional progress updates are emitted for handers, etc.\n    await processor.parse(rawEvents).then(() => {\n      assert.isAtLeast(updateEventCount, 2);\n    });\n  });\n\n  describe('handler sorting', () => {\n    const baseHandler = {\n      data() {},\n      handleEvent() {},\n      reset() {},\n    };\n\n    function fillHandlers(handlersDeps: {[key: string]: {deps ? () : Trace.Handlers.Types.HandlerName[]}}):\n        {[key: string]: Trace.Handlers.Types.Handler} {\n      const handlers: {[key: string]: Trace.Handlers.Types.Handler} = {};\n      for (const handler in handlersDeps) {\n        handlers[handler] = {...baseHandler, ...handlersDeps[handler]};\n      }\n      return handlers;\n    }\n\n    it('sorts handlers satisfying their dependencies 1', function() {\n      const handlersDeps: {[key: string]: {deps ? () : Trace.Handlers.Types.HandlerName[]}} = {\n        Meta: {},\n        GPU: {\n          deps() {\n            return ['Meta'];\n          },\n        },\n        LayoutShifts: {\n          deps() {\n            return ['GPU'];\n          },\n        },\n        NetworkRequests: {\n          deps() {\n            return ['LayoutShifts'];\n          },\n        },\n        PageLoadMetrics: {\n          deps() {\n            return ['Renderer', 'GPU'];\n          },\n        },\n        Renderer: {\n          deps() {\n            return ['Screenshots'];\n          },\n        },\n        Screenshots: {\n          deps() {\n            return ['NetworkRequests', 'LayoutShifts'];\n          },\n        },\n      };\n      const handlers = fillHandlers(handlersDeps);\n\n      const expectedOrder =\n          ['Meta', 'GPU', 'LayoutShifts', 'NetworkRequests', 'Screenshots', 'Renderer', 'PageLoadMetrics'];\n      assert.deepEqual([...Trace.Processor.sortHandlers(handlers).keys()], expectedOrder);\n    });\n    it('sorts handlers satisfying their dependencies 2', function() {\n      const handlersDeps: {[key: string]: {deps ? () : Trace.Handlers.Types.HandlerName[]}} = {\n        GPU: {\n          deps() {\n            return ['LayoutShifts', 'NetworkRequests'];\n          },\n        },\n        LayoutShifts: {\n          deps() {\n            return ['NetworkRequests'];\n          },\n        },\n        NetworkRequests: {},\n      };\n      const handlers = fillHandlers(handlersDeps);\n\n      const expectedOrder = ['NetworkRequests', 'LayoutShifts', 'GPU'];\n      assert.deepEqual([...Trace.Processor.sortHandlers(handlers).keys()], expectedOrder);\n    });\n    it('throws an error when a dependency cycle is present among handlers', function() {\n      const handlersDeps: {[key: string]: {deps ? () : Trace.Handlers.Types.HandlerName[]}} = {\n        Meta: {},\n        GPU: {\n          deps() {\n            return ['Meta'];\n          },\n        },\n        LayoutShifts: {\n          deps() {\n            return ['GPU', 'Renderer'];\n          },\n        },\n        NetworkRequests: {\n          deps() {\n            return ['LayoutShifts'];\n          },\n        },\n        Renderer: {\n          deps() {\n            return ['NetworkRequests'];\n          },\n        },\n      };\n      const handlers = fillHandlers(handlersDeps);\n      const cyclePath = 'LayoutShifts->Renderer->NetworkRequests->LayoutShifts';\n      assert.throws(\n          () => Trace.Processor.sortHandlers(handlers), `Found dependency cycle in trace event handlers: ${cyclePath}`);\n    });\n  });\n\n  describe('insights', () => {\n    it('returns a single group of insights even if no navigations', async function() {\n      const processor = Trace.Processor.TraceProcessor.createWithAllHandlers();\n      const file = await TraceLoader.rawEvents(this, 'basic.json.gz');\n\n      await processor.parse(file);\n      if (!processor.insights) {\n        throw new Error('No insights');\n      }\n\n      assert.strictEqual(processor.insights.size, 1);\n      assert.deepStrictEqual([...processor.insights.keys()], [Trace.Insights.Types.NO_NAVIGATION]);\n    });\n\n    it('captures errors thrown by insights', async function() {\n      sinon.stub(Trace.Processor.TraceProcessor, 'getEnabledInsightRunners').callsFake(() => {\n        return {\n          RenderBlocking: {\n            generateInsight: () => {\n              throw new Error('forced error');\n            },\n            deps: Trace.Insights.InsightRunners.RenderBlocking.deps,\n          },\n        };\n      });\n\n      const processor = Trace.Processor.TraceProcessor.createWithAllHandlers();\n      const file = await TraceLoader.rawEvents(this, 'load-simple.json.gz');\n\n      await processor.parse(file);\n      if (!processor.insights) {\n        throw new Error('No insights');\n      }\n\n      const insights = Array.from(processor.insights.values());\n      assert.strictEqual(insights.length, 2);\n      assert(insights[1].data.RenderBlocking instanceof Error, 'RenderBlocking did not throw an error');\n      assert.strictEqual(insights[1].data.RenderBlocking.message, 'forced error');\n    });\n\n    it('skips insights that are missing one or more dependencies', async function() {\n      const processor = new Trace.Processor.TraceProcessor({\n        Animations: Trace.Handlers.ModelHandlers.Animations,\n      });\n      const file = await TraceLoader.rawEvents(this, 'load-simple.json.gz');\n\n      await processor.parse(file);\n      if (!processor.insights) {\n        throw new Error('No insights');\n      }\n\n      assert.deepStrictEqual([...processor.insights.keys()], [\n        Trace.Insights.Types.NO_NAVIGATION,\n        '0BCFC23BC7D7BEDC9F93E912DCCEC1DA',\n      ]);\n\n      const insights = Array.from(processor.insights.values());\n      assert.isUndefined(insights[0].data.RenderBlocking);\n      assert.isUndefined(insights[1].data.RenderBlocking);\n    });\n\n    it('returns insights for a navigation', async function() {\n      const processor = Trace.Processor.TraceProcessor.createWithAllHandlers();\n      const file = await TraceLoader.rawEvents(this, 'load-simple.json.gz');\n\n      await processor.parse(file);\n      if (!processor.insights) {\n        throw new Error('No insights');\n      }\n\n      assert.deepStrictEqual([...processor.insights.keys()], [\n        Trace.Insights.Types.NO_NAVIGATION,\n        '0BCFC23BC7D7BEDC9F93E912DCCEC1DA',\n      ]);\n\n      const insights = Array.from(processor.insights.values());\n      if (insights[0].data.RenderBlocking instanceof Error) {\n        throw new Error('RenderBlocking threw an error');\n      }\n      if (insights[1].data.RenderBlocking instanceof Error) {\n        throw new Error('RenderBlocking threw an error');\n      }\n\n      assert.strictEqual(insights[0].data.RenderBlocking.renderBlockingRequests.length, 0);\n      assert.strictEqual(insights[1].data.RenderBlocking.renderBlockingRequests.length, 2);\n    });\n\n    it('returns insights for multiple navigations', async function() {\n      const processor = Trace.Processor.TraceProcessor.createWithAllHandlers();\n      const file = await TraceLoader.rawEvents(this, 'multiple-navigations.json.gz');\n\n      await processor.parse(file);\n      if (!processor.insights) {\n        throw new Error('No insights');\n      }\n\n      assert.deepStrictEqual([...processor.insights.keys()], [\n        Trace.Insights.Types.NO_NAVIGATION,\n        '83ACBFD389F1F66EF79CEDB4076EB44A',\n        '70BCD304FD2C098BA2513488AB0FF3F2',\n        '71CF0F2B9FE50F2CB31B261D129D06E8',\n      ]);\n\n      const insights = Array.from(processor.insights.values());\n      if (insights[0].data.RenderBlocking instanceof Error) {\n        throw new Error('RenderBlocking threw an error');\n      }\n      if (insights[1].data.RenderBlocking instanceof Error) {\n        throw new Error('RenderBlocking threw an error');\n      }\n      if (insights[2].data.RenderBlocking instanceof Error) {\n        throw new Error('RenderBlocking threw an error');\n      }\n      if (insights[3].data.RenderBlocking instanceof Error) {\n        throw new Error('RenderBlocking threw an error');\n      }\n\n      assert.strictEqual(insights[0].data.RenderBlocking.renderBlockingRequests.length, 0);\n      assert.strictEqual(insights[1].data.RenderBlocking.renderBlockingRequests.length, 0);\n      assert.strictEqual(insights[2].data.RenderBlocking.renderBlockingRequests.length, 0);\n      assert.strictEqual(insights[3].data.RenderBlocking.renderBlockingRequests.length, 1);\n    });\n  });\n});\n"]}