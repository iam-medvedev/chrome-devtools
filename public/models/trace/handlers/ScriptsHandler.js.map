{"version":3,"file":"ScriptsHandler.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/ScriptsHandler.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,QAAQ,MAAM,oCAAoC,CAAC;AAI/D,OAAO,KAAK,KAAK,MAAM,mBAAmB,CAAC;AAiB3C,MAAM,UAAU,GAAG,IAAI,GAAG,EAAqC,CAAC;AAEhE,MAAM,UAAU,KAAK;IACnB,UAAU,CAAC,KAAK,EAAE,CAAC;AACrB,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,KAAyB;IACnD,MAAM,eAAe,GAAG,CAAC,QAAmC,EAAU,EAAE,CACpE,QAAQ,CAAC,YAAY,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAY,CAAA,CAAC,CAAC;IAE/G,IAAI,KAAK,CAAC,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAC;QAC7C,MAAM,EAAC,QAAQ,EAAE,KAAK,EAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;QAC1C,MAAM,MAAM,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;QACzC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,MAAM,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC;QAErB,OAAO;IACT,CAAC;IAED,IAAI,KAAK,CAAC,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAC;QAC7C,MAAM,EAAC,QAAQ,EAAE,GAAG,EAAE,YAAY,EAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;QACtD,MAAM,MAAM,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;QACzC,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;QACjB,6EAA6E;QAC7E,yEAAyE;QACzE,IAAI,YAAY,IAAI,YAAY,KAAK,GAAG,IAAI,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;YAC3E,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC;QACrC,CAAC;QACD,OAAO;IACT,CAAC;IAED,IAAI,KAAK,CAAC,MAAM,CAAC,0BAA0B,CAAC,KAAK,CAAC,EAAE,CAAC;QACnD,MAAM,EAAC,QAAQ,EAAE,UAAU,EAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;QAC/C,MAAM,MAAM,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;QACzC,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC;QAC5B,OAAO;IACT,CAAC;AACH,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAC,OAAyC;IACtE,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAC9B,OAAO;IACT,CAAC;IAED,MAAM,QAAQ,GAAG,EAAE,CAAC;IACpB,KAAK,MAAM,MAAM,IAAI,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC;QACzC,IAAI,MAAM,CAAC,YAAY,EAAE,CAAC;YACxB,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;gBAC3E,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC;YAC/B,CAAC,CAAC,CAAC,CAAC;QACN,CAAC;IACH,CAAC;IACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC9B,CAAC;AAED,MAAM,UAAU,IAAI;IAClB,OAAO;QACL,OAAO,EAAE,UAAU;KACpB,CAAC;AACJ,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\n// eslint-disable-next-line rulesdir/no-imports-in-directory\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Types from '../types/types.js';\n\nexport interface ScriptsData {\n  /** Note: this is only populated when the \"Enhanced Traces\" feature is enabled. */\n  scripts: Map<Protocol.Runtime.ScriptId, Script>;\n}\n\nexport interface Script {\n  scriptId: Protocol.Runtime.ScriptId;\n  frame: string;\n  ts: Types.Timing.Micro;\n  url?: string;\n  content?: string;\n  sourceMapUrl?: string;\n  sourceMap?: SDK.SourceMap.SourceMap;\n}\n\nconst scriptById = new Map<Protocol.Runtime.ScriptId, Script>();\n\nexport function reset(): void {\n  scriptById.clear();\n}\n\nexport function handleEvent(event: Types.Events.Event): void {\n  const getOrMakeScript = (scriptId: Protocol.Runtime.ScriptId): Script =>\n      Platform.MapUtilities.getWithDefault(scriptById, scriptId, () => ({scriptId, frame: '', ts: 0} as Script));\n\n  if (Types.Events.isTargetRundownEvent(event)) {\n    const {scriptId, frame} = event.args.data;\n    const script = getOrMakeScript(scriptId);\n    script.frame = frame;\n    script.ts = event.ts;\n\n    return;\n  }\n\n  if (Types.Events.isScriptRundownEvent(event)) {\n    const {scriptId, url, sourceMapUrl} = event.args.data;\n    const script = getOrMakeScript(scriptId);\n    script.url = url;\n    // Ignore nonsense values, which is what this was when initially implemented.\n    // TODO(cjamcl): https://g-issues.chromium.org/issues/337909145#comment15\n    if (sourceMapUrl && sourceMapUrl !== url && sourceMapUrl.endsWith('.json')) {\n      script.sourceMapUrl = sourceMapUrl;\n    }\n    return;\n  }\n\n  if (Types.Events.isScriptSourceRundownEvent(event)) {\n    const {scriptId, sourceText} = event.args.data;\n    const script = getOrMakeScript(scriptId);\n    script.content = sourceText;\n    return;\n  }\n}\n\nexport async function finalize(options: Types.Configuration.ParseOptions): Promise<void> {\n  if (!options.resolveSourceMap) {\n    return;\n  }\n\n  const promises = [];\n  for (const script of scriptById.values()) {\n    if (script.sourceMapUrl) {\n      promises.push(options.resolveSourceMap(script.sourceMapUrl).then(sourceMap => {\n        script.sourceMap = sourceMap;\n      }));\n    }\n  }\n  await Promise.all(promises);\n}\n\nexport function data(): ScriptsData {\n  return {\n    scripts: scriptById,\n  };\n}\n"]}