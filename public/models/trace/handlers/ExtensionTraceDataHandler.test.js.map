{"version":3,"file":"ExtensionTraceDataHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/ExtensionTraceDataHandler.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,UAAU,MAAM,aAAa,CAAC;AAE1C,QAAQ,CAAC,2BAA2B,EAAE;IACpC,IAAI,sBAA+F,CAAC;IAEpG,IAAI,SAAS,GAAG,CAAC,CAAC;IAGlB,SAAS,gCAAgC,CAAC,EAAC,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAoB;QAErG,MAAM,MAAM,GAAG,QAAQ,KAAK,SAAS,CAAC;QACtC,MAAM,SAAS,GAAG,SAAS,EAAE,CAAC;QAC9B,MAAM,cAAc,GAAG;YACrB,GAAG,EAAE,mBAAmB;YACxB,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC;YACjD,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC;YAC/C,GAAG,EAAE,EAAC,KAAK,EAAE,GAAG,SAAS,EAAE,EAAC;SAC7B,CAAC;QAEF,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC5C,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAC,IAAI,EAAE,EAAC,MAAM,EAAE,YAAY,EAAC,EAAC,CAAC,CAAC,CAAC,EAAC,MAAM,EAAE,YAAY,EAAC,CAAC;QAC9E,MAAM,UAAU,GAAG;YACjB,IAAI;YACJ,IAAI;YACJ,EAAE,EAAE,MAAM,CAAC,CAAC,sDAA4C,CAAC,kEAAwD;YACjH,EAAE,EAAE,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC;YACjD,GAAG,cAAc;SAC6B,CAAC;QACjD,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,CAAC,UAAU,CAAC,CAAC;QACtB,CAAC;QACD,OAAO;YACL,UAAU;YACV;gBACE,IAAI;gBACJ,GAAG,cAAc;gBACjB,EAAE,EAAE,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,GAAG,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC;gBACnE,EAAE,iEAAuD;aAC1D;SACF,CAAC;IACJ,CAAC;IACD,KAAK,UAAU,qCAAqC,CAAC,aAAkC;QAErF,MAAM,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QACvG,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACtD,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACnE,CAAC;QACD,MAAM,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QAE/D,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;QAC7D,iEAAiE;QACjE,2DAA2D;QAC3D,MAAM,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;QACtE,OAAO,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;IACrE,CAAC;IAED,SAAS,+BAA+B;QAEtC,MAAM,aAAa,GAAG;YACpB;gBACE,MAAM,EAAE;oBACN,QAAQ,EAAE;wBACR,KAAK,EAAE,OAAO;wBACd,QAAQ,EAAE,QAAQ;wBAClB,UAAU,EAAE,CAAC,CAAC,aAAa,EAAE,gCAAgC,CAAC,CAAC;wBAC/D,WAAW,EAAE,QAAQ;qBACtB;iBACF;gBACD,IAAI,EAAE,eAAe;gBACrB,EAAE,EAAE,GAAG;aACR;YACD,+BAA+B;YAC/B;gBACE,MAAM,EAAE,EAAC,QAAQ,EAAE,EAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAC,EAAC;gBAChE,IAAI,EAAE,eAAe;gBACrB,EAAE,EAAE,GAAG;aACR;YACD;gBACE,MAAM,EAAE;oBACN,QAAQ,EAAE,EAAC,QAAQ,EAAE,aAAa,EAAE,KAAK,EAAE,oBAAoB,EAAE,UAAU,EAAE,CAAC,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,EAAC;iBAC7G;gBACD,IAAI,EAAE,0BAA0B;gBAChC,EAAE,EAAE,GAAG;gBACP,GAAG,EAAE,GAAG;aACT;YACD,6DAA6D;YAC7D;gBACE,MAAM,EAAE,EAAC,QAAQ,EAAE,EAAC,KAAK,EAAE,oBAAoB,EAAE,KAAK,EAAE,UAAU,EAAC,EAAC;gBACpE,IAAI,EAAE,0BAA0B;gBAChC,EAAE,EAAE,GAAG;gBACP,GAAG,EAAE,EAAE;aACR;YACD,0DAA0D;YAC1D;gBACE,MAAM,EAAE;oBACN,QAAQ,EAAE;wBACR,QAAQ,EAAE,aAAa;wBACvB,KAAK,EAAE,yBAAyB;wBAChC,UAAU,EAAE,CAAC,CAAC,aAAa,EAAE,WAAW,CAAC,EAAE,CAAC,KAAK,EAAE,uBAAuB,CAAC,CAAC;wBAC5E,WAAW,EAAE,kBAAkB;qBAChC;iBACF;gBACD,IAAI,EAAE,0BAA0B;gBAChC,EAAE,EAAE,GAAG;gBACP,GAAG,EAAE,GAAG;aACT;YACD,0DAA0D;YAC1D;gBACE,MAAM,EAAE;oBACN,QAAQ,EAAE;wBACR,QAAQ,EAAE,cAA8E;wBACxF,KAAK,EAAE,yBAAyB;qBACjC;iBACF;gBACD,IAAI,EAAE,0BAA0B;gBAChC,EAAE,EAAE,GAAG;gBACP,GAAG,EAAE,EAAE;aACR;YACD,uDAAuD;YACvD;gBACE,MAAM,EAAE,EAAC,QAAQ,EAAE,EAAC,QAAQ,EAAE,aAAa,EAAC,EAAC;gBAC7C,IAAI,EAAE,0BAA0B;gBAChC,EAAE,EAAE,GAAG;gBACP,GAAG,EAAE,EAAE;aACR;SACqB,CAAC;QACzB,OAAO,qCAAqC,CAAC,aAAa,CAAC,CAAC;IAC9D,CAAC;IAED,QAAQ,CAAC,iEAAiE,EAAE;QAC1E,MAAM,CAAC,KAAK;YACV,sBAAsB,GAAG,MAAM,+BAA+B,EAAE,CAAC;QACnE,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;YAC9B,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC;YACtG,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;YAE5F,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,yBAAyB,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3G,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC;QACnG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,EAAC,WAAW,EAAE,KAAK,EAAE,UAAU,EAAC,GAClC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACnG,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;YACpD,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,yBAAyB,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,+DAA+D,CAAC,CAAC;QAClH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,iEAAiE;YACjE,0BAA0B;YAC1B,MAAM,eAAe,GACjB,sBAAsB,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACxG,MAAM,iBAAiB,GAAG,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC5E,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAE,eAAe,CAAC,MAAM,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,oEAAoE;YACpE,SAAS;YACT,0BAA0B;YAC1B,MAAM,eAAe,GACjB,sBAAsB,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACxG,MAAM,iBAAiB,GACnB,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,KAAK,aAAa,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC;YAChH,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAE,eAAe,CAAC,MAAM,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,+DAA+D,EAAE;QACxE,MAAM,CAAC,KAAK;YACV,sBAAsB,GAAG,MAAM,+BAA+B,EAAE,CAAC;QACnE,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;YACrF,MAAM,EAAC,WAAW,EAAE,UAAU,EAAC,GAAG,sBAAsB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAClF,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,oDAAoD,CAAC,CAAC;QACvG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;YAC7E,MAAM,oBAAoB,GAA2D;gBACnF,IAAI,EAAE;oBACJ,IAAI,EAAE;wBACJ,MAAM,EAAE,kBAAkB;qBAC3B;iBACF;gBACD,IAAI,EAAE,gBAAgB;gBACtB,GAAG,EAAE,mBAAmB;gBACxB,EAAE,sDAA4C;gBAC9C,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC9C,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC7C,EAAE,EAAE,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC;aAC9C,CAAC;YAEF,MAAM,CAAC,MAAM,CACT,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,CACnG,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,oEAAoE;YACpE,SAAS;YACT,0BAA0B;YAC1B,MAAM,UAAU,GAAG,sBAAsB,CAAC,gBAAgB,CAAC;YAC3D,MAAM,iBAAiB,GAAG,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;YACvF,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,kEAAkE,EAAE,KAAK;YAC1E,MAAM,aAAa,GAAwB;gBACzC;oBACE,MAAM,EAAE;wBACN,QAAQ,EAAE;4BACR,KAAK,EAAE,OAAO;4BACd,QAAQ,EAAE,QAAQ;4BAClB,UAAU,EAAE,CAAC,CAAC,aAAa,EAAE,gCAAgC,CAAC,CAAC;4BAC/D,WAAW,EAAE,QAAQ;yBACtB;qBACF;oBACD,IAAI,EAAE,eAAe;oBACrB,EAAE,EAAE,GAAG;iBACR;aACF,CAAC;YACF,MAAM,sBAAsB,GAAG,MAAM,qCAAqC,CAAC,aAAa,CAAC,CAAC;YAC1F,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,mEAAmE,EAAE,KAAK;YAC3E,MAAM,aAAa,GAAG;gBACpB;oBACE,MAAM,EAAE,EAAE;oBACV,IAAI,EAAE,eAAe;oBACrB,EAAE,EAAE,GAAG;iBACR;aACqB,CAAC;YACzB,MAAM,sBAAsB,GAAG,MAAM,qCAAqC,CAAC,aAAa,CAAC,CAAC;YAC1F,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,oFAAoF,EAAE,KAAK;YAC5F,MAAM,aAAa,GAAG;gBACpB;oBACE,oBAAoB;oBACpB,MAAM,EAAE;wBACN,QAAQ,EAAE;4BACR,KAAK,EAAE,OAAO;4BACd,QAAQ,EAAE,SAAyE;yBACpF;qBACF;oBACD,IAAI,EAAE,eAAe;oBACrB,EAAE,EAAE,GAAG;iBACR;gBACD;oBACE,MAAM,EAAE;wBACN,QAAQ,EAAE;4BACR,qDAAqD;4BACrD,KAAK,EAAE,OAAO;yBACf;qBACF;oBACD,IAAI,EAAE,eAAe;oBACrB,EAAE,EAAE,GAAG;iBACR;gBACD;oBACE,MAAM,EAAE;wBACN,QAAQ,EAAE;4BACR,qCAAqC;4BACrC,QAAQ,EAAE,aAAa;yBACxB;qBACF;oBACD,IAAI,EAAE,eAAe;oBACrB,EAAE,EAAE,GAAG;iBACR;aACqB,CAAC;YACzB,MAAM,sBAAsB,GAAG,MAAM,qCAAqC,CAAC,aAAa,CAAC,CAAC;YAC1F,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,yFAAyF,EAAE,KAAK;YACjG,MAAM,aAAa,GAAG;gBACpB;oBACE,oBAAoB;oBACpB,MAAM,EAAE;wBACN,QAAQ,EAAE;4BACR,UAAU,EAAE,aAAa;yBAC1B;qBACF;oBACD,IAAI,EAAE,eAAe;oBACrB,EAAE,EAAE,GAAG;oBACP,GAAG,EAAE,GAAG;iBACT;aACqB,CAAC;YACzB,MAAM,sBAAsB,GAAG,MAAM,qCAAqC,CAAC,aAAa,CAAC,CAAC;YAC1F,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,0DAA0D,EAAE,KAAK;YAClE,MAAM,wBAAwB,GAA8C;gBAC1E,gBAAgB;gBAChB;oBACE,QAAQ,EAAE,aAAa;oBACvB,UAAU,EAAE,SAAS;oBACrB,KAAK,EAAE,SAAS;iBACjB;gBACD;oBACE,QAAQ,EAAE,aAAa;oBACvB,UAAU,EAAE,SAAS;oBACrB,KAAK,EAAE,SAAS;iBACjB;gBACD;oBACE,QAAQ,EAAE,aAAa;oBACvB,UAAU,EAAE,SAAS;oBACrB,KAAK,EAAE,SAAS;iBACjB;gBACD;oBACE,QAAQ,EAAE,aAAa;oBACvB,UAAU,EAAE,SAAS;oBACrB,KAAK,EAAE,SAAS;iBACjB;gBACD,gBAAgB;gBAChB;oBACE,QAAQ,EAAE,aAAa;oBACvB,UAAU,EAAE,SAAS;oBACrB,KAAK,EAAE,SAAS;iBACjB;gBACD,oBAAoB;gBACpB;oBACE,QAAQ,EAAE,aAAa;oBACvB,KAAK,EAAE,mBAAmB;iBAC3B;gBACD;oBACE,QAAQ,EAAE,aAAa;oBACvB,KAAK,EAAE,mBAAmB;iBAC3B;gBACD;oBACE,QAAQ,EAAE,aAAa;oBACvB,KAAK,EAAE,mBAAmB;iBAC3B;aACF,CAAC;YAEF,MAAM,sBAAsB,GACxB,MAAM,qCAAqC,CAAC,wBAAwB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBACX,MAAM,EAAE,EAAC,QAAQ,EAAC;gBAClB,IAAI,EAAE,eAAe;gBACrB,EAAE,EAAE,GAAG;gBACP,GAAG,EAAE,GAAG;aACT,CAAC,CAAC,CAAC,CAAC;YAClF,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAExE,MAAM,cAAc,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACpE,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;YAChG,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEzG,MAAM,eAAe,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACrE,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACpD,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YACvD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAEpG,MAAM,cAAc,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACpE,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;YAC7D,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACpF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAEnG,MAAM,eAAe,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACrE,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;YAC9D,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACrF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACtG,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,6CAA6C,EAAE,KAAK;YACrD,MAAM,wBAAwB,GAAwB;gBACpD,gBAAgB;gBAChB;oBACE,MAAM,EAAE;wBACN,QAAQ,EAAE;4BACR,QAAQ,EAAE,aAAa;4BACvB,UAAU,EAAE,SAAS;4BACrB,KAAK,EAAE,SAAS;yBACjB;qBACF;oBACD,IAAI,EAAE,eAAe;oBACrB,EAAE,EAAE,CAAC;oBACL,GAAG,EAAE,GAAG;iBACT;gBACD;oBACE,MAAM,EAAE;wBACN,QAAQ,EAAE;4BACR,QAAQ,EAAE,aAAa;4BACvB,UAAU,EAAE,SAAS;4BACrB,KAAK,EAAE,SAAS;yBACjB;qBACF;oBACD,IAAI,EAAE,eAAe;oBACrB,EAAE,EAAE,CAAC;oBACL,GAAG,EAAE,EAAE;iBACR;gBACD;oBACE,MAAM,EAAE;wBACN,QAAQ,EAAE;4BACR,QAAQ,EAAE,aAAa;4BACvB,UAAU,EAAE,SAAS;4BACrB,KAAK,EAAE,SAAS;yBACjB;qBACF;oBACD,IAAI,EAAE,eAAe;oBACrB,EAAE,EAAE,EAAE;oBACN,GAAG,EAAE,EAAE;iBACR;gBACD;oBACE,MAAM,EAAE;wBACN,QAAQ,EAAE;4BACR,QAAQ,EAAE,aAAa;4BACvB,UAAU,EAAE,SAAS;4BACrB,KAAK,EAAE,SAAS;yBACjB;qBACF;oBACD,IAAI,EAAE,eAAe;oBACrB,EAAE,EAAE,EAAE;oBACN,GAAG,EAAE,EAAE;iBACR;gBACD;oBACE,MAAM,EAAE;wBACN,QAAQ,EAAE;4BACR,QAAQ,EAAE,aAAa;4BACvB,UAAU,EAAE,SAAS;4BACrB,KAAK,EAAE,SAAS;yBACjB;qBACF;oBACD,IAAI,EAAE,eAAe;oBACrB,EAAE,EAAE,CAAC;oBACL,GAAG,EAAE,GAAG;iBACT;gBACD,mBAAmB;gBACnB;oBACE,MAAM,EAAE;wBACN,QAAQ,EAAE;4BACR,QAAQ,EAAE,aAAa;4BACvB,KAAK,EAAE,iBAAiB;yBACzB;qBACF;oBACD,IAAI,EAAE,eAAe;oBACrB,EAAE,EAAE,CAAC;oBACL,GAAG,EAAE,GAAG;iBACT;gBACD;oBACE,MAAM,EAAE;wBACN,QAAQ,EAAE;4BACR,QAAQ,EAAE,aAAa;4BACvB,KAAK,EAAE,iBAAiB;yBACzB;qBACF;oBACD,IAAI,EAAE,eAAe;oBACrB,EAAE,EAAE,EAAE;oBACN,GAAG,EAAE,EAAE;iBACR;aACF,CAAC;YAEF,MAAM,sBAAsB,GAAG,MAAM,qCAAqC,CAAC,wBAAwB,CAAC,CAAC;YACrG,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;YAE9D,MAAM,cAAc,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACpE,MAAM,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,GAAG,CAC/D,KAAK,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAkB,EAAC,CAAC,CAAC,CAAC;YACvE,MAAM,CAAC,SAAS,CAAC,cAAc,EAAE;gBAC/B,EAAC,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,EAAE,EAAC;gBACrC,EAAC,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,EAAE,EAAC;gBACrC,EAAC,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,EAAE,EAAC;gBACrC,EAAC,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,EAAE,EAAC;aACtC,CAAC,CAAC;YAEH,MAAM,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,GAAG,CAC/D,KAAK,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAkB,EAAC,CAAC,CAAC,CAAC;YACvE,MAAM,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC,EAAC,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,GAAG,EAAC,CAAC,CAAC,CAAC;YAE3E,MAAM,kBAAkB,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,GAAG,CACzG,KAAK,CAAC,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAkB,EAAC,CAAC,CAAC,CAAC;YACvE,MAAM,CAAC,SAAS,CACZ,kBAAkB,EAAE,CAAC,EAAC,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,EAAE,EAAC,EAAE,EAAC,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,EAAE,EAAC,CAAC,CAAC,CAAC;QAC1G,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TraceModel from '../trace.js';\n\ndescribe('ExtensionTraceDataHandler', function() {\n  let extensionHandlerOutput: TraceModel.Handlers.ModelHandlers.ExtensionTraceData.ExtensionTraceData;\n\n  let idCounter = 0;\n  type ExtensionTestData =\n      {detail: {devtools?: TraceModel.Types.Extensions.ExtensionDataPayload}, name: string, ts: number, dur?: number};\n  function makeTimingEventWithExtensionData({name, ts: tsMicro, detail, dur: durMicro}: ExtensionTestData):\n      TraceModel.Types.TraceEvents.TraceEventData[] {\n    const isMark = durMicro === undefined;\n    const currentId = idCounter++;\n    const traceEventBase = {\n      cat: 'blink.user_timing',\n      pid: TraceModel.Types.TraceEvents.ProcessID(2017),\n      tid: TraceModel.Types.TraceEvents.ThreadID(259),\n      id2: {local: `${currentId}`},\n    };\n\n    const stringDetail = JSON.stringify(detail);\n    const args = isMark ? {data: {detail: stringDetail}} : {detail: stringDetail};\n    const firstEvent = {\n      args,\n      name,\n      ph: isMark ? TraceModel.Types.TraceEvents.Phase.INSTANT : TraceModel.Types.TraceEvents.Phase.ASYNC_NESTABLE_START,\n      ts: TraceModel.Types.Timing.MicroSeconds(tsMicro),\n      ...traceEventBase,\n    } as TraceModel.Types.TraceEvents.TraceEventData;\n    if (isMark) {\n      return [firstEvent];\n    }\n    return [\n      firstEvent,\n      {\n        name,\n        ...traceEventBase,\n        ts: TraceModel.Types.Timing.MicroSeconds(tsMicro + (durMicro || 0)),\n        ph: TraceModel.Types.TraceEvents.Phase.ASYNC_NESTABLE_END,\n      },\n    ];\n  }\n  async function createTraceExtensionDataFromTestInput(extensionData: ExtensionTestData[]):\n      Promise<TraceModel.Handlers.ModelHandlers.ExtensionTraceData.ExtensionTraceData> {\n    const events = extensionData.flatMap(makeTimingEventWithExtensionData).sort((e1, e2) => e1.ts - e2.ts);\n    TraceModel.Handlers.ModelHandlers.UserTimings.reset();\n    for (const event of events) {\n      TraceModel.Handlers.ModelHandlers.UserTimings.handleEvent(event);\n    }\n    await TraceModel.Handlers.ModelHandlers.UserTimings.finalize();\n\n    TraceModel.Handlers.ModelHandlers.ExtensionTraceData.reset();\n    // ExtensionTraceData handler doesn't need to handle events since\n    // it only consumes the output of the user timings handler.\n    await TraceModel.Handlers.ModelHandlers.ExtensionTraceData.finalize();\n    return TraceModel.Handlers.ModelHandlers.ExtensionTraceData.data();\n  }\n\n  function createTraceExtensionDataExample():\n      Promise<TraceModel.Handlers.ModelHandlers.ExtensionTraceData.ExtensionTraceData> {\n    const extensionData = [\n      {\n        detail: {\n          devtools: {\n            color: 'error',\n            dataType: 'marker',\n            properties: [['Description', 'This marks the start of a task']],\n            tooltipText: 'A mark',\n          },\n        },\n        name: 'A custom mark',\n        ts: 100,\n      },\n      // Marker with invalid dataType\n      {\n        detail: {devtools: {color: 'error', dataType: 'invalid-marker'}},\n        name: 'A custom mark',\n        ts: 100,\n      },\n      {\n        detail: {\n          devtools: {dataType: 'track-entry', track: 'An Extension Track', properties: [['Description', 'Something']]},\n        },\n        name: 'An extension measurement',\n        ts: 100,\n        dur: 100,\n      },\n      // Track entry with no explicit dataType (should be accepted)\n      {\n        detail: {devtools: {track: 'An Extension Track', color: 'tertiary'}},\n        name: 'An extension measurement',\n        ts: 105,\n        dur: 50,\n      },\n      // Track entry with no explicit color (should be accepted)\n      {\n        detail: {\n          devtools: {\n            dataType: 'track-entry',\n            track: 'Another Extension Track',\n            properties: [['Description', 'Something'], ['Tip', 'A tip to improve this']],\n            tooltipText: 'A hint if needed',\n          },\n        },\n        name: 'An extension measurement',\n        ts: 100,\n        dur: 100,\n      },\n      // Track entry with invalid data type (should be ignored).\n      {\n        detail: {\n          devtools: {\n            dataType: 'invalid-type' as TraceModel.Types.Extensions.ExtensionDataPayload['dataType'],\n            track: 'Another Extension Track',\n          },\n        },\n        name: 'An extension measurement',\n        ts: 105,\n        dur: 50,\n      },\n      // Track entry with no track value (should be ignored).\n      {\n        detail: {devtools: {dataType: 'track-entry'}},\n        name: 'An extension measurement',\n        ts: 105,\n        dur: 50,\n      },\n    ] as ExtensionTestData[];\n    return createTraceExtensionDataFromTestInput(extensionData);\n  }\n\n  describe('track data parsing from user timings that use the extension API', function() {\n    before(async function() {\n      extensionHandlerOutput = await createTraceExtensionDataExample();\n    });\n    it('creates tracks', async () => {\n      assert.lengthOf(extensionHandlerOutput.extensionTrackData, 2);\n    });\n    it('parses track data correctly', async () => {\n      assert.lengthOf(extensionHandlerOutput.extensionTrackData[0].entriesByTrack['An Extension Track'], 2);\n      assert.strictEqual(extensionHandlerOutput.extensionTrackData[0].name, 'An Extension Track');\n\n      assert.lengthOf(extensionHandlerOutput.extensionTrackData[1].entriesByTrack['Another Extension Track'], 1);\n      assert.strictEqual(extensionHandlerOutput.extensionTrackData[1].name, 'Another Extension Track');\n    });\n\n    it('gets data from individual entries', async () => {\n      const {tooltipText, track, properties} =\n          extensionHandlerOutput.extensionTrackData[1].entriesByTrack['Another Extension Track'][0].args;\n      assert.strictEqual(tooltipText, 'A hint if needed');\n      assert.strictEqual(track, 'Another Extension Track');\n      assert.strictEqual(JSON.stringify(properties), '[[\"Description\",\"Something\"],[\"Tip\",\"A tip to improve this\"]]');\n    });\n\n    it('discards track data without a corresponding track field', async () => {\n      // The test example contains a track entry without a track field.\n      // Ensure it is discarded.\n      const allTrackEntries =\n          extensionHandlerOutput.extensionTrackData.map(track => Object.values(track.entriesByTrack)).flat(2);\n      const validTrackEntries = allTrackEntries.filter(entry => entry.args.track);\n      assert.lengthOf(validTrackEntries, allTrackEntries.length);\n    });\n\n    it('discards track data without a valid dataType field', async () => {\n      // The test example contains extension data with an invalid dataType\n      // value.\n      // Ensure it is discarded.\n      const allTrackEntries =\n          extensionHandlerOutput.extensionTrackData.map(track => Object.values(track.entriesByTrack)).flat(2);\n      const validTrackEntries =\n          allTrackEntries.filter(entry => entry.args.dataType === 'track-entry' || entry.args.dataType === undefined);\n      assert.lengthOf(validTrackEntries, allTrackEntries.length);\n    });\n  });\n\n  describe('Timeline markers from user timings that use the extension API', function() {\n    before(async function() {\n      extensionHandlerOutput = await createTraceExtensionDataExample();\n    });\n    it('parses marker data correctly', async () => {\n      assert.lengthOf(extensionHandlerOutput.extensionMarkers, 1);\n      assert.strictEqual(extensionHandlerOutput.extensionMarkers[0].name, 'A custom mark');\n      const {tooltipText, properties} = extensionHandlerOutput.extensionMarkers[0].args;\n      assert.strictEqual(tooltipText, 'A mark');\n      assert.strictEqual(JSON.stringify(properties), '[[\"Description\",\"This marks the start of a task\"]]');\n    });\n\n    it('discards markers whose details are not valid stringified JSON', async () => {\n      const performanceMarkEvent: TraceModel.Types.TraceEvents.TraceEventPerformanceMark = {\n        args: {\n          data: {\n            detail: 'this-is-not-json',\n          },\n        },\n        name: 'test-perf-mark',\n        cat: 'blink.user_timing',\n        ph: TraceModel.Types.TraceEvents.Phase.INSTANT,\n        pid: TraceModel.Types.TraceEvents.ProcessID(1),\n        tid: TraceModel.Types.TraceEvents.ThreadID(1),\n        ts: TraceModel.Types.Timing.MicroSeconds(100),\n      };\n\n      assert.isNull(\n          TraceModel.Handlers.ModelHandlers.ExtensionTraceData.extensionDataInTiming(performanceMarkEvent),\n      );\n    });\n\n    it('discards markers without a valid dataType field', async () => {\n      // The test example contains extension data with an invalid dataType\n      // value.\n      // Ensure it is discarded.\n      const allMarkers = extensionHandlerOutput.extensionMarkers;\n      const validTrackEntries = allMarkers.filter(entry => entry.args.dataType === 'marker');\n      assert.lengthOf(validTrackEntries, allMarkers.length);\n    });\n  });\n\n  describe('Data filtering', () => {\n    it('extracts the extension data from a timing\\'s detail when present', async function() {\n      const extensionData: ExtensionTestData[] = [\n        {\n          detail: {\n            devtools: {\n              color: 'error',\n              dataType: 'marker',\n              properties: [['Description', 'This marks the start of a task']],\n              tooltipText: 'A mark',\n            },\n          },\n          name: 'A custom mark',\n          ts: 100,\n        },\n      ];\n      const extensionHandlerOutput = await createTraceExtensionDataFromTestInput(extensionData);\n      assert.strictEqual(extensionHandlerOutput.extensionMarkers.length, 1);\n    });\n    it('ignores a timing if its detail does not contain a devtools object', async function() {\n      const extensionData = [\n        {\n          detail: {},\n          name: 'A custom mark',\n          ts: 100,\n        },\n      ] as ExtensionTestData[];\n      const extensionHandlerOutput = await createTraceExtensionDataFromTestInput(extensionData);\n      assert.strictEqual(extensionHandlerOutput.extensionMarkers.length, 0);\n    });\n    it('ignores a timing if its detail contains a devtools object w/o valid extension data', async function() {\n      const extensionData = [\n        {\n          // Invalid data type\n          detail: {\n            devtools: {\n              color: 'error',\n              dataType: 'invalid' as TraceModel.Types.Extensions.ExtensionDataPayload['dataType'],\n            },\n          },\n          name: 'A custom mark',\n          ts: 100,\n        },\n        {\n          detail: {\n            devtools: {\n              // Defaulted to track-entry but no trackName provided\n              color: 'error',\n            },\n          },\n          name: 'A measurement',\n          ts: 100,\n        },\n        {\n          detail: {\n            devtools: {\n              // track-entry w/o trackName provided\n              dataType: 'track-entry',\n            },\n          },\n          name: 'A measurement',\n          ts: 100,\n        },\n      ] as ExtensionTestData[];\n      const extensionHandlerOutput = await createTraceExtensionDataFromTestInput(extensionData);\n      assert.strictEqual(extensionHandlerOutput.extensionMarkers.length, 0);\n    });\n    it('ignores a timing if its detail contains a devtools with a track group but no track name', async function() {\n      const extensionData = [\n        {\n          // Invalid data type\n          detail: {\n            devtools: {\n              trackGroup: 'Track group',\n            },\n          },\n          name: 'A measurement',\n          ts: 100,\n          dur: 100,\n        },\n      ] as ExtensionTestData[];\n      const extensionHandlerOutput = await createTraceExtensionDataFromTestInput(extensionData);\n      assert.strictEqual(extensionHandlerOutput.extensionMarkers.length, 0);\n    });\n  });\n\n  describe('Track groups', () => {\n    it('builds extension track data for grouped tracks correctly', async function() {\n      const extensionDevToolsObjects: ExtensionTestData['detail']['devtools'][] = [\n        // Track group 1\n        {\n          dataType: 'track-entry',\n          trackGroup: 'Group 1',\n          track: 'Track 1',\n        },\n        {\n          dataType: 'track-entry',\n          trackGroup: 'Group 1',\n          track: 'Track 1',\n        },\n        {\n          dataType: 'track-entry',\n          trackGroup: 'Group 1',\n          track: 'Track 2',\n        },\n        {\n          dataType: 'track-entry',\n          trackGroup: 'Group 1',\n          track: 'Track 3',\n        },\n        // Track group 2\n        {\n          dataType: 'track-entry',\n          trackGroup: 'Group 2',\n          track: 'Track 1',\n        },\n        // Un grouped tracks\n        {\n          dataType: 'track-entry',\n          track: 'Ungrouped Track 1',\n        },\n        {\n          dataType: 'track-entry',\n          track: 'Ungrouped Track 2',\n        },\n        {\n          dataType: 'track-entry',\n          track: 'Ungrouped Track 2',\n        },\n      ];\n\n      const extensionHandlerOutput =\n          await createTraceExtensionDataFromTestInput(extensionDevToolsObjects.map(devtools => ({\n                                                                                     detail: {devtools},\n                                                                                     name: 'A measurement',\n                                                                                     ts: 100,\n                                                                                     dur: 100,\n                                                                                   })));\n      assert.strictEqual(extensionHandlerOutput.extensionTrackData.length, 4);\n\n      const firstTrackData = extensionHandlerOutput.extensionTrackData[0];\n      assert.strictEqual(firstTrackData.name, 'Group 1');\n      assert.strictEqual(firstTrackData.isTrackGroup, true);\n      assert.deepEqual(Object.keys(firstTrackData.entriesByTrack), ['Track 1', 'Track 2', 'Track 3']);\n      assert.deepEqual(Object.values(firstTrackData.entriesByTrack).map(entries => entries.length), [2, 1, 1]);\n\n      const secondTrackData = extensionHandlerOutput.extensionTrackData[1];\n      assert.strictEqual(secondTrackData.name, 'Group 2');\n      assert.strictEqual(secondTrackData.isTrackGroup, true);\n      assert.deepEqual(Object.keys(secondTrackData.entriesByTrack), ['Track 1']);\n      assert.deepEqual(Object.values(secondTrackData.entriesByTrack).map(entries => entries.length), [1]);\n\n      const thirdTrackData = extensionHandlerOutput.extensionTrackData[2];\n      assert.strictEqual(thirdTrackData.name, 'Ungrouped Track 1');\n      assert.deepEqual(Object.keys(thirdTrackData.entriesByTrack), ['Ungrouped Track 1']);\n      assert.deepEqual(Object.values(thirdTrackData.entriesByTrack).map(entries => entries.length), [1]);\n\n      const fourthTrackData = extensionHandlerOutput.extensionTrackData[3];\n      assert.strictEqual(fourthTrackData.name, 'Ungrouped Track 2');\n      assert.deepEqual(Object.keys(fourthTrackData.entriesByTrack), ['Ungrouped Track 2']);\n      assert.deepEqual(Object.values(fourthTrackData.entriesByTrack).map(entries => entries.length), [2]);\n    });\n    it('calculates self time sub track by sub track', async function() {\n      const extensionDevToolsObjects: ExtensionTestData[] = [\n        // Track group 1\n        {\n          detail: {\n            devtools: {\n              dataType: 'track-entry',\n              trackGroup: 'Group 1',\n              track: 'Track 1',\n            },\n          },\n          name: 'Measurement 1',\n          ts: 0,\n          dur: 100,\n        },\n        {\n          detail: {\n            devtools: {\n              dataType: 'track-entry',\n              trackGroup: 'Group 1',\n              track: 'Track 1',\n            },\n          },\n          name: 'Measurement 2',\n          ts: 0,\n          dur: 20,\n        },\n        {\n          detail: {\n            devtools: {\n              dataType: 'track-entry',\n              trackGroup: 'Group 1',\n              track: 'Track 1',\n            },\n          },\n          name: 'Measurement 3',\n          ts: 60,\n          dur: 40,\n        },\n        {\n          detail: {\n            devtools: {\n              dataType: 'track-entry',\n              trackGroup: 'Group 1',\n              track: 'Track 1',\n            },\n          },\n          name: 'Measurement 4',\n          ts: 70,\n          dur: 10,\n        },\n        {\n          detail: {\n            devtools: {\n              dataType: 'track-entry',\n              trackGroup: 'Group 1',\n              track: 'Track 2',\n            },\n          },\n          name: 'Measurement 5',\n          ts: 0,\n          dur: 200,\n        },\n        // Standalone track\n        {\n          detail: {\n            devtools: {\n              dataType: 'track-entry',\n              track: 'Ungrouped Track',\n            },\n          },\n          name: 'Measurement 6',\n          ts: 0,\n          dur: 100,\n        },\n        {\n          detail: {\n            devtools: {\n              dataType: 'track-entry',\n              track: 'Ungrouped Track',\n            },\n          },\n          name: 'Measurement 7',\n          ts: 50,\n          dur: 50,\n        },\n      ];\n\n      const extensionHandlerOutput = await createTraceExtensionDataFromTestInput(extensionDevToolsObjects);\n      assert.lengthOf(extensionHandlerOutput.extensionTrackData, 2);\n\n      const trackGroupData = extensionHandlerOutput.extensionTrackData[0];\n      const testDataTrack1 = trackGroupData.entriesByTrack['Track 1'].map(\n          entry => ({name: entry.name, selfTime: entry.selfTime as number}));\n      assert.deepEqual(testDataTrack1, [\n        {name: 'Measurement 1', selfTime: 40},\n        {name: 'Measurement 2', selfTime: 20},\n        {name: 'Measurement 3', selfTime: 30},\n        {name: 'Measurement 4', selfTime: 10},\n      ]);\n\n      const testDataTrack2 = trackGroupData.entriesByTrack['Track 2'].map(\n          entry => ({name: entry.name, selfTime: entry.selfTime as number}));\n      assert.deepEqual(testDataTrack2, [{name: 'Measurement 5', selfTime: 200}]);\n\n      const ungroupedTrackData = extensionHandlerOutput.extensionTrackData[1].entriesByTrack['Ungrouped Track'].map(\n          entry => ({name: entry.name, selfTime: entry.selfTime as number}));\n      assert.deepEqual(\n          ungroupedTrackData, [{name: 'Measurement 6', selfTime: 50}, {name: 'Measurement 7', selfTime: 50}]);\n    });\n  });\n});\n"]}