{"version":3,"file":"ExtensionTraceDataHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/ExtensionTraceDataHandler.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  type ConsoleAPIExtensionTestData,\n  makeTimingEventWithConsoleExtensionData,\n  makeTimingEventWithPerformanceExtensionData,\n  type PerformanceAPIExtensionTestData,\n} from '../../../testing/TraceHelpers.js';\nimport * as Trace from '../trace.js';\n\nexport async function createTraceExtensionDataFromPerformanceAPITestInput(\n    extensionData: PerformanceAPIExtensionTestData[]):\n    Promise<Trace.Handlers.ModelHandlers.ExtensionTraceData.ExtensionTraceData> {\n  const events = extensionData.flatMap(makeTimingEventWithPerformanceExtensionData).sort((e1, e2) => e1.ts - e2.ts);\n  return await createTraceExtensionDataFromEvents(events);\n}\n\nasync function createTraceExtensionDataFromConsoleAPITestInput(extensionData: ConsoleAPIExtensionTestData[]):\n    Promise<Trace.Handlers.ModelHandlers.ExtensionTraceData.ExtensionTraceData> {\n  const events = extensionData.flatMap(makeTimingEventWithConsoleExtensionData).sort((e1, e2) => e1.ts - e2.ts);\n  return await createTraceExtensionDataFromEvents(events);\n}\n\nasync function createTraceExtensionDataFromEvents(events: Trace.Types.Events.Event[]):\n    Promise<Trace.Handlers.ModelHandlers.ExtensionTraceData.ExtensionTraceData> {\n  Trace.Helpers.SyntheticEvents.SyntheticEventsManager.createAndActivate(events);\n\n  Trace.Handlers.ModelHandlers.UserTimings.reset();\n  for (const event of events) {\n    Trace.Handlers.ModelHandlers.UserTimings.handleEvent(event);\n  }\n  await Trace.Handlers.ModelHandlers.UserTimings.finalize();\n\n  Trace.Handlers.ModelHandlers.ExtensionTraceData.reset();\n  // ExtensionTraceData handler doesn't need to handle events since\n  // it only consumes the output of the user timings handler.\n  await Trace.Handlers.ModelHandlers.ExtensionTraceData.finalize();\n  return Trace.Handlers.ModelHandlers.ExtensionTraceData.data();\n}\n\ndescribe('ExtensionTraceDataHandler', function() {\n  describe('parsing extension data added via the performance.measure/mark API', function() {\n    let extensionHandlerOutput: Trace.Handlers.ModelHandlers.ExtensionTraceData.ExtensionTraceData;\n    beforeEach(async function() {\n      extensionHandlerOutput = await createTraceExtensionDataExample();\n    });\n    after(() => {\n      Trace.Handlers.ModelHandlers.ExtensionTraceData.reset();\n      Trace.Handlers.ModelHandlers.UserTimings.reset();\n    });\n\n    function createTraceExtensionDataExample():\n        Promise<Trace.Handlers.ModelHandlers.ExtensionTraceData.ExtensionTraceData> {\n      const extensionData = [\n        {\n          detail: {\n            devtools: {\n              color: 'error',\n              dataType: 'marker',\n              properties: [['Description', 'This marks the start of a task']],\n              tooltipText: 'A mark',\n            },\n          },\n          name: 'A custom mark',\n          ts: 100,\n        },\n        // Marker with invalid dataType.\n        {\n          detail: {devtools: {color: 'error', dataType: 'invalid-marker'}},\n          name: 'A custom mark',\n          ts: 100,\n        },\n        {\n          detail: {\n            devtools:\n                {dataType: 'track-entry', track: 'An Extension Track', properties: [['Description', 'Something']]},\n          },\n          name: 'An extension measurement',\n          ts: 100,\n          dur: 100,\n        },\n        // Track entry with no explicit dataType (should be accepted).\n        {\n          detail: {devtools: {track: 'An Extension Track', color: 'tertiary'}},\n          name: 'An extension measurement',\n          ts: 105,\n          dur: 50,\n        },\n        // Track entry with no explicit color (should be accepted)\n        {\n          detail: {\n            devtools: {\n              dataType: 'track-entry',\n              track: 'Another Extension Track',\n              properties: [['Description', 'Something'], ['Tip', 'A tip to improve this']],\n              tooltipText: 'A hint if needed',\n            },\n          },\n          name: 'An extension measurement',\n          ts: 100,\n          dur: 100,\n        },\n        // Track entry with invalid data type (should be ignored).\n        {\n          detail: {\n            devtools: {\n              dataType: 'invalid-type' as Trace.Types.Extensions.DevToolsObj['dataType'],\n              track: 'Another Extension Track',\n            },\n          },\n          name: 'An extension measurement',\n          ts: 105,\n          dur: 50,\n        },\n        // Track entry with no track value (should be ignored).\n        {\n          detail: {devtools: {dataType: 'track-entry'}},\n          name: 'An extension measurement',\n          ts: 105,\n          dur: 50,\n        },\n      ] as PerformanceAPIExtensionTestData[];\n      return createTraceExtensionDataFromPerformanceAPITestInput(extensionData);\n    }\n\n    describe('track data parsing from user timings that use the extension API', function() {\n      it('creates tracks', async () => {\n        assert.lengthOf(extensionHandlerOutput.extensionTrackData, 2);\n      });\n      it('parses track data correctly', async () => {\n        assert.lengthOf(extensionHandlerOutput.extensionTrackData[0].entriesByTrack['An Extension Track'], 2);\n        assert.strictEqual(extensionHandlerOutput.extensionTrackData[0].name, 'An Extension Track');\n\n        assert.lengthOf(extensionHandlerOutput.extensionTrackData[1].entriesByTrack['Another Extension Track'], 1);\n        assert.strictEqual(extensionHandlerOutput.extensionTrackData[1].name, 'Another Extension Track');\n      });\n\n      it('gets data from individual entries', async () => {\n        // The first track is the one labeled 'An Extension Track'.\n        {\n          const {track, properties} =\n              extensionHandlerOutput.extensionTrackData[0].entriesByTrack['An Extension Track'][0].devtoolsObj;\n          assert.strictEqual(JSON.stringify(properties), '[[\"Description\",\"Something\"]]');\n          assert.strictEqual(track, 'An Extension Track');\n        }\n\n        // Now look for 'Another Extension Track'.\n        {\n          const {tooltipText, track, properties} =\n              extensionHandlerOutput.extensionTrackData[1].entriesByTrack['Another Extension Track'][0].devtoolsObj;\n          assert.strictEqual(tooltipText, 'A hint if needed');\n          assert.strictEqual(track, 'Another Extension Track');\n          assert.strictEqual(\n              JSON.stringify(properties), '[[\"Description\",\"Something\"],[\"Tip\",\"A tip to improve this\"]]');\n        }\n      });\n\n      it('discards track data without a corresponding track field', async () => {\n        // The test example contains a track entry without a track field.\n        // Ensure it is discarded.\n        const allTrackEntries =\n            extensionHandlerOutput.extensionTrackData.map(track => Object.values(track.entriesByTrack)).flat(2);\n        const validTrackEntries = allTrackEntries.filter(entry => entry.devtoolsObj.track);\n        assert.lengthOf(validTrackEntries, allTrackEntries.length);\n      });\n\n      it('discards track data without a valid dataType field', async () => {\n        // The test example contains extension data with an invalid dataType\n        // value.\n        // Ensure it is discarded.\n        const allTrackEntries =\n            extensionHandlerOutput.extensionTrackData.map(track => Object.values(track.entriesByTrack)).flat(2);\n        const validTrackEntries = allTrackEntries.filter(\n            entry => entry.devtoolsObj.dataType === 'track-entry' || entry.devtoolsObj.dataType === undefined);\n        assert.lengthOf(validTrackEntries, allTrackEntries.length);\n      });\n    });\n\n    describe('Timeline markers from user timings that use the extension API', function() {\n      before(async function() {\n        extensionHandlerOutput = await createTraceExtensionDataExample();\n      });\n      it('parses marker data correctly', async () => {\n        assert.lengthOf(extensionHandlerOutput.extensionMarkers, 1);\n        assert.strictEqual(extensionHandlerOutput.extensionMarkers[0].name, 'A custom mark');\n        const {tooltipText, properties} = extensionHandlerOutput.extensionMarkers[0].devtoolsObj;\n        assert.strictEqual(tooltipText, 'A mark');\n        assert.strictEqual(JSON.stringify(properties), '[[\"Description\",\"This marks the start of a task\"]]');\n      });\n\n      it('discards markers whose details are not valid stringified JSON', async () => {\n        const performanceMarkEvent: Trace.Types.Events.PerformanceMark = {\n          args: {\n            data: {\n              detail: 'this-is-not-json',\n            },\n          },\n          name: 'test-perf-mark',\n          cat: 'blink.user_timing',\n          ph: Trace.Types.Events.Phase.INSTANT,\n          pid: Trace.Types.Events.ProcessID(1),\n          tid: Trace.Types.Events.ThreadID(1),\n          ts: Trace.Types.Timing.Micro(100),\n        };\n\n        assert.isNull(\n            Trace.Handlers.ModelHandlers.ExtensionTraceData.extensionDataInPerformanceTiming(performanceMarkEvent)\n                .devtoolsObj,\n        );\n      });\n\n      it('discards markers without a valid dataType field', async () => {\n        // The test example contains extension data with an invalid dataType\n        // value.\n        // Ensure it is discarded.\n        const allMarkers = extensionHandlerOutput.extensionMarkers;\n        const validTrackEntries = allMarkers.filter(entry => entry.devtoolsObj.dataType === 'marker');\n        assert.lengthOf(validTrackEntries, allMarkers.length);\n      });\n    });\n\n    describe('Data filtering', () => {\n      it('extracts the extension data from a timing\\'s detail when present', async function() {\n        const extensionData: PerformanceAPIExtensionTestData[] = [\n          {\n            detail: {\n              devtools: {\n                color: 'error',\n                dataType: 'marker',\n                properties: [['Description', 'This marks the start of a task']],\n                tooltipText: 'A mark',\n              },\n            },\n            name: 'A custom mark',\n            ts: 100,\n          },\n        ];\n        const extensionHandlerOutput = await createTraceExtensionDataFromPerformanceAPITestInput(extensionData);\n        assert.lengthOf(extensionHandlerOutput.extensionMarkers, 1);\n      });\n      it('ignores a timing if its detail does not contain a devtools object', async function() {\n        const extensionData = [\n          {\n            detail: {},\n            name: 'A custom mark',\n            ts: 100,\n          },\n        ] as PerformanceAPIExtensionTestData[];\n        const extensionHandlerOutput = await createTraceExtensionDataFromPerformanceAPITestInput(extensionData);\n        assert.lengthOf(extensionHandlerOutput.extensionMarkers, 0);\n      });\n      it('ignores a timing if its detail contains a devtools object w/o valid extension data', async function() {\n        const extensionData = [\n          {\n            // Invalid data type\n            detail: {\n              devtools: {\n                color: 'error',\n                dataType: 'invalid' as Trace.Types.Extensions.DevToolsObj['dataType'],\n              },\n            },\n            name: 'A custom mark',\n            ts: 100,\n          },\n          {\n            detail: {\n              devtools: {\n                // Defaulted to track-entry but no trackName provided\n                color: 'error',\n              },\n            },\n            name: 'A measurement',\n            ts: 100,\n          },\n          {\n            detail: {\n              devtools: {\n                // track-entry w/o trackName provided\n                dataType: 'track-entry',\n              },\n            },\n            name: 'A measurement',\n            ts: 100,\n          },\n        ] as PerformanceAPIExtensionTestData[];\n        const extensionHandlerOutput = await createTraceExtensionDataFromPerformanceAPITestInput(extensionData);\n        assert.lengthOf(extensionHandlerOutput.extensionMarkers, 0);\n      });\n      it('ignores a timing if its detail contains a devtools with a track group but no track name', async function() {\n        const extensionData = [\n          {\n            // Invalid data type\n            detail: {\n              devtools: {\n                trackGroup: 'Track group',\n              },\n            },\n            name: 'A measurement',\n            ts: 100,\n            dur: 100,\n          },\n        ] as PerformanceAPIExtensionTestData[];\n        const extensionHandlerOutput = await createTraceExtensionDataFromPerformanceAPITestInput(extensionData);\n        assert.lengthOf(extensionHandlerOutput.extensionMarkers, 0);\n      });\n    });\n\n    describe('Track groups', () => {\n      it('builds extension track data for grouped tracks correctly', async function() {\n        const extensionDevToolsObjects: Array<PerformanceAPIExtensionTestData['detail']['devtools']> = [\n          // Track group 1\n          {\n            dataType: 'track-entry',\n            trackGroup: 'Group 1',\n            track: 'Track 1',\n          },\n          {\n            dataType: 'track-entry',\n            trackGroup: 'Group 1',\n            track: 'Track 1',\n          },\n          {\n            dataType: 'track-entry',\n            trackGroup: 'Group 1',\n            track: 'Track 2',\n          },\n          {\n            dataType: 'track-entry',\n            trackGroup: 'Group 1',\n            track: 'Track 3',\n          },\n          // Track group 2\n          {\n            dataType: 'track-entry',\n            trackGroup: 'Group 2',\n            track: 'Track 1',\n          },\n          // Un grouped tracks\n          {\n            dataType: 'track-entry',\n            track: 'Ungrouped Track 1',\n          },\n          {\n            dataType: 'track-entry',\n            track: 'Ungrouped Track 2',\n          },\n          {\n            dataType: 'track-entry',\n            track: 'Ungrouped Track 2',\n          },\n        ];\n\n        const extensionHandlerOutput = await createTraceExtensionDataFromPerformanceAPITestInput(\n            extensionDevToolsObjects.map((devtools, i) => ({\n                                           detail: {devtools},\n                                           name: 'A measurement',\n                                           // Use different timestamps\n                                           // to prevent event switching\n                                           // due to equal start and end.\n                                           ts: 100 + i,\n                                           dur: 100,\n                                         })));\n        assert.lengthOf(extensionHandlerOutput.extensionTrackData, 4);\n\n        const firstTrackData = extensionHandlerOutput.extensionTrackData[0];\n        assert.strictEqual(firstTrackData.name, 'Group 1');\n        assert.isTrue(firstTrackData.isTrackGroup);\n        assert.deepEqual(Object.keys(firstTrackData.entriesByTrack), ['Track 1', 'Track 2', 'Track 3']);\n        assert.deepEqual(Object.values(firstTrackData.entriesByTrack).map(entries => entries.length), [2, 1, 1]);\n\n        const secondTrackData = extensionHandlerOutput.extensionTrackData[1];\n        assert.strictEqual(secondTrackData.name, 'Group 2');\n        assert.isTrue(secondTrackData.isTrackGroup);\n        assert.deepEqual(Object.keys(secondTrackData.entriesByTrack), ['Track 1']);\n        assert.deepEqual(Object.values(secondTrackData.entriesByTrack).map(entries => entries.length), [1]);\n\n        const thirdTrackData = extensionHandlerOutput.extensionTrackData[2];\n        assert.strictEqual(thirdTrackData.name, 'Ungrouped Track 1');\n        assert.deepEqual(Object.keys(thirdTrackData.entriesByTrack), ['Ungrouped Track 1']);\n        assert.deepEqual(Object.values(thirdTrackData.entriesByTrack).map(entries => entries.length), [1]);\n\n        const fourthTrackData = extensionHandlerOutput.extensionTrackData[3];\n        assert.strictEqual(fourthTrackData.name, 'Ungrouped Track 2');\n        assert.deepEqual(Object.keys(fourthTrackData.entriesByTrack), ['Ungrouped Track 2']);\n        assert.deepEqual(Object.values(fourthTrackData.entriesByTrack).map(entries => entries.length), [2]);\n      });\n      it('calculates self time sub track by sub track for events added with the performance API', async function() {\n        const extensionDevToolsObjects: PerformanceAPIExtensionTestData[] = [\n          // Track group 1\n          {\n            detail: {\n              devtools: {\n                dataType: 'track-entry',\n                trackGroup: 'Group 1',\n                track: 'Track 1',\n              },\n            },\n            name: 'Measurement 1',\n            ts: 0,\n            dur: 100,\n          },\n          {\n            detail: {\n              devtools: {\n                dataType: 'track-entry',\n                trackGroup: 'Group 1',\n                track: 'Track 1',\n              },\n            },\n            name: 'Measurement 2',\n            ts: 0,\n            dur: 20,\n          },\n          {\n            detail: {\n              devtools: {\n                dataType: 'track-entry',\n                trackGroup: 'Group 1',\n                track: 'Track 1',\n              },\n            },\n            name: 'Measurement 3',\n            ts: 60,\n            dur: 40,\n          },\n          {\n            detail: {\n              devtools: {\n                dataType: 'track-entry',\n                trackGroup: 'Group 1',\n                track: 'Track 1',\n              },\n            },\n            name: 'Measurement 4',\n            ts: 70,\n            dur: 10,\n          },\n          {\n            detail: {\n              devtools: {\n                dataType: 'track-entry',\n                trackGroup: 'Group 1',\n                track: 'Track 2',\n              },\n            },\n            name: 'Measurement 5',\n            ts: 0,\n            dur: 200,\n          },\n          // Standalone track\n          {\n            detail: {\n              devtools: {\n                dataType: 'track-entry',\n                track: 'Ungrouped Track',\n              },\n            },\n            name: 'Measurement 6',\n            ts: 0,\n            dur: 100,\n          },\n          {\n            detail: {\n              devtools: {\n                dataType: 'track-entry',\n                track: 'Ungrouped Track',\n              },\n            },\n            name: 'Measurement 7',\n            ts: 50,\n            dur: 50,\n          },\n        ];\n\n        const extensionHandlerOutput =\n            await createTraceExtensionDataFromPerformanceAPITestInput(extensionDevToolsObjects);\n        assert.lengthOf(extensionHandlerOutput.extensionTrackData, 2);\n\n        const trackGroupData = extensionHandlerOutput.extensionTrackData[0];\n        const testDataTrack1 = trackGroupData.entriesByTrack['Track 1'].map(entry => {\n          const selfTime = extensionHandlerOutput.entryToNode.get(entry)?.selfTime as number;\n          return {name: entry.name, selfTime};\n        });\n        assert.deepEqual(testDataTrack1, [\n          {name: 'Measurement 1', selfTime: 40},\n          {name: 'Measurement 2', selfTime: 20},\n          {name: 'Measurement 3', selfTime: 30},\n          {name: 'Measurement 4', selfTime: 10},\n        ]);\n\n        const testDataTrack2 = trackGroupData.entriesByTrack['Track 2'].map(entry => {\n          const selfTime = extensionHandlerOutput.entryToNode.get(entry)?.selfTime as number;\n          return {name: entry.name, selfTime};\n        });\n        assert.deepEqual(testDataTrack2, [{name: 'Measurement 5', selfTime: 200}]);\n\n        const ungroupedTrackData =\n            extensionHandlerOutput.extensionTrackData[1].entriesByTrack['Ungrouped Track'].map(entry => {\n              const selfTime = extensionHandlerOutput.entryToNode.get(entry)?.selfTime as number;\n              return {name: entry.name, selfTime};\n            });\n        assert.deepEqual(\n            ungroupedTrackData, [{name: 'Measurement 6', selfTime: 50}, {name: 'Measurement 7', selfTime: 50}]);\n      });\n\n      it('does not affect track order on entries with identical start and duration across tracks', async function() {\n        const extensionDevToolsObjects: PerformanceAPIExtensionTestData[] = [\n          // Four measurements, with identical start and end times, to test that track\n          // group order is not affected by swapping of elements within tracks.\n          {\n            detail: {\n              devtools: {\n                track: 'Track 1',\n              },\n            },\n            name: 'Measurement 1 for track 1',\n            ts: 0,\n            dur: 100,\n          },\n          {\n            detail: {\n              devtools: {\n                track: 'Track 1',\n              },\n            },\n            name: 'Measurement 2 for track 1',\n            ts: 0,\n            dur: 100,\n          },\n          {\n            detail: {\n              devtools: {\n                track: 'Track 2',\n              },\n            },\n            name: 'Measurement 1 for track 2',\n            ts: 0,\n            dur: 100,\n          },\n          {\n            detail: {\n              devtools: {\n                track: 'Track 2',\n              },\n            },\n            name: 'Measurement 2 for track 2',\n            ts: 0,\n            dur: 100,\n          },\n        ];\n\n        const extensionHandlerOutput =\n            await createTraceExtensionDataFromPerformanceAPITestInput(extensionDevToolsObjects);\n        assert.lengthOf(extensionHandlerOutput.extensionTrackData, 2);\n\n        // The tracks are added in the order: 'Track 1' first and then 'Track 2', and that order\n        // should not change. However, the order of entries with duplicate `start` and `end`\n        // times -- within these tracks -- should change. The reason for that is documented in\n        // the `userTimingComparator` sorting function.\n        let trackGroupData = extensionHandlerOutput.extensionTrackData[0];\n        const testDataTrack1 = trackGroupData.entriesByTrack['Track 1'].map(entry => {\n          const selfTime = extensionHandlerOutput.entryToNode.get(entry)?.selfTime as number;\n          return {name: entry.name, selfTime};\n        });\n        assert.deepEqual(testDataTrack1, [\n          {name: 'Measurement 2 for track 1', selfTime: 0},\n          {name: 'Measurement 1 for track 1', selfTime: 100},\n        ]);\n\n        trackGroupData = extensionHandlerOutput.extensionTrackData[1];\n        const testDataTrack2 = trackGroupData.entriesByTrack['Track 2'].map(entry => {\n          const selfTime = extensionHandlerOutput.entryToNode.get(entry)?.selfTime as number;\n          return {name: entry.name, selfTime};\n        });\n        assert.deepEqual(testDataTrack2, [\n          {name: 'Measurement 2 for track 2', selfTime: 0},\n          {name: 'Measurement 1 for track 2', selfTime: 100},\n        ]);\n      });\n    });\n  });\n\n  describe('parsing extension data added via the console.timeStamp API', function() {\n    let extensionHandlerOutput: Trace.Handlers.ModelHandlers.ExtensionTraceData.ExtensionTraceData;\n    beforeEach(async function() {\n      extensionHandlerOutput = await createTraceExtensionDataExample();\n    });\n    after(() => {\n      Trace.Handlers.ModelHandlers.ExtensionTraceData.reset();\n      Trace.Handlers.ModelHandlers.UserTimings.reset();\n    });\n    function createTraceExtensionDataExample():\n        Promise<Trace.Handlers.ModelHandlers.ExtensionTraceData.ExtensionTraceData> {\n      const extensionData: ConsoleAPIExtensionTestData[] = [\n        // Custom track 1\n        {\n          name: 'Mark 1',\n          ts: 100,\n        },\n        {\n          name: 'Measure 1',\n          start: 'Mark 1',\n          track: 'Custom track 1',\n          ts: 200,\n        },\n        // Custom track 2\n        {\n          name: 'Mark 2',\n          ts: 100,\n        },\n        {\n          name: 'Mark 3',\n          ts: 200,\n        },\n        {\n          track: 'Custom track 2',\n          name: 'Measure 2',\n          start: 'Mark 2',\n          end: 'Mark 3',\n          ts: 300,\n        },\n        // Custom track 3\n        {\n          track: 'Custom track 3',\n          name: 'Measure 3',\n          start: 'Mark 1',\n          end: 'Mark 4',\n          ts: 300,\n        },\n        {\n          track: 'Custom track 3',\n          name: 'Measure 4',\n          start: 'Mark 2',\n          end: 'Mark 3',\n          ts: 300,\n        },\n        // No track\n        {\n          name: 'Measure 5',\n          start: 'Mark 1',\n          end: 'Mark 4',\n          ts: 300,\n        },\n        // numeric start and end\n        {\n          track: 'Custom track 1',\n          name: 'Measure 6',\n          start: 300,\n          end: 400,\n          ts: 300,\n        },\n        {\n          track: 'Custom track 1',\n          name: 'Measure 7',\n          start: 350,\n          ts: 400,\n        }\n      ];\n      return createTraceExtensionDataFromConsoleAPITestInput(extensionData);\n    }\n\n    describe('track data parsing', function() {\n      it('creates tracks', async () => {\n        assert.lengthOf(extensionHandlerOutput.extensionTrackData, 3);\n      });\n      it('parses track data correctly', async () => {\n        assert.lengthOf(extensionHandlerOutput.extensionTrackData, 3);\n        const expectedData: Record<string, Array<{name: string, ts: number, dur: number}>> = {\n          'Custom track 3': [{name: 'Measure 3', ts: 100, dur: 200}, {name: 'Measure 4', ts: 100, dur: 100}],\n          'Custom track 1': [\n            {name: 'Measure 1', ts: 100, dur: 100}, {name: 'Measure 6', ts: 300, dur: 100},\n            {name: 'Measure 7', ts: 350, dur: 50}\n          ],\n          'Custom track 2': [{name: 'Measure 2', ts: 100, dur: 100}]\n        };\n        for (let i = 0; i < extensionHandlerOutput.extensionTrackData.length; i++) {\n          const track = extensionHandlerOutput.extensionTrackData[i];\n          assert.strictEqual(track.name, Object.keys(expectedData)[i]);\n          const actualTrackData = track.entriesByTrack[track.name];\n          const expectedTrackData = expectedData[track.name];\n          for (let j = 0; j < actualTrackData.length; j++) {\n            const {name, ts, dur} = actualTrackData[j];\n            assert.strictEqual(name, expectedTrackData[j].name);\n            assert.strictEqual(ts, expectedTrackData[j].ts);\n            assert.strictEqual(dur, expectedTrackData[j].dur);\n          }\n        }\n      });\n      it('parses synthetic console timings for the timings track', async () => {\n        assert.lengthOf(extensionHandlerOutput.syntheticConsoleEntriesForTimingsTrack, 1);\n        assert.strictEqual(extensionHandlerOutput.syntheticConsoleEntriesForTimingsTrack[0].name, 'Measure 5');\n      });\n      it('discards track data without a corresponding track field', async () => {\n        // The test example contains a track entry without a track field.\n        // Ensure it is discarded.\n        const allTrackEntries =\n            extensionHandlerOutput.extensionTrackData.map(track => Object.values(track.entriesByTrack)).flat(2);\n        const validTrackEntries = allTrackEntries.filter(entry => entry.devtoolsObj.track);\n        assert.lengthOf(validTrackEntries, allTrackEntries.length);\n      });\n    });\n\n    describe('Track groups', () => {\n      it('builds extension track data for grouped tracks correctly', async function() {\n        const mockData = [\n          // Track group 1\n          {\n            trackGroup: 'Group 1',\n            track: 'Track 1',\n          },\n          {\n            trackGroup: 'Group 1',\n            track: 'Track 1',\n          },\n          {\n            trackGroup: 'Group 1',\n            track: 'Track 2',\n          },\n          {\n            trackGroup: 'Group 1',\n            track: 'Track 3',\n          },\n          // Track group 2\n          {\n            trackGroup: 'Group 2',\n            track: 'Track 1',\n          },\n          // Un grouped tracks\n          {\n            track: 'Ungrouped Track 1',\n          },\n          {\n            track: 'Ungrouped Track 2',\n          },\n          {\n            track: 'Ungrouped Track 2',\n          },\n        ];\n\n        const extensionHandlerOutput =\n            await createTraceExtensionDataFromConsoleAPITestInput(mockData.map(({track, trackGroup}, i) => ({\n                                                                                 track,\n                                                                                 trackGroup,\n                                                                                 name: 'A measurement',\n                                                                                 // Use different timestamps\n                                                                                 // to prevent event switching\n                                                                                 // due to equal start and end.\n                                                                                 ts: 100 + i,\n                                                                                 dur: 100,\n                                                                               })));\n        assert.lengthOf(extensionHandlerOutput.extensionTrackData, 4);\n\n        const firstTrackData = extensionHandlerOutput.extensionTrackData[0];\n        assert.strictEqual(firstTrackData.name, 'Group 1');\n        assert.isTrue(firstTrackData.isTrackGroup);\n        assert.deepEqual(Object.keys(firstTrackData.entriesByTrack), ['Track 1', 'Track 2', 'Track 3']);\n        assert.deepEqual(Object.values(firstTrackData.entriesByTrack).map(entries => entries.length), [2, 1, 1]);\n\n        const secondTrackData = extensionHandlerOutput.extensionTrackData[1];\n        assert.strictEqual(secondTrackData.name, 'Group 2');\n        assert.isTrue(secondTrackData.isTrackGroup);\n        assert.deepEqual(Object.keys(secondTrackData.entriesByTrack), ['Track 1']);\n        assert.deepEqual(Object.values(secondTrackData.entriesByTrack).map(entries => entries.length), [1]);\n\n        const thirdTrackData = extensionHandlerOutput.extensionTrackData[2];\n        assert.strictEqual(thirdTrackData.name, 'Ungrouped Track 1');\n        assert.deepEqual(Object.keys(thirdTrackData.entriesByTrack), ['Ungrouped Track 1']);\n        assert.deepEqual(Object.values(thirdTrackData.entriesByTrack).map(entries => entries.length), [1]);\n\n        const fourthTrackData = extensionHandlerOutput.extensionTrackData[3];\n        assert.strictEqual(fourthTrackData.name, 'Ungrouped Track 2');\n        assert.deepEqual(Object.keys(fourthTrackData.entriesByTrack), ['Ungrouped Track 2']);\n        assert.deepEqual(Object.values(fourthTrackData.entriesByTrack).map(entries => entries.length), [2]);\n      });\n      it('calculates self time sub track by sub track for events added with the console API', async function() {\n        const extensionDevToolsObjects: ConsoleAPIExtensionTestData[] = [\n          // Track group 1\n          {\n            name: 'A',\n            ts: 0,\n          },\n          {\n            name: 'B',\n            ts: 100,\n          },\n          {\n            trackGroup: 'Group 1',\n            track: 'Track 1',\n            name: 'Measurement 1',\n            ts: 100,\n            start: 'A',\n            end: 'B',\n          },\n          {\n            name: 'C',\n            ts: 0,\n          },\n          {\n            name: 'D',\n            ts: 20,\n          },\n          {\n            trackGroup: 'Group 1',\n            track: 'Track 1',\n            name: 'Measurement 2',\n            ts: 20,\n            start: 'C',\n            end: 'D',\n          },\n          {\n            name: 'E',\n            ts: 60,\n          },\n          {\n            trackGroup: 'Group 1',\n            track: 'Track 1',\n            start: 'E',\n            name: 'Measurement 3',\n            ts: 100,\n          },\n          {\n            name: 'F',\n            ts: 70,\n          },\n          {\n            trackGroup: 'Group 1',\n            track: 'Track 1',\n            name: 'Measurement 4',\n            start: 'F',\n            ts: 80,\n          },\n          {\n            trackGroup: 'Group 1',\n            track: 'Track 1',\n            name: 'Measurement 5',\n            start: 75,\n            ts: 80,\n          },\n          {\n            name: 'G',\n            ts: 0,\n          },\n          {\n            name: 'H',\n            ts: 200,\n          },\n          {\n            trackGroup: 'Group 1',\n            track: 'Track 2',\n            name: 'Measurement 5',\n            start: 'G',\n            end: 'H',\n            ts: 200,\n          },\n          // Standalone track\n          {\n            name: 'I',\n            ts: 0,\n          },\n          {\n            track: 'Ungrouped Track',\n            name: 'Measurement 6',\n            ts: 100,\n            start: 'I',\n          },\n          {\n            name: 'J',\n            ts: 50,\n          },\n          {\n            name: 'K',\n            ts: 100,\n          },\n          {\n            track: 'Ungrouped Track',\n            name: 'Measurement 7',\n            ts: 150,\n            start: 'J',\n            end: 'K',\n          },\n        ];\n\n        const extensionHandlerOutput = await createTraceExtensionDataFromConsoleAPITestInput(extensionDevToolsObjects);\n        assert.lengthOf(extensionHandlerOutput.extensionTrackData, 2);\n\n        const trackGroupData = extensionHandlerOutput.extensionTrackData[0];\n        const testDataTrack1 = trackGroupData.entriesByTrack['Track 1'].map(entry => {\n          const selfTime = extensionHandlerOutput.entryToNode.get(entry)?.selfTime as number;\n          return {name: entry.name, selfTime};\n        });\n        assert.deepEqual(testDataTrack1, [\n          {name: 'Measurement 1', selfTime: 40},\n          {name: 'Measurement 2', selfTime: 20},\n          {name: 'Measurement 3', selfTime: 30},\n          {name: 'Measurement 4', selfTime: 5},\n          {name: 'Measurement 5', selfTime: 5},\n        ]);\n\n        const testDataTrack2 = trackGroupData.entriesByTrack['Track 2'].map(entry => {\n          const selfTime = extensionHandlerOutput.entryToNode.get(entry)?.selfTime as number;\n          return {name: entry.name, selfTime};\n        });\n        assert.deepEqual(testDataTrack2, [{name: 'Measurement 5', selfTime: 200}]);\n\n        const ungroupedTrackData =\n            extensionHandlerOutput.extensionTrackData[1].entriesByTrack['Ungrouped Track'].map(entry => {\n              const selfTime = extensionHandlerOutput.entryToNode.get(entry)?.selfTime as number;\n              return {name: entry.name, selfTime};\n            });\n        assert.deepEqual(\n            ungroupedTrackData, [{name: 'Measurement 6', selfTime: 50}, {name: 'Measurement 7', selfTime: 50}]);\n      });\n    });\n\n    describe('Identical start and end time event added with the Console API', () => {\n      it('shows tracks and events in the correct (reversed) order', async function() {\n        const extensionDevToolsObjects: ConsoleAPIExtensionTestData[] = [\n          // Two measurements for a Custom track, that should get flipped in order.\n          {track: 'Custom track B', name: 'Custom track measurement 1B', start: 10, end: 100, ts: 0},\n          {track: 'Custom track B', name: 'Custom track measurement 2B', start: 10, end: 100, ts: 0},\n          // These measurements have a start time the precedes the two above, so Custom Track A\n          // should appear first in the graph.\n          {track: 'Custom track A', name: 'Custom track measurement 1A', start: 0, end: 100, ts: 0},\n          {track: 'Custom track A', name: 'Custom track measurement 2A', start: 0, end: 100, ts: 0},\n        ];\n\n        const extensionHandlerOutput = await createTraceExtensionDataFromConsoleAPITestInput(extensionDevToolsObjects);\n        assert.lengthOf(extensionHandlerOutput.extensionTrackData, 2);\n\n        const trackGroupDataA = extensionHandlerOutput.extensionTrackData[0];\n        const testDataTrackA = trackGroupDataA.entriesByTrack['Custom track A'].map(entry => {\n          const selfTime = extensionHandlerOutput.entryToNode.get(entry)?.selfTime as number;\n          return {name: entry.name, selfTime};\n        });\n        assert.deepEqual(testDataTrackA, [\n          {name: 'Custom track measurement 2A', selfTime: 0},\n          {name: 'Custom track measurement 1A', selfTime: 100},\n        ]);\n\n        const trackGroupDataB = extensionHandlerOutput.extensionTrackData[1];\n        const testDataTrackB = trackGroupDataB.entriesByTrack['Custom track B'].map(entry => {\n          const selfTime = extensionHandlerOutput.entryToNode.get(entry)?.selfTime as number;\n          return {name: entry.name, selfTime};\n        });\n        assert.deepEqual(testDataTrackB, [\n          {name: 'Custom track measurement 2B', selfTime: 0},\n          {name: 'Custom track measurement 1B', selfTime: 90},\n        ]);\n      });\n\n      it('shows events in custom tracks with numerical start and end in reversed order', async function() {\n        const extensionDevToolsObjects: ConsoleAPIExtensionTestData[] = [\n          // Two measurements for a Custom track, that should get flipped in order.\n          {track: 'Custom track', name: 'Measurement 2', start: 0, end: 100, ts: 0},\n          {track: 'Custom track', name: 'Measurement 1', start: 0, end: 100, ts: 0},\n        ];\n\n        const extensionHandlerOutput = await createTraceExtensionDataFromConsoleAPITestInput(extensionDevToolsObjects);\n        assert.lengthOf(extensionHandlerOutput.extensionTrackData, 1);\n\n        const trackGroupData = extensionHandlerOutput.extensionTrackData[0];\n        const testDataTrack = trackGroupData.entriesByTrack['Custom track'].map(entry => {\n          const selfTime = extensionHandlerOutput.entryToNode.get(entry)?.selfTime as number;\n          return {name: entry.name, selfTime};\n        });\n        assert.deepEqual(testDataTrack, [\n          {name: 'Measurement 1', selfTime: 0},\n          {name: 'Measurement 2', selfTime: 100},\n        ]);\n      });\n\n      it('reverses order for timings track', async function() {\n        const extensionDevToolsObjects: ConsoleAPIExtensionTestData[] = [\n          // Two measurements for a Timings track, should get flipped in order.\n          {name: 'Measurement 2', start: 0, end: 100, ts: 0},\n          {name: 'Measurement 1', start: 0, end: 100, ts: 0},\n        ];\n\n        const extensionHandlerOutput = await createTraceExtensionDataFromConsoleAPITestInput(extensionDevToolsObjects);\n        assert.lengthOf(extensionHandlerOutput.syntheticConsoleEntriesForTimingsTrack, 2);\n        assert.strictEqual(extensionHandlerOutput.syntheticConsoleEntriesForTimingsTrack[0].name, 'Measurement 1');\n        assert.strictEqual(extensionHandlerOutput.syntheticConsoleEntriesForTimingsTrack[1].name, 'Measurement 2');\n      });\n    });\n  });\n});\n"]}