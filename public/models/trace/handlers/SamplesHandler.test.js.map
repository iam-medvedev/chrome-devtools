{"version":3,"file":"SamplesHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/SamplesHandler.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as CPUProfile from '../../../models/cpu_profile/cpu_profile.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {getAllNodes, getMainThread} from '../../../testing/TraceHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../trace.js';\n\nasync function handleEventsFromTraceFile(context: Mocha.Context|Mocha.Suite|null, name: string):\n    Promise<Trace.Handlers.ModelHandlers.Samples.SamplesHandlerData> {\n  const traceEvents = await TraceLoader.rawEvents(context, name);\n  Trace.Handlers.ModelHandlers.Meta.reset();\n  Trace.Handlers.ModelHandlers.Samples.reset();\n\n  for (const event of traceEvents) {\n    Trace.Handlers.ModelHandlers.Meta.handleEvent(event);\n    Trace.Handlers.ModelHandlers.Samples.handleEvent(event);\n  }\n\n  await Trace.Handlers.ModelHandlers.Meta.finalize();\n  await Trace.Handlers.ModelHandlers.Samples.finalize();\n\n  return Trace.Handlers.ModelHandlers.Samples.data();\n}\n\nasync function handleEventsFromCpuProfile(context: Mocha.Context|Mocha.Suite|null, name: string):\n    Promise<Trace.Handlers.ModelHandlers.Samples.SamplesHandlerData> {\n  const profile = await TraceLoader.rawCPUProfile(context, name);\n\n  const contents = Trace.Helpers.SamplesIntegrator.SamplesIntegrator.createFakeTraceFromCpuProfile(\n      profile, Trace.Types.Events.ThreadID(1));\n\n  Trace.Handlers.ModelHandlers.Samples.reset();\n  for (const event of contents.traceEvents) {\n    Trace.Handlers.ModelHandlers.Meta.handleEvent(event);\n    Trace.Handlers.ModelHandlers.Samples.handleEvent(event);\n  }\n\n  await Trace.Handlers.ModelHandlers.Meta.finalize();\n  await Trace.Handlers.ModelHandlers.Samples.finalize({isCPUProfile: true});\n\n  return Trace.Handlers.ModelHandlers.Samples.data();\n}\n\ndescribeWithEnvironment('SamplesHandler', function() {\n  it('finds all the profiles in a real world recording', async () => {\n    const data = await handleEventsFromTraceFile(this, 'multiple-navigations-with-iframes.json.gz');\n    // The same thread id is shared across profiles in the profiled\n    // processes.\n    const threadId = Trace.Types.Events.ThreadID(1);\n    const firstProcessId = Trace.Types.Events.ProcessID(2236123);\n    const secondProcessId = Trace.Types.Events.ProcessID(2154214);\n    const thirdProcessId = Trace.Types.Events.ProcessID(2236084);\n\n    assert.strictEqual(data.profilesInProcess.size, 3);\n\n    const profilesFirstProcess = data.profilesInProcess.get(firstProcessId);\n    assert.strictEqual(profilesFirstProcess?.size, 1);\n    assert.exists(profilesFirstProcess?.get(threadId));\n\n    const profilesSecondProcess = data.profilesInProcess.get(secondProcessId);\n    assert.strictEqual(profilesSecondProcess?.size, 1);\n    assert.exists(profilesSecondProcess?.get(threadId));\n\n    const profilesThirdProcess = data.profilesInProcess.get(thirdProcessId);\n    assert.strictEqual(profilesThirdProcess?.size, 1);\n    assert.exists(profilesThirdProcess?.get(threadId));\n  });\n  describe('profile calls building', () => {\n    const pid = Trace.Types.Events.ProcessID(0);\n    const id = Trace.Types.Events.ProfileID('0');\n    const tid = Trace.Types.Events.ThreadID(1);\n\n    function makeProfileChunkEvent(\n        nodes: Array<{\n          id: number,\n          children: number[],\n          codeType?: string,\n          url?: string,\n          functionName?: string,\n          scriptId?: number,\n        }>,\n        samples: number[],\n        timeDeltas: number[],\n        ts: number,\n        ): Trace.Types.Events.ProfileChunk {\n      return {\n        cat: '',\n        name: 'ProfileChunk',\n        ph: Trace.Types.Events.Phase.SAMPLE,\n        pid,\n        tid: Trace.Types.Events.ThreadID(0),\n        ts: Trace.Types.Timing.Micro(ts),\n        id,\n        args: {\n          data: {\n            cpuProfile: {\n              samples: samples.map(Trace.Types.Events.CallFrameID),\n              nodes: nodes.map(\n                  node => ({\n                    ...node,\n                    callFrame: {functionName: '', scriptId: 0, columnNumber: 0, lineNumber: 0, url: ''},\n                    id: Trace.Types.Events.CallFrameID(node.id),\n                  }),\n                  ),\n            },\n            timeDeltas: timeDeltas.map(Trace.Types.Timing.Micro),\n          },\n        },\n      };\n    }\n    it('can build profile calls from a CPU profile coming from tracing', async () => {\n      const A = 0;\n      const B = 1;\n      const C = 2;\n      const D = 3;\n      const E = 4;\n      const root = 9;\n      const mockProfileEvent: Trace.Types.Events.Profile = {\n        name: 'Profile',\n        id,\n        args: {data: {startTime: Trace.Types.Timing.Micro(0)}},\n        cat: '',\n        pid,\n        tid,\n        ts: Trace.Types.Timing.Micro(0),\n        ph: Trace.Types.Events.Phase.SAMPLE,\n      };\n      /**\n       * +------------> (sample at time)\n       * |A|A|A|A|A|A|A|A|A|A|A|A|A|A|A|A|A| |E|E|E|E|E|E|\n       * | |B|B|B|B|B|B| |D|D|D|D|D|D| | | | | | | | | | |\n       * | | |C|C|C|C| | | | | | | | | | | | | | | | | | |\n       * |\n       * V (stack trace depth)\n       */\n      const mockTimeDeltas = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23,\n      ];\n\n      const mockSamples = [A, B, C, C, C, C, B, A, D, D, D, D, D, D, A, A, A, E, E, E, E, E, E];\n      /*\n       *   A   E\n       *  / \\\n       * B   D\n       * |\n       * C\n       */\n      const mockChunks = [\n        makeProfileChunkEvent([{id: root, children: [A, E]}], [], [], 0),\n        makeProfileChunkEvent(\n            [{id: A, children: [B, D]}, {id: B, children: [C]}, {id: C, children: []}], mockSamples, mockTimeDeltas, 0),\n        makeProfileChunkEvent([{id: D, children: []}], [], [], 0),\n        makeProfileChunkEvent([{id: E, children: []}], [], [], 0),\n      ];\n      Trace.Handlers.ModelHandlers.Samples.reset();\n\n      for (const event of [mockProfileEvent, ...mockChunks]) {\n        Trace.Handlers.ModelHandlers.Samples.handleEvent(event);\n      }\n      await Trace.Handlers.ModelHandlers.Samples.finalize({isCPUProfile: true});\n      const data = Trace.Handlers.ModelHandlers.Samples.data();\n      const calls = data.profilesInProcess.get(pid)?.get(tid)?.profileCalls.map(call => {\n        const selfTime = data.entryToNode.get(call)?.selfTime;\n        return {...call, selfTime};\n      });\n      const tree = data.profilesInProcess.get(pid)?.get(tid)?.profileTree;\n      const expectedResult = [\n        {id: A, ts: 0, dur: 154, selfTime: 58, children: [B, D]},\n        {id: B, ts: 1, dur: 27, selfTime: 9, children: [C]},\n        {id: C, ts: 3, dur: 18, selfTime: 18, children: []},\n        {id: D, ts: 36, dur: 69, selfTime: 69, children: []},\n        {id: E, ts: 154, dur: 117, selfTime: 117, children: []},\n      ];\n      assert.exists(tree?.roots);\n      if (!tree?.roots) {\n        // This shouldn't happen, but add this if check to pass ts check.\n        return;\n      }\n      const allNodes = getAllNodes(tree?.roots);\n      const callsTestData = calls?.map(\n          c => {\n            const node = allNodes.find(node => node.id === c.nodeId);\n            const children = node?.children || [];\n            return ({\n              id: c.nodeId,\n              dur: Math.round(c.dur || 0),\n              ts: c.ts,\n              selfTime: Math.round(c.selfTime || 0),\n              children: [...children].map(child => child.id) || [],\n            });\n          },\n      );\n\n      assert.deepEqual(callsTestData, expectedResult);\n    });\n\n    it('can build profile calls from a CPU profile coming from a real world cpuprofile', async () => {\n      const data = await handleEventsFromCpuProfile(this, 'basic.cpuprofile.gz');\n\n      const threadId = Trace.Types.Events.ThreadID(1);\n      const firstProcessId = Trace.Types.Events.ProcessID(1);\n      const profilesFirstProcess = data.profilesInProcess.get(firstProcessId);\n      const profileData = profilesFirstProcess?.get(threadId) as Trace.Handlers.ModelHandlers.Samples.ProfileData;\n      // These particular calls are selected as some have children and others have selfTime\n      const calls = [\n        ...profileData?.profileCalls.slice(0, 4),\n        ...profileData?.profileCalls.slice(10, 15),\n      ].map(call => {\n        const selfTime = data.entryToNode.get(call)?.selfTime;\n        return {...call, selfTime};\n      });\n      const tree = profileData.profileTree;\n      const expectedResult = [\n        // The initial call stack\n        {id: 2, dur: 2369962, ts: 73029010084, selfTime: 0, children: [3]},\n        {id: 3, dur: 2369962, ts: 73029010084, selfTime: 0, children: [4]},\n        {id: 4, dur: 2369962, ts: 73029010084, selfTime: 0, children: [5]},\n        {id: 5, dur: 2369962, ts: 73029010084, selfTime: 0, children: [6]},\n        // various calls to hrtime\n        {id: 10, dur: 375, ts: 73029011751, selfTime: 375, children: []},\n        {id: 10, dur: 1083, ts: 73029012251, selfTime: 1083, children: []},\n        {id: 10, dur: 833, ts: 73029013459, selfTime: 833, children: []},\n        {id: 10, dur: 917, ts: 73029014417, selfTime: 792, children: []},\n        {id: 11, dur: 125, ts: 73029014667, selfTime: 125, children: []},\n\n      ];\n      assert.exists(tree?.roots);\n      if (!tree?.roots) {\n        // This shouldn't happen, but add this if check to pass ts check.\n        return;\n      }\n      const allNodes = getAllNodes(tree?.roots);\n      const callsTestData = calls?.map(c => {\n        const node = allNodes.find(node => node.id === c.nodeId);\n        const children = node?.children || [];\n        return {\n          id: c.nodeId,\n          dur: Math.round(c.dur || 0),\n          ts: c.ts,\n          selfTime: Math.round(c.selfTime || 0),\n          children: [...children].map(child => child.id) || [],\n        };\n      });\n      assert.deepEqual(callsTestData, expectedResult);\n    });\n  });\n  describe('CPU Profile building', () => {\n    it('generates a CPU profile from a trace file', async () => {\n      const data = await handleEventsFromTraceFile(this, 'recursive-blocking-js.json.gz');\n      assert.strictEqual(data.profilesInProcess.size, 1);\n      const profileById = data.profilesInProcess.values().next().value!;\n      assert.strictEqual(profileById.size, 1);\n      const cpuProfileData = profileById.values().next().value as Trace.Handlers.ModelHandlers.Samples.ProfileData;\n      const cpuProfile = cpuProfileData.rawProfile;\n      assert.deepEqual(\n          Object.keys(cpuProfile), ['startTime', 'endTime', 'nodes', 'samples', 'timeDeltas', 'lines', 'traceIds']);\n      assert.lengthOf(cpuProfile.nodes, 153);\n      assert.strictEqual(cpuProfile.startTime, 287510826176);\n      assert.strictEqual(cpuProfile.endTime, 287510847633);\n      assert.strictEqual(cpuProfile.samples?.length, 39471);\n      assert.strictEqual(cpuProfile.samples?.length, cpuProfile.timeDeltas?.length);\n      assert.strictEqual(cpuProfile.samples?.length, cpuProfile.lines?.length);\n    });\n  });\n  describe('CPU Profile parsing', () => {\n    it('generates a parsed CPU profile from a trace file', async () => {\n      const data = await handleEventsFromTraceFile(this, 'recursive-blocking-js.json.gz');\n      assert.strictEqual(data.profilesInProcess.size, 1);\n      const profileById = data.profilesInProcess.values().next().value!;\n      assert.strictEqual(profileById.size, 1);\n      const cpuProfileData = profileById.values().next().value as Trace.Handlers.ModelHandlers.Samples.ProfileData;\n      const parsedProfile = cpuProfileData.parsedProfile;\n      assert.strictEqual(parsedProfile.nodes()?.length, 153);\n\n      // Ensure that we correctly maintain a lineNumber/columnNumber of 0 and don't fall back to -1 because 0 is falsey.\n      const nodesWithZeroLineNumber = parsedProfile.nodes()?.filter(node => node.lineNumber === 0) || [];\n      assert.lengthOf(nodesWithZeroLineNumber, 15);\n      const nodesWithZeroColumnNumber = parsedProfile.nodes()?.filter(node => node.columnNumber === 0) || [];\n      assert.lengthOf(nodesWithZeroColumnNumber, 12);\n      assert.strictEqual(parsedProfile.gcNode?.id, 36);\n      assert.strictEqual(parsedProfile.programNode?.id, 2);\n      assert.strictEqual(parsedProfile.profileStartTime, 287510835.138);\n      assert.strictEqual(parsedProfile.profileEndTime, 287515908.9025441);\n      assert.strictEqual(parsedProfile.maxDepth, 14);\n      assert.strictEqual(parsedProfile.samples?.length, 39471);\n    });\n  });\n\n  describe('getProfileCallFunctionName', () => {\n    // Find an event from the trace that represents some work. The use of\n    // this specific call frame event is not for any real reason.\n    function getProfileEventAndNode(parsedTrace: Trace.Handlers.Types.ParsedTrace): {\n      entry: Trace.Types.Events.SyntheticProfileCall,\n      profileNode: CPUProfile.ProfileTreeModel.ProfileNode,\n    } {\n      const mainThread = getMainThread(parsedTrace.Renderer);\n      let foundNode: CPUProfile.ProfileTreeModel.ProfileNode|null = null;\n      let foundEntry: Trace.Types.Events.SyntheticProfileCall|null = null;\n\n      for (const entry of mainThread.entries) {\n        if (Trace.Types.Events.isProfileCall(entry) && entry.callFrame.functionName === 'performConcurrentWorkOnRoot') {\n          const profile = parsedTrace.Samples.profilesInProcess.get(entry.pid)?.get(entry.tid);\n          const node = profile?.parsedProfile.nodeById(entry.nodeId);\n          if (node) {\n            foundNode = node;\n          }\n          foundEntry = entry;\n          break;\n        }\n      }\n      if (!foundNode) {\n        throw new Error('Could not find CPU Profile node.');\n      }\n      if (!foundEntry) {\n        throw new Error('Could not find expected entry.');\n      }\n\n      return {\n        entry: foundEntry,\n        profileNode: foundNode,\n      };\n    }\n\n    it('falls back to the call frame name if the ProfileNode name is empty', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'react-hello-world.json.gz');\n      const {entry, profileNode} = getProfileEventAndNode(parsedTrace);\n      // Store and then reset this: we are doing this to test the fallback to\n      // the entry callFrame.functionName property. After the assertion we\n      // reset this to avoid impacting other tests.\n      const originalProfileNodeName = profileNode.functionName;\n      profileNode.setFunctionName('');\n      assert.strictEqual(\n          Trace.Handlers.ModelHandlers.Samples.getProfileCallFunctionName(parsedTrace.Samples, entry),\n          'performConcurrentWorkOnRoot');\n      // St\n      profileNode.setFunctionName(originalProfileNodeName);\n    });\n\n    it('uses the profile name if it has been set', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'react-hello-world.json.gz');\n      const {entry, profileNode} = getProfileEventAndNode(parsedTrace);\n      // Store and then reset this: we are doing this to test the fallback to\n      // the entry callFrame.functionName property. After the assertion we\n      // reset this to avoid impacting other tests.\n      const originalProfileNodeName = profileNode.functionName;\n      profileNode.setFunctionName('testing-profile-name');\n      assert.strictEqual(\n          Trace.Handlers.ModelHandlers.Samples.getProfileCallFunctionName(parsedTrace.Samples, entry),\n          'testing-profile-name');\n      profileNode.setFunctionName(originalProfileNodeName);\n    });\n  });\n});\n"]}