{"version":3,"file":"MemoryHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/MemoryHandler.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAC7B,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;AACtB,OAAO,KAAK,WAAW,MAAM,aAAa,CAAC;AAC3C,OAAO,EAAC,WAAW,EAAC,MAAM,iCAAiC,CAAC;AAE5D,QAAQ,CAAC,eAAe,EAAE;IACxB,UAAU,CAAC,GAAG,EAAE;QACd,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAChD,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK;QACjC,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;QACpE,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;QACrD,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YAC1B,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC3D,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SAC9D;QACD,MAAM,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEzD,MAAM,IAAI,GAAG,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QAC9D,MAAM,IAAI,GAAG,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QAC5D,MAAM,iBAAiB,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC/D,MAAM,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACnE,MAAM,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nconst {assert} = chai;\nimport * as TraceEngine from '../trace.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\n\ndescribe('MemoryHandler', function() {\n  beforeEach(() => {\n    TraceEngine.Handlers.ModelHandlers.Meta.reset();\n    TraceEngine.Handlers.ModelHandlers.Memory.reset();\n  });\n\n  it('gathers update counters', async function() {\n    const events = await TraceLoader.rawEvents(this, 'web-dev.json.gz');\n    TraceEngine.Handlers.ModelHandlers.Meta.initialize();\n    for (const event of events) {\n      TraceEngine.Handlers.ModelHandlers.Meta.handleEvent(event);\n      TraceEngine.Handlers.ModelHandlers.Memory.handleEvent(event);\n    }\n    await TraceEngine.Handlers.ModelHandlers.Meta.finalize();\n\n    const data = TraceEngine.Handlers.ModelHandlers.Memory.data();\n    const meta = TraceEngine.Handlers.ModelHandlers.Meta.data();\n    const topLevelProcesses = Array.from(meta.topLevelRendererIds);\n    const expectedPid = TraceEngine.Types.TraceEvents.ProcessID(73704);\n    assert.deepEqual(topLevelProcesses, [expectedPid]);\n    assert.strictEqual(data.updateCountersByProcess.get(expectedPid)?.length, 158);\n  });\n});\n"]}