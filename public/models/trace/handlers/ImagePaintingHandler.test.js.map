{"version":3,"file":"ImagePaintingHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/ImagePaintingHandler.test.ts"],"names":[],"mappings":"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","sourcesContent":["\n// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../trace.js';\n\ndescribe('ImagePaintingHandler', () => {\n  beforeEach(() => {\n    Trace.Handlers.ModelHandlers.ImagePainting.reset();\n  });\n\n  it('can pair DrawLazyPixelRef events to PaintImages by their reference number', async function() {\n    const events = await TraceLoader.rawEvents(this, 'web-dev.json.gz');\n\n    for (const event of events) {\n      Trace.Handlers.ModelHandlers.Meta.handleEvent(event);\n      Trace.Handlers.ModelHandlers.ImagePainting.handleEvent(event);\n    }\n    await Trace.Handlers.ModelHandlers.Meta.finalize();\n    await Trace.Handlers.ModelHandlers.ImagePainting.finalize({});\n\n    const drawLazyPixelRefEvent = events.find(Trace.Types.Events.isDrawLazyPixelRef);\n    assert.isOk(drawLazyPixelRefEvent);\n    assert.isOk(drawLazyPixelRefEvent.args?.LazyPixelRef);\n\n    const data = Trace.Handlers.ModelHandlers.ImagePainting.data();\n\n    const matchingPaintEvent = data.paintImageByDrawLazyPixelRef.get(drawLazyPixelRefEvent.args.LazyPixelRef);\n    assert.isOk(matchingPaintEvent);\n\n    assert.isNotOk(data.didCorrectForHostDpr);\n  });\n\n  it('can pair a DecodeImage event to a PaintImage via the DrawLazyPixelRef', async function() {\n    const events = await TraceLoader.rawEvents(this, 'web-dev.json.gz');\n\n    for (const event of events) {\n      Trace.Handlers.ModelHandlers.Meta.handleEvent(event);\n      Trace.Handlers.ModelHandlers.ImagePainting.handleEvent(event);\n    }\n    await Trace.Handlers.ModelHandlers.Meta.finalize();\n    await Trace.Handlers.ModelHandlers.ImagePainting.finalize({});\n\n    const decodeImage = events.find(Trace.Types.Events.isDecodeImage);\n    assert.isOk(decodeImage);\n\n    const data = Trace.Handlers.ModelHandlers.ImagePainting.data();\n\n    const matchingPaintEvent = data.paintImageForEvent.get(decodeImage);\n    assert.isOk(matchingPaintEvent);\n\n    assert.isNotOk(data.didCorrectForHostDpr);\n  });\n\n  it('corrects for host DPR', async function() {\n    const events = await TraceLoader.rawEvents(this, 'dpr.json.gz');\n\n    for (const event of events) {\n      Trace.Handlers.ModelHandlers.Meta.handleEvent(event);\n      Trace.Handlers.ModelHandlers.ImagePainting.handleEvent(event);\n    }\n    await Trace.Handlers.ModelHandlers.Meta.finalize();\n    await Trace.Handlers.ModelHandlers.ImagePainting.finalize({\n      metadata: {hostDPR: 2},\n    });\n\n    const decodeImage = events.find(Trace.Types.Events.isDecodeImage);\n    assert.isOk(decodeImage);\n\n    const data = Trace.Handlers.ModelHandlers.ImagePainting.data();\n\n    assert(data.didCorrectForHostDpr);\n\n    const [paintEvent, corrected] = [...data.paintEventToCorrectedDisplaySize.entries()][0];\n    assert.deepEqual({width: paintEvent.args.data.width, height: paintEvent.args.data.height}, {\n      width: 792,\n      height: 750,\n    });\n    assert.deepEqual(corrected, {\n      width: 693,\n      height: 656.25,\n    });\n  });\n});\n"]}