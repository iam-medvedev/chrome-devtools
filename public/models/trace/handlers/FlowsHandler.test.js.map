{"version":3,"file":"FlowsHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/FlowsHandler.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  makeCompleteEvent,\n  makeFlowPhaseEvent,\n} from '../../../testing/TraceHelpers.js';\nimport * as Trace from '../trace.js';\n\nasync function getFlowsHandlerData(events: Trace.Types.Events.Event[]):\n    Promise<ReturnType<typeof Trace.Handlers.ModelHandlers.Flows.data>> {\n  Trace.Handlers.ModelHandlers.Flows.reset();\n  for (const event of events) {\n    Trace.Handlers.ModelHandlers.Flows.handleEvent(event);\n  }\n  await Trace.Handlers.ModelHandlers.Flows.finalize();\n  return Trace.Handlers.ModelHandlers.Flows.data();\n}\nconst cat = 'mewtwo';\nconst pid = 0;\nconst tid = 0;\n\ndescribe('FlowsHandler', function() {\n  it('parses a flow correctly', async () => {\n    const events = [\n      // Trace events linked to flow phase events.\n      makeCompleteEvent('A', 0, 10, cat, pid, tid),\n      makeCompleteEvent('B', 10, 10, cat, pid, tid),\n      makeCompleteEvent('C', 20, 10, cat, pid, tid),\n\n      // Flow phase events\n      makeFlowPhaseEvent('A', 0, cat, Trace.Types.Events.Phase.FLOW_START, 1, pid, tid),\n      makeFlowPhaseEvent('A', 10, cat, Trace.Types.Events.Phase.FLOW_STEP, 1, pid, tid),\n      makeFlowPhaseEvent('A', 20, cat, Trace.Types.Events.Phase.FLOW_END, 1, pid, tid),\n\n    ];\n\n    const {flows} = await getFlowsHandlerData(events);\n    assert.lengthOf(flows, 1);\n    assert.deepEqual(flows[0], events.slice(0, 3));\n  });\n  it('handles multiple flows with the same group token', async function() {\n    const events = [\n      // Flow 1 phase events\n      makeFlowPhaseEvent('A', 0, cat, Trace.Types.Events.Phase.FLOW_START, 1, pid, tid),\n      makeFlowPhaseEvent('A', 10, cat, Trace.Types.Events.Phase.FLOW_STEP, 1, pid, tid),\n      makeFlowPhaseEvent('A', 20, cat, Trace.Types.Events.Phase.FLOW_END, 1, pid, tid),\n\n      // Flow 2 phase\n      makeFlowPhaseEvent('A', 30, cat, Trace.Types.Events.Phase.FLOW_START, 2, pid, tid),\n      makeFlowPhaseEvent('A', 40, cat, Trace.Types.Events.Phase.FLOW_STEP, 2, pid, tid),\n      makeFlowPhaseEvent('A', 50, cat, Trace.Types.Events.Phase.FLOW_END, 2, pid, tid),\n\n      // Flow 1 events\n      makeCompleteEvent('A', 0, 10, cat, pid, tid),\n      makeCompleteEvent('B', 10, 10, cat, pid, tid),\n      makeCompleteEvent('C', 20, 10, cat, pid, tid),\n\n      // Flow 2 events\n      makeCompleteEvent('A', 30, 10, cat, pid, tid),\n      makeCompleteEvent('B', 40, 10, cat, pid, tid),\n      makeCompleteEvent('C', 50, 10, cat, pid, tid),\n    ];\n\n    const {flows} = await getFlowsHandlerData(events);\n    assert.lengthOf(flows, 2);\n    assert.deepEqual(flows[0], events.slice(6, 9));\n    assert.deepEqual(flows[1], events.slice(9));\n  });\n\n  it('handles events belonging to multiple flows', async function() {\n    const events = [\n      // Flow 1 phase events\n      makeFlowPhaseEvent('A', 0, cat, Trace.Types.Events.Phase.FLOW_START, 1, pid, tid),\n      makeFlowPhaseEvent('A', 10, cat, Trace.Types.Events.Phase.FLOW_END, 1, pid, tid),\n\n      // Flow 2 phase events\n      makeFlowPhaseEvent('B', 10, cat, Trace.Types.Events.Phase.FLOW_START, 2, pid, tid),\n      makeFlowPhaseEvent('B', 20, cat, Trace.Types.Events.Phase.FLOW_END, 2, pid, tid),\n\n      // Flow 1 & 2: A -> B, B -> C\n      makeCompleteEvent('A', 0, 10, cat, pid, tid),\n      makeCompleteEvent('B', 10, 10, cat, pid, tid),\n      makeCompleteEvent('C', 20, 10, cat, pid, tid),\n    ];\n\n    const {flows} = await getFlowsHandlerData(events);\n    assert.lengthOf(flows, 2);\n    // Flow 1: A -> B\n    assert.deepEqual(flows[0], events.slice(4, 6));\n    // Flow 2: B -> C\n    assert.deepEqual(flows[1], events.slice(5));\n  });\n  it('handles a flow connecting different threads', async function() {\n    const otherThread = 1;\n    const events = [\n      // Flow phase events. Flow events happen in different threads\n      makeFlowPhaseEvent('A', 0, cat, Trace.Types.Events.Phase.FLOW_START, 1, pid, tid),\n      makeFlowPhaseEvent('A', 10, cat, Trace.Types.Events.Phase.FLOW_STEP, 1, pid, otherThread),\n      makeFlowPhaseEvent('A', 20, cat, Trace.Types.Events.Phase.FLOW_END, 1, pid, otherThread),\n\n      makeCompleteEvent('A', 0, 10, cat, pid, tid),\n      makeCompleteEvent('B', 10, 10, cat, pid, otherThread),\n      makeCompleteEvent('C', 20, 10, cat, pid, otherThread),\n    ];\n\n    const {flows} = await getFlowsHandlerData(events);\n    assert.lengthOf(flows, 1);\n    assert.deepEqual(flows[0], events.slice(3, 6));\n  });\n\n  it('does not link flow phase events to trace events if the thread ids are different', async function() {\n    const otherThread = 1;\n    const events = [\n      // Flow phase events. Flow events happen in different threads\n      makeFlowPhaseEvent('A', 0, cat, Trace.Types.Events.Phase.FLOW_START, 1, pid, tid),\n      makeFlowPhaseEvent('A', 20, cat, Trace.Types.Events.Phase.FLOW_END, 1, pid, tid),\n\n      // Flow events (pid and tid combination differs from the one\n      // of the flow phase events, thus they should not be matched).\n      makeCompleteEvent('A', 0, 10, cat, pid, otherThread),\n      makeCompleteEvent('C', 20, 10, cat, pid, otherThread),\n    ];\n\n    const {flows} = await getFlowsHandlerData(events);\n    assert.lengthOf(flows, 0);\n  });\n\n  it('handles multiple flows with different group tokens', async function() {\n    const pidForFlow2 = 1;\n    const tidForFlow2 = 1;\n    const events = [\n      // Flow 1 phase events\n      makeFlowPhaseEvent('A', 0, cat, Trace.Types.Events.Phase.FLOW_START, 1, pid, tid),\n      makeFlowPhaseEvent('A', 10, cat, Trace.Types.Events.Phase.FLOW_STEP, 1, pid, tid),\n      makeFlowPhaseEvent('A', 20, cat, Trace.Types.Events.Phase.FLOW_END, 1, pid, tid),\n\n      // Flow 2 phase events. Using different pid and tid to ensure\n      // the flow group token is different from flow 1.\n      // The overlapping timestamps should not cause issues identifying\n      // the events belonging to the two different flows.\n      makeFlowPhaseEvent('A', 0, cat, Trace.Types.Events.Phase.FLOW_START, 2, pidForFlow2, tidForFlow2),\n      makeFlowPhaseEvent('A', 10, cat, Trace.Types.Events.Phase.FLOW_STEP, 2, pidForFlow2, tidForFlow2),\n      makeFlowPhaseEvent('A', 20, cat, Trace.Types.Events.Phase.FLOW_END, 2, pidForFlow2, tidForFlow2),\n\n      // Flow 1 events\n      makeCompleteEvent('A', 0, 10, cat, pid, tid),\n      makeCompleteEvent('B', 10, 10, cat, pid, tid),\n      makeCompleteEvent('C', 20, 10, cat, pid, tid),\n\n      // Flow 2 events\n      makeCompleteEvent('A', 0, 10, cat, pidForFlow2, tidForFlow2),\n      makeCompleteEvent('B', 10, 10, cat, pidForFlow2, tidForFlow2),\n      makeCompleteEvent('C', 20, 10, cat, pidForFlow2, tidForFlow2),\n    ];\n\n    const {flows} = await getFlowsHandlerData(events);\n    assert.lengthOf(flows, 2);\n    assert.deepEqual(flows[0], events.slice(6, 9));\n    assert.deepEqual(flows[1], events.slice(9));\n  });\n  it('ignores events with no corresponding flow phase event', async function() {\n    const events = [\n      // Flow 1 phase events\n      makeFlowPhaseEvent('A', 0, cat, Trace.Types.Events.Phase.FLOW_START, 1, pid, tid),\n      makeFlowPhaseEvent('A', 10, cat, Trace.Types.Events.Phase.FLOW_STEP, 1, pid, tid),\n      makeFlowPhaseEvent('A', 20, cat, Trace.Types.Events.Phase.FLOW_END, 1, pid, tid),\n\n      // Flow 1 events\n      makeCompleteEvent('A', 0, 10, cat, pid, tid),\n      makeCompleteEvent('B', 10, 10, cat, pid, tid),\n      makeCompleteEvent('C', 20, 10, cat, pid, tid),\n\n      // non-flow events.\n      makeCompleteEvent('A', 30, 10, cat, pid, tid),\n      makeCompleteEvent('B', 40, 10, cat, pid, tid),\n      makeCompleteEvent('C', 50, 10, cat, pid, tid),\n    ];\n\n    const {flows} = await getFlowsHandlerData(events);\n    assert.lengthOf(flows, 1);\n    assert.deepEqual(flows[0], events.slice(3, 6));\n  });\n});\n"]}