{"version":3,"file":"LargestImagePaintHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/LargestImagePaintHandler.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EAAC,uBAAuB,EAAC,MAAM,wCAAwC,CAAC;AAC/E,OAAO,EAAC,WAAW,EAAC,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,KAAK,MAAM,aAAa,CAAC;AAErC,uBAAuB,CAAC,0BAA0B,EAAE;IAClD,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK;QAC3D,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;QACvE,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,iBAAiB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACpE,CAAC;QAED,MAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;QACnE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAgC,CAAC,CAAC;QAChF,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,EAAgC,CAAC,CAAC;QACxF,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,sCAAsC,CAAC,CAAC;IAC/F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE,KAAK;QACvE,qEAAqE;QACrE,kDAAkD;QAClD,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC;QAEzF,MAAM,EAAC,oBAAoB,EAAC,GAAG,WAAW,CAAC,IAAI,CAAC;QAChD,yDAAyD;QACzD,MAAM,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,cAAc,GAAG,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAE5B,MAAM,EAAC,sBAAsB,EAAC,GAAG,WAAW,CAAC,iBAAiB,CAAC;QAC/D,MAAM,UAAU,GAAG,sBAAsB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC9D,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxB,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,+BAA+B,CAAC,CAAC;IAChF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../../generated/protocol.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../trace.js';\n\ndescribeWithEnvironment('LargestImagePaintHandler', function() {\n  beforeEach(async () => {\n    Trace.Handlers.ModelHandlers.LargestImagePaint.reset();\n  });\n\n  it('creates a map of DOM Node IDs to image candidates', async function() {\n    const events = await TraceLoader.rawEvents(this, 'lcp-images.json.gz');\n    for (const event of events) {\n      Trace.Handlers.ModelHandlers.LargestImagePaint.handleEvent(event);\n    }\n\n    const data = Trace.Handlers.ModelHandlers.LargestImagePaint.data();\n    assert.strictEqual(data.imageByDOMNodeId.size, 1);\n    const imageForLCP = data.imageByDOMNodeId.get(10 as Protocol.DOM.BackendNodeId);\n    assert.exists(imageForLCP);\n    assert.strictEqual(imageForLCP?.args.data?.DOMNodeId, 10 as Protocol.DOM.BackendNodeId);\n    assert.strictEqual(imageForLCP?.args.data?.imageUrl, 'https://via.placeholder.com/2000.jpg');\n  });\n\n  it('is able to identify the LCP image request for each navigation', async function() {\n    // The handler depends on Meta + Network requests, let's just execute\n    // all of them rather than call them individually.\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'lcp-multiple-frames.json.gz');\n\n    const {mainFrameNavigations} = parsedTrace.Meta;\n    // There is only one main frame navigation in this trace.\n    assert.lengthOf(mainFrameNavigations, 1);\n    const mainNavigation = mainFrameNavigations.at(0);\n    assert.isOk(mainNavigation);\n\n    const {lcpRequestByNavigation} = parsedTrace.LargestImagePaint;\n    const lcpRequest = lcpRequestByNavigation.get(mainNavigation);\n    assert.isOk(lcpRequest);\n    assert.strictEqual(lcpRequest.args.data.url, 'https://placehold.co/1000.jpg');\n  });\n});\n"]}