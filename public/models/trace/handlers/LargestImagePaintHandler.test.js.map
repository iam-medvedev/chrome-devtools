{"version":3,"file":"LargestImagePaintHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/LargestImagePaintHandler.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../trace.js';\n\ndescribeWithEnvironment('LargestImagePaintHandler', function() {\n  beforeEach(async () => {\n    Trace.Handlers.ModelHandlers.LargestImagePaint.reset();\n  });\n\n  it('creates a map of DOM Node IDs to image candidates', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'lcp-images.json.gz');\n\n    const {mainFrameNavigations} = parsedTrace.Meta;\n    // There is only one main frame navigation in this trace.\n    assert.lengthOf(mainFrameNavigations, 1);\n    const mainNavigation = mainFrameNavigations.at(0);\n    assert.isOk(mainNavigation?.args.data?.navigationId);\n\n    const {lcpRequestByNavigationId} = parsedTrace.LargestImagePaint;\n    const lcpRequest = lcpRequestByNavigationId.get(mainNavigation.args.data?.navigationId);\n    assert.isOk(lcpRequest);\n    assert.strictEqual(lcpRequest.args.data.url, 'https://via.placeholder.com/2000.jpg');\n  });\n\n  it('is able to identify the LCP image request for each navigation', async function() {\n    // The handler depends on Meta + Network requests, let's just execute\n    // all of them rather than call them individually.\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'lcp-multiple-frames.json.gz');\n\n    const {mainFrameNavigations} = parsedTrace.Meta;\n    // There is only one main frame navigation in this trace.\n    assert.lengthOf(mainFrameNavigations, 1);\n    const mainNavigation = mainFrameNavigations.at(0);\n    assert.isOk(mainNavigation?.args.data?.navigationId);\n\n    const {lcpRequestByNavigationId} = parsedTrace.LargestImagePaint;\n    const lcpRequest = lcpRequestByNavigationId.get(mainNavigation.args.data.navigationId);\n    assert.isOk(lcpRequest);\n    assert.strictEqual(lcpRequest.args.data.url, 'https://placehold.co/1000.jpg');\n  });\n\n  it('handles image paints which happen after the LCP event', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'lcp-late-paint-event.json.gz');\n\n    const {mainFrameNavigations} = parsedTrace.Meta;\n    // There is only one main frame navigation in this trace.\n    assert.lengthOf(mainFrameNavigations, 1);\n    const mainNavigation = mainFrameNavigations.at(0);\n    assert.isOk(mainNavigation?.args.data?.navigationId);\n\n    const {lcpRequestByNavigationId} = parsedTrace.LargestImagePaint;\n    const lcpRequest = lcpRequestByNavigationId.get(mainNavigation.args.data.navigationId);\n\n    // There is a largest image paint event, but it happens after the LCP candidate\n    // so it's ignored. The actual LCP is text.\n    assert.isUndefined(lcpRequest);\n  });\n});\n"]}