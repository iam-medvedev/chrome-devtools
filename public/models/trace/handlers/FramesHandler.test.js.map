{"version":3,"file":"FramesHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/FramesHandler.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithMockConnection} from '../../../testing/MockConnection.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../trace.js';\n\nasync function processTrace(events: readonly Trace.Types.Events.Event[]): Promise<void> {\n  // The FramesHandler depends on a few other handlers, so we run all of them as part of these tests.\n  const handlersInOrder: Trace.Handlers.Types.HandlerName[] = [\n    'Meta',\n    'Samples',\n    'AuctionWorklets',\n    'Renderer',\n    'LayerTree',\n    'Frames',\n  ];\n  for (const handlerName of handlersInOrder) {\n    const handler = Trace.Handlers.ModelHandlers[handlerName];\n    handler.reset();\n  }\n  for (const event of events) {\n    for (const handlerName of handlersInOrder) {\n      Trace.Handlers.ModelHandlers[handlerName].handleEvent(event);\n    }\n  }\n  for (const handlerName of handlersInOrder) {\n    const handler = Trace.Handlers.ModelHandlers[handlerName];\n    await handler.finalize({});\n  }\n}\n\ndescribeWithMockConnection('FramesHandler', () => {\n  it('can parse out a trace and return the frames', async function() {\n    const rawEvents = await TraceLoader.rawEvents(this, 'web-dev-with-commit.json.gz');\n    await processTrace(rawEvents);\n\n    const parsedFrames = Trace.Handlers.ModelHandlers.Frames.data().frames;\n    assert.lengthOf(parsedFrames, 18);\n\n    // Assert a couple of frames to check the data, including one that is partial and was dropped.\n    assert.strictEqual(parsedFrames[0].startTime, 122411104714);\n    assert.strictEqual(parsedFrames[0].duration, 37847);\n    assert.isFalse(parsedFrames[0].isPartial);\n    assert.isFalse(parsedFrames[0].isPartial);\n\n    assert.strictEqual(parsedFrames[2].startTime, 122411159244);\n    assert.strictEqual(parsedFrames[2].duration, 16683);\n    assert.isTrue(parsedFrames[2].isPartial);\n    assert.isTrue(parsedFrames[2].dropped);\n  });\n\n  it('assigns each frame an index', async function() {\n    const rawEvents = await TraceLoader.rawEvents(this, 'web-dev-with-commit.json.gz');\n    await processTrace(rawEvents);\n\n    const parsedFrames = Trace.Handlers.ModelHandlers.Frames.data().frames;\n    assert.lengthOf(parsedFrames, 18);\n\n    parsedFrames.forEach((frame, arrayIndex) => {\n      // Seems silly, but this means we know the frame's index without having\n      // to look it up in the trace data.\n      assert.strictEqual(frame.index, arrayIndex);\n    });\n  });\n\n  it('can create LayerPaintEvents from Paint and snapshot events', async function() {\n    // Advanced instrumentation trace file is large: allow the bots more time\n    // to process it.\n    this.timeout(20_000);\n\n    const rawEvents = await TraceLoader.rawEvents(this, 'web-dev-with-advanced-instrumentation.json.gz');\n    await processTrace(rawEvents);\n    const parsedFrames = Trace.Handlers.ModelHandlers.Frames.data().frames;\n    assert.lengthOf(parsedFrames, 25);\n    const frameWithPaints = parsedFrames.at(2);\n    if (!frameWithPaints) {\n      throw new Error('Could not find frame at index 2');\n    }\n    // Check we have the right one.\n    assert.strictEqual(frameWithPaints.seqId, 1127448);\n    assert.lengthOf(frameWithPaints.paints, 7);\n  });\n\n  it('can return frames within a given window', async function() {\n    const rawEvents = await TraceLoader.rawEvents(this, 'web-dev-with-commit.json.gz');\n    await processTrace(rawEvents);\n\n    const parsedFrames = Trace.Handlers.ModelHandlers.Frames.data().frames;\n    assert.lengthOf(parsedFrames, 18);\n\n    const startTime = Trace.Types.Timing.Micro(parsedFrames[0].startTime);\n    const endTime = Trace.Types.Timing.Micro(parsedFrames[3].endTime);\n    const framesWithinWindow = Trace.Handlers.ModelHandlers.Frames.framesWithinWindow(parsedFrames, startTime, endTime);\n    assert.deepEqual(framesWithinWindow, [\n      parsedFrames[0],\n      parsedFrames[1],\n      parsedFrames[2],\n      parsedFrames[3],\n    ]);\n  });\n});\n\ndescribe('FramesHandler', () => {\n  it('visualizes zero frames when no BeginFrames are added', () => {\n    const beginFrameQueue = new Trace.Handlers.ModelHandlers.Frames.TimelineFrameBeginFrameQueue();\n    const framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(100);\n\n    assert.isEmpty(framesToVisualize);\n  });\n\n  it('visualizes zero frames when no BeginFrame in queue matches DrawFrame', () => {\n    const beginFrameQueue = new Trace.Handlers.ModelHandlers.Frames.TimelineFrameBeginFrameQueue();\n    beginFrameQueue.addFrameIfNotExists(100, Trace.Types.Timing.Micro(1000000), false, false);\n    beginFrameQueue.addFrameIfNotExists(101, Trace.Types.Timing.Micro(1000016), false, false);\n    beginFrameQueue.addFrameIfNotExists(102, Trace.Types.Timing.Micro(1000032), false, false);\n    const framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(103);\n\n    assert.isEmpty(framesToVisualize);\n  });\n\n  it('ignores BeginFrames without corresponding DrawFrames', () => {\n    const beginFrameQueue = new Trace.Handlers.ModelHandlers.Frames.TimelineFrameBeginFrameQueue();\n    beginFrameQueue.addFrameIfNotExists(100, Trace.Types.Timing.Micro(1000000), false, false);\n    beginFrameQueue.addFrameIfNotExists(101, Trace.Types.Timing.Micro(1000016), false, false);\n    beginFrameQueue.addFrameIfNotExists(102, Trace.Types.Timing.Micro(1000032), false, false);\n    beginFrameQueue.addFrameIfNotExists(103, Trace.Types.Timing.Micro(Trace.Types.Timing.Micro(1000048)), false, false);\n\n    const framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(102);\n\n    // Visualized frame: 102 (non-dropped).\n    // The other frames that are neither drawn nor dropped (100, 101) are\n    // excluded from visualization.\n    assert.lengthOf(framesToVisualize, 1);\n    assert.isFalse(framesToVisualize[0].isDropped);\n    assert.strictEqual(framesToVisualize[0].seqId, 102);\n    assert.strictEqual(framesToVisualize[0].startTime, Trace.Types.Timing.Micro(1000032));\n  });\n\n  it('visualizes dropped BeginFrames before a presented frame', () => {\n    const beginFrameQueue = new Trace.Handlers.ModelHandlers.Frames.TimelineFrameBeginFrameQueue();\n    beginFrameQueue.addFrameIfNotExists(100, Trace.Types.Timing.Micro(1000000), false, false);\n    beginFrameQueue.addFrameIfNotExists(101, Trace.Types.Timing.Micro(1000016), true, false);\n    beginFrameQueue.addFrameIfNotExists(102, Trace.Types.Timing.Micro(1000032), false, false);\n    beginFrameQueue.addFrameIfNotExists(103, Trace.Types.Timing.Micro(1000048), true, false);\n    beginFrameQueue.addFrameIfNotExists(104, Trace.Types.Timing.Micro(1000064), false, false);\n    beginFrameQueue.addFrameIfNotExists(105, Trace.Types.Timing.Micro(1000080), false, false);\n    beginFrameQueue.addFrameIfNotExists(106, Trace.Types.Timing.Micro(1000096), false, false);\n\n    const framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(105);\n\n    // Visualized frames: 101 (dropped), 103 (dropped) and 105 (non-dropped).\n    // The other frames that are neither drawn nor dropped (100, 102 and 104)\n    // are excluded from visualization.\n    assert.lengthOf(framesToVisualize, 3);\n\n    assert.isTrue(framesToVisualize[0].isDropped);\n    assert.strictEqual(framesToVisualize[0].seqId, 101);\n    assert.strictEqual(framesToVisualize[0].startTime, Trace.Types.Timing.Micro(1000016));\n\n    assert.isTrue(framesToVisualize[1].isDropped);\n    assert.strictEqual(framesToVisualize[1].seqId, 103);\n    assert.strictEqual(framesToVisualize[1].startTime, Trace.Types.Timing.Micro(1000048));\n\n    assert.isFalse(framesToVisualize[2].isDropped);\n    assert.strictEqual(framesToVisualize[2].seqId, 105);\n    assert.strictEqual(framesToVisualize[2].startTime, Trace.Types.Timing.Micro(1000080));\n  });\n\n  it('changes dropped status of specified frames via setDropped()', () => {\n    const beginFrameQueue = new Trace.Handlers.ModelHandlers.Frames.TimelineFrameBeginFrameQueue();\n    beginFrameQueue.addFrameIfNotExists(100, Trace.Types.Timing.Micro(1000000), false, false);\n    beginFrameQueue.setDropped(100, true);\n    beginFrameQueue.addFrameIfNotExists(101, Trace.Types.Timing.Micro(1000016), true, false);\n    beginFrameQueue.addFrameIfNotExists(102, Trace.Types.Timing.Micro(1000032), false, false);\n    beginFrameQueue.addFrameIfNotExists(103, Trace.Types.Timing.Micro(1000048), true, false);\n    beginFrameQueue.addFrameIfNotExists(104, Trace.Types.Timing.Micro(1000064), false, false);\n    beginFrameQueue.addFrameIfNotExists(105, Trace.Types.Timing.Micro(1000080), false, false);\n    beginFrameQueue.addFrameIfNotExists(106, Trace.Types.Timing.Micro(1000096), true, false);\n    beginFrameQueue.setDropped(101, false);\n\n    const framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(105);\n\n    // Visualized frames: 100 (dropped), 103 (dropped) and 105 (non-dropped).\n    // The other frames that are neither drawn nor dropped (101, 102 and 104)\n    // are excluded from visualization.\n    assert.lengthOf(framesToVisualize, 3);\n\n    assert.isTrue(framesToVisualize[0].isDropped);\n    assert.strictEqual(framesToVisualize[0].seqId, 100);\n    assert.strictEqual(framesToVisualize[0].startTime, Trace.Types.Timing.Micro(1000000));\n\n    assert.isTrue(framesToVisualize[1].isDropped);\n    assert.strictEqual(framesToVisualize[1].seqId, 103);\n    assert.strictEqual(framesToVisualize[1].startTime, Trace.Types.Timing.Micro(1000048));\n\n    assert.isFalse(framesToVisualize[2].isDropped);\n    assert.strictEqual(framesToVisualize[2].seqId, 105);\n    assert.strictEqual(framesToVisualize[2].startTime, Trace.Types.Timing.Micro(1000080));\n  });\n\n  it('pops processed frames out of the queue', () => {\n    const beginFrameQueue = new Trace.Handlers.ModelHandlers.Frames.TimelineFrameBeginFrameQueue();\n    beginFrameQueue.addFrameIfNotExists(100, Trace.Types.Timing.Micro(1000000), true, false);\n    beginFrameQueue.addFrameIfNotExists(101, Trace.Types.Timing.Micro(1000016), false, false);\n    beginFrameQueue.addFrameIfNotExists(102, Trace.Types.Timing.Micro(1000032), false, false);\n    beginFrameQueue.addFrameIfNotExists(103, Trace.Types.Timing.Micro(1000048), true, false);\n    beginFrameQueue.addFrameIfNotExists(104, Trace.Types.Timing.Micro(1000064), false, false);\n    beginFrameQueue.addFrameIfNotExists(105, Trace.Types.Timing.Micro(1000080), true, false);\n    beginFrameQueue.addFrameIfNotExists(106, Trace.Types.Timing.Micro(1000096), true, false);\n\n    // Pop frame 100, 101 (not visualized) and 102 from queue.\n    let framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(102);\n\n    assert.lengthOf(framesToVisualize, 2);\n\n    assert.isTrue(framesToVisualize[0].isDropped);\n    assert.strictEqual(framesToVisualize[0].seqId, 100);\n    assert.strictEqual(framesToVisualize[0].startTime, Trace.Types.Timing.Micro(1000000));\n\n    assert.isFalse(framesToVisualize[1].isDropped);\n    assert.strictEqual(framesToVisualize[1].seqId, 102);\n    assert.strictEqual(framesToVisualize[1].startTime, Trace.Types.Timing.Micro(1000032));\n\n    // Pop frame 103, 104 (not visualized) and 105 from queue\n    framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(105);\n\n    assert.lengthOf(framesToVisualize, 2);\n\n    assert.isTrue(framesToVisualize[0].isDropped);\n    assert.strictEqual(framesToVisualize[0].seqId, 103);\n    assert.strictEqual(framesToVisualize[0].startTime, Trace.Types.Timing.Micro(1000048));\n\n    assert.isTrue(framesToVisualize[1].isDropped);\n    assert.strictEqual(framesToVisualize[1].seqId, 105);\n    assert.strictEqual(framesToVisualize[1].startTime, Trace.Types.Timing.Micro(1000080));\n\n    // Pop frame 106 from queue\n    framesToVisualize = beginFrameQueue.processPendingBeginFramesOnDrawFrame(106);\n\n    assert.lengthOf(framesToVisualize, 1);\n\n    assert.isTrue(framesToVisualize[0].isDropped);\n    assert.strictEqual(framesToVisualize[0].seqId, 106);\n    assert.strictEqual(framesToVisualize[0].startTime, Trace.Types.Timing.Micro(1000096));\n  });\n});\n"]}