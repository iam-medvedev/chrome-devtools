{"version":3,"file":"UserTimingsHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/UserTimingsHandler.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {\n  type ConsoleAPIExtensionTestData,\n  makeCompleteEvent,\n  makeTimingEventWithConsoleExtensionData,\n  makeTimingEventWithPerformanceExtensionData,\n  type PerformanceAPIExtensionTestData,\n} from '../../../testing/TraceHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../trace.js';\n\nexport async function createEventDataFromTestInput(\n    extensionData: Array<PerformanceAPIExtensionTestData|ConsoleAPIExtensionTestData>):\n    Promise<Trace.Handlers.ModelHandlers.UserTimings.UserTimingsData> {\n  const events: Trace.Types.Events.Event[] = [];\n  for (const data of extensionData) {\n    if ('detail' in data) {\n      events.push(...makeTimingEventWithPerformanceExtensionData(data));\n    } else {\n      events.push(makeTimingEventWithConsoleExtensionData(data));\n    }\n  }\n  events.sort((e1, e2) => e1.ts - e2.ts);\n  return await createUserTimingsDataFromEvents(events);\n}\n\nasync function createUserTimingsDataFromEvents(events: Trace.Types.Events.Event[]):\n    Promise<Trace.Handlers.ModelHandlers.UserTimings.UserTimingsData> {\n  Trace.Helpers.SyntheticEvents.SyntheticEventsManager.createAndActivate(events);\n\n  Trace.Handlers.ModelHandlers.UserTimings.reset();\n  for (const event of events) {\n    Trace.Handlers.ModelHandlers.UserTimings.handleEvent(event);\n  }\n  await Trace.Handlers.ModelHandlers.UserTimings.finalize();\n  return Trace.Handlers.ModelHandlers.UserTimings.data();\n}\n\ndescribeWithEnvironment('UserTimingsHandler', function() {\n  let timingsData: Trace.Handlers.ModelHandlers.UserTimings.UserTimingsData;\n  describe('performance timings', function() {\n    async function getTimingsDataFromEvents(events: readonly Trace.Types.Events.Event[]):\n        Promise<Trace.Handlers.ModelHandlers.UserTimings.UserTimingsData> {\n      Trace.Handlers.ModelHandlers.UserTimings.reset();\n      for (const event of events) {\n        Trace.Handlers.ModelHandlers.UserTimings.handleEvent(event);\n      }\n      await Trace.Handlers.ModelHandlers.UserTimings.finalize();\n      return Trace.Handlers.ModelHandlers.UserTimings.data();\n    }\n    beforeEach(async function() {\n      const events = await TraceLoader.rawEvents(this, 'user-timings.json.gz');\n      timingsData = await getTimingsDataFromEvents(events);\n    });\n    afterEach(function() {\n      Trace.Handlers.ModelHandlers.UserTimings.reset();\n    });\n    describe('performance.measure events parsing', function() {\n      it('parses the start and end events and returns a list of blocks', async () => {\n        assert.lengthOf(timingsData.performanceMeasures, 3);\n        assert.strictEqual(\n            Trace.Helpers.Trace.extractId(timingsData.performanceMeasures[1]),\n            'blink.user_timing:0x9072211:first measure');\n        assert.strictEqual(timingsData.performanceMeasures[1].name, 'first measure');\n        assert.strictEqual(\n            Trace.Helpers.Trace.extractId(timingsData.performanceMeasures[0]),\n            'blink.user_timing:0x6ece31c8:second measure');\n        assert.strictEqual(timingsData.performanceMeasures[0].name, 'second measure');\n        assert.strictEqual(\n            Trace.Helpers.Trace.extractId(timingsData.performanceMeasures[2]),\n            'blink.user_timing:0x10c31982:third measure');\n        assert.strictEqual(timingsData.performanceMeasures[2].name, 'third measure');\n\n        // Ensure we assign begin + end the right way round by making sure the\n        // beginEvent is the ASYNC_NESTABLE_START and the endEvent is the\n        // ASYNC_NESTABLE_END.\n        for (let i = 0; i < timingsData.performanceMeasures.length; i++) {\n          assert.strictEqual(\n              timingsData.performanceMeasures[i].args.data.beginEvent.ph,\n              Trace.Types.Events.Phase.ASYNC_NESTABLE_START);\n          assert.strictEqual(\n              timingsData.performanceMeasures[i].args.data.endEvent.ph, Trace.Types.Events.Phase.ASYNC_NESTABLE_END);\n        }\n      });\n\n      it('sorts the blocks to ensure they are in time order', async function() {\n        const events = await TraceLoader.rawEvents(this, 'user-timings.json.gz');\n        Trace.Handlers.ModelHandlers.UserTimings.reset();\n        // Reverse the array so that the events are in the wrong order.\n        // This _shouldn't_ ever happen in a real trace, but it's best for us to\n        // sort the blocks once we've parsed them just in case.\n        const reversed = events.slice().reverse();\n        for (const event of reversed) {\n          Trace.Handlers.ModelHandlers.UserTimings.handleEvent(event);\n        }\n        await Trace.Handlers.ModelHandlers.UserTimings.finalize();\n        const data = Trace.Handlers.ModelHandlers.UserTimings.data();\n        assert.lengthOf(data.performanceMeasures, 3);\n        assert.isTrue(data.performanceMeasures[0].ts <= data.performanceMeasures[1].ts);\n        assert.isTrue(data.performanceMeasures[1].ts <= data.performanceMeasures[2].ts);\n      });\n\n      it('calculates the duration correctly from the begin/end event timestamps', async function() {\n        for (const timing of timingsData.performanceMeasures) {\n          // Ensure for each timing pair we've set the dur correctly.\n          assert.strictEqual(timing.dur, timing.args.data.endEvent.ts - timing.args.data.beginEvent.ts);\n        }\n      });\n      it('correctly extracts nested timings in the correct order', async function() {\n        const {parsedTrace} = await TraceLoader.traceEngine(this, 'user-timings-complex.json.gz');\n        const complexTimingsData = parsedTrace.UserTimings;\n        const userTimingEventNames = [];\n        for (const event of complexTimingsData.performanceMeasures) {\n          // This trace has multiple user timings events, in this instance we only care about the ones that include 'nested' in the name.\n          if (event.name.includes('nested')) {\n            userTimingEventNames.push(event.name);\n          }\n        }\n        assert.deepEqual(userTimingEventNames, [\n          'nested-a',\n          'nested-b',\n          'nested-c',\n          'nested-d',\n        ]);\n      });\n      it('correctly orders measures when one measure encapsulates the others', async function() {\n        const events = await TraceLoader.rawEvents(this, 'user-timings-complex.json.gz');\n        const complexTimingsData = await getTimingsDataFromEvents(events);\n        const userTimingEventNames = [];\n        for (const event of complexTimingsData.performanceMeasures) {\n          // This trace has multiple user timings events, in this instance we only care about the ones that start with 'duration'\n          if (event.name.startsWith('duration')) {\n            userTimingEventNames.push(event.name);\n          }\n        }\n        assert.deepEqual(userTimingEventNames, [\n          'durationTimeTotal',\n          'durationTime1',\n          'durationTime2',\n        ]);\n      });\n    });\n    describe('performance.mark events parsing', function() {\n      it('parses performance mark events correctly', function() {\n        assert.lengthOf(timingsData.performanceMarks, 2);\n        assert.strictEqual(timingsData.performanceMarks[0].name, 'mark1');\n        assert.strictEqual(timingsData.performanceMarks[1].name, 'mark3');\n      });\n    });\n  });\n\n  describe('console timings', function() {\n    beforeEach(async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'timings-track.json.gz');\n      timingsData = parsedTrace.UserTimings;\n    });\n    describe('console.time events parsing', function() {\n      it('parses the start and end events and returns a list of blocks', async () => {\n        assert.lengthOf(timingsData.consoleTimings, 3);\n        assert.strictEqual(\n            Trace.Helpers.Trace.extractId(timingsData.consoleTimings[0]),\n            'blink.console:0x12c00282160:first console time');\n        assert.strictEqual(timingsData.consoleTimings[0].name, 'first console time');\n        assert.strictEqual(\n            Trace.Helpers.Trace.extractId(timingsData.consoleTimings[1]),\n            'blink.console:0x12c00282160:second console time');\n        assert.strictEqual(timingsData.consoleTimings[1].name, 'second console time');\n\n        // Ensure we assign begin + end the right way round by making sure the\n        // beginEvent is the ASYNC_NESTABLE_START and the endEvent is the\n        // ASYNC_NESTABLE_END.\n        for (let i = 0; i < timingsData.consoleTimings.length; i++) {\n          assert.strictEqual(\n              timingsData.consoleTimings[i].args.data.beginEvent.ph, Trace.Types.Events.Phase.ASYNC_NESTABLE_START);\n          assert.strictEqual(\n              timingsData.consoleTimings[i].args.data.endEvent.ph, Trace.Types.Events.Phase.ASYNC_NESTABLE_END);\n        }\n      });\n\n      it('sorts the blocks to ensure they are in time order', async function() {\n        const events = await TraceLoader.rawEvents(this, 'timings-track.json.gz');\n        Trace.Handlers.ModelHandlers.UserTimings.reset();\n        // Reverse the array so that the events are in the wrong order.\n        // This _shouldn't_ ever happen in a real trace, but it's best for us to\n        // sort the blocks once we've parsed them just in case.\n        const reversed = events.slice().reverse();\n        for (const event of reversed) {\n          Trace.Handlers.ModelHandlers.UserTimings.handleEvent(event);\n        }\n        await Trace.Handlers.ModelHandlers.UserTimings.finalize();\n        const data = Trace.Handlers.ModelHandlers.UserTimings.data();\n        assert.lengthOf(data.consoleTimings, 3);\n        assert.isTrue(data.consoleTimings[0].ts <= data.consoleTimings[1].ts);\n        assert.isTrue(data.consoleTimings[1].ts <= data.consoleTimings[2].ts);\n      });\n\n      it('calculates the duration correctly from the begin/end event timestamps', async () => {\n        for (const consoleTiming of timingsData.consoleTimings) {\n          // Ensure for each timing pair we've set the dur correctly.\n          assert.strictEqual(\n              consoleTiming.dur, consoleTiming.args.data.endEvent.ts - consoleTiming.args.data.beginEvent.ts);\n        }\n      });\n    });\n    describe('console.timestamp events parsing', function() {\n      it('parses console.timestamp events correctly', async function() {\n        assert.lengthOf(timingsData.timestampEvents, 3);\n        assert.strictEqual(timingsData.timestampEvents[0].args.data?.message, 'a timestamp');\n        assert.strictEqual(timingsData.timestampEvents[1].args.data?.message, 'another timestamp');\n        assert.strictEqual(timingsData.timestampEvents[2].args.data?.message, 'yet another timestamp');\n      });\n    });\n  });\n\n  describe('UserTiming::Measure events parsing', function() {\n    it('stores user timing events by trace id', async function() {\n      const userTimingMeasure = makeCompleteEvent(Trace.Types.Events.Name.USER_TIMING_MEASURE, 0, 100, 'cat', 0, 0) as\n          Trace.Types.Events.UserTimingMeasure;\n      userTimingMeasure.args.traceId = 1;\n      Trace.Handlers.ModelHandlers.UserTimings.handleEvent(userTimingMeasure);\n      await Trace.Handlers.ModelHandlers.UserTimings.finalize();\n      const data = Trace.Handlers.ModelHandlers.UserTimings.data();\n      assert.lengthOf(data.measureTraceByTraceId, 1);\n      assert.deepEqual([...data.measureTraceByTraceId.entries()][0], [1, userTimingMeasure]);\n    });\n  });\n\n  describe('parsing user timings events', function() {\n    let userTimingsHandlerOutput: Trace.Handlers.ModelHandlers.UserTimings.UserTimingsData;\n    beforeEach(async function() {\n      userTimingsHandlerOutput = await createUserTimingsDataExample();\n    });\n    after(() => {\n      Trace.Handlers.ModelHandlers.UserTimings.reset();\n    });\n\n    function createUserTimingsDataExample(): Promise<Trace.Handlers.ModelHandlers.UserTimings.UserTimingsData> {\n      const extensionData: Array<ConsoleAPIExtensionTestData|PerformanceAPIExtensionTestData> = [\n        // Two events for Track 1 via PerformanceAPIExtensionTestData.\n        // Add B first, so that they get reordered alphabetically (A first, then B).\n        {\n          name: 'B-extension-track-1',\n          ts: 800,\n          dur: 100,\n          detail: {\n            devtools: {color: 'error', dataType: 'marker', track: 'Track 1'},\n          },\n        } as PerformanceAPIExtensionTestData,\n        {\n          name: 'A-extension-track-1',\n          ts: 800,\n          dur: 100,\n          detail: {\n            devtools: {color: 'error', dataType: 'marker', track: 'Track 1'},\n          },\n        } as PerformanceAPIExtensionTestData,\n\n        // Do the same for Track 2.\n        {\n          name: 'B-extension-track-2',\n          ts: 800,\n          dur: 100,\n          detail: {\n            devtools: {color: 'error', dataType: 'marker', track: 'Track 2'},\n          },\n        } as PerformanceAPIExtensionTestData,\n        {\n          name: 'A-extension-track-2',\n          ts: 800,\n          dur: 100,\n          detail: {\n            devtools: {color: 'error', dataType: 'marker', track: 'Track 2'},\n          },\n        } as PerformanceAPIExtensionTestData,\n\n        // Two events for Track 0 via ConsoleAPIExtensionTestData.\n        {\n          name: 'B-timestamp',\n          start: 600,\n          end: 700,\n          track: 'Track 0',\n          ts: 600,\n        } as ConsoleAPIExtensionTestData,\n        {\n          name: 'A-timestamp',\n          start: 600,\n          end: 700,\n          track: 'Track 0',\n          ts: 600,\n        } as ConsoleAPIExtensionTestData,\n\n        // Two events (for no track) which means they get added to the user timing track.\n        {\n          name: 'B-timing-track',\n          start: 800,\n          end: 900,\n          ts: 800,\n        } as PerformanceAPIExtensionTestData,\n        {\n          name: 'A-timing-track',\n          start: 800,\n          end: 900,\n          ts: 800,\n        } as PerformanceAPIExtensionTestData,\n      ];\n      return createEventDataFromTestInput(extensionData);\n    }\n\n    describe('user timings parsing', function() {\n      it('no console timings should have been parsed', async () => {\n        assert.lengthOf(userTimingsHandlerOutput.consoleTimings, 0);\n      });\n      it('parsing should reveal four timestamp events', async () => {\n        const events = userTimingsHandlerOutput.timestampEvents;\n        assert.lengthOf(events, 4);\n        assert.strictEqual(events[0].args.data?.message, 'A-timestamp');\n        assert.strictEqual(events[1].args.data?.message, 'B-timestamp');\n        assert.strictEqual(events[2].args.data?.message, 'A-timing-track');\n        assert.strictEqual(events[3].args.data?.message, 'B-timing-track');\n      });\n      it('no performance marks should have been parsed', async () => {\n        assert.lengthOf(userTimingsHandlerOutput.performanceMarks, 0);\n      });\n      it('parsing should reveal four performance measures', async () => {\n        const events = userTimingsHandlerOutput.performanceMeasures;\n        assert.lengthOf(events, 4);\n        assert.strictEqual(events[0].name, 'A-extension-track-1');\n        assert.strictEqual(events[1].name, 'B-extension-track-1');\n        assert.strictEqual(events[2].name, 'A-extension-track-2');\n        assert.strictEqual(events[3].name, 'B-extension-track-2');\n      });\n      it('no measure traces should have been set', async () => {\n        assert.lengthOf(userTimingsHandlerOutput.measureTraceByTraceId, 0);\n      });\n    });\n  });\n\n  describe('sorting function userTimingComparator', () => {\n    function makeFakeSyntheticEvent(\n        ts: number, dur: number, name: string, track: string): Trace.Types.Events.SyntheticEventPair {\n      const beginEvent = makeCompleteEvent(name, ts, dur, 'blink.user_timing', 0, 0) as unknown as\n          Trace.Types.Events.PerformanceMeasureBegin;\n      beginEvent.ph = Trace.Types.Events.Phase.ASYNC_NESTABLE_START;\n      beginEvent.args.detail = JSON.stringify({devtools: {track}});\n      const endEvent = makeCompleteEvent(name, ts + dur, 0, 'blink.user_timing', 0, 0) as unknown as\n          Trace.Types.Events.PerformanceMeasureEnd;\n      endEvent.ph = Trace.Types.Events.Phase.ASYNC_NESTABLE_END;\n      const syntheticEvent = Trace.Helpers.SyntheticEvents.SyntheticEventsManager\n                                 .registerSyntheticEvent<Trace.Types.Events.SyntheticUserTimingPair>({\n                                   rawSourceEvent: beginEvent,\n                                   name,\n                                   cat: 'blink.user_timing',\n                                   ts: Trace.Types.Timing.Micro(ts),\n                                   dur: Trace.Types.Timing.Micro(dur),\n                                   args: {data: {beginEvent, endEvent}},\n                                   ph: Trace.Types.Events.Phase.ASYNC_NESTABLE_START,\n                                   pid: Trace.Types.Events.ProcessID(0),\n                                   tid: Trace.Types.Events.ThreadID(0),\n                                 });\n      return syntheticEvent;\n    }\n\n    function makeFakeConsoleTimestampEvent(\n        start: number, end: number, name: string, track: string): Trace.Types.Events.ConsoleTimeStamp {\n      return {\n        cat: 'devtools.timeline',\n        pid: Trace.Types.Events.ProcessID(2017),\n        tid: Trace.Types.Events.ThreadID(259),\n        name: Trace.Types.Events.Name.TIME_STAMP,\n        args: {\n          data: {\n            message: name,\n            start,\n            end,\n            track,\n          },\n        },\n        ts: Trace.Types.Timing.Micro(start),\n        ph: Trace.Types.Events.Phase.INSTANT,\n      };\n    }\n\n    function sortAll(events: Array<Trace.Types.Events.SyntheticEventPair|Trace.Types.Events.ConsoleTimeStamp>) {\n      events.sort((a, b) => Trace.Handlers.ModelHandlers.UserTimings.userTimingComparator(a, b, [...events]));\n    }\n\n    it('sorts synthetic events by start time in ASC order', () => {\n      const event1 = makeFakeSyntheticEvent(1, 1, 'E1', 'Track A');\n      const event2 = makeFakeSyntheticEvent(2, 1, 'E2', 'Track A');\n      const event3 = makeFakeSyntheticEvent(3, 1, 'E3', 'Track A');\n      const events = [event3, event1, event2];\n\n      sortAll(events);\n      assert.deepEqual(events, [event1, event2, event3]);\n    });\n\n    it('sorts synthetic events by longest duration if start is the same for all', () => {\n      const event1 = makeFakeSyntheticEvent(1, 1, 'E1', 'Track A');\n      const event2 = makeFakeSyntheticEvent(1, 2, 'E2', 'Track A');\n      const event3 = makeFakeSyntheticEvent(1, 3, 'E3', 'Track A');\n      const events = [event1, event2, event3];\n\n      sortAll(events);\n      assert.deepEqual(events, [event3, event2, event1]);\n    });\n\n    it('flips synthetic events if the timestamps are the same', () => {\n      const event1 = makeFakeSyntheticEvent(1, 2, 'E1', 'Track A');\n      const event2 = makeFakeSyntheticEvent(1, 2, 'E2', 'Track A');\n      const event3 = makeFakeSyntheticEvent(2, 4, 'E3', 'Track B');\n      const event4 = makeFakeSyntheticEvent(2, 4, 'E4', 'Track B');\n      const events = [event1, event2, event3, event4];\n\n      sortAll(events);\n      assert.deepEqual(events, [event2, event1, event4, event3]);\n    });\n\n    it('wont flip synthetic events across tracks', () => {\n      const event1 = makeFakeSyntheticEvent(1, 2, 'E1', 'Track A');\n      const event2 = makeFakeSyntheticEvent(1, 2, 'E2', 'Track B');\n      const event3 = makeFakeSyntheticEvent(1, 2, 'E3', 'Track C');\n      const event4 = makeFakeSyntheticEvent(1, 2, 'E4', 'Track D');\n      const events = [event1, event2, event3, event4];\n\n      sortAll(events);\n      assert.deepEqual(events, [event1, event2, event3, event4]);\n    });\n\n    it('sorts three identical synthetic events correctly', () => {\n      const event1 = makeFakeSyntheticEvent(1, 2, 'E1', 'Track A');\n      const event2 = makeFakeSyntheticEvent(1, 2, 'E2', 'Track A');\n      const event3 = makeFakeSyntheticEvent(1, 2, 'E3', 'Track A');\n      const events = [event1, event2, event3];\n\n      sortAll(events);\n      assert.deepEqual(events, [event3, event2, event1]);\n    });\n\n    it('sorts console timestamps by start time in ASC order', () => {\n      const event1 = makeFakeConsoleTimestampEvent(1, 1, 'E1', 'Track A');\n      const event2 = makeFakeConsoleTimestampEvent(2, 1, 'E2', 'Track A');\n      const event3 = makeFakeConsoleTimestampEvent(3, 1, 'E3', 'Track A');\n      const events = [event3, event1, event2];\n\n      sortAll(events);\n      assert.deepEqual(events, [event1, event2, event3]);\n    });\n\n    it('sorts console timestamps by longest duration if start is the same for all', () => {\n      const event1 = makeFakeConsoleTimestampEvent(1, 1, 'E1', 'Track A');\n      const event2 = makeFakeConsoleTimestampEvent(1, 2, 'E2', 'Track A');\n      const event3 = makeFakeConsoleTimestampEvent(1, 3, 'E3', 'Track A');\n      const events = [event1, event2, event3];\n\n      sortAll(events);\n      assert.deepEqual(events, [event3, event2, event1]);\n    });\n\n    it('flips console timestamps if the timestamps are the same', () => {\n      const event1 = makeFakeConsoleTimestampEvent(1, 3, 'E1', 'Track A');\n      const event2 = makeFakeConsoleTimestampEvent(1, 3, 'E2', 'Track A');\n      const event3 = makeFakeConsoleTimestampEvent(2, 6, 'E3', 'Track B');\n      const event4 = makeFakeConsoleTimestampEvent(2, 6, 'E4', 'Track B');\n      const events = [event1, event2, event3, event4];\n\n      sortAll(events);\n      assert.deepEqual(events, [event2, event1, event4, event3]);\n    });\n\n    it('wont flip console timestamps across tracks', () => {\n      const event1 = makeFakeConsoleTimestampEvent(1, 2, 'E1', 'Track A');\n      const event2 = makeFakeConsoleTimestampEvent(1, 2, 'E2', 'Track B');\n      const event3 = makeFakeConsoleTimestampEvent(1, 2, 'E3', 'Track C');\n      const event4 = makeFakeConsoleTimestampEvent(1, 2, 'E4', 'Track D');\n      const events = [event1, event2, event3, event4];\n\n      sortAll(events);\n      assert.deepEqual(events, [event1, event2, event3, event4]);\n    });\n\n    it('sorts three identical console timestamp events', () => {\n      const event1 = makeFakeConsoleTimestampEvent(1, 2, 'E1', 'Track A');\n      const event2 = makeFakeConsoleTimestampEvent(1, 2, 'E2', 'Track A');\n      const event3 = makeFakeConsoleTimestampEvent(1, 2, 'E3', 'Track A');\n      const events = [event1, event2, event3];\n\n      sortAll(events);\n      assert.deepEqual(events, [event3, event2, event1]);\n    });\n\n    // Mixed synthetic events and console timestamps.\n\n    it('sorts mixed events by start time in ASC order', () => {\n      const event1a = makeFakeSyntheticEvent(1, 1, 'E1a', 'Track A');\n      const event1b = makeFakeConsoleTimestampEvent(1, 1, 'E1b', 'Track A');\n      const event2a = makeFakeSyntheticEvent(2, 1, 'E2a', 'Track A');\n      const event2b = makeFakeConsoleTimestampEvent(2, 1, 'E2b', 'Track A');\n      const event3a = makeFakeSyntheticEvent(3, 1, 'E3a', 'Track A');\n      const event3b = makeFakeConsoleTimestampEvent(3, 1, 'E3b', 'Track A');\n      const events = [event3b, event3a, event1b, event1a, event2b, event2a];\n\n      sortAll(events);\n      assert.deepEqual(events, [event1a, event1b, event2a, event2b, event3a, event3b]);\n    });\n\n    it('wont flip mixed events across tracks', () => {\n      const event1a = makeFakeSyntheticEvent(1, 2, 'E1a', 'Track A');\n      const event2a = makeFakeSyntheticEvent(1, 2, 'E2a', 'Track B');\n      const event3a = makeFakeSyntheticEvent(1, 2, 'E3a', 'Track C');\n      const event4a = makeFakeSyntheticEvent(1, 2, 'E4a', 'Track D');\n      const event1b = makeFakeConsoleTimestampEvent(1, 2, 'E1b', 'Track E');\n      const event2b = makeFakeConsoleTimestampEvent(1, 2, 'E2b', 'Track F');\n      const event3b = makeFakeConsoleTimestampEvent(1, 2, 'E3b', 'Track G');\n      const event4b = makeFakeConsoleTimestampEvent(1, 2, 'E4b', 'Track H');\n      const events = [event1a, event2a, event3a, event4a, event1b, event2b, event3b, event4b];\n\n      sortAll(events);\n      assert.deepEqual(events, [event1a, event2a, event3a, event4a, event1b, event2b, event3b, event4b]);\n    });\n  });\n});\n"]}