{"version":3,"file":"SelectorStatsHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/SelectorStatsHandler.test.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,WAAW,EAAC,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,KAAK,MAAM,aAAa,CAAC;AAErC,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,EAAE,CAAC,yDAAyD,EAAE,KAAK;QACjE,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAEnD,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,wBAAwB,CAAC,CAAC;QAC3E,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAChE,CAAC;QACD,MAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;QAE/D,yDAAyD;QACzD,qBAAqB;QACrB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAE1D,8DAA8D;QAC9D,2EAA2E;QAC3E,sEAAsE;QACtE,4BAA4B;QAC5B,MAAM,eAAe,GAAG,YAAY,CAAC;QACrC,MAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC3C,OAAO,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,EAAE,KAAK,eAAe,CAAC;QACjF,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAE9B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,EAAE,8BAA8B,CAAC,CAAC;QAEhG,MAAM,YAAY,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QACxE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC1B,mDAAmD;QACnD,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../trace.js';\n\ndescribe('SelectorStatsHandler', () => {\n  it('associates timings and stats with each RecalcStyleEvent', async function() {\n    Trace.Handlers.ModelHandlers.SelectorStats.reset();\n\n    const events = await TraceLoader.rawEvents(this, 'selector-stats.json.gz');\n    for (const event of events) {\n      Trace.Handlers.ModelHandlers.SelectorStats.handleEvent(event);\n    }\n    const data = Trace.Handlers.ModelHandlers.SelectorStats.data();\n\n    // There are 10 RecalcStyle events that we expect to find\n    // SelectorStats for.\n    assert.strictEqual(data.dataForRecalcStyleEvent.size, 10);\n\n    // We need the first recalcStyleEvent that happened before the\n    // SelectorStats. This timestamp was found by looking through the trace and\n    // finding the first SelectorStats event, and then finding the closest\n    // previous RecalcStyleEvent\n    const targetTimeStamp = 400015719531;\n    const recalcStyleEvent = events.find(event => {\n      return Trace.Types.Events.isRecalcStyle(event) && event.ts === targetTimeStamp;\n    });\n    assert.isOk(recalcStyleEvent);\n\n    assert.isOk(Trace.Types.Events.isRecalcStyle(recalcStyleEvent), 'Event was of the wrong type.');\n\n    const selectorInfo = data.dataForRecalcStyleEvent.get(recalcStyleEvent);\n    assert.isOk(selectorInfo);\n    // Ensure that we dumped the timings into the event\n    assert.lengthOf(selectorInfo.timings, 325);\n  });\n});\n"]}