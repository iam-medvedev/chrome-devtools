{"version":3,"file":"EventsSerializer.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/trace/EventsSerializer.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {getMainThread} from '../../testing/TraceHelpers.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\n\nimport * as EventsSerializer from './EventsSerializer.js';\nimport * as Types from './types/types.js';\n\nfunction findFirstEntry(\n    allEntries: readonly Types.Events.Event[], predicate: (entry: Types.Events.Event) => boolean): Types.Events.Event {\n  const entry = allEntries.find(entry => predicate(entry));\n  if (!entry) {\n    throw new Error('Could not find expected entry.');\n  }\n  return entry;\n}\n\ndescribeWithEnvironment('EventsSerializer', () => {\n  it('correctly implements a bidirectional key <-> event mapping', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'basic-stack.json.gz');\n    const eventsSerializer = new EventsSerializer.EventsSerializer();\n    const mainThread = getMainThread(parsedTrace.Renderer);\n    // Find first 'Timer Fired' entry in the trace\n    const rawEntry = findFirstEntry(mainThread.entries, entry => {\n      return entry.name === 'TimerFire';\n    });\n\n    const syntheticEvent = parsedTrace.NetworkRequests.byTime[0];\n    const profileCall = findFirstEntry(mainThread.entries, entry => Types.Events.isProfileCall(entry));\n    const rawEntryKey = eventsSerializer.keyForEvent(rawEntry);\n    const syntheticEventKey = eventsSerializer.keyForEvent(syntheticEvent);\n    const profileCallKey = eventsSerializer.keyForEvent(profileCall);\n\n    // Test event -> key mappings\n    assert.deepEqual(rawEntryKey, 'r-8036');\n    assert.deepEqual(syntheticEventKey, 's-2078');\n    assert.deepEqual(profileCallKey, 'p-55385-259-38-4');\n\n    assert.isOk(rawEntryKey);\n    assert.isOk(syntheticEventKey);\n    assert.isOk(profileCallKey);\n\n    const resolvedRawEntry = eventsSerializer.eventForKey(rawEntryKey, parsedTrace);\n    const resolvedSyntheticEntry = eventsSerializer.eventForKey(syntheticEventKey, parsedTrace);\n    const resolvedProfileCall = eventsSerializer.eventForKey(profileCallKey, parsedTrace);\n\n    // Test key -> event mappings\n    assert.strictEqual(resolvedRawEntry, rawEntry);\n    assert.strictEqual(resolvedSyntheticEntry, syntheticEvent);\n    assert.strictEqual(resolvedProfileCall, profileCall);\n  });\n\n  it('correctly maps to and from legacy timeline frames', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n    const eventsSerializer = new EventsSerializer.EventsSerializer();\n\n    const frame = parsedTrace.Frames.frames.at(0);\n    assert.isOk(frame);\n\n    const frameKey = eventsSerializer.keyForEvent(frame);\n    assert.isOk(frameKey);\n    assert.strictEqual(frameKey, 'l-0');\n\n    const resolvedFrame = eventsSerializer.eventForKey(frameKey, parsedTrace);\n    assert.strictEqual(resolvedFrame, frame);\n  });\n});\n"]}