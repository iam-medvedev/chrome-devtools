{"version":3,"file":"Common.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/Common.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as CrUXManager from '../../crux-manager/crux-manager.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type * as Types from '../types/types.js';\n\nimport {getLogNormalScore} from './Statistics.js';\nimport type {InsightModels, InsightSet, TraceInsightSets} from './types.js';\n\nexport function getInsight<InsightName extends keyof InsightModels>(\n    insightName: InsightName, insights: TraceInsightSets|null, key: string|null): InsightModels[InsightName]|null {\n  if (!insights || !key) {\n    return null;\n  }\n\n  const insightSets = insights.get(key);\n  if (!insightSets) {\n    return null;\n  }\n\n  const insight = insightSets.model[insightName];\n  if (insight instanceof Error) {\n    return null;\n  }\n\n  // For some reason typescript won't narrow the type by removing Error, so do it manually.\n  return insight as InsightModels[InsightName];\n}\n\nexport function getLCP(insights: TraceInsightSets|null, key: string|null):\n    {value: Types.Timing.Micro, event: Types.Events.LargestContentfulPaintCandidate}|null {\n  const insight = getInsight('LCPPhases', insights, key);\n  if (!insight || !insight.lcpMs || !insight.lcpEvent) {\n    return null;\n  }\n\n  const value = Helpers.Timing.milliToMicro(insight.lcpMs);\n  return {value, event: insight.lcpEvent};\n}\n\nexport function getINP(insights: TraceInsightSets|null, key: string|null):\n    {value: Types.Timing.Micro, event: Types.Events.SyntheticInteractionPair}|null {\n  const insight = getInsight('InteractionToNextPaint', insights, key);\n  if (!insight?.longestInteractionEvent?.dur) {\n    return null;\n  }\n\n  const value = insight.longestInteractionEvent.dur;\n  return {value, event: insight.longestInteractionEvent};\n}\n\nexport function getCLS(\n    insights: TraceInsightSets|null, key: string|null): {value: number, worstShiftEvent: Types.Events.Event|null} {\n  const insight = getInsight('CLSCulprits', insights, key);\n  if (!insight) {\n    // Unlike the other metrics, there is always a value for CLS even with no data.\n    return {value: 0, worstShiftEvent: null};\n  }\n\n  // TODO(cjamcl): the CLS insight should be doing this for us.\n  let maxScore = 0;\n  let worstCluster;\n  for (const cluster of insight.clusters) {\n    if (cluster.clusterCumulativeScore > maxScore) {\n      maxScore = cluster.clusterCumulativeScore;\n      worstCluster = cluster;\n    }\n  }\n\n  return {value: maxScore, worstShiftEvent: worstCluster?.worstShiftEvent ?? null};\n}\n\nexport function evaluateLCPMetricScore(value: number): number {\n  return getLogNormalScore({p10: 2500, median: 4000}, value);\n}\n\nexport function evaluateINPMetricScore(value: number): number {\n  return getLogNormalScore({p10: 200, median: 500}, value);\n}\n\nexport function evaluateCLSMetricScore(value: number): number {\n  return getLogNormalScore({p10: 0.1, median: 0.25}, value);\n}\n\nexport interface CrUXFieldMetricTimingResult {\n  value: Types.Timing.Micro;\n  pageScope: CrUXManager.PageScope;\n}\nexport interface CrUXFieldMetricNumberResult {\n  value: number;\n  pageScope: CrUXManager.PageScope;\n}\nexport interface CrUXFieldMetricResults {\n  fcp: CrUXFieldMetricTimingResult|null;\n  lcp: CrUXFieldMetricTimingResult|null;\n  inp: CrUXFieldMetricTimingResult|null;\n  cls: CrUXFieldMetricNumberResult|null;\n}\n\nfunction getPageResult(cruxFieldData: CrUXManager.PageResult[], url: string, origin: string): CrUXManager.PageResult|\n    undefined {\n  return cruxFieldData.find(result => {\n    const key = (result['url-ALL'] || result['origin-ALL'])?.record.key;\n    return (key?.url && key.url === url) || (key?.origin && key.origin === origin);\n  });\n}\n\nfunction getMetricResult(\n    pageResult: CrUXManager.PageResult, name: CrUXManager.StandardMetricNames): CrUXFieldMetricNumberResult|null {\n  let value = pageResult['url-ALL']?.record.metrics[name]?.percentiles?.p75;\n  if (typeof value === 'string') {\n    value = Number(value);\n  }\n  if (typeof value === 'number' && Number.isFinite(value)) {\n    return {value, pageScope: 'url'};\n  }\n\n  value = pageResult['origin-ALL']?.record.metrics[name]?.percentiles?.p75;\n  if (typeof value === 'string') {\n    value = Number(value);\n  }\n  if (typeof value === 'number' && Number.isFinite(value)) {\n    return {value, pageScope: 'origin'};\n  }\n\n  return null;\n}\n\nfunction getMetricTimingResult(\n    pageResult: CrUXManager.PageResult, name: CrUXManager.StandardMetricNames): CrUXFieldMetricTimingResult|null {\n  const result = getMetricResult(pageResult, name);\n  if (result) {\n    const valueMs = result.value as Types.Timing.Milli;\n    return {value: Helpers.Timing.milliToMicro(valueMs), pageScope: result.pageScope};\n  }\n\n  return null;\n}\n\nexport function getFieldMetricsForInsightSet(\n    insightSet: InsightSet, metadata: Types.File.MetaData|null): CrUXFieldMetricResults|null {\n  const cruxFieldData = metadata?.cruxFieldData;\n  if (!cruxFieldData) {\n    return null;\n  }\n\n  const pageResult = getPageResult(cruxFieldData, insightSet.url.href, insightSet.url.origin);\n  if (!pageResult) {\n    return null;\n  }\n\n  return {\n    fcp: getMetricTimingResult(pageResult, 'first_contentful_paint'),\n    lcp: getMetricTimingResult(pageResult, 'largest_contentful_paint'),\n    inp: getMetricTimingResult(pageResult, 'interaction_to_next_paint'),\n    cls: getMetricResult(pageResult, 'cumulative_layout_shift'),\n  };\n}\n\nexport function calculateMetricWeightsForSorting(\n    insightSet: InsightSet, metadata: Types.File.MetaData|null): {lcp: number, inp: number, cls: number} {\n  const weights = {\n    lcp: 1 / 3,\n    inp: 1 / 3,\n    cls: 1 / 3,\n  };\n\n  const cruxFieldData = metadata?.cruxFieldData;\n  if (!cruxFieldData) {\n    return weights;\n  }\n\n  const fieldMetrics = getFieldMetricsForInsightSet(insightSet, metadata);\n  if (!fieldMetrics) {\n    return weights;\n  }\n\n  const fieldLcp = fieldMetrics.lcp?.value ?? null;\n  const fieldInp = fieldMetrics.inp?.value ?? null;\n  const fieldCls = fieldMetrics.cls?.value ?? null;\n  const fieldLcpScore = fieldLcp !== null ? evaluateLCPMetricScore(fieldLcp) : 0;\n  const fieldInpScore = fieldInp !== null ? evaluateINPMetricScore(fieldInp) : 0;\n  const fieldClsScore = fieldCls !== null ? evaluateCLSMetricScore(fieldCls) : 0;\n  const fieldLcpScoreInverted = 1 - fieldLcpScore;\n  const fieldInpScoreInverted = 1 - fieldInpScore;\n  const fieldClsScoreInverted = 1 - fieldClsScore;\n  const invertedSum = fieldLcpScoreInverted + fieldInpScoreInverted + fieldClsScoreInverted;\n  if (!invertedSum) {\n    return weights;\n  }\n\n  weights.lcp = fieldLcpScoreInverted / invertedSum;\n  weights.inp = fieldInpScoreInverted / invertedSum;\n  weights.cls = fieldClsScoreInverted / invertedSum;\n\n  return weights;\n}\n"]}