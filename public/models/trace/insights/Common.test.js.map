{"version":3,"file":"Common.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/Common.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B,OAAO,EAAC,uBAAuB,EAAC,MAAM,wCAAwC,CAAC;AAC/E,OAAO,EAAC,eAAe,EAAE,YAAY,EAAC,MAAM,oCAAoC,CAAC;AAGjF,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,MAAM,EAAC,gCAAgC,EAAE,6BAA6B,EAAC,GAAG,QAAQ,CAAC,MAAM,CAAC;AAE1F,uBAAuB,CAAC,QAAQ,EAAE;IAChC,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,KAAK,UAAU,OAAO,CAAC,WAAsC,EAAE,SAAiB;YAC9E,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAC,GAAG,MAAM,YAAY,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YAC9E,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;YACtC,CAAC;YAED,MAAM,QAAQ,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,CAAC,CAAC;YAC/E,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,EAAE,CAAC;gBACtC,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;YAC3C,CAAC;YACD,MAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;YACtD,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAC/C,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACzC,CAAC;YAED,+BAA+B;YAC/B,MAAM,cAAc,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;YAEjD,OAAO,EAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,EAAC,CAAC;QAChD,CAAC;QAED,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,EAAC,UAAU,EAAE,QAAQ,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,wBAAwB,CAAC,CAAC;YAE7E,mDAAmD;YACnD,QAAQ,CAAC,aAAa,GAAG,SAAS,CAAC;YACnC,IAAI,OAAO,GAAG,gCAAgC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YACrE,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC;YAEhE,QAAQ,CAAC,aAAa,GAAG,EAAE,CAAC;YAC5B,OAAO,GAAG,gCAAgC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YACjE,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,EAAC,UAAU,EAAE,QAAQ,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,wBAAwB,CAAC,CAAC;YAE7E,MAAM,OAAO,GAAG,gCAAgC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YACvE,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,EAAC,CAAC,CAAC;QAC3G,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,MAAM,QAAQ,GAAG,6BAA6B,CAAC;QAC/C,MAAM,QAAQ,GAAG,CAAC,EAAC,IAAI,EAAE,kBAAkB,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC;QAC7D,MAAM,WAAW,GAAG,CAAC,OAKA,EAAwC,EAAE;YAC7D,MAAM,OAAO,GAA2D;gBACtE,IAAI,EAAE;oBACJ,IAAI,EAAE;wBACJ,iBAAiB,EAAE,OAAO,CAAC,YAAY,IAAI,CAAC;wBAC5C,iBAAiB,EAAE,OAAO,CAAC,YAAY,IAAI,CAAC;wBAC5C,YAAY,EAAE,OAAO,CAAC,YAAY;wBAClC,eAAe,EAAE,OAAO,CAAC,eAAe,IAAI,EAAE;qBAC/C;iBACF;aACF,CAAC;YACF,OAAO,OAA+C,CAAC;QACzD,CAAC,CAAC;QAEF,EAAE,CAAC,mFAAmF,EAAE,GAAG,EAAE;YAC3F,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,8DAA2C,EAAE,GAAG,CAAC,CAAC;YAC7F,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,sDAAuC,EAAE,GAAG,CAAC,CAAC;YACzF,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,0DAAyC,EAAE,GAAG,CAAC,CAAC;YAC3F,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,oDAAsC,EAAE,GAAG,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;YACtE,MAAM,YAAY,8DAA2C,CAAC;YAC9D,MAAM,OAAO,GAAG,WAAW,CAAC,EAAC,YAAY,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,YAAY,EAAE,eAAe,EAAE,QAAQ,EAAC,CAAC,CAAC;YAChH,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;YACtD,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;YAC1E,MAAM,YAAY,8DAA2C,CAAC;YAC9D,MAAM,OAAO,GAAG,WAAW,CAAC,EAAC,YAAY,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,YAAY,EAAE,eAAe,EAAE,EAAE,EAAC,CAAC,CAAC;YACzG,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;YACtD,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,2CAA2C;QAC3C,EAAE,CAAC,wEAAwE,EAAE,GAAG,EAAE;YAChF,MAAM,YAAY,oDAAsC,CAAC;YACzD,MAAM,OAAO,GAAG,WAAW,CAAC,EAAC,YAAY,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,YAAY,EAAE,eAAe,EAAE,QAAQ,EAAC,CAAC,CAAC;YAC/G,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,EAAE,GAAG,sDAAuC,CAAC;YAC5E,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,YAAY,oDAAsC,CAAC;YACzD,MAAM,OAAO,GAAG,WAAW,CAAC,EAAC,YAAY,EAAE,IAAI,EAAE,YAAY,EAAE,eAAe,EAAE,EAAE,EAAC,CAAC,CAAC;YACrF,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,EAAE,GAAG,sDAAuC,CAAC;YAC5E,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAE,kCAAkC;QACrE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,YAAY,oDAAsC,CAAC;YACzD,MAAM,OAAO,GAAG,WAAW,CAAC,EAAC,YAAY,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,EAAE,YAAY,EAAE,eAAe,EAAE,EAAE,EAAC,CAAC,CAAC;YACtG,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,EAAE,GAAG,sDAAuC,CAAC;YAC5E,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAE,kCAAkC;QACrE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {RecursivePartial} from '../../../core/platform/TypescriptUtilities.js';\nimport * as Protocol from '../../../generated/protocol.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {getFirstOrError, processTrace} from '../../../testing/InsightHelpers.js';\nimport type * as Types from '../types/types.js';\n\nimport * as Insights from './insights.js';\n\nconst {calculateMetricWeightsForSorting, estimateCompressedContentSize} = Insights.Common;\n\ndescribeWithEnvironment('Common', function() {\n  describe('calculateMetricWeightsForSorting', () => {\n    async function process(testContext: Mocha.Suite|Mocha.Context, traceFile: string) {\n      const {data, insights, metadata} = await processTrace(testContext, traceFile);\n      if (!metadata) {\n        throw new Error('missing metadata');\n      }\n\n      const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n      if (!firstNav.args.data?.navigationId) {\n        throw new Error('expected navigationId');\n      }\n      const insightSetKey = firstNav.args.data.navigationId;\n      const insightSet = insights.get(insightSetKey);\n      if (!insightSet) {\n        throw new Error('missing insight set');\n      }\n\n      // Clone so it may be modified.\n      const clonedMetadata = structuredClone(metadata);\n\n      return {insightSet, metadata: clonedMetadata};\n    }\n\n    it('returns default weights when there is no field data', async () => {\n      const {insightSet, metadata} = await process(this, 'image-delivery.json.gz');\n\n      // No field data defaults to even split of weights.\n      metadata.cruxFieldData = undefined;\n      let weights = calculateMetricWeightsForSorting(insightSet, metadata);\n      assert.deepEqual(weights, {lcp: 1 / 3, inp: 1 / 3, cls: 1 / 3});\n\n      metadata.cruxFieldData = [];\n      weights = calculateMetricWeightsForSorting(insightSet, metadata);\n      assert.deepEqual(weights, {lcp: 1 / 3, inp: 1 / 3, cls: 1 / 3});\n    });\n\n    it('returns weights based on field data', async () => {\n      const {insightSet, metadata} = await process(this, 'image-delivery.json.gz');\n\n      const weights = calculateMetricWeightsForSorting(insightSet, metadata);\n      assert.deepEqual(weights, {lcp: 0.07778127820223579, inp: 0.5504200439526509, cls: 0.37179867784511333});\n    });\n  });\n\n  describe('#estimateCompressedContentSize', () => {\n    const estimate = estimateCompressedContentSize;\n    const encoding = [{name: 'Content-Encoding', value: 'gzip'}];\n    const makeRequest = (partial: {\n                          resourceType: Protocol.Network.ResourceType,\n                          transferSize?: number,\n                          resourceSize?: number,\n                          responseHeaders?: Array<{name: string, value: string}>,\n                        }): Types.Events.SyntheticNetworkRequest => {\n      const request: RecursivePartial<Types.Events.SyntheticNetworkRequest> = {\n        args: {\n          data: {\n            encodedDataLength: partial.transferSize ?? 0,\n            decodedBodyLength: partial.resourceSize ?? 0,\n            resourceType: partial.resourceType,\n            responseHeaders: partial.responseHeaders ?? [],\n          }\n        },\n      };\n      return request as Types.Events.SyntheticNetworkRequest;\n    };\n\n    it('should estimate by resource type compression ratio when no network info available', () => {\n      assert.strictEqual(estimate(undefined, 1000, Protocol.Network.ResourceType.Stylesheet), 200);\n      assert.strictEqual(estimate(undefined, 1000, Protocol.Network.ResourceType.Script), 330);\n      assert.strictEqual(estimate(undefined, 1000, Protocol.Network.ResourceType.Document), 330);\n      assert.strictEqual(estimate(undefined, 1000, Protocol.Network.ResourceType.Other), 500);\n    });\n\n    it('should return transferSize when asset matches and is encoded', () => {\n      const resourceType = Protocol.Network.ResourceType.Stylesheet;\n      const request = makeRequest({transferSize: 1234, resourceSize: 10000, resourceType, responseHeaders: encoding});\n      const result = estimate(request, 10000, resourceType);\n      assert.strictEqual(result, 1234);\n    });\n\n    it('should return resourceSize when asset matches and is not encoded', () => {\n      const resourceType = Protocol.Network.ResourceType.Stylesheet;\n      const request = makeRequest({transferSize: 1235, resourceSize: 1234, resourceType, responseHeaders: []});\n      const result = estimate(request, 10000, resourceType);\n      assert.strictEqual(result, 1234);\n    });\n\n    // Ex: JS script embedded in HTML response.\n    it('should estimate by network compression ratio when asset does not match', () => {\n      const resourceType = Protocol.Network.ResourceType.Other;\n      const request = makeRequest({resourceSize: 2000, transferSize: 1000, resourceType, responseHeaders: encoding});\n      const result = estimate(request, 100, Protocol.Network.ResourceType.Script);\n      assert.strictEqual(result, 50);\n    });\n\n    it('should not error when missing resource size', () => {\n      const resourceType = Protocol.Network.ResourceType.Other;\n      const request = makeRequest({transferSize: 1000, resourceType, responseHeaders: []});\n      const result = estimate(request, 100, Protocol.Network.ResourceType.Script);\n      assert.strictEqual(result, 33);  // uses default compression ratio.\n    });\n\n    it('should not error when resource size is 0', () => {\n      const resourceType = Protocol.Network.ResourceType.Other;\n      const request = makeRequest({transferSize: 1000, resourceSize: 0, resourceType, responseHeaders: []});\n      const result = estimate(request, 100, Protocol.Network.ResourceType.Script);\n      assert.strictEqual(result, 33);  // uses default compression ratio.\n    });\n  });\n});\n"]}