{"version":3,"file":"Common.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/Common.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,uBAAuB,EAAC,MAAM,wCAAwC,CAAC;AAC/E,OAAO,EAAC,eAAe,EAAE,YAAY,EAAC,MAAM,oCAAoC,CAAC;AAEjF,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,MAAM,EAAC,gCAAgC,EAAC,GAAG,QAAQ,CAAC,MAAM,CAAC;AAE3D,uBAAuB,CAAC,QAAQ,EAAE;IAChC,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,KAAK,UAAU,OAAO,CAAC,WAA2C,EAAE,SAAiB;YACnF,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAC,GAAG,MAAM,YAAY,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YAC9E,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;YACtC,CAAC;YAED,MAAM,QAAQ,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,CAAC,CAAC;YAC/E,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,EAAE,CAAC;gBACtC,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;YAC3C,CAAC;YACD,MAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;YACtD,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAC/C,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACzC,CAAC;YAED,+BAA+B;YAC/B,MAAM,cAAc,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;YAEjD,OAAO,EAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,EAAC,CAAC;QAChD,CAAC;QAED,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,EAAC,UAAU,EAAE,QAAQ,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,wBAAwB,CAAC,CAAC;YAE7E,mDAAmD;YACnD,QAAQ,CAAC,aAAa,GAAG,SAAS,CAAC;YACnC,IAAI,OAAO,GAAG,gCAAgC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YACrE,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC;YAEhE,QAAQ,CAAC,aAAa,GAAG,EAAE,CAAC;YAC5B,OAAO,GAAG,gCAAgC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YACjE,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,EAAC,UAAU,EAAE,QAAQ,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,wBAAwB,CAAC,CAAC;YAE7E,MAAM,OAAO,GAAG,gCAAgC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YACvE,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,EAAE,mBAAmB,EAAE,GAAG,EAAE,oBAAoB,EAAC,CAAC,CAAC;QAC7G,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {getFirstOrError, processTrace} from '../../../testing/InsightHelpers.js';\n\nimport * as Insights from './insights.js';\n\nconst {calculateMetricWeightsForSorting} = Insights.Common;\n\ndescribeWithEnvironment('Common', function() {\n  describe('calculateMetricWeightsForSorting', () => {\n    async function process(testContext: Mocha.Suite|Mocha.Context|null, traceFile: string) {\n      const {data, insights, metadata} = await processTrace(testContext, traceFile);\n      if (!metadata) {\n        throw new Error('missing metadata');\n      }\n\n      const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n      if (!firstNav.args.data?.navigationId) {\n        throw new Error('expected navigationId');\n      }\n      const insightSetKey = firstNav.args.data.navigationId;\n      const insightSet = insights.get(insightSetKey);\n      if (!insightSet) {\n        throw new Error('missing insight set');\n      }\n\n      // Clone so it may be modified.\n      const clonedMetadata = structuredClone(metadata);\n\n      return {insightSet, metadata: clonedMetadata};\n    }\n\n    it('returns default weights when there is no field data', async () => {\n      const {insightSet, metadata} = await process(this, 'image-delivery.json.gz');\n\n      // No field data defaults to even split of weights.\n      metadata.cruxFieldData = undefined;\n      let weights = calculateMetricWeightsForSorting(insightSet, metadata);\n      assert.deepEqual(weights, {lcp: 1 / 3, inp: 1 / 3, cls: 1 / 3});\n\n      metadata.cruxFieldData = [];\n      weights = calculateMetricWeightsForSorting(insightSet, metadata);\n      assert.deepEqual(weights, {lcp: 1 / 3, inp: 1 / 3, cls: 1 / 3});\n    });\n\n    it('returns weights based on field data', async () => {\n      const {insightSet, metadata} = await process(this, 'image-delivery.json.gz');\n\n      const weights = calculateMetricWeightsForSorting(insightSet, metadata);\n      assert.deepEqual(weights, {lcp: 0.48649783990559314, inp: 0.48649783990559314, cls: 0.027004320188813675});\n    });\n  });\n});\n"]}