{"version":3,"file":"LongCriticalNetworkTree.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/LongCriticalNetworkTree.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,4BAA4B,CAAC;AAGnD,OAAO,EAAC,eAAe,EAA+D,MAAM,YAAY,CAAC;AAEzG,MAAM,SAAS,GAAG;IAChB;;OAEG;IACH,KAAK,EAAE,4BAA4B;IACnC;;OAEG;IACH,WAAW,EACP,0QAA0Q;CAC/Q,CAAC;AAEF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,kDAAkD,EAAE,SAAS,CAAC,CAAC;AACxG,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAMtE,MAAM,UAAU,IAAI;IAClB,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC7B,CAAC;AAED,SAAS,QAAQ,CACb,YAAsG;IAExG,OAAO;QACL,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC;QAClC,WAAW,EAAE,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC;QAC9C,QAAQ,EAAE,eAAe,CAAC,GAAG;QAC7B,UAAU,EAAE,YAAY,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC;QAC9C,GAAG,YAAY;KAChB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,eAAe,CAC3B,YAAuC,EAAE,QAA2B;IACtE,OAAO,QAAQ,CAAC;QACd,UAAU,EAAE,EAAE;KACf,CAAC,CAAC;AACL,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Types from '../types/types.js';\n\nimport {InsightCategory, type InsightModel, type InsightSetContext, type RequiredData} from './types.js';\n\nconst UIStrings = {\n  /**\n   * @description Title of an insight that recommends avoiding chaining critical requests.\n   */\n  title: 'Long critical network tree',\n  /**\n   * @description Description of an insight that recommends avoiding chaining critical requests.\n   */\n  description:\n      '[Avoid chaining critical requests](https://developer.chrome.com/docs/lighthouse/performance/critical-request-chains) by reducing the length of chains, reducing the download size of resources, or deferring the download of unnecessary resources to improve page load.',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/LongCriticalNetworkTree.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type LongCriticalNetworkTreeInsightModel = InsightModel<{\n  longChains: Types.Events.SyntheticNetworkRequest[][],\n}>;\n\nexport function deps(): ['NetworkRequests'] {\n  return ['NetworkRequests'];\n}\n\nfunction finalize(\n    partialModel: Omit<LongCriticalNetworkTreeInsightModel, 'title'|'description'|'category'|'shouldShow'>):\n    LongCriticalNetworkTreeInsightModel {\n  return {\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.LCP,\n    shouldShow: partialModel.longChains.length > 0,\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    _parsedTrace: RequiredData<typeof deps>, _context: InsightSetContext): LongCriticalNetworkTreeInsightModel {\n  return finalize({\n    longChains: [],\n  });\n}\n"]}