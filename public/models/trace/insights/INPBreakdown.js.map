{"version":3,"file":"INPBreakdown.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/INPBreakdown.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type {SyntheticInteractionPair} from '../types/TraceEvents.js';\nimport type * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Text to tell the user about the longest user interaction.\n   */\n  description:\n      'Start investigating with the longest subpart. [Delays can be minimized](https://web.dev/articles/optimize-inp#optimize_interactions). To reduce processing duration, [optimize the main-thread costs](https://web.dev/articles/optimize-long-tasks), often JS.',\n  /**\n   * @description Title for the performance insight \"INP breakdown\", which shows a breakdown of INP by subparts / sections.\n   */\n  title: 'INP breakdown',\n  /**\n   * @description Label used for the subpart/component/stage/section of a larger duration.\n   */\n  subpart: 'Subpart',\n  /**\n   * @description Label used for a time duration.\n   */\n  duration: 'Duration',\n\n  // TODO: these are repeated in InteractionBreakdown. Add a place for common strings?\n  /**\n   * @description Text shown next to the interaction event's input delay time in the detail view.\n   */\n  inputDelay: 'Input delay',\n  /**\n   * @description Text shown next to the interaction event's thread processing duration in the detail view.\n   */\n  processingDuration: 'Processing duration',\n  /**\n   * @description Text shown next to the interaction event's presentation delay time in the detail view.\n   */\n  presentationDelay: 'Presentation delay',\n  /**\n   * @description Text status indicating that no user interactions were detected.\n   */\n  noInteractions: 'No interactions detected',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/INPBreakdown.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type INPBreakdownInsightModel = InsightModel<typeof UIStrings, {\n  longestInteractionEvent?: SyntheticInteractionPair,\n  highPercentileInteractionEvent?: SyntheticInteractionPair,\n}>;\n\nexport function isINPBreakdownInsight(insight: InsightModel): insight is INPBreakdownInsightModel {\n  return insight.insightKey === InsightKeys.INP_BREAKDOWN;\n}\n\nfunction finalize(partialModel: PartialInsightModel<INPBreakdownInsightModel>): INPBreakdownInsightModel {\n  let state: INPBreakdownInsightModel['state'] = 'pass';\n  if (partialModel.longestInteractionEvent) {\n    const classification = Handlers.ModelHandlers.UserInteractions.scoreClassificationForInteractionToNextPaint(\n        partialModel.longestInteractionEvent.dur);\n    if (classification === Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification.GOOD) {\n      state = 'informative';\n    } else {\n      state = 'fail';\n    }\n  }\n\n  return {\n    insightKey: InsightKeys.INP_BREAKDOWN,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.INP,\n    state,\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    data: Handlers.Types.HandlerData, context: InsightSetContext): INPBreakdownInsightModel {\n  const interactionEvents = data.UserInteractions.interactionEventsWithNoNesting.filter(event => {\n    return Helpers.Timing.eventIsInBounds(event, context.bounds);\n  });\n\n  if (!interactionEvents.length) {\n    // A valid result, when there is no user interaction.\n    return finalize({});\n  }\n\n  const longestByInteractionId = new Map<number, SyntheticInteractionPair>();\n  for (const event of interactionEvents) {\n    const key = event.interactionId;\n    const longest = longestByInteractionId.get(key);\n    if (!longest || event.dur > longest.dur) {\n      longestByInteractionId.set(key, event);\n    }\n  }\n  const normalizedInteractionEvents = [...longestByInteractionId.values()];\n  normalizedInteractionEvents.sort((a, b) => b.dur - a.dur);\n\n  // INP is the \"nearest-rank\"/inverted_cdf 98th percentile, except Chrome only\n  // keeps the 10 worst events around, so it can never be more than the 10th from\n  // last array element. To keep things simpler, sort desc and pick from front.\n  // See https://source.chromium.org/chromium/chromium/src/+/main:components/page_load_metrics/browser/responsiveness_metrics_normalization.cc;l=45-59;drc=cb0f9c8b559d9c7c3cb4ca94fc1118cc015d38ad\n  const highPercentileIndex = Math.min(9, Math.floor(normalizedInteractionEvents.length / 50));\n\n  return finalize({\n    relatedEvents: [normalizedInteractionEvents[0]],\n    longestInteractionEvent: normalizedInteractionEvents[0],\n    highPercentileInteractionEvent: normalizedInteractionEvents[highPercentileIndex],\n  });\n}\n\n/**\n * If `subpart` is -1, then all subparts are included. Otherwise it's just that index.\n **/\nexport function createOverlaysForSubpart(\n    event: Types.Events.SyntheticInteractionPair, subpartIndex = -1): Types.Overlays.Overlay[] {\n  const p1 = Helpers.Timing.traceWindowFromMicroSeconds(\n      event.ts,\n      (event.ts + event.inputDelay) as Types.Timing.Micro,\n  );\n  const p2 = Helpers.Timing.traceWindowFromMicroSeconds(\n      p1.max,\n      (p1.max + event.mainThreadHandling) as Types.Timing.Micro,\n  );\n  const p3 = Helpers.Timing.traceWindowFromMicroSeconds(\n      p2.max,\n      (p2.max + event.presentationDelay) as Types.Timing.Micro,\n  );\n  let sections = [\n    {bounds: p1, label: i18nString(UIStrings.inputDelay), showDuration: true},\n    {bounds: p2, label: i18nString(UIStrings.processingDuration), showDuration: true},\n    {bounds: p3, label: i18nString(UIStrings.presentationDelay), showDuration: true},\n  ];\n  if (subpartIndex !== -1) {\n    sections = [sections[subpartIndex]];\n  }\n\n  return [\n    {\n      type: 'TIMESPAN_BREAKDOWN',\n      sections,\n      renderLocation: 'BELOW_EVENT',\n      entry: event,\n    },\n  ];\n}\n\nexport function createOverlays(model: INPBreakdownInsightModel): Types.Overlays.Overlay[] {\n  const event = model.longestInteractionEvent;\n  if (!event) {\n    return [];\n  }\n\n  return createOverlaysForSubpart(event);\n}\n"]}