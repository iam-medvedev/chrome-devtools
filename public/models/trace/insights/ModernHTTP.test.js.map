{"version":3,"file":"ModernHTTP.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/ModernHTTP.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {getFirstOrError, getInsightOrError, processTrace} from '../../../testing/InsightHelpers.js';\nimport * as Trace from '../trace.js';\n\nconst {determineHttp1Requests: determineNonHttp2Resources} = Trace.Insights.ModernHTTP;\n\ndescribeWithEnvironment('Cache', function() {\n  describe('determineNonHttp2Resources', () => {\n    function createNRequests(cb: (i: number) => Trace.Types.Events.SyntheticNetworkRequest, num: number) {\n      const reqs: Trace.Types.Events.SyntheticNetworkRequest[] = [];\n      for (let i = 0; i < num; ++i) {\n        reqs.push(cb(i));\n      }\n      return reqs;\n    }\n\n    const generic1PEntity: Trace.Handlers.Helpers.Entity = {\n      name: 'first-party',\n      company: 'First Party',\n      category: 'cat',\n      categories: [],\n      domains: ['first.party'],\n      averageExecutionTime: 100,\n      totalExecutionTime: 100,\n      totalOccurrences: 1,\n    };\n\n    function createEntityMappings(events: Trace.Types.Events.Event[]): Trace.Handlers.Helpers.EntityMappings {\n      const entityMappings: Trace.Handlers.Helpers.EntityMappings = {\n        createdEntityCache: new Map(),\n        entityByEvent: new Map(),\n        eventsByEntity: new Map(),\n        entityByUrlCache: new Map(),\n      };\n      for (const event of events) {\n        Trace.Handlers.Helpers.addEventToEntityMapping(event, entityMappings);\n      }\n      return entityMappings;\n    }\n\n    it('returns requests affected by an old HTTP version', () => {\n      const requests: Trace.Types.Events.SyntheticNetworkRequest[] = [\n        ...createNRequests(\n            i => ({\n              args: {\n                data: {\n                  url: `https://example.com/req${i}`,\n                  protocol: 'http/2',\n                  resourceType: 'Image',\n                  decodedBodyLength: 1000,\n                },\n              },\n            } as Trace.Types.Events.SyntheticNetworkRequest),\n            6),\n        {\n          args: {\n            data: {\n              url: 'https://example.com/bad',\n              protocol: 'http/1.1',\n              resourceType: 'Image',\n              decodedBodyLength: 1000,\n            },\n          },\n        } as Trace.Types.Events.SyntheticNetworkRequest,\n      ];\n      const result = determineNonHttp2Resources(requests, createEntityMappings(requests), generic1PEntity);\n      assert.deepEqual(result.map(r => r.args.data.url), ['https://example.com/bad']);\n    });\n\n    it('ignores requests fetched from service workers', () => {\n      const requests: Trace.Types.Events.SyntheticNetworkRequest[] = [\n        ...createNRequests(\n            i => ({\n              args: {\n                data: {\n                  url: `https://example.com/req${i}`,\n                  protocol: 'http/2',\n                  resourceType: 'Image',\n                  decodedBodyLength: 1000,\n                },\n              },\n            } as Trace.Types.Events.SyntheticNetworkRequest),\n            6),\n        {\n          args: {\n            data: {\n              url: 'https://example.com/bad',\n              protocol: 'http/1.1',\n              resourceType: 'Image',\n              decodedBodyLength: 1000,\n              fromServiceWorker: true,\n            },\n          },\n        } as Trace.Types.Events.SyntheticNetworkRequest,\n      ];\n      const result = determineNonHttp2Resources(requests, createEntityMappings(requests), generic1PEntity);\n      assert.deepEqual(result.map(r => r.args.data.url), []);\n    });\n\n    it('ignores requests fetched using http2 or higher', () => {\n      const requests: Trace.Types.Events.SyntheticNetworkRequest[] = [\n        ...createNRequests(\n            i => ({\n              args: {\n                data: {\n                  url: `https://example.com/req${i}`,\n                  protocol: 'http/2',\n                  resourceType: 'Image',\n                  decodedBodyLength: 1000,\n                },\n              },\n            } as Trace.Types.Events.SyntheticNetworkRequest),\n            6),\n        {\n          args: {\n            data: {\n              url: 'https://example.com/bad',\n              protocol: 'http/3',\n              resourceType: 'Image',\n              decodedBodyLength: 1000,\n            },\n          },\n        } as Trace.Types.Events.SyntheticNetworkRequest,\n      ];\n      const result = determineNonHttp2Resources(requests, createEntityMappings(requests), generic1PEntity);\n      assert.deepEqual(result.map(r => r.args.data.url), []);\n    });\n\n    it('shows requests if the origin had 6 static resource requests', () => {\n      const requests: Trace.Types.Events.SyntheticNetworkRequest[] = [\n        ...createNRequests(\n            i => ({\n              args: {\n                data: {\n                  url: `https://example.com/req${i}`,\n                  protocol: 'http/2',\n                  resourceType: 'Image',\n                  decodedBodyLength: 1000,\n                },\n              },\n            } as Trace.Types.Events.SyntheticNetworkRequest),\n            6),\n        {\n          args: {\n            data: {\n              url: 'https://example.com/fetch',\n              protocol: 'http/1.1',\n              resourceType: 'Fetch',\n              decodedBodyLength: 1000,\n            },\n          },\n        } as Trace.Types.Events.SyntheticNetworkRequest,\n      ];\n      const result = determineNonHttp2Resources(requests, createEntityMappings(requests), generic1PEntity);\n      assert.deepEqual(result.map(r => r.args.data.url), ['https://example.com/fetch']);\n    });\n\n    it('ignores requests if the origin did not have 6 requests', () => {\n      const requests: Trace.Types.Events.SyntheticNetworkRequest[] = [\n        {\n          args: {\n            data: {\n              url: 'https://example.com/fetch',\n              protocol: 'http/1.1',\n              resourceType: 'Fetch',\n              decodedBodyLength: 1000,\n            },\n          },\n        } as Trace.Types.Events.SyntheticNetworkRequest,\n      ];\n      const result = determineNonHttp2Resources(requests, createEntityMappings(requests), generic1PEntity);\n      assert.deepEqual(result.map(r => r.args.data.url), []);\n    });\n\n    it('ignores requests if the 6+ origin requests were not static resources', () => {\n      const requests: Trace.Types.Events.SyntheticNetworkRequest[] = [\n        ...createNRequests(\n            i => ({\n              args: {\n                data: {\n                  url: `https://example.com/req${i}`,\n                  protocol: 'http/2',\n                  resourceType: 'Fetch',\n                  decodedBodyLength: 1000,\n                },\n              },\n            } as Trace.Types.Events.SyntheticNetworkRequest),\n            6),\n        {\n          args: {\n            data: {\n              url: 'https://example.com/fetch',\n              protocol: 'http/1.1',\n              resourceType: 'Fetch',\n              decodedBodyLength: 1000,\n            },\n          },\n        } as Trace.Types.Events.SyntheticNetworkRequest,\n      ];\n      const result = determineNonHttp2Resources(requests, createEntityMappings(requests), generic1PEntity);\n      assert.deepEqual(result.map(r => r.args.data.url), []);\n    });\n\n    it('ignores requests if the 6+ origin requests were served on localhost', () => {\n      const requests: Trace.Types.Events.SyntheticNetworkRequest[] = [\n        ...createNRequests(\n            i => ({\n              args: {\n                data: {\n                  url: `https://localhost:8080/req${i}`,\n                  protocol: 'http/2',\n                  resourceType: 'Image',\n                  decodedBodyLength: 1000,\n                },\n              },\n            } as Trace.Types.Events.SyntheticNetworkRequest),\n            6),\n        {\n          args: {\n            data: {\n              url: 'https://localhost:8080/fetch',\n              protocol: 'http/1.1',\n              resourceType: 'Fetch',\n              decodedBodyLength: 1000,\n            },\n          },\n        } as Trace.Types.Events.SyntheticNetworkRequest,\n      ];\n      const result = determineNonHttp2Resources(requests, createEntityMappings(requests), generic1PEntity);\n      assert.deepEqual(result.map(r => r.args.data.url), []);\n    });\n\n    it('ignores requests if the 6+ origin requests were too small on a known entity', () => {\n      const requests: Trace.Types.Events.SyntheticNetworkRequest[] = [\n        ...createNRequests(\n            i => ({\n              args: {\n                data: {\n                  url: `https://www.google.com/req${i}`,\n                  protocol: 'http/2',\n                  resourceType: 'Image',\n                  decodedBodyLength: 10,\n                },\n              },\n            } as Trace.Types.Events.SyntheticNetworkRequest),\n            6),\n        {\n          args: {\n            data: {\n              url: 'https://www.google.com/fetch',\n              protocol: 'http/1.1',\n              resourceType: 'Fetch',\n              decodedBodyLength: 1000,\n            },\n          },\n        } as Trace.Types.Events.SyntheticNetworkRequest,\n      ];\n      const result = determineNonHttp2Resources(requests, createEntityMappings(requests), generic1PEntity);\n      assert.deepEqual(result.map(r => r.args.data.url), []);\n    });\n\n    it('shows requests if the 6+ origin requests were too small on an unknown entity', () => {\n      const requests: Trace.Types.Events.SyntheticNetworkRequest[] = [\n        ...createNRequests(\n            i => ({\n              args: {\n                data: {\n                  url: `https://example.com/req${i}`,\n                  protocol: 'http/2',\n                  resourceType: 'Image',\n                  decodedBodyLength: 10,\n                },\n              },\n            } as Trace.Types.Events.SyntheticNetworkRequest),\n            6),\n        {\n          args: {\n            data: {\n              url: 'https://example.com/fetch',\n              protocol: 'http/1.1',\n              resourceType: 'Fetch',\n              decodedBodyLength: 1000,\n            },\n          },\n        } as Trace.Types.Events.SyntheticNetworkRequest,\n      ];\n      const result = determineNonHttp2Resources(requests, createEntityMappings(requests), generic1PEntity);\n      assert.deepEqual(result.map(r => r.args.data.url), ['https://example.com/fetch']);\n    });\n\n    it('shows requests if the 6+ origin requests were too small on the first party entity', () => {\n      const requests: Trace.Types.Events.SyntheticNetworkRequest[] = [\n        ...createNRequests(\n            i => ({\n              args: {\n                data: {\n                  url: `https://example.com/req${i}`,\n                  protocol: 'http/2',\n                  resourceType: 'Image',\n                  decodedBodyLength: 10,\n                },\n              },\n            } as Trace.Types.Events.SyntheticNetworkRequest),\n            6),\n        {\n          args: {\n            data: {\n              url: 'https://example.com/fetch',\n              protocol: 'http/1.1',\n              resourceType: 'Fetch',\n              decodedBodyLength: 1000,\n            },\n          },\n        } as Trace.Types.Events.SyntheticNetworkRequest,\n      ];\n      const entityMappings = createEntityMappings(requests);\n      const firstPartyEntity = entityMappings.entityByEvent.get(requests[0]);\n      const result = determineNonHttp2Resources(requests, createEntityMappings(requests), firstPartyEntity!);\n      assert.deepEqual(result.map(r => r.args.data.url), ['https://example.com/fetch']);\n    });\n  });\n\n  it('identifies HTTP/1.1 requests in a real trace', async function() {\n    const {data, insights} = await processTrace(this, 'http1.1.json.gz');\n    const insight =\n        getInsightOrError('ModernHTTP', insights, getFirstOrError(data.Meta.navigationsByNavigationId.values()));\n    assert.deepEqual(insight.http1Requests.map(r => r.args.data.url), [\n      'https://ads.jetpackdigital.com/sites/_uploads/1742278386bg_opt_640x350-avif.avif',\n      'https://ads.jetpackdigital.com/sites/_uploads/1583540859Play.png',\n      'https://ads.jetpackdigital.com/sites/_uploads/1583540859Muted.png',\n      'https://ads.jetpackdigital.com/h5media/sites/_uploads/1742363510mm_allthefeels_20_mob.mp4',\n      'https://ads.jetpackdigital.com/sites/_uploads/1583540860Pause.png',\n      'https://ads.jetpackdigital.com/tracking_pixel.gif?8852762616',\n      'https://ads.jetpackdigital.com/tracking_pixel.gif?7753243273',\n    ]);\n\n    // All the above were preload requests. None should affect FCP or LCP.\n    assert.deepEqual(insight.metricSavings, {\n      FCP: 0 as Trace.Types.Timing.Milli,\n      LCP: 0 as Trace.Types.Timing.Milli,\n    });\n  });\n});\n"]}