{"version":3,"file":"CumulativeLayoutShift.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/CumulativeLayoutShift.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,WAAW,EAAC,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,UAAU,MAAM,aAAa,CAAC;AAE1C,OAAO,EAAC,cAAc,EAAC,MAAM,eAAe,CAAC;AAE7C,QAAQ,CAAC,uBAAuB,EAAE;IAChC,QAAQ,CAAC,2BAA2B,EAAE;QACpC,EAAE,CAAC,4CAA4C,EAAE,KAAK;YACpD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,kCAAkC,CAAC,CAAC;YACrF,MAAM,OAAO,GAAG;gBACd,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW;gBAC9B,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK;aACtE,CAAC;YACF,MAAM,EAAC,iBAAiB,EAAC,GACrB,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,qBAAqB,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC5F,MAAM,QAAQ,GAAyE;gBACrF;oBACE,IAAI,EAAE,kBAAkB;oBACxB,cAAc,EAAE,wHAAuF;oBACvG,qBAAqB,EAAE,CAAC,OAAO,CAAC;iBACjC;gBACD;oBACE,IAAI,EAAE,KAAK;oBACX,cAAc,EAAE,wHAAuF;oBACvG,qBAAqB,EAAE,CAAC,KAAK,CAAC;iBAC/B;aACF,CAAC;YACF,MAAM,CAAC,eAAe,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,iEAAiE,EAAE,KAAK;YACzE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;YACvE,MAAM,OAAO,GAAG;gBACd,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW;gBAC9B,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK;aACtE,CAAC;YACF,MAAM,EAAC,iBAAiB,EAAC,GACrB,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,qBAAqB,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC5F,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceModel from '../trace.js';\n\nimport {InsightRunners} from './insights.js';\n\ndescribe('CumulativeLayoutShift', function() {\n  describe('non composited animations', function() {\n    it('gets the correct non composited animations', async function() {\n      const data = await TraceLoader.traceEngine(this, 'non-composited-animation.json.gz');\n      const context = {\n        frameId: data.Meta.mainFrameId,\n        navigationId: data.Meta.navigationsByNavigationId.keys().next().value,\n      };\n      const {animationFailures} =\n          TraceModel.Insights.InsightRunners.CumulativeLayoutShift.generateInsight(data, context);\n      const expected: InsightRunners.CumulativeLayoutShift.NoncompositedAnimationFailure[] = [\n        {\n          name: 'simple-animation',\n          failureReasons: [InsightRunners.CumulativeLayoutShift.AnimationFailureReasons.UNSUPPORTED_CSS_PROPERTY],\n          unsupportedProperties: ['color'],\n        },\n        {\n          name: 'top',\n          failureReasons: [InsightRunners.CumulativeLayoutShift.AnimationFailureReasons.UNSUPPORTED_CSS_PROPERTY],\n          unsupportedProperties: ['top'],\n        },\n      ];\n      assert.deepStrictEqual(animationFailures, expected);\n    });\n    it('returns no insights when there are no non-composited animations', async function() {\n      const data = await TraceLoader.traceEngine(this, 'lcp-images.json.gz');\n      const context = {\n        frameId: data.Meta.mainFrameId,\n        navigationId: data.Meta.navigationsByNavigationId.keys().next().value,\n      };\n      const {animationFailures} =\n          TraceModel.Insights.InsightRunners.CumulativeLayoutShift.generateInsight(data, context);\n      assert.isEmpty(animationFailures);\n    });\n  });\n});\n"]}