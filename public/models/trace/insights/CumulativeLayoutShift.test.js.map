{"version":3,"file":"CumulativeLayoutShift.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/CumulativeLayoutShift.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {getFirstOrError, getInsightOrError} from '../../../testing/InsightHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {InsightRunners} from './insights.js';\n\nexport async function processTrace(testContext: Mocha.Suite|Mocha.Context|null, traceFile: string) {\n  const {parsedTrace, insights} = await TraceLoader.traceEngine(testContext, traceFile);\n  if (!insights) {\n    throw new Error('No insights');\n  }\n\n  return {data: parsedTrace, insights};\n}\n\n// Root cause invalidation window.\nconst INVALIDATION_WINDOW = Helpers.Timing.secondsToMicroseconds(Types.Timing.Seconds(0.5));\n\ndescribeWithEnvironment('CumulativeLayoutShift', function() {\n  describe('non composited animations', function() {\n    it('gets the correct non composited animations', async function() {\n      const {data, insights} = await processTrace(this, 'non-composited-animation.json.gz');\n      const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n      const insight = getInsightOrError('CumulativeLayoutShift', insights, firstNav);\n      const {animationFailures} = insight;\n\n      const simpleAnimation = data.Animations.animations.find(animation => {\n        return animation.args.data.beginEvent.args.data.displayName === 'simple-animation';\n      });\n      const top = data.Animations.animations.find(animation => {\n        return animation.args.data.beginEvent.args.data.displayName === 'top';\n      });\n\n      const expected: InsightRunners.CumulativeLayoutShift.NoncompositedAnimationFailure[] = [\n        {\n          name: 'simple-animation',\n          failureReasons: [InsightRunners.CumulativeLayoutShift.AnimationFailureReasons.UNSUPPORTED_CSS_PROPERTY],\n          unsupportedProperties: ['color'],\n          animation: simpleAnimation,\n        },\n        {\n          name: 'top',\n          failureReasons: [\n            InsightRunners.CumulativeLayoutShift.AnimationFailureReasons.TARGET_HAS_INVALID_COMPOSITING_STATE,\n            InsightRunners.CumulativeLayoutShift.AnimationFailureReasons.UNSUPPORTED_CSS_PROPERTY,\n          ],\n          unsupportedProperties: ['top'],\n          animation: top,\n        },\n      ];\n      assert.deepStrictEqual(animationFailures, expected);\n    });\n    // Flaky test.\n    it.skip('[crbug.com/370382177]: gets the correct non composited animations for shift', async function() {\n      const {data, insights} = await processTrace(this, 'non-composited-animation-shift.json.gz');\n      const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n      const insight = getInsightOrError('CumulativeLayoutShift', insights, firstNav);\n      const {shifts, animationFailures} = insight;\n\n      const simpleAnimation = data.Animations.animations.find(animation => {\n        return animation.args.data.beginEvent.args.data.displayName === 'simple-animation';\n      });\n      const top = data.Animations.animations.find(animation => {\n        return animation.args.data.beginEvent.args.data.displayName === 'top';\n      });\n\n      const shiftAnimations: InsightRunners.CumulativeLayoutShift.NoncompositedAnimationFailure[] = [];\n      shifts?.forEach(entry => {\n        shiftAnimations.push(...entry.nonCompositedAnimations);\n      });\n      const expectedWithShift: InsightRunners.CumulativeLayoutShift.NoncompositedAnimationFailure[] = [\n        {\n          name: 'simple-animation',\n          failureReasons: [InsightRunners.CumulativeLayoutShift.AnimationFailureReasons.UNSUPPORTED_CSS_PROPERTY],\n          unsupportedProperties: ['height', 'color', 'top'],\n          animation: simpleAnimation,\n        },\n      ];\n      assert.deepStrictEqual(shiftAnimations, expectedWithShift);\n\n      const expectedAll: InsightRunners.CumulativeLayoutShift.NoncompositedAnimationFailure[] = [\n        {\n          name: 'simple-animation',\n          failureReasons: [InsightRunners.CumulativeLayoutShift.AnimationFailureReasons.UNSUPPORTED_CSS_PROPERTY],\n          unsupportedProperties: ['height', 'color', 'top'],\n          animation: simpleAnimation,\n        },\n        {\n          name: 'top',\n          failureReasons: [InsightRunners.CumulativeLayoutShift.AnimationFailureReasons.UNSUPPORTED_CSS_PROPERTY],\n          unsupportedProperties: ['top'],\n          animation: top,\n        },\n      ];\n      // animationFailures should include both root causes failures, and failures without associated shifts.\n      assert.deepStrictEqual(animationFailures, expectedAll);\n    });\n\n    it('returns no insights when there are no non-composited animations', async function() {\n      const {data, insights} = await processTrace(this, 'lcp-images.json.gz');\n      const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n      const insight = getInsightOrError('CumulativeLayoutShift', insights, firstNav);\n      const {animationFailures} = insight;\n\n      assert.isEmpty(animationFailures);\n    });\n  });\n  describe('layout shifts', function() {\n    it('returns correct layout shifts', async function() {\n      const {data, insights} = await processTrace(this, 'cls-single-frame.json.gz');\n      const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n      const insight = getInsightOrError('CumulativeLayoutShift', insights, firstNav);\n      const {shifts} = insight;\n\n      assert.exists(shifts);\n      assert.strictEqual(shifts.size, 7);\n    });\n\n    describe('root causes', function() {\n      it('handles potential iframe root cause correctly', async function() {\n        // Trace has a single iframe that gets created before the first layout shift and causes a layout shift.\n        const {data, insights} = await processTrace(this, 'iframe-shift.json.gz');\n        const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n        const insight = getInsightOrError('CumulativeLayoutShift', insights, firstNav);\n        const {shifts} = insight;\n\n        assert.exists(shifts);\n        assert.strictEqual(shifts.size, 3);\n\n        const shift1 = Array.from(shifts)[0][0];\n        const shiftIframes = shifts.get(shift1)?.iframeIds;\n        assert.exists(shiftIframes);\n        assert.strictEqual(shiftIframes.length, 1);\n\n        const iframe = shiftIframes[0];\n\n        // Find the event with the matching frame id to make sure we got the right id.\n        const dlEvent = data.LayoutShifts.domLoadingEvents.find(e => {\n          return e.args.frame === iframe;\n        });\n        assert.exists(dlEvent);\n\n        // Ensure the iframe happens within the invalidation window.\n        assert.isTrue(dlEvent.ts < shift1.ts && dlEvent.ts >= shift1.ts - INVALIDATION_WINDOW);\n        // Other shifts should not have iframe root causes.\n        const shift2 = Array.from(shifts)[1][0];\n        assert.isEmpty(shifts.get(shift2)?.iframeIds);\n        const shift3 = Array.from(shifts)[2][0];\n        assert.isEmpty(shifts.get(shift3)?.iframeIds);\n      });\n\n      it('handles potential font root cause correctly', async function() {\n        // Trace has font load before the second layout shift.\n        const {data, insights} = await processTrace(this, 'iframe-shift.json.gz');\n        const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n        const insight = getInsightOrError('CumulativeLayoutShift', insights, firstNav);\n        const {shifts} = insight;\n\n        assert.exists(shifts);\n        assert.strictEqual(shifts.size, 3);\n\n        const layoutShiftEvents = Array.from(shifts.entries());\n\n        const shift2 = layoutShiftEvents.at(1);\n        assert.isOk(shift2);\n        const shiftEvent = shift2[0];\n\n        const shiftFonts = shift2[1].fontRequests;\n        assert.exists(shiftFonts);\n        assert.strictEqual(shiftFonts.length, 1);\n\n        const fontRequest = shiftFonts[0];\n        const fontRequestEndTime = fontRequest.ts + fontRequest.dur;\n        // Ensure the font loads within the invalidation window.\n        assert.isTrue(fontRequestEndTime < shiftEvent.ts && fontRequestEndTime >= shiftEvent.ts - INVALIDATION_WINDOW);\n\n        // Other shifts should not have font root causes.\n        const shift1 = layoutShiftEvents.at(0);\n        assert.isOk(shift1);\n        assert.isEmpty(shift1[1].fontRequests);\n\n        const shift3 = layoutShiftEvents.at(2);\n        assert.isOk(shift3);\n        assert.isEmpty(shift3[1].fontRequests);\n      });\n    });\n  });\n  describe('clusters', function() {\n    it('returns clusters correctly', async function() {\n      const {data, insights} = await processTrace(this, 'iframe-shift.json.gz');\n      const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n      const insight = getInsightOrError('CumulativeLayoutShift', insights, firstNav);\n      const {shifts, clusters} = insight;\n\n      assert.exists(clusters);\n      assert.exists(shifts);\n      assert.strictEqual(clusters.length, 2);\n      for (const cluster of clusters) {\n        // Check that the cluster events exist in shifts map.\n        for (const shiftEvent of cluster.events) {\n          assert.exists(shifts.get(shiftEvent));\n        }\n      }\n    });\n\n    it('returns clusters correctly for non-navigations', async function() {\n      const {insights} = await processTrace(this, 'cls-no-nav.json.gz');\n      const insight = getInsightOrError('CumulativeLayoutShift', insights);\n      const {shifts, clusters} = insight;\n\n      assert.exists(clusters);\n      assert.exists(shifts);\n      assert.strictEqual(clusters.length, 3);\n      for (const cluster of clusters) {\n        // Check that the cluster events exist in shifts map.\n        for (const shiftEvent of cluster.events) {\n          assert.exists(shifts.get(shiftEvent));\n        }\n      }\n    });\n  });\n});\n"]}