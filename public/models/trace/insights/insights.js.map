{
  "version": 3,
  "sources": ["../../../../../../../front_end/models/trace/insights/Common.ts", "../../../../../../../front_end/models/trace/insights/Statistics.ts", "../../../../../../../front_end/models/trace/insights/Models.ts", "../../../../../../../front_end/models/trace/insights/Cache.ts", "../../../../../../../front_end/models/trace/insights/types.ts", "../../../../../../../front_end/models/trace/insights/CLSCulprits.ts", "../../../../../../../front_end/models/trace/insights/DocumentLatency.ts", "../../../../../../../front_end/models/trace/insights/DOMSize.ts", "../../../../../../../front_end/models/trace/insights/DuplicatedJavaScript.ts", "../../../../../../../front_end/models/trace/insights/FontDisplay.ts", "../../../../../../../front_end/models/trace/insights/ForcedReflow.ts", "../../../../../../../front_end/models/trace/insights/ImageDelivery.ts", "../../../../../../../front_end/models/trace/insights/INPBreakdown.ts", "../../../../../../../front_end/models/trace/insights/LCPBreakdown.ts", "../../../../../../../front_end/models/trace/insights/LCPDiscovery.ts", "../../../../../../../front_end/models/trace/insights/LegacyJavaScript.ts", "../../../../../../../front_end/models/trace/insights/ModernHTTP.ts", "../../../../../../../front_end/models/trace/insights/NetworkDependencyTree.ts", "../../../../../../../front_end/models/trace/insights/RenderBlocking.ts", "../../../../../../../front_end/models/trace/insights/SlowCSSSelector.ts", "../../../../../../../front_end/models/trace/types/TraceEvents.ts", "../../../../../../../front_end/models/trace/insights/ThirdParties.ts", "../../../../../../../front_end/models/trace/insights/Viewport.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../../generated/protocol.js';\nimport type * as CrUXManager from '../../crux-manager/crux-manager.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type * as Lantern from '../lantern/lantern.js';\nimport * as Types from '../types/types.js';\n\nimport {getLogNormalScore} from './Statistics.js';\nimport {\n  InsightKeys,\n  type InsightModels,\n  type InsightSet,\n  type InsightSetContext,\n  type MetricSavings,\n} from './types.js';\n\nconst GRAPH_SAVINGS_PRECISION = 50;\n\nexport function getInsight<InsightName extends keyof InsightModels>(\n    insightName: InsightName, insightSet: InsightSet): InsightModels[InsightName]|null {\n  const insight = insightSet.model[insightName];\n  if (insight instanceof Error) {\n    return null;\n  }\n\n  // For some reason typescript won't narrow the type by removing Error, so do it manually.\n  return insight;\n}\n\nexport function getLCP(insightSet: InsightSet):\n    {value: Types.Timing.Micro, event: Types.Events.LargestContentfulPaintCandidate}|null {\n  const insight = getInsight(InsightKeys.LCP_BREAKDOWN, insightSet);\n  if (!insight || !insight.lcpMs || !insight.lcpEvent) {\n    return null;\n  }\n\n  const value = Helpers.Timing.milliToMicro(insight.lcpMs);\n  return {value, event: insight.lcpEvent};\n}\n\nexport function getINP(insightSet: InsightSet):\n    {value: Types.Timing.Micro, event: Types.Events.SyntheticInteractionPair}|null {\n  const insight = getInsight(InsightKeys.INP_BREAKDOWN, insightSet);\n  if (!insight?.longestInteractionEvent?.dur) {\n    return null;\n  }\n\n  const value = insight.longestInteractionEvent.dur;\n  return {value, event: insight.longestInteractionEvent};\n}\n\nexport function getCLS(insightSet: InsightSet): {value: number, worstClusterEvent: Types.Events.Event|null} {\n  const insight = getInsight(InsightKeys.CLS_CULPRITS, insightSet);\n  if (!insight) {\n    // Unlike the other metrics, there is always a value for CLS even with no data.\n    return {value: 0, worstClusterEvent: null};\n  }\n\n  // TODO(cjamcl): the CLS insight should be doing this for us.\n  let maxScore = 0;\n  let worstCluster;\n  for (const cluster of insight.clusters) {\n    if (cluster.clusterCumulativeScore > maxScore) {\n      maxScore = cluster.clusterCumulativeScore;\n      worstCluster = cluster;\n    }\n  }\n\n  return {value: maxScore, worstClusterEvent: worstCluster ?? null};\n}\n\nexport function evaluateLCPMetricScore(value: Types.Timing.Milli): number {\n  return getLogNormalScore({p10: 2500, median: 4000}, value);\n}\n\nexport function evaluateINPMetricScore(value: Types.Timing.Milli): number {\n  return getLogNormalScore({p10: 200, median: 500}, value);\n}\n\nexport function evaluateCLSMetricScore(value: number): number {\n  return getLogNormalScore({p10: 0.1, median: 0.25}, value);\n}\n\nexport interface CrUXFieldMetricTimingResult {\n  value: Types.Timing.Micro;\n  pageScope: CrUXManager.PageScope;\n}\nexport interface CrUXFieldMetricNumberResult {\n  value: number;\n  pageScope: CrUXManager.PageScope;\n}\nexport interface CrUXFieldMetricResults {\n  fcp: CrUXFieldMetricTimingResult|null;\n  lcp: CrUXFieldMetricTimingResult|null;\n  inp: CrUXFieldMetricTimingResult|null;\n  cls: CrUXFieldMetricNumberResult|null;\n  lcpBreakdown: {\n    ttfb: CrUXFieldMetricTimingResult|null,\n    loadDelay: CrUXFieldMetricTimingResult|null,\n    loadDuration: CrUXFieldMetricTimingResult|null,\n    renderDelay: CrUXFieldMetricTimingResult|null,\n  };\n}\n\nfunction getPageResult(\n    cruxFieldData: CrUXManager.PageResult[], url: string, origin: string,\n    scope: CrUXManager.Scope|null = null): CrUXManager.PageResult|undefined {\n  return cruxFieldData.find(result => {\n    const key = scope ? result[`${scope.pageScope}-${scope.deviceScope}`]?.record.key :\n                        (result['url-ALL'] || result['origin-ALL'])?.record.key;\n    return (key?.url && key.url === url) || (key?.origin && key.origin === origin);\n  });\n}\n\nfunction getMetricResult(\n    pageResult: CrUXManager.PageResult, name: CrUXManager.StandardMetricNames,\n    scope: CrUXManager.Scope|null = null): CrUXFieldMetricNumberResult|null {\n  const scopes: Array<{pageScope: CrUXManager.PageScope, deviceScope: CrUXManager.DeviceScope}> = [];\n  if (scope) {\n    scopes.push(scope);\n  } else {\n    scopes.push({pageScope: 'url', deviceScope: 'ALL'});\n    scopes.push({pageScope: 'origin', deviceScope: 'ALL'});\n  }\n\n  for (const scope of scopes) {\n    const key = `${scope.pageScope}-${scope.deviceScope}` as const;\n    let value = pageResult[key]?.record.metrics[name]?.percentiles?.p75;\n    if (typeof value === 'string') {\n      value = Number(value);\n    }\n    if (typeof value === 'number' && Number.isFinite(value)) {\n      return {value, pageScope: scope.pageScope};\n    }\n  }\n\n  return null;\n}\n\nfunction getMetricTimingResult(\n    pageResult: CrUXManager.PageResult, name: CrUXManager.StandardMetricNames,\n    scope: CrUXManager.Scope|null = null): CrUXFieldMetricTimingResult|null {\n  const result = getMetricResult(pageResult, name, scope);\n  if (result) {\n    const valueMs = result.value as Types.Timing.Milli;\n    return {value: Helpers.Timing.milliToMicro(valueMs), pageScope: result.pageScope};\n  }\n\n  return null;\n}\n\nexport function getFieldMetricsForInsightSet(\n    insightSet: InsightSet, metadata: Types.File.MetaData|null,\n    scope: CrUXManager.Scope|null = null): CrUXFieldMetricResults|null {\n  const cruxFieldData = metadata?.cruxFieldData;\n  if (!cruxFieldData) {\n    return null;\n  }\n\n  const pageResult = getPageResult(cruxFieldData, insightSet.url.href, insightSet.url.origin, scope);\n  if (!pageResult) {\n    return null;\n  }\n\n  return {\n    fcp: getMetricTimingResult(pageResult, 'first_contentful_paint', scope),\n    lcp: getMetricTimingResult(pageResult, 'largest_contentful_paint', scope),\n    inp: getMetricTimingResult(pageResult, 'interaction_to_next_paint', scope),\n    cls: getMetricResult(pageResult, 'cumulative_layout_shift', scope),\n    lcpBreakdown: {\n      ttfb: getMetricTimingResult(pageResult, 'largest_contentful_paint_image_time_to_first_byte', scope),\n      loadDelay: getMetricTimingResult(pageResult, 'largest_contentful_paint_image_resource_load_delay', scope),\n      loadDuration: getMetricTimingResult(pageResult, 'largest_contentful_paint_image_resource_load_duration', scope),\n      renderDelay: getMetricTimingResult(pageResult, 'largest_contentful_paint_image_element_render_delay', scope),\n    }\n  };\n}\n\nexport function calculateMetricWeightsForSorting(\n    insightSet: InsightSet, metadata: Types.File.MetaData|null): {lcp: number, inp: number, cls: number} {\n  const weights = {\n    lcp: 1 / 3,\n    inp: 1 / 3,\n    cls: 1 / 3,\n  };\n\n  const cruxFieldData = metadata?.cruxFieldData;\n  if (!cruxFieldData) {\n    return weights;\n  }\n\n  const fieldMetrics = getFieldMetricsForInsightSet(insightSet, metadata);\n  if (!fieldMetrics) {\n    return weights;\n  }\n\n  const fieldLcp = fieldMetrics.lcp?.value ?? null;\n  const fieldInp = fieldMetrics.inp?.value ?? null;\n  const fieldCls = fieldMetrics.cls?.value ?? null;\n  const fieldLcpScore = fieldLcp !== null ? evaluateLCPMetricScore(Helpers.Timing.microToMilli(fieldLcp)) : 0;\n  const fieldInpScore = fieldInp !== null ? evaluateINPMetricScore(Helpers.Timing.microToMilli(fieldInp)) : 0;\n  const fieldClsScore = fieldCls !== null ? evaluateCLSMetricScore(fieldCls) : 0;\n  const fieldLcpScoreInverted = 1 - fieldLcpScore;\n  const fieldInpScoreInverted = 1 - fieldInpScore;\n  const fieldClsScoreInverted = 1 - fieldClsScore;\n  const invertedSum = fieldLcpScoreInverted + fieldInpScoreInverted + fieldClsScoreInverted;\n  if (!invertedSum) {\n    return weights;\n  }\n\n  weights.lcp = fieldLcpScoreInverted / invertedSum;\n  weights.inp = fieldInpScoreInverted / invertedSum;\n  weights.cls = fieldClsScoreInverted / invertedSum;\n\n  return weights;\n}\n\n/**\n * Simulates the provided graph before and after the byte savings from `wastedBytesByRequestId` are applied.\n */\nfunction estimateSavingsWithGraphs(\n    wastedBytesByRequestId: Map<string, number>, simulator: Lantern.Simulation.Simulator,\n    graph: Lantern.Graph.Node): Types.Timing.Milli {\n  const simulationBeforeChanges = simulator.simulate(graph);\n\n  const originalTransferSizes = new Map<string, number>();\n  graph.traverse(node => {\n    if (node.type !== 'network') {\n      return;\n    }\n    const wastedBytes = wastedBytesByRequestId.get(node.request.requestId);\n    if (!wastedBytes) {\n      return;\n    }\n\n    const original = node.request.transferSize;\n    originalTransferSizes.set(node.request.requestId, original);\n\n    node.request.transferSize = Math.max(original - wastedBytes, 0);\n  });\n\n  const simulationAfterChanges = simulator.simulate(graph);\n\n  // Restore the original transfer size after we've done our simulation\n  graph.traverse(node => {\n    if (node.type !== 'network') {\n      return;\n    }\n    const originalTransferSize = originalTransferSizes.get(node.request.requestId);\n    if (originalTransferSize === undefined) {\n      return;\n    }\n    node.request.transferSize = originalTransferSize;\n  });\n\n  let savings = simulationBeforeChanges.timeInMs - simulationAfterChanges.timeInMs;\n  savings = Math.round(savings / GRAPH_SAVINGS_PRECISION) * GRAPH_SAVINGS_PRECISION;\n  return Types.Timing.Milli(savings);\n}\n\n/**\n * Estimates the FCP & LCP savings for wasted bytes in `wastedBytesByRequestId`.\n */\nexport function metricSavingsForWastedBytes(\n    wastedBytesByRequestId: Map<string, number>, context: InsightSetContext): MetricSavings|undefined {\n  if (!context.navigation || !context.lantern) {\n    return;\n  }\n\n  if (!wastedBytesByRequestId.size) {\n    return {FCP: Types.Timing.Milli(0), LCP: Types.Timing.Milli(0)};\n  }\n\n  const simulator = context.lantern.simulator;\n  const fcpGraph = context.lantern.metrics.firstContentfulPaint.optimisticGraph;\n  const lcpGraph = context.lantern.metrics.largestContentfulPaint.optimisticGraph;\n\n  return {\n    FCP: estimateSavingsWithGraphs(wastedBytesByRequestId, simulator, fcpGraph),\n    LCP: estimateSavingsWithGraphs(wastedBytesByRequestId, simulator, lcpGraph),\n  };\n}\n\n/**\n * Returns whether the network request was sent encoded.\n */\nexport function isRequestCompressed(request: Types.Events.SyntheticNetworkRequest): boolean {\n  if (!request.args.data.responseHeaders) {\n    return false;\n  }\n\n  // FYI: In Lighthouse, older devtools logs (like our test fixtures) seems to be\n  // lower case, while modern logs are Cased-Like-This.\n  const patterns = [\n    /^content-encoding$/i, /^x-content-encoding-over-network$/i,\n    /^x-original-content-encoding$/i,  // Lightrider.\n  ];\n  const compressionTypes = ['gzip', 'br', 'deflate', 'zstd'];\n  return request.args.data.responseHeaders.some(\n      header => patterns.some(p => header.name.match(p)) && compressionTypes.includes(header.value));\n}\n\nexport function isRequestServedFromBrowserCache(request: Types.Events.SyntheticNetworkRequest): boolean {\n  if (!request.args.data.responseHeaders || request.args.data.failed) {\n    return false;\n  }\n\n  // Not Modified?\n  if (request.args.data.statusCode === 304) {\n    return true;\n  }\n\n  // TODO: for some reason ResourceReceiveResponse events never show a 304 status\n  // code, so the above is never gonna work. For now, fall back to a dirty check of\n  // looking at the ratio of transfer size and resource size. If it's really small,\n  // we certainly did not use the network to fetch it.\n\n  const {transferSize, resourceSize} = getRequestSizes(request);\n  const ratio = resourceSize ? transferSize / resourceSize : 0;\n  if (ratio < 0.01) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getRequestSizes(request: Types.Events.SyntheticNetworkRequest): {resourceSize: number, transferSize: number} {\n  const resourceSize = request.args.data.decodedBodyLength;\n  const transferSize = request.args.data.encodedDataLength;\n  return {resourceSize, transferSize};\n}\n\n/**\n * Estimates the number of bytes the content of this network record would have consumed on the network based on the\n * uncompressed size (totalBytes). Uses the actual transfer size from the network record if applicable,\n * minus the size of the response headers.\n *\n * @param totalBytes Uncompressed size of the resource\n */\nexport function estimateCompressedContentSize(\n    request: Types.Events.SyntheticNetworkRequest|undefined, totalBytes: number,\n    resourceType: Protocol.Network.ResourceType): number {\n  if (!request || isRequestServedFromBrowserCache(request)) {\n    // We don't know how many bytes this asset used on the network, but we can guess it was\n    // roughly the size of the content gzipped.\n    // See https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-encoding-and-transfer for specific CSS/Script examples\n    // See https://discuss.httparchive.org/t/file-size-and-compression-savings/145 for fallback multipliers\n    switch (resourceType) {\n      case 'Stylesheet':\n        // Stylesheets tend to compress extremely well.\n        return Math.round(totalBytes * 0.2);\n      case 'Script':\n      case 'Document':\n        // Scripts and HTML compress fairly well too.\n        return Math.round(totalBytes * 0.33);\n      default:\n        // Otherwise we'll just fallback to the average savings in HTTPArchive\n        return Math.round(totalBytes * 0.5);\n    }\n  }\n\n  // Get the size of the response body on the network.\n  const {transferSize, resourceSize} = getRequestSizes(request);\n  let contentTransferSize = transferSize;\n  if (!isRequestCompressed(request)) {\n    // This is not compressed, so we can use resourceSize directly.\n    // This would be equivalent to transfer size minus headers transfer size, but transfer size\n    // may also include bytes for SSL connection etc.\n    contentTransferSize = resourceSize;\n  }\n  // TODO(cjamcl): Get \"responseHeadersTransferSize\" in Network handler.\n  // else if (request.responseHeadersTransferSize) {\n  //   // Subtract the size of the encoded headers.\n  //   contentTransferSize =\n  //     Math.max(0, contentTransferSize - request.responseHeadersTransferSize);\n  // }\n\n  if (request.args.data.resourceType === resourceType) {\n    // This was a regular standalone asset, just use the transfer size.\n    return contentTransferSize;\n  }\n\n  // This was an asset that was inlined in a different resource type (e.g. HTML document).\n  // Use the compression ratio of the resource to estimate the total transferred bytes.\n  // Get the compression ratio, if it's an invalid number, assume no compression.\n  const compressionRatio = Number.isFinite(resourceSize) && resourceSize > 0 ? (contentTransferSize / resourceSize) : 1;\n  return Math.round(totalBytes * compressionRatio);\n}\n\n/**\n * Utility function to estimate the ratio of the compression of a script.\n * This excludes the size of the response headers.\n */\nexport function estimateCompressionRatioForScript(script: Handlers.ModelHandlers.Scripts.Script): number {\n  if (!script.request) {\n    // Can't find request, so just use 1.\n    return 1;\n  }\n\n  const request = script.request;\n  const contentLength = request.args.data.decodedBodyLength ?? script.content?.length ?? 0;\n  const compressedSize = estimateCompressedContentSize(request, contentLength, Protocol.Network.ResourceType.Script);\n  if (contentLength === 0 || compressedSize === 0) {\n    return 1;\n  }\n\n  const compressionRatio = compressedSize / contentLength;\n  return compressionRatio;\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// Lifted from Lighthouse: https://github.com/GoogleChrome/lighthouse/blob/36cac182a6c637b1671c57326d7c0241633d0076/shared/statistics.js\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// The exact double values for the max and min scores possible in each range.\nconst MIN_PASSING_SCORE = 0.90000000000000002220446049250313080847263336181640625;\nconst MAX_AVERAGE_SCORE = 0.899999999999999911182158029987476766109466552734375;\nconst MIN_AVERAGE_SCORE = 0.5;\nconst MAX_FAILING_SCORE = 0.499999999999999944488848768742172978818416595458984375;\n\n/**\n * Approximates the Gauss error function, the probability that a random variable\n * from the standard normal distribution lies within [-x, x]. Moved from\n * traceviewer.b.math.erf, based on Abramowitz and Stegun, formula 7.1.26.\n */\nfunction erf(x: number): number {\n  // erf(-x) = -erf(x);\n  const sign = Math.sign(x);\n  x = Math.abs(x);\n\n  const a1 = 0.254829592;\n  const a2 = -0.284496736;\n  const a3 = 1.421413741;\n  const a4 = -1.453152027;\n  const a5 = 1.061405429;\n  const p = 0.3275911;\n  const t = 1 / (1 + p * x);\n  const y = t * (a1 + t * (a2 + t * (a3 + t * (a4 + t * a5))));\n  return sign * (1 - y * Math.exp(-x * x));\n}\n\n/**\n * Returns the score (1 - percentile) of `value` in a log-normal distribution\n * specified by the `median` value, at which the score will be 0.5, and a 10th\n * percentile value, at which the score will be 0.9. The score represents the\n * amount of the distribution greater than `value`. All values should be in the\n * same units (e.g. milliseconds). See\n *   https://www.desmos.com/calculator/o98tbeyt1t\n * for an interactive view of the relationship between these parameters and the\n * typical parameterization (location and shape) of the log-normal distribution.\n */\nexport function getLogNormalScore({median, p10}: {median: number, p10: number}, value: number): number {\n  // Required for the log-normal distribution.\n  if (median <= 0) {\n    throw new Error('median must be greater than zero');\n  }\n  if (p10 <= 0) {\n    throw new Error('p10 must be greater than zero');\n  }\n  // Not strictly required, but if p10 > median, it flips around and becomes the p90 point.\n  if (p10 >= median) {\n    throw new Error('p10 must be less than the median');\n  }\n\n  // Non-positive values aren't in the distribution, so always 1.\n  if (value <= 0) {\n    return 1;\n  }\n\n  // Closest double to `erfc-1(1/5)`.\n  const INVERSE_ERFC_ONE_FIFTH = 0.9061938024368232;\n\n  // Shape (σ) is `|log(p10/median) / (sqrt(2)*erfc^-1(1/5))|` and\n  // standardizedX is `1/2 erfc(log(value/median) / (sqrt(2)*σ))`, so simplify a bit.\n  const xRatio = Math.max(Number.MIN_VALUE, value / median);  // value and median are > 0, so is ratio.\n  const xLogRatio = Math.log(xRatio);\n  const p10Ratio = Math.max(Number.MIN_VALUE, p10 / median);  // p10 and median are > 0, so is ratio.\n  const p10LogRatio = -Math.log(p10Ratio);                    // negate to keep σ positive.\n  const standardizedX = xLogRatio * INVERSE_ERFC_ONE_FIFTH / p10LogRatio;\n  const complementaryPercentile = (1 - erf(standardizedX)) / 2;\n\n  // Clamp to avoid floating-point out-of-bounds issues and keep score in expected range.\n  let score;\n  if (value <= p10) {\n    // Passing. Clamp to [0.9, 1].\n    score = Math.max(MIN_PASSING_SCORE, Math.min(1, complementaryPercentile));\n  } else if (value <= median) {\n    // Average. Clamp to [0.5, 0.9).\n    score = Math.max(MIN_AVERAGE_SCORE, Math.min(MAX_AVERAGE_SCORE, complementaryPercentile));\n  } else {\n    // Failing. Clamp to [0, 0.5).\n    score = Math.max(0, Math.min(MAX_FAILING_SCORE, complementaryPercentile));\n  }\n  return score;\n}\n\n/**\n * Interpolates the y value at a point x on the line defined by (x0, y0) and (x1, y1)\n */\nexport function linearInterpolation(x0: number, y0: number, x1: number, y1: number, x: number): number {\n  const slope = (y1 - y0) / (x1 - x0);\n  return y0 + (x - x0) * slope;\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport * as Cache from './Cache.js';\nexport * as CLSCulprits from './CLSCulprits.js';\nexport * as DocumentLatency from './DocumentLatency.js';\nexport * as DOMSize from './DOMSize.js';\nexport * as DuplicatedJavaScript from './DuplicatedJavaScript.js';\nexport * as FontDisplay from './FontDisplay.js';\nexport * as ForcedReflow from './ForcedReflow.js';\nexport * as ImageDelivery from './ImageDelivery.js';\nexport * as INPBreakdown from './INPBreakdown.js';\nexport * as LCPBreakdown from './LCPBreakdown.js';\nexport * as LCPDiscovery from './LCPDiscovery.js';\nexport * as LegacyJavaScript from './LegacyJavaScript.js';\nexport * as ModernHTTP from './ModernHTTP.js';\nexport * as NetworkDependencyTree from './NetworkDependencyTree.js';\nexport * as RenderBlocking from './RenderBlocking.js';\nexport * as SlowCSSSelector from './SlowCSSSelector.js';\nexport * as ThirdParties from './ThirdParties.js';\nexport * as Viewport from './Viewport.js';\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Protocol from '../../../generated/protocol.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type * as Types from '../types/types.js';\n\nimport {metricSavingsForWastedBytes} from './Common.js';\nimport {linearInterpolation} from './Statistics.js';\nimport {\n  InsightCategory,\n  type InsightModel,\n  type InsightSetContext,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Title of an insight that provides information and suggestions of resources that could improve their caching.\n   */\n  title: 'Use efficient cache lifetimes',\n  /**\n   * @description Text to tell the user about how caching can help improve performance.\n   */\n  description:\n      'A long cache lifetime can speed up repeat visits to your page. [Learn more](https://web.dev/uses-long-cache-ttl/).',\n  /**\n   * @description Column for a font loaded by the page to render text.\n   */\n  requestColumn: 'Request',\n  /**\n   * @description Column for a resource cache's Time To Live.\n   */\n  cacheTTL: 'Cache TTL',\n  /**\n   * @description Text describing that there were no requests found that need caching.\n   */\n  noRequestsToCache: 'No requests with inefficient cache policies',\n  /**\n   * @description Table row value representing the remaining items not shown in the table due to size constraints. This row will always represent at least 2 items.\n   * @example {5} PH1\n   */\n  others: '{PH1} others',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/Cache.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type CacheInsightModel = InsightModel<typeof UIStrings, {\n  requests: Array<{\n    request: Types.Events.SyntheticNetworkRequest,\n    ttl: number,\n    wastedBytes: number,\n  }>,\n}>;\n\n// Threshold for cache hits.\nconst IGNORE_THRESHOLD_IN_PERCENT = 0.925;\n\nfunction finalize(partialModel: PartialInsightModel<CacheInsightModel>): CacheInsightModel {\n  return {\n    insightKey: 'Cache',\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.ALL,\n    state: partialModel.requests.length > 0 ? 'fail' : 'pass',\n    ...partialModel,\n  };\n}\n\n/**\n * Determines if a request is \"cacheable\".\n * A request is \"cacheable\" if it is of the appropriate protocol and resource type\n * (see Helpers.Network.NON_NETWORK_SCHEMES and Helpers.Network.STATIC_RESOURCE_TYPE)\n * and has the appropriate statusCodes.\n */\nexport function isCacheable(request: Types.Events.SyntheticNetworkRequest): boolean {\n  // Caching doesn't make sense for requests not loaded over the network.\n  if (Helpers.Network.NON_NETWORK_SCHEMES.includes(request.args.data.protocol)) {\n    return false;\n  }\n  return Boolean(\n      Helpers.Network.CACHEABLE_STATUS_CODES.has(request.args.data.statusCode) &&\n      Helpers.Network.STATIC_RESOURCE_TYPES.has(request.args.data.resourceType || Protocol.Network.ResourceType.Other));\n}\n\n/**\n * Returns max-age if defined, otherwise expires header if defined, and null if not.\n */\nexport function computeCacheLifetimeInSeconds(\n    headers: Array<{name: string, value: string}>, cacheControl: Helpers.Network.CacheControl|null): number|null {\n  if (cacheControl?.['max-age'] !== undefined) {\n    return cacheControl['max-age'];\n  }\n\n  const expiresHeaders = headers.find(h => h.name === 'expires')?.value ?? null;\n  if (expiresHeaders) {\n    const expires = new Date(expiresHeaders).getTime();\n    // Treat expires values as having already expired.\n    if (!expires) {\n      return 0;\n    }\n    return Math.ceil((expires - Date.now()) / 1000);\n  }\n  return null;\n}\n\n/**\n * Computes the percent likelihood that a return visit will be within the cache lifetime, based on\n * historical Chrome UMA stats (see RESOURCE_AGE_IN_HOURS_DECILES comment).\n *\n * This function returns values on this curve: https://www.desmos.com/calculator/eaqiszhugy (but using seconds, rather than hours)\n * See http://github.com/GoogleChrome/lighthouse/pull/3531 for history.\n */\nfunction getCacheHitProbability(maxAgeInSeconds: number): number {\n  // This array contains the hand wavy distribution of the age of a resource in hours at the time of\n  // cache hit at 0th, 10th, 20th, 30th, etc percentiles. This is used to compute `wastedMs` since there\n  // are clearly diminishing returns to cache duration i.e. 6 months is not 2x better than 3 months.\n  // Based on UMA stats for HttpCache.StaleEntry.Validated.Age. see https://www.desmos.com/calculator/jjwc5mzuwd\n  // This UMA data is from 2017 but the metric isn't tracked any longer in 2025.\n  const RESOURCE_AGE_IN_HOURS_DECILES = [0, 0.2, 1, 3, 8, 12, 24, 48, 72, 168, 8760, Infinity];\n\n  const maxAgeInHours = maxAgeInSeconds / 3600;\n  const upperDecileIndex = RESOURCE_AGE_IN_HOURS_DECILES.findIndex(decile => decile >= maxAgeInHours);\n\n  // Clip the likelihood between 0 and 1\n  if (upperDecileIndex === RESOURCE_AGE_IN_HOURS_DECILES.length - 1) {\n    return 1;\n  }\n  if (upperDecileIndex === 0) {\n    return 0;\n  }\n\n  // Use the two closest decile points as control points\n  const upperDecileValue = RESOURCE_AGE_IN_HOURS_DECILES[upperDecileIndex];\n  const lowerDecileValue = RESOURCE_AGE_IN_HOURS_DECILES[upperDecileIndex - 1];\n  const upperDecile = upperDecileIndex / 10;\n  const lowerDecile = (upperDecileIndex - 1) / 10;\n\n  // Approximate the real likelihood with linear interpolation\n  return linearInterpolation(lowerDecileValue, lowerDecile, upperDecileValue, upperDecile, maxAgeInHours);\n}\n\nexport function getCombinedHeaders(responseHeaders: Array<{name: string, value: string}>): Map<string, string> {\n  const headers = new Map<string, string>();\n  for (const header of responseHeaders) {\n    const name = header.name.toLowerCase();\n    if (headers.get(name)) {\n      headers.set(name, `${headers.get(name)}, ${header.value}`);\n    } else {\n      headers.set(name, header.value);\n    }\n  }\n  return headers;\n}\n\n/**\n * Returns whether a request contains headers that disable caching.\n * Disabled caching is checked on the 'cache-control' and 'pragma' headers.\n */\nexport function cachingDisabled(\n    headers: Map<string, string>|null, parsedCacheControl: Helpers.Network.CacheControl|null): boolean {\n  const cacheControl = headers?.get('cache-control') ?? null;\n  const pragma = headers?.get('pragma') ?? null;\n\n  // The HTTP/1.0 Pragma header can disable caching if cache-control is not set, see https://tools.ietf.org/html/rfc7234#section-5.4\n  if (!cacheControl && pragma?.includes('no-cache')) {\n    return true;\n  }\n\n  // If we have any of these, the user intentionally doesn't want to cache.\n  if (parsedCacheControl &&\n      (parsedCacheControl['must-revalidate'] || parsedCacheControl['no-cache'] || parsedCacheControl['no-store'] ||\n       parsedCacheControl['private'])) {\n    return true;\n  }\n\n  return false;\n}\n\nexport interface CacheableRequest {\n  request: Types.Events.SyntheticNetworkRequest;\n  ttl: number;\n  wastedBytes: number;\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): CacheInsightModel {\n  const isWithinContext = (event: Types.Events.Event): boolean => Helpers.Timing.eventIsInBounds(event, context.bounds);\n  const contextRequests = parsedTrace.NetworkRequests.byTime.filter(isWithinContext);\n\n  const results: CacheableRequest[] = [];\n  let totalWastedBytes = 0;\n  const wastedBytesByRequestId = new Map<string, number>();\n  for (const req of contextRequests) {\n    if (!req.args.data.responseHeaders || !isCacheable(req)) {\n      continue;\n    }\n\n    const headers = getCombinedHeaders(req.args.data.responseHeaders);\n    const cacheControl = headers.get('cache-control') ?? null;\n    const parsedDirectives = Helpers.Network.parseCacheControl(cacheControl);\n\n    // Skip requests that are deliberately avoiding caching.\n    if (cachingDisabled(headers, parsedDirectives)) {\n      continue;\n    }\n\n    let ttl = computeCacheLifetimeInSeconds(req.args.data.responseHeaders, parsedDirectives);\n    // Ignore if a non-positive number.\n    if (ttl !== null && (!Number.isFinite(ttl) || ttl <= 0)) {\n      continue;\n    }\n    ttl = ttl || 0;\n\n    // Ignore >= 30d.\n    const ttlDays = ttl / 86400;\n    if (ttlDays >= 30) {\n      continue;\n    }\n\n    // If cache lifetime is high enough, let's skip.\n    const cacheHitProbability = getCacheHitProbability(ttl);\n    if (cacheHitProbability > IGNORE_THRESHOLD_IN_PERCENT) {\n      continue;\n    }\n\n    const transferSize = req.args.data.encodedDataLength || 0;\n    const wastedBytes = (1 - cacheHitProbability) * transferSize;\n\n    wastedBytesByRequestId.set(req.args.data.requestId, wastedBytes);\n    totalWastedBytes += wastedBytes;\n\n    results.push({request: req, ttl, wastedBytes});\n  }\n\n  // Sort by transfer size.\n  results.sort((a, b) => {\n    return b.request.args.data.decodedBodyLength - a.request.args.data.decodedBodyLength || a.ttl - b.ttl;\n  });\n\n  return finalize({\n    relatedEvents: results.map(r => r.request),\n    requests: results,\n    metricSavings: metricSavingsForWastedBytes(wastedBytesByRequestId, context),\n    wastedBytes: totalWastedBytes,\n  });\n}\n\nexport function createOverlayForRequest(request: Types.Events.SyntheticNetworkRequest): Types.Overlays.EntryOutline {\n  return {\n    type: 'ENTRY_OUTLINE',\n    entry: request,\n    outlineReason: 'ERROR',\n  };\n}\n\nexport function createOverlays(model: CacheInsightModel): Types.Overlays.Overlay[] {\n  return model.requests.map(req => createOverlayForRequest(req.request));\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../core/common/common.js';\nimport type * as Lantern from '../lantern/lantern.js';\nimport type * as Types from '../types/types.js';\n\nimport type * as Models from './Models.js';\n\n/**\n * Context for the portion of the trace an insight should look at.\n */\nexport type InsightSetContext = InsightSetContextWithoutNavigation|InsightSetContextWithNavigation;\n\nexport interface InsightSetContextWithoutNavigation {\n  bounds: Types.Timing.TraceWindowMicro;\n  frameId: string;\n  navigation?: never;\n}\n\nexport interface InsightSetContextWithNavigation {\n  bounds: Types.Timing.TraceWindowMicro;\n  frameId: string;\n  navigation: Types.Events.NavigationStart;\n  navigationId: string;\n  lantern?: LanternContext;\n}\n\nexport interface LanternContext {\n  requests: Array<Lantern.Types.NetworkRequest<Types.Events.SyntheticNetworkRequest>>;\n  graph: Lantern.Graph.Node<Types.Events.SyntheticNetworkRequest>;\n  simulator: Lantern.Simulation.Simulator<Types.Events.SyntheticNetworkRequest>;\n  metrics: Record<string, Lantern.Metrics.MetricResult>;\n}\n\nexport type InsightModelsType = typeof Models;\n\nexport enum InsightWarning {\n  NO_FP = 'NO_FP',\n  NO_LCP = 'NO_LCP',\n  // No network request could be identified as the primary HTML document.\n  NO_DOCUMENT_REQUEST = 'NO_DOCUMENT_REQUEST',\n  NO_LAYOUT = 'NO_LAYOUT',\n}\n\nexport interface MetricSavings {\n  /* eslint-disable @typescript-eslint/naming-convention */\n  FCP?: Types.Timing.Milli;\n  LCP?: Types.Timing.Milli;\n  TBT?: Types.Timing.Milli;\n  CLS?: number;\n  INP?: Types.Timing.Milli;\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport enum InsightCategory {\n  ALL = 'All',\n  INP = 'INP',\n  LCP = 'LCP',\n  CLS = 'CLS',\n}\n\nexport type RelatedEventsMap = Map<Types.Events.Event, string[]>;\n\nexport type Checklist<Keys extends string> = Record<Keys, {label: Common.UIString.LocalizedString, value: boolean}>;\n\nexport type InsightModel<UIStrings extends Record<string, string> = Record<string, string>,\n                                           ExtraDetail extends Record<string, unknown> = Record<string, unknown>> =\n    ExtraDetail&{\n      /** Used internally to identify the type of a model, not shown visibly to users **/\n      insightKey: keyof InsightModelsType,\n      /** Not used within DevTools - this is for external consumers (like Lighthouse). */\n      strings: UIStrings,\n      title: Common.UIString.LocalizedString,\n      description: Common.UIString.LocalizedString,\n      category: InsightCategory,\n      state: 'pass' | 'fail' | 'informative',\n      /** Used by RelatedInsightChips.ts */\n      relatedEvents?: RelatedEventsMap | Types.Events.Event[],\n      warnings?: InsightWarning[],\n      metricSavings?: MetricSavings,\n      /**\n       * An estimate for the number of bytes that this insight deems to have been wasted.\n       * Bytes are in terms of transfer size: for each component of savings related to an\n       * individual request, the insight will estimate its impact on transfer size by using\n       * the compression ratio of the resource.\n       *\n       * This field is only displayed for informational purposes.\n       */\n      wastedBytes?: number,\n      frameId?: string,\n      /**\n       * If this insight is attached to a navigation, this stores its ID.\n       */\n      navigationId?: string,\n      /** This is lazily-generated because some insights may create many overlays. */\n      createOverlays?: () => Types.Overlays.Overlay[],\n    };\n\nexport type PartialInsightModel<T> =\n    Omit<T, 'strings'|'title'|'description'|'category'|'state'|'insightKey'|'navigationId'|'frameId'>;\n\n/**\n * Contains insights for a specific navigation. If a trace began after a navigation already started,\n * this could instead represent the duration from the beginning of the trace up to the first recorded\n * navigation (or the end of the trace).\n */\nexport interface InsightSet {\n  /** If for a navigation, this is the navigationId. Else it is Trace.Types.Events.NO_NAVIGATION. */\n  id: Types.Events.NavigationId;\n  /** The URL to show in the accordion list. */\n  url: URL;\n  frameId: string;\n  bounds: Types.Timing.TraceWindowMicro;\n  model: InsightModels;\n  navigation?: Types.Events.NavigationStart;\n}\n\n/**\n * Contains insights for a specific insight set.\n */\nexport type InsightModels = {\n  [I in keyof InsightModelsType]: ReturnType<InsightModelsType[I]['generateInsight']>;\n};\n\n/**\n * Contains insights for the entire trace. Insights are mostly grouped by `navigationId`, with one exception:\n *\n * If the analyzed trace started after the navigation, and has meaningful work with that span, there is no\n * navigation to map it to. In this case `Types.Events.NO_NAVIGATION` is used for the key.\n */\nexport type TraceInsightSets = Map<Types.Events.NavigationId, InsightSet>;\n\nexport const enum InsightKeys {\n  LCP_BREAKDOWN = 'LCPBreakdown',\n  INP_BREAKDOWN = 'INPBreakdown',\n  CLS_CULPRITS = 'CLSCulprits',\n  THIRD_PARTIES = 'ThirdParties',\n  DOCUMENT_LATENCY = 'DocumentLatency',\n  DOM_SIZE = 'DOMSize',\n  DUPLICATE_JAVASCRIPT = 'DuplicatedJavaScript',\n  FONT_DISPLAY = 'FontDisplay',\n  FORCED_REFLOW = 'ForcedReflow',\n  IMAGE_DELIVERY = 'ImageDelivery',\n  LCP_DISCOVERY = 'LCPDiscovery',\n  LEGACY_JAVASCRIPT = 'LegacyJavaScript',\n  NETWORK_DEPENDENCY_TREE = 'NetworkDependencyTree',\n  RENDER_BLOCKING = 'RenderBlocking',\n  SLOW_CSS_SELECTOR = 'SlowCSSSelector',\n  VIEWPORT = 'Viewport',\n  MODERN_HTTP = 'ModernHTTP',\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /** Title of an insight that provides details about why elements shift/move on the page. The causes for these shifts are referred to as culprits (\"reasons\"). */\n  title: 'Layout shift culprits',\n  /**\n   * @description Description of a DevTools insight that identifies the reasons that elements shift on the page.\n   * This is displayed after a user expands the section to see more. No character length limits.\n   */\n  description:\n      'Layout shifts occur when elements move absent any user interaction. [Investigate the causes of layout shifts](https://web.dev/articles/optimize-cls), such as elements being added, removed, or their fonts changing as the page loads.',\n  /**\n   * @description Text indicating the worst layout shift cluster.\n   */\n  worstLayoutShiftCluster: 'Worst layout shift cluster',\n  /**\n   * @description Text indicating the worst layout shift cluster.\n   */\n  worstCluster: 'Worst cluster',\n  /**\n   * @description Text indicating a layout shift cluster and its start time.\n   * @example {32 ms} PH1\n   */\n  layoutShiftCluster: 'Layout shift cluster @ {PH1}',\n  /**\n   * @description Text indicating the biggest reasons for the layout shifts.\n   */\n  topCulprits: 'Top layout shift culprits',\n  /**\n   * @description Text for a culprit type of Injected iframe.\n   */\n  injectedIframe: 'Injected iframe',\n  /**\n   * @description Text for a culprit type of web font request.\n   */\n  webFont: 'Web font',\n  /**\n   * @description Text for a culprit type of Animation.\n   */\n  animation: 'Animation',\n  /**\n   * @description Text for a culprit type of Unsized image.\n   */\n  unsizedImage: 'Unsized image element',\n  /**\n   * @description Text status when there were no layout shifts detected.\n   */\n  noLayoutShifts: 'No layout shifts',\n  /**\n   * @description Text status when there no layout shifts culprits/root causes were found.\n   */\n  noCulprits: 'Could not detect any layout shift culprits',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/CLSCulprits.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type CLSCulpritsInsightModel = InsightModel<typeof UIStrings, {\n  animationFailures: readonly NoncompositedAnimationFailure[],\n  shifts: Map<Types.Events.SyntheticLayoutShift, LayoutShiftRootCausesData>,\n  clusters: Types.Events.SyntheticLayoutShiftCluster[],\n  worstCluster: Types.Events.SyntheticLayoutShiftCluster | undefined,\n  /** The top 3 shift root causes for each cluster. */\n  topCulpritsByCluster: Map<Types.Events.SyntheticLayoutShiftCluster, LayoutShiftItem[]>,\n}>;\n\nexport const enum AnimationFailureReasons {\n  ACCELERATED_ANIMATIONS_DISABLED = 'ACCELERATED_ANIMATIONS_DISABLED',\n  EFFECT_SUPPRESSED_BY_DEVTOOLS = 'EFFECT_SUPPRESSED_BY_DEVTOOLS',\n  INVALID_ANIMATION_OR_EFFECT = 'INVALID_ANIMATION_OR_EFFECT',\n  EFFECT_HAS_UNSUPPORTED_TIMING_PARAMS = 'EFFECT_HAS_UNSUPPORTED_TIMING_PARAMS',\n  EFFECT_HAS_NON_REPLACE_COMPOSITE_MODE = 'EFFECT_HAS_NON_REPLACE_COMPOSITE_MODE',\n  TARGET_HAS_INVALID_COMPOSITING_STATE = 'TARGET_HAS_INVALID_COMPOSITING_STATE',\n  TARGET_HAS_INCOMPATIBLE_ANIMATIONS = 'TARGET_HAS_INCOMPATIBLE_ANIMATIONS',\n  TARGET_HAS_CSS_OFFSET = 'TARGET_HAS_CSS_OFFSET',\n  ANIMATION_AFFECTS_NON_CSS_PROPERTIES = 'ANIMATION_AFFECTS_NON_CSS_PROPERTIES',\n  TRANSFORM_RELATED_PROPERTY_CANNOT_BE_ACCELERATED_ON_TARGET =\n      'TRANSFORM_RELATED_PROPERTY_CANNOT_BE_ACCELERATED_ON_TARGET',\n  TRANSFROM_BOX_SIZE_DEPENDENT = 'TRANSFROM_BOX_SIZE_DEPENDENT',\n  FILTER_RELATED_PROPERTY_MAY_MOVE_PIXELS = 'FILTER_RELATED_PROPERTY_MAY_MOVE_PIXELS',\n  UNSUPPORTED_CSS_PROPERTY = 'UNSUPPORTED_CSS_PROPERTY',\n  MIXED_KEYFRAME_VALUE_TYPES = 'MIXED_KEYFRAME_VALUE_TYPES',\n  TIMELINE_SOURCE_HAS_INVALID_COMPOSITING_STATE = 'TIMELINE_SOURCE_HAS_INVALID_COMPOSITING_STATE',\n  ANIMATION_HAS_NO_VISIBLE_CHANGE = 'ANIMATION_HAS_NO_VISIBLE_CHANGE',\n  AFFECTS_IMPORTANT_PROPERTY = 'AFFECTS_IMPORTANT_PROPERTY',\n  SVG_TARGET_HAS_INDEPENDENT_TRANSFORM_PROPERTY = 'SVG_TARGET_HAS_INDEPENDENT_TRANSFORM_PROPERTY',\n}\n\nexport const enum LayoutShiftType {\n  WEB_FONT = 0,\n  IFRAMES = 1,\n  ANIMATIONS = 2,\n  UNSIZED_IMAGE = 3,\n}\n\nexport type LayoutShiftItem = {\n  type: LayoutShiftType.UNSIZED_IMAGE,\n  description: Platform.UIString.LocalizedString,\n  url: string,\n  backendNodeId: Protocol.DOM.BackendNodeId,\n  frame: string,\n}|{\n  type: Exclude<LayoutShiftType, LayoutShiftType.UNSIZED_IMAGE>,\n  description: Platform.UIString.LocalizedString,\n};\n\nexport interface NoncompositedAnimationFailure {\n  /**\n   * Animation name.\n   */\n  name?: string;\n  /**\n   * Failure reason based on mask number defined in\n   * https://source.chromium.org/search?q=f:compositor_animations.h%20%22enum%20FailureReason%22.\n   */\n  failureReasons: AnimationFailureReasons[];\n  /**\n   * Unsupported properties.\n   */\n  unsupportedProperties?: Types.Events.Animation['args']['data']['unsupportedProperties'];\n  /**\n   * Animation event.\n   */\n  animation?: Types.Events.SyntheticAnimationPair;\n}\n\n/**\n * Each failure reason is represented by a bit flag. The bit shift operator '<<' is used to define\n * which bit corresponds to each failure reason.\n * https://source.chromium.org/search?q=f:compositor_animations.h%20%22enum%20FailureReason%22\n */\nconst ACTIONABLE_FAILURE_REASONS: Array<{\n  flag: number,\n  failure: AnimationFailureReasons,\n}> =\n    [\n      {\n        flag: 1 << 0,\n        failure: AnimationFailureReasons.ACCELERATED_ANIMATIONS_DISABLED,\n      },\n      {\n        flag: 1 << 1,\n        failure: AnimationFailureReasons.EFFECT_SUPPRESSED_BY_DEVTOOLS,\n      },\n      {\n        flag: 1 << 2,\n        failure: AnimationFailureReasons.INVALID_ANIMATION_OR_EFFECT,\n      },\n      {\n        flag: 1 << 3,\n        failure: AnimationFailureReasons.EFFECT_HAS_UNSUPPORTED_TIMING_PARAMS,\n      },\n      {\n        flag: 1 << 4,\n        failure: AnimationFailureReasons.EFFECT_HAS_NON_REPLACE_COMPOSITE_MODE,\n      },\n      {\n        flag: 1 << 5,\n        failure: AnimationFailureReasons.TARGET_HAS_INVALID_COMPOSITING_STATE,\n      },\n      {\n        flag: 1 << 6,\n        failure: AnimationFailureReasons.TARGET_HAS_INCOMPATIBLE_ANIMATIONS,\n      },\n      {\n        flag: 1 << 7,\n        failure: AnimationFailureReasons.TARGET_HAS_CSS_OFFSET,\n      },\n      // The failure 1 << 8 is marked as obsolete in Blink\n      {\n        flag: 1 << 9,\n        failure: AnimationFailureReasons.ANIMATION_AFFECTS_NON_CSS_PROPERTIES,\n      },\n      {\n        flag: 1 << 10,\n        failure: AnimationFailureReasons.TRANSFORM_RELATED_PROPERTY_CANNOT_BE_ACCELERATED_ON_TARGET,\n      },\n      {\n        flag: 1 << 11,\n        failure: AnimationFailureReasons.TRANSFROM_BOX_SIZE_DEPENDENT,\n      },\n      {\n        flag: 1 << 12,\n        failure: AnimationFailureReasons.FILTER_RELATED_PROPERTY_MAY_MOVE_PIXELS,\n      },\n      {\n        flag: 1 << 13,\n        failure: AnimationFailureReasons.UNSUPPORTED_CSS_PROPERTY,\n      },\n      // The failure 1 << 14 is marked as obsolete in Blink\n      {\n        flag: 1 << 15,\n        failure: AnimationFailureReasons.MIXED_KEYFRAME_VALUE_TYPES,\n      },\n      {\n        flag: 1 << 16,\n        failure: AnimationFailureReasons.TIMELINE_SOURCE_HAS_INVALID_COMPOSITING_STATE,\n      },\n      {\n        flag: 1 << 17,\n        failure: AnimationFailureReasons.ANIMATION_HAS_NO_VISIBLE_CHANGE,\n      },\n      {\n        flag: 1 << 18,\n        failure: AnimationFailureReasons.AFFECTS_IMPORTANT_PROPERTY,\n      },\n      {\n        flag: 1 << 19,\n        failure: AnimationFailureReasons.SVG_TARGET_HAS_INDEPENDENT_TRANSFORM_PROPERTY,\n      },\n    ] as const;\n\n// 500ms window.\n// Use this window to consider events and requests that may have caused a layout shift.\nconst ROOT_CAUSE_WINDOW = Helpers.Timing.secondsToMicro(Types.Timing.Seconds(0.5));\n\nexport interface UnsizedImage {\n  backendNodeId: Protocol.DOM.BackendNodeId;\n  paintImageEvent: Types.Events.PaintImage;\n}\n\nexport interface IframeRootCause {\n  frame: string;\n  url?: string;\n}\n\nexport interface LayoutShiftRootCausesData {\n  iframes: IframeRootCause[];\n  webFonts: Types.Events.SyntheticNetworkRequest[];\n  nonCompositedAnimations: NoncompositedAnimationFailure[];\n  unsizedImages: UnsizedImage[];\n}\n\n/**\n * Returns if an event happens within the root cause window, before the target event.\n *          ROOT_CAUSE_WINDOW               v target event\n *        |------------------------|=======================\n */\nfunction isInRootCauseWindow(event: Types.Events.Event, targetEvent: Types.Events.Event): boolean {\n  const eventEnd = event.dur ? event.ts + event.dur : event.ts;\n  return eventEnd < targetEvent.ts && eventEnd >= targetEvent.ts - ROOT_CAUSE_WINDOW;\n}\n\nexport function getNonCompositedFailure(animationEvent: Types.Events.SyntheticAnimationPair):\n    NoncompositedAnimationFailure[] {\n  const failures: NoncompositedAnimationFailure[] = [];\n  const beginEvent = animationEvent.args.data.beginEvent;\n  const instantEvents = animationEvent.args.data.instantEvents || [];\n  /**\n   * Animation events containing composite information are ASYNC_NESTABLE_INSTANT ('n').\n   * An animation may also contain multiple 'n' events, so we look through those with useful non-composited data.\n   */\n  for (const event of instantEvents) {\n    const failureMask = event.args.data.compositeFailed;\n    const unsupportedProperties = event.args.data.unsupportedProperties;\n    if (!failureMask) {\n      continue;\n    }\n    const failureReasons =\n        ACTIONABLE_FAILURE_REASONS.filter(reason => failureMask & reason.flag).map(reason => reason.failure);\n    const failure: NoncompositedAnimationFailure = {\n      name: beginEvent.args.data.displayName,\n      failureReasons,\n      unsupportedProperties,\n      animation: animationEvent,\n    };\n    failures.push(failure);\n  }\n  return failures;\n}\n\nfunction getNonCompositedFailureRootCauses(\n    animationEvents: Types.Events.SyntheticAnimationPair[],\n    prePaintEvents: Types.Events.PrePaint[],\n    shiftsByPrePaint: Map<Types.Events.PrePaint, Types.Events.SyntheticLayoutShift[]>,\n    rootCausesByShift: Map<Types.Events.SyntheticLayoutShift, LayoutShiftRootCausesData>,\n    ): NoncompositedAnimationFailure[] {\n  const allAnimationFailures: NoncompositedAnimationFailure[] = [];\n  for (const animation of animationEvents) {\n    /**\n     * Animation events containing composite information are ASYNC_NESTABLE_INSTANT ('n').\n     * An animation may also contain multiple 'n' events, so we look through those with useful non-composited data.\n     */\n    const failures = getNonCompositedFailure(animation);\n    if (!failures) {\n      continue;\n    }\n    allAnimationFailures.push(...failures);\n\n    const nextPrePaint = getNextEvent(prePaintEvents, animation) as Types.Events.PrePaint | null;\n    // If no following prePaint, this is not a root cause.\n    if (!nextPrePaint) {\n      continue;\n    }\n\n    // If the animation event is outside the ROOT_CAUSE_WINDOW, it could not be a root cause.\n    if (!isInRootCauseWindow(animation, nextPrePaint)) {\n      continue;\n    }\n\n    const shifts = shiftsByPrePaint.get(nextPrePaint);\n    // if no layout shift(s), this is not a root cause.\n    if (!shifts) {\n      continue;\n    }\n\n    for (const shift of shifts) {\n      const rootCausesForShift = rootCausesByShift.get(shift);\n      if (!rootCausesForShift) {\n        throw new Error('Unaccounted shift');\n      }\n      rootCausesForShift.nonCompositedAnimations.push(...failures);\n    }\n  }\n\n  return allAnimationFailures;\n}\n\n/**\n * Given an array of layout shift and PrePaint events, returns a mapping from\n * PrePaint events to layout shifts dispatched within it.\n */\nfunction getShiftsByPrePaintEvents(\n    layoutShifts: Types.Events.SyntheticLayoutShift[],\n    prePaintEvents: Types.Events.PrePaint[],\n    ): Map<Types.Events.PrePaint, Types.Events.SyntheticLayoutShift[]> {\n  // Maps from PrePaint events to LayoutShifts that occurred in each one.\n  const shiftsByPrePaint = new Map<Types.Events.PrePaint, Types.Events.SyntheticLayoutShift[]>();\n\n  // Associate all shifts to their corresponding PrePaint.\n  for (const prePaintEvent of prePaintEvents) {\n    const firstShiftIndex =\n        Platform.ArrayUtilities.nearestIndexFromBeginning(layoutShifts, shift => shift.ts >= prePaintEvent.ts);\n    if (firstShiftIndex === null) {\n      // No layout shifts registered after this PrePaint start. Continue.\n      continue;\n    }\n    for (let i = firstShiftIndex; i < layoutShifts.length; i++) {\n      const shift = layoutShifts[i];\n      if (shift.ts >= prePaintEvent.ts && shift.ts <= prePaintEvent.ts + prePaintEvent.dur) {\n        const shiftsInPrePaint = Platform.MapUtilities.getWithDefault(shiftsByPrePaint, prePaintEvent, () => []);\n        shiftsInPrePaint.push(shift);\n      }\n      if (shift.ts > prePaintEvent.ts + prePaintEvent.dur) {\n        // Reached all layoutShifts of this PrePaint. Break out to continue with the next prePaint event.\n        break;\n      }\n    }\n  }\n  return shiftsByPrePaint;\n}\n\n/**\n * Given a source event list, this returns the first event of that list that directly follows the target event.\n */\nfunction getNextEvent(sourceEvents: Types.Events.Event[], targetEvent: Types.Events.Event): Types.Events.Event|\n    undefined {\n  const index = Platform.ArrayUtilities.nearestIndexFromBeginning(\n      sourceEvents, source => source.ts > targetEvent.ts + (targetEvent.dur || 0));\n  // No PrePaint event registered after this event\n  if (index === null) {\n    return undefined;\n  }\n\n  return sourceEvents[index];\n}\n\n/**\n * An Iframe is considered a root cause if the iframe event occurs before a prePaint event\n * and within this prePaint event a layout shift(s) occurs.\n */\nfunction getIframeRootCauses(\n    parsedTrace: Handlers.Types.ParsedTrace,\n    iframeCreatedEvents: readonly Types.Events.RenderFrameImplCreateChildFrame[],\n    prePaintEvents: Types.Events.PrePaint[],\n    shiftsByPrePaint: Map<Types.Events.PrePaint, Types.Events.SyntheticLayoutShift[]>,\n    rootCausesByShift: Map<Types.Events.SyntheticLayoutShift, LayoutShiftRootCausesData>,\n    domLoadingEvents: readonly Types.Events.DomLoading[]):\n    Map<Types.Events.SyntheticLayoutShift, LayoutShiftRootCausesData> {\n  for (const iframeEvent of iframeCreatedEvents) {\n    const nextPrePaint = getNextEvent(prePaintEvents, iframeEvent) as Types.Events.PrePaint | null;\n    // If no following prePaint, this is not a root cause.\n    if (!nextPrePaint) {\n      continue;\n    }\n    const shifts = shiftsByPrePaint.get(nextPrePaint);\n    // if no layout shift(s), this is not a root cause.\n    if (!shifts) {\n      continue;\n    }\n    for (const shift of shifts) {\n      const rootCausesForShift = rootCausesByShift.get(shift);\n      if (!rootCausesForShift) {\n        throw new Error('Unaccounted shift');\n      }\n\n      // Look for the first dom event that occurs within the bounds of the iframe event.\n      // This contains the frame id.\n      const domEvent = domLoadingEvents.find(e => {\n        const maxIframe = Types.Timing.Micro(iframeEvent.ts + (iframeEvent.dur ?? 0));\n        return e.ts >= iframeEvent.ts && e.ts <= maxIframe;\n      });\n      if (domEvent?.args.frame) {\n        const frame = domEvent.args.frame;\n\n        let url;\n        const processes = parsedTrace.Meta.rendererProcessesByFrame.get(frame);\n        if (processes && processes.size > 0) {\n          url = [...processes.values()][0]?.[0].frame.url;\n        }\n\n        rootCausesForShift.iframes.push({frame, url});\n      }\n    }\n  }\n  return rootCausesByShift;\n}\n\n/**\n * An unsized image is considered a root cause if its PaintImage can be correlated to a\n * layout shift. We can correlate PaintImages with unsized images by their matching nodeIds.\n *                           X      <- layout shift\n *              |----------------|\n *                    ^ PrePaint event   |-----|\n *                                          ^ PaintImage\n */\nfunction getUnsizedImageRootCauses(\n    unsizedImageEvents: readonly Types.Events.LayoutImageUnsized[], paintImageEvents: Types.Events.PaintImage[],\n    shiftsByPrePaint: Map<Types.Events.PrePaint, Types.Events.SyntheticLayoutShift[]>,\n    rootCausesByShift: Map<Types.Events.SyntheticLayoutShift, LayoutShiftRootCausesData>):\n    Map<Types.Events.SyntheticLayoutShift, LayoutShiftRootCausesData> {\n  shiftsByPrePaint.forEach((shifts, prePaint) => {\n    const paintImage = getNextEvent(paintImageEvents, prePaint) as Types.Events.PaintImage | null;\n    if (!paintImage) {\n      return;\n    }\n    // The unsized image corresponds to this PaintImage.\n    const matchingNode =\n        unsizedImageEvents.find(unsizedImage => unsizedImage.args.data.nodeId === paintImage.args.data.nodeId);\n    if (!matchingNode) {\n      return;\n    }\n    // The unsized image is a potential root cause of all the shifts of this prePaint.\n    for (const shift of shifts) {\n      const rootCausesForShift = rootCausesByShift.get(shift);\n      if (!rootCausesForShift) {\n        throw new Error('Unaccounted shift');\n      }\n      rootCausesForShift.unsizedImages.push({\n        backendNodeId: matchingNode.args.data.nodeId,\n        paintImageEvent: paintImage,\n      });\n    }\n  });\n  return rootCausesByShift;\n}\n\nexport function isCLSCulprits(insight: InsightModel): insight is CLSCulpritsInsightModel {\n  return insight.insightKey === InsightKeys.CLS_CULPRITS;\n}\n\n/**\n * A font request is considered a root cause if the request occurs before a prePaint event\n * and within this prePaint event a layout shift(s) occurs. Additionally, this font request should\n * happen within the ROOT_CAUSE_WINDOW of the prePaint event.\n */\nfunction getFontRootCauses(\n    networkRequests: Types.Events.SyntheticNetworkRequest[], prePaintEvents: Types.Events.PrePaint[],\n    shiftsByPrePaint: Map<Types.Events.PrePaint, Types.Events.SyntheticLayoutShift[]>,\n    rootCausesByShift: Map<Types.Events.SyntheticLayoutShift, LayoutShiftRootCausesData>):\n    Map<Types.Events.SyntheticLayoutShift, LayoutShiftRootCausesData> {\n  const fontRequests =\n      networkRequests.filter(req => req.args.data.resourceType === 'Font' && req.args.data.mimeType.startsWith('font'));\n\n  for (const req of fontRequests) {\n    const nextPrePaint = getNextEvent(prePaintEvents, req) as Types.Events.PrePaint | null;\n    if (!nextPrePaint) {\n      continue;\n    }\n\n    // If the req is outside the ROOT_CAUSE_WINDOW, it could not be a root cause.\n    if (!isInRootCauseWindow(req, nextPrePaint)) {\n      continue;\n    }\n\n    // Get the shifts that belong to this prepaint\n    const shifts = shiftsByPrePaint.get(nextPrePaint);\n\n    // if no layout shift(s) in this prePaint, the request is not a root cause.\n    if (!shifts) {\n      continue;\n    }\n    // Include the root cause to the shifts in this prePaint.\n    for (const shift of shifts) {\n      const rootCausesForShift = rootCausesByShift.get(shift);\n      if (!rootCausesForShift) {\n        throw new Error('Unaccounted shift');\n      }\n      rootCausesForShift.webFonts.push(req);\n    }\n  }\n  return rootCausesByShift;\n}\n\n/**\n * Returns the top 3 shift root causes based on the given cluster.\n */\nfunction getTopCulprits(\n    cluster: Types.Events.SyntheticLayoutShiftCluster,\n    culpritsByShift: Map<Types.Events.SyntheticLayoutShift, LayoutShiftRootCausesData>): LayoutShiftItem[] {\n  const MAX_TOP_CULPRITS = 3;\n  const causes: LayoutShiftItem[] = [];\n\n  const shifts = cluster.events;\n  for (const shift of shifts) {\n    const culprits = culpritsByShift.get(shift);\n    if (!culprits) {\n      continue;\n    }\n\n    const fontReq = culprits.webFonts;\n    const iframes = culprits.iframes;\n    const animations = culprits.nonCompositedAnimations;\n    const unsizedImages = culprits.unsizedImages;\n\n    for (let i = 0; i < fontReq.length && causes.length < MAX_TOP_CULPRITS; i++) {\n      causes.push({type: LayoutShiftType.WEB_FONT, description: i18nString(UIStrings.webFont)});\n    }\n    for (let i = 0; i < iframes.length && causes.length < MAX_TOP_CULPRITS; i++) {\n      causes.push({type: LayoutShiftType.IFRAMES, description: i18nString(UIStrings.injectedIframe)});\n    }\n    for (let i = 0; i < animations.length && causes.length < MAX_TOP_CULPRITS; i++) {\n      causes.push({type: LayoutShiftType.ANIMATIONS, description: i18nString(UIStrings.animation)});\n    }\n    for (let i = 0; i < unsizedImages.length && causes.length < MAX_TOP_CULPRITS; i++) {\n      causes.push({\n        type: LayoutShiftType.UNSIZED_IMAGE,\n        description: i18nString(UIStrings.unsizedImage),\n        url: unsizedImages[i].paintImageEvent.args.data.url || '',\n        backendNodeId: unsizedImages[i].backendNodeId,\n        frame: unsizedImages[i].paintImageEvent.args.data.frame || '',\n      });\n    }\n\n    if (causes.length >= MAX_TOP_CULPRITS) {\n      break;\n    }\n  }\n\n  return causes.slice(0, MAX_TOP_CULPRITS);\n}\n\nfunction finalize(partialModel: PartialInsightModel<CLSCulpritsInsightModel>): CLSCulpritsInsightModel {\n  let state: CLSCulpritsInsightModel['state'] = 'pass';\n  if (partialModel.worstCluster) {\n    const classification = Handlers.ModelHandlers.LayoutShifts.scoreClassificationForLayoutShift(\n        partialModel.worstCluster.clusterCumulativeScore);\n    if (classification === Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification.GOOD) {\n      state = 'informative';\n    } else {\n      state = 'fail';\n    }\n  }\n\n  return {\n    insightKey: InsightKeys.CLS_CULPRITS,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.CLS,\n    state,\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): CLSCulpritsInsightModel {\n  const isWithinContext = (event: Types.Events.Event): boolean => Helpers.Timing.eventIsInBounds(event, context.bounds);\n\n  const compositeAnimationEvents = parsedTrace.Animations.animations.filter(isWithinContext);\n  const iframeEvents = parsedTrace.LayoutShifts.renderFrameImplCreateChildFrameEvents.filter(isWithinContext);\n  const networkRequests = parsedTrace.NetworkRequests.byTime.filter(isWithinContext);\n  const domLoadingEvents = parsedTrace.LayoutShifts.domLoadingEvents.filter(isWithinContext);\n  const unsizedImageEvents = parsedTrace.LayoutShifts.layoutImageUnsizedEvents.filter(isWithinContext);\n\n  const clusterKey = context.navigation ? context.navigationId : Types.Events.NO_NAVIGATION;\n  const clusters = parsedTrace.LayoutShifts.clustersByNavigationId.get(clusterKey) ?? [];\n  const clustersByScore = clusters.toSorted((a, b) => b.clusterCumulativeScore - a.clusterCumulativeScore);\n  const worstCluster = clustersByScore.at(0);\n  const layoutShifts = clusters.flatMap(cluster => cluster.events);\n  const prePaintEvents = parsedTrace.LayoutShifts.prePaintEvents.filter(isWithinContext);\n  const paintImageEvents = parsedTrace.LayoutShifts.paintImageEvents.filter(isWithinContext);\n\n  // Get root causes.\n  const rootCausesByShift = new Map<Types.Events.SyntheticLayoutShift, LayoutShiftRootCausesData>();\n  const shiftsByPrePaint = getShiftsByPrePaintEvents(layoutShifts, prePaintEvents);\n\n  for (const shift of layoutShifts) {\n    rootCausesByShift.set(shift, {iframes: [], webFonts: [], nonCompositedAnimations: [], unsizedImages: []});\n  }\n\n  // Populate root causes for rootCausesByShift.\n  getIframeRootCauses(parsedTrace, iframeEvents, prePaintEvents, shiftsByPrePaint, rootCausesByShift, domLoadingEvents);\n  getFontRootCauses(networkRequests, prePaintEvents, shiftsByPrePaint, rootCausesByShift);\n  getUnsizedImageRootCauses(unsizedImageEvents, paintImageEvents, shiftsByPrePaint, rootCausesByShift);\n  const animationFailures =\n      getNonCompositedFailureRootCauses(compositeAnimationEvents, prePaintEvents, shiftsByPrePaint, rootCausesByShift);\n\n  const relatedEvents: Types.Events.Event[] = [...layoutShifts];\n  if (worstCluster) {\n    relatedEvents.push(worstCluster);\n  }\n\n  const topCulpritsByCluster = new Map<Types.Events.SyntheticLayoutShiftCluster, LayoutShiftItem[]>();\n  for (const cluster of clusters) {\n    topCulpritsByCluster.set(cluster, getTopCulprits(cluster, rootCausesByShift));\n  }\n\n  return finalize({\n    relatedEvents,\n    animationFailures,\n    shifts: rootCausesByShift,\n    clusters,\n    worstCluster,\n    topCulpritsByCluster,\n  });\n}\n\nexport function createOverlays(model: CLSCulpritsInsightModel): Types.Overlays.Overlay[] {\n  const clustersByScore = model.clusters.toSorted((a, b) => b.clusterCumulativeScore - a.clusterCumulativeScore) ?? [];\n  const worstCluster = clustersByScore[0];\n  if (!worstCluster) {\n    return [];\n  }\n\n  const range = Types.Timing.Micro(worstCluster.dur ?? 0);\n  const max = Types.Timing.Micro(worstCluster.ts + range);\n\n  return [{\n    type: 'TIMESPAN_BREAKDOWN',\n    sections: [\n      {\n        bounds: {min: worstCluster.ts, range, max},\n        label: i18nString(UIStrings.worstLayoutShiftCluster),\n        showDuration: false,\n      },\n    ],\n    // This allows for the overlay to sit over the layout shift.\n    entry: worstCluster.events[0],\n    renderLocation: 'ABOVE_EVENT',\n  }];\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {isRequestCompressed} from './Common.js';\nimport {\n  type Checklist,\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  InsightWarning,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Title of an insight that provides a breakdown for how long it took to download the main document.\n   */\n  title: 'Document request latency',\n  /**\n   * @description Description of an insight that provides a breakdown for how long it took to download the main document.\n   */\n  description:\n      'Your first network request is the most important.  Reduce its latency by avoiding redirects, ensuring a fast server response, and enabling text compression.',\n  /**\n   * @description Text to tell the user that the document request does not have redirects.\n   */\n  passingRedirects: 'Avoids redirects',\n  /**\n   * @description Text to tell the user that the document request had redirects.\n   * @example {3} PH1\n   * @example {1000 ms} PH2\n   */\n  failedRedirects: 'Had redirects ({PH1} redirects, +{PH2})',\n  /**\n   * @description Text to tell the user that the time starting the document request to when the server started responding is acceptable.\n   * @example {600 ms} PH1\n   */\n  passingServerResponseTime: 'Server responds quickly (observed {PH1})',\n  /**\n   * @description Text to tell the user that the time starting the document request to when the server started responding is not acceptable.\n   * @example {601 ms} PH1\n   */\n  failedServerResponseTime: 'Server responded slowly (observed {PH1})',\n  /**\n   * @description Text to tell the user that text compression (like gzip) was applied.\n   */\n  passingTextCompression: 'Applies text compression',\n  /**\n   * @description Text to tell the user that text compression (like gzip) was not applied.\n   */\n  failedTextCompression: 'No compression applied',\n  /**\n   * @description Text for a label describing a network request event as having redirects.\n   */\n  redirectsLabel: 'Redirects',\n  /**\n   * @description Text for a label describing a network request event as taking too long to start delivery by the server.\n   */\n  serverResponseTimeLabel: 'Server response time',\n  /**\n   * @description Text for a label describing a network request event as taking longer to download because it wasn't compressed.\n   */\n  uncompressedDownload: 'Uncompressed download',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/DocumentLatency.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// Due to the way that DevTools throttling works we cannot see if server response took less than ~570ms.\n// We set our failure threshold to 600ms to avoid those false positives but we want devs to shoot for 100ms.\nconst TOO_SLOW_THRESHOLD_MS = 600;\nconst TARGET_MS = 100;\n\n// Threshold for compression savings.\nconst IGNORE_THRESHOLD_IN_BYTES = 1400;\n\nexport function isDocumentLatency(x: InsightModel): x is DocumentLatencyInsightModel {\n  return x.insightKey === 'DocumentLatency';\n}\n\nexport type DocumentLatencyInsightModel = InsightModel<typeof UIStrings, {\n  data?: {\n    serverResponseTime: Types.Timing.Milli,\n    redirectDuration: Types.Timing.Milli,\n    uncompressedResponseBytes: number,\n    checklist: Checklist<'noRedirects'|'serverResponseIsFast'|'usesCompression'>,\n    documentRequest?: Types.Events.SyntheticNetworkRequest,\n  },\n}>;\n\nfunction getServerResponseTime(\n    request: Types.Events.SyntheticNetworkRequest, context: InsightSetContext): Types.Timing.Milli|null {\n  // Prefer the value as given by the Lantern provider.\n  // For PSI, Lighthouse uses this to set a better value for the server response\n  // time. For technical reasons, in Lightrider we do not have `sendEnd` timing\n  // values. See Lighthouse's `asLanternNetworkRequest` function for more.\n  const lanternRequest = context.navigation && context.lantern?.requests.find(r => r.rawRequest === request);\n  if (lanternRequest?.serverResponseTime !== undefined) {\n    return lanternRequest.serverResponseTime as Types.Timing.Milli;\n  }\n\n  const timing = request.args.data.timing;\n  if (!timing) {\n    return null;\n  }\n\n  const ms = Helpers.Timing.microToMilli(request.args.data.syntheticData.waiting);\n  return Math.round(ms) as Types.Timing.Milli;\n}\n\nfunction getCompressionSavings(request: Types.Events.SyntheticNetworkRequest): number {\n  const isCompressed = isRequestCompressed(request);\n  if (isCompressed) {\n    return 0;\n  }\n\n  // We don't know how many bytes this asset used on the network, but we can guess it was\n  // roughly the size of the content gzipped.\n  // See https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-encoding-and-transfer for specific CSS/Script examples\n  // See https://discuss.httparchive.org/t/file-size-and-compression-savings/145 for fallback multipliers\n  // See https://letstalkaboutwebperf.com/en/gzip-brotli-server-config/ for MIME types to compress\n  const originalSize = request.args.data.decodedBodyLength;\n  let estimatedSavings = 0;\n  switch (request.args.data.mimeType) {\n    case 'text/css':\n      // Stylesheets tend to compress extremely well.\n      estimatedSavings = Math.round(originalSize * 0.8);\n      break;\n    case 'text/html':\n    case 'text/javascript':\n      // Scripts and HTML compress fairly well too.\n      estimatedSavings = Math.round(originalSize * 0.67);\n      break;\n    case 'text/plain':\n    case 'text/xml':\n    case 'text/x-component':\n    case 'application/javascript':\n    case 'application/json':\n    case 'application/manifest+json':\n    case 'application/vnd.api+json':\n    case 'application/xml':\n    case 'application/xhtml+xml':\n    case 'application/rss+xml':\n    case 'application/atom+xml':\n    case 'application/vnd.ms-fontobject':\n    case 'application/x-font-ttf':\n    case 'application/x-font-opentype':\n    case 'application/x-font-truetype':\n    case 'image/svg+xml':\n    case 'image/x-icon':\n    case 'image/vnd.microsoft.icon':\n    case 'font/ttf':\n    case 'font/eot':\n    case 'font/otf':\n    case 'font/opentype':\n      // Use the average savings in HTTPArchive.\n      estimatedSavings = Math.round(originalSize * 0.5);\n      break;\n    default:  // Any other MIME types are likely already compressed.\n  }\n  // Check if the estimated savings are greater than the byte ignore threshold.\n  // Note that the estimated gzip savings are always more than 10%, so there is\n  // no percent threshold.\n  return estimatedSavings < IGNORE_THRESHOLD_IN_BYTES ? 0 : estimatedSavings;\n}\n\nfunction finalize(partialModel: PartialInsightModel<DocumentLatencyInsightModel>): DocumentLatencyInsightModel {\n  let hasFailure = false;\n  if (partialModel.data) {\n    hasFailure = !partialModel.data.checklist.usesCompression.value ||\n        !partialModel.data.checklist.serverResponseIsFast.value || !partialModel.data.checklist.noRedirects.value;\n  }\n\n  return {\n    insightKey: InsightKeys.DOCUMENT_LATENCY,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.ALL,\n    state: hasFailure ? 'fail' : 'pass',\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): DocumentLatencyInsightModel {\n  if (!context.navigation) {\n    return finalize({});\n  }\n\n  const documentRequest = parsedTrace.NetworkRequests.byId.get(context.navigationId);\n  if (!documentRequest) {\n    return finalize({warnings: [InsightWarning.NO_DOCUMENT_REQUEST]});\n  }\n\n  const serverResponseTime = getServerResponseTime(documentRequest, context);\n  if (serverResponseTime === null) {\n    throw new Error('missing document request timing');\n  }\n\n  const serverResponseTooSlow = serverResponseTime > TOO_SLOW_THRESHOLD_MS;\n\n  let overallSavingsMs = 0;\n  if (serverResponseTime > TOO_SLOW_THRESHOLD_MS) {\n    overallSavingsMs = Math.max(serverResponseTime - TARGET_MS, 0);\n  }\n\n  const redirectDuration = Math.round(documentRequest.args.data.syntheticData.redirectionDuration / 1000);\n  overallSavingsMs += redirectDuration;\n\n  const metricSavings = {\n    FCP: overallSavingsMs as Types.Timing.Milli,\n    LCP: overallSavingsMs as Types.Timing.Milli,\n  };\n\n  const uncompressedResponseBytes = getCompressionSavings(documentRequest);\n\n  const noRedirects = redirectDuration === 0;\n  const serverResponseIsFast = !serverResponseTooSlow;\n  const usesCompression = uncompressedResponseBytes === 0;\n\n  return finalize({\n    relatedEvents: [documentRequest],\n    data: {\n      serverResponseTime,\n      redirectDuration: Types.Timing.Milli(redirectDuration),\n      uncompressedResponseBytes,\n      documentRequest,\n      checklist: {\n        noRedirects: {\n          label: noRedirects ? i18nString(UIStrings.passingRedirects) : i18nString(UIStrings.failedRedirects, {\n            PH1: documentRequest.args.data.redirects.length,\n            PH2: i18n.TimeUtilities.millisToString(redirectDuration),\n          }),\n          value: noRedirects\n        },\n        serverResponseIsFast: {\n          label: serverResponseIsFast ?\n              i18nString(\n                  UIStrings.passingServerResponseTime, {PH1: i18n.TimeUtilities.millisToString(serverResponseTime)}) :\n              i18nString(\n                  UIStrings.failedServerResponseTime, {PH1: i18n.TimeUtilities.millisToString(serverResponseTime)}),\n          value: serverResponseIsFast\n        },\n        usesCompression: {\n          label: usesCompression ? i18nString(UIStrings.passingTextCompression) :\n                                   i18nString(UIStrings.failedTextCompression),\n          value: usesCompression\n        },\n      },\n    },\n    metricSavings,\n    wastedBytes: uncompressedResponseBytes,\n  });\n}\n\nexport function createOverlays(model: DocumentLatencyInsightModel): Types.Overlays.Overlay[] {\n  if (!model.data?.documentRequest) {\n    return [];\n  }\n\n  const overlays: Types.Overlays.Overlay[] = [];\n  const event = model.data.documentRequest;\n  const redirectDurationMicro = Helpers.Timing.milliToMicro(model.data.redirectDuration);\n\n  const sections = [];\n  if (model.data.redirectDuration) {\n    const bounds = Helpers.Timing.traceWindowFromMicroSeconds(\n        event.ts,\n        (event.ts + redirectDurationMicro) as Types.Timing.Micro,\n    );\n    sections.push({bounds, label: i18nString(UIStrings.redirectsLabel), showDuration: true});\n    overlays.push({type: 'CANDY_STRIPED_TIME_RANGE', bounds, entry: event});\n  }\n  if (!model.data.checklist.serverResponseIsFast.value) {\n    const serverResponseTimeMicro = Helpers.Timing.milliToMicro(model.data.serverResponseTime);\n    // NOTE: NetworkRequestHandlers never makes a synthetic network request event if `timing` is missing.\n    const sendEnd = event.args.data.timing?.sendEnd ?? Types.Timing.Milli(0);\n    const sendEndMicro = Helpers.Timing.milliToMicro(sendEnd);\n    const bounds = Helpers.Timing.traceWindowFromMicroSeconds(\n        sendEndMicro,\n        (sendEndMicro + serverResponseTimeMicro) as Types.Timing.Micro,\n    );\n    sections.push({bounds, label: i18nString(UIStrings.serverResponseTimeLabel), showDuration: true});\n  }\n  if (model.data.uncompressedResponseBytes) {\n    const bounds = Helpers.Timing.traceWindowFromMicroSeconds(\n        event.args.data.syntheticData.downloadStart,\n        (event.args.data.syntheticData.downloadStart + event.args.data.syntheticData.download) as Types.Timing.Micro,\n    );\n    sections.push({bounds, label: i18nString(UIStrings.uncompressedDownload), showDuration: true});\n    overlays.push({type: 'CANDY_STRIPED_TIME_RANGE', bounds, entry: event});\n  }\n\n  if (sections.length) {\n    overlays.push({\n      type: 'TIMESPAN_BREAKDOWN',\n      sections,\n      entry: model.data.documentRequest,\n      // Always render below because the document request is guaranteed to be\n      // the first request in the network track.\n      renderLocation: 'BELOW_EVENT',\n    });\n  }\n  overlays.push({\n    type: 'ENTRY_SELECTED',\n    entry: model.data.documentRequest,\n  });\n\n  return overlays;\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Title of an insight that recommends reducing the size of the DOM tree as a means to improve page responsiveness. \"DOM\" is an acronym and should not be translated.\n   */\n  title: 'Optimize DOM size',\n  /**\n   * @description Description of an insight that recommends reducing the size of the DOM tree as a means to improve page responsiveness. \"DOM\" is an acronym and should not be translated. \"layout reflows\" are when the browser will recompute the layout of content on the page.\n   */\n  description:\n      'A large DOM can increase the duration of style calculations and layout reflows, impacting page responsiveness. A large DOM will also increase memory usage. [Learn how to avoid an excessive DOM size](https://developer.chrome.com/docs/lighthouse/performance/dom-size/).',\n  /**\n   * @description Header for a column containing the names of statistics as opposed to the actual statistic values.\n   */\n  statistic: 'Statistic',\n  /**\n   * @description Header for a column containing the value of a statistic.\n   */\n  value: 'Value',\n  /**\n   * @description Header for a column containing the page element related to a statistic.\n   */\n  element: 'Element',\n  /**\n   * @description Label for a value representing the total number of elements on the page.\n   */\n  totalElements: 'Total elements',\n  /**\n   * @description Label for a value representing the maximum depth of the Document Object Model (DOM). \"DOM\" is a acronym and should not be translated.\n   */\n  maxDOMDepth: 'DOM depth',\n  /**\n   * @description Label for a value representing the maximum number of child elements of any parent element on the page.\n   */\n  maxChildren: 'Most children',\n  /**\n   * @description Text for a section.\n   */\n  topUpdatesDescription:\n      'These are the largest layout and style recalculation events. Their performance impact may be reduced by making the DOM simpler.',\n  /**\n   * @description Label used for a time duration.\n   */\n  duration: 'Duration',\n  /**\n   * @description Message displayed in a table detailing how big a layout (rendering) is.\n   * @example {134} PH1\n   */\n  largeLayout: 'Layout ({PH1} objects)',\n  /**\n   * @description Message displayed in a table detailing how big a style recalculation (rendering) is.\n   * @example {134} PH1\n   */\n  largeStyleRecalc: 'Style recalculation ({PH1} elements)',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/DOMSize.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst DOM_SIZE_DURATION_THRESHOLD = Helpers.Timing.milliToMicro(Types.Timing.Milli(40));\n\n// These thresholds were selected to maximize the number of long (>40ms) events above\n// the threshold while maximizing the number of short (<40ms) events below the threshold.\n// See go/rpp-dom-size-thresholds for the analysis that produced these thresholds.\nconst LAYOUT_OBJECTS_THRESHOLD = 100;\nconst STYLE_RECALC_ELEMENTS_THRESHOLD = 300;\n\nexport type DOMSizeInsightModel = InsightModel<typeof UIStrings, {\n  largeLayoutUpdates: Types.Events.Layout[],\n  largeStyleRecalcs: Types.Events.UpdateLayoutTree[],\n  largeUpdates: Array<\n      {label: Common.UIString.LocalizedString, duration: Types.Timing.Milli, size: number, event: Types.Events.Event}>,\n  maxDOMStats?: Types.Events.DOMStats,\n}>;\n\nfunction finalize(partialModel: PartialInsightModel<DOMSizeInsightModel>): DOMSizeInsightModel {\n  const relatedEvents = [...partialModel.largeLayoutUpdates, ...partialModel.largeStyleRecalcs];\n  return {\n    insightKey: InsightKeys.DOM_SIZE,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.INP,\n    state: relatedEvents.length > 0 ? 'informative' : 'pass',\n    ...partialModel,\n    relatedEvents,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): DOMSizeInsightModel {\n  const isWithinContext = (event: Types.Events.Event): boolean => Helpers.Timing.eventIsInBounds(event, context.bounds);\n\n  const mainTid = context.navigation?.tid;\n\n  const largeLayoutUpdates: Types.Events.Layout[] = [];\n  const largeStyleRecalcs: Types.Events.UpdateLayoutTree[] = [];\n\n  const threads = Handlers.Threads.threadsInRenderer(parsedTrace.Renderer, parsedTrace.AuctionWorklets);\n  for (const thread of threads) {\n    if (thread.type !== Handlers.Threads.ThreadType.MAIN_THREAD) {\n      continue;\n    }\n\n    if (mainTid === undefined) {\n      // We won't have a specific thread ID to reference if the context does not have a navigation.\n      // In this case, we'll just filter out any OOPIFs threads.\n      if (!thread.processIsOnMainFrame) {\n        continue;\n      }\n    } else if (thread.tid !== mainTid) {\n      continue;\n    }\n\n    const rendererThread = parsedTrace.Renderer.processes.get(thread.pid)?.threads.get(thread.tid);\n    if (!rendererThread) {\n      continue;\n    }\n\n    const {entries, layoutEvents, updateLayoutTreeEvents} = rendererThread;\n    if (!entries.length) {\n      continue;\n    }\n\n    const first = entries[0];\n    const last = entries[entries.length - 1];\n    const timeRange =\n        Helpers.Timing.traceWindowFromMicroSeconds(first.ts, Types.Timing.Micro(last.ts + (last.dur ?? 0)));\n    if (!Helpers.Timing.boundsIncludeTimeRange({timeRange, bounds: context.bounds})) {\n      continue;\n    }\n\n    for (const event of layoutEvents) {\n      if (event.dur < DOM_SIZE_DURATION_THRESHOLD || !isWithinContext(event)) {\n        continue;\n      }\n\n      const {dirtyObjects} = event.args.beginData;\n      if (dirtyObjects > LAYOUT_OBJECTS_THRESHOLD) {\n        largeLayoutUpdates.push(event);\n      }\n    }\n\n    for (const event of updateLayoutTreeEvents) {\n      if (event.dur < DOM_SIZE_DURATION_THRESHOLD || !isWithinContext(event)) {\n        continue;\n      }\n\n      const {elementCount} = event.args;\n      if (elementCount > STYLE_RECALC_ELEMENTS_THRESHOLD) {\n        largeStyleRecalcs.push(event);\n      }\n    }\n  }\n\n  const largeUpdates: DOMSizeInsightModel['largeUpdates'] = [\n    ...largeLayoutUpdates.map(event => {\n      const duration = (event.dur / 1000) as Types.Timing.Milli;\n      const size = event.args.beginData.dirtyObjects;\n      const label = i18nString(UIStrings.largeLayout, {PH1: size});\n      return {label, duration, size, event};\n    }),\n    ...largeStyleRecalcs.map(event => {\n      const duration = (event.dur / 1000) as Types.Timing.Milli;\n      const size = event.args.elementCount;\n      const label = i18nString(UIStrings.largeStyleRecalc, {PH1: size});\n      return {label, duration, size, event};\n    }),\n  ].sort((a, b) => b.duration - a.duration).slice(0, 5);\n\n  const domStatsEvents = parsedTrace.DOMStats.domStatsByFrameId.get(context.frameId)?.filter(isWithinContext) ?? [];\n  let maxDOMStats: Types.Events.DOMStats|undefined;\n  for (const domStats of domStatsEvents) {\n    // While recording a cross-origin navigation, there can be overlapping dom stats from before & after\n    // the navigation which share a frameId. In this case we should also ensure the pid matches up with\n    // the navigation we care about (i.e. from after the navigation event).\n    const navigationPid = context.navigation?.pid;\n    if (navigationPid && domStats.pid !== navigationPid) {\n      continue;\n    }\n\n    if (!maxDOMStats || domStats.args.data.totalElements > maxDOMStats.args.data.totalElements) {\n      maxDOMStats = domStats;\n    }\n  }\n\n  return finalize({\n    largeLayoutUpdates,\n    largeStyleRecalcs,\n    largeUpdates,\n    maxDOMStats,\n  });\n}\n\nexport function createOverlays(model: DOMSizeInsightModel): Types.Overlays.Overlay[] {\n  const entries = [...model.largeStyleRecalcs, ...model.largeLayoutUpdates];\n  return entries.map(entry => ({\n                       type: 'ENTRY_OUTLINE',\n                       entry,\n                       outlineReason: 'ERROR',\n                     }));\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Extras from '../extras/extras.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type * as Types from '../types/types.js';\n\nimport {estimateCompressionRatioForScript, metricSavingsForWastedBytes} from './Common.js';\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Title of an insight that identifies multiple copies of the same JavaScript sources, and recommends removing the duplication.\n   */\n  title: 'Duplicated JavaScript',\n  /**\n   * @description Description of an insight that identifies multiple copies of the same JavaScript sources, and recommends removing the duplication.\n   */\n  description:\n      'Remove large, duplicate JavaScript modules from bundles to reduce unnecessary bytes consumed by network activity.',\n  /** Label for a column in a data table; entries will be the locations of JavaScript or CSS code, e.g. the name of a Javascript package or module. */\n  columnSource: 'Source',\n  /** Label for a column in a data table; entries will be the number of wasted bytes due to duplication of a web resource. */\n  columnDuplicatedBytes: 'Duplicated bytes',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/DuplicatedJavaScript.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type DuplicatedJavaScriptInsightModel = InsightModel<typeof UIStrings, {\n  duplication: Extras.ScriptDuplication.ScriptDuplication,\n  duplicationGroupedByNodeModules: Extras.ScriptDuplication.ScriptDuplication,\n  scriptsWithDuplication: Handlers.ModelHandlers.Scripts.Script[],\n  scripts: Handlers.ModelHandlers.Scripts.Script[],\n  mainDocumentUrl: string,\n}>;\n\nfunction finalize(partialModel: PartialInsightModel<DuplicatedJavaScriptInsightModel>):\n    DuplicatedJavaScriptInsightModel {\n  const requests = partialModel.scriptsWithDuplication.map(script => script.request).filter(e => !!e);\n\n  return {\n    insightKey: InsightKeys.DUPLICATE_JAVASCRIPT,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.LCP,\n    state: Boolean(partialModel.duplication.values().next().value) ? 'fail' : 'pass',\n    relatedEvents: [...new Set(requests)],\n    ...partialModel,\n  };\n}\n\nexport function isDuplicatedJavaScript(model: InsightModel): model is DuplicatedJavaScriptInsightModel {\n  return model.insightKey === InsightKeys.DUPLICATE_JAVASCRIPT;\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): DuplicatedJavaScriptInsightModel {\n  const scripts = parsedTrace.Scripts.scripts.filter(script => {\n    if (script.frame !== context.frameId) {\n      return false;\n    }\n\n    if (script.url?.startsWith('chrome-extension://')) {\n      return false;\n    }\n\n    return Helpers.Timing.timestampIsInBounds(context.bounds, script.ts);\n  });\n\n  const compressionRatios = new Map<string, number>();\n  for (const script of scripts) {\n    if (script.request) {\n      compressionRatios.set(script.request.args.data.requestId, estimateCompressionRatioForScript(script));\n    }\n  }\n\n  const {duplication, duplicationGroupedByNodeModules} =\n      Extras.ScriptDuplication.computeScriptDuplication({scripts}, compressionRatios);\n  const scriptsWithDuplication = [...duplication.values().flatMap(data => data.duplicates.map(d => d.script))];\n\n  const wastedBytesByRequestId = new Map<string, number>();\n  for (const {duplicates} of duplication.values()) {\n    for (let i = 1; i < duplicates.length; i++) {\n      const sourceData = duplicates[i];\n      if (!sourceData.script.request) {\n        continue;\n      }\n\n      const transferSize = sourceData.attributedSize;\n      const requestId = sourceData.script.request.args.data.requestId;\n      wastedBytesByRequestId.set(requestId, (wastedBytesByRequestId.get(requestId) || 0) + transferSize);\n    }\n  }\n\n  return finalize({\n    duplication,\n    duplicationGroupedByNodeModules,\n    scriptsWithDuplication: [...new Set(scriptsWithDuplication)],\n    scripts,\n    mainDocumentUrl: context.navigation?.args.data?.url ?? parsedTrace.Meta.mainFrameURL,\n    metricSavings: metricSavingsForWastedBytes(wastedBytesByRequestId, context),\n    wastedBytes: wastedBytesByRequestId.values().reduce((acc, cur) => acc + cur, 0),\n  });\n}\n\nexport function createOverlays(model: DuplicatedJavaScriptInsightModel): Types.Overlays.Overlay[] {\n  return model.scriptsWithDuplication.map(script => script.request).filter(e => !!e).map(request => {\n    return {\n      type: 'ENTRY_OUTLINE',\n      entry: request,\n      outlineReason: 'ERROR',\n    };\n  });\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /** Title of an insight that provides details about the fonts used on the page, and the value of their `font-display` properties. */\n  title: 'Font display',\n  /**\n   * @description Text to tell the user about the font-display CSS feature to help improve a the UX of a page.\n   */\n  description:\n      'Consider setting [`font-display`](https://developer.chrome.com/blog/font-display) to `swap` or `optional` to ensure text is consistently visible. `swap` can be further optimized to mitigate layout shifts with [font metric overrides](https://developer.chrome.com/blog/font-fallbacks).',\n  /** Column for a font loaded by the page to render text. */\n  fontColumn: 'Font',\n  /** Column for the amount of time wasted. */\n  wastedTimeColumn: 'Wasted time',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/FontDisplay.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface RemoteFont {\n  name?: string;\n  request: Types.Events.SyntheticNetworkRequest;\n  display: string;\n  wastedTime: Types.Timing.Milli;\n}\n\nexport type FontDisplayInsightModel = InsightModel<typeof UIStrings, {\n  fonts: RemoteFont[],\n}>;\n\nfunction finalize(partialModel: PartialInsightModel<FontDisplayInsightModel>): FontDisplayInsightModel {\n  return {\n    insightKey: InsightKeys.FONT_DISPLAY,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.INP,\n    state: partialModel.fonts.find(font => font.wastedTime > 0) ? 'fail' : 'pass',\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): FontDisplayInsightModel {\n  const fonts: RemoteFont[] = [];\n  for (const remoteFont of parsedTrace.LayoutShifts.remoteFonts) {\n    const event = remoteFont.beginRemoteFontLoadEvent;\n    if (!Helpers.Timing.eventIsInBounds(event, context.bounds)) {\n      continue;\n    }\n\n    const requestId = `${event.pid}.${event.args.id}`;\n    const request = parsedTrace.NetworkRequests.byId.get(requestId);\n    if (!request) {\n      continue;\n    }\n\n    if (!/^(block|fallback|auto)$/.test(remoteFont.display)) {\n      continue;\n    }\n\n    const wastedTimeMicro =\n        Types.Timing.Micro(request.args.data.syntheticData.finishTime - request.args.data.syntheticData.sendStartTime);\n    // TODO(crbug.com/352244504): should really end at the time of the next Commit trace event.\n    let wastedTime =\n        Platform.NumberUtilities.floor(Helpers.Timing.microToMilli(wastedTimeMicro), 1 / 5) as Types.Timing.Milli;\n    if (wastedTime === 0) {\n      continue;\n    }\n\n    // All browsers wait for no more than 3s.\n    wastedTime = Math.min(wastedTime, 3000) as Types.Timing.Milli;\n\n    fonts.push({\n      name: remoteFont.name,\n      request,\n      display: remoteFont.display,\n      wastedTime,\n    });\n  }\n\n  fonts.sort((a, b) => b.wastedTime - a.wastedTime);\n\n  const savings = Math.max(...fonts.map(f => f.wastedTime)) as Types.Timing.Milli;\n\n  return finalize({\n    relatedEvents: fonts.map(f => f.request),\n    fonts,\n    metricSavings: {FCP: savings},\n  });\n}\n\nexport function createOverlays(model: FontDisplayInsightModel): Types.Overlays.Overlay[] {\n  return model.fonts.map(font => ({\n                           type: 'ENTRY_OUTLINE',\n                           entry: font.request,\n                           outlineReason: font.wastedTime ? 'ERROR' : 'INFO',\n                         }));\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as Extras from '../extras/extras.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Title of an insight that provides details about Forced reflow.\n   */\n  title: 'Forced reflow',\n  /**\n   * @description Text to describe the forced reflow.\n   */\n  description:\n      'A forced reflow occurs when JavaScript queries geometric properties (such as `offsetWidth`) after styles have been invalidated by a change to the DOM state. This can result in poor performance. Learn more about [forced reflows](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing#avoid-forced-synchronous-layouts) and possible mitigations.',\n  /**\n   * @description Title of a list to provide related stack trace data\n   */\n  relatedStackTrace: 'Stack trace',\n  /**\n   * @description Text to describe the top time-consuming function call\n   */\n  topTimeConsumingFunctionCall: 'Top function call',\n  /**\n   * @description Text to describe the total reflow time\n   */\n  totalReflowTime: 'Total reflow time',\n  /**\n   * @description Text to describe CPU processor tasks that could not be attributed to any specific source code.\n   */\n  unattributed: '[unattributed]',\n  /**\n   * @description Text for the name of anonymous functions\n   */\n  anonymous: '(anonymous)',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/ForcedReflow.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type ForcedReflowInsightModel = InsightModel<typeof UIStrings, {\n  topLevelFunctionCallData: ForcedReflowAggregatedData | undefined,\n  aggregatedBottomUpData: BottomUpCallStack[],\n}>;\n\nexport interface BottomUpCallStack {\n  /**\n   * `null` indicates that this data is for unattributed force reflows.\n   */\n  bottomUpData: Types.Events.CallFrame|Protocol.Runtime.CallFrame|null;\n  totalTime: number;\n  relatedEvents: Types.Events.Event[];\n}\n\nexport interface ForcedReflowAggregatedData {\n  topLevelFunctionCall: Types.Events.CallFrame|Protocol.Runtime.CallFrame;\n  totalReflowTime: number;\n  topLevelFunctionCallEvents: Types.Events.Event[];\n}\n\nfunction getCallFrameId(callFrame: Types.Events.CallFrame|Protocol.Runtime.CallFrame): string {\n  return callFrame.scriptId + ':' + callFrame.lineNumber + ':' + callFrame.columnNumber;\n}\n\nfunction getLargestTopLevelFunctionData(\n    forcedReflowEvents: Types.Events.Event[], traceParsedData: Handlers.Types.ParsedTrace): ForcedReflowAggregatedData|\n    undefined {\n  const entryToNodeMap = traceParsedData.Renderer.entryToNode;\n  const dataByTopLevelFunction = new Map<string, ForcedReflowAggregatedData>();\n  if (forcedReflowEvents.length === 0) {\n    return;\n  }\n\n  for (const event of forcedReflowEvents) {\n    // Gather the stack traces by searching in the tree\n    const traceNode = entryToNodeMap.get(event);\n    if (!traceNode) {\n      continue;\n    }\n\n    let node = traceNode.parent;\n    let topLevelFunctionCall;\n    let topLevelFunctionCallEvent: Types.Events.Event|undefined;\n    while (node) {\n      const eventData = node.entry;\n      if (Types.Events.isProfileCall(eventData)) {\n        topLevelFunctionCall = eventData.callFrame;\n        topLevelFunctionCallEvent = eventData;\n      } else {\n        // We have finished searching bottom up data\n        if (Types.Events.isFunctionCall(eventData) && eventData.args.data &&\n            Types.Events.objectIsCallFrame(eventData.args.data)) {\n          topLevelFunctionCall = eventData.args.data;\n          topLevelFunctionCallEvent = eventData;\n        }\n        break;\n      }\n      node = node.parent;\n    }\n\n    if (!topLevelFunctionCall || !topLevelFunctionCallEvent) {\n      continue;\n    }\n\n    const aggregatedDataId = getCallFrameId(topLevelFunctionCall);\n    const aggregatedData =\n        Platform.MapUtilities.getWithDefault(dataByTopLevelFunction, aggregatedDataId, () => ({\n                                                                                         topLevelFunctionCall,\n                                                                                         totalReflowTime: 0,\n                                                                                         topLevelFunctionCallEvents: [],\n                                                                                       }));\n    aggregatedData.totalReflowTime += (event.dur ?? 0);\n    aggregatedData.topLevelFunctionCallEvents.push(topLevelFunctionCallEvent);\n  }\n\n  let topTimeConsumingData: ForcedReflowAggregatedData|undefined = undefined;\n  dataByTopLevelFunction.forEach(data => {\n    if (!topTimeConsumingData || data.totalReflowTime > topTimeConsumingData.totalReflowTime) {\n      topTimeConsumingData = data;\n    }\n  });\n\n  return topTimeConsumingData;\n}\n\nfunction finalize(partialModel: PartialInsightModel<ForcedReflowInsightModel>): ForcedReflowInsightModel {\n  return {\n    insightKey: InsightKeys.FORCED_REFLOW,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.ALL,\n    state: partialModel.aggregatedBottomUpData.length !== 0 ? 'fail' : 'pass',\n    ...partialModel,\n  };\n}\n\nfunction getBottomCallFrameForEvent(event: Types.Events.Event, traceParsedData: Handlers.Types.ParsedTrace):\n    Types.Events.CallFrame|Protocol.Runtime.CallFrame|null {\n  const profileStackTrace = Extras.StackTraceForEvent.get(event, traceParsedData);\n  const eventStackTrace = Helpers.Trace.getZeroIndexedStackTraceInEventPayload(event);\n\n  return profileStackTrace?.callFrames[0] ?? eventStackTrace?.[0] ?? null;\n}\n\nexport function generateInsight(\n    traceParsedData: Handlers.Types.ParsedTrace, context: InsightSetContext): ForcedReflowInsightModel {\n  const isWithinContext = (event: Types.Events.Event): boolean => {\n    const frameId = Helpers.Trace.frameIDForEvent(event);\n    if (frameId !== context.frameId) {\n      return false;\n    }\n\n    return Helpers.Timing.eventIsInBounds(event, context.bounds);\n  };\n\n  const bottomUpDataMap = new Map<string, BottomUpCallStack>();\n  const events = traceParsedData.Warnings.perWarning.get('FORCED_REFLOW')?.filter(isWithinContext) ?? [];\n  for (const event of events) {\n    const bottomCallFrame = getBottomCallFrameForEvent(event, traceParsedData);\n    const bottomCallId = bottomCallFrame ? getCallFrameId(bottomCallFrame) : 'UNATTRIBUTED';\n    const bottomUpData =\n        Platform.MapUtilities.getWithDefault(bottomUpDataMap, bottomCallId, () => ({\n                                                                              bottomUpData: bottomCallFrame,\n                                                                              totalTime: 0,\n                                                                              relatedEvents: [],\n                                                                            }));\n    bottomUpData.totalTime += event.dur ?? 0;\n    bottomUpData.relatedEvents.push(event);\n  }\n\n  const topLevelFunctionCallData = getLargestTopLevelFunctionData(events, traceParsedData);\n\n  return finalize({\n    relatedEvents: events,\n    topLevelFunctionCallData,\n    aggregatedBottomUpData: [...bottomUpDataMap.values()],\n  });\n}\n\nexport function createOverlays(model: ForcedReflowInsightModel): Types.Overlays.Overlay[] {\n  if (!model.topLevelFunctionCallData) {\n    return [];\n  }\n\n  const allBottomUpEvents = [...model.aggregatedBottomUpData.values().flatMap(data => data.relatedEvents)];\n  return [\n    ...createOverlayForEvents(model.topLevelFunctionCallData.topLevelFunctionCallEvents, 'INFO'),\n    ...createOverlayForEvents(allBottomUpEvents),\n  ];\n}\n\nexport function createOverlayForEvents(\n    events: Types.Events.Event[], outlineReason: 'ERROR'|'INFO' = 'ERROR'): Types.Overlays.Overlay[] {\n  return events.map(e => ({\n                      type: 'ENTRY_OUTLINE',\n                      entry: e,\n                      outlineReason,\n                    }));\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type * as Types from '../types/types.js';\n\nimport {metricSavingsForWastedBytes} from './Common.js';\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Title of an insight that recommends ways to reduce the size of images downloaded and used on the page.\n   */\n  title: 'Improve image delivery',\n  /**\n   * @description Description of an insight that recommends ways to reduce the size of images downloaded and used on the page.\n   */\n  description:\n      'Reducing the download time of images can improve the perceived load time of the page and LCP. [Learn more about optimizing image size](https://developer.chrome.com/docs/lighthouse/performance/uses-optimized-images/)',\n  /**\n   * @description Message displayed in a chip explaining that an image file size is large for the # of pixels it has and recommends possible adjustments to improve the image size.\n   */\n  useCompression: 'Increasing the image compression factor could improve this image\\'s download size.',\n  /**\n   * @description Message displayed in a chip explaining that an image file size is large for the # of pixels it has and recommends possible adjustments to improve the image size.\n   */\n  useModernFormat:\n      'Using a modern image format (WebP, AVIF) or increasing the image compression could improve this image\\'s download size.',\n  /**\n   * @description Message displayed in a chip advising the user to use video formats instead of GIFs because videos generally have smaller file sizes.\n   */\n  useVideoFormat: 'Using video formats instead of GIFs can improve the download size of animated content.',\n  /**\n   * @description Message displayed in a chip explaining that an image was displayed on the page with dimensions much smaller than the image file dimensions.\n   * @example {1000x500} PH1\n   * @example {100x50} PH2\n   */\n  useResponsiveSize:\n      'This image file is larger than it needs to be ({PH1}) for its displayed dimensions ({PH2}). Use responsive images to reduce the image download size.',\n  /**\n   * @description Column header for a table column containing network requests for images which can improve their file size (e.g. use a different format, increase compression, etc).\n   */\n  optimizeFile: 'Optimize file size',\n  /**\n   * @description Table row value representing the remaining items not shown in the table due to size constraints. This row will always represent at least 2 items.\n   * @example {5} PH1\n   */\n  others: '{PH1} others',\n  /**\n   * @description Text status indicating that no potential optimizations were found for any image file\n   */\n  noOptimizableImages: 'No optimizable images',\n  /**\n   * @description Text describing the estimated number of bytes that an image file optimization can save. This text is appended to another block of text describing the image optimization in more detail. \"Est\" means \"Estimated\".\n   * @example {Use the correct image dimensions to reduce the image file size.} PH1\n   * @example {50 MB} PH2\n   */\n  estimatedSavings: '{PH1} (Est {PH2})',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/ImageDelivery.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * Even JPEGs with lots of detail can usually be compressed down to <1 byte per pixel\n * Using 4:2:2 subsampling already gets an uncompressed bitmap to 2 bytes per pixel.\n * The compression ratio for JPEG is usually somewhere around 10:1 depending on content, so\n * 8:1 is a reasonable expectation for web content which is 1.5MB for a 6MP image.\n *\n * WebP usually gives ~20% additional savings on top of that, so we will assume 10:1 for WebP.\n * This is quite pessimistic as their study shows a photographic compression ratio of ~29:1.\n * https://developers.google.com/speed/webp/docs/webp_lossless_alpha_study#results\n *\n * AVIF usually gives ~20% additional savings on top of WebP, so we will use 12:1 for AVIF.\n * This is quite pessimistic as Netflix study shows a photographic compression ratio of ~40:1\n * (0.4 *bits* per pixel at SSIM 0.97).\n * https://netflixtechblog.com/avif-for-next-generation-image-coding-b1d75675fe4\n */\nconst TARGET_BYTES_PER_PIXEL_AVIF = 2 * 1 / 12;\n\n/**\n * If GIFs are above this size, we'll flag them\n * See https://github.com/GoogleChrome/lighthouse/pull/4885#discussion_r178406623 and https://github.com/GoogleChrome/lighthouse/issues/4696#issuecomment-370979920\n */\nconst GIF_SIZE_THRESHOLD = 100 * 1024;\n\nconst BYTE_SAVINGS_THRESHOLD = 4096;\n\n// Ignore up to 12KB of waste for responsive images if an effort was made with breakpoints.\nconst BYTE_SAVINGS_THRESHOLD_RESPONSIVE_BREAKPOINTS = 12288;\n\nexport enum ImageOptimizationType {\n  ADJUST_COMPRESSION = 'ADJUST_COMPRESSION',\n  MODERN_FORMAT_OR_COMPRESSION = 'MODERN_FORMAT_OR_COMPRESSION',\n  VIDEO_FORMAT = 'VIDEO_FORMAT',\n  RESPONSIVE_SIZE = 'RESPONSIVE_SIZE',\n}\n\nexport type ImageOptimization = {\n  type: Exclude<ImageOptimizationType, ImageOptimizationType.RESPONSIVE_SIZE>,\n  byteSavings: number,\n}|{\n  type: ImageOptimizationType.RESPONSIVE_SIZE,\n  byteSavings: number,\n  fileDimensions: {width: number, height: number},\n  displayDimensions: {width: number, height: number},\n};\n\nexport interface OptimizableImage {\n  request: Types.Events.SyntheticNetworkRequest;\n  optimizations: ImageOptimization[];\n  byteSavings: number;\n  /**\n   * If the an image resource has multiple `PaintImage`s, we compare its intrinsic size to the largest of the displayed sizes.\n   *\n   * It is theoretically possible for `PaintImage` events with the same URL to have different intrinsic sizes.\n   * However, this should be rare because it requires serving different images from the same URL.\n   */\n  largestImagePaint: Types.Events.PaintImage;\n}\n\nexport type ImageDeliveryInsightModel = InsightModel<typeof UIStrings, {\n  /** Sorted by potential byte savings, then by size of image. */\n  optimizableImages: OptimizableImage[],\n  wastedBytes: number,\n}>;\n\nexport function isImageDelivery(model: InsightModel): model is ImageDeliveryInsightModel {\n  return model.insightKey === 'ImageDelivery';\n}\n\nexport function getOptimizationMessage(optimization: ImageOptimization): string {\n  switch (optimization.type) {\n    case ImageOptimizationType.ADJUST_COMPRESSION:\n      return i18nString(UIStrings.useCompression);\n    case ImageOptimizationType.MODERN_FORMAT_OR_COMPRESSION:\n      return i18nString(UIStrings.useModernFormat);\n    case ImageOptimizationType.VIDEO_FORMAT:\n      return i18nString(UIStrings.useVideoFormat);\n    case ImageOptimizationType.RESPONSIVE_SIZE:\n      return i18nString(UIStrings.useResponsiveSize, {\n        PH1: `${optimization.fileDimensions.width}x${optimization.fileDimensions.height}`,\n        PH2: `${optimization.displayDimensions.width}x${optimization.displayDimensions.height}`,\n      });\n  }\n}\n\nexport function getOptimizationMessageWithBytes(optimization: ImageOptimization): string {\n  const byteSavingsText = i18n.ByteUtilities.bytesToString(optimization.byteSavings);\n  const optimizationMessage = getOptimizationMessage(optimization);\n  return i18nString(UIStrings.estimatedSavings, {PH1: optimizationMessage, PH2: byteSavingsText});\n}\n\nfunction finalize(partialModel: PartialInsightModel<ImageDeliveryInsightModel>): ImageDeliveryInsightModel {\n  return {\n    insightKey: InsightKeys.IMAGE_DELIVERY,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.LCP,\n    state: partialModel.optimizableImages.length > 0 ? 'fail' : 'pass',\n    ...partialModel,\n    relatedEvents: new Map(partialModel.optimizableImages.map(\n        image => [image.request, image.optimizations.map(getOptimizationMessageWithBytes)])),\n  };\n}\n\n/**\n * Calculate rough savings percentage based on 1000 real gifs transcoded to video\n * https://github.com/GoogleChrome/lighthouse/issues/4696#issuecomment-380296510\n */\nfunction estimateGIFPercentSavings(request: Types.Events.SyntheticNetworkRequest): number {\n  return Math.round((29.1 * Math.log10(request.args.data.decodedBodyLength) - 100.7)) / 100;\n}\n\nfunction getDisplayedSize(\n    parsedTrace: Handlers.Types.ParsedTrace, paintImage: Types.Events.PaintImage): {width: number, height: number} {\n  // Note: for traces made prior to metadata.hostDPR (which means no data in\n  // paintEventToCorrectedDisplaySize), the displayed size unexpectedly ignores any\n  // emulated DPR and so the results may be very misleading.\n  return parsedTrace.ImagePainting.paintEventToCorrectedDisplaySize.get(paintImage) ?? {\n    width: paintImage.args.data.width,\n    height: paintImage.args.data.height,\n  };\n}\n\nfunction getPixelCounts(parsedTrace: Handlers.Types.ParsedTrace, paintImage: Types.Events.PaintImage):\n    {displayedPixels: number, filePixels: number} {\n  const {width, height} = getDisplayedSize(parsedTrace, paintImage);\n  return {\n    filePixels: paintImage.args.data.srcWidth * paintImage.args.data.srcHeight,\n    displayedPixels: width * height,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): ImageDeliveryInsightModel {\n  const isWithinContext = (event: Types.Events.Event): boolean => Helpers.Timing.eventIsInBounds(event, context.bounds);\n\n  const contextRequests = parsedTrace.NetworkRequests.byTime.filter(isWithinContext);\n\n  const optimizableImages: OptimizableImage[] = [];\n  for (const request of contextRequests) {\n    if (request.args.data.resourceType !== 'Image') {\n      continue;\n    }\n\n    if (request.args.data.mimeType === 'image/svg+xml') {\n      continue;\n    }\n\n    // If the request was redirected, the image paints will have the pre-redirect URL.\n    const url = request.args.data.redirects[0]?.url ?? request.args.data.url;\n    const imagePaints = parsedTrace.ImagePainting.paintImageEventForUrl.get(url)?.filter(isWithinContext);\n\n    // This will filter out things like preloaded image requests where an image file is downloaded\n    // but never rendered on the page.\n    if (!imagePaints?.length) {\n      continue;\n    }\n\n    const largestImagePaint = imagePaints.reduce((prev, curr) => {\n      const prevPixels = getPixelCounts(parsedTrace, prev).displayedPixels;\n      const currPixels = getPixelCounts(parsedTrace, curr).displayedPixels;\n      return prevPixels > currPixels ? prev : curr;\n    });\n\n    const {\n      filePixels: imageFilePixels,\n      displayedPixels: largestImageDisplayPixels,\n    } = getPixelCounts(parsedTrace, largestImagePaint);\n\n    // Decoded body length is almost always the right one to be using because of the below:\n    //     `encodedDataLength = decodedBodyLength + headers`.\n    // HOWEVER, there are some cases where an image is compressed again over the network and transfer size\n    // is smaller (see https://github.com/GoogleChrome/lighthouse/pull/4968).\n    // Use the min of the two numbers to be safe.\n    const imageBytes = Math.min(request.args.data.decodedBodyLength, request.args.data.encodedDataLength);\n\n    const bytesPerPixel = imageBytes / imageFilePixels;\n\n    let optimizations: ImageOptimization[] = [];\n    if (request.args.data.mimeType === 'image/gif') {\n      if (imageBytes > GIF_SIZE_THRESHOLD) {\n        const percentSavings = estimateGIFPercentSavings(request);\n        const byteSavings = Math.round(imageBytes * percentSavings);\n        optimizations.push({type: ImageOptimizationType.VIDEO_FORMAT, byteSavings});\n      }\n    } else if (bytesPerPixel > TARGET_BYTES_PER_PIXEL_AVIF) {\n      const idealAvifImageSize = Math.round(TARGET_BYTES_PER_PIXEL_AVIF * imageFilePixels);\n      const byteSavings = imageBytes - idealAvifImageSize;\n      if (request.args.data.mimeType !== 'image/webp' && request.args.data.mimeType !== 'image/avif') {\n        optimizations.push({type: ImageOptimizationType.MODERN_FORMAT_OR_COMPRESSION, byteSavings});\n      } else {\n        optimizations.push({type: ImageOptimizationType.ADJUST_COMPRESSION, byteSavings});\n      }\n    }\n\n    // At this point (before looking at image size), the # of optimizations should only ever be 1 or 0\n    // Math.max handles both cases correctly, and is defensive against future patches that would add\n    // more than 1 format-specific optimization by this point.\n    const imageByteSavingsFromFormat = Math.max(0, ...optimizations.map(o => o.byteSavings));\n    let imageByteSavings = imageByteSavingsFromFormat;\n\n    const wastedPixelRatio = 1 - (largestImageDisplayPixels / imageFilePixels);\n\n    // Ignore CSS images because it's difficult to determine what is a spritesheet,\n    // and the reward-to-effort ratio for responsive CSS images is quite low https://css-tricks.com/responsive-images-css/.\n    if (wastedPixelRatio > 0 && !largestImagePaint.args.data.isCSS) {\n      const byteSavings = Math.round(wastedPixelRatio * imageBytes);\n\n      const hadBreakpoints = largestImagePaint.args.data.isPicture || largestImagePaint.args.data.srcsetAttribute;\n      if (!hadBreakpoints || byteSavings > BYTE_SAVINGS_THRESHOLD_RESPONSIVE_BREAKPOINTS) {\n        // This will compound the byte savings from any potential format changes with the image size\n        // optimization added here.\n        imageByteSavings += Math.round(wastedPixelRatio * (imageBytes - imageByteSavingsFromFormat));\n\n        const {width, height} = getDisplayedSize(parsedTrace, largestImagePaint);\n\n        optimizations.push({\n          type: ImageOptimizationType.RESPONSIVE_SIZE,\n          byteSavings,\n          fileDimensions: {\n            width: Math.round(largestImagePaint.args.data.srcWidth),\n            height: Math.round(largestImagePaint.args.data.srcHeight),\n          },\n          displayDimensions: {\n            width: Math.round(width),\n            height: Math.round(height),\n          },\n        });\n      }\n    }\n\n    optimizations = optimizations.filter(optimization => optimization.byteSavings > BYTE_SAVINGS_THRESHOLD);\n\n    if (optimizations.length > 0) {\n      optimizableImages.push({\n        request,\n        largestImagePaint,\n        optimizations,\n        byteSavings: imageByteSavings,\n      });\n    }\n  }\n\n  const wastedBytesByRequestId = new Map<string, number>();\n  for (const image of optimizableImages) {\n    wastedBytesByRequestId.set(image.request.args.data.requestId, image.byteSavings);\n  }\n\n  // Sort by savings, then by size of image.\n  optimizableImages.sort((a, b) => {\n    if (b.byteSavings !== a.byteSavings) {\n      return b.byteSavings - a.byteSavings;\n    }\n\n    return b.request.args.data.decodedBodyLength - a.request.args.data.decodedBodyLength;\n  });\n\n  return finalize({\n    optimizableImages,\n    metricSavings: metricSavingsForWastedBytes(wastedBytesByRequestId, context),\n    wastedBytes: optimizableImages.reduce((total, img) => total + img.byteSavings, 0),\n  });\n}\n\nexport function createOverlayForRequest(request: Types.Events.SyntheticNetworkRequest): Types.Overlays.EntryOutline {\n  return {\n    type: 'ENTRY_OUTLINE',\n    entry: request,\n    outlineReason: 'ERROR',\n  };\n}\n\nexport function createOverlays(model: ImageDeliveryInsightModel): Types.Overlays.Overlay[] {\n  return model.optimizableImages.map(image => createOverlayForRequest(image.request));\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type {SyntheticInteractionPair} from '../types/TraceEvents.js';\nimport type * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Text to tell the user about the longest user interaction.\n   */\n  description:\n      'Start investigating with the longest subpart. [Delays can be minimized](https://web.dev/articles/optimize-inp#optimize_interactions). To reduce processing duration, [optimize the main-thread costs](https://web.dev/articles/optimize-long-tasks), often JS.',\n  /**\n   * @description Title for the performance insight \"INP breakdown\", which shows a breakdown of INP by subparts / sections.\n   */\n  title: 'INP breakdown',\n  /**\n   * @description Label used for the subpart/component/stage/section of a larger duration.\n   */\n  subpart: 'Subpart',\n  /**\n   * @description Label used for a time duration.\n   */\n  duration: 'Duration',\n\n  // TODO: these are repeated in InteractionBreakdown. Add a place for common strings?\n  /**\n   * @description Text shown next to the interaction event's input delay time in the detail view.\n   */\n  inputDelay: 'Input delay',\n  /**\n   * @description Text shown next to the interaction event's thread processing duration in the detail view.\n   */\n  processingDuration: 'Processing duration',\n  /**\n   * @description Text shown next to the interaction event's presentation delay time in the detail view.\n   */\n  presentationDelay: 'Presentation delay',\n  /**\n   * @description Text status indicating that no user interactions were detected.\n   */\n  noInteractions: 'No interactions detected',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/INPBreakdown.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type INPBreakdownInsightModel = InsightModel<typeof UIStrings, {\n  longestInteractionEvent?: SyntheticInteractionPair,\n  highPercentileInteractionEvent?: SyntheticInteractionPair,\n}>;\n\nexport function isINPBreakdown(insight: InsightModel): insight is INPBreakdownInsightModel {\n  return insight.insightKey === InsightKeys.INP_BREAKDOWN;\n}\n\nfunction finalize(partialModel: PartialInsightModel<INPBreakdownInsightModel>): INPBreakdownInsightModel {\n  return {\n    insightKey: InsightKeys.INP_BREAKDOWN,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.INP,\n    state: partialModel.longestInteractionEvent ? 'informative' : 'pass',\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): INPBreakdownInsightModel {\n  const interactionEvents = parsedTrace.UserInteractions.interactionEventsWithNoNesting.filter(event => {\n    return Helpers.Timing.eventIsInBounds(event, context.bounds);\n  });\n\n  if (!interactionEvents.length) {\n    // A valid result, when there is no user interaction.\n    return finalize({});\n  }\n\n  const longestByInteractionId = new Map<number, SyntheticInteractionPair>();\n  for (const event of interactionEvents) {\n    const key = event.interactionId;\n    const longest = longestByInteractionId.get(key);\n    if (!longest || event.dur > longest.dur) {\n      longestByInteractionId.set(key, event);\n    }\n  }\n  const normalizedInteractionEvents = [...longestByInteractionId.values()];\n  normalizedInteractionEvents.sort((a, b) => b.dur - a.dur);\n\n  // INP is the \"nearest-rank\"/inverted_cdf 98th percentile, except Chrome only\n  // keeps the 10 worst events around, so it can never be more than the 10th from\n  // last array element. To keep things simpler, sort desc and pick from front.\n  // See https://source.chromium.org/chromium/chromium/src/+/main:components/page_load_metrics/browser/responsiveness_metrics_normalization.cc;l=45-59;drc=cb0f9c8b559d9c7c3cb4ca94fc1118cc015d38ad\n  const highPercentileIndex = Math.min(9, Math.floor(normalizedInteractionEvents.length / 50));\n\n  return finalize({\n    relatedEvents: [normalizedInteractionEvents[0]],\n    longestInteractionEvent: normalizedInteractionEvents[0],\n    highPercentileInteractionEvent: normalizedInteractionEvents[highPercentileIndex],\n  });\n}\n\n/**\n * If `subpart` is -1, then all subparts are included. Otherwise it's just that index.\n **/\nexport function createOverlaysForSubpart(\n    event: Types.Events.SyntheticInteractionPair, subpartIndex = -1): Types.Overlays.Overlay[] {\n  const p1 = Helpers.Timing.traceWindowFromMicroSeconds(\n      event.ts,\n      (event.ts + event.inputDelay) as Types.Timing.Micro,\n  );\n  const p2 = Helpers.Timing.traceWindowFromMicroSeconds(\n      p1.max,\n      (p1.max + event.mainThreadHandling) as Types.Timing.Micro,\n  );\n  const p3 = Helpers.Timing.traceWindowFromMicroSeconds(\n      p2.max,\n      (p2.max + event.presentationDelay) as Types.Timing.Micro,\n  );\n  let sections = [\n    {bounds: p1, label: i18nString(UIStrings.inputDelay), showDuration: true},\n    {bounds: p2, label: i18nString(UIStrings.processingDuration), showDuration: true},\n    {bounds: p3, label: i18nString(UIStrings.presentationDelay), showDuration: true},\n  ];\n  if (subpartIndex !== -1) {\n    sections = [sections[subpartIndex]];\n  }\n\n  return [\n    {\n      type: 'TIMESPAN_BREAKDOWN',\n      sections,\n      renderLocation: 'BELOW_EVENT',\n      entry: event,\n    },\n  ];\n}\n\nexport function createOverlays(model: INPBreakdownInsightModel): Types.Overlays.Overlay[] {\n  const event = model.longestInteractionEvent;\n  if (!event) {\n    return [];\n  }\n\n  return createOverlaysForSubpart(event);\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  InsightWarning,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Title of an insight that provides details about the LCP metric, broken down by parts.\n   */\n  title: 'LCP breakdown',\n  /**\n   * @description Description of a DevTools insight that presents a breakdown for the LCP metric by subparts.\n   * This is displayed after a user expands the section to see more. No character length limits.\n   */\n  description:\n      'Each [subpart has specific improvement strategies](https://web.dev/articles/optimize-lcp#lcp-breakdown). Ideally, most of the LCP time should be spent on loading the resources, not within delays.',\n  /**\n   * @description Time to first byte title for the Largest Contentful Paint's subparts timespan breakdown.\n   */\n  timeToFirstByte: 'Time to first byte',\n  /**\n   * @description Resource load delay title for the Largest Contentful Paint subparts timespan breakdown.\n   */\n  resourceLoadDelay: 'Resource load delay',\n  /**\n   * @description Resource load duration title for the Largest Contentful Paint subparts timespan breakdown.\n   */\n  resourceLoadDuration: 'Resource load duration',\n  /**\n   * @description Element render delay title for the Largest Contentful Paint subparts timespan breakdown.\n   */\n  elementRenderDelay: 'Element render delay',\n  /**\n   * @description Label used for the subpart (section) of a larger duration.\n   */\n  subpart: 'Subpart',\n  /**\n   * @description Label used for the duration a single subpart (section) takes up of a larger duration.\n   */\n  duration: 'Duration',\n  /**\n   * @description Label used for the duration a single subpart (section) takes up of a larger duration. The value will be the 75th percentile of aggregate data. \"Field\" means that the data was collected from real users in the field as opposed to the developers local environment. \"Field\" is synonymous with \"Real user data\".\n   */\n  fieldDuration: 'Field p75',\n  /**\n   * @description Text status indicating that the the Largest Contentful Paint (LCP) metric timing was not found. \"LCP\" is an acronym and should not be translated.\n   */\n  noLcp: 'No LCP detected',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/LCPBreakdown.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// A TraceWindow plus its UIString.\nexport type Subpart = Types.Timing.TraceWindowMicro&{label: Common.UIString.LocalizedString};\ninterface LCPSubparts {\n  /**\n   * The time between when the user initiates loading the page until when\n   * the browser receives the first byte of the html response.\n   */\n  ttfb: Subpart;\n  /**\n   * The time between ttfb and the LCP request request being started.\n   * For a text LCP, this is undefined given no request is loaded.\n   */\n  loadDelay?: Subpart;\n  /**\n   * The time it takes to load the LCP request.\n   */\n  loadDuration?: Subpart;\n  /**\n   * The time between when the LCP request finishes loading and when\n   * the LCP element is rendered.\n   */\n  renderDelay: Subpart;\n}\n\nexport function isLCPBreakdown(model: InsightModel): model is LCPBreakdownInsightModel {\n  return model.insightKey === 'LCPBreakdown';\n}\nexport type LCPBreakdownInsightModel = InsightModel<typeof UIStrings, {\n  lcpMs?: Types.Timing.Milli,\n  lcpTs?: Types.Timing.Milli,\n  lcpEvent?: Types.Events.LargestContentfulPaintCandidate,\n  /** The network request for the LCP image, if there was one. */\n  lcpRequest?: Types.Events.SyntheticNetworkRequest,\n  subparts?: LCPSubparts,\n}>;\n\nfunction anyValuesNaN(...values: number[]): boolean {\n  return values.some(v => Number.isNaN(v));\n}\n/**\n * Calculates the 2–4 subparts of an LCP as bounds.\n * Will return `null` if any required values were missing. We don't ever expect\n * them to be missing on newer traces, but old trace files may lack some of the\n * data we rely on, so we want to handle that case.\n */\nfunction determineSubparts(\n    nav: Types.Events.NavigationStart, docRequest: Types.Events.SyntheticNetworkRequest,\n    lcpEvent: Types.Events.LargestContentfulPaintCandidate,\n    lcpRequest: Types.Events.SyntheticNetworkRequest|undefined): LCPSubparts|null {\n  const docReqTiming = docRequest.args.data.timing;\n\n  let firstDocByteTs;\n  if (docReqTiming) {\n    firstDocByteTs = Types.Timing.Micro(\n        Helpers.Timing.secondsToMicro(docReqTiming.requestTime) +\n        Helpers.Timing.milliToMicro(docReqTiming.receiveHeadersStart));\n  } else {\n    firstDocByteTs = docRequest.ts;  // file:\n  }\n\n  const ttfb = Helpers.Timing.traceWindowFromMicroSeconds(nav.ts, firstDocByteTs) as Subpart;\n  ttfb.label = i18nString(UIStrings.timeToFirstByte);\n\n  let renderDelay = Helpers.Timing.traceWindowFromMicroSeconds(ttfb.max, lcpEvent.ts) as Subpart;\n  renderDelay.label = i18nString(UIStrings.elementRenderDelay);\n\n  // If the LCP is text, we don't have a request, so just 2 subparts.\n  if (!lcpRequest) {\n    /**\n     * Text LCP. 2 subparts, thus 3 timestamps\n     *\n     *       |          ttfb           |             renderDelay              |\n     *                                                                        ^ lcpEvent.ts\n     *                                 ^ firstDocByteTs\n     *       ^ navStartTs\n     */\n    if (anyValuesNaN(ttfb.range, renderDelay.range)) {\n      return null;\n    }\n    return {ttfb, renderDelay};\n  }\n\n  /**\n   * Image LCP. 4 subparts means 5 timestamps\n   *\n   *       |  ttfb   |    loadDelay     |     loadTime    |    renderDelay    |\n   *                                                                          ^ lcpEvent.ts\n   *                                                      ^ lcpReqEndTs\n   *                                    ^ lcpStartTs\n   *                 ^ ttfbTs\n   *       ^ navStartTs\n   */\n  const lcpStartTs = lcpRequest.ts;\n  const lcpReqEndTs = lcpRequest.args.data.syntheticData.finishTime;\n\n  const loadDelay = Helpers.Timing.traceWindowFromMicroSeconds(ttfb.max, lcpStartTs) as Subpart;\n  const loadDuration = Helpers.Timing.traceWindowFromMicroSeconds(lcpStartTs, lcpReqEndTs) as Subpart;\n  renderDelay = Helpers.Timing.traceWindowFromMicroSeconds(lcpReqEndTs, lcpEvent.ts) as Subpart;\n  loadDelay.label = i18nString(UIStrings.resourceLoadDelay);\n  loadDuration.label = i18nString(UIStrings.resourceLoadDuration);\n  renderDelay.label = i18nString(UIStrings.elementRenderDelay);\n  if (anyValuesNaN(ttfb.range, loadDelay.range, loadDuration.range, renderDelay.range)) {\n    return null;\n  }\n\n  return {\n    ttfb,\n    loadDelay,\n    loadDuration,\n    renderDelay,\n  };\n}\n\nfunction finalize(partialModel: PartialInsightModel<LCPBreakdownInsightModel>): LCPBreakdownInsightModel {\n  const relatedEvents = [];\n  if (partialModel.lcpEvent) {\n    relatedEvents.push(partialModel.lcpEvent);\n  }\n  if (partialModel.lcpRequest) {\n    relatedEvents.push(partialModel.lcpRequest);\n  }\n  return {\n    insightKey: InsightKeys.LCP_BREAKDOWN,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.LCP,\n    state: partialModel.lcpEvent || partialModel.lcpRequest ? 'informative' : 'pass',\n    ...partialModel,\n    relatedEvents,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): LCPBreakdownInsightModel {\n  if (!context.navigation) {\n    return finalize({});\n  }\n\n  const networkRequests = parsedTrace.NetworkRequests;\n\n  const frameMetrics = parsedTrace.PageLoadMetrics.metricScoresByFrameId.get(context.frameId);\n  if (!frameMetrics) {\n    throw new Error('no frame metrics');\n  }\n\n  const navMetrics = frameMetrics.get(context.navigationId);\n  if (!navMetrics) {\n    throw new Error('no navigation metrics');\n  }\n  const metricScore = navMetrics.get(Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP);\n  const lcpEvent = metricScore?.event;\n  if (!lcpEvent || !Types.Events.isLargestContentfulPaintCandidate(lcpEvent)) {\n    return finalize({warnings: [InsightWarning.NO_LCP]});\n  }\n\n  // This helps calculate the subparts.\n  const lcpMs = Helpers.Timing.microToMilli(metricScore.timing);\n  // This helps position things on the timeline's UI accurately for a trace.\n  const lcpTs = metricScore.event?.ts ? Helpers.Timing.microToMilli(metricScore.event?.ts) : undefined;\n  const lcpRequest = parsedTrace.LargestImagePaint.lcpRequestByNavigationId.get(context.navigationId);\n\n  const docRequest = networkRequests.byId.get(context.navigationId);\n  if (!docRequest) {\n    return finalize({lcpMs, lcpTs, lcpEvent, lcpRequest, warnings: [InsightWarning.NO_DOCUMENT_REQUEST]});\n  }\n\n  return finalize({\n    lcpMs,\n    lcpTs,\n    lcpEvent,\n    lcpRequest,\n    subparts: determineSubparts(context.navigation, docRequest, lcpEvent, lcpRequest) ?? undefined,\n  });\n}\n\nexport function createOverlays(model: LCPBreakdownInsightModel): Types.Overlays.Overlay[] {\n  if (!model.subparts || !model.lcpTs) {\n    return [];\n  }\n\n  const overlays: Types.Overlays.Overlay[] = [\n    {\n      type: 'TIMESPAN_BREAKDOWN',\n      sections: Object.values(model.subparts)\n                    .map((subpart: Subpart) => ({bounds: subpart, label: subpart.label, showDuration: true})),\n    },\n  ];\n  if (model.lcpRequest) {\n    overlays.push({type: 'ENTRY_OUTLINE', entry: model.lcpRequest, outlineReason: 'INFO'});\n  }\n\n  return overlays;\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {\n  type Checklist,\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  InsightWarning,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Title of an insight that provides details about the LCP metric, and the network requests necessary to load it. Details how the LCP request was discoverable - in other words, the path necessary to load it (ex: network requests, JavaScript)\n   */\n  title: 'LCP request discovery',\n  /**\n   * @description Description of an insight that provides details about the LCP metric, and the network requests necessary to load it.\n   */\n  description:\n      'Optimize LCP by making the LCP image [discoverable](https://web.dev/articles/optimize-lcp#1_eliminate_resource_load_delay) from the HTML immediately, and [avoiding lazy-loading](https://web.dev/articles/lcp-lazy-loading)',\n  /**\n   * @description Text to tell the user how long after the earliest discovery time their LCP element loaded.\n   * @example {401ms} PH1\n   */\n  lcpLoadDelay: 'LCP image loaded {PH1} after earliest start point.',\n  /**\n   * @description Text to tell the user that a fetchpriority property value of \"high\" is applied to the LCP request.\n   */\n  fetchPriorityApplied: 'fetchpriority=high applied',\n  /**\n   * @description Text to tell the user that a fetchpriority property value of \"high\" should be applied to the LCP request.\n   */\n  fetchPriorityShouldBeApplied: 'fetchpriority=high should be applied',\n  /**\n   * @description Text to tell the user that the LCP request is discoverable in the initial document.\n   */\n  requestDiscoverable: 'Request is discoverable in initial document',\n  /**\n   * @description Text to tell the user that the LCP request does not have the lazy load property applied.\n   */\n  lazyLoadNotApplied: 'lazy load not applied',\n  /**\n   * @description Text status indicating that the the Largest Contentful Paint (LCP) metric timing was not found. \"LCP\" is an acronym and should not be translated.\n   */\n  noLcp: 'No LCP detected',\n  /**\n   * @description Text status indicating that the Largest Contentful Paint (LCP) metric was text rather than an image. \"LCP\" is an acronym and should not be translated.\n   */\n  noLcpResource: 'No LCP resource detected because the LCP is not an image',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/LCPDiscovery.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function isLCPDiscovery(model: InsightModel): model is LCPDiscoveryInsightModel {\n  return model.insightKey === 'LCPDiscovery';\n}\nexport type LCPDiscoveryInsightModel = InsightModel<typeof UIStrings, {\n  lcpEvent?: Types.Events.LargestContentfulPaintCandidate,\n  /** The network request for the LCP image, if there was one. */\n  lcpRequest?: Types.Events.SyntheticNetworkRequest,\n  earliestDiscoveryTimeTs?: Types.Timing.Micro,\n  checklist?: Checklist<'priorityHinted'|'requestDiscoverable'|'eagerlyLoaded'>,\n}>;\n\nfunction finalize(partialModel: PartialInsightModel<LCPDiscoveryInsightModel>): LCPDiscoveryInsightModel {\n  const relatedEvents = partialModel.lcpEvent && partialModel.lcpRequest ?\n      // TODO: add entire request initiator chain?\n      [partialModel.lcpEvent, partialModel.lcpRequest] :\n      [];\n  return {\n    insightKey: InsightKeys.LCP_DISCOVERY,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.LCP,\n    state: partialModel.lcpRequest && partialModel.checklist &&\n            (!partialModel.checklist.eagerlyLoaded.value || !partialModel.checklist.requestDiscoverable.value ||\n             !partialModel.checklist.priorityHinted.value) ?\n        'fail' :\n        'pass',\n    ...partialModel,\n    relatedEvents,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): LCPDiscoveryInsightModel {\n  if (!context.navigation) {\n    return finalize({});\n  }\n\n  const networkRequests = parsedTrace.NetworkRequests;\n\n  const frameMetrics = parsedTrace.PageLoadMetrics.metricScoresByFrameId.get(context.frameId);\n  if (!frameMetrics) {\n    throw new Error('no frame metrics');\n  }\n\n  const navMetrics = frameMetrics.get(context.navigationId);\n  if (!navMetrics) {\n    throw new Error('no navigation metrics');\n  }\n  const metricScore = navMetrics.get(Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP);\n  const lcpEvent = metricScore?.event;\n  if (!lcpEvent || !Types.Events.isLargestContentfulPaintCandidate(lcpEvent)) {\n    return finalize({warnings: [InsightWarning.NO_LCP]});\n  }\n\n  const docRequest = networkRequests.byId.get(context.navigationId);\n  if (!docRequest) {\n    return finalize({warnings: [InsightWarning.NO_DOCUMENT_REQUEST]});\n  }\n\n  const lcpRequest = parsedTrace.LargestImagePaint.lcpRequestByNavigationId.get(context.navigationId);\n  if (!lcpRequest) {\n    return finalize({lcpEvent});\n  }\n\n  const initiatorUrl = lcpRequest.args.data.initiator?.url;\n  // TODO(b/372319476): Explore using trace event HTMLDocumentParser::FetchQueuedPreloads to determine if the request\n  // is discovered by the preload scanner.\n  const initiatedByMainDoc =\n      lcpRequest?.args.data.initiator?.type === 'parser' && docRequest.args.data.url === initiatorUrl;\n  const imgPreloadedOrFoundInHTML = lcpRequest?.args.data.isLinkPreload || initiatedByMainDoc;\n\n  const imageLoadingAttr = lcpEvent.args.data?.loadingAttr;\n  const imageFetchPriorityHint = lcpRequest?.args.data.fetchPriorityHint;\n  // This is the earliest discovery time an LCP request could have - it's TTFB.\n  const earliestDiscoveryTime = docRequest?.args.data.timing ?\n      Helpers.Timing.secondsToMicro(docRequest.args.data.timing.requestTime) +\n          Helpers.Timing.milliToMicro(docRequest.args.data.timing.receiveHeadersStart) :\n      undefined;\n\n  const priorityHintFound = imageFetchPriorityHint === 'high';\n\n  return finalize({\n    lcpEvent,\n    lcpRequest,\n    earliestDiscoveryTimeTs: earliestDiscoveryTime ? Types.Timing.Micro(earliestDiscoveryTime) : undefined,\n    checklist: {\n      priorityHinted: {\n        label: priorityHintFound ? i18nString(UIStrings.fetchPriorityApplied) :\n                                   i18nString(UIStrings.fetchPriorityShouldBeApplied),\n        value: priorityHintFound\n      },\n      requestDiscoverable: {label: i18nString(UIStrings.requestDiscoverable), value: imgPreloadedOrFoundInHTML},\n      eagerlyLoaded: {label: i18nString(UIStrings.lazyLoadNotApplied), value: imageLoadingAttr !== 'lazy'},\n    },\n  });\n}\n\ninterface LCPImageDiscoveryData {\n  checklist: Exclude<LCPDiscoveryInsightModel['checklist'], undefined>;\n  request: Types.Events.SyntheticNetworkRequest;\n  discoveryDelay: Types.Timing.Micro|null;\n  estimatedSavings: Types.Timing.Milli|null;\n}\n\n/**\n * TODO: this extra transformation (getImageData) should not be necessary.\n */\nexport function getImageData(model: LCPDiscoveryInsightModel): LCPImageDiscoveryData|null {\n  if (!model.lcpRequest || !model.checklist) {\n    return null;\n  }\n\n  const shouldIncreasePriorityHint = !model.checklist.priorityHinted.value;\n  const shouldPreloadImage = !model.checklist.requestDiscoverable.value;\n  const shouldRemoveLazyLoading = !model.checklist.eagerlyLoaded.value;\n\n  const imageLCP = shouldIncreasePriorityHint !== undefined && shouldPreloadImage !== undefined &&\n      shouldRemoveLazyLoading !== undefined;\n\n  // Shouldn't render anything if lcp insight is null or lcp is text.\n  if (!imageLCP) {\n    return null;\n  }\n\n  const data: LCPImageDiscoveryData = {\n    checklist: model.checklist,\n    request: model.lcpRequest,\n    discoveryDelay: null,\n    estimatedSavings: model.metricSavings?.LCP ?? null,\n  };\n\n  if (model.earliestDiscoveryTimeTs && model.lcpRequest) {\n    const discoveryDelay = model.lcpRequest.ts - model.earliestDiscoveryTimeTs;\n    data.discoveryDelay = Types.Timing.Micro(discoveryDelay);\n  }\n\n  return data;\n}\n\nexport function createOverlays(model: LCPDiscoveryInsightModel): Types.Overlays.Overlay[] {\n  const imageResults = getImageData(model);\n  if (!imageResults?.discoveryDelay) {\n    return [];\n  }\n\n  const delay = Helpers.Timing.traceWindowFromMicroSeconds(\n      Types.Timing.Micro(imageResults.request.ts - imageResults.discoveryDelay),\n      imageResults.request.ts,\n  );\n\n  return [\n    {\n      type: 'ENTRY_OUTLINE',\n      entry: imageResults.request,\n      outlineReason: 'ERROR',\n    },\n    {\n      type: 'CANDY_STRIPED_TIME_RANGE',\n      bounds: delay,\n      entry: imageResults.request,\n    },\n    {\n      type: 'TIMESPAN_BREAKDOWN',\n      sections: [{\n        bounds: delay,\n        // This is overridden in the component.\n        label: `${imageResults.discoveryDelay} microseconds`,\n        showDuration: false,\n      }],\n      entry: imageResults.request,\n      renderLocation: 'ABOVE_EVENT',\n    },\n  ];\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as LegacyJavaScriptLib from '../../../third_party/legacy-javascript/legacy-javascript.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type * as Types from '../types/types.js';\n\nimport {estimateCompressionRatioForScript, metricSavingsForWastedBytes} from './Common.js';\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type PartialInsightModel,\n} from './types.js';\n\nconst {detectLegacyJavaScript} = LegacyJavaScriptLib.LegacyJavaScript;\n\nexport const UIStrings = {\n  /**\n   * @description Title of an insight that identifies polyfills for modern JavaScript features, and recommends their removal.\n   */\n  title: 'Legacy JavaScript',\n  /**\n   * @description Description of an insight that identifies polyfills for modern JavaScript features, and recommends their removal.\n   */\n  description:\n      'Polyfills and transforms enable older browsers to use new JavaScript features. However, many aren\\'t necessary for modern browsers. Consider modifying your JavaScript build process to not transpile [Baseline](https://web.dev/articles/baseline-and-polyfills) features, unless you know you must support older browsers. [Learn why most sites can deploy ES6+ code without transpiling](https://philipwalton.com/articles/the-state-of-es5-on-the-web/)',\n  /** Label for a column in a data table; entries will be the individual JavaScript scripts. */\n  columnScript: 'Script',\n  /** Label for a column in a data table; entries will be the number of wasted bytes (aka the estimated savings in terms of bytes). */\n  columnWastedBytes: 'Wasted bytes',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/LegacyJavaScript.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface PatternMatchResult {\n  name: string;\n  line: number;\n  column: number;\n}\n\ninterface LegacyJavaScriptResult {\n  matches: PatternMatchResult[];\n  estimatedByteSavings: number;\n}\n\ntype LegacyJavaScriptResults = Map<Handlers.ModelHandlers.Scripts.Script, LegacyJavaScriptResult>;\n\nexport type LegacyJavaScriptInsightModel = InsightModel<typeof UIStrings, {\n  legacyJavaScriptResults: LegacyJavaScriptResults,\n}>;\n\nconst BYTE_THRESHOLD = 5000;\n\nfunction finalize(partialModel: PartialInsightModel<LegacyJavaScriptInsightModel>): LegacyJavaScriptInsightModel {\n  const requests = [...partialModel.legacyJavaScriptResults.keys()].map(script => script.request).filter(e => !!e);\n\n  return {\n    insightKey: InsightKeys.LEGACY_JAVASCRIPT,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.ALL,\n    state: requests.length ? 'fail' : 'pass',\n    relatedEvents: [...new Set(requests)],\n    ...partialModel,\n  };\n}\n\nexport function isLegacyJavaScript(model: InsightModel): model is LegacyJavaScriptInsightModel {\n  return model.insightKey === InsightKeys.LEGACY_JAVASCRIPT;\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): LegacyJavaScriptInsightModel {\n  const scripts = parsedTrace.Scripts.scripts.filter(script => {\n    if (script.frame !== context.frameId) {\n      return false;\n    }\n\n    if (script.url?.startsWith('chrome-extension://')) {\n      return false;\n    }\n\n    return Helpers.Timing.timestampIsInBounds(context.bounds, script.ts);\n  });\n\n  const legacyJavaScriptResults: LegacyJavaScriptResults = new Map();\n  const wastedBytesByRequestId = new Map<string, number>();\n\n  for (const script of scripts) {\n    if (!script.content || script.content.length < BYTE_THRESHOLD) {\n      continue;\n    }\n\n    const result = detectLegacyJavaScript(script.content, script.sourceMap);\n    if (result.estimatedByteSavings < BYTE_THRESHOLD) {\n      continue;\n    }\n\n    // Translate from resource size to transfer size.\n    const compressionRatio = estimateCompressionRatioForScript(script);\n    const transferSize = Math.round(result.estimatedByteSavings * compressionRatio);\n    result.estimatedByteSavings = transferSize;\n\n    legacyJavaScriptResults.set(script, result);\n\n    if (script.request) {\n      const requestId = script.request.args.data.requestId;\n      wastedBytesByRequestId.set(requestId, transferSize);\n    }\n  }\n\n  const sorted =\n      new Map([...legacyJavaScriptResults].sort((a, b) => b[1].estimatedByteSavings - a[1].estimatedByteSavings));\n\n  return finalize({\n    legacyJavaScriptResults: sorted,\n    metricSavings: metricSavingsForWastedBytes(wastedBytesByRequestId, context),\n    wastedBytes: wastedBytesByRequestId.values().reduce((acc, cur) => acc + cur, 0),\n  });\n}\nexport function createOverlays(model: LegacyJavaScriptInsightModel): Types.Overlays.Overlay[] {\n  return [...model.legacyJavaScriptResults.keys()].map(script => script.request).filter(e => !!e).map(request => {\n    return {\n      type: 'ENTRY_OUTLINE',\n      entry: request,\n      outlineReason: 'ERROR',\n    };\n  });\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type * as Lantern from '../lantern/lantern.js';\nimport type * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type MetricSavings,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Title of an insight that recommends using HTTP/2 over HTTP/1.1 because of the performance benefits. \"HTTP\" should not be translated.\n   */\n  title: 'Modern HTTP',\n  /**\n   * @description Description of an insight that recommends recommends using HTTP/2 over HTTP/1.1 because of the performance benefits. \"HTTP\" should not be translated.\n   */\n  description:\n      'HTTP/2 and HTTP/3 offer many benefits over HTTP/1.1, such as multiplexing. [Learn more about using modern HTTP](https://developer.chrome.com/docs/lighthouse/best-practices/uses-http2/).',\n  /**\n   * @description Column header for a table where each cell represents a network request.\n   */\n  request: 'Request',\n  /**\n   * @description Column header for a table where each cell represents the protocol of a network request.\n   */\n  protocol: 'Protocol',\n  /**\n   * @description Text explaining that there were not requests that were slowed down by using HTTP/1.1. \"HTTP/1.1\" should not be translated.\n   */\n  noOldProtocolRequests:\n      'No requests used HTTP/1.1, or its current use of HTTP/1.1 does not present a significant optimization opportunity. HTTP/1.1 requests are only flagged if six or more static assets originate from the same origin, and they are not served from a local development environment or a third-party source.'\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/ModernHTTP.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type ModernHTTPInsightModel = InsightModel<typeof UIStrings, {\n  http1Requests: Types.Events.SyntheticNetworkRequest[],\n}>;\n\nexport function isModernHTTP(model: InsightModel): model is ModernHTTPInsightModel {\n  return model.insightKey === InsightKeys.MODERN_HTTP;\n}\n\n/**\n * Determines whether a network request is a \"static resource\" that would benefit from H2 multiplexing.\n * XHRs, tracking pixels, etc generally don't benefit as much because they aren't requested en-masse\n * for the same origin at the exact same time.\n */\nfunction isMultiplexableStaticAsset(\n    request: Types.Events.SyntheticNetworkRequest, entityMappings: Handlers.Helpers.EntityMappings,\n    firstPartyEntity: Handlers.Helpers.Entity|null): boolean {\n  if (!Helpers.Network.STATIC_RESOURCE_TYPES.has(request.args.data.resourceType)) {\n    return false;\n  }\n\n  // Resources from third-parties that are less than 100 bytes are usually tracking pixels, not actual resources.\n  // They can masquerade as static types though (gifs, documents, etc)\n  if (request.args.data.decodedBodyLength < 100) {\n    const entity = entityMappings.entityByEvent.get(request);\n    if (entity) {\n      // Third-party assets are multiplexable in their first-party context.\n      if (firstPartyEntity?.name === entity.name) {\n        return true;\n      }\n      // Skip recognizable third-parties' requests.\n      if (!entity.isUnrecognized) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Determine the set of resources that aren't HTTP/2 but should be.\n * We're a little conservative about what we surface for a few reasons:\n *\n *    - The simulator approximation of HTTP/2 is a little more generous than reality.\n *    - There's a bit of debate surrounding HTTP/2 due to its worse performance in environments with high packet loss. [1][2][3]\n *    - It's something that you'd have absolutely zero control over with a third-party (can't defer to fix it for example).\n *\n * Therefore, we only surface requests that were...\n *\n *    - Served over HTTP/1.1 or earlier\n *    - Served over an origin that serves at least 6 static asset requests\n *      (if there aren't more requests than browser's max/host, multiplexing isn't as big a deal)\n *    - Not served on localhost (h2 is a pain to deal with locally & and CI)\n *\n * [1] https://news.ycombinator.com/item?id=19086639\n * [2] https://www.twilio.com/blog/2017/10/http2-issues.html\n * [3] https://www.cachefly.com/http-2-is-not-a-magic-bullet/\n */\nexport function determineHttp1Requests(\n    requests: Types.Events.SyntheticNetworkRequest[], entityMappings: Handlers.Helpers.EntityMappings,\n    firstPartyEntity: Handlers.Helpers.Entity|null): Types.Events.SyntheticNetworkRequest[] {\n  const http1Requests: Types.Events.SyntheticNetworkRequest[] = [];\n\n  const groupedByOrigin = new Map<string, Types.Events.SyntheticNetworkRequest[]>();\n  for (const record of requests) {\n    const url = new URL(record.args.data.url);\n    if (!isMultiplexableStaticAsset(record, entityMappings, firstPartyEntity)) {\n      continue;\n    }\n    if (Helpers.Network.isSyntheticNetworkRequestLocalhost(record)) {\n      continue;\n    }\n    const originRequests = Platform.MapUtilities.getWithDefault(groupedByOrigin, url.origin, () => []);\n    originRequests.push(record);\n  }\n\n  const seenURLs = new Set<string>();\n\n  for (const request of requests) {\n    // Skip duplicates.\n    if (seenURLs.has(request.args.data.url)) {\n      continue;\n    }\n\n    // Check if record is not served through the service worker, servicer worker uses http/1.1 as a protocol.\n    // These can generate false positives (bug: https://github.com/GoogleChrome/lighthouse/issues/7158).\n    if (request.args.data.fromServiceWorker) {\n      continue;\n    }\n\n    // Test the protocol to see if it was http/1.1.\n    const isOldHttp = /HTTP\\/[01][.\\d]?/i.test(request.args.data.protocol);\n    if (!isOldHttp) {\n      continue;\n    }\n\n    const url = new URL(request.args.data.url);\n\n    // Check if the origin has enough requests to bother flagging.\n    const group = groupedByOrigin.get(url.origin) || [];\n    if (group.length < 6) {\n      continue;\n    }\n\n    seenURLs.add(request.args.data.url);\n    http1Requests.push(request);\n  }\n\n  return http1Requests;\n}\n\n/**\n * Computes the estimated effect of all results being converted to http/2 on the provided graph.\n */\nfunction computeWasteWithGraph(\n    urlsToChange: Set<string>, graph: Lantern.Graph.Node, simulator: Lantern.Simulation.Simulator): Types.Timing.Milli {\n  const simulationBefore = simulator.simulate(graph);\n\n  // Update all the protocols to reflect implementing our recommendations\n  const originalProtocols = new Map();\n  graph.traverse(node => {\n    if (node.type !== 'network') {\n      return;\n    }\n    if (!urlsToChange.has(node.request.url)) {\n      return;\n    }\n\n    originalProtocols.set(node.request.requestId, node.request.protocol);\n    node.request.protocol = 'h2';\n  });\n\n  const simulationAfter = simulator.simulate(graph);\n\n  // Restore the original protocol after we've done our simulation\n  graph.traverse(node => {\n    if (node.type !== 'network') {\n      return;\n    }\n    const originalProtocol = originalProtocols.get(node.request.requestId);\n    if (originalProtocol === undefined) {\n      return;\n    }\n    node.request.protocol = originalProtocol;\n  });\n\n  const savings = simulationBefore.timeInMs - simulationAfter.timeInMs;\n\n  return Platform.NumberUtilities.floor(savings, 1 / 10) as Types.Timing.Milli;\n}\n\nfunction computeMetricSavings(\n    http1Requests: Types.Events.SyntheticNetworkRequest[], context: InsightSetContext): MetricSavings|undefined {\n  if (!context.navigation || !context.lantern) {\n    return;\n  }\n\n  const urlsToChange = new Set(http1Requests.map(r => r.args.data.url));\n\n  const fcpGraph = context.lantern.metrics.firstContentfulPaint.optimisticGraph;\n  const lcpGraph = context.lantern.metrics.largestContentfulPaint.optimisticGraph;\n\n  return {\n    FCP: computeWasteWithGraph(urlsToChange, fcpGraph, context.lantern.simulator),\n    LCP: computeWasteWithGraph(urlsToChange, lcpGraph, context.lantern.simulator),\n  };\n}\n\nfunction finalize(partialModel: PartialInsightModel<ModernHTTPInsightModel>): ModernHTTPInsightModel {\n  return {\n    insightKey: InsightKeys.MODERN_HTTP,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.LCP,\n    state: partialModel.http1Requests.length > 0 ? 'fail' : 'pass',\n    ...partialModel,\n    relatedEvents: partialModel.http1Requests,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): ModernHTTPInsightModel {\n  const isWithinContext = (event: Types.Events.Event): boolean => Helpers.Timing.eventIsInBounds(event, context.bounds);\n\n  const contextRequests = parsedTrace.NetworkRequests.byTime.filter(isWithinContext);\n\n  const entityMappings = parsedTrace.NetworkRequests.entityMappings;\n  const firstPartyUrl = context.navigation?.args.data?.documentLoaderURL ?? parsedTrace.Meta.mainFrameURL;\n  const firstPartyEntity = Handlers.Helpers.getEntityForUrl(firstPartyUrl, entityMappings);\n  const http1Requests = determineHttp1Requests(contextRequests, entityMappings, firstPartyEntity ?? null);\n\n  return finalize({\n    http1Requests,\n    metricSavings: computeMetricSavings(http1Requests, context),\n  });\n}\n\nexport function createOverlayForRequest(request: Types.Events.SyntheticNetworkRequest): Types.Overlays.EntryOutline {\n  return {\n    type: 'ENTRY_OUTLINE',\n    entry: request,\n    outlineReason: 'ERROR',\n  };\n}\n\nexport function createOverlays(model: ModernHTTPInsightModel): Types.Overlays.Overlay[] {\n  return model.http1Requests.map(req => createOverlayForRequest(req)) ?? [];\n}\n", "// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Protocol from '../../../generated/protocol.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type * as Lantern from '../lantern/lantern.js';\nimport * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type InsightSetContextWithNavigation,\n  type PartialInsightModel,\n  type RelatedEventsMap,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Title of an insight that recommends avoiding chaining critical requests.\n   */\n  title: 'Network dependency tree',\n  /**\n   * @description Description of an insight that recommends avoiding chaining critical requests.\n   */\n  description:\n      '[Avoid chaining critical requests](https://developer.chrome.com/docs/lighthouse/performance/critical-request-chains) by reducing the length of chains, reducing the download size of resources, or deferring the download of unnecessary resources to improve page load.',\n  /**\n   * @description Description of the warning that recommends avoiding chaining critical requests.\n   */\n  warningDescription:\n      'Avoid chaining critical requests by reducing the length of chains, reducing the download size of resources, or deferring the download of unnecessary resources to improve page load.',\n  /**\n   * @description Text status indicating that there isn't long chaining critical network requests.\n   */\n  noNetworkDependencyTree: 'No rendering tasks impacted by network dependencies',\n  /**\n   * @description Text for the maximum critical path latency. This refers to the longest chain of network requests that\n   * the browser must download before it can render the page.\n   */\n  maxCriticalPathLatency: 'Max critical path latency:',\n  /** Label for a column in a data table; entries will be the network request */\n  columnRequest: 'Request',\n  /** Label for a column in a data table; entries will be the time from main document till current network request. */\n  columnTime: 'Time',\n  /**\n   * @description Title of the table of the detected preconnect origins.\n   */\n  preconnectOriginsTableTitle: 'Preconnected origins',\n  /**\n   * @description Description of the table of the detected preconnect origins.\n   */\n  preconnectOriginsTableDescription:\n      '[preconnect](https://developer.chrome.com/docs/lighthouse/performance/uses-rel-preconnect/) hints help the browser establish a connection earlier in the page load, saving time when the first request for that origin is made. The following are the origins that the page preconnected to.',\n  /**\n   * @description Text status indicating that there isn't any preconnected origins.\n   */\n  noPreconnectOrigins: 'no origins were preconnected',\n  /**\n   * @description A warning message that is shown when found more than 4 preconnected links. \"preconnect\" should not be translated.\n   */\n  tooManyPreconnectLinksWarning:\n      'More than 4 `preconnect` connections were found. These should be used sparingly and only to the most important origins.',\n  /**\n   * @description A warning message that is shown when the user added preconnect for some unnecessary origins. \"preconnect\" should not be translated.\n   */\n  unusedWarning: 'Unused preconnect. Only use `preconnect` for origins that the page is likely to request.',\n  /**\n   * @description A warning message that is shown when the user forget to set the `crossorigin` HTML attribute, or setting it to an incorrect value, on the link is a common mistake when adding preconnect links. \"preconnect\" should not be translated.\n   * */\n  crossoriginWarning: 'Unused preconnect. Check that the `crossorigin` attribute is used properly.',\n  /**\n   * @description Label for a column in a data table; entries will be the source of the origin.\n   */\n  columnSource: 'Source',\n  /**\n   * @description Text status indicating that there isn't preconnect candidates.\n   */\n  noPreconnectCandidates: 'No additional origins are good candidates for preconnecting',\n  /**\n   * @description Title of the table that shows the origins that the page should have preconnected to.\n   */\n  estSavingTableTitle: 'Preconnect candidates',\n  /**\n   * @description Description of the table that recommends preconnecting to the origins to save time. \"preconnect\" should not be translated.\n   */\n  estSavingTableDescription:\n      'Add [preconnect](https://developer.chrome.com/docs/lighthouse/performance/uses-rel-preconnect/) hints to your most important origins, but try to use no more than 4.',\n  /**\n   * @description Label for a column in a data table; entries will be the origin of a web resource\n   */\n  columnOrigin: 'Origin',\n  /**\n   * @description Label for a column in a data table; entries will be the number of milliseconds the user could reduce page load by if they implemented the suggestions.\n   */\n  columnWastedMs: 'Est LCP savings',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/NetworkDependencyTree.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// XHRs are fetched at High priority, but we exclude them, as they are unlikely to be critical\n// Images are also non-critical.\nconst nonCriticalResourceTypes = new Set<Protocol.Network.ResourceType>([\n  Protocol.Network.ResourceType.Image,\n  Protocol.Network.ResourceType.XHR,\n  Protocol.Network.ResourceType.Fetch,\n  Protocol.Network.ResourceType.EventSource,\n]);\n\n// Preconnect establishes a \"clean\" socket. Chrome's socket manager will keep an unused socket\n// around for 10s. Meaning, the time delta between processing preconnect a request should be <10s,\n// otherwise it's wasted. We add a 5s margin so we are sure to capture all key requests.\n// @see https://github.com/GoogleChrome/lighthouse/issues/3106#issuecomment-333653747\nconst PRECONNECT_SOCKET_MAX_IDLE_IN_MS = Types.Timing.Milli(15_000);\n\nconst IGNORE_THRESHOLD_IN_MILLISECONDS = Types.Timing.Milli(50);\n\nexport const TOO_MANY_PRECONNECTS_THRESHOLD = 4;\n\nexport interface CriticalRequestNode {\n  request: Types.Events.SyntheticNetworkRequest;\n  timeFromInitialRequest: Types.Timing.Micro;\n  children: CriticalRequestNode[];\n  isLongest?: boolean;\n  // Store all the requests that appear in any chains this request appears in.\n  // Use set to avoid duplication.\n  relatedRequests: Set<Types.Events.SyntheticNetworkRequest>;\n}\n\nexport type PreconnectedOrigin = PreconnectedOriginFromDom|PreconnectedOriginFromResponseHeader;\n\nexport interface PreconnectedOriginFromDom {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  node_id: Protocol.DOM.BackendNodeId;\n  frame?: string;\n  url: string;\n  unused: boolean;\n  crossorigin: boolean;\n  source: 'DOM';\n}\n\nexport interface PreconnectedOriginFromResponseHeader {\n  url: string;\n  headerText: string;\n  request: Types.Events.SyntheticNetworkRequest;\n  unused: boolean;\n  crossorigin: boolean;\n  source: 'ResponseHeader';\n}\n\nexport interface PreconnectCandidate {\n  origin: Platform.DevToolsPath.UrlString;\n  wastedMs: Types.Timing.Milli;\n}\n\nexport type NetworkDependencyTreeInsightModel = InsightModel<typeof UIStrings, {\n  rootNodes: CriticalRequestNode[],\n  maxTime: Types.Timing.Micro,\n  fail: boolean,\n  preconnectedOrigins: PreconnectedOrigin[],\n  preconnectCandidates: PreconnectCandidate[],\n}>;\n\nfunction finalize(partialModel: PartialInsightModel<NetworkDependencyTreeInsightModel>):\n    NetworkDependencyTreeInsightModel {\n  return {\n    insightKey: InsightKeys.NETWORK_DEPENDENCY_TREE,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.LCP,\n    state: partialModel.fail ? 'fail' : 'pass',\n    ...partialModel,\n  };\n}\n\nfunction isCritical(request: Types.Events.SyntheticNetworkRequest, context: InsightSetContextWithNavigation): boolean {\n  // The main resource is always critical.\n  if (request.args.data.requestId === context.navigationId) {\n    return true;\n  }\n\n  // Treat any preloaded resource as non-critical\n  if (request.args.data.isLinkPreload) {\n    return false;\n  }\n\n  // Iframes are considered High Priority but they are not render blocking\n  const isIframe = request.args.data.resourceType === Protocol.Network.ResourceType.Document &&\n      request.args.data.frame !== context.frameId;\n\n  if (nonCriticalResourceTypes.has(request.args.data.resourceType) || isIframe ||\n      // Treat any missed images, primarily favicons, as non-critical resources\n      request.args.data.mimeType.startsWith('image/')) {\n    return false;\n  }\n\n  // Requests that have no initiatorRequest are typically ambiguous late-load assets.\n  // Even on the off chance they were important, we don't have any parent to display for them.\n  const initiatorUrl =\n      request.args.data.initiator?.url || Helpers.Trace.getZeroIndexedStackTraceInEventPayload(request)?.at(0)?.url;\n  if (!initiatorUrl) {\n    return false;\n  }\n\n  const isBlocking = Helpers.Network.isSyntheticNetworkRequestEventRenderBlocking(request);\n  const isHighPriority = Helpers.Network.isSyntheticNetworkRequestHighPriority(request);\n  return isHighPriority || isBlocking;\n}\n\nfunction findMaxLeafNode(node: CriticalRequestNode): CriticalRequestNode {\n  if (node.children.length === 0) {\n    return node;\n  }\n  let maxLeaf = node.children[0];\n  for (const child of node.children) {\n    const leaf = findMaxLeafNode(child);\n    if (leaf.timeFromInitialRequest > maxLeaf.timeFromInitialRequest) {\n      maxLeaf = leaf;\n    }\n  }\n  return maxLeaf;\n}\n\nfunction sortRecursively(nodes: CriticalRequestNode[]): void {\n  for (const node of nodes) {\n    if (node.children.length > 0) {\n      node.children.sort((nodeA, nodeB) => {\n        const leafA = findMaxLeafNode(nodeA);\n        const leafB = findMaxLeafNode(nodeB);\n        return leafB.timeFromInitialRequest - leafA.timeFromInitialRequest;\n      });\n      sortRecursively(node.children);\n    }\n  }\n}\n\nfunction generateNetworkDependencyTree(context: InsightSetContextWithNavigation): {\n  rootNodes: CriticalRequestNode[],\n  maxTime: Types.Timing.Micro,\n  fail: boolean,\n  relatedEvents?: RelatedEventsMap,\n} {\n  const rootNodes: CriticalRequestNode[] = [];\n  const relatedEvents: RelatedEventsMap = new Map();\n  let maxTime = Types.Timing.Micro(0);\n  let fail = false;\n\n  let longestChain: Types.Events.SyntheticNetworkRequest[] = [];\n\n  function addChain(path: Types.Events.SyntheticNetworkRequest[]): void {\n    if (path.length === 0) {\n      return;\n    }\n    if (path.length >= 2) {\n      fail = true;\n    }\n    const initialRequest = path[0];\n    const lastRequest = path[path.length - 1];\n    const totalChainTime = Types.Timing.Micro(lastRequest.ts + lastRequest.dur - initialRequest.ts);\n    if (totalChainTime > maxTime) {\n      maxTime = totalChainTime;\n      longestChain = path;\n    }\n\n    let currentNodes = rootNodes;\n\n    for (let depth = 0; depth < path.length; ++depth) {\n      const request = path[depth];\n      // find the request\n      let found = currentNodes.find(node => node.request === request);\n\n      if (!found) {\n        const timeFromInitialRequest = Types.Timing.Micro(request.ts + request.dur - initialRequest.ts);\n        found = {\n          request,\n          timeFromInitialRequest,\n          children: [],\n          relatedRequests: new Set(),\n        };\n        currentNodes.push(found);\n      }\n\n      path.forEach(request => found?.relatedRequests.add(request));\n\n      // TODO(b/372897712): When RelatedInsight supports markdown, remove\n      // UIStrings.warningDescription and use UIStrings.description.\n      relatedEvents.set(request, depth < 2 ? [] : [i18nString(UIStrings.warningDescription)]);\n\n      currentNodes = found.children;\n    }\n  }\n  // By default `traverse` will discover nodes in BFS-order regardless of dependencies, but\n  // here we need traversal in a topological sort order. We'll visit a node only when its\n  // dependencies have been met.\n  const seenNodes = new Set<Lantern.Graph.Node<Types.Events.SyntheticNetworkRequest>>();\n  function getNextNodes(node: Lantern.Graph.Node<Types.Events.SyntheticNetworkRequest>):\n      Array<Lantern.Graph.Node<Types.Events.SyntheticNetworkRequest>> {\n    return node.getDependents().filter(n => n.getDependencies().every(d => seenNodes.has(d)));\n  }\n\n  context.lantern?.graph.traverse((node, traversalPath) => {\n    seenNodes.add(node);\n    if (node.type !== 'network') {\n      return;\n    }\n    const networkNode = node;\n    if (!isCritical(networkNode.rawRequest, context)) {\n      return;\n    }\n\n    const networkPath = traversalPath.filter(node => node.type === 'network').reverse().map(node => node.rawRequest);\n\n    // Ignore if some ancestor is not a critical request.\n    if (networkPath.some(request => (!isCritical(request, context)))) {\n      return;\n    }\n\n    // Ignore non-network things (like data urls).\n    if (node.isNonNetworkProtocol) {\n      return;\n    }\n\n    addChain(networkPath);\n  }, getNextNodes);\n\n  // Mark the longest chain\n  if (longestChain.length > 0) {\n    let currentNodes = rootNodes;\n    for (const request of longestChain) {\n      const found = currentNodes.find(node => node.request === request);\n      if (found) {\n        found.isLongest = true;\n        currentNodes = found.children;\n      } else {\n        console.error('Some request in the longest chain is not found');\n      }\n    }\n  }\n\n  sortRecursively(rootNodes);\n\n  return {\n    rootNodes,\n    maxTime,\n    fail,\n    relatedEvents,\n  };\n}\n\nfunction getSecurityOrigin(url: string): Platform.DevToolsPath.UrlString {\n  const parsedURL = new Common.ParsedURL.ParsedURL(url);\n  return parsedURL.securityOrigin();\n}\n\nfunction handleLinkResponseHeaderPart(trimmedPart: string): {url: string, headerText: string}|null {\n  if (!trimmedPart) {\n    // Skip empty string\n    return null;\n  }\n\n  // Extract URL\n  const urlStart = trimmedPart.indexOf('<');\n  const urlEnd = trimmedPart.indexOf('>');\n\n  if (urlStart !== 0 || urlEnd === -1 || urlEnd <= urlStart) {\n    // Skip parts without a valid URI (must start with '<' and have a closing '>')\n    return null;\n  }\n\n  const url = trimmedPart.substring(urlStart + 1, urlEnd).trim();\n  if (!url) {\n    // Skip empty url\n    return null;\n  }\n\n  // Extract parameters string (everything after '>')\n  const paramsString = trimmedPart.substring(urlEnd + 1).trim();\n\n  if (paramsString) {\n    const params = paramsString.split(';');\n\n    for (const param of params) {\n      const trimmedParam = param.trim();\n      if (!trimmedParam) {\n        continue;\n      }\n\n      const eqIndex = trimmedParam.indexOf('=');\n      if (eqIndex === -1) {\n        // Skip malformed parameters without an '='\n        continue;\n      }\n\n      const paramName = trimmedParam.substring(0, eqIndex).trim().toLowerCase();\n      let paramValue = trimmedParam.substring(eqIndex + 1).trim();\n\n      // Remove quotes from value if present\n      if (paramValue.startsWith('\"') && paramValue.endsWith('\"')) {\n        paramValue = paramValue.substring(1, paramValue.length - 1);\n      }\n\n      if (paramName === 'rel' && paramValue === 'preconnect') {\n        // Found 'rel=preconnect', no need to process other parameters for this link\n        return {url, headerText: trimmedPart};\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an HTTP Link header string into an array of url and related header text.\n *\n * Export the function for test purpose.\n * @param linkHeaderValue The value of the HTTP Link header (e.g., '</style.css>; rel=preload; as=style, <https://example.com>; rel=\"preconnect\"').\n * @returns An array of url and header text objects if it contains `rel=preconnect`.\n */\nexport function handleLinkResponseHeader(linkHeaderValue: string): Array<{url: string, headerText: string}> {\n  if (!linkHeaderValue) {\n    return [];\n  }\n  const preconnectedOrigins: Array<{url: string, headerText: string}> = [];\n\n  for (let i = 0; i < linkHeaderValue.length;) {\n    const firstUrlEnd = linkHeaderValue.indexOf('>', i);\n    if (firstUrlEnd === -1) {\n      break;\n    }\n\n    const commaIndex = linkHeaderValue.indexOf(',', firstUrlEnd);\n    const partEnd = commaIndex !== -1 ? commaIndex : linkHeaderValue.length;\n    const part = linkHeaderValue.substring(i, partEnd);\n\n    // This shouldn't be necessary, but we had a bug that created an infinite loop so\n    // let's guard against that.\n    // See crbug.com/431239629\n    if (partEnd + 1 <= i) {\n      console.warn('unexpected infinite loop, bailing');\n      break;\n    }\n\n    i = partEnd + 1;\n\n    const preconnectedOrigin = handleLinkResponseHeaderPart(part.trim());\n    if (preconnectedOrigin) {\n      preconnectedOrigins.push(preconnectedOrigin);\n    }\n  }\n\n  return preconnectedOrigins;\n}\n\n// Export the function for test purpose.\nexport function generatePreconnectedOrigins(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContextWithNavigation,\n    contextRequests: Types.Events.SyntheticNetworkRequest[],\n    preconnectCandidates: PreconnectCandidate[]): PreconnectedOrigin[] {\n  const preconnectedOrigins: PreconnectedOrigin[] = [];\n  for (const event of parsedTrace.NetworkRequests.linkPreconnectEvents) {\n    preconnectedOrigins.push({\n      node_id: event.args.data.node_id,\n      frame: event.args.data.frame,\n      url: event.args.data.url,\n      // For each origin the page wanted to preconnect to:\n      // - if we found no network requests to that origin at all then we issue a unused warning\n      unused: !contextRequests.some(\n          request => getSecurityOrigin(event.args.data.url) === getSecurityOrigin(request.args.data.url)),\n      // - else (we found network requests to the same origin) and if some of those network requests is too slow (if\n      //   they are preconnect candidates), then we issue a unused warning with crossorigin hint\n      crossorigin: preconnectCandidates.some(candidate => candidate.origin === getSecurityOrigin(event.args.data.url)),\n      source: 'DOM',\n    });\n  }\n\n  const documentRequest = parsedTrace.NetworkRequests.byId.get(context.navigationId);\n  documentRequest?.args.data.responseHeaders?.forEach(header => {\n    if (header.name.toLowerCase() === 'link') {\n      const preconnectedOriginsFromResponseHeader = handleLinkResponseHeader(header.value);  // , documentRequest);\n      preconnectedOriginsFromResponseHeader?.forEach(origin => preconnectedOrigins.push({\n        url: origin.url,\n        headerText: origin.headerText,\n        request: documentRequest,\n        // For each origin the page wanted to preconnect to:\n        // - if we found no network requests to that origin at all then we issue a unused warning\n        unused: !contextRequests.some(\n            request => getSecurityOrigin(origin.url) === getSecurityOrigin(request.args.data.url)),\n        // - else (we found network requests to the same origin) and if some of those network requests is too slow (if\n        //   they are preconnect candidates), then we issue a unused warning with crossorigin hint\n        crossorigin: preconnectCandidates.some(candidate => candidate.origin === getSecurityOrigin(origin.url)),\n        source: 'ResponseHeader',\n      }));\n    }\n  });\n\n  return preconnectedOrigins;\n}\n\nfunction hasValidTiming(request: Types.Events.SyntheticNetworkRequest): boolean {\n  return !!request.args.data.timing && request.args.data.timing.connectEnd >= 0 &&\n      request.args.data.timing.connectStart >= 0;\n}\n\nfunction hasAlreadyConnectedToOrigin(request: Types.Events.SyntheticNetworkRequest): boolean {\n  const {timing} = request.args.data;\n  if (!timing) {\n    return false;\n  }\n\n  // When these values are given as -1, that means the page has\n  // a connection for this origin and paid these costs already.\n  if (timing.dnsStart === -1 && timing.dnsEnd === -1 && timing.connectStart === -1 && timing.connectEnd === -1) {\n    return true;\n  }\n\n  // Less understood: if the connection setup took no time at all, consider\n  // it the same as the above. It is unclear if this is correct, or is even possible.\n  if (timing.dnsEnd - timing.dnsStart === 0 && timing.connectEnd - timing.connectStart === 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction socketStartTimeIsBelowThreshold(\n    request: Types.Events.SyntheticNetworkRequest, mainResource: Types.Events.SyntheticNetworkRequest): boolean {\n  const timeSinceMainEnd =\n      Math.max(0, request.args.data.syntheticData.sendStartTime - mainResource.args.data.syntheticData.finishTime) as\n      Types.Timing.Micro;\n  return Helpers.Timing.microToMilli(timeSinceMainEnd) < PRECONNECT_SOCKET_MAX_IDLE_IN_MS;\n}\n\nfunction candidateRequestsByOrigin(\n    parsedTrace: Handlers.Types.ParsedTrace, mainResource: Types.Events.SyntheticNetworkRequest,\n    contextRequests: Types.Events.SyntheticNetworkRequest[],\n    lcpGraphURLs: Set<string>): Map<string, Types.Events.SyntheticNetworkRequest[]> {\n  const origins = new Map<string, Types.Events.SyntheticNetworkRequest[]>();\n\n  contextRequests.forEach(request => {\n    if (!hasValidTiming(request)) {\n      return;\n    }\n\n    // Filter out all resources that are loaded by the document. Connections are already early.\n    if (parsedTrace.NetworkRequests.eventToInitiator.get(request) === mainResource) {\n      return;\n    }\n\n    const url = new URL(request.args.data.url);\n    // Filter out urls that do not have an origin (data, file, etc).\n    if (url.origin === 'null') {\n      return;\n    }\n    const mainOrigin = new URL(mainResource.args.data.url).origin;\n    // Filter out all resources that have the same origin. We're already connected.\n    if (url.origin === mainOrigin) {\n      return;\n    }\n\n    // Filter out anything that wasn't part of LCP. Only recommend important origins.\n    if (!lcpGraphURLs.has(request.args.data.url)) {\n      return;\n    }\n    // Filter out all resources where origins are already resolved.\n    if (hasAlreadyConnectedToOrigin(request)) {\n      return;\n    }\n    // Make sure the requests are below the PRECONNECT_SOCKET_MAX_IDLE_IN_MS (15s) mark.\n    if (!socketStartTimeIsBelowThreshold(request, mainResource)) {\n      return;\n    }\n\n    const originRequests = Platform.MapUtilities.getWithDefault(origins, url.origin, () => []);\n    originRequests.push(request);\n  });\n\n  return origins;\n}\n\n// Export the function for test purpose.\nexport function generatePreconnectCandidates(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContextWithNavigation,\n    contextRequests: Types.Events.SyntheticNetworkRequest[]): PreconnectCandidate[] {\n  if (!context.lantern) {\n    return [];\n  }\n\n  const documentRequest = parsedTrace.NetworkRequests.byId.get(context.navigationId);\n  if (!documentRequest) {\n    return [];\n  }\n\n  const {rtt, additionalRttByOrigin} = context.lantern.simulator.getOptions();\n  const lcpGraph = context.lantern.metrics.largestContentfulPaint.pessimisticGraph;\n  const fcpGraph = context.lantern.metrics.firstContentfulPaint.pessimisticGraph;\n  const lcpGraphURLs = new Set<string>();\n  lcpGraph.traverse(node => {\n    if (node.type === 'network') {\n      lcpGraphURLs.add(node.request.url);\n    }\n  });\n  const fcpGraphURLs = new Set<string>();\n  fcpGraph.traverse(node => {\n    if (node.type === 'network') {\n      fcpGraphURLs.add(node.request.url);\n    }\n  });\n\n  const groupedOrigins = candidateRequestsByOrigin(parsedTrace, documentRequest, contextRequests, lcpGraphURLs);\n\n  let maxWastedLcp = Types.Timing.Milli(0);\n  let maxWastedFcp = Types.Timing.Milli(0);\n  let preconnectCandidates: PreconnectCandidate[] = [];\n\n  groupedOrigins.forEach(requests => {\n    const firstRequestOfOrigin = requests[0];\n\n    // Skip the origin if we don't have timing information\n    if (!firstRequestOfOrigin.args.data.timing) {\n      return;\n    }\n\n    const firstRequestOfOriginParsedURL = new Common.ParsedURL.ParsedURL(firstRequestOfOrigin.args.data.url);\n    const origin = firstRequestOfOriginParsedURL.securityOrigin();\n\n    // Approximate the connection time with the duration of TCP (+potentially SSL) handshake\n    // DNS time can be large but can also be 0 if a commonly used origin that's cached, so make\n    // no assumption about DNS.\n    const additionalRtt = additionalRttByOrigin.get(origin) ?? 0;\n    let connectionTime = Types.Timing.Milli(rtt + additionalRtt);\n    // TCP Handshake will be at least 2 RTTs for TLS connections\n    if (firstRequestOfOriginParsedURL.scheme === 'https') {\n      connectionTime = Types.Timing.Milli(connectionTime * 2);\n    }\n\n    const timeBetweenMainResourceAndDnsStart = Types.Timing.Micro(\n        firstRequestOfOrigin.args.data.syntheticData.sendStartTime -\n        documentRequest.args.data.syntheticData.finishTime +\n        Helpers.Timing.milliToMicro(firstRequestOfOrigin.args.data.timing.dnsStart));\n    const wastedMs =\n        Math.min(connectionTime, Helpers.Timing.microToMilli(timeBetweenMainResourceAndDnsStart)) as Types.Timing.Milli;\n    if (wastedMs < IGNORE_THRESHOLD_IN_MILLISECONDS) {\n      return;\n    }\n\n    maxWastedLcp = Math.max(wastedMs, maxWastedLcp) as Types.Timing.Milli;\n\n    if (fcpGraphURLs.has(firstRequestOfOrigin.args.data.url)) {\n      maxWastedFcp = Math.max(wastedMs, maxWastedFcp) as Types.Timing.Milli;\n    }\n    preconnectCandidates.push({\n      origin,\n      wastedMs,\n    });\n  });\n\n  preconnectCandidates = preconnectCandidates.sort((a, b) => b.wastedMs - a.wastedMs);\n\n  return preconnectCandidates.slice(0, TOO_MANY_PRECONNECTS_THRESHOLD);\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): NetworkDependencyTreeInsightModel {\n  if (!context.navigation) {\n    return finalize({\n      rootNodes: [],\n      maxTime: 0 as Types.Timing.Micro,\n      fail: false,\n      preconnectedOrigins: [],\n      preconnectCandidates: [],\n    });\n  }\n\n  const {\n    rootNodes,\n    maxTime,\n    fail,\n    relatedEvents,\n  } = generateNetworkDependencyTree(context);\n\n  const isWithinContext = (event: Types.Events.Event): boolean => Helpers.Timing.eventIsInBounds(event, context.bounds);\n  const contextRequests = parsedTrace.NetworkRequests.byTime.filter(isWithinContext);\n\n  const preconnectCandidates = generatePreconnectCandidates(parsedTrace, context, contextRequests);\n\n  const preconnectedOrigins = generatePreconnectedOrigins(parsedTrace, context, contextRequests, preconnectCandidates);\n\n  return finalize({\n    rootNodes,\n    maxTime,\n    fail,\n    relatedEvents,\n    preconnectedOrigins,\n    preconnectCandidates,\n  });\n}\n\nexport function createOverlays(model: NetworkDependencyTreeInsightModel): Types.Overlays.Overlay[] {\n  function walk(nodes: CriticalRequestNode[], overlays: Types.Overlays.Overlay[]): void {\n    nodes.forEach(node => {\n      overlays.push({\n        type: 'ENTRY_OUTLINE',\n        entry: node.request,\n        outlineReason: 'ERROR',\n      });\n      walk(node.children, overlays);\n    });\n  }\n\n  const overlays: Types.Overlays.Overlay[] = [];\n  walk(model.rootNodes, overlays);\n\n  return overlays;\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Protocol from '../../../generated/protocol.js';\nimport * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport type * as Lantern from '../lantern/lantern.js';\nimport type * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type InsightSetContextWithNavigation,\n  InsightWarning,\n  type LanternContext,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Title of an insight that provides the user with the list of network requests that blocked and therefore slowed down the page rendering and becoming visible to the user.\n   */\n  title: 'Render blocking requests',\n  /**\n   * @description Text to describe that there are requests blocking rendering, which may affect LCP.\n   */\n  description: 'Requests are blocking the page\\'s initial render, which may delay LCP. ' +\n      '[Deferring or inlining](https://web.dev/learn/performance/understanding-the-critical-path#render-blocking_resources) ' +\n      'can move these network requests out of the critical path.',\n  /**\n   * @description Label to describe a network request (that happens to be render-blocking).\n   */\n  renderBlockingRequest: 'Request',\n  /**\n   * @description Label used for a time duration.\n   */\n  duration: 'Duration',\n  /**\n   * @description Text status indicating that no requests blocked the initial render of a navigation\n   */\n  noRenderBlocking: 'No render blocking requests for this navigation',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/RenderBlocking.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function isRenderBlocking(insight: InsightModel): insight is RenderBlockingInsightModel {\n  return insight.insightKey === 'RenderBlocking';\n}\n\nexport type RenderBlockingInsightModel = InsightModel<typeof UIStrings, {\n  renderBlockingRequests: Types.Events.SyntheticNetworkRequest[],\n  requestIdToWastedMs?: Map<string, number>,\n}>;\n\n// Because of the way we detect blocking stylesheets, asynchronously loaded\n// CSS with link[rel=preload] and an onload handler (see https://github.com/filamentgroup/loadCSS)\n// can be falsely flagged as blocking. Therefore, ignore stylesheets that loaded fast enough\n// to possibly be non-blocking (and they have minimal impact anyway).\nconst MINIMUM_WASTED_MS = 50;\n\n/**\n * Given a simulation's nodeTimings, return an object with the nodes/timing keyed by network URL\n */\nfunction getNodesAndTimingByRequestId(nodeTimings: Lantern.Simulation.Result['nodeTimings']):\n    Map<string, {node: Lantern.Graph.Node, nodeTiming: Lantern.Types.Simulation.NodeTiming}> {\n  const requestIdToNode =\n      new Map<string, {node: Lantern.Graph.Node, nodeTiming: Lantern.Types.Simulation.NodeTiming}>();\n\n  for (const [node, nodeTiming] of nodeTimings) {\n    if (node.type !== 'network') {\n      continue;\n    }\n\n    requestIdToNode.set(node.request.requestId, {node, nodeTiming});\n  }\n\n  return requestIdToNode;\n}\n\nfunction estimateSavingsWithGraphs(deferredIds: Set<string>, lanternContext: LanternContext): Types.Timing.Milli {\n  const simulator = lanternContext.simulator;\n  const fcpGraph = lanternContext.metrics.firstContentfulPaint.optimisticGraph;\n  const {nodeTimings} = lanternContext.simulator.simulate(fcpGraph);\n  const adjustedNodeTimings = new Map(nodeTimings);\n\n  const totalChildNetworkBytes = 0;\n  const minimalFCPGraph = fcpGraph.cloneWithRelationships(node => {\n    // If a node can be deferred, exclude it from the new FCP graph\n    const canDeferRequest = deferredIds.has(node.id);\n    return !canDeferRequest;\n  });\n\n  if (minimalFCPGraph.type !== 'network') {\n    throw new Error('minimalFCPGraph not a NetworkNode');\n  }\n\n  // Recalculate the \"before\" time based on our adjusted node timings.\n  const estimateBeforeInline = Math.max(...Array.from(\n      Array.from(adjustedNodeTimings).map(timing => timing[1].endTime),\n      ));\n\n  // Add the inlined bytes to the HTML response\n  const originalTransferSize = minimalFCPGraph.request.transferSize;\n  const safeTransferSize = originalTransferSize || 0;\n  minimalFCPGraph.request.transferSize = safeTransferSize + totalChildNetworkBytes;\n  const estimateAfterInline = simulator.simulate(minimalFCPGraph).timeInMs;\n  minimalFCPGraph.request.transferSize = originalTransferSize;\n  return Math.round(Math.max(estimateBeforeInline - estimateAfterInline, 0)) as Types.Timing.Milli;\n}\n\nfunction hasImageLCP(parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContextWithNavigation): boolean {\n  return parsedTrace.LargestImagePaint.lcpRequestByNavigationId.has(context.navigationId);\n}\n\nfunction computeSavings(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContextWithNavigation,\n    renderBlockingRequests: Types.Events.SyntheticNetworkRequest[]):\n    Pick<RenderBlockingInsightModel, 'metricSavings'|'requestIdToWastedMs'>|undefined {\n  if (!context.lantern) {\n    return;\n  }\n\n  const nodesAndTimingsByRequestId =\n      getNodesAndTimingByRequestId(context.lantern.metrics.firstContentfulPaint.optimisticEstimate.nodeTimings);\n\n  const metricSavings = {FCP: 0 as Types.Timing.Milli, LCP: 0 as Types.Timing.Milli};\n  const requestIdToWastedMs = new Map<string, number>();\n  const deferredNodeIds = new Set<string>();\n  for (const request of renderBlockingRequests) {\n    const nodeAndTiming = nodesAndTimingsByRequestId.get(request.args.data.requestId);\n    if (!nodeAndTiming) {\n      continue;\n    }\n\n    const {node, nodeTiming} = nodeAndTiming;\n\n    // Mark this node and all its dependents as deferrable\n    node.traverse(node => deferredNodeIds.add(node.id));\n\n    // \"wastedMs\" is the download time of the network request, responseReceived - requestSent\n    const wastedMs = Math.round(nodeTiming.duration);\n    if (wastedMs < MINIMUM_WASTED_MS) {\n      continue;\n    }\n\n    requestIdToWastedMs.set(node.id, wastedMs);\n  }\n\n  if (requestIdToWastedMs.size) {\n    metricSavings.FCP = estimateSavingsWithGraphs(deferredNodeIds, context.lantern);\n\n    // In most cases, render blocking resources only affect LCP if LCP isn't an image.\n    if (!hasImageLCP(parsedTrace, context)) {\n      metricSavings.LCP = metricSavings.FCP;\n    }\n  }\n\n  return {metricSavings, requestIdToWastedMs};\n}\n\nfunction finalize(partialModel: PartialInsightModel<RenderBlockingInsightModel>): RenderBlockingInsightModel {\n  return {\n    insightKey: InsightKeys.RENDER_BLOCKING,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.LCP,\n    state: partialModel.renderBlockingRequests.length > 0 ? 'fail' : 'pass',\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): RenderBlockingInsightModel {\n  if (!context.navigation) {\n    return finalize({\n      renderBlockingRequests: [],\n    });\n  }\n\n  const firstPaintTs = parsedTrace.PageLoadMetrics.metricScoresByFrameId.get(context.frameId)\n                           ?.get(context.navigationId)\n                           ?.get(Handlers.ModelHandlers.PageLoadMetrics.MetricName.FP)\n                           ?.event?.ts;\n  if (!firstPaintTs) {\n    return finalize({\n      renderBlockingRequests: [],\n      warnings: [InsightWarning.NO_FP],\n    });\n  }\n\n  let renderBlockingRequests: Types.Events.SyntheticNetworkRequest[] = [];\n  for (const req of parsedTrace.NetworkRequests.byTime) {\n    if (req.args.data.frame !== context.frameId) {\n      continue;\n    }\n\n    if (!Helpers.Network.isSyntheticNetworkRequestEventRenderBlocking(req)) {\n      continue;\n    }\n\n    if (req.args.data.syntheticData.finishTime > firstPaintTs) {\n      continue;\n    }\n\n    // If a request is marked `in_body_parser_blocking` it should only be considered render blocking if it is a\n    // high enough priority. Some requests (e.g. scripts) are not marked as high priority if they are fetched\n    // after a non-preloaded image. (See \"early\" definition in https://web.dev/articles/fetch-priority)\n    //\n    // There are edge cases and exceptions (e.g. priority hints) but this gives us the best approximation\n    // of render blocking resources in the document body.\n    if (req.args.data.renderBlocking === 'in_body_parser_blocking') {\n      const priority = req.args.data.priority;\n      const isScript = req.args.data.resourceType === Protocol.Network.ResourceType.Script;\n      const isBlockingScript = isScript && priority === Protocol.Network.ResourcePriority.High;\n      if (priority !== Protocol.Network.ResourcePriority.VeryHigh && !isBlockingScript) {\n        continue;\n      }\n    }\n\n    const navigation =\n        Helpers.Trace.getNavigationForTraceEvent(req, context.frameId, parsedTrace.Meta.navigationsByFrameId);\n    if (navigation === context.navigation) {\n      renderBlockingRequests.push(req);\n    }\n  }\n\n  const savings = computeSavings(parsedTrace, context, renderBlockingRequests);\n\n  // Sort by request duration for insights.\n  renderBlockingRequests = renderBlockingRequests.sort((a, b) => {\n    return b.dur - a.dur;\n  });\n\n  return finalize({\n    relatedEvents: renderBlockingRequests,\n    renderBlockingRequests,\n    ...savings,\n  });\n}\n\nexport function createOverlayForRequest(request: Types.Events.SyntheticNetworkRequest): Types.Overlays.EntryOutline {\n  return {\n    type: 'ENTRY_OUTLINE',\n    entry: request,\n    outlineReason: 'ERROR',\n  };\n}\n\nexport function createOverlays(model: RenderBlockingInsightModel): Types.Overlays.Overlay[] {\n  return model.renderBlockingRequests.map(request => createOverlayForRequest(request));\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport type {SelectorStatsData} from '../handlers/SelectorStatsHandler.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport {type SelectorTiming, SelectorTimingsKey} from '../types/TraceEvents.js';\nimport * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /**\n   * @description Title of an insight that provides details about slow CSS selectors.\n   */\n  title: 'CSS Selector costs',\n\n  /**\n   * @description Text to describe how to improve the performance of CSS selectors.\n   */\n  description:\n      'If Recalculate Style costs remain high, selector optimization can reduce them. [Optimize the selectors](https://developer.chrome.com/docs/devtools/performance/selector-stats) with both high elapsed time and high slow-path %. Simpler selectors, fewer selectors, a smaller DOM, and a shallower DOM will all reduce matching costs.',\n  /**\n   * @description Column name for count of elements that the engine attempted to match against a style rule\n   */\n  matchAttempts: 'Match attempts',\n  /**\n   * @description Column name for count of elements that matched a style rule\n   */\n  matchCount: 'Match count',\n  /**\n   * @description Column name for elapsed time spent computing a style rule\n   */\n  elapsed: 'Elapsed time',\n  /**\n   * @description Column name for the selectors that took the longest amount of time/effort.\n   */\n  topSelectors: 'Top selectors',\n  /**\n   * @description Column name for a total sum.\n   */\n  total: 'Total',\n  /**\n   * @description Text status indicating that no CSS selector data was found.\n   */\n  enableSelectorData:\n      'No CSS selector data was found. CSS selector stats need to be enabled in the performance panel settings.',\n  /**\n   * @description top CSS selector when ranked by elapsed time in ms\n   */\n  topSelectorElapsedTime: 'Top selector elaspsed time',\n  /**\n   * @description top CSS selector when ranked by match attempt\n   */\n  topSelectorMatchAttempt: 'Top selector match attempt',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/SlowCSSSelector.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst slowCSSSelectorThreshold = 500;  // 500us threshold for slow selectors\n\nexport type SlowCSSSelectorInsightModel = InsightModel<typeof UIStrings, {\n  totalElapsedMs: Types.Timing.Milli,\n  totalMatchAttempts: number,\n  totalMatchCount: number,\n  topSelectorElapsedMs: Types.Events.SelectorTiming | null,\n  topSelectorMatchAttempts: Types.Events.SelectorTiming | null,\n}>;\n\nfunction aggregateSelectorStats(data: SelectorStatsData, context: InsightSetContext): SelectorTiming[] {\n  const selectorMap = new Map<String, SelectorTiming>();\n\n  for (const [event, value] of data.dataForUpdateLayoutEvent) {\n    if (event.args.beginData?.frame !== context.frameId) {\n      continue;\n    }\n    if (!Helpers.Timing.eventIsInBounds(event, context.bounds)) {\n      continue;\n    }\n    for (const timing of value.timings) {\n      const key = timing[SelectorTimingsKey.Selector] + '_' + timing[SelectorTimingsKey.StyleSheetId];\n      const findTiming = selectorMap.get(key);\n      if (findTiming !== undefined) {\n        findTiming[SelectorTimingsKey.Elapsed] += timing[SelectorTimingsKey.Elapsed];\n        findTiming[SelectorTimingsKey.FastRejectCount] += timing[SelectorTimingsKey.FastRejectCount];\n        findTiming[SelectorTimingsKey.MatchAttempts] += timing[SelectorTimingsKey.MatchAttempts];\n        findTiming[SelectorTimingsKey.MatchCount] += timing[SelectorTimingsKey.MatchCount];\n      } else {\n        selectorMap.set(key, {...timing});\n      }\n    }\n  }\n\n  return [...selectorMap.values()];\n}\n\nfunction finalize(partialModel: PartialInsightModel<SlowCSSSelectorInsightModel>): SlowCSSSelectorInsightModel {\n  return {\n    insightKey: InsightKeys.SLOW_CSS_SELECTOR,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.ALL,\n    state: partialModel.topSelectorElapsedMs && partialModel.topSelectorMatchAttempts ? 'informative' : 'pass',\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): SlowCSSSelectorInsightModel {\n  const selectorStatsData = parsedTrace.SelectorStats;\n\n  if (!selectorStatsData) {\n    throw new Error('no selector stats data');\n  }\n\n  const selectorTimings = aggregateSelectorStats(selectorStatsData, context);\n\n  let totalElapsedUs = 0;\n  let totalMatchAttempts = 0;\n  let totalMatchCount = 0;\n\n  selectorTimings.map(timing => {\n    totalElapsedUs += timing[SelectorTimingsKey.Elapsed];\n    totalMatchAttempts += timing[SelectorTimingsKey.MatchAttempts];\n    totalMatchCount += timing[SelectorTimingsKey.MatchCount];\n  });\n\n  let topSelectorElapsedMs: SelectorTiming|null = null;\n  let topSelectorMatchAttempts: SelectorTiming|null = null;\n\n  if (selectorTimings.length > 0) {\n    // find the selector with most elapsed time\n    topSelectorElapsedMs = selectorTimings.reduce((a, b) => {\n      return a[SelectorTimingsKey.Elapsed] > b[SelectorTimingsKey.Elapsed] ? a : b;\n    });\n\n    // check if the slowest selector is slow enough to trigger insights info\n    if (topSelectorElapsedMs && topSelectorElapsedMs[SelectorTimingsKey.Elapsed] < slowCSSSelectorThreshold) {\n      topSelectorElapsedMs = null;\n    }\n\n    // find the selector with most match attempts\n    topSelectorMatchAttempts = selectorTimings.reduce((a, b) => {\n      return a[SelectorTimingsKey.MatchAttempts] > b[SelectorTimingsKey.MatchAttempts] ? a : b;\n    });\n  }\n\n  return finalize({\n    // TODO: should we identify UpdateLayout events as linked to this insight?\n    relatedEvents: [],\n    totalElapsedMs: Types.Timing.Milli(totalElapsedUs / 1000.0),\n    totalMatchAttempts,\n    totalMatchCount,\n    topSelectorElapsedMs,\n    topSelectorMatchAttempts,\n  });\n}\n\nexport function createOverlays(_: SlowCSSSelectorInsightModel): Types.Overlays.Overlay[] {\n  return [];\n}\n", "// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../core/platform/platform.js';\nimport type * as Protocol from '../../../generated/protocol.js';\n\nimport type {ExtensionTrackEntryPayloadDeeplink} from './Extensions.js';\nimport type {Micro, Milli, Seconds, TraceWindowMicro} from './Timing.js';\n\n// Trace Events.\nexport const enum Phase {\n  // Standard\n  BEGIN = 'B',\n  END = 'E',\n  COMPLETE = 'X',\n  INSTANT = 'I',\n  COUNTER = 'C',\n\n  // Async\n  ASYNC_NESTABLE_START = 'b',\n  ASYNC_NESTABLE_INSTANT = 'n',\n  ASYNC_NESTABLE_END = 'e',\n  ASYNC_STEP_INTO = 'T',\n  ASYNC_BEGIN = 'S',\n  ASYNC_END = 'F',\n  ASYNC_STEP_PAST = 'p',\n\n  // Flow\n  FLOW_START = 's',\n  FLOW_STEP = 't',\n  FLOW_END = 'f',\n\n  // Sample\n  SAMPLE = 'P',\n\n  // Object\n  OBJECT_CREATED = 'N',\n  OBJECT_SNAPSHOT = 'O',\n  OBJECT_DESTROYED = 'D',\n\n  // Metadata\n  METADATA = 'M',\n\n  // Memory Dump\n  MEMORY_DUMP_GLOBAL = 'V',\n  MEMORY_DUMP_PROCESS = 'v',\n\n  // Mark\n  MARK = 'R',\n\n  // Clock sync\n  CLOCK_SYNC = 'c',\n}\n\nexport function isNestableAsyncPhase(phase: Phase): boolean {\n  return phase === Phase.ASYNC_NESTABLE_START || phase === Phase.ASYNC_NESTABLE_END ||\n      phase === Phase.ASYNC_NESTABLE_INSTANT;\n}\n\nexport function isPhaseAsync(phase: Phase): boolean {\n  return isNestableAsyncPhase(phase) || phase === Phase.ASYNC_BEGIN || phase === Phase.ASYNC_STEP_INTO ||\n      phase === Phase.ASYNC_END || phase === Phase.ASYNC_STEP_PAST;\n}\n\nexport function isFlowPhase(phase: Phase): boolean {\n  return phase === Phase.FLOW_START || phase === Phase.FLOW_STEP || phase === Phase.FLOW_END;\n}\n\nexport const enum Scope {\n  THREAD = 't',\n  PROCESS = 'p',\n  GLOBAL = 'g',\n}\n\nexport interface Event {\n  args?: Args;\n  cat: string;\n  name: string;\n  ph: Phase;\n  pid: ProcessID;\n  tid: ThreadID;\n  tts?: Micro;\n  ts: Micro;\n  tdur?: Micro;\n  dur?: Micro;\n}\n\nexport interface Args {\n  data?: ArgsData;\n  sampleTraceId?: number;\n  stackTrace?: CallFrame[];\n}\n\nexport interface ArgsData {\n  stackTrace?: CallFrame[];\n  sampleTraceId?: number;\n  url?: string;\n  navigationId?: string;\n  frame?: string;\n}\n\nexport interface CallFrame {\n  codeType?: string;\n  functionName: string;\n  // Trace events are inconsistent here sadly :(\n  scriptId: number|string;\n  columnNumber: number;\n  lineNumber: number;\n  url: string;\n}\n\nexport function objectIsCallFrame(object: object): object is CallFrame {\n  return ('functionName' in object && typeof object.functionName === 'string') &&\n      ('scriptId' in object && (typeof object.scriptId === 'string' || typeof object.scriptId === 'number')) &&\n      ('columnNumber' in object && typeof object.columnNumber === 'number') &&\n      ('lineNumber' in object && typeof object.lineNumber === 'number') &&\n      ('url' in object && typeof object.url === 'string');\n}\n\nexport interface TraceFrame {\n  frame: string;\n  name: string;\n  processId: ProcessID;\n  url: string;\n  parent?: string;\n  // Added to Chromium in April 2024:\n  // crrev.com/c/5424783\n  isOutermostMainFrame?: boolean;\n  // Added to Chromium in June 2024:\n  // crrev.com/c/5595033\n  isInPrimaryMainFrame?: boolean;\n}\n\n// Sample events.\n\nexport interface Sample extends Event {\n  ph: Phase.SAMPLE;\n}\n\n/**\n * A fake trace event created to support CDP.Profiler.Profiles in the\n * trace engine.\n *\n * Do not extend the SyntheticBased interface because this one doesn't have a raw trace event but a raw cpu profile.\n * Also we won't manage this event through SyntheticEventsManager.\n */\nexport interface SyntheticCpuProfile extends Complete {\n  name: Name.CPU_PROFILE;\n  id: ProfileID;\n  args: Args&{\n    data: ArgsData & {\n      cpuProfile: Protocol.Profiler.Profile,\n    },\n  };\n}\n\nexport interface Profile extends Sample {\n  name: Name.PROFILE;\n  id: ProfileID;\n  args: Args&{\n    data: ArgsData & {\n      startTime: Micro,\n    },\n  };\n}\n\nexport interface ProfileChunk extends Sample {\n  name: Name.PROFILE_CHUNK;\n  id: ProfileID;\n  args: Args&{\n    // `data` is only missing in \"fake\" traces\n    data?: ArgsData & {\n      cpuProfile?: PartialProfile,\n      timeDeltas?: Micro[],\n      lines?: Micro[],\n    },\n  };\n}\n\nexport interface PartialProfile {\n  nodes?: PartialNode[];\n  samples: CallFrameID[];\n  /**\n   * Contains trace ids assigned to samples, if any. Trace ids are\n   * keyed by the sample index in the profile (the keys of the object\n   * are strings containing the numeric index).\n   */\n  /* eslint-disable @typescript-eslint/naming-convention */\n  trace_ids?: Record<string, number>;\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface PartialNode {\n  callFrame: CallFrame;\n  id: CallFrameID;\n  parent?: CallFrameID;\n}\n\n// Complete events.\n\nexport interface Complete extends Event {\n  ph: Phase.COMPLETE;\n  dur: Micro;\n}\n\nexport interface RunTask extends Complete {\n  name: Name.RUN_TASK;\n}\nexport function isRunTask(event: Event): event is RunTask {\n  return event.name === Name.RUN_TASK;\n}\n\nexport interface FireIdleCallback extends Complete {\n  name: Name.FIRE_IDLE_CALLBACK;\n  args: Args&{\n    data: ArgsData & {\n      allottedMilliseconds: Milli,\n      frame: string,\n      id: number,\n      timedOut: boolean,\n    },\n  };\n}\n\nexport interface SchedulePostMessage extends Instant {\n  name: Name.SCHEDULE_POST_MESSAGE;\n  args: Args&{\n    data: ArgsData & {\n      traceId: string,\n    },\n  };\n}\n\nexport interface HandlePostMessage extends Complete {\n  name: Name.HANDLE_POST_MESSAGE;\n  args: Args&{\n    data: ArgsData & {\n      traceId: string,\n    },\n  };\n}\n\nexport interface Dispatch extends Complete {\n  name: 'EventDispatch';\n  args: Args&{\n    data: ArgsData & {\n      type: string,\n    },\n  };\n}\n\nexport interface ParseHTML extends Complete {\n  name: 'ParseHTML';\n  args: Args&{\n    beginData: {\n      frame: string,\n      startLine: number,\n      url: string,\n      sampleTraceId?: number,\n    },\n    endData?: {\n      endLine: number,\n    },\n  };\n}\n\nexport interface Begin extends Event {\n  ph: Phase.BEGIN;\n}\n\nexport interface End extends Event {\n  ph: Phase.END;\n}\n\n/**\n * This denotes a complete event created from a pair of begin and end\n * events. For practicality, instead of always having to look for the\n * end event corresponding to a begin event, we create a synthetic\n * complete event that comprises the data of both from the beginning in\n * the RendererHandler.\n */\nexport type SyntheticComplete = Complete;\n\n// TODO(paulirish): Migrate to the new (Sept 2024) EventTiming trace events.\n// See https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/timing/window_performance.cc;l=900-901;drc=b503c262e425eae59ced4a80d59d176ed07152c7\nexport type EventTimingBeginOrEnd = EventTimingBegin|EventTimingEnd;\n\nexport interface EventTimingBegin extends Event {\n  ph: Phase.ASYNC_NESTABLE_START;\n  name: Name.EVENT_TIMING;\n  id: string;\n  args: Args&{\n    // https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/timing/performance_event_timing.cc;l=297;drc=4f00803ca25c0d0480ed14844d6406933c21e80e\n    data: ArgsData & {\n      cancelable: boolean,\n      duration: Milli,\n      type: string,\n      interactionId: number,\n      interactionOffset: number,\n      nodeId: Protocol.DOM.BackendNodeId,\n      frame?: string,  // From May 2022 onwards, this is where frame is located. https://chromium-review.googlesource.com/c/chromium/src/+/3632661\n      processingEnd?: Milli,\n      processingStart?: Milli,\n      timeStamp?: Milli,\n      enqueuedToMainThreadTime?: Milli,\n      commitFinishTime?: Milli,\n    },\n    frame?: string,  // Prior to May 2022, `frame` was here in args.\n  };\n}\nexport interface EventTimingEnd extends Event {\n  ph: Phase.ASYNC_NESTABLE_END;\n  name: Name.EVENT_TIMING;\n  id: string;\n  args: Args;\n}\n\nexport interface GPUTask extends Complete {\n  name: 'GPUTask';\n  args: Args&{\n    data?: ArgsData & {\n      /* eslint-disable @typescript-eslint/naming-convention */\n      renderer_pid: ProcessID,\n      used_bytes: number,\n      /* eslint-enable @typescript-eslint/naming-convention */\n    },\n  };\n}\n\nexport interface SyntheticNetworkRedirect {\n  url: string;\n  priority: string;\n  requestMethod?: string;\n  ts: Micro;\n  dur: Micro;\n}\n\n// ProcessedArgsData is used to store the processed data of a network\n// request. Which is used to distinguish from the date we extract from the\n// trace event directly.\ninterface SyntheticArgsData {\n  dnsLookup: Micro;\n  download: Micro;\n  downloadStart: Micro;\n  finishTime: Micro;\n  initialConnection: Micro;\n  isDiskCached: boolean;\n  isHttps: boolean;\n  isMemoryCached: boolean;\n  isPushedResource: boolean;\n  networkDuration: Micro;\n  processingDuration: Micro;\n  proxyNegotiation: Micro;\n  queueing: Micro;\n  redirectionDuration: Micro;\n  requestSent: Micro;\n  sendStartTime: Micro;\n  ssl: Micro;\n  stalled: Micro;\n  totalTime: Micro;\n  /** Server response time (receiveHeadersEnd - sendEnd) */\n  waiting: Micro;\n}\n\nexport interface SyntheticNetworkRequest extends Complete, SyntheticBased<Phase.COMPLETE> {\n  rawSourceEvent: ResourceSendRequest;\n  args: Args&{\n    data: ArgsData & {\n      syntheticData: SyntheticArgsData,\n      // All fields below are from TraceEventsForNetworkRequest,\n      // Required fields\n      /** Size of the resource after decompression (if applicable). */\n      decodedBodyLength: number,\n      /**\n       * Size of the resource over the network. Includes size of headers and\n       * anything else in the HTTP response packet.\n       */\n      encodedDataLength: number,\n      frame: string,\n      fromServiceWorker: boolean|undefined,\n      isLinkPreload: boolean,\n      /** Empty string if no response. */\n      mimeType: string,\n      priority: Protocol.Network.ResourcePriority,\n      initialPriority: Protocol.Network.ResourcePriority,\n      /**\n       * This is the protocol used to resolve the request.\n       *\n       * Note, this is not the same as URL.protocol.\n       *\n       * Example values (not exhaustive): http/0.9, http/1.0, http/1.1, http, h2, h3-Q050, data, blob\n       */\n      protocol: string,\n      redirects: SyntheticNetworkRedirect[],\n      renderBlocking: RenderBlocking,\n      requestId: string,\n      requestingFrameUrl: string,\n      /** 0 if no response. */\n      statusCode: number,\n      resourceType: Protocol.Network.ResourceType,\n      responseHeaders: Array<{name: string, value: string}>|null,\n      fetchPriorityHint: FetchPriorityHint,\n      url: string,\n      /** True only if got a 'resourceFinish' event indicating a failure. */\n      failed: boolean,\n      /** True only if got a 'resourceFinish' event. Note even failed requests with no response may be \"finished\". */\n      finished: boolean,\n      hasResponse: boolean,\n      /** If undefined, trace was either too old or had no response. */\n      connectionId: number|undefined,\n      /** If undefined, trace was either too old or had no response. */\n      connectionReused: boolean|undefined,\n      // Optional fields\n      initiator?: Initiator,\n      requestMethod?: string,\n      timing?: ResourceReceiveResponseTimingData,\n    },\n  };\n  cat: 'loading';\n  name: Name.SYNTHETIC_NETWORK_REQUEST;\n  ph: Phase.COMPLETE;\n  dur: Micro;\n  tdur: Micro;\n  ts: Micro;\n  tts: Micro;\n  pid: ProcessID;\n  tid: ThreadID;\n}\n\nexport interface SyntheticWebSocketConnection extends Complete, SyntheticBased<Phase.COMPLETE> {\n  rawSourceEvent: Event;\n  args: Args&{\n    data: ArgsData & {\n      identifier: number,\n      priority: Protocol.Network.ResourcePriority,\n      url: string,\n    },\n  };\n  cat: string;\n  name: 'SyntheticWebSocketConnection';\n  ph: Phase.COMPLETE;\n  dur: Micro;\n  ts: Micro;\n  pid: ProcessID;\n  tid: ThreadID;\n  s: Scope;\n}\n\nexport const enum AuctionWorkletType {\n  BIDDER = 'bidder',\n  SELLER = 'seller',\n  // Not expected to be used, but here as a fallback in case new types get\n  // added and we have yet to update the trace engine.\n  UNKNOWN = 'unknown',\n}\n\nexport interface SyntheticAuctionWorklet extends Instant, SyntheticBased<Phase.INSTANT> {\n  rawSourceEvent: Event;\n  name: 'SyntheticAuctionWorklet';\n  // The PID that the AuctionWorklet is running in.\n  pid: ProcessID;\n  // URL\n  host: string;\n  // An ID used to pair up runningInProcessEvents with doneWithProcessEvents\n  target: string;\n  type: AuctionWorkletType;\n  args: Args&{\n    data: ArgsData & {\n      // There are two threads for a worklet that we care about, so we gather\n      // the thread_name events so we can know the PID and TID for them (and\n      // hence display the right events in the track for each thread)\n      utilityThread: ThreadName,\n      v8HelperThread: ThreadName,\n    } &\n        (\n              // This type looks odd, but this is because these events could either have:\n              // 1. Just the DoneWithProcess event\n              // 2. Just the RunningInProcess event\n              // 3. Both events\n              // But crucially it cannot have both events missing, hence listing all the\n              // allowed cases.\n              // Clang is disabled as the combination of nested types and optional\n              // properties cause it to weirdly indent some of the properties and make it\n              // very unreadable.\n              // clang-format off\n              {\n                runningInProcessEvent: AuctionWorkletRunningInProcess,\n                doneWithProcessEvent: AuctionWorkletDoneWithProcess,\n              } |\n              {\n                doneWithProcessEvent: AuctionWorkletDoneWithProcess,\n                runningInProcessEvent?: AuctionWorkletRunningInProcess,\n              } |\n              {\n                runningInProcessEvent: AuctionWorkletRunningInProcess,\n                doneWithProcessEvent?: AuctionWorkletDoneWithProcess,\n\n              }),\n    // clang-format on\n  };\n}\nexport interface AuctionWorkletRunningInProcess extends Event {\n  name: 'AuctionWorkletRunningInProcess';\n  ph: Phase.INSTANT;\n  args: Args&{\n    data: ArgsData & {\n      host: string,\n      pid: ProcessID,\n      target: string,\n      type: AuctionWorkletType,\n    },\n  };\n}\nexport interface AuctionWorkletDoneWithProcess extends Event {\n  name: 'AuctionWorkletDoneWithProcess';\n  ph: Phase.INSTANT;\n  args: Args&{\n    data: ArgsData & {\n      host: string,\n      pid: ProcessID,\n      target: string,\n      type: AuctionWorkletType,\n    },\n  };\n}\n\nexport function isAuctionWorkletRunningInProcess(event: Event): event is AuctionWorkletRunningInProcess {\n  return event.name === 'AuctionWorkletRunningInProcess';\n}\nexport function isAuctionWorkletDoneWithProcess(event: Event): event is AuctionWorkletDoneWithProcess {\n  return event.name === 'AuctionWorkletDoneWithProcess';\n}\n\n// Snapshot events.\n\n/**\n * In January 2025 when crrev.com/c/6197645 landed, it changed the format of screenshot events.\n * That is why we two screenshot types:\n * `LegacyScreenshot` and `LegacySyntheticScreenshot`: BEFORE the above CL.\n * `Screenshot`: AFTER the above CL.\n * Important things to note:\n * 1. Both the \"old\" and \"new\" events share the name \"Screenshot\" but their format is very different.\n * 2. The old events had both a raw event (LegacyScreenshot) and a synthetic\n *    event (LegacySyntheticScreenshot). The new events only have a raw event, as\n *    we do not need the additional complexity of a synthetic event.\n * 3. Because we like to support \"old\" traces, DevTools will maintain its\n *    support for both screenshot events for the foreseeable future. If you are\n *    consuming screenshot events from the ScreenshotHandler, you must make sure\n *    to have your code deal with the two different formats.\n */\n// These are nullable because in January 2025 a CL in Chromium\nexport interface LegacyScreenshot extends Event {\n  /**\n   * @deprecated This value is incorrect. Use ScreenshotHandler.getPresentationTimestamp()\n   */\n  ts: Micro;\n  /** The id is the frame sequence number in hex */\n  id: string;\n  args: Args&{\n    snapshot: string,\n  };\n  name: Name.SCREENSHOT;\n  cat: 'disabled-by-default-devtools.screenshot';\n  ph: Phase.OBJECT_SNAPSHOT;\n}\nexport function isLegacyScreenshot(event: Event): event is LegacyScreenshot {\n  return event.name === Name.SCREENSHOT && 'id' in event;\n}\nexport function isLegacySyntheticScreenshot(event: Event): event is LegacySyntheticScreenshot {\n  return event.name === Name.SCREENSHOT && 'dataUri' in (event.args ?? {});\n}\n\nexport function isScreenshot(event: Event): event is Screenshot {\n  return event.name === Name.SCREENSHOT && 'source_id' in (event.args ?? {});\n}\n\nexport interface LegacySyntheticScreenshot extends Event, SyntheticBased {\n  rawSourceEvent: LegacyScreenshot;\n  /** This is the correct presentation timestamp. */\n  ts: Micro;\n  args: Args&{\n    dataUri: string,\n  };\n  name: Name.SCREENSHOT;\n  cat: 'disabled-by-default-devtools.screenshot';\n  ph: Phase.OBJECT_SNAPSHOT;\n}\n\nexport interface Screenshot extends Instant {\n  args: Args&{\n    snapshot: string,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    source_id: number,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    frame_sequence: number,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    expected_display_time: number,\n  };\n}\n\n// Animation events.\n\nexport interface Animation extends Event {\n  args: Args&{\n    data: ArgsData & {\n      nodeName?: string,\n      nodeId?: Protocol.DOM.BackendNodeId,\n      displayName?: string,\n      id?: string,\n      name?: string,\n      state?: string,\n      compositeFailed?: number,\n      unsupportedProperties?: string[],\n    },\n  };\n  name: 'Animation';\n  id2?: {\n    local?: string,\n  };\n  ph: Phase.ASYNC_NESTABLE_START|Phase.ASYNC_NESTABLE_END|Phase.ASYNC_NESTABLE_INSTANT;\n}\n\n// Metadata events.\n\nexport interface Metadata extends Event {\n  ph: Phase.METADATA;\n  args: Args&{\n    name?: string,\n    uptime?: string,\n  };\n}\n\nexport interface ThreadName extends Metadata {\n  name: Name.THREAD_NAME;\n  args: Args&{\n    name?: string,\n  };\n}\n\nexport interface ProcessName extends Metadata {\n  name: 'process_name';\n}\n\n// Mark events.\n\nexport interface Mark extends Event {\n  ph: Phase.MARK;\n}\n\nexport interface NavigationStart extends Mark {\n  name: 'navigationStart';\n  args: Args&{\n    frame: string,\n    data?: ArgsData&{\n      /** Must be non-empty to be valid. An empty documentLoaderURL means the event can be ignored. */\n      documentLoaderURL: string,\n      isLoadingMainFrame: boolean,\n      navigationId: string,\n      /**\n       * `isOutermostMainFrame` was introduced in crrev.com/c/3625434 and exists because of Fenced Frames\n       * [github.com/WICG/fenced-frame/tree/master/explainer]. Fenced frames introduce a situation where\n       * `isLoadingMainFrame` could be true for a navigation, but that navigation be within an embedded \"main frame\", and\n       * therefore it wouldn't be on the top level main frame. In situations where we need to distinguish that, we can\n       * rely on `isOutermostMainFrame`, which will only be true for navigations on the top level main frame.\n       * This flag is optional as it was introduced in May 2022; so users reasonably may import traces from before that\n       * date that do not have this field present.\n       */\n      isOutermostMainFrame?: boolean,\n      /**\n       * @deprecated use documentLoaderURL for navigation events URLs\n       */\n      url?: string,\n    },\n  };\n}\n\nexport interface FirstContentfulPaint extends Mark {\n  name: Name.MARK_FCP;\n  args: Args&{\n    frame: string,\n    data?: ArgsData&{\n      navigationId: string,\n    },\n  };\n}\n\nexport interface FirstPaint extends Mark {\n  name: 'firstPaint';\n  args: Args&{\n    frame: string,\n    data?: ArgsData&{\n      navigationId: string,\n    },\n  };\n}\n\nexport type PageLoadEvent = FirstContentfulPaint|MarkDOMContent|InteractiveTime|LargestContentfulPaintCandidate|\n    LayoutShift|FirstPaint|MarkLoad|NavigationStart;\n\nconst markerTypeGuards = [\n  isMarkDOMContent,\n  isMarkLoad,\n  isFirstPaint,\n  isFirstContentfulPaint,\n  isLargestContentfulPaintCandidate,\n  isNavigationStart,\n];\n\nexport const MarkerName =\n    ['MarkDOMContent', 'MarkLoad', 'firstPaint', 'firstContentfulPaint', 'largestContentfulPaint::Candidate'] as const;\n\nexport interface MarkerEvent extends Event {\n  name: typeof MarkerName[number];\n}\n\nexport function isMarkerEvent(event: Event): event is MarkerEvent {\n  if (event.ph === Phase.INSTANT || event.ph === Phase.MARK) {\n    return markerTypeGuards.some(fn => fn(event));\n  }\n  return false;\n}\n\nconst pageLoadEventTypeGuards = [\n  ...markerTypeGuards,\n  isInteractiveTime,\n];\n\nexport function eventIsPageLoadEvent(event: Event): event is PageLoadEvent {\n  if (event.ph === Phase.INSTANT || event.ph === Phase.MARK) {\n    return pageLoadEventTypeGuards.some(fn => fn(event));\n  }\n  return false;\n}\n\nexport interface LargestContentfulPaintCandidate extends Mark {\n  name: Name.MARK_LCP_CANDIDATE;\n  args: Args&{\n    frame: string,\n    data?: ArgsData&{\n      candidateIndex: number,\n      isOutermostMainFrame: boolean,\n      isMainFrame: boolean,\n      navigationId: string,\n      nodeId: Protocol.DOM.BackendNodeId,\n      loadingAttr: string,\n      type?: string,\n      // Landed in Chromium M140: crrev.com/c/6702010\n      nodeName?: string,\n    },\n  };\n}\nexport interface LargestImagePaintCandidate extends Mark {\n  name: 'LargestImagePaint::Candidate';\n  args: Args&{\n    frame: string,\n    data?: ArgsData&{\n      candidateIndex: number,\n      imageUrl: string,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      DOMNodeId: Protocol.DOM.BackendNodeId,\n    },\n  };\n}\nexport interface LargestTextPaintCandidate extends Mark {\n  name: 'LargestTextPaint::Candidate';\n  args: Args&{\n    frame: string,\n    data?: ArgsData&{\n      candidateIndex: number,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      DOMNodeId: Protocol.DOM.BackendNodeId,\n      // Added in crbug.com/413284569\n      nodeName?: string,\n    },\n  };\n}\n\nexport interface InteractiveTime extends Mark {\n  name: 'InteractiveTime';\n  args: Args&{\n    args: {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      total_blocking_time_ms: number,\n    },\n    frame: string,\n  };\n}\n\n// Instant events.\n\nexport interface Instant extends Event {\n  ph: Phase.INSTANT;\n  s: Scope;\n}\n\nexport interface DOMStats extends Instant {\n  name: 'DOMStats';\n  args: Args&{\n    data: ArgsData & {\n      frame: string,\n      totalElements: number,\n      maxChildren?: {\n        nodeId: Protocol.DOM.BackendNodeId,\n        nodeName: string,\n        numChildren: number,\n      },\n      maxDepth?: {\n        nodeId: Protocol.DOM.BackendNodeId,\n        nodeName: string,\n        depth: number,\n      },\n    },\n  };\n}\n\nexport interface UpdateCounters extends Instant {\n  name: 'UpdateCounters';\n  args: Args&{\n    data: ArgsData & {\n      documents: number,\n      jsEventListeners: number,\n      jsHeapSizeUsed: number,\n      nodes: number,\n      gpuMemoryLimitKB?: number,\n    },\n  };\n}\n\nexport type RendererEvent = Instant|Complete;\n\nexport interface TracingStartedInBrowser extends Instant {\n  name: Name.TRACING_STARTED_IN_BROWSER;\n  args: Args&{\n    data?: ArgsData & {\n      frameTreeNodeId: number,\n      // Frames can only missing in \"fake\" traces\n      persistentIds: boolean,\n      frames?: TraceFrame[],\n    },\n  };\n}\n\nexport interface TracingSessionIdForWorker extends Instant {\n  name: 'TracingSessionIdForWorker';\n  args: Args&{\n    data?: ArgsData & {\n      url: string,\n      workerId: WorkerId,\n      workerThreadId: ThreadID,\n      frame: string,\n    },\n  };\n}\nexport function isTracingSessionIdForWorker(event: Event): event is TracingSessionIdForWorker {\n  return event.name === 'TracingSessionIdForWorker';\n}\n\nexport interface FrameCommittedInBrowser extends Instant {\n  name: 'FrameCommittedInBrowser';\n  args: Args&{\n    data?: ArgsData & TraceFrame,\n  };\n}\n\nexport interface MainFrameViewport extends Instant {\n  name: 'PaintTimingVisualizer::Viewport';\n  args: {\n    data: ArgsData&{\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      viewport_rect: number[],\n      /** Device Pixel Ratio. Added in m128 */\n      dpr: number,\n    },\n  };\n}\n\nexport interface CommitLoad extends Instant {\n  name: 'CommitLoad';\n  args: Args&{\n    data?: ArgsData & {\n      frame: string,\n      isMainFrame: boolean,\n      name: string,\n      nodeId: number,\n      page: string,\n      parent: string,\n      url: string,\n    },\n  };\n}\n\nexport interface MarkDOMContent extends Instant {\n  name: 'MarkDOMContent';\n  args: Args&{\n    data?: ArgsData & {\n      frame: string,\n      isMainFrame: boolean,\n      page: string,\n      isOutermostMainFrame?: boolean,\n    },\n  };\n}\n\nexport interface MarkLoad extends Instant {\n  name: 'MarkLoad';\n  args: Args&{\n    data?: ArgsData & {\n      frame: string,\n      isMainFrame: boolean,\n      page: string,\n      isOutermostMainFrame?: boolean,\n    },\n  };\n}\n\nexport interface Async extends Event {\n  ph: Phase.ASYNC_NESTABLE_START|Phase.ASYNC_NESTABLE_INSTANT|Phase.ASYNC_NESTABLE_END|Phase.ASYNC_STEP_INTO|\n      Phase.ASYNC_BEGIN|Phase.ASYNC_END|Phase.ASYNC_STEP_PAST;\n}\n\nexport type TraceRect = [number, number, number, number];\nexport interface TraceImpactedNode {\n  // These keys come from the trace data, so we have to use underscores.\n  /* eslint-disable @typescript-eslint/naming-convention */\n  new_rect: TraceRect;\n  node_id: Protocol.DOM.BackendNodeId;\n  old_rect: TraceRect;\n  debug_name?: string;\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\ntype LayoutShiftData = ArgsData&{\n  // These keys come from the trace data, so we have to use underscores.\n  /* eslint-disable @typescript-eslint/naming-convention */\n  cumulative_score: number,\n  frame_max_distance: number,\n  had_recent_input: boolean,\n  impacted_nodes: TraceImpactedNode[] | undefined,\n  is_main_frame: boolean,\n  overall_max_distance: number,\n  region_rects: TraceRect[],\n  /** @deprecated This value will incorrectly overreport for shifts within an iframe. */\n  score: number,\n  /** This is the preferred \"score\", used for CLS. If `is_main_frame` is true, `score` and `weighted_score_delta` will be equal. But if the shift is from an iframe, `weighted_score_delta` will be appropriately reduced to account for the viewport size of that iframe. https://wicg.github.io/layout-instability/#subframe-weighting-factor and b/275509162 */\n  weighted_score_delta: number,\n  navigationId?: string,\n  /* eslint-enable @typescript-eslint/naming-convention */\n};\nexport interface LayoutShift extends Instant {\n  name: Name.LAYOUT_SHIFT;\n  normalized?: boolean;\n  args: Args&{\n    frame: string,\n    data?: LayoutShiftData,\n  };\n}\n\ninterface LayoutShiftSessionWindowData {\n  // The sum of the weighted score of all the shifts\n  // that belong to a session window.\n  cumulativeWindowScore: number;\n  // A consecutive generated in the frontend to\n  // to identify a session window.\n  id: number;\n}\nexport interface LayoutShiftParsedData {\n  /** screenshot taken before and after this shift. Before *should* always exist, but after might not at the end of a trace. */\n  screenshots: {before: LegacySyntheticScreenshot|Screenshot|null, after: LegacySyntheticScreenshot|Screenshot|null};\n  timeFromNavigation?: Micro;\n  // The sum of the weighted scores of the shifts that\n  // belong to a session window up until this shift\n  // (inclusive).\n  cumulativeWeightedScoreInWindow: number;\n  sessionWindowData: LayoutShiftSessionWindowData;\n}\n\nexport interface SyntheticLayoutShift extends Omit<LayoutShift, 'name'>, SyntheticBased<Phase.INSTANT> {\n  name: Name.SYNTHETIC_LAYOUT_SHIFT;\n  rawSourceEvent: LayoutShift;\n  args: Args&{\n    frame: string,\n    data?: LayoutShiftData&{\n      rawEvent: LayoutShift,\n    },\n  };\n  parsedData: LayoutShiftParsedData;\n}\n\nexport const NO_NAVIGATION = 'NO_NAVIGATION';\n\n/**\n * This maybe be a navigation id string from Chromium, or `NO_NAVIGATION`, which represents the\n * portion of the trace for which we don't have any navigation event for (as it happeneded prior\n * to the trace start).\n */\nexport type NavigationId = string|typeof NO_NAVIGATION;\n\n/**\n * This is a synthetic Layout shift cluster. Not based on a raw event as there's no concept\n * of this as a trace event.\n */\nexport interface SyntheticLayoutShiftCluster {\n  name: 'SyntheticLayoutShiftCluster';\n  clusterWindow: TraceWindowMicro;\n  clusterCumulativeScore: number;\n  events: SyntheticLayoutShift[];\n  // For convenience we split apart the cluster into good, NI, and bad windows.\n  // Since a cluster may remain in the good window, we mark NI and bad as being\n  // possibly null.\n  scoreWindows: {\n    good: TraceWindowMicro,\n    needsImprovement?: TraceWindowMicro,\n    bad?: TraceWindowMicro,\n  };\n  // The last navigation that happened before this cluster.\n  navigationId?: NavigationId;\n  worstShiftEvent?: Event;\n  // This is the start of the cluster: the start of the first layout shift of the cluster.\n  ts: Micro;\n  // The duration of the cluster. This should include up until the end of the last\n  // layout shift in this cluster.\n  dur: Micro;\n  cat: '';\n  ph: Phase.COMPLETE;\n  pid: ProcessID;\n  tid: ThreadID;\n}\n\nexport type FetchPriorityHint = 'low'|'high'|'auto';\nexport type RenderBlocking =\n    'blocking'|'non_blocking'|'in_body_parser_blocking'|'potentially_blocking'|'dynamically_injected_non_blocking';\n\nexport interface Initiator {\n  type: Protocol.Network.InitiatorType;\n  fetchType: string;\n  columnNumber?: number;\n  lineNumber?: number;\n  url?: string;\n}\n\nexport interface ResourceSendRequest extends Instant {\n  name: 'ResourceSendRequest';\n  args: Args&{\n    data: ArgsData & {\n      frame: string,\n      requestId: string,\n      url: string,\n      priority: Protocol.Network.ResourcePriority,\n      /** Added Feb 2024. https://crrev.com/c/5277583 */\n      resourceType?: Protocol.Network.ResourceType,\n      /** Added Feb 2024. https://crrev.com/c/5297615 */\n      fetchPriorityHint?: FetchPriorityHint,\n      // TODO(crbug.com/1457985): change requestMethod to enum when confirm in the backend code.\n      requestMethod?: string,\n      renderBlocking?: RenderBlocking,\n      initiator?: Initiator,\n      isLinkPreload?: boolean,\n    },\n  };\n}\n\nexport interface ResourceChangePriority extends Instant {\n  name: 'ResourceChangePriority';\n  args: Args&{\n    data: ArgsData & {\n      requestId: string,\n      priority: Protocol.Network.ResourcePriority,\n    },\n  };\n}\n\n/** Only sent for navigations. https://source.chromium.org/chromium/chromium/src/+/main:content/browser/devtools/devtools_instrumentation.cc;l=1612-1647;drc=ec7daf93d0479b758610c75f4e146fd4d2d6ed2b */\nexport interface ResourceWillSendRequest extends Instant {\n  name: Name.RESOURCE_WILL_SEND_REQUEST;\n  args: Args&{\n    data: ArgsData & {\n      requestId: string,\n    },\n  };\n}\n\nexport interface ResourceFinish extends Instant {\n  name: 'ResourceFinish';\n  args: Args&{\n    data: ArgsData & {\n      decodedBodyLength: number,\n      didFail: boolean,\n      encodedDataLength: number,\n      finishTime: Seconds,\n      requestId: string,\n    },\n  };\n}\n\nexport interface ResourceReceivedData extends Instant {\n  name: 'ResourceReceivedData';\n  args: Args&{\n    data: ArgsData & {\n      encodedDataLength: number,\n      frame: string,\n      requestId: string,\n    },\n  };\n}\n\n/** See https://mdn.github.io/shared-assets/images/diagrams/api/performance/timestamp-diagram.svg  */\ninterface ResourceReceiveResponseTimingData {\n  connectEnd: Milli;\n  connectStart: Milli;\n  dnsEnd: Milli;\n  dnsStart: Milli;\n  proxyEnd: Milli;\n  proxyStart: Milli;\n  pushEnd: Milli;\n  pushStart: Milli;\n  receiveHeadersEnd: Milli;\n  receiveHeadersStart: Milli;\n  /** When the network service is about to handle a request, ie. just before going to the HTTP cache or going to the network for DNS/connection setup. */\n  requestTime: Seconds;\n  sendEnd: Milli;\n  sendStart: Milli;\n  sslEnd: Milli;\n  sslStart: Milli;\n  workerReady: Milli;\n  workerStart: Milli;\n}\n\nexport interface ResourceReceiveResponse extends Instant {\n  name: 'ResourceReceiveResponse';\n  args: Args&{\n    data: ArgsData & {\n      /**\n       * This is the protocol used to resolve the request.\n       *\n       * Note, this is not the same as URL.protocol.\n       *\n       * Example values (not exhaustive): http/0.9, http/1.0, http/1.1, http, h2, h3-Q050, data, blob\n       */\n      protocol: string,\n      encodedDataLength: number,\n      frame: string,\n      fromCache: boolean,\n      fromServiceWorker: boolean,\n      mimeType: string,\n      requestId: string,\n      responseTime: Milli,\n      statusCode: number,\n      // Some cached events don't have this field\n      connectionId: number,\n      connectionReused: boolean,\n      timing?: ResourceReceiveResponseTimingData,\n      headers?: Array<{name: string, value: string}>,\n    },\n  };\n}\n\nexport interface ResourceMarkAsCached extends Instant {\n  name: 'ResourceMarkAsCached';\n  args: Args&{\n    data: ArgsData & {\n      requestId: string,\n    },\n  };\n}\n\nexport const enum LayoutInvalidationReason {\n  SIZE_CHANGED = 'Size changed',\n  ATTRIBUTE = 'Attribute',\n  ADDED_TO_LAYOUT = 'Added to layout',\n  SCROLLBAR_CHANGED = 'Scrollbar changed',\n  REMOVED_FROM_LAYOUT = 'Removed from layout',\n  STYLE_CHANGED = 'Style changed',\n  FONTS_CHANGED = 'Fonts changed',\n  UNKNOWN = 'Unknown',\n}\n\nexport interface LayoutInvalidationTracking extends Instant {\n  name: Name.LAYOUT_INVALIDATION_TRACKING;\n  args: Args&{\n    data: ArgsData & {\n      frame: string,\n      nodeId: Protocol.DOM.BackendNodeId,\n      reason: LayoutInvalidationReason,\n      nodeName?: string,\n    },\n  };\n}\n\nexport interface ScheduleStyleInvalidationTracking extends Instant {\n  name: Name.SCHEDULE_STYLE_INVALIDATION_TRACKING;\n  args: Args&{\n    data: ArgsData & {\n      frame: string,\n      nodeId: Protocol.DOM.BackendNodeId,\n      invalidationSet?: string,\n      invalidatedSelectorId?: string,\n      reason?: LayoutInvalidationReason,\n      changedClass?: string,\n      changedAttribute?: string,\n      changedId?: string,\n      nodeName?: string,\n      stackTrace?: CallFrame[],\n    },\n  };\n}\nexport function isScheduleStyleInvalidationTracking(event: Event): event is ScheduleStyleInvalidationTracking {\n  return event.name === Name.SCHEDULE_STYLE_INVALIDATION_TRACKING;\n}\n\nexport const enum StyleRecalcInvalidationReason {\n  ANIMATION = 'Animation',\n  RELATED_STYLE_RULE = 'Related style rule',\n}\n\nexport interface StyleRecalcInvalidationTracking extends Instant {\n  name: Name.STYLE_RECALC_INVALIDATION_TRACKING;\n  args: Args&{\n    data: ArgsData & {\n      frame: string,\n      nodeId: Protocol.DOM.BackendNodeId,\n      reason: StyleRecalcInvalidationReason,\n      subtree: boolean,\n      nodeName?: string,\n      extraData?: string,\n    },\n  };\n}\n\nexport function isStyleRecalcInvalidationTracking(event: Event): event is StyleRecalcInvalidationTracking {\n  return event.name === Name.STYLE_RECALC_INVALIDATION_TRACKING;\n}\nexport interface StyleInvalidatorInvalidationTracking extends Instant {\n  name: Name.STYLE_INVALIDATOR_INVALIDATION_TRACKING;\n  args: Args&{\n    data: ArgsData & {\n      frame: string,\n      nodeId: Protocol.DOM.BackendNodeId,\n      reason: string,\n      invalidationList: Array<{id: string, classes?: string[]}>,\n      subtree: boolean,\n      nodeName?: string,\n      extraData?: string,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      selectors?: Array<{selector: string, style_sheet_id: string}>,\n    },\n  };\n}\nexport function isStyleInvalidatorInvalidationTracking(event: Event): event is StyleInvalidatorInvalidationTracking {\n  return event.name === Name.STYLE_INVALIDATOR_INVALIDATION_TRACKING;\n}\n\nexport interface BeginCommitCompositorFrame extends Instant {\n  name: Name.BEGIN_COMMIT_COMPOSITOR_FRAME;\n  args: Args&{\n    frame: string,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    is_mobile_optimized: boolean,\n  };\n}\nexport function isBeginCommitCompositorFrame(event: Event): event is BeginCommitCompositorFrame {\n  return event.name === Name.BEGIN_COMMIT_COMPOSITOR_FRAME;\n}\n\nexport interface ParseMetaViewport extends Instant {\n  name: Name.PARSE_META_VIEWPORT;\n  args: Args&{\n    data: {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      node_id: Protocol.DOM.BackendNodeId,\n      content: string,\n      frame?: string,\n    },\n  };\n}\nexport function isParseMetaViewport(event: Event): event is ParseMetaViewport {\n  return event.name === Name.PARSE_META_VIEWPORT;\n}\n\nexport interface LinkPreconnect extends Instant {\n  name: Name.LINK_PRECONNECT;\n  args: Args&{\n    data: {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      node_id: Protocol.DOM.BackendNodeId,\n      url: string,\n      frame?: string,\n    },\n  };\n}\nexport function isLinkPreconnect(event: Event): event is LinkPreconnect {\n  return event.name === Name.LINK_PRECONNECT;\n}\n\nexport interface ScheduleStyleRecalculation extends Instant {\n  name: Name.SCHEDULE_STYLE_RECALCULATION;\n  args: Args&{\n    data: {\n      frame: string,\n      reason?: StyleRecalcInvalidationReason,\n      subtree?: boolean,\n      nodeId?: Protocol.DOM.BackendNodeId,\n    },\n  };\n}\nexport function isScheduleStyleRecalculation(event: Event): event is ScheduleStyleRecalculation {\n  return event.name === Name.SCHEDULE_STYLE_RECALCULATION;\n}\n\nexport interface RenderFrameImplCreateChildFrame extends Event {\n  name: Name.RENDER_FRAME_IMPL_CREATE_CHILD_FRAME;\n  /* eslint-disable @typescript-eslint/naming-convention */\n  args: Args&{\n    child_frame_token: string,\n    frame_token: string,\n  };\n}\n\nexport function isRenderFrameImplCreateChildFrame(event: Event): event is RenderFrameImplCreateChildFrame {\n  return event.name === Name.RENDER_FRAME_IMPL_CREATE_CHILD_FRAME;\n}\n\nexport interface LayoutImageUnsized extends Event {\n  name: Name.LAYOUT_IMAGE_UNSIZED;\n  args: Args&{\n    data: {\n      nodeId: Protocol.DOM.BackendNodeId,\n      frameId: string,\n    },\n  };\n}\n\nexport function isLayoutImageUnsized(event: Event): event is LayoutImageUnsized {\n  return event.name === Name.LAYOUT_IMAGE_UNSIZED;\n}\n\nexport interface PrePaint extends Complete {\n  name: 'PrePaint';\n}\n\nexport interface PairableAsync extends Event {\n  ph: Phase.ASYNC_NESTABLE_START|Phase.ASYNC_NESTABLE_END|Phase.ASYNC_NESTABLE_INSTANT;\n  // The id2 field gives flexibility to explicitly specify if an event\n  // id is global among processes or process local. However not all\n  // events use it, so both kind of ids need to be marked as optional.\n  id2?: {local?: string, global?: string};\n  id?: string;\n}\nexport interface PairableAsyncBegin extends PairableAsync {\n  ph: Phase.ASYNC_NESTABLE_START;\n}\n\nexport interface PairableAsyncInstant extends PairableAsync {\n  ph: Phase.ASYNC_NESTABLE_INSTANT;\n}\n\nexport interface PairableAsyncEnd extends PairableAsync {\n  ph: Phase.ASYNC_NESTABLE_END;\n}\n\nexport interface AnimationFrame extends PairableAsync {\n  name: Name.ANIMATION_FRAME;\n  args?: AnimationFrameArgs;\n}\n\nexport type AnimationFrameArgs = Args&{\n  animation_frame_timing_info: {\n    blocking_duration_ms: number,\n    duration_ms: number,\n    num_scripts: number,\n  },\n  id: string,\n};\n\nexport interface AnimationFrameAsyncStart extends AnimationFrame {\n  ph: Phase.ASYNC_NESTABLE_START;\n}\nexport interface AnimationFrameAsyncEnd extends AnimationFrame {\n  ph: Phase.ASYNC_NESTABLE_END;\n}\n\nexport function isAnimationFrameAsyncStart(data: Event): data is AnimationFrameAsyncStart {\n  return data.name === Name.ANIMATION_FRAME && data.ph === Phase.ASYNC_NESTABLE_START;\n}\nexport function isAnimationFrameAsyncEnd(data: Event): data is AnimationFrameAsyncEnd {\n  return data.name === Name.ANIMATION_FRAME && data.ph === Phase.ASYNC_NESTABLE_END;\n}\n\nexport interface AnimationFramePresentation extends Event {\n  name: Name.ANIMATION_FRAME_PRESENTATION;\n  ph: Phase.ASYNC_NESTABLE_INSTANT;\n  args?: Args&{\n    id: string,\n  };\n}\nexport function isAnimationFramePresentation(data: Event): data is AnimationFramePresentation {\n  return data.name === Name.ANIMATION_FRAME_PRESENTATION;\n}\n\nexport interface UserTiming extends Event {\n  id2?: {local?: string, global?: string};\n  id?: string;\n  cat: 'blink.user_timing';\n  // Note that the timestamp for user timing trace events is set to the\n  // start time passed by the user at the call site of the timing (based\n  // on the UserTiming spec).\n  // https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/timing/performance_user_timing.cc;l=236;drc=494419358caf690316f160a1f27d9e771a14c033\n}\n\nexport interface DomLoading extends UserTiming {\n  name: Name.DOM_LOADING;\n  args: Args&{\n    frame?: string,\n  };\n}\n\nexport interface BeginRemoteFontLoad extends UserTiming {\n  name: Name.BEGIN_REMOTE_FONT_LOAD;\n  args: Args&{\n    display: string,\n    id: number,\n    url?: string,\n  };\n}\n\nexport interface RemoteFontLoaded extends UserTiming {\n  name: Name.REMOTE_FONT_LOADED;\n  args: Args&{\n    url: string,\n    name: string,\n  };\n}\n\nexport type PairableUserTiming = UserTiming&PairableAsync;\n\nexport interface PerformanceMeasureBegin extends PairableUserTiming {\n  args: Args&{\n    detail?: string,\n    callTime?: Micro,\n    traceId?: number,\n  };\n  ph: Phase.ASYNC_NESTABLE_START;\n}\n\nexport type PerformanceMeasureEnd = PairableUserTiming&PairableAsyncEnd;\nexport type PerformanceMeasure = PerformanceMeasureBegin|PerformanceMeasureEnd;\n\nexport interface PerformanceMark extends UserTiming {\n  args: Args&{\n    data?: ArgsData & {\n      detail?: string,\n      callTime?: Micro,\n    },\n  };\n  ph: Phase.INSTANT|Phase.MARK|Phase.ASYNC_NESTABLE_INSTANT;\n}\n\nexport interface ConsoleTimeBegin extends PairableAsyncBegin {\n  cat: 'blink.console';\n}\n\nexport interface ConsoleTimeEnd extends PairableAsyncEnd {\n  cat: 'blink.console';\n}\n\nexport type ConsoleTime = ConsoleTimeBegin|ConsoleTimeEnd;\n\nexport interface ConsoleTimeStamp extends Event {\n  cat: 'devtools.timeline';\n  name: Name.TIME_STAMP;\n  ph: Phase.INSTANT;\n  args: Args&{\n    data?: ArgsData & {\n      // The console.timeStamp allows to pass integers as values as well\n      // as strings\n      message: string,\n      name?: string|number,\n      start?: string|number,\n      end?: string|number,\n      track?: string|number,\n      trackGroup?: string|number,\n      color?: string|number,\n      devtools?: {\n        link: ExtensionTrackEntryPayloadDeeplink,\n      },\n      sampleTraceId?: number,\n    },\n  };\n}\n\nexport interface SyntheticConsoleTimeStamp extends Event, SyntheticBased {\n  cat: 'disabled-by-default-v8.inspector';\n  ph: Phase.COMPLETE;\n}\n\nexport interface UserTimingMeasure extends Event {\n  cat: 'devtools.timeline';\n  ph: Phase.COMPLETE;\n  name: Name.USER_TIMING_MEASURE;\n  args: Args&{\n    sampleTraceId: number,\n    traceId: number,\n  };\n}\n\n/**\n * ChromeFrameReporter args for PipelineReporter event.\n * Matching proto: https://source.chromium.org/chromium/chromium/src/+/main:third_party/perfetto/protos/perfetto/trace/track_event/chrome_frame_reporter.proto\n */\n/* eslint-disable @typescript-eslint/naming-convention */\ninterface ChromeFrameReporter {\n  state: State;\n  enum: FrameDropReason;\n  /** The reason is set only if |state| is not |STATE_UPDATED_ALL|. */\n  reason: FrameDropReason;\n  frame_source: number;\n  /**\n   * Identifies a BeginFrameArgs (along with the source_id).\n   * See comments in components/viz/common/frame_sinks/begin_frame_args.h.\n   */\n  frame_sequence: number;\n  /**\n   * If this is a dropped frame (i.e. if |state| is set to |STATE_DROPPED| or\n   * |STATE_PRESENTED_PARTIAL|), then indicates whether this frame impacts smoothness.\n   */\n  affects_smoothness: boolean;\n  /** The type of active scroll. */\n  scroll_state: ScrollState;\n  /** If any main thread animation is active during this frame. */\n  has_main_animation: boolean;\n  /** If any compositor thread animation is active during this frame. */\n  has_compositor_animation: boolean;\n  /** If any touch-driven UX (not scroll) is active during this frame. */\n  has_smooth_input_main: boolean;\n  /**\n   * Whether the frame contained any missing content (i.e. whether there was\n   * checkerboarding in the frame).\n   */\n  has_missing_content: boolean;\n  /** The id of layer_tree_host that the frame has been produced for. */\n  layer_tree_host_id: number;\n  /** If total latency of PipelineReporter exceeds a certain limit. */\n  has_high_latency: boolean;\n  /**\n   *  Indicate if the frame is \"FORKED\" (i.e. a PipelineReporter event starts at\n   * the same frame sequence as another PipelineReporter) or \"BACKFILL\"\n   * (i.e. dropped frames when there are no partial compositor updates).\n   */\n  frame_type: FrameType;\n  /**\n   * The breakdown stage of PipelineReporter that is most likely accountable for\n   * high latency.\n   */\n  high_latency_contribution_stage: string[];\n}\nconst enum State {\n  /** The frame did not have any updates to present. **/\n  STATE_NO_UPDATE_DESIRED = 'STATE_NO_UPDATE_DESIRED',\n  /**\n   * The frame presented all the desired updates (i.e. any updates requested\n   * from both the compositor thread and main-threads were handled). *\n   */\n  STATE_PRESENTED_ALL = 'STATE_PRESENTED_ALL',\n  /**\n   *  The frame was presented with some updates, but also missed some updates\n   * (e.g. missed updates from the main-thread, but included updates from the\n   * compositor thread). *\n   */\n  STATE_PRESENTED_PARTIAL = 'STATE_PRESENTED_PARTIAL',\n  /**\n   * The frame was dropped, i.e. some updates were desired for the frame, but\n   * was not presented. *\n   */\n  STATE_DROPPED = 'STATE_DROPPED',\n}\n\nconst enum FrameDropReason {\n  REASON_UNSPECIFIED = 'REASON_UNSPECIFIED',\n  /**\n   *  Frame was dropped by the display-compositor.\n   * The display-compositor may drop a frame some times (e.g. the frame missed\n   * the deadline, or was blocked on surface-sync, etc.) *\n   */\n  REASON_DISPLAY_COMPOSITOR = 'REASON_DISPLAY_COMPOSITOR',\n  /**\n   *  Frame was dropped because of the main-thread.\n   * The main-thread may cause a frame to be dropped, e.g. if the main-thread\n   * is running expensive javascript, or doing a lot of layout updates, etc. *\n   */\n  REASON_MAIN_THREAD = 'REASON_MAIN_THREAD',\n  /**\n   *  Frame was dropped by the client compositor.\n   * The client compositor can drop some frames too (e.g. attempting to\n   * recover latency, missing the deadline, etc.). *\n   */\n  REASON_CLIENT_COMPOSITOR = 'REASON_CLIENT_COMPOSITOR',\n}\n\nconst enum ScrollState {\n  SCROLL_NONE = 'SCROLL_NONE',\n  SCROLL_MAIN_THREAD = 'SCROLL_MAIN_THREAD',\n  SCROLL_COMPOSITOR_THREAD = 'SCROLL_COMPOSITOR_THREAD',\n\n  /** Used when it can't be determined whether a scroll is in progress or not. */\n  SCROLL_UNKNOWN = 'SCROLL_UNKNOWN',\n}\nconst enum FrameType {\n  FORKED = 'FORKED',\n  BACKFILL = 'BACKFILL',\n}\n\n// TODO(crbug.com/409484302): Remove once Chrome migrates from\n// ChromeTrackEvent.chrome_frame_reporter to ChromeTrackEvent.frame_reporter.\nexport interface OldChromeFrameReporterArgs {\n  chrome_frame_reporter: ChromeFrameReporter;\n}\n\nexport interface NewChromeFrameReporterArgs {\n  frame_reporter: ChromeFrameReporter;\n}\n\nexport interface PipelineReporter extends Event {\n  id2?: {\n    local?: string,\n  };\n  ph: Phase.ASYNC_NESTABLE_START|Phase.ASYNC_NESTABLE_END;\n  args: Args&(OldChromeFrameReporterArgs|NewChromeFrameReporterArgs);\n}\n\nexport function isPipelineReporter(event: Event): event is PipelineReporter {\n  return event.name === Name.PIPELINE_REPORTER;\n}\n\n// A type used for synthetic events created based on a raw trace event.\n// A branded type is used to ensure not all events can be typed as\n// SyntheticBased and prevent places different to the\n// SyntheticEventsManager from creating synthetic events. This is\n// because synthetic events need to be registered in order to resolve\n// serialized event keys into event objects, so we ensure events are\n// registered at the time they are created by the SyntheticEventsManager.\nexport interface SyntheticBased<Ph extends Phase = Phase, T extends Event = Event> extends Event {\n  ph: Ph;\n  rawSourceEvent: T;\n  _tag: 'SyntheticEntryTag';\n}\n\nexport function isSyntheticBased(event: Event): event is SyntheticBased {\n  return 'rawSourceEvent' in event;\n}\n\n// Nestable async events with a duration are made up of two distinct\n// events: the begin, and the end. We need both of them to be able to\n// display the right information, so we create these synthetic events.\nexport interface SyntheticEventPair<T extends PairableAsync = PairableAsync> extends SyntheticBased<Phase, T> {\n  rawSourceEvent: T;\n  name: T['name'];\n  cat: T['cat'];\n  id?: string;\n  id2?: {local?: string, global?: string};\n\n  dur: Micro;\n  args: Args&{\n    data: {\n      beginEvent: T & PairableAsyncBegin,\n      endEvent: T&PairableAsyncEnd,\n      instantEvents?: Array<T&PairableAsyncInstant>,\n    },\n  };\n}\n\nexport type SyntheticPipelineReporterPair = SyntheticEventPair<PipelineReporter>;\nexport type SyntheticAnimationFramePair = SyntheticEventPair<AnimationFrame>;\n\nexport type SyntheticUserTimingPair = SyntheticEventPair<PerformanceMeasure>;\n\nexport type SyntheticConsoleTimingPair = SyntheticEventPair<ConsoleTime>;\n\nexport type SyntheticAnimationPair = SyntheticEventPair<Animation>;\n\nexport interface SyntheticInteractionPair extends SyntheticEventPair<EventTimingBeginOrEnd> {\n  // InteractionID and type are available within the beginEvent's data, but we\n  // put them on the top level for ease of access.\n  interactionId: number;\n  type: string;\n  // This is equivalent to startEvent.ts;\n  ts: Micro;\n  // This duration can be calculated via endEvent.ts - startEvent.ts, but we do\n  // that and put it here to make it easier. This also makes these events\n  // consistent with real events that have a dur field.\n  dur: Micro;\n  // These values are provided in the startEvent's args.data field as\n  // millisecond values, but during the handler phase we parse these into\n  // microseconds and put them on the top level for easy access.\n  processingStart: Micro;\n  processingEnd: Micro;\n  // These 3 values represent the breakdown of the parts of an interaction:\n  // 1. inputDelay: time from the user clicking to the input being handled\n  inputDelay: Micro;\n  // 2. mainThreadHandling: time spent processing the event handler\n  mainThreadHandling: Micro;\n  // 3. presentationDelay: delay between the event being processed and the frame being rendered\n  presentationDelay: Micro;\n}\n\n/**\n * A profile call created in the frontend from samples disguised as a\n * trace event.\n *\n * We store the sampleIndex, profileId and nodeId so that we can easily link\n * back a Synthetic Trace Entry to an individual Sample trace event within a\n * Profile.\n *\n * Because a sample contains a set of call frames representing the stack at the\n * point in time that the sample was created, we also have to store the ID of\n * the Node that points to the function call that this profile call represents.\n */\nexport interface SyntheticProfileCall extends Event {\n  callFrame: Protocol.Runtime.CallFrame;\n  nodeId: Protocol.integer;\n  sampleIndex: number;\n  profileId: ProfileID;\n}\n\n/**\n * A JS Sample reflects a single sample from the V8 CPU Profile\n */\nexport interface SyntheticJSSample extends Event {\n  name: Name.JS_SAMPLE;\n  args: Args&{\n    data: ArgsData & {\n      // Used to associate a stack sample with a trace event.\n      stackTrace: Protocol.Runtime.CallFrame[],\n      traceId?: number,\n    },\n  };\n  ph: Phase.INSTANT;\n}\n\nexport function isSyntheticInteraction(event: Event): event is SyntheticInteractionPair {\n  return Boolean(\n      'interactionId' in event && event.args?.data && 'beginEvent' in event.args.data && 'endEvent' in event.args.data);\n}\n\n// Events relating to frames.\n\nexport interface DrawFrame extends Instant {\n  name: Name.DRAW_FRAME;\n  args: Args&{\n    layerTreeId: number,\n    frameSeqId: number,\n  };\n}\n\nexport function isDrawFrame(event: Event): event is DrawFrame {\n  // The extra check for INSTANT here is because in the past DrawFrame events had an ASYNC_NESTABLE_START and ASYNC_NESTABLE_END pair. We don't want to support those old events, so we have to check we are dealing with an instant event.\n  return event.name === Name.DRAW_FRAME && event.ph === Phase.INSTANT;\n}\n\nexport interface BeginFrame extends Instant {\n  name: Name.BEGIN_FRAME;\n  args: Args&{\n    layerTreeId: number,\n    frameSeqId: number,\n  };\n}\nexport function isBeginFrame(event: Event): event is BeginFrame {\n  // Old traces did not have frameSeqId; but we do not want to support these.\n  return Boolean(event.name === Name.BEGIN_FRAME && event.args && 'frameSeqId' in event.args);\n}\n\nexport interface DroppedFrame extends Instant {\n  name: Name.DROPPED_FRAME;\n  args: Args&{\n    layerTreeId: number,\n    frameSeqId: number,\n    hasPartialUpdate?: boolean,\n  };\n}\nexport function isDroppedFrame(event: Event): event is DroppedFrame {\n  // Old traces did not have frameSeqId; but we do not want to support these.\n  return Boolean(event.name === Name.DROPPED_FRAME && event.args && 'frameSeqId' in event.args);\n}\n\nexport interface RequestMainThreadFrame extends Instant {\n  name: Name.REQUEST_MAIN_THREAD_FRAME;\n  args: Args&{\n    layerTreeId: number,\n  };\n}\nexport function isRequestMainThreadFrame(event: Event): event is RequestMainThreadFrame {\n  return event.name === Name.REQUEST_MAIN_THREAD_FRAME;\n}\n\nexport interface BeginMainThreadFrame extends Instant {\n  name: Name.BEGIN_MAIN_THREAD_FRAME;\n  args: Args&{\n    layerTreeId: number,\n    data: ArgsData&{\n      frameId?: number,\n    },\n  };\n}\nexport function isBeginMainThreadFrame(event: Event): event is BeginMainThreadFrame {\n  return event.name === Name.BEGIN_MAIN_THREAD_FRAME;\n}\n\nexport interface NeedsBeginFrameChanged extends Instant {\n  name: Name.NEEDS_BEGIN_FRAME_CHANGED;\n  args: Args&{\n    layerTreeId: number,\n    data: ArgsData&{\n      needsBeginFrame: number,\n    },\n  };\n}\nexport function isNeedsBeginFrameChanged(event: Event): event is NeedsBeginFrameChanged {\n  return event.name === Name.NEEDS_BEGIN_FRAME_CHANGED;\n}\n\nexport interface Commit extends Instant {\n  name: Name.COMMIT;\n  args: Args&{\n    layerTreeId: number,\n    frameSeqId: number,\n  };\n}\nexport function isCommit(event: Event): event is Commit {\n  // Old traces did not have frameSeqId; but we do not want to support these.\n  return Boolean(event.name === Name.COMMIT && event.args && 'frameSeqId' in event.args);\n}\n\nexport interface RasterTask extends Complete {\n  name: Name.RASTER_TASK;\n  args: Args&{\n    tileData?: {\n      layerId: number,\n      sourceFrameNumber: number,\n      tileId: {\n\n        id_ref: string,\n      },\n      tileResolution: string,\n    },\n  };\n}\nexport function isRasterTask(event: Event): event is RasterTask {\n  return event.name === Name.RASTER_TASK;\n}\n\n// CompositeLayers has been replaced by \"Commit\", but we support both to not break old traces being imported.\nexport interface CompositeLayers extends Instant {\n  name: Name.COMPOSITE_LAYERS;\n  args: Args&{\n    layerTreeId: number,\n  };\n}\nexport function isCompositeLayers(event: Event): event is CompositeLayers {\n  return event.name === Name.COMPOSITE_LAYERS;\n}\n\nexport interface ActivateLayerTree extends Instant {\n  name: Name.ACTIVATE_LAYER_TREE;\n  args: Args&{\n    layerTreeId: number,\n    frameId: number,\n  };\n}\nexport function isActivateLayerTree(event: Event): event is ActivateLayerTree {\n  return event.name === Name.ACTIVATE_LAYER_TREE;\n}\n\nexport type InvalidationTrackingEvent = ScheduleStyleInvalidationTracking|StyleRecalcInvalidationTracking|\n    StyleInvalidatorInvalidationTracking|LayoutInvalidationTracking;\n\nexport function isInvalidationTracking(event: Event): event is InvalidationTrackingEvent {\n  return isScheduleStyleInvalidationTracking(event) || isStyleRecalcInvalidationTracking(event) ||\n      isStyleInvalidatorInvalidationTracking(event) || isLayoutInvalidationTracking(event);\n}\n\nexport interface DrawLazyPixelRef extends Instant {\n  name: Name.DRAW_LAZY_PIXEL_REF;\n  args?: Args&{\n\n    LazyPixelRef: number,\n  };\n}\nexport function isDrawLazyPixelRef(event: Event): event is DrawLazyPixelRef {\n  return event.name === Name.DRAW_LAZY_PIXEL_REF;\n}\n\nexport interface DecodeLazyPixelRef extends Instant {\n  name: Name.DECODE_LAZY_PIXEL_REF;\n  args?: Args&{\n\n    LazyPixelRef: number,\n  };\n}\nexport function isDecodeLazyPixelRef(event: Event): event is DecodeLazyPixelRef {\n  return event.name === Name.DECODE_LAZY_PIXEL_REF;\n}\n\nexport interface DecodeImage extends Complete {\n  name: Name.DECODE_IMAGE;\n  args: Args&{\n    imageType: string,\n  };\n}\nexport function isDecodeImage(event: Event): event is DecodeImage {\n  return event.name === Name.DECODE_IMAGE;\n}\n\nexport const enum InvalidationEventType {\n  StyleInvalidatorInvalidationTracking = 'StyleInvalidatorInvalidationTracking',\n  StyleRecalcInvalidationTracking = 'StyleRecalcInvalidationTracking',\n}\n\nexport interface SelectorTiming {\n  'elapsed (us)': number;\n  fast_reject_count: number;\n  match_attempts: number;\n  selector: string;\n  style_sheet_id: string;\n  match_count: number;\n  invalidation_count: number;\n}\n\nexport enum SelectorTimingsKey {\n  Elapsed = 'elapsed (us)',\n  RejectPercentage = 'reject_percentage',\n  FastRejectCount = 'fast_reject_count',\n  MatchAttempts = 'match_attempts',\n  MatchCount = 'match_count',\n  Selector = 'selector',\n  StyleSheetId = 'style_sheet_id',\n  InvalidationCount = 'invalidation_count',\n}\n\nexport interface SelectorStats {\n  selector_timings: SelectorTiming[];\n}\n\nexport interface SelectorStats extends Complete {\n  name: Name.SELECTOR_STATS;\n  args: Args&{\n\n    selector_stats?: SelectorStats,\n  };\n}\n\nexport function isSelectorStats(event: Event): event is SelectorStats {\n  return event.name === Name.SELECTOR_STATS;\n}\n\nexport interface UpdateLayoutTree extends Complete {\n  name: Name.UPDATE_LAYOUT_TREE;\n  args: Args&{\n    elementCount: number,\n    beginData?: {\n      frame: string,\n      sampleTraceId?: number,\n      stackTrace?: CallFrame[],\n    },\n  };\n}\nexport function isUpdateLayoutTree(event: Event): event is UpdateLayoutTree {\n  return event.name === Name.UPDATE_LAYOUT_TREE;\n}\n\nexport interface Layout extends Complete {\n  name: Name.LAYOUT;\n  args: Args&{\n    beginData: {\n      frame: string,\n      dirtyObjects: number,\n      partialLayout: boolean,\n      totalObjects: number,\n      sampleTraceId?: number,\n      stackTrace?: CallFrame[],\n    },\n    // endData is not reliably populated.\n    // Why? TBD. https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/local_frame_view.cc;l=847-851;drc=8b6aaad8027390ce6b32d82d57328e93f34bb8e5\n    endData?: {\n      layoutRoots: Array<{\n        depth: number,\n        nodeId: Protocol.DOM.BackendNodeId,\n        quads: number[][],\n      }>,\n    },\n  };\n}\nexport function isLayout(event: Event): event is Layout {\n  return event.name === Name.LAYOUT && Boolean(event.args && 'beginData' in event.args);\n}\nexport interface InvalidateLayout extends Instant {\n  name: Name.INVALIDATE_LAYOUT;\n  args: Args&{\n    data: {\n      frame: string,\n      nodeId: Protocol.DOM.BackendNodeId,\n    },\n  };\n}\nexport function isInvalidateLayout(event: Event): event is InvalidateLayout {\n  return event.name === Name.INVALIDATE_LAYOUT;\n}\n\nexport interface DebuggerAsyncTaskScheduled extends Event {\n  name: Name.DEBUGGER_ASYNC_TASK_SCHEDULED;\n  args: Args&{\n    taskName: string,\n  };\n}\n\nexport function isDebuggerAsyncTaskScheduled(event: Event): event is DebuggerAsyncTaskScheduled {\n  return event.name === Name.DEBUGGER_ASYNC_TASK_SCHEDULED;\n}\n\nexport interface DebuggerAsyncTaskRun extends Event {\n  name: Name.DEBUGGER_ASYNC_TASK_RUN;\n}\n\nexport function isDebuggerAsyncTaskRun(event: Event): event is DebuggerAsyncTaskRun {\n  return event.name === Name.DEBUGGER_ASYNC_TASK_RUN;\n}\n\nexport type ProfileID = Platform.Brand.Brand<string, 'profileIdTag'>;\n\nexport function ProfileID(value: string): ProfileID {\n  return value as ProfileID;\n}\n\nexport type CallFrameID = Platform.Brand.Brand<number, 'callFrameIdTag'>;\n\nexport function CallFrameID(value: number): CallFrameID {\n  return value as CallFrameID;\n}\n\nexport type SampleIndex = Platform.Brand.Brand<number, 'sampleIndexTag'>;\n\nexport function SampleIndex(value: number): SampleIndex {\n  return value as SampleIndex;\n}\n\nexport type ProcessID = Platform.Brand.Brand<number, 'processIdTag'>;\n\nexport function ProcessID(value: number): ProcessID {\n  return value as ProcessID;\n}\n\nexport type ThreadID = Platform.Brand.Brand<number, 'threadIdTag'>;\n\nexport function ThreadID(value: number): ThreadID {\n  return value as ThreadID;\n}\n\nexport type WorkerId = Platform.Brand.Brand<string, 'workerIdTag'>;\n\nexport function WorkerId(value: string): WorkerId {\n  return value as WorkerId;\n}\n\nexport function isComplete(event: Event): event is Complete {\n  return event.ph === Phase.COMPLETE;\n}\n\nexport function isBegin(event: Event): event is Begin {\n  return event.ph === Phase.BEGIN;\n}\n\nexport function isEnd(event: Event): event is End {\n  return event.ph === Phase.END;\n}\n\nexport function isDispatch(event: Event): event is Dispatch {\n  return event.name === 'EventDispatch';\n}\n\nexport function isInstant(event: Event): event is Instant {\n  return event.ph === Phase.INSTANT;\n}\n\nexport function isRendererEvent(event: Event): event is RendererEvent {\n  return isInstant(event) || isComplete(event);\n}\n\nexport function isFireIdleCallback(event: Event): event is FireIdleCallback {\n  return event.name === 'FireIdleCallback';\n}\n\nexport function isSchedulePostMessage(event: Event): event is SchedulePostMessage {\n  return event.name === Name.SCHEDULE_POST_MESSAGE;\n}\n\nexport function isHandlePostMessage(event: Event): event is HandlePostMessage {\n  return event.name === Name.HANDLE_POST_MESSAGE;\n}\n\nexport function isUpdateCounters(event: Event): event is UpdateCounters {\n  return event.name === 'UpdateCounters';\n}\n\nexport function isDOMStats(event: Event): event is DOMStats {\n  return event.name === 'DOMStats';\n}\n\nexport function isThreadName(\n    event: Event,\n    ): event is ThreadName {\n  return event.name === Name.THREAD_NAME;\n}\n\nexport function isProcessName(\n    event: Event,\n    ): event is ProcessName {\n  return event.name === 'process_name';\n}\n\nexport function isTracingStartedInBrowser(\n    event: Event,\n    ): event is TracingStartedInBrowser {\n  return event.name === Name.TRACING_STARTED_IN_BROWSER;\n}\n\nexport function isFrameCommittedInBrowser(\n    event: Event,\n    ): event is FrameCommittedInBrowser {\n  return event.name === 'FrameCommittedInBrowser';\n}\n\nexport function isCommitLoad(\n    event: Event,\n    ): event is CommitLoad {\n  return event.name === 'CommitLoad';\n}\n\nexport function isAnimation(\n    event: Event,\n    ): event is Animation {\n  // We've found some rare traces with an Animation trace event from a different category: https://crbug.com/1472375#comment7\n  return event.name === 'Animation' && event.cat.includes('devtools.timeline');\n}\n\nexport function isSyntheticAnimation(event: Event): event is SyntheticAnimationPair {\n  if (event.name !== 'Animation' || !event.cat.includes('devtools.timeline')) {\n    return false;\n  }\n  const data = event.args?.data;\n  if (!data) {\n    return false;\n  }\n  return 'beginEvent' in data && 'endEvent' in data;\n}\n\nexport function isLayoutShift(\n    event: Event,\n    ): event is LayoutShift {\n  return event.name === Name.LAYOUT_SHIFT;\n}\n\nexport function isLayoutInvalidationTracking(\n    event: Event,\n    ): event is LayoutInvalidationTracking {\n  return event.name === Name.LAYOUT_INVALIDATION_TRACKING;\n}\n\nexport function isFirstContentfulPaint(event: Event): event is FirstContentfulPaint {\n  return event.name === 'firstContentfulPaint';\n}\n\nexport function isLargestContentfulPaintCandidate(event: Event): event is LargestContentfulPaintCandidate {\n  return event.name === Name.MARK_LCP_CANDIDATE;\n}\nexport function isLargestImagePaintCandidate(event: Event): event is LargestImagePaintCandidate {\n  return event.name === 'LargestImagePaint::Candidate';\n}\nexport function isLargestTextPaintCandidate(event: Event): event is LargestTextPaintCandidate {\n  return event.name === 'LargestTextPaint::Candidate';\n}\n\nexport function isMarkLoad(event: Event): event is MarkLoad {\n  return event.name === 'MarkLoad';\n}\n\nexport function isFirstPaint(event: Event): event is FirstPaint {\n  return event.name === 'firstPaint';\n}\n\nexport function isMarkDOMContent(event: Event): event is MarkDOMContent {\n  return event.name === 'MarkDOMContent';\n}\n\nexport function isInteractiveTime(event: Event): event is InteractiveTime {\n  return event.name === 'InteractiveTime';\n}\n\nexport function isEventTiming(event: Event): event is EventTimingBeginOrEnd {\n  return event.name === Name.EVENT_TIMING;\n}\n\nexport function isEventTimingEnd(event: Event): event is EventTimingEnd {\n  return isEventTiming(event) && event.ph === Phase.ASYNC_NESTABLE_END;\n}\nexport function isEventTimingStart(event: Event): event is EventTimingBegin {\n  return isEventTiming(event) && event.ph === Phase.ASYNC_NESTABLE_START;\n}\n\nexport function isGPUTask(event: Event): event is GPUTask {\n  return event.name === 'GPUTask';\n}\n\nexport function isProfile(event: Event): event is Profile {\n  return event.name === Name.PROFILE;\n}\n\nexport function isSyntheticCpuProfile(event: Event): event is SyntheticCpuProfile {\n  return event.name === Name.CPU_PROFILE;\n}\n\nexport function isProfileChunk(event: Event): event is ProfileChunk {\n  return event.name === Name.PROFILE_CHUNK;\n}\n\nexport function isResourceChangePriority(\n    event: Event,\n    ): event is ResourceChangePriority {\n  return event.name === 'ResourceChangePriority';\n}\n\nexport function isResourceSendRequest(\n    event: Event,\n    ): event is ResourceSendRequest {\n  return event.name === 'ResourceSendRequest';\n}\n\nexport function isResourceReceiveResponse(\n    event: Event,\n    ): event is ResourceReceiveResponse {\n  return event.name === 'ResourceReceiveResponse';\n}\n\nexport function isResourceMarkAsCached(\n    event: Event,\n    ): event is ResourceMarkAsCached {\n  return event.name === 'ResourceMarkAsCached';\n}\n\nexport function isResourceFinish(\n    event: Event,\n    ): event is ResourceFinish {\n  return event.name === 'ResourceFinish';\n}\n\nexport function isResourceWillSendRequest(\n    event: Event,\n    ): event is ResourceWillSendRequest {\n  return event.name === 'ResourceWillSendRequest';\n}\n\nexport function isResourceReceivedData(\n    event: Event,\n    ): event is ResourceReceivedData {\n  return event.name === 'ResourceReceivedData';\n}\n\n// Any event where we receive data (and get an encodedDataLength)\nexport function isReceivedDataEvent(\n    event: Event,\n    ): event is ResourceReceivedData|ResourceFinish|ResourceReceiveResponse {\n  return event.name === 'ResourceReceivedData' || event.name === 'ResourceFinish' ||\n      event.name === 'ResourceReceiveResponse';\n}\n\nexport function isSyntheticNetworkRequest(\n    event: Event,\n    ): event is SyntheticNetworkRequest {\n  return event.name === Name.SYNTHETIC_NETWORK_REQUEST;\n}\n\nexport function isSyntheticWebSocketConnection(\n    event: Event,\n    ): event is SyntheticWebSocketConnection {\n  return event.name === 'SyntheticWebSocketConnection';\n}\n\nexport function isNetworkTrackEntry(event: Event): event is SyntheticWebSocketConnection|SyntheticNetworkRequest {\n  return isSyntheticNetworkRequest(event) || isSyntheticWebSocketConnection(event) || isWebSocketTraceEvent(event);\n}\n\nexport function isPrePaint(\n    event: Event,\n    ): event is PrePaint {\n  return event.name === 'PrePaint';\n}\n\n/** A VALID navigation start (as it has a populated documentLoaderURL) */\nexport function isNavigationStart(event: Event): event is NavigationStart {\n  return event.name === 'navigationStart' && (event as NavigationStart).args?.data?.documentLoaderURL !== '';\n}\n\nexport interface DidCommitSameDocumentNavigation extends Complete {\n  name: 'RenderFrameHostImpl::DidCommitSameDocumentNavigation';\n  args: Args&{\n    url: string,\n    render_frame_host: {\n      frame_type: string,\n    },\n  };\n}\n\nexport function isDidCommitSameDocumentNavigation(event: Event): event is DidCommitSameDocumentNavigation {\n  return event.name === 'RenderFrameHostImpl::DidCommitSameDocumentNavigation';\n}\n\nexport function isMainFrameViewport(\n    event: Event,\n    ): event is MainFrameViewport {\n  return event.name === 'PaintTimingVisualizer::Viewport';\n}\n\nexport function isSyntheticUserTiming(event: Event): event is SyntheticUserTimingPair {\n  if (event.cat !== 'blink.user_timing') {\n    return false;\n  }\n  const data = event.args?.data;\n  if (!data) {\n    return false;\n  }\n  return 'beginEvent' in data && 'endEvent' in data;\n}\n\nexport function isSyntheticConsoleTiming(event: Event): event is SyntheticConsoleTimingPair {\n  if (event.cat !== 'blink.console') {\n    return false;\n  }\n  const data = event.args?.data;\n  if (!data) {\n    return false;\n  }\n  return 'beginEvent' in data && 'endEvent' in data;\n}\n\nexport function isUserTiming(event: Event): event is UserTiming {\n  return event.cat === 'blink.user_timing';\n}\n\nexport function isDomLoading(event: Event): event is DomLoading {\n  return event.name === Name.DOM_LOADING;\n}\n\nexport function isBeginRemoteFontLoad(event: Event): event is BeginRemoteFontLoad {\n  return event.name === Name.BEGIN_REMOTE_FONT_LOAD;\n}\n\nexport function isRemoteFontLoaded(event: Event): event is RemoteFontLoaded {\n  return event.name === Name.REMOTE_FONT_LOADED;\n}\n\nexport function isPerformanceMeasure(event: Event): event is PerformanceMeasure {\n  return isUserTiming(event) && isPhaseAsync(event.ph);\n}\n\nexport function isPerformanceMeasureBegin(event: Event): event is PerformanceMeasureBegin {\n  return isPerformanceMeasure(event) && event.ph === Phase.ASYNC_NESTABLE_START;\n}\n\nexport function isPerformanceMark(event: Event): event is PerformanceMark {\n  return isUserTiming(event) && (event.ph === Phase.MARK || event.ph === Phase.INSTANT);\n}\n\nexport function isConsoleTime(event: Event): event is ConsoleTime {\n  return event.cat === 'blink.console' && isPhaseAsync(event.ph);\n}\n\nexport function isConsoleTimeStamp(event: Event): event is ConsoleTimeStamp {\n  return event.ph === Phase.INSTANT && event.name === Name.TIME_STAMP;\n}\n\nexport function isUserTimingMeasure(event: Event): event is UserTimingMeasure {\n  return event.name === Name.USER_TIMING_MEASURE;\n}\n\nexport function isParseHTML(event: Event): event is ParseHTML {\n  return event.name === 'ParseHTML';\n}\n\nexport interface Async extends Event {\n  ph: Phase.ASYNC_NESTABLE_START|Phase.ASYNC_NESTABLE_INSTANT|Phase.ASYNC_NESTABLE_END|Phase.ASYNC_STEP_INTO|\n      Phase.ASYNC_BEGIN|Phase.ASYNC_END|Phase.ASYNC_STEP_PAST;\n}\n\nexport function isSyntheticLayoutShift(event: Event): event is SyntheticLayoutShift {\n  return event.name === Name.SYNTHETIC_LAYOUT_SHIFT;\n}\n\nexport function isSyntheticLayoutShiftCluster(event: Event): event is SyntheticLayoutShiftCluster {\n  return event.name === Name.SYNTHETIC_LAYOUT_SHIFT_CLUSTER;\n}\n\nexport function isProfileCall(event: Event): event is SyntheticProfileCall {\n  return 'callFrame' in event;\n}\n\nexport interface Paint extends Complete {\n  name: Name.PAINT;\n  args: Args&{\n    data: ArgsData & {\n      frame: string,\n      layerId: number,\n      // With CompositeAfterPaint enabled, paint events are no longer\n      // associated with a Node, and nodeId will not be present.\n      nodeId?: Protocol.DOM.BackendNodeId,\n      // Optional as it was added in M137: crrev.com/c/6491448\n      nodeName?: string,\n      /** This rect is unreliable and often wrong. We'll remove it. crbug.com/41402938#comment10 */\n      clip?: number[],\n    },\n  };\n}\n\nexport function isPaint(event: Event): event is Paint {\n  return event.name === Name.PAINT;\n}\n\nexport interface PaintImage extends Complete {\n  name: Name.PAINT_IMAGE;\n  args: Args&{\n    data: Event & {\n      height: number,\n      width: number,\n      x: number,\n      y: number,\n      isCSS: boolean,\n      srcHeight: number,\n      srcWidth: number,\n      isPicture?: boolean,\n      loadingAttribute?: string,\n      srcsetAttribute?: string,\n      url?: string,\n      nodeId?: Protocol.DOM.BackendNodeId,\n      // Optional as it was added in M137: crrev.com/c/6491448\n      nodeName?: string,\n      frame?: string,\n    },\n  };\n}\nexport function isPaintImage(event: Event): event is PaintImage {\n  return event.name === Name.PAINT_IMAGE;\n}\n\nexport interface ScrollLayer extends Complete {\n  name: Name.SCROLL_LAYER;\n  args: Args&{\n    data: Event & {\n      frame: string,\n      nodeId?: Protocol.DOM.BackendNodeId,\n    },\n  };\n}\nexport function isScrollLayer(event: Event): event is ScrollLayer {\n  return event.name === Name.SCROLL_LAYER;\n}\n\nexport interface SetLayerTreeId extends Instant {\n  name: Name.SET_LAYER_TREE_ID;\n  args: Args&{\n    data: ArgsData & {\n      frame: string,\n      layerTreeId: number,\n    },\n  };\n}\nexport function isSetLayerId(event: Event): event is SetLayerTreeId {\n  return event.name === Name.SET_LAYER_TREE_ID;\n}\nexport interface UpdateLayer extends Complete {\n  name: Name.UPDATE_LAYER;\n  args: Args&{\n    layerId: number,\n    layerTreeId: number,\n  };\n}\nexport function isUpdateLayer(event: Event): event is UpdateLayer {\n  return event.name === Name.UPDATE_LAYER;\n}\n\nexport interface DisplayItemListSnapshot extends Event {\n  name: Name.DISPLAY_ITEM_LIST_SNAPSHOT;\n  ph: Phase.OBJECT_SNAPSHOT;\n  id2: {\n    local?: string,\n  };\n  args: Args&{\n    snapshot: {\n      skp64: string,\n      params?: {\n\n        layer_rect: [number, number, number, number],\n      },\n    },\n  };\n}\nexport function isDisplayListItemListSnapshot(event: Event): event is DisplayItemListSnapshot {\n  return event.name === Name.DISPLAY_ITEM_LIST_SNAPSHOT;\n}\n\nexport interface LayerTreeHostImplSnapshot extends Event {\n  name: Name.LAYER_TREE_HOST_IMPL_SNAPSHOT;\n  ph: Phase.OBJECT_SNAPSHOT;\n  id: string;\n  args: Args&{\n    snapshot: {\n      /* eslint-disable @typescript-eslint/naming-convention */\n      active_tiles: Array<{\n        id: string,\n        layer_id: string,\n        gpu_memory_usage: number,\n        content_rect: number[],\n      }>,\n      device_viewport_size: {\n        width: number,\n        height: number,\n      },\n      active_tree: {\n        root_layer: TraceLayer,\n        layers: TraceLayer[],\n      },\n      /* eslint-enable @typescript-eslint/naming-convention */\n    },\n  };\n}\n\nexport function isLayerTreeHostImplSnapshot(event: Event): event is LayerTreeHostImplSnapshot {\n  return event.name === Name.LAYER_TREE_HOST_IMPL_SNAPSHOT;\n}\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface TraceLayer {\n  bounds: {height: number, width: number};\n  children: TraceLayer[];\n  layer_id: number;\n  position: number[];\n  scroll_offset: number[];\n  layer_quad: number[];\n  draws_content: number;\n  gpu_memory_usage: number;\n  transform: number[];\n  owner_node: Protocol.DOM.BackendNodeId;\n  compositing_reasons: string[];\n  compositing_reason_ids: string[];\n  non_fast_scrollable_region: number[];\n  touch_event_handler_region: number[];\n  wheel_event_handler_region: number[];\n  scroll_event_handler_region: number[];\n}\n\nexport interface TracingLayerTile {\n  id: string;\n  layer_id: string;\n  gpu_memory_usage: number;\n  content_rect: number[];\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\nexport interface FireAnimationFrame extends Complete {\n  name: Name.FIRE_ANIMATION_FRAME;\n  args: Args&{\n    data: {\n      frame: string,\n      id: number,\n    },\n  };\n}\n\nexport function isFireAnimationFrame(event: Event): event is FireAnimationFrame {\n  return event.name === Name.FIRE_ANIMATION_FRAME;\n}\n\nexport interface RequestAnimationFrame extends Instant {\n  name: Name.REQUEST_ANIMATION_FRAME;\n  args: Args&{\n    data: {\n      frame: string,\n      id: number,\n      stackTrace?: CallFrame,\n    },\n  };\n}\n\nexport interface TimerInstall extends Instant {\n  name: Name.TIMER_INSTALL;\n  args: Args&{\n    data: {\n      frame: string,\n      singleShot: boolean,\n      timeout: number,\n      timerId: number,\n      stackTrace?: CallFrame,\n    },\n  };\n}\nexport function isTimerInstall(event: Event): event is TimerInstall {\n  return event.name === Name.TIMER_INSTALL;\n}\n\nexport interface TimerFire extends Complete {\n  name: Name.TIMER_FIRE;\n  args: Args&{\n    data: {\n      frame: string,\n      timerId: number,\n    },\n  };\n}\nexport function isTimerFire(event: Event): event is TimerFire {\n  return event.name === Name.TIMER_FIRE;\n}\n\nexport interface RequestIdleCallback extends Instant {\n  name: Name.REQUEST_IDLE_CALLBACK;\n  args: Args&{\n    data: {\n      frame: string,\n      id: number,\n      timeout: number,\n      stackTrace?: CallFrame,\n    },\n\n  };\n}\n\nexport function isRequestIdleCallback(event: Event): event is RequestIdleCallback {\n  return event.name === Name.REQUEST_IDLE_CALLBACK;\n}\n\nexport interface WebSocketCreate extends Instant {\n  name: Name.WEB_SOCKET_CREATE;\n  args: Args&{\n    data: {\n      identifier: number,\n      url: string,\n      frame?: string,\n      workerId?: string,\n      websocketProtocol?: string,\n      stackTrace?: CallFrame,\n    },\n  };\n}\nexport function isWebSocketCreate(event: Event): event is WebSocketCreate {\n  return event.name === Name.WEB_SOCKET_CREATE;\n}\n\nexport interface WebSocketInfo extends Instant {\n  name: Name.WEB_SOCKET_DESTROY|Name.WEB_SOCKET_RECEIVE_HANDSHAKE|Name.WEB_SOCKET_RECEIVE_HANDSHAKE_REQUEST;\n  args: Args&{\n    data: ArgsData & {\n      identifier: number,\n      url: string,\n      frame?: string,\n      workerId?: string,\n    },\n  };\n}\nexport interface WebSocketTransfer extends Instant {\n  name: Name.WEB_SOCKET_SEND|Name.WEB_SOCKET_RECEIVE;\n  args: Args&{\n    data: ArgsData & {\n      identifier: number,\n      url: string,\n      dataLength: number,\n      frame?: string,\n      workerId?: string,\n    },\n  };\n}\nexport function isWebSocketInfo(event: Event): event is WebSocketInfo {\n  return event.name === Name.WEB_SOCKET_SEND_HANDSHAKE_REQUEST ||\n      event.name === Name.WEB_SOCKET_RECEIVE_HANDSHAKE_REQUEST || event.name === Name.WEB_SOCKET_DESTROY;\n}\n\nexport function isWebSocketTransfer(event: Event): event is WebSocketTransfer {\n  return event.name === Name.WEB_SOCKET_SEND || event.name === Name.WEB_SOCKET_RECEIVE;\n}\n\nexport interface WebSocketSend extends Instant {\n  name: Name.WEB_SOCKET_SEND;\n  args: Args&{\n    data: ArgsData & {\n      identifier: number,\n      url: string,\n      dataLength: number,\n      frame?: string,\n      workerId?: string,\n    },\n  };\n}\n\nexport interface WebSocketReceive extends Instant {\n  name: Name.WEB_SOCKET_RECEIVE;\n  args: Args&{\n    data: ArgsData & {\n      identifier: number,\n      url: string,\n      dataLength: number,\n      frame?: string,\n      workerId?: string,\n    },\n  };\n}\n\nexport interface WebSocketSendHandshakeRequest extends Instant {\n  name: Name.WEB_SOCKET_SEND_HANDSHAKE_REQUEST;\n  args: Args&{\n    data: {\n      frame: string,\n      identifier: number,\n    },\n  };\n}\nexport function isWebSocketSendHandshakeRequest(event: Event): event is WebSocketSendHandshakeRequest {\n  return event.name === Name.WEB_SOCKET_SEND_HANDSHAKE_REQUEST;\n}\n\nexport interface WebSocketReceiveHandshakeResponse extends Instant {\n  name: Name.WEB_SOCKET_RECEIVE_HANDSHAKE_REQUEST;\n  args: Args&{\n    data: {\n      frame: string,\n      identifier: number,\n    },\n  };\n}\nexport function isWebSocketReceiveHandshakeResponse(event: Event): event is WebSocketReceiveHandshakeResponse {\n  return event.name === Name.WEB_SOCKET_RECEIVE_HANDSHAKE_REQUEST;\n}\n\nexport interface WebSocketDestroy extends Instant {\n  name: Name.WEB_SOCKET_DESTROY;\n  args: Args&{\n    data: {\n      frame: string,\n      identifier: number,\n    },\n  };\n}\nexport function isWebSocketDestroy(event: Event): event is WebSocketDestroy {\n  return event.name === Name.WEB_SOCKET_DESTROY;\n}\n\nexport type WebSocketTraceEvent = WebSocketCreate|WebSocketInfo|WebSocketTransfer;\nexport function isWebSocketTraceEvent(event: Event): event is WebSocketTraceEvent {\n  return isWebSocketCreate(event) || isWebSocketInfo(event) || isWebSocketTransfer(event);\n}\n\nexport type WebSocketEvent = WebSocketTraceEvent|SyntheticWebSocketConnection;\nexport function isWebSocketEvent(event: Event): event is WebSocketTraceEvent|SyntheticWebSocketConnection {\n  return isWebSocketTraceEvent(event) || isSyntheticWebSocketConnection(event);\n}\n\nexport interface V8Compile extends Complete {\n  name: Name.COMPILE;\n  args: Args&{\n    data?: {\n      url?: string,\n      columnNumber?: number,\n      consumedCacheSize?: number,\n      cacheRejected?: boolean,\n      cacheKind?: 'full'|'normal',\n      lineNumber?: number,\n      notStreamedReason?: string,\n      streamed?: boolean,\n      eager?: boolean,\n    },\n    fileName?: string,\n  };\n}\nexport function isV8Compile(event: Event): event is V8Compile {\n  return event.name === Name.COMPILE;\n}\n\nexport interface FunctionCall extends Complete {\n  name: Name.FUNCTION_CALL;\n  args: Args&{\n    data?: Partial<CallFrame>& {\n      frame?: string,\n    },\n  };\n}\nexport function isFunctionCall(event: Event): event is FunctionCall {\n  return event.name === Name.FUNCTION_CALL;\n}\n\nexport interface SchedulePostTaskCallback extends Instant {\n  name: Name.SCHEDULE_POST_TASK_CALLBACK;\n  args: Args&{\n    data: {\n      taskId: number,\n      priority: 'user-blocking'|'user-visible'|'background',\n      delay: Milli,\n      frame?: string,\n      stackTrace?: CallFrame,\n    },\n  };\n}\nexport function isSchedulePostTaskCallback(event: Event): event is SchedulePostTaskCallback {\n  return event.name === Name.SCHEDULE_POST_TASK_CALLBACK;\n}\n\nexport interface RunPostTaskCallback extends Complete {\n  name: Name.RUN_POST_TASK_CALLBACK;\n  args: Args&{\n    data: {\n      taskId: number,\n      priority: 'user-blocking'|'user-visible'|'background',\n      delay: Milli,\n      frame?: string,\n    },\n  };\n}\nexport function isRunPostTaskCallback(event: Event): event is RunPostTaskCallback {\n  return event.name === Name.RUN_POST_TASK_CALLBACK;\n}\n\nexport interface AbortPostTaskCallback extends Complete {\n  name: Name.ABORT_POST_TASK_CALLBACK;\n  args: Args&{\n    data: {\n      taskId: number,\n      frame?: string,\n      stackTrace?: CallFrame,\n    },\n  };\n}\nexport function isAbortPostTaskCallback(event: Event): event is RunPostTaskCallback {\n  return event.name === Name.ABORT_POST_TASK_CALLBACK;\n}\n\n/**\n * Generally, before JS is executed, a trace event is dispatched that\n * parents the JS calls. These we call \"invocation\" events. This\n * function determines if an event is one of such. Note: these are also\n * commonly referred to as \"JS entry points\".\n */\nexport function isJSInvocationEvent(event: Event): boolean {\n  switch (event.name) {\n    case Name.RUN_MICROTASKS:\n    case Name.FUNCTION_CALL:\n    // TODO(paulirish): Define types for these Evaluate* events\n    case Name.EVALUATE_SCRIPT:\n    case Name.EVALUATE_MODULE:\n    case Name.EVENT_DISPATCH:\n    case Name.V8_EXECUTE:\n    case Name.V8_CONSOLE_RUN_TASK:\n      return true;\n  }\n  // Also consider any new v8 trace events. (eg 'V8.RunMicrotasks' and 'v8.run')\n  if (event.name.startsWith('v8') || event.name.startsWith('V8')) {\n    return true;\n  }\n  if (isConsoleRunTask(event)) {\n    return true;\n  }\n  return false;\n}\nexport interface ConsoleRunTask extends Event {\n  args: Args&{\n    data: ArgsData & {\n      sampleTraceId?: number,\n    },\n  };\n  name: Name.V8_CONSOLE_RUN_TASK;\n}\n\nexport function isConsoleRunTask(event: Event): event is ConsoleRunTask {\n  return event.name === Name.V8_CONSOLE_RUN_TASK;\n}\n\nexport interface FlowEvent extends Event {\n  // Contains a flow id created by perfetto for the flow this phase\n  // event belongs to.\n  id: number;\n  ph: Phase.FLOW_START|Phase.FLOW_END|Phase.FLOW_STEP;\n}\n\nexport function isFlowPhaseEvent(event: Event): event is FlowEvent {\n  return event.ph === Phase.FLOW_START || event.ph === Phase.FLOW_STEP || event.ph === Phase.FLOW_END;\n}\n\nexport interface ParseAuthorStyleSheet extends Complete {\n  name: Name.PARSE_AUTHOR_STYLE_SHEET;\n  args?: Args&{\n    data: {\n      stylesheetUrl: string,\n    },\n  };\n}\n\nexport function isParseAuthorStyleSheetEvent(event: Event): event is ParseAuthorStyleSheet {\n  return event.name === Name.PARSE_AUTHOR_STYLE_SHEET;\n}\n\n/**\n * This is an exhaustive list of events we track in the Performance\n * panel. Note not all of them are necessarliry shown in the flame\n * chart, some of them we only use for parsing.\n * TODO(crbug.com/1428024): Complete this enum.\n */\nexport const enum Name {\n  /* Metadata */\n  THREAD_NAME = 'thread_name',\n\n  /* Task */\n  PROGRAM = 'Program',\n  RUN_TASK = 'RunTask',\n  ASYNC_TASK = 'AsyncTask',\n  RUN_MICROTASKS = 'RunMicrotasks',\n\n  /* Load */\n  XHR_LOAD = 'XHRLoad',\n  XHR_READY_STATE_CHANGED = 'XHRReadyStateChange',\n  /* Parse */\n  PARSE_HTML = 'ParseHTML',\n  PARSE_CSS = 'ParseAuthorStyleSheet',\n  /* V8 */\n  COMPILE_CODE = 'V8.CompileCode',\n  COMPILE_MODULE = 'V8.CompileModule',\n  // Although V8 emits the V8.CompileScript event, the event that actually\n  // contains the useful information about the script (URL, etc), is contained\n  // in the v8.compile event.\n  // Yes, it is all lowercase compared to all the rest of the V8... events,\n  // that is not a typo :)\n  COMPILE = 'v8.compile',\n  COMPILE_SCRIPT = 'V8.CompileScript',\n  OPTIMIZE = 'V8.OptimizeCode',\n  WASM_STREAM_FROM_RESPONSE_CALLBACK = 'v8.wasm.streamFromResponseCallback',\n  WASM_COMPILED_MODULE = 'v8.wasm.compiledModule',\n  WASM_CACHED_MODULE = 'v8.wasm.cachedModule',\n  WASM_MODULE_CACHE_HIT = 'v8.wasm.moduleCacheHit',\n  WASM_MODULE_CACHE_INVALID = 'v8.wasm.moduleCacheInvalid',\n  /* Js */\n  PROFILE_CALL = 'ProfileCall',\n  EVALUATE_SCRIPT = 'EvaluateScript',\n  FUNCTION_CALL = 'FunctionCall',\n  EVENT_DISPATCH = 'EventDispatch',\n  EVALUATE_MODULE = 'v8.evaluateModule',\n  REQUEST_MAIN_THREAD_FRAME = 'RequestMainThreadFrame',\n  REQUEST_ANIMATION_FRAME = 'RequestAnimationFrame',\n  CANCEL_ANIMATION_FRAME = 'CancelAnimationFrame',\n  FIRE_ANIMATION_FRAME = 'FireAnimationFrame',\n  REQUEST_IDLE_CALLBACK = 'RequestIdleCallback',\n  CANCEL_IDLE_CALLBACK = 'CancelIdleCallback',\n  FIRE_IDLE_CALLBACK = 'FireIdleCallback',\n  TIMER_INSTALL = 'TimerInstall',\n  TIMER_REMOVE = 'TimerRemove',\n  TIMER_FIRE = 'TimerFire',\n  WEB_SOCKET_CREATE = 'WebSocketCreate',\n  WEB_SOCKET_SEND_HANDSHAKE = 'WebSocketSendHandshakeRequest',\n  WEB_SOCKET_RECEIVE_HANDSHAKE = 'WebSocketReceiveHandshakeResponse',\n  WEB_SOCKET_DESTROY = 'WebSocketDestroy',\n  WEB_SOCKET_SEND = 'WebSocketSend',\n  WEB_SOCKET_RECEIVE = 'WebSocketReceive',\n  CRYPTO_DO_ENCRYPT = 'DoEncrypt',\n  CRYPTO_DO_ENCRYPT_REPLY = 'DoEncryptReply',\n  CRYPTO_DO_DECRYPT = 'DoDecrypt',\n  CRYPTO_DO_DECRYPT_REPLY = 'DoDecryptReply',\n  CRYPTO_DO_DIGEST = 'DoDigest',\n  CRYPTO_DO_DIGEST_REPLY = 'DoDigestReply',\n  CRYPTO_DO_SIGN = 'DoSign',\n  CRYPTO_DO_SIGN_REPLY = 'DoSignReply',\n  CRYPTO_DO_VERIFY = 'DoVerify',\n  CRYPTO_DO_VERIFY_REPLY = 'DoVerifyReply',\n  V8_EXECUTE = 'V8.Execute',\n  V8_CONSOLE_RUN_TASK = 'V8Console::runTask',\n  SCHEDULE_POST_TASK_CALLBACK = 'SchedulePostTaskCallback',\n  RUN_POST_TASK_CALLBACK = 'RunPostTaskCallback',\n  ABORT_POST_TASK_CALLBACK = 'AbortPostTaskCallback',\n  DEBUGGER_ASYNC_TASK_RUN = 'v8::Debugger::AsyncTaskRun',\n  DEBUGGER_ASYNC_TASK_SCHEDULED = 'v8::Debugger::AsyncTaskScheduled',\n\n  /* Gc */\n  GC = 'GCEvent',\n  DOMGC = 'BlinkGC.AtomicPhase',\n  MAJOR_GC = 'MajorGC',\n  MINOR_GC = 'MinorGC',\n  GC_COLLECT_GARBARGE = 'BlinkGC.AtomicPhase',\n  CPPGC_SWEEP = 'CppGC.IncrementalSweep',\n\n  /* Layout */\n  SCHEDULE_STYLE_RECALCULATION = 'ScheduleStyleRecalculation',\n  LAYOUT = 'Layout',\n  UPDATE_LAYOUT_TREE = 'UpdateLayoutTree',\n  INVALIDATE_LAYOUT = 'InvalidateLayout',\n  LAYOUT_INVALIDATION_TRACKING = 'LayoutInvalidationTracking',\n  COMPUTE_INTERSECTION = 'ComputeIntersections',\n  HIT_TEST = 'HitTest',\n  PRE_PAINT = 'PrePaint',\n  LAYERIZE = 'Layerize',\n  LAYOUT_SHIFT = 'LayoutShift',\n  SYNTHETIC_LAYOUT_SHIFT = 'SyntheticLayoutShift',\n  SYNTHETIC_LAYOUT_SHIFT_CLUSTER = 'SyntheticLayoutShiftCluster',\n  UPDATE_LAYER_TREE = 'UpdateLayerTree',\n  SCHEDULE_STYLE_INVALIDATION_TRACKING = 'ScheduleStyleInvalidationTracking',\n  STYLE_RECALC_INVALIDATION_TRACKING = 'StyleRecalcInvalidationTracking',\n  STYLE_INVALIDATOR_INVALIDATION_TRACKING = 'StyleInvalidatorInvalidationTracking',\n  SELECTOR_STATS = 'SelectorStats',\n  BEGIN_COMMIT_COMPOSITOR_FRAME = 'BeginCommitCompositorFrame',\n  PARSE_META_VIEWPORT = 'ParseMetaViewport',\n\n  /* Paint */\n  SCROLL_LAYER = 'ScrollLayer',\n  UPDATE_LAYER = 'UpdateLayer',\n  PAINT_SETUP = 'PaintSetup',\n  PAINT = 'Paint',\n  PAINT_IMAGE = 'PaintImage',\n  COMMIT = 'Commit',\n  COMPOSITE_LAYERS = 'CompositeLayers',\n  RASTER_TASK = 'RasterTask',\n  IMAGE_DECODE_TASK = 'ImageDecodeTask',\n  IMAGE_UPLOAD_TASK = 'ImageUploadTask',\n  DECODE_IMAGE = 'Decode Image',\n  DRAW_LAZY_PIXEL_REF = 'Draw LazyPixelRef',\n  DECODE_LAZY_PIXEL_REF = 'Decode LazyPixelRef',\n  GPU_TASK = 'GPUTask',\n  RASTERIZE = 'Rasterize',\n  EVENT_TIMING = 'EventTiming',\n\n  /* Compile */\n  OPTIMIZE_CODE = 'V8.OptimizeCode',\n  CACHE_SCRIPT = 'v8.produceCache',\n  CACHE_MODULE = 'v8.produceModuleCache',\n  // V8Sample events are coming from tracing and contain raw stacks with function addresses.\n  // After being processed with help of JitCodeAdded and JitCodeMoved events they\n  // get translated into function infos and stored as stacks in JSSample events.\n  V8_SAMPLE = 'V8Sample',\n  JIT_CODE_ADDED = 'JitCodeAdded',\n  JIT_CODE_MOVED = 'JitCodeMoved',\n  STREAMING_COMPILE_SCRIPT = 'v8.parseOnBackground',\n  STREAMING_COMPILE_SCRIPT_WAITING = 'v8.parseOnBackgroundWaiting',\n  STREAMING_COMPILE_SCRIPT_PARSING = 'v8.parseOnBackgroundParsing',\n  BACKGROUND_DESERIALIZE = 'v8.deserializeOnBackground',\n  FINALIZE_DESERIALIZATION = 'V8.FinalizeDeserialization',\n\n  /* Markers */\n  COMMIT_LOAD = 'CommitLoad',\n  MARK_LOAD = 'MarkLoad',\n  MARK_DOM_CONTENT = 'MarkDOMContent',\n  MARK_FIRST_PAINT = 'firstPaint',\n  MARK_FCP = 'firstContentfulPaint',\n  MARK_LCP_CANDIDATE = 'largestContentfulPaint::Candidate',\n  MARK_LCP_INVALIDATE = 'largestContentfulPaint::Invalidate',\n  NAVIGATION_START = 'navigationStart',\n  CONSOLE_TIME = 'ConsoleTime',\n  USER_TIMING = 'UserTiming',\n  INTERACTIVE_TIME = 'InteractiveTime',\n  TIME_STAMP = 'TimeStamp',\n\n  /* Frames */\n  BEGIN_FRAME = 'BeginFrame',\n  NEEDS_BEGIN_FRAME_CHANGED = 'NeedsBeginFrameChanged',\n  BEGIN_MAIN_THREAD_FRAME = 'BeginMainThreadFrame',\n  ACTIVATE_LAYER_TREE = 'ActivateLayerTree',\n  DRAW_FRAME = 'DrawFrame',\n  DROPPED_FRAME = 'DroppedFrame',\n  FRAME_STARTED_LOADING = 'FrameStartedLoading',\n  PIPELINE_REPORTER = 'PipelineReporter',\n  SCREENSHOT = 'Screenshot',\n\n  /* Network request events */\n  RESOURCE_WILL_SEND_REQUEST = 'ResourceWillSendRequest',\n  RESOURCE_SEND_REQUEST = 'ResourceSendRequest',\n  RESOURCE_RECEIVE_RESPONSE = 'ResourceReceiveResponse',\n  RESOURCE_RECEIVE_DATA = 'ResourceReceivedData',\n  RESOURCE_FINISH = 'ResourceFinish',\n  RESOURCE_MARK_AS_CACHED = 'ResourceMarkAsCached',\n\n  /* Web sockets */\n  WEB_SOCKET_SEND_HANDSHAKE_REQUEST = 'WebSocketSendHandshakeRequest',\n  WEB_SOCKET_RECEIVE_HANDSHAKE_REQUEST = 'WebSocketReceiveHandshakeResponse',\n\n  /* CPU Profiling */\n  CPU_PROFILE = 'CpuProfile',\n  PROFILE = 'Profile',\n  START_PROFILING = 'CpuProfiler::StartProfiling',\n  PROFILE_CHUNK = 'ProfileChunk',\n  UPDATE_COUNTERS = 'UpdateCounters',\n\n  JS_SAMPLE = 'JSSample',\n\n  /* Other */\n  ANIMATION = 'Animation',\n  PARSE_AUTHOR_STYLE_SHEET = 'ParseAuthorStyleSheet',\n  EMBEDDER_CALLBACK = 'EmbedderCallback',\n  SET_LAYER_TREE_ID = 'SetLayerTreeId',\n  TRACING_STARTED_IN_PAGE = 'TracingStartedInPage',\n  TRACING_STARTED_IN_BROWSER = 'TracingStartedInBrowser',\n  TRACING_SESSION_ID_FOR_WORKER = 'TracingSessionIdForWorker',\n  LAZY_PIXEL_REF = 'LazyPixelRef',\n  LAYER_TREE_HOST_IMPL_SNAPSHOT = 'cc::LayerTreeHostImpl',\n  PICTURE_SNAPSHOT = 'cc::Picture',\n  DISPLAY_ITEM_LIST_SNAPSHOT = 'cc::DisplayItemList',\n  INPUT_LATENCY_MOUSE_MOVE = 'InputLatency::MouseMove',\n  INPUT_LATENCY_MOUSE_WHEEL = 'InputLatency::MouseWheel',\n  IMPL_SIDE_FLING = 'InputHandlerProxy::HandleGestureFling::started',\n\n  SCHEDULE_POST_MESSAGE = 'SchedulePostMessage',\n  HANDLE_POST_MESSAGE = 'HandlePostMessage',\n\n  RENDER_FRAME_IMPL_CREATE_CHILD_FRAME = 'RenderFrameImpl::createChildFrame',\n  LAYOUT_IMAGE_UNSIZED = 'LayoutImageUnsized',\n\n  DOM_LOADING = 'domLoading',\n  BEGIN_REMOTE_FONT_LOAD = 'BeginRemoteFontLoad',\n  REMOTE_FONT_LOADED = 'RemoteFontLoaded',\n\n  ANIMATION_FRAME = 'AnimationFrame',\n  ANIMATION_FRAME_PRESENTATION = 'AnimationFrame::Presentation',\n\n  SYNTHETIC_NETWORK_REQUEST = 'SyntheticNetworkRequest',\n  USER_TIMING_MEASURE = 'UserTiming::Measure',\n\n  LINK_PRECONNECT = 'LinkPreconnect',\n}\n\n// NOT AN EXHAUSTIVE LIST: just some categories we use and refer\n// to in multiple places.\nexport const Categories = {\n  Console: 'blink.console',\n  UserTiming: 'blink.user_timing',\n  Loading: 'loading',\n} as const;\n\n/**\n * The frames implementation in handlers/FramesHandler is considered \"legacy\"\n * in that it is based on the old TimelineModel implementation rather than\n * following the pattern of the other handlers. This will change in time as we\n * migrate the frames track to use AnimationFrame events, but for now we\n * maintain it because the effort required to migrate was large.\n * Consequently, the types we use through the codebase to refer to these frames\n * usually use ModelHandlers.FramesHandler.TimelineFrame, but in\n * trace/types/*.ts we cannot refer to types defined in the Handlers. To avoid a\n * circular dependency, we define these interfaces here which are implemented by\n * the classes in FramesHandler.ts, but they can also be used to refer to\n * instances of frames in trace/types/*.ts which is unable to import from\n * handlers.\n */\nexport interface LegacyTimelineFrame extends Event {\n  startTime: Micro;\n  startTimeOffset: Micro;\n  endTime: Micro;\n  duration: Micro;\n  idle: boolean;\n  dropped: boolean;\n  isPartial: boolean;\n  layerTree: LegacyFrameLayerTreeData|null;\n  paints: LegacyLayerPaintEvent[];\n  mainFrameId?: number;\n  readonly seqId: number;\n  index: number;\n}\n\nexport function isLegacyTimelineFrame(data: Event): data is LegacyTimelineFrame {\n  return 'idle' in data && typeof data.idle === 'boolean';\n}\n\nexport interface LegacyFrameLayerTreeData {\n  entry: LayerTreeHostImplSnapshot;\n  paints: LegacyLayerPaintEvent[];\n}\n\nexport interface LegacyLayerPaintEvent {\n  layerId(): number;\n  event(): Paint;\n  picture(): LegacyLayerPaintEventPicture|null;\n}\n\nexport interface LegacyLayerPaintEventPicture {\n  rect: number[];\n  serializedPicture: string;\n}\n\nexport interface TargetRundownEvent extends Event {\n  cat: 'disabled-by-default-devtools.target-rundown';\n  name: 'ScriptCompiled';\n  args: Args&{\n    data?: {\n      frame: Protocol.Page.FrameId,\n      frameType: string,\n      url: string,\n      isolate: string,\n      v8context: string,\n      origin: string,\n      scriptId: number,\n      isDefault?: boolean,\n      contextType?: string,\n    },\n  };\n}\n\nexport function isTargetRundownEvent(event: Event): event is TargetRundownEvent {\n  return event.cat === 'disabled-by-default-devtools.target-rundown' && event.name === 'ScriptCompiled';\n}\n\nexport interface V8SourceRundownEvent extends Event {\n  cat: 'disabled-by-default-devtools.v8-source-rundown';\n  name: 'ScriptCatchup';\n  args: Args&{\n    data: {\n      isolate: string,\n      executionContextId: Protocol.Runtime.ExecutionContextId,\n      scriptId: number,\n      hash: string,\n      isModule: boolean,\n      hasSourceUrl: boolean,\n      url?: string,\n      sourceUrl?: string,\n      sourceMapUrl?: string,\n      sourceMapUrlElided?: boolean,\n    },\n  };\n}\n\nexport function isV8SourceRundownEvent(event: Event): event is V8SourceRundownEvent {\n  return event.cat === 'disabled-by-default-devtools.v8-source-rundown' && event.name === 'ScriptCatchup';\n}\n\nexport interface V8SourceRundownSourcesScriptCatchupEvent extends Event {\n  cat: 'disabled-by-default-devtools.v8-source-rundown-sources';\n  name: 'ScriptCatchup';\n  args: Args&{\n    data: {\n      isolate: string,\n      scriptId: number,\n      length: number,\n      sourceText: string,\n    },\n  };\n}\n\nexport function isV8SourceRundownSourcesScriptCatchupEvent(event: Event):\n    event is V8SourceRundownSourcesScriptCatchupEvent {\n  return event.cat === 'disabled-by-default-devtools.v8-source-rundown-sources' && event.name === 'ScriptCatchup';\n}\n\nexport interface V8SourceRundownSourcesLargeScriptCatchupEvent extends Event {\n  cat: 'disabled-by-default-devtools.v8-source-rundown-sources';\n  name: 'LargeScriptCatchup';\n  args: Args&{\n    data: {\n      isolate: string,\n      scriptId: number,\n      splitIndex: number,\n      splitCount: number,\n      sourceText: string,\n    },\n  };\n}\n\nexport function isV8SourceRundownSourcesLargeScriptCatchupEvent(event: Event):\n    event is V8SourceRundownSourcesLargeScriptCatchupEvent {\n  return event.cat === 'disabled-by-default-devtools.v8-source-rundown-sources' && event.name === 'LargeScriptCatchup';\n}\n\nexport interface V8SourceRundownSourcesStubScriptCatchupEvent extends Event {\n  cat: 'disabled-by-default-devtools.v8-source-rundown-sources';\n  name: 'StubScriptCatchup';\n  args: Args&{\n    data: {\n      isolate: string,\n      scriptId: number,\n    },\n  };\n}\n\nexport function isAnyScriptCatchupEvent(event: Event): event is V8SourceRundownSourcesScriptCatchupEvent|\n    V8SourceRundownSourcesLargeScriptCatchupEvent|V8SourceRundownSourcesStubScriptCatchupEvent {\n  return event.cat === 'disabled-by-default-devtools.v8-source-rundown-sources';\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as ThirdPartyWeb from '../../../third_party/third-party-web/third-party-web.js';\nimport * as Extras from '../extras/extras.js';\nimport * as Handlers from '../handlers/handlers.js';\nimport type * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /** Title of an insight that provides details about the code on a web page that the user doesn't control (referred to as \"third-party code\"). */\n  title: '3rd parties',\n  /**\n   * @description Description of a DevTools insight that identifies the code on the page that the user doesn't control.\n   * This is displayed after a user expands the section to see more. No character length limits.\n   */\n  description: '3rd party code can significantly impact load performance. ' +\n      '[Reduce and defer loading of 3rd party code](https://web.dev/articles/optimizing-content-efficiency-loading-third-party-javascript/) to prioritize your page\\'s content.',\n  /** Label for a table column that displays the name of a third-party provider. */\n  columnThirdParty: '3rd party',\n  /** Label for a column in a data table; entries will be the download size of a web resource in kilobytes. */\n  columnTransferSize: 'Transfer size',\n  /** Label for a table column that displays how much time each row spent running on the main thread, entries will be the number of milliseconds spent. */\n  columnMainThreadTime: 'Main thread time',\n  /**\n   * @description Text block indicating that no third party content was detected on the page\n   */\n  noThirdParties: 'No third parties found',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/ThirdParties.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type ThirdPartiesInsightModel = InsightModel<typeof UIStrings, {\n  /** The entity for this navigation's URL. Any other entity is from a third party. */\n  entitySummaries: Extras.ThirdParties.EntitySummary[],\n  firstPartyEntity?: Extras.ThirdParties.Entity,\n}>;\n\nfunction getRelatedEvents(\n    summaries: Extras.ThirdParties.EntitySummary[],\n    firstPartyEntity: Extras.ThirdParties.Entity|undefined): Types.Events.Event[] {\n  const relatedEvents = [];\n  for (const summary of summaries) {\n    if (summary.entity !== firstPartyEntity) {\n      relatedEvents.push(...summary.relatedEvents);\n    }\n  }\n\n  return relatedEvents;\n}\n\nfunction finalize(partialModel: PartialInsightModel<ThirdPartiesInsightModel>): ThirdPartiesInsightModel {\n  return {\n    insightKey: InsightKeys.THIRD_PARTIES,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.ALL,\n    state: partialModel.entitySummaries.find(summary => summary.entity !== partialModel.firstPartyEntity) ?\n        'informative' :\n        'pass',\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): ThirdPartiesInsightModel {\n  const entitySummaries =\n      Extras.ThirdParties.summarizeByThirdParty(parsedTrace as Handlers.Types.ParsedTrace, context.bounds);\n\n  const firstPartyUrl = context.navigation?.args.data?.documentLoaderURL ?? parsedTrace.Meta.mainFrameURL;\n  const firstPartyEntity = ThirdPartyWeb.ThirdPartyWeb.getEntity(firstPartyUrl) ||\n      Handlers.Helpers.makeUpEntity(parsedTrace.Renderer.entityMappings.createdEntityCache, firstPartyUrl);\n\n  return finalize({\n    relatedEvents: getRelatedEvents(entitySummaries, firstPartyEntity),\n    firstPartyEntity,\n    entitySummaries,\n  });\n}\n\nexport function createOverlaysForSummary(summary: Extras.ThirdParties.EntitySummary): Types.Overlays.Overlay[] {\n  const overlays = [];\n  for (const event of summary.relatedEvents) {\n    // The events found for a third party can be vast, as they gather every\n    // single main thread task along with everything else on the page. If the\n    // main thread is busy with large icicles, we can easily create tens of\n    // thousands of overlays. Therefore, only create overlays for events of at least 1ms.\n    if (event.dur === undefined || event.dur < 1_000) {\n      continue;\n    }\n\n    const overlay: Types.Overlays.Overlay = {\n      type: 'ENTRY_OUTLINE',\n      entry: event,\n      outlineReason: 'INFO',\n    };\n    overlays.push(overlay);\n  }\n  return overlays;\n}\n\nexport function createOverlays(model: ThirdPartiesInsightModel): Types.Overlays.Overlay[] {\n  const overlays: Types.Overlays.Overlay[] = [];\n  const summaries = model.entitySummaries ?? [];\n  for (const summary of summaries) {\n    if (summary.entity === model.firstPartyEntity) {\n      continue;\n    }\n\n    const summaryOverlays = createOverlaysForSummary(summary);\n    overlays.push(...summaryOverlays);\n  }\n\n  return overlays;\n}\n", "// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {\n  InsightCategory,\n  InsightKeys,\n  type InsightModel,\n  type InsightSetContext,\n  InsightWarning,\n  type PartialInsightModel,\n} from './types.js';\n\nexport const UIStrings = {\n  /** Title of an insight that provides details about if the page's viewport is optimized for mobile viewing. */\n  title: 'Optimize viewport for mobile',\n  /**\n   * @description Text to tell the user how a viewport meta element can improve performance. \\xa0 is a non-breaking space\n   */\n  description:\n      'Tap interactions may be [delayed by up to 300\\xA0ms](https://developer.chrome.com/blog/300ms-tap-delay-gone-away/) if the viewport is not optimized for mobile.',\n  /**\n   * @description Text for a label describing the portion of an interaction event that was delayed due to a bad mobile viewport.\n   */\n  mobileTapDelayLabel: 'Mobile tap delay',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/insights/Viewport.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport type ViewportInsightModel = InsightModel<typeof UIStrings, {\n  mobileOptimized: boolean | null,\n  viewportEvent?: Types.Events.ParseMetaViewport,\n  longPointerInteractions?: Types.Events.SyntheticInteractionPair[],\n}>;\n\nfunction finalize(partialModel: PartialInsightModel<ViewportInsightModel>): ViewportInsightModel {\n  return {\n    insightKey: InsightKeys.VIEWPORT,\n    strings: UIStrings,\n    title: i18nString(UIStrings.title),\n    description: i18nString(UIStrings.description),\n    category: InsightCategory.INP,\n    state: partialModel.mobileOptimized === false ? 'fail' : 'pass',\n    ...partialModel,\n  };\n}\n\nexport function generateInsight(\n    parsedTrace: Handlers.Types.ParsedTrace, context: InsightSetContext): ViewportInsightModel {\n  const viewportEvent = parsedTrace.UserInteractions.parseMetaViewportEvents.find(event => {\n    if (event.args.data.frame !== context.frameId) {\n      return false;\n    }\n\n    return Helpers.Timing.eventIsInBounds(event, context.bounds);\n  });\n\n  const compositorEvents = parsedTrace.UserInteractions.beginCommitCompositorFrameEvents.filter(event => {\n    if (event.args.frame !== context.frameId) {\n      return false;\n    }\n\n    // Commit compositor frame events can be emitted before the viewport tag is parsed.\n    // We shouldn't count these since the browser hasn't had time to make the viewport mobile optimized.\n    if (viewportEvent && event.ts < viewportEvent.ts) {\n      return false;\n    }\n\n    return Helpers.Timing.eventIsInBounds(event, context.bounds);\n  });\n\n  if (!compositorEvents.length) {\n    // Trace doesn't have the data we need.\n    return finalize({\n      mobileOptimized: null,\n      warnings: [InsightWarning.NO_LAYOUT],\n    });\n  }\n\n  // Returns true only if all events are mobile optimized.\n  for (const event of compositorEvents) {\n    if (!event.args.is_mobile_optimized) {\n      // Grab all the pointer events with at least 50ms of input delay.\n      const longPointerInteractions = [...parsedTrace.UserInteractions.interactionsOverThreshold.values()].filter(\n          interaction => Handlers.ModelHandlers.UserInteractions.categoryOfInteraction(interaction) === 'POINTER' &&\n              interaction.inputDelay >= 50_000);\n\n      // The actual impact varies between 0 and 300.\n      // Using inputDelay as the closest thing we have for measuring this, though inputDelay may be high for other reasons.\n      // b/371566378#comment8\n      const inputDelay = Math.max(0, ...longPointerInteractions.map(interaction => interaction.inputDelay)) / 1000;\n      const inpMetricSavings = Platform.NumberUtilities.clamp(inputDelay, 0, 300);\n\n      return finalize({\n        mobileOptimized: false,\n        viewportEvent,\n        longPointerInteractions,\n        metricSavings: {INP: inpMetricSavings as Types.Timing.Milli},\n      });\n    }\n  }\n\n  return finalize({\n    mobileOptimized: true,\n    viewportEvent,\n  });\n}\n\nexport function createOverlays(model: ViewportInsightModel): Types.Overlays.Overlay[] {\n  if (!model.longPointerInteractions) {\n    return [];\n  }\n\n  return model.longPointerInteractions.map(interaction => {\n    const delay = Math.min(interaction.inputDelay, 300 * 1000);\n    const bounds = Helpers.Timing.traceWindowFromMicroSeconds(\n        Types.Timing.Micro(interaction.ts),\n        Types.Timing.Micro(interaction.ts + delay),\n    );\n    return {\n      type: 'TIMESPAN_BREAKDOWN',\n      entry: interaction,\n      sections: [{bounds, label: i18nString(UIStrings.mobileTapDelayLabel), showDuration: true}],\n      renderLocation: 'ABOVE_EVENT',\n    };\n  });\n}\n"],
  "mappings": "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",
  "names": ["scope", "Helpers", "InsightWarning", "InsightCategory", "UIStrings", "createOverlays", "generateInsight", "i18nString", "i18n", "Helpers", "Types", "UIStrings", "str_", "i18nString", "finalize", "generateInsight", "createOverlays", "UIStrings", "createOverlays", "generateInsight", "i18nString", "i18n", "Helpers", "Types", "UIStrings", "str_", "i18nString", "finalize", "generateInsight", "createOverlays", "UIStrings", "createOverlays", "generateInsight", "i18nString", "i18n", "Handlers", "Helpers", "Types", "UIStrings", "str_", "i18nString", "finalize", "generateInsight", "createOverlays", "UIStrings", "createOverlays", "generateInsight", "i18nString", "i18n", "Helpers", "UIStrings", "str_", "i18nString", "finalize", "generateInsight", "createOverlays", "UIStrings", "createOverlays", "generateInsight", "i18nString", "i18n", "Platform", "Helpers", "Types", "UIStrings", "str_", "i18nString", "finalize", "generateInsight", "createOverlays", "UIStrings", "createOverlays", "generateInsight", "i18nString", "i18n", "Platform", "Extras", "Helpers", "Types", "UIStrings", "str_", "i18nString", "finalize", "generateInsight", "createOverlays", "UIStrings", "createOverlayForRequest", "createOverlays", "generateInsight", "i18nString", "i18n", "Helpers", "UIStrings", "str_", "i18nString", "ImageOptimizationType", "finalize", "generateInsight", "createOverlayForRequest", "createOverlays", "UIStrings", "createOverlays", "generateInsight", "i18nString", "i18n", "Helpers", "UIStrings", "str_", "i18nString", "finalize", "generateInsight", "createOverlays", "UIStrings", "createOverlays", "generateInsight", "i18nString", "i18n", "Handlers", "Helpers", "Types", "UIStrings", "str_", "i18nString", "finalize", "generateInsight", "createOverlays", "UIStrings", "createOverlays", "generateInsight", "i18nString", "i18n", "Handlers", "Helpers", "Types", "UIStrings", "str_", "i18nString", "finalize", "generateInsight", "createOverlays", "UIStrings", "createOverlays", "generateInsight", "i18nString", "i18n", "Helpers", "UIStrings", "str_", "i18nString", "finalize", "generateInsight", "createOverlays", "UIStrings", "createOverlayForRequest", "createOverlays", "generateInsight", "i18nString", "i18n", "Platform", "Handlers", "Helpers", "UIStrings", "str_", "i18nString", "finalize", "generateInsight", "createOverlayForRequest", "createOverlays", "UIStrings", "createOverlays", "generateInsight", "i18nString", "i18n", "Platform", "Helpers", "Types", "UIStrings", "str_", "i18nString", "finalize", "request", "node", "generateInsight", "createOverlays", "overlays", "UIStrings", "createOverlayForRequest", "createOverlays", "generateInsight", "i18nString", "i18n", "Handlers", "Helpers", "UIStrings", "str_", "i18nString", "estimateSavingsWithGraphs", "node", "finalize", "generateInsight", "createOverlayForRequest", "createOverlays", "UIStrings", "createOverlays", "generateInsight", "i18nString", "i18n", "Helpers", "SelectorTimingsKey", "Types", "UIStrings", "str_", "i18nString", "finalize", "generateInsight", "createOverlays", "UIStrings", "createOverlays", "generateInsight", "i18nString", "i18n", "Extras", "Handlers", "UIStrings", "str_", "i18nString", "finalize", "generateInsight", "createOverlays", "UIStrings", "createOverlays", "generateInsight", "i18nString", "i18n", "Platform", "Handlers", "Helpers", "Types", "UIStrings", "str_", "i18nString", "finalize", "generateInsight", "createOverlays"]
}
