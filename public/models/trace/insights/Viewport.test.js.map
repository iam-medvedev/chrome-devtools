{"version":3,"file":"Viewport.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/Viewport.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,uBAAuB,EAAC,MAAM,wCAAwC,CAAC;AAC/E,OAAO,EACL,0BAA0B,EAC1B,eAAe,EACf,iBAAiB,EACjB,YAAY,GACb,MAAM,oCAAoC,CAAC;AAC5C,OAAO,KAAK,KAAK,MAAM,aAAa,CAAC;AAErC,uBAAuB,CAAC,UAAU,EAAE;IAClC,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAC,GAAG,MAAM,YAAY,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;QACxE,MAAM,OAAO,GACT,iBAAiB,CAAC,UAAU,EAAE,QAAQ,EAAE,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAE3G,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,EAAC,IAAI,EAAC,GAAG,MAAM,YAAY,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;QAC9D,MAAM,UAAU,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,CAAC,CAAC;QACjF,MAAM,OAAO,GAAG,0BAA0B,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACpF,MAAM,MAAM,GACR,IAAI,CAAC,gBAAgB,CAAC,gCAAgC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,OAAO,CAAC,OAAO,CAAC,CAAC;QACjH,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAC1B,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,KAAK,CAAC,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;QACzC,CAAC;QAED,MAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC9E,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {\n  createContextForNavigation,\n  getFirstOrError,\n  getInsightOrError,\n  processTrace,\n} from '../../../testing/InsightHelpers.js';\nimport * as Trace from '../trace.js';\n\ndescribeWithEnvironment('Viewport', function() {\n  it('detects mobile optimized viewport', async () => {\n    const {data, insights} = await processTrace(this, 'lcp-images.json.gz');\n    const insight =\n        getInsightOrError('Viewport', insights, getFirstOrError(data.Meta.navigationsByNavigationId.values()));\n\n    assert.isTrue(insight.mobileOptimized);\n  });\n\n  it('detects mobile unoptimized viewport', async () => {\n    const {data} = await processTrace(this, 'lcp-images.json.gz');\n    const navigation = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n    const context = createContextForNavigation(data, navigation, data.Meta.mainFrameId);\n    const events =\n        data.UserInteractions.beginCommitCompositorFrameEvents.filter(event => event.args.frame === context.frameId);\n    assert.isNotEmpty(events);\n    for (const event of events) {\n      event.args.is_mobile_optimized = false;\n    }\n\n    const insight = Trace.Insights.Models.Viewport.generateInsight(data, context);\n    assert.isFalse(insight.mobileOptimized);\n  });\n});\n"]}