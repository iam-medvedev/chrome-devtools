{"version":3,"file":"ThirdPartyWeb.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/ThirdPartyWeb.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ThirdPartyWeb from '../../../third_party/third-party-web/third-party-web.js';\nimport * as Extras from '../extras/extras.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport {type InsightResult, type NavigationInsightContext, type RequiredData} from './types.js';\n\nexport function deps(): ['Meta', 'NetworkRequests', 'Renderer', 'ImagePainting'] {\n  return ['Meta', 'NetworkRequests', 'Renderer', 'ImagePainting'];\n}\n\ntype Entity = typeof ThirdPartyWeb.ThirdPartyWeb.entities[number];\n\ninterface Summary {\n  transferSize: number;\n  mainThreadTime: Types.Timing.MicroSeconds;\n}\n\nexport type ThirdPartyWebInsightResult = InsightResult<{\n  entityByRequest: Map<Types.TraceEvents.SyntheticNetworkRequest, Entity>,\n  requestsByEntity: Map<Entity, Types.TraceEvents.SyntheticNetworkRequest[]>,\n  summaryByRequest: Map<Types.TraceEvents.SyntheticNetworkRequest, Summary>,\n  summaryByEntity: Map<Entity, Summary>,\n  /** The entity for this navigation's URL. Any other entity is from a third party. */\n  firstPartyEntity?: Entity,\n}>;\n\n/**\n * Returns the origin portion of a Chrome extension URL.\n */\nfunction getChromeExtensionOrigin(url: URL): string {\n  return url.protocol + '//' + url.host;\n}\n\nfunction makeUpChromeExtensionEntity(entityCache: Map<string, Entity>, url: string, extensionName?: string): Entity {\n  const parsedUrl = new URL(url);\n  const origin = getChromeExtensionOrigin(parsedUrl);\n  const host = new URL(origin).host;\n  const name = extensionName || host;\n\n  const cachedEntity = entityCache.get(origin);\n  if (cachedEntity) {\n    return cachedEntity;\n  }\n\n  const chromeExtensionEntity = {\n    name,\n    company: name,\n    category: 'Chrome Extension',\n    homepage: 'https://chromewebstore.google.com/detail/' + host,\n    categories: [],\n    domains: [],\n    averageExecutionTime: 0,\n    totalExecutionTime: 0,\n    totalOccurrences: 0,\n  };\n\n  entityCache.set(origin, chromeExtensionEntity);\n  return chromeExtensionEntity;\n}\n\nfunction makeUpEntity(entityCache: Map<string, Entity>, url: string): Entity|undefined {\n  if (url.startsWith('chrome-extension:')) {\n    return makeUpChromeExtensionEntity(entityCache, url);\n  }\n\n  // Make up an entity only for valid http/https URLs.\n  if (!url.startsWith('http')) {\n    return;\n  }\n\n  // NOTE: Lighthouse uses a tld database to determine the root domain, but here\n  // we are using third party web's database. Doesn't really work for the case of classifying\n  // domains 3pweb doesn't know about, so it will just give us a guess.\n  const rootDomain = ThirdPartyWeb.ThirdPartyWeb.getRootDomain(url);\n  if (!rootDomain) {\n    return;\n  }\n\n  if (entityCache.has(rootDomain)) {\n    return entityCache.get(rootDomain);\n  }\n\n  const unrecognizedEntity = {\n    name: rootDomain,\n    company: rootDomain,\n    category: '',\n    categories: [],\n    domains: [rootDomain],\n    averageExecutionTime: 0,\n    totalExecutionTime: 0,\n    totalOccurrences: 0,\n    isUnrecognized: true,\n  };\n  entityCache.set(rootDomain, unrecognizedEntity);\n  return unrecognizedEntity;\n}\n\ninterface SummaryMaps {\n  byEntity: Map<Entity, Summary>;\n  byRequest: Map<Types.TraceEvents.SyntheticNetworkRequest, Summary>;\n  requestsByEntity: Map<Entity, Types.TraceEvents.SyntheticNetworkRequest[]>;\n}\n\nfunction getSelfTimeByUrl(\n    traceData: RequiredData<typeof deps>, context: NavigationInsightContext): Map<string, number> {\n  const startTime = Types.Timing.MicroSeconds(context.navigation.ts);\n  // TODO: we should also pass a time window for this navigation to each insight. Use infinity for now.\n  const endTime = Types.Timing.MicroSeconds(Number.POSITIVE_INFINITY);\n  const bounds = Helpers.Timing.traceWindowFromMicroSeconds(startTime, endTime);\n  const selfTimeByUrl = new Map<string, number>();\n\n  for (const process of traceData.Renderer.processes.values()) {\n    if (!process.isOnMainFrame) {\n      continue;\n    }\n\n    for (const thread of process.threads.values()) {\n      if (thread.name === 'CrRendererMain') {\n        if (!thread.tree) {\n          break;\n        }\n\n        for (const event of thread.entries) {\n          if (!Helpers.Timing.eventIsInBounds(event, bounds)) {\n            continue;\n          }\n\n          const node = traceData.Renderer.entryToNode.get(event);\n          if (!node || !node.selfTime) {\n            continue;\n          }\n\n          const url = Extras.URLForEntry.get(traceData as Handlers.Types.TraceParseData, event);\n          if (!url) {\n            continue;\n          }\n\n          selfTimeByUrl.set(url, node.selfTime + (selfTimeByUrl.get(url) ?? 0));\n        }\n      }\n    }\n  }\n\n  return selfTimeByUrl;\n}\n\nfunction getSummaries(\n    requests: Types.TraceEvents.SyntheticNetworkRequest[],\n    entityByRequest: Map<Types.TraceEvents.SyntheticNetworkRequest, Entity>,\n    selfTimeByUrl: Map<string, number>): SummaryMaps {\n  const byRequest = new Map<Types.TraceEvents.SyntheticNetworkRequest, Summary>();\n  const byEntity = new Map<Entity, Summary>();\n  const defaultSummary: Summary = {transferSize: 0, mainThreadTime: Types.Timing.MicroSeconds(0)};\n\n  for (const request of requests) {\n    const urlSummary = byRequest.get(request) || {...defaultSummary};\n    urlSummary.transferSize += request.args.data.encodedDataLength;\n    urlSummary.mainThreadTime =\n        Types.Timing.MicroSeconds(urlSummary.mainThreadTime + (selfTimeByUrl.get(request.args.data.url) ?? 0));\n    byRequest.set(request, urlSummary);\n  }\n\n  // Map each request's stat to a particular entity.\n  const requestsByEntity = new Map<Entity, Types.TraceEvents.SyntheticNetworkRequest[]>();\n  for (const [request, requestSummary] of byRequest.entries()) {\n    const entity = entityByRequest.get(request);\n    if (!entity) {\n      byRequest.delete(request);\n      continue;\n    }\n\n    const entitySummary = byEntity.get(entity) || {...defaultSummary};\n    entitySummary.transferSize += requestSummary.transferSize;\n    entitySummary.mainThreadTime =\n        Types.Timing.MicroSeconds(entitySummary.mainThreadTime + requestSummary.mainThreadTime);\n    byEntity.set(entity, entitySummary);\n\n    const entityRequests = requestsByEntity.get(entity) || [];\n    entityRequests.push(request);\n    requestsByEntity.set(entity, entityRequests);\n  }\n\n  return {byEntity, byRequest, requestsByEntity};\n}\n\nexport function generateInsight(\n    traceData: RequiredData<typeof deps>, context: NavigationInsightContext): ThirdPartyWebInsightResult {\n  const networkRequests = [];\n  for (const req of traceData.NetworkRequests.byTime) {\n    if (req.args.data.frame !== context.frameId) {\n      continue;\n    }\n\n    const navigation =\n        Helpers.Trace.getNavigationForTraceEvent(req, context.frameId, traceData.Meta.navigationsByFrameId);\n    if (navigation === context.navigation) {\n      networkRequests.push(req);\n    }\n  }\n\n  const entityByRequest = new Map<Types.TraceEvents.SyntheticNetworkRequest, Entity>();\n  const madeUpEntityCache = new Map<string, Entity>();\n  for (const request of networkRequests) {\n    const url = request.args.data.url;\n    const entity = ThirdPartyWeb.ThirdPartyWeb.getEntity(url) ?? makeUpEntity(madeUpEntityCache, url);\n    if (entity) {\n      entityByRequest.set(request, entity);\n    }\n  }\n\n  const selfTimeByUrl = getSelfTimeByUrl(traceData, context);\n  const summaries = getSummaries(networkRequests, entityByRequest, selfTimeByUrl);\n\n  const firstPartyUrl = context.navigation.args.data?.url ?? traceData.Meta.mainFrameURL;\n  const firstPartyEntity =\n      ThirdPartyWeb.ThirdPartyWeb.getEntity(firstPartyUrl) || makeUpEntity(madeUpEntityCache, firstPartyUrl);\n\n  return {\n    entityByRequest,\n    requestsByEntity: summaries.requestsByEntity,\n    summaryByRequest: summaries.byRequest,\n    summaryByEntity: summaries.byEntity,\n    firstPartyEntity,\n  };\n}\n"]}