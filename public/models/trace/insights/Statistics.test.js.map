{"version":3,"file":"Statistics.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/Statistics.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n// Lifted from Lighthouse: https://github.com/GoogleChrome/lighthouse/blob/36cac182a6c637b1671c57326d7c0241633d0076/shared/test/statistics-test.js\n\n/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as Insights from './insights.js';\n\nconst {getLogNormalScore} = Insights.Statistics;\n\ndescribe('statistics', () => {\n  describe('#getLogNormalScore', () => {\n    it('creates a log normal distribution', () => {\n      // This curve plotted with the below parameters.\n      // https://www.desmos.com/calculator/ywkivb78cd\n      const params = {\n        median: 7300,\n        p10: 3785,\n      };\n\n      // Be stricter with the control point requirements.\n      expect(getLogNormalScore(params, 7300)).to.equal(0.5);\n      expect(getLogNormalScore(params, 3785)).to.equal(0.9);\n\n      expect(getLogNormalScore(params, 0)).to.equal(1);\n      expect(getLogNormalScore(params, 1000)).to.be.closeTo(1.00, 0.01);\n      expect(getLogNormalScore(params, 2500)).to.be.closeTo(0.98, 0.01);\n      expect(getLogNormalScore(params, 5000)).to.be.closeTo(0.77, 0.01);\n      expect(getLogNormalScore(params, 7300)).to.equal(0.5);\n      expect(getLogNormalScore(params, 7500)).to.be.closeTo(0.48, 0.01);\n      expect(getLogNormalScore(params, 10000)).to.be.closeTo(0.27, 0.01);\n      expect(getLogNormalScore(params, 30000)).to.be.closeTo(0.00, 0.01);\n      expect(getLogNormalScore(params, 1000000)).to.equal(0);\n    });\n\n    it('returns 1 for all non-positive values', () => {\n      const params = {\n        median: 1000,\n        p10: 500,\n      };\n      expect(getLogNormalScore(params, -100000)).to.equal(1);\n      expect(getLogNormalScore(params, -1)).to.equal(1);\n      expect(getLogNormalScore(params, 0)).to.equal(1);\n    });\n\n    it('throws on a non-positive median parameter', () => {\n      expect(() => {\n        getLogNormalScore({median: 0, p10: 500}, 50);\n      }).to.throw('median must be greater than zero');\n      expect(() => {\n        getLogNormalScore({median: -100, p10: 500}, 50);\n      }).to.throw('median must be greater than zero');\n    });\n\n    it('throws on a non-positive p10 parameter', () => {\n      expect(() => {\n        getLogNormalScore({median: 500, p10: 0}, 50);\n      }).to.throw('p10 must be greater than zero');\n      expect(() => {\n        getLogNormalScore({median: 500, p10: -100}, 50);\n      }).to.throw('p10 must be greater than zero');\n    });\n\n    it('throws if p10 is not less than the median', () => {\n      expect(() => {\n        getLogNormalScore({median: 500, p10: 500}, 50);\n      }).to.throw('p10 must be less than the median');\n      expect(() => {\n        getLogNormalScore({median: 500, p10: 1000}, 50);\n      }).to.throw('p10 must be less than the median');\n    });\n\n    describe('score is in correct pass/average/fail range', () => {\n      /**\n       * Returns the next larger representable double value.\n       */\n      function plusOneUlp(value: number) {\n        const f64 = new Float64Array([value]);\n        const big64 = new BigInt64Array(f64.buffer);\n        big64[0] += 1n;\n        return f64[0];\n      }\n\n      /**\n       * Returns the next smaller representable double value.\n       */\n      function minusOneUlp(value: number) {\n        if (value === 0) {\n          throw new Error('yeah, can\\'t do that');\n        }\n        const f64 = new Float64Array([value]);\n        const big64 = new BigInt64Array(f64.buffer);\n        big64[0] -= 1n;\n        return f64[0];\n      }\n\n      const controlPoints = [\n        {p10: 200, median: 600},\n        {p10: 3387, median: 5800},\n        {p10: 0.1, median: 0.25},\n        {p10: 28 * 1024, median: 128 * 1024},\n        {p10: Number.MIN_VALUE, median: plusOneUlp(Number.MIN_VALUE)},\n        {p10: Number.MIN_VALUE, median: 21.239999999999977},\n        {p10: 99.56000000000073, median: 99.56000000000074},\n        {p10: minusOneUlp(Number.MAX_VALUE), median: Number.MAX_VALUE},\n        {p10: Number.MIN_VALUE, median: Number.MAX_VALUE},\n      ];\n\n      for (const {p10, median} of controlPoints) {\n        it(`is on the right side of the thresholds for {p10: ${p10}, median: ${median}}`, () => {\n          const params = {p10, median};\n\n          // Max 1 at 0, everything else must be ≤ 1.\n          expect(getLogNormalScore(params, 0)).to.equal(1);\n          expect(getLogNormalScore(params, plusOneUlp(0))).to.be.lessThanOrEqual(1);\n\n          // Just better than passing threshold.\n          expect(getLogNormalScore(params, minusOneUlp(p10))).to.be.greaterThanOrEqual(0.9);\n          // At passing threshold.\n          expect(getLogNormalScore(params, p10)).to.equal(0.9);\n          // Just worse than passing threshold.\n          expect(getLogNormalScore(params, plusOneUlp(p10))).to.be.lessThan(0.9);\n\n          // Just better than average threshold.\n          expect(getLogNormalScore(params, minusOneUlp(median))).to.be.greaterThanOrEqual(0.5);\n          // At average threshold.\n          expect(getLogNormalScore(params, median)).to.equal(0.5);\n          // Just worse than passing threshold.\n          expect(getLogNormalScore(params, plusOneUlp(median))).to.be.lessThan(0.5);\n\n          // Some curves never quite reach 0, so just assert some extreme values aren't negative.\n          expect(getLogNormalScore(params, 1_000_000_000)).to.be.greaterThanOrEqual(0);\n          expect(getLogNormalScore(params, Number.MAX_SAFE_INTEGER)).to.be.greaterThanOrEqual(0);\n          expect(getLogNormalScore(params, Number.MAX_VALUE)).to.be.greaterThanOrEqual(0);\n        });\n      }\n    });\n  });\n});\n"]}