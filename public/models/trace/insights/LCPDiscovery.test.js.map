{"version":3,"file":"LCPDiscovery.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/LCPDiscovery.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {getFirstOrError, getInsightOrError, processTrace} from '../../../testing/InsightHelpers.js';\n\ndescribeWithEnvironment('LCPDiscovery', function() {\n  it('calculates image lcp attributes', async () => {\n    const {data, insights} = await processTrace(this, 'lcp-images.json.gz');\n    const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n    const insight = getInsightOrError('LCPDiscovery', insights, firstNav);\n    const {checklist} = insight;\n\n    assert.exists(checklist);\n    assert.isFalse(checklist.priorityHinted.value);\n    assert.isTrue(checklist.requestDiscoverable.value);\n    assert.isTrue(checklist.eagerlyLoaded.value);\n  });\n\n  it('uses the fetchpriority=high text when the image has fetchpriority set', async () => {\n    const {data, insights} = await processTrace(this, 'lcp-fetchpriority-high.json.gz');\n    const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n    const insight = getInsightOrError('LCPDiscovery', insights, firstNav);\n    assert.isOk(insight.checklist);\n    assert.isTrue(insight.checklist.priorityHinted.value);\n    assert.strictEqual(insight.checklist.priorityHinted.label, 'fetchpriority=high applied');\n  });\n\n  it('uses the should apply fetchpriority=high text when the image does not fetchpriority set', async () => {\n    const {data, insights} = await processTrace(this, 'web-dev-with-commit.json.gz');\n    const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n    const insight = getInsightOrError('LCPDiscovery', insights, firstNav);\n    assert.isOk(insight.checklist);\n    assert.isFalse(insight.checklist.priorityHinted.value);\n    assert.strictEqual(insight.checklist.priorityHinted.label, 'fetchpriority=high should be applied');\n  });\n\n  it('calculates the LCP optimal time as the document request download start time', async () => {\n    const {data, insights} = await processTrace(this, 'web-dev-with-commit.json.gz');\n    const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n    const insight = getInsightOrError('LCPDiscovery', insights, firstNav);\n    assert.strictEqual(\n        insight.earliestDiscoveryTimeTs,\n        // this is the TTFB for the document request\n        122411004828,\n    );\n  });\n\n  describe('warnings', function() {\n    it('warns when there is no lcp', async () => {\n      const {data, insights} = await processTrace(this, 'user-timings.json.gz');\n      const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n      const insight = getInsightOrError('LCPDiscovery', insights, firstNav);\n\n      assert.strictEqual(insight.warnings?.[0], 'NO_LCP');\n    });\n\n    it('no main document url', async () => {\n      const {data, insights} = await processTrace(this, 'about-blank-first.json.gz');\n      const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n      const insight = getInsightOrError('LCPDiscovery', insights, firstNav);\n\n      assert.strictEqual(insight.warnings?.[0], 'NO_DOCUMENT_REQUEST');\n    });\n  });\n});\n"]}