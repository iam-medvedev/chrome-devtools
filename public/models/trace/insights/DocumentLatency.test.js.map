{"version":3,"file":"DocumentLatency.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/DocumentLatency.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,WAAW,EAAC,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,UAAU,MAAM,aAAa,CAAC;AAC1C,OAAO,KAAK,KAAK,MAAM,mBAAmB,CAAC;AAE3C,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,WAA2C,EAAE,SAAiB;IAC/F,MAAM,EAAC,SAAS,EAAE,QAAQ,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IACpF,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;IACjC,CAAC;IAED,OAAO,EAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAC,CAAC;AACrC,CAAC;AAED,SAAS,UAAU,CAAC,QAAoD,EAAE,YAAoB;IAC5F,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAC/C,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACzC,CAAC;IACD,MAAM,OAAO,GAAG,WAAW,CAAC,eAAe,CAAC;IAC5C,IAAI,OAAO,YAAY,KAAK,EAAE,CAAC;QAC7B,MAAM,OAAO,CAAC;IAChB,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,QAAQ,CAAC,iBAAiB,EAAE;IAC1B,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAChE,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAC,GAAG,MAAM,YAAY,CAAC,IAAI,EAAE,gCAAgC,CAAC,CAAC;QACpF,MAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC;QAC9F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QACnD,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,aAAa,EAAE,EAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAC,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;QACpE,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAC,GAAG,MAAM,YAAY,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC;QAChF,MAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC;QAC9F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;QACnD,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,aAAa,EAAE,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAC,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK;QAC5D,MAAM,WAAW,GAAG,CAAC,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC,CAAC;QACzF,MAAM,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,qBAAqB,EAAE,CAAC;QAE9E,MAAM,qBAAqB,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,yBAAyB,CAAC,CAAC;QAC/F,MAAM,gBAAgB,GAAG,eAAe,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC,CAAC;QAC7E,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,mCAAmC,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAChF,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,kCAAkC,CAAC,CAAC;QAC7F,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB;YACjD,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,GAAG,IAAI,CAAC,CAAC;QAC5F,WAAW,CAAC,qBAAqB,CAAC,GAAG,gBAAgB,CAAC;QAEtD,MAAM,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACnC,MAAM,IAAI,GAAG,SAAS,CAAC,eAAe,CAAC;QACvC,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;QAED,MAAM,OAAO,GAAG;YACd,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW;YAC9B,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK;SACtE,CAAC;QACF,MAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAClG,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;QACrD,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,aAAa,EAAE,EAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceModel from '../trace.js';\nimport * as Types from '../types/types.js';\n\nexport async function processTrace(testContext: Mocha.Suite|Mocha.Context|null, traceFile: string) {\n  const {traceData, insights} = await TraceLoader.traceEngine(testContext, traceFile);\n  if (!insights) {\n    throw new Error('No insights');\n  }\n\n  return {data: traceData, insights};\n}\n\nfunction getInsight(insights: TraceModel.Insights.Types.TraceInsightData, navigationId: string) {\n  const navInsights = insights.get(navigationId);\n  if (!navInsights) {\n    throw new Error('missing navInsights');\n  }\n  const insight = navInsights.DocumentLatency;\n  if (insight instanceof Error) {\n    throw insight;\n  }\n  return insight;\n}\n\ndescribe('DocumentLatency', function() {\n  it('reports savings for main document with redirects', async () => {\n    const {data, insights} = await processTrace(this, 'lantern/redirect/trace.json.gz');\n    const insight = getInsight(insights, data.Meta.navigationsByNavigationId.keys().next().value);\n    assert.strictEqual(insight.redirectDuration, 1779);\n    assert.deepEqual(insight.metricSavings, {FCP: 1779, LCP: 1779});\n  });\n\n  it('reports no savings for server with low response time', async () => {\n    const {data, insights} = await processTrace(this, 'lantern/paul/trace.json.gz');\n    const insight = getInsight(insights, data.Meta.navigationsByNavigationId.keys().next().value);\n    assert.strictEqual(insight.serverResponseTime, 43);\n    assert.deepEqual(insight.metricSavings, {FCP: 0, LCP: 0});\n  });\n\n  it('reports savings for server with high response time', async function() {\n    const traceEvents = [...await TraceLoader.rawEvents(this, 'lantern/paul/trace.json.gz')];\n    const processor = TraceModel.Processor.TraceProcessor.createWithAllHandlers();\n\n    const mainRequestEventIndex = traceEvents.findIndex(e => e.name === 'ResourceReceiveResponse');\n    const mainRequestEvent = structuredClone(traceEvents[mainRequestEventIndex]);\n    assert(Types.TraceEvents.isTraceEventResourceReceiveResponse(mainRequestEvent));\n    assert.strictEqual(mainRequestEvent.args.data.requestId, '1000C0FDC0A75327167272FC7438E999');\n    mainRequestEvent.args.data.timing.receiveHeadersStart =\n        Types.Timing.MilliSeconds(mainRequestEvent.args.data.timing.receiveHeadersStart + 1000);\n    traceEvents[mainRequestEventIndex] = mainRequestEvent;\n\n    await processor.parse(traceEvents);\n    const data = processor.traceParsedData;\n    if (!data) {\n      throw new Error('missing traceParsedData');\n    }\n\n    const context = {\n      frameId: data.Meta.mainFrameId,\n      navigationId: data.Meta.navigationsByNavigationId.keys().next().value,\n    };\n    const insight = TraceModel.Insights.InsightRunners.DocumentLatency.generateInsight(data, context);\n    assert.strictEqual(insight.serverResponseTime, 1043);\n    assert.deepEqual(insight.metricSavings, {FCP: 943, LCP: 943});\n  });\n});\n"]}