{"version":3,"file":"NetworkDependencyTree.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/NetworkDependencyTree.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {getFirstOrError, getInsightOrError, processTrace} from '../../../testing/InsightHelpers.js';\nimport * as Trace from '../trace.js';\n\nimport type {RelatedEventsMap} from './types.js';\n\ndescribeWithEnvironment('NetworkDependencyTree', function() {\n  let insight: Trace.Insights.Types.InsightModels['NetworkDependencyTree'];\n\n  before(async function() {\n    const {data, insights} = await processTrace(this, 'lcp-multiple-frames.json.gz');\n    const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n    insight = getInsightOrError('NetworkDependencyTree', insights, firstNav);\n  });\n\n  it('calculates network dependency tree', () => {\n    // The network dependency tree in this trace is\n    // | .../index.html (ts:566777570990, dur:5005590)\n    // |\n    // | | .../app.css (ts:566782573909, dur:7205)\n    // | | .../app.js (ts:566782574106, dur:11790)\n    assert.lengthOf(insight.rootNodes, 1);\n\n    const root = insight.rootNodes[0];\n    assert.strictEqual(root.request.args.data.url, 'http://localhost:8787/lcp-iframes/index.html');\n    assert.strictEqual(root.timeFromInitialRequest, Trace.Types.Timing.Micro(root.request.dur));\n    assert.lengthOf(root.children, 2);\n\n    const [child0, child1] = insight.rootNodes[0].children;\n    assert.strictEqual(child0.request.args.data.url, 'http://localhost:8787/lcp-iframes/app.css');\n    assert.strictEqual(\n        child0.timeFromInitialRequest,\n        Trace.Types.Timing.Micro(child0.request.ts + child0.request.dur - root.request.ts));\n    assert.lengthOf(child0.children, 0);\n    assert.strictEqual(child1.request.args.data.url, 'http://localhost:8787/lcp-iframes/app.js');\n    assert.strictEqual(\n        child1.timeFromInitialRequest,\n        Trace.Types.Timing.Micro(child1.request.ts + child1.request.dur - root.request.ts));\n    assert.lengthOf(child1.children, 0);\n  });\n\n  it('Calculate the max critical path latency', () => {\n    // The chain |index.html(root) -> app.js(child1)| is the longest\n    const root = insight.rootNodes[0];\n    const child1 = root.children[1];\n    assert.strictEqual(\n        insight.maxTime, Trace.Types.Timing.Micro(child1.request.ts + child1.request.dur - root.request.ts));\n  });\n\n  it('Marks the longest network dependency chain', () => {\n    const root = insight.rootNodes[0];\n    const [child0, child1] = root.children;\n\n    // The chain |index.html(root) -> app.js(child1)| is the longest\n    assert.isTrue(root.isLongest);\n    assert.isTrue(child1.isLongest);\n    // The |app.css| is not in the longest chain\n    assert.isNotTrue(child0.isLongest);\n  });\n\n  it('Store the chain in the last request of the chain', () => {\n    const root = insight.rootNodes[0];\n    const [child0, child1] = root.children;\n\n    // There are three chains from Lantern:\n    //   |index.html(root)|\n    //   |index.html(root) -> app.css(child0)|\n    //   |index.html(root) -> app.js(child1)|\n    assert.deepEqual(root.chain, [root.request]);\n    assert.deepEqual(child0.chain, [root.request, child0.request]);\n    assert.deepEqual(child1.chain, [root.request, child1.request]);\n  });\n\n  it('Calculates the related events', async () => {\n    // Need to load a file with longer dependency chain for this test.\n    // Only those requests whose depth >= 2 will be added to the related events.\n    const {data, insights} = await processTrace(this, 'web-dev-screenshot-source-ids.json.gz');\n    const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n    insight = getInsightOrError('NetworkDependencyTree', insights, firstNav);\n\n    // For NetworkDependencyTree, the relatedEvents is a map format.\n    assert.isFalse(Array.isArray(insight.relatedEvents));\n    const relatedEvents = insight.relatedEvents as RelatedEventsMap;\n\n    // There are a few chains, let test the first chain\n    // |web.dev -> /css -> 4UasrENHsx...UvQ.woff2|\n    const root = insight.rootNodes[0];\n    const child0 = root.children[0];\n    const child00 = child0.children[0];\n\n    // Root's depth is 0, so there isn't any warning message\n    assert.deepEqual(relatedEvents.get(root.request), []);\n    // child0's depth is 1, so there isn't any warning message\n    assert.deepEqual(relatedEvents.get(child0.request), []);\n    // child00's depth is 2, so there is one warning message\n    assert.deepEqual(\n        relatedEvents.get(child00.request), [Trace.Insights.Models.NetworkDependencyTree.UIStrings.warningDescription]);\n  });\n});\n"]}