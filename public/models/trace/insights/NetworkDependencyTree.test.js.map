{"version":3,"file":"NetworkDependencyTree.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/NetworkDependencyTree.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../../generated/protocol.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {getFirstOrError, getInsightOrError, processTrace} from '../../../testing/InsightHelpers.js';\nimport * as Trace from '../trace.js';\n\nimport type {InsightSetContextWithNavigation, RelatedEventsMap} from './types.js';\n\ndescribeWithEnvironment('NetworkDependencyTree', function() {\n  let insight: Trace.Insights.Types.InsightModels['NetworkDependencyTree'];\n\n  before(async function() {\n    const {data, insights} = await processTrace(this, 'lcp-multiple-frames.json.gz');\n    const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n    insight = getInsightOrError('NetworkDependencyTree', insights, firstNav);\n  });\n\n  it('calculates network dependency tree', () => {\n    // The network dependency tree in this trace is\n    // | .../index.html (ts:566777570990, dur:5005590)\n    // |\n    // | | .../app.css (ts:566782573909, dur:7205)\n    // | | .../app.js (ts:566782574106, dur:11790)\n    assert.lengthOf(insight.rootNodes, 1);\n\n    const root = insight.rootNodes[0];\n    assert.strictEqual(root.request.args.data.url, 'http://localhost:8787/lcp-iframes/index.html');\n    assert.strictEqual(root.timeFromInitialRequest, Trace.Types.Timing.Micro(root.request.dur));\n    assert.lengthOf(root.children, 2);\n\n    const [child0, child1] = insight.rootNodes[0].children;\n    assert.strictEqual(child0.request.args.data.url, 'http://localhost:8787/lcp-iframes/app.css');\n    assert.strictEqual(\n        child0.timeFromInitialRequest,\n        Trace.Types.Timing.Micro(child0.request.ts + child0.request.dur - root.request.ts));\n    assert.lengthOf(child0.children, 0);\n    assert.strictEqual(child1.request.args.data.url, 'http://localhost:8787/lcp-iframes/app.js');\n    assert.strictEqual(\n        child1.timeFromInitialRequest,\n        Trace.Types.Timing.Micro(child1.request.ts + child1.request.dur - root.request.ts));\n    assert.lengthOf(child1.children, 0);\n  });\n\n  it('Calculate the max critical path latency', () => {\n    // The chain |index.html(root) -> app.js(child1)| is the longest\n    const root = insight.rootNodes[0];\n    const child1 = root.children[1];\n    assert.strictEqual(\n        insight.maxTime, Trace.Types.Timing.Micro(child1.request.ts + child1.request.dur - root.request.ts));\n  });\n\n  it('Marks the longest network dependency chain', () => {\n    const root = insight.rootNodes[0];\n    const [child0, child1] = root.children;\n\n    // The chain |index.html(root) -> app.js(child1)| is the longest\n    assert.isTrue(root.isLongest);\n    assert.isTrue(child1.isLongest);\n    // The |app.css| is not in the longest chain\n    assert.isNotTrue(child0.isLongest);\n  });\n\n  it('Store the all parents and children events for all requests', () => {\n    const root = insight.rootNodes[0];\n    const [child0, child1] = root.children;\n\n    // There are three chains from Lantern:\n    //   |index.html(root)|\n    //   |index.html(root) -> app.css(child0)|\n    //   |index.html(root) -> app.js(child1)|\n    // Both child0 and child1 are related to the root\n    assert.deepEqual([...root.relatedRequests], [root.request, child0.request, child1.request]);\n    // Only root and child0 are related to the child0\n    assert.deepEqual([...child0.relatedRequests], [root.request, child0.request]);\n    // Only root and child1 are related to the child1\n    assert.deepEqual([...child1.relatedRequests], [root.request, child1.request]);\n  });\n\n  it('Fail the audit when there at least one chain with at least two requests', () => {\n    assert.isTrue(insight.fail);\n  });\n\n  it('Does not fail the audit when there is only main doc request', async () => {\n    // Need to load a file with only main doc in the the critical requests chains.\n    const {data, insights} = await processTrace(this, 'image-delivery.json.gz');\n    const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n    insight = getInsightOrError('NetworkDependencyTree', insights, firstNav);\n\n    assert.isFalse(insight.fail);\n  });\n\n  // TODO(crbug.com/403507404) Times out\n  it.skip('[crbug.com/403507404] Calculates the relatedEvents map (event to warning map)', async () => {\n    // Need to load a file with longer dependency chain for this test.\n    // Only those requests whose depth >= 2 will be added to the related events.\n    const {data, insights} = await processTrace(this, 'web-dev-screenshot-source-ids.json.gz');\n    const firstNav = getFirstOrError(data.Meta.navigationsByNavigationId.values());\n    insight = getInsightOrError('NetworkDependencyTree', insights, firstNav);\n\n    // For NetworkDependencyTree, the relatedEvents is a map format.\n    assert.isFalse(Array.isArray(insight.relatedEvents));\n    const relatedEvents = insight.relatedEvents as RelatedEventsMap;\n\n    // There are a few chains, let test the first chain\n    // |web.dev -> /css -> 4UasrENHsx...UvQ.woff2|\n    const root = insight.rootNodes[0];\n    const child0 = root.children[0];\n    const child00 = child0.children[0];\n\n    // Root's depth is 0, so there isn't any warning message\n    assert.deepEqual(relatedEvents.get(root.request), []);\n    // child0's depth is 1, so there isn't any warning message\n    assert.deepEqual(relatedEvents.get(child0.request), []);\n    // child00's depth is 2, so there is one warning message\n    assert.deepEqual(\n        relatedEvents.get(child00.request), [Trace.Insights.Models.NetworkDependencyTree.UIStrings.warningDescription]);\n  });\n});\n\ndescribe('generatePreconnectedOrigins', () => {\n  const mockParsedTrace = {\n    NetworkRequests: {\n      linkPreconnectEvents: [] as Trace.Types.Events.LinkPreconnect[],\n    },\n  } as Trace.Handlers.Types.ParsedTrace;\n\n  beforeEach(() => {\n    mockParsedTrace.NetworkRequests.linkPreconnectEvents.length = 0;\n  });\n\n  it('should mark preconnect origins as not unused when they match context requests', () => {\n    const mockLinkPreconnectEvents = [{\n                                       args: {\n                                         data: {\n                                           url: 'https://example.com',\n                                           node_id: 1,\n                                           frame: 'frame-id',\n                                         },\n                                       },\n                                     }] as Trace.Types.Events.LinkPreconnect[];\n    const mockContextRequests: Trace.Types.Events.SyntheticNetworkRequest[] = [{\n      args: {\n        data: {\n          url: 'https://example.com/script.js',\n        },\n      },\n    } as Trace.Types.Events.SyntheticNetworkRequest];\n    const preconnectOrigins = Trace.Insights.Models.NetworkDependencyTree.generatePreconnectedOrigins(\n        mockLinkPreconnectEvents, mockContextRequests);\n    assert.deepEqual(preconnectOrigins, [{\n                       node_id: 1 as Protocol.DOM.BackendNodeId,\n                       frame: 'frame-id',\n                       url: 'https://example.com',\n                       unused: false,\n                     }]);\n  });\n\n  it('should mark preconnect origins as unused when they do not match context requests', () => {\n    const mockLinkPreconnectEvents = [{\n                                       args: {\n                                         data: {\n                                           url: 'https://example.com',\n                                           node_id: 1,\n                                           frame: 'frame-id',\n                                         },\n                                       },\n                                     }] as Trace.Types.Events.LinkPreconnect[];\n    const mockContextRequests: Trace.Types.Events.SyntheticNetworkRequest[] = [{\n      args: {\n        data: {\n          url: 'https://other.com/image.png',\n        },\n      },\n    } as Trace.Types.Events.SyntheticNetworkRequest];\n    const preconnectOrigins = Trace.Insights.Models.NetworkDependencyTree.generatePreconnectedOrigins(\n        mockLinkPreconnectEvents, mockContextRequests);\n    assert.deepEqual(preconnectOrigins, [{\n                       node_id: 1 as Protocol.DOM.BackendNodeId,\n                       frame: 'frame-id',\n                       url: 'https://example.com',\n                       unused: true,\n                     }]);\n  });\n});\n\ndescribeWithEnvironment('generatePreconnectCandidates', () => {\n  const mockParsedTrace = {\n    NetworkRequests: {\n      eventToInitiator: new Map<Trace.Types.Events.SyntheticNetworkRequest, Trace.Types.Events.Event>(),\n      byTime: [] as Trace.Types.Events.SyntheticNetworkRequest[],\n    },\n  } as Trace.Handlers.Types.ParsedTrace;\n\n  const mockContext = {\n    // This is not need to calculate the data of this insight, but is needed to check this is a context with lantern data.\n    navigation: {} as Trace.Types.Events.NavigationStart,\n    lantern: {\n      simulator: {\n        getOptions: () => ({rtt: 200, additionalRttByOrigin: new Map<string, number>()}),\n      },\n      metrics: {\n        largestContentfulPaint: {\n          pessimisticGraph: {\n            traverse: (cb: (node: Trace.Lantern.Graph.Node) => void) => {\n              cb({type: 'network', request: {url: 'https://example.com/script.js'}} as Trace.Lantern.Graph.Node);\n              cb({type: 'network', request: {url: 'https://example.com/first.js'}} as Trace.Lantern.Graph.Node);\n              cb({type: 'network', request: {url: 'https://example.com/second.js'}} as Trace.Lantern.Graph.Node);\n              cb({type: 'network', request: {url: 'https://other.com/image.png'}} as Trace.Lantern.Graph.Node);\n            },\n          },\n        },\n        firstContentfulPaint: {\n          pessimisticGraph: {\n            traverse: (cb: (node: Trace.Lantern.Graph.Node) => void) => {\n              cb({type: 'network', request: {url: 'https://example.com/script.js'}} as Trace.Lantern.Graph.Node);\n            },\n          },\n        },\n      },\n    } as unknown as Trace.Insights.Types.LanternContext,\n    bounds: {min: 0, max: 1000000},\n    navigationId: 'main-request',\n  } as InsightSetContextWithNavigation;\n\n  const mainRequest: Trace.Types.Events.SyntheticNetworkRequest = {\n    args: {\n      data: {\n        url: 'https://main.com',\n        requestId: 'main-request',\n        syntheticData: {finishTime: 1_000},\n        timing: {connectEnd: 0, connectStart: 0}\n      },\n    },\n    ts: 0,\n  } as unknown as Trace.Types.Events.SyntheticNetworkRequest;\n\n  const validRequest: Trace.Types.Events.SyntheticNetworkRequest = {\n    args: {\n      data: {\n        url: 'https://example.com/script.js',\n        syntheticData: {sendStartTime: 2_000},\n        timing: {dnsStart: 100, dnsEnd: 200, connectStart: 300, connectEnd: 400},\n      },\n    },\n    ts: 1500,\n  } as unknown as Trace.Types.Events.SyntheticNetworkRequest;\n\n  beforeEach(() => {\n    mockParsedTrace.NetworkRequests.eventToInitiator.clear();\n    mockParsedTrace.NetworkRequests.byTime.length = 0;\n    mockParsedTrace.NetworkRequests.byTime.push(mainRequest);\n  });\n\n  it('generates preconnect results for valid requests', () => {\n    mockParsedTrace.NetworkRequests.byTime.push(validRequest);\n\n    const preconnectCandidates = Trace.Insights.Models.NetworkDependencyTree.generatePreconnectCandidates(\n        mockParsedTrace, mockContext, mockParsedTrace.NetworkRequests.byTime);\n    assert.lengthOf(preconnectCandidates, 1);\n    assert.strictEqual(preconnectCandidates[0].origin, 'https://example.com');\n    // |validRequest->sendStartTime| - |mainRequest->finishTime| + |validRequest->dnsStart|\n    assert.strictEqual(preconnectCandidates[0].wastedMs, 101);\n  });\n\n  it('generates preconnect results and sort them by wasted time', () => {\n    mockParsedTrace.NetworkRequests.byTime.push(validRequest);\n\n    const otherValidRequest: Trace.Types.Events.SyntheticNetworkRequest = JSON.parse(JSON.stringify(validRequest));\n    otherValidRequest.args.data.url = 'https://other.com/image.png';\n    otherValidRequest.args.data.syntheticData.sendStartTime = Trace.Types.Timing.Micro(3_000);\n    mockParsedTrace.NetworkRequests.byTime.push(otherValidRequest);\n\n    const preconnectCandidates = Trace.Insights.Models.NetworkDependencyTree.generatePreconnectCandidates(\n        mockParsedTrace, mockContext, mockParsedTrace.NetworkRequests.byTime);\n    assert.lengthOf(preconnectCandidates, 2);\n\n    // other.com has a wasted time of 102 ms, while example.com has 101 ms. So other.com will be the first.\n    assert.strictEqual(preconnectCandidates[0].origin, 'https://other.com');\n    // |otherValidRequest->sendStartTime| - |mainRequest->finishTime| + |otherValidRequest->dnsStart|\n    assert.strictEqual(preconnectCandidates[0].wastedMs, 102);\n\n    assert.strictEqual(preconnectCandidates[1].origin, 'https://example.com');\n    // |validRequest->sendStartTime| - |mainRequest->finishTime| + |validRequest->dnsStart|\n    assert.strictEqual(preconnectCandidates[1].wastedMs, 101);\n  });\n\n  it('shouldn\\'t suggest preconnect when requests have same origin as main request', () => {\n    const sameOriginRequest: Trace.Types.Events.SyntheticNetworkRequest = JSON.parse(JSON.stringify(validRequest));\n    sameOriginRequest.args.data.url = 'https://main.com/some-resource';\n    mockParsedTrace.NetworkRequests.byTime.push(sameOriginRequest);\n\n    const preconnectCandidates = Trace.Insights.Models.NetworkDependencyTree.generatePreconnectCandidates(\n        mockParsedTrace, mockContext, mockParsedTrace.NetworkRequests.byTime);\n    assert.lengthOf(preconnectCandidates, 0);\n  });\n\n  it('shouldn\\'t suggest preconnect when initiator is main resource', () => {\n    const initiatedByMainRequest: Trace.Types.Events.SyntheticNetworkRequest = JSON.parse(JSON.stringify(validRequest));\n    initiatedByMainRequest.args.data.url = 'https://example.com/script.js';\n    mockParsedTrace.NetworkRequests.byTime.push(initiatedByMainRequest);\n    mockParsedTrace.NetworkRequests.eventToInitiator.set(initiatedByMainRequest, mainRequest);\n\n    const preconnectCandidates = Trace.Insights.Models.NetworkDependencyTree.generatePreconnectCandidates(\n        mockParsedTrace, mockContext, mockParsedTrace.NetworkRequests.byTime);\n    assert.lengthOf(preconnectCandidates, 0);\n  });\n\n  it('shouldn\\'t suggest non http(s) protocols as preconnect', () => {\n    const nonHttpRequest: Trace.Types.Events.SyntheticNetworkRequest = JSON.parse(JSON.stringify(validRequest));\n    nonHttpRequest.args.data.url = 'data:text/plain;base64,hello';\n    mockParsedTrace.NetworkRequests.byTime.push(nonHttpRequest);\n\n    const preconnectCandidates = Trace.Insights.Models.NetworkDependencyTree.generatePreconnectCandidates(\n        mockParsedTrace, mockContext, mockParsedTrace.NetworkRequests.byTime);\n    assert.lengthOf(preconnectCandidates, 0);\n  });\n\n  it('shouldn\\'t suggest preconnect when request has been fired after 15s', () => {\n    const aboveThresholdRequest: Trace.Types.Events.SyntheticNetworkRequest = JSON.parse(JSON.stringify(validRequest));\n    // sendStartTime is way above the threshold (15000ms)\n    aboveThresholdRequest.args.data.syntheticData.sendStartTime = Trace.Types.Timing.Micro(20_000_000);\n    mockParsedTrace.NetworkRequests.byTime.push(aboveThresholdRequest);\n\n    const preconnectCandidates = Trace.Insights.Models.NetworkDependencyTree.generatePreconnectCandidates(\n        mockParsedTrace, mockContext, mockParsedTrace.NetworkRequests.byTime);\n    assert.lengthOf(preconnectCandidates, 0);\n  });\n\n  it('shouldn\\'t suggest preconnect when requests are not in LCP graph', () => {\n    const notInLCPRequest: Trace.Types.Events.SyntheticNetworkRequest = JSON.parse(JSON.stringify(validRequest));\n    notInLCPRequest.args.data.url = 'https://not-in-lcp.com/some-resource';\n    mockParsedTrace.NetworkRequests.byTime.push(notInLCPRequest);\n\n    const preconnectCandidates = Trace.Insights.Models.NetworkDependencyTree.generatePreconnectCandidates(\n        mockParsedTrace, mockContext, mockParsedTrace.NetworkRequests.byTime);\n    assert.lengthOf(preconnectCandidates, 0);\n  });\n\n  it('should only list an origin once', () => {\n    const firstRequest: Trace.Types.Events.SyntheticNetworkRequest = JSON.parse(JSON.stringify(validRequest));\n    firstRequest.args.data.url = 'https://example.com/first.js';\n    mockParsedTrace.NetworkRequests.byTime.push(firstRequest);\n\n    const secondRequest: Trace.Types.Events.SyntheticNetworkRequest = JSON.parse(JSON.stringify(validRequest));\n    secondRequest.args.data.url = 'https://example.com/second.js';\n    mockParsedTrace.NetworkRequests.byTime.push(secondRequest);\n\n    const preconnectCandidates = Trace.Insights.Models.NetworkDependencyTree.generatePreconnectCandidates(\n        mockParsedTrace, mockContext, mockParsedTrace.NetworkRequests.byTime);\n    assert.lengthOf(preconnectCandidates, 1);\n    assert.strictEqual(preconnectCandidates[0].origin, 'https://example.com');\n    // First request has a wasted time of 101 ms, while second request has 51 ms.\n    // So the final waste time will be the longer one: 101 ms.\n    assert.strictEqual(preconnectCandidates[0].wastedMs, 101);\n  });\n});\n"]}