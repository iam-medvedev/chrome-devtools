{"version":3,"file":"LargestContentfulPaint.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/LargestContentfulPaint.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport type * as TraceModel from '../trace.js';\nimport * as Types from '../types/types.js';\n\nexport async function processTrace(testContext: Mocha.Suite|Mocha.Context|null, traceFile: string) {\n  const {traceData, insights} = await TraceLoader.traceEngine(testContext, traceFile);\n  if (!insights) {\n    throw new Error('No insights');\n  }\n\n  return {data: traceData, insights};\n}\n\nfunction getInsight(insights: TraceModel.Insights.Types.TraceInsightData, navigationId: string) {\n  const navInsights = insights.get(navigationId);\n  if (!navInsights) {\n    throw new Error('missing navInsights');\n  }\n  const insight = navInsights.LargestContentfulPaint;\n  if (insight instanceof Error) {\n    throw insight;\n  }\n  return insight;\n}\n\ndescribe('LargestContentfulPaint', function() {\n  it('calculates text lcp phases', async () => {\n    const {data, insights} = await processTrace(this, 'lcp-web-font.json.gz');\n    const insight = getInsight(insights, data.Meta.navigationsByNavigationId.keys().next().value);\n\n    assert.strictEqual(insight.lcpMs, 106.482);\n\n    const wantTtfb = Types.Timing.MilliSeconds(6.115);\n    const wantRenderDelay = Types.Timing.MilliSeconds(100.367);\n    assert.deepEqual(insight.phases, {ttfb: wantTtfb, renderDelay: wantRenderDelay});\n  });\n\n  it('calculates image lcp phases', async () => {\n    const {data, insights} = await processTrace(this, 'lcp-images.json.gz');\n    const insight = getInsight(insights, data.Meta.navigationsByNavigationId.keys().next().value);\n\n    assert.strictEqual(insight.lcpMs, 109.623);\n\n    if (!insight.phases) {\n      throw new Error('No LCP phases');\n    }\n\n    const phases = {\n      ttfb: insight.phases.ttfb?.toFixed(2),\n      loadTime: insight.phases.loadTime?.toFixed(2),\n      loadDelay: insight.phases.loadDelay?.toFixed(2),\n      renderDelay: insight.phases.renderDelay?.toFixed(2),\n    };\n    assert.deepEqual(phases, {ttfb: '6.94', loadTime: '12.09', loadDelay: '33.74', renderDelay: '56.85'});\n  });\n\n  it('calculates image lcp attributes', async () => {\n    const {data, insights} = await processTrace(this, 'lcp-images.json.gz');\n    const insight = getInsight(insights, data.Meta.navigationsByNavigationId.keys().next().value);\n    const {shouldIncreasePriorityHint, shouldPreloadImage, shouldRemoveLazyLoading} = insight;\n\n    assert.strictEqual(shouldRemoveLazyLoading, false);\n    assert.strictEqual(shouldPreloadImage, true);\n    assert.strictEqual(shouldIncreasePriorityHint, true);\n  });\n\n  it('calculates the LCP optimal time as the main request download start time', async () => {\n    const {data, insights} = await processTrace(this, 'web-dev-with-commit.json.gz');\n    const firstNav = Array.from(data.Meta.navigationsByNavigationId.keys())[0];\n    const insight = getInsight(insights, firstNav);\n    assert.strictEqual(\n        insight.earliestDiscoveryTimeTs,\n        // this is the TTFB for the main request\n        122411004828,\n    );\n  });\n\n  describe('warnings', function() {\n    it('warns when there is no lcp', async () => {\n      const {data, insights} = await processTrace(this, 'user-timings.json.gz');\n      const insight = getInsight(insights, data.Meta.navigationsByNavigationId.keys().next().value);\n\n      assert.strictEqual(insight.lcpMs, undefined);\n      assert.strictEqual(insight.phases, undefined);\n      assert.strictEqual(insight.warnings?.[0], 'NO_LCP');\n    });\n\n    it('no main document url', async () => {\n      const {data, insights} = await processTrace(this, 'about-blank-first.json.gz');\n      const insight = getInsight(insights, data.Meta.navigationsByNavigationId.keys().next().value);\n\n      assert.strictEqual(insight.lcpMs, 204.909);\n      assert.strictEqual(insight.phases, undefined);\n      assert.strictEqual(insight.warnings?.[0], 'NO_DOCUMENT_REQUEST');\n    });\n  });\n});\n"]}