{"version":3,"file":"ForcedReflow.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/ForcedReflow.test.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,uBAAuB,EAAC,MAAM,wCAAwC,CAAC;AAC/E,OAAO,EAAC,iBAAiB,EAAC,MAAM,oCAAoC,CAAC;AACrE,OAAO,EAAC,WAAW,EAAC,MAAM,iCAAiC,CAAC;AAE5D,uBAAuB,CAAC,cAAc,EAAE;IACtC,KAAK,UAAU,YAAY,CAAC,OAAkC,EAAE,SAAiB;QAC/E,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAC3E,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;QACjC,CAAC;QAED,OAAO,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC;IAC1B,CAAC;IAED,EAAE,CAAC,uBAAuB,EAAE,KAAK;QAC/B,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAC,GAAG,MAAM,YAAY,CAAC,IAAI,EAAE,uBAAuB,CAAC,CAAC;QAC3E,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACrC,MAAM,OAAO,GACT,iBAAiB,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC;QAE3G,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,wBAAwB,EAAE,oBAAoB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAC/F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,wBAAwB,EAAE,oBAAoB,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QACzF,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,wBAAwB,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;QAE7E,MAAM,SAAS,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAa,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QACjE,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAa,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QAC3D,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {getInsightOrError} from '../../../testing/InsightHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\n\ndescribeWithEnvironment('ForcedReflow', function() {\n  async function processTrace(context: Mocha.Suite|Mocha.Context, traceFile: string) {\n    const {data, insights} = await TraceLoader.traceEngine(context, traceFile);\n    if (!insights) {\n      throw new Error('No insights');\n    }\n\n    return {data, insights};\n  }\n\n  it('generates call stacks', async function() {\n    const {data, insights} = await processTrace(this, 'forced-reflow.json.gz');\n    assert.strictEqual(insights.size, 1);\n    const insight =\n        getInsightOrError('ForcedReflow', insights, data.Meta.navigationsByNavigationId.values().next().value);\n\n    assert.strictEqual(insight.topLevelFunctionCallData?.topLevelFunctionCall.columnNumber, 25217);\n    assert.strictEqual(insight.topLevelFunctionCallData?.topLevelFunctionCall.lineNumber, 6);\n    assert.strictEqual(insight.topLevelFunctionCallData?.totalReflowTime, 26052);\n\n    const callStack = insight.aggregatedBottomUpData[1];\n    assert.strictEqual(callStack.bottomUpData!.columnNumber, 197203);\n    assert.strictEqual(callStack.bottomUpData!.lineNumber, 32);\n    assert.lengthOf(callStack.relatedEvents, 16);\n  });\n});\n"]}