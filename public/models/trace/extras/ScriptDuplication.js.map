{"version":3,"file":"ScriptDuplication.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/extras/ScriptDuplication.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Handlers from '../handlers/handlers.js';\n\n// Ignore modules smaller than an absolute threshold.\nconst ABSOLUTE_SIZE_THRESHOLD_BYTES = 1024 * 0.5;\n// Ignore modules smaller than a % size of largest copy of the module.\nconst RELATIVE_SIZE_THRESHOLD = 0.1;\n\ninterface SourceData {\n  source: string;\n  resourceSize: number;\n}\n\nexport function normalizeSource(source: string): string {\n  // Trim trailing question mark - b/c webpack.\n  source = source.replace(/\\?$/, '');\n\n  // Normalize paths for dependencies by only keeping everything after the last `node_modules`.\n  const lastNodeModulesIndex = source.lastIndexOf('node_modules');\n  if (lastNodeModulesIndex !== -1) {\n    source = source.substring(lastNodeModulesIndex);\n  }\n\n  return source;\n}\n\nfunction shouldIgnoreSource(source: string): boolean {\n  // Ignore bundle overhead.\n  if (source.includes('webpack/bootstrap')) {\n    return true;\n  }\n  if (source.includes('(webpack)/buildin')) {\n    return true;\n  }\n\n  // Ignore webpack module shims, i.e. aliases of the form `module.exports = window.jQuery`\n  if (source.includes('external ')) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * The key is a source map `sources` entry (these are URLs/file paths), but normalized\n * via `normalizeSource`.\n *\n * The value is an object with an entry for every script that has a source map which\n * denotes that this source was used, along with the estimated resource size it takes\n * up in the script.\n */\nexport type ScriptDuplication = Map<string, {\n  /**\n   * This is the sum of all (but one) `attributedSize` in `scripts`.\n   *\n   * One copy of this module is treated as the canonical version - the rest will\n   * have non-zero `wastedBytes`. The canonical copy is the first entry of\n   * `scripts`.\n   *\n   * In the case of all copies being the same version, all sizes are\n   * equal and the selection doesn't matter (ignoring compression ratios). When\n   * the copies are different versions, it does matter. Ideally the newest\n   * version would be the canonical copy, but version information is not present.\n   * Instead, size is used as a heuristic for latest version. This makes the\n   * value here conserative in its estimation.\n   */\n  estimatedDuplicateBytes: number,\n  duplicates: Array<{\n    script: Handlers.ModelHandlers.Scripts.Script,\n    /**\n     * The number of bytes in the script bundle that map back to this module,\n     * in terms of estimated impact on transfer size.\n     */\n    attributedSize: number,\n  }>,\n}>;\n\n/**\n * Sorts each array within @see ScriptDuplication by attributedSize, drops information\n * on sources that are too small, and calculates esimatedDuplicateBytes.\n */\nexport function normalizeDuplication(duplication: ScriptDuplication): void {\n  for (const [key, data] of duplication) {\n    // Sort by resource size.\n    data.duplicates.sort((a, b) => b.attributedSize - a.attributedSize);\n\n    // Ignore modules smaller than a % size of largest.\n    if (data.duplicates.length > 1) {\n      const largestResourceSize = data.duplicates[0].attributedSize;\n      data.duplicates = data.duplicates.filter(duplicate => {\n        const percentSize = duplicate.attributedSize / largestResourceSize;\n        return percentSize >= RELATIVE_SIZE_THRESHOLD;\n      });\n    }\n\n    // Ignore modules smaller than an absolute threshold.\n    data.duplicates = data.duplicates.filter(duplicate => duplicate.attributedSize >= ABSOLUTE_SIZE_THRESHOLD_BYTES);\n\n    // Delete any that now don't have multiple entries.\n    if (data.duplicates.length <= 1) {\n      duplication.delete(key);\n      continue;\n    }\n\n    data.estimatedDuplicateBytes = data.duplicates.slice(1).reduce((acc, cur) => acc + cur.attributedSize, 0);\n  }\n}\n\nfunction indexOfOrLength(haystack: string, needle: string, startPosition = 0): number {\n  const index = haystack.indexOf(needle, startPosition);\n  return index === -1 ? haystack.length : index;\n}\n\nexport function getNodeModuleName(source: string): string {\n  const sourceSplit = source.split('node_modules/');\n  source = sourceSplit[sourceSplit.length - 1];\n\n  const indexFirstSlash = indexOfOrLength(source, '/');\n  if (source[0] === '@') {\n    return source.slice(0, indexOfOrLength(source, '/', indexFirstSlash + 1));\n  }\n\n  return source.slice(0, indexFirstSlash);\n}\n\nfunction groupByNodeModules(duplication: ScriptDuplication): ScriptDuplication {\n  const groupedDuplication: ScriptDuplication = new Map();\n  for (const [source, data] of duplication) {\n    if (!source.includes('node_modules')) {\n      groupedDuplication.set(source, data);\n      continue;\n    }\n\n    const nodeModuleKey = 'node_modules/' + getNodeModuleName(source);\n    const aggregatedData = groupedDuplication.get(nodeModuleKey) ?? {\n      duplicates: [],\n      // This is calculated in normalizeDuplication.\n      estimatedDuplicateBytes: 0,\n    };\n    groupedDuplication.set(nodeModuleKey, aggregatedData);\n\n    for (const {script, attributedSize} of data.duplicates) {\n      let duplicate = aggregatedData.duplicates.find(d => d.script === script);\n      if (!duplicate) {\n        duplicate = {script, attributedSize: 0};\n        aggregatedData.duplicates.push(duplicate);\n      }\n      duplicate.attributedSize += attributedSize;\n    }\n  }\n\n  return groupedDuplication;\n}\n\n/**\n * Sort by estimated savings.\n */\nfunction sorted(duplication: ScriptDuplication): ScriptDuplication {\n  return new Map([...duplication].sort((a, b) => b[1].estimatedDuplicateBytes - a[1].estimatedDuplicateBytes));\n}\n\n/**\n * Returns 2 @see ScriptDuplication for the given collection of script contents + source maps:\n *\n * 1. `duplication` keys correspond to authored files\n * 2. `duplication` keys correspond to authored files, except all files within the same\n *    node_module package are aggregated under the same entry.\n */\nexport function computeScriptDuplication(\n    scriptsData: Handlers.ModelHandlers.Scripts.ScriptsData, compressionRatios: Map<string, number>):\n    {duplication: ScriptDuplication, duplicationGroupedByNodeModules: ScriptDuplication} {\n  const sourceDatasMap = new Map<Handlers.ModelHandlers.Scripts.Script, SourceData[]>();\n\n  // Determine size of each `sources` entry.\n  for (const script of scriptsData.scripts) {\n    if (!script.content || !script.sourceMap) {\n      continue;\n    }\n\n    const sizes = Handlers.ModelHandlers.Scripts.getScriptGeneratedSizes(script);\n    if (!sizes) {\n      continue;\n    }\n\n    if ('errorMessage' in sizes) {\n      console.error(sizes.errorMessage);\n      continue;\n    }\n\n    const sourceDataArray: SourceData[] = [];\n    sourceDatasMap.set(script, sourceDataArray);\n\n    const sources = script.sourceMap.sourceURLs();\n    for (let i = 0; i < sources.length; i++) {\n      if (shouldIgnoreSource(sources[i])) {\n        continue;\n      }\n\n      const sourceSize = sizes.files[sources[i]];\n      sourceDataArray.push({\n        source: normalizeSource(sources[i]),\n        resourceSize: sourceSize,\n      });\n    }\n  }\n\n  const duplication: ScriptDuplication = new Map();\n  for (const [script, sourceDataArray] of sourceDatasMap) {\n    for (const sourceData of sourceDataArray) {\n      let data = duplication.get(sourceData.source);\n      if (!data) {\n        data = {estimatedDuplicateBytes: 0, duplicates: []};\n        duplication.set(sourceData.source, data);\n      }\n      const compressionRatio = script.request ? compressionRatios.get(script.request?.args.data.requestId) ?? 1 : 1;\n      const transferSize = Math.round(sourceData.resourceSize * compressionRatio);\n      data.duplicates.push({\n        script,\n        attributedSize: transferSize,\n      });\n    }\n  }\n\n  const duplicationGroupedByNodeModules = groupByNodeModules(duplication);\n\n  normalizeDuplication(duplication);\n  normalizeDuplication(duplicationGroupedByNodeModules);\n\n  return {\n    duplication: sorted(duplication),\n    duplicationGroupedByNodeModules: sorted(duplicationGroupedByNodeModules),\n  };\n}\n"]}