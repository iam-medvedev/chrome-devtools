{"version":3,"file":"FetchNodes.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/extras/FetchNodes.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as TraceEngine from '../trace.js';\nimport {assertNotNullOrUndefined} from '../../../core/platform/platform.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport {createTarget} from '../../../testing/EnvironmentHelpers.js';\nimport {\n  clearAllMockConnectionResponseHandlers,\n  clearMockConnectionResponseHandler,\n  describeWithMockConnection,\n  setMockConnectionResponseHandler,\n} from '../../../testing/MockConnection.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\n\nfunction nodeId<T extends Protocol.DOM.BackendNodeId|Protocol.DOM.NodeId>(x: number): T {\n  return x as T;\n}\n\ndescribeWithMockConnection('TraceSDKServices', function() {\n  beforeEach(async () => {\n    clearAllMockConnectionResponseHandlers();\n    TraceEngine.Extras.FetchNodes._TEST_clearCache();\n  });\n\n  describe('DOMNodeLookup', function() {\n    it('returns the DOM Node for the given node ID', async function() {\n      // Create a mock target, dom model, document and node.\n      const target = createTarget();\n      const domModel = target.model(SDK.DOMModel.DOMModel);\n      assertNotNullOrUndefined(domModel);\n      const documentNode = {nodeId: nodeId(1)};\n      const domNode = new SDK.DOMModel.DOMNode(domModel);\n      domNode.id = nodeId(2);\n\n      // Set related CDP methods responses to return our mock document and node.\n      setMockConnectionResponseHandler('DOM.pushNodesByBackendIdsToFrontend', () => ({nodeIds: [domNode.id]}));\n      setMockConnectionResponseHandler('DOM.getDocument', () => ({root: documentNode}));\n\n      // Register the mock document and node in DOMModel, these use the mock responses set above.\n      await domModel.requestDocument();\n      domModel.registerNode(domNode);\n\n      const modelData = await TraceLoader.traceEngine(this, 'cls-single-frame.json.gz');\n      const result = await TraceEngine.Extras.FetchNodes.domNodeForBackendNodeID(modelData, nodeId(2));\n      assert.strictEqual(result, domNode);\n\n      // Clear the mock and re-set it to return nothing to test the bad path.\n      clearMockConnectionResponseHandler('DOM.pushNodesByBackendIdsToFrontend');\n      setMockConnectionResponseHandler('DOM.pushNodesByBackendIdsToFrontend', () => ({nodeIds: []}));\n      const doesNotExistResult = await TraceEngine.Extras.FetchNodes.domNodeForBackendNodeID(modelData, nodeId(99));\n      assert.isNull(doesNotExistResult);\n    });\n\n    it('caches the call and does not look up a node more than once per model data', async () => {\n      // Create a mock target, dom model, document and node.\n      const target = createTarget();\n      const domModel = target.model(SDK.DOMModel.DOMModel);\n      assertNotNullOrUndefined(domModel);\n      const documentNode = {nodeId: nodeId(1)};\n      const domNode = new SDK.DOMModel.DOMNode(domModel);\n      domNode.id = nodeId(2);\n      const pushNodesSpy = sinon.spy(domModel, 'pushNodesByBackendIdsToFrontend');\n\n      // Set related CDP methods responses to return our mock document and node.\n      setMockConnectionResponseHandler('DOM.pushNodesByBackendIdsToFrontend', () => ({nodeIds: [domNode.id]}));\n      setMockConnectionResponseHandler('DOM.getDocument', () => ({root: documentNode}));\n      await domModel.requestDocument();\n      domModel.registerNode(domNode);\n\n      // The model data is only used as a cache key, so we don't need it to be real to test this.\n      const modelData1 = {} as unknown as TraceEngine.Handlers.Types.TraceParseData;\n      const modelData2 = {} as unknown as TraceEngine.Handlers.Types.TraceParseData;\n      const result = await TraceEngine.Extras.FetchNodes.domNodeForBackendNodeID(modelData1, nodeId(2));\n      assert.isNotNull(result);\n      // Look it up again to test the cache.\n      await TraceEngine.Extras.FetchNodes.domNodeForBackendNodeID(modelData1, nodeId(2));\n      await TraceEngine.Extras.FetchNodes.domNodeForBackendNodeID(modelData2, nodeId(2));\n      // The call with the new model data did not hit the cache.\n      assert.strictEqual(pushNodesSpy.callCount, 2);\n    });\n\n    it('can look up multiple nodes at once', async () => {\n      // Create a mock target, dom model, document and node.\n      const target = createTarget();\n      const domModel = target.model(SDK.DOMModel.DOMModel);\n      assertNotNullOrUndefined(domModel);\n      const documentNode = {nodeId: nodeId(1)};\n      const domNodeId2 = new SDK.DOMModel.DOMNode(domModel);\n      domNodeId2.id = nodeId(2);\n      const domNodeId3 = new SDK.DOMModel.DOMNode(domModel);\n      domNodeId3.id = nodeId(3);\n\n      // Set related CDP methods responses to return our mock document and node.\n      setMockConnectionResponseHandler(\n          'DOM.pushNodesByBackendIdsToFrontend', () => ({nodeIds: [domNodeId2.id, domNodeId3.id]}));\n      setMockConnectionResponseHandler('DOM.getDocument', () => ({root: documentNode}));\n      await domModel.requestDocument();\n      domModel.registerNode(domNodeId2);\n      domModel.registerNode(domNodeId3);\n\n      // The model data is only used as a cache key, so we don't need it to be real to test this.\n      const modelData = {} as unknown as TraceEngine.Handlers.Types.TraceParseData;\n      const result =\n          await TraceEngine.Extras.FetchNodes.domNodesForMultipleBackendNodeIds(modelData, [nodeId(2), nodeId(3)]);\n      assert.isNotNull(result);\n      const entries = Array.from(result.entries());\n      assert.deepEqual(entries, [\n        [nodeId<Protocol.DOM.BackendNodeId>(2), domNodeId2],\n        [nodeId<Protocol.DOM.BackendNodeId>(3), domNodeId3],\n      ]);\n    });\n  });\n\n  describe('LayoutShifts', () => {\n    it('returns a list of sources for the given event', async () => {\n      // Create a mock target, dom model, document and node.\n      const target = createTarget();\n      const domModel = target.model(SDK.DOMModel.DOMModel);\n      assertNotNullOrUndefined(domModel);\n      const documentNode = {nodeId: 1 as Protocol.DOM.NodeId};\n      const domNode = new SDK.DOMModel.DOMNode(domModel);\n      domNode.id = 2 as Protocol.DOM.NodeId;\n\n      // Set related CDP methods responses to return our mock document and node.\n      setMockConnectionResponseHandler('DOM.pushNodesByBackendIdsToFrontend', () => ({nodeIds: [domNode.id]}));\n      setMockConnectionResponseHandler('DOM.getDocument', () => ({root: documentNode}));\n\n      // Register the mock document and node in DOMModel, these use the mock responses set above.\n      await domModel.requestDocument();\n      domModel.registerNode(domNode);\n\n      const modelData = {} as unknown as TraceEngine.Handlers.Types.TraceParseData;\n      const event = {\n        args: {\n          data: {\n            impacted_nodes: [{\n              node_id: 1 as Protocol.DOM.BackendNodeId,\n              old_rect: [0, 0, 10, 10],\n              new_rect: [0, 0, 20, 20],\n            }],\n          },\n        },\n      } as unknown as TraceEngine.Types.TraceEvents.TraceEventLayoutShift;\n      const sources = await TraceEngine.Extras.FetchNodes.sourcesForLayoutShift(modelData, event);\n      assert.lengthOf(sources, 1);\n      assert.deepEqual(sources.at(0), {\n        node: domNode,\n        previousRect: new DOMRect(0, 0, 10, 10),\n        currentRect: new DOMRect(0, 0, 20, 20),\n      });\n    });\n\n    it('returns normalized nodes if we can calculate the window.devicePixelRatio', async () => {\n      createTarget();\n      setMockConnectionResponseHandler('Runtime.evaluate', () => ({result: {value: 4, type: 'number'}}));\n      const impactedNodes: TraceEngine.Types.TraceEvents.TraceImpactedNode[] = [\n        {\n          new_rect: [0, 0, 40, 80],\n          node_id: 1 as Protocol.DOM.BackendNodeId,\n          old_rect: [20, 20, 40, 80],\n        },\n        {\n          new_rect: [10, 10, 10, 10],\n          node_id: 1 as Protocol.DOM.BackendNodeId,\n          old_rect: [0, 0, 10, 10],\n        },\n      ];\n      const mockShift = {args: {data: {impacted_nodes: impactedNodes}}} as\n          TraceEngine.Types.TraceEvents.TraceEventLayoutShift;\n      const modelData = {} as unknown as TraceEngine.Handlers.Types.TraceParseData;\n      const normalized =\n          await TraceEngine.Extras.FetchNodes.normalizedImpactedNodesForLayoutShift(modelData, mockShift);\n      assert.deepEqual(normalized, [\n        {\n          new_rect: [0, 0, 10, 20],\n          node_id: 1 as Protocol.DOM.BackendNodeId,\n          old_rect: [5, 5, 10, 20],\n        },\n        {\n          new_rect: [2.5, 2.5, 2.5, 2.5],\n          node_id: 1 as Protocol.DOM.BackendNodeId,\n          old_rect: [0, 0, 2.5, 2.5],\n        },\n      ]);\n    });\n  });\n});\n"]}