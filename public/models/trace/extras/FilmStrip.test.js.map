{"version":3,"file":"FilmStrip.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/extras/FilmStrip.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../trace.js';\n\ndescribeWithEnvironment('FilmStrip', function() {\n  it('identifies the frames from a trace', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n    const filmStrip = Trace.Extras.FilmStrip.fromParsedTrace(parsedTrace);\n    assert.lengthOf(filmStrip.frames, 5);\n  });\n\n  it('caches the film strip based on the trace data and the zero time', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n    const filmStrip1 = Trace.Extras.FilmStrip.fromParsedTrace(parsedTrace);\n    const filmStrip2 = Trace.Extras.FilmStrip.fromParsedTrace(parsedTrace);\n    // It is from cache so you get back the exact same object.\n    assert.strictEqual(filmStrip1, filmStrip2);\n\n    const filmStrip3 = Trace.Extras.FilmStrip.fromParsedTrace(parsedTrace, Trace.Types.Timing.MicroSeconds(0));\n    const filmStrip4 = Trace.Extras.FilmStrip.fromParsedTrace(parsedTrace, Trace.Types.Timing.MicroSeconds(5));\n    // Not equal as the calls had different start times.\n    assert.notStrictEqual(filmStrip3, filmStrip4);\n  });\n\n  it('exposes the snapshot string for each frame', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n    const filmStrip = Trace.Extras.FilmStrip.fromParsedTrace(parsedTrace);\n    assert.isTrue(filmStrip.frames.every(frame => {\n      return typeof frame.screenshotEvent.args.dataUri === 'string' && frame.screenshotEvent.args.dataUri.length > 0;\n    }));\n  });\n\n  it('can use a custom zero time to filter out screenshots', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n    const filmStrip = Trace.Extras.FilmStrip.fromParsedTrace(parsedTrace);\n    // Set a custom zero time after the first screenshot and ensure that we now only have four events.\n    const newCustomZeroTime = Trace.Types.Timing.MicroSeconds(filmStrip.frames[0].screenshotEvent.ts + 1000);\n    const newFilmStrip = Trace.Extras.FilmStrip.fromParsedTrace(parsedTrace, newCustomZeroTime);\n    // Check that the new film strip is all the frames other than the first, now we have set a custom time.\n    assert.deepEqual(newFilmStrip.frames.map(f => f.screenshotEvent.args.dataUri), [\n      filmStrip.frames[1].screenshotEvent.args.dataUri,\n      filmStrip.frames[2].screenshotEvent.args.dataUri,\n      filmStrip.frames[3].screenshotEvent.args.dataUri,\n      filmStrip.frames[4].screenshotEvent.args.dataUri,\n    ]);\n  });\n\n  it('can return the frame closest to a given timestamp', async function() {\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n    const filmStrip = Trace.Extras.FilmStrip.fromParsedTrace(parsedTrace);\n    const frameTimestamps = filmStrip.frames.map(frame => frame.screenshotEvent.ts);\n    assert.deepEqual(frameTimestamps, [1020034823345, 1020034961883, 1020035045298, 1020035061981, 1020035112030]);\n\n    const timestampNearestFirstFrame = Trace.Types.Timing.MicroSeconds(frameTimestamps[0] + 10);\n    assert.strictEqual(\n        Trace.Extras.FilmStrip.frameClosestToTimestamp(filmStrip, timestampNearestFirstFrame), filmStrip.frames.at(0));\n    const timestampNearestThirdFrame = Trace.Types.Timing.MicroSeconds(frameTimestamps[2] + 10);\n    assert.strictEqual(\n        Trace.Extras.FilmStrip.frameClosestToTimestamp(filmStrip, timestampNearestThirdFrame), filmStrip.frames.at(2));\n\n    const timestampBeforeAnyFrames = Trace.Types.Timing.MicroSeconds(frameTimestamps[0] - 100);\n    assert.isNull(Trace.Extras.FilmStrip.frameClosestToTimestamp(filmStrip, timestampBeforeAnyFrames));\n  });\n});\n"]}