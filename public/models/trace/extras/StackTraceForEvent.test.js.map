{"version":3,"file":"StackTraceForEvent.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/extras/StackTraceForEvent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../../generated/protocol.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../trace.js';\n\nfunction shapeStackTraceAsArray(stackTrace: Protocol.Runtime.StackTrace):\n    {callFrames: Protocol.Runtime.CallFrame[], description?: string}[] {\n  const stackTraceAsArray: {callFrames: Protocol.Runtime.CallFrame[], description?: string}[] = [];\n  let currentStackTrace: Protocol.Runtime.StackTrace|undefined = stackTrace;\n  while (currentStackTrace) {\n    // @ts-ignore `codeType` is not included in the protocol types but\n    // occasionally present\n    currentStackTrace.callFrames.forEach(callFrame => delete callFrame.codeType);\n    stackTraceAsArray.push({callFrames: currentStackTrace.callFrames, description: currentStackTrace.description});\n    currentStackTrace = currentStackTrace.parent;\n  }\n\n  return stackTraceAsArray;\n}\ndescribeWithEnvironment('StackTraceForTraceEvent', function() {\n  let parsedTrace: Trace.Handlers.Types.ParsedTrace;\n  beforeEach(async function() {\n    const traceEngineData = await TraceLoader.traceEngine(this, 'async-js-calls.json.gz');\n    parsedTrace = traceEngineData.parsedTrace;\n    Trace.Extras.StackTraceForEvent.clearCacheForTrace(parsedTrace);\n  });\n  afterEach(async () => {\n    Trace.Extras.StackTraceForEvent.clearCacheForTrace(parsedTrace);\n  });\n\n  it('correctly builds the stack trace of a profile call when it only has a synchronous stack trace.',\n     async function() {\n       const jsCall = parsedTrace.Renderer.allTraceEntries.find(\n           e => Trace.Types.Events.isProfileCall(e) && e.callFrame.functionName === 'startExample');\n       assert.exists(jsCall);\n       const stackTrace = Trace.Extras.StackTraceForEvent.get(jsCall, parsedTrace);\n       assert.exists(stackTrace);\n       const stackTraceArray = shapeStackTraceAsArray(stackTrace);\n       assert.lengthOf(stackTraceArray, 1);\n       const callFrames = stackTraceArray[0].callFrames;\n       assert.deepEqual(callFrames, [\n         {\n           columnNumber: 21,\n           functionName: 'startExample',\n           lineNumber: 25,\n           scriptId: '53' as Protocol.Runtime.ScriptId,\n           url: '',\n         },\n         {columnNumber: 0, functionName: '', lineNumber: 0, scriptId: '53' as Protocol.Runtime.ScriptId, url: ''},\n       ]);\n     });\n\n  it('correctly builds the stack trace of a profile call when it only has an asynchronous stack trace.',\n     async function() {\n       const jsCall = parsedTrace.Renderer.allTraceEntries.find(\n           e => Trace.Types.Events.isProfileCall(e) && e.callFrame.functionName === 'baz');\n       assert.exists(jsCall);\n       const stackTrace = Trace.Extras.StackTraceForEvent.get(jsCall, parsedTrace);\n       assert.exists(stackTrace);\n       const stackTraceArray = shapeStackTraceAsArray(stackTrace);\n       assert.lengthOf(stackTraceArray, 4);\n\n       assert.deepEqual(stackTraceArray, [\n         {\n           callFrames: [{\n             columnNumber: 12,\n             functionName: 'baz',\n             lineNumber: 13,\n             scriptId: '53' as Protocol.Runtime.ScriptId,\n             url: '',\n           }],\n           description: undefined,\n         },\n         {\n           callFrames: [{\n             columnNumber: 12,\n             functionName: 'bar',\n             lineNumber: 6,\n             scriptId: '53' as Protocol.Runtime.ScriptId,\n             url: '',\n           }],\n           description: 'requestIdleCallback',\n         },\n         {\n           callFrames: [{\n             columnNumber: 12,\n             functionName: 'foo',\n             lineNumber: 0,\n             scriptId: '53' as Protocol.Runtime.ScriptId,\n             url: '',\n           }],\n           description: 'setTimeout',\n         },\n         {\n           callFrames: [\n             {\n               columnNumber: 21,\n               functionName: 'startExample',\n               lineNumber: 25,\n               scriptId: '53' as Protocol.Runtime.ScriptId,\n               url: '',\n             },\n             {columnNumber: 0, functionName: '', lineNumber: 0, scriptId: '53', url: ''},\n           ],\n           description: 'requestAnimationFrame',\n         },\n       ]);\n     });\n\n  it('correctly skips frames set to be ignored.', async function() {\n    const jsCall = parsedTrace.Renderer.allTraceEntries.find(\n        e => Trace.Types.Events.isProfileCall(e) && e.callFrame.functionName === 'baz');\n    assert.exists(jsCall);\n    const isIgnoreListedCallback = (e: Trace.Types.Events.Event) =>\n        Trace.Types.Events.isProfileCall(e) && e.callFrame.functionName === 'bar';\n    const stackTrace = Trace.Extras.StackTraceForEvent.get(jsCall, parsedTrace, {isIgnoreListedCallback});\n    assert.exists(stackTrace);\n    const stackTraceArray = shapeStackTraceAsArray(stackTrace);\n    assert.lengthOf(stackTraceArray, 4);\n\n    assert.deepEqual(stackTraceArray, [\n      {\n        callFrames: [\n          {columnNumber: 12, functionName: 'baz', lineNumber: 13, scriptId: '53' as Protocol.Runtime.ScriptId, url: ''},\n        ],\n        description: undefined,\n      },\n      {callFrames: [], description: 'requestIdleCallback'},\n      {\n        callFrames: [\n          {columnNumber: 12, functionName: 'foo', lineNumber: 0, scriptId: '53' as Protocol.Runtime.ScriptId, url: ''},\n        ],\n        description: 'setTimeout',\n      },\n      {\n        callFrames: [\n          {\n            columnNumber: 21,\n            functionName: 'startExample',\n            lineNumber: 25,\n            scriptId: '53' as Protocol.Runtime.ScriptId,\n            url: '',\n          },\n          {columnNumber: 0, functionName: '', lineNumber: 0, scriptId: '53', url: ''},\n        ],\n        description: 'requestAnimationFrame',\n      },\n    ]);\n  });\n\n  it('uses cached data correctly.', async function() {\n    const fooCall = parsedTrace.Renderer.allTraceEntries.find(\n        e => Trace.Types.Events.isProfileCall(e) && e.callFrame.functionName === 'foo');\n    assert.exists(fooCall);\n    const result =\n        parsedTrace.AsyncJSCalls.asyncCallToScheduler.get(fooCall as Trace.Types.Events.SyntheticProfileCall);\n    assert.exists(result);\n    const {scheduler: parentOfFoo} = result;\n\n    // Compute stack trace of foo's parent\n    const stackTraceOfParent = Trace.Extras.StackTraceForEvent.get(parentOfFoo, parsedTrace);\n    assert.exists(stackTraceOfParent);\n    const stackTraceArray = shapeStackTraceAsArray(stackTraceOfParent);\n    assert.lengthOf(stackTraceArray, 1);\n\n    // Modify the cache, to check it's used when possible\n    const bottomFrame = stackTraceOfParent.callFrames.at(-1);\n    assert.exists(bottomFrame);\n    bottomFrame.functionName = 'Overriden name';\n\n    // Compute stack trace of foo, ensure the cache calculated with\n    // its parent is used.\n    const stackTraceOfFoo = Trace.Extras.StackTraceForEvent.get(fooCall, parsedTrace);\n    assert.exists(stackTraceOfFoo);\n    const stackTraceArray2 = shapeStackTraceAsArray(stackTraceOfFoo);\n    assert.deepEqual(stackTraceArray2, [\n      {\n        callFrames: [\n          {columnNumber: 12, functionName: 'foo', lineNumber: 0, scriptId: '53' as Protocol.Runtime.ScriptId, url: ''},\n        ],\n        description: undefined,\n      },\n      {\n        callFrames: [\n          {\n            columnNumber: 21,\n            functionName: 'startExample',\n            lineNumber: 25,\n            scriptId: '53' as Protocol.Runtime.ScriptId,\n            url: '',\n          },\n          {\n            columnNumber: 0,\n            functionName: bottomFrame.functionName,\n            lineNumber: 0,\n            scriptId: '53' as Protocol.Runtime.ScriptId,\n            url: '',\n          },\n        ],\n        description: 'requestAnimationFrame',\n      },\n    ]);\n  });\n});\n"]}