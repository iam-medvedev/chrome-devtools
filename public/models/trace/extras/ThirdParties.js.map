{"version":3,"file":"ThirdParties.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/extras/ThirdParties.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B,OAAO,KAAK,OAAO,MAAM,uBAAuB,CAAC;AACjD,OAAO,KAAK,KAAK,MAAM,mBAAmB,CAAC;AAE3C,OAAO,KAAK,WAAW,MAAM,kBAAkB,CAAC;AAChD,OAAO,KAAK,SAAS,MAAM,gBAAgB,CAAC;AAmB5C;;;;GAIG;AACH,SAAS,yBAAyB,CAAC,WAAuC;IACxE,iDAAiD;IACjD,MAAM,mBAAmB,GAAG,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE;SAClC,IAAI,CAAC,CAAC,CAAC,EAAE;QACR,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC;QACxB,2EAA2E;QAC3E,OAAO,CAAC,CAAC,aAAa,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IACpF,CAAC,CAAC;QACF,EAAE,OAAO,CAAC,MAAM,EAAE;SACjB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAC;IAExE,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACzB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,OAAO,mBAAmB,CAAC,OAAO,CAAC;AACrC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,qBAAqB,CACjC,WAAuC,EAAE,WAA0C;IACrF,MAAM,gBAAgB,GAAG,yBAAyB,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACxG,MAAM,IAAI,GAAG,eAAe,CAAC,gBAAgB,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IACzE,MAAM,SAAS,GAAG,iBAAiB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAEvD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,SAAS,iBAAiB,CACtB,kBAA8C,EAAE,WAAuC;IACzF,MAAM,gBAAgB,GAAyB,IAAI,GAAG,EAAmB,CAAC;IAC1E,MAAM,SAAS,GAAc,EAAE,CAAC;IAEhC,qCAAqC;IACrC,yEAAyE;IACzE,+CAA+C;IAC/C,MAAM,QAAQ,GAAG,CAAC,GAAG,kBAAkB,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;IACpE,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE,CAAC;QAC5B,IAAI,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC;YACnB,SAAS;QACX,CAAC;QACD,MAAM,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjF,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,SAAS;QACX,CAAC;QAED,MAAM,OAAO,GAAY;YACvB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,cAAc,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;YACjD,gGAAgG;YAChG,kEAAkE;YAClE,aAAa,EAAE,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE;YACnF,MAAM;SACP,CAAC;QACF,gBAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACtC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC1B,CAAC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,SAAS,eAAe,CACpB,gBAAsC,EAAE,WAAuC,EAC/E,WAA0C;IAC5C,MAAM,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC;IAErD,MAAM,gBAAgB,GAAG,CAAC,KAAyB,EAAU,EAAE;QAC7D,MAAM,MAAM,GAAG,QAAQ,EAAE,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAClD,OAAO,MAAM,EAAE,IAAI,IAAI,EAAE,CAAC;IAC5B,CAAC,CAAC;IACF,2EAA2E;IAC3E,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,yBAAyB,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC;IACjF,MAAM,MAAM,GACR,IAAI,WAAW,CAAC,mBAAmB,CAAC,aAAa,CAAC,MAAM,CAAC,6EAA6C,CAAC,CAAC,CAAC;IAE7G,2FAA2F;IAC3F,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAC/D,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAC7D,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,gBAAgB,CAAC,gBAAgB,EAAE;QAC5D,UAAU,EAAE,IAAI,WAAW,CAAC,mBAAmB,CAAC,EAAE,CAAC;QACnD,OAAO,EAAE,CAAC,MAAM,CAAC;QACjB,SAAS;QACT,OAAO;QACP,oBAAoB,EAAE,gBAAgB;QACtC,qBAAqB,EAAE,IAAI;QAC3B,mEAAmE;QACnE,oBAAoB,EAAE,IAAI;KAC3B,CAA+B,CAAC;IACjC,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ThirdPartyWeb from '../../../third_party/third-party-web/third-party-web.js';\nimport type * as Handlers from '../handlers/handlers.js';\nimport * as Helpers from '../helpers/helpers.js';\nimport * as Types from '../types/types.js';\n\nimport * as TraceFilter from './TraceFilter.js';\nimport * as TraceTree from './TraceTree.js';\n\nexport type Entity = typeof ThirdPartyWeb.ThirdPartyWeb.entities[number];\n\nexport interface Summary {\n  transferSize: number;\n  mainThreadTime: Types.Timing.Milli;\n  relatedEvents?: Types.Events.Event[];\n  entity: Entity;\n}\n\nexport interface ThirdPartySummary {\n  byEntity: Map<Entity, Summary>;\n  byUrl: Map<string, Summary>;\n  urlsByEntity: Map<Entity, Set<string>>;\n  eventsByEntity: Map<Entity, Types.Events.Event[]>;\n  madeUpEntityCache: Map<string, Entity>;\n}\n\n/**\n *\n * Returns Main frame main thread events.\n * These events are inline with the ones used by selectedEvents() of TimelineTreeViews\n */\nfunction collectMainThreadActivity(parsedTrace: Handlers.Types.ParsedTrace): Types.Events.Event[] {\n  // TODO: Note b/402658800 could be an issue here.\n  const mainFrameMainThread = parsedTrace.Renderer.processes.values()\n                                  .find(p => {\n                                    const url = p.url ?? '';\n                                    // Frame url checked a la CompatibilityTracksAppenders's addThreadAppenders\n                                    return p.isOnMainFrame && !url.startsWith('about:') && !url.startsWith('chrome:');\n                                  })\n                                  ?.threads.values()\n                                  .find(t => t.name === 'CrRendererMain');\n\n  if (!mainFrameMainThread) {\n    return [];\n  }\n\n  return mainFrameMainThread.entries;\n}\n\n/**\n * @param networkRequests Won't be filtered by trace bounds, so callers should ensure it is filtered.\n */\nexport function summarizeThirdParties(\n    parsedTrace: Handlers.Types.ParsedTrace, traceBounds: Types.Timing.TraceWindowMicro): Summary[] {\n  const mainThreadEvents = collectMainThreadActivity(parsedTrace).sort(Helpers.Trace.eventTimeComparator);\n  const node = getBottomUpTree(mainThreadEvents, parsedTrace, traceBounds);\n  const summaries = summarizeBottomUp(node, parsedTrace);\n\n  return summaries;\n}\n\nfunction summarizeBottomUp(\n    thirdPartyBottomUp: TraceTree.BottomUpRootNode, parsedTrace: Handlers.Types.ParsedTrace): Summary[] {\n  const summaryForEntity: Map<Entity, Summary> = new Map<Entity, Summary>();\n  const summaries: Summary[] = [];\n\n  // Our top nodes are the 3P entities.\n  // Tree nodes are built lazily, .children() is essential, it triggers the\n  // construction of the root node's child nodes.\n  const topNodes = [...thirdPartyBottomUp.children().values()].flat();\n  for (const node of topNodes) {\n    if (node.id === '') {\n      continue;\n    }\n    const entity = parsedTrace.Renderer.entityMappings.entityByEvent.get(node.event);\n    if (!entity) {\n      continue;\n    }\n\n    const summary: Summary = {\n      transferSize: node.transferSize,\n      mainThreadTime: Types.Timing.Milli(node.selfTime),\n      // Lets use the mapper events as our source of events, since we use the main thread to construct\n      // the bottom up tree. The mapper will give us all related events.\n      relatedEvents: parsedTrace.Renderer.entityMappings.eventsByEntity.get(entity) ?? [],\n      entity,\n    };\n    summaryForEntity.set(entity, summary);\n    summaries.push(summary);\n  }\n  return summaries;\n}\n\nfunction getBottomUpTree(\n    mainThreadEvents: Types.Events.Event[], parsedTrace: Handlers.Types.ParsedTrace,\n    tracebounds: Types.Timing.TraceWindowMicro): TraceTree.BottomUpRootNode {\n  const mappings = parsedTrace.Renderer.entityMappings;\n\n  const groupingFunction = (event: Types.Events.Event): string => {\n    const entity = mappings?.entityByEvent.get(event);\n    return entity?.name ?? '';\n  };\n  // Use the same filtering as front_end/panels/timeline/TimelineTreeView.ts.\n  const visibleEvents = Helpers.Trace.VISIBLE_TRACE_EVENT_TYPES.values().toArray();\n  const filter =\n      new TraceFilter.VisibleEventsFilter(visibleEvents.concat([Types.Events.Name.SYNTHETIC_NETWORK_REQUEST]));\n\n  // The bottom up root node handles all the \"in Tracebounds\" checks we need for the insight.\n  const startTime = Helpers.Timing.microToMilli(tracebounds.min);\n  const endTime = Helpers.Timing.microToMilli(tracebounds.max);\n  const node = new TraceTree.BottomUpRootNode(mainThreadEvents, {\n    textFilter: new TraceFilter.ExclusiveNameFilter([]),\n    filters: [filter],\n    startTime,\n    endTime,\n    eventGroupIdCallback: groupingFunction,\n    calculateTransferSize: true,\n    // Ensure we group by 3P alongside eventID for correct 3P grouping.\n    forceGroupIdCallback: true,\n  }) as TraceTree.BottomUpRootNode;\n  return node;\n}\n"]}