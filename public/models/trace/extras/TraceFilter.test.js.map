{"version":3,"file":"TraceFilter.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/extras/TraceFilter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../trace.js';\n\nimport * as TraceFilter from './TraceFilter.js';\n\ndescribeWithEnvironment('TraceFilter', () => {\n  describe('VisibleEventsFilter', () => {\n    it('accepts events that are set in the constructor and rejects other events', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'user-timings.json.gz');\n      const userTimingEvent = (parsedTrace.UserTimings.performanceMeasures).at(0);\n      assert.isOk(userTimingEvent);\n\n      const visibleFilter = new TraceFilter.VisibleEventsFilter([\n        // Set an random record type to be visible - the exact type is not important for the test.\n        Trace.Types.Events.Name.USER_TIMING,\n      ]);\n\n      assert.isTrue(visibleFilter.accept(userTimingEvent));\n    });\n\n    describe('eventType', () => {\n      it('returns ConsoleTime if the event has the blink.console category', async function() {\n        const {parsedTrace} = await TraceLoader.traceEngine(this, 'timings-track.json.gz');\n        const consoleTimingEvent = (parsedTrace.UserTimings.consoleTimings).at(0);\n        assert.isOk(consoleTimingEvent);\n        assert.strictEqual(\n            TraceFilter.VisibleEventsFilter.eventType(consoleTimingEvent), Trace.Types.Events.Name.CONSOLE_TIME);\n      });\n\n      it('returns UserTiming if the event has the blink.user_timing category', async function() {\n        const {parsedTrace} = await TraceLoader.traceEngine(this, 'timings-track.json.gz');\n        const userTimingEvent = (parsedTrace.UserTimings.performanceMeasures).at(0);\n        assert.isOk(userTimingEvent);\n        assert.strictEqual(\n            TraceFilter.VisibleEventsFilter.eventType(userTimingEvent), Trace.Types.Events.Name.USER_TIMING);\n      });\n\n      it('returns the event name if the event is any other category', async function() {\n        const {parsedTrace} = await TraceLoader.traceEngine(this, 'cls-single-frame.json.gz');\n        const layoutShiftEvent = parsedTrace.LayoutShifts.clusters.at(0)?.events.at(0);\n        assert.isOk(layoutShiftEvent);\n        assert.strictEqual(\n            TraceFilter.VisibleEventsFilter.eventType(layoutShiftEvent),\n            Trace.Types.Events.Name.SYNTHETIC_LAYOUT_SHIFT);\n      });\n    });\n  });\n\n  describe('TimelineInvisibleEventsFilter', () => {\n    it('does not accept events that have been set as invisible', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'user-timings.json.gz');\n      const userTimingEvent = (parsedTrace.UserTimings.performanceMeasures).at(0);\n      assert.isOk(userTimingEvent);\n\n      const invisibleFilter = new TraceFilter.InvisibleEventsFilter([\n        Trace.Types.Events.Name.USER_TIMING,\n\n      ]);\n      assert.isFalse(invisibleFilter.accept(userTimingEvent));\n    });\n\n    it('accepts events that have not been set as invisible', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'cls-single-frame.json.gz');\n      const layoutShiftEvent = parsedTrace.LayoutShifts.clusters.at(0)?.events.at(0);\n      assert.isOk(layoutShiftEvent);\n\n      const invisibleFilter = new TraceFilter.InvisibleEventsFilter([\n        Trace.Types.Events.Name.USER_TIMING,\n\n      ]);\n      assert.isTrue(invisibleFilter.accept(layoutShiftEvent));\n    });\n  });\n\n  describe('ExclusiveNameFilter', () => {\n    it('accepts events that do not match the provided set of names to exclude', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'user-timings.json.gz');\n      const userTimingEvent = (parsedTrace.UserTimings.performanceMeasures).at(0);\n      assert.isOk(userTimingEvent);\n\n      const filter = new TraceFilter.ExclusiveNameFilter([\n        Trace.Types.Events.Name.LAYOUT_SHIFT,\n      ]);\n      assert.isTrue(filter.accept(userTimingEvent));\n    });\n\n    it('rejects events that match the provided set of names to exclude', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'cls-single-frame.json.gz');\n      const layoutShiftEvent = parsedTrace.LayoutShifts.clusters.at(0)?.events.at(0);\n      assert.isOk(layoutShiftEvent);\n\n      const filter = new TraceFilter.ExclusiveNameFilter([\n        Trace.Types.Events.Name.SYNTHETIC_LAYOUT_SHIFT,\n      ]);\n      assert.isFalse(filter.accept(layoutShiftEvent));\n    });\n  });\n});\n"]}