import type * as Handlers from '../handlers/handlers.js';
type GeneratedFileSizes = {
    errorMessage: string;
} | {
    files: Record<string, number>;
    unmappedBytes: number;
    totalBytes: number;
};
/**
 * Using a script's contents and source map, attribute every generated byte to an authored source file.
 */
export declare function computeGeneratedFileSizes(script: Handlers.ModelHandlers.Scripts.Script): GeneratedFileSizes;
export declare function normalizeSource(source: string): string;
/**
 * The key is a source map `sources` entry, but normalized via `normalizeSource`.
 *
 * The value is an array with an entry for every script that has a source map which
 * denotes that this source was used, along with the estimated resource size it takes
 * up in the script.
 */
export type ScriptDuplication = Map<string, Array<{
    script: Handlers.ModelHandlers.Scripts.Script;
    resourceSize: number;
}>>;
/**
 * Sorts each array within @see ScriptDuplication by resource size, and drops information
 * on sources that are too small.
 */
export declare function normalizeDuplication(duplication: ScriptDuplication): void;
/**
 * Returns a @see ScriptDuplication for the given collection of script contents + source maps.
 */
export declare function computeScriptDuplication(scriptsData: Handlers.ModelHandlers.Scripts.ScriptsData): ScriptDuplication;
export {};
