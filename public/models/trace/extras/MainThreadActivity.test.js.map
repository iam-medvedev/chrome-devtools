{"version":3,"file":"MainThreadActivity.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/extras/MainThreadActivity.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  type FakeEventPayload,\n  makeFakeEventPayload,\n} from '../../../testing/TraceHelpers.js';\nimport * as TraceEngine from '../trace.js';\n\nconst {assert} = chai;\n\nconst DEVTOOLS_CATEGORY = 'disabled-by-default-devtools.timeline';\nfunction milliToMicro(x: number): TraceEngine.Types.Timing.MicroSeconds {\n  return TraceEngine.Helpers.Timing.millisecondsToMicroseconds(TraceEngine.Types.Timing.MilliSeconds(x));\n}\n\nfunction makeFakeMainThreadTraceEntry(payload: FakeEventPayload): TraceEngine.Types.TraceEvents.SyntheticTraceEntry {\n  // It does not technically make a full TraceEntry, but for these tests that\n  // need some events to simulate main thread activity, they are good enough.\n  return makeFakeEventPayload(payload) as unknown as TraceEngine.Types.TraceEvents.SyntheticTraceEntry;\n}\n\nfunction makeFakeBounds(min: number, max: number): TraceEngine.Types.Timing.TraceWindowMicroSeconds {\n  return {\n    min: TraceEngine.Types.Timing.MicroSeconds(min),\n    max: TraceEngine.Types.Timing.MicroSeconds(max),\n    range: TraceEngine.Types.Timing.MicroSeconds(max - min),\n  };\n}\n\ndescribe('MainThreadActivity', function() {\n  it('will use the trace bounds if there is no period of low utilitisation', async () => {\n    const events = [\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(100),\n        dur: milliToMicro(50),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(200),\n        dur: milliToMicro(50),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(300),\n        dur: milliToMicro(50),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(400),\n        dur: milliToMicro(50),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n    ];\n    const bounds = makeFakeBounds(milliToMicro(100), milliToMicro(450));\n    const win = TraceEngine.Extras.MainThreadActivity.calculateWindow(bounds, events);\n    assert.strictEqual(win.min, bounds.min);\n    assert.strictEqual(win.max, bounds.max);\n  });\n\n  it('focuses the window to avoid periods of low utilisation', async () => {\n    const events = [\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(1),\n        dur: milliToMicro(50),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(200),\n        dur: milliToMicro(50),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(210),\n        dur: milliToMicro(50),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(240),\n        dur: milliToMicro(50),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(230),\n        dur: milliToMicro(50),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(1_000),\n        dur: milliToMicro(50),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n    ];\n    const bounds = makeFakeBounds(milliToMicro(1), milliToMicro(1_050));\n    const win = TraceEngine.Extras.MainThreadActivity.calculateWindow(bounds, events);\n    // This trace has:\n    // 1 event at 1\n    // 4 events between 200 and 230ms\n    // 1 event at 1000ms\n    // Therefore, the window focuses on the time period of 1 to 280ms (280 is\n    // the end time of the event that starts at 230ms).\n    // The right number looks odd because when we zoom the window we adjust it\n    // postively by 5% for the upper bound to give it some breathing room.\n    assert.strictEqual(win.min, milliToMicro(1));\n    assert.strictEqual(win.max, milliToMicro(293.95));\n  });\n\n  it('uses the entire trace window if the period of low utilisation makes up the majority of the trace', async () => {\n    const events = [\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(100),\n        dur: milliToMicro(50),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(200_000),\n        dur: milliToMicro(50_000),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(300_000),\n        dur: milliToMicro(50_000),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(400_000),\n        dur: milliToMicro(50_000),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n      makeFakeMainThreadTraceEntry({\n        name: 'Program',\n        categories: [DEVTOOLS_CATEGORY],\n        ts: milliToMicro(4_000_000),\n        dur: milliToMicro(50_000),\n        ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n      }),\n    ];\n    // These events are very spaced out!\n    // 1 at 100ms\n    // 1 at 200,000ms\n    // 1 at 300,000ms\n    // 1 at 400,000ms\n    // 1 at 4million ms!\n    // This means that the area the autozoom picks is less than 10% of the\n    // total time span, meaning that we fallback to just showing the entire\n    // trace window.\n    const bounds = makeFakeBounds(milliToMicro(100), milliToMicro(4_050_000));\n    const win = TraceEngine.Extras.MainThreadActivity.calculateWindow(bounds, events);\n    // We expect the window to equal the entire trace bounds.\n    assert.deepEqual(win, bounds);\n  });\n});\n"]}