{"version":3,"file":"ThirdParties.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/extras/ThirdParties.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../trace.js';\n\ndescribeWithEnvironment('ThirdParties', function() {\n  describe('byTraceBounds', function() {\n    it('full trace bounds', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'load-simple.json.gz');\n\n      const requests = parsedTrace.NetworkRequests.byTime.filter(\n          request => Trace.Helpers.Timing.eventIsInBounds(request, parsedTrace.Meta.traceBounds));\n      const thirdPartySummary =\n          Trace.Extras.ThirdParties.summarizeThirdParties(parsedTrace, parsedTrace.Meta.traceBounds, requests);\n\n      const results = [...thirdPartySummary.byEntity.entries()].map(([entity, summary]) => [entity.name, summary]);\n      assert.deepEqual(results, [\n        ['localhost', {mainThreadTime: 26381, transferSize: 751}],\n        ['Google Fonts', {mainThreadTime: 0, transferSize: 0}],\n      ]);\n\n      assert.deepEqual([...thirdPartySummary.byUrl.entries()], [\n        ['extensions::SafeBuiltins', {mainThreadTime: 1448, transferSize: 0}],\n        ['http://localhost:8080/', {mainThreadTime: 21674, transferSize: 751}],\n        ['http://localhost:8080/blocking.js', {mainThreadTime: 2451, transferSize: 0}],\n        ['http://localhost:8080/module.js', {mainThreadTime: 2256, transferSize: 0}],\n        ['https://fonts.googleapis.com/css2?family=Orelega+One&display=swap', {mainThreadTime: 0, transferSize: 0}],\n        ['http://localhost:8080/styles.css', {mainThreadTime: 0, transferSize: 0}],\n        [\n          'https://fonts.gstatic.com/s/orelegaone/v1/3qTpojOggD2XtAdFb-QXZFt93kY.woff2',\n          {mainThreadTime: 0, transferSize: 0}\n        ],\n      ]);\n\n      const urls = [...thirdPartySummary.urlsByEntity.entries()].map(([entity, urls]) => [entity.name, [...urls]]);\n      assert.deepEqual(urls, [\n        [\n          'localhost',\n          [\n            'http://localhost:8080/',\n            'http://localhost:8080/blocking.js',\n            'http://localhost:8080/module.js',\n            'http://localhost:8080/styles.css',\n          ]\n        ],\n        [\n          'Google Fonts',\n          [\n            'https://fonts.googleapis.com/css2?family=Orelega+One&display=swap',\n            'https://fonts.gstatic.com/s/orelegaone/v1/3qTpojOggD2XtAdFb-QXZFt93kY.woff2',\n          ]\n        ],\n      ]);\n    });\n\n    it('works even without network requests', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'load-simple.json.gz');\n\n      const thirdPartySummary =\n          Trace.Extras.ThirdParties.summarizeThirdParties(parsedTrace, parsedTrace.Meta.traceBounds, []);\n\n      const results = [...thirdPartySummary.byEntity.entries()].map(([entity, summary]) => [entity.name, summary]);\n      assert.deepEqual(results, [\n        // Since network requests were not given, there is no transfer size.\n        ['localhost', {mainThreadTime: 26381, transferSize: 0}],\n      ]);\n\n      assert.deepEqual([...thirdPartySummary.byUrl.entries()], [\n        ['extensions::SafeBuiltins', {mainThreadTime: 1448, transferSize: 0}],\n        ['http://localhost:8080/', {mainThreadTime: 21674, transferSize: 0}],\n        ['http://localhost:8080/blocking.js', {mainThreadTime: 2451, transferSize: 0}],\n        ['http://localhost:8080/module.js', {mainThreadTime: 2256, transferSize: 0}],\n      ]);\n\n      const urls = [...thirdPartySummary.urlsByEntity.entries()].map(([entity, urls]) => [entity.name, [...urls]]);\n      assert.deepEqual(urls, [\n        [\n          'localhost',\n          [\n            'http://localhost:8080/',\n            'http://localhost:8080/blocking.js',\n            'http://localhost:8080/module.js',\n          ]\n        ],\n      ]);\n    });\n\n    it('partial trace bounds', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'load-simple.json.gz');\n\n      // Font requests of load-simple.json.gz begin & end before/after this bounds.\n      const min = Trace.Types.Timing.Micro(1634222300000);\n      const max = Trace.Types.Timing.Micro(1634222320000);\n      const bounds = {min, max, range: Trace.Types.Timing.Micro(max - min)};\n\n      const requests =\n          parsedTrace.NetworkRequests.byTime.filter(request => Trace.Helpers.Timing.eventIsInBounds(request, bounds));\n      const thirdPartySummary = Trace.Extras.ThirdParties.summarizeThirdParties(parsedTrace, bounds, requests);\n\n      const results = [...thirdPartySummary.byEntity.entries()].map(([entity, summary]) => [entity.name, summary]);\n      assert.deepEqual(results, [\n        // No main thread during given bounds. Some network.\n        ['localhost', {mainThreadTime: 0, transferSize: 751}],\n      ]);\n    });\n\n    it('no activity within trace bounds', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'load-simple.json.gz');\n\n      const min = Trace.Types.Timing.Micro(1634230000000);\n      const max = Trace.Types.Timing.Micro(1634231000000);\n      const bounds = {min, max, range: Trace.Types.Timing.Micro(max - min)};\n\n      const requests =\n          parsedTrace.NetworkRequests.byTime.filter(request => Trace.Helpers.Timing.eventIsInBounds(request, bounds));\n      const thirdPartySummary = Trace.Extras.ThirdParties.summarizeThirdParties(parsedTrace, bounds, requests);\n\n      const results = [...thirdPartySummary.byEntity.entries()].map(([entity, summary]) => [entity.name, summary]);\n      assert.deepEqual(results, []);\n    });\n  });\n});\n"]}