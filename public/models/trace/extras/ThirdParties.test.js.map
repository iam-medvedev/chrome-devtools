{"version":3,"file":"ThirdParties.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/extras/ThirdParties.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../trace.js';\n\nfunction extractUrlsFromSummaries(summaries: Trace.Extras.ThirdParties.Summary[]): Array<[string, string[]]> {\n  return summaries.map(s => {\n    const uniqueUrls = new Set<string>();\n    s.relatedEvents?.forEach(e => {\n      const url = e.args?.data?.url;\n      if (url) {\n        uniqueUrls.add(url);\n      }\n    });\n    return [s.entity.name, Array.from(uniqueUrls)];\n  });\n}\n\ndescribeWithEnvironment('ThirdParties', function() {\n  describe('byTraceBounds', function() {\n    it('full trace bounds', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'load-simple.json.gz');\n      const summaries = Trace.Extras.ThirdParties.summarizeThirdParties(parsedTrace, parsedTrace.Meta.traceBounds);\n\n      const results = summaries.map(s => [s.entity.name, s.mainThreadTime, s.transferSize]);\n      assert.deepEqual(results, [\n        ['localhost', 24.947999954223633, 1503],\n        ['Google Fonts', 0, 25325],\n      ]);\n      const urls = extractUrlsFromSummaries(summaries);\n      assert.deepEqual(urls, [\n        [\n          'localhost',\n          [\n            'http://localhost:8080/',\n            'http://localhost:8080/styles.css',\n            'http://localhost:8080/blocking.js',\n            'http://localhost:8080/module.js',\n          ]\n        ],\n        [\n          'Google Fonts',\n          [\n            'https://fonts.googleapis.com/css2?family=Orelega+One&display=swap',\n            'https://fonts.gstatic.com/s/orelegaone/v1/3qTpojOggD2XtAdFb-QXZFt93kY.woff2',\n          ]\n        ],\n      ]);\n    });\n\n    it('partial trace bounds', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'load-simple.json.gz');\n\n      // Font requests of load-simple.json.gz begin & end before/after this bounds.\n      const min = Trace.Types.Timing.Micro(1634222300000);\n      const max = Trace.Types.Timing.Micro(1634222320000);\n      const bounds = {min, max, range: Trace.Types.Timing.Micro(max - min)};\n\n      const summaries = Trace.Extras.ThirdParties.summarizeThirdParties(parsedTrace, bounds);\n\n      const results = summaries.map(s => [s.entity.name, s.mainThreadTime, s.transferSize]);\n      assert.deepEqual(results, [\n        // No main thread during given bounds. Some network.\n        ['localhost', 0, 419],\n      ]);\n    });\n\n    it('no activity within trace bounds', async function() {\n      const {parsedTrace} = await TraceLoader.traceEngine(this, 'load-simple.json.gz');\n\n      const min = Trace.Types.Timing.Micro(1634230000000);\n      const max = Trace.Types.Timing.Micro(1634231000000);\n      const bounds = {min, max, range: Trace.Types.Timing.Micro(max - min)};\n      const summaries = Trace.Extras.ThirdParties.summarizeThirdParties(parsedTrace, bounds);\n\n      const results = summaries.map(s => [s.entity.name, s.mainThreadTime, s.transferSize]);\n      assert.deepEqual(results, []);\n    });\n  });\n});\n"]}