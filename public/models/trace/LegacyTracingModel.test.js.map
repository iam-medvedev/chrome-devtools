{"version":3,"file":"LegacyTracingModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/trace/LegacyTracingModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as TraceEngine from '../trace/trace.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {\n  StubbedThread,\n  makeFakeEventPayload,\n} from '../../testing/TraceHelpers.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\n\ndescribeWithEnvironment('TracingModel', function() {\n  it('can create events from an EventPayload[] and finds the correct number of processes', async function() {\n    const events = await TraceLoader.rawEvents<TraceEngine.TracingManager.EventPayload>(this, 'basic.json.gz');\n    const model = new TraceEngine.Legacy.TracingModel();\n    model.addEvents(events);\n    assert.strictEqual(model.sortedProcesses().length, 4);\n  });\n\n  describe('parsing trace events with unusual characters and large snapshots', function() {\n    function setupAndReturnMainThread(): TraceEngine.Legacy.Thread {\n      const testEvents = [\n        makeFakeEventPayload({\n          name: 'NonAscii',\n          categories: ['devtools.timeline'],\n          ts: 1,\n          ph: TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n          args: {\n            'nonascii':\n                '\\u043b\\u0435\\u0442 \\u043c\\u0438 \\u0441\\u043f\\u0438\\u043a \\u0444\\u0440\\u043e\\u043c \\u043c\\u0430\\u0439 \\u0445\\u0430\\u0440\\u0442',\n          },\n        }),\n        makeFakeEventPayload({\n          name: 'NonAsciiSnapshot',\n          categories: ['devtools.timeline'],\n          args: {'snapshot': '\\u0442\\u0435\\u0441\\u0442'},\n          ts: 1,\n          ph: TraceEngine.Types.TraceEvents.Phase.OBJECT_SNAPSHOT,\n        }),\n        makeFakeEventPayload({\n          name: 'ShortSnapshot',\n          categories: ['devtools.timeline'],\n          ts: 1,\n          args: {'snapshot': 'short snapshot data'},\n          ph: TraceEngine.Types.TraceEvents.Phase.OBJECT_SNAPSHOT,\n        }),\n        makeFakeEventPayload({\n          name: 'LongSnapshot',\n          categories: ['devtools.timeline'],\n          args: {'snapshot': 'abcdef'.repeat(10_000)},\n          ts: 1,\n          ph: TraceEngine.Types.TraceEvents.Phase.OBJECT_SNAPSHOT,\n        }),\n      ];\n\n      const model = new TraceEngine.Legacy.TracingModel();\n      model.addEvents(testEvents);\n      const process = model.sortedProcesses()[0];\n      const thread = process.sortedThreads()[0];\n      return thread;\n    }\n\n    it('can parse trace events with non ascii characters', async function() {\n      const mainThread = setupAndReturnMainThread();\n      const nonAsciiEvent = mainThread.events().find(event => event.name === 'NonAscii');\n      if (!nonAsciiEvent) {\n        throw new Error('Could not find expected NonAscii event');\n      }\n      assert.strictEqual(\n          nonAsciiEvent.args.nonascii,\n          '\\u043b\\u0435\\u0442 \\u043c\\u0438 \\u0441\\u043f\\u0438\\u043a \\u0444\\u0440\\u043e\\u043c \\u043c\\u0430\\u0439 \\u0445\\u0430\\u0440\\u0442');\n    });\n\n    it('can parse an event with a non ascii snapshot', async function() {\n      const mainThread = setupAndReturnMainThread();\n      const nonAsciiEvent =\n          mainThread.events().find(event => event.name === 'NonAsciiSnapshot') as TraceEngine.Legacy.ObjectSnapshot;\n      if (!nonAsciiEvent) {\n        throw new Error('Could not find expected NonAscii event');\n      }\n      assert.isTrue(nonAsciiEvent instanceof TraceEngine.Legacy.ObjectSnapshot);\n      const data = nonAsciiEvent.getSnapshot() as unknown as string;\n      if (!data) {\n        throw new Error('Could not get object from snapshot event');\n      }\n      assert.strictEqual(data, '\\u0442\\u0435\\u0441\\u0442');\n    });\n\n    it('can parse an event with a short snapshot', async function() {\n      const mainThread = setupAndReturnMainThread();\n      const snapshotEvent =\n          mainThread.events().find(event => event.name === 'ShortSnapshot') as TraceEngine.Legacy.ObjectSnapshot;\n      if (!snapshotEvent) {\n        throw new Error('Could not find expected snapshot event');\n      }\n      assert.isTrue(snapshotEvent instanceof TraceEngine.Legacy.ObjectSnapshot);\n      const data = snapshotEvent.getSnapshot() as unknown as string;\n      if (!data) {\n        throw new Error('Could not get object from snapshot event');\n      }\n      assert.strictEqual(data, 'short snapshot data');\n    });\n    it('can parse an event with a long snapshot', async function() {\n      const mainThread = setupAndReturnMainThread();\n      const snapshotEvent =\n          mainThread.events().find(event => event.name === 'LongSnapshot') as TraceEngine.Legacy.ObjectSnapshot;\n      if (!snapshotEvent) {\n        throw new Error('Could not find expected snapshot event');\n      }\n      assert.isTrue(snapshotEvent instanceof TraceEngine.Legacy.ObjectSnapshot);\n      const data = snapshotEvent.getSnapshot() as unknown as string;\n      if (!data) {\n        throw new Error('Could not get object from snapshot event');\n      }\n      assert.strictEqual(data, 'abcdef'.repeat(10_000));\n    });\n  });\n\n  describe('fromPayload', function() {\n    it('can create an event from a payload for an LCP candidate event', async function() {\n      const rawEvents =\n          await TraceLoader.rawEvents<TraceEngine.TracingManager.EventPayload>(this, 'lcp-images.json.gz');\n      // Find an event to test with; pick the first LCP event so it is an event\n      // we understand and we get the same event each time.\n      const firstLCPEventPayload = rawEvents.find(event => {\n        return event.name === 'largestContentfulPaint::Candidate';\n      });\n      if (!firstLCPEventPayload) {\n        throw new Error('Could not find LCP event');\n      }\n      const fakeThread = StubbedThread.make(firstLCPEventPayload.tid);\n      const event = TraceEngine.Legacy.PayloadEvent.fromPayload(firstLCPEventPayload, fakeThread);\n      assert.deepEqual(event.args, firstLCPEventPayload.args);\n      assert.deepEqual(event.name, firstLCPEventPayload.name);\n      assert.strictEqual(event.startTime, firstLCPEventPayload.ts / 1000);\n    });\n\n    it('stores the event ID if it has one', async function() {\n      const rawEvents =\n          await TraceLoader.rawEvents<TraceEngine.TracingManager.EventPayload>(this, 'lcp-images.json.gz');\n      // Find an event to test with; pick the first LCP event so it is an event\n      // we understand and we get the same event each time.\n      const firstLCPEventPayload = rawEvents.find(event => {\n        return event.name === 'largestContentfulPaint::Candidate';\n      });\n      if (!firstLCPEventPayload) {\n        throw new Error('Could not find LCP event');\n      }\n      // Set an ID property to test the behaviour, even though LCP Candidate\n      // events do not have an ID field.\n      firstLCPEventPayload.id = 'test-id';\n      const fakeThread = StubbedThread.make(firstLCPEventPayload.tid);\n      const event = TraceEngine.Legacy.PayloadEvent.fromPayload(firstLCPEventPayload, fakeThread);\n      assert.deepEqual(event.id, firstLCPEventPayload.id);\n    });\n\n    it('stores the raw payload and you can retrieve it', async function() {\n      const rawEvents =\n          await TraceLoader.rawEvents<TraceEngine.TracingManager.EventPayload>(this, 'lcp-images.json.gz');\n      // Find an event to test with; pick the first LCP event so it is an event\n      // we understand and we get the same event each time.\n      const firstLCPEventPayload = rawEvents.find(event => {\n        return event.name === 'largestContentfulPaint::Candidate';\n      });\n      if (!firstLCPEventPayload) {\n        throw new Error('Could not find LCP event');\n      }\n      const fakeThread = StubbedThread.make(firstLCPEventPayload.tid);\n      const event = TraceEngine.Legacy.PayloadEvent.fromPayload(firstLCPEventPayload, fakeThread);\n      assert.strictEqual(event.rawLegacyPayload(), firstLCPEventPayload);\n    });\n\n    it('sets the begin and end time correctly for an event with a duration', async function() {\n      const rawEvents = await TraceLoader.rawEvents<TraceEngine.TracingManager.EventPayload>(this, 'animation.json.gz');\n      // Use a RunTask which will always have a ts (start) and dur.\n      const firstRunTask = rawEvents.find(event => {\n        return event.name === 'RunTask';\n      });\n      if (!firstRunTask) {\n        throw new Error('Could not find run task');\n      }\n      const fakeThread = StubbedThread.make(firstRunTask.tid);\n      const event = TraceEngine.Legacy.PayloadEvent.fromPayload(firstRunTask, fakeThread);\n      assert.strictEqual(event.startTime, firstRunTask.ts / 1000);\n      assert.strictEqual(event.endTime, (firstRunTask.ts + firstRunTask.dur) / 1000);\n    });\n  });\n\n  describe('extractID', function() {\n    it('can extract the ID from the id field if it exists', async function() {\n      const fakePayload = {\n        id: '123',\n      } as unknown as TraceEngine.TracingManager.EventPayload;\n      assert.strictEqual(TraceEngine.Legacy.TracingModel.extractId(fakePayload), '123');\n    });\n\n    it('prepends the scope to the id if it is present', async function() {\n      const fakePayload = {\n        id: '123',\n        scope: 'test-scope',\n      } as unknown as TraceEngine.TracingManager.EventPayload;\n      assert.strictEqual(TraceEngine.Legacy.TracingModel.extractId(fakePayload), 'test-scope@123');\n    });\n\n    it('prioritises the id2 global field over id if they are both present', async function() {\n      const fakePayload = {\n        id: '123',\n        id2: {\n          global: 'global-id',\n        },\n        scope: 'test-scope',\n      } as unknown as TraceEngine.TracingManager.EventPayload;\n      assert.strictEqual(TraceEngine.Legacy.TracingModel.extractId(fakePayload), ':test-scope:global-id');\n    });\n\n    it('prioritises the id2 local field over id if they are both present, and includes the PID of the event',\n       async () => {\n         const fakePayload = {\n           id: '123',\n           id2: {\n             local: 'local-id',\n           },\n           pid: 'test-pid',\n           scope: 'test-scope',\n         } as unknown as TraceEngine.TracingManager.EventPayload;\n         assert.strictEqual(TraceEngine.Legacy.TracingModel.extractId(fakePayload), ':test-scope:test-pid:local-id');\n       });\n\n    it('logs an error and returns undefined if the id2 object has both global and local keys', async function() {\n      const fakePayload = {\n        id: '123',\n        id2: {\n          local: 'local-id',\n          global: 'global-id',\n        },\n        pid: 'test-pid',\n        scope: 'test-scope',\n        ts: 1000,\n      } as unknown as TraceEngine.TracingManager.EventPayload;\n      const consoleErrorStub = sinon.stub(console, 'error');\n      assert.isUndefined(TraceEngine.Legacy.TracingModel.extractId(fakePayload));\n      assert(consoleErrorStub.calledWithExactly(\n          // The number 1 here is the timestamp divided by 1000.\n          'Unexpected id2 field at 1, one and only one of \\'local\\' and \\'global\\' should be present.'));\n    });\n  });\n\n  it('finds the browser main thread from the tracing model', async function() {\n    const {tracingModel} = await TraceLoader.allModels(this, 'web-dev.json.gz');\n    const mainThread = TraceEngine.Legacy.TracingModel.browserMainThread(tracingModel);\n    assert.strictEqual(mainThread?.id(), 775);\n    assert.strictEqual(mainThread?.name(), 'CrBrowserMain');\n  });\n});\n"]}