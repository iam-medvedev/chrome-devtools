{"version":3,"file":"Name.js","sourceRoot":"","sources":["../../../../../../front_end/models/trace/Name.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\n\nimport * as Handlers from './handlers/handlers.js';\nimport type {ParsedTrace} from './ModelImpl.js';\nimport {getEventStyle} from './Styles.js';\nimport * as Types from './types/types.js';\n\nconst UIStrings = {\n  /**\n   * @description Text shown for an entry in the flame chart that has no explicit name.\n   */\n  anonymous: '(anonymous)',\n  /**\n   * @description Text used to show an EventDispatch event which has a type associated with it\n   * @example {click} PH1\n   */\n  eventDispatchS: 'Event: {PH1}',\n  /**\n   * @description Text shown for an entry in the flame chart that represents a frame.\n   */\n  frame: 'Frame',\n  /**\n   * @description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  wsConnectionOpened: 'WebSocket opened',\n  /**\n   * @description Text in Timeline Flame Chart Data Provider of the Performance panel\n   * @example {ws://example.com} PH1\n   */\n  wsConnectionOpenedWithUrl: 'WebSocket opened: {PH1}',\n  /**\n   * @description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  wsConnectionClosed: 'WebSocket closed',\n  /**\n   * @description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  layoutShift: 'Layout shift',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('models/trace/Name.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * Calculates the display name for a given entry.\n * @param parsedTrace If the trace data is provided\n * as the second argument it can be used to find source map resolved names for\n * profile calls.\n * Use this function to customize the user visible name for an entry. If no\n * custom name is found, we will fallback to the `name` property in the trace\n * entry.\n */\nexport function forEntry(\n    entry: Types.Events.Event,\n    parsedTrace?: ParsedTrace,\n    ): string {\n  if (Types.Events.isProfileCall(entry)) {\n    if (parsedTrace) {\n      const potentialCallName =\n          Handlers.ModelHandlers.Samples.getProfileCallFunctionName(parsedTrace.data.Samples, entry);\n      // We need this extra check because the call name could be the empty\n      // string. If it is, we want to fallback.\n      if (potentialCallName) {\n        return potentialCallName;\n      }\n    }\n    return entry.callFrame.functionName || i18nString(UIStrings.anonymous);\n  }\n\n  if (Types.Events.isLegacyTimelineFrame(entry)) {\n    return i18n.i18n.lockedString(UIStrings.frame);\n  }\n\n  if (Types.Events.isDispatch(entry)) {\n    // EventDispatch represent user actions such as clicks, so in this case\n    // rather than show the event title (which is always just \"Event\"), we\n    // add the type (\"click\") to help the user understand the event.\n    return i18nString(UIStrings.eventDispatchS, {PH1: entry.args.data.type});\n  }\n  if (Types.Events.isSyntheticNetworkRequest(entry)) {\n    const parsedURL = new Common.ParsedURL.ParsedURL(entry.args.data.url);\n    const text =\n        parsedURL.isValid ? `${parsedURL.displayName} (${parsedURL.host})` : entry.args.data.url || 'Network request';\n    return text;\n  }\n\n  if (Types.Events.isWebSocketCreate(entry)) {\n    if (entry.args.data.url) {\n      return i18nString(UIStrings.wsConnectionOpenedWithUrl, {PH1: entry.args.data.url});\n    }\n\n    return i18nString(UIStrings.wsConnectionOpened);\n  }\n\n  if (Types.Events.isWebSocketDestroy(entry)) {\n    return i18nString(UIStrings.wsConnectionClosed);\n  }\n\n  if (Types.Events.isSyntheticInteraction(entry)) {\n    return nameForInteractionEvent(entry);\n  }\n\n  if (Types.Events.isSyntheticLayoutShift(entry)) {\n    return i18nString(UIStrings.layoutShift);\n  }\n\n  if (Types.Events.isSyntheticAnimation(entry) && entry.args.data.beginEvent.args.data.displayName) {\n    return entry.args.data.beginEvent.args.data.displayName;\n  }\n\n  const eventStyleCustomName = getEventStyle(entry.name as Types.Events.Name)?.title;\n\n  return eventStyleCustomName || entry.name;\n}\n\nfunction nameForInteractionEvent(event: Types.Events.SyntheticInteractionPair): string {\n  const category = Handlers.ModelHandlers.UserInteractions.categoryOfInteraction(event);\n  // Because we hide nested interactions, we do not want to show the\n  // specific type of the interaction that was not hidden, so instead we\n  // show just the category of that interaction.\n  if (category === 'OTHER') {\n    return 'Other';\n  }\n  if (category === 'KEYBOARD') {\n    return 'Keyboard';\n  }\n  if (category === 'POINTER') {\n    return 'Pointer';\n  }\n  return event.type;\n}\n"]}