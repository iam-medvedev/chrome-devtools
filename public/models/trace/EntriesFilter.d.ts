import * as Helpers from './helpers/helpers.js';
import * as Types from './types/types.js';
type EntryToNodeMap = Map<Types.TraceEvents.TraceEntry, Helpers.TreeHelpers.TraceEntryNode>;
export type FilterAction = FilterApplyAction | FilterUndoAction;
export declare const enum FilterApplyAction {
    MERGE_FUNCTION = "MERGE_FUNCTION",
    COLLAPSE_FUNCTION = "COLLAPSE_FUNCTION",
    COLLAPSE_REPEATING_DESCENDANTS = "COLLAPSE_REPEATING_DESCENDANTS"
}
export declare const enum FilterUndoAction {
    UNDO_ALL_ACTIONS = "UNDO_ALL_ACTIONS",
    UNDO_COLLAPSE_FUNCTION = "UNDO_COLLAPSE_FUNCTION",
    UNDO_COLLAPSE_REPEATING_DESCENDANTS = "UNDO_COLLAPSE_REPEATING_DESCENDANTS"
}
export interface UserFilterAction {
    type: FilterAction;
    entry: Types.TraceEvents.TraceEntry;
}
export interface UserApplyFilterAction {
    type: FilterApplyAction;
    entry: Types.TraceEvents.TraceEntry;
}
/**
 * This class can take in a thread that has been generated by the
 * RendererHandler and apply certain actions to it in order to modify what is
 * shown to the user. These actions can be automatically applied by DevTools or
 * applied by the user.
 *
 * Once actions are applied, the invisibleEntries() method will return the
 * entries that are invisible, and this is the list of entries that should be
 * removed before rendering the resulting thread on the timeline.
 **/
export declare class EntriesFilter {
    #private;
    constructor(entryToNode: EntryToNodeMap);
    /**
     * Adds or removes an action (filter) to/from activeActions
     * array depending on the type of action.
     **/
    applyAction(action: UserFilterAction): void;
    /**
     * Removes a matching action, if one is found, from the active actions set.
     * Note that we do not match on action equality and instead search through
     * the set of active actions for one that is of the same type, and has the
     * same entry associated with it.
     *
     * This is a no-op if the action is not active.
     **/
    removeActiveAction(action: UserFilterAction): void;
    /**
     * The set of entries that are invisible given the set of applied actions. If
     * no actions are applied, this will return an empty list of entries.
     *
     * This method is cached, so it is safe to call multiple times.
     **/
    invisibleEntries(): Types.TraceEvents.TraceEventData[];
    isUserApplyFilterAction(action: UserFilterAction): action is UserApplyFilterAction;
    isFilterUndoAction(action: FilterAction): action is FilterUndoAction;
}
export {};
