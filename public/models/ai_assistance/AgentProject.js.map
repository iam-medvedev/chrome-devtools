{"version":3,"file":"AgentProject.js","sourceRoot":"","sources":["../../../../../../front_end/models/ai_assistance/AgentProject.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Diff from '../../third_party/diff/diff.js';\nimport * as Persistence from '../persistence/persistence.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport type * as Workspace from '../workspace/workspace.js';\n\nimport {debugLog} from './debug.js';\n\nconst LINE_END_RE = /\\r\\n?|\\n/;\nconst MAX_RESULTS_PER_FILE = 10;\n\nexport const enum ReplaceStrategy {\n  FULL_FILE = 'full',\n  UNIFIED_DIFF = 'unified'\n}\n\n/**\n * AgentProject wraps around a Workspace.Workspace.Project and\n * implements AI Assistance-specific logic for accessing workspace files\n * including additional checks and restrictions.\n */\nexport class AgentProject {\n  #project: Workspace.Workspace.Project;\n  #ignoredFileOrFolderNames = new Set(['node_modules', 'package-lock.json']);\n  #filesChanged = new Set<string>();\n  #totalLinesChanged = 0;\n\n  readonly #maxFilesChanged: number;\n  readonly #maxLinesChanged: number;\n  readonly #processedFiles = new Set<string>();\n\n  constructor(project: Workspace.Workspace.Project, options: {\n    maxFilesChanged: number,\n    maxLinesChanged: number,\n  } = {\n    maxFilesChanged: 5,\n    maxLinesChanged: 200,\n  }) {\n    this.#project = project;\n    this.#maxFilesChanged = options.maxFilesChanged;\n    this.#maxLinesChanged = options.maxLinesChanged;\n  }\n\n  /**\n   * Returns a list of files from the project that has been used for\n   * processing.\n   */\n  getProcessedFiles(): string[] {\n    return Array.from(this.#processedFiles);\n  }\n\n  /**\n   * Provides file names in the project to the agent.\n   */\n  getFiles(): string[] {\n    return this.#indexFiles().files;\n  }\n\n  /**\n   * Provides access to the file content in the working copy\n   * of the matching UiSourceCode.\n   */\n  async readFile(filepath: string): Promise<string|undefined> {\n    const {map} = this.#indexFiles();\n    const uiSourceCode = map.get(filepath);\n    if (!uiSourceCode) {\n      return;\n    }\n    const content =\n        uiSourceCode.isDirty() ? uiSourceCode.workingCopyContentData() : await uiSourceCode.requestContentData();\n\n    this.#processedFiles.add(filepath);\n\n    if (TextUtils.ContentData.ContentData.isError(content) || !content.isTextContent) {\n      return;\n    }\n\n    return content.text;\n  }\n\n  /**\n   * This method updates the file content in the working copy of the\n   * UiSourceCode identified by the filepath.\n   */\n  async writeFile(filepath: string, update: string, mode = ReplaceStrategy.FULL_FILE): Promise<void> {\n    const {map} = this.#indexFiles();\n    const uiSourceCode = map.get(filepath);\n    if (!uiSourceCode) {\n      throw new Error(`UISourceCode ${filepath} not found`);\n    }\n    const currentContent = await this.readFile(filepath);\n    let content: string;\n    switch (mode) {\n      case ReplaceStrategy.FULL_FILE:\n        content = update;\n        break;\n      case ReplaceStrategy.UNIFIED_DIFF:\n        content = this.#writeWithUnifiedDiff(update, currentContent);\n        break;\n    }\n\n    const linesChanged = this.getLinesChanged(currentContent, content);\n\n    if (this.#totalLinesChanged + linesChanged > this.#maxLinesChanged) {\n      throw new Error('Too many lines changed');\n    }\n\n    this.#filesChanged.add(filepath);\n    if (this.#filesChanged.size > this.#maxFilesChanged) {\n      this.#filesChanged.delete(filepath);\n      throw new Error('Too many files changed');\n    }\n    this.#totalLinesChanged += linesChanged;\n    uiSourceCode.setWorkingCopy(content);\n    uiSourceCode.setContainsAiChanges(true);\n  }\n\n  #writeWithUnifiedDiff(llmDiff: string, content = ''): string {\n    let updatedContent = content;\n    const diffChunk = llmDiff.trim();\n    const normalizedDiffLines = diffChunk.split(LINE_END_RE);\n\n    const lineAfterSeparatorRegEx = /^@@.*@@([- +].*)/;\n    const changeChunk: string[][] = [];\n    let currentChunk: string[] = [];\n    for (const line of normalizedDiffLines) {\n      if (line.startsWith('```')) {\n        continue;\n      }\n\n      // The ending is not always @@\n      if (line.startsWith('@@')) {\n        line.search('@@');\n        currentChunk = [];\n        changeChunk.push(currentChunk);\n        if (!line.endsWith('@@')) {\n          const match = line.match(lineAfterSeparatorRegEx);\n          if (match?.[1]) {\n            currentChunk.push(match[1]);\n          }\n        }\n      } else {\n        currentChunk.push(line);\n      }\n    }\n\n    for (const chunk of changeChunk) {\n      const search = [];\n      const replace = [];\n      for (const changeLine of chunk) {\n        // Unified diff first char is ' ', '-', '+'\n        // to represent what happened to the line\n        const line = changeLine.slice(1);\n\n        if (changeLine.startsWith('-')) {\n          search.push(line);\n        } else if (changeLine.startsWith('+')) {\n          replace.push(line);\n        } else {\n          search.push(line);\n          replace.push(line);\n        }\n      }\n      if (replace.length === 0) {\n        const searchString = search.join('\\n');\n        // If we remove we want to\n        if (updatedContent.search(searchString + '\\n') !== -1) {\n          updatedContent = updatedContent.replace(searchString + '\\n', '');\n        } else {\n          updatedContent = updatedContent.replace(searchString, '');\n        }\n      } else if (search.length === 0) {\n        // This just adds it to the beginning of the file\n        updatedContent = updatedContent.replace('', replace.join('\\n'));\n      } else {\n        updatedContent = updatedContent.replace(search.join('\\n'), replace.join('\\n'));\n      }\n    }\n\n    return updatedContent;\n  }\n\n  getLinesChanged(currentContent: string|undefined, updatedContent: string): number {\n    let linesChanged = 0;\n    if (currentContent) {\n      const diff = Diff.Diff.DiffWrapper.lineDiff(updatedContent.split(LINE_END_RE), currentContent.split(LINE_END_RE));\n      for (const item of diff) {\n        if (item[0] !== Diff.Diff.Operation.Equal) {\n          linesChanged++;\n        }\n      }\n    } else {\n      linesChanged += updatedContent.split(LINE_END_RE).length;\n    }\n\n    return linesChanged;\n  }\n\n  /**\n   * This method searches in files for the agent and provides the\n   * matches to the agent.\n   */\n  async searchFiles(query: string, caseSensitive?: boolean, isRegex?: boolean, {signal}: {signal?: AbortSignal} = {}):\n      Promise<Array<{\n        filepath: string,\n        lineNumber: number,\n        columnNumber: number,\n        matchLength: number,\n      }>> {\n    const {map} = this.#indexFiles();\n    const matches = [];\n    for (const [filepath, file] of map.entries()) {\n      if (signal?.aborted) {\n        break;\n      }\n\n      debugLog('searching in', filepath, 'for', query);\n      const content = file.isDirty() ? file.workingCopyContentData() : await file.requestContentData();\n      const results =\n          TextUtils.TextUtils.performSearchInContentData(content, query, caseSensitive ?? true, isRegex ?? false);\n      for (const result of results.slice(0, MAX_RESULTS_PER_FILE)) {\n        debugLog('matches in', filepath);\n        matches.push({\n          filepath,\n          lineNumber: result.lineNumber,\n          columnNumber: result.columnNumber,\n          matchLength: result.matchLength\n        });\n      }\n    }\n    return matches;\n  }\n\n  #shouldSkipPath(pathParts: string[]): boolean {\n    for (const part of pathParts) {\n      if (this.#ignoredFileOrFolderNames.has(part) || part.startsWith('.')) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  #indexFiles(): {files: string[], map: Map<string, Workspace.UISourceCode.UISourceCode>} {\n    const files = [];\n    const map = new Map();\n    // TODO: this could be optimized and cached.\n    for (const uiSourceCode of this.#project.uiSourceCodes()) {\n      const pathParts = Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.relativePath(uiSourceCode);\n      if (this.#shouldSkipPath(pathParts)) {\n        continue;\n      }\n      const path = pathParts.join('/');\n      files.push(path);\n      map.set(path, uiSourceCode);\n    }\n    return {files, map};\n  }\n}\n"]}