{"version":3,"file":"AiUtils.js","sourceRoot":"","sources":["../../../../../../front_end/models/ai_assistance/AiUtils.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAEhD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAEhD,MAAM,SAAS,GAAG;IAChB;;OAEG;IACH,aAAa,EAAE,2EAA2E;IAC1F;;OAEG;IACH,WAAW,EAAE,oFAAoF;IACjG;;OAEG;IACH,OAAO,EAAE,oEAAoE;IAC7E;;OAEG;IACH,2BAA2B,EAAE,iEAAiE;CACtF,CAAC;AACX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,iCAAiC,EAAE,SAAS,CAAC,CAAC;AACvF,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE,MAAM,UAAU,kBAAkB,CAAC,gBAAyD;IAE1F,MAAM,OAAO,GAAwC,EAAE,CAAC;IACxD,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC;QAC3C,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC,CAAC;IAClE,CAAC;IACD,QAAQ,gBAAgB,EAAE,CAAC;QACzB,uFAA8D;QAC9D;YACE,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;YAChD,MAAM;QACR,mBAAmB;QACnB,8EAA2D,cAAc;YACvE,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QAC9C,wEAAsD,CAAC,CAAC,CAAC;YACvD,wFAAwF;YACxF,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,gBAAgB,EAAE,YAAY,KAAK,IAAI,EAAE,CAAC;gBACrE,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;YACpD,CAAC;QACH,CAAC;IACH,CAAC;IACD,uHAAuH;IACvH,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC;IAC9G,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\n\nconst UIStrings = {\n  /**\n   * @description Message shown to the user if the age check is not successful.\n   */\n  ageRestricted: 'This feature is only available to users who are 18 years of age or older.',\n  /**\n   * @description The error message when the user is not logged in into Chrome.\n   */\n  notLoggedIn: 'This feature is only available when you sign into Chrome with your Google account.',\n  /**\n   * @description Message shown when the user is offline.\n   */\n  offline: 'This feature is only available with an active internet connection.',\n  /**\n   *@description Text informing the user that AI assistance is not available in Incognito mode or Guest mode.\n   */\n  notAvailableInIncognitoMode: 'AI assistance is not available in Incognito mode or Guest mode.',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/ai_assistance/AiUtils.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport function getDisabledReasons(aidaAvailability: Host.AidaClient.AidaAccessPreconditions):\n    Platform.UIString.LocalizedString[] {\n  const reasons: Platform.UIString.LocalizedString[] = [];\n  if (Root.Runtime.hostConfig.isOffTheRecord) {\n    reasons.push(i18nString(UIStrings.notAvailableInIncognitoMode));\n  }\n  switch (aidaAvailability) {\n    case Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL:\n    case Host.AidaClient.AidaAccessPreconditions.SYNC_IS_PAUSED:\n      reasons.push(i18nString(UIStrings.notLoggedIn));\n      break;\n    // @ts-expect-error\n    case Host.AidaClient.AidaAccessPreconditions.NO_INTERNET:  // fallthrough\n      reasons.push(i18nString(UIStrings.offline));\n    case Host.AidaClient.AidaAccessPreconditions.AVAILABLE: {\n      // No age check if there is no logged in user. Age check would always fail in that case.\n      if (Root.Runtime.hostConfig?.aidaAvailability?.blockedByAge === true) {\n        reasons.push(i18nString(UIStrings.ageRestricted));\n      }\n    }\n  }\n  // The `console-insights-enabled` setting and the `ai-assistance-enabled` setting both have the same `disabledReasons`.\n  reasons.push(...Common.Settings.Settings.instance().moduleSetting('ai-assistance-enabled').disabledReasons());\n  return reasons;\n}\n"]}