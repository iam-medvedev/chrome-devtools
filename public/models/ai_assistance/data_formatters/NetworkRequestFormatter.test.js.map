{"version":3,"file":"NetworkRequestFormatter.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/ai_assistance/data_formatters/NetworkRequestFormatter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as TextUtils from '../../text_utils/text_utils.js';\nimport {NetworkRequestFormatter} from '../ai_assistance.js';\n\ndescribe('NetworkRequestFormatter', () => {\n  describe('allowHeader', () => {\n    it('allows a header from the list', () => {\n      assert.isTrue(NetworkRequestFormatter.allowHeader('content-type'));\n    });\n\n    it('disallows headers not on the list', () => {\n      assert.isFalse(NetworkRequestFormatter.allowHeader('cookie'));\n      assert.isFalse(NetworkRequestFormatter.allowHeader('set-cookie'));\n      assert.isFalse(NetworkRequestFormatter.allowHeader('authorization'));\n    });\n  });\n\n  describe('formatInitiatorUrl', () => {\n    const tests = [\n      {\n        allowedResource: 'https://example.test',\n        targetResource: 'https://example.test',\n        shouldBeRedacted: false,\n      },\n      {\n        allowedResource: 'https://example.test',\n        targetResource: 'https://another-example.test',\n        shouldBeRedacted: true,\n      },\n      {\n        allowedResource: 'file://test',\n        targetResource: 'https://another-example.test',\n        shouldBeRedacted: true,\n      },\n      {\n        allowedResource: 'https://another-example.test',\n        targetResource: 'file://test',\n        shouldBeRedacted: true,\n      },\n      {\n        allowedResource: 'https://test.example.test',\n        targetResource: 'https://example.test',\n        shouldBeRedacted: true,\n      },\n      {\n        allowedResource: 'https://test.example.test:9900',\n        targetResource: 'https://test.example.test:9901',\n        shouldBeRedacted: true,\n      },\n    ];\n\n    for (const t of tests) {\n      it(`${t.targetResource} test when allowed resource is ${t.allowedResource}`, () => {\n        const formatted = NetworkRequestFormatter.formatInitiatorUrl(\n            new URL(t.targetResource).origin, new URL(t.allowedResource).origin);\n        if (t.shouldBeRedacted) {\n          assert.strictEqual(\n              formatted, '<redacted cross-origin initiator URL>', `${JSON.stringify(t)} was not redacted`);\n        } else {\n          assert.strictEqual(formatted, t.targetResource, `${JSON.stringify(t)} was redacted`);\n        }\n      });\n    }\n  });\n\n  describe('formatBody', () => {\n    const fakeRequest = SDK.NetworkRequest.NetworkRequest.createWithoutBackendRequest(\n        'fakeRequestId',\n        Platform.DevToolsPath.urlString`url1`,\n        Platform.DevToolsPath.urlString`documentURL`,\n        null,\n    );\n\n    it('handles empty response correctly', async () => {\n      fakeRequest.requestContentData = (): Promise<TextUtils.ContentData.ContentDataOrError> => {\n        return Promise.resolve(new TextUtils.ContentData.ContentData('', false, ''));\n      };\n\n      const result = await NetworkRequestFormatter.formatBody('test:', fakeRequest, 100);\n\n      assert.strictEqual(result, 'test:\\n<empty response>');\n    });\n\n    it('handles base64 text correctly', async () => {\n      fakeRequest.requestContentData = (): Promise<TextUtils.ContentData.ContentDataOrError> => {\n        return Promise.resolve(new TextUtils.ContentData.ContentData('some base64 string', true, ''));\n      };\n\n      const result = await NetworkRequestFormatter.formatBody('test:', fakeRequest, 100);\n\n      assert.strictEqual(result, 'test:\\n<binary data>');\n    });\n\n    it('handles the text limit correctly', async () => {\n      fakeRequest.requestContentData = (): Promise<TextUtils.ContentData.ContentDataOrError> => {\n        return Promise.resolve(\n            new TextUtils.ContentData.ContentData('some text that is longer than expected', false, 'text/plain'));\n      };\n\n      const result = await NetworkRequestFormatter.formatBody('test:', fakeRequest, 20);\n\n      assert.strictEqual(result, `test:\\nsome text that is lo... <truncated>`);\n    });\n\n    it('handles the text format correctly', async () => {\n      fakeRequest.requestContentData = (): Promise<TextUtils.ContentData.ContentDataOrError> => {\n        return Promise.resolve(\n            new TextUtils.ContentData.ContentData(JSON.stringify({response: 'body'}), false, 'application/json'));\n      };\n\n      const result = await NetworkRequestFormatter.formatBody('test:', fakeRequest, 100);\n\n      assert.strictEqual(result, `test:\\n${JSON.stringify({response: 'body'})}`);\n    });\n\n    it('handles error correctly', async () => {\n      fakeRequest.requestContentData = (): Promise<TextUtils.ContentData.ContentDataOrError> => {\n        return Promise.resolve({\n          error: 'an error has occurred',\n        } as TextUtils.ContentData.ContentDataOrError);\n      };\n\n      const result = await NetworkRequestFormatter.formatBody('test:', fakeRequest, 100);\n\n      assert.strictEqual(result, '');\n    });\n  });\n\n  describe('formatHeaders', () => {\n    it('does not redact a header from the list', () => {\n      assert.strictEqual(\n          NetworkRequestFormatter.formatHeaders('test:', [{name: 'content-type', value: 'foo'}]),\n          'test:\\ncontent-type: foo');\n    });\n\n    it('disallows headers not on the list', () => {\n      assert.strictEqual(\n          NetworkRequestFormatter.formatHeaders('test:', [{name: 'cookie', value: 'foo'}]),\n          'test:\\ncookie: <redacted>');\n      assert.strictEqual(\n          NetworkRequestFormatter.formatHeaders('test:', [{name: 'set-cookie', value: 'foo'}]),\n          'test:\\nset-cookie: <redacted>');\n      assert.strictEqual(\n          NetworkRequestFormatter.formatHeaders('test:', [{name: 'authorization', value: 'foo'}]),\n          'test:\\nauthorization: <redacted>');\n    });\n  });\n});\n"]}