{"version":3,"file":"UnitFormatters.js","sourceRoot":"","sources":["../../../../../../../front_end/models/ai_assistance/data_formatters/UnitFormatters.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * This module contains unit formatters that are only to be used within\n * the AI models because they do not account for locales other than en-US.\n */\nconst defaultTimeFormatterOptions: Intl.NumberFormatOptions = {\n  style: 'unit',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 1,\n} as const;\n\nconst defaultByteFormatterOptions: Intl.NumberFormatOptions = {\n  style: 'unit',\n  unitDisplay: 'narrow',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 1,\n} as const;\n\nconst timeFormatters = {\n  milli: new Intl.NumberFormat('en-US', {\n    ...defaultTimeFormatterOptions,\n    unit: 'millisecond',\n  }),\n  second: new Intl.NumberFormat('en-US', {\n    ...defaultTimeFormatterOptions,\n    unit: 'second',\n  }),\n  micro: new Intl.NumberFormat('en-US', {\n    ...defaultTimeFormatterOptions,\n    unit: 'microsecond',\n  }),\n} as const;\n\nconst byteFormatters = {\n  bytes: new Intl.NumberFormat('en-US', {\n    ...defaultByteFormatterOptions,\n    // Don't need as much precision on bytes.\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n    unit: 'byte',\n  }),\n  kilobytes: new Intl.NumberFormat('en-US', {\n    ...defaultByteFormatterOptions,\n    unit: 'kilobyte',\n  }),\n  megabytes: new Intl.NumberFormat('en-US', {\n    ...defaultByteFormatterOptions,\n    unit: 'megabyte',\n  }),\n} as const;\n\nfunction numberIsTooLarge(x: number): boolean {\n  return !Number.isFinite(x) || x === Number.MAX_VALUE;\n}\n\nexport function seconds(x: number): string {\n  if (numberIsTooLarge(x)) {\n    return '-';\n  }\n  if (x === 0) {\n    return formatAndEnsureSpace(timeFormatters.second, x);\n  }\n\n  const asMilli = x * 1_000;\n\n  if (asMilli < 1) {\n    return micros(x * 1_000_000);\n  }\n\n  if (asMilli < 1_000) {\n    return millis(asMilli);\n  }\n  return formatAndEnsureSpace(timeFormatters.second, x);\n}\n\nexport function millis(x: number): string {\n  if (numberIsTooLarge(x)) {\n    return '-';\n  }\n  return formatAndEnsureSpace(timeFormatters.milli, x);\n}\n\nexport function micros(x: number): string {\n  if (numberIsTooLarge(x)) {\n    return '-';\n  }\n\n  if (x < 100) {\n    return formatAndEnsureSpace(timeFormatters.micro, x);\n  }\n\n  const asMilli = x / 1_000;\n  return millis(asMilli);\n}\n\nexport function bytes(x: number): string {\n  if (x < 1_000) {\n    return formatAndEnsureSpace(byteFormatters.bytes, x);\n  }\n  const kilobytes = x / 1_000;\n  if (kilobytes < 1_000) {\n    return formatAndEnsureSpace(byteFormatters.kilobytes, kilobytes);\n  }\n\n  const megabytes = kilobytes / 1_000;\n  return formatAndEnsureSpace(byteFormatters.megabytes, megabytes);\n}\n\n/**\n * When using 'narrow' unitDisplay, many locales exclude the space between the literal and the unit.\n * We don't like that, so when there is no space literal we inject the provided separator manually.\n */\nfunction formatAndEnsureSpace(formatter: Intl.NumberFormat, value: number, separator = '\\xA0'): string {\n  const parts = formatter.formatToParts(value);\n\n  let hasSpace = false;\n  for (const part of parts) {\n    if (part.type === 'literal') {\n      if (part.value === ' ') {\n        hasSpace = true;\n        part.value = separator;\n      } else if (part.value === separator) {\n        hasSpace = true;\n      }\n    }\n  }\n\n  if (hasSpace) {\n    return parts.map(part => part.value).join('');\n  }\n\n  const unitIndex = parts.findIndex(part => part.type === 'unit');\n\n  // Unexpected for there to be no unit, but just in case, handle that.\n  if (unitIndex === -1) {\n    return parts.map(part => part.value).join('');\n  }\n\n  // For locales where the unit comes first (sw), the space has to come after the unit.\n  if (unitIndex === 0) {\n    return parts[0].value + separator + parts.slice(1).map(part => part.value).join('');\n  }\n\n  // Otherwise, it comes before.\n  return parts.slice(0, unitIndex).map(part => part.value).join('') + separator +\n      parts.slice(unitIndex).map(part => part.value).join('');\n}\n"]}