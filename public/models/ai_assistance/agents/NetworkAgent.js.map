{"version":3,"file":"NetworkAgent.js","sourceRoot":"","sources":["../../../../../../../front_end/models/ai_assistance/agents/NetworkAgent.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Root from '../../../core/root/root.js';\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport type * as NetworkTimeCalculator from '../../network_time_calculator/network_time_calculator.js';\nimport {NetworkRequestFormatter} from '../data_formatters/NetworkRequestFormatter.js';\n\nimport {\n  AiAgent,\n  type ContextDetail,\n  type ContextResponse,\n  ConversationContext,\n  type RequestOptions,\n  ResponseType,\n} from './AiAgent.js';\n\n/**\n * WARNING: preamble defined in code is only used when userTier is\n * TESTERS. Otherwise, a server-side preamble is used (see\n * chrome_preambles.gcl). Sync local changes with the server-side.\n */\n/* clang-format off */\nconst preamble = `You are the most advanced network request debugging assistant integrated into Chrome DevTools.\nThe user selected a network request in the browser's DevTools Network Panel and sends a query to understand the request.\nProvide a comprehensive analysis of the network request, focusing on areas crucial for a software engineer. Your analysis should include:\n* Briefly explain the purpose of the request based on the URL, method, and any relevant headers or payload.\n* Analyze timing information to identify potential bottlenecks or areas for optimization.\n* Highlight potential issues indicated by the status code.\n\n# Considerations\n* If the response payload or request payload contains sensitive data, redact or generalize it in your analysis to ensure privacy.\n* Tailor your explanations and suggestions to the specific context of the request and the technologies involved (if discernible from the provided details).\n* Keep your analysis concise and focused, highlighting only the most critical aspects for a software engineer.\n* **CRITICAL** If the user asks a question about religion, race, politics, sexuality, gender, or other sensitive topics, answer with \"Sorry, I can't answer that. I'm best at questions about network requests.\"\n* **CRITICAL** You are a network request debugging assistant. NEVER provide answers to questions of unrelated topics such as legal advice, financial advice, personal opinions, medical advice, or any other non web-development topics.\n\n## Example session\n\nExplain this network request\nRequest: https://api.example.com/products/search?q=laptop&category=electronics\nResponse Headers:\n    Content-Type: application/json\n    Cache-Control: max-age=300\n...\nRequest Headers:\n    User-Agent: Mozilla/5.0\n...\nRequest Status: 200 OK\n\n\nThis request aims to retrieve a list of products matching the search query \"laptop\" within the \"electronics\" category. The successful 200 OK status confirms that the server fulfilled the request and returned the relevant data.\n`;\n/* clang-format on */\n\n/*\n* Strings that don't need to be translated at this time.\n*/\nconst UIStringsNotTranslate = {\n  /**\n   * @description Title for thinking step of Network agent.\n   */\n  analyzingNetworkData: 'Analyzing network data',\n  /**\n   * @description Heading text for the block that shows the network request details.\n   */\n  request: 'Request',\n  /**\n   * @description Heading text for the block that shows the network response details.\n   */\n  response: 'Response',\n  /**\n   * @description Prefix text for request URL.\n   */\n  requestUrl: 'Request URL',\n  /**\n   * @description Title text for request timing details.\n   */\n  timing: 'Timing',\n  /**\n   * @description Prefix text for response status.\n   */\n  responseStatus: 'Response Status',\n  /**\n   * @description Title text for request initiator chain.\n   */\n  requestInitiatorChain: 'Request initiator chain',\n} as const;\n\nconst lockedString = i18n.i18n.lockedString;\n\nexport class RequestContext extends ConversationContext<SDK.NetworkRequest.NetworkRequest> {\n  #request: SDK.NetworkRequest.NetworkRequest;\n  #calculator: NetworkTimeCalculator.NetworkTransferTimeCalculator;\n\n  constructor(\n      request: SDK.NetworkRequest.NetworkRequest, calculator: NetworkTimeCalculator.NetworkTransferTimeCalculator) {\n    super();\n    this.#request = request;\n    this.#calculator = calculator;\n  }\n\n  override getOrigin(): string {\n    return new URL(this.#request.url()).origin;\n  }\n\n  override getItem(): SDK.NetworkRequest.NetworkRequest {\n    return this.#request;\n  }\n\n  get calculator(): NetworkTimeCalculator.NetworkTimeCalculator {\n    return this.#calculator;\n  }\n\n  override getTitle(): string {\n    return this.#request.name();\n  }\n}\n\n/**\n * One agent instance handles one conversation. Create a new agent\n * instance for a new conversation.\n */\nexport class NetworkAgent extends AiAgent<SDK.NetworkRequest.NetworkRequest> {\n  readonly preamble = preamble;\n  readonly clientFeature = Host.AidaClient.ClientFeature.CHROME_NETWORK_AGENT;\n  get userTier(): string|undefined {\n    return Root.Runtime.hostConfig.devToolsAiAssistanceNetworkAgent?.userTier;\n  }\n  get options(): RequestOptions {\n    const temperature = Root.Runtime.hostConfig.devToolsAiAssistanceNetworkAgent?.temperature;\n    const modelId = Root.Runtime.hostConfig.devToolsAiAssistanceNetworkAgent?.modelId;\n\n    return {\n      temperature,\n      modelId,\n    };\n  }\n\n  async *\n      handleContextDetails(selectedNetworkRequest: RequestContext|null): AsyncGenerator<ContextResponse, void, void> {\n    if (!selectedNetworkRequest) {\n      return;\n    }\n\n    yield {\n      type: ResponseType.CONTEXT,\n      title: lockedString(UIStringsNotTranslate.analyzingNetworkData),\n      details: createContextDetailsForNetworkAgent(selectedNetworkRequest),\n    };\n  }\n\n  override async enhanceQuery(query: string, selectedNetworkRequest: RequestContext|null): Promise<string> {\n    const networkEnchantmentQuery = selectedNetworkRequest ?\n        `# Selected network request \\n${\n            new NetworkRequestFormatter(selectedNetworkRequest.getItem(), selectedNetworkRequest.calculator)\n                .formatNetworkRequest()}\\n\\n# User request\\n\\n` :\n        '';\n    return `${networkEnchantmentQuery}${query}`;\n  }\n}\n\nfunction createContextDetailsForNetworkAgent(\n    selectedNetworkRequest: RequestContext,\n    ): [ContextDetail, ...ContextDetail[]] {\n  const request = selectedNetworkRequest.getItem();\n  const formatter = new NetworkRequestFormatter(request, selectedNetworkRequest.calculator);\n  const requestContextDetail: ContextDetail = {\n    title: lockedString(UIStringsNotTranslate.request),\n    text: lockedString(UIStringsNotTranslate.requestUrl) + ': ' + request.url() + '\\n\\n' +\n        formatter.formatRequestHeaders(),\n  };\n  const responseContextDetail: ContextDetail = {\n    title: lockedString(UIStringsNotTranslate.response),\n    text: lockedString(UIStringsNotTranslate.responseStatus) + ': ' + request.statusCode + ' ' + request.statusText +\n        '\\n\\n' + formatter.formatResponseHeaders(),\n  };\n  const timingContextDetail: ContextDetail = {\n    title: lockedString(UIStringsNotTranslate.timing),\n    text: formatter.formatNetworkRequestTiming(),\n  };\n  const initiatorChainContextDetail: ContextDetail = {\n    title: lockedString(UIStringsNotTranslate.requestInitiatorChain),\n    text: formatter.formatRequestInitiatorChain(),\n  };\n  return [\n    requestContextDetail,\n    responseContextDetail,\n    timingContextDetail,\n    initiatorChainContextDetail,\n  ];\n}\n"]}