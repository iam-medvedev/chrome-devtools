{"version":3,"file":"PerformanceAnnotationsAgent.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/ai_assistance/agents/PerformanceAnnotationsAgent.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,aAAa,MAAM,yCAAyC,CAAC;AACzE,OAAO,EAAC,cAAc,EAAC,MAAM,yCAAyC,CAAC;AACvE,OAAO,EACL,uBAAuB,GACxB,MAAM,wCAAwC,CAAC;AAChD,OAAO,EAAC,WAAW,EAAC,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,KAAK,MAAM,sBAAsB,CAAC;AAC9C,OAAO,EAAC,2BAA2B,EAAC,MAAM,qBAAqB,CAAC;AAEhE,uBAAuB,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC1D,EAAE,CAAC,qCAAqC,EAAE,KAAK;QAC7C,MAAM,KAAK,GAAG,IAAI,2BAA2B,CAAC;YAC5C,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC;wBAC3B,WAAW,EAAE,eAAe;qBAC7B,CAAC,CAAC,CAAC;SACL,CAAC,CAAC;QACH,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC;QACzF,MAAM,eAAe,GAAG,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAC7D,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,mEAA4C,IAAI,KAAK,CAAC,EAAE,KAAK,YAAY,CAAC,CAAC;QAClG,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAC/B,MAAM,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;QAC/F,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxB,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;QAC3D,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TimelineUtils from '../../../panels/timeline/utils/utils.js';\nimport {mockAidaClient} from '../../../testing/AiAssistanceHelpers.js';\nimport {\n  describeWithEnvironment,\n} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../../trace/trace.js';\nimport {PerformanceAnnotationsAgent} from '../ai_assistance.js';\n\ndescribeWithEnvironment('PerformanceAnnotationsAgent', () => {\n  it('generates a label from the response', async function() {\n    const agent = new PerformanceAnnotationsAgent({\n      aidaClient: mockAidaClient([[{\n        explanation: 'hello world\\n',\n      }]]),\n    });\n    const {parsedTrace} = await TraceLoader.traceEngine(this, 'web-dev-with-commit.json.gz');\n    const evalScriptEvent = parsedTrace.Renderer.allTraceEntries.find(\n        event => event.name === Trace.Types.Events.Name.EVALUATE_SCRIPT && event.ts === 122411195649);\n    assert.exists(evalScriptEvent);\n    const aiCallTree = TimelineUtils.AICallTree.AICallTree.fromEvent(evalScriptEvent, parsedTrace);\n    assert.isOk(aiCallTree);\n    const label = await agent.generateAIEntryLabel(aiCallTree);\n    assert.strictEqual(label, 'hello world');\n  });\n});\n"]}