{"version":3,"file":"PerformanceInsightsAgent.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/ai_assistance/agents/PerformanceInsightsAgent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../core/common/common.js';\nimport type * as Host from '../../../core/host/host.js';\nimport * as TimelineUtils from '../../../panels/timeline/utils/utils.js';\nimport {mockAidaClient} from '../../../testing/AiAssistanceHelpers.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {getInsightOrError} from '../../../testing/InsightHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../../trace/trace.js';\nimport {\n  type ActionResponse,\n  InsightContext,\n  PerformanceInsightFormatter,\n  PerformanceInsightsAgent,\n  ResponseType,\n  TraceEventFormatter,\n} from '../ai_assistance.js';\n\nconst FAKE_LCP_MODEL = {\n  insightKey: Trace.Insights.Types.InsightKeys.LCP_PHASES,\n  strings: {},\n  title: 'LCP by phase' as Common.UIString.LocalizedString,\n  description: 'some description' as Common.UIString.LocalizedString,\n  category: Trace.Insights.Types.InsightCategory.ALL,\n  state: 'fail',\n  frameId: '123',\n} as const;\nconst FAKE_INP_MODEL = {\n  insightKey: Trace.Insights.Types.InsightKeys.INTERACTION_TO_NEXT_PAINT,\n  strings: {},\n  title: 'INP by phase' as Common.UIString.LocalizedString,\n  description: 'some description' as Common.UIString.LocalizedString,\n  category: Trace.Insights.Types.InsightCategory.ALL,\n  state: 'fail',\n  frameId: '123',\n} as const;\nconst FAKE_PARSED_TRACE = {} as unknown as Trace.Handlers.Types.ParsedTrace;\n\ndescribeWithEnvironment('PerformanceInsightsAgent', () => {\n  it('outputs the right title for the selected insight', async () => {\n    const mockInsight = new TimelineUtils.InsightAIContext.ActiveInsight(FAKE_LCP_MODEL, FAKE_PARSED_TRACE);\n    const context = new InsightContext(mockInsight);\n    assert.strictEqual(context.getTitle(), 'Insight: LCP by phase');\n  });\n\n  // See b/405054694 for context on why we do this.\n  describe('parsing text responses', () => {\n    it('strips out 5 backticks if the response has them', async () => {\n      const agent = new PerformanceInsightsAgent({aidaClient: mockAidaClient()});\n      const response = agent.parseTextResponse('`````hello world`````');\n      assert.deepEqual(response, {answer: 'hello world'});\n    });\n\n    it('strips any newlines before the backticks', async () => {\n      const agent = new PerformanceInsightsAgent({aidaClient: mockAidaClient()});\n      const response = agent.parseTextResponse('\\n\\n`````hello world`````');\n      assert.deepEqual(response, {answer: 'hello world'});\n    });\n\n    it('does not strip the backticks if the response does not fully start and end with them', async () => {\n      const agent = new PerformanceInsightsAgent({aidaClient: mockAidaClient()});\n      const response = agent.parseTextResponse('answer: `````hello world`````');\n      assert.deepEqual(response, {answer: 'answer: `````hello world`````'});\n    });\n\n    it('does not strip the backticks in the middle of the response even if the response is also wrapped', async () => {\n      const agent = new PerformanceInsightsAgent({aidaClient: mockAidaClient()});\n      const response = agent.parseTextResponse('`````hello ````` world`````');\n      assert.deepEqual(response, {answer: 'hello ````` world'});\n    });\n\n    it('does not strip out inline code backticks', async () => {\n      const agent = new PerformanceInsightsAgent({aidaClient: mockAidaClient()});\n      const response = agent.parseTextResponse('This is code `console.log(\"hello\")`');\n      assert.deepEqual(response, {answer: 'This is code `console.log(\"hello\")`'});\n    });\n\n    it('does not strip out code block 3 backticks', async () => {\n      const agent = new PerformanceInsightsAgent({aidaClient: mockAidaClient()});\n      const response = agent.parseTextResponse(`\\`\\`\\`\ncode\n\\`\\`\\``);\n      assert.deepEqual(response, {\n        answer: `\\`\\`\\`\ncode\n\\`\\`\\``\n      });\n    });\n  });\n\n  describe('handleContextDetails', () => {\n    it('outputs the right context for the initial query from the user', async () => {\n      const mockInsight = new TimelineUtils.InsightAIContext.ActiveInsight(FAKE_LCP_MODEL, FAKE_PARSED_TRACE);\n      const context = new InsightContext(mockInsight);\n      const agent = new PerformanceInsightsAgent({\n        aidaClient: mockAidaClient([[{\n          explanation: 'This is the answer',\n          metadata: {\n            rpcGlobalId: 123,\n          }\n        }]])\n      });\n\n      const expectedDetailText = new PerformanceInsightFormatter(mockInsight).formatInsight();\n\n      const responses = await Array.fromAsync(agent.run('test', {selected: context}));\n      assert.deepEqual(responses, [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'test',\n          imageInput: undefined,\n          imageId: undefined,\n        },\n        {\n          type: ResponseType.CONTEXT,\n          title: 'Analyzing insight: LCP by phase',\n          details: [\n            {title: 'LCP by phase', text: expectedDetailText},\n          ],\n        },\n        {\n          type: ResponseType.QUERYING,\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'This is the answer',\n          complete: true,\n          suggestions: undefined,\n          rpcId: 123,\n        },\n      ]);\n    });\n  });\n\n  describe('enhanceQuery', () => {\n    it('adds the context to the query from the user', async () => {\n      const agent = new PerformanceInsightsAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n\n      const mockInsight = new TimelineUtils.InsightAIContext.ActiveInsight(FAKE_LCP_MODEL, FAKE_PARSED_TRACE);\n      const context = new InsightContext(mockInsight);\n      const extraContext = new PerformanceInsightFormatter(mockInsight).formatInsight();\n\n      const finalQuery = await agent.enhanceQuery('What is this?', context);\n      const expected = `${extraContext}\n\n# User request:\nWhat is this?`;\n\n      assert.strictEqual(finalQuery, expected);\n    });\n\n    it('does not add the context for follow-up queries with the same context', async () => {\n      const agent = new PerformanceInsightsAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n\n      const mockInsight = new TimelineUtils.InsightAIContext.ActiveInsight(FAKE_LCP_MODEL, FAKE_PARSED_TRACE);\n      const context = new InsightContext(mockInsight);\n\n      await agent.enhanceQuery('What is this?', context);\n      const finalQuery = await agent.enhanceQuery('Help me understand?', context);\n      const expected = `# User request:\nHelp me understand?`;\n\n      assert.strictEqual(finalQuery, expected);\n    });\n\n    it('does add context to queries if the insight context changes', async () => {\n      const agent = new PerformanceInsightsAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      const mockInsight1 = new TimelineUtils.InsightAIContext.ActiveInsight(FAKE_LCP_MODEL, FAKE_PARSED_TRACE);\n      const mockInsight2 = new TimelineUtils.InsightAIContext.ActiveInsight(FAKE_INP_MODEL, FAKE_PARSED_TRACE);\n      const context1 = new InsightContext(mockInsight1);\n      const context2 = new InsightContext(mockInsight2);\n      const firstQuery = await agent.enhanceQuery('Q1', context1);\n      const secondQuery = await agent.enhanceQuery('Q2', context1);\n      const thirdQuery = await agent.enhanceQuery('Q3', context2);\n      assert.include(firstQuery, '## Insight Title: LCP by phase');\n      assert.notInclude(secondQuery, '## Insight Title');\n      assert.include(thirdQuery, '## Insight Title: INP by phase');\n    });\n  });\n\n  describe('function calls', () => {\n    it('calls getNetworkActivitySummary', async function() {\n      const {parsedTrace, insights} = await TraceLoader.traceEngine(this, 'lcp-images.json.gz');\n      assert.isOk(insights);\n      const [firstNav] = parsedTrace.Meta.mainFrameNavigations;\n      const lcpPhases = getInsightOrError('LCPPhases', insights, firstNav);\n      const agent = new PerformanceInsightsAgent({\n        aidaClient: mockAidaClient([\n          [{explanation: '', functionCalls: [{name: 'getNetworkActivitySummary', args: {}}]}], [{explanation: 'done'}]\n        ])\n      });\n      const activeInsight = new TimelineUtils.InsightAIContext.ActiveInsight(lcpPhases, parsedTrace);\n      const context = new InsightContext(activeInsight);\n\n      const responses = await Array.fromAsync(agent.run('test', {selected: context}));\n      const action = responses.find(response => response.type === ResponseType.ACTION);\n\n      // Find the requests we expect the handler to have returned.\n      const expectedRequestUrls = [\n        'https://chromedevtools.github.io/performance-stories/lcp-large-image/index.html',\n        'https://fonts.googleapis.com/css2?family=Poppins:ital,wght@1,800',\n        'https://chromedevtools.github.io/performance-stories/lcp-large-image/app.css',\n        'https://via.placeholder.com/50.jpg', 'https://via.placeholder.com/2000.jpg'\n      ];\n\n      const requests = expectedRequestUrls.map(url => {\n        const match = parsedTrace.NetworkRequests.byTime.find(r => r.args.data.url === url);\n        assert.isOk(match, `no request found for ${url}`);\n        return match;\n      });\n\n      const expectedRequestsOutput =\n          requests.map(r => TraceEventFormatter.networkRequest(r, parsedTrace, {verbose: false}));\n      const expectedOutput = JSON.stringify({requests: expectedRequestsOutput});\n      const titleResponse = responses.find(response => response.type === ResponseType.TITLE);\n      assert.exists(titleResponse);\n      assert.strictEqual(titleResponse.title, 'Investigating network activity…');\n\n      assert.exists(action);\n      assert.deepEqual(action, {\n        type: 'action' as ActionResponse['type'],\n        output: expectedOutput,\n        code: 'getNetworkActivitySummary()',\n        canceled: false\n      });\n    });\n\n    it('can call getNetworkRequestDetail to get detail about a single request', async function() {\n      const {parsedTrace, insights} = await TraceLoader.traceEngine(this, 'lcp-images.json.gz');\n      assert.isOk(insights);\n      const [firstNav] = parsedTrace.Meta.mainFrameNavigations;\n      const lcpPhases = getInsightOrError('LCPPhases', insights, firstNav);\n      const requestUrl = 'https://chromedevtools.github.io/performance-stories/lcp-large-image/app.css';\n      const agent = new PerformanceInsightsAgent({\n        aidaClient: mockAidaClient([\n          [{explanation: '', functionCalls: [{name: 'getNetworkRequestDetail', args: {url: requestUrl}}]}],\n          [{explanation: 'done'}]\n        ])\n      });\n      const activeInsight = new TimelineUtils.InsightAIContext.ActiveInsight(lcpPhases, parsedTrace);\n      const context = new InsightContext(activeInsight);\n\n      const responses = await Array.fromAsync(agent.run('test', {selected: context}));\n      const titleResponse = responses.find(response => response.type === ResponseType.TITLE);\n      assert.exists(titleResponse);\n      assert.strictEqual(titleResponse.title, `Investigating network request ${requestUrl}…`);\n      const action = responses.find(response => response.type === ResponseType.ACTION);\n      const request = parsedTrace.NetworkRequests.byTime.find(r => r.args.data.url === requestUrl);\n      assert.isOk(request);\n\n      const expectedRequestOutput = TraceEventFormatter.networkRequest(request, parsedTrace, {verbose: true});\n      const expectedOutput = JSON.stringify({request: expectedRequestOutput});\n\n      assert.exists(action);\n      assert.deepEqual(action, {\n        type: 'action' as ActionResponse['type'],\n        output: expectedOutput,\n        code: `getNetworkRequestDetail('${requestUrl}')`,\n        canceled: false\n      });\n    });\n\n    it('calls getMainThreadActivity', async function() {\n      const {parsedTrace, insights} = await TraceLoader.traceEngine(this, 'lcp-discovery-delay.json.gz');\n      assert.isOk(insights);\n      const [firstNav] = parsedTrace.Meta.mainFrameNavigations;\n      const lcpPhases = getInsightOrError('LCPPhases', insights, firstNav);\n      const agent = new PerformanceInsightsAgent({\n        aidaClient: mockAidaClient(\n            [[{explanation: '', functionCalls: [{name: 'getMainThreadActivity', args: {}}]}], [{explanation: 'done'}]])\n      });\n      const activeInsight = new TimelineUtils.InsightAIContext.ActiveInsight(lcpPhases, parsedTrace);\n      const context = new InsightContext(activeInsight);\n\n      const responses = await Array.fromAsync(agent.run('test', {selected: context}));\n      const titleResponse = responses.find(response => response.type === ResponseType.TITLE);\n      assert.exists(titleResponse);\n      assert.strictEqual(titleResponse.title, 'Investigating main thread activity…');\n\n      const action = responses.find(response => response.type === ResponseType.ACTION);\n      assert.exists(action);\n\n      const expectedTree = TimelineUtils.InsightAIContext.AIQueries.mainThreadActivity(lcpPhases, parsedTrace);\n      assert.isOk(expectedTree);\n      const expectedOutput = JSON.stringify({activity: expectedTree.serialize()});\n\n      assert.deepEqual(action, {\n        type: 'action' as ActionResponse['type'],\n        output: expectedOutput,\n        code: 'getMainThreadActivity()',\n        canceled: false\n      });\n    });\n  });\n});\n"]}