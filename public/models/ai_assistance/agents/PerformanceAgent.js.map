{"version":3,"file":"PerformanceAgent.js","sourceRoot":"","sources":["../../../../../../../front_end/models/ai_assistance/agents/PerformanceAgent.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Root from '../../../core/root/root.js';\nimport * as TimelineUtils from '../../../panels/timeline/utils/utils.js';\nimport * as PanelUtils from '../../../panels/utils/utils.js';\nimport * as Trace from '../../trace/trace.js';\n\nimport {\n  AgentType,\n  AiAgent,\n  type ContextResponse,\n  ConversationContext,\n  type RequestOptions,\n  ResponseType,\n} from './AiAgent.js';\n\n/**\n * WARNING: preamble defined in code is only used when userTier is\n * TESTERS. Otherwise, a server-side preamble is used (see\n * chrome_preambles.gcl). Sync local changes with the server-side.\n */\n/**\n * Preamble clocks in at ~970 tokens.\n *   The prose is around 4.5 chars per token.\n * The data can be as bad as 1.8 chars per token\n *\n * Check token length in https://aistudio.google.com/\n */\nconst preamble = `You are an expert performance analyst specializing in Chrome DevTools.\nYou meticulously examine web application behavior captured by the Chrome DevTools Performance Panel and Chrome tracing.\nYou will receive a structured text representation of a call tree, derived from a user-selected call frame within a performance trace's flame chart.\nThis tree originates from the root task associated with the selected call frame.\n\nEach call frame is presented in the following format:\n\nNode: $id - $name\nSelected: true (if this is the call frame selected by the user)\nDuration: $duration (milliseconds, including children)\nSelf Time: $self (milliseconds, excluding children, defaults to 0)\nURL: $url_number (reference to the \"All URLs\" list)\nChildren:\n  * $child.id - $child.name\n\nKey definitions:\n\n* name: A concise string describing the call frame (e.g., 'Evaluate Script', 'render', 'fetchData').\n* id: A unique numerical identifier for the call frame.\n* Selected: Indicates if this is the call frame the user focused on. **Only one node will have \"Selected: true\".**\n* URL: The index of the URL associated with this call frame, referencing the \"All URLs\" list.\n* Duration: The total execution time of the call frame, including its children.\n* Self Time: The time spent directly within the call frame, excluding its children's execution.\n* Children: A list of child call frames, showing their IDs and names.\n\nYour objective is to provide a comprehensive analysis of the **selected call frame and the entire call tree** and its context within the performance recording, including:\n\n1.  **Functionality:** Clearly describe the purpose and actions of the selected call frame based on its properties (name, URL, etc.).\n2.  **Execution Flow:**\n    * **Ancestors:** Trace the execution path from the root task to the selected call frame, explaining the sequence of parent calls.\n    * **Descendants:** Analyze the child call frames, identifying the tasks they initiate and any performance-intensive sub-tasks.\n3.  **Performance Metrics:**\n    * **Duration and Self Time:** Report the execution time of the call frame and its children.\n    * **Relative Cost:** Evaluate the contribution of the call frame to the overall duration of its parent tasks and the entire trace.\n    * **Bottleneck Identification:** Identify potential performance bottlenecks based on duration and self time, including long-running tasks or idle periods.\n4.  **Optimization Recommendations:** Provide specific, actionable suggestions for improving the performance of the selected call frame and its related tasks, focusing on resource management and efficiency. Only provide recommendations if they are based on data present in the call tree.\n\n# Important Guidelines:\n\n* Maintain a concise and technical tone suitable for software engineers.\n* Exclude call frame IDs and URL indices from your response.\n* **Critical:** If asked about sensitive topics (religion, race, politics, sexuality, gender, etc.), respond with: \"My expertise is limited to website performance analysis. I cannot provide information on that topic.\".\n* **Critical:** Refrain from providing answers on non-web-development topics, such as legal, financial, medical, or personal advice.\n\n## Example Session:\n\nAll URLs:\n* 0 - app.js\n\nCall Tree:\n\nNode: 1 - main\nSelected: false\nDuration: 500\nSelf Time: 100\nChildren:\n  * 2 - update\n\nNode: 2 - update\nSelected: false\nDuration: 200\nSelf Time: 50\nChildren:\n  * 3 - animate\n\nNode: 3 - animate\nSelected: true\nDuration: 150\nSelf Time: 20\nURL: 0\nChildren:\n  * 4 - calculatePosition\n  * 5 - applyStyles\n\nNode: 4 - calculatePosition\nSelected: false\nDuration: 80\nSelf Time: 80\n\nNode: 5 - applyStyles\nSelected: false\nDuration: 50\nSelf Time: 50\n\nAnalyze the selected call frame.\n\nExample Response:\n\nThe selected call frame is 'animate', responsible for visual animations within 'app.js'.\nIt took 150ms total, with 20ms spent directly within the function.\nThe 'calculatePosition' and 'applyStyles' child functions consumed the remaining 130ms.\nThe 'calculatePosition' function, taking 80ms, is a potential bottleneck.\nConsider optimizing the position calculation logic or reducing the frequency of calls to improve animation performance.\n`;\n\n/*\n* Strings that don't need to be translated at this time.\n*/\nconst UIStringsNotTranslate = {\n  analyzingCallTree: 'Analyzing call tree',\n} as const;\n\nconst lockedString = i18n.i18n.lockedString;\n\nexport class CallTreeContext extends ConversationContext<TimelineUtils.AICallTree.AICallTree> {\n  #callTree: TimelineUtils.AICallTree.AICallTree;\n\n  constructor(callTree: TimelineUtils.AICallTree.AICallTree) {\n    super();\n    this.#callTree = callTree;\n  }\n\n  override getOrigin(): string {\n    // Although in this context we expect the call tree to have a selected node\n    // as the entrypoint into the \"Ask AI\" tool is via selecting a node, it is\n    // possible to build trees without a selected node, in which case we\n    // fallback to the root node.\n    const node = this.#callTree.selectedNode ?? this.#callTree.rootNode;\n    const selectedEvent = node.event;\n    // Get the non-resolved (ignore sourcemaps) URL for the event. We use the\n    // non-resolved URL as in the context of the AI Assistance panel, we care\n    // about the origin it was served on.\n    const nonResolvedURL = Trace.Handlers.Helpers.getNonResolvedURL(selectedEvent, this.#callTree.parsedTrace);\n    if (nonResolvedURL) {\n      const origin = Common.ParsedURL.ParsedURL.extractOrigin(nonResolvedURL);\n      if (origin) {  // origin could be the empty string.\n        return origin;\n      }\n    }\n    // Generate a random \"origin\". We do this rather than return an empty\n    // string or some \"unknown\" string so that each event without a definite\n    // URL is considered a new, standalone origin. This is safer from a privacy\n    // & security perspective, else we risk bucketing events together that\n    // should not be. We also don't want to make it entirely random so we\n    // cannot calculate it deterministically.\n    const uuid = `${selectedEvent.name}_${selectedEvent.pid}_${selectedEvent.tid}_${selectedEvent.ts}`;\n    return uuid;\n  }\n\n  override getItem(): TimelineUtils.AICallTree.AICallTree {\n    return this.#callTree;\n  }\n\n  override getIcon(): HTMLElement {\n    const iconData = {\n      iconName: 'performance',\n      color: 'var(--sys-color-on-surface-subtle)',\n    };\n    const icon = PanelUtils.PanelUtils.createIconElement(iconData, 'Performance');\n    icon.classList.add('icon');\n    return icon;\n  }\n\n  override getTitle(): string {\n    const event = this.#callTree.selectedNode?.event ?? this.#callTree.rootNode.event;\n    if (!event) {\n      return 'unknown';\n    }\n\n    return TimelineUtils.EntryName.nameForEntry(event);\n  }\n}\n\n/**\n * One agent instance handles one conversation. Create a new agent\n * instance for a new conversation.\n */\nexport class PerformanceAgent extends AiAgent<TimelineUtils.AICallTree.AICallTree> {\n  override readonly type = AgentType.PERFORMANCE;\n  readonly preamble = preamble;\n  readonly clientFeature = Host.AidaClient.ClientFeature.CHROME_PERFORMANCE_AGENT;\n  get userTier(): string|undefined {\n    return Root.Runtime.hostConfig.devToolsAiAssistancePerformanceAgent?.userTier;\n  }\n  get options(): RequestOptions {\n    const temperature = Root.Runtime.hostConfig.devToolsAiAssistancePerformanceAgent?.temperature;\n    const modelId = Root.Runtime.hostConfig.devToolsAiAssistancePerformanceAgent?.modelId;\n\n    return {\n      temperature,\n      modelId,\n    };\n  }\n\n  async *\n      handleContextDetails(aiCallTree: ConversationContext<TimelineUtils.AICallTree.AICallTree>|null):\n          AsyncGenerator<ContextResponse, void, void> {\n    yield {\n      type: ResponseType.CONTEXT,\n      title: lockedString(UIStringsNotTranslate.analyzingCallTree),\n      details: [\n        {\n          title: 'Selected call tree',\n          text: aiCallTree?.getItem().serialize() ?? '',\n        },\n      ],\n    };\n  }\n\n  #contextSet = new WeakSet();\n\n  override async enhanceQuery(query: string, aiCallTree: ConversationContext<TimelineUtils.AICallTree.AICallTree>|null):\n      Promise<string> {\n    const treeItem = aiCallTree?.getItem();\n    let treeStr = treeItem?.serialize();\n\n    // Collect the queries from previous messages in this session\n\n    // If this is a followup chat about the same call tree, don't include the call tree serialization again.\n    // We don't need to repeat it and we'd rather have more the context window space.\n    if (treeItem && this.#contextSet.has(treeItem) && treeStr) {\n      treeStr = undefined;\n    }\n    if (treeItem && !this.#contextSet.has(treeItem)) {\n      this.#contextSet.add(treeItem);\n    }\n\n    const perfEnhancementQuery = treeStr ? `${treeStr}\\n\\n# User request\\n\\n` : '';\n    return `${perfEnhancementQuery}${query}`;\n  }\n\n  /**\n   * Used in the Performance panel to automatically generate a label for a selected entry.\n   */\n  async generateAIEntryLabel(callTree: TimelineUtils.AICallTree.AICallTree): Promise<string> {\n    const context = new CallTreeContext(callTree);\n    const response = await Array.fromAsync(this.run(AI_LABEL_GENERATION_PROMPT, {selected: context}));\n    const lastResponse = response.at(-1);\n    if (lastResponse && lastResponse.type === ResponseType.ANSWER && lastResponse.complete === true) {\n      return lastResponse.text.trim();\n    }\n    throw new Error('Failed to generate AI entry label');\n  }\n}\n\nconst AI_LABEL_GENERATION_PROMPT = `## Instruction:\nGenerate a concise label (max 60 chars, single line) describing the selected call tree's activity, based solely on the provided call tree data.\n\nYou should focus on:\n1. What activity is happening within the call tree.\n2. What the code within the call tree is doing.\n3. What (if any) visible impact to the user there is.\n\n## Strict Constraints:\n- Output must be a single line of text.\n- Maximum 60 characters.\n- No full stops.\n- Base the description only on the information present within the call tree data.\n- Do not include the name of the selected event.\n- Do not make assumptions about when the activity happened.\n- Only include details on activity that you are highly confident about.\n- Prioritize brevity.\n- Only include third-party script names if their identification is highly confident.\n`;\n"]}