{"version":3,"file":"PerformanceAnnotationsAgent.js","sourceRoot":"","sources":["../../../../../../../front_end/models/ai_assistance/agents/PerformanceAnnotationsAgent.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,4BAA4B,CAAC;AAInD,OAAO,EAAC,eAAe,EAAE,gBAAgB,EAAC,MAAM,uBAAuB,CAAC;AAExE,MAAM,OAAO,2BAA4B,SAAQ,gBAAgB;IAC7C,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,oCAAoC,CAAC;IAErG;;OAEG;IACH,KAAK,CAAC,oBAAoB,CAAC,QAA6C;QACtE,MAAM,OAAO,GAAG,IAAI,eAAe,CAAC,QAAQ,CAAC,CAAC;QAC9C,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,0BAA0B,EAAE,EAAC,QAAQ,EAAE,OAAO,EAAC,CAAC,CAAC,CAAC;QAClG,MAAM,YAAY,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,YAAY,IAAI,YAAY,CAAC,IAAI,uCAAwB,IAAI,YAAY,CAAC,QAAQ,KAAK,IAAI,EAAE,CAAC;YAChG,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QAClC,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;IACvD,CAAC;CACF;AAED,MAAM,0BAA0B,GAAG;;;;;;;;;;;;;;CAclC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport type * as TimelineUtils from '../../../panels/timeline/utils/utils.js';\n\nimport {ResponseType} from './AiAgent.js';\nimport {CallTreeContext, PerformanceAgent} from './PerformanceAgent.js';\n\nexport class PerformanceAnnotationsAgent extends PerformanceAgent {\n  override readonly clientFeature = Host.AidaClient.ClientFeature.CHROME_PERFORMANCE_ANNOTATIONS_AGENT;\n\n  /**\n   * Used in the Performance panel to automatically generate a label for a selected entry.\n   */\n  async generateAIEntryLabel(callTree: TimelineUtils.AICallTree.AICallTree): Promise<string> {\n    const context = new CallTreeContext(callTree);\n    const response = await Array.fromAsync(this.run(AI_LABEL_GENERATION_PROMPT, {selected: context}));\n    const lastResponse = response.at(-1);\n    if (lastResponse && lastResponse.type === ResponseType.ANSWER && lastResponse.complete === true) {\n      return lastResponse.text.trim();\n    }\n    throw new Error('Failed to generate AI entry label');\n  }\n}\n\nconst AI_LABEL_GENERATION_PROMPT = `## Instruction:\nGenerate a concise label (max 60 chars, single line) describing the *user-visible effect* of the selected call tree's activity, based solely on the provided call tree data.\n\n## Strict Constraints:\n- Output must be a single line of text.\n- Maximum 60 characters.\n- No full stops.\n- Focus on user impact, not internal operations.\n- Do not include the name of the selected event.\n- Do not make assumptions about when the activity happened.\n- Base the description only on the information present within the call tree data.\n- Prioritize brevity.\n- Only include third-party script names if their identification is highly confident.\n- Very important: Only output the 60 character label text, your response will be used in full to show to the user as an annotation in the timeline.\n`;\n"]}