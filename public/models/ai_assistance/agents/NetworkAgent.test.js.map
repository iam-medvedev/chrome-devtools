{"version":3,"file":"NetworkAgent.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/ai_assistance/agents/NetworkAgent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../../core/host/host.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport {mockAidaClient} from '../../../testing/AiAssistanceHelpers.js';\nimport {updateHostConfig} from '../../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../../testing/MockConnection.js';\nimport * as RenderCoordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as Logs from '../../logs/logs.js';\nimport * as NetworkTimeCalculator from '../../network_time_calculator/network_time_calculator.js';\nimport * as TextUtils from '../../text_utils/text_utils.js';\nimport {\n  NetworkAgent,\n  RequestContext,\n  ResponseType,\n} from '../ai_assistance.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\ndescribeWithMockConnection('NetworkAgent', () => {\n  function mockHostConfig(modelId?: string, temperature?: number) {\n    updateHostConfig({\n      devToolsAiAssistanceNetworkAgent: {\n        modelId,\n        temperature,\n      },\n    });\n  }\n\n  afterEach(async () => {\n    await RenderCoordinator.done();\n  });\n\n  describe('buildRequest', () => {\n    it('builds a request with a model id', async () => {\n      mockHostConfig('test model');\n      const agent = new NetworkAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({text: 'test input'}, Host.AidaClient.Role.USER).options?.model_id,\n          'test model',\n      );\n    });\n\n    it('builds a request with a temperature', async () => {\n      mockHostConfig('test model', 1);\n      const agent = new NetworkAgent({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      assert.strictEqual(\n          agent.buildRequest({text: 'test input'}, Host.AidaClient.Role.USER).options?.temperature,\n          1,\n      );\n    });\n  });\n  describe('run', () => {\n    const exampleResponse = JSON.stringify({request: 'body'});\n\n    let selectedNetworkRequest: SDK.NetworkRequest.NetworkRequest;\n    let calculator: NetworkTimeCalculator.NetworkTransferTimeCalculator;\n    const timingInfo: Protocol.Network.ResourceTiming = {\n      requestTime: 500,\n      proxyStart: 0,\n      proxyEnd: 0,\n      dnsStart: 0,\n      dnsEnd: 0,\n      connectStart: 0,\n      connectEnd: 0,\n      sslStart: 0,\n      sslEnd: 0,\n      sendStart: 800,\n      sendEnd: 900,\n      pushStart: 0,\n      pushEnd: 0,\n      receiveHeadersStart: 1000,\n      receiveHeadersEnd: 0,\n    } as unknown as Protocol.Network.ResourceTiming;\n\n    beforeEach(() => {\n      selectedNetworkRequest = SDK.NetworkRequest.NetworkRequest.create(\n          'requestId' as Protocol.Network.RequestId, urlString`https://www.example.com`, urlString``, null, null, null);\n      selectedNetworkRequest.statusCode = 200;\n      selectedNetworkRequest.setRequestHeaders([{name: 'content-type', value: 'bar1'}]);\n      selectedNetworkRequest.responseHeaders =\n          [{name: 'content-type', value: 'bar2'}, {name: 'x-forwarded-for', value: 'bar3'}];\n      selectedNetworkRequest.timing = timingInfo;\n      selectedNetworkRequest.requestContentData = () => {\n        return Promise.resolve(\n            new TextUtils.ContentData.ContentData(exampleResponse, false, 'application/json', 'utf-8'));\n      };\n      const initiatorNetworkRequest = SDK.NetworkRequest.NetworkRequest.create(\n          'requestId' as Protocol.Network.RequestId, urlString`https://www.initiator.com`, urlString``, null, null,\n          null);\n      const initiatedNetworkRequest1 = SDK.NetworkRequest.NetworkRequest.create(\n          'requestId' as Protocol.Network.RequestId, urlString`https://www.example.com/1`, urlString``, null, null,\n          null);\n      const initiatedNetworkRequest2 = SDK.NetworkRequest.NetworkRequest.create(\n          'requestId' as Protocol.Network.RequestId, urlString`https://www.example.com/2`, urlString``, null, null,\n          null);\n\n      sinon.stub(Logs.NetworkLog.NetworkLog.instance(), 'initiatorGraphForRequest')\n          .withArgs(selectedNetworkRequest)\n          .returns({\n            initiators: new Set([selectedNetworkRequest, initiatorNetworkRequest]),\n            initiated: new Map([\n              [selectedNetworkRequest, initiatorNetworkRequest],\n              [initiatedNetworkRequest1, selectedNetworkRequest],\n              [initiatedNetworkRequest2, selectedNetworkRequest],\n            ]),\n          })\n          .withArgs(initiatedNetworkRequest1)\n          .returns({\n            initiators: new Set([]),\n            initiated: new Map([\n              [initiatedNetworkRequest1, selectedNetworkRequest],\n            ]),\n          })\n          .withArgs(initiatedNetworkRequest2)\n          .returns({\n            initiators: new Set([]),\n            initiated: new Map([\n              [initiatedNetworkRequest2, selectedNetworkRequest],\n            ]),\n          });\n\n      calculator = new NetworkTimeCalculator.NetworkTransferTimeCalculator();\n      calculator.updateBoundaries(selectedNetworkRequest);\n    });\n\n    it('generates an answer', async () => {\n      const agent = new NetworkAgent({\n        aidaClient: mockAidaClient([[{\n          explanation: 'This is the answer',\n          metadata: {\n            rpcGlobalId: 123,\n          },\n        }]]),\n      });\n\n      const responses =\n          await Array.fromAsync(agent.run('test', {selected: new RequestContext(selectedNetworkRequest, calculator)}));\n      assert.deepEqual(responses, [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'test',\n          imageInput: undefined,\n          imageId: undefined,\n        },\n        {\n          type: ResponseType.CONTEXT,\n          title: 'Analyzing network data',\n          details: [\n            {\n              title: 'Request',\n              text: 'Request URL: https://www.example.com\\n\\nRequest headers:\\ncontent-type: bar1',\n            },\n            {\n              title: 'Response',\n              text:\n                  `Response Status: 200 \\n\\nResponse headers:\\ncontent-type: bar2\\nx-forwarded-for: bar3\\n\\nResponse body:\\n${\n                      exampleResponse}`\n            },\n            {\n              title: 'Timing',\n              text:\n                  'Queued at (timestamp): 0 s\\nStarted at (timestamp): 501 s\\nQueueing (duration): 501 s\\nConnection start (stalled) (duration): 800 ms\\nRequest sent (duration): 100 ms\\nDuration (duration): 501 s',\n            },\n            {\n              title: 'Request initiator chain',\n              text: `- URL: <redacted cross-origin initiator URL>\n\\t- URL: https://www.example.com\n\\t\\t- URL: https://www.example.com/1\n\\t\\t- URL: https://www.example.com/2`,\n            },\n          ],\n        },\n        {\n          type: ResponseType.QUERYING,\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'This is the answer',\n          complete: true,\n          suggestions: undefined,\n          rpcId: 123,\n        },\n      ]);\n\n      const historicalCtx = agent.buildRequest({text: ''}, Host.AidaClient.Role.USER).historical_contexts;\n      assert.deepEqual(historicalCtx, [\n        {\n          role: 1,\n          parts: [{\n            text: `# Selected network request \\nRequest: https://www.example.com\n\nRequest headers:\ncontent-type: bar1\n\nResponse headers:\ncontent-type: bar2\nx-forwarded-for: bar3\n\nResponse body:\n${exampleResponse}\n\nResponse status: 200 \\n\nRequest timing:\nQueued at (timestamp): 0 s\nStarted at (timestamp): 501 s\nQueueing (duration): 501 s\nConnection start (stalled) (duration): 800 ms\nRequest sent (duration): 100 ms\nDuration (duration): 501 s\n\nRequest initiator chain:\n- URL: <redacted cross-origin initiator URL>\n\\t- URL: https://www.example.com\n\\t\\t- URL: https://www.example.com/1\n\\t\\t- URL: https://www.example.com/2\n\n# User request\n\ntest`,\n          }],\n        },\n        {\n          role: 2,\n          parts: [{text: 'This is the answer'}],\n        },\n      ]);\n    });\n  });\n});\n"]}