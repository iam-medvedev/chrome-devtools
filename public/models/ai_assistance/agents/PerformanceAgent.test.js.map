{"version":3,"file":"PerformanceAgent.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/ai_assistance/agents/PerformanceAgent.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as TimelineUtils from '../../../panels/timeline/utils/utils.js';\nimport {mockAidaClient} from '../../../testing/AiAssistanceHelpers.js';\nimport {\n  describeWithEnvironment,\n  restoreUserAgentForTesting,\n  setUserAgentForTesting,\n  updateHostConfig\n} from '../../../testing/EnvironmentHelpers.js';\nimport {getInsightOrError} from '../../../testing/InsightHelpers.js';\nimport {allThreadEntriesInTrace} from '../../../testing/TraceHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as Trace from '../../trace/trace.js';\nimport {\n  type ActionResponse,\n  ConversationType,\n  PerformanceAgent,\n  PerformanceTraceContext,\n  PerformanceTraceFormatter,\n  ResponseType,\n} from '../ai_assistance.js';\n\ndescribeWithEnvironment('PerformanceAgent', () => {\n  function mockHostConfig(modelId?: string, temperature?: number) {\n    updateHostConfig({\n      devToolsAiAssistancePerformanceAgent: {\n        modelId,\n        temperature,\n      },\n    });\n  }\n\n  describe('buildRequest', () => {\n    it('builds a request with a model id', async () => {\n      mockHostConfig('test model');\n      const agent = new PerformanceAgent(\n          {\n            aidaClient: {} as Host.AidaClient.AidaClient,\n          },\n          ConversationType.PERFORMANCE_CALL_TREE);\n      assert.strictEqual(\n          agent.buildRequest({text: 'test input'}, Host.AidaClient.Role.USER).options?.model_id,\n          'test model',\n      );\n    });\n\n    it('builds a request with a temperature', async () => {\n      mockHostConfig('test model', 1);\n      const agent = new PerformanceAgent(\n          {\n            aidaClient: {} as Host.AidaClient.AidaClient,\n          },\n          ConversationType.PERFORMANCE_CALL_TREE);\n      assert.strictEqual(\n          agent.buildRequest({text: 'test input'}, Host.AidaClient.Role.USER).options?.temperature,\n          1,\n      );\n    });\n\n    it('structure matches the snapshot', async () => {\n      mockHostConfig('test model');\n      sinon.stub(crypto, 'randomUUID').returns('sessionId' as `${string}-${string}-${string}-${string}-${string}`);\n      const agent = new PerformanceAgent(\n          {\n            aidaClient: mockAidaClient([[{explanation: 'answer'}]]),\n            serverSideLoggingEnabled: true,\n          },\n          ConversationType.PERFORMANCE_CALL_TREE);\n\n      await Array.fromAsync(agent.run('question', {selected: null}));\n      setUserAgentForTesting();\n\n      assert.deepEqual(\n          agent.buildRequest(\n              {\n                text: 'test input',\n              },\n              Host.AidaClient.Role.USER),\n          {\n            current_message: {role: Host.AidaClient.Role.USER, parts: [{text: 'test input'}]},\n            client: 'CHROME_DEVTOOLS',\n            preamble: undefined,\n            historical_contexts: [\n              {\n                role: 1,\n                parts: [{text: 'question'}],\n              },\n              {\n                role: 2,\n                parts: [{text: 'answer'}],\n              },\n            ],\n            facts: undefined,\n            metadata: {\n              disable_user_content_logging: false,\n              string_session_id: 'sessionId',\n              user_tier: 2,\n              client_version: 'unit_test',\n            },\n            options: {\n              model_id: 'test model',\n              temperature: undefined,\n            },\n            client_feature: Host.AidaClient.ClientFeature.CHROME_PERFORMANCE_FULL_AGENT,\n            functionality_type: 1,\n          },\n      );\n      restoreUserAgentForTesting();\n    });\n  });\n});\n\ndescribeWithEnvironment('PerformanceAgent – call tree focus', () => {\n  describe('run', function() {\n    it('generates an answer', async function() {\n      const parsedTrace = await TraceLoader.traceEngine(this, 'web-dev-outermost-frames.json.gz');\n      // A basic Layout.\n      const layoutEvt = allThreadEntriesInTrace(parsedTrace).find(event => event.ts === 465457096322);\n      assert.exists(layoutEvt);\n      const aiCallTree = TimelineUtils.AICallTree.AICallTree.fromEvent(layoutEvt, parsedTrace);\n      assert.exists(aiCallTree);\n\n      const agent = new PerformanceAgent(\n          {\n            aidaClient: mockAidaClient([[{\n              explanation: 'This is the answer',\n              metadata: {\n                rpcGlobalId: 123,\n              },\n            }]]),\n          },\n          ConversationType.PERFORMANCE_CALL_TREE);\n\n      const context = PerformanceTraceContext.fromCallTree(aiCallTree);\n      const responses = await Array.fromAsync(agent.run('test', {selected: context}));\n      const expectedData = '\\n\\n' +\n          `\n\n\n# Call tree:\n\n1;Task;3;;;2\n2;Layout;3;3;;;S`.trim();\n\n      assert.deepEqual(responses, [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'test',\n          imageInput: undefined,\n          imageId: undefined,\n        },\n        {\n          type: ResponseType.CONTEXT,\n          title: 'Analyzing call tree',\n          details: [\n            {title: 'Selected call tree', text: expectedData},\n          ],\n        },\n        {\n          type: ResponseType.QUERYING,\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'This is the answer',\n          complete: true,\n          suggestions: undefined,\n          rpcId: 123,\n        },\n      ]);\n\n      assert.deepEqual(agent.buildRequest({text: ''}, Host.AidaClient.Role.USER).historical_contexts, [\n        {\n          role: 1,\n          parts:\n              [{text: `User selected the following call tree:\\n\\n${aiCallTree.serialize()}\\n\\n# User query\\n\\ntest`}],\n        },\n        {\n          role: 2,\n          parts: [{text: 'This is the answer'}],\n        },\n      ]);\n    });\n  });\n\n  describe('enhanceQuery', () => {\n    it('does not send the serialized calltree again if it is a followup chat about the same calltree', async () => {\n      const agent = new PerformanceAgent(\n          {\n            aidaClient: {} as Host.AidaClient.AidaClient,\n          },\n          ConversationType.PERFORMANCE_CALL_TREE);\n\n      const mockAiCallTree = {\n        serialize: () => 'Mock call tree',\n        parsedTrace: FAKE_PARSED_TRACE,\n        rootNode: {event: {ts: 0, dur: 0}},\n      } as unknown as TimelineUtils.AICallTree.AICallTree;\n\n      const context1 = PerformanceTraceContext.fromCallTree(mockAiCallTree);\n      const context2 = PerformanceTraceContext.fromCallTree(mockAiCallTree);\n      const context3 = PerformanceTraceContext.fromCallTree(mockAiCallTree);\n\n      const enhancedQuery1 = await agent.enhanceQuery('What is this?', context1);\n      assert.strictEqual(\n          enhancedQuery1, 'User selected the following call tree:\\n\\nMock call tree\\n\\n# User query\\n\\nWhat is this?');\n\n      const query2 = 'But what about this follow-up question?';\n      const enhancedQuery2 = await agent.enhanceQuery(query2, context2);\n      assert.strictEqual(enhancedQuery2, query2);\n      assert.isFalse(enhancedQuery2.includes(mockAiCallTree.serialize()));\n\n      // Just making sure any subsequent chat doesnt include it either.\n      const query3 = 'And this 3rd question?';\n      const enhancedQuery3 = await agent.enhanceQuery(query3, context3);\n      assert.strictEqual(enhancedQuery3, query3);\n      assert.isFalse(enhancedQuery3.includes(mockAiCallTree.serialize()));\n    });\n  });\n});\n\nconst FAKE_LCP_MODEL = {\n  insightKey: Trace.Insights.Types.InsightKeys.LCP_BREAKDOWN,\n  strings: {},\n  title: 'LCP breakdown' as Common.UIString.LocalizedString,\n  description: 'some description' as Common.UIString.LocalizedString,\n  category: Trace.Insights.Types.InsightCategory.ALL,\n  state: 'fail',\n  frameId: '123',\n} as const;\nconst FAKE_INP_MODEL = {\n  insightKey: Trace.Insights.Types.InsightKeys.INP_BREAKDOWN,\n  strings: {},\n  title: 'INP breakdown' as Common.UIString.LocalizedString,\n  description: 'some description' as Common.UIString.LocalizedString,\n  category: Trace.Insights.Types.InsightCategory.ALL,\n  state: 'fail',\n  frameId: '123',\n} as const;\nconst FAKE_HANDLER_DATA = {\n  Meta: {traceBounds: {min: 0, max: 10}, mainFrameURL: 'https://www.example.com'},\n} as unknown as Trace.Handlers.Types.HandlerData;\nconst FAKE_INSIGHTS = new Map([\n                        [\n                          '', {\n                            model: {\n                              LCPBreakdown: FAKE_LCP_MODEL,\n                              INPBreakdown: FAKE_INP_MODEL,\n                            },\n                            bounds: {min: 0, max: 0, range: 0},\n                          }\n                        ],\n                      ]) as unknown as Trace.Insights.Types.TraceInsightSets;\nconst FAKE_METADATA = {} as unknown as Trace.Types.File.MetaData;\nconst FAKE_PARSED_TRACE = {\n  data: FAKE_HANDLER_DATA,\n  insights: FAKE_INSIGHTS,\n  metadata: FAKE_METADATA,\n} as unknown as Trace.TraceModel.ParsedTrace;\n\nfunction createAgentForInsightConversation(opts: {aidaClient?: Host.AidaClient.AidaClient} = {}) {\n  return new PerformanceAgent({aidaClient: opts.aidaClient ?? mockAidaClient()}, ConversationType.PERFORMANCE_INSIGHT);\n}\n\ndescribeWithEnvironment('PerformanceAgent – insight focus', () => {\n  it('outputs the right title for the selected insight', async () => {\n    const context = PerformanceTraceContext.fromInsight(FAKE_PARSED_TRACE, FAKE_LCP_MODEL);\n    assert.strictEqual(context.getTitle(), 'Trace: www.example.com');\n  });\n\n  // See b/405054694 for context on why we do this.\n  describe('parsing text responses', () => {\n    it('strips out 5 backticks if the response has them', async () => {\n      const agent = createAgentForInsightConversation();\n      const response = agent.parseTextResponse('`````hello world`````');\n      assert.deepEqual(response, {answer: 'hello world'});\n    });\n\n    it('strips any newlines before the backticks', async () => {\n      const agent = createAgentForInsightConversation();\n      const response = agent.parseTextResponse('\\n\\n`````hello world`````');\n      assert.deepEqual(response, {answer: 'hello world'});\n    });\n\n    it('does not strip the backticks if the response does not fully start and end with them', async () => {\n      const agent = createAgentForInsightConversation();\n      const response = agent.parseTextResponse('answer: `````hello world`````');\n      assert.deepEqual(response, {answer: 'answer: `````hello world`````'});\n    });\n\n    it('does not strip the backticks in the middle of the response even if the response is also wrapped', async () => {\n      const agent = createAgentForInsightConversation();\n      const response = agent.parseTextResponse('`````hello ````` world`````');\n      assert.deepEqual(response, {answer: 'hello ````` world'});\n    });\n\n    it('does not strip out inline code backticks', async () => {\n      const agent = createAgentForInsightConversation();\n      const response = agent.parseTextResponse('This is code `console.log(\"hello\")`');\n      assert.deepEqual(response, {answer: 'This is code `console.log(\"hello\")`'});\n    });\n\n    it('does not strip out code block 3 backticks', async () => {\n      const agent = createAgentForInsightConversation();\n      const response = agent.parseTextResponse(`\\`\\`\\`\ncode\n\\`\\`\\``);\n      assert.deepEqual(response, {\n        answer: `\\`\\`\\`\ncode\n\\`\\`\\``\n      });\n    });\n  });\n\n  describe('handleContextDetails', () => {\n    it('outputs the right context for the initial query from the user', async function() {\n      const parsedTrace = await TraceLoader.traceEngine(this, 'lcp-images.json.gz');\n      assert.isOk(parsedTrace.insights);\n      const context = PerformanceTraceContext.fromInsight(parsedTrace, FAKE_LCP_MODEL);\n      const agent = createAgentForInsightConversation({\n        aidaClient: mockAidaClient([[{\n          explanation: 'This is the answer',\n          metadata: {\n            rpcGlobalId: 123,\n          }\n        }]])\n      });\n\n      const expectedDetailText =\n          new PerformanceTraceFormatter(context.getItem(), new Trace.EventsSerializer.EventsSerializer())\n              .formatTraceSummary();\n\n      const responses = await Array.fromAsync(agent.run('test', {selected: context}));\n      assert.deepEqual(responses, [\n        {\n          type: ResponseType.USER_QUERY,\n          query: 'test',\n          imageInput: undefined,\n          imageId: undefined,\n        },\n        {\n          type: ResponseType.CONTEXT,\n          title: 'Analyzing trace',\n          details: [\n            {title: 'Trace', text: expectedDetailText},\n          ],\n        },\n        {\n          type: ResponseType.QUERYING,\n        },\n        {\n          type: ResponseType.ANSWER,\n          text: 'This is the answer',\n          complete: true,\n          suggestions: undefined,\n          rpcId: 123,\n        },\n      ]);\n    });\n  });\n\n  describe('enhanceQuery', () => {\n    it('adds the context to the query from the user', async () => {\n      const agent = createAgentForInsightConversation({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n\n      const context = PerformanceTraceContext.fromInsight(FAKE_PARSED_TRACE, FAKE_LCP_MODEL);\n      const finalQuery = await agent.enhanceQuery('What is this?', context);\n      const expected = `User selected the LCPBreakdown insight.\\n\\n# User query\\n\\nWhat is this?`;\n\n      assert.strictEqual(finalQuery, expected);\n    });\n\n    it('does not add the context for follow-up queries with the same context', async () => {\n      const agent = createAgentForInsightConversation({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n\n      const context = PerformanceTraceContext.fromInsight(FAKE_PARSED_TRACE, FAKE_LCP_MODEL);\n\n      await agent.enhanceQuery('What is this?', context);\n      const finalQuery = await agent.enhanceQuery('Help me understand?', context);\n      const expected = `Help me understand?`;\n\n      assert.strictEqual(finalQuery, expected);\n    });\n\n    it('does add context to queries if the insight context changes', async () => {\n      const agent = createAgentForInsightConversation({\n        aidaClient: {} as Host.AidaClient.AidaClient,\n      });\n      const context1 = PerformanceTraceContext.fromInsight(FAKE_PARSED_TRACE, FAKE_LCP_MODEL);\n      const context2 = PerformanceTraceContext.fromInsight(FAKE_PARSED_TRACE, FAKE_INP_MODEL);\n      const firstQuery = await agent.enhanceQuery('Q1', context1);\n      const secondQuery = await agent.enhanceQuery('Q2', context1);\n      const thirdQuery = await agent.enhanceQuery('Q3', context2);\n      assert.include(firstQuery, 'User selected the LCPBreakdown');\n      assert.notInclude(secondQuery, 'User selected the');\n      assert.include(thirdQuery, 'User selected the INPBreakdown');\n    });\n  });\n\n  describe('function calls', () => {\n    it('can call getNetworkTrackSummary', async function() {\n      const metricsSpy = sinon.spy(Host.userMetrics, 'performanceAINetworkSummaryResponseSize');\n      const parsedTrace = await TraceLoader.traceEngine(this, 'lcp-images.json.gz');\n      assert.isOk(parsedTrace.insights);\n      const [firstNav] = parsedTrace.data.Meta.mainFrameNavigations;\n      const lcpBreakdown = getInsightOrError('LCPBreakdown', parsedTrace.insights, firstNav);\n      const bounds = parsedTrace.data.Meta.traceBounds;\n      const agent = createAgentForInsightConversation({\n        aidaClient: mockAidaClient([\n          [{\n            explanation: '',\n            functionCalls: [{name: 'getNetworkTrackSummary', args: {min: bounds.min, max: bounds.max}}]\n          }],\n          [{explanation: 'done'}]\n        ])\n      });\n      const context = PerformanceTraceContext.fromInsight(parsedTrace, lcpBreakdown);\n\n      const responses = await Array.fromAsync(agent.run('test', {selected: context}));\n      const action = responses.find(response => response.type === ResponseType.ACTION);\n\n      // Find the requests we expect the handler to have returned.\n      const expectedRequestUrls = [\n        'https://chromedevtools.github.io/performance-stories/lcp-large-image/index.html',\n        'https://fonts.googleapis.com/css2?family=Poppins:ital,wght@1,800',\n        'https://chromedevtools.github.io/performance-stories/lcp-large-image/app.css',\n        'https://via.placeholder.com/50.jpg', 'https://via.placeholder.com/2000.jpg'\n      ];\n\n      expectedRequestUrls.forEach(url => {\n        const match = parsedTrace.data.NetworkRequests.byTime.find(r => r.args.data.url === url);\n        assert.isOk(match, `no request found for ${url}`);\n      });\n\n      const formatter = new PerformanceTraceFormatter(context.getItem(), new Trace.EventsSerializer.EventsSerializer());\n      const expectedRequestsOutput = formatter.formatNetworkTrackSummary(bounds);\n\n      const expectedBytesSize = Platform.StringUtilities.countWtf8Bytes(expectedRequestsOutput);\n      sinon.assert.calledWith(metricsSpy, expectedBytesSize);\n\n      const expectedOutput = JSON.stringify({summary: expectedRequestsOutput});\n      const titleResponse = responses.find(response => response.type === ResponseType.TITLE);\n      assert.exists(titleResponse);\n      assert.strictEqual(titleResponse.title, 'Investigating network activity…');\n\n      assert.exists(action);\n      assert.deepEqual(action, {\n        type: 'action' as ActionResponse['type'],\n        output: expectedOutput,\n        code: 'getNetworkTrackSummary({min: 658799706428, max: 658804825864})',\n        canceled: false\n      });\n    });\n\n    it('can call getMainThreadTrackSummary', async function() {\n      const metricsSpy = sinon.spy(Host.userMetrics, 'performanceAIMainThreadActivityResponseSize');\n\n      const parsedTrace = await TraceLoader.traceEngine(this, 'lcp-discovery-delay.json.gz');\n      assert.isOk(parsedTrace.insights);\n      const [firstNav] = parsedTrace.data.Meta.mainFrameNavigations;\n      const lcpBreakdown = getInsightOrError('LCPBreakdown', parsedTrace.insights, firstNav);\n      const bounds = parsedTrace.data.Meta.traceBounds;\n      const agent = createAgentForInsightConversation({\n        aidaClient: mockAidaClient([\n          [{\n            explanation: '',\n            functionCalls: [{name: 'getMainThreadTrackSummary', args: {min: bounds.min, max: bounds.max}}]\n          }],\n          [{explanation: 'done'}]\n        ])\n      });\n      const context = PerformanceTraceContext.fromInsight(parsedTrace, lcpBreakdown);\n\n      const responses = await Array.fromAsync(agent.run('test', {selected: context}));\n      const titleResponse = responses.find(response => response.type === ResponseType.TITLE);\n      assert.exists(titleResponse);\n      assert.strictEqual(titleResponse.title, 'Investigating main thread activity…');\n\n      const action = responses.find(response => response.type === ResponseType.ACTION);\n      assert.exists(action);\n\n      const formatter = new PerformanceTraceFormatter(context.getItem(), new Trace.EventsSerializer.EventsSerializer());\n      const summary = formatter.formatMainThreadTrackSummary(bounds);\n      assert.isOk(summary);\n\n      const expectedBytesSize = Platform.StringUtilities.countWtf8Bytes(summary);\n      sinon.assert.calledWith(metricsSpy, expectedBytesSize);\n\n      const expectedOutput = JSON.stringify({summary});\n\n      assert.deepEqual(action, {\n        type: 'action' as ActionResponse['type'],\n        output: expectedOutput,\n        code: 'getMainThreadTrackSummary({min: 197695826524, max: 197698633660})',\n        canceled: false\n      });\n    });\n\n    it('will not send facts from a previous insight if the context changes', async function() {\n      const parsedTrace = await TraceLoader.traceEngine(this, 'lcp-discovery-delay.json.gz');\n      assert.isOk(parsedTrace.insights);\n      const [firstNav] = parsedTrace.data.Meta.mainFrameNavigations;\n      const lcpBreakdown = getInsightOrError('LCPBreakdown', parsedTrace.insights, firstNav);\n      const renderBlocking = getInsightOrError('RenderBlocking', parsedTrace.insights, firstNav);\n      const agent = createAgentForInsightConversation({\n        aidaClient: mockAidaClient([\n          [{explanation: '', functionCalls: [{name: 'getMainThreadTrackSummary', args: {}}]}],\n        ])\n      });\n      const lcpContext = PerformanceTraceContext.fromInsight(parsedTrace, lcpBreakdown);\n      const renderBlockingContext = PerformanceTraceContext.fromInsight(parsedTrace, renderBlocking);\n\n      // Populate the function calls for the LCP Context\n      await Array.fromAsync(agent.run('test 1 LCP', {selected: lcpContext}));\n      assert.strictEqual(agent.currentFacts().size, 6);  // always adds 6 facts for high-level summary of trace.\n      await Array.fromAsync(agent.run('test 2 LCP', {selected: lcpContext}));\n      assert.strictEqual(agent.currentFacts().size, 7);  // added the function call as a fact.\n      // Now change the context and send a request.\n      await Array.fromAsync(agent.run('test 1 RenderBlocking', {selected: renderBlockingContext}));\n      assert.strictEqual(agent.currentFacts().size, 6);  // back to 6.\n    });\n\n    it('will cache function calls as facts', async function() {\n      const parsedTrace = await TraceLoader.traceEngine(this, 'lcp-discovery-delay.json.gz');\n      assert.isOk(parsedTrace.insights);\n      const [firstNav] = parsedTrace.data.Meta.mainFrameNavigations;\n      const lcpBreakdown = getInsightOrError('LCPBreakdown', parsedTrace.insights, firstNav);\n      const agent = createAgentForInsightConversation({\n        aidaClient: mockAidaClient([\n          [{explanation: '', functionCalls: [{name: 'getMainThreadTrackSummary', args: {}}]}],\n          [{explanation: '', functionCalls: [{name: 'getNetworkTrackSummary', args: {}}]}], [{explanation: 'done'}]\n        ])\n      });\n      const context = PerformanceTraceContext.fromInsight(parsedTrace, lcpBreakdown);\n      await Array.fromAsync(agent.run('test 1', {selected: context}));\n      await Array.fromAsync(agent.run('test 2', {selected: context}));\n      // First 6 are the always included high-level facts. The rests are from the function calls.\n      assert.deepEqual(\n          Array.from(\n              agent.currentFacts(),\n              fact => {\n                return fact.metadata.source;\n              }),\n          [\n            'devtools', 'devtools', 'devtools', 'devtools', 'devtools', 'devtools',\n            'getMainThreadTrackSummary({min: 197695826524, max: 197698633660})',\n            'getNetworkTrackSummary({min: 197695826524, max: 197698633660})'\n          ]);\n    });\n  });\n});\n\ndescribeWithEnvironment('PerformanceAgent – all focus', () => {\n  it('uses the min and max bounds of the trace as the origin', async function() {\n    const parsedTrace = await TraceLoader.traceEngine(this, 'lcp-images.json.gz');\n    const context = PerformanceTraceContext.full(parsedTrace);\n    assert.strictEqual(context.getOrigin(), 'trace-658799706428-658804825864');\n  });\n});\n"]}