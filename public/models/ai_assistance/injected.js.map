{"version":3,"file":"injected.js","sourceRoot":"","sources":["../../../../../../front_end/models/ai_assistance/injected.ts"],"names":[],"mappings":"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","sourcesContent":["\n// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * @file This files include scripts that are executed not in\n * the DevTools target but the page one.\n * They need remain isolated for importing other function so\n * bundling them for production does not create issues.\n */\n/* eslint-disable rulesdir/no-adopted-style-sheets --\n * The scripts in this file aren't executed as part of DevTools front-end,\n * but are injected into the page.\n **/\n\nexport const AI_ASSISTANCE_CSS_CLASS_NAME = 'ai-style-change';\nexport const FREESTYLER_WORLD_NAME = 'DevTools AI Assistance';\nexport const FREESTYLER_BINDING_NAME = '__freestyler';\n\nexport interface FreestyleCallbackArgs {\n  method: string;\n  selector: string;\n  className: `${typeof AI_ASSISTANCE_CSS_CLASS_NAME}-${number}`;\n  styles: Record<string, string>;\n  element: Node;\n}\n\ninterface FreestyleCallbackData {\n  args: string;\n  element: Node;\n  resolve(value: string): void;\n  reject(err?: Error): void;\n}\ninterface FreestylerBinding {\n  (args: FreestyleCallbackArgs): Promise<string>;\n  id: number;\n  callbacks: Map<number, FreestyleCallbackData>;\n  respond(id: number, styleChangesOrError: string|Error): void;\n  getElement(id: number): Node|undefined;\n  getArgs(id: number): string|undefined;\n}\n\n/**\n * Please see fileoverview\n */\nfunction freestylerBindingFunc(bindingName: string): void {\n  // Executed in another world\n  const global = globalThis as unknown as {\n    freestyler?: FreestylerBinding,\n  };\n\n  if (!global.freestyler) {\n    const freestyler = (args: FreestyleCallbackArgs): Promise<string> => {\n      const {resolve, reject, promise} = Promise.withResolvers<string>();\n      freestyler.callbacks.set(freestyler.id, {\n        args: JSON.stringify(args),\n        element: args.element,\n        resolve,\n        reject,\n      });\n      // @ts-expect-error this is binding added though CDP\n      globalThis[bindingName](String(freestyler.id));\n      freestyler.id++;\n      return promise;\n    };\n    freestyler.id = 1;\n    freestyler.callbacks = new Map<number, FreestyleCallbackData>();\n    freestyler.getElement = (callbackId: number) => {\n      return freestyler.callbacks.get(callbackId)?.element;\n    };\n    freestyler.getArgs = (callbackId: number) => {\n      return freestyler.callbacks.get(callbackId)?.args;\n    };\n    freestyler.respond = (callbackId: number, styleChangesOrError: string) => {\n      if (typeof styleChangesOrError === 'string') {\n        freestyler.callbacks.get(callbackId)?.resolve(styleChangesOrError);\n      } else {\n        freestyler.callbacks.get(callbackId)?.reject(styleChangesOrError);\n      }\n\n      freestyler.callbacks.delete(callbackId);\n    };\n    global.freestyler = freestyler;\n  }\n}\n\nexport const freestylerBinding = `(${String(freestylerBindingFunc)})('${FREESTYLER_BINDING_NAME}')`;\n\n/**\n * Please see fileoverview\n */\nfunction setupSetElementStyles(prefix: typeof AI_ASSISTANCE_CSS_CLASS_NAME): void {\n  // Executed in another world\n  const global = globalThis as unknown as {\n    freestyler: FreestylerBinding,\n    setElementStyles: unknown,\n  };\n  async function setElementStyles(\n      el: HTMLElement&{\n        // eslint-disable-next-line\n        __freestylerClassName?: `${typeof AI_ASSISTANCE_CSS_CLASS_NAME}-${number}`,\n      },\n      styles: Record<string, string>,\n      ): Promise<void> {\n    let selector = el.tagName.toLowerCase();\n    if (el.id) {\n      selector = '#' + el.id;\n    } else if (el.classList.length) {\n      const parts = [];\n      for (const cls of el.classList) {\n        if (cls.startsWith(prefix)) {\n          continue;\n        }\n        parts.push('.' + cls);\n      }\n      if (parts.length) {\n        selector = parts.join('');\n      }\n    }\n\n    // __freestylerClassName is not exposed to the page due to this being\n    // run in the isolated world.\n    const className = el.__freestylerClassName ?? `${prefix}-${global.freestyler.id}`;\n    el.__freestylerClassName = className;\n    el.classList.add(className);\n\n    // Remove inline styles with the same keys so that the edit applies.\n    for (const key of Object.keys(styles)) {\n      // if it's kebab case.\n      el.style.removeProperty(key);\n      // If it's camel case.\n      // @ts-expect-error this won't throw if wrong\n      el.style[key] = '';\n    }\n\n    const result = await global.freestyler({\n      method: 'setElementStyles',\n      selector,\n      className,\n      styles,\n      element: el,\n    });\n\n    const rootNode = el.getRootNode();\n    if (rootNode instanceof ShadowRoot) {\n      const stylesheets = rootNode.adoptedStyleSheets;\n      let hasAiStyleChange = false;\n      let stylesheet = new CSSStyleSheet();\n      for (let i = 0; i < stylesheets.length; i++) {\n        const sheet = stylesheets[i];\n        for (let j = 0; j < sheet.cssRules.length; j++) {\n          const rule = sheet.cssRules[j];\n          if (!(rule instanceof CSSStyleRule)) {\n            continue;\n          }\n\n          hasAiStyleChange = rule.selectorText.startsWith(`.${prefix}`);\n          if (hasAiStyleChange) {\n            stylesheet = sheet;\n            break;\n          }\n        }\n      }\n      stylesheet.replaceSync(result);\n      if (!hasAiStyleChange) {\n        rootNode.adoptedStyleSheets = [...stylesheets, stylesheet];\n      }\n    }\n  }\n\n  global.setElementStyles = setElementStyles;\n}\n\nexport const injectedFunctions = `(${String(setupSetElementStyles)})('${AI_ASSISTANCE_CSS_CLASS_NAME}')`;\n"]}