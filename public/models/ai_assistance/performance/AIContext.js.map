{"version":3,"file":"AIContext.js","sourceRoot":"","sources":["../../../../../../../front_end/models/ai_assistance/performance/AIContext.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../../models/trace/trace.js';\n\nimport {AICallTree} from './AICallTree.js';\n\ninterface AgentFocusData {\n  parsedTrace: Trace.TraceModel.ParsedTrace;\n  insightSet: Trace.Insights.Types.InsightSet|null;\n  /** Note: at most one of event or callTree is non-null. */\n  event: Trace.Types.Events.Event|null;\n  /** Note: at most one of event or callTree is non-null. */\n  callTree: AICallTree|null;\n  insight: Trace.Insights.Types.InsightModel|null;\n}\n\nfunction getFirstInsightSet(insights: Trace.Insights.Types.TraceInsightSets): Trace.Insights.Types.InsightSet|null {\n  // Currently only support a single insight set. Pick the first one with a navigation.\n  // TODO(cjamcl): we should just give the agent the entire insight set, and give\n  // summary detail about all of them + the ability to query each.\n  return [...insights.values()].filter(insightSet => insightSet.navigation).at(0) ?? null;\n}\n\nexport class AgentFocus {\n  static fromParsedTrace(parsedTrace: Trace.TraceModel.ParsedTrace): AgentFocus {\n    if (!parsedTrace.insights) {\n      throw new Error('missing insights');\n    }\n\n    const insightSet = getFirstInsightSet(parsedTrace.insights);\n    return new AgentFocus({\n      parsedTrace,\n      insightSet,\n      event: null,\n      callTree: null,\n      insight: null,\n    });\n  }\n\n  static fromInsight(parsedTrace: Trace.TraceModel.ParsedTrace, insight: Trace.Insights.Types.InsightModel):\n      AgentFocus {\n    if (!parsedTrace.insights) {\n      throw new Error('missing insights');\n    }\n\n    const insightSet = getFirstInsightSet(parsedTrace.insights);\n    return new AgentFocus({\n      parsedTrace,\n      insightSet,\n      event: null,\n      callTree: null,\n      insight,\n    });\n  }\n\n  static fromEvent(parsedTrace: Trace.TraceModel.ParsedTrace, event: Trace.Types.Events.Event): AgentFocus {\n    if (!parsedTrace.insights) {\n      throw new Error('missing insights');\n    }\n\n    const insightSet = getFirstInsightSet(parsedTrace.insights);\n    const result = AgentFocus.#getCallTreeOrEvent(parsedTrace, event);\n    return new AgentFocus({parsedTrace, insightSet, event: result.event, callTree: result.callTree, insight: null});\n  }\n\n  static fromCallTree(callTree: AICallTree): AgentFocus {\n    const insights = callTree.parsedTrace.insights;\n\n    // Select the insight set containing the call tree.\n    // If for some reason that fails, fallback to the first one.\n    let insightSet = null;\n    if (insights) {\n      const callTreeTimeRange = Trace.Helpers.Timing.traceWindowFromEvent(callTree.rootNode.event);\n      insightSet = insights.values().find(set => Trace.Helpers.Timing.boundsIncludeTimeRange({\n        timeRange: callTreeTimeRange,\n        bounds: set.bounds,\n      })) ??\n          getFirstInsightSet(insights);\n    }\n\n    return new AgentFocus({parsedTrace: callTree.parsedTrace, insightSet, event: null, callTree, insight: null});\n  }\n\n  #data: AgentFocusData;\n  readonly eventsSerializer = new Trace.EventsSerializer.EventsSerializer();\n\n  constructor(data: AgentFocusData) {\n    this.#data = data;\n  }\n\n  get parsedTrace(): Trace.TraceModel.ParsedTrace {\n    return this.#data.parsedTrace;\n  }\n\n  get insightSet(): Trace.Insights.Types.InsightSet|null {\n    return this.#data.insightSet;\n  }\n\n  /** Note: at most one of event or callTree is non-null. */\n  get event(): Trace.Types.Events.Event|null {\n    return this.#data.event;\n  }\n\n  /** Note: at most one of event or callTree is non-null. */\n  get callTree(): AICallTree|null {\n    return this.#data.callTree;\n  }\n\n  get insight(): Trace.Insights.Types.InsightModel|null {\n    return this.#data.insight;\n  }\n\n  withInsight(insight: Trace.Insights.Types.InsightModel|null): AgentFocus {\n    const focus = new AgentFocus(this.#data);\n    focus.#data.insight = insight;\n    return focus;\n  }\n\n  withEvent(event: Trace.Types.Events.Event|null): AgentFocus {\n    const focus = new AgentFocus(this.#data);\n    const result = AgentFocus.#getCallTreeOrEvent(this.#data.parsedTrace, event);\n    focus.#data.callTree = result.callTree;\n    focus.#data.event = result.event;\n    return focus;\n  }\n\n  lookupEvent(key: Trace.Types.File.SerializableKey): Trace.Types.Events.Event|null {\n    try {\n      return this.eventsSerializer.eventForKey(key, this.#data.parsedTrace);\n    } catch (err) {\n      if (err.toString().includes('Unknown trace event') || err.toString().includes('Unknown profile call')) {\n        return null;\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * If an event is a call tree, this returns that call tree and a null event.\n   * If not a call tree, this only returns a non-null event if the event is a network\n   * request.\n   * This is an arbitrary limitation â€“ it should be removed, but first we need to\n   * improve the agent's knowledge of events that are not main-thread or network\n   * events.\n   */\n  static #getCallTreeOrEvent(parsedTrace: Trace.TraceModel.ParsedTrace, event: Trace.Types.Events.Event|null):\n      {callTree: AICallTree|null, event: Trace.Types.Events.Event|null} {\n    const callTree = event && AICallTree.fromEvent(event, parsedTrace);\n    if (callTree) {\n      return {callTree, event: null};\n    }\n    if (event && Trace.Types.Events.isSyntheticNetworkRequest(event)) {\n      return {callTree: null, event};\n    }\n    return {callTree: null, event: null};\n  }\n}\n\nexport function getPerformanceAgentFocusFromModel(model: Trace.TraceModel.Model): AgentFocus|null {\n  const parsedTrace = model.parsedTrace();\n  if (!parsedTrace) {\n    return null;\n  }\n\n  return AgentFocus.fromParsedTrace(parsedTrace);\n}\n"]}