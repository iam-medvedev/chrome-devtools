{"version":3,"file":"StackTraceModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/stack_trace/StackTraceModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection, setMockConnectionResponseHandler} from '../../testing/MockConnection.js';\nimport {protocolCallFrame, stringifyStackTrace} from '../../testing/StackTraceHelpers.js';\n\nimport * as StackTraceImpl from './stack_trace_impl.js';\n\ndescribeWithMockConnection('StackTraceModel', () => {\n  describe('createFromProtocolRuntime', () => {\n    const identityTranslateFn: StackTraceImpl.StackTraceModel.TranslateRawFrames = (frames, _target) =>\n        Promise.resolve(frames.map(f => [{\n                                     url: f.url,\n                                     name: f.functionName,\n                                     line: f.lineNumber,\n                                     column: f.columnNumber,\n                                   }]));\n\n    function setup() {\n      const target = createTarget();\n      return {\n        model: target.model(StackTraceImpl.StackTraceModel.StackTraceModel)!,\n      };\n    }\n\n    it('correctly handles a stack trace with only a sync fragment', async () => {\n      const {model} = setup();\n\n      const stackTrace = await model.createFromProtocolRuntime(\n          {\n            callFrames: [\n              'foo.js:1:foo:1:10',\n              'bar.js:2:bar:2:20',\n              'baz.js:3:baz:3:30',\n            ].map(protocolCallFrame)\n          },\n          identityTranslateFn);\n\n      assert.strictEqual(stringifyStackTrace(stackTrace), [\n        'at foo (foo.js:1:10)',\n        'at bar (bar.js:2:20)',\n        'at baz (baz.js:3:30)',\n      ].join('\\n'));\n    });\n\n    it('correctly handles async fragments from the same target', async () => {\n      const {model} = setup();\n\n      const stackTrace = await model.createFromProtocolRuntime(\n          {\n            callFrames: [\n              'foo.js:1:foo:1:10',\n              'foo.js:1:bar:2:20',\n            ].map(protocolCallFrame),\n            parent: {\n              description: 'setTimeout',\n              callFrames: [\n                'bar.js:2:barFnX:1:10',\n                'bar.js:2:barFnY:2:20',\n              ].map(protocolCallFrame),\n              parent: {\n                description: 'await',\n                callFrames: [\n                  'baz.js:3:bazFnY:1:10',\n                  'baz.js:3:bazFnY:2:20',\n                ].map(protocolCallFrame),\n              }\n            }\n          },\n          identityTranslateFn);\n\n      assert.strictEqual(stringifyStackTrace(stackTrace), [\n        'at foo (foo.js:1:10)',\n        'at bar (foo.js:2:20)',\n        '--- setTimeout -------------------------',\n        'at barFnX (bar.js:1:10)',\n        'at barFnY (bar.js:2:20)',\n        '--- await ------------------------------',\n        'at bazFnY (baz.js:1:10)',\n        'at bazFnY (baz.js:2:20)',\n      ].join('\\n'));\n    });\n\n    it('correctly handles a async fragments from different targets', async () => {\n      {\n        let index = 0;\n        setMockConnectionResponseHandler('Debugger.enable', () => ({debuggerId: `target${index++}`}));\n        sinon.stub(SDK.DebuggerModel.DebuggerModel, 'resyncDebuggerIdForModels');\n      }\n      const {model} = setup();\n      const [model1, model2] = [\n        createTarget().model(SDK.DebuggerModel.DebuggerModel)!, createTarget().model(SDK.DebuggerModel.DebuggerModel)!\n      ];\n\n      await Promise.all([\n        model1.once(SDK.DebuggerModel.Events.DebuggerIsReadyToPause),\n        model2.once(SDK.DebuggerModel.Events.DebuggerIsReadyToPause)\n      ]);\n\n      sinon.stub(model1, 'fetchAsyncStackTrace').returns(Promise.resolve({\n        description: 'setTimeout',\n        callFrames: [\n          'bar.js:2:barFnX:1:10',\n          'bar.js:2:barFnY:2:20',\n        ].map(protocolCallFrame),\n        parentId: {id: 'async-fragment-2', debuggerId: model2.debuggerId() as Protocol.Runtime.UniqueDebuggerId},\n      }));\n      sinon.stub(model2, 'fetchAsyncStackTrace').returns(Promise.resolve({\n        description: 'await',\n        callFrames: [\n          'baz.js:3:bazFnY:1:10',\n          'baz.js:3:bazFnY:2:20',\n        ].map(protocolCallFrame),\n      }));\n\n      const stackTrace = await model.createFromProtocolRuntime(\n          {\n            callFrames: [\n              'foo.js:1:foo:1:10',\n              'foo.js:1:bar:2:20',\n            ].map(protocolCallFrame),\n            parentId: {id: 'async-fragment-1', debuggerId: model1.debuggerId() as Protocol.Runtime.UniqueDebuggerId},\n          },\n          identityTranslateFn);\n\n      assert.strictEqual(stringifyStackTrace(stackTrace), [\n        'at foo (foo.js:1:10)',\n        'at bar (foo.js:2:20)',\n        '--- setTimeout -------------------------',\n        'at barFnX (bar.js:1:10)',\n        'at barFnY (bar.js:2:20)',\n        '--- await ------------------------------',\n        'at bazFnY (baz.js:1:10)',\n        'at bazFnY (baz.js:2:20)',\n      ].join('\\n'));\n    });\n\n    it('calls the translate function with the correct raw frames', async () => {\n      const {model} = setup();\n      const callFrames = [\n        'foo.js:1:foo:1:10',\n        'bar.js:2:bar:2:20',\n        'baz.js:3:baz:3:30',\n      ].map(protocolCallFrame);\n      const translateSpy = sinon.spy(identityTranslateFn);\n\n      await model.createFromProtocolRuntime({callFrames}, translateSpy);\n\n      sinon.assert.calledOnceWithMatch(translateSpy, callFrames, model.target());\n    });\n\n    it('throws if the translation function returns the wrong number of frames', async () => {\n      const {model} = setup();\n\n      try {\n        await model.createFromProtocolRuntime(\n            {\n              callFrames: [protocolCallFrame('foo.js:1:foo:1:10')],\n            },\n            () => Promise.resolve([]));\n        assert.fail('Expected translateFragment to throw');\n      } catch {\n      }\n    });\n  });\n});\n"]}