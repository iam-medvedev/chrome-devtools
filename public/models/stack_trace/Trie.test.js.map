{"version":3,"file":"Trie.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/stack_trace/Trie.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {protocolCallFrame} from '../../testing/StackTraceHelpers.js';\n\nimport * as StackTraceImpl from './stack_trace_impl.js';\n\ndescribe('Trie', () => {\n  describe('insert', () => {\n    it('throws for empty stack traces', () => {\n      const trie = new StackTraceImpl.Trie.Trie();\n\n      assert.throws(() => trie.insert([]));\n    });\n\n    it('returns the same node when inserting the same frame twice', () => {\n      const trie = new StackTraceImpl.Trie.Trie();\n      const frame = protocolCallFrame('foo.js:1:foo:1:10');\n\n      const node1 = trie.insert([frame]);\n      const node2 = trie.insert([frame]);\n\n      assert.strictEqual(node1, node2);\n      assert.strictEqual(StackTraceImpl.Trie.compareRawFrames(frame, node1.rawFrame), 0);\n    });\n\n    it('returns different nodes when inserting different frames', () => {\n      const trie = new StackTraceImpl.Trie.Trie();\n      const frame1 = protocolCallFrame('foo.js:1:foo:1:10');\n      const frame2 = protocolCallFrame('foo.js:1:bar:2:20');\n\n      const node1 = trie.insert([frame1]);\n      const node2 = trie.insert([frame2]);\n\n      assert.notStrictEqual(node1, node2);\n      assert.strictEqual(StackTraceImpl.Trie.compareRawFrames(frame1, node1.rawFrame), 0);\n      assert.strictEqual(StackTraceImpl.Trie.compareRawFrames(frame2, node2.rawFrame), 0);\n    });\n\n    it('creates 3 nodes for 2 stack traces with 1 shared parent call frame', () => {\n      const trie = new StackTraceImpl.Trie.Trie();\n\n      const node1 = trie.insert([\n        'foo.js::x:1:10',\n        'foo.js::y:2:20',\n      ].map(protocolCallFrame));\n      const node2 = trie.insert([\n        'foo.js::x:1:15',\n        'foo.js::y:2:20',\n      ].map(protocolCallFrame));\n\n      assert.strictEqual(node1.rawFrame.columnNumber, 10);\n      assert.strictEqual(node2.rawFrame.columnNumber, 15);\n\n      assert.strictEqual(node1.parent, node2.parent);\n    });\n  });\n\n  describe('getCallStack', () => {\n    it('returns FrameNodes top to bottom', () => {\n      const trie = new StackTraceImpl.Trie.Trie();\n      const node = trie.insert([\n        'foo.js:1:foo:1:10',\n        'bar.js:2:bar:2:20',\n      ].map(protocolCallFrame));\n\n      const urls = [...node.getCallStack()].map(node => node.rawFrame.url);\n      assert.deepEqual(urls, ['foo.js', 'bar.js']);\n    });\n  });\n});\n"]}