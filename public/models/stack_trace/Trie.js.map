{"version":3,"file":"Trie.js","sourceRoot":"","sources":["../../../../../../front_end/models/stack_trace/Trie.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {FragmentImpl, FrameImpl} from './StackTraceImpl.js';\n\n/**\n * Intentionally very close to a {@link Protocol.Runtime.CallFrame} but with optional `scriptId`.\n */\nexport interface RawFrame {\n  readonly scriptId?: Protocol.Runtime.ScriptId;\n  readonly url?: string;\n  readonly functionName?: string;\n  readonly lineNumber: number;\n  readonly columnNumber: number;\n}\n\ninterface FrameNodeBase<ChildT, ParentT> {\n  readonly parent: ParentT;\n  readonly children: ChildT[];\n}\n\ntype RootFrameNode = FrameNodeBase<WeakRef<FrameNode>, null>;\ntype AnyFrameNode = FrameNode|RootFrameNode;\n\nexport class FrameNode implements FrameNodeBase<FrameNode, AnyFrameNode> {\n  readonly parent: AnyFrameNode;\n  readonly children: FrameNode[] = [];\n\n  readonly rawFrame: RawFrame;\n  frames: FrameImpl[] = [];\n\n  fragment?: FragmentImpl;\n\n  constructor(rawFrame: RawFrame, parent: AnyFrameNode) {\n    this.rawFrame = rawFrame;\n    this.parent = parent;\n  }\n\n  /**\n   * Produces the ancestor chain. Including `this` but excluding the `RootFrameNode`.\n   */\n  * getCallStack(): Generator<FrameNode> {\n    // The `RootFrameNode` doesn't have an actual frame attached, that's why we check for `node.parent` instead of `node`.\n    for (let node: AnyFrameNode|null = this; node.parent; node = node.parent) {\n      yield node;\n    }\n  }\n}\n\n/**\n * Stores stack trace fragments in a trie, but does not own them/keep them alive.\n */\nexport class Trie {\n  readonly #root: RootFrameNode = {parent: null, children: []};\n\n  /**\n   * Most sources produce stack traces in \"top-to-bottom\" order, so that is what this method expects.\n   *\n   * @returns The {@link FrameNode} corresponding to the top-most stack frame.\n   */\n  insert(frames: RawFrame[]): FrameNode {\n    if (frames.length === 0) {\n      throw new Error('Trie.insert called with an empty frames array.');\n    }\n\n    let currentNode: AnyFrameNode = this.#root;\n    for (let i = frames.length - 1; i >= 0; --i) {\n      currentNode = this.#insert(currentNode, frames[i]);\n    }\n    return currentNode as FrameNode;\n  }\n\n  /**\n   * Inserts `rawFrame` into the children of the provided node if not already there.\n   *\n   * @returns the child node corresponding to `rawFrame`.\n   */\n  #insert(node: AnyFrameNode, rawFrame: RawFrame): FrameNode {\n    let i = 0;\n    for (; i < node.children.length; ++i) {\n      const maybeChild = node.children[i];\n      const child = maybeChild instanceof WeakRef ? maybeChild.deref() : maybeChild;\n      if (!child) {\n        continue;\n      }\n\n      const compareResult = compareRawFrames(child.rawFrame, rawFrame);\n      if (compareResult === 0) {\n        return child;\n      }\n      if (compareResult > 0) {\n        break;\n      }\n    }\n\n    const newNode = new FrameNode(rawFrame, node);\n    if (node.parent) {\n      node.children.splice(i, 0, newNode);\n    } else {\n      node.children.splice(i, 0, new WeakRef(newNode));\n    }\n    return newNode;\n  }\n\n  /**\n   * Traverses the trie in pre-order.\n   *\n   * @param node Start at `node` or `null` to start with the children of the root.\n   * @param visit Called on each node in the trie. Return `true` if the visitor should descend into child nodes of the provided node.\n   */\n  walk(node: FrameNode|null, visit: (node: FrameNode) => boolean): void {\n    const stack =\n        node ? [node] : [...this.#root.children].map(ref => ref.deref()).filter(node => Boolean(node)) as FrameNode[];\n\n    for (let node = stack.pop(); node; node = stack.pop()) {\n      const visitChildren = visit(node);\n      if (visitChildren) {\n        // Pushing the children in reverse means the \"left-most\" child is visited first (i.e. pre-order).\n        for (let i = node.children.length - 1; i >= 0; --i) {\n          stack.push(node.children[i]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * @returns a number < 0, 0 or > 0, if the `a` is smaller then, equal or greater then `b`.\n */\nexport function compareRawFrames(a: RawFrame, b: RawFrame): number {\n  const scriptIdCompare = (a.scriptId ?? '').localeCompare(b.scriptId ?? '');\n  if (scriptIdCompare !== 0) {\n    return scriptIdCompare;\n  }\n\n  const urlCompare = (a.url ?? '').localeCompare(b.url ?? '');\n  if (urlCompare !== 0) {\n    return urlCompare;\n  }\n\n  const nameCompare = (a.functionName ?? '').localeCompare(b.functionName ?? '');\n  if (nameCompare !== 0) {\n    return nameCompare;\n  }\n\n  if (a.lineNumber !== b.lineNumber) {\n    return a.lineNumber - b.lineNumber;\n  }\n\n  return a.columnNumber - b.columnNumber;\n}\n"]}