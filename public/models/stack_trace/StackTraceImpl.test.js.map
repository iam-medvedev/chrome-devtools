{"version":3,"file":"StackTraceImpl.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/stack_trace/StackTraceImpl.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,iBAAiB,EAAC,MAAM,oCAAoC,CAAC;AAErE,OAAO,KAAK,cAAc,MAAM,uBAAuB,CAAC;AAExD,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,MAAM,EAAC,YAAY,EAAC,GAAG,cAAc,CAAC,cAAc,CAAC;IAErD,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAEnE,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,IAAI,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YACpE,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAEpE,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {protocolCallFrame} from '../../testing/StackTraceHelpers.js';\n\nimport * as StackTraceImpl from './stack_trace_impl.js';\n\ndescribe('FragmentImpl', () => {\n  const {FragmentImpl} = StackTraceImpl.StackTraceImpl;\n\n  describe('getOrCreate', () => {\n    it('returns the same fragment for the same node', () => {\n      const trie = new StackTraceImpl.Trie.Trie();\n      const node = trie.insert([protocolCallFrame('foo.js:1:foo:1:10')]);\n\n      assert.strictEqual(FragmentImpl.getOrCreate(node), FragmentImpl.getOrCreate(node));\n    });\n\n    it('returns different fragments for different nodes', () => {\n      const trie = new StackTraceImpl.Trie.Trie();\n      const node1 = trie.insert([protocolCallFrame('foo.js:1:foo:1:10')]);\n      const node2 = trie.insert([protocolCallFrame('bar.js:2:bar:2:20')]);\n\n      assert.notStrictEqual(FragmentImpl.getOrCreate(node1), FragmentImpl.getOrCreate(node2));\n    });\n  });\n});\n"]}