{
  "version": 3,
  "sources": ["../../../../../../front_end/models/source_map_scopes/NamesResolver.ts", "../../../../../../front_end/models/source_map_scopes/ScopeTreeCache.ts", "../../../../../../front_end/models/source_map_scopes/ScopeChainModel.ts"],
  "sourcesContent": ["// Copyright 2022 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport * as Formatter from '../formatter/formatter.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\n\nimport {scopeTreeForScript} from './ScopeTreeCache.js';\n\ninterface CachedScopeMap {\n  sourceMap: SDK.SourceMap.SourceMap|undefined;\n  mappingPromise: Promise<{variableMapping: Map<string, string>, thisMapping: string|null}>;\n}\n\nconst scopeToCachedIdentifiersMap = new WeakMap<Formatter.FormatterWorkerPool.ScopeTreeNode, CachedScopeMap>();\nconst cachedMapByCallFrame = new WeakMap<SDK.DebuggerModel.CallFrame, Map<string, string|null>>();\n\nexport async function getTextFor(contentProvider: TextUtils.ContentProvider.ContentProvider):\n    Promise<TextUtils.Text.Text|null> {\n  const contentData = await contentProvider.requestContentData();\n  if (TextUtils.ContentData.ContentData.isError(contentData) || !contentData.isTextContent) {\n    return null;\n  }\n  return contentData.textObj;\n}\n\nexport class IdentifierPositions {\n  name: string;\n  positions: Array<{lineNumber: number, columnNumber: number}>;\n\n  constructor(name: string, positions: Array<{lineNumber: number, columnNumber: number}> = []) {\n    this.name = name;\n    this.positions = positions;\n  }\n\n  addPosition(lineNumber: number, columnNumber: number): void {\n    this.positions.push({lineNumber, columnNumber});\n  }\n}\n\nconst computeScopeTree = async function(script: SDK.Script.Script): Promise<{\nscopeTree:\n  Formatter.FormatterWorkerPool.ScopeTreeNode, text: TextUtils.Text.Text,\n}|null> {\n  if (!script.sourceMapURL) {\n    return null;\n  }\n\n  const text = await getTextFor(script);\n  if (!text) {\n    return null;\n  }\n\n  const scopeTree = await scopeTreeForScript(script);\n  if (!scopeTree) {\n    return null;\n  }\n  return {scopeTree, text};\n};\n\n/**\n * @returns the scope chain from outer-most to inner-most scope where the inner-most\n * scope either contains or matches the \"needle\".\n */\nconst findScopeChain = function(\n                           scopeTree: Formatter.FormatterWorkerPool.ScopeTreeNode,\n                           scopeNeedle: {start: number, end: number}): Formatter.FormatterWorkerPool.ScopeTreeNode[] {\n  if (!contains(scopeTree, scopeNeedle)) {\n    return [];\n  }\n\n  // Find the corresponding scope in the scope tree.\n  let containingScope = scopeTree;\n  const scopeChain = [scopeTree];\n  while (true) {\n    let childFound = false;\n    for (const child of containingScope.children) {\n      if (contains(child, scopeNeedle)) {\n        // We found a nested containing scope, continue with search there.\n        scopeChain.push(child);\n        containingScope = child;\n        childFound = true;\n        break;\n      }\n      // Sanity check: |scope| should not straddle any of the scopes in the tree. That is:\n      // Either |scope| is disjoint from |child| or |child| must be inside |scope|.\n      // (Or the |scope| is inside |child|, but that case is covered above.)\n      if (!disjoint(scopeNeedle, child) && !contains(scopeNeedle, child)) {\n        console.error('Wrong nesting of scopes');\n        return [];\n      }\n    }\n    if (!childFound) {\n      // We found the deepest scope in the tree that contains our scope chain entry.\n      break;\n    }\n  }\n\n  return scopeChain;\n\n  function contains(scope: {start: number, end: number}, candidate: {start: number, end: number}): boolean {\n    return (scope.start <= candidate.start) && (scope.end >= candidate.end);\n  }\n  function disjoint(scope: {start: number, end: number}, other: {start: number, end: number}): boolean {\n    return (scope.end <= other.start) || (other.end <= scope.start);\n  }\n};\n\nexport async function findScopeChainForDebuggerScope(scope: SDK.DebuggerModel.ScopeChainEntry):\n    Promise<Formatter.FormatterWorkerPool.ScopeTreeNode[]> {\n  const startLocation = scope.range()?.start;\n  const endLocation = scope.range()?.end;\n  if (!startLocation || !endLocation) {\n    return [];\n  }\n\n  const script = startLocation.script();\n  if (!script) {\n    return [];\n  }\n\n  const scopeTreeAndText = await computeScopeTree(script);\n  if (!scopeTreeAndText) {\n    return [];\n  }\n  const {scopeTree, text} = scopeTreeAndText;\n\n  // Compute the offset within the scope tree coordinate space.\n  const scopeOffsets = {\n    start: text.offsetFromPosition(startLocation.lineNumber, startLocation.columnNumber),\n    end: text.offsetFromPosition(endLocation.lineNumber, endLocation.columnNumber),\n  };\n\n  return findScopeChain(scopeTree, scopeOffsets);\n}\n\nexport const scopeIdentifiers = async function(\n    script: SDK.Script.Script, scope: Formatter.FormatterWorkerPool.ScopeTreeNode,\n    ancestorScopes: Formatter.FormatterWorkerPool.ScopeTreeNode[]): Promise<{\nfreeVariables:\n  IdentifierPositions[], boundVariables: IdentifierPositions[],\n}|null> {\n  const text = await getTextFor(script);\n  if (!text) {\n    return null;\n  }\n\n  // Now we have containing scope. Collect all the scope variables.\n  const boundVariables = [];\n  const cursor = new TextUtils.TextCursor.TextCursor(text.lineEndings());\n  for (const variable of scope.variables) {\n    // Skip the fixed-kind variable (i.e., 'this' or 'arguments') if we only found their \"definition\"\n    // without any uses.\n    if (variable.kind === Formatter.FormatterWorkerPool.DefinitionKind.FIXED && variable.offsets.length <= 1) {\n      continue;\n    }\n\n    const identifier = new IdentifierPositions(variable.name);\n    for (const offset of variable.offsets) {\n      cursor.resetTo(offset);\n      identifier.addPosition(cursor.lineNumber(), cursor.columnNumber());\n    }\n    boundVariables.push(identifier);\n  }\n\n  // Compute free variables by collecting all the ancestor variables that are used in |containingScope|.\n  const freeVariables = [];\n  for (const ancestor of ancestorScopes) {\n    for (const ancestorVariable of ancestor.variables) {\n      let identifier = null;\n      for (const offset of ancestorVariable.offsets) {\n        if (offset >= scope.start && offset < scope.end) {\n          if (!identifier) {\n            identifier = new IdentifierPositions(ancestorVariable.name);\n          }\n          cursor.resetTo(offset);\n          identifier.addPosition(cursor.lineNumber(), cursor.columnNumber());\n        }\n      }\n      if (identifier) {\n        freeVariables.push(identifier);\n      }\n    }\n  }\n  return {boundVariables, freeVariables};\n};\n\nconst identifierAndPunctuationRegExp = /^\\s*([A-Za-z_$][A-Za-z_$0-9]*)\\s*([.;,=]?)\\s*$/;\n\nconst enum Punctuation {\n  NONE = 'none',\n  COMMA = 'comma',\n  DOT = 'dot',\n  SEMICOLON = 'semicolon',\n  EQUALS = 'equals',\n}\n\nconst resolveDebuggerScope = async(scope: SDK.DebuggerModel.ScopeChainEntry):\n    Promise<{variableMapping: Map<string, string>, thisMapping: string | null}> => {\n      if (!Common.Settings.Settings.instance().moduleSetting('js-source-maps-enabled').get()) {\n        return {variableMapping: new Map(), thisMapping: null};\n      }\n      const script = scope.callFrame().script;\n      const scopeChain = await findScopeChainForDebuggerScope(scope);\n      return await resolveScope(script, scopeChain);\n    };\n\nconst resolveScope = async(script: SDK.Script.Script, scopeChain: Formatter.FormatterWorkerPool.ScopeTreeNode[]):\n    Promise<{variableMapping: Map<string, string>, thisMapping: string | null}> => {\n      const parsedScope = scopeChain[scopeChain.length - 1];\n      if (!parsedScope) {\n        return {variableMapping: new Map<string, string>(), thisMapping: null};\n      }\n      let cachedScopeMap = scopeToCachedIdentifiersMap.get(parsedScope);\n      const sourceMap = script.sourceMap();\n\n      if (!cachedScopeMap || cachedScopeMap.sourceMap !== sourceMap) {\n        const identifiersPromise =\n            (async () => {\n              const variableMapping = new Map<string, string>();\n              let thisMapping = null;\n\n              if (!sourceMap) {\n                return {variableMapping, thisMapping};\n              }\n              // Extract as much as possible from SourceMap and resolve\n              // missing identifier names from SourceMap ranges.\n              const promises: Array<Promise<void>> = [];\n\n              const resolveEntry = (id: IdentifierPositions, handler: (sourceName: string) => void): void => {\n                // First see if we have a source map entry with a name for the identifier.\n                for (const position of id.positions) {\n                  const entry = sourceMap.findEntry(position.lineNumber, position.columnNumber);\n                  if (entry?.name) {\n                    handler(entry.name);\n                    return;\n                  }\n                }\n                /** If there is no entry with the name field, try to infer the name from the source positions. **/\n                async function resolvePosition(): Promise<void> {\n                  if (!sourceMap) {\n                    return;\n                  }\n                  // Let us find the first non-empty mapping of |id| and return that. Ideally, we would\n                  // try to compute all the mappings and only use the mapping if all the non-empty\n                  // mappings agree. However, that can be expensive for identifiers with many uses,\n                  // so we iterate sequentially, stopping at the first non-empty mapping.\n                  for (const position of id.positions) {\n                    const sourceName = await resolveSourceName(script, sourceMap, id.name, position);\n                    if (sourceName) {\n                      handler(sourceName);\n                      return;\n                    }\n                  }\n                }\n                promises.push(resolvePosition());\n              };\n\n              const parsedVariables = await scopeIdentifiers(script, parsedScope, scopeChain.slice(0, -1));\n              if (!parsedVariables) {\n                return {variableMapping, thisMapping};\n              }\n              for (const id of parsedVariables.boundVariables) {\n                resolveEntry(id, sourceName => {\n                  // Let use ignore 'this' mappings - those are handled separately.\n                  if (sourceName !== 'this') {\n                    variableMapping.set(id.name, sourceName);\n                  }\n                });\n              }\n              for (const id of parsedVariables.freeVariables) {\n                resolveEntry(id, sourceName => {\n                  if (sourceName === 'this') {\n                    thisMapping = id.name;\n                  }\n                });\n              }\n              await Promise.all(promises).then(getScopeResolvedForTest());\n              return {variableMapping, thisMapping};\n            })();\n        cachedScopeMap = {sourceMap, mappingPromise: identifiersPromise};\n        scopeToCachedIdentifiersMap.set(parsedScope, {sourceMap, mappingPromise: identifiersPromise});\n      }\n      return await cachedScopeMap.mappingPromise;\n\n      async function resolveSourceName(\n          script: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap, name: string,\n          position: {lineNumber: number, columnNumber: number}): Promise<string|null> {\n        const ranges = sourceMap.findEntryRanges(position.lineNumber, position.columnNumber);\n        if (!ranges) {\n          return null;\n        }\n        // Extract the underlying text from the compiled code's range and make sure that\n        // it starts with the identifier |name|.\n        const uiSourceCode =\n            Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().uiSourceCodeForSourceMapSourceURL(\n                script.debuggerModel, ranges.sourceURL, script.isContentScript());\n        if (!uiSourceCode) {\n          return null;\n        }\n        const compiledText = await getTextFor(script);\n        if (!compiledText) {\n          return null;\n        }\n        const compiledToken = compiledText.extract(ranges.range);\n        const parsedCompiledToken = extractIdentifier(compiledToken);\n        if (!parsedCompiledToken) {\n          return null;\n        }\n        const {name: compiledName, punctuation: compiledPunctuation} = parsedCompiledToken;\n        if (compiledName !== name) {\n          return null;\n        }\n\n        // Extract the mapped name from the source code range and ensure that the punctuation\n        // matches the one from the compiled code.\n        const sourceText = await getTextFor(uiSourceCode);\n        if (!sourceText) {\n          return null;\n        }\n        const sourceToken = sourceText.extract(ranges.sourceRange);\n        const parsedSourceToken = extractIdentifier(sourceToken);\n        if (!parsedSourceToken) {\n          return null;\n        }\n        const {name: sourceName, punctuation: sourcePunctuation} = parsedSourceToken;\n        // Accept the source name if it is followed by the same punctuation.\n        if (compiledPunctuation === sourcePunctuation) {\n          return sourceName;\n        }\n        // Let us also allow semicolons into commas since that it is a common transformation.\n        if (compiledPunctuation === Punctuation.COMMA && sourcePunctuation === Punctuation.SEMICOLON) {\n          return sourceName;\n        }\n\n        return null;\n\n        function extractIdentifier(token: string): {name: string, punctuation: Punctuation}|null {\n          const match = token.match(identifierAndPunctuationRegExp);\n          if (!match) {\n            return null;\n          }\n\n          const name = match[1];\n          let punctuation: Punctuation|null = null;\n          switch (match[2]) {\n            case '.':\n              punctuation = Punctuation.DOT;\n              break;\n            case ',':\n              punctuation = Punctuation.COMMA;\n              break;\n            case ';':\n              punctuation = Punctuation.SEMICOLON;\n              break;\n            case '=':\n              punctuation = Punctuation.EQUALS;\n              break;\n            case '':\n              punctuation = Punctuation.NONE;\n              break;\n            default:\n              console.error(`Name token parsing error: unexpected token \"${match[2]}\"`);\n              return null;\n          }\n\n          return {name, punctuation};\n        }\n      }\n    };\n\nexport const resolveScopeChain =\n    async function(callFrame: SDK.DebuggerModel.CallFrame): Promise<SDK.DebuggerModel.ScopeChainEntry[]> {\n  const {pluginManager} = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n  let scopeChain: SDK.DebuggerModel.ScopeChainEntry[]|null|undefined = await pluginManager.resolveScopeChain(callFrame);\n  if (scopeChain) {\n    return scopeChain;\n  }\n\n  scopeChain = callFrame.script.sourceMap()?.resolveScopeChain(callFrame);\n  if (scopeChain) {\n    return scopeChain;\n  }\n\n  if (callFrame.script.isWasm()) {\n    return callFrame.scopeChain();\n  }\n  const thisObject = await resolveThisObject(callFrame);\n  return callFrame.scopeChain().map(scope => new ScopeWithSourceMappedVariables(scope, thisObject));\n};\n\n/**\n * @returns A mapping from original name -> compiled name. If the orignal name is unavailable (e.g. because the compiled name was\n * shadowed) we set it to `null`.\n */\nexport const allVariablesInCallFrame =\n    async(callFrame: SDK.DebuggerModel.CallFrame): Promise<Map<string, string|null>> => {\n  if (!Common.Settings.Settings.instance().moduleSetting('js-source-maps-enabled').get()) {\n    return new Map<string, string|null>();\n  }\n  const cachedMap = cachedMapByCallFrame.get(callFrame);\n  if (cachedMap) {\n    return cachedMap;\n  }\n\n  const scopeChain = callFrame.scopeChain();\n  const nameMappings = await Promise.all(scopeChain.map(resolveDebuggerScope));\n  const reverseMapping = new Map<string, string|null>();\n  const compiledNames = new Set<string>();\n  for (const {variableMapping} of nameMappings) {\n    for (const [compiledName, originalName] of variableMapping) {\n      if (!originalName) {\n        continue;\n      }\n      if (!reverseMapping.has(originalName)) {\n        // An inner scope might have shadowed {compiledName}. Mark it as \"unavailable\" in that case.\n        const compiledNameOrNull = compiledNames.has(compiledName) ? null : compiledName;\n        reverseMapping.set(originalName, compiledNameOrNull);\n      }\n      compiledNames.add(compiledName);\n    }\n  }\n  cachedMapByCallFrame.set(callFrame, reverseMapping);\n  return reverseMapping;\n};\n\n/**\n * @returns A mapping from original name -> compiled name. If the orignal name is unavailable (e.g. because the compiled name was\n * shadowed) we set it to `null`.\n */\nexport const allVariablesAtPosition =\n    async(location: SDK.DebuggerModel.Location): Promise<Map<string, string|null>> => {\n  const reverseMapping = new Map<string, string|null>();\n  if (!Common.Settings.Settings.instance().moduleSetting('js-source-maps-enabled').get()) {\n    return reverseMapping;\n  }\n  const script = location.script();\n  if (!script) {\n    return reverseMapping;\n  }\n\n  const scopeTreeAndText = await computeScopeTree(script);\n  if (!scopeTreeAndText) {\n    return reverseMapping;\n  }\n\n  const {scopeTree, text} = scopeTreeAndText;\n  const locationOffset = text.offsetFromPosition(location.lineNumber, location.columnNumber);\n  const scopeChain = findScopeChain(scopeTree, {start: locationOffset, end: locationOffset});\n  const compiledNames = new Set<string>();\n\n  while (scopeChain.length > 0) {\n    const {variableMapping} = await resolveScope(script, scopeChain);\n    for (const [compiledName, originalName] of variableMapping) {\n      if (!originalName) {\n        continue;\n      }\n      if (!reverseMapping.has(originalName)) {\n        // An inner scope might have shadowed {compiledName}. Mark it as \"unavailable\" in that case.\n        const compiledNameOrNull = compiledNames.has(compiledName) ? null : compiledName;\n        reverseMapping.set(originalName, compiledNameOrNull);\n      }\n      compiledNames.add(compiledName);\n    }\n    scopeChain.pop();\n  }\n  return reverseMapping;\n};\n\nexport const resolveThisObject =\n    async(callFrame: SDK.DebuggerModel.CallFrame): Promise<SDK.RemoteObject.RemoteObject|null> => {\n  const scopeChain = callFrame.scopeChain();\n  if (scopeChain.length === 0) {\n    return callFrame.thisObject();\n  }\n\n  const {thisMapping} = await resolveDebuggerScope(scopeChain[0]);\n  if (!thisMapping) {\n    return callFrame.thisObject();\n  }\n\n  const result = await callFrame.evaluate(({\n    expression: thisMapping,\n    objectGroup: 'backtrace',\n    includeCommandLineAPI: false,\n    silent: true,\n    returnByValue: false,\n    generatePreview: true,\n  }));\n  if ('exceptionDetails' in result) {\n    return !result.exceptionDetails && result.object ? result.object : callFrame.thisObject();\n  }\n  return null;\n};\n\nexport const resolveScopeInObject = function(scope: SDK.DebuggerModel.ScopeChainEntry): SDK.RemoteObject.RemoteObject {\n  const endLocation = scope.range()?.end;\n  const startLocationScript = scope.range()?.start.script() ?? null;\n\n  if (scope.type() === Protocol.Debugger.ScopeType.Global || !startLocationScript || !endLocation ||\n      !startLocationScript.sourceMapURL) {\n    return scope.object();\n  }\n\n  return new RemoteObject(scope);\n};\n\n/**\n * Wraps a debugger `Scope` but returns a scope object where variable names are\n * mapped to their authored name.\n *\n * This implementation does not utilize source map \"Scopes\" information but obtains\n * original variable names via parsing + mappings + names.\n */\nclass ScopeWithSourceMappedVariables implements SDK.DebuggerModel.ScopeChainEntry {\n  readonly #debuggerScope: SDK.DebuggerModel.ScopeChainEntry;\n  /** The resolved `this` of the current call frame */\n  readonly #thisObject: SDK.RemoteObject.RemoteObject|null;\n\n  constructor(scope: SDK.DebuggerModel.ScopeChainEntry, thisObject: SDK.RemoteObject.RemoteObject|null) {\n    this.#debuggerScope = scope;\n    this.#thisObject = thisObject;\n  }\n\n  callFrame(): SDK.DebuggerModel.CallFrame {\n    return this.#debuggerScope.callFrame();\n  }\n\n  type(): string {\n    return this.#debuggerScope.type();\n  }\n\n  typeName(): string {\n    return this.#debuggerScope.typeName();\n  }\n\n  name(): string|undefined {\n    return this.#debuggerScope.name();\n  }\n\n  range(): SDK.DebuggerModel.LocationRange|null {\n    return this.#debuggerScope.range();\n  }\n\n  object(): SDK.RemoteObject.RemoteObject {\n    return resolveScopeInObject(this.#debuggerScope);\n  }\n\n  description(): string {\n    return this.#debuggerScope.description();\n  }\n\n  icon(): string|undefined {\n    return this.#debuggerScope.icon();\n  }\n\n  extraProperties(): SDK.RemoteObject.RemoteObjectProperty[] {\n    const extraProperties = this.#debuggerScope.extraProperties();\n    if (this.#thisObject && this.type() === Protocol.Debugger.ScopeType.Local) {\n      extraProperties.unshift(new SDK.RemoteObject.RemoteObjectProperty(\n          'this', this.#thisObject, undefined, undefined, undefined, undefined, undefined, /* synthetic */ true));\n    }\n    return extraProperties;\n  }\n}\n\nexport class RemoteObject extends SDK.RemoteObject.RemoteObject {\n  private readonly scope: SDK.DebuggerModel.ScopeChainEntry;\n  private readonly object: SDK.RemoteObject.RemoteObject;\n  constructor(scope: SDK.DebuggerModel.ScopeChainEntry) {\n    super();\n    this.scope = scope;\n    this.object = scope.object();\n  }\n\n  override customPreview(): Protocol.Runtime.CustomPreview|null {\n    return this.object.customPreview();\n  }\n\n  override get objectId(): Protocol.Runtime.RemoteObjectId|undefined {\n    return this.object.objectId;\n  }\n\n  override get type(): string {\n    return this.object.type;\n  }\n\n  override get subtype(): string|undefined {\n    return this.object.subtype;\n  }\n\n  override get value(): typeof this.object.value {\n    return this.object.value;\n  }\n\n  override get description(): string|undefined {\n    return this.object.description;\n  }\n\n  override get hasChildren(): boolean {\n    return this.object.hasChildren;\n  }\n\n  override get preview(): Protocol.Runtime.ObjectPreview|undefined {\n    return this.object.preview;\n  }\n\n  override arrayLength(): number {\n    return this.object.arrayLength();\n  }\n\n  override getOwnProperties(generatePreview: boolean): Promise<SDK.RemoteObject.GetPropertiesResult> {\n    return this.object.getOwnProperties(generatePreview);\n  }\n\n  override async getAllProperties(accessorPropertiesOnly: boolean, generatePreview: boolean):\n      Promise<SDK.RemoteObject.GetPropertiesResult> {\n    const allProperties = await this.object.getAllProperties(accessorPropertiesOnly, generatePreview);\n    const {variableMapping} = await resolveDebuggerScope(this.scope);\n\n    const properties = allProperties.properties;\n    const internalProperties = allProperties.internalProperties;\n    const newProperties = properties?.map(property => {\n      const name = variableMapping.get(property.name);\n      return name !== undefined ? property.cloneWithNewName(name) : property;\n    });\n    return {properties: newProperties ?? [], internalProperties};\n  }\n\n  override async setPropertyValue(argumentName: string|Protocol.Runtime.CallArgument, value: string):\n      Promise<string|undefined> {\n    const {variableMapping} = await resolveDebuggerScope(this.scope);\n\n    let name;\n    if (typeof argumentName === 'string') {\n      name = argumentName;\n    } else {\n      name = (argumentName.value as string);\n    }\n\n    let actualName: string = name;\n    for (const compiledName of variableMapping.keys()) {\n      if (variableMapping.get(compiledName) === name) {\n        actualName = compiledName;\n        break;\n      }\n    }\n    return await this.object.setPropertyValue(actualName, value);\n  }\n\n  override async deleteProperty(name: Protocol.Runtime.CallArgument): Promise<string|undefined> {\n    return await this.object.deleteProperty(name);\n  }\n\n  override callFunction<T, U>(\n      functionDeclaration: (this: U, ...args: any[]) => T,\n      args?: Protocol.Runtime.CallArgument[]): Promise<SDK.RemoteObject.CallFunctionResult> {\n    return this.object.callFunction(functionDeclaration, args);\n  }\n\n  override callFunctionJSON<T, U>(\n      functionDeclaration: (this: U, ...args: any[]) => T, args?: Protocol.Runtime.CallArgument[]): Promise<T|null> {\n    return this.object.callFunctionJSON(functionDeclaration, args);\n  }\n\n  override release(): void {\n    this.object.release();\n  }\n\n  override debuggerModel(): SDK.DebuggerModel.DebuggerModel {\n    return this.object.debuggerModel();\n  }\n\n  override runtimeModel(): SDK.RuntimeModel.RuntimeModel {\n    return this.object.runtimeModel();\n  }\n\n  override isNode(): boolean {\n    return this.object.isNode();\n  }\n}\n\n/**\n * Resolve the frame's function name using the name associated with the opening\n * paren that starts the scope. If there is no name associated with the scope\n * start or if the function scope does not start with a left paren (e.g., arrow\n * function with one parameter), the resolution returns null.\n **/\nasync function getFunctionNameFromScopeStart(\n    script: SDK.Script.Script, lineNumber: number, columnNumber: number): Promise<string|null> {\n  // To reduce the overhead of resolving function names,\n  // we check for source maps first and immediately leave\n  // this function if the script doesn't have a sourcemap.\n  const sourceMap = script.sourceMap();\n  if (!sourceMap) {\n    return null;\n  }\n\n  const scopeName = sourceMap.findOriginalFunctionName({line: lineNumber, column: columnNumber});\n  if (scopeName !== null) {\n    return scopeName;\n  }\n\n  const mappingEntry = sourceMap.findEntry(lineNumber, columnNumber);\n  if (!mappingEntry?.sourceURL) {\n    return null;\n  }\n\n  const name = mappingEntry.name;\n  if (!name) {\n    return null;\n  }\n\n  const text = await getTextFor(script);\n  if (!text) {\n    return null;\n  }\n\n  const openRange = new TextUtils.TextRange.TextRange(lineNumber, columnNumber, lineNumber, columnNumber + 1);\n\n  if (text.extract(openRange) !== '(') {\n    return null;\n  }\n\n  return name;\n}\n\nexport async function resolveDebuggerFrameFunctionName(frame: SDK.DebuggerModel.CallFrame): Promise<string|null> {\n  const startLocation = frame.localScope()?.range()?.start;\n  if (!startLocation) {\n    return null;\n  }\n  return await getFunctionNameFromScopeStart(frame.script, startLocation.lineNumber, startLocation.columnNumber);\n}\n\nexport async function resolveProfileFrameFunctionName(\n    {scriptId, lineNumber, columnNumber}: Partial<Protocol.Runtime.CallFrame>,\n    target: SDK.Target.Target|null): Promise<string|null> {\n  if (!target || lineNumber === undefined || columnNumber === undefined || scriptId === undefined) {\n    return null;\n  }\n  const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n  const script = debuggerModel?.scriptForId(String(scriptId));\n\n  if (!debuggerModel || !script) {\n    return null;\n  }\n\n  const debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n  const location = new SDK.DebuggerModel.Location(debuggerModel, scriptId, lineNumber, columnNumber);\n  const functionInfoFromPlugin = await debuggerWorkspaceBinding.pluginManager.getFunctionInfo(script, location);\n  if (functionInfoFromPlugin && 'frames' in functionInfoFromPlugin) {\n    const last = functionInfoFromPlugin.frames.at(-1);\n    if (last?.name) {\n      return last.name;\n    }\n  }\n  return await getFunctionNameFromScopeStart(script, lineNumber, columnNumber);\n}\n\nlet scopeResolvedForTest: (...arg0: unknown[]) => void = function(): void {};\n\nexport const getScopeResolvedForTest = (): (...arg0: unknown[]) => void => {\n  return scopeResolvedForTest;\n};\n\nexport const setScopeResolvedForTest = (scope: (...arg0: unknown[]) => void): void => {\n  scopeResolvedForTest = scope;\n};\n", "// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Formatter from '../formatter/formatter.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\n\ntype ScopeTreeNode = Formatter.FormatterWorkerPool.ScopeTreeNode;\n\n/** If a script failed to parse, we stash null in order to prevent unnecessary re-parsing */\nconst scopeTrees = new WeakMap<SDK.Script.Script, Promise<ScopeTreeNode|null>>();\n\n/**\n * Computes and caches the scope tree for `script`.\n *\n * We use {@link SDK.Script.Script} as a key to uniquely identify scripts.\n * {@link SDK.Script.Script} boils down to \"target\" + \"script ID\". This\n * duplicates work in case of identitical script running on multiple targets\n * (e.g. workers).\n */\nexport function scopeTreeForScript(script: SDK.Script.Script): Promise<ScopeTreeNode|null> {\n  let promise = scopeTrees.get(script);\n  if (promise === undefined) {\n    promise = script.requestContentData().then(content => {\n      if (TextUtils.ContentData.ContentData.isError(content)) {\n        return null;\n      }\n\n      const sourceType = script.isModule ? 'module' : 'script';\n      return Formatter.FormatterWorkerPool.formatterWorkerPool()\n          .javaScriptScopeTree(content.text, sourceType)\n          .catch(() => null);\n    });\n    scopeTrees.set(script, promise);\n  }\n  // We intentionally return `null` here if the script already failed to parse once.\n  return promise;\n}\n", "// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nimport {resolveScopeChain} from './NamesResolver.js';\n\n/**\n * This class is responsible for resolving / updating the scope chain for a specific {@link SDK.DebuggerModel.CallFrame}\n * instance.\n *\n * There are several sources that can influence the scope view:\n *   - Debugger plugins can provide the whole scope info (e.g. from DWARF)\n *   - Source Maps can provide OR augment scope info\n *\n * Source maps can be enabled/disabled dynamically and debugger plugins can attach debug info after the fact.\n *\n * This class tracks all that and sends events with the latest scope chain for a specific call frame.\n */\nexport class ScopeChainModel extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #callFrame: SDK.DebuggerModel.CallFrame;\n\n  /** We use the `Throttler` here to make sure that `#boundUpdate` is not run multiple times simultanously */\n  readonly #throttler = new Common.Throttler.Throttler(5);\n  readonly #boundUpdate = this.#update.bind(this);\n\n  constructor(callFrame: SDK.DebuggerModel.CallFrame) {\n    super();\n    this.#callFrame = callFrame;\n    this.#callFrame.debuggerModel.addEventListener(\n        SDK.DebuggerModel.Events.DebugInfoAttached, this.#debugInfoAttached, this);\n    this.#callFrame.debuggerModel.sourceMapManager().addEventListener(\n        SDK.SourceMapManager.Events.SourceMapAttached, this.#sourceMapAttached, this);\n\n    void this.#throttler.schedule(this.#boundUpdate);\n  }\n\n  dispose(): void {\n    this.#callFrame.debuggerModel.removeEventListener(\n        SDK.DebuggerModel.Events.DebugInfoAttached, this.#debugInfoAttached, this);\n    this.#callFrame.debuggerModel.sourceMapManager().removeEventListener(\n        SDK.SourceMapManager.Events.SourceMapAttached, this.#sourceMapAttached, this);\n    this.listeners?.clear();\n  }\n\n  async #update(): Promise<void> {\n    const scopeChain = await resolveScopeChain(this.#callFrame);\n    this.dispatchEventToListeners(Events.SCOPE_CHAIN_UPDATED, new ScopeChain(scopeChain));\n  }\n\n  #debugInfoAttached(event: Common.EventTarget.EventTargetEvent<SDK.Script.Script>): void {\n    if (event.data === this.#callFrame.script) {\n      void this.#throttler.schedule(this.#boundUpdate);\n    }\n  }\n\n  #sourceMapAttached(event: Common.EventTarget\n                         .EventTargetEvent<{client: SDK.Script.Script, sourceMap: SDK.SourceMap.SourceMap}>): void {\n    if (event.data.client === this.#callFrame.script) {\n      void this.#throttler.schedule(this.#boundUpdate);\n    }\n  }\n}\n\nexport const enum Events {\n  SCOPE_CHAIN_UPDATED = 'ScopeChainUpdated',\n}\n\nexport interface EventTypes {\n  [Events.SCOPE_CHAIN_UPDATED]: ScopeChain;\n}\n\n/**\n * A scope chain ready to be shown in the UI with debugging info applied.\n */\nexport class ScopeChain {\n  readonly scopeChain: SDK.DebuggerModel.ScopeChainEntry[];\n\n  constructor(scopeChain: SDK.DebuggerModel.ScopeChainEntry[]) {\n    this.scopeChain = scopeChain;\n  }\n}\n"],
  "mappings": "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",
  "names": ["RemoteObject", "Formatter", "TextUtils", "script", "sourceMap", "name", "RemoteObject", "Common", "SDK"]
}
