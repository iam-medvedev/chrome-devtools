{"version":3,"file":"ScopeChainModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/source_map_scopes/ScopeChainModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\n\nimport * as SourceMapScopes from './source_map_scopes.js';\n\ndescribeWithMockConnection('ScopeChainModel', () => {\n  let clock: sinon.SinonFakeTimers;\n  let stubPluginManager: sinon.SinonStubbedInstance<Bindings.DebuggerLanguagePlugins.DebuggerLanguagePluginManager>;\n\n  beforeEach(() => {\n    clock = sinon.useFakeTimers();\n\n    const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    const resourceMapping = new Bindings.ResourceMapping.ResourceMapping(targetManager, workspace);\n    const debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance({\n      forceNew: true,\n      resourceMapping,\n      targetManager,\n    });\n    Bindings.IgnoreListManager.IgnoreListManager.instance({forceNew: true, debuggerWorkspaceBinding});\n\n    stubPluginManager = sinon.createStubInstance(\n        Bindings.DebuggerLanguagePlugins.DebuggerLanguagePluginManager, {resolveScopeChain: Promise.resolve(null)});\n    sinon.stub(debuggerWorkspaceBinding, 'pluginManager').value(stubPluginManager);\n  });\n\n  afterEach(() => {\n    clock.restore();\n  });\n\n  it('emits an event after it was constructed with the scope chain', async () => {\n    const target = createTarget();\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel)!;\n    const fakeFrame = sinon.createStubInstance(SDK.DebuggerModel.CallFrame);\n    fakeFrame.debuggerModel = debuggerModel;\n    // @ts-ignore readonly for test.\n    fakeFrame.script = sinon.createStubInstance(SDK.Script.Script, {isWasm: false});\n    fakeFrame.scopeChain.returns([]);\n\n    const scopeChainModel = new SourceMapScopes.ScopeChainModel.ScopeChainModel(fakeFrame);\n    const listenerStub = sinon.stub();\n    scopeChainModel.addEventListener(SourceMapScopes.ScopeChainModel.Events.ScopeChainUpdated, listenerStub);\n\n    await clock.tickAsync(10);\n\n    assert.isTrue(listenerStub.calledOnce);\n  });\n\n  it('does not emit an event after it was disposed even with an update still in-flight', async () => {\n    // Stub out the pluginManagers `resolveScopeChain` with a promise that we control.\n    const {promise, resolve} = Platform.PromiseUtilities.promiseWithResolvers<null>();\n    stubPluginManager.resolveScopeChain.returns(promise);\n\n    const target = createTarget();\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel)!;\n    const fakeFrame = sinon.createStubInstance(SDK.DebuggerModel.CallFrame);\n    fakeFrame.debuggerModel = debuggerModel;\n    // @ts-ignore readonly for test.\n    fakeFrame.script = sinon.createStubInstance(SDK.Script.Script, {isWasm: false});\n\n    fakeFrame.scopeChain.returns([]);\n\n    const scopeChainModel = new SourceMapScopes.ScopeChainModel.ScopeChainModel(fakeFrame);\n    const listenerStub = sinon.stub();\n    scopeChainModel.addEventListener(SourceMapScopes.ScopeChainModel.Events.ScopeChainUpdated, listenerStub);\n\n    await clock.tickAsync(10);\n\n    assert.isTrue(stubPluginManager.resolveScopeChain.calledOnce);\n    assert.isFalse(listenerStub.calledOnce);\n\n    scopeChainModel.dispose();\n    resolve(null);\n    await clock.tickAsync(10);\n\n    assert.isFalse(listenerStub.calledOnce);\n  });\n});\n"]}