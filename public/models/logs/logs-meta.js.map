{
  "version": 3,
  "sources": ["logs-meta.prebundle.ts"],
  "sourcesContent": ["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\n\nconst UIStrings = {\n  /**\n   * @description Text to preserve the log after refreshing\n   */\n  preserveLog: 'Preserve log',\n  /**\n   * @description A term that can be used to search in the command menu, and will find the search\n   * result 'Preserve log on page reload / navigation'. This is an additional search term to help\n   * user find the setting even when they don't know the exact name of it.\n   */\n  preserve: 'preserve',\n  /**\n   * @description A term that can be used to search in the command menu, and will find the search\n   * result 'Preserve log on page reload / navigation'. This is an additional search term to help\n   * user find the setting even when they don't know the exact name of it.\n   */\n  clear: 'clear',\n  /**\n   * @description A term that can be used to search in the command menu, and will find the search\n   * result 'Preserve log on page reload / navigation'. This is an additional search term to help\n   * user find the setting even when they don't know the exact name of it.\n   */\n  reset: 'reset',\n  /**\n   * @description Title of a setting under the Network category that can be invoked through the Command Menu\n   */\n  preserveLogOnPageReload: 'Preserve log on page reload / navigation',\n  /**\n   * @description Title of a setting under the Network category that can be invoked through the Command Menu\n   */\n  doNotPreserveLogOnPageReload: 'Do not preserve log on page reload / navigation',\n  /**\n   * @description Title of an action in the network tool to toggle recording\n   */\n  recordNetworkLog: 'Record network log',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/logs/logs-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nCommon.Settings.registerSettingExtension({\n  category: Common.Settings.SettingCategory.NETWORK,\n  title: i18nLazyString(UIStrings.preserveLog),\n  settingName: 'network-log.preserve-log',\n  settingType: Common.Settings.SettingType.BOOLEAN,\n  defaultValue: false,\n  tags: [\n    i18nLazyString(UIStrings.preserve),\n    i18nLazyString(UIStrings.clear),\n    i18nLazyString(UIStrings.reset),\n  ],\n  options: [\n    {\n      value: true,\n      title: i18nLazyString(UIStrings.preserveLogOnPageReload),\n    },\n    {\n      value: false,\n      title: i18nLazyString(UIStrings.doNotPreserveLogOnPageReload),\n    },\n  ],\n});\n\nCommon.Settings.registerSettingExtension({\n  category: Common.Settings.SettingCategory.NETWORK,\n  title: i18nLazyString(UIStrings.recordNetworkLog),\n  settingName: 'network-log.record-log',\n  settingType: Common.Settings.SettingType.BOOLEAN,\n  defaultValue: true,\n  storageType: Common.Settings.SettingStorageType.SESSION,\n});\n"],
  "mappings": ";AAIA,YAAY,YAAY;AACxB,YAAY,UAAU;AAEtB,IAAM,YAAY;;;;EAIhB,aAAa;;;;;;EAMb,UAAU;;;;;;EAMV,OAAO;;;;;;EAMP,OAAO;;;;EAIP,yBAAyB;;;;EAIzB,8BAA8B;;;;EAI9B,kBAAkB;;AAEpB,IAAM,OAAY,UAAK,kBAAkB,4BAA4B,SAAS;AAC9E,IAAM,iBAAsB,UAAK,iCAAiC,KAAK,QAAW,IAAI;AAE/E,gBAAS,yBAAyB;EACvC,UAAQ;EACR,OAAO,eAAe,UAAU,WAAW;EAC3C,aAAa;EACb,aAAW;EACX,cAAc;EACd,MAAM;IACJ,eAAe,UAAU,QAAQ;IACjC,eAAe,UAAU,KAAK;IAC9B,eAAe,UAAU,KAAK;;EAEhC,SAAS;IACP;MACE,OAAO;MACP,OAAO,eAAe,UAAU,uBAAuB;;IAEzD;MACE,OAAO;MACP,OAAO,eAAe,UAAU,4BAA4B;;;CAGjE;AAEM,gBAAS,yBAAyB;EACvC,UAAQ;EACR,OAAO,eAAe,UAAU,gBAAgB;EAChD,aAAa;EACb,aAAW;EACX,cAAc;EACd,aAAW;CACZ;",
  "names": []
}
