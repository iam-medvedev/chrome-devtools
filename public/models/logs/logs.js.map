{
  "version": 3,
  "sources": ["../../../../../../front_end/models/logs/LogManager.ts", "../../../../../../front_end/models/logs/NetworkLog.ts", "../../../../../../front_end/models/logs/RequestResolver.ts"],
  "sourcesContent": ["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {NetworkLog} from './NetworkLog.js';\n\nconst modelToEventListeners = new WeakMap<SDK.LogModel.LogModel, Common.EventTarget.EventDescriptor[]>();\n\nlet instance: LogManager|null = null;\n\nexport class LogManager implements SDK.TargetManager.SDKModelObserver<SDK.LogModel.LogModel> {\n  private constructor() {\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.LogModel.LogModel, this);\n  }\n\n  static instance({forceNew}: {forceNew: boolean} = {forceNew: false}): LogManager {\n    if (!instance || forceNew) {\n      instance = new LogManager();\n    }\n\n    return instance;\n  }\n\n  modelAdded(logModel: SDK.LogModel.LogModel): void {\n    const eventListeners = [];\n    eventListeners.push(logModel.addEventListener(SDK.LogModel.Events.ENTRY_ADDED, this.logEntryAdded, this));\n    modelToEventListeners.set(logModel, eventListeners);\n  }\n\n  modelRemoved(logModel: SDK.LogModel.LogModel): void {\n    const eventListeners = modelToEventListeners.get(logModel);\n    if (eventListeners) {\n      Common.EventTarget.removeEventListeners(eventListeners);\n    }\n  }\n\n  private logEntryAdded(event: Common.EventTarget.EventTargetEvent<SDK.LogModel.EntryAddedEvent>): void {\n    const {logModel, entry} = event.data;\n    const target = logModel.target();\n    const details = {\n      url: entry.url as Platform.DevToolsPath.UrlString,\n      line: entry.lineNumber,\n      parameters: [entry.text, ...(entry.args ?? [])],\n      stackTrace: entry.stackTrace,\n      timestamp: entry.timestamp,\n      workerId: entry.workerId,\n      category: entry.category,\n      affectedResources: entry.networkRequestId ? {requestId: entry.networkRequestId} : undefined,\n    };\n    const consoleMessage = new SDK.ConsoleModel.ConsoleMessage(\n        target.model(SDK.RuntimeModel.RuntimeModel), entry.source, entry.level, entry.text, details);\n\n    if (entry.networkRequestId) {\n      NetworkLog.instance().associateConsoleMessageWithRequest(consoleMessage, entry.networkRequestId);\n    }\n\n    const consoleModel = target.model(SDK.ConsoleModel.ConsoleModel);\n    if (consoleMessage.source === Protocol.Log.LogEntrySource.Worker) {\n      const workerId = consoleMessage.workerId || '';\n      // We have a copy of worker messages reported through the page, so that\n      // user can see messages from the worker which has been already destroyed.\n      // When opening DevTools, give us some time to connect to the worker and\n      // not report the message twice if the worker is still alive.\n      if (SDK.TargetManager.TargetManager.instance().targetById(workerId)) {\n        return;\n      }\n      window.setTimeout(() => {\n        if (!SDK.TargetManager.TargetManager.instance().targetById(workerId)) {\n          consoleModel?.addMessage(consoleMessage);\n        }\n      }, 1000);\n    } else {\n      consoleModel?.addMessage(consoleMessage);\n    }\n  }\n}\n", "/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nconst UIStrings = {\n  /**\n   * @description When DevTools doesn't know the URL that initiated a network request, we\n   * show this phrase instead. 'unknown' would also work in this context.\n   */\n  anonymous: '<anonymous>',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('models/logs/NetworkLog.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet networkLogInstance: NetworkLog|undefined;\n\nexport class NetworkLog extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDK.TargetManager.SDKModelObserver<SDK.NetworkManager.NetworkManager> {\n  #requests: SDK.NetworkRequest.NetworkRequest[] = [];\n  #sentNetworkRequests: Protocol.Network.Request[] = [];\n  #receivedNetworkResponses: Protocol.Network.Response[] = [];\n  #requestsSet = new Set<SDK.NetworkRequest.NetworkRequest>();\n  readonly #requestsMap = new Map<string, SDK.NetworkRequest.NetworkRequest[]>();\n  readonly #pageLoadForManager = new Map<SDK.NetworkManager.NetworkManager, SDK.PageLoad.PageLoad>();\n  readonly #unresolvedPreflightRequests = new Map<string, SDK.NetworkRequest.NetworkRequest>();\n  readonly #modelListeners = new WeakMap<SDK.NetworkManager.NetworkManager, Common.EventTarget.EventDescriptor[]>();\n  readonly #initiatorData = new WeakMap<SDK.NetworkRequest.NetworkRequest, InitiatorData>();\n  #isRecording = true;\n\n  constructor() {\n    super();\n\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.NetworkManager.NetworkManager, this);\n    const recordLogSetting: Common.Settings.Setting<boolean> =\n        Common.Settings.Settings.instance().moduleSetting('network-log.record-log');\n    recordLogSetting.addChangeListener(() => {\n      const preserveLogSetting = Common.Settings.Settings.instance().moduleSetting('network-log.preserve-log');\n      if (!preserveLogSetting.get() && recordLogSetting.get()) {\n        this.reset(true);\n      }\n      this.setIsRecording((recordLogSetting.get()));\n    }, this);\n  }\n\n  static instance(): NetworkLog {\n    if (!networkLogInstance) {\n      networkLogInstance = new NetworkLog();\n    }\n    return networkLogInstance;\n  }\n\n  static removeInstance(): void {\n    networkLogInstance = undefined;\n  }\n\n  modelAdded(networkManager: SDK.NetworkManager.NetworkManager): void {\n    const eventListeners = [];\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestStarted, this.onRequestStarted, this));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestUpdated, this.onRequestUpdated, this));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestRedirected, this.onRequestRedirect, this));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.RequestFinished, this.onRequestUpdated, this));\n    eventListeners.push(networkManager.addEventListener(\n        SDK.NetworkManager.Events.MessageGenerated, this.networkMessageGenerated.bind(this, networkManager)));\n    eventListeners.push(\n        networkManager.addEventListener(SDK.NetworkManager.Events.ResponseReceived, this.onResponseReceived, this));\n\n    const resourceTreeModel = networkManager.target().model(SDK.ResourceTreeModel.ResourceTreeModel);\n    if (resourceTreeModel) {\n      eventListeners.push(\n          resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.WillReloadPage, this.willReloadPage, this));\n      eventListeners.push(resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.PrimaryPageChanged, this.onPrimaryPageChanged, this));\n      eventListeners.push(resourceTreeModel.addEventListener(SDK.ResourceTreeModel.Events.Load, this.onLoad, this));\n      eventListeners.push(resourceTreeModel.addEventListener(\n          SDK.ResourceTreeModel.Events.DOMContentLoaded, this.onDOMContentLoaded.bind(this, resourceTreeModel)));\n    }\n\n    this.#modelListeners.set(networkManager, eventListeners);\n  }\n\n  modelRemoved(networkManager: SDK.NetworkManager.NetworkManager): void {\n    this.removeNetworkManagerListeners(networkManager);\n  }\n\n  private removeNetworkManagerListeners(networkManager: SDK.NetworkManager.NetworkManager): void {\n    Common.EventTarget.removeEventListeners(this.#modelListeners.get(networkManager) || []);\n  }\n\n  setIsRecording(enabled: boolean): void {\n    if (this.#isRecording === enabled) {\n      return;\n    }\n    this.#isRecording = enabled;\n    if (enabled) {\n      SDK.TargetManager.TargetManager.instance().observeModels(SDK.NetworkManager.NetworkManager, this);\n    } else {\n      SDK.TargetManager.TargetManager.instance().unobserveModels(SDK.NetworkManager.NetworkManager, this);\n      SDK.TargetManager.TargetManager.instance()\n          .models(SDK.NetworkManager.NetworkManager)\n          .forEach(this.removeNetworkManagerListeners.bind(this));\n    }\n  }\n\n  requestForURL(url: Platform.DevToolsPath.UrlString): SDK.NetworkRequest.NetworkRequest|null {\n    return this.#requests.find(request => request.url() === url) || null;\n  }\n\n  originalRequestForURL(url: Platform.DevToolsPath.UrlString): Protocol.Network.Request|null {\n    return this.#sentNetworkRequests.find(request => request.url === url) || null;\n  }\n\n  originalResponseForURL(url: Platform.DevToolsPath.UrlString): Protocol.Network.Response|null {\n    return this.#receivedNetworkResponses.find(response => response.url === url) || null;\n  }\n\n  requests(): SDK.NetworkRequest.NetworkRequest[] {\n    return this.#requests;\n  }\n\n  requestByManagerAndId(networkManager: SDK.NetworkManager.NetworkManager, requestId: string):\n      SDK.NetworkRequest.NetworkRequest|null {\n    // We iterate backwards because the last item will likely be the one needed for console network request lookups.\n    for (let i = this.#requests.length - 1; i >= 0; i--) {\n      const request = this.#requests[i];\n      if (requestId === request.requestId() &&\n          networkManager === SDK.NetworkManager.NetworkManager.forRequest(request)) {\n        return request;\n      }\n    }\n    return null;\n  }\n\n  private requestByManagerAndURL(\n      networkManager: SDK.NetworkManager.NetworkManager,\n      url: Platform.DevToolsPath.UrlString): SDK.NetworkRequest.NetworkRequest|null {\n    for (const request of this.#requests) {\n      if (url === request.url() && networkManager === SDK.NetworkManager.NetworkManager.forRequest(request)) {\n        return request;\n      }\n    }\n    return null;\n  }\n\n  private initializeInitiatorSymbolIfNeeded(request: SDK.NetworkRequest.NetworkRequest): InitiatorData {\n    let initiatorInfo = this.#initiatorData.get(request);\n    if (initiatorInfo) {\n      return initiatorInfo;\n    }\n    initiatorInfo = {\n      info: null,\n      chain: null,\n      request: undefined,\n    };\n    this.#initiatorData.set(request, initiatorInfo);\n    return initiatorInfo;\n  }\n\n  static initiatorInfoForRequest(request: SDK.NetworkRequest.NetworkRequest, existingInitiatorData?: InitiatorData):\n      InitiatorInfo {\n    const initiatorInfo: InitiatorData = existingInitiatorData || {\n      info: null,\n      chain: null,\n      request: undefined,\n    };\n\n    let type = SDK.NetworkRequest.InitiatorType.OTHER;\n    let url = Platform.DevToolsPath.EmptyUrlString;\n    let lineNumber: number|undefined = undefined;\n    let columnNumber: number|undefined = undefined;\n    let scriptId: Protocol.Runtime.ScriptId|null = null;\n    let initiatorStack: Protocol.Runtime.StackTrace|null = null;\n    let initiatorRequest: SDK.NetworkRequest.NetworkRequest|null = null;\n    const initiator = request.initiator();\n\n    const redirectSource = request.redirectSource();\n    if (redirectSource) {\n      type = SDK.NetworkRequest.InitiatorType.REDIRECT;\n      url = redirectSource.url();\n    } else if (initiator) {\n      if (initiator.type === Protocol.Network.InitiatorType.Parser) {\n        type = SDK.NetworkRequest.InitiatorType.PARSER;\n        url = initiator.url ? initiator.url as Platform.DevToolsPath.UrlString : url;\n        lineNumber = initiator.lineNumber;\n        columnNumber = initiator.columnNumber;\n      } else if (initiator.type === Protocol.Network.InitiatorType.Script) {\n        for (let stack: (Protocol.Runtime.StackTrace|undefined) = initiator.stack; stack;) {\n          const topFrame = stack.callFrames.length ? stack.callFrames[0] : null;\n          if (!topFrame) {\n            stack = stack.parent;\n            continue;\n          }\n          type = SDK.NetworkRequest.InitiatorType.SCRIPT;\n          url = (topFrame.url || i18nString(UIStrings.anonymous) as string) as Platform.DevToolsPath.UrlString;\n          lineNumber = topFrame.lineNumber;\n          columnNumber = topFrame.columnNumber;\n          scriptId = topFrame.scriptId;\n          break;\n        }\n        if (!initiator.stack && initiator.url) {\n          type = SDK.NetworkRequest.InitiatorType.SCRIPT;\n          url = initiator.url as Platform.DevToolsPath.UrlString;\n          lineNumber = initiator.lineNumber;\n        }\n        if (initiator.stack?.callFrames?.length) {\n          initiatorStack = initiator.stack;\n        }\n      } else if (initiator.type === Protocol.Network.InitiatorType.Preload) {\n        type = SDK.NetworkRequest.InitiatorType.PRELOAD;\n      } else if (initiator.type === Protocol.Network.InitiatorType.Preflight) {\n        type = SDK.NetworkRequest.InitiatorType.PREFLIGHT;\n        initiatorRequest = request.preflightInitiatorRequest();\n      } else if (initiator.type === Protocol.Network.InitiatorType.SignedExchange) {\n        type = SDK.NetworkRequest.InitiatorType.SIGNED_EXCHANGE;\n        url = initiator.url as Platform.DevToolsPath.UrlString || Platform.DevToolsPath.EmptyUrlString;\n      }\n    }\n    initiatorInfo.info = {type, url, lineNumber, columnNumber, scriptId, stack: initiatorStack, initiatorRequest};\n    return initiatorInfo.info;\n  }\n\n  initiatorInfoForRequest(request: SDK.NetworkRequest.NetworkRequest): InitiatorInfo {\n    const initiatorInfo = this.initializeInitiatorSymbolIfNeeded(request);\n    if (initiatorInfo.info) {\n      return initiatorInfo.info;\n    }\n\n    return NetworkLog.initiatorInfoForRequest(request, initiatorInfo);\n  }\n\n  initiatorGraphForRequest(request: SDK.NetworkRequest.NetworkRequest): InitiatorGraph {\n    const initiated = new Map<SDK.NetworkRequest.NetworkRequest, SDK.NetworkRequest.NetworkRequest>();\n    const networkManager = SDK.NetworkManager.NetworkManager.forRequest(request);\n    for (const otherRequest of this.#requests) {\n      const otherRequestManager = SDK.NetworkManager.NetworkManager.forRequest(otherRequest);\n      if (networkManager === otherRequestManager && this.initiatorChain(otherRequest).has(request)) {\n        // save parent request of otherRequst in order to build the initiator chain table later\n        const initiatorRequest = this.initiatorRequest(otherRequest);\n        if (initiatorRequest) {\n          initiated.set(otherRequest, initiatorRequest);\n        }\n      }\n    }\n    return {initiators: this.initiatorChain(request), initiated};\n  }\n\n  private initiatorChain(request: SDK.NetworkRequest.NetworkRequest): Set<SDK.NetworkRequest.NetworkRequest> {\n    const initiatorDataForRequest = this.initializeInitiatorSymbolIfNeeded(request);\n    let initiatorChainCache = initiatorDataForRequest.chain;\n    if (initiatorChainCache) {\n      return initiatorChainCache;\n    }\n\n    initiatorChainCache = new Set();\n\n    let checkRequest: SDK.NetworkRequest.NetworkRequest|null = request;\n    while (checkRequest) {\n      const initiatorData = this.initializeInitiatorSymbolIfNeeded(checkRequest);\n      if (initiatorData.chain) {\n        initiatorChainCache = initiatorChainCache.union(initiatorData.chain);\n        break;\n      }\n      if (initiatorChainCache.has(checkRequest)) {\n        break;\n      }\n      initiatorChainCache.add(checkRequest);\n      checkRequest = this.initiatorRequest(checkRequest);\n    }\n    initiatorDataForRequest.chain = initiatorChainCache;\n    return initiatorChainCache;\n  }\n\n  private initiatorRequest(request: SDK.NetworkRequest.NetworkRequest): SDK.NetworkRequest.NetworkRequest|null {\n    const initiatorData = this.initializeInitiatorSymbolIfNeeded(request);\n    if (initiatorData.request !== undefined) {\n      return initiatorData.request;\n    }\n    const url = this.initiatorInfoForRequest(request).url;\n    const networkManager = SDK.NetworkManager.NetworkManager.forRequest(request);\n    initiatorData.request = networkManager ? this.requestByManagerAndURL(networkManager, url) : null;\n    return initiatorData.request;\n  }\n\n  private willReloadPage(): void {\n    if (!Common.Settings.Settings.instance().moduleSetting('network-log.preserve-log').get()) {\n      this.reset(true);\n    }\n  }\n\n  private onPrimaryPageChanged(\n      event: Common.EventTarget.EventTargetEvent<\n          {frame: SDK.ResourceTreeModel.ResourceTreeFrame, type: SDK.ResourceTreeModel.PrimaryPageChangeType}>): void {\n    const mainFrame = event.data.frame;\n    const manager = mainFrame.resourceTreeModel().target().model(SDK.NetworkManager.NetworkManager);\n    if (!manager || mainFrame.resourceTreeModel().target().parentTarget()?.type() === SDK.Target.Type.FRAME) {\n      return;\n    }\n\n    // If a page resulted in an error, the browser will navigate to an internal error page\n    // hosted at 'chrome-error://...'. In this case, skip the frame navigated event to preserve\n    // the network log.\n    if (mainFrame.url !== mainFrame.unreachableUrl() && Common.ParsedURL.schemeIs(mainFrame.url, 'chrome-error:')) {\n      return;\n    }\n\n    const preserveLog = Common.Settings.Settings.instance().moduleSetting('network-log.preserve-log').get();\n\n    const oldRequests = this.#requests;\n    const oldManagerRequests =\n        this.#requests.filter(request => SDK.NetworkManager.NetworkManager.forRequest(request) === manager);\n    const oldRequestsSet = this.#requestsSet;\n    this.#requests = [];\n    this.#sentNetworkRequests = [];\n    this.#receivedNetworkResponses = [];\n    this.#requestsSet = new Set();\n    this.#requestsMap.clear();\n    this.#unresolvedPreflightRequests.clear();\n    this.dispatchEventToListeners(Events.Reset, {clearIfPreserved: !preserveLog});\n\n    // Preserve requests from the new session.\n    let currentPageLoad: SDK.PageLoad.PageLoad|null = null;\n    const requestsToAdd = [];\n    for (const request of oldManagerRequests) {\n      if (event.data.type !== SDK.ResourceTreeModel.PrimaryPageChangeType.ACTIVATION &&\n          request.loaderId !== mainFrame.loaderId) {\n        continue;\n      }\n      if (!currentPageLoad) {\n        currentPageLoad = new SDK.PageLoad.PageLoad(request);\n        let redirectSource = request.redirectSource();\n        while (redirectSource) {\n          requestsToAdd.push(redirectSource);\n          redirectSource = redirectSource.redirectSource();\n        }\n      }\n      requestsToAdd.push(request);\n    }\n\n    // Preserve service worker requests from the new session.\n    const serviceWorkerRequestsToAdd = [];\n    for (const swRequest of oldRequests) {\n      if (!swRequest.initiatedByServiceWorker()) {\n        continue;\n      }\n\n      // If there is a matching request that came before this one, keep it.\n      const keepRequest = requestsToAdd.some(\n          request => request.url() === swRequest.url() && request.issueTime() <= swRequest.issueTime());\n      if (keepRequest) {\n        serviceWorkerRequestsToAdd.push(swRequest);\n      }\n    }\n    requestsToAdd.push(...serviceWorkerRequestsToAdd);\n\n    for (const request of requestsToAdd) {\n      currentPageLoad?.bindRequest(request);\n      oldRequestsSet.delete(request);\n      this.addRequest(request);\n    }\n\n    if (preserveLog) {\n      for (const request of oldRequestsSet) {\n        this.addRequest(request, true);\n        request.preserved = true;\n      }\n    }\n\n    if (currentPageLoad) {\n      this.#pageLoadForManager.set(manager, currentPageLoad);\n    }\n  }\n\n  private addRequest(request: SDK.NetworkRequest.NetworkRequest, preserveLog?: boolean): void {\n    this.#requests.push(request);\n    this.#requestsSet.add(request);\n    const requestList = this.#requestsMap.get(request.requestId());\n    if (!requestList) {\n      this.#requestsMap.set(request.requestId(), [request]);\n    } else {\n      requestList.push(request);\n    }\n    this.tryResolvePreflightRequests(request);\n    this.dispatchEventToListeners(Events.RequestAdded, {request, preserveLog});\n  }\n\n  private removeRequest(request: SDK.NetworkRequest.NetworkRequest): void {\n    const index = this.#requests.indexOf(request);\n    if (index > -1) {\n      this.#requests.splice(index, 1);\n    }\n    this.#requestsSet.delete(request);\n    this.#requestsMap.delete(request.requestId());\n    this.dispatchEventToListeners(Events.RequestRemoved, {request});\n  }\n\n  private tryResolvePreflightRequests(request: SDK.NetworkRequest.NetworkRequest): void {\n    if (request.isPreflightRequest()) {\n      const initiator = request.initiator();\n      if (initiator?.requestId) {\n        const [initiatorRequest] = this.requestsForId(initiator.requestId);\n        if (initiatorRequest) {\n          request.setPreflightInitiatorRequest(initiatorRequest);\n          initiatorRequest.setPreflightRequest(request);\n        } else {\n          this.#unresolvedPreflightRequests.set(initiator.requestId, request);\n        }\n      }\n    } else {\n      const preflightRequest = this.#unresolvedPreflightRequests.get(request.requestId());\n      if (preflightRequest) {\n        this.#unresolvedPreflightRequests.delete(request.requestId());\n        request.setPreflightRequest(preflightRequest);\n        preflightRequest.setPreflightInitiatorRequest(request);\n        // Force recomputation of initiator info, if it already exists.\n        const data = this.#initiatorData.get(preflightRequest);\n        if (data) {\n          data.info = null;\n        }\n        this.dispatchEventToListeners(Events.RequestUpdated, {request: preflightRequest});\n      }\n    }\n  }\n\n  importRequests(requests: SDK.NetworkRequest.NetworkRequest[]): void {\n    this.reset(true);\n    this.#requests = [];\n    this.#sentNetworkRequests = [];\n    this.#receivedNetworkResponses = [];\n    this.#requestsSet.clear();\n    this.#requestsMap.clear();\n    this.#unresolvedPreflightRequests.clear();\n    for (const request of requests) {\n      this.addRequest(request);\n    }\n  }\n\n  private onRequestStarted(event: Common.EventTarget.EventTargetEvent<SDK.NetworkManager.RequestStartedEvent>): void {\n    const {request, originalRequest} = event.data;\n    if (originalRequest) {\n      this.#sentNetworkRequests.push(originalRequest);\n    }\n    this.#requestsSet.add(request);\n    const manager = SDK.NetworkManager.NetworkManager.forRequest(request);\n    const pageLoad = manager ? this.#pageLoadForManager.get(manager) : null;\n    if (pageLoad) {\n      pageLoad.bindRequest(request);\n    }\n    this.addRequest(request);\n  }\n\n  private onResponseReceived(event: Common.EventTarget.EventTargetEvent<SDK.NetworkManager.ResponseReceivedEvent>):\n      void {\n    const response = event.data.response;\n    this.#receivedNetworkResponses.push(response);\n  }\n\n  private onRequestUpdated(event: Common.EventTarget.EventTargetEvent<SDK.NetworkRequest.NetworkRequest>): void {\n    const request = event.data;\n    if (!this.#requestsSet.has(request)) {\n      return;\n    }\n\n    // This is only triggered in an edge case in which Chrome reports 2 preflight requests. The\n    // first preflight gets aborted and should not be shown in DevTools.\n    // (see https://crbug.com/1290390 for details)\n    if (request.isPreflightRequest() &&\n        request.corsErrorStatus()?.corsError === Protocol.Network.CorsError.UnexpectedPrivateNetworkAccess) {\n      this.removeRequest(request);\n      return;\n    }\n\n    this.dispatchEventToListeners(Events.RequestUpdated, {request});\n  }\n\n  private onRequestRedirect(event: Common.EventTarget.EventTargetEvent<SDK.NetworkRequest.NetworkRequest>): void {\n    this.#initiatorData.delete(event.data);\n  }\n\n  private onDOMContentLoaded(\n      resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel,\n      event: Common.EventTarget.EventTargetEvent<number>): void {\n    const networkManager = resourceTreeModel.target().model(SDK.NetworkManager.NetworkManager);\n    const pageLoad = networkManager ? this.#pageLoadForManager.get(networkManager) : null;\n    if (pageLoad) {\n      pageLoad.contentLoadTime = event.data;\n    }\n  }\n\n  private onLoad(\n      event: Common.EventTarget\n          .EventTargetEvent<{resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel, loadTime: number}>): void {\n    const networkManager = event.data.resourceTreeModel.target().model(SDK.NetworkManager.NetworkManager);\n    const pageLoad = networkManager ? this.#pageLoadForManager.get(networkManager) : null;\n    if (pageLoad) {\n      pageLoad.loadTime = event.data.loadTime;\n    }\n  }\n\n  reset(clearIfPreserved: boolean): void {\n    this.#requests = [];\n    this.#sentNetworkRequests = [];\n    this.#receivedNetworkResponses = [];\n    this.#requestsSet.clear();\n    this.#requestsMap.clear();\n    this.#unresolvedPreflightRequests.clear();\n    const managers = new Set<SDK.NetworkManager.NetworkManager>(\n        SDK.TargetManager.TargetManager.instance().models(SDK.NetworkManager.NetworkManager));\n    for (const manager of this.#pageLoadForManager.keys()) {\n      if (!managers.has(manager)) {\n        this.#pageLoadForManager.delete(manager);\n      }\n    }\n\n    this.dispatchEventToListeners(Events.Reset, {clearIfPreserved});\n  }\n\n  private networkMessageGenerated(\n      networkManager: SDK.NetworkManager.NetworkManager,\n      event: Common.EventTarget.EventTargetEvent<SDK.NetworkManager.MessageGeneratedEvent>): void {\n    const {message, warning, requestId} = event.data;\n    const consoleMessage = new SDK.ConsoleModel.ConsoleMessage(\n        networkManager.target().model(SDK.RuntimeModel.RuntimeModel), Protocol.Log.LogEntrySource.Network,\n        warning ? Protocol.Log.LogEntryLevel.Warning : Protocol.Log.LogEntryLevel.Info, message);\n    this.associateConsoleMessageWithRequest(consoleMessage, requestId);\n    networkManager.target().model(SDK.ConsoleModel.ConsoleModel)?.addMessage(consoleMessage);\n  }\n\n  associateConsoleMessageWithRequest(consoleMessage: SDK.ConsoleModel.ConsoleMessage, requestId: string): void {\n    const target = consoleMessage.target();\n    const networkManager = target ? target.model(SDK.NetworkManager.NetworkManager) : null;\n    if (!networkManager) {\n      return;\n    }\n    const request = this.requestByManagerAndId(networkManager, requestId);\n    if (!request) {\n      return;\n    }\n    consoleMessageToRequest.set(consoleMessage, request);\n    const initiator = request.initiator();\n    if (initiator) {\n      consoleMessage.stackTrace = initiator.stack || undefined;\n      if (initiator.url) {\n        consoleMessage.url = initiator.url as Platform.DevToolsPath.UrlString;\n        consoleMessage.line = initiator.lineNumber || 0;\n      }\n    }\n  }\n\n  static requestForConsoleMessage(consoleMessage: SDK.ConsoleModel.ConsoleMessage): SDK.NetworkRequest.NetworkRequest\n      |null {\n    return consoleMessageToRequest.get(consoleMessage) || null;\n  }\n\n  requestsForId(requestId: string): SDK.NetworkRequest.NetworkRequest[] {\n    return this.#requestsMap.get(requestId) || [];\n  }\n}\n\nconst consoleMessageToRequest = new WeakMap<SDK.ConsoleModel.ConsoleMessage, SDK.NetworkRequest.NetworkRequest>();\n\nexport enum Events {\n  /* eslint-disable @typescript-eslint/naming-convention -- Used by web_tests. */\n  Reset = 'Reset',\n  RequestAdded = 'RequestAdded',\n  RequestUpdated = 'RequestUpdated',\n  RequestRemoved = 'RequestRemoved',\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport interface ResetEvent {\n  clearIfPreserved: boolean;\n}\n\nexport interface EventTypes {\n  [Events.Reset]: ResetEvent;\n  [Events.RequestAdded]: {request: SDK.NetworkRequest.NetworkRequest, preserveLog?: boolean};\n  [Events.RequestUpdated]: {request: SDK.NetworkRequest.NetworkRequest};\n  [Events.RequestRemoved]: {request: SDK.NetworkRequest.NetworkRequest};\n}\n\nexport interface InitiatorData {\n  info: InitiatorInfo|null;\n  chain: Set<SDK.NetworkRequest.NetworkRequest>|null;\n  request?: SDK.NetworkRequest.NetworkRequest|null;\n}\n\nexport interface InitiatorGraph {\n  initiators: Set<SDK.NetworkRequest.NetworkRequest>;\n  initiated: Map<SDK.NetworkRequest.NetworkRequest, SDK.NetworkRequest.NetworkRequest>;\n}\n\nexport interface InitiatorInfo {\n  type: SDK.NetworkRequest.InitiatorType;\n  // generally this is a url but can also contain \"<anonymous>\"\n  url: Platform.DevToolsPath.UrlString;\n  lineNumber: number|undefined;\n  columnNumber: number|undefined;\n  scriptId: Protocol.Runtime.ScriptId|null;\n  stack: Protocol.Runtime.StackTrace|null;\n  initiatorRequest: SDK.NetworkRequest.NetworkRequest|null;\n}\n", "// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {Events as NetworkLogEvents, NetworkLog} from './NetworkLog.js';\n\n/**\n * A class that facilitates resolving a requestId to a network request. If the requestId does not resolve, a listener\n * is installed on the network request to wait for the request to appear. This is useful if an attempt to resolve the\n * requestId is made before the network request got reported.\n *\n * This functionality is intentionally provided in this class (instead of as part of NetworkLog) to enable clients\n * to control the duration of the wait and the lifetime of the associated promises by using the `clear` method on\n * this class.\n */\nexport class RequestResolver extends\n    Common.ResolverBase.ResolverBase<Protocol.Network.RequestId, SDK.NetworkRequest.NetworkRequest> {\n  private networkListener: Common.EventTarget.EventDescriptor|null = null;\n  private networkLog: NetworkLog;\n\n  constructor(networkLog: NetworkLog = NetworkLog.instance()) {\n    super();\n    this.networkLog = networkLog;\n  }\n\n  protected getForId(id: Protocol.Network.RequestId): SDK.NetworkRequest.NetworkRequest|null {\n    const requests = this.networkLog.requestsForId(id);\n    if (requests.length > 0) {\n      return requests[0];\n    }\n    return null;\n  }\n\n  private onRequestAdded(event: Common.EventTarget.EventTargetEvent<{request: SDK.NetworkRequest.NetworkRequest}>):\n      void {\n    const {request} = event.data;\n    const backendRequestId = request.backendRequestId();\n    if (backendRequestId) {\n      this.onResolve(backendRequestId, request);\n    }\n  }\n\n  protected override startListening(): void {\n    if (this.networkListener) {\n      return;\n    }\n    this.networkListener = this.networkLog.addEventListener(NetworkLogEvents.RequestAdded, this.onRequestAdded, this);\n  }\n\n  protected override stopListening(): void {\n    if (!this.networkListener) {\n      return;\n    }\n    Common.EventTarget.removeEventListeners([this.networkListener]);\n    this.networkListener = null;\n  }\n}\n"],
  "mappings": "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",
  "names": ["Common", "SDK", "Events", "Common"]
}
