{"version":3,"file":"spec.js","sourceRoot":"","sources":["../../../../../../../../front_end/models/live-metrics/web-vitals-injected/spec/spec.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B,MAAM,CAAC,MAAM,kBAAkB,GAAG,sCAAsC,CAAC;AACzE,MAAM,CAAC,MAAM,oBAAoB,GAAG,uCAAuC,CAAC;AAO5E;;;;GAIG;AACH,MAAM,UAAU,sBAAsB,CAAC,OAAiC;IACtE,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;QACjD,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;YACpC,OAAO,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QACvD,CAAC;QACD,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IACrD,CAAC,CAAC,CAAC;IACH,OAAO,eAAe,YAAY,CAAC,aAAa,IAAI,YAAY,CAAC,SAAS,EAAE,CAAC;AAC/E,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,KAAkB;IACvD,OAAO,gBAAgB,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;AAC1D,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {INPAttribution, MetricType} from '../../../../third_party/web-vitals/web-vitals.js';\n\nexport const EVENT_BINDING_NAME = '__chromium_devtools_metrics_reporter';\nexport const INTERNAL_KILL_SWITCH = '__chromium_devtools_kill_live_metrics';\n\nexport type MetricChangeEvent = Pick<MetricType, 'name'|'value'>;\n\nexport type UniqueInteractionId = `interaction-${number}-${number}`;\nexport type UniqueLayoutShiftId = `layout-shift-${number}-${number}`;\n\n/**\n * An interaction can have multiple associated `PerformanceEventTiming`s.\n * The `interactionId` available on `PerformanceEventTiming` isn't guaranteed to be unique. (e.g. a `keyup` event issued long after a `keydown` event will have the same `interactionId`).\n * Double-keying with the start time of the longest entry should uniquely identify each interaction.\n */\nexport function getUniqueInteractionId(entries: PerformanceEventTiming[]): UniqueInteractionId {\n  const longestEntry = entries.reduce((prev, curr) => {\n    if (prev.duration === curr.duration) {\n      return prev.startTime < curr.startTime ? prev : curr;\n    }\n    return prev.duration > curr.duration ? prev : curr;\n  });\n  return `interaction-${longestEntry.interactionId}-${longestEntry.startTime}`;\n}\n\nexport function getUniqueLayoutShiftId(entry: LayoutShift): UniqueLayoutShiftId {\n  return `layout-shift-${entry.value}-${entry.startTime}`;\n}\n\nexport interface LCPPhases {\n  timeToFirstByte: number;\n  resourceLoadDelay: number;\n  resourceLoadTime: number;\n  elementRenderDelay: number;\n}\n\nexport interface INPPhases {\n  inputDelay: number;\n  processingDuration: number;\n  presentationDelay: number;\n}\n\nexport interface LCPChangeEvent extends MetricChangeEvent {\n  name: 'LCP';\n  phases: LCPPhases;\n  nodeIndex?: number;\n}\n\nexport interface CLSChangeEvent extends MetricChangeEvent {\n  name: 'CLS';\n  clusterShiftIds: UniqueLayoutShiftId[];\n}\n\nexport interface INPChangeEvent extends MetricChangeEvent {\n  name: 'INP';\n  interactionType: INPAttribution['interactionType'];\n  phases: INPPhases;\n  uniqueInteractionId: UniqueInteractionId;\n}\n\nexport interface InteractionEvent {\n  name: 'Interaction';\n  interactionType: INPAttribution['interactionType'];\n  uniqueInteractionId: UniqueInteractionId;\n  duration: number;\n  nodeIndex?: number;\n}\n\nexport interface LayoutShiftEvent {\n  name: 'LayoutShift';\n  score: number;\n  uniqueLayoutShiftId: UniqueLayoutShiftId;\n  affectedNodeIndices: number[];\n}\n\nexport interface ResetEvent {\n  name: 'reset';\n}\n\nexport type WebVitalsEvent = LCPChangeEvent|CLSChangeEvent|INPChangeEvent|InteractionEvent|LayoutShiftEvent|ResetEvent;\n"]}