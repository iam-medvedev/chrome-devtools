{"version":3,"file":"GdpClient.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/host/GdpClient.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {updateHostConfig} from '../../testing/EnvironmentHelpers.js';\nimport * as Root from '../root/root.js';\n\nimport * as Host from './host.js';\n\ndescribe('GdpClient', () => {\n  let dispatchHttpRequestStub:\n      sinon.SinonStub<Parameters<typeof Host.InspectorFrontendHost.InspectorFrontendHostInstance.dispatchHttpRequest>>;\n  beforeEach(() => {\n    updateHostConfig({\n      devToolsGdpProfiles: {\n        enabled: true,\n      },\n      devToolsGdpProfilesAvailability: {\n        enabled: true,\n        enterprisePolicyValue: Root.Runtime.GdpProfilesEnterprisePolicyValue.ENABLED,\n      },\n    });\n\n    dispatchHttpRequestStub =\n        sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'dispatchHttpRequest')\n            .callsFake((_, cb) => {\n              cb({\n                response: JSON.stringify({name: 'profiles/id'}),\n                statusCode: 200,\n              });\n            });\n    Host.GdpClient.GdpClient.instance({forceNew: true});\n  });\n\n  it('should cache requests to getProfile when profile exists', async () => {\n    dispatchHttpRequestStub.callsFake((_, cb) => {\n      cb({\n        response: JSON.stringify({name: 'profiles/id'}),\n        statusCode: 200,\n      });\n    });\n    await Host.GdpClient.GdpClient.instance().getProfile();\n    await Host.GdpClient.GdpClient.instance().getProfile();\n\n    sinon.assert.calledOnce(dispatchHttpRequestStub);\n  });\n\n  it('should cache requests in getProfile when profile doesn\\'t exist', async () => {\n    dispatchHttpRequestStub.callsFake((request, cb) => {\n      if (request.path === '/v1beta1/profile:get') {\n        cb({statusCode: 404, error: ''});\n        return;\n      }\n      cb({\n        response: JSON.stringify({\n          createProfile: Host.GdpClient.EligibilityStatus.ELIGIBLE,\n        }),\n        statusCode: 200,\n      });\n    });\n    await Host.GdpClient.GdpClient.instance().getProfile();\n    await Host.GdpClient.GdpClient.instance().getProfile();\n\n    sinon.assert.calledTwice(dispatchHttpRequestStub);\n  });\n\n  it('should clear cache after creating a profile', async () => {\n    dispatchHttpRequestStub.callsFake((_, cb) => {\n      cb({\n        error: '',\n        statusCode: 404,\n      });\n    });\n    await Host.GdpClient.GdpClient.instance().getProfile();\n    await Host.GdpClient.GdpClient.instance().createProfile(\n        {user: 'test', emailPreference: Host.GdpClient.EmailPreference.ENABLED});\n    await Host.GdpClient.GdpClient.instance().getProfile();\n    await Host.GdpClient.GdpClient.instance().getProfile();\n\n    sinon.assert.calledThrice(dispatchHttpRequestStub);\n  });\n\n  it('`getAwardedBadgeNames` should normalize the badge names', async () => {\n    dispatchHttpRequestStub.callsFake((_, cb) => {\n      cb({\n        response: JSON.stringify({\n          awards: [{\n            name: '/profiles/some-obfuscated-id/awards/some-badge',\n          }],\n        }),\n        statusCode: 200,\n      });\n    });\n    const result = await Host.GdpClient.GdpClient.instance().getAwardedBadgeNames({names: []});\n    assert.deepEqual(result, new Set(['/profiles/me/awards/some-badge']));\n  });\n\n  describe('when the integration is disabled', () => {\n    it('should not make a request', async () => {\n      updateHostConfig({\n        devToolsGdpProfiles: {\n          enabled: false,\n        },\n      });\n\n      const profileResult = await Host.GdpClient.GdpClient.instance({forceNew: true}).getProfile();\n\n      assert.isNull(profileResult);\n      sinon.assert.notCalled(dispatchHttpRequestStub);\n    });\n  });\n\n  describe('getProfile', () => {\n    it('should return null when there is an HTTP_RESPONSE_UNAVAILABLE error in the getProfile request', async () => {\n      dispatchHttpRequestStub.callsFake((request, cb) => {\n        if (request.path === '/v1beta1/profile:get') {\n          cb({statusCode: 503, error: ''});\n          return;\n        }\n      });\n      const result = await Host.GdpClient.GdpClient.instance().getProfile();\n\n      assert.isNull(result);\n      sinon.assert.calledOnce(dispatchHttpRequestStub);\n    });\n\n    it('should return null when the endpoint returns non-parseable response', async () => {\n      dispatchHttpRequestStub.callsFake((_, cb) => {\n        cb({\n          statusCode: 200,\n          response: 'this is not a json',\n        });\n      });\n      const result = await Host.GdpClient.GdpClient.instance().getProfile();\n      assert.isNull(result);\n    });\n\n    it('should return null when there isn\\'t a profile and checkEligibility call returned an error', async () => {\n      dispatchHttpRequestStub.callsFake((request, cb) => {\n        if (request.path === '/v1beta1/profile:get') {\n          cb({statusCode: 404, error: ''});\n          return;\n        }\n\n        cb({statusCode: 503, error: ''});\n      });\n      const result = await Host.GdpClient.GdpClient.instance().getProfile();\n\n      assert.isNull(result);\n      sinon.assert.calledTwice(dispatchHttpRequestStub);\n    });\n\n    it('should return profile and isEligible if a profile exists without calling checkEligibility', async () => {\n      dispatchHttpRequestStub.callsFake((request, cb) => {\n        if (request.path === '/v1beta1/profile:get') {\n          cb({statusCode: 200, response: JSON.stringify({name: 'test/profile-id'})});\n          return;\n        }\n      });\n      const result = await Host.GdpClient.GdpClient.instance().getProfile();\n\n      assert.deepEqual(result, {\n        profile: {name: 'test/profile-id'},\n        isEligible: true,\n      });\n      sinon.assert.calledOnce(dispatchHttpRequestStub);\n    });\n\n    it('should check eligibility if no profile exists', async () => {\n      dispatchHttpRequestStub.callsFake((request, cb) => {\n        if (request.path === '/v1beta1/profile:get') {\n          cb({statusCode: 404, error: ''});\n          return;\n        }\n        cb({\n          response: JSON.stringify({\n            createProfile: Host.GdpClient.EligibilityStatus.ELIGIBLE,\n          }),\n          statusCode: 200,\n        });\n      });\n\n      const result = await Host.GdpClient.GdpClient.instance({forceNew: true}).getProfile();\n\n      assert.deepEqual(result, {\n        profile: null,\n        isEligible: true,\n      });\n      sinon.assert.calledTwice(dispatchHttpRequestStub);\n    });\n  });\n\n  describe('isBadgesEnabled', () => {\n    it('should return true when the flag is enabled and the enterprise policy is enabled', () => {\n      updateHostConfig({\n        devToolsGdpProfiles: {\n          badgesEnabled: true,\n        },\n        devToolsGdpProfilesAvailability: {\n          enterprisePolicyValue: Root.Runtime.GdpProfilesEnterprisePolicyValue.ENABLED,\n        },\n      });\n      assert.isTrue(Host.GdpClient.isBadgesEnabled());\n    });\n\n    it('should return false when the badgesEnabled feature param is false', () => {\n      updateHostConfig({\n        devToolsGdpProfiles: {\n          badgesEnabled: false,\n        },\n        devToolsGdpProfilesAvailability: {\n          enterprisePolicyValue: Root.Runtime.GdpProfilesEnterprisePolicyValue.ENABLED,\n        },\n      });\n      assert.isFalse(Host.GdpClient.isBadgesEnabled());\n    });\n\n    it('should return false when the enterprise setting is ENABLED_WITHOUT_BADGES', () => {\n      updateHostConfig({\n        devToolsGdpProfiles: {\n          badgesEnabled: true,\n        },\n        devToolsGdpProfilesAvailability: {\n          enterprisePolicyValue: Root.Runtime.GdpProfilesEnterprisePolicyValue.ENABLED_WITHOUT_BADGES,\n        },\n      });\n      assert.isFalse(Host.GdpClient.isBadgesEnabled());\n    });\n\n    it('should return false when the enterprise setting is DISABLED', () => {\n      updateHostConfig({\n        devToolsGdpProfiles: {\n          badgesEnabled: true,\n        },\n        devToolsGdpProfilesAvailability: {\n          enterprisePolicyValue: Root.Runtime.GdpProfilesEnterprisePolicyValue.DISABLED,\n        },\n      });\n      assert.isFalse(Host.GdpClient.isBadgesEnabled());\n    });\n  });\n});\n"]}