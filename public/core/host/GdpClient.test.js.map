{"version":3,"file":"GdpClient.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/host/GdpClient.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {updateHostConfig} from '../../testing/EnvironmentHelpers.js';\nimport * as Root from '../root/root.js';\n\nimport * as Host from './host.js';\n\ndescribe('GdpClient', () => {\n  let dispatchHttpRequestStub:\n      sinon.SinonStub<Parameters<typeof Host.InspectorFrontendHost.InspectorFrontendHostInstance.dispatchHttpRequest>>;\n  beforeEach(() => {\n    updateHostConfig({\n      devToolsGdpProfiles: {\n        enabled: true,\n      },\n      devToolsGdpProfilesAvailability: {\n        enabled: true,\n        enterprisePolicyValue: Root.Runtime.GdpProfilesEnterprisePolicyValue.ENABLED,\n      },\n    });\n\n    dispatchHttpRequestStub =\n        sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'dispatchHttpRequest')\n            .callsFake((_, cb) => {\n              cb({\n                response: JSON.stringify({name: 'profiles/id'}),\n                statusCode: 200,\n              });\n            });\n    Host.GdpClient.GdpClient.instance({forceNew: true});\n  });\n\n  it('should cache requests to getProfile', async () => {\n    await Host.GdpClient.GdpClient.instance().getProfile();\n    await Host.GdpClient.GdpClient.instance().getProfile();\n\n    sinon.assert.calledOnce(dispatchHttpRequestStub);\n  });\n\n  it('should cache requests to checkEligibility', async () => {\n    await Host.GdpClient.GdpClient.instance().checkEligibility();\n    await Host.GdpClient.GdpClient.instance().checkEligibility();\n\n    sinon.assert.calledOnce(dispatchHttpRequestStub);\n  });\n\n  it('should cache requests to checkEligibility as eligible for `createProfile` when the user has a GDP profile',\n     async () => {\n       await Host.GdpClient.GdpClient.instance().getProfile();\n       const result = await Host.GdpClient.GdpClient.instance().checkEligibility();\n\n       assert.strictEqual(result?.createProfile, Host.GdpClient.EligibilityStatus.ELIGIBLE);\n       sinon.assert.calledOnce(dispatchHttpRequestStub);\n     });\n\n  it('should clear cache after creating a profile', async () => {\n    await Host.GdpClient.GdpClient.instance().getProfile();\n    await Host.GdpClient.GdpClient.instance().createProfile(\n        {user: 'test', emailPreference: Host.GdpClient.EmailPreference.ENABLED});\n    await Host.GdpClient.GdpClient.instance().getProfile();\n    await Host.GdpClient.GdpClient.instance().getProfile();\n\n    sinon.assert.calledThrice(dispatchHttpRequestStub);\n  });\n\n  it('`getAwardedBadgeNames` should normalize the badge names', async () => {\n    dispatchHttpRequestStub.callsFake((_, cb) => {\n      cb({\n        response: JSON.stringify({\n          awards: [{\n            name: '/profiles/some-obfuscated-id/awards/some-badge',\n          }],\n        }),\n        statusCode: 200,\n      });\n    });\n    const result = await Host.GdpClient.GdpClient.instance().getAwardedBadgeNames({names: []});\n    assert.deepEqual(result, new Set(['/profiles/me/awards/some-badge']));\n  });\n\n  describe('when the integration is disabled', () => {\n    it('should not make a request', async () => {\n      updateHostConfig({\n        devToolsGdpProfiles: {\n          enabled: false,\n        },\n      });\n\n      const profile = await Host.GdpClient.GdpClient.instance({forceNew: true}).getProfile();\n\n      assert.isNull(profile);\n      sinon.assert.notCalled(dispatchHttpRequestStub);\n    });\n  });\n\n  describe('initialize', () => {\n    it('should return hasProfile and isEligible if a profile exists without calling checkEligibility', async () => {\n      const result = await Host.GdpClient.GdpClient.instance().initialize();\n\n      assert.deepEqual(result, {\n        hasProfile: true,\n        isEligible: true,\n      });\n      sinon.assert.calledOnce(dispatchHttpRequestStub);\n    });\n\n    it('should check eligibility if no profile exists', async () => {\n      dispatchHttpRequestStub.callsFake((request, cb) => {\n        if (request.path === '/v1beta1/profile:get') {\n          cb({statusCode: 404, error: ''});\n          return;\n        }\n        cb({\n          response: JSON.stringify({\n            createProfile: Host.GdpClient.EligibilityStatus.ELIGIBLE,\n          }),\n          statusCode: 200,\n        });\n      });\n\n      const result = await Host.GdpClient.GdpClient.instance({forceNew: true}).initialize();\n\n      assert.deepEqual(result, {\n        hasProfile: false,\n        isEligible: true,\n      });\n      sinon.assert.calledTwice(dispatchHttpRequestStub);\n    });\n  });\n});\n"]}