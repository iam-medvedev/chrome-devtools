{"version":3,"file":"AidaClient.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/host/AidaClient.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,uBAAuB,EAAE,oBAAoB,EAAC,MAAM,qCAAqC,CAAC;AAElG,OAAO,KAAK,IAAI,MAAM,WAAW,CAAC;AAElC,MAAM,aAAa,GAAG,aAAa,CAAC;AAEpC,uBAAuB,CAAC,YAAY,EAAE,GAAG,EAAE;IACzC,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;QACtE,MAAM,IAAI,GAAG,oBAAoB,CAAC,EAAE,CAAC,CAAC;QACtC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;QAC9E,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE;YAC9B,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,iBAAiB;YACzB,cAAc,EAAE,CAAC;YACjB,kBAAkB,EAAE,CAAC;SACtB,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,MAAM,IAAI,GAAG,oBAAoB,CAAC;YAChC,uBAAuB,EAAE;gBACvB,OAAO,EAAE,IAAI;gBACb,eAAe,EAAE,GAAG;aACrB;SACF,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;QAC9E,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE;YAC9B,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,iBAAiB;YACzB,OAAO,EAAE;gBACP,WAAW,EAAE,GAAG;aACjB;YACD,cAAc,EAAE,CAAC;YACjB,kBAAkB,EAAE,CAAC;SACtB,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,MAAM,IAAI,GAAG,oBAAoB,CAAC;YAChC,uBAAuB,EAAE;gBACvB,OAAO,EAAE,IAAI;gBACb,eAAe,EAAE,CAAC;aACnB;SACF,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;QAC9E,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE;YAC9B,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,iBAAiB;YACzB,OAAO,EAAE;gBACP,WAAW,EAAE,CAAC;aACf;YACD,cAAc,EAAE,CAAC;YACjB,kBAAkB,EAAE,CAAC;SACtB,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,MAAM,IAAI,GAAG,oBAAoB,CAAC;YAChC,uBAAuB,EAAE;gBACvB,OAAO,EAAE,IAAI;gBACb,WAAW,EAAE,aAAa;gBAC1B,eAAe,EAAE,GAAG;aACrB;SACF,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;QAC9E,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE;YAC9B,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,iBAAiB;YACzB,OAAO,EAAE;gBACP,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,GAAG;aACjB;YACD,cAAc,EAAE,CAAC;YACjB,kBAAkB,EAAE,CAAC;SACtB,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC3C,MAAM,IAAI,GAAG,oBAAoB,CAAC;YAChC,uBAAuB,EAAE;gBACvB,OAAO,EAAE,IAAI;gBACb,eAAe,EAAE,GAAG;gBACpB,eAAe,EAAE,IAAI;aACtB;SACF,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;QAC9E,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE;YAC9B,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,iBAAiB;YACzB,QAAQ,EAAE;gBACR,4BAA4B,EAAE,IAAI;aACnC;YACD,OAAO,EAAE;gBACP,WAAW,EAAE,GAAG;aACjB;YACD,cAAc,EAAE,CAAC;YACjB,kBAAkB,EAAE,CAAC;SACtB,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,KAAK,UAAU,aAAa,CAAC,QAAoC;QAC/D,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,IAAI,KAAK,EAAE,MAAM,MAAM,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YACzG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvB,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,EAAE,oBAAoB,CAAC;aACrF,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE;YACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC9B,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC;gBAC3D,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC;gBAC3D,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,YAAY,EAAC,EAAC;aAClC,CAAC,CAAC;YACH,IAAI,KAAK,GAAG,IAAI,CAAC;YACjB,KAAK,MAAM,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;gBACzC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;gBACrD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;gBACxE,KAAK,GAAG,KAAK,CAAC;YAChB,CAAC;YACD,QAAQ,CAAC,EAAC,UAAU,EAAE,GAAG,EAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEP,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAClD,MAAM,OAAO,GAAG,MAAM,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC9C,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE;YAC9B,EAAC,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC;YACrD,EAAC,WAAW,EAAE,cAAc,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC;YAC3D,EAAC,WAAW,EAAE,wBAAwB,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC;SACtE,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,EAAE,oBAAoB,CAAC;aACrF,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE;YACzC,MAAM,QAAQ,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,aAAa,EAAC,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAC9G,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE,CAAC;gBAC7B,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;gBACrD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACnD,CAAC;YACD,QAAQ,CAAC,EAAC,UAAU,EAAE,GAAG,EAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEP,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAClD,MAAM,OAAO,GAAG,MAAM,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC9C,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE;YAC9B,EAAC,WAAW,EAAE,aAAa,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC;SAC3D,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,EAAE,oBAAoB,CAAC;aACrF,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE;YACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC9B,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,mDAAmD,EAAC,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC;gBACtG,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,6CAA6C,EAAC,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC;gBAChG,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,0CAA0C,EAAC,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC;gBAC7F,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,8CAA8C,EAAC,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC;gBACjG,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,8CAA8C,EAAC,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC;gBACjG,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,uCAAuC,EAAC,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC;gBAC1F,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,2CAA2C,EAAC,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC;gBAC9F,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,2CAA2C,EAAC,EAAE,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC,EAAC;aAC/F,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACxE,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAClG,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/E,QAAQ,CAAC,EAAC,UAAU,EAAE,GAAG,EAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEP,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAClD,MAAM,OAAO,GAAG,MAAM,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC9C,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE;YAC9B;gBACE,WAAW,EAAE,mDAAmD;oBAC5D,6CAA6C;gBACjD,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC;aAC7B;YACD;gBACE,WAAW,EAAE,mDAAmD;oBAC5D,6CAA6C;oBAC7C,0CAA0C;oBAC1C,8CAA8C;oBAC9C,8CAA8C;gBAClD,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC;aAC7B;YACD;gBACE,WAAW,EAAE,mDAAmD;oBAC5D,6CAA6C;oBAC7C,0CAA0C;oBAC1C,8CAA8C;oBAC9C,8CAA8C;oBAC9C,uCAAuC;gBAC3C,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC;aAC7B;YACD;gBACE,WAAW,EAAE,mDAAmD;oBAC5D,6CAA6C;oBAC7C,0CAA0C;oBAC1C,8CAA8C;oBAC9C,8CAA8C;oBAC9C,uCAAuC;oBACvC,2CAA2C;oBAC3C,2CAA2C;gBAC/C,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAC;aAC7B;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,EAAE,oBAAoB,CAAC;aACrF,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE;YACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC9B;oBACE,SAAS,EAAE,EAAC,IAAI,EAAE,UAAU,EAAC;oBAC7B,QAAQ,EAAE,EAAC,WAAW,EAAE,GAAG,EAAE,mBAAmB,EAAE,EAAC,iBAAiB,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE,EAAC,EAAC;iBAC/F;gBACD;oBACE,SAAS,EAAE,EAAC,IAAI,EAAE,UAAU,EAAC;oBAC7B,QAAQ,EAAE;wBACR,WAAW,EAAE,GAAG;wBAChB,mBAAmB,EACf,EAAC,iBAAiB,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,EAAC,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,GAAG,EAAE,qBAAqB,EAAC,CAAC,EAAC;qBACvG;iBACF;aACF,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACxE,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;YACrD,QAAQ,CAAC,EAAC,UAAU,EAAE,GAAG,EAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEP,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAClD,MAAM,OAAO,GAAG,MAAM,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC9C,MAAM,CAAC,eAAe,CAAC,OAAO,EAAE;YAC9B;gBACE,WAAW,EAAE,UAAU;oBACnB,UAAU;gBACd,QAAQ,EAAE;oBACR,WAAW,EAAE,GAAG;oBAChB,mBAAmB,EAAE;wBACnB,EAAC,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,EAAC;wBAC1E;4BACE,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI;4BACxD,SAAS,EAAE,CAAC,EAAC,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,GAAG,EAAE,qBAAqB,EAAC,CAAC;yBACtE;qBACF;iBACF;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,EAAE,oBAAoB,CAAC;aACrF,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE;YACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC9B,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,EAAC;gBAC7B,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,EAAC;gBAC7B,EAAC,SAAS,EAAE,EAAC,IAAI,EAAE,aAAa,EAAC,EAAC;aACnC,CAAC,CAAC;YACH,KAAK,MAAM,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;gBACxC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;gBACrD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACnD,CAAC;YACD,QAAQ,CAAC,EAAC,UAAU,EAAE,GAAG,EAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEP,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAClD,MAAM,OAAO,GAAG,CAAC,MAAM,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;QACxE,MAAM,CAAC,eAAe,CAClB,OAAO,EAAE,CAAC,QAAQ,EAAE,gCAAgC,EAAE,2CAA2C,CAAC,CAAC,CAAC;IAC1G,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,EAAE,oBAAoB,CAAC,CAAC,YAAY,CAAC,CAAC,EAAE;YACzG,YAAY,EAAE,GAAG;SAClB,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAClD,IAAI,CAAC;YACH,MAAM,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;QAC9C,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,qCAAqC,CAAC,CAAC;QACpE,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,EAAE,oBAAoB,CAAC,CAAC,YAAY,CAAC,CAAC,EAAE;YACzG,YAAY,EAAE,GAAG;SAClB,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAClD,IAAI,CAAC;YACH,MAAM,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;QAC9C,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,oCAAoC,CAAC,CAAC;QACnE,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACnE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,EAAE,oBAAoB,CAAC,CAAC,YAAY,CAAC,CAAC,EAAE;YACzG,OAAO,EAAE,8BAA8B;YACvC,QAAQ,EAAE,oFAAoF;SAC/F,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAClD,IAAI,CAAC;YACH,MAAM,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;QAC9C,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC;iBACd,MAAM,CACH,sIAAsI,CAAC,CAAC;QAClJ,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,SAAS,sBAAsB,CAAC,WAA0D;YACxF,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,EAAE,oBAAoB,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE;gBACxG,EAAE,CAAC,WAAW,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;QACL,CAAC;QAED,UAAU,CAAC,GAAG,EAAE;YACd,KAAK,CAAC,OAAO,EAAE,CAAC;QAClB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,mBAAmB,GAAG,MAAM,CAAC,wBAAwB,CAAC,UAAU,EAAE,WAAW,CAAE,CAAC;YACtF,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,WAAW,EAAE;gBAC7C,GAAG;oBACD,OAAO,EAAC,MAAM,EAAE,KAAK,EAAC,CAAC;gBACzB,CAAC;aACF,CAAC,CAAC;YAEH,IAAI,CAAC;gBACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,wBAAwB,EAAE,CAAC;gBAC3E,MAAM,CAAC,WAAW,CAAC,MAAM,0EAAsD,CAAC;YAClF,CAAC;oBAAS,CAAC;gBACT,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,WAAW,EAAE,mBAAmB,CAAC,CAAC;YACtE,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gFAAgF,EAAE,KAAK,IAAI,EAAE;YAC9F,sBAAsB,CAAC,EAAC,YAAY,EAAE,SAAS,EAAE,YAAY,EAAE,IAAI,EAAC,CAAC,CAAC;YAEtE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,wBAAwB,EAAE,CAAC;YAE3E,MAAM,CAAC,WAAW,CAAC,MAAM,oFAA2D,CAAC;QACvF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yEAAyE,EAAE,KAAK,IAAI,EAAE;YACvF,sBAAsB,CAAC,EAAC,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,KAAK,EAAC,CAAC,CAAC;YAE1E,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,wBAAwB,EAAE,CAAC;YAE3E,MAAM,CAAC,WAAW,CAAC,MAAM,gFAAyD,CAAC;QACrF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gGAAgG,EAAE,KAAK,IAAI,EAAE;YAC9G,sBAAsB,CAAC,EAAC,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,IAAI,EAAC,CAAC,CAAC;YAEzE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,wBAAwB,EAAE,CAAC;YAE3E,MAAM,CAAC,WAAW,CAAC,MAAM,sEAAoD,CAAC;QAChF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,EAAE,yBAAyB,CAAC,CAAC;YAC7G,MAAM,MAAM,GAAG,CAAC,CAAC;YAEjB,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAClD,KAAK,QAAQ,CAAC,mBAAmB,CAAC;gBAChC,gCAAgC,EAAE,MAAM;gBACxC,4BAA4B,EAAE,KAAK;gBACnC,4BAA4B,EAAE,EAAC,aAAa,EAAE,EAAC,SAAS,kDAAiC,EAAC,EAAC;aAC5F,CAAC,CAAC;YACH,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAEnD,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC;gBAClC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW;gBACnC,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM;gBAC9B,gCAAgC,EAAE,MAAM;gBACxC,4BAA4B,EAAE;oBAC5B,aAAa,EAAE;wBACb,SAAS,EAAE,UAAU;qBACtB;iBACF;aACF,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment, getGetHostConfigStub} from '../../testing/EnvironmentHelpers.js';\n\nimport * as Host from './host.js';\n\nconst TEST_MODEL_ID = 'testModelId';\n\ndescribeWithEnvironment('AidaClient', () => {\n  it('adds no model temperature if console insights is not enabled', () => {\n    const stub = getGetHostConfigStub({});\n    const request = Host.AidaClient.AidaClient.buildConsoleInsightsRequest('foo');\n    assert.deepStrictEqual(request, {\n      input: 'foo',\n      client: 'CHROME_DEVTOOLS',\n      client_feature: 1,\n      functionality_type: 2,\n    });\n    stub.restore();\n  });\n\n  it('adds a model temperature', () => {\n    const stub = getGetHostConfigStub({\n      devToolsConsoleInsights: {\n        enabled: true,\n        aidaTemperature: 0.5,\n      },\n    });\n    const request = Host.AidaClient.AidaClient.buildConsoleInsightsRequest('foo');\n    assert.deepStrictEqual(request, {\n      input: 'foo',\n      client: 'CHROME_DEVTOOLS',\n      options: {\n        temperature: 0.5,\n      },\n      client_feature: 1,\n      functionality_type: 2,\n    });\n    stub.restore();\n  });\n\n  it('adds a model temperature of 0', () => {\n    const stub = getGetHostConfigStub({\n      devToolsConsoleInsights: {\n        enabled: true,\n        aidaTemperature: 0,\n      },\n    });\n    const request = Host.AidaClient.AidaClient.buildConsoleInsightsRequest('foo');\n    assert.deepStrictEqual(request, {\n      input: 'foo',\n      client: 'CHROME_DEVTOOLS',\n      options: {\n        temperature: 0,\n      },\n      client_feature: 1,\n      functionality_type: 2,\n    });\n    stub.restore();\n  });\n\n  it('adds a model id and temperature', () => {\n    const stub = getGetHostConfigStub({\n      devToolsConsoleInsights: {\n        enabled: true,\n        aidaModelId: TEST_MODEL_ID,\n        aidaTemperature: 0.5,\n      },\n    });\n    const request = Host.AidaClient.AidaClient.buildConsoleInsightsRequest('foo');\n    assert.deepStrictEqual(request, {\n      input: 'foo',\n      client: 'CHROME_DEVTOOLS',\n      options: {\n        model_id: TEST_MODEL_ID,\n        temperature: 0.5,\n      },\n      client_feature: 1,\n      functionality_type: 2,\n    });\n    stub.restore();\n  });\n\n  it('adds metadata to disallow logging', () => {\n    const stub = getGetHostConfigStub({\n      devToolsConsoleInsights: {\n        enabled: true,\n        aidaTemperature: 0.5,\n        disallowLogging: true,\n      },\n    });\n    const request = Host.AidaClient.AidaClient.buildConsoleInsightsRequest('foo');\n    assert.deepStrictEqual(request, {\n      input: 'foo',\n      client: 'CHROME_DEVTOOLS',\n      metadata: {\n        disable_user_content_logging: true,\n      },\n      options: {\n        temperature: 0.5,\n      },\n      client_feature: 1,\n      functionality_type: 2,\n    });\n    stub.restore();\n  });\n\n  async function getAllResults(provider: Host.AidaClient.AidaClient): Promise<Host.AidaClient.AidaResponse[]> {\n    const results = [];\n    for await (const result of provider.fetch(Host.AidaClient.AidaClient.buildConsoleInsightsRequest('foo'))) {\n      results.push(result);\n    }\n    return results;\n  }\n\n  it('handles chunked response', async () => {\n    sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'doAidaConversation')\n        .callsFake(async (_, streamId, callback) => {\n          const response = JSON.stringify([\n            {textChunk: {text: 'hello '}, metadata: {rpcGlobalId: 123}},\n            {textChunk: {text: 'brave '}, metadata: {rpcGlobalId: 123}},\n            {textChunk: {text: 'new world!'}},\n          ]);\n          let first = true;\n          for (const chunk of response.split(',{')) {\n            await new Promise(resolve => setTimeout(resolve, 0));\n            Host.ResourceLoader.streamWrite(streamId, first ? chunk : ',{' + chunk);\n            first = false;\n          }\n          callback({statusCode: 200});\n        });\n\n    const provider = new Host.AidaClient.AidaClient();\n    const results = await getAllResults(provider);\n    assert.deepStrictEqual(results, [\n      {explanation: 'hello ', metadata: {rpcGlobalId: 123}},\n      {explanation: 'hello brave ', metadata: {rpcGlobalId: 123}},\n      {explanation: 'hello brave new world!', metadata: {rpcGlobalId: 123}},\n    ]);\n  });\n\n  it('handles single square bracket as a chunk', async () => {\n    sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'doAidaConversation')\n        .callsFake(async (_, streamId, callback) => {\n          const response = ['[', JSON.stringify({textChunk: {text: 'hello world'}, metadata: {rpcGlobalId: 123}}), ']'];\n          for (const chunk of response) {\n            await new Promise(resolve => setTimeout(resolve, 0));\n            Host.ResourceLoader.streamWrite(streamId, chunk);\n          }\n          callback({statusCode: 200});\n        });\n\n    const provider = new Host.AidaClient.AidaClient();\n    const results = await getAllResults(provider);\n    assert.deepStrictEqual(results, [\n      {explanation: 'hello world', metadata: {rpcGlobalId: 123}},\n    ]);\n  });\n\n  it('handles chunked response with multiple objects per chunk', async () => {\n    sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'doAidaConversation')\n        .callsFake(async (_, streamId, callback) => {\n          const response = JSON.stringify([\n            {textChunk: {text: 'Friends, Romans, countrymen, lend me your ears;\\n'}, metadata: {rpcGlobalId: 123}},\n            {textChunk: {text: 'I come to bury Caesar, not to praise him.\\n'}, metadata: {rpcGlobalId: 123}},\n            {textChunk: {text: 'The evil that men do lives after them;\\n'}, metadata: {rpcGlobalId: 123}},\n            {textChunk: {text: 'The good is oft interred with their bones;\\n'}, metadata: {rpcGlobalId: 123}},\n            {textChunk: {text: 'So let it be with Caesar. The noble Brutus\\n'}, metadata: {rpcGlobalId: 123}},\n            {textChunk: {text: 'Hath told you Caesar was ambitious:\\n'}, metadata: {rpcGlobalId: 123}},\n            {textChunk: {text: 'If it were so, it was a grievous fault,\\n'}, metadata: {rpcGlobalId: 123}},\n            {textChunk: {text: 'And grievously hath Caesar answer’d it.\\n'}, metadata: {rpcGlobalId: 123}},\n          ]);\n          const chunks = response.split(',{');\n          await new Promise(resolve => setTimeout(resolve, 0));\n          Host.ResourceLoader.streamWrite(streamId, chunks[0] + ',{' + chunks[1]);\n          await new Promise(resolve => setTimeout(resolve, 0));\n          Host.ResourceLoader.streamWrite(streamId, ',{' + chunks[2] + ',{' + chunks[3] + ',{' + chunks[4]);\n          await new Promise(resolve => setTimeout(resolve, 0));\n          Host.ResourceLoader.streamWrite(streamId, ',{' + chunks[5]);\n          await new Promise(resolve => setTimeout(resolve, 0));\n          Host.ResourceLoader.streamWrite(streamId, ',{' + chunks[6] + ',{' + chunks[7]);\n          callback({statusCode: 200});\n        });\n\n    const provider = new Host.AidaClient.AidaClient();\n    const results = await getAllResults(provider);\n    assert.deepStrictEqual(results, [\n      {\n        explanation: 'Friends, Romans, countrymen, lend me your ears;\\n' +\n            'I come to bury Caesar, not to praise him.\\n',\n        metadata: {rpcGlobalId: 123},\n      },\n      {\n        explanation: 'Friends, Romans, countrymen, lend me your ears;\\n' +\n            'I come to bury Caesar, not to praise him.\\n' +\n            'The evil that men do lives after them;\\n' +\n            'The good is oft interred with their bones;\\n' +\n            'So let it be with Caesar. The noble Brutus\\n',\n        metadata: {rpcGlobalId: 123},\n      },\n      {\n        explanation: 'Friends, Romans, countrymen, lend me your ears;\\n' +\n            'I come to bury Caesar, not to praise him.\\n' +\n            'The evil that men do lives after them;\\n' +\n            'The good is oft interred with their bones;\\n' +\n            'So let it be with Caesar. The noble Brutus\\n' +\n            'Hath told you Caesar was ambitious:\\n',\n        metadata: {rpcGlobalId: 123},\n      },\n      {\n        explanation: 'Friends, Romans, countrymen, lend me your ears;\\n' +\n            'I come to bury Caesar, not to praise him.\\n' +\n            'The evil that men do lives after them;\\n' +\n            'The good is oft interred with their bones;\\n' +\n            'So let it be with Caesar. The noble Brutus\\n' +\n            'Hath told you Caesar was ambitious:\\n' +\n            'If it were so, it was a grievous fault,\\n' +\n            'And grievously hath Caesar answer’d it.\\n',\n        metadata: {rpcGlobalId: 123},\n      },\n    ]);\n  });\n\n  it('handles attributionMetadata', async () => {\n    sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'doAidaConversation')\n        .callsFake(async (_, streamId, callback) => {\n          const response = JSON.stringify([\n            {\n              textChunk: {text: 'Chunk1\\n'},\n              metadata: {rpcGlobalId: 123, attributionMetadata: {attributionAction: 'BLOCK', citations: []}},\n            },\n            {\n              textChunk: {text: 'Chunk2\\n'},\n              metadata: {\n                rpcGlobalId: 123,\n                attributionMetadata:\n                    {attributionAction: 'CITE', citations: [{startIndex: 0, endIndex: 1, url: 'https://example.com'}]},\n              },\n            },\n          ]);\n          const chunks = response.split(',{');\n          await new Promise(resolve => setTimeout(resolve, 0));\n          Host.ResourceLoader.streamWrite(streamId, chunks[0] + ',{' + chunks[1]);\n          await new Promise(resolve => setTimeout(resolve, 0));\n          callback({statusCode: 200});\n        });\n\n    const provider = new Host.AidaClient.AidaClient();\n    const results = await getAllResults(provider);\n    assert.deepStrictEqual(results, [\n      {\n        explanation: 'Chunk1\\n' +\n            'Chunk2\\n',\n        metadata: {\n          rpcGlobalId: 123,\n          attributionMetadata: [\n            {attributionAction: Host.AidaClient.RecitationAction.BLOCK, citations: []},\n            {\n              attributionAction: Host.AidaClient.RecitationAction.CITE,\n              citations: [{startIndex: 0, endIndex: 1, url: 'https://example.com'}],\n            },\n          ],\n        },\n      },\n    ]);\n  });\n\n  it('handles subsequent code chunks', async () => {\n    sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'doAidaConversation')\n        .callsFake(async (_, streamId, callback) => {\n          const response = JSON.stringify([\n            {textChunk: {text: 'hello '}},\n            {codeChunk: {code: 'brave '}},\n            {codeChunk: {code: 'new World()'}},\n          ]);\n          for (const chunk of response.split(',')) {\n            await new Promise(resolve => setTimeout(resolve, 0));\n            Host.ResourceLoader.streamWrite(streamId, chunk);\n          }\n          callback({statusCode: 200});\n        });\n\n    const provider = new Host.AidaClient.AidaClient();\n    const results = (await getAllResults(provider)).map(r => r.explanation);\n    assert.deepStrictEqual(\n        results, ['hello ', 'hello \\n`````\\nbrave \\n`````\\n', 'hello \\n`````\\nbrave new World()\\n`````\\n']);\n  });\n\n  it('throws a readable error on 403', async () => {\n    sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'doAidaConversation').callsArgWith(2, {\n      'statusCode': 403,\n    });\n    const provider = new Host.AidaClient.AidaClient();\n    try {\n      await getAllResults(provider);\n      expect.fail('provider.fetch did not throw');\n    } catch (err) {\n      expect(err.message).equals('Server responded: permission denied');\n    }\n  });\n\n  it('throws an error for other codes', async () => {\n    sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'doAidaConversation').callsArgWith(2, {\n      'statusCode': 418,\n    });\n    const provider = new Host.AidaClient.AidaClient();\n    try {\n      await getAllResults(provider);\n      expect.fail('provider.fetch did not throw');\n    } catch (err) {\n      expect(err.message).equals('Request failed: {\"statusCode\":418}');\n    }\n  });\n\n  it('throws an error with all details for other failures', async () => {\n    sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'doAidaConversation').callsArgWith(2, {\n      'error': 'Cannot get OAuth credentials',\n      'detail': '{\\'@type\\': \\'type.googleapis.com/google.rpc.DebugInfo\\', \\'detail\\': \\'DETAILS\\'}',\n    });\n    const provider = new Host.AidaClient.AidaClient();\n    try {\n      await getAllResults(provider);\n      expect.fail('provider.fetch did not throw');\n    } catch (err) {\n      expect(err.message)\n          .equals(\n              'Cannot send request: Cannot get OAuth credentials {\\'@type\\': \\'type.googleapis.com/google.rpc.DebugInfo\\', \\'detail\\': \\'DETAILS\\'}');\n    }\n  });\n\n  describe('getAidaClientAvailability', () => {\n    function mockGetSyncInformation(information: Host.InspectorFrontendHostAPI.SyncInformation): void {\n      sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'getSyncInformation').callsFake(cb => {\n        cb(information);\n      });\n    }\n\n    beforeEach(() => {\n      sinon.restore();\n    });\n\n    it('should return NO_INTERNET when navigator is not online', async () => {\n      const navigatorDescriptor = Object.getOwnPropertyDescriptor(globalThis, 'navigator')!;\n      Object.defineProperty(globalThis, 'navigator', {\n        get() {\n          return {onLine: false};\n        },\n      });\n\n      try {\n        const result = await Host.AidaClient.AidaClient.checkAccessPreconditions();\n        assert.strictEqual(result, Host.AidaClient.AidaAccessPreconditions.NO_INTERNET);\n      } finally {\n        Object.defineProperty(globalThis, 'navigator', navigatorDescriptor);\n      }\n    });\n\n    it('should return NO_ACCOUNT_EMAIL when the syncInfo doesn\\'t contain accountEmail', async () => {\n      mockGetSyncInformation({accountEmail: undefined, isSyncActive: true});\n\n      const result = await Host.AidaClient.AidaClient.checkAccessPreconditions();\n\n      assert.strictEqual(result, Host.AidaClient.AidaAccessPreconditions.NO_ACCOUNT_EMAIL);\n    });\n\n    it('should return NO_ACTIVE_SYNC when the syncInfo.isSyncActive is not true', async () => {\n      mockGetSyncInformation({accountEmail: 'some-email', isSyncActive: false});\n\n      const result = await Host.AidaClient.AidaClient.checkAccessPreconditions();\n\n      assert.strictEqual(result, Host.AidaClient.AidaAccessPreconditions.NO_ACTIVE_SYNC);\n    });\n\n    it('should return AVAILABLE when navigator is online, accountEmail exists and isSyncActive is true', async () => {\n      mockGetSyncInformation({accountEmail: 'some-email', isSyncActive: true});\n\n      const result = await Host.AidaClient.AidaClient.checkAccessPreconditions();\n\n      assert.strictEqual(result, Host.AidaClient.AidaAccessPreconditions.AVAILABLE);\n    });\n  });\n\n  describe('registerClientEvent', () => {\n    it('should populate the default value for Aida Client event', async () => {\n      const stub = sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'registerAidaClientEvent');\n      const RPC_ID = 0;\n\n      const provider = new Host.AidaClient.AidaClient();\n      void provider.registerClientEvent({\n        corresponding_aida_rpc_global_id: RPC_ID,\n        disable_user_content_logging: false,\n        do_conversation_client_event: {user_feedback: {sentiment: Host.AidaClient.Rating.POSITIVE}},\n      });\n      const arg = JSON.parse(stub.getCalls()[0].args[0]);\n\n      sinon.assert.match(arg, sinon.match({\n        client: Host.AidaClient.CLIENT_NAME,\n        event_time: sinon.match.string,\n        corresponding_aida_rpc_global_id: RPC_ID,\n        do_conversation_client_event: {\n          user_feedback: {\n            sentiment: 'POSITIVE',\n          },\n        },\n      }));\n    });\n  });\n});\n"]}