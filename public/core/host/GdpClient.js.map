{"version":3,"file":"GdpClient.js","sourceRoot":"","sources":["../../../../../../front_end/core/host/GdpClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Root from '../root/root.js';\n\nimport {InspectorFrontendHostInstance} from './InspectorFrontendHost.js';\nimport type {DispatchHttpRequestRequest, DispatchHttpRequestResult} from './InspectorFrontendHostAPI.js';\n\nexport enum SubscriptionStatus {\n  ENABLED = 'SUBSCRIPTION_STATE_ENABLED',\n  PENDING = 'SUBSCRIPTION_STATE_PENDING',\n  CANCELED = 'SUBSCRIPTION_STATE_CANCELED',\n  REFUNDED = 'SUBSCRIPTION_STATE_REFUNDED',\n  AWAITING_FIX = 'SUBSCRIPTION_STATE_AWAITING_FIX',\n  ON_HOLD = 'SUBSCRIPTION_STATE_ACCOUNT_ON_HOLD',\n}\n\nexport enum SubscriptionTier {\n  PREMIUM_ANNUAL = 'SUBSCRIPTION_TIER_PREMIUM_ANNUAL',\n  PREMIUM_MONTHLY = 'SUBSCRIPTION_TIER_PREMIUM_MONTHLY',\n  PRO_ANNUAL = 'SUBSCRIPTION_TIER_PRO_ANNUAL',\n  PRO_MONTHLY = 'SUBSCRIPTION_TIER_PRO_MONTHLY',\n}\n\nexport enum EligibilityStatus {\n  ELIGIBLE = 'ELIGIBLE',\n  NOT_ELIGIBLE = 'NOT_ELIGIBLE',\n}\n\nexport enum EmailPreference {\n  ENABLED = 'ENABLED',\n  DISABLED = 'DISABLED',\n}\n\ninterface CheckElibigilityResponse {\n  createProfile: EligibilityStatus;\n}\n\ninterface BatchGetAwardsResponse {\n  awards?: Award[];\n}\n\nexport interface Award {\n  name: string;\n  badge: {\n    title: string,\n    description: string,\n    imageUri: string,\n    deletableByUser: boolean,\n  };\n  title: string;\n  description: string;\n  imageUri: string;\n  createTime: string;\n  awardingUri: string;\n}\n\nexport interface Profile {\n  // Resource name of the profile.\n  // Format: profiles/{obfuscated_profile_id}\n  name: string;\n  activeSubscription?: {\n    subscriptionStatus: SubscriptionStatus,\n    // To ensure forward compatibility, we accept any string, allowing the server to\n    // introduce new subscription tiers without breaking older clients.\n    subscriptionTier: SubscriptionTier|string,\n  };\n}\n\ninterface InitializeResult {\n  hasProfile: boolean;\n  isEligible: boolean;\n}\n\n// The `batchGet` awards endpoint returns badge names with an\n// obfuscated user ID (e.g., `profiles/12345/awards/badge-name`).\n// This function normalizes them to use `me` instead of the ID\n// (e.g., `profiles/me/awards/badge-path`) to match the format\n// used for client-side requests.\nfunction normalizeBadgeName(name: string): string {\n  return name.replace(/profiles\\/[^/]+\\/awards\\//, 'profiles/me/awards/');\n}\n\nexport const GOOGLE_DEVELOPER_PROGRAM_PROFILE_LINK = 'https://developers.google.com/profile/u/me';\n\nasync function makeHttpRequest<R extends object>(request: DispatchHttpRequestRequest): Promise<R|null> {\n  if (!isGdpProfilesAvailable()) {\n    return null;\n  }\n\n  const response = await new Promise<DispatchHttpRequestResult>(resolve => {\n    InspectorFrontendHostInstance.dispatchHttpRequest(request, resolve);\n  });\n\n  debugLog({request, response});\n  if ('response' in response && response.statusCode === 200) {\n    return JSON.parse(response.response) as R;\n  }\n\n  return null;\n}\n\nconst SERVICE_NAME = 'gdpService';\nlet gdpClientInstance: GdpClient|null = null;\nexport class GdpClient {\n  #cachedProfilePromise?: Promise<Profile|null>;\n  #cachedEligibilityPromise?: Promise<CheckElibigilityResponse|null>;\n\n  private constructor() {\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): GdpClient {\n    if (!gdpClientInstance || forceNew) {\n      gdpClientInstance = new GdpClient();\n    }\n    return gdpClientInstance;\n  }\n\n  async initialize(): Promise<InitializeResult> {\n    const profile = await this.getProfile();\n    if (profile) {\n      return {\n        hasProfile: true,\n        isEligible: true,\n      };\n    }\n\n    const isEligible = await this.isEligibleToCreateProfile();\n    return {\n      hasProfile: false,\n      isEligible,\n    };\n  }\n\n  async getProfile(): Promise<Profile|null> {\n    if (this.#cachedProfilePromise) {\n      return await this.#cachedProfilePromise;\n    }\n\n    this.#cachedProfilePromise = makeHttpRequest({\n      service: SERVICE_NAME,\n      path: '/v1beta1/profile:get',\n      method: 'GET',\n    });\n\n    const profile = await this.#cachedProfilePromise;\n    if (profile) {\n      this.#cachedEligibilityPromise = Promise.resolve({createProfile: EligibilityStatus.ELIGIBLE});\n    }\n    return profile;\n  }\n\n  async checkEligibility(): Promise<CheckElibigilityResponse|null> {\n    if (this.#cachedEligibilityPromise) {\n      return await this.#cachedEligibilityPromise;\n    }\n\n    this.#cachedEligibilityPromise =\n        makeHttpRequest({service: SERVICE_NAME, path: '/v1beta1/eligibility:check', method: 'GET'});\n\n    return await this.#cachedEligibilityPromise;\n  }\n\n  /**\n   * @returns null if the request fails, the awarded badge names otherwise.\n   */\n  async getAwardedBadgeNames({names}: {names: string[]}): Promise<Set<string>|null> {\n    const result = await makeHttpRequest<BatchGetAwardsResponse>({\n      service: SERVICE_NAME,\n      path: '/v1beta1/profiles/me/awards:batchGet',\n      method: 'GET',\n      queryParams: {\n        allowMissing: 'true',\n        names,\n      }\n    });\n\n    if (!result) {\n      return null;\n    }\n\n    return new Set(result.awards?.map(award => normalizeBadgeName(award.name)) ?? []);\n  }\n\n  async isEligibleToCreateProfile(): Promise<boolean> {\n    return (await this.checkEligibility())?.createProfile === EligibilityStatus.ELIGIBLE;\n  }\n\n  async createProfile({user, emailPreference}: {user: string, emailPreference: EmailPreference}):\n      Promise<Profile|null> {\n    const result = await makeHttpRequest<Profile>({\n      service: SERVICE_NAME,\n      path: '/v1beta1/profiles',\n      method: 'POST',\n      body: JSON.stringify({\n        user,\n        newsletter_email: emailPreference,\n      }),\n    });\n    if (result) {\n      this.#clearCache();\n    }\n    return result;\n  }\n\n  #clearCache(): void {\n    this.#cachedProfilePromise = undefined;\n    this.#cachedEligibilityPromise = undefined;\n  }\n\n  createAward({name}: {name: string}): Promise<Award|null> {\n    return makeHttpRequest({\n      service: SERVICE_NAME,\n      path: '/v1beta1/profiles/me/awards',\n      method: 'POST',\n      body: JSON.stringify({\n        awardingUri: 'devtools://devtools',\n        name,\n      })\n    });\n  }\n}\n\nfunction isDebugMode(): boolean {\n  return Boolean(localStorage.getItem('debugGdpIntegrationEnabled'));\n}\n\nfunction debugLog(...log: unknown[]): void {\n  if (!isDebugMode()) {\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.log('debugLog', ...log);\n}\n\nfunction setDebugGdpIntegrationEnabled(enabled: boolean): void {\n  if (enabled) {\n    localStorage.setItem('debugGdpIntegrationEnabled', 'true');\n  } else {\n    localStorage.removeItem('debugGdpIntegrationEnabled');\n  }\n}\n\nexport function isGdpProfilesAvailable(): boolean {\n  const isBaseFeatureEnabled = Boolean(Root.Runtime.hostConfig.devToolsGdpProfiles?.enabled);\n  const isBrandedBuild = Boolean(Root.Runtime.hostConfig.devToolsGdpProfilesAvailability?.enabled);\n  const isOffTheRecordProfile = Root.Runtime.hostConfig.isOffTheRecord;\n  const isDisabledByEnterprisePolicy =\n      getGdpProfilesEnterprisePolicy() === Root.Runtime.GdpProfilesEnterprisePolicyValue.DISABLED;\n  return isBaseFeatureEnabled && isBrandedBuild && !isOffTheRecordProfile && !isDisabledByEnterprisePolicy;\n}\n\nexport function getGdpProfilesEnterprisePolicy(): Root.Runtime.GdpProfilesEnterprisePolicyValue {\n  return (\n      Root.Runtime.hostConfig.devToolsGdpProfilesAvailability?.enterprisePolicyValue ??\n      Root.Runtime.GdpProfilesEnterprisePolicyValue.DISABLED);\n}\n\n// @ts-expect-error\nglobalThis.setDebugGdpIntegrationEnabled = setDebugGdpIntegrationEnabled;\n"]}