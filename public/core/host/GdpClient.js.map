{"version":3,"file":"GdpClient.js","sourceRoot":"","sources":["../../../../../../front_end/core/host/GdpClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Root from '../root/root.js';\n\nimport {InspectorFrontendHostInstance} from './InspectorFrontendHost.js';\nimport type {DispatchHttpRequestRequest, DispatchHttpRequestResult} from './InspectorFrontendHostAPI.js';\n\nexport enum SubscriptionStatus {\n  ENABLED = 'SUBSCRIPTION_STATE_ENABLED',\n  PENDING = 'SUBSCRIPTION_STATE_PENDING',\n  CANCELED = 'SUBSCRIPTION_STATE_CANCELED',\n  REFUNDED = 'SUBSCRIPTION_STATE_REFUNDED',\n  AWAITING_FIX = 'SUBSCRIPTION_STATE_AWAITING_FIX',\n  ON_HOLD = 'SUBSCRIPTION_STATE_ACCOUNT_ON_HOLD',\n}\n\nexport enum SubscriptionTier {\n  PREMIUM_ANNUAL = 'SUBSCRIPTION_TIER_PREMIUM_ANNUAL',\n  PREMIUM_MONTHLY = 'SUBSCRIPTION_TIER_PREMIUM_MONTHLY',\n  PRO_ANNUAL = 'SUBSCRIPTION_TIER_PRO_ANNUAL',\n  PRO_MONTHLY = 'SUBSCRIPTION_TIER_PRO_MONTHLY',\n}\n\nexport enum EligibilityStatus {\n  ELIGIBLE = 'ELIGIBLE',\n  NOT_ELIGIBLE = 'NOT_ELIGIBLE',\n}\n\nexport enum EmailPreference {\n  ENABLED = 'ENABLED',\n  DISABLED = 'DISABLED',\n}\n\ninterface CheckElibigilityResponse {\n  createProfile: EligibilityStatus;\n}\n\ninterface BatchGetAwardsResponse {\n  awards?: Award[];\n}\n\nexport interface Award {\n  name: string;\n  badge: {\n    title: string,\n    description: string,\n    imageUri: string,\n    deletableByUser: boolean,\n  };\n  title: string;\n  description: string;\n  imageUri: string;\n  createTime: string;\n  awardingUri: string;\n}\n\nexport interface Profile {\n  // Resource name of the profile.\n  // Format: profiles/{obfuscated_profile_id}\n  name: string;\n  activeSubscription?: {\n    subscriptionStatus: SubscriptionStatus,\n    // To ensure forward compatibility, we accept any string, allowing the server to\n    // introduce new subscription tiers without breaking older clients.\n    subscriptionTier: SubscriptionTier|string,\n  };\n}\n\nexport interface GetProfileResponse {\n  profile: Profile|null;\n  isEligible: boolean;\n}\n\nexport enum GdpErrorType {\n  HTTP_RESPONSE_UNAVAILABLE = 'HTTP_RESPONSE_UNAVAILABLE',\n  NOT_FOUND = 'NOT_FOUND',\n}\n\nclass GdpError extends Error {\n  constructor(readonly type: GdpErrorType, options?: ErrorOptions) {\n    super(undefined, options);\n  }\n}\n\n/**\n * The `batchGet` awards endpoint returns badge names with an\n * obfuscated user ID (e.g., `profiles/12345/awards/badge-name`).\n * This function normalizes them to use `me` instead of the ID\n * (e.g., `profiles/me/awards/badge-path`) to match the format\n * used for client-side requests.\n **/\nfunction normalizeBadgeName(name: string): string {\n  return name.replace(/profiles\\/[^/]+\\/awards\\//, 'profiles/me/awards/');\n}\n\nexport const GOOGLE_DEVELOPER_PROGRAM_PROFILE_LINK = 'https://developers.google.com/profile/u/me';\n\nasync function makeHttpRequest<R>(request: DispatchHttpRequestRequest): Promise<R> {\n  if (!isGdpProfilesAvailable()) {\n    throw new GdpError(GdpErrorType.HTTP_RESPONSE_UNAVAILABLE);\n  }\n\n  const response = await new Promise<DispatchHttpRequestResult>(resolve => {\n    InspectorFrontendHostInstance.dispatchHttpRequest(request, resolve);\n  });\n\n  debugLog({request, response});\n  if (response.statusCode === 404) {\n    throw new GdpError(GdpErrorType.NOT_FOUND);\n  }\n\n  if ('response' in response && response.statusCode === 200) {\n    try {\n      return JSON.parse(response.response) as R;\n    } catch (err) {\n      throw new GdpError(GdpErrorType.HTTP_RESPONSE_UNAVAILABLE, {cause: err});\n    }\n  }\n\n  throw new GdpError(GdpErrorType.HTTP_RESPONSE_UNAVAILABLE);\n}\n\nconst SERVICE_NAME = 'gdpService';\nlet gdpClientInstance: GdpClient|null = null;\nexport class GdpClient {\n  #cachedProfilePromise?: Promise<Profile>;\n  #cachedEligibilityPromise?: Promise<CheckElibigilityResponse>;\n\n  private constructor() {\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): GdpClient {\n    if (!gdpClientInstance || forceNew) {\n      gdpClientInstance = new GdpClient();\n    }\n    return gdpClientInstance;\n  }\n\n  /**\n   * Fetches the user's GDP profile and eligibility status.\n   *\n   * It first attempts to fetch the profile. If the profile is not found\n   * (a `NOT_FOUND` error), this is handled gracefully by treating the profile\n   * as `null` and then proceeding to check for eligibility.\n   *\n   * @returns A promise that resolves with an object containing the `profile`\n   * and `isEligible` status, or `null` if an unexpected error occurs.\n   */\n  async getProfile(): Promise<GetProfileResponse|null> {\n    try {\n      const profile = await this.#getProfile();\n      return {\n        profile,\n        isEligible: true,\n      };\n    } catch (err: unknown) {\n      if (err instanceof GdpError && err.type === GdpErrorType.HTTP_RESPONSE_UNAVAILABLE) {\n        return null;\n      }\n    }\n\n    try {\n      const checkEligibilityResponse = await this.#checkEligibility();\n      return {\n        profile: null,\n        isEligible: checkEligibilityResponse.createProfile === EligibilityStatus.ELIGIBLE,\n      };\n    } catch {\n      return null;\n    }\n  }\n\n  async #getProfile(): Promise<Profile> {\n    if (this.#cachedProfilePromise) {\n      return await this.#cachedProfilePromise;\n    }\n\n    this.#cachedProfilePromise = makeHttpRequest<Profile>({\n                                   service: SERVICE_NAME,\n                                   path: '/v1beta1/profile:get',\n                                   method: 'GET',\n                                 }).then(profile => {\n      this.#cachedEligibilityPromise = Promise.resolve({createProfile: EligibilityStatus.ELIGIBLE});\n      return profile;\n    });\n\n    return await this.#cachedProfilePromise;\n  }\n\n  async #checkEligibility(): Promise<CheckElibigilityResponse> {\n    if (this.#cachedEligibilityPromise) {\n      return await this.#cachedEligibilityPromise;\n    }\n\n    this.#cachedEligibilityPromise =\n        makeHttpRequest({service: SERVICE_NAME, path: '/v1beta1/eligibility:check', method: 'GET'});\n\n    return await this.#cachedEligibilityPromise;\n  }\n\n  /**\n   * @returns null if the request fails, the awarded badge names otherwise.\n   */\n  async getAwardedBadgeNames({names}: {names: string[]}): Promise<Set<string>|null> {\n    try {\n      const response = await makeHttpRequest<BatchGetAwardsResponse>({\n        service: SERVICE_NAME,\n        path: '/v1beta1/profiles/me/awards:batchGet',\n        method: 'GET',\n        queryParams: {\n          allowMissing: 'true',\n          names,\n        }\n      });\n\n      return new Set(response.awards?.map(award => normalizeBadgeName(award.name)) ?? []);\n    } catch {\n      return null;\n    }\n  }\n\n  async createProfile({user, emailPreference}: {user: string, emailPreference: EmailPreference}):\n      Promise<Profile|null> {\n    try {\n      const response = await makeHttpRequest<Profile>({\n        service: SERVICE_NAME,\n        path: '/v1beta1/profiles',\n        method: 'POST',\n        body: JSON.stringify({\n          user,\n          newsletter_email: emailPreference,\n        }),\n      });\n      this.#clearCache();\n      return response;\n    } catch {\n      return null;\n    }\n  }\n\n  #clearCache(): void {\n    this.#cachedProfilePromise = undefined;\n    this.#cachedEligibilityPromise = undefined;\n  }\n\n  async createAward({name}: {name: string}): Promise<Award|null> {\n    try {\n      const response = await makeHttpRequest<Award>({\n        service: SERVICE_NAME,\n        path: '/v1beta1/profiles/me/awards',\n        method: 'POST',\n        body: JSON.stringify({\n          awardingUri: 'devtools://devtools',\n          name,\n        })\n      });\n      return response;\n    } catch {\n      return null;\n    }\n  }\n}\n\nfunction isDebugMode(): boolean {\n  return Boolean(localStorage.getItem('debugGdpIntegrationEnabled'));\n}\n\nfunction debugLog(...log: unknown[]): void {\n  if (!isDebugMode()) {\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.log('debugLog', ...log);\n}\n\nfunction setDebugGdpIntegrationEnabled(enabled: boolean): void {\n  if (enabled) {\n    localStorage.setItem('debugGdpIntegrationEnabled', 'true');\n  } else {\n    localStorage.removeItem('debugGdpIntegrationEnabled');\n  }\n}\n\nexport function isGdpProfilesAvailable(): boolean {\n  const isBaseFeatureEnabled = Boolean(Root.Runtime.hostConfig.devToolsGdpProfiles?.enabled);\n  const isBrandedBuild = Boolean(Root.Runtime.hostConfig.devToolsGdpProfilesAvailability?.enabled);\n  const isOffTheRecordProfile = Root.Runtime.hostConfig.isOffTheRecord;\n  const isDisabledByEnterprisePolicy =\n      getGdpProfilesEnterprisePolicy() === Root.Runtime.GdpProfilesEnterprisePolicyValue.DISABLED;\n  return isBaseFeatureEnabled && isBrandedBuild && !isOffTheRecordProfile && !isDisabledByEnterprisePolicy;\n}\n\nexport function getGdpProfilesEnterprisePolicy(): Root.Runtime.GdpProfilesEnterprisePolicyValue {\n  return (\n      Root.Runtime.hostConfig.devToolsGdpProfilesAvailability?.enterprisePolicyValue ??\n      Root.Runtime.GdpProfilesEnterprisePolicyValue.DISABLED);\n}\n\nexport function isBadgesEnabled(): boolean {\n  const isBadgesEnabledByEnterprisePolicy =\n      getGdpProfilesEnterprisePolicy() === Root.Runtime.GdpProfilesEnterprisePolicyValue.ENABLED;\n  const isBadgesEnabledByFeatureFlag = Boolean(Root.Runtime.hostConfig.devToolsGdpProfiles?.badgesEnabled);\n  return isBadgesEnabledByEnterprisePolicy && isBadgesEnabledByFeatureFlag;\n}\n\nexport function isStarterBadgeEnabled(): boolean {\n  return Boolean(Root.Runtime.hostConfig.devToolsGdpProfiles?.starterBadgeEnabled);\n}\n\n// @ts-expect-error\nglobalThis.setDebugGdpIntegrationEnabled = setDebugGdpIntegrationEnabled;\n"]}