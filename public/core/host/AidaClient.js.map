{"version":3,"file":"AidaClient.js","sourceRoot":"","sources":["../../../../../../front_end/core/host/AidaClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Root from '../root/root.js';\n\nimport {InspectorFrontendHostInstance} from './InspectorFrontendHost.js';\nimport type {AidaClientResult, SyncInformation} from './InspectorFrontendHostAPI.js';\nimport {bindOutputStream} from './ResourceLoader.js';\n\nexport enum Role {\n  /** Provide this role when giving a function call response  */\n  ROLE_UNSPECIFIED = 0,\n  /** Tags the content came from the user */\n  USER = 1,\n  /** Tags the content came from the LLM */\n  MODEL = 2,\n}\n\nexport const enum Rating {\n  // Resets the vote to null in the logs\n  SENTIMENT_UNSPECIFIED = 'SENTIMENT_UNSPECIFIED',\n  POSITIVE = 'POSITIVE',\n  NEGATIVE = 'NEGATIVE',\n}\n\n/**\n * A `Content` represents a single turn message.\n */\nexport interface Content {\n  parts: Part[];\n  /** The producer of the content. */\n  role: Role;\n}\n\nexport type Part = {\n  text: string,\n}|{\n  functionCall: {\n    name: string,\n    args: Record<string, unknown>,\n  },\n}|{\n  functionResponse: {\n    name: string,\n    response: Record<string, unknown>,\n  },\n}|{\n  /** Inline media bytes. */\n  inlineData: MediaBlob,\n};\n\nexport const enum ParametersTypes {\n  STRING = 1,\n  NUMBER = 2,\n  INTEGER = 3,\n  BOOLEAN = 4,\n  ARRAY = 5,\n  OBJECT = 6,\n}\n\ninterface BaseFunctionParam {\n  description: string;\n  nullable?: boolean;\n}\n\nexport interface FunctionPrimitiveParams extends BaseFunctionParam {\n  type: ParametersTypes.BOOLEAN|ParametersTypes.INTEGER|ParametersTypes.STRING|ParametersTypes.BOOLEAN;\n}\n\ninterface FunctionArrayParam extends BaseFunctionParam {\n  type: ParametersTypes.ARRAY;\n  items: FunctionPrimitiveParams;\n}\n\nexport interface FunctionObjectParam<T extends string|number|symbol = string> extends BaseFunctionParam {\n  type: ParametersTypes.OBJECT;\n  // TODO: this can be also be ObjectParams\n  properties: Record<T, FunctionPrimitiveParams|FunctionArrayParam>;\n}\n\n/**\n * More about function declaration can be read at\n * https://ai.google.dev/gemini-api/docs/function-calling\n */\nexport interface FunctionDeclaration<T extends string|number|symbol = string> {\n  name: string;\n  /**\n   * A description for the LLM to understand what the specific function will do once called.\n   */\n  description: string;\n  parameters: FunctionObjectParam<T>;\n}\n\n// Raw media bytes.\nexport interface MediaBlob {\n  // The IANA standard MIME type of the source data.\n  // Currently supported types are: image/png, image/jpeg.\n  // Format: base64-encoded\n  // For reference: google3/google/x/pitchfork/aida/v1/content.proto\n  mimeType: string;\n  data: string;\n}\n\nexport enum FunctionalityType {\n  // Unspecified functionality type.\n  FUNCTIONALITY_TYPE_UNSPECIFIED = 0,\n  // The generic AI chatbot functionality.\n  CHAT = 1,\n  // The explain error functionality.\n  EXPLAIN_ERROR = 2,\n  AGENTIC_CHAT = 5,\n}\n\nexport enum ClientFeature {\n  // Unspecified client feature.\n  CLIENT_FEATURE_UNSPECIFIED = 0,\n  // Chrome console insights feature.\n  CHROME_CONSOLE_INSIGHTS = 1,\n  // Chrome AI Assistance Styling Agent.\n  CHROME_STYLING_AGENT = 2,\n  // Chrome AI Assistance Network Agent.\n  CHROME_NETWORK_AGENT = 7,\n  // Chrome AI Assistance Performance Agent.\n  CHROME_PERFORMANCE_AGENT = 8,\n  // Chrome AI Assistance File Agent.\n  CHROME_FILE_AGENT = 9,\n  // Chrome AI Patch Agent.\n  CHROME_PATCH_AGENT = 12,\n  // Chrome AI Assistance Performance Insights Agent.\n  CHROME_PERFORMANCE_INSIGHTS_AGENT = 14,\n}\n\nexport enum UserTier {\n  // Unspecified user tier.\n  USER_TIER_UNSPECIFIED = 0,\n  // Users who are internal testers.\n  TESTERS = 1,\n  // Users who are early adopters.\n  BETA = 2,\n  // Users in the general public.\n  PUBLIC = 3,\n}\n\nexport type RpcGlobalId = string|number;\n\nexport interface AidaRequest {\n  client: string;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  current_message: Content;\n  preamble?: string;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  historical_contexts?: Content[];\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  function_declarations?: FunctionDeclaration[];\n  options?: {\n    temperature?: number,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    model_id?: string,\n  };\n  metadata: {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    disable_user_content_logging: boolean,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    client_version: string,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    string_session_id?: string,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    user_tier?: UserTier,\n  };\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  functionality_type?: FunctionalityType;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  client_feature?: ClientFeature;\n}\n\nexport interface AidaDoConversationClientEvent {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  corresponding_aida_rpc_global_id: RpcGlobalId;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disable_user_content_logging: boolean;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  do_conversation_client_event: {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    user_feedback: {\n      sentiment?: Rating,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      user_input?: {\n        comment?: string,\n      },\n    },\n  };\n}\n\nexport enum RecitationAction {\n  ACTION_UNSPECIFIED = 'ACTION_UNSPECIFIED',\n  CITE = 'CITE',\n  BLOCK = 'BLOCK',\n  NO_ACTION = 'NO_ACTION',\n  EXEMPT_FOUND_IN_PROMPT = 'EXEMPT_FOUND_IN_PROMPT',\n}\n\nexport enum CitationSourceType {\n  CITATION_SOURCE_TYPE_UNSPECIFIED = 'CITATION_SOURCE_TYPE_UNSPECIFIED',\n  TRAINING_DATA = 'TRAINING_DATA',\n  WORLD_FACTS = 'WORLD_FACTS',\n  LOCAL_FACTS = 'LOCAL_FACTS',\n  INDIRECT = 'INDERECT',\n}\n\nexport interface Citation {\n  startIndex?: number;\n  endIndex?: number;\n  uri?: string;\n  sourceType?: CitationSourceType;\n  repository?: string;\n}\n\nexport interface AttributionMetadata {\n  attributionAction: RecitationAction;\n  citations: Citation[];\n}\n\nexport interface AidaFunctionCallResponse {\n  name: string;\n  args: Record<string, unknown>;\n}\n\nexport interface FactualityFact {\n  sourceUri?: string;\n}\n\nexport interface FactualityMetadata {\n  facts: FactualityFact[];\n}\n\nexport interface AidaResponseMetadata {\n  rpcGlobalId?: RpcGlobalId;\n  attributionMetadata?: AttributionMetadata;\n  factualityMetadata?: FactualityMetadata;\n}\n\nexport interface AidaResponse {\n  explanation: string;\n  metadata: AidaResponseMetadata;\n  functionCalls?: [AidaFunctionCallResponse, ...AidaFunctionCallResponse[]];\n  completed: boolean;\n}\n\nexport const enum AidaAccessPreconditions {\n  AVAILABLE = 'available',\n  NO_ACCOUNT_EMAIL = 'no-account-email',\n  NO_INTERNET = 'no-internet',\n  // This is the state (mostly enterprise) users are in, when they are automatically logged out from\n  // Chrome after a certain time period. For making AIDA requests, they need to log in again.\n  SYNC_IS_PAUSED = 'sync-is-paused',\n}\n\nexport const CLIENT_NAME = 'CHROME_DEVTOOLS';\n\nconst CODE_CHUNK_SEPARATOR = '\\n`````\\n';\n\nexport class AidaAbortError extends Error {}\nexport class AidaBlockError extends Error {}\n\nexport class AidaClient {\n  static buildConsoleInsightsRequest(input: string): AidaRequest {\n    const disallowLogging = Root.Runtime.hostConfig.aidaAvailability?.disallowLogging ?? true;\n    const chromeVersion = Root.Runtime.getChromeVersion();\n    if (!chromeVersion) {\n      throw new Error('Cannot determine Chrome version');\n    }\n    const request: AidaRequest = {\n      current_message: {parts: [{text: input}], role: Role.USER},\n      client: CLIENT_NAME,\n      functionality_type: FunctionalityType.EXPLAIN_ERROR,\n      client_feature: ClientFeature.CHROME_CONSOLE_INSIGHTS,\n      metadata: {\n        disable_user_content_logging: disallowLogging,\n        client_version: chromeVersion,\n      },\n    };\n\n    let temperature = -1;\n    let modelId;\n    if (Root.Runtime.hostConfig.devToolsConsoleInsights?.enabled) {\n      temperature = Root.Runtime.hostConfig.devToolsConsoleInsights.temperature ?? -1;\n      modelId = Root.Runtime.hostConfig.devToolsConsoleInsights.modelId;\n    }\n    if (temperature >= 0) {\n      request.options ??= {};\n      request.options.temperature = temperature;\n    }\n    if (modelId) {\n      request.options ??= {};\n      request.options.model_id = modelId;\n    }\n    return request;\n  }\n\n  static async checkAccessPreconditions(): Promise<AidaAccessPreconditions> {\n    if (!navigator.onLine) {\n      return AidaAccessPreconditions.NO_INTERNET;\n    }\n\n    const syncInfo = await new Promise<SyncInformation>(\n        resolve => InspectorFrontendHostInstance.getSyncInformation(syncInfo => resolve(syncInfo)));\n    if (!syncInfo.accountEmail) {\n      return AidaAccessPreconditions.NO_ACCOUNT_EMAIL;\n    }\n\n    if (syncInfo.isSyncPaused) {\n      return AidaAccessPreconditions.SYNC_IS_PAUSED;\n    }\n\n    return AidaAccessPreconditions.AVAILABLE;\n  }\n\n  async * fetch(request: AidaRequest, options?: {signal?: AbortSignal}): AsyncGenerator<AidaResponse, void, void> {\n    if (!InspectorFrontendHostInstance.doAidaConversation) {\n      throw new Error('doAidaConversation is not available');\n    }\n    const stream = (() => {\n      let {promise, resolve, reject} = Promise.withResolvers<string|null>();\n      options?.signal?.addEventListener('abort', () => {\n        reject(new AidaAbortError());\n      }, {once: true});\n      return {\n        write: async(data: string): Promise<void> => {\n          resolve(data);\n          ({promise, resolve, reject} = Promise.withResolvers<string|null>());\n        },\n        close: async(): Promise<void> => {\n          resolve(null);\n        },\n        read: (): Promise<string|null> => {\n          return promise;\n        },\n        fail: (e: Error) => reject(e),\n      };\n    })();\n    const streamId = bindOutputStream(stream);\n    InspectorFrontendHostInstance.doAidaConversation(JSON.stringify(request), streamId, result => {\n      if (result.statusCode === 403) {\n        stream.fail(new Error('Server responded: permission denied'));\n      } else if (result.error) {\n        stream.fail(new Error(`Cannot send request: ${result.error} ${result.detail || ''}`));\n      } else if (result.netErrorName === 'net::ERR_TIMED_OUT') {\n        stream.fail(new Error('doAidaConversation timed out'));\n      } else if (result.statusCode !== 200) {\n        stream.fail(new Error(`Request failed: ${JSON.stringify(result)}`));\n      } else {\n        void stream.close();\n      }\n    });\n    let chunk;\n    const text = [];\n    let inCodeChunk = false;\n    const functionCalls: AidaFunctionCallResponse[] = [];\n    let metadata: AidaResponseMetadata = {rpcGlobalId: 0};\n    while ((chunk = await stream.read())) {\n      let textUpdated = false;\n      // The AIDA response is a JSON array of objects, split at the object\n      // boundary. Therefore each chunk may start with `[` or `,` and possibly\n      // followed by `]`. Each chunk may include one or more objects, so we\n      // make sure that each chunk becomes a well-formed JSON array when we\n      // parse it by adding `[` and `]` and removing `,` where appropriate.\n      if (!chunk.length) {\n        continue;\n      }\n      if (chunk.startsWith(',')) {\n        chunk = chunk.slice(1);\n      }\n      if (!chunk.startsWith('[')) {\n        chunk = '[' + chunk;\n      }\n      if (!chunk.endsWith(']')) {\n        chunk = chunk + ']';\n      }\n      let results;\n      try {\n        results = JSON.parse(chunk);\n      } catch (error) {\n        throw new Error('Cannot parse chunk: ' + chunk, {cause: error});\n      }\n\n      for (const result of results) {\n        if ('metadata' in result) {\n          metadata = result.metadata;\n          if (metadata?.attributionMetadata?.attributionAction === RecitationAction.BLOCK) {\n            throw new AidaBlockError();\n          }\n        }\n        if ('textChunk' in result) {\n          if (inCodeChunk) {\n            text.push(CODE_CHUNK_SEPARATOR);\n            inCodeChunk = false;\n          }\n          text.push(result.textChunk.text);\n          textUpdated = true;\n        } else if ('codeChunk' in result) {\n          if (!inCodeChunk) {\n            text.push(CODE_CHUNK_SEPARATOR);\n            inCodeChunk = true;\n          }\n          text.push(result.codeChunk.code);\n          textUpdated = true;\n        } else if ('functionCallChunk' in result) {\n          functionCalls.push({\n            name: result.functionCallChunk.functionCall.name,\n            args: result.functionCallChunk.functionCall.args,\n          });\n        } else if ('error' in result) {\n          throw new Error(`Server responded: ${JSON.stringify(result)}`);\n        } else {\n          throw new Error('Unknown chunk result');\n        }\n      }\n      if (textUpdated) {\n        yield {\n          explanation: text.join('') + (inCodeChunk ? CODE_CHUNK_SEPARATOR : ''),\n          metadata,\n          completed: false,\n        };\n      }\n    }\n    yield {\n      explanation: text.join('') + (inCodeChunk ? CODE_CHUNK_SEPARATOR : ''),\n      metadata,\n      functionCalls: functionCalls.length ? functionCalls as [AidaFunctionCallResponse, ...AidaFunctionCallResponse[]] :\n                                            undefined,\n      completed: true,\n    };\n  }\n\n  registerClientEvent(clientEvent: AidaDoConversationClientEvent): Promise<AidaClientResult> {\n    const {promise, resolve} = Promise.withResolvers<AidaClientResult>();\n    InspectorFrontendHostInstance.registerAidaClientEvent(\n        JSON.stringify({\n          client: CLIENT_NAME,\n          event_time: new Date().toISOString(),\n          ...clientEvent,\n        }),\n        resolve,\n    );\n\n    return promise;\n  }\n}\n\nexport function convertToUserTierEnum(userTier: string|undefined): UserTier {\n  if (userTier) {\n    switch (userTier) {\n      case 'TESTERS':\n        return UserTier.TESTERS;\n      case 'BETA':\n        return UserTier.BETA;\n      case 'PUBLIC':\n        return UserTier.PUBLIC;\n    }\n  }\n  return UserTier.BETA;\n}\n\nlet hostConfigTrackerInstance: HostConfigTracker|undefined;\n\nexport class HostConfigTracker extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #pollTimer?: number;\n  #aidaAvailability?: AidaAccessPreconditions;\n\n  private constructor() {\n    super();\n  }\n\n  static instance(): HostConfigTracker {\n    if (!hostConfigTrackerInstance) {\n      hostConfigTrackerInstance = new HostConfigTracker();\n    }\n    return hostConfigTrackerInstance;\n  }\n\n  override addEventListener(eventType: Events, listener: Common.EventTarget.EventListener<EventTypes, Events>):\n      Common.EventTarget.EventDescriptor<EventTypes> {\n    const isFirst = !this.hasEventListeners(eventType);\n    const eventDescriptor = super.addEventListener(eventType, listener);\n    if (isFirst) {\n      window.clearTimeout(this.#pollTimer);\n      void this.pollAidaAvailability();\n    }\n    return eventDescriptor;\n  }\n\n  override removeEventListener(eventType: Events, listener: Common.EventTarget.EventListener<EventTypes, Events>):\n      void {\n    super.removeEventListener(eventType, listener);\n    if (!this.hasEventListeners(eventType)) {\n      window.clearTimeout(this.#pollTimer);\n    }\n  }\n\n  private async pollAidaAvailability(): Promise<void> {\n    this.#pollTimer = window.setTimeout(() => this.pollAidaAvailability(), 2000);\n    const currentAidaAvailability = await AidaClient.checkAccessPreconditions();\n    if (currentAidaAvailability !== this.#aidaAvailability) {\n      this.#aidaAvailability = currentAidaAvailability;\n      const config =\n          await new Promise<Root.Runtime.HostConfig>(resolve => InspectorFrontendHostInstance.getHostConfig(resolve));\n      Object.assign(Root.Runtime.hostConfig, config);\n      this.dispatchEventToListeners(Events.AIDA_AVAILABILITY_CHANGED);\n    }\n  }\n}\n\nexport const enum Events {\n  AIDA_AVAILABILITY_CHANGED = 'aidaAvailabilityChanged',\n}\n\nexport interface EventTypes {\n  [Events.AIDA_AVAILABILITY_CHANGED]: void;\n}\n"]}