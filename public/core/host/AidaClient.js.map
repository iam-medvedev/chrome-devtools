{"version":3,"file":"AidaClient.js","sourceRoot":"","sources":["../../../../../../front_end/core/host/AidaClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\nimport {InspectorFrontendHostInstance} from './InspectorFrontendHost.js';\nimport {bindOutputStream} from './ResourceLoader.js';\n\nexport interface AidaRequest {\n  input: string;\n  client: string;\n  options?: {\n    temperature?: Number,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    model_id?: string,\n  };\n}\n\nexport interface AidaResponse {\n  explanation: string;\n  metadata: {\n    rpcGlobalId?: number,\n  };\n}\n\nexport class AidaClient {\n  static buildApiRequest(input: string): AidaRequest {\n    const request: AidaRequest = {\n      input,\n      client: 'CHROME_DEVTOOLS',\n    };\n    const temperature = parseFloat(Root.Runtime.Runtime.queryParam('aidaTemperature') || '');\n    if (!isNaN(temperature)) {\n      request.options ??= {};\n      request.options.temperature = temperature;\n    }\n    const modelId = Root.Runtime.Runtime.queryParam('aidaModelId');\n    if (modelId) {\n      request.options ??= {};\n      request.options.model_id = modelId;\n    }\n    return request;\n  }\n\n  async * fetch(input: string): AsyncGenerator<AidaResponse, void, void> {\n    if (!InspectorFrontendHostInstance.doAidaConversation) {\n      throw new Error('doAidaConversation is not available');\n    }\n    const stream = (() => {\n      let {promise, resolve, reject} = Platform.PromiseUtilities.promiseWithResolvers<string|null>();\n      return {\n        write: async(data: string): Promise<void> => {\n          resolve(data);\n          ({promise, resolve, reject} = Platform.PromiseUtilities.promiseWithResolvers<string|null>());\n        },\n        close: async(): Promise<void> => {\n          resolve(null);\n        },\n        read: (): Promise<string|null> => {\n          return promise;\n        },\n        fail: (e: Error) => reject(e),\n      };\n    })();\n    const streamId = bindOutputStream(stream);\n    InspectorFrontendHostInstance.doAidaConversation(\n        JSON.stringify(AidaClient.buildApiRequest(input)), streamId, result => {\n          if (result.statusCode === 403) {\n            stream.fail(new Error('Server responded: permission denied'));\n          } else if (result.error) {\n            stream.fail(new Error(`Cannot send request: ${result.error} ${result.detail || ''}`));\n          } else if (result.statusCode !== 200) {\n            stream.fail(new Error(`Request failed: ${JSON.stringify(result)}`));\n          } else {\n            void stream.close();\n          }\n        });\n    let chunk;\n    const text = [];\n    let inCodeChunk = false;\n    while ((chunk = await stream.read())) {\n      if (chunk.endsWith(']')) {\n        chunk = chunk.slice(0, -1);\n      }\n      if (chunk.startsWith(',') || chunk.startsWith('[')) {\n        chunk = chunk.slice(1);\n      }\n      if (!chunk.length) {\n        continue;\n      }\n      const result = JSON.parse(chunk);\n      const CODE_CHUNK_SEPARATOR = '\\n`````\\n';\n      if ('textChunk' in result) {\n        if (inCodeChunk) {\n          text.push(CODE_CHUNK_SEPARATOR);\n          inCodeChunk = false;\n        }\n        text.push(result.textChunk.text);\n      } else if ('codeChunk' in result) {\n        if (!inCodeChunk) {\n          text.push(CODE_CHUNK_SEPARATOR);\n          inCodeChunk = true;\n        }\n        text.push(result.codeChunk.code);\n      } else if ('error' in result) {\n        throw new Error(`Server responded: ${JSON.stringify(result)}`);\n      } else {\n        throw new Error('Unknown chunk result');\n      }\n      yield {\n        explanation: text.join('') + (inCodeChunk ? CODE_CHUNK_SEPARATOR : ''),\n        metadata: {rpcGlobalId: result?.metadata?.rpcGlobalId},\n      };\n    }\n  }\n}\n"]}