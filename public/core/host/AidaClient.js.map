{"version":3,"file":"AidaClient.js","sourceRoot":"","sources":["../../../../../../front_end/core/host/AidaClient.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC;AAC9C,OAAO,KAAK,QAAQ,MAAM,yBAAyB,CAAC;AAEpD,OAAO,EAAC,6BAA6B,EAAC,MAAM,4BAA4B,CAAC;AAEzE,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AAErD,MAAM,CAAN,IAAY,MAIX;AAJD,WAAY,MAAM;IAChB,yCAAW,CAAA;IACX,mCAAQ,CAAA;IACR,uCAAU,CAAA;AACZ,CAAC,EAJW,MAAM,KAAN,MAAM,QAIjB;AAYD,MAAM,CAAN,IAAY,iBAOX;AAPD,WAAY,iBAAiB;IAC3B,kCAAkC;IAClC,6GAAkC,CAAA;IAClC,wCAAwC;IACxC,yDAAQ,CAAA;IACR,mCAAmC;IACnC,2EAAiB,CAAA;AACnB,CAAC,EAPW,iBAAiB,KAAjB,iBAAiB,QAO5B;AAED,MAAM,CAAN,IAAY,aAOX;AAPD,WAAY,aAAa;IACvB,8BAA8B;IAC9B,6FAA8B,CAAA;IAC9B,mCAAmC;IACnC,uFAA2B,CAAA;IAC3B,qBAAqB;IACrB,2EAAqB,CAAA;AACvB,CAAC,EAPW,aAAa,KAAb,aAAa,QAOxB;AA2CD,MAAM,CAAN,IAAY,gBAMX;AAND,WAAY,gBAAgB;IAC1B,6DAAyC,CAAA;IACzC,iCAAa,CAAA;IACb,mCAAe,CAAA;IACf,2CAAuB,CAAA;IACvB,qEAAiD,CAAA;AACnD,CAAC,EANW,gBAAgB,KAAhB,gBAAgB,QAM3B;AA8BD,MAAM,CAAC,MAAM,WAAW,GAAG,iBAAiB,CAAC;AAE7C,MAAM,OAAO,UAAU;IACrB,MAAM,CAAC,2BAA2B,CAAC,KAAa;QAC9C,MAAM,OAAO,GAAgB;YAC3B,KAAK;YACL,MAAM,EAAE,WAAW;YACnB,kBAAkB,EAAE,iBAAiB,CAAC,aAAa;YACnD,cAAc,EAAE,aAAa,CAAC,uBAAuB;SACtD,CAAC;QACF,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,EAAE,CAAC;QACnE,IAAI,WAAW,GAAG,GAAG,CAAC;QACtB,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,IAAI,eAAe,GAAG,KAAK,CAAC;QAC5B,IAAI,MAAM,EAAE,uBAAuB,CAAC,OAAO,EAAE,CAAC;YAC5C,WAAW,GAAG,MAAM,CAAC,uBAAuB,CAAC,eAAe,CAAC;YAC7D,OAAO,GAAG,MAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC;YACrD,eAAe,GAAG,MAAM,CAAC,uBAAuB,CAAC,eAAe,CAAC;QACnE,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC;YACxB,OAAO,CAAC,OAAO,KAAK,EAAE,CAAC;YACvB,OAAO,CAAC,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC;QAC5C,CAAC;QACD,IAAI,OAAO,EAAE,CAAC;YACZ,OAAO,CAAC,OAAO,KAAK,EAAE,CAAC;YACvB,OAAO,CAAC,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC;QACrC,CAAC;QACD,IAAI,eAAe,EAAE,CAAC;YACpB,OAAO,CAAC,QAAQ,GAAG;gBACjB,4BAA4B,EAAE,IAAI;aACnC,CAAC;QACJ,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,wBAAwB;QACnC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;YACtB,+DAA2C;QAC7C,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,IAAI,OAAO,CAC9B,OAAO,CAAC,EAAE,CAAC,6BAA6B,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAChG,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;YAC3B,yEAAgD;QAClD,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;YAC3B,qEAA8C;QAChD,CAAC;QAED,2DAAyC;IAC3C,CAAC;IAED,KAAK,CAAC,CAAE,KAAK,CAAC,OAAoB;QAChC,IAAI,CAAC,6BAA6B,CAAC,kBAAkB,EAAE,CAAC;YACtD,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;QACzD,CAAC;QACD,MAAM,MAAM,GAAG,CAAC,GAAG,EAAE;YACnB,IAAI,EAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAC,GAAG,QAAQ,CAAC,gBAAgB,CAAC,oBAAoB,EAAe,CAAC;YAC/F,OAAO;gBACL,KAAK,EAAE,KAAK,EAAC,IAAY,EAAiB,EAAE;oBAC1C,OAAO,CAAC,IAAI,CAAC,CAAC;oBACd,CAAC,EAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAC,GAAG,QAAQ,CAAC,gBAAgB,CAAC,oBAAoB,EAAe,CAAC,CAAC;gBAC/F,CAAC;gBACD,KAAK,EAAE,KAAK,IAAkB,EAAE;oBAC9B,OAAO,CAAC,IAAI,CAAC,CAAC;gBAChB,CAAC;gBACD,IAAI,EAAE,GAAyB,EAAE;oBAC/B,OAAO,OAAO,CAAC;gBACjB,CAAC;gBACD,IAAI,EAAE,CAAC,CAAQ,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;aAC9B,CAAC;QACJ,CAAC,CAAC,EAAE,CAAC;QACL,MAAM,QAAQ,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAC1C,6BAA6B,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAE;YAC3F,IAAI,MAAM,CAAC,UAAU,KAAK,GAAG,EAAE,CAAC;gBAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC;YAChE,CAAC;iBAAM,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;gBACxB,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,wBAAwB,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,MAAM,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;YACxF,CAAC;iBAAM,IAAI,MAAM,CAAC,UAAU,KAAK,GAAG,EAAE,CAAC;gBACrC,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,mBAAmB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;YACtE,CAAC;iBAAM,CAAC;gBACN,KAAK,MAAM,CAAC,KAAK,EAAE,CAAC;YACtB,CAAC;QACH,CAAC,CAAC,CAAC;QACH,IAAI,KAAK,CAAC;QACV,MAAM,IAAI,GAAG,EAAE,CAAC;QAChB,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,MAAM,QAAQ,GAAyB,EAAC,WAAW,EAAE,CAAC,EAAC,CAAC;QACxD,OAAO,CAAC,KAAK,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC;YACrC,IAAI,WAAW,GAAG,KAAK,CAAC;YACxB,oEAAoE;YACpE,wEAAwE;YACxE,qEAAqE;YACrE,qEAAqE;YACrE,qEAAqE;YACrE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;gBAClB,SAAS;YACX,CAAC;YACD,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC1B,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC;YACD,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC3B,KAAK,GAAG,GAAG,GAAG,KAAK,CAAC;YACtB,CAAC;YACD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gBACzB,KAAK,GAAG,KAAK,GAAG,GAAG,CAAC;YACtB,CAAC;YACD,IAAI,OAAO,CAAC;YACZ,IAAI,CAAC;gBACH,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC9B,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,KAAK,CAAC,sBAAsB,GAAG,KAAK,EAAE,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;YAClE,CAAC;YACD,MAAM,oBAAoB,GAAG,WAAW,CAAC;YACzC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;gBAC7B,IAAI,UAAU,IAAI,MAAM,EAAE,CAAC;oBACzB,QAAQ,CAAC,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;oBACnD,IAAI,qBAAqB,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;wBAC7C,IAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC;4BAClC,QAAQ,CAAC,mBAAmB,GAAG,EAAE,CAAC;wBACpC,CAAC;wBACD,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;oBACzE,CAAC;gBACH,CAAC;gBACD,IAAI,WAAW,IAAI,MAAM,EAAE,CAAC;oBAC1B,IAAI,WAAW,EAAE,CAAC;wBAChB,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;wBAChC,WAAW,GAAG,KAAK,CAAC;oBACtB,CAAC;oBACD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBACjC,WAAW,GAAG,IAAI,CAAC;gBACrB,CAAC;qBAAM,IAAI,WAAW,IAAI,MAAM,EAAE,CAAC;oBACjC,IAAI,CAAC,WAAW,EAAE,CAAC;wBACjB,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;wBAChC,WAAW,GAAG,IAAI,CAAC;oBACrB,CAAC;oBACD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBACjC,WAAW,GAAG,IAAI,CAAC;gBACrB,CAAC;qBAAM,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;oBAC7B,MAAM,IAAI,KAAK,CAAC,qBAAqB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACjE,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1C,CAAC;YACH,CAAC;YACD,IAAI,WAAW,EAAE,CAAC;gBAChB,MAAM;oBACJ,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,CAAC;oBACtE,QAAQ;iBACT,CAAC;YACJ,CAAC;QACH,CAAC;IACH,CAAC;IAED,mBAAmB,CAAC,WAA0C;QAC5D,MAAM,EAAC,OAAO,EAAE,OAAO,EAAC,GAAG,QAAQ,CAAC,gBAAgB,CAAC,oBAAoB,EAAoB,CAAC;QAC9F,6BAA6B,CAAC,uBAAuB,CACjD,IAAI,CAAC,SAAS,CAAC;YACb,MAAM,EAAE,WAAW;YACnB,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACpC,GAAG,WAAW;SACf,CAAC,EACF,OAAO,CACV,CAAC;QAEF,OAAO,OAAO,CAAC;IACjB,CAAC;CACF","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as Platform from '../platform/platform.js';\n\nimport {InspectorFrontendHostInstance} from './InspectorFrontendHost.js';\nimport {type AidaClientResult, type SyncInformation} from './InspectorFrontendHostAPI.js';\nimport {bindOutputStream} from './ResourceLoader.js';\n\nexport enum Entity {\n  UNKNOWN = 0,\n  USER = 1,\n  SYSTEM = 2,\n}\n\nexport const enum Rating {\n  POSITIVE = 'POSITIVE',\n  NEGATIVE = 'NEGATIVE',\n}\n\nexport interface Chunk {\n  text: string;\n  entity: Entity;\n}\n\nexport enum FunctionalityType {\n  // Unspecified functionality type.\n  FUNCTIONALITY_TYPE_UNSPECIFIED = 0,\n  // The generic AI chatbot functionality.\n  CHAT = 1,\n  // The explain error functionality.\n  EXPLAIN_ERROR = 2,\n}\n\nexport enum ClientFeature {\n  // Unspecified client feature.\n  CLIENT_FEATURE_UNSPECIFIED = 0,\n  // Chrome console insights feature.\n  CHROME_CONSOLE_INSIGHTS = 1,\n  // Chrome freestyler.\n  CHROME_FREESTYLER = 2,\n}\n\nexport interface AidaRequest {\n  input: string;\n  preamble?: string;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  chat_history?: Chunk[];\n  client: string;\n  options?: {\n    temperature?: Number,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    model_id?: string,\n  };\n  metadata?: {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    disable_user_content_logging: boolean,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    string_session_id?: string,\n  };\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  functionality_type?: FunctionalityType;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  client_feature?: ClientFeature;\n}\n\nexport interface AidaDoConversationClientEvent {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  corresponding_aida_rpc_global_id: number;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disable_user_content_logging: boolean;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  do_conversation_client_event: {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    user_feedback: {\n      sentiment?: Rating,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      user_input?: {\n        comment?: string,\n      },\n    },\n  };\n}\n\nexport enum RecitationAction {\n  ACTION_UNSPECIFIED = 'ACTION_UNSPECIFIED',\n  CITE = 'CITE',\n  BLOCK = 'BLOCK',\n  NO_ACTION = 'NO_ACTION',\n  EXEMPT_FOUND_IN_PROMPT = 'EXEMPT_FOUND_IN_PROMPT',\n}\n\nexport interface Citation {\n  startIndex: number;\n  endIndex: number;\n  url: string;\n}\n\nexport interface AttributionMetadata {\n  attributionAction: RecitationAction;\n  citations: Citation[];\n}\n\nexport interface AidaResponseMetadata {\n  rpcGlobalId?: number;\n  attributionMetadata?: AttributionMetadata[];\n}\n\nexport interface AidaResponse {\n  explanation: string;\n  metadata: AidaResponseMetadata;\n}\n\nexport const enum AidaAccessPreconditions {\n  AVAILABLE = 'available',\n  NO_ACCOUNT_EMAIL = 'no-account-email',\n  NO_ACTIVE_SYNC = 'no-active-sync',\n  NO_INTERNET = 'no-internet',\n}\n\nexport const CLIENT_NAME = 'CHROME_DEVTOOLS';\n\nexport class AidaClient {\n  static buildConsoleInsightsRequest(input: string): AidaRequest {\n    const request: AidaRequest = {\n      input,\n      client: CLIENT_NAME,\n      functionality_type: FunctionalityType.EXPLAIN_ERROR,\n      client_feature: ClientFeature.CHROME_CONSOLE_INSIGHTS,\n    };\n    const config = Common.Settings.Settings.instance().getHostConfig();\n    let temperature = NaN;\n    let modelId = null;\n    let disallowLogging = false;\n    if (config?.devToolsConsoleInsights.enabled) {\n      temperature = config.devToolsConsoleInsights.aidaTemperature;\n      modelId = config.devToolsConsoleInsights.aidaModelId;\n      disallowLogging = config.devToolsConsoleInsights.disallowLogging;\n    }\n\n    if (!isNaN(temperature)) {\n      request.options ??= {};\n      request.options.temperature = temperature;\n    }\n    if (modelId) {\n      request.options ??= {};\n      request.options.model_id = modelId;\n    }\n    if (disallowLogging) {\n      request.metadata = {\n        disable_user_content_logging: true,\n      };\n    }\n    return request;\n  }\n\n  static async checkAccessPreconditions(): Promise<AidaAccessPreconditions> {\n    if (!navigator.onLine) {\n      return AidaAccessPreconditions.NO_INTERNET;\n    }\n\n    const syncInfo = await new Promise<SyncInformation>(\n        resolve => InspectorFrontendHostInstance.getSyncInformation(syncInfo => resolve(syncInfo)));\n    if (!syncInfo.accountEmail) {\n      return AidaAccessPreconditions.NO_ACCOUNT_EMAIL;\n    }\n\n    if (!syncInfo.isSyncActive) {\n      return AidaAccessPreconditions.NO_ACTIVE_SYNC;\n    }\n\n    return AidaAccessPreconditions.AVAILABLE;\n  }\n\n  async * fetch(request: AidaRequest): AsyncGenerator<AidaResponse, void, void> {\n    if (!InspectorFrontendHostInstance.doAidaConversation) {\n      throw new Error('doAidaConversation is not available');\n    }\n    const stream = (() => {\n      let {promise, resolve, reject} = Platform.PromiseUtilities.promiseWithResolvers<string|null>();\n      return {\n        write: async(data: string): Promise<void> => {\n          resolve(data);\n          ({promise, resolve, reject} = Platform.PromiseUtilities.promiseWithResolvers<string|null>());\n        },\n        close: async(): Promise<void> => {\n          resolve(null);\n        },\n        read: (): Promise<string|null> => {\n          return promise;\n        },\n        fail: (e: Error) => reject(e),\n      };\n    })();\n    const streamId = bindOutputStream(stream);\n    InspectorFrontendHostInstance.doAidaConversation(JSON.stringify(request), streamId, result => {\n      if (result.statusCode === 403) {\n        stream.fail(new Error('Server responded: permission denied'));\n      } else if (result.error) {\n        stream.fail(new Error(`Cannot send request: ${result.error} ${result.detail || ''}`));\n      } else if (result.statusCode !== 200) {\n        stream.fail(new Error(`Request failed: ${JSON.stringify(result)}`));\n      } else {\n        void stream.close();\n      }\n    });\n    let chunk;\n    const text = [];\n    let inCodeChunk = false;\n    const metadata: AidaResponseMetadata = {rpcGlobalId: 0};\n    while ((chunk = await stream.read())) {\n      let textUpdated = false;\n      // The AIDA response is a JSON array of objects, split at the object\n      // boundary. Therefore each chunk may start with `[` or `,` and possibly\n      // followed by `]`. Each chunk may include one or more objects, so we\n      // make sure that each chunk becomes a well-formed JSON array when we\n      // parse it by adding `[` and `]` and removing `,` where appropriate.\n      if (!chunk.length) {\n        continue;\n      }\n      if (chunk.startsWith(',')) {\n        chunk = chunk.slice(1);\n      }\n      if (!chunk.startsWith('[')) {\n        chunk = '[' + chunk;\n      }\n      if (!chunk.endsWith(']')) {\n        chunk = chunk + ']';\n      }\n      let results;\n      try {\n        results = JSON.parse(chunk);\n      } catch (error) {\n        throw new Error('Cannot parse chunk: ' + chunk, {cause: error});\n      }\n      const CODE_CHUNK_SEPARATOR = '\\n`````\\n';\n      for (const result of results) {\n        if ('metadata' in result) {\n          metadata.rpcGlobalId = result.metadata.rpcGlobalId;\n          if ('attributionMetadata' in result.metadata) {\n            if (!metadata.attributionMetadata) {\n              metadata.attributionMetadata = [];\n            }\n            metadata.attributionMetadata.push(result.metadata.attributionMetadata);\n          }\n        }\n        if ('textChunk' in result) {\n          if (inCodeChunk) {\n            text.push(CODE_CHUNK_SEPARATOR);\n            inCodeChunk = false;\n          }\n          text.push(result.textChunk.text);\n          textUpdated = true;\n        } else if ('codeChunk' in result) {\n          if (!inCodeChunk) {\n            text.push(CODE_CHUNK_SEPARATOR);\n            inCodeChunk = true;\n          }\n          text.push(result.codeChunk.code);\n          textUpdated = true;\n        } else if ('error' in result) {\n          throw new Error(`Server responded: ${JSON.stringify(result)}`);\n        } else {\n          throw new Error('Unknown chunk result');\n        }\n      }\n      if (textUpdated) {\n        yield {\n          explanation: text.join('') + (inCodeChunk ? CODE_CHUNK_SEPARATOR : ''),\n          metadata,\n        };\n      }\n    }\n  }\n\n  registerClientEvent(clientEvent: AidaDoConversationClientEvent): Promise<AidaClientResult> {\n    const {promise, resolve} = Platform.PromiseUtilities.promiseWithResolvers<AidaClientResult>();\n    InspectorFrontendHostInstance.registerAidaClientEvent(\n        JSON.stringify({\n          client: CLIENT_NAME,\n          event_time: new Date().toISOString(),\n          ...clientEvent,\n        }),\n        resolve,\n    );\n\n    return promise;\n  }\n}\n"]}