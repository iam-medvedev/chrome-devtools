{"version":3,"file":"CSSPropertyParserMatchers.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CSSPropertyParserMatchers.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,EAAC,OAAO,EAAC,MAAM,iCAAiC,CAAC;AAGxD,SAAS,gBAAgB,CACrB,IAAY,EAAE,KAAa,EAAE,OAAyC;IAExE,MAAM,GAAG,GAAG,GAAG,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACnE,IAAI,CAAC,GAAG,EAAE,CAAC;QACT,OAAO,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC;IACzC,CAAC;IAED,MAAM,aAAa,GAAG,GAAG,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACtF,MAAM,WAAW,GACb,GAAG,CAAC,iBAAiB,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,YAAY,OAAO,CAAC,SAAS,CAAC,CAAC;IAC5G,MAAM,KAAK,GAAG,WAAW,IAAI,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IAEjE,OAAO;QACL,GAAG;QACH,KAAK,EAAE,KAAK,YAAY,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;QACxD,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE;KAC9B,CAAC;AACJ,CAAC;AAED,SAAS,2BAA2B,CAAC,SAAiC;IACpE,MAAM,EAAC,eAAe,EAAE,oBAAoB,EAAE,QAAQ,EAAC,GAAG,GAAG,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,SAAS,CAAC;IAC/G,MAAM,aAAa,GAAG,IAAI,GAAG,EAA4C,CAAC;IAC1E,SAAS,WAAW,CAAC,QAAoD;QACvE,IAAI,QAAQ,CAAC,YAAY,CAAC,UAAU,KAAK,CAAC,EAAE,CAAC;YAC3C,MAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC;YACpF,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;YAClC,KAAK,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;gBACzD,MAAM,OAAO,GAAG,OAAO,OAAO,GAAG,CAAC;gBAClC,KAAK,IAAI,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,IAAI,CAAC,EAC5D,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;oBAC7D,QAAQ,CAAC,YAAY,CAAC,IAAI,CACtB,EAAC,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,EAA2B,EAAC,EAAE,MAAM,GAAG,cAAc,CAAC,CAAC;gBAC9G,CAAC;gBACD,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,EAAC,OAAO,EAAE,KAAK,EAAC,CAAC,CAAC;YAC/C,CAAC;QACH,CAAC;IACH,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,SAAS,EAAE,iBAAiB,CAAC;SAC9E,SAAS,CAAC,UAA2D,IAA2B;QAC/F,WAAW,CAAC,IAAI,CAAC,CAAC;QAClB,OAAO,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IACP,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,SAAS,EAAE,sBAAsB,CAAC;SACnF,SAAS,CAAC,UAC2C,IAA2B,EAC7E,EAAyB;QAC3B,WAAW,CAAC,IAAI,CAAC,CAAC;QAClB,OAAO,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IACP,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,SAAS,EAAE,UAAU,CAAC;SACvE,SAAS,CAAC,UAA2D,IAA2B;QAEhF,WAAW,CAAC,IAAI,CAAC,CAAC;QAClB,MAAM,aAAa,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACnC,CAAC;QACD,OAAO,IAAI,GAAG,CAAC,yBAAyB,CAAC,iBAAiB,CACtD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC7F,CAAC,CAAC,CAAC;AACxB,CAAC;AAED,QAAQ,CAAC,yDAAyD,EAAE,GAAG,EAAE;IACvE,EAAE,CAAC,eAAe,EAAE,GAAG,EAAE;QACvB,KAAK,MAAM,IAAI,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,aAAa,EAAE,YAAY,CAAC,EAAE,CAAC;YAClF,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,YAAY,EAAE,CAAC,CAAC;YACxG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;QACD,KAAK,MAAM,OAAO,IACN,CAAC,wCAAwC,EAAE,KAAK,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,EAAE,OAAO;YAC7F,SAAS,EAAE,WAAW,CAAC,EAAE,CAAC;YACrC,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,YAAY,EAAE,CAAC,CAAC;YAC3G,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,CAAC;QACD,6BAA6B;QAC7B,KAAK,MAAM,IAAI,IACH,CAAC,wCAAwC,EAAE,KAAK,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,EAAE,OAAO;YAC7F,SAAS,EAAE,WAAW,CAAC,EAAE,CAAC;YACrC,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,YAAY,EAAE,CAAC,CAAC;YACxG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,KAAK,MAAM,OAAO,IACN,CAAC,kBAAkB,EAAE,wBAAwB,EAAE,oBAAoB,EAAE,0BAA0B;YAC9F,mBAAmB,EAAE,yBAAyB,EAAE,qBAAqB,EAAE,2BAA2B,CAAC,EAAE,CAAC;YACjH,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,YAAY,EAAE,CAAC,CAAC;YAC9G,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;QACjD,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,KAAK,MAAM,OAAO,IACN,CAAC,mCAAmC,EAAE,yCAAyC;YAC9E,sCAAsC,CAAC,EAAE,CAAC;YACrD,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GACf,gBAAgB,CAAC,YAAY,EAAE,OAAO,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,EAAE,CAAC,CAAC;YACvG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,CAAC;QACD,KAAK,MAAM,IAAI,IACH,CAAC,mCAAmC,EAAE,yCAAyC;YAC9E,sCAAsC,CAAC,EAAE,CAAC;YACrD,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,YAAY,EAAE,CAAC,CAAC;YACxG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,KAAK,MAAM,OAAO,IAAI,CAAC,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,oBAAoB,CAAC,EAAE,CAAC;YAClF,MAAM,GAAG,GAAG,GAAG,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,OAAO,EAAE,4CAA4C,CAAC,CAAC;YAC7G,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC5B,MAAM,QAAQ,GACV,GAAG,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,GAAG,CAAC,yBAAyB,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YAC7G,MAAM,SAAS,GAAG,GAAG,CAAC,iBAAiB,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC;YAC/F,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACzB,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,GAAG,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAC;YACnE,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,2BAA2B,CAAC;YAC1B,iBAAiB,EAAE,SAAS;YAC5B,UAAU,EAAE,KAAK;YACjB,cAAc,EAAE,KAAK;YACrB,OAAO,EAAE,SAAS;YAClB,SAAS,EAAE,SAAS;YACpB,UAAU,EAAE,UAAU;YACtB,mBAAmB,EAAE,WAAW;SACjC,CAAC,CAAC;QACH,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,OAAO,EAAE,qFAAqF,EAC9F,IAAI,GAAG,CAAC,yBAAyB,CAAC,eAAe,EAAE,CAAC,CAAC;YACzD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,sBAAsB,EAAE,KAAK,CAAC,CAAC,CAAC;YACnG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,uBAAuB,CAAC,CAAC;YACvF,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,iBAAiB,CAAC,CAAC;QACnF,CAAC;QACD,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,OAAO,EAAE,uDAAuD,EAChE,IAAI,GAAG,CAAC,yBAAyB,CAAC,eAAe,EAAE,CAAC,CAAC;YACzD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,cAAc,CAAC,CAAC;YAC7E,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,eAAe,CAAC,CAAC;YAC/E,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,eAAe,CAAC,CAAC;QACjF,CAAC;QAED,KAAK,MAAM,IAAI,IACH,CAAC,wDAAwD;YACxD,2FAA2F;YAC3F,6EAA6E;YAC7E,2DAA2D;YAC3D,yEAAyE;YACzE,iDAAiD;SAC7D,EAAE,CAAC;YACF,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,eAAe,EAAE,CAAC,CAAC;YAChH,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,SAAS,KAAK,CAAC,KAAa,EAAE,MAAc,EAAE,MAAc;YAC1D,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,OAAO,EAAE,aAAa,KAAK,KAAK,MAAM,KAAK,MAAM,GAAG,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,eAAe,EAAE,CAAC,CAAC;YAC/G,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAE3B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3E,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAC/E,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QACjF,CAAC;QAED,SAAS,YAAY,CAAC,KAAa,EAAE,MAAc,EAAE,MAAc;YACjE,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAClC,OAAO,EAAE,aAAa,KAAK,KAAK,MAAM,KAAK,MAAM,GAAG,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,eAAe,EAAE,CAAC,CAAC;YAC/G,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;QAED,KAAK,CAAC,qBAAqB,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAChD,KAAK,CAAC,6BAA6B,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QACxD,KAAK,CAAC,SAAS,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QACpC,KAAK,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;QACxC,KAAK,CAAC,SAAS,EAAE,2BAA2B,EAAE,4BAA4B,CAAC,CAAC;QAC5E,YAAY,CAAC,oBAAoB,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QACtD,YAAY,CAAC,gBAAgB,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAClD,YAAY,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;QACrB,MAAM,GAAG,GAAG,oBAAoB,CAAC;QACjC,CAAC;YACC,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GACf,gBAAgB,CAAC,kBAAkB,EAAE,OAAO,GAAG,GAAG,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,UAAU,EAAE,CAAC,CAAC;YACxG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAC3C,CAAC;QACD,CAAC;YACC,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GACf,gBAAgB,CAAC,kBAAkB,EAAE,QAAQ,GAAG,IAAI,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,UAAU,EAAE,CAAC,CAAC;YAC1G,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,KAAK,MAAM,OAAO,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE,CAAC;YAChE,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GACpB,gBAAgB,CAAC,WAAW,EAAE,OAAO,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,YAAY,EAAE,CAAC,CAAC;YAC7F,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC5B,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,CAAC;QACD,KAAK,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC;YAC/C,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,YAAY,EAAE,CAAC,CAAC;YAC5G,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,SAAS,KAAK,CAAC,IAAY,EAAE,KAAa;YACxC,MAAM,GAAG,GAAG,GAAG,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACnE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACnB,MAAM,aAAa,GAAG,GAAG,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE;gBACzE,IAAI,GAAG,CAAC,yBAAyB,CAAC,mBAAmB,EAAE;aACxD,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,GAAG,CAAC,iBAAiB,CAAC,UAAU,CAAC,OAAO,CACpD,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,CAAC;YAC1G,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3D,CAAC;QAED,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,gBAAgB,EAAE,2BAA2B,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;QAC1G,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,gBAAgB,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QAC9D,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QAC5D,CAAC;YACC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,wBAAwB,EAAE,YAAY,CAAC,EAAE,EAAE,CAAC,CAAC;YACpE,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,wBAAwB,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;YACtE,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,wBAAwB,EAAE,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;QACxF,CAAC;QACD,CAAC;YACC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,EAAE,YAAY,CAAC,EAAE,EAAE,CAAC,CAAC;YAC1D,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;QAC9E,CAAC;QACD,CAAC;YACC,2BAA2B,CAAC;gBAC1B,uBAAuB,EAAE,WAAW;aACrC,CAAC,CAAC;YACH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,4BAA4B,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACzF,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,kBAAkB,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;YACrE,MAAM,CAAC,SAAS,CACZ,KAAK,CAAC,WAAW,EAAE,kDAAkD,CAAC,EAAE,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC,CAAC;YAC/G,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;YACtD,+GAA+G;YAC/G,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,mCAAmC,CAAC,EAAE,CAAC,uBAAuB,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC/G,MAAM,CAAC,SAAS,CACZ,KAAK,CAAC,WAAW,EAAE,iDAAiD,CAAC,EACrE,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,qBAAqB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YACpE,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,mBAAmB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YAClE,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,+BAA+B,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9E,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,6BAA6B,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5E,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,8BAA8B,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YAC7E,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,0BAA0B,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YACzE,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,wBAAwB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QACzE,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,KAAK,MAAM,OAAO,IACN,CAAC,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,aAAa,EAAE,sBAAsB;YAC9E,kCAAkC,CAAC,EAAE,CAAC;YACjD,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GACpB,gBAAgB,CAAC,2BAA2B,EAAE,OAAO,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,aAAa,EAAE,CAAC,CAAC;YAC9G,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC5B,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,CAAC;QAED,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,QAAQ,EAAE,SAAS,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,aAAa,EAAE,CAAC,CAAC;QACpH,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QAC7B,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,SAAS,KAAK,CAAC,IAAY,EAAE,KAAa;YACxC,MAAM,GAAG,GAAG,GAAG,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACnE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACnB,MAAM,aAAa,GACf,GAAG,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,GAAG,CAAC,yBAAyB,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YAC9G,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAE7B,MAAM,KAAK,GAAG,GAAG,CAAC,iBAAiB,CAAC,UAAU,CAAC,IAAI,CAC/C,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,yBAAyB,CAAC,WAAW,CAAC,CAAC;YACpG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC;QACD,KAAK,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC7B,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QAC7B,KAAK,CAAC,iCAAiC,EAAE,yEAAyE,CAAC,CAAC;IACtH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAClC,YAAY,EAAE,iDAAiD,EAC/D,IAAI,GAAG,CAAC,yBAAyB,CAAC,aAAa,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,2CAA2C,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,KAAK,MAAM,QAAQ,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,CAAC,EAAE,CAAC;YACnD,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GACpB,gBAAgB,CAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,WAAW,EAAE,CAAC,CAAC;YAE7F,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC3C,CAAC;QAED,CAAC;YACC,MAAM,GAAG,GAAG,GAAG,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,aAAa,EAAE,yBAAyB,CAAC,CAAC;YAChG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACnB,MAAM,aAAa,GACf,GAAG,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,GAAG,CAAC,yBAAyB,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YAC5G,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAE7B,MAAM,OAAO,GAAG,GAAG,CAAC,iBAAiB,CAAC,UAAU,CAAC,OAAO,CACpD,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC;YAClG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,yBAAyB,CAAC,CAAC,CAAC;QACnG,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,2BAA2B,CAAC;YAC1B,OAAO,EAAE,SAAS;YAClB,kBAAkB,EAAE,uBAAuB;YAC3C,aAAa,EAAE,SAAS;YACxB,cAAc,EAAE,aAAa;SAC9B,CAAC,CAAC;QAEH,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GACpB,gBAAgB,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAC/F,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;QACxG,CAAC;QACD,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,qBAAqB,EAAE,yBAAyB,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAC/G,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,SAAS,CACZ,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QACxG,CAAC;QACD,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,eAAe,EAAE,oCAAoC,EACrD,IAAI,GAAG,CAAC,yBAAyB,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAC7D,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,SAAS,CACZ,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,SAAS,EAAE,4BAA4B,CAAC,CAAC,CAAC;QAChH,CAAC;QACD,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,MAAM,EAAE,gGAAgG,EAExG,IAAI,GAAG,CAAC,yBAAyB,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAC7D,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,SAAS,CACZ,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAC7D,CAAC,0CAA0C,EAAE,sDAAsD,CAAC,CAAC,CAAC;QAC5G,CAAC;QACD,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,MAAM,EAAE,oEAAoE,EAE5E,IAAI,GAAG,CAAC,yBAAyB,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAC7D,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,SAAS,CACZ,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAC7D,CAAC,oBAAoB,EAAE,0BAA0B,EAAE,uBAAuB,CAAC,CAAC,CAAC;QACnF,CAAC;QACD,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,MAAM,EAAE,gEAAgE,EAExE,IAAI,GAAG,CAAC,yBAAyB,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAC7D,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,SAAS,CACZ,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAC7D,CAAC,uBAAuB,EAAE,mBAAmB,EAAE,uBAAuB,CAAC,CAAC,CAAC;QAC/E,CAAC;QACD,CAAC;YACC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,MAAM,EAAE,0CAA0C,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,mBAAmB,EAAE,CAAC,CAAC;YACjH,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,SAAS,CACZ,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,yCAAyC,CAAC,CAAC,CAAC;QAClH,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,KAAK,MAAM,IAAI,IAAI,CAAC,cAAc,EAAE,iBAAiB,EAAE,wBAAwB,CAAC,EAAE,CAAC;YACjF,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAClC,OAAO,EAAE,IAAI,EACb,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,CACnD,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAChE,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;QAED,KAAK,MAAM,OAAO,IACN,CAAC,uBAAuB,EAAE,6BAA6B,EAAE,6BAA6B;YACrF,oCAAoC,CAAC,EAAE,CAAC;YACnD,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,OAAO,EAAE,OAAO,EAChB,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,CACnD,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAChE,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAE3B,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC1E,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACpD,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QACpD,CAAC;QAED,8CAA8C;QAC9C,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAClC,OAAO,EAAE,uBAAuB,EAChC,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,CAAC,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACpH,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,KAAK,MAAM,IAAI,IAAI,CAAC,uBAAuB,EAAE,4BAA4B,EAAE,iCAAiC,CAAC,EAAE,CAAC;YAC9G,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,eAAe,EAAE,CAAC,CAAC;YAC7G,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC;QAED,KAAK,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,IAAI;YAC7B,CAAC,gCAAgC,EAAE,OAAO,CAAC;YAC3C,CAAC,sCAAsC,EAAE,OAAO,CAAC;YACjD,CAAC,sCAAsC,EAAE,OAAO,CAAC;YACjD,CAAC,6CAA6C,EAAE,OAAO,CAAC;YACxD,CAAC,kCAAkC,EAAE,kBAAkB,CAAC;YACxD,CAAC,oCAAoC,EAAE,SAAS,CAAC;YACjD,CAAC,oCAAoC,EAAE,YAAY,CAAC;YACpD,CAAC,qCAAqC,EAAE,aAAa,CAAC;YACtD,CAAC,oCAAoC,EAAE,cAAc,CAAC;YACtD,CAAC,+BAA+B,EAAE,eAAe,CAAC;YAClD,CAAC,kCAAkC,EAAE,SAAS,CAAC;YAC/C,CAAC,+BAA+B,EAAE,QAAQ,CAAC;SACnD,EAAE,CAAC;YACF,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GACpB,gBAAgB,CAAC,YAAY,EAAE,OAAO,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,eAAe,EAAE,CAAC,CAAC;YACjG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAE3B,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,sBAAsB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAClF,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClD,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QACpD,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GACf,gBAAgB,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,EAAE,CAAC,CAAC;YAClG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,EAAC,KAAK,EAAE,WAAW,EAAC,GACtB,gBAAgB,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,EAAE,CAAC,CAAC;YACpG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,EAAC,KAAK,EAAE,eAAe,EAAE,IAAI,EAAE,cAAc,EAAC,GAChD,gBAAgB,CAAC,OAAO,EAAE,eAAe,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,EAAE,CAAC,CAAC;YAC1G,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,EAAC,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,UAAU,EAAC,GACxC,gBAAgB,CAAC,MAAM,EAAE,cAAc,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,EAAE,CAAC,CAAC;YACxG,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAEvC,MAAM,EAAC,KAAK,EAAE,eAAe,EAAE,IAAI,EAAE,cAAc,EAAC,GAChD,gBAAgB,CAAC,OAAO,EAAE,oBAAoB,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,EAAE,CAAC,CAAC;YAC/G,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;YACxE,MAAM,EAAC,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,UAAU,EAAC,GAAG,gBAAgB,CAC3D,MAAM,EAAE,6BAA6B,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,EAAE,CAAC,CAAC;YACtG,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YACvC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;YAEvD,MAAM,EAAC,KAAK,EAAE,eAAe,EAAE,IAAI,EAAE,cAAc,EAAC,GAAG,gBAAgB,CACnE,OAAO,EAAE,mCAAmC,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,EAAE,CAAC,CAAC;YAC7G,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iEAAiE,EAAE,GAAG,EAAE;YACzE,MAAM,EAAC,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,UAAU,EAAC,GAAG,gBAAgB,CAC3D,MAAM,EAAE,8BAA8B,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,EAAE,CAAC,CAAC;YACvG,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YACvC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;YAEvD,MAAM,EAAC,KAAK,EAAE,eAAe,EAAE,IAAI,EAAE,cAAc,EAAC,GAAG,gBAAgB,CACnE,OAAO,EAAE,oCAAoC,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,EAAE,CAAC,CAAC;YAC9G,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;YACxE,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAClC,iBAAiB,EAAE,gBAAgB,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,EAAE,CAAC,CAAC;YACpG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gFAAgF,EAAE,GAAG,EAAE;YACxF,MAAM,EAAC,KAAK,EAAC,GAAG,gBAAgB,CAC5B,iBAAiB,EAAE,sBAAsB,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,EAAE,CAAC,CAAC;YAC1G,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,sEAAsE,EAAE,GAAG,EAAE;YAC9E,CAAC;gBACC,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAClC,cAAc,EAAE,6BAA6B,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,kBAAkB,EAAE,CAAC,CAAC;gBAC3G,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,6BAA6B,CAAC,CAAC;gBAC9D,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YACrC,CAAC;YAAC,CAAC;gBACD,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CACvC,cAAc,EAAE,2CAA2C,EAC3D,IAAI,GAAG,CAAC,yBAAyB,CAAC,kBAAkB,EAAE,CAAC,CAAC;gBAC5D,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;gBACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,2CAA2C,CAAC,CAAC;gBAC5E,MAAM,CAAC,WAAW,CACd,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE,2BAA2B,CAAC,CAAC;YAEhH,CAAC;YAAC,CAAC;gBACD,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAClC,wBAAwB,EAAE,yDAAyD,EACnF,IAAI,GAAG,CAAC,yBAAyB,CAAC,kBAAkB,EAAE,CAAC,CAAC;gBAC5D,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,yDAAyD,CAAC,CAAC;gBAC1F,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YACrC,CAAC;YAAC,CAAC;gBACD,MAAM,EAAC,KAAK,EAAC,GACT,gBAAgB,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,kBAAkB,EAAE,CAAC,CAAC;gBACvG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACvB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,OAAO,GAAG,CAAC,sBAAsB,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;YACnE,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE,CAAC;gBAC5B,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,mBAAmB,EAAE,CAAC,CAAC;gBAChH,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBACtC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACpE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,CAAC;YAED,MAAM,OAAO,GAAG,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAC;YAClD,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE,CAAC;gBAC5B,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,mBAAmB,EAAE,CAAC,CAAC;gBAChH,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAChC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;QACzB,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,yBAAyB,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;YAC5E,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GACf,gBAAgB,CAAC,WAAW,EAAE,MAAM,IAAI,EAAE,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,aAAa,EAAE,CAAC,CAAC;YACnG,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,IAAI,EAAE,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC5B,MAAM,YAAY,GAAG,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC3E,MAAM,iBAAiB,GAAG,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;QAC1F,KAAK,MAAM,OAAO,IAAI,GAAG,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;YACtD,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAClC,YAAY,EAAE,OAAO,EACrB,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC,CAAC;YAC9F,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,CAAC;QAED,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAClC,YAAY,EAAE,cAAc,EAC5B,IAAI,GAAG,CAAC,yBAAyB,CAAC,qBAAqB,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC,CAAC;QAC9F,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,MAAM,IAAI,GAAG;YACX,MAAM;YACN,MAAM;YACN,aAAa;YACb,aAAa;YACb,YAAY;YACZ,YAAY;YACZ,eAAe;YACf,aAAa;YACb,wBAAwB;YACxB,oBAAoB;SACrB,CAAC;QACF,MAAM,GAAG,GAAG,CAAC,YAAY,EAAE,aAAa,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC7D,KAAK,MAAM,KAAK,IAAI,IAAI,EAAE,CAAC;YACzB,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,eAAe,EAAE,CAAC,CAAC;YAC9G,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAChE,CAAC;QACD,KAAK,MAAM,KAAK,IAAI,GAAG,EAAE,CAAC;YACxB,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,GAAG,CAAC,yBAAyB,CAAC,eAAe,EAAE,CAAC,CAAC;YAC9G,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAChC,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {Printer} from '../../testing/PropertyParser.js';\nimport type * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\n\nfunction matchSingleValue<T extends SDK.CSSPropertyParser.Match>(\n    name: string, value: string, matcher: SDK.CSSPropertyParser.Matcher<T>):\n    {ast: SDK.CSSPropertyParser.SyntaxTree|null, match: T|null, text: string} {\n  const ast = SDK.CSSPropertyParser.tokenizeDeclaration(name, value);\n  if (!ast) {\n    return {ast, match: null, text: value};\n  }\n\n  const matchedResult = SDK.CSSPropertyParser.BottomUpTreeMatching.walk(ast, [matcher]);\n  const matchedNode =\n      SDK.CSSPropertyParser.TreeSearch.find(ast, n => matchedResult.getMatch(n) instanceof matcher.matchType);\n  const match = matchedNode && matchedResult.getMatch(matchedNode);\n\n  return {\n    ast,\n    match: match instanceof matcher.matchType ? match : null,\n    text: Printer.walk(ast).get(),\n  };\n}\n\nfunction injectVariableSubstitutions(variables: Record<string, string>) {\n  const {getComputedText, getComputedTextRange, getMatch} = SDK.CSSPropertyParser.BottomUpTreeMatching.prototype;\n  const variableNames = new Map<string, {varName: string, value: string}>();\n  function injectChunk(matching: SDK.CSSPropertyParser.BottomUpTreeMatching): void {\n    if (matching.computedText.chunkCount === 0) {\n      const propertyOffset = matching.ast.rule.indexOf(matching.ast.propertyName ?? '--');\n      assert.isAbove(propertyOffset, 0);\n      for (const [varName, value] of Object.entries(variables)) {\n        const varText = `var(${varName})`;\n        for (let offset = matching.ast.rule.indexOf(varText); offset >= 0;\n             offset = matching.ast.rule.indexOf(varText, offset + 1)) {\n          matching.computedText.push(\n              {text: varText, computedText: () => value, node: {} as CodeMirror.SyntaxNode}, offset - propertyOffset);\n        }\n        variableNames.set(varText, {varName, value});\n      }\n    }\n  }\n\n  sinon.stub(SDK.CSSPropertyParser.BottomUpTreeMatching.prototype, 'getComputedText')\n      .callsFake(function(this: SDK.CSSPropertyParser.BottomUpTreeMatching, node: CodeMirror.SyntaxNode): string {\n        injectChunk(this);\n        return getComputedText.call(this, node);\n      });\n  sinon.stub(SDK.CSSPropertyParser.BottomUpTreeMatching.prototype, 'getComputedTextRange')\n      .callsFake(function(\n          this: SDK.CSSPropertyParser.BottomUpTreeMatching, from: CodeMirror.SyntaxNode,\n          to: CodeMirror.SyntaxNode): string {\n        injectChunk(this);\n        return getComputedTextRange.call(this, from, to);\n      });\n  sinon.stub(SDK.CSSPropertyParser.BottomUpTreeMatching.prototype, 'getMatch')\n      .callsFake(function(this: SDK.CSSPropertyParser.BottomUpTreeMatching, node: CodeMirror.SyntaxNode):\n                     SDK.CSSPropertyParser.Match|undefined {\n                       injectChunk(this);\n                       const resolvedValue = variableNames.get(this.ast.text(node));\n                       if (!resolvedValue) {\n                         return getMatch.call(this, node);\n                       }\n                       return new SDK.CSSPropertyParserMatchers.BaseVariableMatch(\n                           this.ast.text(node), node, resolvedValue.varName, [], this, () => resolvedValue.value);\n                     });\n}\n\ndescribe('Matchers for SDK.CSSPropertyParser.BottomUpTreeMatching', () => {\n  it('parses colors', () => {\n    for (const fail of ['red-blue', '#f', '#foobar', '', 'rgbz(1 2 2)', 'tan(45deg)']) {\n      const {match, text} = matchSingleValue('color', fail, new SDK.CSSPropertyParserMatchers.ColorMatcher());\n      assert.isNull(match, text);\n    }\n    for (const succeed\n             of ['rgb(/* R */155, /* G */51, /* B */255)', 'red', 'rgb(0 0 0)', 'rgba(0 0 0)', '#fff', '#ffff',\n                 '#ffffff', '#ffffffff']) {\n      const {match, text} = matchSingleValue('color', succeed, new SDK.CSSPropertyParserMatchers.ColorMatcher());\n      assert.exists(match, text);\n      assert.strictEqual(match.text, succeed);\n    }\n    // The property name matters:\n    for (const fail\n             of ['rgb(/* R */155, /* G */51, /* B */255)', 'red', 'rgb(0 0 0)', 'rgba(0 0 0)', '#fff', '#ffff',\n                 '#ffffff', '#ffffffff']) {\n      const {match, text} = matchSingleValue('width', fail, new SDK.CSSPropertyParserMatchers.ColorMatcher());\n      assert.isNull(match, text);\n    }\n  });\n\n  it('parses colors in logical border properties', () => {\n    for (const success\n             of ['border-block-end', 'border-block-end-color', 'border-block-start', 'border-block-start-color',\n                 'border-inline-end', 'border-inline-end-color', 'border-inline-start', 'border-inline-start-color']) {\n      const {ast, match, text} = matchSingleValue(success, 'red', new SDK.CSSPropertyParserMatchers.ColorMatcher());\n      assert.exists(match, text);\n      assert.strictEqual(match.text, 'red');\n      assert.strictEqual(ast?.propertyName, success);\n    }\n  });\n\n  it('parses linear gradients', () => {\n    for (const succeed\n             of ['linear-gradient(90deg, red, blue)', 'linear-gradient(to top left, red, blue)',\n                 'linear-gradient(in oklab, red, blue)']) {\n      const {match, text} =\n          matchSingleValue('background', succeed, new SDK.CSSPropertyParserMatchers.LinearGradientMatcher());\n      assert.exists(match, text);\n      assert.strictEqual(match.text, succeed);\n    }\n    for (const fail\n             of ['linear-gradient(90deg, red, blue)', 'linear-gradient(to top left, red, blue)',\n                 'linear-gradient(in oklab, red, blue)']) {\n      const {match, text} = matchSingleValue('width', fail, new SDK.CSSPropertyParserMatchers.ColorMatcher());\n      assert.isNull(match, text);\n    }\n  });\n\n  it('parses colors in masks', () => {\n    for (const succeed of ['mask', 'mask-image', 'mask-border', 'mask-border-source']) {\n      const ast = SDK.CSSPropertyParser.tokenizeDeclaration(succeed, 'linear-gradient(to top, red, var(--other))');\n      assert.exists(ast, succeed);\n      const matching =\n          SDK.CSSPropertyParser.BottomUpTreeMatching.walk(ast, [new SDK.CSSPropertyParserMatchers.ColorMatcher()]);\n      const colorNode = SDK.CSSPropertyParser.TreeSearch.find(ast, node => ast.text(node) === 'red');\n      assert.exists(colorNode);\n      const match = matching.getMatch(colorNode);\n      assert.exists(match);\n      assert.instanceOf(match, SDK.CSSPropertyParserMatchers.ColorMatch);\n      assert.strictEqual(match.text, 'red');\n    }\n  });\n\n  it('parses color-mix with vars', () => {\n    injectVariableSubstitutions({\n      '--interpolation': 'shorter',\n      '--color1': 'red',\n      '--percentage': '13%',\n      '--rgb': 'shorter',\n      '--space': 'in srgb',\n      '--color2': '25% blue',\n      '--multiple-colors': 'red, blue',\n    });\n    {\n      const {ast, match, text} = matchSingleValue(\n          'color', 'color-mix(in srgb var(--interpolation) hue, red var(--percentage), rgb(var(--rgb)))',\n          new SDK.CSSPropertyParserMatchers.ColorMixMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.deepEqual(match.space.map(n => ast.text(n)), ['in', 'srgb', 'var(--interpolation)', 'hue']);\n      assert.strictEqual(match.color1.map(n => ast.text(n)).join(), 'red,var(--percentage)');\n      assert.strictEqual(match.color2.map(n => ast.text(n)).join(), 'rgb(var(--rgb))');\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'color', 'color-mix(var(--space), var(--color1), var(--color2))',\n          new SDK.CSSPropertyParserMatchers.ColorMixMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.strictEqual(match.space.map(n => ast.text(n)).join(), 'var(--space)');\n      assert.strictEqual(match.color1.map(n => ast.text(n)).join(), 'var(--color1)');\n      assert.strictEqual(match.color2.map(n => ast.text(n)).join(), 'var(--color2)');\n    }\n\n    for (const fail\n             of ['color-mix(var(--color1), var(--color1), var(--color2))',\n                 'color-mix(var(--space), var(--color1) var(--percentage) var(--percentage), var(--color2))',\n                 'color-mix(var(--space), var(--color1) 10% var(--percentage), var(--color2))',\n                 'color-mix(var(--space), var(--color1), var(--color2) 15%)',\n                 'color-mix(var(--space), var(--color1), var(--color2) var(--percentage))',\n                 'color-mix(var(--space), var(--multiple-colors))',\n    ]) {\n      const {ast, match, text} = matchSingleValue('color', fail, new SDK.CSSPropertyParserMatchers.ColorMixMatcher());\n      assert.exists(ast, text);\n      assert.isNull(match, text);\n    }\n  });\n\n  it('parses color-mix', () => {\n    function check(space: string, color1: string, color2: string): void {\n      const {ast, match, text} = matchSingleValue(\n          'color', `color-mix(${space}, ${color1}, ${color2})`, new SDK.CSSPropertyParserMatchers.ColorMixMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n\n      assert.deepEqual(match.space.map(n => ast.text(n)).join(' '), space, text);\n      assert.strictEqual(match.color1.map(n => ast.text(n)).join(' '), color1, text);\n      assert.strictEqual(match.color2.map(n => ast.text(n)).join(' '), color2, text);\n    }\n\n    function checkFailure(space: string, color1: string, color2: string): void {\n      const {match, text} = matchSingleValue(\n          'color', `color-mix(${space}, ${color1}, ${color2})`, new SDK.CSSPropertyParserMatchers.ColorMixMatcher());\n      assert.isNull(match, text);\n    }\n\n    check('in srgb shorter hue', 'red 35%', 'blue');\n    check('in /*asd*/ srgb shorter hue', 'red 35%', 'blue');\n    check('in srgb', 'red 35%', 'blue');\n    check('in srgb', '35% red', 'blue 16%');\n    check('in srgb', '/*a*/ 35% /*b*/ red /*c*/', '/*a*/ blue /*b*/ 16% /*c*/');\n    checkFailure('insrgb shorter hue', 'red 35%', 'blue');\n    checkFailure('/*asd*/srgb in', 'red 35%', 'blue');\n    checkFailure('in srgb', '0% red', 'blue 0%');\n  });\n\n  it('parses URLs', () => {\n    const url = 'http://example.com';\n    {\n      const {match, text} =\n          matchSingleValue('background-image', `url(${url})`, new SDK.CSSPropertyParserMatchers.URLMatcher());\n      assert.exists(match);\n      assert.strictEqual(match.url, url, text);\n    }\n    {\n      const {match, text} =\n          matchSingleValue('background-image', `url(\"${url}\")`, new SDK.CSSPropertyParserMatchers.URLMatcher());\n      assert.exists(match);\n      assert.strictEqual(match.url, url, text);\n    }\n  });\n\n  it('parses angles correctly', () => {\n    for (const succeed of ['45deg', '1.3rad', '-25grad', '2.3turn']) {\n      const {ast, match, text} =\n          matchSingleValue('transform', succeed, new SDK.CSSPropertyParserMatchers.AngleMatcher());\n      assert.exists(ast, succeed);\n      assert.exists(match, text);\n      assert.strictEqual(match.text, succeed);\n    }\n    for (const fail of ['0DEG', '0', '123', '2em']) {\n      const {match, text} = matchSingleValue('transform', fail, new SDK.CSSPropertyParserMatchers.AngleMatcher());\n      assert.isNull(match, text);\n    }\n  });\n\n  it('parses linkable names correctly', () => {\n    function match(name: string, value: string) {\n      const ast = SDK.CSSPropertyParser.tokenizeDeclaration(name, value);\n      assert.exists(ast);\n      const matchedResult = SDK.CSSPropertyParser.BottomUpTreeMatching.walk(ast, [\n        new SDK.CSSPropertyParserMatchers.LinkableNameMatcher(),\n      ]);\n\n      const matches = SDK.CSSPropertyParser.TreeSearch.findAll(\n          ast, node => matchedResult.getMatch(node) instanceof SDK.CSSPropertyParserMatchers.LinkableNameMatch);\n      return matches.map(m => matchedResult.getMatch(m)?.text);\n    }\n\n    assert.deepEqual(match('animation-name', 'first, second, -moz-third'), ['first', 'second', '-moz-third']);\n    assert.deepEqual(match('animation-name', 'first'), ['first']);\n    assert.deepEqual(match('font-palette', 'first'), ['first']);\n    {\n      assert.deepEqual(match('position-try-fallbacks', 'flip-block'), []);\n      assert.deepEqual(match('position-try-fallbacks', '--one'), ['--one']);\n      assert.deepEqual(match('position-try-fallbacks', '--one, --two'), ['--one', '--two']);\n    }\n    {\n      assert.deepEqual(match('position-try', 'flip-block'), []);\n      assert.deepEqual(match('position-try', '--one'), ['--one']);\n      assert.deepEqual(match('position-try', '--one, --two'), ['--one', '--two']);\n    }\n    {\n      injectVariableSubstitutions({\n        '--duration-and-easing': '1s linear',\n      });\n      assert.deepEqual(match('animation', '1s linear --animation-name'), ['--animation-name']);\n      assert.deepEqual(match('animation', '1s linear linear'), ['linear']);\n      assert.deepEqual(\n          match('animation', '1s linear --first-name, 1s ease-in --second-name'), ['--first-name', '--second-name']);\n      assert.deepEqual(match('animation', '1s linear'), []);\n      // Matching to variable names inside `var()` functions are fine as it is handled by variable renderer in usage.\n      assert.deepEqual(match('animation', 'var(--duration-and-easing) linear'), ['--duration-and-easing', 'linear']);\n      assert.deepEqual(\n          match('animation', '1s linear var(--non-existent, --animation-name)'),\n          ['--non-existent', '--animation-name']);\n      assert.deepEqual(match('animation', '1s step-start 0s kf'), ['kf']);\n      assert.deepEqual(match('animation', '1s step-end 0s kf'), ['kf']);\n      assert.deepEqual(match('animation', '1s steps(1, jump-start) 0s kf'), ['kf']);\n      assert.deepEqual(match('animation', '1s steps(1, jump-end) 0s kf'), ['kf']);\n      assert.deepEqual(match('animation', '1s steps(1, jump-none) 0s kf'), ['kf']);\n      assert.deepEqual(match('animation', '1s steps(1, start) 0s kf'), ['kf']);\n      assert.deepEqual(match('animation', '1s steps(1, end) 0s kf'), ['kf']);\n    }\n  });\n\n  it('parses easing functions properly', () => {\n    for (const succeed\n             of ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear(0 0%, 1 100%)',\n                 'cubic-bezier(0.3, 0.3, 0.3, 0.3)']) {\n      const {ast, match, text} =\n          matchSingleValue('animation-timing-function', succeed, new SDK.CSSPropertyParserMatchers.BezierMatcher());\n      assert.exists(ast, succeed);\n      assert.exists(match, text);\n      assert.strictEqual(match.text, succeed);\n    }\n\n    const {ast, match, text} = matchSingleValue('border', 'ease-in', new SDK.CSSPropertyParserMatchers.BezierMatcher());\n    assert.exists(ast, 'border');\n    assert.isNull(match, text);\n  });\n\n  it('parses strings correctly', () => {\n    function match(name: string, value: string) {\n      const ast = SDK.CSSPropertyParser.tokenizeDeclaration(name, value);\n      assert.exists(ast);\n      const matchedResult =\n          SDK.CSSPropertyParser.BottomUpTreeMatching.walk(ast, [new SDK.CSSPropertyParserMatchers.StringMatcher()]);\n      assert.exists(matchedResult);\n\n      const match = SDK.CSSPropertyParser.TreeSearch.find(\n          ast, node => matchedResult.getMatch(node) instanceof SDK.CSSPropertyParserMatchers.StringMatch);\n      assert.exists(match);\n    }\n    match('quotes', '\"\\'\" \"\\'\"');\n    match('content', '\"foobar\"');\n    match('--image-file-accelerometer-back', 'url(\"devtools\\:\\/\\/devtools\\/bundled\\/Images\\/accelerometer-back\\.svg\")');\n  });\n\n  it('parses shadows correctly', () => {\n    const {match, text} = matchSingleValue(\n        'box-shadow', '/*0*/3px 3px red, -1em 0 .4em /*a*/ olive /*b*/',\n        new SDK.CSSPropertyParserMatchers.ShadowMatcher());\n    assert.exists(match, text);\n    assert.strictEqual(match.text, '/*0*/3px 3px red, -1em 0 .4em /*a*/ olive');\n  });\n\n  it('parses fonts correctly', () => {\n    for (const fontSize of ['-.23', 'smaller', '17px']) {\n      const {ast, match, text} =\n          matchSingleValue('font-size', fontSize, new SDK.CSSPropertyParserMatchers.FontMatcher());\n\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.strictEqual(match.text, fontSize);\n    }\n\n    {\n      const ast = SDK.CSSPropertyParser.tokenizeDeclaration('font-family', '\"Gill Sans\", sans-serif');\n      assert.exists(ast);\n      const matchedResult =\n          SDK.CSSPropertyParser.BottomUpTreeMatching.walk(ast, [new SDK.CSSPropertyParserMatchers.FontMatcher()]);\n      assert.exists(matchedResult);\n\n      const matches = SDK.CSSPropertyParser.TreeSearch.findAll(\n          ast, node => matchedResult.getMatch(node) instanceof SDK.CSSPropertyParserMatchers.FontMatch);\n      assert.deepEqual(matches.map(m => matchedResult.getMatch(m)?.text), ['\"Gill Sans\", sans-serif']);\n    }\n  });\n\n  it('parses grid templates correctly', () => {\n    injectVariableSubstitutions({\n      '--row': '\"a a b\"',\n      '--row-with-names': '[name1] \"a a\" [name2]',\n      '--line-name': '[name1]',\n      '--double-row': '\"a b\" \"b c\"',\n    });\n\n    {\n      const {ast, match, text} =\n          matchSingleValue('grid', '\"a a\"', new SDK.CSSPropertyParserMatchers.GridTemplateMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.strictEqual(match.lines.map(line => line.map(n => ast.text(n)).join(' ')).join('\\n'), '\"a a\"');\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'grid-template-areas', '\"a a a\" \"b b b\" \"c c c\"', new SDK.CSSPropertyParserMatchers.GridTemplateMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.deepEqual(\n          match.lines.map(line => line.map(n => ast.text(n)).join(' ')), ['\"a a a\"', '\"b b b\"', '\"c c c\"']);\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'grid-template', '\"a a a\" var(--row) / auto 1fr auto',\n          new SDK.CSSPropertyParserMatchers.GridTemplateMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.deepEqual(\n          match.lines.map(line => line.map(n => ast.text(n)).join(' ')), ['\"a a a\"', 'var(--row) / auto 1fr auto']);\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'grid', '[header-top] \"a a\" var(--row-with-names) [main-top] \"b b b\" 1fr [main-bottom] / auto 1fr auto;',\n\n          new SDK.CSSPropertyParserMatchers.GridTemplateMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.deepEqual(\n          match.lines.map(line => line.map(n => ast.text(n)).join(' ')),\n          ['[header-top] \"a a\" var(--row-with-names)', '[main-top] \"b b b\" 1fr [main-bottom] / auto 1fr auto']);\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'grid', '[header-top] \"a a\" \"b b b\" var(--line-name) \"c c\" / auto 1fr auto;',\n\n          new SDK.CSSPropertyParserMatchers.GridTemplateMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.deepEqual(\n          match.lines.map(line => line.map(n => ast.text(n)).join(' ')),\n          ['[header-top] \"a a\"', '\"b b b\" var(--line-name)', '\"c c\" / auto 1fr auto']);\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'grid', '[line1] \"a a\" [line2] var(--double-row) \"b b\" / auto 1fr auto;',\n\n          new SDK.CSSPropertyParserMatchers.GridTemplateMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.deepEqual(\n          match.lines.map(line => line.map(n => ast.text(n)).join(' ')),\n          ['[line1] \"a a\" [line2]', 'var(--double-row)', '\"b b\" / auto 1fr auto']);\n    }\n    {\n      const {ast, match, text} = matchSingleValue(\n          'grid', '\"a a\" var(--unresolved) / auto 1fr auto;', new SDK.CSSPropertyParserMatchers.GridTemplateMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n      assert.deepEqual(\n          match.lines.map(line => line.map(n => ast.text(n)).join(' ')), ['\"a a\" var(--unresolved) / auto 1fr auto']);\n    }\n  });\n\n  it('parses light-dark correctly', () => {\n    for (const fail of ['light-dark()', 'light-dark(red)', 'light-dark(var(--foo))']) {\n      const {match, text} = matchSingleValue(\n          'color', fail,\n          new SDK.CSSPropertyParserMatchers.LightDarkColorMatcher(\n              sinon.createStubInstance(SDK.CSSProperty.CSSProperty)));\n      assert.isNull(match, text);\n    }\n\n    for (const succeed\n             of ['light-dark(red, blue)', 'light-dark(var(--foo), red)', 'light-dark(red, var(--foo))',\n                 'light-dark(var(--foo), var(--bar))']) {\n      const {ast, match, text} = matchSingleValue(\n          'color', succeed,\n          new SDK.CSSPropertyParserMatchers.LightDarkColorMatcher(\n              sinon.createStubInstance(SDK.CSSProperty.CSSProperty)));\n      assert.exists(ast, text);\n      assert.exists(match, text);\n\n      const [light, dark] = succeed.slice('light-dark('.length, -1).split(', ');\n      assert.lengthOf(match.light, 1);\n      assert.lengthOf(match.dark, 1);\n      assert.strictEqual(ast.text(match.light[0]), light);\n      assert.strictEqual(ast.text(match.dark[0]), dark);\n    }\n\n    // light-dark only applies to color properties\n    const {match, text} = matchSingleValue(\n        'width', 'light-dark(red, blue)',\n        new SDK.CSSPropertyParserMatchers.LightDarkColorMatcher(sinon.createStubInstance(SDK.CSSProperty.CSSProperty)));\n    assert.isNull(match, text);\n  });\n\n  it('parses auto-base correctly', () => {\n    for (const fail of ['-internal-auto-base()', '-internal-auto-base(block)', '-internal-auto-base(var(--foo))']) {\n      const {match, text} = matchSingleValue('display', fail, new SDK.CSSPropertyParserMatchers.AutoBaseMatcher());\n      assert.isNull(match, text);\n    }\n\n    for (const [succeed, propertyName] of [\n             ['-internal-auto-base(red, blue)', 'color'],\n             ['-internal-auto-base(var(--foo), red)', 'color'],\n             ['-internal-auto-base(red, var(--foo))', 'color'],\n             ['-internal-auto-base(var(--foo), var(--bar))', 'color'],\n             ['-internal-auto-base(gray, coral)', 'background-color'],\n             ['-internal-auto-base(inline, block)', 'display'],\n             ['-internal-auto-base(center, right)', 'text-align'],\n             ['-internal-auto-base(serif, cursive)', 'font-family'],\n             ['-internal-auto-base(solid, dashed)', 'border-style'],\n             ['-internal-auto-base(0, 0.5em)', 'border-radius'],\n             ['-internal-auto-base(2px, 0.25em)', 'padding'],\n             ['-internal-auto-base(1en, 3pt)', 'margin'],\n    ]) {\n      const {ast, match, text} =\n          matchSingleValue(propertyName, succeed, new SDK.CSSPropertyParserMatchers.AutoBaseMatcher());\n      assert.exists(ast, text);\n      assert.exists(match, text);\n\n      const [auto, base] = succeed.slice('-internal-auto-base('.length, -1).split(', ');\n      assert.lengthOf(match.auto, 1);\n      assert.lengthOf(match.base, 1);\n      assert.strictEqual(ast.text(match.auto[0]), auto);\n      assert.strictEqual(ast.text(match.base[0]), base);\n    }\n  });\n\n  describe('AnchorFunctionMatcher', () => {\n    it('should not match when it is not a call expression', () => {\n      const {match, text} =\n          matchSingleValue('left', 'anchor', new SDK.CSSPropertyParserMatchers.AnchorFunctionMatcher());\n      assert.isNull(match, text);\n    });\n\n    it('should not match anchor() call without arguments', () => {\n      const {match: anchorMatch} =\n          matchSingleValue('left', 'anchor()', new SDK.CSSPropertyParserMatchers.AnchorFunctionMatcher());\n      assert.isNull(anchorMatch);\n    });\n\n    it('should match anchor-size() call without arguments', () => {\n      const {match: anchorSizeMatch, text: anchorSizeText} =\n          matchSingleValue('width', 'anchor-size()', new SDK.CSSPropertyParserMatchers.AnchorFunctionMatcher());\n      assert.exists(anchorSizeMatch, anchorSizeText);\n    });\n\n    it('should match if it is an anchor() or anchor-size() call', () => {\n      const {match: anchorMatch, text: anchorText} =\n          matchSingleValue('left', 'anchor(left)', new SDK.CSSPropertyParserMatchers.AnchorFunctionMatcher());\n      assert.exists(anchorMatch, anchorText);\n\n      const {match: anchorSizeMatch, text: anchorSizeText} =\n          matchSingleValue('width', 'anchor-size(width)', new SDK.CSSPropertyParserMatchers.AnchorFunctionMatcher());\n      assert.exists(anchorSizeMatch, anchorSizeText);\n    });\n\n    it('should match dashed identifier as name from the first argument', () => {\n      const {match: anchorMatch, text: anchorText} = matchSingleValue(\n          'left', 'anchor(--dashed-ident left)', new SDK.CSSPropertyParserMatchers.AnchorFunctionMatcher());\n      assert.exists(anchorMatch, anchorText);\n      assert.strictEqual(anchorMatch.text, '--dashed-ident');\n\n      const {match: anchorSizeMatch, text: anchorSizeText} = matchSingleValue(\n          'width', 'anchor-size(--dashed-ident width)', new SDK.CSSPropertyParserMatchers.AnchorFunctionMatcher());\n      assert.exists(anchorSizeMatch, anchorSizeText);\n      assert.strictEqual(anchorSizeMatch.text, '--dashed-ident');\n    });\n\n    it('should match dashed identifier as name from the second argument', () => {\n      const {match: anchorMatch, text: anchorText} = matchSingleValue(\n          'left', 'anchor(right --dashed-ident)', new SDK.CSSPropertyParserMatchers.AnchorFunctionMatcher());\n      assert.exists(anchorMatch, anchorText);\n      assert.strictEqual(anchorMatch.text, '--dashed-ident');\n\n      const {match: anchorSizeMatch, text: anchorSizeText} = matchSingleValue(\n          'width', 'anchor-size(height --dashed-ident)', new SDK.CSSPropertyParserMatchers.AnchorFunctionMatcher());\n      assert.exists(anchorSizeMatch, anchorSizeText);\n      assert.strictEqual(anchorSizeMatch.text, '--dashed-ident');\n    });\n  });\n\n  describe('PositionAnchorMatcher', () => {\n    it('should match `position-anchor` property with dashed identifier', () => {\n      const {match, text} = matchSingleValue(\n          'position-anchor', '--dashed-ident', new SDK.CSSPropertyParserMatchers.PositionAnchorMatcher());\n      assert.exists(match, text);\n      assert.strictEqual(match.text, '--dashed-ident');\n    });\n\n    it('should not match `position-anchor` property when it is not a dashed identifier', () => {\n      const {match} = matchSingleValue(\n          'position-anchor', 'something-non-dashed', new SDK.CSSPropertyParserMatchers.PositionAnchorMatcher());\n      assert.isNull(match);\n    });\n  });\n\n  describe('PositionTryMatcher', () => {\n    it('should match `position-try[-fallbacks]` property with linkable names', () => {\n      {\n        const {match, text} = matchSingleValue(\n            'position-try', 'flip-block, --top, --bottom', new SDK.CSSPropertyParserMatchers.PositionTryMatcher());\n        assert.exists(match, text);\n        assert.strictEqual(match.text, 'flip-block, --top, --bottom');\n        assert.lengthOf(match.preamble, 0);\n      } {\n        const {ast, match, text} = matchSingleValue(\n            'position-try', '/* comment */ most-height --top, --bottom',\n            new SDK.CSSPropertyParserMatchers.PositionTryMatcher());\n        assert.exists(ast, text);\n        assert.exists(match, text);\n        assert.strictEqual(match.text, '/* comment */ most-height --top, --bottom');\n        assert.strictEqual(\n            ast.textRange(match.preamble[0], match.preamble[match.preamble.length - 1]), '/* comment */ most-height');\n\n      } {\n        const {match, text} = matchSingleValue(\n            'position-try-fallbacks', '/* comment */ flip-block, --top, /* comment */ --bottom',\n            new SDK.CSSPropertyParserMatchers.PositionTryMatcher());\n        assert.exists(match, text);\n        assert.strictEqual(match.text, '/* comment */ flip-block, --top, /* comment */ --bottom');\n        assert.lengthOf(match.preamble, 0);\n      } {\n        const {match} =\n            matchSingleValue('position-try', 'revert', new SDK.CSSPropertyParserMatchers.PositionTryMatcher());\n        assert.isNull(match);\n      }\n    });\n  });\n\n  describe('MathFunctionMatcher', () => {\n    it('matches selecting functions', () => {\n      const success = ['clamp(1px, 2px, 3px)', 'min(1, 2)', 'max(3, 4)'];\n      for (const value of success) {\n        const {match, text} = matchSingleValue('width', value, new SDK.CSSPropertyParserMatchers.MathFunctionMatcher());\n        assert.exists(match, text);\n        assert.strictEqual(match.text, value);\n        assert.strictEqual(match.func, value.substr(0, value.indexOf('(')));\n        assert.isAbove(match.args.length, 0);\n      }\n\n      const failure = ['clomp(1px, 2px, 3px)', 'min()'];\n      for (const value of failure) {\n        const {match, text} = matchSingleValue('width', value, new SDK.CSSPropertyParserMatchers.MathFunctionMatcher());\n        assert.notExists(match, text);\n      }\n    });\n  });\n\n  it('matches lengths', () => {\n    for (const unit of SDK.CSSPropertyParserMatchers.LengthMatcher.LENGTH_UNITS) {\n      const {match, text} =\n          matchSingleValue('min-width', `100${unit}`, new SDK.CSSPropertyParserMatchers.LengthMatcher());\n      assert.exists(match, text);\n      assert.strictEqual(match.text, `100${unit}`);\n    }\n  });\n\n  it('match css keywords', () => {\n    const propertyStub = sinon.createStubInstance(SDK.CSSProperty.CSSProperty);\n    const matchedStylesStub = sinon.createStubInstance(SDK.CSSMatchedStyles.CSSMatchedStyles);\n    for (const keyword of SDK.CSSMetadata.CSSWideKeywords) {\n      const {match, text} = matchSingleValue(\n          '--property', keyword,\n          new SDK.CSSPropertyParserMatchers.CSSWideKeywordMatcher(propertyStub, matchedStylesStub));\n      assert.exists(match, text);\n      assert.strictEqual(match.text, keyword);\n    }\n\n    const {match, text} = matchSingleValue(\n        '--property', '1px inherits',\n        new SDK.CSSPropertyParserMatchers.CSSWideKeywordMatcher(propertyStub, matchedStylesStub));\n    assert.notExists(match, text);\n  });\n\n  it('match flex and grid values', () => {\n    const good = [\n      'flex',\n      'grid',\n      'inline-flex',\n      'inline-grid',\n      'block flex',\n      'block grid',\n      'inline   flex',\n      'inline grid',\n      'inline grid !important',\n      'grid /* comment */',\n    ];\n    const bad = ['flex block', 'grid inline', 'block', 'inline'];\n    for (const value of good) {\n      const {match, text} = matchSingleValue('display', value, new SDK.CSSPropertyParserMatchers.FlexGridMatcher());\n      assert.exists(match, text);\n      assert.strictEqual(match.text.includes('flex'), match.isFlex);\n    }\n    for (const value of bad) {\n      const {match, text} = matchSingleValue('display', value, new SDK.CSSPropertyParserMatchers.FlexGridMatcher());\n      assert.notExists(match, text);\n    }\n  });\n});\n"]}