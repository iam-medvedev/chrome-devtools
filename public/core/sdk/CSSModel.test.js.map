{"version":3,"file":"CSSModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CSSModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\nimport * as SDK from './sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {assertNotNullOrUndefined} from '../platform/platform.js';\nimport type * as Platform from '../platform/platform.js';\n\ndescribeWithMockConnection('CSSModel', () => {\n  it('gets the FontFace of a source URL', () => {\n    const target = createTarget();\n    const cssModel = new SDK.CSSModel.CSSModel(target);\n    const src = 'mock.com';\n    const fontFace = {fontFamily: 'Roboto', src, fontDisplay: 'swap'} as unknown as Protocol.CSS.FontFace;\n    cssModel.fontsUpdated(fontFace);\n    const fontFaceForSource = cssModel.fontFaceForSource(src);\n    assert.strictEqual(fontFaceForSource?.getFontFamily() as string, fontFace.fontFamily);\n    assert.strictEqual(fontFaceForSource?.getSrc() as string, fontFace.src);\n    assert.strictEqual(fontFaceForSource?.getFontDisplay() as string, fontFace.fontDisplay);\n  });\n\n  it('reports stylesheets that fail to load as constructed stylesheets', async () => {\n    const target = createTarget();\n    const cssModel = new SDK.CSSModel.CSSModel(target);\n    const header: Protocol.CSS.CSSStyleSheetHeader = {\n      styleSheetId: 'stylesheet' as Protocol.CSS.StyleSheetId,\n      frameId: 'frame' as Protocol.Page.FrameId,\n      sourceURL: 'http://stylesheet.test/404.css',\n      origin: Protocol.CSS.StyleSheetOrigin.Regular,\n      title: 'failed sheet',\n      disabled: false,\n      isInline: false,\n      isMutable: false,\n      isConstructed: false,\n      loadingFailed: true,\n      startLine: 0,\n      startColumn: 0,\n      length: 0,\n      endLine: 0,\n      endColumn: 0,\n    };\n    const addedPromise = cssModel.once(SDK.CSSModel.Events.StyleSheetAdded);\n    cssModel.styleSheetAdded(header);\n\n    const cssModelHeader = await addedPromise;\n    assert.deepEqual(cssModelHeader.sourceURL, '');\n    assert.deepEqual(cssModelHeader.isConstructed, true);\n  });\n\n  describe('on primary page change', () => {\n    let cssModel: SDK.CSSModel.CSSModel|null;\n    let resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel|null;\n    const header: Protocol.CSS.CSSStyleSheetHeader = {\n      styleSheetId: 'stylesheet' as Protocol.CSS.StyleSheetId,\n      frameId: 'frame' as Protocol.Page.FrameId,\n      sourceURL: 'http://example.com/styles.css',\n      origin: Protocol.CSS.StyleSheetOrigin.Regular,\n      title: 'title',\n      disabled: false,\n      isInline: false,\n      isMutable: false,\n      isConstructed: false,\n      loadingFailed: false,\n      startLine: 0,\n      startColumn: 0,\n      length: 0,\n      endLine: 0,\n      endColumn: 0,\n    };\n    const frame = {\n      url: 'http://example.com/',\n      resourceTreeModel: () => resourceTreeModel,\n      backForwardCacheDetails: {explanations: []},\n    } as unknown as SDK.ResourceTreeModel.ResourceTreeFrame;\n\n    beforeEach(() => {\n      const target = createTarget();\n      resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n      cssModel = target.model(SDK.CSSModel.CSSModel);\n    });\n\n    it('resets on navigation', () => {\n      assertNotNullOrUndefined(cssModel);\n      assertNotNullOrUndefined(resourceTreeModel);\n\n      cssModel.styleSheetAdded(header);\n      let styleSheetIds =\n          cssModel.getStyleSheetIdsForURL('http://example.com/styles.css' as Platform.DevToolsPath.UrlString);\n      assert.deepEqual(styleSheetIds, ['stylesheet']);\n\n      resourceTreeModel.dispatchEventToListeners(\n          SDK.ResourceTreeModel.Events.PrimaryPageChanged,\n          {frame, type: SDK.ResourceTreeModel.PrimaryPageChangeType.Navigation});\n      styleSheetIds =\n          cssModel.getStyleSheetIdsForURL('http://example.com/styles.css' as Platform.DevToolsPath.UrlString);\n      assert.deepEqual(styleSheetIds, []);\n    });\n\n    it('does not reset on prerender activation', () => {\n      assertNotNullOrUndefined(cssModel);\n      assertNotNullOrUndefined(resourceTreeModel);\n\n      cssModel.styleSheetAdded(header);\n      let styleSheetIds =\n          cssModel.getStyleSheetIdsForURL('http://example.com/styles.css' as Platform.DevToolsPath.UrlString);\n      assert.deepEqual(styleSheetIds, ['stylesheet']);\n\n      resourceTreeModel.dispatchEventToListeners(\n          SDK.ResourceTreeModel.Events.PrimaryPageChanged,\n          {frame, type: SDK.ResourceTreeModel.PrimaryPageChangeType.Activation});\n      styleSheetIds =\n          cssModel.getStyleSheetIdsForURL('http://example.com/styles.css' as Platform.DevToolsPath.UrlString);\n      assert.deepEqual(styleSheetIds, ['stylesheet']);\n    });\n  });\n});\n"]}