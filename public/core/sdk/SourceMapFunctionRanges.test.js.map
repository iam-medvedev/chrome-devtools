{"version":3,"file":"SourceMapFunctionRanges.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/SourceMapFunctionRanges.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {encodeVlqList} from '../../testing/SourceMapEncoder.js';\n\nimport * as SDK from './sdk.js';\n\nconst {buildOriginalScopes, decodePastaRanges} = SDK.SourceMapFunctionRanges;\n\ndescribe('buildOriginalScopes', () => {\n  it('returns an empty global scope for an empty ranges array', () => {\n    const scope = buildOriginalScopes([]);\n\n    assert.isEmpty(scope.children);\n    assert.isFalse(scope.isStackFrame);\n    assert.deepEqual(scope.start, {line: 0, column: 0});\n  });\n\n  it('throws if a range has zero length (i.e. equal start and end positions)', () => {\n    assert.throws(() => buildOriginalScopes([{name: 'foo', start: {line: 5, column: 0}, end: {line: 5, column: 0}}]));\n  });\n\n  it('throws if the start position doesn\\'t come before the end position', () => {\n    assert.throws(() => buildOriginalScopes([{name: 'foo', start: {line: 5, column: 0}, end: {line: 2, column: 0}}]));\n  });\n\n  it('throws for partially overlapping ranges (i.e. \"straddling\")', () => {\n    /*\n     * --- A\n     *  |  --- B\n     * ---  |\n     *     ---\n     */\n    const rangeA = {start: {line: 0, column: 0}, end: {line: 20, column: 0}, name: 'A'};\n    const rangeB = {start: {line: 10, column: 0}, end: {line: 30, column: 0}, name: 'B'};\n\n    assert.throws(() => buildOriginalScopes([rangeA, rangeB]));\n  });\n\n  it('handles nested scopes', () => {\n    /*\n     * --- A\n     *  |    --- B\n     *  |     |\n     *  |    ---\n     * ---\n     */\n    const rangeA = {start: {line: 0, column: 0}, end: {line: 30, column: 0}, name: 'A'};\n    const rangeB = {start: {line: 10, column: 0}, end: {line: 20, column: 0}, name: 'B'};\n\n    const root = buildOriginalScopes([rangeA, rangeB]);\n\n    assert.lengthOf(root.children, 1);\n    assert.deepNestedInclude(root.children[0], rangeA);\n\n    assert.lengthOf(root.children[0].children, 1);\n    assert.deepNestedInclude(root.children[0].children[0], rangeB);\n\n    assert.deepEqual(root.end, rangeA.end);\n  });\n\n  it('handles sibling scopes', () => {\n    /*\n     * --- A\n     *  |\n     * ---\n     * --- B\n     *  |\n     * ---\n     */\n    const rangeA = {start: {line: 0, column: 0}, end: {line: 10, column: 0}, name: 'A'};\n    const rangeB = {start: {line: 20, column: 0}, end: {line: 30, column: 0}, name: 'B'};\n\n    const root = buildOriginalScopes([rangeA, rangeB]);\n\n    assert.lengthOf(root.children, 2);\n    assert.deepNestedInclude(root.children[0], rangeA);\n    assert.deepNestedInclude(root.children[1], rangeB);\n\n    assert.deepEqual(root.end, rangeB.end);\n  });\n\n  it('handles siblings where first.end === second.start (because end is exclusive)', () => {\n    /*\n     * --- A\n     *  |\n     * --- --- B\n     *      |\n     *     ---\n     */\n    const rangeA = {start: {line: 0, column: 0}, end: {line: 10, column: 0}, name: 'A'};\n    const rangeB = {start: {line: 10, column: 0}, end: {line: 20, column: 0}, name: 'B'};\n\n    const root = buildOriginalScopes([rangeA, rangeB]);\n\n    assert.lengthOf(root.children, 2);\n    assert.deepNestedInclude(root.children[0], rangeA);\n    assert.deepNestedInclude(root.children[1], rangeB);\n\n    assert.deepEqual(root.end, rangeB.end);\n  });\n\n  it('handles siblings that either have the same start, or the same end', () => {\n    /*\n     * --- A  --- B\n     *  |      |\n     *  |     ---\n     *  |\n     * ---\n     * --- C\n     *  |    --- D\n     *  |     |\n     * ---   ---\n     */\n    const rangeA = {start: {line: 0, column: 0}, end: {line: 20, column: 0}, name: 'A'};\n    const rangeB = {start: {line: 0, column: 0}, end: {line: 10, column: 0}, name: 'B'};\n    const rangeC = {start: {line: 30, column: 0}, end: {line: 50, column: 0}, name: 'C'};\n    const rangeD = {start: {line: 40, column: 0}, end: {line: 50, column: 0}, name: 'D'};\n\n    const root = buildOriginalScopes([rangeD, rangeB, rangeA, rangeC]);  // Shuffle to check sorting\n\n    assert.lengthOf(root.children, 2);\n    assert.deepNestedInclude(root.children[0], rangeA);\n    assert.deepNestedInclude(root.children[1], rangeC);\n\n    assert.lengthOf(root.children[0].children, 1);\n    assert.deepNestedInclude(root.children[0].children[0], rangeB);\n    assert.lengthOf(root.children[1].children, 1);\n    assert.deepNestedInclude(root.children[1].children[0], rangeD);\n\n    assert.deepEqual(root.end, rangeC.end);\n    assert.deepEqual(root.end, rangeD.end);\n  });\n});\n\ndescribe('decodeBloombergRanges', () => {\n  it('returns an empty list for an empty string', () => {\n    assert.deepEqual(decodePastaRanges('', []), []);\n  });\n\n  it('ignores ranges with non-existing name index', () => {\n    const mapping = encodeVlqList([0, 0, 0, 5, 0]);\n\n    assert.deepEqual(decodePastaRanges(mapping, []), []);\n  });\n\n  it('decodes nested ranges', () => {\n    const mappings = [\n      encodeVlqList([0, 0, 10, 30, 2]),\n      encodeVlqList([1, -20, 5, 10, 2]),\n    ].join(',');\n\n    assert.deepEqual(decodePastaRanges(mappings, ['foo', 'bar']), [\n      {start: {line: 0, column: 10}, end: {line: 30, column: 2}, name: 'foo'},\n      {start: {line: 10, column: 15}, end: {line: 20, column: 4}, name: 'bar'},\n    ]);\n  });\n\n  it('decodes sibling scopes', () => {\n    const mappings = [\n      encodeVlqList([0, 0, 10, 10, 2]),\n      encodeVlqList([1, 10, 0, 10, 0]),\n    ].join(',');\n\n    assert.deepEqual(decodePastaRanges(mappings, ['foo', 'bar']), [\n      {start: {line: 0, column: 10}, end: {line: 10, column: 2}, name: 'foo'},\n      {start: {line: 20, column: 10}, end: {line: 30, column: 2}, name: 'bar'},\n    ]);\n  });\n});\n"]}