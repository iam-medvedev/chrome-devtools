{"version":3,"file":"SourceMapScopesInfo.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/SourceMapScopesInfo.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {GeneratedRangeBuilder, OriginalScopeBuilder} from '../../testing/SourceMapEncoder.js';\n\nimport * as SDK from './sdk.js';\n\nconst {SourceMapScopesInfo} = SDK.SourceMapScopesInfo;\n\ndescribe('SourceMapScopesInfo', () => {\n  describe('findInlinedFunctions', () => {\n    it('returns the single original function name if nothing was inlined', () => {\n      const names: string[] = [];\n      const originalScopes = [new OriginalScopeBuilder(names)\n                                  .start(0, 0, 'global')\n                                  .start(5, 0, 'function', 'foo')\n                                  .end(10, 0)\n                                  .end(20, 0)\n                                  .build()];\n\n      const generatedRanges = new GeneratedRangeBuilder(names)\n                                  .start(0, 0, {definition: {sourceIdx: 0, scopeIdx: 0}})\n                                  .start(0, 0, {definition: {sourceIdx: 0, scopeIdx: 1}, isScope: true})\n                                  .end(0, 5)\n                                  .end(0, 5)\n                                  .build();\n\n      const info = SourceMapScopesInfo.parseFromMap({names, originalScopes, generatedRanges});\n\n      assert.deepEqual(info.findInlinedFunctions(0, 3), [{name: 'foo', callsite: undefined}]);\n    });\n\n    it('returns the names of the surrounding function plus all the inlined function names', () => {\n      // 'foo' calls 'bar', 'bar' calls 'baz'. 'bar' and 'baz' are inlined into 'foo'.\n      const names: string[] = [];\n      const originalScopes = [new OriginalScopeBuilder(names)\n                                  .start(0, 0, 'global')\n                                  .start(10, 0, 'function', 'foo')\n                                  .end(20, 0)\n                                  .start(30, 0, 'function', 'bar')\n                                  .end(40, 0)\n                                  .start(50, 0, 'function', 'baz')\n                                  .end(60, 0)\n                                  .end(70, 0)\n                                  .build()];\n\n      const generatedRanges =\n          new GeneratedRangeBuilder(names)\n              .start(0, 0, {definition: {sourceIdx: 0, scopeIdx: 0}})\n              .start(0, 0, {definition: {sourceIdx: 0, scopeIdx: 1}, isScope: true})\n              .start(0, 5, {definition: {sourceIdx: 0, scopeIdx: 3}, callsite: {sourceIdx: 0, line: 15, column: 0}})\n              .start(0, 5, {definition: {sourceIdx: 0, scopeIdx: 5}, callsite: {sourceIdx: 0, line: 35, column: 0}})\n              .end(0, 10)\n              .end(0, 10)\n              .end(0, 10)\n              .end(0, 10)\n              .build();\n\n      const info = SourceMapScopesInfo.parseFromMap({names, originalScopes, generatedRanges});\n\n      assert.deepEqual(info.findInlinedFunctions(0, 4), [{name: 'foo', callsite: undefined}]);\n      assert.deepEqual(info.findInlinedFunctions(0, 7), [\n        {name: 'baz', callsite: {sourceIndex: 0, line: 35, column: 0}},\n        {name: 'bar', callsite: {sourceIndex: 0, line: 15, column: 0}},\n        {name: 'foo', callsite: undefined},\n      ]);\n    });\n  });\n});\n"]}