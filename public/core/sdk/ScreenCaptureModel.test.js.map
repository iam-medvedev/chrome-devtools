{"version":3,"file":"ScreenCaptureModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/ScreenCaptureModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  clearAllMockConnectionResponseHandlers,\n  clearMockConnectionResponseHandler,\n  describeWithMockConnection,\n  dispatchEvent,\n  setMockConnectionResponseHandler,\n} from '../../testing/MockConnection.js';\n\nimport * as SDK from './sdk.js';\n\nconst noop = () => {};\n\nconst QUALITY = 80;\nconst MAX_WIDTH = 10;\nconst MAX_HEIGHT = 20;\nconst EVERY_NTH_FRAME = 2;\n\nasync function expectStartScreencastCalled<T>(action: () => Promise<T>| T): Promise<{\n  cdpRequest: Protocol.Page.StartScreencastRequest,\n  actionResult: T,\n}> {\n  clearMockConnectionResponseHandler('Page.startScreencast');\n\n  const startScreencastCalledPromise = Promise.withResolvers<Protocol.Page.StartScreencastRequest>();\n  setMockConnectionResponseHandler('Page.startScreencast', (request: Protocol.Page.StartScreencastRequest) => {\n    startScreencastCalledPromise.resolve(request);\n    return {};\n  });\n\n  const response = await action();\n\n  return {\n    cdpRequest: await startScreencastCalledPromise.promise,\n    actionResult: response,\n  };\n}\n\nasync function expectStopScreencastCaled<T>(action: () => Promise<T>| T): Promise<{\n  actionResult: T,\n}> {\n  clearMockConnectionResponseHandler('Page.stopScreencast');\n\n  const stopScreencastCalledPromise = Promise.withResolvers<void>();\n  setMockConnectionResponseHandler('Page.stopScreencast', () => {\n    stopScreencastCalledPromise.resolve();\n    return {};\n  });\n\n  const response = await action();\n\n  return {actionResult: response};\n}\n\nasync function startMockScreencast(screenCaptureModel: SDK.ScreenCaptureModel.ScreenCaptureModel, {\n  format = Protocol.Page.StartScreencastRequestFormat.Jpeg,\n  quality = QUALITY,\n  maxWidth = MAX_WIDTH,\n  maxHeight = MAX_HEIGHT,\n  everyNthFrame = EVERY_NTH_FRAME,\n  onFrame = noop,\n  onVisibilityChanged = noop,\n}: {\n  format?: Protocol.Page.StartScreencastRequestFormat,\n  quality?: number,\n  maxWidth?: number,\n  maxHeight?: number,\n  everyNthFrame?: number,\n  onFrame?: () => void,\n  onVisibilityChanged?: () => void,\n} = {}) {\n  const {\n    cdpRequest,\n    actionResult: id,\n  } = await expectStartScreencastCalled(() => {\n    return screenCaptureModel.startScreencast(\n        format, quality, maxWidth, maxHeight, everyNthFrame, onFrame, onVisibilityChanged);\n  });\n\n  return {\n    id,\n    cdpRequest,\n  };\n}\n\nasync function stopMockScreencast(screenCaptureModel: SDK.ScreenCaptureModel.ScreenCaptureModel, {id}: {\n  id: number,\n}) {\n  await expectStopScreencastCaled(() => {\n    screenCaptureModel.stopScreencast(id);\n  });\n}\n\ndescribeWithMockConnection('ScreenCaptureModel', () => {\n  let target: SDK.Target.Target;\n  let screenCaptureModel: SDK.ScreenCaptureModel.ScreenCaptureModel;\n  beforeEach(() => {\n    target = createTarget();\n    const model = target.model(SDK.ScreenCaptureModel.ScreenCaptureModel);\n    assert.exists(model);\n    screenCaptureModel = model;\n  });\n\n  afterEach(() => {\n    clearAllMockConnectionResponseHandlers();\n  });\n\n  describe('Screencasting', () => {\n    describe('only one screencast operation', () => {\n      it('startScreencast should start screen casting', async () => {\n        const {cdpRequest} = await startMockScreencast(screenCaptureModel, {\n          format: Protocol.Page.StartScreencastRequestFormat.Jpeg,\n          quality: 1,\n          maxWidth: 2,\n          maxHeight: 3,\n          everyNthFrame: 4,\n        });\n\n        assert.deepEqual(cdpRequest, {\n          format: Protocol.Page.StartScreencastRequestFormat.Jpeg,\n          quality: 1,\n          maxWidth: 2,\n          maxHeight: 3,\n          everyNthFrame: 4\n        });\n      });\n\n      it('stopScreencast should stop screen casting', async () => {\n        const {id} = await startMockScreencast(screenCaptureModel);\n\n        await stopMockScreencast(screenCaptureModel, {id});\n      });\n\n      it('stopScreencast throws an error for trying to stop screencast when there are no screencast operations in progress',\n         async () => {\n           try {\n             await stopMockScreencast(screenCaptureModel, {id: 42});\n             assert.fail('Expected `stopScreencast` to throw');\n           } catch (err) {\n             assert.strictEqual(err.message, 'There is no screencast operation to stop.');\n           }\n         });\n\n      it('stopScreencast throws an error for trying to stop a different screencast than what is being in progress right now',\n         async () => {\n           await startMockScreencast(screenCaptureModel);\n           try {\n             await stopMockScreencast(screenCaptureModel, {id: 42});\n             assert.fail('Expected `stopScreencast` to throw');\n           } catch (err) {\n             assert.strictEqual(\n                 err.message, 'Trying to stop a screencast operation that is not being served right now.');\n           }\n         });\n    });\n\n    describe('multiple screencast operations', () => {\n      beforeEach(() => {\n        setMockConnectionResponseHandler('Page.stopScreencast', () => ({}));\n      });\n\n      it('second call to startScreencast stops the ongoing screencasting', async () => {\n        await startMockScreencast(screenCaptureModel);\n\n        // Stop screencast is called for the initial call before starting a new screencast.\n        await expectStopScreencastCaled(async () => {\n          await startMockScreencast(screenCaptureModel);\n        });\n      });\n\n      it('only the last operation receives the callbacks', async () => {\n        const initialFrameCallback = sinon.stub();\n        const initialVisibilityChangeCallback = sinon.stub();\n        const lastFrameCallback = sinon.stub();\n        const lastVisibilityChangeCallback = sinon.stub();\n\n        await startMockScreencast(\n            screenCaptureModel, {onFrame: initialFrameCallback, onVisibilityChanged: initialVisibilityChangeCallback});\n        await startMockScreencast(\n            screenCaptureModel, {onFrame: lastFrameCallback, onVisibilityChanged: lastVisibilityChangeCallback});\n        dispatchEvent(target, 'Page.screencastFrame', {});\n        dispatchEvent(target, 'Page.screencastVisibilityChanged', {});\n\n        sinon.assert.notCalled(initialFrameCallback);\n        sinon.assert.notCalled(initialVisibilityChangeCallback);\n        sinon.assert.calledOnce(lastFrameCallback);\n        sinon.assert.calledOnce(lastVisibilityChangeCallback);\n      });\n\n      it('after the last operation is stopped, the previous one continues to receive callbacks', async () => {\n        const initialFrameCallback = sinon.stub();\n        const initialVisibilityChangeCallback = sinon.stub();\n        const lastFrameCallback = sinon.stub();\n        const lastVisibilityChangeCallback = sinon.stub();\n\n        await startMockScreencast(\n            screenCaptureModel, {onFrame: initialFrameCallback, onVisibilityChanged: initialVisibilityChangeCallback});\n        const {id} = await startMockScreencast(\n            screenCaptureModel, {onFrame: lastFrameCallback, onVisibilityChanged: lastVisibilityChangeCallback});\n        await stopMockScreencast(screenCaptureModel, {id});\n        dispatchEvent(target, 'Page.screencastFrame', {});\n        dispatchEvent(target, 'Page.screencastVisibilityChanged', {});\n\n        sinon.assert.calledOnce(initialFrameCallback);\n        sinon.assert.calledOnce(initialVisibilityChangeCallback);\n        sinon.assert.notCalled(lastFrameCallback);\n        sinon.assert.notCalled(lastVisibilityChangeCallback);\n      });\n    });\n  });\n});\n"]}