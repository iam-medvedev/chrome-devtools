{"version":3,"file":"SourceMapScopes.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/SourceMapScopes.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B;;;;;;;;GAQG;AAEH,OAAO,EAAC,kBAAkB,EAAC,MAAM,gBAAgB,CAAC;AAwDlD,MAAM,UAAU,YAAY,CAAC,qBAA+B,EAAE,qBAA6B,EAAE,KAAe;IAE1G,MAAM,cAAc,GAAG,qBAAqB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IAC7F,OAAO,EAAC,cAAc,EAAE,cAAc,EAAE,EAAoB,EAAC,CAAC;AAChE,CAAC;AAED,SAAS,mBAAmB,CAAC,oBAA4B,EAAE,KAAe;IACxE,MAAM,UAAU,GAAoB,EAAE,CAAC;IACvC,IAAI,IAAI,GAAG,CAAC,CAAC;IAEb,KAAK,MAAM,IAAI,IAAI,wBAAwB,CAAC,oBAAoB,CAAC,EAAE;QACjE,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC;QAClB,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC;QACtB,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;YACjB,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnC,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC3C,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YACxD,UAAU,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,GAAG,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAE,EAAC,CAAC,CAAC;SACpG;aAAM;YACL,MAAM,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC;YAC/B,IAAI,CAAC,KAAK,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;aACjG;YACD,KAAK,CAAC,GAAG,GAAG,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;YAE3B,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC3B,2EAA2E;gBAC3E,OAAO,KAAK,CAAC;aACd;YACD,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxD;KACF;IACD,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;AACvD,CAAC;AAgBD,SAAS,OAAO,CAAC,IAAuD;IACtE,OAAO,MAAM,IAAI,IAAI,CAAC;AACxB,CAAC;AAED,QAAQ,CAAC,CACL,wBAAwB,CAAC,oBAA4B;IAEvD,MAAM,IAAI,GAAG,IAAI,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,IAAI,UAAU,GAAG,CAAC,CAAC;IAEnB,OAAO,IAAI,CAAC,OAAO,EAAE,EAAE;QACrB,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE;YACvB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAE,eAAe;SAC9B;QAED,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QAC5D,IAAI,IAAI,KAAK,CAAC,IAAI,MAAM,GAAG,UAAU,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,4FAA4F,CAAC,CAAC;SAC/G;QACD,UAAU,GAAG,MAAM,CAAC;QAEpB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE;YAC1C,MAAM,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;YACrB,SAAS;SACV;QAED,MAAM,SAAS,GAA8B;YAC3C,IAAI;YACJ,MAAM;YACN,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE;YACtB,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE;YACvB,SAAS,EAAE,EAAE;SACd,CAAC;QAEF,IAAI,SAAS,CAAC,KAAK,GAAG,GAAG,EAAE;YACzB,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;SACnC;QAED,IAAI,SAAS,CAAC,KAAK,GAAG,GAAG,EAAE;YACzB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,EAAE,CAAC,EAAE;gBAC9B,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;aAC5C;SACF;QAED,MAAM,SAAS,CAAC;KACjB;AACH,CAAC;AAED,SAAS,WAAW,CAAC,GAAqB,EAAE,KAAe;IACzD,IAAI,GAAG,KAAK,SAAS,IAAI,GAAG,GAAG,CAAC,EAAE;QAChC,OAAO,SAAS,CAAC;KAClB;IACD,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;AACpB,CAAC;AAED,SAAS,UAAU,CAAC,IAAY;IAC9B,QAAQ,IAAI,EAAE;QACZ,KAAK,GAAG;YACN,OAAO,QAAQ,CAAC;QAClB,KAAK,GAAG;YACN,OAAO,UAAU,CAAC;QACpB,KAAK,GAAG;YACN,OAAO,OAAO,CAAC;QACjB,KAAK,GAAG;YACN,OAAO,OAAO,CAAC;QACjB;YACE,MAAM,IAAI,KAAK,CAAC,sBAAsB,IAAI,EAAE,CAAC,CAAC;KACjD;AACH,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * @fileoverview This file implements the current state of the \"Scopes\" proposal\n * for the source map spec.\n *\n * See https://github.com/tc39/source-map-rfc/blob/main/proposals/scopes.md.\n *\n * The proposal is still being worked on so we expect the implementation details\n * in this file to change frequently.\n */\n\nimport {StringCharIterator} from './SourceMap.js';\n\n/**\n * A scope in the authored source.\n */\nexport interface OriginalScope {\n  start: Position;\n  end: Position;\n  kind: ScopeKind;\n  name?: string;\n  variables: string[];\n  children: OriginalScope[];\n}\n\n/**\n * A range (can be a scope) in the generated JavaScript.\n */\nexport interface GeneratedRange {\n  start: Position;\n  end: Position;\n  originalScope?: OriginalScope;\n\n  /**\n   * If this `GeneratedRange` is the result of inlining `originalScope`, then `callsite`\n   * refers to where `originalScope` was called in the original (\"authored\") code.\n   */\n  callsite?: OriginalPosition;\n\n  /**\n   * Expressions that compute the values of the variables of this OriginalScope. The length\n   * of `values` must match the length of `originalScope.variables`.\n   *\n   * For each variable this can either be a single expression (valid for the full `GeneratedRange`),\n   * or an array of `BindingRange`s, e.g. if computing the value requires different expressions\n   * throughout the range or if the variable is only available in parts of the `GeneratedRange`.\n   */\n  values?: (string|BindingRange[])[];\n}\n\nexport type ScopeKind = 'global'|'class'|'function'|'block';\n\nexport interface BindingRange {\n  value?: string;\n  from: Position;\n  to: Position;\n}\n\nexport interface Position {\n  line: number;\n  column: number;\n}\n\nexport interface OriginalPosition extends Position {\n  sourceIndex: number;\n}\n\nexport function decodeScopes(encodedOriginalScopes: string[], encodedGeneratedRange: string, names: string[]):\n    {originalScopes: OriginalScope[], generatedRange: GeneratedRange} {\n  const originalScopes = encodedOriginalScopes.map(scope => decodeOriginalScope(scope, names));\n  return {originalScopes, generatedRange: {} as GeneratedRange};\n}\n\nfunction decodeOriginalScope(encodedOriginalScope: string, names: string[]): OriginalScope {\n  const scopeStack: OriginalScope[] = [];\n  let line = 0;\n\n  for (const item of decodeOriginalScopeItems(encodedOriginalScope)) {\n    line += item.line;\n    const {column} = item;\n    if (isStart(item)) {\n      const kind = decodeKind(item.kind);\n      const name = resolveName(item.name, names);\n      const variables = item.variables.map(idx => names[idx]);\n      scopeStack.push({start: {line, column}, end: {line, column}, kind, name, variables, children: []});\n    } else {\n      const scope = scopeStack.pop();\n      if (!scope) {\n        throw new Error('Scope items not nested properly: encountered \"end\" item without \"start\" item');\n      }\n      scope.end = {line, column};\n\n      if (scopeStack.length === 0) {\n        // We are done. There might be more top-level scopes but we only allow one.\n        return scope;\n      }\n      scopeStack[scopeStack.length - 1].children.push(scope);\n    }\n  }\n  throw new Error('Malformed original scope encoding');\n}\n\ninterface EncodedOriginalScopeStart {\n  line: number;\n  column: number;\n  kind: number;\n  flags: number;\n  name?: number;\n  variables: number[];\n}\n\ninterface EncodedOriginalScopeEnd {\n  line: number;\n  column: number;\n}\n\nfunction isStart(item: EncodedOriginalScopeStart|EncodedOriginalScopeEnd): item is EncodedOriginalScopeStart {\n  return 'kind' in item;\n}\n\nfunction*\n    decodeOriginalScopeItems(encodedOriginalScope: string):\n        Generator<EncodedOriginalScopeStart|EncodedOriginalScopeEnd> {\n  const iter = new StringCharIterator(encodedOriginalScope);\n  let prevColumn = 0;\n\n  while (iter.hasNext()) {\n    if (iter.peek() === ',') {\n      iter.next();  // Consume ','.\n    }\n\n    const [line, column] = [iter.decodeVLQ(), iter.decodeVLQ()];\n    if (line === 0 && column < prevColumn) {\n      throw new Error('Malformed original scope encoding: start/end items must be ordered w.r.t. source positions');\n    }\n    prevColumn = column;\n\n    if (!iter.hasNext() || iter.peek() === ',') {\n      yield {line, column};\n      continue;\n    }\n\n    const startItem: EncodedOriginalScopeStart = {\n      line,\n      column,\n      kind: iter.decodeVLQ(),\n      flags: iter.decodeVLQ(),\n      variables: [],\n    };\n\n    if (startItem.flags & 0x1) {\n      startItem.name = iter.decodeVLQ();\n    }\n\n    if (startItem.flags & 0x2) {\n      const count = iter.decodeVLQ();\n      for (let i = 0; i < count; ++i) {\n        startItem.variables.push(iter.decodeVLQ());\n      }\n    }\n\n    yield startItem;\n  }\n}\n\nfunction resolveName(idx: number|undefined, names: string[]): string|undefined {\n  if (idx === undefined || idx < 0) {\n    return undefined;\n  }\n  return names[idx];\n}\n\nfunction decodeKind(kind: number): ScopeKind {\n  switch (kind) {\n    case 0x1:\n      return 'global';\n    case 0x2:\n      return 'function';\n    case 0x3:\n      return 'class';\n    case 0x4:\n      return 'block';\n    default:\n      throw new Error(`Unknown scope kind ${kind}`);\n  }\n}\n"]}