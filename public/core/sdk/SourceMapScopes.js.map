{"version":3,"file":"SourceMapScopes.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/SourceMapScopes.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * @fileoverview This file implements the current state of the \"Scopes\" proposal\n * for the source map spec.\n *\n * See https://github.com/tc39/source-map-rfc/blob/main/proposals/scopes.md.\n *\n * The proposal is still being worked on so we expect the implementation details\n * in this file to change frequently.\n */\n\n/**\n * A scope in the authored source.\n */\nexport interface OriginalScope {\n  start: Position;\n  end: Position;\n  kind: ScopeKind;\n  name?: string;\n  variables: string[];\n  children?: OriginalScope[];\n}\n\n/**\n * A range (can be a scope) in the generated JavaScript.\n */\nexport interface GeneratedRange {\n  start: Position;\n  end: Position;\n  originalScope?: OriginalScope;\n\n  /**\n   * If this `GeneratedRange` is the result of inlining `originalScope`, then `callsite`\n   * refers to where `originalScope` was called in the original (\"authored\") code.\n   */\n  callsite?: OriginalPosition;\n\n  /**\n   * Expressions that compute the values of the variables of this OriginalScope. The length\n   * of `values` must match the length of `originalScope.variables`.\n   *\n   * For each variable this can either be a single expression (valid for the full `GeneratedRange`),\n   * or an array of `BindingRange`s, e.g. if computing the value requires different expressions\n   * throughout the range or if the variable is only available in parts of the `GeneratedRange`.\n   */\n  values?: (string|BindingRange[])[];\n}\n\nexport type ScopeKind = 'global'|'module'|'class'|'function'|'block';\n\nexport interface BindingRange {\n  value?: string;\n  from: Position;\n  to: Position;\n}\n\nexport interface Position {\n  line: number;\n  column: number;\n}\n\nexport interface OriginalPosition extends Position {\n  sourceIndex: number;\n}\n"]}