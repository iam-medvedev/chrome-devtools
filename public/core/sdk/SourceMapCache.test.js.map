{"version":3,"file":"SourceMapCache.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/SourceMapCache.test.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,UAAU,CAAC;AAEhC,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,KAAwC,CAAC;IAE7C,UAAU,CAAC,GAAG,EAAE;QACd,KAAK,GAAG,GAAG,CAAC,cAAc,CAAC,cAAc,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,KAAK,CAAC,cAAc,EAAE,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,GAA4B,CAAC,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,GAAG,GAA8B;YACrC,OAAO,EAAE,CAAC;YACV,OAAO,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;YAC7B,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,MAAM,KAAK,CAAC,GAAG,CAAC,GAA4B,EAAE,GAAG,CAAC,CAAC;QAEnD,MAAM,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,GAA4B,CAAC,EAAE,GAAG,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,GAAG,GAA8B;YACrC,OAAO,EAAE,CAAC;YACV,OAAO,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;YAC7B,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,MAAM,KAAK,CAAC,GAAG,CAAC,GAA4B,EAAE,GAAG,CAAC,CAAC;QAEnD,MAAM,IAAI,GAAG;YACX,GAAG,GAAG;YACN,cAAc,EAAE,CAAC,aAAa,EAAE,aAAa,CAAC;SAC/C,CAAC;QACF,MAAM,KAAK,CAAC,GAAG,CAAC,GAA4B,EAAE,IAAI,CAAC,CAAC;QAEpD,MAAM,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,GAA4B,CAAC,EAAE,IAAI,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from './sdk.js';\n\ndescribe('SourceMapCache', () => {\n  let cache: SDK.SourceMapCache.SourceMapCache;\n\n  beforeEach(() => {\n    cache = SDK.SourceMapCache.SourceMapCache.createForTest('cache-for-test');\n  });\n\n  afterEach(async () => {\n    await cache.disposeForTest();\n  });\n\n  it('returns null for an unknown Debug ID', async () => {\n    assert.isNull(await cache.get('1' as SDK.SourceMap.DebugId));\n  });\n\n  it('allows retrieval of a source map', async () => {\n    const map: SDK.SourceMap.SourceMapV3 = {\n      version: 3,\n      sources: ['foo.ts', 'bar.ts'],\n      mappings: '',\n    };\n    await cache.set('1' as SDK.SourceMap.DebugId, map);\n\n    assert.deepEqual(await cache.get('1' as SDK.SourceMap.DebugId), map);\n  });\n\n  it('allows updating of a source map', async () => {\n    const map: SDK.SourceMap.SourceMapV3 = {\n      version: 3,\n      sources: ['foo.ts', 'bar.ts'],\n      mappings: '',\n    };\n    await cache.set('1' as SDK.SourceMap.DebugId, map);\n\n    const map2 = {\n      ...map,\n      sourcesContent: ['foo content', 'bar content'],\n    };\n    await cache.set('1' as SDK.SourceMap.DebugId, map2);\n\n    assert.deepEqual(await cache.get('1' as SDK.SourceMap.DebugId), map2);\n  });\n});\n"]}