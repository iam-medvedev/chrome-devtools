{"version":3,"file":"RehydratingConnection.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/RehydratingConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * This file is the implementation of a protocol `Connection` object\n *  which is central to the rehydrated devtools feature. The premise of\n * this feature is that the enhanced traces will contain enough\n * information to power this class with all metadata needed. This class\n * then interacts with rehydrated devtools in a way that produces the\n * equivalent result as live debugging session.\n *\n * It's much more of a state machine than the other Connection\n * implementations, which simply interact with a network protocol in\n * one way or another.\n *\n * Note on the methodology to derive runtime/debugger domain behavior below:\n * We can use protocol monitor in the devtools to look at how dt-fe\n * communicates with the backend, and it's also how majority of the behavior\n * in the rehydrated sesion was derived at the first place. In the event of\n * adding more support and capability to rehydrated session, developers will\n * want to look at protocol monitor to imitate the behavior in a real session\n *\n */\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\nimport type * as ProtocolClient from '../protocol_client/protocol_client.js';\n\nimport * as EnhancedTraces from './EnhancedTracesParser.js';\nimport type {\n  ProtocolMessage, RehydratingExecutionContext, RehydratingScript, RehydratingTarget, ServerMessage, TraceFile} from\n  './RehydratingObject.js';\nimport {TraceObject} from './TraceObject.js';\n\nconst UIStrings = {\n  /**\n   * @description Text that appears when no source text is available for the given script\n   */\n  noSourceText: 'No source text available',\n  /**\n   * @description Text to indicate rehydrating connection cannot find host window\n   */\n  noHostWindow: 'Can not find host window',\n  /**\n   * @description Text to indicate that there is an error loading the log\n   */\n  errorLoadingLog: 'Error loading log',\n} as const;\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/RehydratingConnection.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface RehydratingConnectionInterface {\n  postToFrontend: (arg: ServerMessage) => void;\n}\n\nexport const enum RehydratingConnectionState {\n  UNINITIALIZED = 1,\n  INITIALIZED = 2,\n  REHYDRATED = 3,\n}\n\nexport class RehydratingConnection implements ProtocolClient.InspectorBackend.Connection {\n  rehydratingConnectionState: RehydratingConnectionState = RehydratingConnectionState.UNINITIALIZED;\n  onDisconnect: ((arg0: string) => void)|null = null;\n  onMessage: ((arg0: Object) => void)|null = null;\n  trace: TraceFile|null = null;\n  sessions = new Map<number, RehydratingSessionBase>();\n  #onConnectionLost: (message: Platform.UIString.LocalizedString) => void;\n  #rehydratingWindow: Window&typeof globalThis;\n  #onReceiveHostWindowPayloadBound = this.#onReceiveHostWindowPayload.bind(this);\n\n  constructor(onConnectionLost: (message: Platform.UIString.LocalizedString) => void) {\n    // If we're invoking this class, we're in the rehydrating pop-up window. Rename window for clarity.\n    this.#onConnectionLost = onConnectionLost;\n    this.#rehydratingWindow = window;\n    this.#setupMessagePassing();\n  }\n\n  #setupMessagePassing(): void {\n    this.#rehydratingWindow.addEventListener('message', this.#onReceiveHostWindowPayloadBound);\n    if (!this.#rehydratingWindow.opener) {\n      this.#onConnectionLost(i18nString(UIStrings.noHostWindow));\n    }\n    this.#rehydratingWindow.opener.postMessage({type: 'REHYDRATING_WINDOW_READY'});\n  }\n\n  /**\n   * This is a callback for rehydrated session to receive payload from host window. Payload includes but not limited to\n   * the trace event and all necessary data to power a rehydrated session.\n   */\n  #onReceiveHostWindowPayload(event: MessageEvent): void {\n    if (event.data.type === 'REHYDRATING_TRACE_FILE') {\n      const {traceFile} = event.data;\n      const reader = new FileReader();\n      reader.onload = async(): Promise<void> => {\n        await this.startHydration(reader.result as string);\n      };\n      reader.onerror = (): void => {\n        this.#onConnectionLost(i18nString(UIStrings.errorLoadingLog));\n      };\n      reader.readAsText(traceFile);\n    }\n    this.#rehydratingWindow.removeEventListener('message', this.#onReceiveHostWindowPayloadBound);\n  }\n\n  async startHydration(logPayload: string): Promise<boolean> {\n    // OnMessage should've been set before hydration, and the connection should\n    // be initialized and not hydrated already.\n    if (!this.onMessage || this.rehydratingConnectionState !== RehydratingConnectionState.INITIALIZED) {\n      return false;\n    }\n\n    const payload = JSON.parse(logPayload) as TraceFile;\n    if (!('traceEvents' in payload)) {\n      console.error('RehydratingConnection failed to initialize due to missing trace events in payload');\n      return false;\n    }\n\n    this.trace = payload;\n    const enhancedTracesParser = new EnhancedTraces.EnhancedTracesParser(payload);\n    const dataPerTarget = enhancedTracesParser.data();\n\n    let sessionId = 0;\n    // Set up default rehydrating session.\n    this.sessions.set(sessionId, new RehydratingSessionBase(this));\n    for (const [target, [executionContexts, scripts]] of dataPerTarget.entries()) {\n      this.postToFrontend({\n        method: 'Target.targetCreated',\n        params: {\n          targetInfo: {\n            targetId: target.targetId,\n            type: target.type,\n            title: target.url,\n            url: target.url,\n            attached: false,\n            canAccessOpener: false,\n          },\n        },\n      });\n\n      // Create new session associated to the target created and send\n      // Target.attachedToTarget to frontend.\n      sessionId += 1;\n      this.sessions.set(sessionId, new RehydratingSession(sessionId, target, executionContexts, scripts, this));\n    }\n    await this.#onRehydrated();\n    return true;\n  }\n\n  async #onRehydrated(): Promise<void> {\n    if (!this.trace) {\n      return;\n    }\n\n    this.rehydratingConnectionState = RehydratingConnectionState.REHYDRATED;\n    // Use revealer to load trace into performance panel\n    const trace = new TraceObject(this.trace.traceEvents as object[], this.trace.metadata);\n    await Common.Revealer.reveal(trace);\n  }\n\n  setOnMessage(onMessage: (arg0: (Object|string)) => void): void {\n    this.onMessage = onMessage;\n    this.rehydratingConnectionState = RehydratingConnectionState.INITIALIZED;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.onDisconnect = onDisconnect;\n  }\n\n  // The function \"sendRawMessage\" is typically devtools front-end\n  // sending message to the backend via CDP. In this case, given that Rehydrating\n  // connection is an emulation of devtool back-end, sendRawMessage here\n  // is in fact rehydrating connection directly handling and acting on the\n  // receieved message.\n  sendRawMessage(message: string|object): void {\n    if (typeof message === 'string') {\n      message = JSON.parse(message);\n    }\n    const data = message as ProtocolMessage;\n    if (typeof data.sessionId !== 'undefined') {\n      const session = this.sessions.get(data.sessionId);\n      if (session) {\n        session.handleFrontendMessageAsFakeCDPAgent(data);\n      } else {\n        console.error('Invalid SessionId: ' + data.sessionId);\n      }\n    } else {\n      this.sessions.get(0)?.handleFrontendMessageAsFakeCDPAgent(data);\n    }\n  }\n\n  // Posting rehydrating connection's message/response\n  // to devtools frontend through debugger protocol.\n  postToFrontend(arg: ServerMessage): void {\n    if (this.onMessage) {\n      this.onMessage(arg);\n    } else {\n      // onMessage should be set before the connection is rehydrated\n      console.error('onMessage was not initialized');\n    }\n  }\n\n  disconnect(): Promise<void> {\n    return Promise.reject();\n  }\n}\n\n// Default rehydrating session with default responses.\nclass RehydratingSessionBase {\n  connection: RehydratingConnectionInterface|null = null;\n\n  constructor(connection: RehydratingConnectionInterface) {\n    this.connection = connection;\n  }\n\n  sendMessageToFrontend(payload: ServerMessage): void {\n    requestAnimationFrame(() => {\n      if (this.connection) {\n        this.connection.postToFrontend(payload);\n      }\n    });\n  }\n\n  handleFrontendMessageAsFakeCDPAgent(data: ProtocolMessage): void {\n    // Send default response in default session.\n    this.sendMessageToFrontend({\n      id: data.id,\n      result: {},\n    });\n  }\n}\n\nexport class RehydratingSession extends RehydratingSessionBase {\n  sessionId: number;\n  target: RehydratingTarget;\n  executionContexts: RehydratingExecutionContext[] = [];\n  scripts: RehydratingScript[] = [];\n\n  constructor(\n      sessionId: number, target: RehydratingTarget, executionContexts: RehydratingExecutionContext[],\n      scripts: RehydratingScript[], connection: RehydratingConnectionInterface) {\n    super(connection);\n    this.sessionId = sessionId;\n    this.target = target;\n    this.executionContexts = executionContexts;\n    this.scripts = scripts;\n    this.sessionAttachToTarget();\n  }\n\n  override sendMessageToFrontend(payload: ServerMessage, attachSessionId = true): void {\n    // Attach the session's Id to the message.\n    if (this.sessionId !== 0 && attachSessionId) {\n      payload.sessionId = this.sessionId;\n    }\n    super.sendMessageToFrontend(payload);\n  }\n\n  override handleFrontendMessageAsFakeCDPAgent(data: ProtocolMessage): void {\n    switch (data.method) {\n      case 'Runtime.enable':\n        this.handleRuntimeEnabled(data.id);\n        break;\n      case 'Debugger.enable':\n        this.handleDebuggerEnable(data.id);\n        break;\n      case 'Debugger.getScriptSource':\n        if (data.params) {\n          const params = data.params as Protocol.Debugger.GetScriptSourceRequest;\n          this.handleDebuggerGetScriptSource(data.id, params.scriptId);\n        }\n        break;\n      default:\n        this.sendMessageToFrontend({\n          id: data.id,\n          result: {},\n        });\n        break;\n    }\n  }\n\n  private sessionAttachToTarget(): void {\n    this.sendMessageToFrontend(\n        {\n          method: 'Target.attachedToTarget',\n          params: {\n            sessionId: this.sessionId,\n            waitingForDebugger: false,\n            targetInfo: {\n              targetId: this.target.targetId,\n              type: this.target.type,\n              title: this.target.url,\n              url: this.target.url,\n              attached: true,\n              canAccessOpener: false,\n            },\n          },\n        },\n        /* attachSessionId */ false);\n  }\n\n  // Runtime.Enable indicates that Runtime domain is flushing the event to communicate\n  // the current state with the backend. In rehydrating connection, we made up the artificial\n  // execution context to support the rehydrated session.\n  private handleRuntimeEnabled(id: number): void {\n    for (const executionContext of this.executionContexts) {\n      executionContext.name = executionContext.origin;\n      this.sendMessageToFrontend({\n        method: 'Runtime.executionContextCreated',\n        params: {\n          context: executionContext,\n        },\n      });\n    }\n\n    this.sendMessageToFrontend({\n      id,\n      result: {},\n    });\n  }\n\n  private handleDebuggerGetScriptSource(id: number, scriptId: Protocol.Runtime.ScriptId): void {\n    const script = this.scripts.find(script => script.scriptId === scriptId);\n    if (!script) {\n      console.error('No script for id: ' + scriptId);\n      return;\n    }\n    this.sendMessageToFrontend({\n      id,\n      result: {\n        scriptSource: typeof script.sourceText === 'undefined' ? i18nString(UIStrings.noSourceText) : script.sourceText,\n      },\n    });\n  }\n\n  // Debugger.Enable indicates that Debugger domain is flushing the event to communicate\n  // the current state with the backend. In rehydrating connection, we made up the artificial\n  // script parsed event to communicate the current script state and respond with a mock\n  // debugger id.\n  private handleDebuggerEnable(id: number): void {\n    for (const script of this.scripts) {\n      this.sendMessageToFrontend({\n        method: 'Debugger.scriptParsed',\n        params: script,\n      });\n    }\n\n    const mockDebuggerId = '7777777777777777777.8888888888888888888';\n    this.sendMessageToFrontend({\n      id,\n      result: {\n        debuggerId: mockDebuggerId,\n      },\n    });\n  }\n}\n"]}