{"version":3,"file":"CookieModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CookieModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n  setMockConnectionResponseHandler,\n} from '../../testing/MockConnection.js';\n\nimport * as SDK from './sdk.js';\n\nconst {assert} = chai;\n\ndescribeWithMockConnection('CookieModel', () => {\n  const PROTOCOL_COOKIE = {\n    domain: '.example.com',\n    name: 'name',\n    path: '/test',\n    size: 23,\n    value: 'value',\n    expires: 42,\n    httpOnly: false,\n    secure: false,\n    session: true,\n    sameParty: false,\n    priority: Protocol.Network.CookiePriority.Medium,\n    sourcePort: 80,\n    sourceScheme: Protocol.Network.CookieSourceScheme.NonSecure,\n    partitionKey: '',\n  };\n\n  const PROTOCOL_COOKIE_PARTITIONED = {\n    domain: '.example.com',\n    name: 'name',\n    path: '/test',\n    size: 23,\n    value: 'value',\n    expires: 42,\n    httpOnly: false,\n    secure: false,\n    session: true,\n    sameParty: false,\n    priority: Protocol.Network.CookiePriority.Medium,\n    sourcePort: 80,\n    sourceScheme: Protocol.Network.CookieSourceScheme.NonSecure,\n    partitionKey: 'https://example.net',\n  };\n\n  it('can retrieve cookies', async () => {\n    // CDP Connection mock: for Network.getCookies, respond with a single cookie.\n    setMockConnectionResponseHandler('Network.getCookies', () => {\n      return {\n        cookies: [PROTOCOL_COOKIE_PARTITIONED],\n      };\n    });\n\n    const target = createTarget();\n    const model = new SDK.CookieModel.CookieModel(target);\n    const cookies = await model.getCookies(['https://www.google.com']);\n    assert.isArray(cookies);\n    assert.lengthOf(cookies, 1);\n    assert.strictEqual(cookies[0].domain(), '.example.com');\n    assert.strictEqual(cookies[0].name(), 'name');\n    assert.strictEqual(cookies[0].path(), '/test');\n    assert.strictEqual(cookies[0].size(), 23);\n    assert.strictEqual(cookies[0].value(), 'value');\n    assert.strictEqual(cookies[0].expires(), 42000);\n    assert.strictEqual(cookies[0].httpOnly(), false);\n    assert.strictEqual(cookies[0].secure(), false);\n    assert.strictEqual(cookies[0].priority(), Protocol.Network.CookiePriority.Medium);\n    assert.strictEqual(cookies[0].sourcePort(), 80);\n    assert.strictEqual(cookies[0].sourceScheme(), Protocol.Network.CookieSourceScheme.NonSecure);\n    assert.strictEqual(cookies[0].partitionKey(), 'https://example.net');\n  });\n\n  it('can retrieve blocked cookies without returning them twice', async () => {\n    const blockedProtocolCookie = {\n      domain: '.thirdparty.com',\n      name: 'third',\n      path: '/path',\n      size: 25,\n      value: 'blocked',\n      expires: 43,\n      httpOnly: false,\n      secure: false,\n      session: true,\n      sameParty: false,\n      priority: Protocol.Network.CookiePriority.Medium,\n      sourcePort: 80,\n      sourceScheme: Protocol.Network.CookieSourceScheme.NonSecure,\n      sameSite: Protocol.Network.CookieSameSite.Lax,\n    };\n    setMockConnectionResponseHandler('Network.getCookies', () => {\n      return {\n        cookies: [PROTOCOL_COOKIE, blockedProtocolCookie],\n      };\n    });\n\n    const target = createTarget();\n    const model = new SDK.CookieModel.CookieModel(target);\n    const blockedCookie = SDK.Cookie.Cookie.fromProtocolCookie(blockedProtocolCookie);\n    model.addBlockedCookie(blockedCookie, [\n      {\n        attribute: SDK.Cookie.Attribute.SameSite,\n        uiString:\n            'This cookie was blocked because it had the \"SameSite=Lax\" attribute and the request was made from a different site and was not initiated by a top-level navigation.',\n      },\n    ]);\n    const cookies = await model.getCookies(['https://www.google.com']);\n    assert.isArray(cookies);\n    assert.lengthOf(cookies, 2);\n    assert.strictEqual(cookies[0].domain(), '.example.com');\n    assert.strictEqual(cookies[0].name(), 'name');\n    assert.strictEqual(cookies[1].domain(), '.thirdparty.com');\n    assert.strictEqual(cookies[1].name(), 'third');\n  });\n\n  it('clears stored blocked cookies on primary page change', async () => {\n    const target = createTarget();\n    const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n    const cookieModel = new SDK.CookieModel.CookieModel(target);\n    const cookie = new SDK.Cookie.Cookie('name', 'value');\n    const blockedReason = {\n      attribute: null,\n      uiString: 'Setting this cookie was blocked due to third-party cookie phaseout. Learn more in the Issues tab.',\n    };\n\n    cookieModel.addBlockedCookie(cookie, [blockedReason]);\n    const cookieToBlockedReasons = cookieModel.getCookieToBlockedReasonsMap();\n    assert.strictEqual(cookieToBlockedReasons.size, 1);\n    assert.deepStrictEqual(cookieToBlockedReasons.get(cookie), [blockedReason]);\n\n    resourceTreeModel!.dispatchEventToListeners(SDK.ResourceTreeModel.Events.PrimaryPageChanged, {\n      frame: {} as SDK.ResourceTreeModel.ResourceTreeFrame,\n      type: SDK.ResourceTreeModel.PrimaryPageChangeType.Navigation,\n    });\n    assert.strictEqual(cookieModel.getCookieToBlockedReasonsMap().size, 0);\n  });\n\n  it('can delete cookie', async () => {\n    let cookieArray = [PROTOCOL_COOKIE, PROTOCOL_COOKIE_PARTITIONED];\n\n    // CDP Connection mock.\n    setMockConnectionResponseHandler('Network.getCookies', () => {\n      return {\n        cookies: cookieArray,\n      };\n    });\n\n    // CDP Connection mock: simplified implementation for Network.deleteCookies, which deletes the matching cookie from `cookies`.\n    setMockConnectionResponseHandler('Network.deleteCookies', cookieToDelete => {\n      cookieArray = cookieArray.filter(cookie => {\n        return !(\n            cookie.name === cookieToDelete.name && cookie.domain === cookieToDelete.domain &&\n            cookie.path === cookieToDelete.path && cookie.partitionKey === cookieToDelete.partitionKey);\n      });\n\n      const response = {\n        getError() {\n          return undefined;\n        },\n      };\n      return Promise.resolve(response);\n    });\n\n    const target = createTarget();\n    const model = new SDK.CookieModel.CookieModel(target);\n    const cookies = await model.getCookies(['https://www.example.com']);\n    assert.isArray(cookies);\n    assert.lengthOf(cookies, 2);\n\n    await model.deleteCookie(SDK.Cookie.Cookie.fromProtocolCookie(PROTOCOL_COOKIE));\n\n    const cookies2 = await model.getCookies(['https://www.example.com']);\n    assert.isArray(cookies2);\n    assert.lengthOf(cookies2, 1);\n    assert.strictEqual(cookies2[0].domain(), '.example.com');\n    assert.strictEqual(cookies2[0].name(), 'name');\n    assert.strictEqual(cookies2[0].partitionKey(), 'https://example.net');\n  });\n});\n"]}