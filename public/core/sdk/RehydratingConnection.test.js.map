{"version":3,"file":"RehydratingConnection.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/RehydratingConnection.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {SnapshotTester} from '../../testing/SnapshotTester.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\nimport * as Common from '../common/common.js';\nimport type {Message} from '../protocol_client/InspectorBackend.js';\n\nimport type {\n  RehydratingExecutionContext, RehydratingScript, RehydratingTarget, ServerMessage} from './RehydratingObject.js';\nimport * as SDK from './sdk.js';\n\nconst mockTarget1: RehydratingTarget = {\n  targetId: 'ABCDE' as Protocol.Target.TargetID,\n  type: 'page',\n  isolate: '12345',\n  url: 'example.com',\n  pid: 12345,\n};\n\nconst mockExecutionContext1: RehydratingExecutionContext = {\n  id: 1 as Protocol.Runtime.ExecutionContextId,\n  origin: 'example.com',\n  v8Context: 'example context 1',\n  name: 'example context 1',\n  uniqueId: 'example context 1',\n  auxData: {\n    frameId: 'ABCDE' as Protocol.Page.FrameId,\n    isDefault: true,\n    type: 'type',\n  },\n  isolate: '12345',\n};\n\nconst mockExecutionContext2: RehydratingExecutionContext = {\n  id: 2 as Protocol.Runtime.ExecutionContextId,\n  origin: 'example.com',\n  v8Context: 'example context 2',\n  name: 'example context 2',\n  uniqueId: 'example context 2',\n  auxData: {\n    frameId: 'ABCDE' as Protocol.Page.FrameId,\n    isDefault: true,\n    type: 'type',\n  },\n  isolate: '12345',\n};\n\nconst mockScript1: RehydratingScript = {\n  scriptId: '1' as Protocol.Runtime.ScriptId,\n  isolate: '12345',\n  pid: 12345,\n  executionContextId: 1 as Protocol.Runtime.ExecutionContextId,\n  startLine: 0,\n  startColumn: 0,\n  endLine: 1,\n  endColumn: 10,\n  hash: '',\n  isModule: false,\n  url: 'example.com',\n  hasSourceURL: false,\n  sourceMapURL: undefined,\n  length: 10,\n  sourceText: 'source text 1',\n  executionContextAuxData: {\n    frameId: 'ABCDE' as Protocol.Page.FrameId,\n    isDefault: true,\n    type: 'type',\n  },\n  buildId: ''\n};\n\nconst mockScript2: RehydratingScript = {\n  scriptId: '2' as Protocol.Runtime.ScriptId,\n  isolate: '12345',\n  pid: 12345,\n  executionContextId: 2 as Protocol.Runtime.ExecutionContextId,\n  startLine: 0,\n  startColumn: 0,\n  endLine: 1,\n  endColumn: 10,\n  hash: '',\n  isModule: false,\n  url: 'example.com',\n  hasSourceURL: false,\n  sourceMapURL: undefined,\n  length: 10,\n  sourceText: 'source text 2',\n  executionContextAuxData: {\n    frameId: 'ABCDE' as Protocol.Page.FrameId,\n    isDefault: true,\n    type: 'type',\n  },\n  buildId: ''\n};\n\ndescribe('RehydratingSession', () => {\n  const sessionId = 1;\n  const messageId = 1;\n  const target = mockTarget1;\n  let mockRehydratingConnection: MockRehydratingConnection;\n  let mockRehydratingSession: SDK.RehydratingConnection.RehydratingSession;\n  const executionContextsForTarget1 = [mockExecutionContext1, mockExecutionContext2];\n  const scriptsForTarget1 = [mockScript1, mockScript2];\n\n  class MockRehydratingConnection implements SDK.RehydratingConnection.RehydratingConnectionInterface {\n    messageQueue: ServerMessage[] = [];\n\n    postToFrontend(arg: ServerMessage): void {\n      this.messageQueue.push(arg);\n    }\n\n    clearMessageQueue(): void {\n      this.messageQueue = [];\n    }\n  }\n\n  class RehydratingSessionForTest extends SDK.RehydratingConnection.RehydratingSession {\n    override sendMessageToFrontend(payload: ServerMessage): void {\n      this.connection?.postToFrontend(payload);\n    }\n  }\n  beforeEach(() => {\n    mockRehydratingConnection = new MockRehydratingConnection();\n    mockRehydratingSession = new RehydratingSessionForTest(\n        sessionId, target, executionContextsForTarget1, scriptsForTarget1, mockRehydratingConnection);\n    mockRehydratingSession.declareSessionAttachedToTarget();\n  });\n\n  it('send attach to target on construction', async function() {\n    const attachToTargetMessage = mockRehydratingConnection.messageQueue[0];\n    assert.isNotNull(attachToTargetMessage);\n    assert.strictEqual(attachToTargetMessage.method, 'Target.attachedToTarget');\n    assert.strictEqual(\n        (attachToTargetMessage.params as Protocol.Target.AttachedToTargetEvent).sessionId.toString(),\n        sessionId.toString());\n    assert.strictEqual(\n        (attachToTargetMessage.params as Protocol.Target.AttachedToTargetEvent).targetInfo.targetId.toString(),\n        target.targetId.toString());\n  });\n\n  it('sends script parsed and debugger id while handling debugger enable', async function() {\n    mockRehydratingConnection.clearMessageQueue();\n    mockRehydratingSession.handleFrontendMessageAsFakeCDPAgent({\n      id: messageId,\n      method: 'Debugger.enable',\n      sessionId,\n    });\n    assert.lengthOf(mockRehydratingConnection.messageQueue, 3);\n    const scriptParsedMessages = mockRehydratingConnection.messageQueue.slice(0, 2);\n    const resultMessage = mockRehydratingConnection.messageQueue.slice(2);\n    for (const scriptParsedMessage of scriptParsedMessages) {\n      assert.strictEqual(scriptParsedMessage.method, 'Debugger.scriptParsed');\n      assert.strictEqual((scriptParsedMessage.params as RehydratingScript).isolate, target.isolate);\n    }\n    assert.isNotNull(resultMessage[0]);\n    assert.strictEqual(resultMessage[0].id, messageId);\n    assert.isNotNull((resultMessage[0].result as Protocol.Debugger.EnableResponse).debuggerId);\n  });\n\n  it('sends execution context created while handling runtime enable', async function() {\n    mockRehydratingConnection.clearMessageQueue();\n    mockRehydratingSession.handleFrontendMessageAsFakeCDPAgent({\n      id: messageId,\n      method: 'Runtime.enable',\n      sessionId,\n    });\n    assert.lengthOf(mockRehydratingConnection.messageQueue, 3);\n    const executionContextCreatedMessages = mockRehydratingConnection.messageQueue.slice(0, 2);\n    const resultMessage = mockRehydratingConnection.messageQueue.slice(2);\n    for (const executionContextCreatedMessage of executionContextCreatedMessages) {\n      assert.strictEqual(executionContextCreatedMessage.method, 'Runtime.executionContextCreated');\n      assert.strictEqual(\n          (executionContextCreatedMessage.params as Protocol.Runtime.ExecutionContextCreatedEvent)\n              .context.auxData.frameId,\n          target.targetId);\n    }\n    assert.isNotNull(resultMessage[0]);\n    assert.strictEqual(resultMessage[0].id, messageId);\n  });\n\n  it('sends script source text while handling get script source', async function() {\n    mockRehydratingConnection.clearMessageQueue();\n    mockRehydratingSession.handleFrontendMessageAsFakeCDPAgent({\n      id: messageId,\n      method: 'Debugger.getScriptSource',\n      sessionId,\n      params: {\n        scriptId: mockScript1.scriptId,\n      },\n    });\n    assert.lengthOf(mockRehydratingConnection.messageQueue, 1);\n    const scriptSourceTextMessage = mockRehydratingConnection.messageQueue[0];\n    assert.isNotNull(scriptSourceTextMessage);\n    assert.strictEqual(scriptSourceTextMessage.id, messageId);\n    assert.strictEqual(\n        (scriptSourceTextMessage.result as Protocol.Debugger.GetScriptSourceResponse).scriptSource,\n        mockScript1.sourceText);\n  });\n});\n\ndescribeWithEnvironment('RehydratingConnection emittance', () => {\n  let snapshotTester: SnapshotTester;\n\n  before(async () => {\n    snapshotTester = new SnapshotTester(import.meta);\n    await snapshotTester.load();\n\n    // Create fake popup opener as rehydrating connection needs it.\n    window.opener = {\n      postMessage: sinon.stub(),\n    };\n  });\n\n  after(async () => {\n    await snapshotTester.finish();\n    delete window.opener;\n  });\n\n  it('emits the expected CDP data', async function() {\n    const contents = await TraceLoader.fixtureContents(this, 'enhanced-paul.json.gz');\n\n    const reveal = sinon.stub(Common.Revealer.RevealerRegistry.prototype, 'reveal').resolves();\n    const messageLog: Array<string|Message> = [];\n\n    const conn = new SDK.RehydratingConnection.RehydratingConnection((e: string) => {\n      throw new Error(`Connection lost: ${e}`);\n    });\n\n    // Impractical to invoke the real devtools frontend, so we fake the 3 CDP handlers that\n    // `RehydratingSession.handleFrontendMessageAsFakeCDPAgent` cares about\n    let id = 1;\n    const fakeDevToolsFrontend = (arg0: Message|string): void => {\n      const message = ((typeof arg0 === 'string') ? JSON.parse(arg0) : arg0) as Message;\n\n      messageLog.push('RehydratingConnection says:', message);\n\n      if (message.method === 'Target.attachedToTarget') {\n        const attachedParams = message.params as Protocol.Target.AttachedToTargetEvent;\n        const sessionId = attachedParams.sessionId;\n        conn.sendRawMessage({id: id++, sessionId, method: 'Runtime.enable'});\n        conn.sendRawMessage({id: id++, sessionId, method: 'Debugger.enable'});\n      }\n      if (message.method === 'Debugger.scriptParsed') {\n        const scriptParsedParams = message.params as Protocol.Debugger.ScriptParsedEvent;\n        const sessionId = message.sessionId;\n        conn.sendRawMessage(\n            {id: id++, sessionId, method: 'Debugger.getScriptSource', params: {scriptId: scriptParsedParams.scriptId}});\n      }\n    };\n    conn.setOnMessage(fakeDevToolsFrontend);\n\n    const oldSendRawMessage = conn.sendRawMessage;\n    conn.sendRawMessage = (message: Message) => {\n      messageLog.push('fakeDevToolsFrontend says:', message);\n      oldSendRawMessage.call(conn, message);\n    };\n\n    // Kick off the rehydration process\n    conn.onReceiveHostWindowPayload({\n      data: {type: 'REHYDRATING_TRACE_FILE', traceJson: JSON.stringify(contents)},\n    } as MessageEvent);\n\n    // Poll for rehydration complete\n    const poll = async () => {\n      const isRehydrated =\n          conn.rehydratingConnectionState === SDK.RehydratingConnection.RehydratingConnectionState.REHYDRATED;\n      const messageLogPopulated = messageLog.length > 100;  // This trace ends up with 158.\n      if (isRehydrated && messageLogPopulated) {\n        return;\n      }\n      await new Promise<void>(res => setTimeout(res, 100));\n      void poll();\n    };\n    await poll();\n\n    // Elide any script sources in front_end/core/sdk/RehydratingConnection.snapshot.txt\n    function sanitizeLog(m: string|Message): string {\n      if (typeof m === 'object' && m.params?.sourceText) {\n        m.params.sourceText = m.params.sourceText.slice(0, 20) + '…';\n      }\n      // @ts-expect-error\n      if (typeof m === 'object' && m.result?.scriptSource) {\n        // @ts-expect-error\n        m.result.scriptSource = m.result.scriptSource.slice(0, 20) + '…';\n      }\n\n      return typeof m === 'string' ? `\\n/* ${m} */` : JSON.stringify(m, null, 2);\n    }\n    const sanitizedLog = messageLog.map(sanitizeLog).join('\\n');\n    snapshotTester.assert(this, sanitizedLog);\n    sinon.assert.calledOnce(reveal);\n  });\n});\n"]}