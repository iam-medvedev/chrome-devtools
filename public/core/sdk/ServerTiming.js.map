{"version":3,"file":"ServerTiming.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/ServerTiming.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AACxC,OAAO,KAAK,QAAQ,MAAM,yBAAyB,CAAC;AAGpD,MAAM,SAAS,GAAG;IAChB;;OAEG;IACH,8BAA8B,EAAE,+EAA+E;IAC/G;;;OAGG;IACH,0BAA0B,EAAE,sCAAsC;IAClE;;;OAGG;IACH,yBAAyB,EAAE,uCAAuC;IAClE;;;OAGG;IACH,sBAAsB,EAAE,iCAAiC;IACzD;;OAEG;IACH,4BAA4B,EAAE,iCAAiC;IAC/D;;;;OAIG;IACH,oBAAoB,EAAE,wCAAwC;CACtD,CAAC;AAEX,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,0BAA0B,EAAE,SAAS,CAAC,CAAC;AAChF,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE,MAAM,cAAc,GAA4D;IAC9E,iBAAiB,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,8BAA8B,CAAC;IAC7E,kBAAkB,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,0BAA0B,EAAE,EAAC,GAAG,EAAE,KAAK,EAAC,CAAC;IACrG,wBAAwB,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,yBAAyB,EAAE,EAAC,GAAG,EAAE,KAAK,EAAC,CAAC;IAC1G,qBAAqB,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,sBAAsB,EAAE,EAAC,GAAG,EAAE,KAAK,EAAC,CAAC;IACpG,4BAA4B,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,4BAA4B,CAAC;IACtF,kBAAkB,EAAE,CAAC,SAAiB,EAAE,UAAkB,EAAE,EAAE,CAC1D,UAAU,CAAC,SAAS,CAAC,oBAAoB,EAAE,EAAC,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,UAAU,EAAC,CAAC;CAClF,CAAC;AACF;;;;;;GAMG;AACH,MAAM,OAAO,YAAa,SAAQ,QAAQ,CAAC,YAAY,CAAC,YAAY;IAClE,MAAM,CAAU,YAAY,CAAC,OAAoB;QAC/C,OAAO,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;IAClF,CAAC;IAED;;;OAGG;IACH,MAAM,CAAU,qBAAqB,CAAC,WAAmB;QAKvD,OAAO,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,qBAAqB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;IAC/F,CAAC;IAED,MAAM,CAAU,qBAAqB,CAAC,SAAiB;QAOrD,OAAO,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,qBAAqB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;IAC7F,CAAC;CACF","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../i18n/i18n.js';\nimport * as Platform from '../platform/platform.js';\ntype NameValue = Platform.ServerTiming.NameValue;\n\nconst UIStrings = {\n  /**\n   *@description Text in Server Timing\n   */\n  deprecatedSyntaxFoundPleaseUse: 'Deprecated syntax found. Please use: <name>;dur=<duration>;desc=<description>',\n  /**\n   *@description Text in Server Timing\n   *@example {https} PH1\n   */\n  duplicateParameterSIgnored: 'Duplicate parameter \"{PH1}\" ignored.',\n  /**\n   *@description Text in Server Timing\n   *@example {https} PH1\n   */\n  noValueFoundForParameterS: 'No value found for parameter \"{PH1}\".',\n  /**\n   *@description Text in Server Timing\n   *@example {https} PH1\n   */\n  unrecognizedParameterS: 'Unrecognized parameter \"{PH1}\".',\n  /**\n   *@description Text in Server Timing\n   */\n  extraneousTrailingCharacters: 'Extraneous trailing characters.',\n  /**\n   *@description Text in Server Timing\n   *@example {https} PH1\n   *@example {2.0} PH2\n   */\n  unableToParseSValueS: 'Unable to parse \"{PH1}\" value \"{PH2}\".',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/ServerTiming.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst warningMessage: Platform.ServerTiming.ServerTimingParsingWarningMessage = {\n  deprecratedSyntax: () => i18nString(UIStrings.deprecatedSyntaxFoundPleaseUse),\n  duplicateParameter: (param: string) => i18nString(UIStrings.duplicateParameterSIgnored, {PH1: param}),\n  noValueFoundForParameter: (param: string) => i18nString(UIStrings.noValueFoundForParameterS, {PH1: param}),\n  unrecognizedParameter: (param: string) => i18nString(UIStrings.unrecognizedParameterS, {PH1: param}),\n  extraneousTrailingCharacters: () => i18nString(UIStrings.extraneousTrailingCharacters),\n  unableToParseValue: (paramName: string, paramValue: string) =>\n      i18nString(UIStrings.unableToParseSValueS, {PH1: paramName, PH2: paramValue}),\n};\n/**\n * This is a wrapper for the ServerTiming implementation in\n * core/platform which uses localized strings for warnings. The\n * implementation at core/platform/ is kept without dependencies to the\n * i18n moduke so that it remains portable outside of devtools, which is\n * needed to be used by the trace/ model of the Performance panel.\n */\nexport class ServerTiming extends Platform.ServerTiming.ServerTiming {\n  static override parseHeaders(headers: NameValue[]): ServerTiming[]|null {\n    return Platform.ServerTiming.ServerTiming.parseHeaders(headers, warningMessage);\n  }\n\n  /**\n   * TODO(crbug.com/1011811): Instead of using !Object<string, *> we should have a proper type\n   *                          with #name, desc and dur properties.\n   */\n  static override createFromHeaderValue(valueString: string): Array<{\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [x: string]: any,\n  }> {\n    return Platform.ServerTiming.ServerTiming.createFromHeaderValue(valueString, warningMessage);\n  }\n\n  static override getParserForParameter(paramName: string):\n      ((arg0: {\n         // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n         // eslint-disable-next-line @typescript-eslint/no-explicit-any\n         [x: string]: any,\n       },\n        arg1: string|null) => void)|null {\n    return Platform.ServerTiming.ServerTiming.getParserForParameter(paramName, warningMessage);\n  }\n}\n"]}