{"version":3,"file":"CSSPropertyParser.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CSSPropertyParser.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\n\nimport * as SDK from './sdk.js';\n\ndescribe('CSSPropertyParser', () => {\n  describe('stripComments', () => {\n    const stripComments = SDK.CSSPropertyParser.stripComments;\n\n    it('should strip a single comment', () => {\n      assert.strictEqual(stripComments('text /* comment */ text'), 'text  text');\n    });\n\n    it('should strip a multiline comment', () => {\n      assert.strictEqual(\n          stripComments(`text /* comment\n      some other comment */ text`),\n          'text  text');\n    });\n\n    it('should strip a comment with a comment start string', () => {\n      assert.strictEqual(stripComments('text /* comment /* comment */ text'), 'text  text');\n    });\n\n    it('should strip multiple commnets', () => {\n      assert.strictEqual(stripComments('text /* comment */ text /* comment */ text'), 'text  text  text');\n    });\n  });\n\n  describe('parseFontVariationSettings', () => {\n    const parseFontVariationSettings = SDK.CSSPropertyParser.parseFontVariationSettings;\n\n    it('should parse settings with a single value', () => {\n      assert.deepEqual(parseFontVariationSettings('\"wght\" 10'), [{tag: 'wght', value: 10}]);\n    });\n\n    it('should parse settings with multiple values', () => {\n      assert.deepEqual(\n          parseFontVariationSettings('\"wght\" 10, \"wdth\" 20'), [{tag: 'wght', value: 10}, {tag: 'wdth', value: 20}]);\n    });\n\n    it('should parse settings with a single float value', () => {\n      assert.deepEqual(parseFontVariationSettings('\"wght\" 5.5'), [{tag: 'wght', value: 5.5}]);\n    });\n  });\n\n  describe('parseFontFamily', () => {\n    const parseFontFamily = SDK.CSSPropertyParser.parseFontFamily;\n\n    it('should parse a single unquoted name', () => {\n      assert.deepEqual(parseFontFamily('Arial'), ['Arial']);\n    });\n\n    it('should parse a double quoted name with spaces', () => {\n      assert.deepEqual(parseFontFamily('\"Some font\"'), ['Some font']);\n    });\n\n    it('should parse a single quoted name with spaces', () => {\n      assert.deepEqual(parseFontFamily('\\'Some font\\''), ['Some font']);\n    });\n\n    it('should parse multiple names', () => {\n      assert.deepEqual(parseFontFamily('  Arial  , \"Some font\" , serif'), ['Arial', 'Some font', 'serif']);\n    });\n  });\n});\n"]}