{"version":3,"file":"ByteUtilities.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/i18n/ByteUtilities.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,kBAAkB,EAAC,MAAM,qCAAqC,CAAC;AAEvE,OAAO,KAAK,IAAI,MAAM,WAAW,CAAC;AAElC,kBAAkB,CAAC,eAAe,EAAE,GAAG,EAAE;IACvC,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;YAClC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,WAAW,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;YACtC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,WAAW,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,oBAAoB,GAAG,IAAI,GAAG,IAAI,CAAC;YACzC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,oBAAoB,CAAC,EAAE,WAAW,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC;YAChC,MAAM,yBAAyB,GAAG,WAAW,GAAG,GAAG,CAAC;YACpD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,yBAAyB,CAAC,EAAE,WAAW,CAAC,CAAC;QAC7F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithLocale} from '../../testing/EnvironmentHelpers.js';\n\nimport * as i18n from './i18n.js';\n\ndescribeWithLocale('ByteUtilities', () => {\n  describe('bytesToString', () => {\n    it('formats for < 1000 bytes', () => {\n      assert.deepEqual(i18n.ByteUtilities.bytesToString(50), '50\\xA0B');\n    });\n\n    it('formats for < 100 kilobytes', () => {\n      assert.deepEqual(i18n.ByteUtilities.bytesToString(5 * 1000), '5.0\\xA0kB');\n    });\n\n    it('formats for < 1000 kilobytes', () => {\n      assert.deepEqual(i18n.ByteUtilities.bytesToString(500 * 1000), '500\\xA0kB');\n    });\n\n    it('formats for < 100 megabytes', () => {\n      const oneAndAHalfMegabytes = 1500 * 1000;\n      assert.deepEqual(i18n.ByteUtilities.bytesToString(oneAndAHalfMegabytes), '1.5\\xA0MB');\n    });\n\n    it('formats for > 100 megabytes', () => {\n      const oneMegabyte = 1000 * 1000;\n      const twoHundredAndTenMegabytes = oneMegabyte * 210;\n      assert.deepEqual(i18n.ByteUtilities.bytesToString(twoHundredAndTenMegabytes), '210\\xA0MB');\n    });\n  });\n});\n"]}