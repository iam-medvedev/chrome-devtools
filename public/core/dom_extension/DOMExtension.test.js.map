{"version":3,"file":"DOMExtension.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/dom_extension/DOMExtension.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './dom_extension.js';\n\nimport {renderElementIntoDOM} from '../../testing/DOMHelpers.js';\n\nfunction createSlot(parent: HTMLElement, name?: string) {\n  const slot = parent.createChild('slot');\n  if (name) {\n    slot.name = name;\n  }\n  return slot;\n}\n\nfunction createChild(parent: HTMLElement, tagName: keyof HTMLElementTagNameMap, name?: string, text = '') {\n  const child = parent.createChild(tagName, name);\n  if (name) {\n    child.slot = name;\n  }\n  child.textContent = text;\n  return child;\n}\n\nfunction traverseNextNode(parent: HTMLElement, stayWithin: HTMLElement): HTMLElement {\n  return parent.traverseNextNode(stayWithin) as HTMLElement;\n}\n\ndescribe('DataGrid', () => {\n  it('Traverse Node with Children', () => {\n    const component1 = document.createElement('div');\n    component1.classList.add('component1');\n    createChild(component1, 'div', 'component1-content', 'text 1');\n    createChild(component1, 'div', 'component2-content', 'text 2');\n    createChild(component1, 'span', undefined, 'text 3');\n    createChild(component1, 'span', 'component1-content', 'text 4');\n\n    // Now we have:\n    /*\n        * <div class=\"component1\">\n        *    <div class=\"component1-content\" slot=\"component1-content\">text 1</div>\n        *    <div class=\"component2-content\" slot=\"component2-content\">text 2</div>\n        *    <span>text 3</span><span class=\"component1-content\" slot=\"component1-content\">text 4</span>\n        * </div>\n        */\n\n    let node: HTMLElement = component1;\n    assert.isNull(node.nodeValue, 'root node value is incorrect');\n    assert.strictEqual(node.nodeName, 'DIV', 'root node name is incorrect');\n    assert.strictEqual(node.className, 'component1', 'root node class is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'DIV', 'first child node name is incorrect');\n    assert.strictEqual(node.className, 'component1-content', 'first child class is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeValue, 'text 1', 'second child node value is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'DIV', 'second child node name is incorrect');\n    assert.strictEqual(node.className, 'component2-content', 'second child class is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeValue, 'text 2', 'second child node value is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'SPAN', 'third child node name is incorrect');\n    assert.strictEqual(node.className, '', 'third child class is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeValue, 'text 3', 'third child node value is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'SPAN', 'forth child node name is incorrect');\n    assert.strictEqual(node.className, 'component1-content', 'forth child class is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeValue, 'text 4', 'forth child node value is incorrect');\n  });\n\n  it('Traverse Node with Shadows', () => {\n    const component1 = document.createElement('div');\n    component1.classList.add('component1');\n    const shadow1 = component1.attachShadow({mode: 'open'});\n    const shadow1Content = document.createElement('div');\n    shadow1Content.classList.add('shadow-component1');\n    shadow1.appendChild(shadow1Content);\n    const component2 = shadow1Content.createChild('div', 'component2');\n    const shadow2 = component2.attachShadow({mode: 'open'});\n    const shadow2Content = document.createElement('div');\n    shadow2Content.classList.add('shadow-component1');\n    shadow2.appendChild(shadow2Content);\n    const midDiv = createChild(shadow2Content, 'div', 'mid-div');\n    createChild(midDiv, 'div', undefined, 'component2-text');\n\n    // Now we have:\n    /*\n        * <div class=\"component1\"></div>\n        * <div class=\"shadow-component1\"><div class=\"component2\"></div></div>\n        * <div class=\"shadow-component1\"><div class=\"mid-div\" slot=\"mid-div\"><div>component2-text</div></div></div>\n        */\n\n    let node: HTMLElement = component1;\n    assert.strictEqual(node.nodeName, 'DIV', 'root node name is incorrect');\n    assert.strictEqual(node.className, 'component1', 'root node class is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, '#document-fragment', 'first document fragment node name is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'DIV', 'first document fragment child node name is incorrect');\n    assert.strictEqual(node.className, 'shadow-component1', 'first document fragment child node name is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, 'component2');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, '#document-fragment');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, 'shadow-component1');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, 'mid-div');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, '');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, '#text');\n    assert.strictEqual(node.nodeValue, 'component2-text');\n  });\n\n  it('Traverse Node with Slots', () => {\n    const component1 = document.createElement('div');\n    component1.classList.add('component1');\n    const shadow1 = component1.attachShadow({mode: 'open'});\n    const shadow1Content = document.createElement('div');\n    shadow1Content.classList.add('shadow-component1');\n    shadow1.appendChild(shadow1Content);\n    createSlot(shadow1Content, 'component1-content');\n    createSlot(shadow1Content);\n    const component2 = shadow1Content.createChild('div', 'component2');\n    const shadow2 = component2.attachShadow({mode: 'open'});\n    createSlot(component2, 'component2-content');\n    createChild(component2, 'div', 'component2-content', 'component2 light dom text');\n    const shadow2Content = document.createElement('div');\n    shadow2Content.classList.add('shadow-component1');\n    shadow2.appendChild(shadow2Content);\n    const midDiv = createChild(shadow2Content, 'div', 'mid-div');\n    createChild(midDiv, 'div', undefined, 'component2-text');\n    createSlot(midDiv);\n    createSlot(midDiv, 'component2-content');\n\n    // Now we have:\n    /*\n        * <div class=\"component1\"></div>\n        * <div class=\"shadow-component1\">\n        *    <slot name=\"component1-content\"></slot>\n        *    <slot></slot>\n        *    <div class=\"component2\">\n        *       <slot name=\"component2-content\"></slot>\n        *       <div class=\"component2-content\" slot=\"component2-content\">component2 light dom text</div>\n        *    </div>\n        * </div>\n        * <div class=\"shadow-component1\">\n        *    <div class=\"mid-div\" slot=\"mid-div\">\n        *       <div>component2-text</div>\n        *       <slot></slot>\n        *       <slot name=\"component2-content\"></slot>\n        *    </div>\n        * </div>\n        */\n\n    let node: HTMLElement = component1;\n    assert.strictEqual(node.nodeName, 'DIV', 'root node name is incorrect');\n    assert.strictEqual(node.className, 'component1', 'root node class is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, '#document-fragment', 'first document fragment node name is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'DIV', 'first document fragment child node name is incorrect');\n    assert.strictEqual(node.className, 'shadow-component1', 'first document fragment child node name is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'SLOT', 'first slot node name is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'SLOT', 'second slot node name is incorrect');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, 'component2');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, '#document-fragment');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, 'shadow-component1');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, 'mid-div');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, '');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeValue, 'component2-text');\n    assert.strictEqual(node.nodeName, '#text');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'SLOT');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'SLOT');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'SLOT');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, 'component2-content');\n\n    node = traverseNextNode(node, component1);\n    assert.strictEqual(node.nodeValue, 'component2 light dom text');\n    assert.strictEqual(node.nodeName, '#text');\n  });\n});\n\ndescribe('Node.prototype.deepInnerText', () => {\n  it('gets text from a simple element', () => {\n    const element = document.createElement('div');\n    element.textContent = 'Simple text';\n    renderElementIntoDOM(element);\n    assert.strictEqual(element.deepInnerText(), 'Simple text');\n  });\n\n  it('gets text from an element with multiple children', () => {\n    const element = document.createElement('div');\n    element.createChild('p').textContent = 'First child';\n    element.createChild('span').textContent = 'Second child';\n    renderElementIntoDOM(element);\n    assert.strictEqual(element.deepInnerText(), element.innerText);\n    assert.strictEqual(element.deepInnerText(), 'First child\\n\\nSecond child');\n  });\n\n  it('gets text from an element with nested children', () => {\n    const element = document.createElement('div');\n    element.appendChild(document.createTextNode('  Outer text. '));\n    const childDiv = element.createChild('div');\n    childDiv.textContent = '  Child text. ';  // innerText of childDiv would be \"Child text. Grandchild text.\"\n    const grandchildSpan = childDiv.createChild('span');\n    grandchildSpan.textContent = 'Grandchild text.';\n    renderElementIntoDOM(element);\n    assert.strictEqual(element.deepInnerText(), element.innerText);\n    assert.strictEqual(element.deepInnerText(), 'Outer text.\\nChild text. Grandchild text.');\n  });\n\n  it('gets text from an element with a shadow DOM', () => {\n    const element = document.createElement('div');\n    const shadow = element.attachShadow({mode: 'open'});\n    shadow.createChild('p').textContent = 'Shadow text';\n    renderElementIntoDOM(element);\n    assert.strictEqual(element.deepInnerText(), 'Shadow text');\n  });\n\n  it('gets text from an element with a shadow DOM and slotted content', () => {\n    const element = document.createElement('div');\n    element.createChild('span').textContent = 'Slotted content';\n\n    const shadow = element.attachShadow({mode: 'open'});\n    shadow.appendChild(document.createTextNode('Shadow text before slot. '));\n    shadow.createChild('slot');\n    shadow.createChild('p').textContent = 'Shadow text after slot.';\n\n    renderElementIntoDOM(element);\n    const expectedText = 'Shadow text before slot.\\nSlotted content\\nShadow text after slot.';\n    assert.strictEqual(element.deepInnerText(), expectedText);\n  });\n\n  it('gets text from an element with multiple shadow DOMs and regular siblings', () => {\n    const element = document.createElement('div');\n    element.appendChild(document.createTextNode('Light DOM text before shadow 1. '));\n    const shadow1 = element.createChild('div').attachShadow({mode: 'open'});\n    const shadow1Paragraph1 = shadow1.createChild('p');\n    shadow1Paragraph1.createChild('span').textContent = 'Shadow 1';\n    shadow1Paragraph1.createChild('span').textContent = '(1)';\n    const shadow1Paragraph2 = shadow1.createChild('p');\n    shadow1Paragraph2.createChild('span').textContent = 'Shadow 1';\n    shadow1Paragraph2.createChild('span').textContent = '(2)';\n    element.appendChild(document.createTextNode(' Light DOM text between shadows. '));\n    const shadow2 = element.createChild('div').attachShadow({mode: 'open'});\n    shadow2.createChild('span').textContent = 'Shadow 2 text.';\n    element.appendChild(document.createTextNode(' Light DOM text after shadow 2.'));\n\n    renderElementIntoDOM(element);\n    const expectedText =\n        'Light DOM text before shadow 1.\\nShadow 1(1)\\nShadow 1(2)\\nLight DOM text between shadows.\\nShadow 2 text.\\nLight DOM text after shadow 2.';\n    assert.strictEqual(element.deepInnerText(), expectedText);\n  });\n\n  it('returns empty string for an element with no text content', () => {\n    const element = document.createElement('div');\n    renderElementIntoDOM(element);\n    assert.strictEqual(element.deepInnerText(), '');\n  });\n\n  it('ignores text content within SCRIPT tags', () => {\n    const element = document.createElement('div');\n    element.innerHTML = 'Visible text<script>console.log(\"script text\")</script>';\n    renderElementIntoDOM(element);\n    assert.strictEqual(element.deepInnerText(), 'Visible text');\n  });\n\n  it('ignores text content within STYLE tags', () => {\n    const element = document.createElement('div');\n    element.innerHTML = 'Visible text<style>body { color: red; }</style>';\n    renderElementIntoDOM(element);\n    assert.strictEqual(element.deepInnerText(), 'Visible text');\n  });\n\n  it('gets text when called directly on a TextNode', () => {\n    const textNode = document.createTextNode('Direct text node content');\n    assert.strictEqual(textNode.deepInnerText(), 'Direct text node content');\n  });\n\n  it('handles elements that only contain other elements which produce text', () => {\n    const element = document.createElement('div');\n    const child = element.createChild('p');\n    child.textContent = 'Paragraph text';\n    renderElementIntoDOM(element);\n    assert.strictEqual(element.deepInnerText(), 'Paragraph text');\n  });\n});\n"]}