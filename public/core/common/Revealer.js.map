{"version":3,"file":"Revealer.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Revealer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\n\nconst UIStrings = {\n  /**\n   *@description The UI destination when right clicking an item that can be revealed\n   */\n  elementsPanel: 'Elements panel',\n  /**\n   *@description The UI destination when right clicking an item that can be revealed\n   */\n  stylesSidebar: 'styles sidebar',\n  /**\n   *@description The UI destination when right clicking an item that can be revealed\n   */\n  changesDrawer: 'Changes drawer',\n  /**\n   *@description The UI destination when right clicking an item that can be revealed\n   */\n  issuesView: 'Issues view',\n  /**\n   *@description The UI destination when right clicking an item that can be revealed\n   */\n  networkPanel: 'Network panel',\n  /**\n   *@description The UI destination when right clicking an item that can be revealed\n   */\n  applicationPanel: 'Application panel',\n  /**\n   *@description The UI destination when right clicking an item that can be revealed\n   */\n  sourcesPanel: 'Sources panel',\n  /**\n   *@description The UI destination when right clicking an item that can be revealed\n   */\n  memoryInspectorPanel: 'Memory Inspector panel',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/common/Revealer.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nexport interface Revealer<T> {\n  reveal(revealable: T, omitFocus?: boolean): Promise<void>;\n}\n\nexport let reveal = async function reveal(revealable: unknown, omitFocus?: boolean): Promise<void> {\n  const promises =\n      await Promise.all(getApplicableRegisteredRevealers(revealable).map(registration => registration.loadRevealer()));\n  if (!promises.length) {\n    throw new Error('Can\\'t reveal ' + revealable);\n  }\n  return await Promise.race(promises.map(revealer => revealer.reveal(revealable, omitFocus)));\n};\n\nexport function setRevealForTest(newReveal: (revealable: unknown, omitFocus?: boolean) => Promise<void>): void {\n  reveal = newReveal;\n}\n\nexport function revealDestination(revealable: unknown): string|null {\n  for (const {destination} of getApplicableRegisteredRevealers(revealable)) {\n    if (destination) {\n      return destination();\n    }\n  }\n  return null;\n}\n\nconst registeredRevealers: RevealerRegistration<unknown>[] = [];\n\nexport function registerRevealer<T>(registration: RevealerRegistration<T>): void {\n  registeredRevealers.push(registration);\n}\n\nfunction getApplicableRegisteredRevealers(revealable: unknown): RevealerRegistration<unknown>[] {\n  return registeredRevealers.filter(revealerRegistration => {\n    if (!revealerRegistration.contextTypes) {\n      return true;\n    }\n    for (const contextType of revealerRegistration.contextTypes()) {\n      if (revealable instanceof contextType) {\n        return true;\n      }\n    }\n    return false;\n  });\n}\nexport interface RevealerRegistration<T> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contextTypes: () => Array<abstract new(...any: any) => T>;\n  loadRevealer: () => Promise<Revealer<T>>;\n  destination?: RevealerDestination;\n}\n\nexport const RevealerDestination = {\n  ELEMENTS_PANEL: i18nLazyString(UIStrings.elementsPanel),\n  STYLES_SIDEBAR: i18nLazyString(UIStrings.stylesSidebar),\n  CHANGES_DRAWER: i18nLazyString(UIStrings.changesDrawer),\n  ISSUES_VIEW: i18nLazyString(UIStrings.issuesView),\n  NETWORK_PANEL: i18nLazyString(UIStrings.networkPanel),\n  APPLICATION_PANEL: i18nLazyString(UIStrings.applicationPanel),\n  SOURCES_PANEL: i18nLazyString(UIStrings.sourcesPanel),\n  MEMORY_INSPECTOR_PANEL: i18nLazyString(UIStrings.memoryInspectorPanel),\n};\n\nexport type RevealerDestination = () => Platform.UIString.LocalizedString;\n"]}