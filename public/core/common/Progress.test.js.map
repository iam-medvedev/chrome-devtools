{"version":3,"file":"Progress.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Progress.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from './common.js';\n\nconst Progress = Common.Progress.Progress;\nconst CompositeProgress = Common.Progress.CompositeProgress;\nconst ProgressProxy = Common.Progress.ProgressProxy;\n\ndescribe('Composite Progress Bar', () => {\n  it('works correctly with a single subprogress', () => {\n    const indicator = new Progress();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n\n    assert.isUndefined(indicator.title);\n    assert.strictEqual(indicator.worked, 0);\n    assert.strictEqual(indicator.totalWork, 1);\n\n    subProgress.title = 'cuckooing';\n    subProgress.worked = 10;\n    assert.strictEqual(indicator.title, 'cuckooing');\n    assert.strictEqual(indicator.worked, 0);\n    assert.strictEqual(indicator.totalWork, 1);\n\n    subProgress.totalWork = 100;\n    assert.strictEqual(indicator.title, 'cuckooing');\n    assert.strictEqual(indicator.worked, 0.1);\n    assert.strictEqual(indicator.totalWork, 1);\n\n    subProgress.worked = 20;\n    subProgress.title = 'meowing';\n    assert.strictEqual(indicator.title, 'meowing');\n    assert.strictEqual(indicator.worked, 0.2);\n    assert.strictEqual(indicator.totalWork, 1);\n\n    subProgress.done = true;\n    assert.strictEqual(indicator.title, 'meowing');\n    assert.strictEqual(indicator.worked, 1);\n    assert.strictEqual(indicator.totalWork, 1);\n  });\n\n  it('works correctly with multiple subprogresses', () => {\n    const indicator = new Progress();\n    const composite = new CompositeProgress(indicator);\n    // Creates a sub progress with the default weight of 1\n    const subProgress1 = composite.createSubProgress();\n    // Creates a sub progress with the weight of 3\n    const subProgress2 = composite.createSubProgress(3);\n\n    assert.isUndefined(indicator.title);\n    assert.strictEqual(indicator.worked, 0);\n    assert.strictEqual(indicator.totalWork, 1);\n\n    subProgress1.title = 'cuckooing';\n    subProgress1.totalWork = 100;\n    subProgress1.worked = 20;\n    assert.strictEqual(indicator.title, 'cuckooing');\n    assert.strictEqual(indicator.worked, 0.05);\n    assert.strictEqual(indicator.totalWork, 1);\n\n    subProgress2.worked = 10;\n    assert.strictEqual(indicator.title, 'cuckooing');\n    assert.strictEqual(indicator.worked, 0.05);\n    assert.strictEqual(indicator.totalWork, 1);\n\n    subProgress2.totalWork = 10;\n    subProgress2.worked = 3;\n    subProgress2.title = 'barking';\n    assert.strictEqual(indicator.title, 'barking');\n    assert.strictEqual(indicator.worked, 0.275);\n    assert.strictEqual(indicator.totalWork, 1);\n\n    subProgress1.worked = 50;\n    subProgress1.title = 'meowing';\n    subProgress2.worked = 5;\n    assert.strictEqual(indicator.title, 'meowing');\n    assert.strictEqual(indicator.worked, 0.5);\n    assert.strictEqual(indicator.totalWork, 1);\n\n    subProgress2.done = true;\n    assert.strictEqual(indicator.title, 'meowing');\n    assert.strictEqual(indicator.worked, 0.875);\n    assert.strictEqual(indicator.totalWork, 1);\n\n    subProgress1.done = true;\n    assert.strictEqual(indicator.title, 'meowing');\n    assert.strictEqual(indicator.worked, 1);\n    assert.strictEqual(indicator.totalWork, 1);\n  });\n\n  it('returns the correct cancellation status', () => {\n    const indicator = new Progress();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n\n    assert.isFalse(subProgress.canceled, 'progress should not be canceled');\n    indicator.canceled = true;\n    assert.isTrue(subProgress.canceled, 'progress should be canceled');\n  });\n\n  it('works correctly with nested subprogresses', () => {\n    const indicator = new Progress();\n    const composite0 = new CompositeProgress(indicator);\n    const subProgress01 = composite0.createSubProgress();\n    const composite1 = new CompositeProgress(subProgress01);\n    const subProgress11 = composite1.createSubProgress(10);  // Weight should have no effect\n\n    assert.isUndefined(indicator.title);\n    assert.strictEqual(indicator.worked, 0);\n    assert.strictEqual(indicator.totalWork, 1);\n\n    subProgress11.worked = 10;\n    assert.isUndefined(indicator.title);\n    assert.strictEqual(indicator.worked, 0);\n    assert.strictEqual(indicator.totalWork, 1);\n\n    subProgress11.totalWork = 100;\n    assert.isUndefined(indicator.title);\n    assert.strictEqual(indicator.worked, 0.1);\n    assert.strictEqual(indicator.totalWork, 1);\n\n    subProgress11.worked = 50;\n    subProgress11.title = 'meowing';\n    assert.strictEqual(indicator.title, 'meowing');\n    assert.strictEqual(indicator.worked, 0.5);\n    assert.strictEqual(indicator.totalWork, 1);\n\n    assert.isFalse(subProgress11.canceled, 'progress should not be canceled');\n    indicator.canceled = true;\n    assert.isTrue(subProgress11.canceled, 'progress should be canceled');\n\n    subProgress11.done = true;\n    assert.strictEqual(indicator.title, 'meowing');\n    assert.strictEqual(indicator.worked, 1);\n    assert.strictEqual(indicator.totalWork, 1);\n  });\n\n  it('can set sub progress to be worked', () => {\n    const indicator = new Progress();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n\n    assert.isUndefined(indicator.title);\n    assert.strictEqual(indicator.worked, 0);\n    assert.strictEqual(indicator.totalWork, 1);\n    assert.strictEqual(subProgress.worked, 0);\n\n    ++subProgress.worked;\n\n    assert.isUndefined(indicator.title);\n    assert.strictEqual(indicator.worked, 0);\n    assert.strictEqual(indicator.totalWork, 1);\n    assert.strictEqual(subProgress.worked, 1);\n  });\n\n  it('returns the correct cancellation status for a progress proxy with no delegate', () => {\n    const progressProxy = new ProgressProxy();\n    assert.isFalse(progressProxy.canceled);\n  });\n\n  it('returns the correct cancellation status for a progress proxy with delegate', () => {\n    const indicator = new Progress();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n    const progressProxy = new ProgressProxy(subProgress);\n\n    assert.isFalse(progressProxy.canceled, 'progress should not be canceled');\n    indicator.canceled = true;\n    assert.isTrue(progressProxy.canceled, 'progress should be canceled');\n  });\n\n  it('returns the correct title for a progress proxy with no delegate', () => {\n    const indicator = new Progress();\n    const progressProxy = new ProgressProxy();\n\n    progressProxy.title = 'test proxy';\n    assert.isUndefined(indicator.title);\n  });\n\n  it('returns the correct title for a progress proxy with delegate', () => {\n    const indicator = new Progress();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n    const progressProxy = new ProgressProxy(subProgress);\n\n    progressProxy.title = 'test proxy';\n    assert.strictEqual(indicator.title, 'test proxy');\n  });\n\n  it('marks a progress proxy as done', () => {\n    const indicator = new Progress();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n    const progressProxy = new ProgressProxy(subProgress);\n\n    progressProxy.totalWork = 1;\n    progressProxy.done = true;\n    assert.strictEqual(subProgress.worked, 1);\n  });\n\n  it('able to set worked with title for a progress proxy', () => {\n    const indicator = new Progress();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n    const progressProxy = new ProgressProxy(subProgress);\n\n    progressProxy.worked = 1;\n    progressProxy.title = 'test proxy';\n    assert.strictEqual(subProgress.worked, 1);\n    assert.strictEqual(indicator.title, 'test proxy');\n  });\n\n  it('able to set worked without title for a progress proxy', () => {\n    const indicator = new Progress();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n    const progressProxy = new ProgressProxy(subProgress);\n\n    ++progressProxy.worked;\n    assert.strictEqual(subProgress.worked, 1);\n  });\n});\n"]}