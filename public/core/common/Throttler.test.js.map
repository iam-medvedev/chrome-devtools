{"version":3,"file":"Throttler.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Throttler.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../platform/platform.js';\n\nimport * as Common from './common.js';\n\nconst {Throttler, Scheduling} = Common.Throttler;\n\ndescribe('Throttler class', () => {\n  let clock: sinon.SinonFakeTimers;\n  let throttler: Common.Throttler.Throttler;\n\n  const TIMEOUT = 10;\n\n  beforeEach(async () => {\n    clock = sinon.useFakeTimers();\n    // When nothing was run, throttler has 0 as the last exectution time.\n    // With mock time, current time is also 0 initially. Advance the clock\n    // to get more realistic initial state.\n    await ensureNoRecentRun();\n  });\n\n  afterEach(() => {\n    clock.restore();\n  });\n\n  function ensureNoRecentRun() {\n    clock.tick(TIMEOUT + 1);\n  }\n\n  async function ensureHasRecentRun() {\n    void throttler.schedule(async () => {});\n    await clock.tickAsync(TIMEOUT);\n  }\n\n  it('is able to schedule a process as soon as possible', async () => {\n    const process = sinon.spy();\n\n    throttler = new Throttler(TIMEOUT);\n    await ensureHasRecentRun();\n    void throttler.schedule(process, Scheduling.AsSoonAsPossible);\n\n    assert.isFalse(process.called);\n    await clock.tickAsync(0);\n    assert.isTrue(process.calledOnce);\n  });\n\n  it('is able to schedule two processes as soon as possible', async () => {\n    const process1 = sinon.spy();\n    const process2 = sinon.spy();\n\n    throttler = new Throttler(TIMEOUT);\n    await ensureHasRecentRun();\n    const promiseTest = throttler.schedule(process1, Scheduling.AsSoonAsPossible);\n    void throttler.schedule(process2, Scheduling.AsSoonAsPossible);\n\n    assert.isFalse(process1.called);\n    assert.isFalse(process2.called);\n    void clock.tickAsync(0);\n    await promiseTest;\n    assert.isFalse(process1.called);\n    assert.isTrue(process2.calledOnce);\n  });\n\n  it('by default schedules a process delayed only if another process ran recently', async () => {\n    const process = sinon.spy();\n\n    throttler = new Throttler(TIMEOUT);\n    void throttler.schedule(process);\n\n    assert.isFalse(process.called);\n    await clock.tickAsync(0);\n    assert.isTrue(process.calledOnce);\n    process.resetHistory();\n\n    void throttler.schedule(process);\n    await clock.tickAsync(0);\n    assert.isFalse(process.called);\n    await clock.tickAsync(TIMEOUT / 2);\n    assert.isFalse(process.called);\n    void throttler.schedule(process);\n    await clock.tickAsync(TIMEOUT / 2);\n    assert.isTrue(process.calledOnce);\n\n    await ensureNoRecentRun();\n    process.resetHistory();\n    void throttler.schedule(process);\n    assert.isFalse(process.called);\n    await clock.tickAsync(0);\n    assert.isTrue(process.calledOnce);\n  });\n\n  it('is able to schedule a delayed process', async () => {\n    const process = sinon.spy();\n\n    const throttler = new Throttler(10);\n    void throttler.schedule(process, Scheduling.Delayed);\n\n    assert.isFalse(process.called);\n    await clock.tickAsync(0);\n    assert.isFalse(process.called);\n    await clock.tickAsync(10);\n    assert.isTrue(process.calledOnce);\n  });\n\n  it('runs only one process at a time', async () => {\n    throttler = new Throttler(50);\n\n    const {promise: process1Promise, resolve: process1Resolve} = Platform.PromiseUtilities.promiseWithResolvers<void>();\n    const {promise: process2Promise, resolve: process2Resolve} = Platform.PromiseUtilities.promiseWithResolvers<void>();\n    const spy1 = sinon.spy();\n    const spy2 = sinon.spy();\n    const process1 = () => {\n      spy1();\n      return process1Promise;\n    };\n    const process2 = () => {\n      spy2();\n      return process2Promise;\n    };\n\n    void throttler.schedule(process1, Scheduling.AsSoonAsPossible);\n\n    await clock.tickAsync(0);\n    assert.isTrue(spy1.called);\n\n    void throttler.schedule(process2);\n    await clock.tickAsync(100);\n    assert.isFalse(spy2.called);\n\n    process1Resolve();\n    await clock.tickAsync(0);\n    assert.isFalse(spy2.called);\n\n    await clock.tickAsync(50);\n    assert.isTrue(spy2.called);\n\n    process2Resolve();  // No pending promises.\n  });\n});\n"]}