{"version":3,"file":"Worker.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Worker.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAE7B,MAAM,OAAO,aAAa;IACf,cAAc,CAAkB;IACzC,SAAS,CAAW;IAEpB,YAAoB,cAAmB;QACrC,IAAI,CAAC,cAAc,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YAC1C,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,cAAc,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,SAAS,GAAG,CAAC,KAA4B,EAAE,EAAE;gBAClD,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,aAAa,CAAC,CAAC;gBAC7C,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;gBACxB,OAAO,CAAC,MAAM,CAAC,CAAC;YAClB,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,GAAQ;QACrB,OAAO,IAAI,aAAa,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IAED,WAAW,CAAC,OAAgB,EAAE,QAAyB;QACrD,KAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;gBACpB,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,IAAI,EAAE,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,KAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;IAC9D,CAAC;IAED,SAAS;QACP,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,IAAI,SAAS,CAAC,QAAuC;QACnD,KAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACrC,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAI,OAAO,CAAC,QAAgC;QAC1C,KAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACrC,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["// Copyright 2014 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport class WorkerWrapper {\n  readonly #workerPromise: Promise<Worker>;\n  #disposed?: boolean;\n\n  private constructor(workerLocation: URL) {\n    this.#workerPromise = new Promise(fulfill => {\n      const worker = new Worker(workerLocation, {type: 'module'});\n      worker.onmessage = (event: MessageEvent<unknown>) => {\n        console.assert(event.data === 'workerReady');\n        worker.onmessage = null;\n        fulfill(worker);\n      };\n    });\n  }\n\n  static fromURL(url: URL): WorkerWrapper {\n    return new WorkerWrapper(url);\n  }\n\n  postMessage(message: unknown, transfer?: Transferable[]): void {\n    void this.#workerPromise.then(worker => {\n      if (!this.#disposed) {\n        worker.postMessage(message, transfer ?? []);\n      }\n    });\n  }\n\n  dispose(): void {\n    this.#disposed = true;\n    void this.#workerPromise.then(worker => worker.terminate());\n  }\n\n  terminate(): void {\n    this.dispose();\n  }\n\n  set onmessage(listener: (event: MessageEvent) => void) {\n    void this.#workerPromise.then(worker => {\n      worker.onmessage = listener;\n    });\n  }\n\n  set onerror(listener: (event: Event) => void) {\n    void this.#workerPromise.then(worker => {\n      worker.onerror = listener;\n    });\n  }\n}\n"]}