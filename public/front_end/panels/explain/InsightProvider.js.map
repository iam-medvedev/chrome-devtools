{"version":3,"file":"InsightProvider.js","sourceRoot":"","sources":["../../../../../../front_end/panels/explain/InsightProvider.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAEhD,MAAM,OAAO,eAAe;IAC1B,KAAK,CAAC,WAAW,CAAC,KAAa;QAC7B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,CAAC,kBAAkB,EAAE;gBAChF,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC;aACjE;YACD,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACxB,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,CAAC,kBAAkB,CACvE,IAAI,CAAC,SAAS,CAAC;gBACb,KAAK;gBACL,MAAM,EAAE,iBAAiB;aAC1B,CAAC,EACF,MAAM,CAAC,EAAE;gBACP,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBAC3B,IAAI;oBACF,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBAC5C,MAAM,IAAI,GAAG,OAAO;yBACF,GAAG,CACA,CACI,MAA+D,EAC7D,EAAE;wBACN,IAAI,WAAW,IAAI,MAAM,EAAE;4BACzB,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;yBAC9B;wBACD,IAAI,WAAW,IAAI,MAAM,EAAE;4BACzB,OAAO,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,WAAW,CAAC;yBAC1D;wBACD,IAAI,OAAO,IAAI,MAAM,EAAE;4BACrB,MAAM,IAAI,KAAK,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;yBAC5D;wBACD,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;oBAC1C,CAAC,CACA;yBACJ,IAAI,CAAC,EAAE,CAAC,CAAC;oBAC3B,OAAO,CAAC,IAAI,CAAC,CAAC;iBACf;gBAAC,OAAO,GAAG,EAAE;oBACZ,MAAM,CAAC,GAAG,CAAC,CAAC;iBACb;YACH,CAAC,CACJ,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\n\nexport class InsightProvider {\n  async getInsights(input: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      if (!Host.InspectorFrontendHost.InspectorFrontendHostInstance.doAidaConversation) {\n        return reject(new Error('doAidaConversation is not available'));\n      }\n      console.time('request');\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.doAidaConversation(\n          JSON.stringify({\n            input,\n            client: 'CHROME_DEVTOOLS',\n          }),\n          result => {\n            console.timeEnd('request');\n            try {\n              const results = JSON.parse(result.response);\n              const text = results\n                               .map(\n                                   (\n                                       result:|{textChunk: {text: string}}|{codeChunk: {code: string}},\n                                       ) => {\n                                     if ('textChunk' in result) {\n                                       return result.textChunk.text;\n                                     }\n                                     if ('codeChunk' in result) {\n                                       return '\\n`````\\n' + result.codeChunk.code + '\\n`````\\n';\n                                     }\n                                     if ('error' in result) {\n                                       throw new Error(`${result['error']}: ${result['detail']}`);\n                                     }\n                                     throw new Error('Unknown chunk result');\n                                   },\n                                   )\n                               .join('');\n              resolve(text);\n            } catch (err) {\n              reject(err);\n            }\n          },\n      );\n    });\n  }\n}\n"]}