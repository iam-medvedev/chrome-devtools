{"version":3,"file":"OverridesHelpers.js","sourceRoot":"","sources":["../../../../../front_end/testing/OverridesHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../core/platform/platform.js';\nimport * as SDK from '../core/sdk/sdk.js';\nimport * as Bindings from '../models/bindings/bindings.js';\nimport * as Breakpoints from '../models/breakpoints/breakpoints.js';\nimport * as Persistence from '../models/persistence/persistence.js';\nimport * as TextUtils from '../models/text_utils/text_utils.js';\nimport * as Workspace from '../models/workspace/workspace.js';\n\nconst {urlString} = Platform.DevToolsPath;\n\nexport function setUpEnvironment() {\n  const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n  const targetManager = SDK.TargetManager.TargetManager.instance();\n  const resourceMapping = new Bindings.ResourceMapping.ResourceMapping(targetManager, workspace);\n  const debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance({\n    forceNew: true,\n    resourceMapping,\n    targetManager,\n    ignoreListManager: Workspace.IgnoreListManager.IgnoreListManager.instance({forceNew: true})\n  });\n  const breakpointManager = Breakpoints.BreakpointManager.BreakpointManager.instance(\n      {forceNew: true, targetManager, workspace, debuggerWorkspaceBinding});\n  Persistence.Persistence.PersistenceImpl.instance({forceNew: true, workspace, breakpointManager});\n  const networkPersistenceManager =\n      Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance({forceNew: true, workspace});\n  return {networkPersistenceManager, workspace, debuggerWorkspaceBinding};\n}\n\nexport async function createWorkspaceProject(\n    baseUrl: Platform.DevToolsPath.UrlString, files: Array<{path: string, content: string, name: string}>) {\n  const {networkPersistenceManager} = setUpEnvironment();\n  const fileSystem: Partial<Persistence.FileSystemWorkspaceBinding.FileSystem> = {\n    fileSystemPath: () => baseUrl,\n    fileSystemBaseURL: urlString`${baseUrl}/`,\n    type: () => Workspace.Workspace.projectTypes.FileSystem,\n    fileSystem: () => ({\n      supportsAutomapping: () => false,\n    } as unknown as Persistence.PlatformFileSystem.PlatformFileSystem),\n  };\n\n  const uiSourceCodes = new Map<string, Workspace.UISourceCode.UISourceCode>();\n\n  const mockProject: Partial<Persistence.FileSystemWorkspaceBinding.FileSystem> = {\n    uiSourceCodes: () => Array.from(uiSourceCodes.values()),\n    id: () => baseUrl,\n    fileSystemPath: () => baseUrl,\n    uiSourceCodeForURL: (url: string) => {\n      return uiSourceCodes.get(url) || null;\n    },\n    type: () => Workspace.Workspace.projectTypes.FileSystem,\n    initialGitFolders: () => [],\n    fileSystem: () => ({\n      type: () => 'filesystem',\n    } as unknown as Persistence.PlatformFileSystem.PlatformFileSystem),\n    fileSystemBaseURL: urlString`${baseUrl}/`,\n    createFile: () => Promise.resolve(null),\n  };\n  await networkPersistenceManager.setProject(mockProject as Workspace.Workspace.Project);\n\n  for (const file of files) {\n    const url = urlString`${file.path.concat(file.name)}`;\n    const fileUrl = networkPersistenceManager.fileUrlFromNetworkUrl(url, true);\n\n    uiSourceCodes.set(fileUrl, {\n      requestContentData: () =>\n          Promise.resolve(new TextUtils.ContentData.ContentData(file.content, /* isBase64=*/ false, 'text/plain')),\n      url: () => fileUrl,\n      project: () => {\n        return {...fileSystem, requestFileBlob: () => new Blob([file.content])};\n      },\n      name: () => file.name,\n      setWorkingCopy: () => {},\n      commitWorkingCopy: () => {},\n    } as unknown as Workspace.UISourceCode.UISourceCode);\n  }\n\n  await networkPersistenceManager.setProject(mockProject as Workspace.Workspace.Project);\n  const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n  workspace.addProject(mockProject as Workspace.Workspace.Project);\n  return networkPersistenceManager;\n}\n"]}