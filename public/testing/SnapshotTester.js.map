{"version":3,"file":"SnapshotTester.js","sourceRoot":"","sources":["../../../../../front_end/testing/SnapshotTester.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * Asserts two strings are equal, and logs the first differing line if not equal.\n */\nfunction assertSnapshotContent(actual: string, expected: string): void {\n  if (actual !== expected) {\n    const actualLines = actual.split('\\n');\n    const expectedLines = expected.split('\\n');\n    for (let i = 0; i < Math.max(actualLines.length, expectedLines.length); i++) {\n      const actualLine = actualLines.at(i);\n      const expectedLine = expectedLines.at(i);\n      if (actualLine !== expectedLine) {\n        const firstDifference = `First differing line:\\nexpected: ${expectedLine}\\nactual:   ${actualLine}`;\n        throw new Error(\n            `snapshot assertion failed! to update snapshot, run \\`npm run test -- --on-diff=update ...\\`\\n\\n${\n                firstDifference}`);\n      }\n    }\n  }\n}\n\n/**\n * Provides snapshot testing for karma unit tests.\n * See README.md for more.\n *\n * Note: karma.conf.ts implements the server logic (see snapshotTesterFactory).\n */\nexport class SnapshotTester {\n  static #updateMode: boolean|null = null;\n\n  #snapshotUrl: string;\n  #expected = new Map<string, string>();\n  #actual = new Map<string, string>();\n  #anyFailures = false;\n  #newTests = false;\n\n  constructor(meta: ImportMeta) {\n    this.#snapshotUrl = meta.url.replace('.test.js', '.snapshot.txt').split('?')[0];\n  }\n\n  async load() {\n    if (SnapshotTester.#updateMode === null) {\n      SnapshotTester.#updateMode = await this.#checkIfUpdateMode();\n    }\n\n    const url = new URL(this.#snapshotUrl, import.meta.url);\n    const response = await fetch(url);\n    if (response.status === 404) {\n      console.warn(`Snapshot file not found: ${url.href}. Will create it for you.`);\n      return;\n    }\n    if (response.status !== 200) {\n      throw new Error('failed to load snapshot');\n    }\n\n    this.#parseSnapshotFileContent(await response.text());\n  }\n\n  assert(context: Mocha.Context, actual: string) {\n    const title = context.test?.fullTitle() ?? '';\n\n    if (this.#actual.has(title)) {\n      throw new Error('sorry, currently only support 1 snapshot assertion per test');\n    }\n\n    if (actual.includes('=== end content')) {\n      throw new Error('invalid content');\n    }\n\n    actual = actual.trim();\n    this.#actual.set(title, actual);\n\n    const expected = this.#expected.get(title);\n    if (!expected) {\n      // New tests always pass on the first run.\n      this.#newTests = true;\n      return;\n    }\n\n    if (!SnapshotTester.#updateMode && actual !== expected) {\n      this.#anyFailures = true;\n      assertSnapshotContent(actual, expected);\n    }\n  }\n\n  async finish() {\n    let didAnyTestNotRun = false;\n    for (const title of this.#expected.keys()) {\n      if (!this.#actual.has(title)) {\n        didAnyTestNotRun = true;\n        break;\n      }\n    }\n\n    let shouldPostUpdate = SnapshotTester.#updateMode;\n    if (!this.#anyFailures && (didAnyTestNotRun || this.#newTests)) {\n      shouldPostUpdate = true;\n    }\n\n    if (!shouldPostUpdate) {\n      return;\n    }\n\n    const url = new URL('/update-snapshot', import.meta.url);\n    url.searchParams.set('snapshotUrl', this.#snapshotUrl);\n    const content = this.#serializeSnapshotFileContent();\n    const response = await fetch(url, {method: 'POST', body: content});\n    if (response.status !== 200) {\n      throw new Error(`Unable to update snapshot ${url}`);\n    }\n  }\n\n  #serializeSnapshotFileContent(): string {\n    if (!this.#actual.size) {\n      return '';\n    }\n\n    const lines = [];\n    for (const [title, result] of this.#actual) {\n      lines.push(`Title: ${title}`);\n      lines.push(`Content:\\n${result}`);\n      lines.push('=== end content\\n');\n    }\n    lines.push('');\n\n    return lines.join('\\n').trim() + '\\n';\n  }\n\n  #parseSnapshotFileContent(content: string): void {\n    const sections = content.split('=== end content').map(s => s.trim()).filter(Boolean);\n    for (const section of sections) {\n      const [titleField, contentField, ...contentLines] = section.split('\\n');\n      const title = titleField.replace('Title:', '').trim();\n      if (contentField !== 'Content:') {\n        throw new Error('unexpected snapshot file');\n      }\n      const content = contentLines.join('\\n').trim();\n      this.#expected.set(title, content);\n    }\n  }\n\n  async #checkIfUpdateMode(): Promise<boolean> {\n    const response = await fetch('/snapshot-update-mode');\n    const data = await response.json();\n    return data.updateMode === true;\n  }\n}\n"]}