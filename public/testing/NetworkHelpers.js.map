{"version":3,"file":"NetworkHelpers.js","sourceRoot":"","sources":["../../../../../front_end/testing/NetworkHelpers.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,0BAA0B,CAAC;AACnD,OAAO,KAAK,OAAO,MAAM,8BAA8B,CAAC;AACxD,OAAO,KAAK,iBAAiB,MAAM,2DAA2D,CAAC;AAE/F,OAAO,EACL,mBAAmB,GACpB,MAAM,yBAAyB,CAAC;AAEjC,MAAM,CAAC,KAAK,UAAU,mCAAmC;IACvD,mBAAmB,CAAC,CAAC,0BAA0B,EAAE,eAAe,EAAE,uBAAuB,CAAC,CAAC,CAAC;IAE5F,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;IAC7D,KAAK,MAAM,WAAW,IACV,CAAC,mCAAmC,EAAE,wBAAwB,EAAE,mCAAmC,CAAC,EAAE,CAAC;QACjH,MAAM,CAAC,QAAQ,CAAC,wBAAwB,CAAC;YACvC,WAAW;YACX,WAAW,qDAAqC;YAChD,YAAY,EAAE,KAAK;SACpB,CAAC,CAAC;IACL,CAAC;IACD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAChC,QAAQ,EAAE,IAAI;QACd,aAAa,EAAE,YAAY;QAC3B,aAAa,EAAE,YAAY;QAC3B,YAAY,EAAE,YAAY;KAC3B,CAAC,CAAC;IACH,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAE,sBAAsB,EAAE,CAAC,EAAC,CAAC,CAAC;IAC7G,YAAY,CAAC,UAAU,EAAE,CAAC;IAC1B,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACjC,MAAM,iBAAiB,CAAC,IAAI,EAAE,CAAC;IAC/B,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../core/common/common.js';\nimport * as Network from '../panels/network/network.js';\nimport * as RenderCoordinator from '../ui/components/render_coordinator/render_coordinator.js';\n\nimport {\n  registerNoopActions,\n} from './EnvironmentHelpers.js';\n\nexport async function createNetworkPanelForMockConnection(): Promise<Network.NetworkPanel.NetworkPanel> {\n  registerNoopActions(['network.toggle-recording', 'network.clear', 'inspector-main.reload']);\n\n  const dummyStorage = new Common.Settings.SettingsStorage({});\n  for (const settingName\n           of ['network-color-code-resource-types', 'network.group-by-frame', 'network-record-film-strip-setting']) {\n    Common.Settings.registerSettingExtension({\n      settingName,\n      settingType: Common.Settings.SettingType.BOOLEAN,\n      defaultValue: false,\n    });\n  }\n  Common.Settings.Settings.instance({\n    forceNew: true,\n    syncedStorage: dummyStorage,\n    globalStorage: dummyStorage,\n    localStorage: dummyStorage,\n  });\n  const networkPanel = Network.NetworkPanel.NetworkPanel.instance({forceNew: true, displayScreenshotDelay: 0});\n  networkPanel.markAsRoot();\n  networkPanel.show(document.body);\n  await RenderCoordinator.done();\n  return networkPanel;\n}\n"]}