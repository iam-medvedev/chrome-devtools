{"version":3,"file":"StackTraceHelpers.js","sourceRoot":"","sources":["../../../../../front_end/testing/StackTraceHelpers.ts"],"names":[],"mappings":"AAAA,sCAAsC;AACtC,yEAAyE;AACzE,6BAA6B;AAK7B;;GAEG;AACH,MAAM,UAAU,iBAAiB,CAAC,UAAkB;IAClD,kFAAkF;IAClF,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACpC,OAAO;QACL,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;QACjC,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAA8B;QACnD,YAAY,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;QAChC,UAAU,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClE,YAAY,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACrE,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,KAAkC;IAC/D,IAAI,MAAM,GAAG,MAAM,KAAK,CAAC,IAAI,IAAI,aAAa,EAAE,CAAC;IACjD,IAAI,KAAK,CAAC,YAAY,EAAE,CAAC;QACvB,MAAM,IAAI,KAAK,KAAK,CAAC,YAAY,CAAC,WAAW,EAAE,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC;IACnF,CAAC;SAAM,IAAI,KAAK,CAAC,GAAG,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC;IAC5D,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,QAAwC;IACxE,OAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxD,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,QAA6C;IAClF,MAAM,mBAAmB,GAAG,EAAE,CAAC;IAC/B,MAAM,MAAM,GAAG,OAAO,QAAQ,CAAC,WAAW,IAAI,OAAO,GAAG,CAAC;IACzD,MAAM,SAAS,GAAG,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;IAC3E,OAAO,SAAS,GAAG,IAAI,GAAG,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AACxD,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,UAA4C;IAC9E,OAAO,CAAC,iBAAiB,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,GAAG,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAC9G,IAAI,CAAC,CAAC;AACZ,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../generated/protocol.js';\nimport type * as StackTrace from '../models/stack_trace/stack_trace.js';\n\n/**\n * Easily create `Protocol.Runtime.CallFrame`s by passing a string of the format: `<url>:<scriptId>:<name>:<line>:<column>`\n */\nexport function protocolCallFrame(descriptor: string): Protocol.Runtime.CallFrame {\n  // Since URLs can contain colons, we count from the end and rejoin the rest again.\n  const parts = descriptor.split(':');\n  return {\n    url: parts.slice(0, -4).join(':'),\n    scriptId: parts.at(-4) as Protocol.Runtime.ScriptId,\n    functionName: parts.at(-3) ?? '',\n    lineNumber: parts.at(-2) ? Number.parseInt(parts.at(-2)!, 10) : -1,\n    columnNumber: parts.at(-1) ? Number.parseInt(parts.at(-1)!, 10) : -1,\n  };\n}\n\nexport function stringifyFrame(frame: StackTrace.StackTrace.Frame): string {\n  let result = `at ${frame.name ?? '<anonymous>'}`;\n  if (frame.uiSourceCode) {\n    result += ` (${frame.uiSourceCode.displayName()}:${frame.line}:${frame.column})`;\n  } else if (frame.url) {\n    result += ` (${frame.url}:${frame.line}:${frame.column})`;\n  }\n  return result;\n}\n\nexport function stringifyFragment(fragment: StackTrace.StackTrace.Fragment): string {\n  return fragment.frames.map(stringifyFrame).join('\\n');\n}\n\nexport function stringifyAsyncFragment(fragment: StackTrace.StackTrace.AsyncFragment): string {\n  const separatorLineLength = 40;\n  const prefix = `--- ${fragment.description || 'async'} `;\n  const separator = prefix + '-'.repeat(separatorLineLength - prefix.length);\n  return separator + '\\n' + stringifyFragment(fragment);\n}\n\nexport function stringifyStackTrace(stackTrace: StackTrace.StackTrace.StackTrace): string {\n  return [stringifyFragment(stackTrace.syncFragment), ...stackTrace.asyncFragments.map(stringifyAsyncFragment)].join(\n      '\\n');\n}\n"]}