{"version":3,"file":"ViewFunctionHelpers.js","sourceRoot":"","sources":["../../../../../front_end/testing/ViewFunctionHelpers.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAwC7B,MAAM,UAAU,sBAAsB,CAClC,WAA+B,EAC/B,YAA6C;IAC/C,MAAM,MAAM,GACR,CAAC,CAAC,KAAoC,EAAE,MAAsC,EAAE,OAAoB,EAAE,EAAE;QACtG,EAAE,MAAM,CAAC,SAAS,CAAC;QACnB,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,IAAI,MAAM,IAAI,YAAY,EAAE,CAAC;YAC3B,MAAM,CAAC,MAAM,CAAE,MAAiB,EAAE,YAAY,CAAC,CAAC;QAClD,CAAC;QACD,MAAM,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC,CAAyC,CAAC;IAC/C,MAAM,CAAC,SAAS,GAAG,CAAC,CAAC;IACrB,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,EAAE;QACzC,GAAG;YACD,OAAO,IAAI,OAAO,CAAgC,OAAO,CAAC,EAAE;gBAC1D,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;YAC3B,CAAC,CAAC,CAAC;QACL,CAAC;KACF,CAAC,CAAC;IACH,OAAO,MAA8C,CAAC;AACxD,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as UI from '../ui/legacy/legacy.js';\n\ntype WidgetConstructor = abstract new (...args: any[]) => UI.Widget.Widget|HTMLElement;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ViewFunctionLike = ((input: any, output: any, target: HTMLElement) => void);\n\ntype FindViewFunction<ParametersT extends readonly unknown[]> = ParametersT extends [infer Head, ...infer Tail] ?\n    Head extends ViewFunctionLike ? Head : FindViewFunction<Tail>:\n    never;\n\ntype ViewFunction<WidgetConstructorT extends WidgetConstructor> =\n    FindViewFunction<Required<ConstructorParameters<WidgetConstructorT>>>;\n\ntype ViewFunctionParameters<WidgetConstructorT extends WidgetConstructor> =\n    Parameters<ViewFunction<WidgetConstructorT>>;\n\nexport type ViewInput<WidgetConstructorT extends WidgetConstructor> =\n    ViewFunctionParameters<WidgetConstructorT>[0];\n\nexport type ViewOutput<WidgetConstructorT extends WidgetConstructor> =\n    // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n    {} extends ViewFunctionParameters<WidgetConstructorT>[1] ? never :\n    ViewFunctionParameters<WidgetConstructorT>[1];\n\ninterface ViewStubExtensions<WidgetConstructorT extends WidgetConstructor> {\n  input: ViewInput<WidgetConstructorT>;\n  nextInput: Promise<ViewInput<WidgetConstructorT>>;\n  callCount: number;\n}\n\ninterface InternalViewStubExtensions<WidgetConstructorT extends WidgetConstructor> extends\n    ViewStubExtensions<WidgetConstructorT> {\n  invoked?: (input: ViewInput<WidgetConstructorT>) => void;\n}\n\nexport type ViewFunctionStub<WidgetConstructorT extends WidgetConstructor> =\n    ViewFunction<WidgetConstructorT>&ViewStubExtensions<WidgetConstructorT>;\n\nexport function createViewFunctionStub<WidgetConstructorT extends WidgetConstructor>(\n    constructor: WidgetConstructorT,\n    outputValues?: ViewOutput<WidgetConstructorT>): ViewFunctionStub<WidgetConstructorT> {\n  const result: InternalViewStubExtensions<WidgetConstructorT> =\n      ((input: ViewInput<WidgetConstructorT>, output: ViewOutput<WidgetConstructorT>, _target: HTMLElement) => {\n        ++result.callCount;\n        result.input = input;\n        if (output && outputValues) {\n          Object.assign((output as object), outputValues);\n        }\n        result.invoked?.(input);\n      }) as ViewFunctionStub<WidgetConstructorT>;\n  result.callCount = 0;\n  Object.defineProperty(result, 'nextInput', {\n    get() {\n      return new Promise<ViewInput<WidgetConstructorT>>(resolve => {\n        result.invoked = resolve;\n      });\n    }\n  });\n  return result as ViewFunctionStub<WidgetConstructorT>;\n}\n"]}