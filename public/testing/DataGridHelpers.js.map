{"version":3,"file":"DataGridHelpers.js","sourceRoot":"","sources":["../../../../../front_end/testing/DataGridHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  assertElements,\n  dispatchKeyDownEvent,\n} from './DOMHelpers.js';\n\nexport const getFocusableCell = (shadowRoot: ShadowRoot) => {\n  // We only expect one here, but we qSA so we can assert on only one.\n  // Can't use td as it may be a th if the user has focused a column header.\n  const tabIndexCells = shadowRoot.querySelectorAll('table [tabindex=\"0\"]');\n  assert.lengthOf(tabIndexCells, 1);\n  assert.instanceOf(tabIndexCells[0], HTMLTableCellElement);\n  return tabIndexCells[0];\n};\n\nexport const getCellByIndexes = (shadowRoot: ShadowRoot, indexes: {column: number, row: number}) => {\n  const cell = shadowRoot.querySelector<HTMLTableCellElement>(\n      `tr:nth-child(${indexes.row + 1}) td:nth-child(${indexes.column + 1})`);\n  assert.instanceOf(cell, HTMLTableCellElement);\n  return cell;\n};\n\nexport const getHeaderCells = (shadowRoot: ShadowRoot, options: {onlyVisible: boolean} = {\n  onlyVisible: false,\n}) => {\n  const cells = shadowRoot.querySelectorAll('th[jslog]');\n  assertElements(cells, HTMLTableCellElement);\n  return Array.from(cells).filter(cell => {\n    if (!options.onlyVisible) {\n      return true;\n    }\n\n    return cell.classList.contains('hidden') === false;\n  });\n};\n\nexport const getAllRows = (shadowRoot: ShadowRoot) => {\n  const rows = shadowRoot.querySelectorAll('tbody tr[jslog]');\n  assertElements(rows, HTMLTableRowElement);\n  return Array.from(rows);\n};\n\nexport const assertGridContents = (gridComponent: HTMLElement, headerExpected: string[], rowsExpected: string[][]) => {\n  const grid = gridComponent.shadowRoot?.querySelector('devtools-data-grid')!;\n  assert.isNotNull(grid.shadowRoot);\n\n  const headerActual = getHeaderCells(grid.shadowRoot).map(({textContent}) => textContent!.trim());\n  assert.deepEqual(headerActual, headerExpected);\n\n  const rowsActual = getValuesOfAllBodyRows(grid.shadowRoot).map(row => row.map(cell => cell.trim()));\n  assert.deepEqual(rowsActual, rowsExpected);\n\n  return grid;\n};\n\nexport const emulateUserKeyboardNavigation =\n    (shadowRoot: ShadowRoot, key: 'ArrowLeft'|'ArrowRight'|'ArrowUp'|'ArrowDown') => {\n      const table = shadowRoot.querySelector('table');\n      assert.instanceOf(table, HTMLTableElement);\n      dispatchKeyDownEvent(table, {key});\n    };\n\nexport const getValuesOfAllBodyRows = (shadowRoot: ShadowRoot, options: {onlyVisible: boolean} = {\n  onlyVisible: false,\n}) => {\n  const rows = getAllRows(shadowRoot);\n  return rows\n      .map(row => {\n        // now decide if the row should be included or not\n        const rowIsHidden = row.classList.contains('hidden');\n        return {\n          rowValues: [...row.querySelectorAll('td[jslog]')]\n                         .filter(cell => !options.onlyVisible || !cell.classList.contains('hidden'))\n                         .map(cell => (cell as HTMLTableCellElement).innerText.trim()),\n          hidden: options.onlyVisible && rowIsHidden,\n        };\n      })\n      .filter(row => row.hidden === false)\n      .map(r => r.rowValues);\n};\n"]}