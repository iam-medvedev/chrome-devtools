{"version":3,"file":"VisualLoggingHelpers.js","sourceRoot":"","sources":["../../../../../front_end/testing/VisualLoggingHelpers.ts"],"names":[],"mappings":"AAKA,SAAS,QAAQ,CAAC,EAAU,EAAE,OAA4B;IACxD,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;QACnB,OAAO,OAAO,CAAC,GAAG,CAAC,EAAE,CAAW,CAAC;KAClC;IACD,MAAM,MAAM,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;IACjD,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;IAC5B,OAAO,MAAM,GAAG,CAAC,CAAC;AACpB,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,WAAoE;IAEvG,MAAM,OAAO,GAAG,IAAI,GAAG,EAAkB,CAAC;IAC1C,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;QACpC,UAAU,CAAC,EAAE,GAAG,QAAQ,CAAC,UAAU,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QACjD,IAAI,UAAU,CAAC,MAAM,EAAE;YACrB,UAAU,CAAC,MAAM,GAAG,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SAC1D;KACF;IACD,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,MAAM,UAAU,cAAc,CAA+B,KAAY;IACvE,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;IACf,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,cAAc,CAC1B,KAAY,EAAE,UAA+B,IAAI,GAAG,EAAE;IACxD,MAAM,MAAM,GAAG,EAAC,GAAG,KAAK,EAAE,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,EAAC,CAAC;IAC/D,IAAI,MAAM,CAAC,MAAM,EAAE;QACjB,MAAM,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;KACxD;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as Host from '../core/host/host.js';\n\nfunction mappedId(id: number, mapping: Map<number, number>): number {\n  if (mapping.has(id)) {\n    return mapping.get(id) as number;\n  }\n  const lastId = [...mapping.values()].pop() ?? -1;\n  mapping.set(id, lastId + 1);\n  return lastId + 1;\n}\n\nexport function stabilizeImpressions(impressions: Host.InspectorFrontendHostAPI.VisualElementImpression[]):\n    Host.InspectorFrontendHostAPI.VisualElementImpression[] {\n  const mapping = new Map<number, number>();\n  for (const impression of impressions) {\n    impression.id = mappedId(impression.id, mapping);\n    if (impression.parent) {\n      impression.parent = mappedId(impression.parent, mapping);\n    }\n  }\n  return impressions;\n}\n\nexport function stabilizeEvent<Event extends {veid: number}>(event: Event): Event {\n  event.veid = 0;\n  return event;\n}\n\nexport function stabilizeState<State extends {veid: number, parent: State | null}>(\n    state: State, mapping: Map<number, number> = new Map()): State {\n  const result = {...state, veid: mappedId(state.veid, mapping)};\n  if (result.parent) {\n    result.parent = stabilizeState(result.parent, mapping);\n  }\n  return result;\n}\n"]}