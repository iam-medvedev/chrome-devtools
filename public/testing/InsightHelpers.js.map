{"version":3,"file":"InsightHelpers.js","sourceRoot":"","sources":["../../../../../front_end/testing/InsightHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../models/trace/trace.js';\n\nimport {TraceLoader} from './TraceLoader.js';\n\nexport async function processTrace(context: Mocha.Suite|Mocha.Context, traceFile: string):\n    Promise<Trace.TraceModel.ParsedTrace&{insights: Trace.Insights.Types.TraceInsightSets}> {\n  const parsedTrace = await TraceLoader.traceEngine(context, traceFile);\n  if (!parsedTrace.insights) {\n    throw new Error('No insights');\n  }\n\n  return parsedTrace as Trace.TraceModel.ParsedTrace & {insights: Trace.Insights.Types.TraceInsightSets};\n}\n\nexport function createContextForNavigation(\n    data: Trace.Handlers.Types.HandlerData, navigation: Trace.Types.Events.NavigationStart,\n    frameId: string): Trace.Insights.Types.InsightSetContextWithNavigation {\n  if (!navigation.args.data?.navigationId) {\n    throw new Error('expected navigationId');\n  }\n\n  const navigationIndex = data.Meta.mainFrameNavigations.indexOf(navigation);\n  if (navigationIndex === -1) {\n    throw new Error('unexpected navigation');\n  }\n\n  const min = navigation.ts;\n  const max = navigationIndex + 1 < data.Meta.mainFrameNavigations.length ?\n      data.Meta.mainFrameNavigations[navigationIndex + 1].ts :\n      data.Meta.traceBounds.max;\n  const bounds = Trace.Helpers.Timing.traceWindowFromMicroSeconds(min, max);\n\n  return {\n    options: {},\n    bounds,\n    frameId,\n    navigation,\n    navigationId: navigation.args.data?.navigationId,\n  };\n}\n\nexport function getInsightSetOrError(\n    insights: Trace.Insights.Types.TraceInsightSets,\n    navigation?: Trace.Types.Events.NavigationStart): Trace.Insights.Types.InsightSet {\n  let key;\n  if (navigation) {\n    if (!navigation.args.data?.navigationId) {\n      throw new Error('expected navigationId');\n    }\n    key = navigation.args.data.navigationId;\n  } else {\n    key = Trace.Types.Events.NO_NAVIGATION;\n  }\n  const insightSets = insights.get(key);\n  if (!insightSets) {\n    throw new Error(`Could not find Insights for navigation ${\n        key}. If you are trying to load an Insight for a particular navigation, you must supply it as an argument to \\`getInsightOrError\\``);\n  }\n\n  return insightSets;\n}\n\nexport function getInsightOrError<InsightName extends keyof Trace.Insights.Types.InsightModels>(\n    insightName: InsightName, insights: Trace.Insights.Types.TraceInsightSets,\n    navigation?: Trace.Types.Events.NavigationStart): Trace.Insights.Types.InsightModels[InsightName] {\n  const insightSet = getInsightSetOrError(insights, navigation);\n  const insight = insightSet.model[insightName];\n  if (insight instanceof Error) {\n    throw insight;\n  }\n\n  return insight;\n}\n\nexport function getFirstOrError<T>(iterator: IterableIterator<T>): T {\n  const result = iterator.next();\n  if (result.done || result.value === undefined) {\n    throw new Error('iterator has zero values');\n  }\n\n  return result.value;\n}\n\nexport function getFirst<T>(iterator: IterableIterator<T>): T|undefined {\n  return iterator.next().value;\n}\n"]}