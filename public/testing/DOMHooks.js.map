{"version":3,"file":"DOMHooks.js","sourceRoot":"","sources":["../../../../../front_end/testing/DOMHooks.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2025 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as UI from '../ui/legacy/legacy.js';\n\nimport {raf, removeChildren, setColorScheme, TEST_CONTAINER_ID} from './DOMHelpers.js';\n\nconst documentBodyElements = new Set<Element>();\n\nfunction removeElementOrWidget(node: Node, parent = document.body) {\n  const widget = UI.Widget.Widget.get(node);\n  if (widget) {\n    widget.detach();\n  } else {\n    parent.removeChild(node);\n  }\n}\n\n/**\n * If a widget creates a glass pane, it can get orphaned and not cleaned up correctly.\n */\nfunction removeGlassPanes() {\n  for (const pane of document.body.querySelectorAll('[data-devtools-glass-pane]')) {\n    removeElementOrWidget(pane);\n  }\n}\n/**\n * If a text editor is created we create a special parent for the tooltip\n * This does not get cleared after render, but it's internals do.\n * So we need to manually remove it\n */\nfunction removeTextEditorTooltip() {\n  // Found in front_end/ui/components/text_editor/config.ts\n  for (const tooltip of document.body.querySelectorAll('.editor-tooltip-host')) {\n    removeElementOrWidget(tooltip);\n  }\n}\n\nfunction removeAnnouncer() {\n  UI.ARIAUtils.LiveAnnouncer.removeAnnouncerElements(document.body);\n}\n\n/**\n * If a test calls localEvalCSS, an element is created on demand for this\n * purpose. This element is not removed from the DOM and will leak between tests\n * if not removed.\n */\nfunction removeCSSEvaluationElement() {\n  // Found in front_end/core/sdk/CSSPropertyParserMatchers.ts\n  const element = document.getElementById('css-evaluation-element');\n  if (element) {\n    document.body.removeChild(element);\n  }\n}\n\n/**\n * Completely cleans out the test DOM to ensure it's empty for the next test run.\n * This is run automatically between tests - you should not be manually calling this yourself.\n **/\nexport const cleanTestDOM = async (testName = '') => {\n  const previousContainer = document.getElementById(TEST_CONTAINER_ID);\n  if (previousContainer) {\n    removeChildren(previousContainer);\n    previousContainer.remove();\n  }\n  removeGlassPanes();\n  removeTextEditorTooltip();\n  removeAnnouncer();\n  removeCSSEvaluationElement();\n  // Make sure all DOM clean up happens before the raf\n  await raf();\n  // Verify that nothing was left behind\n  for (const child of document.body.children) {\n    if (!documentBodyElements.has(child)) {\n      console.error(`Test \"${testName}\" left DOM in document.body:`);\n      console.error(child);\n    }\n  }\n};\n\n/**\n * Sets up the DOM for testing,\n * If not clean logs an error and cleans itself\n **/\nexport const setupTestDOM = async () => {\n  for (const child of document.body.children) {\n    documentBodyElements.add(child);\n  }\n  const previousContainer = document.getElementById(TEST_CONTAINER_ID);\n  if (previousContainer) {\n    // This should not be reachable, unless the\n    // AfterEach hook fails before cleaning the DOM.\n    // Clean it here and report\n    console.error('Non clean test state found!');\n    await cleanTestDOM();\n  }\n  // Tests are run in light mode by default.\n  setColorScheme('light');\n  const newContainer = document.createElement('div');\n  newContainer.id = TEST_CONTAINER_ID;\n\n  // eslint-disable-next-line rulesdir/no-document-body-mutation\n  document.body.appendChild(newContainer);\n};\n"]}