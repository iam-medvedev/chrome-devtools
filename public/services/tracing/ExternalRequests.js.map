{"version":3,"file":"ExternalRequests.js","sourceRoot":"","sources":["../../../../../../front_end/services/tracing/ExternalRequests.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,KAAK,MAAM,6BAA6B,CAAC;AACrD,OAAO,KAAK,aAAa,MAAM,sCAAsC,CAAC;AAMtE;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,2BAA2B,CAC7C,KAA6B,EAAE,YAAoB;IACrD,MAAM,WAAW,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;IACxC,MAAM,cAAc,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;IAC7C,IAAI,CAAC,cAAc,IAAI,CAAC,WAAW,EAAE,CAAC;QACpC,OAAO;YACL,KAAK,EAAE,+DAA+D;SACvE,CAAC;IACJ,CAAC;IAED,sEAAsE;IACtE,wEAAwE;IACxE,kEAAkE;IAClE,MAAM,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IAC5G,MAAM,QAAQ,GACV,eAAe,CAAC,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IACjH,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO;YACL,KAAK,EAAE,8CAA8C;SACtD,CAAC;IACJ,CAAC;IAED,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAoD,CAAC;IACnG,MAAM,kBAAkB,GAAG,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;QACvD,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAC3C,OAAO,OAAO,CAAC,KAAK,KAAK,YAAY,CAAC;IACxC,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACxB,OAAO;YACL,KAAK,EAAE,uCAAuC,YAAY,EAAE;SAC7D,CAAC;IACJ,CAAC;IAED,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;IACnD,MAAM,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,EAAE,OAAO,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;IACpG,OAAO,EAAC,KAAK,EAAC,CAAC;AACjB,CAAC","sourcesContent":["// Copyright 2025 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Trace from '../../models/trace/trace.js';\nimport * as TimelineUtils from '../../panels/timeline/utils/utils.js';\n\ntype InsightResponse = {\n  focus: TimelineUtils.AIContext.AgentFocus,\n}|{error: string};\n\n/**\n * For an external request, get the insight to debug based on its user visible title.\n * Currently, this function makes some assumptions that in time we will need to\n * avoid:\n * - It assumes a trace exists that had one or zero navigations. It is unable\n *   to figure out which insight to use if there are >1 navigations -it would need\n *   some extra input data to figure it out.\n */\nexport async function getInsightAgentFocusToDebug(\n    model: Trace.TraceModel.Model, insightTitle: string): Promise<InsightResponse> {\n  const parsedTrace = model.parsedTrace();\n  const latestInsights = model.traceInsights();\n  if (!latestInsights || !parsedTrace) {\n    return {\n      error: 'No trace has been recorded, so we cannot analyze any insights',\n    };\n  }\n\n  // Right now we only support the basic Reload & Record flow and assume\n  // there is always one navigation. Longer term we need a more robust way\n  // for the request to specify which navigation it's interested in.\n  const firstNavigation = Array.from(latestInsights.keys()).find(k => k !== Trace.Types.Events.NO_NAVIGATION);\n  const insights =\n      firstNavigation ? latestInsights.get(firstNavigation) : latestInsights.get(Trace.Types.Events.NO_NAVIGATION);\n  if (!insights) {\n    return {\n      error: 'Could not find any navigation with insights.',\n    };\n  }\n\n  const insightKeys = Object.keys(insights.model) as Array<keyof Trace.Insights.Types.InsightModels>;\n  const matchingInsightKey = insightKeys.find(insightKey => {\n    const insight = insights.model[insightKey];\n    return insight.title === insightTitle;\n  });\n  if (!matchingInsightKey) {\n    return {\n      error: `Could not find matching insight for ${insightTitle}`,\n    };\n  }\n\n  const insight = insights.model[matchingInsightKey];\n  const focus = TimelineUtils.AIContext.AgentFocus.fromInsight(parsedTrace, insight, insights.bounds);\n  return {focus};\n}\n"]}