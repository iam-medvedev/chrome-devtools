{"version":3,"file":"TracingManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/services/tracing/TracingManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Trace from '../../models/trace/trace.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n  setMockConnectionResponseHandler,\n} from '../../testing/MockConnection.js';\nimport {makeInstantEvent} from '../../testing/TraceHelpers.js';\n\nimport * as Tracing from './tracing.js';\n\nclass FakeClient implements Tracing.TracingManager.TracingManagerClient {\n  traceEventsCollected(_events: Trace.Types.Events.Event[]): void {\n  }\n  tracingComplete(): void {\n  }\n  tracingBufferUsage(_usage: number): void {\n  }\n  eventsRetrievalProgress(_progress: number): void {\n  }\n}\n\nconst fakeEvents = [\n  makeInstantEvent('test-event-1', 1),\n  makeInstantEvent('test-event-2', 2),\n];\n\ndescribeWithMockConnection('TracingManager', () => {\n  beforeEach(() => {\n    setMockConnectionResponseHandler('Tracing.start', () => {\n      return {};\n    });\n    setMockConnectionResponseHandler('Tracing.end', () => {\n      return {};\n    });\n  });\n\n  it('sends bufferUsage to the client', async () => {\n    const target = createTarget();\n    const manager = new Tracing.TracingManager.TracingManager(target);\n    const client = new FakeClient();\n    const bufferUsageSpy = sinon.spy(client, 'tracingBufferUsage');\n\n    await manager.start(client, 'devtools-timeline');\n    manager.bufferUsage(10);\n    sinon.assert.calledWith(bufferUsageSpy, 10);\n  });\n\n  it('sends events to the client when they are collected and updates the client with progress', async () => {\n    const target = createTarget();\n    const manager = new Tracing.TracingManager.TracingManager(target);\n    const client = new FakeClient();\n    const eventsRetrievalProgressSpy = sinon.spy(client, 'eventsRetrievalProgress');\n    const eventsCollectedSpy = sinon.spy(client, 'traceEventsCollected');\n\n    await manager.start(client, 'devtools-timeline');\n    manager.bufferUsage(0);\n\n    manager.eventsCollected(fakeEvents);\n    sinon.assert.calledWith(eventsCollectedSpy, fakeEvents);\n    assert.approximately(0.15, eventsRetrievalProgressSpy.args[0][0], 0.01);\n  });\n\n  it('notifies the client when tracing is complete', async () => {\n    const target = createTarget();\n    const manager = new Tracing.TracingManager.TracingManager(target);\n    const client = new FakeClient();\n    const tracingCompleteSpy = sinon.spy(client, 'tracingComplete');\n    await manager.start(client, 'devtools-timeline');\n    manager.bufferUsage(0);\n    manager.eventsCollected(fakeEvents);\n    manager.tracingComplete();\n    sinon.assert.calledOnce(tracingCompleteSpy);\n  });\n\n  it('errors if tracing is started twice', async () => {\n    const target = createTarget();\n    const manager = new Tracing.TracingManager.TracingManager(target);\n    const client = new FakeClient();\n    await manager.start(client, 'devtools-timeline');\n    // The assert.throws() helper does not work with async/await, hence the manual try catch\n    let didThrow = false;\n    try {\n      await manager.start(client, 'devtools-timeline');\n    } catch (error) {\n      didThrow = true;\n      assert.strictEqual(error.message, 'Tracing is already started');\n    }\n    assert.isTrue(didThrow, 'Test did not throw an error as expected.');\n  });\n\n  it('errors if you try to stop when tracing is not active', async () => {\n    const target = createTarget();\n    const manager = new Tracing.TracingManager.TracingManager(target);\n    assert.throws(() => {\n      manager.stop();\n    }, /Tracing is not started/);\n  });\n});\n"]}