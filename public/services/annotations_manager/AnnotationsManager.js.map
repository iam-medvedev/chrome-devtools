{"version":3,"file":"AnnotationsManager.js","sourceRoot":"","sources":["../../../../../../front_end/services/annotations_manager/AnnotationsManager.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,WAAW,MAAM,6BAA6B,CAAC;AAE3D,IAAI,QAAQ,GAA4B,IAAI,CAAC;AAE7C,MAAM,OAAO,kBAAkB;IAC7B,MAAM,CAAC,QAAQ,CAAC,OAEZ,EAAC,QAAQ,EAAE,IAAI,EAAC;QAClB,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACxC,IAAI,CAAC,QAAQ,IAAI,QAAQ,EAAE,CAAC;YAC1B,QAAQ,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACtC,CAAC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,cAAc;QACnB,QAAQ,GAAG,IAAI,CAAC;IAClB,CAAC;IACD;IACA,CAAC;IAED;;OAEG;IACH,cAAc;QACZ,MAAM,uBAAuB,GAAa,EAAE,CAAC;QAC7C,MAAM,aAAa,GAAG,WAAW,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,EAAE,EAAE,gBAAgB,EAAE,CAAC;QAClG,IAAI,aAAa,EAAE,CAAC;YAClB,KAAK,MAAM,KAAK,IAAI,aAAa,EAAE,CAAC;gBAClC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC;oBACxD,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnE,CAAC;YACH,CAAC;QACH,CAAC;QAED,OAAO;YACL,0BAA0B,EAAE,uBAAuB;YACnD,+BAA+B,EAAE,EAAE;YACnC,wBAAwB,EAAE,EAAE;SAC7B,CAAC;IACJ,CAAC;IAED,sBAAsB,CAAC,KAAwD;QAC7E,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC;YACxD,OAAO,GAAG,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,IAAI,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE,IAAI,KAAK,CAAC,GAAG,EAAE,CAAC;QACrG,CAAC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;CACF","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TraceEngine from '../../models/trace/trace.js';\n\nlet instance: AnnotationsManager|null = null;\n\nexport class AnnotationsManager {\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): AnnotationsManager {\n    const forceNew = Boolean(opts.forceNew);\n    if (!instance || forceNew) {\n      instance = new AnnotationsManager();\n    }\n    return instance;\n  }\n\n  static removeInstance(): void {\n    instance = null;\n  }\n  private constructor() {\n  }\n\n  /**\n   * Builds all annotations and returns the object written into the 'annotations' trace file metada field.\n   */\n  getAnnotations(): TraceEngine.Types.File.Annotations {\n    const hashesOfSynteticEntries: string[] = [];\n    const hiddenEntries = TraceEngine.EntriesFilter.EntriesFilter.maybeInstance()?.invisibleEntries();\n    if (hiddenEntries) {\n      for (const entry of hiddenEntries) {\n        if (!TraceEngine.Types.TraceEvents.isProfileCall(entry)) {\n          hashesOfSynteticEntries.push(this.generateTraceEntryHash(entry));\n        }\n      }\n    }\n\n    return {\n      hiddenRendererEventsHashes: hashesOfSynteticEntries,\n      hiddenProfileCallsSampleIndexes: [],\n      hiddenProfileCallsDepths: [],\n    };\n  }\n\n  generateTraceEntryHash(entry: TraceEngine.Types.TraceEvents.SyntheticTraceEntry): string {\n    if (!TraceEngine.Types.TraceEvents.isProfileCall(entry)) {\n      return `${entry.cat},${entry.name},${entry.ph},${entry.pid},${entry.tid},${entry.ts},${entry.tts}`;\n    }\n    return '';\n  }\n}\n"]}