{"version":3,"file":"AnnotationsManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/services/annotations_manager/AnnotationsManager.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EAAC,WAAW,EAAC,MAAM,8BAA8B,CAAC;AAEzD,OAAO,KAAK,kBAAkB,MAAM,0BAA0B,CAAC;AAE/D,SAAS,aAAa,CAAC,IAAqE;IAE1F,IAAI,UAAU,GAAoE,IAAI,CAAC;IACvF,KAAK,MAAM,CAAC,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;QACzC,KAAK,MAAM,CAAC,EAAE,MAAM,CAAC,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;YACzC,IAAI,MAAM,CAAC,IAAI,KAAK,gBAAgB,EAAE,CAAC;gBACrC,UAAU,GAAG,MAAM,CAAC;gBACpB,MAAM;YACR,CAAC;QACH,CAAC;IACH,CAAC;IACD,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACjD,CAAC;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAS,cAAc,CACnB,UAAwE,EACxE,SACW;IACb,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACzD,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,EAAE,CAAC,mCAAmC,EAAE,KAAK;QAC3C,MAAM,OAAO,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;QACpF,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC;QACxE,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACvB,8CAA8C;QAC9C,MAAM,cAAc,GAAG,cAAc,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;YAChE,OAAO,KAAK,CAAC,IAAI,KAAK,WAAW,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG,OAAO,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QACjE,MAAM,CAAC,WAAW,CAAC,6DAA6D,EAAE,SAAS,CAAC,CAAC;IAC/F,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as TraceEngine from '../../models/trace/trace.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\n\nimport * as AnnotationsManager from './annotations_manager.js';\n\nfunction getMainThread(data: TraceEngine.Handlers.ModelHandlers.Renderer.RendererHandlerData):\n    TraceEngine.Handlers.ModelHandlers.Renderer.RendererThread {\n  let mainThread: TraceEngine.Handlers.ModelHandlers.Renderer.RendererThread|null = null;\n  for (const [, process] of data.processes) {\n    for (const [, thread] of process.threads) {\n      if (thread.name === 'CrRendererMain') {\n        mainThread = thread;\n        break;\n      }\n    }\n  }\n  if (!mainThread) {\n    throw new Error('Could not find main thread.');\n  }\n  return mainThread;\n}\n\nfunction findFirstEntry(\n    allEntries: readonly TraceEngine.Types.TraceEvents.SyntheticTraceEntry[],\n    predicate: (entry: TraceEngine.Types.TraceEvents.SyntheticTraceEntry) =>\n        boolean): TraceEngine.Types.TraceEvents.SyntheticTraceEntry {\n  const entry = allEntries.find(entry => predicate(entry));\n  if (!entry) {\n    throw new Error('Could not find expected entry.');\n  }\n  return entry;\n}\n\ndescribe('AnnotationsManager', () => {\n  it('correctly generates an entry hash', async function() {\n    const manager = AnnotationsManager.AnnotationsManager.AnnotationsManager.instance();\n    const data = await TraceLoader.traceEngine(null, 'basic-stack.json.gz');\n    const mainThread = getMainThread(data.Renderer);\n    assert.exists(manager);\n    // Find first 'Timer Fired' entry in the trace\n    const timerFireEntry = findFirstEntry(mainThread.entries, entry => {\n      return entry.name === 'TimerFire';\n    });\n\n    const entryHash = manager.generateTraceEntryHash(timerFireEntry);\n    assert.strictEqual('devtools.timeline,TimerFire,X,55385,259,164398376028,452669', entryHash);\n  });\n});\n"]}