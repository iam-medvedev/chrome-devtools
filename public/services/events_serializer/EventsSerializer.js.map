{"version":3,"file":"EventsSerializer.js","sourceRoot":"","sources":["../../../../../../front_end/services/events_serializer/EventsSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as TraceEngine from '../../models/trace/trace.js';\n\nexport class EventsSerializer {\n  #modifiedProfileCallByKey:\n      Map<TraceEngine.Types.File.ProfileCallKey, TraceEngine.Types.TraceEvents.SyntheticProfileCall> = new Map();\n\n  keyForEvent(event: TraceEngine.Types.TraceEvents.TraceEventData): TraceEngine.Types.File.TraceEventSerializableKey\n      |null {\n    if (TraceEngine.Types.TraceEvents.isProfileCall(event)) {\n      return ['p', event.pid, event.tid, TraceEngine.Types.TraceEvents.SampleIndex(event.sampleIndex), event.nodeId];\n    }\n    const rawEvents = TraceEngine.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getRawTraceEvents();\n    const key: TraceEngine.Types.File.SyntheticEventKey|TraceEngine.Types.File.RawEventKey =\n        TraceEngine.Types.TraceEvents.isSyntheticBasedEvent(event) ? ['s', rawEvents.indexOf(event.rawSourceEvent)] :\n                                                                     ['r', rawEvents.indexOf(event)];\n    if (key[1] < 0) {\n      return null;\n    }\n    return key;\n  }\n\n  static isTraceEventSerializableKey(key: (number|string)[]): key is TraceEngine.Types.File.TraceEventSerializableKey {\n    const maybeValidKey = key as TraceEngine.Types.File.TraceEventSerializableKey;\n    if (EventsSerializer.isProfileCallKey(maybeValidKey)) {\n      return key.length === 5 &&\n          key.every((entry, i) => i === 0 || typeof entry === 'number' || !isNaN(parseInt(entry, 10)));\n    }\n    if (EventsSerializer.isRawEventKey(maybeValidKey) || EventsSerializer.isSyntheticEventKey(maybeValidKey)) {\n      return key.length === 2 && (typeof key[1] === 'number' || !isNaN(parseInt(key[1], 10)));\n    }\n    return false;\n  }\n\n  eventForKey(\n      key: TraceEngine.Types.File.TraceEventSerializableKey,\n      traceParsedData: TraceEngine.Handlers.Types.TraceParseData): TraceEngine.Types.TraceEvents.TraceEventData {\n    if (EventsSerializer.isProfileCallKey(key)) {\n      return this.#getModifiedProfileCallByKey(key, traceParsedData);\n    }\n    if (EventsSerializer.isSyntheticEventKey(key)) {\n      const syntheticEvents =\n          TraceEngine.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getSyntheticTraceEvents();\n      const syntheticEvent = syntheticEvents.at(key[1]);\n      if (!syntheticEvent) {\n        throw new Error(`Attempted to get a synthetic event from an unknown raw event index: ${key[1]}`);\n      }\n      return syntheticEvent;\n    }\n    if (EventsSerializer.isRawEventKey(key)) {\n      const rawEvents =\n          TraceEngine.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager().getRawTraceEvents();\n      return rawEvents[key[1]];\n    }\n    throw new Error(`Unknown trace event serializable key: ${(key as Array<unknown>).join('-')}`);\n  }\n\n  static isProfileCallKey(key: TraceEngine.Types.File.TraceEventSerializableKey):\n      key is TraceEngine.Types.File.ProfileCallKey {\n    return key[0] === 'p';\n  }\n  static isRawEventKey(key: TraceEngine.Types.File.TraceEventSerializableKey):\n      key is TraceEngine.Types.File.RawEventKey {\n    return key[0] === 'r';\n  }\n  static isSyntheticEventKey(key: TraceEngine.Types.File.TraceEventSerializableKey):\n      key is TraceEngine.Types.File.SyntheticEventKey {\n    return key[0] === 's';\n  }\n\n  #getModifiedProfileCallByKey(\n      key: TraceEngine.Types.File.ProfileCallKey,\n      traceParsedData: TraceEngine.Handlers.Types.TraceParseData): TraceEngine.Types.TraceEvents.SyntheticProfileCall {\n    const cacheResult = this.#modifiedProfileCallByKey.get(key);\n    if (cacheResult) {\n      return cacheResult;\n    }\n    const processId = key[1];\n    const threadId = key[2];\n    const sampleIndex = key[3];\n    const nodeId = key[4];\n    const profileCallsInThread = traceParsedData.Renderer.processes.get(processId)?.threads.get(threadId)?.profileCalls;\n    if (!profileCallsInThread) {\n      throw new Error(`Unknown profile call serializable key: ${(key as Array<unknown>).join('-')}`);\n    }\n\n    // Do a binary search on the complete profile call list to efficiently lookup for a\n    // match based on sample index and node id. We need both because multiple calls can share\n    // the same sample index, in which case we need to break the tie with the node id (by which\n    // calls in a sample stack are ordered, allowing us to do a single search).\n    const matchRangeStartIndex = Platform.ArrayUtilities.nearestIndexFromBeginning(\n        profileCallsInThread, e => e.sampleIndex >= sampleIndex && e.nodeId >= nodeId);\n\n    const match = matchRangeStartIndex !== null && profileCallsInThread.at(matchRangeStartIndex);\n    if (!match) {\n      throw new Error(`Unknown profile call serializable key: ${(key as Array<unknown>).join('-')}`);\n    }\n    // Cache to avoid looking up in subsequent calls.\n    this.#modifiedProfileCallByKey.set(key, match);\n    return match;\n  }\n}\n"]}