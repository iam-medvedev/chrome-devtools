{"version":3,"file":"ModificationsManager.js","sourceRoot":"","sources":["../../../../../../front_end/services/modifications_manager/ModificationsManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport * as TimelineComponents from '../../panels/timeline/components/components.js';\n\nlet instance: ModificationsManager|null = null;\ntype EntryToNodeMap =\n    Map<TraceEngine.Types.TraceEvents.SyntheticTraceEntry, TraceEngine.Helpers.TreeHelpers.TraceEntryNode>;\n\nexport class ModificationsManager {\n  /**\n   * An Array with all trace entries.\n   * We save modifications into the trace file by saving their id in the allEntries Array.\n   **/\n  #allEntries: TraceEngine.Types.TraceEvents.SyntheticTraceEntry[];\n  #entriesFilter: TraceEngine.EntriesFilter.EntriesFilter;\n  #timelineBreadcrumbs: TimelineComponents.Breadcrumbs.Breadcrumbs;\n\n  /**\n   * A new instance is create each time a trace is recorded or loaded from a file.\n   * Both entryToNodeMap and wholeTraceBounds are mandatory to support all modifications and if one of them\n   * is not present, something has gone wrong so let's load the trace without the modifications support.\n   **/\n  static maybeInstance(opts: {\n    entryToNodeMap: EntryToNodeMap|null,\n    wholeTraceBounds: TraceEngine.Types.Timing.TraceWindowMicroSeconds|null|undefined,\n  } = {entryToNodeMap: null, wholeTraceBounds: null}): ModificationsManager|null {\n    if (opts.entryToNodeMap && opts.wholeTraceBounds) {\n      instance = new ModificationsManager(opts.entryToNodeMap, opts.wholeTraceBounds);\n    }\n    return instance;\n  }\n\n  static removeInstance(): void {\n    instance = null;\n  }\n\n  private constructor(\n      entryToNodeMap: EntryToNodeMap, wholeTraceBounds: TraceEngine.Types.Timing.TraceWindowMicroSeconds) {\n    this.#entriesFilter = new TraceEngine.EntriesFilter.EntriesFilter(entryToNodeMap);\n    this.#timelineBreadcrumbs = new TimelineComponents.Breadcrumbs.Breadcrumbs(wholeTraceBounds);\n    this.#allEntries = Array.from(entryToNodeMap.keys());\n  }\n\n  getEntriesFilter(): TraceEngine.EntriesFilter.EntriesFilter {\n    return this.#entriesFilter;\n  }\n\n  getTimelineBreadcrumbs(): TimelineComponents.Breadcrumbs.Breadcrumbs {\n    return this.#timelineBreadcrumbs;\n  }\n\n  getEntryIndex(entry: TraceEngine.Types.TraceEvents.SyntheticTraceEntry): number {\n    return this.#allEntries.indexOf(entry);\n  }\n\n  /**\n   * Builds all modifications and returns the object written into the 'modifications' trace file metada field.\n   */\n  getModifications(): TraceEngine.Types.File.Modifications {\n    const indexesOfSynteticEntries: number[] = [];\n    const hiddenEntries = this.#entriesFilter.invisibleEntries();\n    if (hiddenEntries) {\n      for (const entry of hiddenEntries) {\n        indexesOfSynteticEntries.push(this.getEntryIndex(entry));\n      }\n    }\n\n    const indexesOfModifiedEntries: number[] = [];\n    const modifiedEntries = this.#entriesFilter.expandableEntries();\n    if (modifiedEntries) {\n      for (const entry of modifiedEntries) {\n        indexesOfModifiedEntries.push(this.getEntryIndex(entry));\n      }\n    }\n\n    return {\n      entriesFilterModifications: {\n        hiddenEntriesIndexes: indexesOfSynteticEntries,\n        expandableEntriesIndexes: indexesOfModifiedEntries,\n      },\n      initialBreadcrumb: this.#timelineBreadcrumbs.initialBreadcrumb,\n    };\n  }\n\n  applyModifications(modifications: TraceEngine.Types.File.Modifications): void {\n    this.applyEntriesFilterModifications(\n        modifications.entriesFilterModifications.hiddenEntriesIndexes,\n        modifications.entriesFilterModifications.expandableEntriesIndexes);\n    this.#timelineBreadcrumbs.setInitialBreadcrumbFromLoadedModifications(modifications.initialBreadcrumb);\n  }\n\n  applyEntriesFilterModifications(hiddenEntriesIndexes: number[], expandableEntriesIndexes: number[]): void {\n    // Build the hidden events array by getting the entries by their index in the allEntries array.\n    const hiddenEntries: TraceEngine.Types.TraceEvents.SyntheticTraceEntry[] = [];\n    hiddenEntriesIndexes.map(hiddenEntryHash => {\n      const hiddenEntry = this.#allEntries[hiddenEntryHash];\n      if (hiddenEntry) {\n        hiddenEntries.push(hiddenEntry);\n      }\n    });\n    const expandableEntries: TraceEngine.Types.TraceEvents.SyntheticTraceEntry[] = [];\n    expandableEntriesIndexes.map(hiddenEntryHash => {\n      const expandableEntry = this.#allEntries[hiddenEntryHash];\n      if (expandableEntry) {\n        expandableEntries.push(expandableEntry);\n      }\n    });\n    this.#entriesFilter.setHiddenAndExpandableEntries(hiddenEntries, expandableEntries);\n  }\n}\n"]}